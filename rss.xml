<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-06-16T14:41:15.283732</updated>
  <id>9fff215b-8a46-4033-803c-c4c643689a35</id>

  
    <entry>
      <title>コンセプト -- コンセプトによるデストラクタのオーバーロードの例と参照を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/concepts.html"/>
      <id>0ef4bd46b42e2a7b0c572d29b73fc691206aa2d5:lang/cpp20/concepts.md</id>
      <updated>2021-06-16T17:09:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/concepts.md b/lang/cpp20/concepts.md
index e7a857b52..8c49d5aa3 100644
--- a/lang/cpp20/concepts.md
+++ b/lang/cpp20/concepts.md
@@ -976,3 +976,4 @@ C++14の策定において、コンセプトの複雑さを回避して必要最
 - [P1452R2 On the non-uniform semantics of return-type-requirements](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1452r2.html)
 - [P1616R1 Using unconstrained template template parameters with constrained templates](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1616r1.html)
 - [C++ Concepts - complete overview (Jakub Cislo)](http://programowaniezpasja.pl/wp-content/uploads/2019/05/Cpp_Concepts_-_complete_overview_-_Jakub_Cislo.pdf)
+- [Multiple destructors with C++ concepts - Sandor Dargo&amp;#39;s Blog](https://www.sandordargo.com/blog/2021/06/16/multiple-destructors-with-cpp-concepts)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_destructible -- コンセプトによるデストラクタのオーバーロードの例と参照を追加</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_trivially_destructible.html"/>
      <id>0ef4bd46b42e2a7b0c572d29b73fc691206aa2d5:reference/type_traits/is_trivially_destructible.md</id>
      <updated>2021-06-16T17:09:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_trivially_destructible.md b/reference/type_traits/is_trivially_destructible.md
index 7d0a44a53..bab3e1685 100644
--- a/reference/type_traits/is_trivially_destructible.md
+++ b/reference/type_traits/is_trivially_destructible.md
@@ -30,6 +30,7 @@ namespace std {
 
 
 ## 例
+### 基本的な使用例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
 
@@ -57,10 +58,80 @@ int main() {}
 ```
 * std::is_trivially_destructible[color ff0000]
 
-### 出力
+#### 出力
 ```
 ```
 
+
+### 包含する型がデストラクタを呼び出す必要があるかないかで、デストラクタの定義を分ける (C++11)
+```cpp
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+class TrivialBase {
+public:
+  ~TrivialBase() = default;
+};
+
+class NonTrivialBase {
+public:
+  ~NonTrivialBase() {
+    std::cout &amp;lt;&amp;lt; &amp;#34;destruct&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+};
+
+template &amp;lt;class T&amp;gt;
+class A : public std::conditional&amp;lt;
+            std::is_trivially_destructible&amp;lt;T&amp;gt;::value,
+            TrivialBase,
+            NonTrivialBase
+          &amp;gt;::type {
+  T x;
+};
+
+int main()
+{
+  A&amp;lt;int&amp;gt; a;         // trivially destructible
+  A&amp;lt;std::string&amp;gt; b; // non trivially destructible
+}
+```
+* std::conditional[link conditional.md]
+
+#### 出力
+```
+destruct
+```
+
+### 包含する型がデストラクタを呼び出す必要があるかないかで、デストラクタの定義を分ける (C++20)
+```cpp
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+template &amp;lt;class T&amp;gt;
+class A {
+  T x;
+public:
+  ~A() requires(!std::is_trivially_destructible_v&amp;lt;T&amp;gt;) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;destruct&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+
+  ~A() = default;
+};
+
+int main()
+{
+  A&amp;lt;int&amp;gt; a;         // trivially destructible
+  A&amp;lt;std::string&amp;gt; b; // non trivially destructible
+}
+```
+
+#### 出力
+```
+destruct
+```
+
 ## バージョン
 ### 言語
 - C++11
@@ -71,7 +142,12 @@ int main() {}
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013, 2015
 
 
+#### 備考
+- Clang 12.0時点では、コンセプトによるデストラクタのオーバーロードはサポートされておらず、コンパイルエラーになるか、もしくはオーバーロードしたデストラクタが動作しない。[Bug 50570 - Clang either crashes or choose wrong destructor when using multiple destructors using C++20 constraints](https://bugs.llvm.org/show_bug.cgi?id=50570)
+
+
 ## 参照
 - [P0006R0 Adopt Type Traits Variable Templates from Library Fundamentals TS for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0006r0.html)
 - [An Example that Omits Destructor Calls For Types with Trivial Destructors](http://www.boost.org/doc/libs/1_65_1/libs/type_traits/doc/html/boost_typetraits/examples/destruct.html)
     - デストラクタを呼び出す必要のない型の配列に対して、デストラクタを呼び出すループを省略する最適化の例
+- [Multiple destructors with C++ concepts - Sandor Dargo&amp;#39;s Blog](https://www.sandordargo.com/blog/2021/06/16/multiple-destructors-with-cpp-concepts)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_string -- Revert &#34;to_string/to_wstring : 実装例として浮動小数点数は%fじゃなく%gだった&#34;</title>
      <link href="https://cpprefjp.github.io/reference/string/to_string.html"/>
      <id>47a1d03304bf7e4268b76bed5253cd1cddcf406b:reference/string/to_string.md</id>
      <updated>2021-06-16T16:05:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/to_string.md b/reference/string/to_string.md
index 5d1866eb2..8cbbb3b90 100644
--- a/reference/string/to_string.md
+++ b/reference/string/to_string.md
@@ -121,7 +121,7 @@ std::string to_string(float val)
   char buffer[std::numeric_limits&amp;lt;float&amp;gt;::max_exponent10 + 1
           + 6   // fixed precision (printf&amp;#39;s default)
           + 3]; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
-  std::sprintf(buffer, &amp;#34;%g&amp;#34;, val);
+  std::sprintf(buffer, &amp;#34;%f&amp;#34;, val);
   return buffer;
 }
 
@@ -130,7 +130,7 @@ std::string to_string(double val)
   char buffer[std::numeric_limits&amp;lt;double&amp;gt;::max_exponent10 + 1
           + 6   // fixed precision (printf&amp;#39;s default)
           + 3]; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
-  std::sprintf(buffer, &amp;#34;%g&amp;#34;, val);
+  std::sprintf(buffer, &amp;#34;%f&amp;#34;, val);
   return buffer;
 }
 
@@ -139,7 +139,7 @@ std::string to_string(long double val)
   char buffer[std::numeric_limits&amp;lt;long double&amp;gt;::max_exponent10 + 1
           + 6   // fixed precision (printf&amp;#39;s default)
           + 3]; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
-  std::sprintf(buffer, &amp;#34;%Lg&amp;#34;, val);
+  std::sprintf(buffer, &amp;#34;%Lf&amp;#34;, val);
   return buffer;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_wstring -- Revert &#34;to_string/to_wstring : 実装例として浮動小数点数は%fじゃなく%gだった&#34;</title>
      <link href="https://cpprefjp.github.io/reference/string/to_wstring.html"/>
      <id>47a1d03304bf7e4268b76bed5253cd1cddcf406b:reference/string/to_wstring.md</id>
      <updated>2021-06-16T16:05:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/to_wstring.md b/reference/string/to_wstring.md
index 99ec7344e..665f5570d 100644
--- a/reference/string/to_wstring.md
+++ b/reference/string/to_wstring.md
@@ -128,7 +128,7 @@ std::wstring to_wstring(float val)
                            + 6  // fixed precision (printf&amp;#39;s default)
                            + 3; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
   wchar_t buffer[size];
-  std::swprintf(buffer, size, L&amp;#34;%g&amp;#34;, val);
+  std::swprintf(buffer, size, L&amp;#34;%f&amp;#34;, val);
   return buffer;
 }
 
@@ -139,7 +139,7 @@ std::wstring to_wstring(double val)
                            + 3; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
 
   wchar_t buffer[size];
-  std::swprintf(buffer, size, L&amp;#34;%g&amp;#34;, val);
+  std::swprintf(buffer, size, L&amp;#34;%f&amp;#34;, val);
   return buffer;
 }
 
@@ -149,7 +149,7 @@ std::wstring to_wstring(long double val)
                            + 6  // fixed precision (printf&amp;#39;s default)
                            + 3; // &amp;#39;-&amp;#39; + &amp;#39;.&amp;#39; + &amp;#39;\0&amp;#39;
   wchar_t buffer[size];
-  std::swprintf(buffer, size, L&amp;#34;%Lg&amp;#34;, val);
+  std::swprintf(buffer, size, L&amp;#34;%Lf&amp;#34;, val);
   return buffer;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_not_equal -- Update cmp_not_equal.md</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_not_equal.html"/>
      <id>7d4b44b0f45a5d47c109691d963f0d912d39676e:reference/utility/cmp_not_equal.md</id>
      <updated>2021-06-15T18:54:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_not_equal.md b/reference/utility/cmp_not_equal.md
index 0368fc409..642235b50 100644
--- a/reference/utility/cmp_not_equal.md
+++ b/reference/utility/cmp_not_equal.md
@@ -28,7 +28,7 @@ for (int i = 0; i &amp;lt; v.size(); ++i) {}
 以下と等価：
 
 ```cpp
-return cmp_equal(t, u);
+return !cmp_equal(t, u);
 ```
 * cmp_equal[link cmp_equal.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
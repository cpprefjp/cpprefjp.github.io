<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-17T11:28:55.107191</updated>
  <id>283add4f-556d-4c19-a8c3-e1a4ef1db465</id>

  
    <entry>
      <title>format -- format : Rangeのデバッグ出力を解除する例を記載 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>dd2fa16c526d237459f87e1b6b2511545779968d:reference/format/format.md</id>
      <updated>2023-01-17T20:24:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index ad5be5954..110f2a53d 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -168,6 +168,8 @@ Range・シーケンスコンテナに対して使用できる標準のオプシ
 
 - `?s`書式を指定した場合、`n`オプションと、`range-underlying-spec`は指定できない。
 - コンテナが[`std::vector`](/reference/vector/vector.md)`&amp;lt;bool&amp;gt;`である場合、その要素型は`bool`として処理される
+- Range・シーケンスコンテナでは、要素型がデバッグ出力可能である場合、それがデフォルトで有効となる
+    - 要素型の書式を指定して、デバッグ出力指定をしなければ、デフォルトで有効になっているデバッグ出力を解除できる
 
 
 #### 連想コンテナの場合 (C++23)
@@ -200,7 +202,7 @@ Range・シーケンスコンテナと同じだが、デフォルトで`m`書式
 | (なし) | デフォルト | `tuple{3, 1.23, &amp;#34;hello&amp;#34;}`は`(3, 1.23, &amp;#34;hello&amp;#34;)`となる | C++23 |
 
 - 要素型ごとに個別に書式を指定することはできない
-- 文字列はデバッグ出力が常に有効
+- デバッグ出力可能な要素型の場合、デバッグ出力は常に有効
 
 
 ### 書式例
@@ -388,10 +390,16 @@ int main() {
   std::vector&amp;lt;int&amp;gt; vx = {0xf, 0x1e, 0x3c};
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5. {::#x}&amp;#34;, vx) &amp;lt;&amp;lt; std::endl;
 
+  // コンテナの要素型が文字・文字列型の場合はデフォルトでデバッグ出力 (?) が適用されるが、
+  // 要素への書式指定として ? を指定しなければ、デバッグ出力が解除される
+  std::vector&amp;lt;std::string&amp;gt; vt = {&amp;#34;h\tello&amp;#34;, &amp;#34;w\norld&amp;#34;, &amp;#34;C++&amp;#34;};
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6. {:}&amp;#34;, vt) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7. {::}&amp;#34;, vt) &amp;lt;&amp;lt; std::endl;
+
   // 文字を要素とするコンテナは文字列として出力させることもできる
   std::vector&amp;lt;char&amp;gt; vc = {&amp;#39;h&amp;#39;, &amp;#39;\n&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;};
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6. {:s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7. {:?s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;8. {:s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;9. {:?s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::ranges::views::iota[link /reference/ranges/iota_view.md]
@@ -404,9 +412,12 @@ int main() {
 3. {1, 2, 3}
 4. [1, 2, 3, 4]
 5. [0xf, 0x1e, 0x3c]
-6. h
+6. [&amp;#34;h\tello&amp;#34;, &amp;#34;w\norld&amp;#34;, &amp;#34;C++&amp;#34;]
+7. [h    ello, w
+orld, C++]
+8. h
 ello
-7. &amp;#34;h\nello&amp;#34;
+9. &amp;#34;h\nello&amp;#34;
 ```
 
 ### pair、tupleを出力する (C++23)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数テンプレート -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_templates.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:lang/cpp11/variadic_templates.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_templates.md b/lang/cpp11/variadic_templates.md
index 34e2c5a10..fefba1917 100644
--- a/lang/cpp11/variadic_templates.md
+++ b/lang/cpp11/variadic_templates.md
@@ -40,7 +40,6 @@ void f(Args... args)
 
 f(3, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
 ```
-* std::tuple[link /reference/tuple/tuple.md]
 
 パラメータパックを最初の要素から順番に処理していきたい場合には、「任意の型のパラメータをひとつと、任意の個数の任意の型のパラメータを受け取る」というような形式のパラメータリストとし、再帰によって処理をする：
 
@@ -201,7 +200,6 @@ hello
       f(a, b);
     }
     ```
-    * std::tuple[link /reference/tuple/tuple.md]
     * std::make_tuple[link /reference/tuple/make_tuple.md]
 
 - テンプレートパラメータ
@@ -247,7 +245,6 @@ hello
     ```cpp
     std::tuple&amp;lt;Args...&amp;gt; t;
     ```
-    * std::tuple[link /reference/tuple/tuple.md]
 
 - 初期化子
 
@@ -356,7 +353,6 @@ hello
       &amp;gt;::value, &amp;#34;&amp;#34;); // OK
     }
     ```
-    * std::tuple[link /reference/tuple/tuple.md]
     * static_assert[link static_assert.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛 -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/structured_bindings.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:lang/cpp17/structured_bindings.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/structured_bindings.md b/lang/cpp17/structured_bindings.md
index 9d725be6a..6dc9d9971 100644
--- a/lang/cpp17/structured_bindings.md
+++ b/lang/cpp17/structured_bindings.md
@@ -122,7 +122,6 @@ int main()
   }
 }
 ```
-* std::tuple[link /reference/tuple/tuple.md]
 * std::forward_as_tuple[link /reference/tuple/forward_as_tuple.md]
 
 #### 出力
@@ -325,7 +324,6 @@ C++17時点の構造化束縛では、使用しない変数もコピーあるい
 std::tuple&amp;lt;T1, std::pair&amp;lt;T2, T3&amp;gt;, T4&amp;gt; f();
 auto { w, {x, y}, z } = f(); // このような、tuple内にあるpairを同時に分解はできない
 ```
-* std::tuple[link /reference/tuple/tuple.md]
 
 
 ## 関連項目
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>クラステンプレートのテンプレート引数推論 -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:lang/cpp17/type_deduction_for_class_templates.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/type_deduction_for_class_templates.md b/lang/cpp17/type_deduction_for_class_templates.md
index 141b334e8..a6c5bcc05 100644
--- a/lang/cpp17/type_deduction_for_class_templates.md
+++ b/lang/cpp17/type_deduction_for_class_templates.md
@@ -191,7 +191,6 @@ int main()
 * std::function[link /reference/functional/function.md]
 * std::weak_ptr[link /reference/memory/weak_ptr.md]
 * wp.lock()[link /reference/memory/weak_ptr/lock.md]
-* std::tuple[link /reference/tuple/tuple.md]
 * std::make_tuple[link /reference/tuple/make_tuple.md]
 * std::promise[link /reference/future/promise.md]
 * p.get_future()[link /reference/future/promise/get_future.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正 -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/adl_and_function_templates_that_are_not_visible.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:lang/cpp20/adl_and_function_templates_that_are_not_visible.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
index 2843c7bde..0854827db 100644
--- a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
+++ b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
@@ -53,7 +53,6 @@ int main() {
   std::cout &amp;lt;&amp;lt; get&amp;lt;0&amp;gt;(t) &amp;lt;&amp;lt; std::endl; // C++17:NG C++20:OK
 }
 ```
-* std::tuple[link /reference/tuple/tuple.md]
 * get[link /reference/tuple/tuple/get.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数を条件付きでexplicitにする構文を追加 -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/explicit_bool.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:lang/cpp20/explicit_bool.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/explicit_bool.md b/lang/cpp20/explicit_bool.md
index d8cc56606..1981098fd 100644
--- a/lang/cpp20/explicit_bool.md
+++ b/lang/cpp20/explicit_bool.md
@@ -94,7 +94,6 @@ std::tuple&amp;lt;int, int&amp;gt; pixel_coordinates()
 struct NonCopyable { NonCopyable(int); NonCopyable(const NonCopyable&amp;amp;) = delete; };
 std::pair&amp;lt;NonCopyable, double&amp;gt; pmd{42, 3.14};  // C++14でコンパイルエラー！
 ```
-* std::tuple[link /reference/tuple/tuple.md]
 
 この問題に対して、C++17では (対応が早い処理系はそれ以前から) これらのクラスのコンストラクタが、条件付きで`explicit`定義されるようにした。その実装方法としてはSFINAEによって、`explicit`コンストラクタと非`explicit`コンストラクタをオーバーロードする方法が使われていた。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uses_allocator_construction_args -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/memory/uses_allocator_construction_args.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/memory/uses_allocator_construction_args.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uses_allocator_construction_args.md b/reference/memory/uses_allocator_construction_args.md
index d3862b4e9..3596122c2 100644
--- a/reference/memory/uses_allocator_construction_args.md
+++ b/reference/memory/uses_allocator_construction_args.md
@@ -215,7 +215,6 @@ int main()
 * std::allocator_arg_t[link allocator_arg_t.md]
 * std::ostream[link ../ostream/basic_ostream.md]
 * std::piecewise_construct_t[link ../utility/piecewise_construct_t.md]
-* std::tuple[link ../tuple/tuple.md]
 * std::apply[link ../tuple/apply.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forward_as_tuple -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/forward_as_tuple.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/forward_as_tuple.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/forward_as_tuple.md b/reference/tuple/forward_as_tuple.md
index ecd0095c9..82e5c72da 100644
--- a/reference/tuple/forward_as_tuple.md
+++ b/reference/tuple/forward_as_tuple.md
@@ -48,7 +48,6 @@ int main()
 }
 ```
 * std::forward_as_tuple[color ff0000]
-* std::tuple[link tuple.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_tuple -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/make_tuple.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/make_tuple.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/make_tuple.md b/reference/tuple/make_tuple.md
index 596be8540..237294775 100644
--- a/reference/tuple/make_tuple.md
+++ b/reference/tuple/make_tuple.md
@@ -54,7 +54,6 @@ int main()
 }
 ```
 * std::make_tuple[color ff0000]
-* std::tuple[link tuple.md]
 * std::ref[link /reference/functional/ref.md]
 * std::cref[link /reference/functional/cref.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tie -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tie.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/tie.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tie.md b/reference/tuple/tie.md
index b94c9d975..f27dd9616 100644
--- a/reference/tuple/tie.md
+++ b/reference/tuple/tie.md
@@ -78,7 +78,6 @@ int main()
 ```
 * std::tie[color ff0000]
 * std::ignore[link ignore.md]
-* std::tuple[link tuple.md]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/tuple.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple.md b/reference/tuple/tuple.md
index 6b55fb90a..a4a196ca8 100644
--- a/reference/tuple/tuple.md
+++ b/reference/tuple/tuple.md
@@ -93,7 +93,6 @@ int main()
   std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
 }
 ```
-* std::tuple[color ff0000]
 * std::get[link tuple/get.md]
 * std::make_tuple[link make_tuple.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_cat -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple_cat.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/tuple_cat.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple_cat.md b/reference/tuple/tuple_cat.md
index 2c278f82d..f1a557365 100644
--- a/reference/tuple/tuple_cat.md
+++ b/reference/tuple/tuple_cat.md
@@ -55,7 +55,6 @@ int main()
 }
 ```
 * std::tuple_cat[color ff0000]
-* std::tuple[link tuple.md]
 * std::get[link tuple/get.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_element -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple_element.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/tuple_element.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple_element.md b/reference/tuple/tuple_element.md
index 8cc6c5558..06543ace0 100644
--- a/reference/tuple/tuple_element.md
+++ b/reference/tuple/tuple_element.md
@@ -80,7 +80,6 @@ int main()
 }
 ```
 * std::tuple_element[color ff0000]
-* std::tuple[link tuple.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_size -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple_size.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/tuple_size.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple_size.md b/reference/tuple/tuple_size.md
index 7132b6c54..d20516e29 100644
--- a/reference/tuple/tuple_size.md
+++ b/reference/tuple/tuple_size.md
@@ -67,7 +67,6 @@ int main()
 }
 ```
 * std::tuple_size[color ff0000]
-* std::tuple[link tuple.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>index_sequence_for -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/utility/index_sequence_for.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/utility/index_sequence_for.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/index_sequence_for.md b/reference/utility/index_sequence_for.md
index 3aceab4d6..8f1a90940 100644
--- a/reference/utility/index_sequence_for.md
+++ b/reference/utility/index_sequence_for.md
@@ -53,7 +53,6 @@ int main()
 ```
 * std::index_sequence_for[color ff0000]
 * std::integer_sequence[link integer_sequence.md]
-* std::tuple[link /reference/tuple/tuple.md]
 * std::make_tuple[link /reference/tuple/make_tuple.md]
 
 ## 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_constructor.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/utility/pair/op_constructor.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_constructor.md b/reference/utility/pair/op_constructor.md
index f7039ea23..72d83c383 100644
--- a/reference/utility/pair/op_constructor.md
+++ b/reference/utility/pair/op_constructor.md
@@ -113,7 +113,6 @@ constexpr pair(piecewise_construct_t,
     struct NonCopyable { NonCopyable(int); NonCopyable(const NonCopyable&amp;amp;) = delete; };
     std::pair&amp;lt;NonCopyable, double&amp;gt; pmd{42, 3.14};  // C++14でコンパイルエラー！
     ```
-    * std::tuple[link /reference/tuple/tuple.md]
 
     - この変更はC++17に対するものであるが、コンパイラが早期に対応していたため、一部処理系ではC++14の段階から適格となっていた
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- format : Rangeの要素に対する書式指定の例を記載 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>2497046e4f89beeaffa4c0f7f3a014c4b6560e0e:reference/format/format.md</id>
      <updated>2023-01-17T19:47:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index a30e60934..ad5be5954 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -384,10 +384,14 @@ int main() {
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3. {}&amp;#34;, s) &amp;lt;&amp;lt; std::endl;
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4. {}&amp;#34;, r) &amp;lt;&amp;lt; std::endl;
 
+  // Rangeの書式指定のあと、:で区切って要素に対する書式指定ができる (ここでは16進数出力)
+  std::vector&amp;lt;int&amp;gt; vx = {0xf, 0x1e, 0x3c};
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5. {::#x}&amp;#34;, vx) &amp;lt;&amp;lt; std::endl;
+
   // 文字を要素とするコンテナは文字列として出力させることもできる
   std::vector&amp;lt;char&amp;gt; vc = {&amp;#39;h&amp;#39;, &amp;#39;\n&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;};
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5. {:s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6. {:?s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6. {:s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7. {:?s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::ranges::views::iota[link /reference/ranges/iota_view.md]
@@ -399,9 +403,10 @@ int main() {
 2. {1: &amp;#34;aaa&amp;#34;, 2: &amp;#34;bbb&amp;#34;}
 3. {1, 2, 3}
 4. [1, 2, 3, 4]
-5. h
+5. [0xf, 0x1e, 0x3c]
+6. h
 ello
-6. &amp;#34;h\nello&amp;#34;
+7. &amp;#34;h\nello&amp;#34;
 ```
 
 ### pair、tupleを出力する (C++23)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ios -- hexfloat : GCCで入力での使用にバグがあることを記載</title>
      <link href="https://cpprefjp.github.io/reference/ios.html"/>
      <id>44c43e183739ddba0b62ede3da2f5e5d4d9a38fe:reference/ios.md</id>
      <updated>2023-01-17T18:31:24+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;ios&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ios&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;ios&amp;gt;&lt;/code&gt;ヘッダでは、入出力処理共通の基底クラスやマニピュレータ（の実体である関数）などが定義されている。&lt;/p&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iosfwd.md.nolink&#34;&gt;&amp;lt;iosfwd&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;型と関数（マニピュレータを除く）&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/type-streamoff.html&#34;&gt;streamoff&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルサイズの表現に適した符号付き整数型 (type-alias)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/type-streamsize.html&#34;&gt;streamsize&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力操作のバイト数などの表現に適した符号付き整数型 (type-alias)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/fpos.html&#34;&gt;fpos&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリーム上の位置を表現する型 (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/ios_base.html&#34;&gt;ios_base&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力の最基底クラス (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/basic_ios.html&#34;&gt;basic_ios&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力共通の基底クラス (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/io_errc.html&#34;&gt;io_errc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力のエラー値 (enum class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/is_error_code_enum.html&#34;&gt;is_error_code_enum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;io_errc&lt;/code&gt;をエラーコードとして扱うための特殊化 (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/make_error_code.html&#34;&gt;make_error_code&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;io_errc&lt;/code&gt;から&lt;code&gt;error_code&lt;/code&gt;を生成する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/make_error_condition.html&#34;&gt;make_error_condition&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;io_errc&lt;/code&gt;から&lt;code&gt;error_condition&lt;/code&gt;を生成する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/iostream_category.html&#34;&gt;iostream_category&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;io_errc&lt;/code&gt;のためのエラーカテゴリを取得する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マニピュレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bool値を文字列として入出力させる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/noboolalpha.html&#34;&gt;noboolalpha&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bool値を数値表記で入出力させる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/showbase.html&#34;&gt;showbase&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基数などを表すプレフィックスを出力させる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/noshowbase.html&#34;&gt;noshowbase&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基数などを表すプレフィックスを出力させない&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/showpoint.html&#34;&gt;showpoint&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小数点を常に出力させる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/noshowpoint.html&#34;&gt;noshowpoint&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小数点を不要なら出力させない&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/showpos.html&#34;&gt;showpos&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正符号を出力させる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/noshowpos.html&#34;&gt;noshowpos&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正符号を出力させない&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/skipws.html&#34;&gt;skipws&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式入力操作前に空白を読み飛ばさせる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/noskipws.html&#34;&gt;noskipws&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式入力操作前の空白の読み飛ばしを行わない&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/uppercase.html&#34;&gt;uppercase&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;英大文字の表記で出力&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/nouppercase.html&#34;&gt;nouppercase&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;英小文字の表記で出力&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/unitbuf.html&#34;&gt;unitbuf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力操作の都度バッファを吐き出す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/nounitbuf.html&#34;&gt;nounitbuf&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力操作を終えても必要に応じてバッファに蓄える&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/internal.html&#34;&gt;internal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;両端揃え&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/left.html&#34;&gt;left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左揃え&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/right.html&#34;&gt;right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右揃え&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/dec.html&#34;&gt;dec&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;十進法で入出力（整数）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/hex.html&#34;&gt;hex&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;十六進法で入出力（整数）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/oct.html&#34;&gt;oct&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;八進法で入出力（整数）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/fixed.html&#34;&gt;fixed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小数点数表記で入出力（浮動小数点数）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/scientific.html&#34;&gt;scientific&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指数表記で入出力（浮動小数点数）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/hexfloat.html&#34;&gt;hexfloat&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;十六進法での指数表記で入出力（浮動小数点数）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/defaultfloat.html&#34;&gt;defaultfloat&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小数点数・指数表記の自動切り替え（浮動小数点数）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fixed -- hexfloat : GCCで入力での使用にバグがあることを記載</title>
      <link href="https://cpprefjp.github.io/reference/ios/fixed.html"/>
      <id>44c43e183739ddba0b62ede3da2f5e5d4d9a38fe:reference/ios/fixed.md</id>
      <updated>2023-01-17T18:31:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/fixed.md b/reference/ios/fixed.md
index 246c21118..05eacc1ef 100644
--- a/reference/ios/fixed.md
+++ b/reference/ios/fixed.md
@@ -10,7 +10,7 @@ namespace std {
 ```
 
 ## 概要
-浮動小数点数を固定小数点表記で出力することを指示するマニピュレータ。
+浮動小数点数を固定小数点表記で入出力することを指示するマニピュレータ。
 
 ## 効果
 `str.setf(ios_base::fixed, ios_base::floatfield)`を実行する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hexfloat -- hexfloat : GCCで入力での使用にバグがあることを記載</title>
      <link href="https://cpprefjp.github.io/reference/ios/hexfloat.html"/>
      <id>44c43e183739ddba0b62ede3da2f5e5d4d9a38fe:reference/ios/hexfloat.md</id>
      <updated>2023-01-17T18:31:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/hexfloat.md b/reference/ios/hexfloat.md
index 4b57d7672..9eae0997d 100644
--- a/reference/ios/hexfloat.md
+++ b/reference/ios/hexfloat.md
@@ -11,7 +11,7 @@ namespace std {
 ```
 
 ## 概要
-浮動小数点数を十六進法で出力することを指示するマニピュレータ。
+浮動小数点数を十六進法で入出力することを指示するマニピュレータ。
 
 [`printf()`](http://linuxjm.osdn.jp/html/LDP_man-pages/man3/printf.3.html)関数の`%a`／`%A`相当。
 
@@ -31,9 +31,14 @@ namespace std {
 ### 処理系
 - [Clang](/implementation.md#clang): 3.0
 - [GCC](/implementation.md#gcc): 5.0
-- [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2008, 2010, 2012
 
+
+#### 備考
+- GCCは12.0時点で、入力ストリームでの`hexfloat`の使用に対応していない。使用すると値0が入力される (エラーにならない)
+    - [Bug 81122 - [DR 2381] parsing f stopped after &amp;#39;0&amp;#39; when reading `std::hexfloat &amp;gt;&amp;gt; f;`](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81122)
+
+
 ## 参照
 - [`defaultfloat`](defaultfloat.md)
 - [`fixed`](fixed.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scientific -- hexfloat : GCCで入力での使用にバグがあることを記載</title>
      <link href="https://cpprefjp.github.io/reference/ios/scientific.html"/>
      <id>44c43e183739ddba0b62ede3da2f5e5d4d9a38fe:reference/ios/scientific.md</id>
      <updated>2023-01-17T18:31:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ios/scientific.md b/reference/ios/scientific.md
index 388f6a913..b6af30926 100644
--- a/reference/ios/scientific.md
+++ b/reference/ios/scientific.md
@@ -10,7 +10,7 @@ namespace std {
 ```
 
 ## 概要
-浮動小数点数を指数表記で出力することを指示するマニピュレータ。
+浮動小数点数を指数表記で入出力することを指示するマニピュレータ。
 
 ## 効果
 `str.setf(ios_base::scientific, ios_base::floatfield)`を実行する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変長データを扱うクラスの効率的な`delete` -- 仕様と例の追記 #1102</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.html"/>
      <id>f86e3825c89e743aedfdd3d66a1850cbd74d63f2:lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md</id>
      <updated>2023-01-17T18:15:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
index cffee868b..dc5424748 100644
--- a/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
+++ b/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md
@@ -69,10 +69,62 @@ int main() {
 
 ## 仕様
 
-- クラス`C`に対する*destroying operator delete*の第一引数は`C*`でなければならない
-- *destroying operator delete*の戻り値型は`void`でなければならない
+クラススコープで定義された`operator delete()`で、第二引数が`std::destroying_delete_t`であるものを*destroying operator delete*と呼ぶ。クラス`C`に対する*destroying operator delete*の第一引数は`C*`でなければならず、その2点以外は通常の`operator delete`オーバーロードの制約に従う。
 
-（執筆中）
+```cpp
+struct S {
+  // これらの宣言はいずれも、destroying operator deleteではない（コンパイルエラーとなる）
+  void operator delete(void*, std::destroying_delete_t);      // 第一引数はS*
+  void operator delete(S*, auto);                             // 第二引数は std::destroying_delete_t
+  int* operator delete(S*, std::destroying_delete_t);         // 戻り値はvoid
+  virtual void operator delete(S*, std::destroying_delete_t); // 仮想関数にできない
+};
+```
+
+単一オブジェクトに対する`delete`式の実行に伴う`operator delete`の探索の結果、その候補の中に*destroying operator delete*が含まれている場合、*destroying operator delete*ではない`operator delete`は候補から外れる。
+
+```cpp
+struct S {
+  // destroying operator delete
+  void operator delete(S*, std::destroying_delete_t);
+
+  // destroying operator deleteが定義されている限り、こちらが呼び出されることはない
+  void operator delete(void*);
+};
+```
+
+ただし、配列に対する`delete`式の場合は、*destroying operator delete*は考慮されない。
+
+```cpp
+struct S {
+  // #1 destroying operator delete
+  void operator delete(S* p, std::destroying_delete_t) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;S::operator delete()\n&amp;#34;;
+
+    std::destroy_at(p);
+    ::operator delete(p);
+  }
+};
+
+int main() {
+  S* p = new S[1]{};
+
+  // #1は呼び出されず、要素ごとに破棄された後で配列の領域が解放される
+  delete[] p;
+}
+```
+
+また、配列板の`operator delete[]`を*destroying operator delete*としてオーバーロードすることもできない。
+
+```cpp
+struct S {
+  void operator delete[](S* p, std::destroying_delete_t); // ng
+};
+```
+
+単一オブジェクトに対する`delete`式においてそのオブジェクトの静的型と動的型が一致しない場合（つまり、基底クラスのポインタから派生クラスのオブジェクトを`delete`しようとする場合など）、その静的型はその動的型の基底クラスである必要があり両方の型に仮想デストラクタが必要となるが、*destroying operator delete*が`operator delete`として使用される場合にはその必要はない。したがって、*destroying operator delete*が使用されない場合に`delete`式が指定されたポインタの指す最も派生したオブジェクトを削除せず未定義動作になるような場合（仮想デストラクタの定義忘れなど）でも、*destroying operator delete*が使用された場合は未定義動作とならない（ただし、呼び出された*destroying operator delete*がそのオブジェクトを正しく破棄しない場合は未定義動作となりうる）。
+
+*destroying operator delete*が`operator delete`として使用される`delete`式の実行において、`delete`式は`delete`対象オブジェクトのデストラクタを呼び出さないで`operator delete`を呼び出す。また、その際の*destroying operator delete*の第二引数（`std::destroying_delete_t`に対応する引数）に渡される値は未規定。
 
 ## 例
 
@@ -159,7 +211,7 @@ int main() {
 * std::ranges::destroy[link /reference/memory/ranges_destroy.md]
 
 
-### 出力
+#### 出力
 
 ```
 inlined_fixed_string::Make() : 47 byte allocate.
@@ -167,6 +219,78 @@ C++20 destroying operator delete test.
 inlined_fixed_string::operator delete() : 47 byte deallocate.
 ```
 
+### 正しいデストラクタへのディスパッチ
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;new&amp;gt;
+
+// 仮想デストラクタを定義しない基底クラス
+struct base {
+  int kind = 0;
+
+  // destroying operator delete宣言 #1
+  void operator delete(base* p, std::destroying_delete_t);
+};
+
+struct derived1 : base {
+  derived1() : base{1} {}
+};
+
+struct derived2 : base {
+  derived2() : base{2} {}
+};
+
+// #1に対応する定義
+void base::operator delete(base* p, std::destroying_delete_t) {
+
+  switch(p-&amp;gt;kind) {
+    case 1:
+    {
+      auto* dp = static_cast&amp;lt;derived1*&amp;gt;(p);
+      std::destroy_at(dp);
+      ::operator delete(dp);
+      std::cout &amp;lt;&amp;lt; &amp;#34;destruct derived1\n&amp;#34;;
+      break;
+    }
+    case 2:
+    {
+      auto* dp = static_cast&amp;lt;derived2*&amp;gt;(p);
+      std::destroy_at(dp);
+      ::operator delete(dp);
+      std::cout &amp;lt;&amp;lt; &amp;#34;destruct derived2\n&amp;#34;;
+      break;
+    }
+    default:
+      std::destroy_at(p);
+      ::operator delete(p);
+      std::cout &amp;lt;&amp;lt; &amp;#34;destruct base\n&amp;#34;;
+  }
+}
+
+int main() {
+  {
+    base* p = new derived1{};
+    // #1によってderived1のデストラクタが呼ばれ、メモリが解放される
+    delete p;
+  }
+  {
+    base* p = new derived2{};
+    // #1によってderived2のデストラクタが呼ばれ、メモリが解放される
+    delete p;
+  }
+}
+```
+* destroying_delete_t[color ff0000]
+* std::destroy_at[link /reference/memory/destroy_at.md]
+
+#### 出力
+
+```
+destruct derived1
+destruct derived2
+```
+
 ## この機能が必要になった背景・経緯
 （執筆中）
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
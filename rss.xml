<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-11-05T14:37:56.224799</updated>
  <id>4eba465b-2fa2-465f-9aff-617cb2654e20</id>

  
    <entry>
      <title>charconv -- update information about charconv</title>
      <link href="https://cpprefjp.github.io/reference/charconv.html"/>
      <id>1bf71dc803d140329e3690f6abaa004bb21b9c97:reference/charconv.md</id>
      <updated>2023-11-05T21:08:32+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;charconv&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;charconv&amp;gt;&lt;/code&gt;ヘッダでは、ロケール依存なし、フォーマット解析なしの高速な文字列・数値変換を提供する。&lt;/p&gt;
&lt;p&gt;これらの変換は以下のような特徴がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フォーマットは引数で指定し、入力値のフォーマットを実行時に解析することはない&lt;/li&gt;
&lt;li&gt;動的にメモリ確保を行わない&lt;/li&gt;
&lt;li&gt;ロケールを考慮しない（Cロケール (POSIXロケール) 固定）&lt;/li&gt;
&lt;li&gt;バッファオーバーランしない&lt;/li&gt;
&lt;li&gt;例外を投げない（エラーは戻り値で表現、エラーと有効値は区別可能）&lt;/li&gt;
&lt;li&gt;使用可能なフォーマットは最小限&lt;ul&gt;
&lt;li&gt;スペースが現れた場合はそこで変換終了&lt;/li&gt;
&lt;li&gt;浮動小数点数の指数部以外の&lt;code&gt;+&lt;/code&gt;符号は考慮されない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;による小数点以下の桁数指定はできない&lt;/li&gt;
&lt;li&gt;16進数に&lt;code&gt;0x&lt;/code&gt;は付けられない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;文字列 ⇔ 数値変換関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/to_chars.html&#34;&gt;to_chars&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値 → 文字列の変換&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/from_chars.html&#34;&gt;from_chars&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列 → 数値の変換&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;クラス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/chars_format.html&#34;&gt;chars_format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変換時の浮動小数点フォーマット指定のための列挙体&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/to_chars_result.html&#34;&gt;to_chars_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/to_chars.html&#34;&gt;to_chars&lt;/a&gt;&lt;/code&gt;の結果型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/from_chars_result.html&#34;&gt;from_chars_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/from_chars.html&#34;&gt;from_chars&lt;/a&gt;&lt;/code&gt;の結果型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;導入された経緯&lt;/h2&gt;
&lt;p&gt;XMLやJSONに代表されるテキストベースのデータを利用するケースが増えており、C++においてそれを利用するケースも増加している。
それらは多くの場合コンピュータによって生成されコンピュータによって読まれるため国際化対応の必要がなく、生成する側でも読む側でもロケールに非依存であり、考慮するべきではない。&lt;br /&gt;
そして、これらのデータは多くの場合通信に利用されており高いスループットを要求される。&lt;/p&gt;
&lt;p&gt;しかし、C++17未満の環境で利用可能であった文字列変換法はいずれもロケールに依存しておりロケール非依存な変換が提供されていなかったうえに、いずれの方法も動的なフォーマットの解析・指定や動的メモリ確保、エラー報告の不足等何かしら使いにくい所があった。&lt;br /&gt;
動的なフォーマット解析はコンパイル時のフォーマットチェック及び選択を妨げ、（&lt;code&gt;iostream&lt;/code&gt;のマニピュレータのような）動的なフォーマット指定はその状態のスレッド間共有が必要になるため好ましくなく、動的メモリ確保を行わず変換エラーは区別できることが望ましい。&lt;/p&gt;
&lt;p&gt;また、浮動小数点数を10進文字列→2進浮動小数点数→10進文字列と変換した時に最初と最後の文字列が一致する保証がある変換方法も提供されていなかった。&lt;/p&gt;
&lt;p&gt;各変換方法とその問題点&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;欠点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、フォーマットの動的解析、バッファオーバーランの危険性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;snprintf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、フォーマットの動的解析&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sscanf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、フォーマットの動的解析&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、エラー報告の不足&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、先頭ホワイトスペースの無視、接頭辞(0x等)を考慮する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strstream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、先頭ホワイトスペースの無視&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stringstream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、先頭ホワイトスペースの無視、動的メモリ確保&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;num_put / num_get facets&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、仮想関数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;to_string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、動的メモリ確保&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stoi&lt;/code&gt;等&lt;/td&gt;
&lt;td&gt;ロケール依存、動的メモリ確保、先頭ホワイトスペースの無視、接頭辞(0x等)を考慮する、例外の送出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらの問題がなく高速な文字列・数値変換を提供するために、本ヘッダ及び&lt;code&gt;to_chars, from_chars&lt;/code&gt;関数が導入された。各関数の特徴は冒頭及び個別のページを参照のこと。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++17&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 7.0(整数のみ), 14.0(to_chars()のみ浮動小数点もsupport)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 8.0(整数のみ), 11.1(full support)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2017 update 7(整数のみ), update 9(full support)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/2016/08/24/181540&#34; target=&#34;_blank&#34;&gt;C++1z ロケール依存なし、フォーマット解析なしの高速な文字列・数値変換 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0067r0.html&#34; target=&#34;_blank&#34;&gt;P0067R0 Elementary string conversions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r1.html&#34; target=&#34;_blank&#34;&gt;P0067R1 Elementary string conversions, revision 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r2.html&#34; target=&#34;_blank&#34;&gt;P0067R2 Elementary string conversions, revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r3.html&#34; target=&#34;_blank&#34;&gt;P0067R3 Elementary string conversions, revision 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r4.html&#34; target=&#34;_blank&#34;&gt;P0067R4 Elementary string conversions, revision 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r5.html&#34; target=&#34;_blank&#34;&gt;P0067R5 Elementary string conversions, revision 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0682r1.html&#34; target=&#34;_blank&#34;&gt;P0682R1: Repairing elementary string conversions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4412.html&#34; target=&#34;_blank&#34;&gt;N4412: Shortcomings of iostreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wg21.cmeerw.net/lwg/issue3080&#34; target=&#34;_blank&#34;&gt;LWG Issue 3080. Floating point from_chars pattern specification breaks round-tripping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars -- update information about charconv</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars.html"/>
      <id>1bf71dc803d140329e3690f6abaa004bb21b9c97:reference/charconv/from_chars.md</id>
      <updated>2023-11-05T21:08:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars.md b/reference/charconv/from_chars.md
index d23eec298..855170e2e 100644
--- a/reference/charconv/from_chars.md
+++ b/reference/charconv/from_chars.md
@@ -1,6 +1,6 @@
 # from_chars
 * charconv[meta header]
-* function template[meta id-type]
+* function[meta id-type]
 * std[meta namespace]
 * cpp17[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_chars -- update information about charconv</title>
      <link href="https://cpprefjp.github.io/reference/charconv/to_chars.html"/>
      <id>1bf71dc803d140329e3690f6abaa004bb21b9c97:reference/charconv/to_chars.md</id>
      <updated>2023-11-05T21:08:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/to_chars.md b/reference/charconv/to_chars.md
index aeb75e232..565102209 100644
--- a/reference/charconv/to_chars.md
+++ b/reference/charconv/to_chars.md
@@ -1,6 +1,6 @@
 # to_chars
 * charconv[meta header]
-* function template[meta id-type]
+* function[meta id-type]
 * std[meta namespace]
 * cpp17[meta cpp]
 
@@ -284,7 +284,7 @@ z
 - C++17
 
 ### 処理系
-- [Clang](/implementation.md#clang): 7.0(整数のみ)
+- [Clang](/implementation.md#clang): 7.0(整数のみ), 14.0(full support)
 - [GCC](/implementation.md#gcc): 8.0(整数のみ), 11.1(full support)
 - [Visual C++](/implementation.md#visual_cpp): 2017 update 7(整数のみ), update 9(full support)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- fix some expression</title>
      <link href="https://cpprefjp.github.io/reference/span/span/begin.html"/>
      <id>0622e399e01a52b5e8524319d5a1c457e3e0e5f9:reference/span/span/begin.md</id>
      <updated>2023-11-05T21:02:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/begin.md b/reference/span/span/begin.md
index 703b5f641..5bbfa25e2 100644
--- a/reference/span/span/begin.md
+++ b/reference/span/span/begin.md
@@ -43,7 +43,7 @@ int main()
   std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
 
   // vの先頭3要素を部分シーケンスとして参照する
-  std::span&amp;lt;int, 3&amp;gt; s = std::span(v).first(3);
+  std::span&amp;lt;int&amp;gt; s = std::span(v).first(3);
 
   // (1)
   std::for_each(s.begin(), s.end(), [](int x) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- fix some expression</title>
      <link href="https://cpprefjp.github.io/reference/span/span/crbegin.html"/>
      <id>0622e399e01a52b5e8524319d5a1c457e3e0e5f9:reference/span/span/crbegin.md</id>
      <updated>2023-11-05T21:02:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/crbegin.md b/reference/span/span/crbegin.md
index 731b1675e..b322bc1c9 100644
--- a/reference/span/span/crbegin.md
+++ b/reference/span/span/crbegin.md
@@ -10,7 +10,7 @@ constexpr const_reverse_iterator crbegin() const noexcept;
 ```
 
 ## 概要
-末尾要素の次を指すイテレータを取得する。
+末尾を指す読み取り専用逆イテレータを取得する。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- fix some expression</title>
      <link href="https://cpprefjp.github.io/reference/span/span/crend.html"/>
      <id>0622e399e01a52b5e8524319d5a1c457e3e0e5f9:reference/span/span/crend.md</id>
      <updated>2023-11-05T21:02:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/crend.md b/reference/span/span/crend.md
index 3c2799b63..a69a4fab6 100644
--- a/reference/span/span/crend.md
+++ b/reference/span/span/crend.md
@@ -10,7 +10,7 @@ constexpr const_reverse_iterator crend() const noexcept;
 ```
 
 ## 概要
-末尾要素の次を指すイテレータを取得する。
+先頭の前を指す読み取り専用逆イテレータを取得する。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- fix some expression</title>
      <link href="https://cpprefjp.github.io/reference/span/span/end.html"/>
      <id>0622e399e01a52b5e8524319d5a1c457e3e0e5f9:reference/span/span/end.md</id>
      <updated>2023-11-05T21:02:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/end.md b/reference/span/span/end.md
index 2ee445c26..52a6931c2 100644
--- a/reference/span/span/end.md
+++ b/reference/span/span/end.md
@@ -43,7 +43,7 @@ int main()
   std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
 
   // vの先頭3要素を部分シーケンスとして参照する
-  std::span&amp;lt;int, 3&amp;gt; s = std::span(v).first(3);
+  std::span&amp;lt;int&amp;gt; s = std::span(v).first(3);
 
   // (1)
   std::for_each(s.begin(), s.end(), [](int x) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- fix some expression</title>
      <link href="https://cpprefjp.github.io/reference/span/span/rbegin.html"/>
      <id>0622e399e01a52b5e8524319d5a1c457e3e0e5f9:reference/span/span/rbegin.md</id>
      <updated>2023-11-05T21:02:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/rbegin.md b/reference/span/span/rbegin.md
index fe6f8e9a6..e54407d59 100644
--- a/reference/span/span/rbegin.md
+++ b/reference/span/span/rbegin.md
@@ -10,7 +10,7 @@ constexpr reverse_iterator rbegin() const noexcept;
 ```
 
 ## 概要
-先頭要素を指す逆順イテレータを取得する。
+末尾要素を指す逆順イテレータを取得する。
 
 
 ## 戻り値
@@ -42,7 +42,7 @@ int main()
   std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
 
   // vの先頭3要素を部分シーケンスとして参照する
-  std::span&amp;lt;int, 3&amp;gt; s = std::span(v).first(3);
+  std::span&amp;lt;int&amp;gt; s = std::span(v).first(3);
 
   // 逆順に出力
   std::for_each(s.rbegin(), s.rend(), [](int x) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- fix some expression</title>
      <link href="https://cpprefjp.github.io/reference/span/span/rend.html"/>
      <id>0622e399e01a52b5e8524319d5a1c457e3e0e5f9:reference/span/span/rend.md</id>
      <updated>2023-11-05T21:02:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/rend.md b/reference/span/span/rend.md
index 5c08090cd..6fb7fa997 100644
--- a/reference/span/span/rend.md
+++ b/reference/span/span/rend.md
@@ -10,7 +10,7 @@ constexpr reverse_iterator rend() const noexcept;
 ```
 
 ## 概要
-末尾要素の次を指す逆順イテレータを取得する。
+先頭要素の前を指す逆順イテレータを取得する。
 
 
 ## 戻り値
@@ -42,7 +42,7 @@ int main()
   std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
 
   // vの先頭3要素を部分シーケンスとして参照する
-  std::span&amp;lt;int, 3&amp;gt; s = std::span(v).first(3);
+  std::span&amp;lt;int&amp;gt; s = std::span(v).first(3);
 
   // 逆順に出力
   std::for_each(s.rbegin(), s.rend(), [](int x) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>11b32f7cbe871fe4970b66171344d19c831f1b7b:reference/format/format.md</id>
      <updated>2023-11-05T20:57:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index a8f22404d..22659c5a6 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -490,7 +490,6 @@ int main()
 
 ### `vector&amp;lt;bool&amp;gt;`を出力する (C++23)
 ```cpp example
-```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;format&amp;gt;
 #include &amp;lt;vector&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>11b32f7cbe871fe4970b66171344d19c831f1b7b:reference/format/formatter.md</id>
      <updated>2023-11-05T20:57:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 4de6df6b0..24a788f1a 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -7,7 +7,7 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class T, class U = char&amp;gt;
+  template &amp;lt;class T, class charT = char&amp;gt;
   struct formatter;                                          // (1) C++20
 
   template &amp;lt;ranges::input_range R, class charT&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/random/binomial_distribution/op_constructor.html"/>
      <id>11b32f7cbe871fe4970b66171344d19c831f1b7b:reference/random/binomial_distribution/op_constructor.md</id>
      <updated>2023-11-05T20:57:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/binomial_distribution/op_constructor.md b/reference/random/binomial_distribution/op_constructor.md
index c72284bb0..8e3eed943 100644
--- a/reference/random/binomial_distribution/op_constructor.md
+++ b/reference/random/binomial_distribution/op_constructor.md
@@ -7,9 +7,9 @@
 
 ```cpp
 explicit binomial_distribution(IntType t = 1, double p = 0.5); // (1)
-binomial_distribution() : binomial_distribution(1) {}          // (1)
+binomial_distribution() : binomial_distribution(1) {}          // (1) C++20
 
-explicit binomial_distribution(IntType t, double p = 0.5);     // (2)
+explicit binomial_distribution(IntType t, double p = 0.5);     // (2) C++20
 
 explicit binomial_distribution(const param_type&amp;amp; parm);        // (3)
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>llround -- NGワードチェック : &#34;型](link)型&#34;をNGワードに登録 #1211</title>
      <link href="https://cpprefjp.github.io/reference/cmath/llround.html"/>
      <id>f9a0fdd70a42ec9b262b93cc8796d9e5f1b802b0:reference/cmath/llround.md</id>
      <updated>2023-11-05T19:57:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/llround.md b/reference/cmath/llround.md
index fe26bc96e..468961a05 100644
--- a/reference/cmath/llround.md
+++ b/reference/cmath/llround.md
@@ -46,13 +46,13 @@ namespace std {
 
 
 ## 戻り値
-引数 `x` を四捨五入により丸めた整数値を、[`long long`型](/lang/cpp11/long_long_type.md)型の範囲に収めて返す。
+引数 `x` を四捨五入により丸めた整数値を、[`long long`型](/lang/cpp11/long_long_type.md)の範囲に収めて返す。
 
 
 ## 備考
 - 本関数は、C99 の規格にある `llround`（より正確には `math.h` ヘッダの `llround`、`llroundf`、`llroundl` の 3 つ。それぞれ C++ の `double`、`float`、`long double` バージョンに相当）と等価である。
 - [`round`](round.md)関数と違い、本関数において戻り値が非整数型引数 `x` と異なる場合に、例外 [`FE_INEXACT`](/reference/cfenv/fe_inexact.md) を発生させる必要はない。
-- 戻り値が[`long long`型](/lang/cpp11/long_long_type.md)型の範囲を超えた場合、定義域エラーが起こる可能性がある。その際の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
+- 戻り値が[`long long`型](/lang/cpp11/long_long_type.md)の範囲を超えた場合、定義域エラーが起こる可能性がある。その際の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - なお、本関数の挙動は、現在の丸めモードには依存しない。
 - C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_align_t -- NGワードチェック : &#34;型](link)型&#34;をNGワードに登録 #1211</title>
      <link href="https://cpprefjp.github.io/reference/cstddef/max_align_t.html"/>
      <id>f9a0fdd70a42ec9b262b93cc8796d9e5f1b802b0:reference/cstddef/max_align_t.md</id>
      <updated>2023-11-05T19:57:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstddef/max_align_t.md b/reference/cstddef/max_align_t.md
index 1c58821d9..6ea08a277 100644
--- a/reference/cstddef/max_align_t.md
+++ b/reference/cstddef/max_align_t.md
@@ -13,7 +13,7 @@ namespace std {
 ## 概要
 `std::max_align_t`は、どのスカラー型よりも大きいアライメントを必要とする型である。
 
-この型は、C++11では[POD型](/reference/type_traits/is_pod.md)、C++20では[トリビアル型](/reference/type_traits/is_trivial.md)型に分類される。
+この型は、C++11では[POD型](/reference/type_traits/is_pod.md)、C++20では[トリビアル型](/reference/type_traits/is_trivial.md)に分類される。
 
 `alignas`指示子により、`std::max_align_t`のアライメントより大きいサイズのアライメントを指定できるかどうかは、実装依存である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exchange -- Merge pull request #1210 from cpprefjp/tshino-fix-exchange</title>
      <link href="https://cpprefjp.github.io/reference/utility/exchange.html"/>
      <id>1d9efe41ffa19e7ef2298f09db571821a9f85cbe:reference/utility/exchange.md</id>
      <updated>2023-11-05T19:53:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/exchange.md b/reference/utility/exchange.md
index 5f14d9212..873660959 100644
--- a/reference/utility/exchange.md
+++ b/reference/utility/exchange.md
@@ -24,7 +24,7 @@ namespace std {
 
 
 ## 効果
-第1パラメータ`obj`で受け取った変数への参照に、第2パラメータ`new_val`の値をムーブ代入し、代入前の`obj`の状態を返す。
+第1パラメータ`obj`で受け取った変数への参照に、第2パラメータ`new_val`の値をコピー代入または可能ならムーブ代入し、代入前の`obj`の状態を返す。
 
 以下と等価の効果を持つ：
 
@@ -215,4 +215,4 @@ Hello 0x7ffc560ca4cc
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
 - [`std::exchange` Patterns: Fast, Safe, Expressive, and Probably Underused](https://www.fluentcpp.com/2020/09/25/stdexchange-patterns-fast-safe-expressive-and-probably-underused/)
 - [`std::exchange`によるmoveしてリセットするイディオムの御紹介](https://onihusube.hatenablog.com/entry/2020/10/31/163244)
-- [P2401R0 Add a conditional noexcept specification to std::exchange](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2401r0.html)
\ No newline at end of file
+- [P2401R0 Add a conditional noexcept specification to std::exchange](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2401r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
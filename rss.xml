<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-06-13T12:51:17.330302</updated>
  <id>d5ae4137-54ca-485f-b015-dda5c34c3b2c</id>

  
    <entry>
      <title>add -- linalg : addを追加(#1233).</title>
      <link href="https://cpprefjp.github.io/reference/linalg/add.html"/>
      <id>439aededa674eeece8990ecdc8f785264ed6830b:reference/linalg/add.md</id>
      <updated>2024-06-13T21:47:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/add.md b/reference/linalg/add.md
new file mode 100644
index 000000000..fd21543da
--- /dev/null
+++ b/reference/linalg/add.md
@@ -0,0 +1,96 @@
+# add
+
+* [mathjax enable]
+* linalg[meta header]
+* function template[meta id-type]
+* std::linalg[meta namespace]
+* cpp26[meta cpp]
+
+
+```cpp
+namespace std::linalg {
+  template&amp;lt;in-object InObj1,
+           in-object InObj2,
+           out-object OutObj&amp;gt;
+  void add(InObj1 x,
+           InObj2 y,
+           OutObj z);               // (1)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-object InObj1,
+           in-object InObj2,
+           out-object OutObj&amp;gt;
+  void add(ExecutionPolicy&amp;amp;&amp;amp; exec,
+           InObj1 x,
+           InObj2 y,
+           OutObj z);               // (2)
+}
+```
+
+
+## 概要
+同じサイズの行列またはベクトルの`x`と`y`、`z`に対して、$x + y$ を`z`に代入する:
+
+$$
+z \leftarrow x + y
+$$
+
+
+## テンプレートパラメータ制約
+`x`と`y`、`z`の次元が全て等しくなければならない。
+- `x.rank() == y.rank() &amp;amp;&amp;amp; y.rank() == z.rank()`
+
+
+## 適格要件
+行列またはベクトルの`x`、`y`、`z`の各次元の静的要素数が同じであること。
+
+- [`possibly-addable`](possibly-addable.md)`&amp;lt;InObj1, InObj2, OutObj&amp;gt;() == true`
+
+
+## 事前条件
+行列またはベクトルの`x`、`y`、`z`の各次元が同じであること。
+
+- [`addable`](addable.md)`(x, y, z) == true`
+
+
+## 効果
+$x + y$ を`z`に代入する。
+
+- (1): 逐次実行する。
+- (2): 指定された実行ポリシーに応じて実行する。
+
+
+## 戻り値
+なし
+
+
+## 備考
+`z`を`x`または`y`としてもよい。
+
+
+## 例
+
+
+### 出力
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution`](/reference/execution.md)
+- [`mdspan`](/reference/mdspan.md)
+
+
+## 参照
+- [P0788R3 Standard Library Specification in a Concepts and Contracts World](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0788r3.pdf)
+- [`LAPACK: caxpy`](https://netlib.org/lapack/explore-html/d5/d4b/group__axpy_ga0b7bac1f4d42514074a48f14f5f9caa0.html#ga0b7bac1f4d42514074a48f14f5f9caa0)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>addable -- linalg : addを追加(#1233).</title>
      <link href="https://cpprefjp.github.io/reference/linalg/addable.html"/>
      <id>439aededa674eeece8990ecdc8f785264ed6830b:reference/linalg/addable.md</id>
      <updated>2024-06-13T21:47:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/addable.md b/reference/linalg/addable.md
new file mode 100644
index 000000000..1f6e46f79
--- /dev/null
+++ b/reference/linalg/addable.md
@@ -0,0 +1,57 @@
+# addable
+
+* linalg[meta header]
+* function template[meta id-type]
+* std::linalg[meta namespace]
+* cpp26[meta cpp]
+
+
+```cpp
+namespace std::linalg {
+constexpr bool addable(
+  const in-vector auto&amp;amp; in1,
+  const in-vector auto&amp;amp; in2,
+  const in-vector auto&amp;amp; out)
+{
+  return out.extent(0) == in1.extent(0) &amp;amp;&amp;amp;
+         out.extent(0) == in2.extent(0);
+} // (1)
+
+constexpr bool addable(
+  const in-matrix auto&amp;amp; in1,
+  const in-matrix auto&amp;amp; in2,
+  const in-matrix auto&amp;amp; out)
+{
+  return out.extent(0) == in1.extent(0) &amp;amp;&amp;amp;
+         out.extent(1) == in1.extent(1) &amp;amp;&amp;amp;
+         out.extent(0) == in2.extent(0) &amp;amp;&amp;amp;
+         out.extent(1) == in2.extent(1);
+} // (2)
+}
+```
+
+
+## 概要
+テンプレートパラメータに指定されたベクトルまたは行列の次元が同じかどうかを判定する、説明専用の関数である。
+
+
+## 戻り値
+`In1`、`In2`、`Out`の各次元が同じ場合`true`を返す。そうでない場合は、`false`を返す。
+
+- (1): ベクトル
+- (2): 行列
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`mdspan`](/reference/mdspan.md)
+
+
+## 参照
+- [P1673R13 A free function linear algebra interface based on the BLAS](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html)
+
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>possibly-addable -- linalg : addを追加(#1233).</title>
      <link href="https://cpprefjp.github.io/reference/linalg/possibly-addable.html"/>
      <id>439aededa674eeece8990ecdc8f785264ed6830b:reference/linalg/possibly-addable.md</id>
      <updated>2024-06-13T21:47:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/possibly-addable.md b/reference/linalg/possibly-addable.md
new file mode 100644
index 000000000..3b34fa1dd
--- /dev/null
+++ b/reference/linalg/possibly-addable.md
@@ -0,0 +1,55 @@
+# possibly-addable
+
+* linalg[meta header]
+* function template[meta id-type]
+* std::linalg[meta namespace]
+* cpp26[meta cpp]
+
+
+```cpp
+namespace std::linalg {
+  template&amp;lt;in-vector In1, in-vector In2, in-vector Out&amp;gt;
+  constexpr bool possibly-addable()
+  {
+    return compatible-static-extents&amp;lt;Out, In1&amp;gt;(0, 0) &amp;amp;&amp;amp;
+           compatible-static-extents&amp;lt;Out, In2&amp;gt;(0, 0) &amp;amp;&amp;amp;
+           compatible-static-extents&amp;lt;In1, In2&amp;gt;(0, 0);
+  }   // (1)
+
+  template&amp;lt;in-matrix In1, in-matrix In2, in-matrix Out&amp;gt;
+  constexpr bool possibly-addable()
+  {
+    return compatible-static-extents&amp;lt;Out, In1&amp;gt;(0, 0) &amp;amp;&amp;amp;
+           compatible-static-extents&amp;lt;Out, In1&amp;gt;(1, 1) &amp;amp;&amp;amp;
+           compatible-static-extents&amp;lt;Out, In2&amp;gt;(0, 0) &amp;amp;&amp;amp;
+           compatible-static-extents&amp;lt;Out, In2&amp;gt;(1, 1) &amp;amp;&amp;amp;
+           compatible-static-extents&amp;lt;In1, In2&amp;gt;(0, 0) &amp;amp;&amp;amp;
+           compatible-static-extents&amp;lt;In1, In2&amp;gt;(1, 1);
+  }   // (2)
+}
+```
+
+
+## 概要
+テンプレートパラメータに指定されたベクトルまたは行列の次元が同じかどうかを静的要素数で判定する、説明専用の関数である。
+
+
+## 戻り値
+`In1`、`In2`、`Out`の各次元の静的要素数が同じ場合`true`を返す。そうでない場合は、`false`を返す。
+
+- (1): ベクトル
+- (2): 行列
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`mdspan`](/reference/mdspan.md)
+
+
+## 参照
+- [P1673R13 A free function linear algebra interface based on the BLAS](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数のdefault／delete宣言 -- Merge pull request #1289 from yknishidate/fixtypo</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html"/>
      <id>24bdd5df3ba4cfbe33688b71b622c2ccbf6f0558:lang/cpp11/defaulted_and_deleted_functions.md</id>
      <updated>2024-06-12T23:45:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/defaulted_and_deleted_functions.md b/lang/cpp11/defaulted_and_deleted_functions.md
index 733bc3397..23f08f71d 100644
--- a/lang/cpp11/defaulted_and_deleted_functions.md
+++ b/lang/cpp11/defaulted_and_deleted_functions.md
@@ -104,7 +104,7 @@ int main()
     };
 
     // コンパイルエラー！= deleteはここではなく、最初の宣言に対して指定しなければならない
-    sometype::somtype() = delete;
+    sometype::sometype() = delete;
     ```
 
     - 削除定義された関数は、暗黙的にインラインとなる。もしその関数が外部リンケージを持ち、ひとつの翻訳単位で削除定義された場合、全ての翻訳単位で削除定義される。削除定義された関数は、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数のdefault／delete宣言 -- Fix typo</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html"/>
      <id>f1c050d3f2acbbd399550fcf2f8859dda2960efa:lang/cpp11/defaulted_and_deleted_functions.md</id>
      <updated>2024-06-12T23:35:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/defaulted_and_deleted_functions.md b/lang/cpp11/defaulted_and_deleted_functions.md
index 733bc3397..23f08f71d 100644
--- a/lang/cpp11/defaulted_and_deleted_functions.md
+++ b/lang/cpp11/defaulted_and_deleted_functions.md
@@ -104,7 +104,7 @@ int main()
     };
 
     // コンパイルエラー！= deleteはここではなく、最初の宣言に対して指定しなければならない
-    sometype::somtype() = delete;
+    sometype::sometype() = delete;
     ```
 
     - 削除定義された関数は、暗黙的にインラインとなる。もしその関数が外部リンケージを持ち、ひとつの翻訳単位で削除定義された場合、全ての翻訳単位で削除定義される。削除定義された関数は、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuki Nishidate</name>
        <email>asta18425@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : Clangの未実装バージョンとVisual C++の実装バージョンを記載</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>71cff38538892e6070c850bf83201d4d27a5f45a:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2024-06-11T23:13:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index ce1c9a4e5..fa1b3632a 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -236,9 +236,9 @@ Expression &amp;#39;i &amp;gt;= 0&amp;#39; is false in f(int) at /app/example.cpp:15
 - C++23
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
+- [Clang](/implementation.md#clang): 18 [mark noimpl]
 - [GCC](/implementation.md#gcc): 12 [mark verified]
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 4 [mark impl]
 
 
 ### 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>はじめてのコントリビュート -- 編集者向けドキュメント : 動作検証バージョンに併記する絵文字について記載 #1274</title>
      <link href="https://cpprefjp.github.io/start_editing.html"/>
      <id>5a982c6dd233f434b440821a255c41dbd0924a43:start_editing.md</id>
      <updated>2024-06-11T22:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing.md b/start_editing.md
index 9c6c8d915..4ac193aa8 100644
--- a/start_editing.md
+++ b/start_editing.md
@@ -174,10 +174,15 @@ Pull Requestのレビューが滞っていた場合、Pull Requestの提出者
 ## 処理系
 ### バージョン
 - [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): 10 [mark verified]
-- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1 [mark verified]
+- [GCC](/implementation.md#gcc): 9, [mark noimpl], 10 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1 [mark impl]
 ```
 
+- mark noimpl : 未実装を表す絵文字
+- mark impl : 動作確認はできていないけど、リリースノートやそれに類するドキュメントには実装済みと書かれていることを表す絵文字
+- mark verified : 動作検証済み
+
+
 バージョンの表記としては、とくにVisual C++は本サイト独自の表記法がありますので、以下のページを確認してください。
 
 - [処理系](implementation.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- 編集者向けドキュメント : 動作検証バージョンに併記する絵文字について記載 #1274</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>5a982c6dd233f434b440821a255c41dbd0924a43:working_style.md</id>
      <updated>2024-06-11T22:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index 528e93d8b..f7668d166 100644
--- a/working_style.md
+++ b/working_style.md
@@ -45,9 +45,16 @@ C++11以降対応については対応バージョンを明記します。バー
 - Visual C++: 2003, 2008, 2010
 - pgCC: 11.2
 
-#### 絵文字の表示テスト
+表記するバージョンには、「未実装」「実装済み」「動作検証済み」を表す絵文字指定を併記してください。
+
 - GCC: 12.0 [mark noimpl], 13.1 [mark impl], 14.1 [mark verified]
 
+ここで、各指定は以下を意味します。
+
+- mark noimpl : 未実装を表す絵文字
+- mark impl : 動作確認はできていないけど、リリースノートやそれに類するドキュメントには実装済みと書かれていることを表す絵文字
+- mark verified : 動作検証済み
+
 
 ### 訳語表
 訳語表は随時更新していってください。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
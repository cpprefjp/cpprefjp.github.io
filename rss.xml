<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-09-13T03:11:11.352145</updated>
  <id>143bf39d-cbe7-4872-8654-c7c41ebb0422</id>

  
    <entry>
      <title>as_const_view -- as_const_view推論補助の追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view.html"/>
      <id>b950e124456e4d4abfc26c91e53ec5c13895dc9e:reference/ranges/as_const_view.md</id>
      <updated>2023-09-13T12:06:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view.md b/reference/ranges/as_const_view.md
index 1112e2392..9a4832ccb 100644
--- a/reference/ranges/as_const_view.md
+++ b/reference/ranges/as_const_view.md
@@ -67,7 +67,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](as_const_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](as_const_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- as_const_view推論補助の追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view/op_deduction_guide.html"/>
      <id>b950e124456e4d4abfc26c91e53ec5c13895dc9e:reference/ranges/as_const_view/op_deduction_guide.md</id>
      <updated>2023-09-13T12:06:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view/op_deduction_guide.md b/reference/ranges/as_const_view/op_deduction_guide.md
new file mode 100644
index 000000000..1a33d8f8f
--- /dev/null
+++ b/reference/ranges/as_const_view/op_deduction_guide.md
@@ -0,0 +1,63 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  as_const_view(R&amp;amp;&amp;amp;) -&amp;gt; as_const_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+* as_const_view[link ../as_const_view.md]
+* all_t[link /reference/ranges/all.md]
+
+## 概要
+
+[`as_const_view`](../as_const_view.md)クラステンプレートの型推論補助。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4};
+
+  std::ranges::as_const_view v1{vec};
+  
+  static_assert(std::same_as&amp;lt;
+    decltype(v1),
+    std::ranges::as_const_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+
+  std::ranges::as_const_view v2{std::vector&amp;lt;int&amp;gt;{1, 2}};
+  
+  static_assert(std::same_as&amp;lt;
+    decltype(v2),
+    std::ranges::as_const_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+* ref_view[link /reference/ranges/ref_view.md]
+* owning_view[link /reference/ranges/owning_view.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- コード修飾修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view/end.html"/>
      <id>82ef3319985de924be1f0198d05ccaf0d2eb0500:reference/ranges/as_const_view/end.md</id>
      <updated>2023-09-12T17:09:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view/end.md b/reference/ranges/as_const_view/end.md
index f88ddfec7..3783bdaad 100644
--- a/reference/ranges/as_const_view/end.md
+++ b/reference/ranges/as_const_view/end.md
@@ -47,7 +47,7 @@ int main() {
   std::cout &amp;lt;&amp;lt; *se &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;
 }
 ```
-* begin[color ff0000]
+* end[color ff0000]
 
 ### 出力
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- コード修飾修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view/end.html"/>
      <id>595b9bb33fe0907ced03e0d5201cdce1c4da87c4:reference/ranges/as_const_view/end.md</id>
      <updated>2023-09-12T17:07:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view/end.md b/reference/ranges/as_const_view/end.md
index 6485e9400..f88ddfec7 100644
--- a/reference/ranges/as_const_view/end.md
+++ b/reference/ranges/as_const_view/end.md
@@ -48,7 +48,6 @@ int main() {
 }
 ```
 * begin[color ff0000]
-* subrange[link /reference/ranges/subrange.md]
 
 ### 出力
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_const_view -- as_const_view begin/end追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view.html"/>
      <id>a14d042b837ef68612abe6e74371882ba4f9e287:reference/ranges/as_const_view.md</id>
      <updated>2023-09-12T16:14:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view.md b/reference/ranges/as_const_view.md
index a1234d6d9..1112e2392 100644
--- a/reference/ranges/as_const_view.md
+++ b/reference/ranges/as_const_view.md
@@ -47,8 +47,8 @@ namespace std::ranges {
 |--------------------------------------------------|----------------------------------|----------------|
 | [`(constructor)`](as_const_view/op_constructor.md)  | コンストラクタ                   | C++23          |
 | [`base`](as_const_view/base.md)                     | `V`の参照を取得する              | C++23          |
-| [`begin`](as_const_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
-| [`end`](as_const_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
+| [`begin`](as_const_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](as_const_view/end.md)                       | 番兵を取得する                   | C++23          |
 | [`size`](as_const_view/size.md)                     | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- as_const_view begin/end追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view/begin.html"/>
      <id>a14d042b837ef68612abe6e74371882ba4f9e287:reference/ranges/as_const_view/begin.md</id>
      <updated>2023-09-12T16:14:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view/begin.md b/reference/ranges/as_const_view/begin.md
new file mode 100644
index 000000000..e52b706ce
--- /dev/null
+++ b/reference/ranges/as_const_view/begin.md
@@ -0,0 +1,71 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* as_const_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto begin() requires (!simple-view&amp;lt;V&amp;gt;);      // (1)
+constexpr auto begin() const requires range&amp;lt;const V&amp;gt;;   // (2)
+```
+* simple-view[link /reference/ranges/simple-view.md]
+* range[link /reference/ranges/range.md]
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして、(1)(2)どちらも
+
+```cpp
+return ranges::cbegin(base_);
+```
+* cbegin[link /reference/ranges/cbegin.md]
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::as_const_view acv{vec};
+
+  auto it = acv.begin();
+
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  ++it;
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // 書き換え不可
+  //*it = 0;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+1
+2
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- as_const_view begin/end追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view/end.html"/>
      <id>a14d042b837ef68612abe6e74371882ba4f9e287:reference/ranges/as_const_view/end.md</id>
      <updated>2023-09-12T16:14:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view/end.md b/reference/ranges/as_const_view/end.md
new file mode 100644
index 000000000..6485e9400
--- /dev/null
+++ b/reference/ranges/as_const_view/end.md
@@ -0,0 +1,70 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* as_const_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto end() requires (!simple-view&amp;lt;V&amp;gt;);    // (1)
+constexpr auto end() const requires range&amp;lt;const V&amp;gt;; // (2)
+```
+* simple-view[link /reference/ranges/simple-view.md]
+* range[link /reference/ranges/range.md]
+
+## 概要
+
+`view`の番兵を取得する。
+
+## 戻り値
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして、(1)(2)どちらも
+
+```cpp
+return ranges::cend(base_);
+```
+* cend[link /reference/ranges/cend.md]
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::as_const_view acv{vec};
+
+  auto it = acv.begin();
+  auto se = acv.end();
+
+  assert(it != se);
+
+  --se;
+
+  std::cout &amp;lt;&amp;lt; *se &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;
+}
+```
+* begin[color ff0000]
+* subrange[link /reference/ranges/subrange.md]
+
+### 出力
+
+```
+5
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- add link</title>
      <link href="https://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/op_equal.html"/>
      <id>7341bb7e271c2e73f7a428f3371122cfacf11caf:reference/scoped_allocator/scoped_allocator_adaptor/op_equal.md</id>
      <updated>2023-09-11T23:17:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/scoped_allocator/scoped_allocator_adaptor/op_equal.md b/reference/scoped_allocator/scoped_allocator_adaptor/op_equal.md
index 01fe2b822..12e1ecb9a 100644
--- a/reference/scoped_allocator/scoped_allocator_adaptor/op_equal.md
+++ b/reference/scoped_allocator/scoped_allocator_adaptor/op_equal.md
@@ -19,7 +19,7 @@ namespace std {
 ## 戻り値
 `sizeof...(InnerAlloc) == 0`であるならば、`a.`[outer_allocator()](outer_allocator.md) `== b.`[`outer_allocator()`](outer_allocator.md)の結果を返す。
 
-そうでなければ、`a.`[outer_allocator()](outer_allocator.md) `== b.`[`outer_allocator()`](outer_allocator.md) `&amp;amp;&amp;amp; a.`[`inner_allocator()`](inner_allocator.md) `== b.`[`inner_allocator()`]の結果を返す。
+そうでなければ、`a.`[outer_allocator()](outer_allocator.md) `== b.`[`outer_allocator()`](outer_allocator.md) `&amp;amp;&amp;amp; a.`[`inner_allocator()`](inner_allocator.md) `== b.`[`inner_allocator()`](inner_allocator.md)の結果を返す。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
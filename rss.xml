<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-07-03T07:36:47.878648</updated>
  <id>082c259e-7f8b-4c16-96cf-d353481a08d1</id>

  
    <entry>
      <title>formattable -- Merge pull request #1155 from cpprefjp/fix-formatter-formattable</title>
      <link href="https://cpprefjp.github.io/reference/format/formattable.html"/>
      <id>c99be7018870d7ca3b7a8282bc41b325aed4f7ba:reference/format/formattable.md</id>
      <updated>2023-07-03T16:32:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formattable.md b/reference/format/formattable.md
index 7932564e3..cc329fe3e 100644
--- a/reference/format/formattable.md
+++ b/reference/format/formattable.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std {
   template &amp;lt;class charT&amp;gt;
-  concept fmt-iter-for = output_iterator&amp;lt;const charT&amp;amp;&amp;gt;;
+  using fmt-iter-for = /* unspecified */;
 
   template &amp;lt;class T, class charT&amp;gt;
   concept formattable =
@@ -23,6 +23,8 @@ namespace std {
   };
 }
 ```
+* fmt-iter-for[italic]
+* unspecified[italic]
 * formatter[link formatter.md]
 * semiregular[link /reference/concepts/semiregular.md]
 * basic_format_context[link basic_format_context.md]
@@ -33,6 +35,7 @@ namespace std {
 
 このコンセプトを使用することで、[`formatter`](formatter.md)クラステンプレートが使用したい型で特殊化されているかをチェックできる。
 
+`formattable`コンセプトの定義において使用されている`fmt-iter-for&amp;lt;charT&amp;gt;`は、[`output_iterator&amp;lt;const charT&amp;amp;&amp;gt;`](/reference/iterator/output_iterator.md)コンセプトのモデルとなる未規定の型である。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>range_formatter -- Merge pull request #1155 from cpprefjp/fix-formatter-formattable</title>
      <link href="https://cpprefjp.github.io/reference/format/range_formatter.html"/>
      <id>c99be7018870d7ca3b7a8282bc41b325aed4f7ba:reference/format/range_formatter.md</id>
      <updated>2023-07-03T16:32:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/range_formatter.md b/reference/format/range_formatter.md
index f838252ef..f093eca86 100644
--- a/reference/format/range_formatter.md
+++ b/reference/format/range_formatter.md
@@ -92,7 +92,7 @@ public:
   // format()関数は書式の情報をもたない。
   // parse()関数で解析した書式をメンバ変数で保持しておいて、
   // それをもとに書式化する
-  auto format(MyVector&amp;lt;T&amp;gt;&amp;amp;&amp;amp; v, std::format_context&amp;amp; fctx) const {
+  auto format(const MyVector&amp;lt;T&amp;gt;&amp;amp; v, std::format_context&amp;amp; fctx) const {
     if (is_colon) {
       auto out = fctx.out();
       bool is_first = true;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化子リスト -- Merge pull request #1157 from g-suizu/patch-1</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/initializer_lists.html"/>
      <id>02a3b21a5aa22ab04b71ffb306bf03e2e4f05b0f:lang/cpp11/initializer_lists.md</id>
      <updated>2023-07-03T16:30:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/initializer_lists.md b/lang/cpp11/initializer_lists.md
index 30235501f..edafb4005 100644
--- a/lang/cpp11/initializer_lists.md
+++ b/lang/cpp11/initializer_lists.md
@@ -258,11 +258,11 @@ int main()
     //auto x2 = {};      // コンパイルエラー！x2の型を推論できない
     ```
 
-- 単一要素の初期化子リストを`auto`で受けた場合、C++11では`std::initializer_list&amp;lt;T&amp;gt;`型に推論されるが、C++17では`T`型に推論されるよう仕様が変更されるので注意
+- 単一要素の初期化子リストを`auto`で受けた場合、C++11では`std::initializer_list&amp;lt;T&amp;gt;`型に推論されるが、C++17では直接初期化の場合`T`型に推論されるよう仕様が変更されるので注意
 
     ```cpp
-    auto x = {1}; // C++11ではxの型はstd::initializer_list&amp;lt;int&amp;gt;。
-                  // C++17ではxの型はintになる
+    auto x{1}; // C++17ではxの型はintになる
+    auto x = {1}; // C++11,17共に、xの型はstd::initializer_list&amp;lt;int&amp;gt;。
     ```
 
 - 関数テンプレートのパラメータとして初期化子リストを受けとった場合は、`std::initializer_list`型には推論されない
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>初期化子リスト -- 古い表記を修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/initializer_lists.html"/>
      <id>94b0c912176e85c536b6a3d306995ee9da3c4590:lang/cpp11/initializer_lists.md</id>
      <updated>2023-07-03T16:21:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/initializer_lists.md b/lang/cpp11/initializer_lists.md
index 30235501f..edafb4005 100644
--- a/lang/cpp11/initializer_lists.md
+++ b/lang/cpp11/initializer_lists.md
@@ -258,11 +258,11 @@ int main()
     //auto x2 = {};      // コンパイルエラー！x2の型を推論できない
     ```
 
-- 単一要素の初期化子リストを`auto`で受けた場合、C++11では`std::initializer_list&amp;lt;T&amp;gt;`型に推論されるが、C++17では`T`型に推論されるよう仕様が変更されるので注意
+- 単一要素の初期化子リストを`auto`で受けた場合、C++11では`std::initializer_list&amp;lt;T&amp;gt;`型に推論されるが、C++17では直接初期化の場合`T`型に推論されるよう仕様が変更されるので注意
 
     ```cpp
-    auto x = {1}; // C++11ではxの型はstd::initializer_list&amp;lt;int&amp;gt;。
-                  // C++17ではxの型はintになる
+    auto x{1}; // C++17ではxの型はintになる
+    auto x = {1}; // C++11,17共に、xの型はstd::initializer_list&amp;lt;int&amp;gt;。
     ```
 
 - 関数テンプレートのパラメータとして初期化子リストを受けとった場合は、`std::initializer_list`型には推論されない
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>g-suizu</name>
        <email>n.suizu@geniee.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_filebuf -- basic_filebufにfstreamヘッダへのリンクを追加</title>
      <link href="https://cpprefjp.github.io/reference/fstream/basic_filebuf.html"/>
      <id>3c6b49c2e77dbe6621c285238164fda96fef1c1f:reference/fstream/basic_filebuf.md</id>
      <updated>2023-07-02T21:08:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/fstream/basic_filebuf.md b/reference/fstream/basic_filebuf.md
index fe0489675..798af5382 100644
--- a/reference/fstream/basic_filebuf.md
+++ b/reference/fstream/basic_filebuf.md
@@ -22,7 +22,7 @@ Cの`FILE*`に対する入出力関数を使って実装される。
 位置操作（`seekoff`と`seekpos`）は、入力・出力双方で共有される。
 
 テンプレートパラメータとして文字型を受け取るようになっており、使用を容易にするため、以下のパラメータ設定済みエイリアスが定義されている。
-このエイリアスは`&amp;lt;fstream&amp;gt;`ヘッダと`&amp;lt;iosfwd&amp;gt;`ヘッダで定義されている。
+このエイリアスは[`&amp;lt;fstream&amp;gt;`](/reference/fstream.md)ヘッダと`&amp;lt;iosfwd&amp;gt;`ヘッダで定義されている。
 
 | エイリアス | 説明 | 対応バージョン |
 |------------|------|----------------|
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Shunsuke Shimizu</name>
        <email>grafi@grafi.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>formattable -- fmt-iter-forが未規定の型であることを明示化</title>
      <link href="https://cpprefjp.github.io/reference/format/formattable.html"/>
      <id>313f64e6b708f264cb2d24e2ead385d5c6e65555:reference/format/formattable.md</id>
      <updated>2023-07-02T20:50:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formattable.md b/reference/format/formattable.md
index 7932564e3..cc329fe3e 100644
--- a/reference/format/formattable.md
+++ b/reference/format/formattable.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std {
   template &amp;lt;class charT&amp;gt;
-  concept fmt-iter-for = output_iterator&amp;lt;const charT&amp;amp;&amp;gt;;
+  using fmt-iter-for = /* unspecified */;
 
   template &amp;lt;class T, class charT&amp;gt;
   concept formattable =
@@ -23,6 +23,8 @@ namespace std {
   };
 }
 ```
+* fmt-iter-for[italic]
+* unspecified[italic]
 * formatter[link formatter.md]
 * semiregular[link /reference/concepts/semiregular.md]
 * basic_format_context[link basic_format_context.md]
@@ -33,6 +35,7 @@ namespace std {
 
 このコンセプトを使用することで、[`formatter`](formatter.md)クラステンプレートが使用したい型で特殊化されているかをチェックできる。
 
+`formattable`コンセプトの定義において使用されている`fmt-iter-for&amp;lt;charT&amp;gt;`は、[`output_iterator&amp;lt;const charT&amp;amp;&amp;gt;`](/reference/iterator/output_iterator.md)コンセプトのモデルとなる未規定の型である。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>acd1034</name>
        <email>48613285+acd1034@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
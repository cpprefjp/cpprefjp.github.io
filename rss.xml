<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-09-22T14:35:32.476991</updated>
  <id>7232c525-3c60-491e-8711-4ed6e7bfc7fa</id>

  
    <entry>
      <title>indirectly_writable -- indirectly_writable : 文書調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_writable.html"/>
      <id>1827d560b860daa131c66ac795397271a53ea94e:reference/iterator/indirectly_writable.md</id>
      <updated>2020-09-19T16:19:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_writable.md b/reference/iterator/indirectly_writable.md
index 4667983cf..513fc6590 100644
--- a/reference/iterator/indirectly_writable.md
+++ b/reference/iterator/indirectly_writable.md
@@ -29,7 +29,7 @@ namespace std {
 
 このコンセプトを構成する4つの制約式は全て、[等しさを保持](/reference/concepts.md)することを要求しない。
 
-`const_cast`を用いる制約式は、右辺値の代入は可能だが`const`な右辺値の代入ができないような*prvalue*の非プロキシイテレータを弾くために存在している。これによって、間接参照が`std::string`（*prvalue*）を返すようなイテレータ型は`indirectly_writable`のモデルとならない。
+`const_cast`を用いる制約式は、右辺値の代入は可能だが`const`な右辺値の代入ができないような*prvalue*の非プロキシイテレータを弾くために存在している。これによって、間接参照が*prvalue*（`T`そのもの、例えば`std::string`）を返すようなイテレータ型は`indirectly_writable`のモデルとならない。
 
 ## モデル
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirectly_writable -- Merge pull request #806 from 108EAA0A/fix-typo</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_writable.html"/>
      <id>9a8c526c16ae6ae846753bed9dcba857c86f8958:reference/iterator/indirectly_writable.md</id>
      <updated>2020-09-19T12:32:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_writable.md b/reference/iterator/indirectly_writable.md
index 2cd6e95fe..4667983cf 100644
--- a/reference/iterator/indirectly_writable.md
+++ b/reference/iterator/indirectly_writable.md
@@ -29,7 +29,7 @@ namespace std {
 
 このコンセプトを構成する4つの制約式は全て、[等しさを保持](/reference/concepts.md)することを要求しない。
 
-`const_cast`を用いる制約式は、右辺値の代入は可能だが`const`な右辺値の代入ができないような*prvalue*の非プロキシイテレータを弾くために存在している。これによって、間接参照が`std::string`（*pravlue*）を返すようなイテレータ型は`indirectly_writable`のモデルとならない。
+`const_cast`を用いる制約式は、右辺値の代入は可能だが`const`な右辺値の代入ができないような*prvalue*の非プロキシイテレータを弾くために存在している。これによって、間接参照が`std::string`（*prvalue*）を返すようなイテレータ型は`indirectly_writable`のモデルとならない。
 
 ## モデル
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirectly_writable -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_writable.html"/>
      <id>707baa8bf93fd53b1d8afe7a3befc37a40ead087:reference/iterator/indirectly_writable.md</id>
      <updated>2020-09-19T11:27:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_writable.md b/reference/iterator/indirectly_writable.md
index 2cd6e95fe..4667983cf 100644
--- a/reference/iterator/indirectly_writable.md
+++ b/reference/iterator/indirectly_writable.md
@@ -29,7 +29,7 @@ namespace std {
 
 このコンセプトを構成する4つの制約式は全て、[等しさを保持](/reference/concepts.md)することを要求しない。
 
-`const_cast`を用いる制約式は、右辺値の代入は可能だが`const`な右辺値の代入ができないような*prvalue*の非プロキシイテレータを弾くために存在している。これによって、間接参照が`std::string`（*pravlue*）を返すようなイテレータ型は`indirectly_writable`のモデルとならない。
+`const_cast`を用いる制約式は、右辺値の代入は可能だが`const`な右辺値の代入ができないような*prvalue*の非プロキシイテレータを弾くために存在している。これによって、間接参照が`std::string`（*prvalue*）を返すようなイテレータ型は`indirectly_writable`のモデルとならない。
 
 ## モデル
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>108EAA0A</name>
        <email>k_108e@outlook.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>契約に基づくプログラミング -- Update contract-based_programming.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/contract-based_programming.html"/>
      <id>a56ced58defb9873924f6ce75b068f7ab97b77cb:lang/cpp23/contract-based_programming.md</id>
      <updated>2020-09-16T20:09:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/contract-based_programming.md b/lang/cpp23/contract-based_programming.md
index e9b84b75b..f41b2de38 100644
--- a/lang/cpp23/contract-based_programming.md
+++ b/lang/cpp23/contract-based_programming.md
@@ -126,8 +126,11 @@ C++20では、プログラムのコンパイルは次の3つのうちどれか
 * `audit`: 契約レベルが`default`または`audit`の契約がチェックされる。
 
 ビルドレベルを指定する方法は処理系定義である。ただし、ソースコード上で指定する方法は提供されない。
-`constexpr`などの定数表現評価では、チェックされた契約のみが評価される。
-チェックされない契約が評価されるかは未規定である。`false`に評価される場合の動作は未定義である。
+
+なお、契約がチェックされることと、評価されることは異なる。
+
+* `constexpr`などの定数表現評価では、チェックされた契約のみが評価される。
+* チェックされない契約が評価されるかは未規定である。チェックされない契約が評価され、結果が`false`となった場合の動作は未定義である。
 
 ### 違反ハンドラーと違反継続モード
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirect_binary_predicate -- indirect_binary_predicate : 取り消し</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirect_binary_predicate.html"/>
      <id>a3b4bd8bd35b2218c3244fb8db82feb498eb0423:reference/iterator/indirect_binary_predicate.md</id>
      <updated>2020-09-16T19:05:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirect_binary_predicate.md b/reference/iterator/indirect_binary_predicate.md
index e94820bce..1c50e9922 100644
--- a/reference/iterator/indirect_binary_predicate.md
+++ b/reference/iterator/indirect_binary_predicate.md
@@ -30,8 +30,6 @@ namespace std {
 
 単純には、型`I1, I2, F`のオブジェクトをそれぞれ`i1, i2, f`とすると`bool c = f(*i1, *i2)`のような呼び出しが可能であることを表している。
 
-これは例えば、[`shared_ptr`](/reference/memory/shared_ptr.md)の比較に[`owner_less`](/reference/memory/owner_less.md)を用いる場合に、そのような述語オブジェクトの制約に用いることができる。
-
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
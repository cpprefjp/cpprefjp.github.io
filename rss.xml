<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-07-19T17:29:33.555750</updated>
  <id>e5662178-3e47-424d-8175-d9f1b2e27791</id>

  
    <entry>
      <title>three_way_comparable -- three_way_comparable : 意味論要件修正</title>
      <link href="https://cpprefjp.github.io/reference/compare/three_way_comparable.html"/>
      <id>cc5a6954ce45004dd8752bcf3431f835d84b5ea4:reference/compare/three_way_comparable.md</id>
      <updated>2022-07-20T02:24:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/three_way_comparable.md b/reference/compare/three_way_comparable.md
index a4e0a7455..72320ca38 100644
--- a/reference/compare/three_way_comparable.md
+++ b/reference/compare/three_way_comparable.md
@@ -91,7 +91,7 @@ concept three_way_comparable_with =
 - (1) : `const remove_reference_t&amp;lt;T&amp;gt;`の左辺値`a, b`について次の条件を満たす場合に限って、型`T, Cat`は`three_way_comparable`のモデルである
     - `(a &amp;lt;=&amp;gt; b == 0) == bool(a == b)`が`true`であること
     - `(a &amp;lt;=&amp;gt; b != 0) == bool(a != b)`が`true`であること
-    - `((a &amp;lt;=&amp;gt; b) &amp;lt;=&amp;gt; 0) == (0 &amp;lt;=&amp;gt; (a &amp;lt;=&amp;gt; b))`が等値
+    - `((a &amp;lt;=&amp;gt; b) &amp;lt;=&amp;gt; 0)`と`(0 &amp;lt;=&amp;gt; (a &amp;lt;=&amp;gt; b))`が等値
     - `(a &amp;lt;=&amp;gt; b &amp;lt; 0) == bool(a &amp;lt; b)`が`true`であること
     - `(a &amp;lt;=&amp;gt; b &amp;gt; 0) == bool(a &amp;gt; b)`が`true`であること
     - `(a &amp;lt;=&amp;gt; b &amp;lt;= 0) == bool(a &amp;lt;= b)`が`true`であること
@@ -101,7 +101,7 @@ concept three_way_comparable_with =
   
 - (2) : `const remove_reference_t&amp;lt;T&amp;gt;, const remove_reference_t&amp;lt;U&amp;gt;`の左辺値`t, u`、`C = common_reference_t&amp;lt;const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt;`について次の条件を満たす場合に限って、型`T, U, Cat`は`three_way_comparable_with`のモデルである
     - `t &amp;lt;=&amp;gt; u`と`u &amp;lt;=&amp;gt; t`が同じ[定義域](/reference/concepts.md)を持つ
-    - `((t &amp;lt;=&amp;gt; u) &amp;lt;=&amp;gt; 0) == (0 &amp;lt;=&amp;gt; (t &amp;lt;=&amp;gt; u))`が等値
+    - `((t &amp;lt;=&amp;gt; u) &amp;lt;=&amp;gt; 0)`と`(0 &amp;lt;=&amp;gt; (t &amp;lt;=&amp;gt; u))`が等値
     - `(t &amp;lt;=&amp;gt; u == 0) == bool(t == u)`が`true`であること
     - `(t &amp;lt;=&amp;gt; u != 0) == bool(t != u)`が`true`であること
     - `Cat(t &amp;lt;=&amp;gt; u) == Cat(C(t) &amp;lt;=&amp;gt; C(u))`が`true`であること
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>convertible_to -- convertible_to : 意味論要件を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/convertible_to.html"/>
      <id>6360867a1f9b313a4b4f84bc8b75a231bfd341ea:reference/concepts/convertible_to.md</id>
      <updated>2022-07-19T18:42:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/convertible_to.md b/reference/concepts/convertible_to.md
index 1b4a82011..b6be42623 100644
--- a/reference/concepts/convertible_to.md
+++ b/reference/concepts/convertible_to.md
@@ -25,28 +25,27 @@ namespace std {
 
 ## モデル
 
-`FromR = add_rvalue_reference_t&amp;lt;From&amp;gt;`として、説明のための関数`test(), f()`を以下のように定義、宣言する。
+`FromR = add_rvalue_reference_t&amp;lt;From&amp;gt;`として、説明のための関数`test()`を以下のように定義する。
 
 ```cpp
-To test(FromR (&amp;amp;func)()) {
-  return func();
+To test(FromR (&amp;amp;f)()) {
+  return f();
 }
-
-FromR f();
 ```
 
-この`test()`関数、型`FromR, To`及び、[等しさを保持](/reference/concepts.md)し`FromR`型を返す引数なしの関数`f`について、以下の条件を満たす場合に限って型`From, To`は`convertible_to`のモデルである。
+この`f`は引数をとらず`FromR`を返す関数であり、`f()`の呼び出しは[等しさを保持](/reference/concepts.md)する。
+
+この`test()`と`FromR, To`について、以下の条件を満たす場合に限って型`From, To`は`convertible_to`のモデルである。
 
 - 次のどちらかを満たす
     - `To`は[オブジェクト型](/reference/type_traits/is_object.md)でもオブジェクトへの参照型でもない
     - `static_cast&amp;lt;To&amp;gt;(f())`と`test(f)`は等しい
-- 次のいずれかを満たす
-    - `FromR`はオブジェクトへの参照型ではない
-    - `FromR`が非`const`右辺値参照型の場合、`f()`の呼び出しによって参照されるオブジェクトの状態は、上記の式の実行の後でも有効だが未規定となる
+- `FromR`がオブジェクトへの参照型ではない場合、次のどちらかを満たす
+    - `FromR`が非`const`右辺値参照型の場合、`f()`の呼び出しによって参照されるオブジェクトの状態は、上記の式の実行の後で有効だが未規定となる
         - 標準ライブラリの型のオブジェクトは特に指定がない場合、ムーブされた後の状態は有効だが未規定となる
-    - `f()`の呼び出しによって参照されるオブジェクトは上記の式の実行によって変更されない
+    - それ以外の場合、`f()`の呼び出しによって参照されるオブジェクトは上記の式の実行によって変更されない
 
-2つ目のor条件列に出てくる「上記の式」とは、`static_cast&amp;lt;To&amp;gt;(f())`と`test(f)`のこと。
+2つ目の条件内に出てくる「上記の式」とは、`static_cast&amp;lt;To&amp;gt;(f())`と`test(f)`のこと。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- path::operator== : equivalentについて追記</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/path/op_equal.html"/>
      <id>8916c59afde174e282c65bc803f0e9a4c5b745a3:reference/filesystem/path/op_equal.md</id>
      <updated>2022-07-19T17:10:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/path/op_equal.md b/reference/filesystem/path/op_equal.md
index ee2ebe1c8..8f8b81b79 100644
--- a/reference/filesystem/path/op_equal.md
+++ b/reference/filesystem/path/op_equal.md
@@ -23,6 +23,7 @@ return !(lhs &amp;lt; rhs) &amp;amp;&amp;amp; !(rhs &amp;lt; lhs);
 ## 備考
 `lhs.`[`compare`](compare.md)`(rhs) == 0`と等価
 
+この演算子はパス要素列の等価性を判定するため、パスが意味的に同一かどうかを判定することはできない。パス文字列の意味的な等価性判定には、[filesystem::equivalent()](/reference/filesystem/equivalent.md)を使用する。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>totally_ordered -- totally_ordered : 意味論要件の修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/totally_ordered.html"/>
      <id>6815142e2ef7142c9f9e1508a29307e5e422735e:reference/concepts/totally_ordered.md</id>
      <updated>2022-07-19T13:00:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/totally_ordered.md b/reference/concepts/totally_ordered.md
index ce7eb1bbe..2bacae631 100644
--- a/reference/concepts/totally_ordered.md
+++ b/reference/concepts/totally_ordered.md
@@ -38,7 +38,6 @@ namespace std {
 - (1) : `const remove_reference_t&amp;lt;T&amp;gt;`型の左辺値`a, b, c`について次の条件を満たす場合に限って、型`T`は`totally_ordered`のモデルである。
     - `bool(a &amp;lt; b)`、`bool(a &amp;gt; b)`、`bool(a == b)`はいずれか1つだけが`true`となる
     - `bool(a &amp;lt; b)`かつ`bool(b &amp;lt; c)`ならば、`bool(a &amp;lt; c)`
-    - `bool(a &amp;gt; b) == bool(b &amp;lt; a)`が`true`であること
     - `bool(a &amp;lt;= b) == !bool(b &amp;lt; a)`が`true`であること
     - `bool(a &amp;gt;= b) == !bool(a &amp;lt; b)`が`true`であること
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assignable_from -- assignable_from : 間違いを訂正と追記</title>
      <link href="https://cpprefjp.github.io/reference/concepts/assignable_from.html"/>
      <id>b77a069a7043bb64b41c3356a803fc62c63afb3c:reference/concepts/assignable_from.md</id>
      <updated>2022-07-18T16:53:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/assignable_from.md b/reference/concepts/assignable_from.md
index 256e22170..7c27d2213 100644
--- a/reference/concepts/assignable_from.md
+++ b/reference/concepts/assignable_from.md
@@ -26,19 +26,21 @@ namespace std {
 
 ## モデル
 
-まず、`lhs`を`decltype((lhs))`が`LHS`であるような`lcopy`オブジェクトを参照する左辺値、`rhs`を`decltype((rhs))`が`RHS`であるような式、`rcopy`を`rhs`と等値な個別のオブジェクトとして定義する。
+まず、`lhs`を`decltype((lhs))`が`LHS`であるような`lcopy`オブジェクトを参照する左辺値（参照）、`rhs`を`decltype((rhs))`が`RHS`であるような式、`rcopy`を`rhs`と等値な別のオブジェクトとして定義する。
 
 これらの`lhs, rhs, lcopy, rcopy`について、以下の条件を満たす場合に限って、型`LHS, RHS`は`assignable_from`のモデルである。
 
 - [`addressof`](/reference/memory/addressof.md)`(lhs = rhs) == `[`addressof`](/reference/memory/addressof.md)`(lcopy)`となる
-- `lhs = rhs;`という式の評価の後で以下のいずれかのことが成り立っている
-    - `rhs`が`lcopy`を参照する非`const` *xvalue*でないならば
+- `lhs = rhs;`という式の評価の後で以下のことが成り立っている
+    - `rhs`が`lcopy`を参照する非`const` *xvalue*でない（ムーブが起こる自己代入ではない）場合
         - `lhs`は`rcopy`と等値である
     - `rhs`が非`const` *xvalue*ならば
         - `rhs`が参照するオブジェクトの状態は有効だが未規定
     - それ以外の場合で、`rhs`が*glvalue*ならば
         - `rhs`が参照するオブジェクトは変更されない
 
+`rhs`が*prvalue*の場合、2つめの条件のいずれにも該当しない。これはコピー省略等の最適化を考慮したものである。
+
 ## 備考
 
 代入操作では、引数型の一部の値が本コンセプトが要求する構文・意味論的制約を必ずしも満たしていなくても構わない。特に、あるオブジェクト`x`への代入操作によって別のオブジェクト`y`が変更される時、`x, y`はその場合の`=`の定義域に含まれない事がある。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
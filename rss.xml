<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-06-12T14:39:23.866874</updated>
  <id>f2b22818-0e2d-4136-9444-d8f75121ec76</id>

  
    <entry>
      <title>indirectly_writable -- NGワードとしてpvalue (prvalueのtypo) を追加</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_writable.html"/>
      <id>5ae2c39abd2fa04018b5ee8add2a054c25079f4c:reference/iterator/indirectly_writable.md</id>
      <updated>2023-06-12T19:14:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_writable.md b/reference/iterator/indirectly_writable.md
index c8e64a86c..f0974db85 100644
--- a/reference/iterator/indirectly_writable.md
+++ b/reference/iterator/indirectly_writable.md
@@ -33,26 +33,26 @@ namespace std {
 
 `const_cast`を用いる制約式は、非プロキシオブジェクト（値を所有するオブジェクトのことである。[`std::string`](/reference/string/basic_string.md)などが該当）を弾くために存在する。
 
-まず前提として、非プロキシオブジェクトは[メンバ関数の左辺値／右辺値修飾](https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html)が追加される以前からの慣習により、*pvalue*であっても代入が可能である。また、値を所有するために`const`が付与されれば代入は不可能となる。
+まず前提として、非プロキシオブジェクトは[メンバ関数の左辺値／右辺値修飾](https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html)が追加される以前からの慣習により、*prvalue*であっても代入が可能である。また、値を所有するために`const`が付与されれば代入は不可能となる。
 
 ```cpp example
 #include &amp;lt;string&amp;gt;
 
 int main()
 { 
-  std::string()  = &amp;#34;string&amp;#34;; // pvalueに代入
+  std::string()  = &amp;#34;string&amp;#34;; // prvalueに代入
 }
 ```
 
-このような非プロキシオブジェクトの*pvalue*がイテレータの間接参照結果として返された場合、それに書き込んだとしても、その*pvalue*のオブジェクトが所有する値を書き換えるのみであり、正しく出力されるとは言えない。
+このような非プロキシオブジェクトの*prvalue*がイテレータの間接参照結果として返された場合、それに書き込んだとしても、その*prvalue*のオブジェクトが所有する値を書き換えるのみであり、正しく出力されるとは言えない。
 
-一方で、プロキシオブジェクト（所有権を持たず、他のオブジェクトを参照するオブジェクト）がイテレータの間接参照結果として返された場合は、*pvalue*の場合も代入された値を「参照する先のオブジェクトが所有する値」へ書き込むことによって、正しく出力を完了することが出来る。
+一方で、プロキシオブジェクト（所有権を持たず、他のオブジェクトを参照するオブジェクト）がイテレータの間接参照結果として返された場合は、*prvalue*の場合も代入された値を「参照する先のオブジェクトが所有する値」へ書き込むことによって、正しく出力を完了することが出来る。
 
 更に、プロキシオブジェクトは値を所有しないため「`const`な参照先」でなければ、プロキシオブジェクトそれ自体が`const`であっても代入は可能であるべきである。しかしながら、従来のプロキシオブジェクトは`const`を付与された場合代入が不可能になる実装が殆どであり、変更が必要である。例としては[`std::vector&amp;lt;bool&amp;gt;::reference`](/reference/vector/vector.md)がある。
 
 プロキシオブジェクトの他にも、参照（右辺値参照/左辺値参照問わず）も正しく出力が可能である。このことから、「`const`を付与した上でも代入が可能であるようなプロキシオブジェクト」と「参照」を合わせて「プロキシ参照（proxy reference）」と呼称することがある。
 
-以上のことから、`const`を付与した際にも代入が可能であればプロキシ参照、不可能であれば非プロキシ参照と区別することが可能となる。したがって、間接参照が非プロキシ参照（プロキシオブジェクトでない*pvalue*など）を返すイテレータ型は本コンセプトのモデルとならず、プロキシ参照を返すイテレータは本コンセプトのモデルとなる事ができる。
+以上のことから、`const`を付与した際にも代入が可能であればプロキシ参照、不可能であれば非プロキシ参照と区別することが可能となる。したがって、間接参照が非プロキシ参照（プロキシオブジェクトでない*prvalue*など）を返すイテレータ型は本コンセプトのモデルとならず、プロキシ参照を返すイテレータは本コンセプトのモデルとなる事ができる。
 
 ## モデル
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reference_constructs_from_temporary -- NGワードとしてpvalue (prvalueのtypo) を追加</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/reference_constructs_from_temporary.html"/>
      <id>5ae2c39abd2fa04018b5ee8add2a054c25079f4c:reference/type_traits/reference_constructs_from_temporary.md</id>
      <updated>2023-06-12T19:14:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/reference_constructs_from_temporary.md b/reference/type_traits/reference_constructs_from_temporary.md
index 05d91676b..1e50abada 100644
--- a/reference/type_traits/reference_constructs_from_temporary.md
+++ b/reference/type_traits/reference_constructs_from_temporary.md
@@ -31,17 +31,17 @@ namespace std {
 `VAL&amp;lt;U&amp;gt;`を次のように定義する。
 
 - `U`が参照型や関数型の場合、[`declval`](/reference/utility/declval.md)`&amp;lt;U&amp;gt;()`と同じ型と値カテゴリを持つ式
-- `U`が参照型や関数型でない場合、型`U`である`pvalue`（ただし、`U`に`const`/`volatile`修飾があれば調整される）
+- `U`が参照型や関数型でない場合、型`U`である`prvalue`（ただし、`U`に`const`/`volatile`修飾があれば調整される）
 
 [`conjunction_v`](conjunction.md)`&amp;lt;`[`is_reference`](is_reference.md)`&amp;lt;T&amp;gt;,` [`is_constructible`](is_constructible.md)`&amp;lt;T, U&amp;gt;&amp;gt;`が`true`かつ、`T t(VAL&amp;lt;U&amp;gt;)`において`t`が一時オブジェクトの寿命を延長する場合に[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 
 ## 備考
-多くのメタ関数は`pvalue`と`xvalue`を区別しないが、このメタ関数は区別する。例えば、右辺値参照に「戻り値の型が右辺値参照である関数」の戻り値を束縛することを考える。（再現コードは、説明の最後に付す）
+多くのメタ関数は`prvalue`と`xvalue`を区別しないが、このメタ関数は区別する。例えば、右辺値参照に「戻り値の型が右辺値参照である関数」の戻り値を束縛することを考える。（再現コードは、説明の最後に付す）
 
-この事自体は即座に不適格とはならない。しかし、その関数が実際には`pvalue`を返しているとすれば、その`pvalue`は戻り値の時点で右辺値参照に束縛されるため、それを右辺値参照に束縛したとしても寿命は延長されることはない。そのため、最終的にダングリング参照を生じることとなる。
+この事自体は即座に不適格とはならない。しかし、その関数が実際には`prvalue`を返しているとすれば、その`prvalue`は戻り値の時点で右辺値参照に束縛されるため、それを右辺値参照に束縛したとしても寿命は延長されることはない。そのため、最終的にダングリング参照を生じることとなる。
 
-このような場面においては、本メタ関数が`pvalue`と`xvalue`を、`pvalue`を`T`（参照なしの型）として、`xvalue`を`T&amp;amp;&amp;amp;`（右辺値参照である型、転送参照(Forwarding Reference) を意味しているわけではない）として区別すれば検出が可能となる。
+このような場面においては、本メタ関数が`prvalue`と`xvalue`を、`prvalue`を`T`（参照なしの型）として、`xvalue`を`T&amp;amp;&amp;amp;`（右辺値参照である型、転送参照(Forwarding Reference) を意味しているわけではない）として区別すれば検出が可能となる。
 
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reference_converts_from_temporary -- NGワードとしてpvalue (prvalueのtypo) を追加</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/reference_converts_from_temporary.html"/>
      <id>5ae2c39abd2fa04018b5ee8add2a054c25079f4c:reference/type_traits/reference_converts_from_temporary.md</id>
      <updated>2023-06-12T19:14:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/reference_converts_from_temporary.md b/reference/type_traits/reference_converts_from_temporary.md
index 63ea01dea..35cde01c5 100644
--- a/reference/type_traits/reference_converts_from_temporary.md
+++ b/reference/type_traits/reference_converts_from_temporary.md
@@ -27,17 +27,17 @@ namespace std {
 `VAL&amp;lt;U&amp;gt;`を次のように定義する。
 
 - `U`が参照型や関数型の場合、[`declval`](/reference/utility/declval.md)`&amp;lt;U&amp;gt;()`と同じ型と値カテゴリを持つ式
-- `U`が参照型や関数型でない場合、型`U`である`pvalue`（ただし、`U`に`const`/`volatile`修飾があれば調整される）
+- `U`が参照型や関数型でない場合、型`U`である`prvalue`（ただし、`U`に`const`/`volatile`修飾があれば調整される）
 
 [`conjunction_v`](conjunction.md)`&amp;lt;`[`is_reference`](is_reference.md)`&amp;lt;T&amp;gt;,` [`is_convertible`](is_convertible.md)`&amp;lt;U, T&amp;gt;&amp;gt;`が`true`かつ、`T t(VAL&amp;lt;U&amp;gt;)`において`t`が一時オブジェクトの寿命を延長する場合に[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 
 ## 備考
-多くのメタ関数は`pvalue`と`xvalue`を区別しないが、このメタ関数は区別する。例えば、右辺値参照に「戻り値の型が右辺値参照である関数」の戻り値を束縛することを考える。（再現コードは、説明の最後に付す）
+多くのメタ関数は`prvalue`と`xvalue`を区別しないが、このメタ関数は区別する。例えば、右辺値参照に「戻り値の型が右辺値参照である関数」の戻り値を束縛することを考える。（再現コードは、説明の最後に付す）
 
-この事自体は即座に不適格とはならない。しかし、その関数が実際には`pvalue`を返しているとすれば、その`pvalue`は戻り値の時点で右辺値参照に束縛されるため、それを右辺値参照に束縛したとしても寿命は延長されることはない。そのため、最終的にダングリング参照を生じることとなる。
+この事自体は即座に不適格とはならない。しかし、その関数が実際には`prvalue`を返しているとすれば、その`prvalue`は戻り値の時点で右辺値参照に束縛されるため、それを右辺値参照に束縛したとしても寿命は延長されることはない。そのため、最終的にダングリング参照を生じることとなる。
 
-このような場面においては、本メタ関数が`pvalue`と`xvalue`を、`pvalue`を`T`（参照なしの型）として、`xvalue`を`T&amp;amp;&amp;amp;`（右辺値参照である型、転送参照(Forwarding Reference) を意味しているわけではない）として区別すれば検出が可能となる。
+このような場面においては、本メタ関数が`prvalue`と`xvalue`を、`prvalue`を`T`（参照なしの型）として、`xvalue`を`T&amp;amp;&amp;amp;`（右辺値参照である型、転送参照(Forwarding Reference) を意味しているわけではない）として区別すれば検出が可能となる。
 
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- コルーチン : pvalue -&gt; prvalue</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>5e2017d1eb229b78d1ae16d99c4afef381682a58:lang/cpp20/coroutines.md</id>
      <updated>2023-06-12T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 89de2759f..4796f99c3 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -434,8 +434,8 @@ _p_ をコルーチンPromiseオブジェクトのlvalue名とすると、`co_re
 
 ここで _final-suspend_ はコルーチン動作説明用の最終サスペンドポイントラベル名であり、_S_ は次の通り定義される：
 
-- オペランドが _braced-init-list_ または非`void`型の式の場合、_S_ を _p_`.return_value(` _expr-or-braced-init-list_ `)`とする。式 _S_ は `void`型のpvalueであるべき。
-- そうでなければ、_S_ を複合文 `{` _expression_ _opt_ `;` _p_`.return_void(); }`とする。式 _p_`.return_void()`は`void`型のpvalueであるべき。
+- オペランドが _braced-init-list_ または非`void`型の式の場合、_S_ を _p_`.return_value(` _expr-or-braced-init-list_ `)`とする。式 _S_ は `void`型のprvalueであるべき。
+- そうでなければ、_S_ を複合文 `{` _expression_ _opt_ `;` _p_`.return_void(); }`とする。式 _p_`.return_void()`は`void`型のprvalueであるべき。
 
 _p_`.return_void()`が有効な式のとき、コルーチン本体の終端到達はオペランド無し`co_return`と等価である。
 そうでなければ、コルーチン本体の終端到達は未定義の動作を引き起こす。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- flat_map::emplace : インクルードミスを修正 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/emplace.html"/>
      <id>83dd89cb38bbc23df68cf8b6372ea0a7010a2385:reference/flat_map/flat_map/emplace.md</id>
      <updated>2023-06-12T14:29:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/emplace.md b/reference/flat_map/flat_map/emplace.md
index e69100dbb..f822e8ec7 100644
--- a/reference/flat_map/flat_map/emplace.md
+++ b/reference/flat_map/flat_map/emplace.md
@@ -49,7 +49,7 @@ c.values.insert(value_it, std::move(t.second));
 ### 単純なキー・値を挿入する例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
-#include &amp;lt;map&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
 
 int main()
 {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- flat_map::emplace : コード修飾のリンク追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/emplace.html"/>
      <id>31bf54bd4fb47c87772bc62b636047089f5176d9:reference/flat_map/flat_map/emplace.md</id>
      <updated>2023-06-12T14:28:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/emplace.md b/reference/flat_map/flat_map/emplace.md
index 68174e75b..e69100dbb 100644
--- a/reference/flat_map/flat_map/emplace.md
+++ b/reference/flat_map/flat_map/emplace.md
@@ -32,8 +32,11 @@ auto value_it = c.values.begin() + distance(c.keys.begin(), key_it);
 c.keys.insert(key_it, std::move(t.first));
 c.values.insert(value_it, std::move(t.second));
 ```
+* c.keys[link containers.md]
+* c.values[link containers.md]
 * ranges::upper_bound[link /reference/algorithm/ranges_upper_bound.md]
 * begin()[link /reference/vector/vector/begin.md]
+* distance[link /reference/iterator/distance.md]
 * insert[link /reference/vector/vector/insert.md]
 * std::move[link /reference/utility/move.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : emplaceを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>ff098b7d447c0a2f43b975706bdbdfd457da3c9e:reference/flat_map/flat_map.md</id>
      <updated>2023-06-12T14:04:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index 60a86281a..18628ef35 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -61,7 +61,7 @@ namespace std {
 | [`insert`](flat_map/insert.md.nolink)                     | 要素を挿入する                             | C++23 |
 | [`insert_or_assign`](flat_map/insert_or_assign.md.nolink) | 要素を挿入、あるいは代入する               | C++23 |
 | [`insert_range`](flat_map/insert_range.md.nolink)         | Rangeを挿入する                            | C++23 |
-| [`emplace`](flat_map/emplace.md.nolink)                   | 要素を直接構築する                         | C++23 |
+| [`emplace`](flat_map/emplace.md)                   | 要素を直接構築する                         | C++23 |
 | [`emplace_hint`](flat_map/emplace_hint.md.nolink)         | ヒントを使って要素を直接構築する           | C++23 |
 | [`try_emplace`](flat_map/try_emplace.md.nolink)           | キーが存在しない場合のみ要素を直接構築する | C++23 |
 | [`erase`](flaflat_maptmap/erase.md.nolink)                | 要素を削除する                             | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- flat_map : emplaceを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/emplace.html"/>
      <id>ff098b7d447c0a2f43b975706bdbdfd457da3c9e:reference/flat_map/flat_map/emplace.md</id>
      <updated>2023-06-12T14:04:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/emplace.md b/reference/flat_map/flat_map/emplace.md
new file mode 100644
index 000000000..68174e75b
--- /dev/null
+++ b/reference/flat_map/flat_map/emplace.md
@@ -0,0 +1,136 @@
+# emplace
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class... Args&amp;gt;
+pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;... args);
+```
+* pair[link /reference/utility/pair.md]
+
+## 概要
+コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数を与えることによって呼ばれる。
+
+
+## パラメータ
+- `args...` : 要素のコンストラクタへ転送される引数パック。
+
+
+## テンプレートパラメータ制約
+- [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;`[`pair`](/reference/utility/pair.md)`&amp;lt;key_type, mapped_type&amp;gt;, Arg...&amp;gt;`が`true`であること
+
+
+## 効果
+[`pair`](/reference/utility/pair.md)`&amp;lt;key_type, mapped_type&amp;gt;`型の変数`t`を[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で初期化する。このコンテナが`t.first`と等価なキーをすでにもっている場合、`*this`を変更しない。そうでない場合、以下と等価：
+
+```cpp
+auto key_it = ranges::upper_bound(c.keys, t.first, compare);
+auto value_it = c.values.begin() + distance(c.keys.begin(), key_it);
+c.keys.insert(key_it, std::move(t.first));
+c.values.insert(value_it, std::move(t.second));
+```
+* ranges::upper_bound[link /reference/algorithm/ranges_upper_bound.md]
+* begin()[link /reference/vector/vector/begin.md]
+* insert[link /reference/vector/vector/insert.md]
+* std::move[link /reference/utility/move.md]
+
+
+## 戻り値
+挿入されたかどうかを示す `bool` と、挿入された要素へのイテレータからなる [`pair`](/reference/utility/pair.md) を返す。挿入されなかったときは、既存要素へのイテレータを返す。
+
+
+## 例
+### 単純なキー・値を挿入する例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm;
+
+  // キーと値のpairを作ることなく挿入できる
+  fm.emplace(3, &amp;#39;A&amp;#39;); // キー3と、値&amp;#39;A&amp;#39;を挿入
+  fm.emplace(1, &amp;#39;B&amp;#39;);
+  fm.emplace(4, &amp;#39;C&amp;#39;);
+
+  for (const auto&amp;amp; [key, value] : fm) {
+    std::cout &amp;lt;&amp;lt; key &amp;lt;&amp;lt; &amp;#34; : &amp;#34; &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* emplace[color ff0000]
+
+#### 出力
+```
+1 : B
+3 : A
+4 : C
+```
+
+### キーと値もそれぞれコンストラクタ引数を渡す例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;tuple&amp;gt;
+
+struct Point {
+  int x, y;
+  Point(int x, int y) : x(x), y(y) {}
+};
+
+int main()
+{
+  stdx::flat_map&amp;lt;std::string, Point&amp;gt; fm;
+
+  fm.emplace(std::piecewise_construct,
+             std::forward_as_tuple(3, &amp;#39;C&amp;#39;), // キーの型std::stringのコンストラクタ引数を渡す
+             std::forward_as_tuple(1, 2));  // 値の型Pointのコンストラクタ引数を渡す
+
+  fm.emplace(std::piecewise_construct,
+             std::forward_as_tuple(3, &amp;#39;A&amp;#39;),
+             std::forward_as_tuple(3, 4));
+
+  fm.emplace(std::piecewise_construct,
+             std::forward_as_tuple(3, &amp;#39;B&amp;#39;),
+             std::forward_as_tuple(5, 6));
+
+  for (const auto&amp;amp; [key, value] : fm) {
+    std::cout &amp;lt;&amp;lt; key &amp;lt;&amp;lt; &amp;#34; : (&amp;#34; &amp;lt;&amp;lt; value.x &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; value.y &amp;lt;&amp;lt; &amp;#39;)&amp;#39; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* emplace[color ff0000]
+* std::piecewise_construct[link /reference/utility/piecewise_construct_t.md]
+* std::forward_as_tuple[link /reference/tuple/forward_as_tuple.md]
+
+#### 出力
+```
+AAA : (3, 4)
+BBB : (5, 6)
+CCC : (1, 2)
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前                                           | 説明                                       |
+|------------------------------------------------|--------------------------------------------|
+| [`flat_map::insert`](insert.md.nolink)                     | 要素を挿入する                             |
+| [`flat_map::insert_or_assign`](insert_or_assign.md.nolink) | 要素を挿入、あるいは代入する               |
+| [`flat_map::emplace_hint`](emplace_hint.md.nolink)         | ヒントを使って要素を直接構築する           |
+| [`flat_map::try_emplace`](try_emplace.md.nolink)           | キーが存在しない場合のみ要素を直接構築する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
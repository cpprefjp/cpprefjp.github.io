<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-09-29T14:35:24.820389</updated>
  <id>5200d333-9d43-418a-8913-352960479559</id>

  
    <entry>
      <title>unique -- Merge pull request #808 from cpprefjp/fix-list-unique-copy-paste-error</title>
      <link href="https://cpprefjp.github.io/reference/list/list/unique.html"/>
      <id>4a727e8ed8e0025cfd7c233e25e0e71b9351094f:reference/list/list/unique.md</id>
      <updated>2020-09-29T14:08:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/unique.md b/reference/list/list/unique.md
index c18cff223..6ad371e02 100644
--- a/reference/list/list/unique.md
+++ b/reference/list/list/unique.md
@@ -6,7 +6,7 @@
 
 ```cpp
 void unique();                          // (1) C++03
-size_type unique();                     // (1) C++03
+size_type unique();                     // (1) C++20
 
 template &amp;lt;class BinaryPredicate&amp;gt;
 void unique(BinaryPredicate pred);      // (2) C++03
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unique -- C++03 -&gt; C++20</title>
      <link href="https://cpprefjp.github.io/reference/list/list/unique.html"/>
      <id>6ff36b1eb4aa83c0327099fbfa3845876a7fc33a:reference/list/list/unique.md</id>
      <updated>2020-09-29T12:53:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/unique.md b/reference/list/list/unique.md
index c18cff223..6ad371e02 100644
--- a/reference/list/list/unique.md
+++ b/reference/list/list/unique.md
@@ -6,7 +6,7 @@
 
 ```cpp
 void unique();                          // (1) C++03
-size_type unique();                     // (1) C++03
+size_type unique();                     // (1) C++20
 
 template &amp;lt;class BinaryPredicate&amp;gt;
 void unique(BinaryPredicate pred);      // (2) C++03
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>exchange -- exchange : イディオムをまとめた記事へのリンクを追加</title>
      <link href="https://cpprefjp.github.io/reference/utility/exchange.html"/>
      <id>91625ad7374ac57d97b4c4137b85a25420c5bf67:reference/utility/exchange.md</id>
      <updated>2020-09-28T15:02:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/exchange.md b/reference/utility/exchange.md
index fb2011855..5216ba12f 100644
--- a/reference/utility/exchange.md
+++ b/reference/utility/exchange.md
@@ -136,3 +136,4 @@ int main()
 - [N3608 exchange() utility function, revision 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3608.html)
 - [N3668 exchange() utility function, revision 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3668.html)
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
+- [`std::exchange` Patterns: Fast, Safe, Expressive, and Probably Underused](https://www.fluentcpp.com/2020/09/25/stdexchange-patterns-fast-safe-expressive-and-probably-underused/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirectly_comparable -- indirectly_comparable : コード内リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_comparable.html"/>
      <id>e9c3984672c3270518fbf35c8012348dc2772eeb:reference/iterator/indirectly_comparable.md</id>
      <updated>2020-09-25T16:11:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_comparable.md b/reference/iterator/indirectly_comparable.md
index 80b780fc9..bb5ba4db4 100644
--- a/reference/iterator/indirectly_comparable.md
+++ b/reference/iterator/indirectly_comparable.md
@@ -58,7 +58,7 @@ int main() {
 ```
 * std::indirectly_comparable[color ff0000]
 * identity[link /reference/functional/identity.md]
-* greater[link /reference/functional/less.md]
+* less[link /reference/functional/less.md]
 * greater[link /reference/functional/greater.md]
 * iterator_t[link /reference/ranges/iterator_t.md.nolink]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirectly_comparable -- indirectly_comparable : リンク追加と修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_comparable.html"/>
      <id>a11beb00aa04ece79b5a12c1138f7002dee05709:reference/iterator/indirectly_comparable.md</id>
      <updated>2020-09-25T16:09:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_comparable.md b/reference/iterator/indirectly_comparable.md
index 0ff097302..80b780fc9 100644
--- a/reference/iterator/indirectly_comparable.md
+++ b/reference/iterator/indirectly_comparable.md
@@ -17,7 +17,7 @@ namespace std {
 
 ## 概要
 
-`indirectly_comparable`は、`indirectly_readable`な型`I1, I2`の参照する要素のオブジェクトが`R`の比較関数によって比較可能であることを表すコンセプトである。  
+`indirectly_comparable`は、[`indirectly_readable`](indirectly_readable.md)な型`I1, I2`の参照する要素のオブジェクトが`R`の比較関数によって比較可能であることを表すコンセプトである。  
 また、その際に任意の射影操作（`P1, P2`）を指定する事ができる。
 
 単純には、型`I1, I2, R, P1, P2`のオブジェクトをそれぞれ`i1, i2, comp, proj1, proj2`とすると`bool c = comp(proj1(*i1), proj2(*i2))`のような比較が可能であることを表している。
@@ -34,8 +34,8 @@ namespace std {
 template&amp;lt;class I, class Range, class R, class P1 = std::identity, class P2 = std::identity&amp;gt;
   requires std::indirectly_comparable&amp;lt;I, std::ranges::iterator_t&amp;lt;Range&amp;gt;, R, P1, P2&amp;gt;
 bool compare_range(I&amp;amp;&amp;amp; lhs, Range&amp;amp;&amp;amp; r, R comp, P1 proj1 = {}, P2 proj2 = {}) {
-  for (auto&amp;amp;&amp;amp; v : r) {
-    if (comp(proj1(*lhs), proj2(v)) == false) return false;
+  for (auto&amp;amp;&amp;amp; rhs : r) {
+    if (comp(proj1(*lhs), proj2(rhs)) == false) return false;
   }
   return true;
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
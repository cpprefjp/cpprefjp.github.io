<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-02-28T16:03:28.475545</updated>
  <id>2b5643ed-9741-4dc0-afe0-e000a2dda647</id>

  
    <entry>
      <title>コンストラクタ -- リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year_month_day/op_constructor.html"/>
      <id>1980594dbb94275a0d8526692c3c8bbdabcfccac:reference/chrono/year_month_day/op_constructor.md</id>
      <updated>2025-03-01T00:59:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year_month_day/op_constructor.md b/reference/chrono/year_month_day/op_constructor.md
index 56c8af48c..b7cbe5ccf 100644
--- a/reference/chrono/year_month_day/op_constructor.md
+++ b/reference/chrono/year_month_day/op_constructor.md
@@ -44,7 +44,7 @@ year_month_day(year_month_day&amp;amp;&amp;amp;) = default;                         // (7) C++20
 - (2) :
     - `y`、`m`、`d`をメンバ変数として保持する
 - (3) :
-    - 年のメンバ変数として`ymdl.`[`year()`](/reference/chrono/year_month_day_last/year.md)の値、月のメンバ変数として`ymdl.`[`month()`](/reference/chrono/year_month_day_last/month.md)の値、日のメンバ変数として`ymdl.`[`day()`](/reference/chrono/year_month_day_last/day.md)の値を保持する
+    - 年のメンバ変数として`ymdl.`[`year()`](year.md)の値、月のメンバ変数として`ymdl.`[`month()`](month.md)の値、日のメンバ変数として`ymdl.`[`day()`](day.md)の値を保持する
 - (4) : `dp`が指すシステム時間に対応する年、月、日の値を求めて構築する
 - (5) : `dp`が指すローカル時間に対応する年、月、日の値を求めて構築する
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- expected : C++26対応として比較演算子の適格要件をテンプレートパラメータ制約に変更 (close #1379)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_equal.html"/>
      <id>94b8b36e62a3cd0246fbf1c4e336fff4a300c877:reference/expected/expected.void/op_equal.md</id>
      <updated>2025-02-28T10:18:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_equal.md b/reference/expected/expected.void/op_equal.md
index d61ff5eda..f72459f70 100644
--- a/reference/expected/expected.void/op_equal.md
+++ b/reference/expected/expected.void/op_equal.md
@@ -24,7 +24,7 @@ friend constexpr bool operator==(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x);
 - (2), (3) : `expected`オブジェクトとエラー値の等値比較を行う。
 
 
-## 適格要件
+## テンプレートパラメータ制約
 - (1) : 式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、その結果を`bool`へ変換可能であること。
 - (2), (3) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md)が適格であり、その結果を`bool`へ変換可能であること。
 
@@ -80,3 +80,5 @@ int main()
 
 ## 参照
 - [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
+- [P3379R0 Constrain `std::expected` equality operators](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3379r0.html)
+    - C++26で「適格要件」を「テンプレートパラメータ制約」に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- expected : C++26対応として比較演算子の適格要件をテンプレートパラメータ制約に変更 (close #1379)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_not_equal.html"/>
      <id>94b8b36e62a3cd0246fbf1c4e336fff4a300c877:reference/expected/expected.void/op_not_equal.md</id>
      <updated>2025-02-28T10:18:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_not_equal.md b/reference/expected/expected.void/op_not_equal.md
index 9c203450b..b256e992f 100644
--- a/reference/expected/expected.void/op_not_equal.md
+++ b/reference/expected/expected.void/op_not_equal.md
@@ -25,7 +25,7 @@ friend constexpr bool operator!=(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x);
 - (2), (3) : `expected`オブジェクトとエラー値の非等値比較を行う。
 
 
-## 適格要件
+## テンプレートパラメータ制約
 - (1) : 式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、その結果を`bool`へ変換可能であること。
 - (2), (3) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md)が適格であり、その結果を`bool`へ変換可能であること。
 
@@ -79,3 +79,5 @@ int main()
 
 ## 参照
 - [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
+- [P3379R0 Constrain `std::expected` equality operators](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3379r0.html)
+    - C++26で「適格要件」を「テンプレートパラメータ制約」に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- expected : C++26対応として比較演算子の適格要件をテンプレートパラメータ制約に変更 (close #1379)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_equal.html"/>
      <id>94b8b36e62a3cd0246fbf1c4e336fff4a300c877:reference/expected/expected/op_equal.md</id>
      <updated>2025-02-28T10:18:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_equal.md b/reference/expected/expected/op_equal.md
index 25e4668a7..d491fff22 100644
--- a/reference/expected/expected/op_equal.md
+++ b/reference/expected/expected/op_equal.md
@@ -30,7 +30,7 @@ friend constexpr bool operator==(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x); //
 - (4), (5) : `expected`オブジェクトとエラー値の等値比較を行う。
 
 
-## 適格要件
+## テンプレートパラメータ制約
 - (1) : 式[`*x`](op_deref.md) `==` [`*y`](op_deref.md)および式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、各式の結果を`bool`へ変換可能であること。
 - (2), (3) : 式[`*x`](op_deref.md) `== v`が適格であり、その結果を`bool`へ変換可能であること。
 - (4), (5) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md)が適格であり、その結果を`bool`へ変換可能であること。
@@ -93,3 +93,5 @@ int main()
 
 ## 参照
 - [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
+- [P3379R0 Constrain `std::expected` equality operators](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3379r0.html)
+    - C++26で「適格要件」を「テンプレートパラメータ制約」に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- expected : C++26対応として比較演算子の適格要件をテンプレートパラメータ制約に変更 (close #1379)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_not_equal.html"/>
      <id>94b8b36e62a3cd0246fbf1c4e336fff4a300c877:reference/expected/expected/op_not_equal.md</id>
      <updated>2025-02-28T10:18:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_not_equal.md b/reference/expected/expected/op_not_equal.md
index bce953cf5..14cb8532e 100644
--- a/reference/expected/expected/op_not_equal.md
+++ b/reference/expected/expected/op_not_equal.md
@@ -30,7 +30,7 @@ friend constexpr bool operator!=(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x); //
 - (4), (5) : `expected`オブジェクトとエラー値の非等値比較を行う。
 
 
-## 適格要件
+## テンプレートパラメータ制約
 - (1) : 式[`*x`](op_deref.md) `==` [`*y`](op_deref.md)および式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、各式の結果を`bool`へ変換可能であること。
 - (2), (3) : 式[`*x`](op_deref.md) `== v`が適格であり、その結果を`bool`へ変換可能であること。
 - (4), (5) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md)が適格であり、その結果を`bool`へ変換可能であること。
@@ -90,3 +90,5 @@ int main()
 
 ## 参照
 - [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
+- [P3379R0 Constrain `std::expected` equality operators](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3379r0.html)
+    - C++26で「適格要件」を「テンプレートパラメータ制約」に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/array/array/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/array/array/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/empty.md b/reference/array/array/empty.md
index 243f0ffb0..78e17b412 100644
--- a/reference/array/array/empty.md
+++ b/reference/array/array/empty.md
@@ -9,6 +9,7 @@
 constexpr bool empty() noexcept;                     // C++11
 constexpr bool empty() const noexcept;               // C++14
 [[nodiscard]] constexpr bool empty() const noexcept; // C++20
+constexpr bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -68,3 +69,6 @@ empty_array : true
 ## 参照
 - [N3669 Fixing constexpr member functions without const](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3669.pdf)
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arrive -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/arrive.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/barrier/barrier/arrive.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/arrive.md b/reference/barrier/barrier/arrive.md
index 3a79b6bf4..6af0b912c 100644
--- a/reference/barrier/barrier/arrive.md
+++ b/reference/barrier/barrier/arrive.md
@@ -6,7 +6,9 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] arrival_token arrive(ptrdiff_t update = 1);
+[[nodiscard]]
+arrival_token arrive(ptrdiff_t update = 1); // (1) C++20
+arrival_token arrive(ptrdiff_t update = 1); // (1) C++26
 ```
 * ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
 
@@ -121,3 +123,8 @@ main: phase-2
 - [`wait()`](wait.md)
 - [`arrive_and_wait()`](arrive_and_wait.md)
 - [`arrive_and_drop()`](arrive_and_drop.md)
+
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rotl -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/bit/rotl.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/bit/rotl.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bit/rotl.md b/reference/bit/rotl.md
index 44ae11f43..058f16fae 100644
--- a/reference/bit/rotl.md
+++ b/reference/bit/rotl.md
@@ -7,7 +7,10 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  [[nodiscard]] constexpr T rotl(T x, int s) noexcept;
+  [[nodiscard]]
+  constexpr T rotl(T x, int s) noexcept; // (1) C++20
+  template &amp;lt;class T&amp;gt;
+  constexpr T rotl(T x, int s) noexcept; // (1) C++26
 }
 ```
 
@@ -73,3 +76,5 @@ int main()
 
 ## 参照
 - [P0553R4 Bit operations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0553r4.html)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rotr -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/bit/rotr.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/bit/rotr.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bit/rotr.md b/reference/bit/rotr.md
index d584d3da5..64df7741b 100644
--- a/reference/bit/rotr.md
+++ b/reference/bit/rotr.md
@@ -7,7 +7,10 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  [[nodiscard]] constexpr T rotr(T x, int s) noexcept;
+  [[nodiscard]]
+  constexpr T rotr(T x, int s) noexcept; // (1) C++20
+  template &amp;lt;class T&amp;gt;
+  constexpr T rotr(T x, int s) noexcept; // (1) C++26
 }
 ```
 
@@ -73,3 +76,5 @@ int main()
 
 ## 参照
 - [P0553R4 Bit operations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0553r4.html)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/deque/deque/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/empty.md b/reference/deque/deque/empty.md
index 44c1ef21b..7babfe8ab 100644
--- a/reference/deque/deque/empty.md
+++ b/reference/deque/deque/empty.md
@@ -8,6 +8,7 @@
 bool empty() const;                        // C++03
 bool empty() const noexcept;               // C++11
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -66,3 +67,6 @@ false
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/path/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/filesystem/path/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/path/empty.md b/reference/filesystem/path/empty.md
index 1de60dc18..ce9b40c72 100644
--- a/reference/filesystem/path/empty.md
+++ b/reference/filesystem/path/empty.md
@@ -8,6 +8,7 @@
 ```cpp
 bool empty() const noexcept;               // C++17
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -58,3 +59,6 @@ p2 : not empty
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/forward_list/forward_list/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/empty.md b/reference/forward_list/forward_list/empty.md
index 8fecaa0c7..ec0f36196 100644
--- a/reference/forward_list/forward_list/empty.md
+++ b/reference/forward_list/forward_list/empty.md
@@ -8,6 +8,7 @@
 ```cpp
 bool empty() const noexcept;               // C++11
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -68,3 +69,6 @@ false
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>async -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/future/async.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/future/async.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/async.md b/reference/future/async.md
index 875ee46de..e9c5fd0d7 100644
--- a/reference/future/async.md
+++ b/reference/future/async.md
@@ -9,41 +9,41 @@ namespace std {
   template &amp;lt;class F, class... Args&amp;gt;
   future&amp;lt;typename result_of&amp;lt;F(Args...)&amp;gt;::type&amp;gt;
     async(F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args);                // (1) C++11
-
   template &amp;lt;class F, class... Args&amp;gt;
   future&amp;lt;
     typename result_of&amp;lt;
       typename decay&amp;lt;F&amp;gt;::type(typename decay&amp;lt;Args&amp;gt;::type...)
     &amp;gt;::type
   &amp;gt; async(F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args);                // (1) C++14
-
   template &amp;lt;class F, class... Args&amp;gt;
   future&amp;lt;invoke_result_t&amp;lt;decay_t&amp;lt;F&amp;gt;, decay_t&amp;lt;Args&amp;gt;...&amp;gt;&amp;gt;
     async(F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args);                // (1) C++17
-
   template &amp;lt;class F, class... Args&amp;gt;
-  [[nodiscard]] future&amp;lt;invoke_result_t&amp;lt;decay_t&amp;lt;F&amp;gt;, decay_t&amp;lt;Args&amp;gt;...&amp;gt;&amp;gt;
+  [[nodiscard]]
+  future&amp;lt;invoke_result_t&amp;lt;decay_t&amp;lt;F&amp;gt;, decay_t&amp;lt;Args&amp;gt;...&amp;gt;&amp;gt;
     async(F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args);                // (1) C++20
+  future&amp;lt;invoke_result_t&amp;lt;decay_t&amp;lt;F&amp;gt;, decay_t&amp;lt;Args&amp;gt;...&amp;gt;&amp;gt;
+    async(F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args);                // (1) C++26
 
 
   template &amp;lt;class F, class... Args&amp;gt;
   future&amp;lt;typename result_of&amp;lt;F(Args...)&amp;gt;::type&amp;gt;
     async(launch policy, F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args); // (2) C++11
-
   template &amp;lt;class F, class... Args&amp;gt;
   future&amp;lt;
     typename result_of&amp;lt;
       typename decay&amp;lt;F&amp;gt;::type(typename decay&amp;lt;Args&amp;gt;::type...)
     &amp;gt;::type
   &amp;gt; async(launch policy, F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args); // (2) C++14
-
   template &amp;lt;class F, class... Args&amp;gt;
   future&amp;lt;invoke_result_t&amp;lt;decay_t&amp;lt;F&amp;gt;, decay_t&amp;lt;Args&amp;gt;...&amp;gt;&amp;gt;
     async(launch policy, F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args); // (2) C++17
-
   template &amp;lt;class F, class... Args&amp;gt;
-  [[nodiscard]] future&amp;lt;invoke_result_t&amp;lt;decay_t&amp;lt;F&amp;gt;, decay_t&amp;lt;Args&amp;gt;...&amp;gt;&amp;gt;
+  [[nodiscard]]
+  future&amp;lt;invoke_result_t&amp;lt;decay_t&amp;lt;F&amp;gt;, decay_t&amp;lt;Args&amp;gt;...&amp;gt;&amp;gt;
     async(launch policy, F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args); // (2) C++20
+  future&amp;lt;invoke_result_t&amp;lt;decay_t&amp;lt;F&amp;gt;, decay_t&amp;lt;Args&amp;gt;...&amp;gt;&amp;gt;
+    async(launch policy, F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args); // (2) C++26
 }
 ```
 * future[link future.md]
@@ -203,5 +203,8 @@ foo() = 3
 - [async関数launch::asyncポリシーとfutureのちょっと特殊な動作 - yohhoyの日記](https://yohhoy.hatenadiary.jp/entry/20120317/p1)
 - [P0604R0 Resolving GB 55, US 84, US 85, US 86](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0604r0.html)
 - [P0600R1 `[[nodiscard]]` in the Library, Rev1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
 - [In Visual Studio, `thread_local` variables&amp;#39; destructor not called when used with `std::async`, is this a bug? - stackoverflow](https://stackoverflow.com/questions/50897768/in-visual-studio-thread-local-variables-destructor-not-called-when-used-with)
 - [&amp;amp;lt;future&amp;amp;gt; functions - Microsoft Docs](https://docs.microsoft.com/en-us/cpp/standard-library/future-functions?view=vs-2019#remarks)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/iterator/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/iterator/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/empty.md b/reference/iterator/empty.md
index 63e62f390..f7d983b58 100644
--- a/reference/iterator/empty.md
+++ b/reference/iterator/empty.md
@@ -8,21 +8,24 @@
 namespace std {
   template &amp;lt;class C&amp;gt;
   constexpr auto empty(const C&amp;amp; c) -&amp;gt; decltype(c.empty());               // (1) C++17
-
   template &amp;lt;class C&amp;gt;
   [[nodiscard]] constexpr auto empty(const C&amp;amp; c) -&amp;gt; decltype(c.empty()); // (1) C++20
+  template &amp;lt;class C&amp;gt;
+  constexpr auto empty(const C&amp;amp; c) -&amp;gt; decltype(c.empty());               // (1) C++26
 
   template &amp;lt;class T, std::size_t N&amp;gt;
   constexpr bool empty(const T (&amp;amp;array)[N]) noexcept;                    // (2) C++17
-
   template &amp;lt;class T, std::size_t N&amp;gt;
   [[nodiscard]] constexpr bool empty(const T (&amp;amp;array)[N]) noexcept;      // (2) C++20
+  template &amp;lt;class T, std::size_t N&amp;gt;
+  constexpr bool empty(const T (&amp;amp;array)[N]) noexcept;                    // (2) C++26
 
   template &amp;lt;class E&amp;gt;
   constexpr bool empty(initializer_list&amp;lt;E&amp;gt; il) noexcept;                 // (3) C++17
-
   template &amp;lt;class E&amp;gt;
   [[nodiscard]] constexpr bool empty(initializer_list&amp;lt;E&amp;gt; il) noexcept;   // (3) C++20
+  template &amp;lt;class E&amp;gt;
+  constexpr bool empty(initializer_list&amp;lt;E&amp;gt; il) noexcept;                 // (3) C++26
 }
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
@@ -102,4 +105,7 @@ false
 - [`boost::empty()` - Boost Range Library](http://www.boost.org/doc/libs/release/libs/range/doc/html/range/reference/concept_implementation/semantics/functions.html)
 - [N4280: Non-member `empty()` and more (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4280.pdf)
 - [P0600R1: `[[nodiscard]]` in the library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
 - [LWG Issue 3009. Including `&amp;lt;string_view&amp;gt;` doesn&amp;#39;t provide `std::size/empty/data`](https://wg21.cmeerw.net/lwg/issue3009)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/list/list/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/list/list/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/empty.md b/reference/list/list/empty.md
index 8d7f7610e..bb873c82d 100644
--- a/reference/list/list/empty.md
+++ b/reference/list/list/empty.md
@@ -8,6 +8,7 @@
 bool empty() const;                        // C++03
 bool empty() const noexcept;               // C++11
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -57,3 +58,6 @@ false
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/map/map/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/map/map/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/empty.md b/reference/map/map/empty.md
index 20698a29a..3783b0710 100644
--- a/reference/map/map/empty.md
+++ b/reference/map/map/empty.md
@@ -8,6 +8,7 @@
 bool empty() const;                        // C++03
 bool empty() const noexcept;               // C++11
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -62,3 +63,6 @@ int main ()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/map/multimap/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/empty.md b/reference/map/multimap/empty.md
index 489dd5834..529615da1 100644
--- a/reference/map/multimap/empty.md
+++ b/reference/map/multimap/empty.md
@@ -8,6 +8,7 @@
 bool empty() const;                        // C++03
 bool empty() const noexcept;               // C++11
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -62,3 +63,6 @@ int main ()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator/allocate.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/memory/allocator/allocate.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator/allocate.md b/reference/memory/allocator/allocate.md
index f7043fcaf..846b90a3c 100644
--- a/reference/memory/allocator/allocate.md
+++ b/reference/memory/allocator/allocate.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-pointer allocate(size_type n);                          // (1) C++17 まで
-[[nodiscard]] constexpr pointer allocate(size_type n);  // (1) C++20 から
+pointer allocate(size_type n);                          // (1) C++03
+[[nodiscard]] constexpr pointer allocate(size_type n);  // (1) C++20
+constexpr pointer allocate(size_type n);                // (1) C++26
 
 pointer allocate(size_type n,
                  allocator&amp;lt;void&amp;gt;::const_pointer hint);  // (2) C++17 から非推奨、C++20 から削除
@@ -66,5 +67,9 @@ int main()
 ## 参照
 - [P0174R2 Deprecating Vestigial Library Parts in C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0174r2.html)
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
 - [P0619R4 Reviewing deprecated facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
 - [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
+    - C++20で`constexpr`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator_traits/allocate.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/memory/allocator_traits/allocate.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator_traits/allocate.md b/reference/memory/allocator_traits/allocate.md
index 6f49d7947..a005b580f 100644
--- a/reference/memory/allocator_traits/allocate.md
+++ b/reference/memory/allocator_traits/allocate.md
@@ -6,13 +6,24 @@
 * cpp11[meta cpp]
 
 ```cpp
-static pointer allocate(Alloc&amp;amp; a, size_type n);                             // (1) C++17 まで
-[[nodiscard]] static constexpr pointer allocate(Alloc&amp;amp; a, size_type n);     // (1) C++20 から
-
-static pointer allocate(Alloc&amp;amp; a, size_type n,
-                        const_void_pointer hint);                           // (2) C++17 まで
-[[nodiscard]] static constexpr pointer allocate(Alloc&amp;amp; a, size_type n,
-                                                const_void_pointer hint);   // (2) C++20 から
+static pointer
+  allocate(Alloc&amp;amp; a, size_type n);     // (1) C++11
+[[nodiscard]]
+static constexpr pointer
+  allocate(Alloc&amp;amp; a, size_type n);     // (1) C++20
+static constexpr pointer
+  allocate(Alloc&amp;amp; a, size_type n);     // (1) C++26
+
+static pointer
+  allocate(Alloc&amp;amp; a, size_type n,
+           const_void_pointer hint);   // (2) C++11
+[[nodiscard]]
+static constexpr pointer
+  allocate(Alloc&amp;amp; a, size_type n,
+           const_void_pointer hint);   // (2) C++20
+static constexpr pointer
+  allocate(Alloc&amp;amp; a, size_type n,
+           const_void_pointer hint);   // (2) C++26
 ```
 
 ## 概要
@@ -62,4 +73,8 @@ int main()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
 - [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
+    - C++20で`constexpr`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alloacte_at_least -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator_traits/allocate_at_least.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/memory/allocator_traits/allocate_at_least.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator_traits/allocate_at_least.md b/reference/memory/allocator_traits/allocate_at_least.md
index 2b20c85f7..4728c68c9 100644
--- a/reference/memory/allocator_traits/allocate_at_least.md
+++ b/reference/memory/allocator_traits/allocate_at_least.md
@@ -6,9 +6,13 @@
 * cpp23[meta cpp]
 
 ```cpp
-[[nodiscard] static constexpr
+[[nodiscard]
+static constexpr
 allocation_result&amp;lt;pointer, size_type&amp;gt;
   allocate_at_least(Alloc&amp;amp; a, size_type n); // (1) C++23
+static constexpr
+allocation_result&amp;lt;pointer, size_type&amp;gt;
+  allocate_at_least(Alloc&amp;amp; a, size_type n); // (1) C++26
 ```
 * allocation_result[link /reference/memory/allocation_result.md]
 
@@ -66,3 +70,5 @@ allocation count:4 bytes:16
 
 ## 参照
 - [P0401R6 Providing size feedback in the Allocator interface](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0401r6.html)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assume_aligned -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/memory/assume_aligned.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/memory/assume_aligned.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/assume_aligned.md b/reference/memory/assume_aligned.md
index 0ff53eb65..a26985f03 100644
--- a/reference/memory/assume_aligned.md
+++ b/reference/memory/assume_aligned.md
@@ -7,7 +7,9 @@
 ```cpp
 namespace std {
   template &amp;lt;std::size_t N, class T&amp;gt;
-  [[nodiscard]] constexpr T* assume_aligned(T* ptr);
+  [[nodiscard]] constexpr T* assume_aligned(T* ptr); // (1) C++20
+  template &amp;lt;std::size_t N, class T&amp;gt;
+  constexpr T* assume_aligned(T* ptr);               // (1) C++26
 }
 ```
 
@@ -349,5 +351,7 @@ C++20 から標準で使用可能となる本機能だが、実装例からも
 
 ## 参照
 
-- [P1007R3 std::assume_aligned](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1007r3.pdf)
-- [cppmap - C++20 の新機能 - ポインタのアライメントを最適化ヒントとしてコンパイラに伝える assume_aligned() 関数 (P1007R3)](https://cppmap.github.io/standardization/cpp20/#assume_aligned-p1007r3)
+- [P1007R3 `std::assume_aligned`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1007r3.pdf)
+- [cppmap - C++20 の新機能 - ポインタのアライメントを最適化ヒントとしてコンパイラに伝える `assume_aligned()` 関数 (P1007R3)](https://cppmap.github.io/standardization/cpp20/#assume_aligned-p1007r3)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/memory_resource/allocate.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/memory_resource/memory_resource/allocate.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/memory_resource/allocate.md b/reference/memory_resource/memory_resource/allocate.md
index 6b3f3b9f0..4cfe5f524 100644
--- a/reference/memory_resource/memory_resource/allocate.md
+++ b/reference/memory_resource/memory_resource/allocate.md
@@ -7,9 +7,9 @@
 
 ```cpp
 void* allocate(size_t bytes, size_t alignment = alignof(max_align_t)); // (1) C++17
-
 [[nodiscard]]
 void* allocate(size_t bytes, size_t alignment = alignof(max_align_t)); // (1) C++20
+void* allocate(size_t bytes, size_t alignment = alignof(max_align_t)); // (1) C++26
 ```
 * size_t[link /reference/cstddef/size_t.md]
 * max_align_t[link /reference/cstddef/max_align_t.md]
@@ -86,4 +86,7 @@ int main(){
 - [P0337r0 | Delete operator= for polymorphic_allocator](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0337r0.html)
 - [Working Draft, C++ Extensions for Library Fundamentals, Version 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4562.html#memory.resource.synop)
 - [P0600R1 `[[nodiscard]]` in the Library, Rev1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
 - [LWG Issue 2843. Unclear behavior of `std::pmr::memory_resource::do_allocate()`](https://wg21.cmeerw.net/lwg/issue2843) 
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/memory_resource/polymorphic_allocator/allocate.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/allocate.md b/reference/memory_resource/polymorphic_allocator/allocate.md
index e3358f197..5c3726b0e 100644
--- a/reference/memory_resource/polymorphic_allocator/allocate.md
+++ b/reference/memory_resource/polymorphic_allocator/allocate.md
@@ -8,6 +8,7 @@
 ```cpp
 Tp* allocate(std::size_t n);               // (1) C++17
 [[nodiscard]] Tp* allocate(std::size_t n); // (1) C++20
+Tp* allocate(std::size_t n);               // (1) C++26
 ```
 
 ## 概要
@@ -91,4 +92,7 @@ int main()
 - [P0337r0 | Delete operator= for polymorphic_allocator](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0337r0.html)
 - [Working Draft, C++ Extensions for Library Fundamentals, Version 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4562.html#memory.resource.synop)
 - [P0600R1 `[[nodiscard]]` in the Library, Rev1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`constexpr`が付加された
 - [LWG Issue 3038. `polymorphic_allocator::allocate` should not allow integer overflow to create vulnerabilities](https://wg21.cmeerw.net/lwg/issue3038)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_bytes -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_bytes.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/memory_resource/polymorphic_allocator/allocate_bytes.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/allocate_bytes.md b/reference/memory_resource/polymorphic_allocator/allocate_bytes.md
index 6586eaa46..beaf3100b 100644
--- a/reference/memory_resource/polymorphic_allocator/allocate_bytes.md
+++ b/reference/memory_resource/polymorphic_allocator/allocate_bytes.md
@@ -6,7 +6,11 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] void* allocate_bytes(size_t nbytes, size_t alignment = alignof(max_align_t));
+[[nodiscard]]
+void* allocate_bytes(size_t nbytes,
+                     size_t alignment = alignof(max_align_t)); // (1) C++20
+void* allocate_bytes(size_t nbytes,
+                     size_t alignment = alignof(max_align_t)); // (1) C++26
 ```
 * max_align_t[link /reference/cstddef/max_align_t.md]
 
@@ -113,4 +117,6 @@ address : 0x1c38150
 
 ## 参照
 - [P0339R6 polymorphic_allocator&amp;lt;&amp;gt; as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf) 
-- [LWG Issue 3304. Allocate functions of `std::polymorphic_allocator` should require `[[nodiscard]]`](https://wg21.cmeerw.net/lwg/issue3304)
\ No newline at end of file
+- [LWG Issue 3304. Allocate functions of `std::polymorphic_allocator` should require `[[nodiscard]]`](https://wg21.cmeerw.net/lwg/issue3304)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_object -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_object.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/memory_resource/polymorphic_allocator/allocate_object.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/allocate_object.md b/reference/memory_resource/polymorphic_allocator/allocate_object.md
index 8ce6a8c27..884330d3c 100644
--- a/reference/memory_resource/polymorphic_allocator/allocate_object.md
+++ b/reference/memory_resource/polymorphic_allocator/allocate_object.md
@@ -7,7 +7,9 @@
 
 ```cpp
 template &amp;lt;class T&amp;gt;
-[[nodiscard]] T* allocate_object(size_t n = 1);
+[[nodiscard]] T* allocate_object(size_t n = 1); // (1) C++20
+template &amp;lt;class T&amp;gt;
+T* allocate_object(size_t n = 1);               // (1) C++26
 ```
 
 ## 概要
@@ -104,5 +106,7 @@ int main() {
 - [`allocate_bytes`](/reference/memory_resource/polymorphic_allocator/allocate_bytes.md)
 
 ## 参照
-- [P0339R6 polymorphic_allocator&amp;lt;&amp;gt; as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf) 
+- [P0339R6 `polymorphic_allocator&amp;lt;&amp;gt;` as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf) 
 - [LWG Issue 3304. Allocate functions of `std::polymorphic_allocator` should require `[[nodiscard]]`](https://wg21.cmeerw.net/lwg/issue3304)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>new_object -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/new_object.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/memory_resource/polymorphic_allocator/new_object.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/new_object.md b/reference/memory_resource/polymorphic_allocator/new_object.md
index 6cff189ac..a0686c67f 100644
--- a/reference/memory_resource/polymorphic_allocator/new_object.md
+++ b/reference/memory_resource/polymorphic_allocator/new_object.md
@@ -7,7 +7,10 @@
 
 ```cpp
 template &amp;lt;class T, class... CtorArgs&amp;gt;
-[[nodiscard]] T* new_object(CtorArgs&amp;amp;&amp;amp;... ctor_args);
+[[nodiscard]]
+T* new_object(CtorArgs&amp;amp;&amp;amp;... ctor_args); // (1) C++20
+template &amp;lt;class T, class... CtorArgs&amp;gt;
+T* new_object(CtorArgs&amp;amp;&amp;amp;... ctor_args); // (1) C++26
 ```
 
 ## 概要
@@ -98,3 +101,5 @@ address : 0x1a2b960
 ## 参照
 - [P0339R6 polymorphic_allocator&amp;lt;&amp;gt; as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf) 
 - [LWG Issue 3304. Allocate functions of `std::polymorphic_allocator` should require `[[nodiscard]]`](https://wg21.cmeerw.net/lwg/issue3304)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>launder -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/new/launder.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/new/launder.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/launder.md b/reference/new/launder.md
index de85dcdfc..8751be521 100644
--- a/reference/new/launder.md
+++ b/reference/new/launder.md
@@ -7,10 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-    constexpr T* launder(T* p) noexcept; // C++17
-
-  template&amp;lt;class T&amp;gt;
-    [[nodiscard]] constexpr T* launder(T* p) noexcept; // C++20
+  constexpr T* launder(T* p) noexcept;               // (1) C++17
+  template &amp;lt;class T&amp;gt;
+  [[nodiscard]] constexpr T* launder(T* p) noexcept; // (2) C++20
+  template &amp;lt;class T&amp;gt;
+  constexpr T* launder(T* p) noexcept;               // (2) C++26
 }
 ```
 
@@ -151,3 +152,7 @@ void tong() {
 - [std::launder関数 - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20170817/p1)
 - [std::launder - cppreference.com](https://ja.cppreference.com/w/cpp/utility/launder)
 - [Lifetime - cppreference.com](https://en.cppreference.com/w/cpp/language/lifetime)
+- [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator new -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/new/op_new.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/new/op_new.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/op_new.md b/reference/new/op_new.md
index ad0845076..c215162aa 100644
--- a/reference/new/op_new.md
+++ b/reference/new/op_new.md
@@ -7,11 +7,14 @@
 void* operator new(std::size_t size) throw(std::bad_alloc);         // (1) C++03
 void* operator new(std::size_t size);                               // (1) C++11
 [[nodiscard]] void* operator new(std::size_t size);                 // (1) C++20
+void* operator new(std::size_t size);                               // (1) C++26
 
 void* operator new(std::size_t size,
                    std::align_val_t alignment);                     // (2) C++17
 [[nodiscard]] void* operator new(std::size_t size,
                                  std::align_val_t alignment);       // (2) C++20
+void* operator new(std::size_t size,
+                   std::align_val_t alignment);                     // (2) C++26
 
 void* operator new(std::size_t size,
                    const std::nothrow_t&amp;amp;) throw();                  // (3) C++03
@@ -19,18 +22,25 @@ void* operator new(std::size_t size,
                    const std::nothrow_t&amp;amp;) noexcept;                 // (3) C++11
 [[nodiscard]] void* operator new(std::size_t size,
                                  const std::nothrow_t&amp;amp;) noexcept;   // (3) C++20
+void* operator new(std::size_t size,
+                   const std::nothrow_t&amp;amp;) noexcept;                 // (3) C++26
 
 void* operator new(std::size_t size,
                    std::align_val_t alignment,
                    const std::nothrow_t&amp;amp;) noexcept;                 // (4) C++17
-[[nodiscard]]void* operator new(std::size_t size,
-                                std::align_val_t alignment,
-                                const std::nothrow_t&amp;amp;) noexcept;    // (4) C++20
+[[nodiscard]] void* operator new(std::size_t size,
+                                 std::align_val_t alignment,
+                                 const std::nothrow_t&amp;amp;) noexcept;   // (4) C++20
+void* operator new(std::size_t size,
+                   std::align_val_t alignment,
+                   const std::nothrow_t&amp;amp;) noexcept;                 // (4) C++26
 
 void* operator new(std::size_t size, void* ptr) throw();            // (5) C++03
 void* operator new(std::size_t size, void* ptr) noexcept;           // (5) C++11
 [[nodiscard]] void* operator new(std::size_t size,
                                  void* ptr) noexcept;               // (5) C++20
+void* operator new(std::size_t size,
+                   void* ptr) noexcept;                             // (5) C++26
 ```
 * std::bad_alloc[link bad_alloc.md]
 * std::nothrow_t[link nothrow_t.md]
@@ -162,3 +172,6 @@ int main()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator new[] -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/new/op_new[].html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/new/op_new[].md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/op_new[].md b/reference/new/op_new[].md
index 1089900db..1802e3847 100644
--- a/reference/new/op_new[].md
+++ b/reference/new/op_new[].md
@@ -7,12 +7,15 @@
 void* operator new[](std::size_t size) throw(std::bad_alloc);             // (1) C++03
 void* operator new[](std::size_t size);                                   // (1) C++11
 [[nodiscard]] void* operator new[](std::size_t size);                     // (1) C++20
+void* operator new[](std::size_t size);                                   // (1) C++26
 
 
 void* operator new[](std::size_t size,
                      std::align_val_t alignment);                         // (2) C++17
 [[nodiscard]] void* operator new[](std::size_t size,
                                    std::align_val_t alignment);           // (2) C++20
+void* operator new[](std::size_t size,
+                     std::align_val_t alignment);                         // (2) C++26
 
 void* operator new[](std::size_t size,
                      const std::nothrow_t&amp;amp;) throw();                      // (3) C++03
@@ -20,6 +23,8 @@ void* operator new[](std::size_t size,
                      const std::nothrow_t&amp;amp;) noexcept;                     // (3) C++11
 [[nodiscard]] void* operator new[](std::size_t size,
                                    const std::nothrow_t&amp;amp;) noexcept;       // (3) C++20
+void* operator new[](std::size_t size,
+                     const std::nothrow_t&amp;amp;) noexcept;                     // (3) C++26
 
 void* operator new[](std::size_t size,
                      std::align_val_t alignment,
@@ -27,10 +32,14 @@ void* operator new[](std::size_t size,
 [[nodiscard]] void* operator new[](std::size_t size,
                                    std::align_val_t alignment,
                                    const std::nothrow_t&amp;amp;) noexcept;       // (4) C++20
+void* operator new[](std::size_t size,
+                     std::align_val_t alignment,
+                     const std::nothrow_t&amp;amp;) noexcept;                     // (4) C++26
 
 void* operator new[](std::size_t size, void* ptr) throw();                // (5) C++03
 void* operator new[](std::size_t size, void* ptr) noexcept;               // (5) C++11
 [[nodiscard]] void* operator new[](std::size_t size, void* ptr) noexcept; // (5) C++20
+void* operator new[](std::size_t size, void* ptr) noexcept;               // (5) C++26
 ```
 * std::bad_alloc[link bad_alloc.md]
 * std::nothrow_t[link nothrow_t.md]
@@ -163,3 +172,6 @@ int main()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/node_handle/node_handle/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/empty.md b/reference/node_handle/node_handle/empty.md
index a197c009a..e544cb4dc 100644
--- a/reference/node_handle/node_handle/empty.md
+++ b/reference/node_handle/node_handle/empty.md
@@ -8,6 +8,7 @@
 ```cpp
 bool empty() const noexcept;
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -45,4 +46,7 @@ true
 
 ## 参照
 - [Splicing Maps and Sets(Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0083r3.pdf)
-- [P0600R1 `[[nodiscard]]` in the Library, Rev1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+- [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/queue/priority_queue/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/queue/priority_queue/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/priority_queue/empty.md b/reference/queue/priority_queue/empty.md
index 6874201e4..267d9a5a5 100644
--- a/reference/queue/priority_queue/empty.md
+++ b/reference/queue/priority_queue/empty.md
@@ -7,6 +7,7 @@
 ```cpp
 bool empty() const;               // C++03
 [[nodiscard]] bool empty() const; // C++20
+bool empty() const;               // C++26
 ```
 
 ## 概要
@@ -67,3 +68,6 @@ non_empty_que is not empty
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/queue/queue/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue/empty.md b/reference/queue/queue/empty.md
index 48cbb5562..90681fd84 100644
--- a/reference/queue/queue/empty.md
+++ b/reference/queue/queue/empty.md
@@ -7,6 +7,7 @@
 ```cpp
 bool empty() const;               // C++03
 [[nodiscard]] bool empty() const; // C++20
+bool empty() const;               // C++26
 ```
 
 ## 概要
@@ -53,3 +54,6 @@ empty
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/begin.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/ranges/subrange/begin.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/begin.md b/reference/ranges/subrange/begin.md
index c243775f1..373fb1507 100644
--- a/reference/ranges/subrange/begin.md
+++ b/reference/ranges/subrange/begin.md
@@ -6,9 +6,10 @@
 * cpp20[meta cpp]
 
 ```cpp
-constexpr I begin() const requires copyable&amp;lt;I&amp;gt;;             // (1)
+constexpr I begin() const requires copyable&amp;lt;I&amp;gt;;             // (1) C++20
 
-[[nodiscard]] constexpr I begin() requires (!copyable&amp;lt;I&amp;gt;);  // (2)
+[[nodiscard]] constexpr I begin() requires (!copyable&amp;lt;I&amp;gt;);  // (2) C++20
+constexpr I begin() requires (!copyable&amp;lt;I&amp;gt;);                // (2) C++26
 ```
 * copyable[link /reference/concepts/copyable.md]
 * nodiscard[link /lang/cpp17/nodiscard.md]
@@ -58,3 +59,5 @@ int main()
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>next -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/next.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/ranges/subrange/next.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/next.md b/reference/ranges/subrange/next.md
index 413c85af1..9d9118a7a 100644
--- a/reference/ranges/subrange/next.md
+++ b/reference/ranges/subrange/next.md
@@ -6,12 +6,19 @@
 * cpp20[meta cpp]
 
 ```cpp
-// (1)
-[[nodiscard]] constexpr subrange next(iter_difference_t&amp;lt;I&amp;gt; n = 1) const &amp;amp;
-  requires forward_iterator&amp;lt;I&amp;gt;;
-
-// (2)
-[[nodiscard]] constexpr subrange next(iter_difference_t&amp;lt;I&amp;gt; n = 1) &amp;amp;&amp;amp;;
+[[nodiscard]]
+constexpr subrange
+  next(iter_difference_t&amp;lt;I&amp;gt; n = 1) const &amp;amp;
+    requires forward_iterator&amp;lt;I&amp;gt;;            // (1) C++20
+constexpr subrange
+  next(iter_difference_t&amp;lt;I&amp;gt; n = 1) const &amp;amp;
+    requires forward_iterator&amp;lt;I&amp;gt;;            // (1) C++26
+
+[[nodiscard]]
+constexpr subrange
+  next(iter_difference_t&amp;lt;I&amp;gt; n = 1) &amp;amp;&amp;amp;;       // (2) C++20
+constexpr subrange
+  next(iter_difference_t&amp;lt;I&amp;gt; n = 1) &amp;amp;&amp;amp;;       // (2) C++26
 ```
 * nodiscard[link /lang/cpp17/nodiscard.md]
 * iter_difference_t[link /reference/iterator/iter_difference_t.md]
@@ -84,3 +91,5 @@ int main()
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prev -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/prev.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/ranges/subrange/prev.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/prev.md b/reference/ranges/subrange/prev.md
index a07ae84bf..18274abc0 100644
--- a/reference/ranges/subrange/prev.md
+++ b/reference/ranges/subrange/prev.md
@@ -6,8 +6,13 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] constexpr subrange prev(iter_difference_t&amp;lt;I&amp;gt; n = 1) const
-  requires bidirectional_iterator&amp;lt;I&amp;gt;;
+[[nodiscard]]
+constexpr subrange
+  prev(iter_difference_t&amp;lt;I&amp;gt; n = 1) const
+    requires bidirectional_iterator&amp;lt;I&amp;gt;;   // (1) C++20
+constexpr subrange
+  prev(iter_difference_t&amp;lt;I&amp;gt; n = 1) const
+    requires bidirectional_iterator&amp;lt;I&amp;gt;;   // (1) C++26
 ```
 * nodiscard[link /lang/cpp17/nodiscard.md]
 * iter_difference_t[link /reference/iterator/iter_difference_t.md]
@@ -70,3 +75,5 @@ int main()
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/regex/match_results/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/regex/match_results/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/regex/match_results/empty.md b/reference/regex/match_results/empty.md
index b3e0b22f6..68c2a19a4 100644
--- a/reference/regex/match_results/empty.md
+++ b/reference/regex/match_results/empty.md
@@ -6,8 +6,9 @@
 * cpp11[meta cpp]
 
 ```cpp
-bool empty() const;               // C++11
-[[nodiscard]] bool empty() const; // C++20
+bool empty() const;               // (1) C++11
+[[nodiscard]] bool empty() const; // (1) C++20
+bool empty() const;               // (1) C++26
 ```
 
 ## 概要
@@ -83,3 +84,6 @@ match:ready = true, empty = false
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/allocate.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/scoped_allocator/scoped_allocator_adaptor/allocate.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/scoped_allocator/scoped_allocator_adaptor/allocate.md b/reference/scoped_allocator/scoped_allocator_adaptor/allocate.md
index 68433f1db..cbe8f7f84 100644
--- a/reference/scoped_allocator/scoped_allocator_adaptor/allocate.md
+++ b/reference/scoped_allocator/scoped_allocator_adaptor/allocate.md
@@ -6,11 +6,19 @@
 * cpp11[meta cpp]
 
 ```cpp
-pointer allocate(size_type n);                                        // (1) C++11
-[[nodiscard]] pointer allocate(size_type n);                          // (1) C++20
-
-pointer allocate(size_type n, const_void_pointer hint);               // (2) C++11
-[[nodiscard]] pointer allocate(size_type n, const_void_pointer hint); // (2) C++20
+pointer allocate(size_type n);               // (1) C++11
+[[nodiscard]] pointer allocate(size_type n); // (1) C++20
+pointer allocate(size_type n);               // (1) C++26
+
+pointer
+  allocate(size_type n,
+           const_void_pointer hint); // (2) C++11
+[[nodiscard]] pointer
+  allocate(size_type n,
+           const_void_pointer hint); // (2) C++20
+pointer
+  allocate(size_type n,
+           const_void_pointer hint); // (2) C++26
 ```
 
 ## 概要
@@ -81,3 +89,6 @@ int main()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/set/multiset/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/empty.md b/reference/set/multiset/empty.md
index 745c57830..6460abf3a 100644
--- a/reference/set/multiset/empty.md
+++ b/reference/set/multiset/empty.md
@@ -8,6 +8,7 @@
 bool empty() const;                        // C++03
 bool empty() const noexcept;               // C++11
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -60,3 +61,6 @@ int main ()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/set/set/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/set/set/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/empty.md b/reference/set/set/empty.md
index 937198914..988be85c9 100644
--- a/reference/set/set/empty.md
+++ b/reference/set/set/empty.md
@@ -8,6 +8,7 @@
 bool empty() const;                        // C++03
 bool empty() const noexcept;               // C++11
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -60,3 +61,6 @@ int main ()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/span/span/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/span/span/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span/empty.md b/reference/span/span/empty.md
index b6d8c6a44..0b439e735 100644
--- a/reference/span/span/empty.md
+++ b/reference/span/span/empty.md
@@ -6,7 +6,8 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] constexpr bool empty() const noexcept;
+[[nodiscard]] constexpr bool empty() const noexcept; // (1) C++20
+constexpr bool empty() const noexcept;               // (1) C++26
 ```
 
 ## 概要
@@ -64,3 +65,8 @@ int main()
 - [Clang](/implementation.md#clang): 9.0 [mark verified]
 - [GCC](/implementation.md#gcc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/stack/stack/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/stack/stack/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stack/stack/empty.md b/reference/stack/stack/empty.md
index 94e9b85c1..1d58dc05e 100644
--- a/reference/stack/stack/empty.md
+++ b/reference/stack/stack/empty.md
@@ -7,6 +7,7 @@
 ```cpp
 bool empty() const;               // C++03
 [[nodiscard]] bool empty() const; // C++20
+bool empty() const;               // C++26
 ```
 
 ## 概要
@@ -74,3 +75,6 @@ bool empty() const { return c.empty(); }
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/stacktrace/basic_stacktrace/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/empty.md b/reference/stacktrace/basic_stacktrace/empty.md
index aaeb8e567..1c529dd5d 100644
--- a/reference/stacktrace/basic_stacktrace/empty.md
+++ b/reference/stacktrace/basic_stacktrace/empty.md
@@ -7,6 +7,7 @@
 
 ```cpp
 [[nodiscard]] bool empty() const noexcept; // (1) C++23
+bool empty() const noexcept;               // (1) C++26
 ```
 
 ## 概要
@@ -54,3 +55,8 @@ int main() {
 - [Clang](/implementation.md#clang): ??
 - [GCC](/implementation.md#gcc): 12 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_token -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_source/get_token.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/stop_token/stop_source/get_token.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_source/get_token.md b/reference/stop_token/stop_source/get_token.md
index 3c9852d2f..bfd0c76f1 100644
--- a/reference/stop_token/stop_source/get_token.md
+++ b/reference/stop_token/stop_source/get_token.md
@@ -6,7 +6,9 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] stop_token get_token() const noexcept;
+[[nodiscard]]
+stop_token get_token() const noexcept; // (1) C++20
+stop_token get_token() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -55,3 +57,7 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_source/op_equal.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/stop_token/stop_source/op_equal.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_source/op_equal.md b/reference/stop_token/stop_source/op_equal.md
index e0639fddb..950be7daa 100644
--- a/reference/stop_token/stop_source/op_equal.md
+++ b/reference/stop_token/stop_source/op_equal.md
@@ -6,7 +6,13 @@
 
 ```cpp
 namespace std {
-  [[nodiscard]] friend bool operator==(const stop_source&amp;amp; x, const stop_source&amp;amp; y) noexcept;
+  [[nodiscard]]
+  friend bool
+    operator==(const stop_source&amp;amp; x,
+               const stop_source&amp;amp; y) noexcept; // (1) C++20
+  friend bool
+    operator==(const stop_source&amp;amp; x,
+               const stop_source&amp;amp; y) noexcept; // (1) C++26
 }
 ```
 
@@ -55,3 +61,7 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_possible -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_source/stop_possible.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/stop_token/stop_source/stop_possible.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_source/stop_possible.md b/reference/stop_token/stop_source/stop_possible.md
index e538eecfd..88d1b3815 100644
--- a/reference/stop_token/stop_source/stop_possible.md
+++ b/reference/stop_token/stop_source/stop_possible.md
@@ -6,7 +6,9 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] bool stop_possible() const noexcept;
+[[nodiscard]]
+bool stop_possible() const noexcept; // (1) C++20
+bool stop_possible() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -50,3 +52,7 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_requested -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_source/stop_requested.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/stop_token/stop_source/stop_requested.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_source/stop_requested.md b/reference/stop_token/stop_source/stop_requested.md
index 8f5865215..2ad2a9f74 100644
--- a/reference/stop_token/stop_source/stop_requested.md
+++ b/reference/stop_token/stop_source/stop_requested.md
@@ -6,7 +6,9 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] bool stop_requested() const noexcept;
+[[nodiscard]]
+bool stop_requested() const noexcept; // (1) C++20
+bool stop_requested() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -58,4 +60,6 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
-
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_token/op_equal.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/stop_token/stop_token/op_equal.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_token/op_equal.md b/reference/stop_token/stop_token/op_equal.md
index 19b2f963d..10b7b80dc 100644
--- a/reference/stop_token/stop_token/op_equal.md
+++ b/reference/stop_token/stop_token/op_equal.md
@@ -6,7 +6,13 @@
 
 ```cpp
 namespace std {
-  [[nodiscard]] friend bool operator==(const stop_token&amp;amp; lhs, const stop_token&amp;amp; rhs) noexcept;
+  [[nodiscard]]
+  friend bool
+    operator==(const stop_token&amp;amp; lhs,
+               const stop_token&amp;amp; rhs) noexcept; // (1) C++20
+  friend bool
+    operator==(const stop_token&amp;amp; lhs,
+               const stop_token&amp;amp; rhs) noexcept; // (1) C++26
 }
 ```
 
@@ -59,3 +65,7 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_possible -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_token/stop_possible.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/stop_token/stop_token/stop_possible.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_token/stop_possible.md b/reference/stop_token/stop_token/stop_possible.md
index bc6ed3e43..a9dcedc21 100644
--- a/reference/stop_token/stop_token/stop_possible.md
+++ b/reference/stop_token/stop_token/stop_possible.md
@@ -6,7 +6,9 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] bool stop_possible() const noexcept;
+[[nodiscard]]
+bool stop_possible() const noexcept; // (1) C++20
+bool stop_possible() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -84,3 +86,7 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_requested -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_token/stop_requested.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/stop_token/stop_token/stop_requested.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_token/stop_requested.md b/reference/stop_token/stop_token/stop_requested.md
index ff1167c25..fb29d4b9b 100644
--- a/reference/stop_token/stop_token/stop_requested.md
+++ b/reference/stop_token/stop_token/stop_requested.md
@@ -6,7 +6,9 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] bool stop_requested() const noexcept;
+[[nodiscard]]
+bool stop_requested() const noexcept; // (1) C++20
+bool stop_requested() const noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -73,3 +75,7 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/string/basic_string/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/empty.md b/reference/string/basic_string/empty.md
index 0ead8e0bf..a68f8bd74 100644
--- a/reference/string/basic_string/empty.md
+++ b/reference/string/basic_string/empty.md
@@ -8,6 +8,7 @@
 bool empty() const;                                  // C++03
 bool empty() const noexcept;                         // C++11
 [[nodiscard]] constexpr bool empty() const noexcept; // C++20
+constexpr bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -48,4 +49,8 @@ int main()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+    - C++20で`constexpr`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/string_view/basic_string_view/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/empty.md b/reference/string_view/basic_string_view/empty.md
index 509f39c4e..6759b9783 100644
--- a/reference/string_view/basic_string_view/empty.md
+++ b/reference/string_view/basic_string_view/empty.md
@@ -8,6 +8,7 @@
 ```cpp
 constexpr bool empty() const noexcept;               // C++17
 [[nodiscard]] constexpr bool empty() const noexcept; // C++20
+constexpr bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -58,3 +59,6 @@ int main()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_id -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/get_id.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/thread/jthread/get_id.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/get_id.md b/reference/thread/jthread/get_id.md
index f0488976a..4b4856e26 100644
--- a/reference/thread/jthread/get_id.md
+++ b/reference/thread/jthread/get_id.md
@@ -6,7 +6,8 @@
 * cpp20[meta cpp]
 
 ```cpp
-id get_id() const noexcept;
+[[nodiscard]] id get_id() const noexcept; // (1) C++20
+id get_id() const noexcept;               // (1) C++26
 ```
 * id[link /reference/thread/thread/id.md]
 
@@ -58,3 +59,8 @@ thread::id of a non-executing thread
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 10.2.0 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_stop_source -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/get_stop_source.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/thread/jthread/get_stop_source.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/get_stop_source.md b/reference/thread/jthread/get_stop_source.md
index ea0ced847..db6c4080b 100644
--- a/reference/thread/jthread/get_stop_source.md
+++ b/reference/thread/jthread/get_stop_source.md
@@ -6,7 +6,9 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] stop_source get_stop_source() noexcept;
+[[nodiscard]]
+stop_source get_stop_source() noexcept; // (1) C++20
+stop_source get_stop_source() noexcept; // (1) C++26
 ```
 * stop_source[link /reference/stop_token/stop_source.md]
 
@@ -62,3 +64,8 @@ exit t1 thread
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 10.2.0 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_stop_token -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/get_stop_token.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/thread/jthread/get_stop_token.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/get_stop_token.md b/reference/thread/jthread/get_stop_token.md
index c0b7b2efc..6c8cbe0ba 100644
--- a/reference/thread/jthread/get_stop_token.md
+++ b/reference/thread/jthread/get_stop_token.md
@@ -6,7 +6,9 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] stop_token get_stop_token() const noexcept;
+[[nodiscard]]
+stop_token get_stop_token() const noexcept; // (1) C++20
+stop_token get_stop_token() const noexcept; // (1) C++26
 ```
 * stop_token[link /reference/stop_token/stop_token.md]
 
@@ -67,3 +69,8 @@ exit t thread
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 10.2.0 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hardware_concurrency -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/hardware_concurrency.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/thread/jthread/hardware_concurrency.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/hardware_concurrency.md b/reference/thread/jthread/hardware_concurrency.md
index 72f24553e..c6d82360f 100644
--- a/reference/thread/jthread/hardware_concurrency.md
+++ b/reference/thread/jthread/hardware_concurrency.md
@@ -6,7 +6,9 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] static unsigned int hardware_concurrency() noexcept; // (1) C++20
+[[nodiscard]]
+static unsigned int hardware_concurrency() noexcept; // (1) C++20
+static unsigned int hardware_concurrency() noexcept; // (1) C++26
 ```
 
 ## 概要
@@ -50,3 +52,8 @@ concurrency=12
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 10.2.0 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>joinable -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/joinable.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/thread/jthread/joinable.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/joinable.md b/reference/thread/jthread/joinable.md
index c35bb51d7..3c269e0bf 100644
--- a/reference/thread/jthread/joinable.md
+++ b/reference/thread/jthread/joinable.md
@@ -6,7 +6,8 @@
 * cpp20[meta cpp]
 
 ```cpp
-bool joinable() const noexcept;
+[[nodiscard]] bool joinable() const noexcept; // (1) C++20
+bool joinable() const noexcept;               // (1) C++26
 ```
 
 ## 概要
@@ -53,3 +54,8 @@ int main()
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 10.2.0 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>native_handle -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/native_handle.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/thread/jthread/native_handle.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/native_handle.md b/reference/thread/jthread/native_handle.md
index 57c34e53b..42dd99c96 100644
--- a/reference/thread/jthread/native_handle.md
+++ b/reference/thread/jthread/native_handle.md
@@ -6,7 +6,9 @@
 * cpp20[meta cpp]
 
 ```cpp
-[[nodiscard]] native_handle_type native_handle(); // (1) C++20
+[[nodiscard]]
+native_handle_type native_handle(); // (1) C++20
+native_handle_type native_handle(); // (1) C++26
 ```
 
 ## 概要
@@ -57,3 +59,8 @@ func
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 10.2.0 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/unordered_map/unordered_map/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/empty.md b/reference/unordered_map/unordered_map/empty.md
index 50c3005b9..fca5f7ee3 100644
--- a/reference/unordered_map/unordered_map/empty.md
+++ b/reference/unordered_map/unordered_map/empty.md
@@ -8,6 +8,7 @@
 ```cpp
 bool empty() const noexcept;               // C++11
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -93,3 +94,6 @@ inline bool unordered_map&amp;lt;Key, Hash, Pred, Allocator&amp;gt;::empty() const noexcept {
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/unordered_map/unordered_multimap/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/empty.md b/reference/unordered_map/unordered_multimap/empty.md
index 0b4775a35..248fea363 100644
--- a/reference/unordered_map/unordered_multimap/empty.md
+++ b/reference/unordered_map/unordered_multimap/empty.md
@@ -8,6 +8,7 @@
 ```cpp
 bool empty() const noexcept;               // C++11
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -93,3 +94,6 @@ inline bool unordered_multimap&amp;lt;Key, Hash, Pred, Allocator&amp;gt;::empty() const noexce
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/unordered_set/unordered_multiset/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/empty.md b/reference/unordered_set/unordered_multiset/empty.md
index 55556a578..dbb0d9028 100644
--- a/reference/unordered_set/unordered_multiset/empty.md
+++ b/reference/unordered_set/unordered_multiset/empty.md
@@ -8,6 +8,7 @@
 ```cpp
 bool empty() const noexcept;               // C++11
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -93,3 +94,6 @@ inline bool unordered_multiset&amp;lt;Key, Hash, Pred, Allocator&amp;gt;::empty() const noexce
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/unordered_set/unordered_set/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/empty.md b/reference/unordered_set/unordered_set/empty.md
index a3281777d..0dd50e231 100644
--- a/reference/unordered_set/unordered_set/empty.md
+++ b/reference/unordered_set/unordered_set/empty.md
@@ -8,6 +8,7 @@
 ```cpp
 bool empty() const noexcept;               // C++11
 [[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;               // C++26
 ```
 
 ## 概要
@@ -93,3 +94,6 @@ inline bool unordered_set&amp;lt;Key, Hash, Pred, Allocator&amp;gt;::empty() const noexcept {
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forward_like -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/utility/forward_like.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/utility/forward_like.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/forward_like.md b/reference/utility/forward_like.md
index 0566ae3ed..dc1d9f25d 100644
--- a/reference/utility/forward_like.md
+++ b/reference/utility/forward_like.md
@@ -6,8 +6,11 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class T, class U&amp;gt;
-  [[nodiscard]] constexpr auto forward_like(U&amp;amp;&amp;amp; x) noexcept -&amp;gt; see-below;
+template &amp;lt;class T, class U&amp;gt;
+[[nodiscard]]
+constexpr auto forward_like(U&amp;amp;&amp;amp; x) noexcept -&amp;gt; see-below; // (1) C++23
+template &amp;lt;class T, class U&amp;gt;
+constexpr auto forward_like(U&amp;amp;&amp;amp; x) noexcept -&amp;gt; see-below; // (1) C++26
 }
 ```
 * see-below[italic]
@@ -134,4 +137,6 @@ template &amp;lt;class T, class U&amp;gt;
 
 
 ## 参照
-- [P2445R1 std::forward_like](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2445r1.pdf)
+- [P2445R1 `std::forward_like`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2445r1.pdf)
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- C++26対応として、標準ライブラリのnodiscard指定を削除 (close #1386)</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/empty.html"/>
      <id>debf1bdfac8b42c2c830e2900ab882489c98d9ee:reference/vector/vector/empty.md</id>
      <updated>2025-02-27T15:55:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/empty.md b/reference/vector/vector/empty.md
index 2c205374b..247bf51ae 100644
--- a/reference/vector/vector/empty.md
+++ b/reference/vector/vector/empty.md
@@ -8,6 +8,7 @@
 bool empty() const;                                  // (1) C++03
 bool empty() const noexcept;                         // (1) C++11
 [[nodiscard]] constexpr bool empty() const noexcept; // (1) C++20
+constexpr bool empty() const noexcept;               // (1) C++26
 ```
 
 ## 概要
@@ -66,4 +67,8 @@ false
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+    - C++20で`[[nodiscard]]`が付加された
 - [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
+    - C++20で`constexpr`が付加された
+- [P2422R1 Remove `nodiscard` annotations from the standard library specification](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2422r1.html)
+    - C++26で`[[nodiscard]]`指定が削除された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非型テンプレートパラメータとしてクラス型を許可する [P0732R2] -- C++20 非型テンプレートパラメータとしてクラス型を許可する : プレースホルダー型とリテラル演算子の例を追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.html"/>
      <id>15399cae51a375371e61af1eae0426b72ada8a84:lang/cpp20/class_types_in_non-type_template_parameters.md</id>
      <updated>2025-02-26T17:06:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/class_types_in_non-type_template_parameters.md b/lang/cpp20/class_types_in_non-type_template_parameters.md
index 743d86a47..0758e8aae 100644
--- a/lang/cpp20/class_types_in_non-type_template_parameters.md
+++ b/lang/cpp20/class_types_in_non-type_template_parameters.md
@@ -44,6 +44,7 @@ C++11以降での[汎用的な定数式`constexpr`](/lang/cpp11/constexpr.md)の
 
 
 ## 例
+### floatやクラス型を非型テンプレートパラメータにする例
 ```cpp example
 #include &amp;lt;utility&amp;gt;
 
@@ -105,10 +106,79 @@ int main() {
 }
 ```
 
-### 出力
+#### 出力
 ```
 ```
 
+### プレースホルダーを含む型を非型テンプレートパラメータにする例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+template &amp;lt;class T&amp;gt;
+struct X {
+  constexpr X(T x) : value(x) {}
+  T value;
+};
+
+template &amp;lt;X x&amp;gt;
+struct Y {
+  void print() {
+    std::cout &amp;lt;&amp;lt; x.value &amp;lt;&amp;lt; std::endl;
+  }
+};
+
+int main() {
+  // Xクラステンプレートのテンプレートパラメータが
+  // コンストラクタ引数`3`から推論される
+  Y&amp;lt;3&amp;gt;{}.print();
+}
+```
+
+#### 出力
+```
+3
+```
+
+
+### 文字列クラスオブジェクトを非型テンプレートパラメータにしてリテラル演算子を定義する例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+template &amp;lt;typename CharT, std::size_t N&amp;gt;
+struct basic_fixed_string {
+  constexpr basic_fixed_string(const CharT (&amp;amp;str)[N+1])
+  { std::copy_n(str, N+1, data); }
+
+  friend auto operator&amp;lt;=&amp;gt;(const basic_fixed_string&amp;amp;, const basic_fixed_string&amp;amp;) = default;
+  CharT data[N+1];
+};
+
+template &amp;lt;typename CharT, std::size_t N&amp;gt;
+basic_fixed_string(const CharT (&amp;amp;str)[N]) -&amp;gt; basic_fixed_string&amp;lt;CharT, N-1&amp;gt;;
+
+template &amp;lt;std::size_t N&amp;gt;
+using fixed_string = basic_fixed_string&amp;lt;char, N&amp;gt;;
+
+namespace my_literals {
+template &amp;lt;basic_fixed_string str&amp;gt;
+auto operator&amp;#34;&amp;#34;_udl() {
+    return str;
+}
+}
+
+int main() {
+  using namespace my_literals;
+  auto s = &amp;#34;hello&amp;#34;_udl;
+  std::cout &amp;lt;&amp;lt; s.data &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+hello
+```
+
 
 ## 備考
 - [Bug 97930 - `pair` is not a structural type](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97930)
@@ -121,4 +191,4 @@ int main() {
 
 ## 参照
 - [P0732R2 Class Types in Non-Type Template Parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0732r2.pdf)
-- [P1907R1 Inconsistencies with non-type template parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1907r1.html)
\ No newline at end of file
+- [P1907R1 Inconsistencies with non-type template parameters](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1907r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- fix sample in flat_multiset</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/contains.html"/>
      <id>816853121ff41b05699b3edb3ec38c95cce82db5:reference/flat_set/flat_multiset/contains.md</id>
      <updated>2025-02-18T20:11:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/contains.md b/reference/flat_set/flat_multiset/contains.md
index 48e2daa1a..3bc429600 100644
--- a/reference/flat_set/flat_multiset/contains.md
+++ b/reference/flat_set/flat_multiset/contains.md
@@ -51,7 +51,7 @@ return find(x) != end();
 
 int main()
 {
-  std::flat_set&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
+  std::flat_multiset&amp;lt;int&amp;gt; fs = {3, 1, 4, 1};
 
   // キー3の要素が含まれているか
   if (fs.contains(3)) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
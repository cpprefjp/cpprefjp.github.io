<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-08-11T16:23:40.848423</updated>
  <id>2e23cddd-d4db-412f-895b-6e6fa1f2aa5f</id>

  
    <entry>
      <title>説明専用ライブラリ -- Range adaptor helpersの説明専用ライブラリを追加</title>
      <link href="https://cpprefjp.github.io/reference/exposition-only.html"/>
      <id>3602f00bb6d438a2a590bff69182478f75d1ec8c:reference/exposition-only.md</id>
      <updated>2024-08-12T01:20:31+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;exposition-only&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;説明専用ライブラリ&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;このページでは、説明専用のライブラリをまとめる。
これらはC++規格の文章中に現れる説明のためのものであり、実際に使うことはできない。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;exposition-only/decay-copy.html&#34;&gt;decay-copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;type_traits/decay.html&#34;&gt;decay&lt;/a&gt;&lt;/code&gt;した型にコピーまたはムーブする (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;exposition-only/synth-three-way-result.html&#34;&gt;synth-three-way&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;三方比較可能であればそれを行い、そうでなければ三方比較を実装して比較を行う (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;exposition-only/synth-three-way-result.html&#34;&gt;synth-three-way-result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;synth-three-way&lt;/code&gt;関数オブジェクトでの比較結果の型 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンテナ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;exposition-only/container-compatible-range.html&#34;&gt;container-compatible-range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定されたコンテナと互換性のあるRange&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;concepts&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;concepts/boolean-testable.html&#34;&gt;boolean-testable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;真理値型 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/dereferenceable.html&#34;&gt;with-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型&lt;code&gt;T&lt;/code&gt;に参照を付加する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/dereferenceable.html&#34;&gt;can-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/dereferenceable.html&#34;&gt;with-reference&lt;/a&gt;&lt;/code&gt;可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/dereferenceable.html&#34;&gt;dereferenceable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単純な間接参照が可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/is_integer_like.html&#34;&gt;is-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号付整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/is_integer_like.html&#34;&gt;is-signed-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なし整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;iterator/constant-iterator.html&#34;&gt;&lt;code&gt;constant-iterator&lt;/code&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素不変なイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/copyable_box.html&#34;&gt;copyable-box&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピー可能、または例外なしでムーブ可能な場合のみ値を保持する型 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;br /&gt; C++23で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/movable_box.html&#34;&gt;movable-box&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外なしでムーブ可能な場合のみ値を保持する型 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/simple-view.html&#34;&gt;simple-view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単純なビューを表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/has-arrow.html&#34;&gt;has-arrow&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/input_iterator.html&#34;&gt;std::input_iterator&lt;/a&gt;&lt;/code&gt;を満たし、アロー演算子が使用できる型かを表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/range-with-movable-references.html&#34;&gt;range-with-movable-references&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の参照と右辺値参照がムーブ構築できる&lt;code&gt;&lt;a href=&#34;ranges/input_range.html&#34;&gt;input_range&lt;/a&gt;&lt;/code&gt; (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/different-from.html&#34;&gt;different-from&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾を無視して、2つの型が同じでないことを表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/subrange/uses-nonqualification-pointer-conversion.html&#34;&gt;uses-nonqualification-pointer-conversion&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;直接変換できない型同士のポインタの変換が必要かどうかを表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/subrange/convertible-to-non-slicing.html&#34;&gt;convertible-to-non-slicing&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スライシングを起こさずに変換できるかどうかを表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/subrange/pair-like-convertible-from.html&#34;&gt;pair-like-convertible-from&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある2つの型から構築出来る&lt;code&gt;&lt;a href=&#34;tuple/pair-like.html&#34;&gt;pair-like&lt;/a&gt;&lt;/code&gt;な型を表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/maybe-const.html&#34;&gt;maybe-const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bool値に応じて&lt;code&gt;const&lt;/code&gt;修飾を付加する (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/tuple-transform.html&#34;&gt;tuple-transform&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;/code&gt;の各要素に関数を適用した&lt;code&gt;&lt;a href=&#34;tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;/code&gt;を生成する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/tuple-for-each.html&#34;&gt;tuple-for-each&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;/code&gt;の各要素に関数を適用する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/as-lvalue.html&#34;&gt;as-lvalue&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;rvalueをlvalueへキャストする (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/all-random-access.html&#34;&gt;all-random-access&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;すべてのビューが&lt;code&gt;&lt;a href=&#34;ranges/random_access_range.html&#34;&gt;random_access_range&lt;/a&gt;&lt;/code&gt;であるかを表す (concept)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/all-bidirectional.html&#34;&gt;all-bidirectional&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;すべてのビューが&lt;code&gt;&lt;a href=&#34;ranges/bidirectional_range.html&#34;&gt;bidirectional_range&lt;/a&gt;&lt;/code&gt;であるかを表す (concept)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/all-forward.html&#34;&gt;all-forward&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;すべてのビューが&lt;code&gt;&lt;a href=&#34;ranges/forward_range.html&#34;&gt;forward_range&lt;/a&gt;&lt;/code&gt;であるかを表す (concept)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;tuple/tuple-like.html&#34;&gt;tuple-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;/code&gt;のような型を表す (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;tuple/pair-like.html&#34;&gt;pair-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/code&gt;のような型を表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4861/expos.only.func&#34; target=&#34;_blank&#34;&gt;N4861 16.4.2.1 Exposition-only functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cplusplus.github.io/LWG/issue3404&#34; target=&#34;_blank&#34;&gt;LWG 3404 Finish removing &lt;code&gt;subrange&lt;/code&gt;&#39;s conversions from &lt;code&gt;pair-like&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html&#34; target=&#34;_blank&#34;&gt;P2278R4 &lt;code&gt;cbegin&lt;/code&gt; should always return a constant iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2494r2.html&#34; target=&#34;_blank&#34;&gt;P2494R2 Relaxing range adaptors to allow for move only types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all-bidirectional -- Range adaptor helpersの説明専用ライブラリを追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/all-bidirectional.html"/>
      <id>3602f00bb6d438a2a590bff69182478f75d1ec8c:reference/ranges/all-bidirectional.md</id>
      <updated>2024-08-12T01:20:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/all-bidirectional.md b/reference/ranges/all-bidirectional.md
new file mode 100644
index 000000000..488437f49
--- /dev/null
+++ b/reference/ranges/all-bidirectional.md
@@ -0,0 +1,22 @@
+# all-bidirectional
+* ranges[meta header]
+* concept[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;bool Const, class... Views&amp;gt;
+  concept all-bidirectional = (bidirectional_range&amp;lt;maybe-const&amp;lt;Const, Views&amp;gt;&amp;gt; &amp;amp;&amp;amp; ...);
+}
+```
+
+## 概要
+
+`all-bidirectional` は、複数のビューに対し、それらすべてが [`bidirectional_range`](bidirectional_range.md) であることを表すコンセプトである。
+
+## バージョン
+### 言語
+- C++26
+
+## 参照
+- [26.7.5 Range adaptor helpers](https://eel.is/c++draft/range.adaptor.helpers)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all-forward -- Range adaptor helpersの説明専用ライブラリを追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/all-forward.html"/>
      <id>3602f00bb6d438a2a590bff69182478f75d1ec8c:reference/ranges/all-forward.md</id>
      <updated>2024-08-12T01:20:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/all-forward.md b/reference/ranges/all-forward.md
new file mode 100644
index 000000000..549ecd75c
--- /dev/null
+++ b/reference/ranges/all-forward.md
@@ -0,0 +1,22 @@
+# all-forward
+* ranges[meta header]
+* concept[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;bool Const, class... Views&amp;gt;
+  concept all-forward = (forward_range&amp;lt;maybe-const&amp;lt;Const, Views&amp;gt;&amp;gt; &amp;amp;&amp;amp; ...);
+}
+```
+
+## 概要
+
+`all-forward` は、複数のビューに対し、それらすべてが [`forward_range`](forward_range.md) であることを表すコンセプトである。
+
+## バージョン
+### 言語
+- C++26
+
+## 参照
+- [26.7.5 Range adaptor helpers](https://eel.is/c++draft/range.adaptor.helpers)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all-random-access -- Range adaptor helpersの説明専用ライブラリを追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/all-random-access.html"/>
      <id>3602f00bb6d438a2a590bff69182478f75d1ec8c:reference/ranges/all-random-access.md</id>
      <updated>2024-08-12T01:20:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/all-random-access.md b/reference/ranges/all-random-access.md
new file mode 100644
index 000000000..2751fd6d4
--- /dev/null
+++ b/reference/ranges/all-random-access.md
@@ -0,0 +1,22 @@
+# all-random-access
+* ranges[meta header]
+* concept[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;bool Const, class... Views&amp;gt;
+  concept all-random-access = (random_access_range&amp;lt;maybe-const&amp;lt;Const, Views&amp;gt;&amp;gt; &amp;amp;&amp;amp; ...);
+}
+```
+
+## 概要
+
+`all-random-access` は、複数のビューに対し、それらすべてが [`random_access_range`](random_access_range.md) であることを表すコンセプトである。
+
+## バージョン
+### 言語
+- C++26
+
+## 参照
+- [26.7.5 Range adaptor helpers](https://eel.is/c++draft/range.adaptor.helpers)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as-lvalue -- Range adaptor helpersの説明専用ライブラリを追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as-lvalue.html"/>
      <id>3602f00bb6d438a2a590bff69182478f75d1ec8c:reference/ranges/as-lvalue.md</id>
      <updated>2024-08-12T01:20:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as-lvalue.md b/reference/ranges/as-lvalue.md
new file mode 100644
index 000000000..380efc8dc
--- /dev/null
+++ b/reference/ranges/as-lvalue.md
@@ -0,0 +1,24 @@
+# as-lvalue
+* ranges[meta header]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class T&amp;gt;
+  constexpr T&amp;amp; as-lvalue(T&amp;amp;&amp;amp; t) {
+    return static_cast&amp;lt;T&amp;amp;&amp;gt;(t);
+  }
+}
+```
+
+## 概要
+
+`as-lvalue` は、rvalueをlvalueへキャストする説明専用の関数である。
+
+## バージョン
+### 言語
+- C++23
+
+## 参照
+- [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple-for-each -- Range adaptor helpersの説明専用ライブラリを追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/tuple-for-each.html"/>
      <id>3602f00bb6d438a2a590bff69182478f75d1ec8c:reference/ranges/tuple-for-each.md</id>
      <updated>2024-08-12T01:20:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/tuple-for-each.md b/reference/ranges/tuple-for-each.md
new file mode 100644
index 000000000..f4e570ca4
--- /dev/null
+++ b/reference/ranges/tuple-for-each.md
@@ -0,0 +1,26 @@
+# tuple-for-each
+* ranges[meta header]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class F, class Tuple&amp;gt;
+  constexpr void tuple-for-each(F&amp;amp;&amp;amp; f, Tuple&amp;amp;&amp;amp; t) {
+    apply([&amp;amp;]&amp;lt;class... Ts&amp;gt;(Ts&amp;amp;&amp;amp;... elements) {
+      (static_cast&amp;lt;void&amp;gt;(invoke(f, std::forward&amp;lt;Ts&amp;gt;(elements))), ...);
+    }, std::forward&amp;lt;Tuple&amp;gt;(t));
+  }
+}
+```
+
+## 概要
+
+`tuple-for-each` は、[`tuple`](/reference/tuple/tuple.md)の各要素に対して関数を適用する説明専用の関数テンプレートである。
+
+## バージョン
+### 言語
+- C++23
+
+## 参照
+- [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple-transform -- Range adaptor helpersの説明専用ライブラリを追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/tuple-transform.html"/>
      <id>3602f00bb6d438a2a590bff69182478f75d1ec8c:reference/ranges/tuple-transform.md</id>
      <updated>2024-08-12T01:20:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/tuple-transform.md b/reference/ranges/tuple-transform.md
new file mode 100644
index 000000000..b8c00a3c2
--- /dev/null
+++ b/reference/ranges/tuple-transform.md
@@ -0,0 +1,26 @@
+# tuple-transform
+* ranges[meta header]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class F, class Tuple&amp;gt;
+  constexpr auto tuple-transform(F&amp;amp;&amp;amp; f, Tuple&amp;amp;&amp;amp; t) {
+    return apply([&amp;amp;]&amp;lt;class... Ts&amp;gt;(Ts&amp;amp;&amp;amp;... elements) {
+      return tuple&amp;lt;invoke_result_t&amp;lt;F&amp;amp;, Ts&amp;gt;...&amp;gt;(invoke(f, std::forward&amp;lt;Ts&amp;gt;(elements))...);
+    }, std::forward&amp;lt;Tuple&amp;gt;(t));
+  }
+}
+```
+
+## 概要
+
+`tuple-transform` は、[`tuple`](/reference/tuple/tuple.md)の各要素に対して関数を適用し、それらの結果を要素とする[`tuple`](/reference/tuple/tuple.md)を生成する説明専用の関数テンプレートである。
+
+## バージョン
+### 言語
+- C++23
+
+## 参照
+- [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>説明専用ライブラリ -- maybe-constの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/exposition-only.html"/>
      <id>0059bf7fa22fbbd9183422c61cbe4d226ecad9bb:reference/exposition-only.md</id>
      <updated>2024-08-12T00:43:27+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;exposition-only&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;説明専用ライブラリ&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;このページでは、説明専用のライブラリをまとめる。
これらはC++規格の文章中に現れる説明のためのものであり、実際に使うことはできない。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;exposition-only/decay-copy.html&#34;&gt;decay-copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;type_traits/decay.html&#34;&gt;decay&lt;/a&gt;&lt;/code&gt;した型にコピーまたはムーブする (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;exposition-only/synth-three-way-result.html&#34;&gt;synth-three-way&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;三方比較可能であればそれを行い、そうでなければ三方比較を実装して比較を行う (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;exposition-only/synth-three-way-result.html&#34;&gt;synth-three-way-result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;synth-three-way&lt;/code&gt;関数オブジェクトでの比較結果の型 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンテナ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;exposition-only/container-compatible-range.html&#34;&gt;container-compatible-range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定されたコンテナと互換性のあるRange&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;concepts&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;concepts/boolean-testable.html&#34;&gt;boolean-testable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;真理値型 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/dereferenceable.html&#34;&gt;with-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型&lt;code&gt;T&lt;/code&gt;に参照を付加する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/dereferenceable.html&#34;&gt;can-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/dereferenceable.html&#34;&gt;with-reference&lt;/a&gt;&lt;/code&gt;可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/dereferenceable.html&#34;&gt;dereferenceable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単純な間接参照が可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/is_integer_like.html&#34;&gt;is-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号付整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/is_integer_like.html&#34;&gt;is-signed-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なし整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;iterator/constant-iterator.html&#34;&gt;&lt;code&gt;constant-iterator&lt;/code&gt; &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素不変なイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/copyable_box.html&#34;&gt;copyable-box&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピー可能、または例外なしでムーブ可能な場合のみ値を保持する型 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;br /&gt; C++23で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/movable_box.html&#34;&gt;movable-box&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外なしでムーブ可能な場合のみ値を保持する型 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/simple-view.html&#34;&gt;simple-view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単純なビューを表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/has-arrow.html&#34;&gt;has-arrow&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;iterator/input_iterator.html&#34;&gt;std::input_iterator&lt;/a&gt;&lt;/code&gt;を満たし、アロー演算子が使用できる型かを表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/range-with-movable-references.html&#34;&gt;range-with-movable-references&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素の参照と右辺値参照がムーブ構築できる&lt;code&gt;&lt;a href=&#34;ranges/input_range.html&#34;&gt;input_range&lt;/a&gt;&lt;/code&gt; (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/different-from.html&#34;&gt;different-from&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾を無視して、2つの型が同じでないことを表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/subrange/uses-nonqualification-pointer-conversion.html&#34;&gt;uses-nonqualification-pointer-conversion&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;直接変換できない型同士のポインタの変換が必要かどうかを表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/subrange/convertible-to-non-slicing.html&#34;&gt;convertible-to-non-slicing&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スライシングを起こさずに変換できるかどうかを表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/subrange/pair-like-convertible-from.html&#34;&gt;pair-like-convertible-from&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ある2つの型から構築出来る&lt;code&gt;&lt;a href=&#34;tuple/pair-like.html&#34;&gt;pair-like&lt;/a&gt;&lt;/code&gt;な型を表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;ranges/maybe-const.html&#34;&gt;maybe-const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bool値に応じて&lt;code&gt;const&lt;/code&gt;修飾を付加する (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;tuple&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;tuple/tuple-like.html&#34;&gt;tuple-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;/code&gt;のような型を表す (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;tuple/pair-like.html&#34;&gt;pair-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/code&gt;のような型を表す (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4861/expos.only.func&#34; target=&#34;_blank&#34;&gt;N4861 16.4.2.1 Exposition-only functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cplusplus.github.io/LWG/issue3404&#34; target=&#34;_blank&#34;&gt;LWG 3404 Finish removing &lt;code&gt;subrange&lt;/code&gt;&#39;s conversions from &lt;code&gt;pair-like&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html&#34; target=&#34;_blank&#34;&gt;P2278R4 &lt;code&gt;cbegin&lt;/code&gt; should always return a constant iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2494r2.html&#34; target=&#34;_blank&#34;&gt;P2494R2 Relaxing range adaptors to allow for move only types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>maybe-const -- maybe-constの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/maybe-const.html"/>
      <id>0059bf7fa22fbbd9183422c61cbe4d226ecad9bb:reference/ranges/maybe-const.md</id>
      <updated>2024-08-12T00:43:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/maybe-const.md b/reference/ranges/maybe-const.md
new file mode 100644
index 000000000..1acc3a80c
--- /dev/null
+++ b/reference/ranges/maybe-const.md
@@ -0,0 +1,22 @@
+# maybe-const
+* ranges[meta header]
+* type-alias[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;bool Const, class T&amp;gt;
+  using maybe-const = conditional_t&amp;lt;Const, const T, T&amp;gt;;
+}
+```
+
+## 概要
+
+`maybe-const&amp;lt;Const, T&amp;gt;` は、bool値`Const`が`true`のとき `const T`、`false`のとき`T`となる説明専用の型エイリアスである。
+
+## バージョン
+### 言語
+- C++23
+
+## 参照
+- [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forward_list -- add assign_range, insert_range_after and prepend_range to std::forward_list</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list.html"/>
      <id>d3eeb80c76c6cceb1e5b3ddef1a21e658ba14a3a:reference/forward_list/forward_list.md</id>
      <updated>2024-08-11T17:10:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list.md b/reference/forward_list/forward_list.md
index e89a102a9..097248912 100644
--- a/reference/forward_list/forward_list.md
+++ b/reference/forward_list/forward_list.md
@@ -48,6 +48,7 @@ namespace std {
 | [`(destructor)`](forward_list/op_destructor.md) | デストラクタ | C++11 |
 | [`operator=`](forward_list/op_assign.md) | 代入演算子 | C++11 |
 | [`assign`](forward_list/assign.md) | コンテナの再代入 | C++11 |
+| [`assign_range`](forward_list/assign_range.md) | Rangeの要素を再代入 | C++23 |
 
 
 ### イテレータ
@@ -83,9 +84,11 @@ namespace std {
 |----------------------------------------------------|--------------------------------|-------|
 | [`emplace_front`](forward_list/emplace_front.md) | 先頭への直接構築による要素追加 | C++11 |
 | [`push_front`](forward_list/push_front.md) | 先頭に要素を追加する | C++11 |
+| [`prepend_range`](forward_list/prepend_range.md) | 先頭にRangeの要素を追加する | C++23 |
 | [`pop_front`](forward_list/pop_front.md) | 先頭から要素を削除 | C++11 |
 | [`emplace_after`](forward_list/emplace_after.md) | 任意の位置への直接構築による要素挿入 | C++11 |
 | [`insert_after`](forward_list/insert_after.md) | 任意の位置への要素挿入 | C++11 |
+| [`insert_range_after`](forward_list/insert_range_after.md) | 任意の位置へRangeの要素挿入 | C++23 |
 | [`erase_after`](forward_list/erase_after.md) | 指定したイテレータの次の要素を削除する | C++11 |
 | [`swap`](forward_list/swap.md) | コンテナの交換 | C++11 |
 | [`resize`](forward_list/resize.md) | 要素数を変更する | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign_range -- add assign_range, insert_range_after and prepend_range to std::forward_list</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/assign_range.html"/>
      <id>d3eeb80c76c6cceb1e5b3ddef1a21e658ba14a3a:reference/forward_list/forward_list/assign_range.md</id>
      <updated>2024-08-11T17:10:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/assign_range.md b/reference/forward_list/forward_list/assign_range.md
new file mode 100644
index 000000000..bebec79a9
--- /dev/null
+++ b/reference/forward_list/forward_list/assign_range.md
@@ -0,0 +1,64 @@
+# assign_range
+* forward_list[meta header]
+* std[meta namespace]
+* forward_list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void assign_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を再代入する。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`forward_list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、再代入する。
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;forward_list&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::forward_list&amp;lt;int&amp;gt; fl = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを再代入
+  fl.assign_range(a);
+
+  for (int i : fl) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* assign_range[color ff0000]
+
+### 出力
+```
+4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`assign`](assign.md)                     | コンテナに値を代入する   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range_after -- add assign_range, insert_range_after and prepend_range to std::forward_list</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/insert_range_after.html"/>
      <id>d3eeb80c76c6cceb1e5b3ddef1a21e658ba14a3a:reference/forward_list/forward_list/insert_range_after.md</id>
      <updated>2024-08-11T17:10:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/insert_range_after.md b/reference/forward_list/forward_list/insert_range_after.md
new file mode 100644
index 000000000..150f9b3c1
--- /dev/null
+++ b/reference/forward_list/forward_list/insert_range_after.md
@@ -0,0 +1,61 @@
+# insert_range_after
+* forward_list[meta header]
+* std[meta namespace]
+* forward_list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+iterator insert_range_after(const_iterator pos, R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を任意の位置に挿入する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`forward_list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、`pos`の直後に挿入する。
+
+
+## 戻り値
+挿入されたRange`rg`の最後の要素を指すイテレータ。`rg`が空の場合は`pos`。
+
+
+## 例
+```cpp example
+#include &amp;lt;forward_list&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::forward_list&amp;lt;int&amp;gt; fl = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを１番目の直後に挿入
+  fl.insert_range_after(fl.begin(), a);
+
+  for (int i : fl) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* insert_range_after[color ff0000]
+
+### 出力
+```
+1 4 5 6 2 3
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert_after`](insert_after.md)         | 任意の位置への要素挿入   |
+| [`emplace_after`](emplace_after.md)       | 任意の位置への直接構築による要素挿入 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prepend_range -- add assign_range, insert_range_after and prepend_range to std::forward_list</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/prepend_range.html"/>
      <id>d3eeb80c76c6cceb1e5b3ddef1a21e658ba14a3a:reference/forward_list/forward_list/prepend_range.md</id>
      <updated>2024-08-11T17:10:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/prepend_range.md b/reference/forward_list/forward_list/prepend_range.md
new file mode 100644
index 000000000..9f714fb70
--- /dev/null
+++ b/reference/forward_list/forward_list/prepend_range.md
@@ -0,0 +1,57 @@
+# prepend_range
+* forward_list[meta header]
+* std[meta namespace]
+* forward_list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void prepend_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+先頭にRangeの要素を追加する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`forward_list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;forward_list&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::forward_list&amp;lt;int&amp;gt; fl = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを先頭に追加
+  fl.prepend_range(a);
+
+  for (int i : fl) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* prepend_range[color ff0000]
+
+### 出力
+```
+4 5 6 1 2 3 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_front`](push_front.md)             | 先頭に要素を追加する         |
+| [`emplace_front`](emplace_front.md)       | 先頭に要素を直接構築で追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>list -- add append_range, assign_range, insert_range and prepend_range to std::list</title>
      <link href="https://cpprefjp.github.io/reference/list/list.html"/>
      <id>1a35e93266f3576c084fc9b57381139f3820a3cd:reference/list/list.md</id>
      <updated>2024-08-11T17:08:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list.md b/reference/list/list.md
index 1dd285426..947414504 100644
--- a/reference/list/list.md
+++ b/reference/list/list.md
@@ -37,6 +37,7 @@ namespace std {
 | [`(destructor)`](list/op_destructor.md) | デストラクタ | |
 | [`operator=`](list/op_assign.md) | 代入演算子 | |
 | [`assign`](list/assign.md) | コンテナの再代入 | |
+| [`assign_range`](list/assign_range.md) | Rangeの要素を再代入 | C++23 |
 
 
 ### イテレータ
@@ -77,10 +78,13 @@ namespace std {
 |-----------------|--------------------------------|-------|
 | [`push_front`](list/push_front.md)       | 先頭に要素を追加する           | |
 | [`emplace_front`](list/emplace_front.md) | 先頭への直接構築による要素追加 | C++11 |
+| [`prepend_range`](list/prepend_range.md) | 先頭にRangeの要素を追加する   | C++23 |
 | [`push_back`](list/push_back.md)         | 末尾に要素を追加する           | |
 | [`emplace_back`](list/emplace_back.md)   | 末尾への直接構築による要素追加 | C++11 |
+| [`append_range`](list/append_range.md)   | 末尾にRangeの要素を追加する   | C++23 |
 | [`insert`](list/insert.md)               | 要素の挿入                     | |
 | [`emplace`](list/emplace.md)             | 要素の直接構築による挿入       | C++11 |
+| [`insert_range`](list/insert_range.md)   | 任意の位置にRangeの要素を挿入する | C++23 |
 | [`pop_front`](list/pop_front.md)         | 先頭から要素を削除             | |
 | [`pop_back`](list/pop_back.md)           | 末尾から要素を削除             | |
 | [`erase`](list/erase.md)                 | 要素の削除                     | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append_range -- add append_range, assign_range, insert_range and prepend_range to std::list</title>
      <link href="https://cpprefjp.github.io/reference/list/list/append_range.html"/>
      <id>1a35e93266f3576c084fc9b57381139f3820a3cd:reference/list/list/append_range.md</id>
      <updated>2024-08-11T17:08:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/append_range.md b/reference/list/list/append_range.md
new file mode 100644
index 000000000..9fd251269
--- /dev/null
+++ b/reference/list/list/append_range.md
@@ -0,0 +1,65 @@
+# append_range
+* list[meta header]
+* std[meta namespace]
+* list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void append_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの要素を末尾へ追加する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、末尾に追加する。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`とすると、`N`に比例。Tのコンストラクタは`N`回呼ばれる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;list&amp;gt;
+
+int main()
+{
+  std::list&amp;lt;int&amp;gt; lst = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを末尾に追加
+  lst.append_range(a);
+
+  for (int i : lst) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* append_range[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_back`](push_back.md)               | 末尾に要素を追加する         |
+| [`emplace_back`](emplace_back.md)         | 末尾に要素を直接構築で追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign_range -- add append_range, assign_range, insert_range and prepend_range to std::list</title>
      <link href="https://cpprefjp.github.io/reference/list/list/assign_range.html"/>
      <id>1a35e93266f3576c084fc9b57381139f3820a3cd:reference/list/list/assign_range.md</id>
      <updated>2024-08-11T17:08:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/assign_range.md b/reference/list/list/assign_range.md
new file mode 100644
index 000000000..6a73d61c4
--- /dev/null
+++ b/reference/list/list/assign_range.md
@@ -0,0 +1,64 @@
+# assign_range
+* list[meta header]
+* std[meta namespace]
+* list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void assign_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を再代入する。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、再代入する。
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;list&amp;gt;
+
+int main()
+{
+  std::list&amp;lt;int&amp;gt; lst = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを再代入
+  lst.assign_range(a);
+
+  for (int i : lst) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* assign_range[color ff0000]
+
+### 出力
+```
+4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`assign`](assign.md)                     | コンテナに値を代入する   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add append_range, assign_range, insert_range and prepend_range to std::list</title>
      <link href="https://cpprefjp.github.io/reference/list/list/insert_range.html"/>
      <id>1a35e93266f3576c084fc9b57381139f3820a3cd:reference/list/list/insert_range.md</id>
      <updated>2024-08-11T17:08:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/insert_range.md b/reference/list/list/insert_range.md
new file mode 100644
index 000000000..9e8f272a6
--- /dev/null
+++ b/reference/list/list/insert_range.md
@@ -0,0 +1,62 @@
+# insert_range
+* list[meta header]
+* std[meta namespace]
+* list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+iterator insert_range(const_iterator pos, R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を任意の位置に挿入する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、`pos`の直前に挿入する。
+
+
+## 戻り値
+挿入されたRange`rg`の最初の要素を指すイテレータ。`rg`が空の場合は`pos`。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;list&amp;gt;
+
+int main()
+{
+  std::list&amp;lt;int&amp;gt; lst = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを１番目と２番目の要素の間に挿入
+  lst.insert_range(std::next(lst.begin()), a);
+
+  for (int i : lst) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+1 4 5 6 2 3
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert`](insert.md)                     | 任意の位置に要素を挿入する         |
+| [`emplace`](emplace.md)                   | 任意の位置に要素を直接構築で挿入する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prepend_range -- add append_range, assign_range, insert_range and prepend_range to std::list</title>
      <link href="https://cpprefjp.github.io/reference/list/list/prepend_range.html"/>
      <id>1a35e93266f3576c084fc9b57381139f3820a3cd:reference/list/list/prepend_range.md</id>
      <updated>2024-08-11T17:08:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/prepend_range.md b/reference/list/list/prepend_range.md
new file mode 100644
index 000000000..6dca97b94
--- /dev/null
+++ b/reference/list/list/prepend_range.md
@@ -0,0 +1,65 @@
+# prepend_range
+* list[meta header]
+* std[meta namespace]
+* list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void prepend_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+先頭にRangeの要素を追加する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、先頭に追加する。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`とすると、`N`に比例。Tのコンストラクタは`N`回呼ばれる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;list&amp;gt;
+
+int main()
+{
+  std::list&amp;lt;int&amp;gt; lst = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを先頭に追加
+  lst.prepend_range(a);
+
+  for (int i : lst) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* prepend_range[color ff0000]
+
+### 出力
+```
+4 5 6 1 2 3 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_front`](push_front.md)             | 先頭に要素を追加する         |
+| [`emplace_front`](emplace_front.md)       | 先頭に要素を直接構築で追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>deque -- add append_range, assign_range, insert_range and prepend_range to std::deque</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque.html"/>
      <id>774a74a79b885dc153f93a2be943b4c886907cf9:reference/deque/deque.md</id>
      <updated>2024-08-11T17:07:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque.md b/reference/deque/deque.md
index 466c3e65b..bda4249d4 100644
--- a/reference/deque/deque.md
+++ b/reference/deque/deque.md
@@ -48,6 +48,7 @@ namespace std {
 | [`(destructor)`](deque/op_destructor.md)         | デストラクタ   | |
 | [`operator=`](deque/op_assign.md)         | 代入演算子     | |
 | [`assign`](deque/assign.md)               | コンテナに値を代入する | |
+| [`assign_range`](deque/assign_range.md)   | コンテナにRangeの要素を代入する | C++23 |
 | [`get_allocator`](deque/get_allocator.md) | アロケータオブジェクトを取得する | |
 
 
@@ -92,11 +93,14 @@ namespace std {
 | [`clear`](deque/clear.md)                 | 全ての要素を削除する | |
 | [`insert`](deque/insert.md)               | 任意の位置に要素を挿入する | |
 | [`emplace`](deque/emplace.md)             | 任意の位置に要素を直接構築で挿入する | C++11 |
+| [`insert_range`](deque/insert_range.md)   | 任意の位置にRangeの要素を挿入する | C++23 |
 | [`push_back`](deque/push_back.md)         | 末尾に要素を追加する | |
 | [`emplace_back`](deque/emplace_back.md)   | 末尾に要素を直接構築で追加する | C++11 |
+| [`append_range`](deque/append_range.md)   | 末尾にRangeの要素を追加する | C++23 |
 | [`pop_back`](deque/pop_back.md)           | 末尾要素を削除する | |
 | [`push_front`](deque/push_front.md)       | 先頭に要素を追加する | |
 | [`emplace_front`](deque/emplace_front.md) | 先頭に要素を直接構築で追加する | C++11 |
+| [`prepend_range`](deque/prepend_range.md) | 先頭にRangeの要素を追加する | C++23 |
 | [`pop_front`](deque/pop_front.md)         | 先頭要素を削除する | |
 | [`resize`](deque/resize.md)               | 要素数を変更する | |
 | [`erase`](deque/erase.md)                 | 指定した要素を削除する | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append_range -- add append_range, assign_range, insert_range and prepend_range to std::deque</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/append_range.html"/>
      <id>774a74a79b885dc153f93a2be943b4c886907cf9:reference/deque/deque/append_range.md</id>
      <updated>2024-08-11T17:07:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/append_range.md b/reference/deque/deque/append_range.md
new file mode 100644
index 000000000..55c179eb6
--- /dev/null
+++ b/reference/deque/deque/append_range.md
@@ -0,0 +1,65 @@
+# append_range
+* deque[meta header]
+* std[meta namespace]
+* deque[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void append_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの要素を末尾へ追加する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`deque`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、末尾に追加する。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`とすると、`N`に比例。Tのコンストラクタは`N`回呼ばれる。
+
+
+## 例
+```cpp example
+#include &amp;lt;deque&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::deque&amp;lt;int&amp;gt; d = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを末尾に追加
+  d.append_range(a);
+
+  for (int i : d) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* append_range[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_back`](push_back.md)               | 末尾に要素を追加する         |
+| [`emplace_back`](emplace_back.md)         | 末尾に要素を直接構築で追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign_range -- add append_range, assign_range, insert_range and prepend_range to std::deque</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/assign_range.html"/>
      <id>774a74a79b885dc153f93a2be943b4c886907cf9:reference/deque/deque/assign_range.md</id>
      <updated>2024-08-11T17:07:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/assign_range.md b/reference/deque/deque/assign_range.md
new file mode 100644
index 000000000..195f38acd
--- /dev/null
+++ b/reference/deque/deque/assign_range.md
@@ -0,0 +1,64 @@
+# assign_range
+* deque[meta header]
+* std[meta namespace]
+* deque[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void assign_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を再代入する。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`deque`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、再代入する。
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;deque&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::deque&amp;lt;int&amp;gt; d = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを再代入
+  d.assign_range(a);
+
+  for (int i : d) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* assign_range[color ff0000]
+
+### 出力
+```
+4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`assign`](assign.md)                     | コンテナに値を代入する   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add append_range, assign_range, insert_range and prepend_range to std::deque</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/insert_range.html"/>
      <id>774a74a79b885dc153f93a2be943b4c886907cf9:reference/deque/deque/insert_range.md</id>
      <updated>2024-08-11T17:07:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/insert_range.md b/reference/deque/deque/insert_range.md
new file mode 100644
index 000000000..71de3fc2d
--- /dev/null
+++ b/reference/deque/deque/insert_range.md
@@ -0,0 +1,62 @@
+# insert_range
+* deque[meta header]
+* std[meta namespace]
+* deque[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+iterator insert_range(const_iterator pos, R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を任意の位置に挿入する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`deque`コンテナへの`EmplaceConstructible`であり、かつ型`T`が`MoveConstructible`・`MoveAssignable`・`Swappable`であること。
+
+
+## 効果
+Range`rg`の各要素を、`pos`の直前に挿入する。
+
+
+## 戻り値
+挿入されたRange`rg`の最初の要素を指すイテレータ。`rg`が空の場合は`pos`。
+
+
+## 例
+```cpp example
+#include &amp;lt;deque&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main()
+{
+  std::deque&amp;lt;int&amp;gt; d = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを１番目と２番目の要素の間に挿入
+  d.insert_range(std::next(d.begin()), a);
+
+  for (int i : d) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+1 4 5 6 2 3
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert`](insert.md)                     | 任意の位置に要素を挿入する         |
+| [`emplace`](emplace.md)                   | 任意の位置に要素を直接構築で挿入する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prepend_range -- add append_range, assign_range, insert_range and prepend_range to std::deque</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/prepend_range.html"/>
      <id>774a74a79b885dc153f93a2be943b4c886907cf9:reference/deque/deque/prepend_range.md</id>
      <updated>2024-08-11T17:07:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/prepend_range.md b/reference/deque/deque/prepend_range.md
new file mode 100644
index 000000000..a5c67622e
--- /dev/null
+++ b/reference/deque/deque/prepend_range.md
@@ -0,0 +1,65 @@
+# prepend_range
+* deque[meta header]
+* std[meta namespace]
+* deque[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void prepend_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+先頭にRangeの要素を追加する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`deque`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、先頭に追加する。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`とすると、`N`に比例。Tのコンストラクタは`N`回呼ばれる。
+
+
+## 例
+```cpp example
+#include &amp;lt;deque&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::deque&amp;lt;int&amp;gt; d = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを先頭に追加
+  d.prepend_range(a);
+
+  for (int i : d) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* prepend_range[color ff0000]
+
+### 出力
+```
+4 5 6 1 2 3 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_front`](push_front.md)             | 先頭に要素を追加する         |
+| [`emplace_front`](emplace_front.md)       | 先頭に要素を直接構築で追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
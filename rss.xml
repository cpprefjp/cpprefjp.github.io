<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-10-19T14:36:54.057878</updated>
  <id>cc05f251-5293-403d-9fb3-60278639e229</id>

  
    <entry>
      <title>from_chars -- Merge pull request #907 from kenichiice/fix-from_chars</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars.html"/>
      <id>7f11ec50491bcefcd9e479c37362dfabd4871842:reference/charconv/from_chars.md</id>
      <updated>2021-10-19T15:14:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars.md b/reference/charconv/from_chars.md
index 2aa8c38e5..9e3026d11 100644
--- a/reference/charconv/from_chars.md
+++ b/reference/charconv/from_chars.md
@@ -68,11 +68,12 @@ C++標準はこれら関数の実装の詳細について何も規定しない
 - 成功した場合
     - `ptr` : 指定されたパターンに一致しなかった最初の文字の位置。全てが一致した場合は`ptr == last`
     - `ec` : `ec == errc{}`
-- 失敗した場合
+- パターンにマッチする文字列が見つからない場合
     - `ptr` : `ptr == first`
-    - `ec` : 
-        - パターンにマッチする文字列が見つからない場合、`ec == ` [`errc::invalid_argument`](/reference/system_error/errc.md)
-        - 変換した結果の値が`value`の型では表現できない場合、`ec == ` [`errc::result_out_of_range`](/reference/system_error/errc.md)
+    - `ec` : `ec == ` [`errc::invalid_argument`](/reference/system_error/errc.md)
+- 変換した結果の値が`value`の型では表現できない場合
+    - `ptr` : 指定されたパターンに一致しなかった最初の文字の位置
+    - `ec` : `ec == ` [`errc::result_out_of_range`](/reference/system_error/errc.md)
 
 ## 例外
 投げない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars -- from_charsのエラーケースでの戻り値の説明を修正</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars.html"/>
      <id>c590b629d88a153a186d4a5f79a0cdde51d39954:reference/charconv/from_chars.md</id>
      <updated>2021-10-19T14:24:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars.md b/reference/charconv/from_chars.md
index 2aa8c38e5..9e3026d11 100644
--- a/reference/charconv/from_chars.md
+++ b/reference/charconv/from_chars.md
@@ -68,11 +68,12 @@ C++標準はこれら関数の実装の詳細について何も規定しない
 - 成功した場合
     - `ptr` : 指定されたパターンに一致しなかった最初の文字の位置。全てが一致した場合は`ptr == last`
     - `ec` : `ec == errc{}`
-- 失敗した場合
+- パターンにマッチする文字列が見つからない場合
     - `ptr` : `ptr == first`
-    - `ec` : 
-        - パターンにマッチする文字列が見つからない場合、`ec == ` [`errc::invalid_argument`](/reference/system_error/errc.md)
-        - 変換した結果の値が`value`の型では表現できない場合、`ec == ` [`errc::result_out_of_range`](/reference/system_error/errc.md)
+    - `ec` : `ec == ` [`errc::invalid_argument`](/reference/system_error/errc.md)
+- 変換した結果の値が`value`の型では表現できない場合
+    - `ptr` : 指定されたパターンに一致しなかった最初の文字の位置
+    - `ec` : `ec == ` [`errc::result_out_of_range`](/reference/system_error/errc.md)
 
 ## 例外
 投げない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>OGAWA KenIchi</name>
        <email>kenichi@ice.email.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt; reverse_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>63be8201d1a328bfbd52eb38206f31c106863cdd:reference/ranges.md</id>
      <updated>2021-10-18T22:33:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 87a2e8f2a..de49957dd 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -249,10 +249,10 @@ range | adaptor(args...)
 
 ### reverse view
 
-| 名前                                            | 説明           | 対応バージョン |
-|-------------------------------------------------|----------------|----------------|
-| [`reverse_view`](ranges/reverse_view.md.nolink) | 逆順のビュー (class template)     | C++20          |
-| [`reverse`](ranges/reverse.md.nolink)           | 逆順のビューを生成する (customization point object)  | C++20          |
+| 名前                                     | 説明                                                 | 対応バージョン |
+|------------------------------------------|------------------------------------------------------|----------------|
+| [`reverse_view`](ranges/reverse_view.md) | 逆順のビュー (class template)                        | C++20          |
+| [`reverse`](ranges/reverse_view.md)      | 逆順のビューを生成する (customization point object)  | C++20          |
 
 ### elements view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reverse_view -- &lt;ranges&gt; reverse_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view.html"/>
      <id>63be8201d1a328bfbd52eb38206f31c106863cdd:reference/ranges/reverse_view.md</id>
      <updated>2021-10-18T22:33:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view.md b/reference/ranges/reverse_view.md
new file mode 100644
index 000000000..f05be3513
--- /dev/null
+++ b/reference/ranges/reverse_view.md
@@ -0,0 +1,123 @@
+# reverse_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  namespace ranges {
+    template&amp;lt;view V&amp;gt;
+    requires bidirectional_range&amp;lt;V&amp;gt;
+    class reverse_view : public view_interface&amp;lt;reverse_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
+
+    namespace views {
+      inline constexpr /*unspecified*/ reverse = /*unspecified*/;         // (2)
+    }
+  }
+
+  namespace views = ranges::views;
+}
+```
+* view[link view.md]
+* bidirectional_range[link bidirectional_range.md]
+* view_interface[link view_interface.md]
+
+## 概要
+- (1): 任意の[`bidirectional_range`](bidirectional_range.md)を逆順にする[`view`](view.md)
+- (2): `reverse_view`または同じ効果を実現する[`view`](view.md)を生成するRangeアダプタオブジェクト
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+| ○       | ※    | ※     | ○    | ○      | ○            | ※            |            | ○     | ○       | ○   |
+
+※ 参照先のRangeに従う
+
+## テンプレートパラメータ制約
+
+- [`view`](view.md)`&amp;lt;V&amp;gt;`
+- [`bidirectional_range`](bidirectional_range.md)`&amp;lt;V&amp;gt;`
+
+## 効果
+
+- (2): 式`views::reverse(E)`の効果は次の通り
+    - `E`の型が`reverse_view`の特殊化であれば、`E.base()`と等しい (CV修飾されている場合を含む)
+    - イテレータ型`I`、[`subrange_kind`](subrange_kind.md)の値`K`に対し、`E`の型がCV修飾された[`subrange`](subrange.md)`&amp;lt;`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;I&amp;gt;, `[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;I&amp;gt;, K&amp;gt;`であるとする。このとき、`E`は一度しか評価されないとして、
+        - `K`が[`subrange_kind::sized`](subrange_kind.md)であれば、[`subrange`](subrange.md)`&amp;lt;I, I, K&amp;gt;(E.end().base(), E.begin().base(), E.size())`と等しい
+        - それ以外のとき、[`subrange`](subrange.md)`&amp;lt;I, I, K&amp;gt;(E.end().base(), E.begin().base())`と等しい
+    - それ以外のとき、`reverse_view{E}`と等しい
+
+`V | views::reverse | views::reverse`のように連続して適用したとき、結果として元に戻るのではなく、式の効果自体が`V`と等しくなる。
+
+## メンバ関数
+
+| 名前                                             | 説明                              | 対応バージョン |
+|--------------------------------------------------|-----------------------------------|----------------|
+| [`(constructor)`](ref_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
+| [`base`](ref_view/base.md.nolink)                     | `V`の参照を取得する               | C++20          |
+| [`begin`](ref_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
+| [`end`](ref_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
+| [`size`](ref_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
+
+`r`を参照先のRangeとする。`size`は、[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`data`](view_interface/data.md)             | Rangeの先頭へのポインタを取得する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](ref_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  using namespace std::literals;
+
+  for(char c : &amp;#34;Hello&amp;#34;sv | views::reverse) {
+    cout &amp;lt;&amp;lt; c;
+  }
+  cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // reverseを2回適用すると元の型に戻る
+  static_assert(same_as&amp;lt;string_view, decltype(&amp;#34;&amp;#34;sv | views::reverse | views::reverse)&amp;gt;);
+}
+```
+* views::reverse[color ff0000]
+* same_as[link /reference/concepts/same_as.md]
+
+### 出力
+```
+olleH
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt; split_view/lazy_split_view追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>660dd20cd78023ed4983a6d749b85d5086b0c6fa:reference/ranges.md</id>
      <updated>2021-10-17T18:25:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 82fbaf647..87a2e8f2a 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -227,10 +227,12 @@ range | adaptor(args...)
 
 ### split view
 
-| 名前                                        | 説明           | 対応バージョン |
-|---------------------------------------------|----------------|----------------|
-| [`split_view`](ranges/split_view.md.nolink) | Rangeを指定したデリミタで分割するビュー (class template)     | C++20          |
-| [`split`](ranges/split.md.nolink)           | Rangeを指定したデリミタで分割するビューを生成する (customization point object)  | C++20          |
+| 名前                                           | 説明                                                                     | 対応バージョン |
+|------------------------------------------------|--------------------------------------------------------------------------|----------------|
+| [`lazy_split_view`](ranges/lazy_split_view.md) | Rangeを指定したデリミタで分割するビュー (class template)     | C++20          |
+| [`lazy_split`](ranges/lazy_split_view.md)      | `lazy_split_view`を生成する (customization point object)     | C++20          |
+| [`split_view`](ranges/split_view.md)           | Rangeを指定したデリミタで分割するビュー (class template)     | C++20          |
+| [`split`](ranges/split_view.md)                | `split_view`を生成する (customization point object)          | C++20          |
 
 ### counted view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lazy_spliy_view -- &lt;ranges&gt; split_view/lazy_split_view追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view.html"/>
      <id>660dd20cd78023ed4983a6d749b85d5086b0c6fa:reference/ranges/lazy_split_view.md</id>
      <updated>2021-10-17T18:25:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view.md b/reference/ranges/lazy_split_view.md
new file mode 100644
index 000000000..b57f30738
--- /dev/null
+++ b/reference/ranges/lazy_split_view.md
@@ -0,0 +1,137 @@
+# lazy_spliy_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  namespace ranges {
+
+    template&amp;lt;input_range V, forward_range Pattern&amp;gt;
+    requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; view&amp;lt;Pattern&amp;gt; &amp;amp;&amp;amp;
+             indirectly_comparable&amp;lt;iterator_t&amp;lt;V&amp;gt;, iterator_t&amp;lt;Pattern&amp;gt;, ranges::equal_to&amp;gt; &amp;amp;&amp;amp;
+             (forward_range&amp;lt;V&amp;gt; || tiny-range&amp;lt;Pattern&amp;gt;)
+    class lazy_spliy_view : public view_interface&amp;lt;lazy_spliy_view&amp;lt;V, Pattern&amp;gt;&amp;gt; { …… }; // (1)
+
+    namespace views {
+      inline constexpr /*unspecified*/ lazy_spliy = /*unspecified*/;                     // (2)
+    }
+  }
+
+  namespace views = ranges::views;
+}
+```
+* input_range[link input_range.md]
+* forward_range[link forward_range.md]
+* view[link view.md]
+* iterator_t[link iterator_t.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* ranges::equal_to[link /reference/functional/equal_to.md]
+* tiny-range[italic]
+
+## 概要
+
+- (1): [`input_range`](input_range.md)を要素、または要素の[`view`](view.md)からなるパターンをデリミタとして分割し、それぞれの部分Rangeを要素とする新たなRangeとして扱う[`view`](view.md)
+- (2): `lazy_split_view`を生成するRangeアダプタオブジェクト
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+|          |       |        | ○    | (1)     |               |               |            | (2)    | ○       | ○   |
+
+- (1): `V`が[`forward_range`](forward_range.md)のとき
+- (2): `V`が[`forward_range`](forward_range.md)かつ[`common_range`](common_range.md)のとき
+
+## テンプレートパラメータ制約
+
+説明専用コンセプト`tiny-range`を次のように定義する。
+
+```cpp
+template&amp;lt;auto&amp;gt; struct require-constant;
+
+template&amp;lt;class R&amp;gt;
+concept tiny-range = sized_range&amp;lt;R&amp;gt; &amp;amp;&amp;amp;
+  requires { typename require-constant&amp;lt;remove_reference_t&amp;lt;R&amp;gt;::size()&amp;gt;; } &amp;amp;&amp;amp; (remove_reference_t&amp;lt;R&amp;gt;::size() &amp;lt;= 1);
+```
+* require-constant[italic]
+* tiny-range[italic]
+* remove_reference_t[link /reference/type_traits/remove_reference.md]
+
+これを用いて、
+
+- [`view`](view.md)`&amp;lt;V&amp;gt;` かつ [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
+- [`view`](view.md)`&amp;lt;Pattern&amp;gt;` かつ [`forward_range`](forward_range.md)`&amp;lt;Pattern&amp;gt;`
+- `V`のイテレータと`Pattern`のイテレータが等値比較可能である
+- [`forward_range`](forward_range.md)`&amp;lt;V&amp;gt;` または `tiny-range&amp;lt;Pattern&amp;gt;`
+
+## 効果
+
+- (2): 式`views::lazy_split(E, F)`の効果は`lazy_spliy_view{E, F}`と等しい。
+
+## メンバ関数
+
+| 名前                                             | 説明                             | 対応バージョン |
+|--------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](lazy_spliy_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
+| [`base`](lazy_spliy_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](lazy_spliy_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](lazy_spliy_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](lazy_spliy_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+  std::vector&amp;lt;int&amp;gt; pattern = {4, 5};
+
+  for (auto inner_range : v | views::lazy_split(views::all(pattern))) {
+    for (int n : inner_range) {
+      std::cout &amp;lt;&amp;lt; n;
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* views::lazy_split[color ff0000]
+
+### 出力
+```
+123
+6789
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [P2210R2 Superior String Splitting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2210r2.html)
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>split_view -- &lt;ranges&gt; split_view/lazy_split_view追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view.html"/>
      <id>660dd20cd78023ed4983a6d749b85d5086b0c6fa:reference/ranges/split_view.md</id>
      <updated>2021-10-17T18:25:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view.md b/reference/ranges/split_view.md
new file mode 100644
index 000000000..8ea694a76
--- /dev/null
+++ b/reference/ranges/split_view.md
@@ -0,0 +1,115 @@
+# split_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  namespace ranges {
+
+    template&amp;lt;forward_range V, forward_range Pattern&amp;gt;
+    requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; view&amp;lt;Pattern&amp;gt; &amp;amp;&amp;amp;
+             indirectly_comparable&amp;lt;iterator_t&amp;lt;V&amp;gt;, iterator_t&amp;lt;Pattern&amp;gt;, ranges::equal_to&amp;gt;
+    class split_view : public view_interface&amp;lt;split_view&amp;lt;V, Pattern&amp;gt;&amp;gt; { …… }; // (1)
+
+    namespace views {
+      inline constexpr /*unspecified*/ split = /*unspecified*/;                // (2)
+    }
+  }
+
+  namespace views = ranges::views;
+}
+```
+* forward_range[link forward_range.md]
+* view[link view.md]
+* iterator_t[link iterator_t.md]
+* indirectly_comparable[link /reference/iterator/indirectly_comparable.md]
+* ranges::equal_to[link /reference/functional/equal_to.md]
+
+
+## 概要
+
+- (1): [`forward_range`](forward_range.md)を要素、または要素の[`view`](view.md)からなるパターンをデリミタとして分割し、それぞれの部分Rangeを要素とする新たなRangeとして扱う[`view`](view.md)
+- (2): `split_view`を生成するRangeアダプタオブジェクト
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+|          |       |        | ○    | ○      |               |               |            | (1)    | ○       | ○   |
+
+- (1): `V`が[`common_range`](common_range.md)のとき
+
+## テンプレートパラメータ制約
+
+- `V`、`Pattern`が[`view`](view.md)かつ[`forward_range`](input_range.md)
+- `V`のイテレータと`Pattern`のイテレータが等値比較可能である
+
+## 効果
+
+- (2): 式`views::split(E, F)`の効果は`spliy_view{E, F}`と等しい。
+
+## メンバ関数
+
+| 名前                                             | 説明                             | 対応バージョン |
+|--------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](spliy_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
+| [`base`](spliy_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](spliy_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](spliy_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](spliy_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  using namespace std::literals;
+
+  for (auto sv : &amp;#34;hello, world&amp;#34;sv | views::split(&amp;#34;, &amp;#34;sv)) {
+    std::cout &amp;lt;&amp;lt; string_view{sv.begin(), sv.end()} &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* views::split[color ff0000]
+
+パターンとしてC文字列を使うとき、ヌル文字を特別扱いしないため注意。
+
+### 出力
+```
+hello
+world
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [P2210R2 Superior String Splitting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2210r2.html)
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt; join_view追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>43e5be71e4dcf3422814483d635b0a656579d55d:reference/ranges.md</id>
      <updated>2021-10-17T15:56:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 1fcff7ede..82fbaf647 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -220,10 +220,10 @@ range | adaptor(args...)
 
 ### join view
 
-| 名前                                      | 説明           | 対応バージョン |
-|-------------------------------------------|----------------|----------------|
-| [`join_view`](ranges/join_view.md.nolink) | ネストされたRangeを平坦にするビュー (class template)     | C++20          |
-| [`join`](ranges/join.md.nolink)           | ネストされたRangeを平坦にするビューを生成する (customization point object)  | C++20          |
+| 名前                               | 説明                                                                        | 対応バージョン |
+|------------------------------------|-----------------------------------------------------------------------------|----------------|
+| [`join_view`](ranges/join_view.md) | ネストされたRangeを平坦にするビュー (class template)                        | C++20          |
+| [`join`](ranges/join_view.md)      | ネストされたRangeを平坦にするビューを生成する (customization point object)  | C++20          |
 
 ### split view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join_view -- &lt;ranges&gt; join_view追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/join_view.html"/>
      <id>43e5be71e4dcf3422814483d635b0a656579d55d:reference/ranges/join_view.md</id>
      <updated>2021-10-17T15:56:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/join_view.md b/reference/ranges/join_view.md
new file mode 100644
index 000000000..28f6e0d27
--- /dev/null
+++ b/reference/ranges/join_view.md
@@ -0,0 +1,119 @@
+# join_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  namespace ranges {
+
+    template&amp;lt;input_range V&amp;gt;
+    requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; input_range&amp;lt;range_reference_t&amp;lt;V&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+             (is_reference_v&amp;lt;range_reference_t&amp;lt;V&amp;gt;&amp;gt; || view&amp;lt;range_value_t&amp;lt;V&amp;gt;&amp;gt;)
+    class join_view : public view_interface&amp;lt;join_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
+
+    namespace views {
+      inline constexpr /*unspecified*/ join = /*unspecified*/;      // (2)
+    }
+  }
+
+  namespace views = ranges::views;
+}
+```
+* input_range[link input_range.md]
+* view[link view.md]
+* range_reference_t[link range_reference_t.md]
+* is_reference_v[link /reference/type_traits/is_reference.md]
+* range_value_t[link range_value_t.md]
+
+## 概要
+
+- (1): 要素がRangeであるRangeの各要素を繋げて1つのRangeとして扱う[`view`](view.md)
+- (2): `join_view`を生成するRangeアダプタオブジェクト
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+|          |       |        | 〇    | (1)     | (2)           |               |            | (3)    | ○       | ○   |
+
+- (1): 外側・内側のRangeが[`forward_range`](forward_range.md)のとき
+- (2): 外側・内側のRangeが[`bidirectional_range`](bidirectional_range.md)のとき
+- (3): 外側・内側のRangeが[`forward_range`](forward_range.md)かつ[`common_range`](common_range.md)のとき
+
+## テンプレートパラメータ制約
+
+- [`view`](view.md)`&amp;lt;V&amp;gt;`
+- [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
+- [`input_range`](input_range.md)`&amp;lt;`[`range_reference_t`](range_reference_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+- [`is_reference_v`](/reference/type_traits/is_reference.md)`&amp;lt;`[`range_reference_t`](range_reference_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+- [`view`](view.md)`&amp;lt;`[`range_value_t`](range_value_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+
+## 効果
+
+- (2): 式`views::join(E)`の効果は`join_view{E}`と等しい。
+
+## メンバ関数
+
+| 名前                                             | 説明                             | 対応バージョン |
+|--------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](join_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
+| [`base`](join_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](join_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](join_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+
+`r`を元のRangeとする。`size`は[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](join_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  vector&amp;lt;string&amp;gt; sv = {&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;};
+
+  for (char c : sv | views::join) {
+    cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &amp;#39;,&amp;#39;;
+  }
+  cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* views::join[color ff0000]
+
+### 出力
+```
+h,e,l,l,o,w,o,r,l,d,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-05-24T14:38:40.092935</updated>
  <id>1bba29de-126a-4014-bb01-7964ba067ede</id>

  
    <entry>
      <title>コンストラクタ -- error_codeのコンストラクタ : ErrorCodeEnumをとるオーバーロードの使用例を記載</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_code/op_constructor.html"/>
      <id>0eeefc0f1db52a7f5bdf7f2860daebcbefb674a4:reference/system_error/error_code/op_constructor.md</id>
      <updated>2024-05-24T18:49:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_code/op_constructor.md b/reference/system_error/error_code/op_constructor.md
index 03071efb1..bc4fd6c50 100644
--- a/reference/system_error/error_code/op_constructor.md
+++ b/reference/system_error/error_code/op_constructor.md
@@ -31,10 +31,12 @@ error_code(ErrorCodeEnum e) noexcept;                    // (3)
 
 
 ## 備考
-- (3) : [`is_error_code_enum`](../is_error_code_enum.md)が`false`となる場合、この関数はオーバーロード解決から除外される。
+- (3) : [`is_error_code_enum`](../is_error_code_enum.md)が`false`となる場合、この関数はオーバーロード解決から除外される
+- (3) : [`make_error_code()`](../make_error_code.md)の呼び出しに`std::`名前空間がついていないことにより、指定された`ErrorCodeEnum`型が定義されている名前空間の`make_error_code()`関数がADLによって探索される
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;system_error&amp;gt;
@@ -107,7 +109,7 @@ int main()
 * std::errc::invalid_argument[link /reference/system_error/errc.md]
 * std::generic_category()[link /reference/system_error/generic_category.md]
 
-### 出力
+#### 出力
 ```
 default ctor
 success
@@ -125,6 +127,63 @@ error
 generic
 ```
 
+### 独自のエラーコードを定義する例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;system_error&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+namespace mylib {
+
+enum class my_error {
+  not_found,
+};
+
+class my_error_category : public std::error_category {
+public:
+  const char* name() const noexcept override
+  {
+    return &amp;#34;my_error_category&amp;#34;;
+  }
+
+  std::string message(int value) const override
+  {
+    if (value == static_cast&amp;lt;int&amp;gt;(my_error::not_found))
+      return &amp;#34;not found&amp;#34;;
+    return &amp;#34;unknown&amp;#34;;
+  }
+};
+
+const my_error_category&amp;amp; get_my_error_category() {
+  static my_error_category cat;
+  return cat;
+}
+
+std::error_code make_error_code(my_error err)
+{
+  return std::error_code(static_cast&amp;lt;int&amp;gt;(err), get_my_error_category());
+}
+}
+
+namespace std {
+  template &amp;lt;&amp;gt;
+  struct is_error_code_enum&amp;lt;mylib::my_error&amp;gt; : public std::true_type {};
+}
+
+int main() {
+  // ecにはmy_error_categoryが設定される
+  std::error_code ec = mylib::my_error::not_found;
+  std::cout &amp;lt;&amp;lt; ec.message() &amp;lt;&amp;lt; std::endl;
+}
+```
+* ec.message()[link message.md]
+* std::error_category[link /reference/system_error/error_category.md]
+
+#### 出力
+```
+not found
+```
+
 ## バージョン
 ### 言語
 - C++11
@@ -136,4 +195,3 @@ generic
 - [Visual C++](/implementation.md#visual_cpp): 2010 (enum class未対応のため、ErrorCodeEnumのコンストラクタは動作しない)
 
 
-## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoi -- Merge pull request #1283 from yuina-blend/fix/typo</title>
      <link href="https://cpprefjp.github.io/reference/string/stoi.html"/>
      <id>2424d150b07207ee322fb549e369bd483e318d11:reference/string/stoi.md</id>
      <updated>2024-05-24T10:17:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stoi.md b/reference/string/stoi.md
index bd4c3293e..de86bacbe 100644
--- a/reference/string/stoi.md
+++ b/reference/string/stoi.md
@@ -235,7 +235,7 @@ int stoi(const std::wstring&amp;amp; str, std::size_t* idx = nullptr, int base = 10) {
 ## 関連リンク
 ### C標準ライブラリに由来する関数
 - `atoi`: `stoi`は`atoi`を`std::string`および`std::wstring`に対応させたものと見なせる。
-- `strtol`, `wcstol`: `stoi`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wsrting`に対応させ、戻り値の型を`int`に変更したものと見なせる。
+- `strtol`, `wcstol`: `stoi`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wstring`に対応させ、戻り値の型を`int`に変更したものと見なせる。
 
 ### ファミリー
 - (`stoi`: この関数自身)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stol -- Merge pull request #1283 from yuina-blend/fix/typo</title>
      <link href="https://cpprefjp.github.io/reference/string/stol.html"/>
      <id>2424d150b07207ee322fb549e369bd483e318d11:reference/string/stol.md</id>
      <updated>2024-05-24T10:17:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stol.md b/reference/string/stol.md
index e6ee4ced9..204cb4990 100644
--- a/reference/string/stol.md
+++ b/reference/string/stol.md
@@ -233,7 +233,7 @@ long stol(const std::wstring&amp;amp; str, std::size_t* idx = nullptr, long base = 10) {
 ## 関連リンク
 ### C標準ライブラリに由来する関数
 - `atol`: `stol`は`atol`を`std::string`および`std::wstring`に対応させたものと見なせる。
-- `strtol`, `wcstol`: `stol`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wsrting`に対応させたものと見なせる。
+- `strtol`, `wcstol`: `stol`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wstring`に対応させたものと見なせる。
 
 ### ファミリー
 - [`stoi`](stoi.md): 戻り値の型が`int`となったもの。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stol -- [Fix] same typo</title>
      <link href="https://cpprefjp.github.io/reference/string/stol.html"/>
      <id>643030cb7553fe159b0d27b205a7161e1f291693:reference/string/stol.md</id>
      <updated>2024-05-24T09:00:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stol.md b/reference/string/stol.md
index e6ee4ced9..204cb4990 100644
--- a/reference/string/stol.md
+++ b/reference/string/stol.md
@@ -233,7 +233,7 @@ long stol(const std::wstring&amp;amp; str, std::size_t* idx = nullptr, long base = 10) {
 ## 関連リンク
 ### C標準ライブラリに由来する関数
 - `atol`: `stol`は`atol`を`std::string`および`std::wstring`に対応させたものと見なせる。
-- `strtol`, `wcstol`: `stol`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wsrting`に対応させたものと見なせる。
+- `strtol`, `wcstol`: `stol`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wstring`に対応させたものと見なせる。
 
 ### ファミリー
 - [`stoi`](stoi.md): 戻り値の型が`int`となったもの。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yuina-blend</name>
        <email>moon.h14.dd2.as@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoi -- [Fix] srtingとなっていたので修正</title>
      <link href="https://cpprefjp.github.io/reference/string/stoi.html"/>
      <id>8aa06cdecc223b81b37448811e897eef0c0c1847:reference/string/stoi.md</id>
      <updated>2024-05-24T08:58:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stoi.md b/reference/string/stoi.md
index bd4c3293e..de86bacbe 100644
--- a/reference/string/stoi.md
+++ b/reference/string/stoi.md
@@ -235,7 +235,7 @@ int stoi(const std::wstring&amp;amp; str, std::size_t* idx = nullptr, int base = 10) {
 ## 関連リンク
 ### C標準ライブラリに由来する関数
 - `atoi`: `stoi`は`atoi`を`std::string`および`std::wstring`に対応させたものと見なせる。
-- `strtol`, `wcstol`: `stoi`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wsrting`に対応させ、戻り値の型を`int`に変更したものと見なせる。
+- `strtol`, `wcstol`: `stoi`は`strtol`および`wcstol`をそれぞれ`std::string`と`std::wstring`に対応させ、戻り値の型を`int`に変更したものと見なせる。
 
 ### ファミリー
 - (`stoi`: この関数自身)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yuina-blend</name>
        <email>moon.h14.dd2.as@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-12-12T18:53:28.089385</updated>
  <id>6f60dcaf-bd14-49ca-ac1f-137db391dd41</id>

  
    <entry>
      <title>basic_string_view -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view.md b/reference/string_view/basic_string_view.md
index 479d71544..5e7bc85b2 100644
--- a/reference/string_view/basic_string_view.md
+++ b/reference/string_view/basic_string_view.md
@@ -142,6 +142,7 @@ string_view hello = sv.substr(0, 5); // 先頭5文字を抽出する
 |------|------|----------------|
 | [`operator==`](basic_string_view/op_equal.md)         | 等値比較                           | C++17 |
 | [`operator!=`](basic_string_view/op_not_equal.md)     | 非等値比較                         | C++17 |
+| [`operator&amp;lt;=&amp;gt;`](basic_string_view/op_compare_3way.md) | 三方比較                           | C++20 |
 | [`operator&amp;lt;`](basic_string_view/op_less.md)           | 左辺が右辺より小さいかの判定を行う | C++17 |
 | [`operator&amp;lt;=`](basic_string_view/op_less_equal.md)    | 左辺が右辺以下かの判定を行う       | C++17 |
 | [`operator&amp;gt;`](basic_string_view/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | C++17 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_compare_3way.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_compare_3way.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_compare_3way.md b/reference/string_view/basic_string_view/op_compare_3way.md
new file mode 100644
index 000000000..c9783d134
--- /dev/null
+++ b/reference/string_view/basic_string_view/op_compare_3way.md
@@ -0,0 +1,74 @@
+# operator&amp;lt;=&amp;gt;
+* string_view[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class charT, class traits&amp;gt;
+    constexpr see below
+  operator&amp;lt;=&amp;gt;(basic_string_view&amp;lt;charT, traits&amp;gt; x,
+              basic_string_view&amp;lt;charT, traits&amp;gt; y) noexcept; // (1) C++20
+}
+```
+
+## 概要
+`basic_string_view`オブジェクトの三方比較を行う。
+
+
+## 戻り値
+戻り値の型`R`は、`traits::comparison_category`が存在していればその型、そうでなければ[`weak_ordering`](/reference/compare/weak_ordering.md)となり、以下と等価：
+
+
+```cpp
+return static_cast&amp;lt;R&amp;gt;(lhs.compare(rhs) &amp;lt;=&amp;gt; 0);
+```
+* compare[link compare.md]
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  std::string_view a = &amp;#34;aaa&amp;#34;;
+  std::string_view b {&amp;#34;aaaBB&amp;#34;, 3}; // 先頭3文字を参照
+
+  if ((a &amp;lt;=&amp;gt; b) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+equal
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_equal.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_equal.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_equal.md b/reference/string_view/basic_string_view/op_equal.md
index 59e08d35a..2919eb6e9 100644
--- a/reference/string_view/basic_string_view/op_equal.md
+++ b/reference/string_view/basic_string_view/op_equal.md
@@ -8,7 +8,7 @@
 namespace std {
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator==(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -23,6 +23,11 @@ return x.compare(y) == 0;
 * compare[link compare.md]
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -42,7 +47,7 @@ int main()
 }
 ```
 
-### 出力例
+### 出力
 ```
 equal
 ```
@@ -56,3 +61,8 @@ equal
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_greater.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_greater.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_greater.md b/reference/string_view/basic_string_view/op_greater.md
index b152b79bf..b220585b5 100644
--- a/reference/string_view/basic_string_view/op_greater.md
+++ b/reference/string_view/basic_string_view/op_greater.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator&amp;gt;(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                           basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                           basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -56,3 +57,8 @@ greater
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_greater_equal.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_greater_equal.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_greater_equal.md b/reference/string_view/basic_string_view/op_greater_equal.md
index 4112f9ffb..6594a449e 100644
--- a/reference/string_view/basic_string_view/op_greater_equal.md
+++ b/reference/string_view/basic_string_view/op_greater_equal.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator&amp;gt;=(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -56,3 +57,8 @@ greater equal
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_less.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_less.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_less.md b/reference/string_view/basic_string_view/op_less.md
index 1de41a941..fa1f09b44 100644
--- a/reference/string_view/basic_string_view/op_less.md
+++ b/reference/string_view/basic_string_view/op_less.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator&amp;lt;(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                           basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                           basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -56,3 +57,8 @@ less
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_less_equal.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_less_equal.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_less_equal.md b/reference/string_view/basic_string_view/op_less_equal.md
index 0c63c3e78..a2aae9478 100644
--- a/reference/string_view/basic_string_view/op_less_equal.md
+++ b/reference/string_view/basic_string_view/op_less_equal.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator&amp;lt;=(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -56,3 +57,8 @@ less equal
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- basic_string_view : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_not_equal.html"/>
      <id>2e73c88c2c4e7a6733fcaca6cd75b3911f48baac:reference/string_view/basic_string_view/op_not_equal.md</id>
      <updated>2022-12-13T03:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_not_equal.md b/reference/string_view/basic_string_view/op_not_equal.md
index 78df8f543..68e46fe07 100644
--- a/reference/string_view/basic_string_view/op_not_equal.md
+++ b/reference/string_view/basic_string_view/op_not_equal.md
@@ -6,9 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits&amp;gt;
   constexpr bool operator!=(basic_string_view&amp;lt;CharT, Traits&amp;gt; x,
-                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept;
+                            basic_string_view&amp;lt;CharT, Traits&amp;gt; y) noexcept; // (1) C++17
 }
 ```
 
@@ -42,7 +43,7 @@ int main()
 }
 ```
 
-### 出力例
+### 出力
 ```
 not equal
 ```
@@ -56,3 +57,8 @@ not equal
 - [GCC](/implementation.md#gcc): 7.1
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_string -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string.md b/reference/string/basic_string.md
index f6b3e6b66..3480d5efd 100644
--- a/reference/string/basic_string.md
+++ b/reference/string/basic_string.md
@@ -186,6 +186,7 @@ namespace std {
 |------|------|----------------|
 | [`operator==`](basic_string/op_equal.md)         | 等値比較                           | |
 | [`operator!=`](basic_string/op_not_equal.md)     | 非等値比較                         | |
+| [`operator&amp;lt;=&amp;gt;`](basic_string/op_compare_3way.md) | 三方比較                           | C++20 |
 | [`operator&amp;lt;`](basic_string/op_less.md)           | 左辺が右辺より小さいかの判定を行う | |
 | [`operator&amp;lt;=`](basic_string/op_less_equal.md)    | 左辺が右辺以下かの判定を行う       | |
 | [`operator&amp;gt;`](basic_string/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_compare_3way.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_compare_3way.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_compare_3way.md b/reference/string/basic_string/op_compare_3way.md
new file mode 100644
index 000000000..de311f999
--- /dev/null
+++ b/reference/string/basic_string/op_compare_3way.md
@@ -0,0 +1,72 @@
+# operator&amp;lt;=&amp;gt;
+* string[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+    see below
+  operator&amp;lt;=&amp;gt;(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs) noexcept; // (1) C++20
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+    see below
+  operator&amp;lt;=&amp;gt;(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const charT* rhs);                                           // (2) C++20
+}
+```
+
+## 概要
+`basic_string`オブジェクトの三方比較を行う。
+
+デフォルトの比較では、大文字と小文字は区別される（`&amp;#39;a&amp;#39; == &amp;#39;A&amp;#39;`は`false`）。  
+なお、この比較方法は[`char_traits`](/reference/string/char_traits.md)によってカスタマイズでき、大文字・小文字を区別しない比較もできる。
+
+
+## 戻り値
+以下と等価：
+
+```cpp
+return basic_string_view&amp;lt;charT, traits&amp;gt;(lhs) &amp;lt;=&amp;gt; basic_string_view&amp;lt;charT, traits&amp;gt;(rhs);
+```
+* basic_string_view[link /reference/string_view/basic_string_view.md]
+
+戻り値の型は、`traits::comparison_category`が存在していればその型、そうでなければ[`weak_ordering`](/reference/compare/weak_ordering.md)となる。
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::string a = &amp;#34;abc&amp;#34;;
+  std::string b = &amp;#34;abc&amp;#34;;
+
+  if ((a &amp;lt;=&amp;gt; b) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+```
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_equal.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_equal.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_equal.md b/reference/string/basic_string/op_equal.md
index 6ec1f6a40..e9477fc48 100644
--- a/reference/string/basic_string/op_equal.md
+++ b/reference/string/basic_string/op_equal.md
@@ -20,21 +20,22 @@ namespace std {
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
-    operator==(const CharT* a,
-               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (2) C++03
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   constexpr bool
-    operator==(const CharT* a,
-               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (2) C++20
 
+  // (2)により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
-    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-               const CharT* b);                                  // (3) C++03
+    operator==(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (3) C++03
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   constexpr bool
-    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-               const CharT* b);                                  // (3) C++20
+    operator==(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (3) C++20
 }
 ```
 
@@ -45,14 +46,19 @@ namespace std {
 なお、この比較方法は[`char_traits`](/reference/string/char_traits.md)によってカスタマイズでき、大文字・小文字を区別しない比較もできる。
 
 
-## 要件
-- (3) パラメータ`b`が、[`Traits::length`](/reference/string/char_traits/length.md)`(b) + 1`の要素数を持つ`CharT`文字型の配列を指していること
+## 事前条件
+- (2) パラメータ`b`が、[`Traits::length`](/reference/string/char_traits/length.md)`(b) + 1`の要素数を持つ`CharT`文字型の配列を指していること
 
 
 ## 戻り値
 - (1) `a.`[`compare`](compare.md)`(b) == 0`
-- (2) `b == a`
 - (3) `a.`[`compare`](compare.md)`(b) == 0`
+- (2) `b == a`
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
 
 
 ## 例
@@ -82,3 +88,5 @@ equal
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_greater.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_greater.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_greater.md b/reference/string/basic_string/op_greater.md
index 9f0081048..5c045b87e 100644
--- a/reference/string/basic_string/op_greater.md
+++ b/reference/string/basic_string/op_greater.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
     operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
@@ -71,3 +72,5 @@ true
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_greater_equal.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_greater_equal.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_greater_equal.md b/reference/string/basic_string/op_greater_equal.md
index e3e1b3c20..c1dd0d0cf 100644
--- a/reference/string/basic_string/op_greater_equal.md
+++ b/reference/string/basic_string/op_greater_equal.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
     operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
@@ -71,3 +72,5 @@ true
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_less.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_less.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_less.md b/reference/string/basic_string/op_less.md
index ce83e281b..3ac179685 100644
--- a/reference/string/basic_string/op_less.md
+++ b/reference/string/basic_string/op_less.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
     operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
@@ -70,3 +71,5 @@ true
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_less_equal.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_less_equal.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_less_equal.md b/reference/string/basic_string/op_less_equal.md
index 4f080dff4..107357465 100644
--- a/reference/string/basic_string/op_less_equal.md
+++ b/reference/string/basic_string/op_less_equal.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
     operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
@@ -71,3 +72,5 @@ true
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- basic_string : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_not_equal.html"/>
      <id>5b0b9b47dd27c3106bcee7c2834c03752829a667:reference/string/basic_string/op_not_equal.md</id>
      <updated>2022-12-13T03:40:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_not_equal.md b/reference/string/basic_string/op_not_equal.md
index a5b55f9ca..957e81642 100644
--- a/reference/string/basic_string/op_not_equal.md
+++ b/reference/string/basic_string/op_not_equal.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   bool
     operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
@@ -80,3 +81,5 @@ not equal
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char_traits -- char_traits : comparison_categoryを追加 #900</title>
      <link href="https://cpprefjp.github.io/reference/string/char_traits.html"/>
      <id>9b7cb24371db077e2d9127c23bb63f753d53b3d1:reference/string/char_traits.md</id>
      <updated>2022-12-13T03:24:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/char_traits.md b/reference/string/char_traits.md
index e08f35e39..0771ee496 100644
--- a/reference/string/char_traits.md
+++ b/reference/string/char_traits.md
@@ -51,6 +51,7 @@ namespace std {
 | `off_type`   | 文字の差を表す型 | |
 | `pos_type`   | 位置を表す型 | |
 | `state_type` | ストリームのマルチバイト文字の変換の状態を表す型 | |
+| `comparison_category` | 比較カテゴリ | C++20 |
 
 
 ### charによる特殊化のメンバ型定義
@@ -62,6 +63,7 @@ namespace std {
 | `off_type`   | `streamoff` | |
 | `pos_type`   | `streampos` | |
 | `state_type` | `mbstate_t` | |
+| `comparison_category` | [`strong_ordering`](/reference/compare/strong_ordering.md) | C++20 |
 
 ### char8_tによる特殊化のメンバ型定義 (C++20)
 
@@ -72,6 +74,7 @@ namespace std {
 | `off_type`   | `streamoff`      | C++20          |
 | `pos_type`   | `u8streampos`   | C++20          |
 | `state_type` | `mbstate_t`      | C++20          |
+| `comparison_category` | [`strong_ordering`](/reference/compare/strong_ordering.md) | C++20 |
 
 ### char16_tによる特殊化のメンバ型定義 (C++11)
 
@@ -82,6 +85,7 @@ namespace std {
 | `off_type`   | `streamoff`      | C++11          |
 | `pos_type`   | `u16streampos`   | C++11          |
 | `state_type` | `mbstate_t`      | C++11          |
+| `comparison_category` | [`strong_ordering`](/reference/compare/strong_ordering.md) | C++20 |
 
 
 ### char32_tによる特殊化のメンバ型定義 (C++11)
@@ -93,6 +97,7 @@ namespace std {
 | `off_type`   | `streamoff`      | C++11          |
 | `pos_type`   | `u32streampos`   | C++11          |
 | `state_type` | `mbstate_t`      | C++11          |
+| `comparison_category` | [`strong_ordering`](/reference/compare/strong_ordering.md) | C++20 |
 
 
 ### wchar_tによる特殊化のメンバ型定義
@@ -104,6 +109,7 @@ namespace std {
 | `off_type`   | `streamoff`      | |
 | `pos_type`   | `wstreampos`     | |
 | `state_type` | `mbstate_t`      | |
+| `comparison_category` | [`strong_ordering`](/reference/compare/strong_ordering.md) | C++20 |
 
 
 ## 例
@@ -224,3 +230,7 @@ int main() {
 equal
 ```
 
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars_result -- from_chars_result, to_chars_result : 参照を追加</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars_result.html"/>
      <id>f7da52303237c9ae8814e84c092cc4eff4ba19e7:reference/charconv/from_chars_result.md</id>
      <updated>2022-12-13T03:24:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars_result.md b/reference/charconv/from_chars_result.md
index ae7aba874..ec3a237ef 100644
--- a/reference/charconv/from_chars_result.md
+++ b/reference/charconv/from_chars_result.md
@@ -50,3 +50,5 @@ namespace std {
 ## 参照
 - [P0067R5: Elementary string conversions, revision 5](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r5.html)
 - [P0682R1: Repairing elementary string conversions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0682r1.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_chars_result -- from_chars_result, to_chars_result : 参照を追加</title>
      <link href="https://cpprefjp.github.io/reference/charconv/to_chars_result.html"/>
      <id>f7da52303237c9ae8814e84c092cc4eff4ba19e7:reference/charconv/to_chars_result.md</id>
      <updated>2022-12-13T03:24:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/to_chars_result.md b/reference/charconv/to_chars_result.md
index 6b4d1744f..3db47772c 100644
--- a/reference/charconv/to_chars_result.md
+++ b/reference/charconv/to_chars_result.md
@@ -49,3 +49,5 @@ namespace std {
 ## 参照
 - [P0067R5: Elementary string conversions, revision 5](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r5.html)
 - [P0682R1: Repairing elementary string conversions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0682r1.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars_result -- from_chars_result, to_chars_result : operator==を追加 #900</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars_result.html"/>
      <id>a586d38f7d0df9fc74f27238187ae6e2a453f300:reference/charconv/from_chars_result.md</id>
      <updated>2022-12-13T03:21:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars_result.md b/reference/charconv/from_chars_result.md
index fc30c8d49..ae7aba874 100644
--- a/reference/charconv/from_chars_result.md
+++ b/reference/charconv/from_chars_result.md
@@ -24,6 +24,14 @@ namespace std {
 | ptr | （指定したフォーマットの）パターンにマッチしない最初の入力文字の位置を指すか、入力文字列の先頭を指すポインタ。 | C++17 |
 | ec | 成功なら`ec == errc{}`、失敗ならば`errc::invalid_argument`を表す[`errc`](/reference/system_error/errc.md)の値。 | C++17 |
 
+## メンバ関数
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `friend bool operator==(const from_chars_result&amp;amp;, const from_chars_result&amp;amp;) = default;` | 等値比較を行う | C++20 |
+| `friend bool operator!=(const from_chars_result&amp;amp;, const from_chars_result&amp;amp;);` | 非等値比較を行う (`==`により使用可能) | C++20 |
+
 詳細は[`from_chars`](../charconv/from_chars.md)の戻り値の項を参照のこと。
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_chars_result -- from_chars_result, to_chars_result : operator==を追加 #900</title>
      <link href="https://cpprefjp.github.io/reference/charconv/to_chars_result.html"/>
      <id>a586d38f7d0df9fc74f27238187ae6e2a453f300:reference/charconv/to_chars_result.md</id>
      <updated>2022-12-13T03:21:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/to_chars_result.md b/reference/charconv/to_chars_result.md
index 5f8e3f5e7..6b4d1744f 100644
--- a/reference/charconv/to_chars_result.md
+++ b/reference/charconv/to_chars_result.md
@@ -23,6 +23,14 @@ namespace std {
 | ptr | 成功した場合、書き込まれた最後の文字の次の位置を指すポインタ。 | C++17 |
 | ec | 成功なら`ec == errc{}`、失敗ならば`errc::value_too_large`を表す[`errc`](/reference/system_error/errc.md)の値。 | C++17 |
 
+## メンバ関数
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `friend bool operator==(const to_chars_result&amp;amp;, const to_chars_result&amp;amp;) = default;` | 等値比較を行う | C++20 |
+| `friend bool operator!=(const to_chars_result&amp;amp;, const to_chars_result&amp;amp;);` | 非等値比較を行う (`==`により使用可能) | C++20 |
+
 詳細は[`to_chars`](../charconv/to_chars.md)の戻り値の項を参照のこと。
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
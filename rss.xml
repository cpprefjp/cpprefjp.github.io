<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-08-23T16:59:49.886560</updated>
  <id>83339314-5081-405b-93cb-00cfa81b66a9</id>

  
    <entry>
      <title>C++11 -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp11.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:lang/cpp11.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++11&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++11とは、2011年8月に改訂され、ISO/IEC 14882:2011で標準規格化されたC++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;前バージョンであるC++03からメジャーバージョンアップされ、多くの有用な機能が追加された。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++0xと呼ばれていた。これは、2009年中までに策定を完了させることを目指して、下一桁を伏せ字にしたものである。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;一般的な機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/auto.html&#34;&gt;変数の型推論のための&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型推論&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の型を取得&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列やコンテナといった範囲を表すオブジェクトを、簡潔に走査する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;波カッコによる初期化をユーザー定義する。&lt;code&gt;vector&amp;lt;int&amp;gt; v = {1, 2, 3};&lt;/code&gt;など。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/uniform_initialization.html&#34;&gt;一様初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタの呼び出しを、波カッコで行う。&lt;code&gt;T x {a, b, c};&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照・ムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;右辺値によるオーバーロード、およびそれによるリソースの所有権移動&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクトをその場に書く&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/noexcept.html&#34;&gt;noexcept&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の例外指定、例外を投げる可能性のある式か&lt;code&gt;bool&lt;/code&gt;値を返す演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/nullptr.html&#34;&gt;nullptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタを表すポインタリテラル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/inline_namespaces.html&#34;&gt;インライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ネストした名前空間に、透過的にアクセスする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リテラルのサフィックスをユーザー定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;クラス関係の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/defaulted_and_deleted_functions.html&#34;&gt;関数の&lt;code&gt;default&lt;/code&gt;／&lt;code&gt;delete&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;自動定義される特殊関数の制御&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/delegating_constructors.html&#34;&gt;委譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタから他のコンストラクタに処理を委譲する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数の初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ変数を、宣言と同時に初期値指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのコンストラクタを継承する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/override_final.html&#34;&gt;&lt;code&gt;override&lt;/code&gt;と&lt;code&gt;final&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数のオーバーライド指定、および派生クラスでのオーバーライドの禁止を指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/explicit_conversion_operator.html&#34;&gt;明示的な型変換演算子のオーバーロード&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;明示的な型変換が行われる場合にのみ呼び出される演算子をオーバーロードできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/extend_friend_targets.html&#34;&gt;&lt;code&gt;friend&lt;/code&gt;宣言できる対象を拡張&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータや型の別名を&lt;code&gt;friend&lt;/code&gt;宣言する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/ref_qualifier_for_this.html&#34;&gt;メンバ関数の左辺値／右辺値修飾&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトが左辺値／右辺値の場合のみ呼び出し可能であることの指定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;クラス以外の型に関する機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/scoped_enum.html&#34;&gt;スコープを持つ列挙型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;強い型付けとスコープを持つ列挙型の導入と、それにともなって従来の列挙型を機能拡張&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/unrestricted_unions.html&#34;&gt;共用体でクラスオブジェクトをもつことを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体のメンバ変数として、クラスオブジェクトを持てるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート関係の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/right_angle_brackets.html&#34;&gt;テンプレートでの連続した右山カッコを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;basic_string&amp;lt;char&amp;gt;&amp;gt;&lt;/code&gt;のように、&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;をスペースを空けずに記述可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/extern_template.html&#34;&gt;extern template&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートのインスタンス化を抑止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートによって型の別名を定義する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の数のテンプレートパラメータを受け取れるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/local_and_unnamed_type_as_template_arguments.html&#34;&gt;ローカル型と無名型を、テンプレート引数として使用することを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ローカルおよび無名として定義したクラスや列挙型を、テンプレート引数として渡せるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/sfinae_expressions.html&#34;&gt;任意の式によるSFINAE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の式が有効かどうかで、その関数をオーバーロード解決に含めるかどうかを決定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/remove_export_templates.html&#34;&gt;テンプレートのエクスポート機能を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレート定義をエクスポートする機能を削除する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;並行関係の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/thread_local_storage.html&#34;&gt;スレッドローカルストレージ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;スレッドごとに異なる静的記憶域に保持される変数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/static_initialization_thread_safely.html&#34;&gt;ブロックスコープを持つ&lt;code&gt;static&lt;/code&gt;変数初期化のスレッドセーフ化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数ローカルで定義した&lt;code&gt;static&lt;/code&gt;変数の初期化を、スレッドセーフにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;その他様々なユーティリティ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/trailing_return_types.html&#34;&gt;戻り値の型を後置する関数宣言構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;戻り値の型を後ろに書けるようにすることで、パラメータオブジェクトを戻り値型の文脈で使用できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に条件式が真であることを表明する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルにRプレフィックスを付けることで、エスケープシーケンスを無視する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-16とUTF-32の文字型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/utf8_string_literals.html&#34;&gt;UTF-8文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;の文字列をUTF-8エンコーディングするプレフィックス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/attributes.html&#34;&gt;属性構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[attr]]&lt;/code&gt;構文による、クラス、関数、変数の属性指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/alignas.html&#34;&gt;alignas&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメントを指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cpp11/alignof.html&#34;&gt;alignof&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメントを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;p&gt;ここでは、コア言語作業グループへ問題報告され、その解決策として導入された言語仕様の変更を解説する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/predefined_macros.html&#34;&gt;更新された定義済みマクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準規格で定義されたマクロの更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/feature_test_macros.html&#34;&gt;機能テストマクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++11 の機能がサポートされているかどうかをテストするためのマクロ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/recursive_template_limit.html&#34;&gt;テンプレート再帰回数の制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;17回から1024回に制限緩和&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/dependent_name_specifier_outside_of_templates.html&#34;&gt;依存名に対する&lt;code&gt;typename&lt;/code&gt;と&lt;code&gt;template&lt;/code&gt;の制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレート外でも&lt;code&gt;typename&lt;/code&gt;と&lt;code&gt;template&lt;/code&gt;を付けられるようになった&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/global_scope_syntax_in_nested_name_specifier.html&#34;&gt;入れ子名の指定にグローバルスコープ&lt;code&gt;::&lt;/code&gt;を付加することを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;struct ::A {};&lt;/code&gt;のように入れ子名を指定する際にグローバルスコープから指定できるようになった&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/earlier_declarated_array_bounds.html&#34;&gt;宣言時に要素数を指定した配列オブジェクトの、定義時の要素数を規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static&lt;/code&gt;メンバや&lt;code&gt;extern&lt;/code&gt;として宣言した配列を定義した際、宣言時に指定した要素数として定義されることが規定された&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/reserved_namespaces_for_posix.html&#34;&gt;POSIX用の名前空間を予約&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将来の標準化のためにPOSIX用の名前空間を予約し、ユーザーがその名前空間で機能を定義することを禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/extending_sizeof_to_apply_to_non_static_data_members_without_an_object.html&#34;&gt;&lt;code&gt;sizeof&lt;/code&gt;演算子にクラスの非静的メンバを、オブジェクトを作らずに指定できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sizeof(T::data_member)&lt;/code&gt;のように指定して非静的メンバのサイズを取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/deprecation_of_the_register_keyword.html&#34;&gt;&lt;code&gt;register&lt;/code&gt;キーワードを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイラに使われなくなった最適化用の機能を非推奨化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/reference_collapsing.html&#34;&gt;参照への参照を折りたたむ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp;&lt;/code&gt;型に参照を足しても&lt;code&gt;T&amp;amp;&lt;/code&gt;となる&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;C99互換機能&lt;/h3&gt;
&lt;p&gt;C99は、1999年に改訂され、ISO/IEC 9899:1999で標準規格化されたC言語バージョンの通称である。&lt;/p&gt;
&lt;p&gt;C++11では、参照するC言語の規格がC89からC99に変更となり、C99の言語機能が一部、C++に導入された。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/variadic_macros.html&#34;&gt;可変引数マクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;マクロで任意の数の引数を受け取る&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/pragma_operator.html&#34;&gt;Pragma演算子&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;処理系定義の機能を使用する単項演算子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/c99_predefined_macros.html&#34;&gt;定義済みマクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C99互換で導入された定義済みマクロ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/string_literal_concatenation.html&#34;&gt;文字列リテラルとワイド文字列リテラルの結合&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列定数として結合する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/long_long_type.html&#34;&gt;&lt;code&gt;long long&lt;/code&gt;型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;64ビット以上の大きさを持つ整数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/func.html&#34;&gt;事前定義識別子&lt;code&gt;__func__&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在いる関数名が格納されている識別子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/trailing_comma_following_enumerator_list.html&#34;&gt;列挙子の末尾へのカンマ付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;末尾の列挙子の後ろにカンマを書くことが許可された&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;cpp11/result_of_integer_division_and_modulo.html&#34;&gt;整数に対する除算と剰余算の丸め結果を規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;これまで実装定義だった整数の除算と剰余算に対する丸め方法を、標準で規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;固定長配列クラス&lt;code&gt;&lt;a href=&#34;../reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;単方向リンクリストの実装である&lt;code&gt;&lt;a href=&#34;../reference/forward_list.html&#34;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ハッシュ表の連想コンテナである&lt;code&gt;&lt;a href=&#34;../reference/unordered_map/unordered_map.html&#34;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;../reference/unordered_set/unordered_set.html&#34;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt;クラス、およびその重複を許可するバージョンを追加&lt;/li&gt;
&lt;li&gt;コンテナ全般がムーブセマンティクスに対応&lt;ul&gt;
&lt;li&gt;クラステンプレートのパラメータ&lt;code&gt;T&lt;/code&gt;が、コピー構築可能な型だけでなく、ムーブ構築のみ可能な型も受け付けるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push_back()&lt;/code&gt;や&lt;code&gt;insert()&lt;/code&gt;等の要素追加のためのメンバ関数が、新たな要素のコピーだけでなく、一時オブジェクトも受け取れて、ムーブで挿入ができるようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要素追加のためのメンバ関数として、クラステンプレートのパラメータ&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数を受け取り、一時オブジェクトの生成コストを減らせるものが追加された。これらは、以下のように命名されたメンバ関数である：&lt;code&gt;emplace()&lt;/code&gt;、&lt;code&gt;emplace_back()&lt;/code&gt;、&lt;code&gt;emplace_front()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;コンテナのメモリアロケータが状態を持てるようになった&lt;/li&gt;
&lt;li&gt;初期化子リストでコンテナを初期化できるようになった&lt;/li&gt;
&lt;li&gt;初期化子リストをパラメータで受け取れるようにするためのクラス&lt;code&gt;&lt;a href=&#34;../reference/initializer_list/initializer_list.html&#34;&gt;std::initializer_list&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;型情報型を連想コンテナのキーとして使用するための&lt;code&gt;&lt;a href=&#34;../reference/typeindex/type_index.html&#34;&gt;std::type_index&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;イテレータを進める関数&lt;code&gt;&lt;a href=&#34;../reference/iterator/next.html&#34;&gt;std::next()&lt;/a&gt;&lt;/code&gt;、イテレータを逆に進める関数&lt;code&gt;&lt;a href=&#34;../reference/iterator/prev.html&#34;&gt;std::prev()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;要素をムーブするイテレータとして、&lt;code&gt;&lt;a href=&#34;../reference/iterator/move_iterator.html&#34;&gt;std::move_iterator&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;先頭イテレータと末尾イテレータを取得する非メンバ関数として、&lt;code&gt;&lt;a href=&#34;../reference/iterator/begin.html&#34;&gt;std::begin()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/iterator/end.html&#34;&gt;std::end()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;イテレータ範囲が特定の条件を満たしているか調べる、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/all_of.html&#34;&gt;std::all_of()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/any_of.html&#34;&gt;std::any_of()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/none_of.html&#34;&gt;std::none_of&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;条件を満たしていない最初の要素を検索する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/find_if_not.html&#34;&gt;std::find_if_not()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;指定された数の要素をコピーする&lt;code&gt;&lt;a href=&#34;../reference/algorithm/copy_n.html&#34;&gt;std::copy_n()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;条件を満たす要素のみをコピーする&lt;code&gt;&lt;a href=&#34;../reference/algorithm/copy_if.html&#34;&gt;std::copy_if()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;イテレータ範囲の要素をムーブする&lt;code&gt;&lt;a href=&#34;../reference/algorithm/move.html&#34;&gt;std::move()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/move_backward.html&#34;&gt;std::move_backward()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;新たな乱数ライブラリ&lt;code&gt;&lt;a href=&#34;../reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;に対応したイテレータ範囲のシャッフルアルゴリズム&lt;code&gt;&lt;a href=&#34;../reference/algorithm/shuffle.html&#34;&gt;std::shuffle()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;イテレータ範囲がソート済みか調べる&lt;code&gt;&lt;a href=&#34;../reference/algorithm/is_sorted.html&#34;&gt;std::is_sorted()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;2つの値の最小値を取得する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/min.html&#34;&gt;std::min()&lt;/a&gt;&lt;/code&gt;、最大値を取得する&lt;code&gt;&lt;a href=&#34;../reference/algorithm/max.html&#34;&gt;std::max()&lt;/a&gt;&lt;/code&gt;に、初期化子リストによる可変引数版を追加&lt;/li&gt;
&lt;li&gt;最小値と最大値を同時に取得する関数&lt;code&gt;&lt;a href=&#34;../reference/algorithm/minmax.html&#34;&gt;std::minmax()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/algorithm/minmax_element.html&#34;&gt;std::minmax_element()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;指定された値から始まる整数列を生成する&lt;code&gt;&lt;a href=&#34;../reference/numeric/iota.html&#34;&gt;std::iota()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;メモリアロケータの実装をより容易にするために、コンテナとメモリアロケータの中間インタフェースとして&lt;code&gt;&lt;a href=&#34;../reference/memory/allocator_traits.html&#34;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スマートポインタの実装として、所有権共有方式の&lt;code&gt;&lt;a href=&#34;../reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスと、所有権専有方式の&lt;code&gt;&lt;a href=&#34;../reference/memory/unique_ptr.html&#34;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;従来のスマートポインタ&lt;code&gt;auto_ptr&lt;/code&gt;クラスを、非推奨とする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator&amp;amp;()&lt;/code&gt;がオーバーロードされていたとしても正しく変数のアドレスを取得する関数、&lt;code&gt;&lt;a href=&#34;../reference/memory/addressof.html&#34;&gt;std::addressof()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;標準ライブラリ中の入力ストリーム演算子&lt;code&gt;operator&amp;lt;&amp;lt;()&lt;/code&gt;と出力ストリーム演算子&lt;code&gt;operator&amp;gt;&amp;gt;()&lt;/code&gt;がムーブセマンティクスに対応。ストリームの一時オブジェクトを受け取れるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UTF-16の文字列型&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::u16string&lt;/a&gt;&lt;/code&gt;、UTF-32の文字列型&lt;code&gt;&lt;a href=&#34;../reference/string/basic_string.html&#34;&gt;std::u32string&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;UTF-8とUTF-16、UTF-8とUTF-32といった、マルチバイト文字とワイド文字列の相互変換を行うクラス&lt;code&gt;&lt;a href=&#34;../reference/locale/wstring_convert.html&#34;&gt;std::wstring_convert&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;数値から文字列オブジェクトに変換する関数として、&lt;code&gt;&lt;a href=&#34;../reference/string/to_string.html&#34;&gt;std::to_string()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/string/to_wstring.html&#34;&gt;std::to_wstring()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;文字列オブジェクトから数値に変換する、&lt;code&gt;&lt;a href=&#34;../reference/string/stoi.html&#34;&gt;std::stoi()&lt;/a&gt;&lt;/code&gt;や&lt;code&gt;&lt;a href=&#34;../reference/string/stof.html&#34;&gt;std::stof()&lt;/a&gt;&lt;/code&gt;といった関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;関数ポインタと関数オブジェクトを統一的に扱えるクラス&lt;code&gt;&lt;a href=&#34;../reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;関数の引数を束縛して部分適用する関数&lt;code&gt;&lt;a href=&#34;../reference/functional/bind.html&#34;&gt;std::bind()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;メンバ関数ポインタを関数オブジェクトにアダプトする関数&lt;code&gt;&lt;a href=&#34;../reference/functional/mem_fn.html&#34;&gt;std::mem_fn()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;テンプレートに、明示的に左辺値参照を渡すためのクラス&lt;code&gt;&lt;a href=&#34;../reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt;と、そのヘルパ関数である&lt;code&gt;&lt;a href=&#34;../reference/functional/ref.html&#34;&gt;std::ref()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;../reference/functional/cref.html&#34;&gt;std::cref()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ハッシュ表コンテナの追加にともない、オブジェクトのハッシュ値を計算する関数オブジェクト&lt;code&gt;&lt;a href=&#34;../reference/functional/hash.html&#34;&gt;std::hash&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;ビット演算の関数オブジェクトとして、&lt;code&gt;&lt;a href=&#34;../reference/functional/bit_and.html&#34;&gt;std::bit_and&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/functional/bit_or.html&#34;&gt;std::bit_or&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/functional/bit_xor.html&#34;&gt;std::bit_xor&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;従来の関数オブジェクトアダプタ&lt;code&gt;std::unary_function&lt;/code&gt;、&lt;code&gt;std::binary_function&lt;/code&gt;、&lt;code&gt;std::mem_fun()&lt;/code&gt;、&lt;code&gt;std::mem_fun_ref()&lt;/code&gt;等を非推奨とする&lt;/li&gt;
&lt;li&gt;従来の関数バインダ&lt;code&gt;std::bind1st&lt;/code&gt;、&lt;code&gt;std::bind2nd&lt;/code&gt;等を非推奨とする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;スレッドを管理するクラス&lt;code&gt;&lt;a href=&#34;../reference/thread/thread.html&#34;&gt;std::thread&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スレッド間での排他制御を行うミューテックスの実装である&lt;code&gt;&lt;a href=&#34;../reference/mutex/mutex.html&#34;&gt;std::mutex&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;../reference/mutex/recursive_mutex.html&#34;&gt;std::recursive_mutex&lt;/a&gt;&lt;/code&gt;クラス等を追加&lt;ul&gt;
&lt;li&gt;ミューテックスの所有権放棄を自動的に行うためのクラス&lt;code&gt;&lt;a href=&#34;../reference/mutex/lock_guard.html&#34;&gt;std::lock_guard&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;../reference/mutex/unique_lock.html&#34;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スレッドセーフに一度だけ処理を呼び出す関数、&lt;code&gt;&lt;a href=&#34;../reference/mutex/call_once.html&#34;&gt;std::call_once()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;条件変数の実装である&lt;code&gt;&lt;a href=&#34;../reference/condition_variable/condition_variable.html&#34;&gt;std::condition_variable&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;../reference/condition_variable/condition_variable_any.html&#34;&gt;std::condition_variable_any&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;Futureデザインパターンをサポートする&lt;code&gt;&lt;a href=&#34;../reference/future/future.html&#34;&gt;std::future&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;../reference/future/promise.html&#34;&gt;std::promise&lt;/a&gt;&lt;/code&gt;クラス、およびその補助機能を追加&lt;/li&gt;
&lt;li&gt;アトミック操作のライブラリ&lt;code&gt;&lt;a href=&#34;../reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;汎用的なユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::swap()&lt;/code&gt;関数を、&lt;code&gt;&lt;a href=&#34;../reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;から&lt;code&gt;&lt;a href=&#34;../reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に移動&lt;/li&gt;
&lt;li&gt;ムーブセマンティクスのために、左辺値を右辺値に変換する関数&lt;code&gt;&lt;a href=&#34;../reference/utility/move.html&#34;&gt;std::move()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;引数転送のための関数&lt;code&gt;&lt;a href=&#34;../reference/utility/forward.html&#34;&gt;std::forward()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;クラスの&lt;a href=&#34;../reference/utility/pair/op_constructor.html&#34;&gt;コンストラクタ&lt;/a&gt;が、それぞれの要素型のコンストラクタ引数を直接受け取れるようになった&lt;/li&gt;
&lt;li&gt;タプルの実装である&lt;code&gt;&lt;a href=&#34;../reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;SFINAEのために、型の値を取得する関数&lt;code&gt;&lt;a href=&#34;../reference/utility/declval.html&#34;&gt;std::declval()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;時間ユーティリティライブラリ&lt;code&gt;&lt;a href=&#34;../reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;型特性ライブラリ&lt;code&gt;&lt;a href=&#34;../reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;エラー報告&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OSのエラー値を扱うライブラリ&lt;code&gt;&lt;a href=&#34;../reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;正規表現ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正規表現ライブラリ&lt;code&gt;&lt;a href=&#34;../reference/regex.html&#34;&gt;&amp;lt;regex&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ECMAScript、POSIX、AWK、grepなどの構文を切り替えて使用できるのが特徴。デフォルトではECMAScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;乱数ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;乱数ライブラリ&lt;code&gt;&lt;a href=&#34;../reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;複数定義されている乱数生成器と分布アルゴリズムを、組み合わせて使用するのが特徴&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C互換ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ビット幅規定の整数型ライブラリである&lt;code&gt;&lt;a href=&#34;../reference/cstdint.html&#34;&gt;&amp;lt;cstdint&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/wiki/faq/cpp11&#34; target=&#34;_blank&#34;&gt;C++11 Overview - Standard C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept [N3050] -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/noexcept.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:lang/cpp11/noexcept.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/noexcept.md b/lang/cpp11/noexcept.md
index 461dedd5c..815ed6c7c 100644
--- a/lang/cpp11/noexcept.md
+++ b/lang/cpp11/noexcept.md
@@ -83,7 +83,7 @@ struct X {
   int f() const noexcept; // noexcept例外仕様
 
   // 外側はnoexcept例外仕様、内側はnoexcept演算子。
-  // メンバ関数関数f()が例外を送出しない場合、関数g()もまた例外を送出しない
+  // メンバ関数f()が例外を送出しない場合、関数g()もまた例外を送出しない
   int g() const noexcept(noexcept(f()))
   { return f(); }
 };
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/charconv/from_chars.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars.md b/reference/charconv/from_chars.md
index 407346b19..dbdf19242 100644
--- a/reference/charconv/from_chars.md
+++ b/reference/charconv/from_chars.md
@@ -287,7 +287,7 @@ int main()
     const char str[] = &amp;#34;00000123456789 is decimal&amp;#34;;
 
     //(1) 10進数文字列からintへ変換
-    //変換変換の成否判定に`operator bool`を使用
+    //変換の成否判定に`operator bool`を使用
     if (int value{}; std::from_chars(std::begin(str), std::end(str), value)) {
       std::cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl;
     }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FP_NAN -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/fp_nan.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/cmath/fp_nan.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/fp_nan.md b/reference/cmath/fp_nan.md
index d681b3a44..ca001cc1d 100644
--- a/reference/cmath/fp_nan.md
+++ b/reference/cmath/fp_nan.md
@@ -9,7 +9,7 @@
 * integer-constant-expression[italic]
 
 ## 概要
-浮動小数点数が `NaN` であることを表すを表す整数定数式。
+浮動小数点数が `NaN` であることを表す整数定数式。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>llrint -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/llrint.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/cmath/llrint.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/llrint.md b/reference/cmath/llrint.md
index f9ce5d8ae..fa84b6320 100644
--- a/reference/cmath/llrint.md
+++ b/reference/cmath/llrint.md
@@ -42,7 +42,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - 丸めの結果が `long long` で表現不可能な場合、無効演算の浮動小数点例外（[`FE_INVALID`](../cfenv/fe_invalid.md)）が発生する。
     - 他の例外が発生しておらず、引数 `x` が戻り値と異なってる場合、不正確結果の浮動小数点例外（[`FE_INEXACT`](../cfenv/fe_inexact.md)）が発生する。
-- C99 では、丸めモードや浮動小数点例外へのアクセスには `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
+- C99 では、丸めモードや浮動小数点例外へのアクセスには `#pragma STDC FENV_ACCESS ON` でなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は四捨五入ではなく、最近接偶数への丸めであることに注意。（例を参照）  
     四捨五入が必要であれば、[`llround`](llround.md) を使用すること。（ただし、[`llround`](llround.md) は本関数と異なり、ISO IEC 60559 に準拠していても [`FE_INEXACT`](../cfenv/fe_inexact.md) が発生するか否かは処理系定義である）  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lrint -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/lrint.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/cmath/lrint.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/lrint.md b/reference/cmath/lrint.md
index 275b9f3ae..62e4d6c0a 100644
--- a/reference/cmath/lrint.md
+++ b/reference/cmath/lrint.md
@@ -41,7 +41,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - 丸めの結果が `long` で表現不可能な場合、無効演算の浮動小数点例外（[`FE_INVALID`](../cfenv/fe_invalid.md)）が発生する。
     - 他の例外が発生しておらず、引数 `x` が戻り値と異なってる場合、不正確結果の浮動小数点例外（[`FE_INEXACT`](../cfenv/fe_inexact.md)）が発生する。
-- C99 では、丸めモードや浮動小数点例外へのアクセスには `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
+- C99 では、丸めモードや浮動小数点例外へのアクセスには `#pragma STDC FENV_ACCESS ON` でなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。  
     四捨五入が必要であれば、[`lround`](lround.md) を使用すること。（ただし、[`lround`](lround.md) は本関数と異なり、ISO IEC 60559 に準拠していても [`FE_INEXACT`](../cfenv/fe_inexact.md) が発生するか否かは処理系定義である）  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nearbyint -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/nearbyint.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/cmath/nearbyint.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/nearbyint.md b/reference/cmath/nearbyint.md
index b12acb459..41a75a6e8 100644
--- a/reference/cmath/nearbyint.md
+++ b/reference/cmath/nearbyint.md
@@ -43,7 +43,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = ±0` の場合、`±0` を返す。
     - `x = ±∞` の場合、`±∞` を返す。
-- C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
+- C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。
 - C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rint -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/rint.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/cmath/rint.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/rint.md b/reference/cmath/rint.md
index 00fd095b2..74270d4fc 100644
--- a/reference/cmath/rint.md
+++ b/reference/cmath/rint.md
@@ -44,7 +44,7 @@ namespace std {
     - `x = ±0` の場合、`±0` を返す。
     - `x = ±∞` の場合、`±∞` を返す。
     - 引数 `x` が戻り値と異なってる場合、[`FE_INEXACT`](../cfenv/fe_inexact.md) が発生する。
-- C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
+- C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
     なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。
 - C++23では、(1), (2), (3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fpos_t -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/cstdio/fpos_t.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/cstdio/fpos_t.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdio/fpos_t.md b/reference/cstdio/fpos_t.md
index cee012fd6..9c1a6e356 100644
--- a/reference/cstdio/fpos_t.md
+++ b/reference/cstdio/fpos_t.md
@@ -13,7 +13,7 @@ namespace std {
 ## 概要
 ファイルの位置を保持するための型。
 
-[`fgetpos()`](/reference/cstdio/fgetpos.md.nolink)関数や[`fsetpos()`](/reference/cstdio/fsetpos.md.nolink)関数で用いられる。これらの関数は[`fseek()`](/reference/cstdio/fseek.md.nolink)関数や[`ftell()`](/reference/cstdio/ftell.md.nolink)関数と違い、巨大なファイルやマルチバイトファイルに対しても適切に動作するすることを目的に設計された。
+[`fgetpos()`](/reference/cstdio/fgetpos.md.nolink)関数や[`fsetpos()`](/reference/cstdio/fsetpos.md.nolink)関数で用いられる。これらの関数は[`fseek()`](/reference/cstdio/fseek.md.nolink)関数や[`ftell()`](/reference/cstdio/ftell.md.nolink)関数と違い、巨大なファイルやマルチバイトファイルに対しても適切に動作することを目的に設計された。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_absolute -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/path/is_absolute.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/filesystem/path/is_absolute.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/path/is_absolute.md b/reference/filesystem/path/is_absolute.md
index d84d415e3..d3393e830 100644
--- a/reference/filesystem/path/is_absolute.md
+++ b/reference/filesystem/path/is_absolute.md
@@ -12,7 +12,7 @@ bool is_absolute() const;
 ## 概要
 パスが絶対パスかを判定する。
 
-絶対パスとは、追加の開始位置を必要とせずに、曖昧さなく特定の場所の場所を参照できるパスのことである。その定義はOSに依存する。
+絶対パスとは、追加の開始位置を必要とせずに、曖昧さなく特定の場所を参照できるパスのことである。その定義はOSに依存する。
 
 ## 戻り値
 パスが絶対パスであれば`true`、そうでなければ`false`を返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>map -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/map.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/map.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;map&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;map&lt;/code&gt;と&lt;code&gt;multimap&lt;/code&gt;はユニークな要素を格納する連想コンテナの一種であり、キーとそれに対応する値を格納する。 
&lt;code&gt;map&lt;/code&gt;はキーの重複を許さず、&lt;code&gt;multimap&lt;/code&gt;はキーの重複を許す。
連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。 
内部的には、&lt;code&gt;map&lt;/code&gt; 内の要素は、コンテナの構築時に設定された&lt;a href=&#34;algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;基準に従って小さいものから大きいものへとソートされる。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt;と&lt;code&gt;multimap&lt;/code&gt;は一般的に、二分木として実装される。従って、連想コンテナである &lt;code&gt;map&lt;/code&gt;や&lt;code&gt;multimap&lt;/code&gt; の主な特性は以下の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ユニークな要素のキー：互いに等しい二つのキーを持つ要素が &lt;code&gt;map&lt;/code&gt; に格納されることは無い。複数の等しいキーを許す同様の連想コンテナは &lt;code&gt;multimap&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;要素の値はキーと値のpair型である。&lt;/li&gt;
&lt;li&gt;要素は常に&lt;a href=&#34;algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;に従う。&lt;/li&gt;
&lt;li&gt;挿入操作はイテレータや要素の参照に影響を与えない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコンテナクラスは、双方向イテレータをサポートする。&lt;/p&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;map/map.html&#34;&gt;map&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許さない連想コンテナ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;map/multimap.html&#34;&gt;multimap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許す連想コンテナ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html&#34; target=&#34;_blank&#34;&gt;N2930 Range-Based For Loop Wording (Without Concepts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html&#34; target=&#34;_blank&#34;&gt;P2051R0 C++ Standard Library Issues to be moved in Prague&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>map -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/map/map.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/map/map.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map.md b/reference/map/map.md
index d72cc475e..bb61e0f66 100644
--- a/reference/map/map.md
+++ b/reference/map/map.md
@@ -27,7 +27,7 @@ namespace std {
 ## 概要
 `map` はユニークな要素を格納する連想コンテナの一種であり、キーとそれに対応する値を格納する。
 
-連想コンテナは特にそれらキーによる要素アクセスが効率的になるようよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
+連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
 
 内部的には、`map` 内の要素は、コンテナの構築時に設定された[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)基準に従って小さいものから大きいものへとソートされる。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multimap -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/map/multimap.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap.md b/reference/map/multimap.md
index 0db7e9886..060cba179 100644
--- a/reference/map/multimap.md
+++ b/reference/map/multimap.md
@@ -29,7 +29,7 @@ namespace std {
 ## 概要
 `multimap` は同一キーの要素を複数格納できる連想コンテナの一種であり、キーとそれに対応する値を格納する。
 
-連想コンテナは特にそれらキーによる要素アクセスが効率的になるようよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
+連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
 
 内部的には、`multimap` 内の要素は、コンテナの構築時に設定された[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)基準に従って小さいものから大きいものへとソートされる。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/set.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/set.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;set&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;set&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;ヘッダは、集合を表す連想コンテナ、&lt;code&gt;set&lt;/code&gt;と&lt;code&gt;multiset&lt;/code&gt;を定義する。&lt;br /&gt;
&lt;code&gt;set&lt;/code&gt;はキーの重複を許可しないが、&lt;code&gt;multiset&lt;/code&gt;はキーの重複を許可する。  &lt;/p&gt;
&lt;p&gt;連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。 
内部的には、&lt;code&gt;set&lt;/code&gt; 内の要素は、コンテナの構築時に設定された&lt;a href=&#34;algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;基準に従って小さいものから大きいものへとソートされる。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;と&lt;code&gt;multiset&lt;/code&gt;は一般的に、二分木として実装される。従って、連想コンテナである &lt;code&gt;set&lt;/code&gt;や&lt;code&gt;multiset&lt;/code&gt; の主な特性は以下の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ユニークな要素のキー：互いに等しい二つのキーを持つ要素が &lt;code&gt;set&lt;/code&gt; に格納されることは無い。複数の等しいキーを許す同様の連想コンテナは &lt;code&gt;multiset&lt;/code&gt; である。&lt;/li&gt;
&lt;li&gt;要素の値はキーと値の&lt;code&gt;pair&lt;/code&gt;型である。&lt;/li&gt;
&lt;li&gt;要素は常に&lt;a href=&#34;algorithm.html#strict-weak-ordering&#34;&gt;狭義の弱順序&lt;/a&gt;に従う。&lt;/li&gt;
&lt;li&gt;挿入操作はイテレータや要素の参照に影響を与えない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコンテナクラスは、双方向イテレータをサポートする。&lt;/p&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;set/set.html&#34;&gt;set&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許可しない集合(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;set/multiset.html&#34;&gt;multiset&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーの重複を許可する集合(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html&#34; target=&#34;_blank&#34;&gt;N2930 Range-Based For Loop Wording (Without Concepts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html&#34; target=&#34;_blank&#34;&gt;P2051R0 C++ Standard Library Issues to be moved in Prague&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_signed -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/make_signed.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/type_traits/make_signed.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/make_signed.md b/reference/type_traits/make_signed.md
index 6b270bfa7..add5caf5f 100644
--- a/reference/type_traits/make_signed.md
+++ b/reference/type_traits/make_signed.md
@@ -75,7 +75,7 @@ int main() {}
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [GCC](/implementation.md#gcc): 4.4.7 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): 2010 [mark verified], 2012 [mark verified], 2013 [mark verified], 2015 [mark verified]
-	- 2010は、cv修飾修飾されている型において、コンパイルエラーになるバグがある。
+	- 2010は、cv修飾されている型において、コンパイルエラーになるバグがある。
 	- `make_signed_t`は2013から
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_unsigned -- 繰り返しタイプのtypoの修正</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/make_unsigned.html"/>
      <id>b0477cffc619e9fb7dc93c5821c4a70973054bc4:reference/type_traits/make_unsigned.md</id>
      <updated>2025-08-24T01:55:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/make_unsigned.md b/reference/type_traits/make_unsigned.md
index 64e715dcf..7ebfccc7d 100644
--- a/reference/type_traits/make_unsigned.md
+++ b/reference/type_traits/make_unsigned.md
@@ -75,7 +75,7 @@ int main() {}
 - [Clang](/implementation.md#clang): 3.0 [mark verified]
 - [GCC](/implementation.md#gcc): 4.4.7 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): 2010 [mark verified], 2012 [mark verified], 2013 [mark verified], 2015 [mark verified]
-	- 2010は、cv修飾修飾されている型において、コンパイルエラーになるバグがある。
+	- 2010は、cv修飾されている型において、コンパイルエラーになるバグがある。
 	- `make_unsigned_t`は2013から
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_class -- typo修正</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_class.html"/>
      <id>5426d39757547d882af261263c69f36514a122a6:reference/type_traits/is_class.md</id>
      <updated>2025-08-24T01:37:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_class.md b/reference/type_traits/is_class.md
index 90e661cf4..8080ad188 100644
--- a/reference/type_traits/is_class.md
+++ b/reference/type_traits/is_class.md
@@ -75,7 +75,7 @@ int main(){}
 - [Visual C++](/implementation.md#visual_cpp): 2008 (std::tr1) [mark verified], 2010 [mark verified], 2012 [mark verified], 2013 [mark verified], 2015 [mark verified]
 
 #### 備考
-上の例でコンパイラによってはエラーになる。GCC 4.3.4, 4.5.3, Visual C++ 2010 は [`integral_constant`](integral_constant.md) が `operator bool()` を持っていないためエラーになる。また、GCC 4.3.4, Visual C++ 2010 は `enum class` に対応していたいためにエラーになる。
+上の例でコンパイラによってはエラーになる。GCC 4.3.4, 4.5.3, Visual C++ 2010 は [`integral_constant`](integral_constant.md) が `operator bool()` を持っていないためエラーになる。また、GCC 4.3.4, Visual C++ 2010 は `enum class` に対応していないためエラーになる。
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hash -- リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/hash.html"/>
      <id>7b6b8791be8368d84bbbf9020d64df43e1772cd4:reference/functional/hash.md</id>
      <updated>2025-08-24T01:37:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/hash.md b/reference/functional/hash.md
index 7129a58c8..041e785e1 100644
--- a/reference/functional/hash.md
+++ b/reference/functional/hash.md
@@ -194,11 +194,11 @@ found : 3
 | [`&amp;lt;filesystem&amp;gt;`](/reference/filesystem.md) | [`std::filesystem::path`](/reference/filesystem/path.md) |
 | [`&amp;lt;optional&amp;gt;`](/reference/optional.md) | [`std::optional`](/reference/optional/optional.md) |
 | [`&amp;lt;memory&amp;gt;`](/reference/memory.md) | [`std::shared_ptr`](/reference/memory/shared_ptr.md), [`std::unique_ptr`](/reference/memory/unique_ptr.md) |
-| [`&amp;lt;stacktrace&amp;gt;`](/reference/stacktrace.md) | [`std::basic_backtrace`](/reference/stacktrace/basic_stacktrace.md), [`std::stacktrace_entry`](/reference/stacktrace/stacktrace_entry.md) |
+| [`&amp;lt;stacktrace&amp;gt;`](/reference/stacktrace.md) | [`std::basic_stacktrace`](/reference/stacktrace/basic_stacktrace.md), [`std::stacktrace_entry`](/reference/stacktrace/stacktrace_entry.md) |
 | [`&amp;lt;string&amp;gt;`](/reference/string.md) | `std::string`など |
 | [`&amp;lt;string_view&amp;gt;`](/reference/string_view.md) | `std::string_view`など |
 | [`&amp;lt;system_error&amp;gt;`](/reference/system_error.md) | [`std::error_code`](/reference/system_error/error_code.md), [`std::error_condition`](/reference/system_error/error_condition.md) |
-| [`&amp;lt;thread&amp;gt;`](/reference/thread.md) | [`std::thread:id`](/reference/thread/thread.md) |
+| [`&amp;lt;thread&amp;gt;`](/reference/thread.md) | [`std::thread::id`](/reference/thread/thread/id.md) |
 | [`&amp;lt;typeindex&amp;gt;`](/reference/typeindex.md) | [`std::type_index`](/reference/typeindex/type_index.md) |
 | [`&amp;lt;variant&amp;gt;`](/reference/variant.md) | [`std::variant`](/reference/variant/variant.md), [`std::monostate`](/reference/variant/monostate.md) |
 | [`&amp;lt;vector&amp;gt;`](/reference/vector.md) | [`std::vector&amp;lt;bool&amp;gt;`](/reference/vector/vector.md) |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_constructor.html"/>
      <id>7b6b8791be8368d84bbbf9020d64df43e1772cd4:reference/mdspan/extents/op_constructor.md</id>
      <updated>2025-08-24T01:37:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_constructor.md b/reference/mdspan/extents/op_constructor.md
index a0af10732..4569a97bf 100644
--- a/reference/mdspan/extents/op_constructor.md
+++ b/reference/mdspan/extents/op_constructor.md
@@ -41,11 +41,11 @@ constexpr explicit(N != rank_dynamic())
     - `((OtherExtents == dynamic_extent || Extents == dynamic_extent || OtherExtents == Extents) &amp;amp;&amp;amp; ...)`が`true`であること
 - (3) : `N`を`sizeof...(OtherIndexTypes)`、`exts_arr`を[`array`](/reference/array/array.md)`&amp;lt;index_type, N&amp;gt;{static_cast&amp;lt;index_type&amp;gt;(std::move(exts))...}`としたとき
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherIndexTypes, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
     - `N ==` [`rank_dynamic()`](rank_dynamic.md) `|| N ==` [`rank()`](rank.md)が`true`であること
 - (4), (5) :
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const OtherIndexTypes&amp;amp;, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
     - `N ==` [`rank_dynamic()`](rank_dynamic.md) `|| N ==` [`rank()`](rank.md)が`true`であること
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>7b6b8791be8368d84bbbf9020d64df43e1772cd4:reference/mdspan/mdspan.md</id>
      <updated>2025-08-24T01:37:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
index 410c68a77..3a0328a7e 100644
--- a/reference/mdspan/mdspan.md
+++ b/reference/mdspan/mdspan.md
@@ -115,7 +115,7 @@ namespace std {
 | `accessor_type` | [アクセサポリシー型`AccessorPolicy`](AccessorPolicy.md) | C++23 |
 | `mapping_type` | [レイアウトマッピング型`LayoutPolicy::mapping&amp;lt;Extents&amp;gt;`](LayoutMapping.md) | C++23 |
 | `element_type` | 要素型`ElementType` | C++23 |
-| `value_type`   | 要素の値型[`remove_cv_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;ElementType&amp;gt;` | C++23 |
+| `value_type`   | 要素の値型[`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;ElementType&amp;gt;` | C++23 |
 | `size_type` | [`Extents::size_type`](extents.md) | C++23 |
 | `rank_type` | [`Extents::rank_type`](extents.md) | C++23 |
 | `pointer`   | [`AccessorPolicy::pointer`](AccessorPolicy.md) | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/op_at.html"/>
      <id>7b6b8791be8368d84bbbf9020d64df43e1772cd4:reference/mdspan/mdspan/op_at.md</id>
      <updated>2025-08-24T01:37:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/op_at.md b/reference/mdspan/mdspan/op_at.md
index 3da007b87..a09f9ff6d 100644
--- a/reference/mdspan/mdspan/op_at.md
+++ b/reference/mdspan/mdspan/op_at.md
@@ -26,11 +26,11 @@ constexpr reference operator[](const array&amp;lt;OtherIndexType, rank()&amp;gt;&amp;amp; indices) con
 ## テンプレートパラメータ制約
 - (1) :
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherIndexTypes, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
     - `sizeof...(OtherIndexTypes) ==` [`rank()`](rank.md)が`true`であること
 - (2), (3) :
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const OtherIndexTypes&amp;amp;, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/op_constructor.html"/>
      <id>7b6b8791be8368d84bbbf9020d64df43e1772cd4:reference/mdspan/mdspan/op_constructor.md</id>
      <updated>2025-08-24T01:37:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/op_constructor.md b/reference/mdspan/mdspan/op_constructor.md
index ef7005bab..2a1c92661 100644
--- a/reference/mdspan/mdspan/op_constructor.md
+++ b/reference/mdspan/mdspan/op_constructor.md
@@ -67,13 +67,13 @@ template&amp;lt;class OtherElementType, class OtherExtents,
     - [`is_default_constructible_v`](/reference/type_traits/is_default_constructible.md)`&amp;lt;accessor_type&amp;gt;`が`true`
 - (4) : `N`を`sizeof...(OtherIndexTypes)`としたとき
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherIndexTypes, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
     - `N ==` [`rank()`](rank.md) `|| N ==` [`rank_dynamic()`](rank_dynamic.md)が`true`
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;mapping_type, extents_type&amp;gt;`が`true`
     - [`is_default_constructible_v`](/reference/type_traits/is_default_constructible.md)`&amp;lt;accessor_type&amp;gt;`が`true`
 - (5), (6) :
     - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const OtherIndexTypes&amp;amp;, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
-    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`true`
     - `N ==` [`rank()`](rank.md) `|| N ==` [`rank_dynamic()`](rank_dynamic.md)が`true`
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;mapping_type, extents_type&amp;gt;`が`true`
     - [`is_default_constructible_v`](/reference/type_traits/is_default_constructible.md)`&amp;lt;accessor_type&amp;gt;`が`true`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_common_reference -- リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/basic_common_reference.html"/>
      <id>7b6b8791be8368d84bbbf9020d64df43e1772cd4:reference/tuple/tuple/basic_common_reference.md</id>
      <updated>2025-08-24T01:37:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/basic_common_reference.md b/reference/tuple/tuple/basic_common_reference.md
index 8d0fd167b..705fa4e1c 100644
--- a/reference/tuple/tuple/basic_common_reference.md
+++ b/reference/tuple/tuple/basic_common_reference.md
@@ -15,7 +15,7 @@ template&amp;lt;tuple-like TTuple, tuple-like UTuple,
 * tuple-like[link ../tuple-like.md]
 
 ## 概要
-[`tuple`](../tuple.md)と[`tuple-like`](../tuple-like.md)なオブジェクについて、[`common_reference`](/reference/type_traits/common_reference.md)で共通の参照型を取得できるようにアダプトする[`basic_common_reference`](/reference/type_traits/common_reference.md)の特殊化である。
+[`tuple`](../tuple.md)と[`tuple-like`](../tuple-like.md)なオブジェクについて、[`common_reference`](/reference/type_traits/common_reference.md)で共通の参照型を取得できるようにアダプトする[`basic_common_reference`](/reference/type_traits/basic_common_reference.md)の特殊化である。
 
 ユーザーが直接この特殊化を利用する必要はない。[`common_reference`](/reference/type_traits/common_reference.md)を使用すること。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_common_reference -- リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/basic_common_reference.html"/>
      <id>7b6b8791be8368d84bbbf9020d64df43e1772cd4:reference/utility/pair/basic_common_reference.md</id>
      <updated>2025-08-24T01:37:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/basic_common_reference.md b/reference/utility/pair/basic_common_reference.md
index 068a924d8..f0d74a23c 100644
--- a/reference/utility/pair/basic_common_reference.md
+++ b/reference/utility/pair/basic_common_reference.md
@@ -17,7 +17,7 @@ namespace std {
 * basic_common_reference[link /reference/type_traits/basic_common_reference.md]
 
 ## 概要
-[`pair`](../pair.md)について、[`common_reference`](/reference/type_traits/common_reference.md)で共通の参照型を取得できるようにアダプトする[`basic_common_reference`](/reference/type_traits/common_reference.md)の特殊化である。
+[`pair`](../pair.md)について、[`common_reference`](/reference/type_traits/common_reference.md)で共通の参照型を取得できるようにアダプトする[`basic_common_reference`](/reference/type_traits/basic_common_reference.md)の特殊化である。
 
 ユーザーが直接この特殊化を利用する必要はない。[`common_reference`](/reference/type_traits/common_reference.md)を使用すること。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_constructor.html"/>
      <id>7b6b8791be8368d84bbbf9020d64df43e1772cd4:reference/utility/pair/op_constructor.md</id>
      <updated>2025-08-24T01:37:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_constructor.md b/reference/utility/pair/op_constructor.md
index 37ee8980b..418405e3a 100644
--- a/reference/utility/pair/op_constructor.md
+++ b/reference/utility/pair/op_constructor.md
@@ -80,7 +80,7 @@ constexpr pair(piecewise_construct_t,
 - (7) : 変換可能な他の[`pair`](../pair.md)オブジェクトから構築
 - (8) : 変換可能な他の[`pair`](../pair.md)オブジェクトからムーブ構築
 - (9) : 変換可能な他の[`pair`](../pair.md)オブジェクトから構築
-- (10) : [`pair-like`](/reference/tuple/tuple-like.md)なオブジェクトから構築
+- (10) : [`pair-like`](/reference/tuple/pair-like.md)なオブジェクトから構築
 - (11) : `first`と`second`のコンストラクタ引数を`std::tuple`に詰めて受け取り、`first_args`と`second_args`内のそれぞれの要素を転送して`first`と`second`を直接構築
     - 転送は、`std::tuple`オブジェクト（`first_args`/`second_args`）内の要素`x`とその型`U`（`Args1...`/`Args2...`に含まれる型）によって、`std::forward&amp;lt;U&amp;gt;(x)`のようにしてコンストラクタに渡される
 
@@ -301,7 +301,7 @@ p8 : (X(1 2 3),Y(4 5))
 - [P1951R1 Default Arguments for `pair`&amp;#39;s Forwarding Constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1951r1.html)
     - C++23での`{}`完全転送への対応
 - [P2165R4 Compatibility between `tuple`, `pair` and *tuple-like* objects](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2165r4.pdf)
-    - [`pair-like`](/reference/tuple/tuple-like.md)なオブジェクトからの構築
+    - [`pair-like`](/reference/tuple/pair-like.md)なオブジェクトからの構築
 - [P2255R2 A type trait to detect reference binding to temporary](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2255r2.html)
     - 参照型を要素に持つ場合にダングリング参照が容易に作成できていたのを不適格にする
 - [P2321R2 `zip`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2321r2.html#pair)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind_back -- typo修正とNGワード追加</title>
      <link href="https://cpprefjp.github.io/reference/functional/bind_back.html"/>
      <id>3bb11d9b75a5adcf8e7a344f341993fe3b48184e:reference/functional/bind_back.md</id>
      <updated>2025-08-24T00:26:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/bind_back.md b/reference/functional/bind_back.md
index 938e33f7b..7cf693553 100644
--- a/reference/functional/bind_back.md
+++ b/reference/functional/bind_back.md
@@ -37,7 +37,7 @@ namespace std {
 - (2) : `F`を`f`の型として
     - `(`[`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;BoundArgs, Args&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
     - `(`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;BoundArgs&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - もし[`is_poinetr_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_poinetr_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
+    - もし[`is_pointer_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_pointer_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind_front -- typo修正とNGワード追加</title>
      <link href="https://cpprefjp.github.io/reference/functional/bind_front.html"/>
      <id>3bb11d9b75a5adcf8e7a344f341993fe3b48184e:reference/functional/bind_front.md</id>
      <updated>2025-08-24T00:26:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/bind_front.md b/reference/functional/bind_front.md
index f2158da71..0bfb6a2dc 100644
--- a/reference/functional/bind_front.md
+++ b/reference/functional/bind_front.md
@@ -67,7 +67,7 @@ auto f3 = bind_front(&amp;amp;Strategy::process, Strategy{});
 - (2) : `F`を`f`の型として
     - `(`[`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;BoundArgs, Args&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
     - `(`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;BoundArgs&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
-    - もし[`is_poinetr_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_poinetr_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
+    - もし[`is_pointer_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_pointer_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- typo修正とNGワード追加</title>
      <link href="https://cpprefjp.github.io/reference/functional/move_only_function/op_constructor.html"/>
      <id>3bb11d9b75a5adcf8e7a344f341993fe3b48184e:reference/functional/move_only_function/op_constructor.md</id>
      <updated>2025-08-24T00:26:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/move_only_function/op_constructor.md b/reference/functional/move_only_function/op_constructor.md
index 78d76f740..3ef14e738 100644
--- a/reference/functional/move_only_function/op_constructor.md
+++ b/reference/functional/move_only_function/op_constructor.md
@@ -56,10 +56,10 @@ explicit move_only_function(in_place_type_t&amp;lt;T&amp;gt;, initializer_list&amp;lt;U&amp;gt;, Args&amp;amp;&amp;amp;...);
 ## 事前条件
 - (4) : `VT`型を`decay_t&amp;lt;F&amp;gt;`としたとき
     - `VT`がCpp17Destructible要件を満たすこと。
-    - [`is_move_construtible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;VT&amp;gt;`が`true`の場合、`VT`がCpp17MoveConstructible要件を満たすこと。
+    - [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;VT&amp;gt;`が`true`の場合、`VT`がCpp17MoveConstructible要件を満たすこと。
 - (5), (6) : `VT`型を`decay_t&amp;lt;T&amp;gt;`としたとき
     - `VT`がCpp17Destructible要件を満たすこと。
-    - [`is_move_construtible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;VT&amp;gt;`が`true`の場合、`VT`がCpp17MoveConstructible要件を満たすこと。
+    - [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;VT&amp;gt;`が`true`の場合、`VT`がCpp17MoveConstructible要件を満たすこと。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>not_fn -- typo修正とNGワード追加</title>
      <link href="https://cpprefjp.github.io/reference/functional/not_fn.html"/>
      <id>3bb11d9b75a5adcf8e7a344f341993fe3b48184e:reference/functional/not_fn.md</id>
      <updated>2025-08-24T00:26:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/not_fn.md b/reference/functional/not_fn.md
index e2a1684b2..391149c77 100644
--- a/reference/functional/not_fn.md
+++ b/reference/functional/not_fn.md
@@ -29,7 +29,7 @@ namespace std {
 - (1) : [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;F&amp;gt;`を適用した型を`FD`として、
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;FD, F&amp;gt;`が`true`、かつ
     - [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;FD&amp;gt;`が`true`であること
-- (2) : `F`を`f`の型として、もし[`is_poinetr_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_poinetr_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
+- (2) : `F`を`f`の型として、もし[`is_pointer_v`](/reference/type_traits/is_pointer.md)`&amp;lt;F&amp;gt; ||` [`is_member_pointer_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;F&amp;gt;`が`true`ならば、`f != nullptr`であること
 
 
 ## 効果(C++17)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>async -- typo修正とNGワード追加</title>
      <link href="https://cpprefjp.github.io/reference/future/async.html"/>
      <id>3bb11d9b75a5adcf8e7a344f341993fe3b48184e:reference/future/async.md</id>
      <updated>2025-08-24T00:26:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/async.md b/reference/future/async.md
index ab7eb2f97..e14f233a2 100644
--- a/reference/future/async.md
+++ b/reference/future/async.md
@@ -59,7 +59,7 @@ namespace std {
 返された`future`オブジェクトの`get()`もしくは`wait()`を呼び出すことにより、非同期実行の完了を待機する。
 
 ## 要件
-- 関数オブジェクト`F`および`Args...`の各型が、[`is_move_construcitble`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt;::value == true`であること。
+- 関数オブジェクト`F`および`Args...`の各型が、[`is_move_constructible`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt;::value == true`であること。
 - [`INVOKE`](/reference/concepts/Invoke.md)`(DECAY_COPY(std::`[`forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)), DECAY_COPY(std::`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args))...)`が可能であること。
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- typo修正とNGワード追加</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_constructor.html"/>
      <id>bb595bcd173b64958f07e9f137726314ed94d989:reference/utility/pair/op_constructor.md</id>
      <updated>2025-08-24T00:23:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_constructor.md b/reference/utility/pair/op_constructor.md
index 3b558b7fa..37ee8980b 100644
--- a/reference/utility/pair/op_constructor.md
+++ b/reference/utility/pair/op_constructor.md
@@ -110,7 +110,7 @@ constexpr pair(piecewise_construct_t,
 
 - (5) : [`reference_constructs_from_temporary_v`](/reference/type_traits/reference_constructs_from_temporary.md)`&amp;lt;first_type, U1&amp;amp;&amp;amp;&amp;gt; ||` [`reference_constructs_from_temporary_v`](/reference/type_traits/reference_constructs_from_temporary.md)`&amp;lt;second_type, U2&amp;amp;&amp;amp;&amp;gt;`である場合、このコンストラクタは削除定義される
 - (6)-(10) :
-    - `FWD(u)`を`static_cast&amp;lt;deccltype(u)&amp;gt;(u)`と定義して
+    - `FWD(u)`を`static_cast&amp;lt;decltype(u)&amp;gt;(u)`と定義して
     - [`reference_constructs_from_temporary_v`](/reference/type_traits/reference_constructs_from_temporary.md)`&amp;lt;first_type, decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;0&amp;gt;(FWD(p)))&amp;gt; ||` [`reference_constructs_from_temporary_v`](/reference/type_traits/reference_constructs_from_temporary.md)`&amp;lt;second_type, decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;1&amp;gt;(FWD(p)))&amp;gt;`である場合、このコンストラクタは削除定義される
 - (11) : 要素型（`T1, T2`のどちらかもしくは両方）が参照型であり、初期化によって一時オブジェクトを束縛することになる場合、このコンストラクタは削除定義される
     - 上記のコンストラクタと同様に、[`reference_constructs_from_temporary`](/reference/type_traits/reference_constructs_from_temporary.md)を使用して判定される
@@ -124,7 +124,7 @@ constexpr pair(piecewise_construct_t,
 - (5) :
     - C++17 : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U1, first_type&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U2, second_type&amp;gt;`である場合、`explicit`指定される
 - (6)-(10) :
-    - `FWD(u)`を`static_cast&amp;lt;deccltype(u)&amp;gt;(u)`と定義して
+    - `FWD(u)`を`static_cast&amp;lt;decltype(u)&amp;gt;(u)`と定義して
     - C++23 : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;0&amp;gt;(FWD(p))), first_type&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;1&amp;gt;(FWD(p))), second_type&amp;gt;`である場合、`explicit`指定される
 - (7) :
     - C++17 : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const U1&amp;amp;, first_type&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const U2&amp;amp;, second_type&amp;gt;`である場合、`explicit`指定される
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-12-16T03:36:37.365921</updated>
  <id>246785d5-e460-4a09-ac1e-31a6f4f5301a</id>

  
    <entry>
      <title>counted_iterator -- counted_iterator : 非メンバ-追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>96e028905e6bff13204885857562950c8a58ec86:reference/iterator/counted_iterator.md</id>
      <updated>2020-12-16T12:31:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index 3a3678404..1bdf1235c 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -63,7 +63,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
-| [`operator-`](counted_iterator/op_minus.md.nolink)          | 2つの`counted_iterator`の差を求める | C++20 |
+| [`operator-`](counted_iterator/op_minus.md)          | 2つの`counted_iterator`の差を求める | C++20 |
 | [`operator+`](counted_iterator/op_plus.md)           | イテレータを進める | C++20 |
 | [`operator==`](counted_iterator/op_equal.md.nolink)         | 等値比較 | C++20 |
 | `operator!=`     | 非等値比較 (`==`により使用可能) | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- (非メンバ関数) -- counted_iterator : 非メンバ-追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_minus.html"/>
      <id>96e028905e6bff13204885857562950c8a58ec86:reference/iterator/counted_iterator/op_minus.md</id>
      <updated>2020-12-16T12:31:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_minus.md b/reference/iterator/counted_iterator/op_minus.md
new file mode 100644
index 000000000..33394a7bf
--- /dev/null
+++ b/reference/iterator/counted_iterator/op_minus.md
@@ -0,0 +1,89 @@
+# operator- (非メンバ関数)
+* iterator[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template&amp;lt;common_with&amp;lt;I&amp;gt; I2&amp;gt;
+friend constexpr iter_difference_t&amp;lt;I2&amp;gt; operator-(
+  const counted_iterator&amp;amp; x, const counted_iterator&amp;lt;I2&amp;gt;&amp;amp; y);  // (1)
+
+friend constexpr iter_difference_t&amp;lt;I&amp;gt; operator-(
+  const counted_iterator&amp;amp; x, default_sentinel_t);             // (2)
+
+friend constexpr iter_difference_t&amp;lt;I&amp;gt; operator-(
+  default_sentinel_t, const counted_iterator&amp;amp; y);             // (3)
+```
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* default_sentinel_t[link /reference/iterator/default_sentinel_t.md]
+
+## 概要
+
+イテレータ間あるいは番兵との間の距離を求める。
+
+## 事前条件
+
+- (1) : `x, y`はともに同じシーケンス（範囲）についてのイテレータであること。
+
+## 効果
+
+現在のイテレータとカウントの値をそれぞれ、`current`、`length`メンバ変数に保持するとする。
+
+- (1) : `return y.length - x.length;`
+- (2) : `return -x.length;`
+- (3) : `return y.length;`
+
+## 戻り値
+
+左辺のイテレータ（番兵）と右辺のイテレータ（番兵）間の距離。
+
+## 備考
+
+これらの関数は全て[*Hidden friends*](/article/lib/hidden_friends.md)として定義される。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::counted_iterator ci{std::ranges::begin(vec), 5};
+  auto ci2 = ci + 3;
+
+  // (1) イテレータ間距離
+  std::cout &amp;lt;&amp;lt; (ci2 - ci) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (ci - ci2) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // (2) 終端からの距離
+  std::cout &amp;lt;&amp;lt; (ci - std::default_sentinel) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // (3) 終端までの距離
+  std::cout &amp;lt;&amp;lt; (std::default_sentinel - ci) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+
+### 出力
+```
+3
+-3
+-5
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted_iterator -- counted_iterator : 複合代入演算子追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>e429a19ad588660457c4d44d5a48e6c2e5b47e7a:reference/iterator/counted_iterator.md</id>
      <updated>2020-12-16T12:01:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index 1c905b30d..3a3678404 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -54,9 +54,9 @@ namespace std {
 | [`operator++`](counted_iterator/op_increment.md)      | イテレータをインクリメントする | C++20 |
 | [`operator--`](counted_iterator/op_decrement.md)      | イテレータをインクリメントする | C++20 |
 | [`operator+`](counted_iterator/op_plus.md)      | イテレータを進める | C++20 |
-| [`operator+=`](counted_iterator/op_plus_assign.md.nolink)    | イテレータ自身を進める | C++20 |
+| [`operator+=`](counted_iterator/op_plus_assign.md)    | イテレータ自身を進める | C++20 |
 | [`operator-`](counted_iterator/op_unary_minus.md)     | イテレータを逆に進める | C++20 |
-| [`operator-=`](counted_iterator/op_minus_assign.md.nolink)   | イテレータ自身を逆に進める | C++20 |
+| [`operator-=`](counted_iterator/op_minus_assign.md)   | イテレータ自身を逆に進める | C++20 |
 | [`operator[]`](counted_iterator/op_at.md)             | 任意の位置にランダムアクセスする | C++20 |
 
 ## 非メンバ（*Hidden friends*）関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-= -- counted_iterator : 複合代入演算子追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_minus_assign.html"/>
      <id>e429a19ad588660457c4d44d5a48e6c2e5b47e7a:reference/iterator/counted_iterator/op_minus_assign.md</id>
      <updated>2020-12-16T12:01:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_minus_assign.md b/reference/iterator/counted_iterator/op_minus_assign.md
new file mode 100644
index 000000000..6858aa93d
--- /dev/null
+++ b/reference/iterator/counted_iterator/op_minus_assign.md
@@ -0,0 +1,72 @@
+# operator-=
+* iterator[meta header]
+* std[meta namespace]
+* counted_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr counted_iterator&amp;amp; operator-=(iter_difference_t&amp;lt;I&amp;gt; n) requires random_access_iterator&amp;lt;I&amp;gt;;
+```
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+
+
+## 概要
+
+イテレータ自身を`n`回逆に進める。
+
+## 事前条件
+
+現在のカウントの値を`length`メンバ変数に保持するとして、`n &amp;lt;= length`
+
+## 効果
+
+現在のイテレータとカウントの値をそれぞれ、`current`、`length`メンバ変数に保持するとして、以下と等価
+
+```cpp
+current -= n;
+length += n;
+return *this;
+```
+
+## 戻り値
+
+`*this`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::counted_iterator ci{std::ranges::begin(vec), 5};
+  ci += 5;
+
+  ci -= 2;
+
+  std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+
+### 出力
+```
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- counted_iterator : 複合代入演算子追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_plus_assign.html"/>
      <id>e429a19ad588660457c4d44d5a48e6c2e5b47e7a:reference/iterator/counted_iterator/op_plus_assign.md</id>
      <updated>2020-12-16T12:01:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_plus_assign.md b/reference/iterator/counted_iterator/op_plus_assign.md
new file mode 100644
index 000000000..65f916d4f
--- /dev/null
+++ b/reference/iterator/counted_iterator/op_plus_assign.md
@@ -0,0 +1,71 @@
+# operator+=
+* iterator[meta header]
+* std[meta namespace]
+* counted_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr counted_iterator&amp;amp; operator+=(iter_difference_t&amp;lt;I&amp;gt; n) requires random_access_iterator&amp;lt;I&amp;gt;;
+```
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+
+
+## 概要
+
+イテレータ自身を`n`回進める。
+
+## 事前条件
+
+現在のカウントの値を`length`メンバ変数に保持するとして、`n &amp;lt;= length`
+
+## 効果
+
+現在のイテレータとカウントの値をそれぞれ、`current`、`length`メンバ変数に保持するとして、以下と等価
+
+```cpp
+current += n;
+length -= n;
+return *this;
+```
+
+## 戻り値
+
+`*this`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::counted_iterator ci{std::ranges::begin(vec), 5};
+
+  ci += 3;
+
+  std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+
+### 出力
+```
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- condition_variable_any: wait_* 戻り値の説明誤り修正</title>
      <link href="https://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait.html"/>
      <id>b51e57217b1205a7a54060e19e0fccd6ea88e500:reference/condition_variable/condition_variable_any/wait.md</id>
      <updated>2020-12-15T18:31:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/condition_variable/condition_variable_any/wait.md b/reference/condition_variable/condition_variable_any/wait.md
index 9c39f2f76..2abc1bc1a 100644
--- a/reference/condition_variable/condition_variable_any/wait.md
+++ b/reference/condition_variable/condition_variable_any/wait.md
@@ -66,7 +66,7 @@ return pred();
 
 ## 戻り値
 - (1),(2) : なし
-- (3) : 停止要求が行われた場合は`true`が返る。そうでない場合は`pred()`の結果が返る。
+- (3) : 停止要求の有無によらず、`pred()`の結果が返る。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait_until -- condition_variable_any: wait_* 戻り値の説明誤り修正</title>
      <link href="https://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait_until.html"/>
      <id>b51e57217b1205a7a54060e19e0fccd6ea88e500:reference/condition_variable/condition_variable_any/wait_until.md</id>
      <updated>2020-12-15T18:31:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/condition_variable/condition_variable_any/wait_until.md b/reference/condition_variable/condition_variable_any/wait_until.md
index 9cef6cd43..c8f577edf 100644
--- a/reference/condition_variable/condition_variable_any/wait_until.md
+++ b/reference/condition_variable/condition_variable_any/wait_until.md
@@ -77,7 +77,7 @@ return pred();
 ## 戻り値
 - (1) : `abs_time`で指定された絶対時間内に起床されない場合、タイムアウトとなり[`cv_status::timeout`](/reference/condition_variable/cv_status.md)が返る。そうでない場合は[`cv_status::no_timeout`](/reference/condition_variable/cv_status.md)が返る。
 - (2) : `pred()`の結果が返る。
-- (3) : 停止要求が行われた場合は`true`が返る。そうでない場合は`pred()`の結果が返る。
+- (3) : 停止要求の有無によらず、`pred()`の結果が返る。
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>input_iterator -- input_iterator : ITER_CONCEPTの効果修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/input_iterator.html"/>
      <id>28ee2f89fd3b428ae29d13c8de4880a6ec3ee932:reference/iterator/input_iterator.md</id>
      <updated>2020-12-13T16:06:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/input_iterator.md b/reference/iterator/input_iterator.md
index afadea4d5..61a456fd1 100644
--- a/reference/iterator/input_iterator.md
+++ b/reference/iterator/input_iterator.md
@@ -27,11 +27,11 @@ namespace std {
 
 ## &amp;lt;a href=&amp;#34;#iter_concept&amp;#34; id=&amp;#34;iter_concept &amp;#34;&amp;gt;`ITER_CONCEPT`&amp;lt;/a&amp;gt;
 
-型`I`について、`std::iterator_traits&amp;lt;I&amp;gt;`がプライマリテンプレートの特殊化となる場合、`ITER_TRAITS(I)`を`I`とする。それ以外の場合、`ITER_TRAITS(I)`を`std::iterator_traits&amp;lt;I&amp;gt;`とする。
+型`I`について、`std::iterator_traits&amp;lt;I&amp;gt;`がプライマリテンプレートの特殊化となる場合、`ITER_TRAITS(I)`を`I`とする。それ以外の場合（`std::iterator_traits&amp;lt;I&amp;gt;`の特殊化が存在する場合）、`ITER_TRAITS(I)`を`std::iterator_traits&amp;lt;I&amp;gt;`とする。
 
 1. `ITER_TRAITS(I)::itertor_concept`が有効で型名を示す場合、`ITER_CONCEPT(I)`は`ITER_TRAITS(I)::itertor_concept`
 2. `ITER_TRAITS(I)::itertor_category`が有効で型名を示す場合、`ITER_CONCEPT(I)`は`ITER_TRAITS(I)::itertor_category`
-3. `std::iterator_traits&amp;lt;I&amp;gt;`がプライマリテンプレートの特殊化となる場合、`ITER_CONCEPT(I)`は`ITER_TRAITS(I)::random_access_iterator_tag`
+3. `std::iterator_traits&amp;lt;I&amp;gt;`がプライマリテンプレートの特殊化となる場合、`ITER_CONCEPT(I)`は`random_access_iterator_tag`
 4. 上記いずれにも当てはまらない場合、`ITER_CONCEPT(I)`は型名を示さない
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator_traits -- 表示調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iterator_traits.html"/>
      <id>9c3f1ea053dcf0643a53c1ae3fa45d65d149eacf:reference/iterator/iterator_traits.md</id>
      <updated>2020-12-13T03:42:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iterator_traits.md b/reference/iterator/iterator_traits.md
index 376746460..8f572bd64 100644
--- a/reference/iterator/iterator_traits.md
+++ b/reference/iterator/iterator_traits.md
@@ -93,6 +93,7 @@ namespace std {
   ```
 
     - この時、`I::pointer`も定義されているならば、`pointer`はそれを用いて定義される。
+
 - いずれかのメンバ型が定義されておらず、`I`が`cpp17-input-iterator`コンセプトを満たす場合、それぞれのメンバ型は次のように定義される
   ```cpp
   using difference_type   = typename incrementable_traits&amp;lt;I&amp;gt;::difference_type;
@@ -246,4 +247,4 @@ int main()
 ## 参照
 - [LWG 2952. `iterator_traits` should work for pointers to cv `T`](https://wg21.cmeerw.net/lwg/issue2952)
     - C++17から、`const T*`の部分特殊化が、`T*`の部分特殊化に統合され、`volatile`付きのポインタもこのクラスで扱えるようになった
-- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
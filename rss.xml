<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-05-11T14:41:43.333512</updated>
  <id>8523e422-f3c0-4649-957f-fb368beaf0cf</id>

  
    <entry>
      <title>operator% -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_modulo.html"/>
      <id>8c1066a1c18708fb6f0fe216cd312bc8dce15279:reference/chrono/duration/op_modulo.md</id>
      <updated>2022-05-11T17:53:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_modulo.md b/reference/chrono/duration/op_modulo.md
index 1a74343b0..3c2d9cefd 100644
--- a/reference/chrono/duration/op_modulo.md
+++ b/reference/chrono/duration/op_modulo.md
@@ -94,7 +94,7 @@ int main()
 ### 処理系
 - [GCC](/implementation.md#gcc): 4.6.1
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013, 2015
-    - 2012, 2013でサンプルコードをコンパイルしたところ、dulation % dulationでコンパイルエラーになった。
+    - 2012, 2013でサンプルコードをコンパイルしたところ、duration % durationでコンパイルエラーになった。
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>has_virtual_destructor -- Merge pull request #969 from cpprefjp/add-practical-example-for-has_virtual_destructor</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/has_virtual_destructor.html"/>
      <id>1b90a8bcb3bcb97adc6af9e2e1bd1891408241e8:reference/type_traits/has_virtual_destructor.md</id>
      <updated>2022-05-11T16:24:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/has_virtual_destructor.md b/reference/type_traits/has_virtual_destructor.md
index 96d0c433a..91ed051f0 100644
--- a/reference/type_traits/has_virtual_destructor.md
+++ b/reference/type_traits/has_virtual_destructor.md
@@ -27,6 +27,8 @@ namespace std {
 `has_virtual_destructor`は、型`T`が仮想デストラクタを持っていれば[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 ## 例
+
+### 例1
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
 
@@ -56,6 +58,79 @@ int main() {}
 ```
 ```
 
+### 例2
+```cpp example
+#include &amp;lt;type_traits&amp;gt;
+#include &amp;lt;cstddef&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;memory&amp;gt;
+
+struct nonvirtual_base {
+  ~nonvirtual_base() { std::cout &amp;lt;&amp;lt; &amp;#34;  nonvirtual_base::~nonvirtual_base()&amp;#34; &amp;lt;&amp;lt; std::endl; }
+};
+
+struct virtual_base {
+  virtual ~virtual_base() { std::cout &amp;lt;&amp;lt; &amp;#34;  virtual_base::~virtual_base()&amp;#34; &amp;lt;&amp;lt; std::endl; }
+};
+
+template&amp;lt;typename Base&amp;gt;
+struct unsafe_derived : Base {  // 任意の型を基底クラスに取れてしまう
+  ~unsafe_derived() { std::cout &amp;lt;&amp;lt; &amp;#34;  unsafe_derived::~unsafe_derived()&amp;#34; &amp;lt;&amp;lt; std::endl; }
+};
+
+template&amp;lt;typename Base, typename std::enable_if&amp;lt;std::has_virtual_destructor&amp;lt;Base&amp;gt;::value, std::nullptr_t&amp;gt;::type = nullptr&amp;gt;
+struct safe_derived : Base {  // 仮想デストラクタを持つクラスでないと基底クラスに取れない
+  ~safe_derived() { std::cout &amp;lt;&amp;lt; &amp;#34;  safe_derived::~safe_derived()&amp;#34; &amp;lt;&amp;lt; std::endl; }
+};
+
+int main() {
+  {
+    std::cout &amp;lt;&amp;lt; &amp;#34;unsafe_derived&amp;lt;virtual_base&amp;gt; :&amp;#34; &amp;lt;&amp;lt; std::endl;
+    std::unique_ptr&amp;lt;virtual_base&amp;gt; p{new unsafe_derived&amp;lt;virtual_base&amp;gt;};
+    // virtual_baseは仮想デストラクタを持つので ~unsafe_derived() と ~virtual_base() が呼ばれる
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;---&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::cout &amp;lt;&amp;lt; &amp;#34;unsafe_derived&amp;lt;nonvirtual_base&amp;gt; :&amp;#34; &amp;lt;&amp;lt; std::endl;
+    std::unique_ptr&amp;lt;nonvirtual_base&amp;gt; p{new unsafe_derived&amp;lt;nonvirtual_base&amp;gt;};
+    // nonvirtual_baseは仮想デストラクタを持たないので ~nonvirtual_base() しか呼ばれない
+    //   (unsafe_derived のメンバのデストラクトが行われなくなるのでリソースリークを起こす)
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;---&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::cout &amp;lt;&amp;lt; &amp;#34;safe_derived&amp;lt;virtual_base&amp;gt; :&amp;#34; &amp;lt;&amp;lt; std::endl;
+    std::unique_ptr&amp;lt;virtual_base&amp;gt; p{new safe_derived&amp;lt;virtual_base&amp;gt;};
+    // virtual_baseは仮想デストラクタを持つので ~safe_derived() と ~virtual_base() が呼ばれる
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;---&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::cout &amp;lt;&amp;lt; &amp;#34;safe_derived&amp;lt;nonvirtual_base&amp;gt; :&amp;#34; &amp;lt;&amp;lt; std::endl;
+    // std::unique_ptr&amp;lt;nonvirtual_base&amp;gt; p{new safe_derived&amp;lt;nonvirtual_base&amp;gt;};
+    // nonvirtual_baseは仮想デストラクタを持たないので safe_derived のテンプレートパラメータに指定できないため，コメントアウトを外すとコンパイルエラーになる
+    //   (std::has_virtual_destructor を用いることでリソースリークが起こるようなコードをコンパイルできなくすることができる)
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;---&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::has_virtual_destructor[color ff0000]
+
+### 出力
+```
+unsafe_derived&amp;lt;virtual_base&amp;gt; :
+  unsafe_derived::~unsafe_derived()
+  virtual_base::~virtual_base()
+---
+unsafe_derived&amp;lt;nonvirtual_base&amp;gt; :
+  nonvirtual_base::~nonvirtual_base()
+---
+safe_derived&amp;lt;virtual_base&amp;gt; :
+  safe_derived::~safe_derived()
+  virtual_base::~virtual_base()
+---
+safe_derived&amp;lt;nonvirtual_base&amp;gt; :
+---
+```
+
 ## バージョン
 ### 言語
 - C++11
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>has_virtual_destructor -- 使用例を追加</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/has_virtual_destructor.html"/>
      <id>35fefce2cbc2213917dc528376afe692ba7c517a:reference/type_traits/has_virtual_destructor.md</id>
      <updated>2022-05-11T16:16:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/has_virtual_destructor.md b/reference/type_traits/has_virtual_destructor.md
index 96d0c433a..91ed051f0 100644
--- a/reference/type_traits/has_virtual_destructor.md
+++ b/reference/type_traits/has_virtual_destructor.md
@@ -27,6 +27,8 @@ namespace std {
 `has_virtual_destructor`は、型`T`が仮想デストラクタを持っていれば[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 ## 例
+
+### 例1
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
 
@@ -56,6 +58,79 @@ int main() {}
 ```
 ```
 
+### 例2
+```cpp example
+#include &amp;lt;type_traits&amp;gt;
+#include &amp;lt;cstddef&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;memory&amp;gt;
+
+struct nonvirtual_base {
+  ~nonvirtual_base() { std::cout &amp;lt;&amp;lt; &amp;#34;  nonvirtual_base::~nonvirtual_base()&amp;#34; &amp;lt;&amp;lt; std::endl; }
+};
+
+struct virtual_base {
+  virtual ~virtual_base() { std::cout &amp;lt;&amp;lt; &amp;#34;  virtual_base::~virtual_base()&amp;#34; &amp;lt;&amp;lt; std::endl; }
+};
+
+template&amp;lt;typename Base&amp;gt;
+struct unsafe_derived : Base {  // 任意の型を基底クラスに取れてしまう
+  ~unsafe_derived() { std::cout &amp;lt;&amp;lt; &amp;#34;  unsafe_derived::~unsafe_derived()&amp;#34; &amp;lt;&amp;lt; std::endl; }
+};
+
+template&amp;lt;typename Base, typename std::enable_if&amp;lt;std::has_virtual_destructor&amp;lt;Base&amp;gt;::value, std::nullptr_t&amp;gt;::type = nullptr&amp;gt;
+struct safe_derived : Base {  // 仮想デストラクタを持つクラスでないと基底クラスに取れない
+  ~safe_derived() { std::cout &amp;lt;&amp;lt; &amp;#34;  safe_derived::~safe_derived()&amp;#34; &amp;lt;&amp;lt; std::endl; }
+};
+
+int main() {
+  {
+    std::cout &amp;lt;&amp;lt; &amp;#34;unsafe_derived&amp;lt;virtual_base&amp;gt; :&amp;#34; &amp;lt;&amp;lt; std::endl;
+    std::unique_ptr&amp;lt;virtual_base&amp;gt; p{new unsafe_derived&amp;lt;virtual_base&amp;gt;};
+    // virtual_baseは仮想デストラクタを持つので ~unsafe_derived() と ~virtual_base() が呼ばれる
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;---&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::cout &amp;lt;&amp;lt; &amp;#34;unsafe_derived&amp;lt;nonvirtual_base&amp;gt; :&amp;#34; &amp;lt;&amp;lt; std::endl;
+    std::unique_ptr&amp;lt;nonvirtual_base&amp;gt; p{new unsafe_derived&amp;lt;nonvirtual_base&amp;gt;};
+    // nonvirtual_baseは仮想デストラクタを持たないので ~nonvirtual_base() しか呼ばれない
+    //   (unsafe_derived のメンバのデストラクトが行われなくなるのでリソースリークを起こす)
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;---&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::cout &amp;lt;&amp;lt; &amp;#34;safe_derived&amp;lt;virtual_base&amp;gt; :&amp;#34; &amp;lt;&amp;lt; std::endl;
+    std::unique_ptr&amp;lt;virtual_base&amp;gt; p{new safe_derived&amp;lt;virtual_base&amp;gt;};
+    // virtual_baseは仮想デストラクタを持つので ~safe_derived() と ~virtual_base() が呼ばれる
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;---&amp;#34; &amp;lt;&amp;lt; std::endl;
+  {
+    std::cout &amp;lt;&amp;lt; &amp;#34;safe_derived&amp;lt;nonvirtual_base&amp;gt; :&amp;#34; &amp;lt;&amp;lt; std::endl;
+    // std::unique_ptr&amp;lt;nonvirtual_base&amp;gt; p{new safe_derived&amp;lt;nonvirtual_base&amp;gt;};
+    // nonvirtual_baseは仮想デストラクタを持たないので safe_derived のテンプレートパラメータに指定できないため，コメントアウトを外すとコンパイルエラーになる
+    //   (std::has_virtual_destructor を用いることでリソースリークが起こるようなコードをコンパイルできなくすることができる)
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#34;---&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::has_virtual_destructor[color ff0000]
+
+### 出力
+```
+unsafe_derived&amp;lt;virtual_base&amp;gt; :
+  unsafe_derived::~unsafe_derived()
+  virtual_base::~virtual_base()
+---
+unsafe_derived&amp;lt;nonvirtual_base&amp;gt; :
+  nonvirtual_base::~nonvirtual_base()
+---
+safe_derived&amp;lt;virtual_base&amp;gt; :
+  safe_derived::~safe_derived()
+  virtual_base::~virtual_base()
+---
+safe_derived&amp;lt;nonvirtual_base&amp;gt; :
+---
+```
+
 ## バージョン
 ### 言語
 - C++11
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator/ -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_divide.html"/>
      <id>1071021c3df2e36fd6409dbdfaed730888543c55:reference/chrono/duration/op_divide.md</id>
      <updated>2022-05-11T15:47:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_divide.md b/reference/chrono/duration/op_divide.md
index 1e756946b..61ff338c0 100644
--- a/reference/chrono/duration/op_divide.md
+++ b/reference/chrono/duration/op_divide.md
@@ -97,7 +97,7 @@ int main()
 ### 処理系
 - [GCC](/implementation.md#gcc): 4.6.1
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013, 2015
-	- 2013でサンプルコードをコンパイルしたところ、dulation / dulationでコンパイルエラーになった。
+	- 2013でサンプルコードをコンパイルしたところ、duration / durationでコンパイルエラーになった。
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>index_sequence_for -- index_sequence_for : 説明追記と修正</title>
      <link href="https://cpprefjp.github.io/reference/utility/index_sequence_for.html"/>
      <id>b7a95990f455ade5d35b0032c88f51c9aba9a6f1:reference/utility/index_sequence_for.md</id>
      <updated>2022-05-01T18:05:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/index_sequence_for.md b/reference/utility/index_sequence_for.md
index 088824a54..3aceab4d6 100644
--- a/reference/utility/index_sequence_for.md
+++ b/reference/utility/index_sequence_for.md
@@ -13,7 +13,9 @@ namespace std {
 * make_index_sequence[link make_index_sequence.md]
 
 ## 概要
-`index_sequence_for`は、型のシーケンス、0から始まる[`size_t`](/reference/cstddef/size_t.md)型整数シーケンスに変換する、[`make_index_sequence`](make_index_sequence.md)の別名である。
+`index_sequence_for`は、型のシーケンスを0から始まる[`size_t`](/reference/cstddef/size_t.md)型整数シーケンスに変換する、[`make_index_sequence`](make_index_sequence.md)の別名である。
+
+別の言い方をすると、パラメータパック`Ts...`に含まれる各型に対して先頭から順番に`0`始まりのインデックスを振り、そのインデックスの列（[`integer_sequence`](/reference/utility/integer_sequence.md)）を返す。
 
 テンプレートパラメータは、以下を意味する：
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
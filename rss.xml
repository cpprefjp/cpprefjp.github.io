<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-01-26T12:58:26.646853</updated>
  <id>f2c5ec08-601c-40e6-9f15-77bcd3d1dbe7</id>

  
    <entry>
      <title>type_traits (C++11) -- type_traits : 最初の提案文書を、参照に追加。</title>
      <link href="http://cpprefjp.github.io/reference/type_traits.html"/>
      <id>1d7c960219e9b35a4b9a9516eb127ede71bd0f13:reference/type_traits.md</id>
      <updated>2015-01-26 12:58:09 +0900</updated>
      
        <content type="html">&lt;h1&gt;type_traits (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;type_traits&amp;gt;&lt;/code&gt;ヘッダでは、型の特性を判定、操作するためのクラスを定義する。
このライブラリに含まれるクラステンプレートは、メタ関数(meta function)と呼ばれている。&lt;/p&gt;
&lt;h2&gt;ヘルパークラス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;integral_constant&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数を表す型 (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;を表す型 (typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;を表す型 (typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;基本的な型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_void.html&#34;&gt;&lt;code&gt;is_void&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が&lt;code&gt;void&lt;/code&gt;型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_integral.html&#34;&gt;&lt;code&gt;is_integral&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が整数型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_floating_point.html&#34;&gt;&lt;code&gt;is_floating_point&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が浮動小数点型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_array.html&#34;&gt;&lt;code&gt;is_array&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が配列型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_pointer.html&#34;&gt;&lt;code&gt;is_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_lvalue_reference.html&#34;&gt;&lt;code&gt;is_lvalue_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が左辺値参照型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_rvalue_reference.html&#34;&gt;&lt;code&gt;is_rvalue_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が右辺値参照型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_member_object_pointer.html&#34;&gt;&lt;code&gt;is_member_object_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がデータメンバへのポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_member_function_pointer.html&#34;&gt;&lt;code&gt;is_member_function_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がメンバ関数へのポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_enum.html&#34;&gt;&lt;code&gt;is_enum&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が列挙型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_union.html&#34;&gt;&lt;code&gt;is_union&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が共用型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_class.html&#34;&gt;&lt;code&gt;is_class&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がクラス型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_function.html&#34;&gt;&lt;code&gt;is_function&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が関数型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;組み合わせた型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_reference.html&#34;&gt;&lt;code&gt;is_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が参照型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_arithmetic.html&#34;&gt;&lt;code&gt;is_arithmetic&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が算術型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_fundamental.html&#34;&gt;&lt;code&gt;is_fundamental&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が単純型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_object.html&#34;&gt;&lt;code&gt;is_object&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がオブジェクト型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_scalar.html&#34;&gt;&lt;code&gt;is_scalar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がスカラ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_compound.html&#34;&gt;&lt;code&gt;is_compound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が複合型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_member_pointer.html&#34;&gt;&lt;code&gt;is_member_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がメンバポインタ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の特性&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_const.html&#34;&gt;&lt;code&gt;is_const&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が&lt;code&gt;const&lt;/code&gt;修飾型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_volatile.html&#34;&gt;&lt;code&gt;is_volatile&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が&lt;code&gt;volatile&lt;/code&gt;修飾型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivial.html&#34;&gt;&lt;code&gt;is_trivial&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアル型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_copyable.html&#34;&gt;&lt;code&gt;is_trivially_copyable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルコピー可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_standard_layout.html&#34;&gt;&lt;code&gt;is_standard_layout&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がスタンダードレイアウト型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_pod.html&#34;&gt;&lt;code&gt;is_pod&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がPOD型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_literal_type.html&#34;&gt;&lt;code&gt;is_literal_type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がリテラル型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_empty.html&#34;&gt;&lt;code&gt;is_empty&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が空のクラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_polymorphic.html&#34;&gt;&lt;code&gt;is_polymorphic&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が多相的クラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_abstract.html&#34;&gt;&lt;code&gt;is_abstract&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が抽象クラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_final.html&#34;&gt;&lt;code&gt;is_final&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型に&lt;code&gt;final&lt;/code&gt;が付いているかを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_signed.html&#34;&gt;&lt;code&gt;is_signed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が符号付き算術型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_unsigned.html&#34;&gt;&lt;code&gt;is_unsigned&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が符号無し算術型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型のコンストラクタ呼出しが適格か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_default_constructible.html&#34;&gt;&lt;code&gt;is_default_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がデフォルト構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_copy_constructible.html&#34;&gt;&lt;code&gt;is_copy_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がコピー構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_move_constructible.html&#34;&gt;&lt;code&gt;is_move_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_assignable.html&#34;&gt;&lt;code&gt;is_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_copy_assignable.html&#34;&gt;&lt;code&gt;is_copy_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がコピー代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_move_assignable.html&#34;&gt;&lt;code&gt;is_move_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_destructible.html&#34;&gt;&lt;code&gt;is_destructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が破棄可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_constructible.html&#34;&gt;&lt;code&gt;is_trivially_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルに構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_default_constructible.html&#34;&gt;&lt;code&gt;is_trivially_default_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにデフォルト構築可能かを調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_copy_constructible.html&#34;&gt;&lt;code&gt;is_trivially_copy_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにコピー構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_move_constructible.html&#34;&gt;&lt;code&gt;is_trivially_move_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにムーブ構築可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_assignable.html&#34;&gt;&lt;code&gt;is_trivially_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルに代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_copy_assignable.html&#34;&gt;&lt;code&gt;is_trivially_copy_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにコピー代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_move_assignable.html&#34;&gt;&lt;code&gt;is_trivially_move_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルにムーブ代入可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_trivially_destructible.html&#34;&gt;&lt;code&gt;is_trivially_destructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がトリビアルに破棄可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_constructible.html&#34;&gt;&lt;code&gt;is_nothrow_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型のコンストラクタ呼出しが適格であり、かつそのコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_default_constructible.html&#34;&gt;&lt;code&gt;is_nothrow_default_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がデフォルト構築でき、かつそのデフォルトコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_copy_constructible.html&#34;&gt;&lt;code&gt;is_nothrow_copy_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がコピー構築でき、かつそのコピーコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_move_constructible.html&#34;&gt;&lt;code&gt;is_nothrow_move_constructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ構築でき、かつそのムーブコンストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_assignable.html&#34;&gt;&lt;code&gt;is_nothrow_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型の代入演算子呼び出しが適格であり、かつその代入演算子が例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_copy_assignable.html&#34;&gt;&lt;code&gt;is_nothrow_copy_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がコピー代入でき、かつそのコピー代入演算子が例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_move_assignable.html&#34;&gt;&lt;code&gt;is_nothrow_move_assignable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がムーブ代入でき、かつそのムーブ代入演算子が例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_nothrow_destructible.html&#34;&gt;&lt;code&gt;is_nothrow_destructible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が破棄でき、かつそのデストラクタが例外を投げないか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/has_virtual_destructor.html&#34;&gt;&lt;code&gt;has_virtual_destructor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型が仮想デストラクタを持っているか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の特性についての問い合わせ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/alignment_of.html&#34;&gt;&lt;code&gt;alignment_of&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型のアラインメントを取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/rank.html&#34;&gt;&lt;code&gt;rank&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列型の次元数を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/extent.html&#34;&gt;&lt;code&gt;extent&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列型の&lt;code&gt;i&lt;/code&gt;番目の次元の要素数を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の関係&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_same.html&#34;&gt;&lt;code&gt;is_same&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;二つの型が同じ型か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_base_of.html&#34;&gt;&lt;code&gt;is_base_of&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ある型が別の型の基底クラスか調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_convertible.html&#34;&gt;&lt;code&gt;is_convertible&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ある型から別の型へ変換可能か調べる (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;const-volatile の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_const.html&#34;&gt;&lt;code&gt;remove_const&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型の&lt;code&gt;const&lt;/code&gt;修飾を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_volatile.html&#34;&gt;&lt;code&gt;remove_volatile&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型の&lt;code&gt;volatile&lt;/code&gt;修飾を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_cv.html&#34;&gt;&lt;code&gt;remove_cv&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型の&lt;code&gt;const-volatile&lt;/code&gt;修飾を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_const.html&#34;&gt;&lt;code&gt;add_const&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型を&lt;code&gt;const&lt;/code&gt;修飾する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_volatile.html&#34;&gt;&lt;code&gt;add_volatile&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型を&lt;code&gt;volatile&lt;/code&gt;修飾する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_cv.html&#34;&gt;&lt;code&gt;add_cv&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型を&lt;code&gt;const-volatile&lt;/code&gt;修飾する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_reference.html&#34;&gt;&lt;code&gt;remove_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型から参照を除去する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_lvalue_reference.html&#34;&gt;&lt;code&gt;add_lvalue_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型に左辺値参照を追加する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_rvalue_reference.html&#34;&gt;&lt;code&gt;add_rvalue_reference&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型に右辺値参照を追加する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;符号の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/make_signed.html&#34;&gt;&lt;code&gt;make_signed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;整数型を符号付きにする (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/make_unsigned.html&#34;&gt;&lt;code&gt;make_unsigned&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;整数型を符号なしにする (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;配列の変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_extent.html&#34;&gt;&lt;code&gt;remove_extent&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列型から次元を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_all_extents.html&#34;&gt;&lt;code&gt;remove_all_extents&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列型から全ての次元を除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ポインタの変更&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/add_pointer.html&#34;&gt;&lt;code&gt;add_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型にポインタを追加する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_pointer.html&#34;&gt;&lt;code&gt;remove_pointer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型からポインタを除去する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;その他の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;&lt;code&gt;aligned_storage&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アラインメント調整された領域を作る (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;&lt;code&gt;aligned_union&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アラインメント調整された共用体領域を作る (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;&lt;code&gt;decay&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数テンプレートと同じ規則で推論された型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/enable_if.html&#34;&gt;&lt;code&gt;enable_if&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時条件式が真の場合のみ有効な型 (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/conditional.html&#34;&gt;&lt;code&gt;conditional&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時条件式 (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/common_type.html&#34;&gt;&lt;code&gt;common_type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変換可能な共通の型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/underlying_type.html&#34;&gt;&lt;code&gt;underlying_type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;enum&lt;/code&gt;の基底型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;&lt;code&gt;result_of&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値の型を取得する (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1345.html&#34; target=&#34;_blank&#34;&gt;N1345 A Proposal to add Type Traits to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1424.htm&#34; target=&#34;_blank&#34;&gt;N1424 A Proposal to add Type Traits to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/libs/type_traits/doc/html/index.html&#34; target=&#34;_blank&#34;&gt;Boost Type Traits Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boostjp.github.io/tips/type_traits.html&#34; target=&#34;_blank&#34;&gt;型特性 - Boost逆引きリファレンス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- インデントを4タブから2スペースに修正。</title>
      <link href="http://cpprefjp.github.io/reference/deque/op_constructor.html"/>
      <id>7f1d00f318cdd2d86e8abea6ddf9ef6c5e3834d0:reference/deque/op_constructor.md</id>
      <updated>2015-01-26 12:54:06 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());                                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 まで&lt;/span&gt;

deque();                                                                                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                                                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14 から&lt;/span&gt;

deque(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; T(), &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03 まで&lt;/span&gt;

deque(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(size_type n);                                                            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
deque(InputIterator first, InputIterator last, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());

deque(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);

deque(deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                                                                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;

deque(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;

deque(deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                                                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;

deque(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt; オブジェクトの構築&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt; コンテナオブジェクトを構築し、コンストラクタの種類に応じて要素を初期化する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;explicit deque(const Allocator&amp;amp; a = Allocator()); // C++11 まで&lt;/code&gt;&lt;br /&gt;
    デフォルトコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、サイズがゼロで要素を持たない空の &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： 定数時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(); // C++14 から&lt;/code&gt;&lt;br /&gt;
    デフォルトコンストラクタ。サイズがゼロで要素を持たない空の &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： 定数時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit deque(const Allocator&amp;amp; a); // C++14 から&lt;/code&gt;&lt;br /&gt;
    アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、サイズがゼロで要素を持たない空の &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： 定数時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(size_type n, const T&amp;amp; value = T(), const Allocator&amp;amp; a = Allocator()); // C++03 まで&lt;/code&gt;&lt;br /&gt;
    繰り返しシーケンスコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;value&lt;/code&gt; のコピーを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;n&lt;/code&gt;に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(size_type n, const T&amp;amp; value, const Allocator&amp;amp; a = Allocator()); // C++11 から&lt;/code&gt;&lt;br /&gt;
    繰り返しシーケンスコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;value&lt;/code&gt; のコピーを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(size_type n); // C++11&lt;/code&gt;&lt;br /&gt;
    繰り返しシーケンスコンストラクタ。値初期化されたオブジェクトを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(size_type n, const Allocator&amp;amp; a = Allocator()); // C++14 から&lt;/code&gt;&lt;br /&gt;
    繰り返しシーケンスコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、値初期化されたオブジェクトを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;class InputIterator&amp;gt;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;deque(InputIterator first, InputIterator last, const Allocator&amp;amp; a = Allocator());&lt;/code&gt;&lt;br /&gt;
    イテレータ範囲コンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;[first, last)&lt;/code&gt; の範囲を要素としてコピーした &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;first&lt;/code&gt; から &lt;code&gt;last&lt;/code&gt; への距離に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(const deque&amp;amp; x);&lt;/code&gt;&lt;br /&gt;
    コピーコンストラクタ。&lt;code&gt;x&lt;/code&gt; と同じ要素を保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;x&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(deque&amp;amp;&amp;amp; y); // C++11 から&lt;/code&gt;&lt;br /&gt;
    ムーブコンストラクタ。ムーブセマンティクスを使って &lt;code&gt;y&lt;/code&gt; の要素でコンテナを構築する。&lt;br /&gt;
    計算量： 定数時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(const deque&amp;amp; x, const Allocator&amp;amp; a); // C++11 から&lt;/code&gt;&lt;br /&gt;
    コピーコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;x&lt;/code&gt; と同じ要素を保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;x&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(deque&amp;amp;&amp;amp; y, const Allocator&amp;amp; a); // C++11 から&lt;/code&gt;&lt;br /&gt;
    ムーブコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、ムーブセマンティクスを使って &lt;code&gt;y&lt;/code&gt; の要素でコンテナを構築する。&lt;br /&gt;
    計算量： &lt;code&gt;a == y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、定数時間、そうでなければ &lt;code&gt;y&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;initializer_list&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt; il, const Allocator&amp;amp; a = Allocator()); // C++11 から&lt;/code&gt;&lt;br /&gt;
    初期化子リストで要素を構築するコンストラクタ。&lt;code&gt;deque(il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), a)&lt;/code&gt; と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;イテレータ範囲コンストラクタ &lt;code&gt;template &amp;lt;class InputIter&amp;gt; deque(InputIter first, InputIter last, const Allocator&amp;amp; a = Allocator())&lt;/code&gt; は、C++03 までは &lt;code&gt;InputIter&lt;/code&gt; が整数型の場合には &lt;code&gt;deque(static_cast&amp;lt;typename deque::size_type&amp;gt;(first), static_cast&amp;lt;typename deque::value_type&amp;gt;(last), a)&lt;/code&gt; と同等とされていたが、C++11 では &lt;code&gt;InputIter&lt;/code&gt; が入力イテレータの要件を満たさなければオーバーロード解決に参加しないように変更された。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++11 では、&lt;code&gt;explicit deque(size_type n, const T&amp;amp; value = T(), const Allocator&amp;amp; a = Allocator())&lt;/code&gt; の引数 &lt;code&gt;value&lt;/code&gt; に関するデフォルト引数が削除され、新たなコンストラクタ &lt;code&gt;explicit deque(size_type n)&lt;/code&gt; が追加された。&lt;br /&gt;
    これは、デフォルト引数を使用すると、引数 &lt;code&gt;value&lt;/code&gt; のデフォルト初期化 1 回＋&lt;code&gt;deque&lt;/code&gt; の要素へのコピー初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しが必要となるが、デフォルト引数でなければ &lt;code&gt;deque&lt;/code&gt; の要素へのデフォルト初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しで済むためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、&lt;code&gt;explicit deque(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; がデフォルト引数を使用しない 2 つのオーバーロードに分割された。&lt;br /&gt;
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、&lt;code&gt;explicit deque(size_type n)&lt;/code&gt; に引数が追加され、&lt;code&gt;explicit deque(size_type n, const Allocator&amp;amp; a = Allocator())&lt;/code&gt; に変更された。&lt;br /&gt;
    これは、変更されないと &lt;code&gt;n&lt;/code&gt; のみを引数にとるアロケータ使用構築（uses-allocator construction）に失敗してしまうためである。
    具体的には、C++11 では以下のようなコードがエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;scoped_allocator&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; di &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;di, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html&#34;&gt;scoped_allocator_adaptor&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;di&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; l;
  l.&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/emplace_back.html&#34;&gt;emplace_back&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10u&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; c)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : {&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main ()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルトコンストラクタ&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3個の要素を持つコンテナを構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 値1の要素を3個持つコンテナを構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c3(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// イテレータの範囲による構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c40 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 構築用の一時オブジェクト(説明用)&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c4(c40.&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;begin&lt;/a&gt;(), c40.&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;end&lt;/a&gt;());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c5(c4);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c60 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 構築用の一時オブジェクト(説明用)&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c6(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;(c60));

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストによる構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c7 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c1&#34;&lt;/span&gt;, c1);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c2&#34;&lt;/span&gt;, c2);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c3&#34;&lt;/span&gt;, c3);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c4&#34;&lt;/span&gt;, c4);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c5&#34;&lt;/span&gt;, c5);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c6&#34;&lt;/span&gt;, c6);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c7&#34;&lt;/span&gt;, c7);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;c1 : {}
c2 : {0 0 0 }
c3 : {1 1 1 }
c4 : {1 2 3 }
c5 : {1 2 3 }
c6 : {1 2 3 }
c7 : {1 2 3 }
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit deque(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit deque(size_type n)&lt;/code&gt; にアロケータ引数を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- インデントを4タブから2スペースに修正。</title>
      <link href="http://cpprefjp.github.io/reference/list/op_constructor.html"/>
      <id>9f9057ba721598fba20ac7cdbbf66538f386e9e5:reference/list/op_constructor.md</id>
      <updated>2015-01-26 12:52:11 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;list();                                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14 から&lt;/span&gt;
list(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14 から&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1), (2) C++11 まで。C++14 で削除&lt;/span&gt;

list(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; T(),
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++03 まで。C++11 で削除&lt;/span&gt;
list(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value,
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;list&lt;/span&gt;(size_type n);                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11。C++14 で削除&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;list&lt;/span&gt;(size_type n,
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator()); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
list(InputIterator first, InputIterator last,
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

list(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
list(list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x);                                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7) C++11 から&lt;/span&gt;
list(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8) C++11 から&lt;/span&gt;
list(list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9) C++11 から&lt;/span&gt;

list(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il,
     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;list オブジェクトの構築&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。アロケータをデフォルト構築して、空のコンテナを作る。&lt;/li&gt;
&lt;li&gt;(2) : アロケータを指定して空のコンテナを作る。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;value&lt;/code&gt; のコピーを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;list&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;n&lt;/code&gt; 個の &lt;code&gt;T()&lt;/code&gt; 初期化された要素を保持した &lt;code&gt;list&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;[first, last)&lt;/code&gt; の範囲を要素としてコピーした &lt;code&gt;list&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(6) : コピーコンストラクタ。&lt;code&gt;x&lt;/code&gt; と同じ要素を保持した &lt;code&gt;list&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(7) : ムーブコンストラクタ。&lt;code&gt;x&lt;/code&gt; の指す先を自分の領域として &lt;code&gt;list&lt;/code&gt; を構築する。&lt;/li&gt;
&lt;li&gt;(8) : アロケータを指定したコピーコンストラクタ。&lt;/li&gt;
&lt;li&gt;(9) : アロケータを指定したムーブコンストラクタ。&lt;/li&gt;
&lt;li&gt;(10) : 初期化子リストを受け取るコンストラクタ。&lt;code&gt;list(il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), a)&lt;/code&gt; と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 定数時間&lt;/li&gt;
&lt;li&gt;(3), (4) : &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(5) : &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last)&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(6), (8) : &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;(7) : 定数時間&lt;/li&gt;
&lt;li&gt;(9) : &lt;code&gt;a == x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; であれば定数時間。そうでなければ &lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(5) の形式は、C++03 までは &lt;code&gt;InputIterator&lt;/code&gt; が整数型の場合には &lt;code&gt;list(static_cast&amp;lt;typename list::size_type&amp;gt;(first), static_cast&amp;lt;typename list::value_type&amp;gt;(last), a)&lt;/code&gt; と同等とされていたが、C++11 では &lt;code&gt;InputIterator&lt;/code&gt; が入力イテレータの要件を満たさなければオーバーロード解決に参加しないように変更された。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++11 では、(3) の形式の引数 &lt;code&gt;value&lt;/code&gt; に関するデフォルト引数が削除され、新たに (4) の形式が追加された。&lt;br /&gt;
    これは、デフォルト引数を使用すると、引数 &lt;code&gt;value&lt;/code&gt; のデフォルト初期化 1 回＋&lt;code&gt;list&lt;/code&gt; の要素へのコピー初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しが必要となるが、デフォルト引数でなければ &lt;code&gt;list&lt;/code&gt; の要素へのデフォルト初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しで済むためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、(1) の形式と (2) の形式がデフォルト引数を使用しない 2 つのオーバーロードに分割された。&lt;br /&gt;
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、(4) の形式に引数が追加された。&lt;br /&gt;
    これは、変更されないと &lt;code&gt;n&lt;/code&gt; のみを引数にとるアロケータ使用構築（uses-allocator construction）に失敗してしまうためである。
    具体的には、C++11 では以下のようなコードがエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;scoped_allocator&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; li &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;vector&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;li, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html&#34;&gt;scoped_allocator_adaptor&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; v;
  v.&lt;a href=&#34;http://cpprefjp.github.io/reference/list/emplace_back.html&#34;&gt;emplace_back&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10u&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;  print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; ls)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ls) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main ()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルト構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls1;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls1&#34;&lt;/span&gt;, ls1);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// n 個の要素を持つリストを作成&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls2(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls2&#34;&lt;/span&gt;, ls2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// n 個の指定された値を要素に持つリストを作成&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls3(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls3&#34;&lt;/span&gt;, ls3);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 範囲から構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls4(ls3.&lt;a href=&#34;http://cpprefjp.github.io/reference/list/begin.html&#34;&gt;begin&lt;/a&gt;(), ls3.&lt;a href=&#34;http://cpprefjp.github.io/reference/list/end.html&#34;&gt;end&lt;/a&gt;());
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls4&#34;&lt;/span&gt;, ls4);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls5  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  ls4;
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls5&#34;&lt;/span&gt;, ls5);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls6  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;(ls5);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls6&#34;&lt;/span&gt;, ls6);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストで構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  ls7  &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  { &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; };
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ls7&#34;&lt;/span&gt;, ls7);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;ls1 : 
ls2 : 0 0 0 
ls3 : 1 1 1 
ls4 : 1 1 1 
ls5 : 1 1 1 
ls6 : 1 1 1 
ls7 : 1 2 3 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit list(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit list(size_type n)&lt;/code&gt; にアロケータ引数を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_istream&lt;&gt;::sentry -- basic_istream::sentry の type を修正</title>
      <link href="http://cpprefjp.github.io/reference/istream/basic_istream/sentry.html"/>
      <id>c6aeaf8e26e1dada40923cb3da3c7d165a5d8aa7:reference/istream/basic_istream/sentry.md</id>
      <updated>2015-01-26 12:39:46 +0900</updated>
      
        <content type="html">&lt;h1&gt;basic_istream&amp;lt;&amp;gt;::sentry&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;char_traits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/istream/basic_istream.html&#34;&gt;basic_istream&lt;/a&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;sentry {
  &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; sentry(&lt;a href=&#34;http://cpprefjp.github.io/reference/istream/basic_istream.html&#34;&gt;basic_istream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; noskipws &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;);
    &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;sentry();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;

    sentry(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; sentry&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;
    sentry&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; sentry&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;basic_istream&amp;lt;&amp;gt;::sentry&lt;/code&gt;は、入力処理共通の前処理・後処理を実行するためのクラスである。
前処理・後処理がそれぞれコンストラクタ・デストラクタ内部で実行される。&lt;/p&gt;
&lt;p&gt;書式化入力関数・非書式化入力関数は、内部で必ず&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築・破棄する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;explicit operator bool&lt;/code&gt;関数は、コンストラクタでの処理が成功していれば&lt;code&gt;true&lt;/code&gt;、さもなくば&lt;code&gt;false&lt;/code&gt;を返す。&lt;/p&gt;
&lt;p&gt;なお、C++標準規格では、規格で要求している処理のほかに、追加の処理を行っても良いとされている。&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/istream/basic_istream/sentry/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/istream/basic_istream/sentry/op_destructor.html&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/istream/basic_istream.html&#34;&gt;&lt;code&gt;basic_istream&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/sentry.html&#34;&gt;&lt;code&gt;basic_ostream&amp;lt;&amp;gt;::sentry&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_istream::sentry の type を修正</title>
      <link href="http://cpprefjp.github.io/reference/istream/basic_istream/sentry/op_constructor.html"/>
      <id>c6aeaf8e26e1dada40923cb3da3c7d165a5d8aa7:reference/istream/basic_istream/sentry/op_constructor.md</id>
      <updated>2015-01-26 12:39:46 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;char_traits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/istream/basic_istream.html&#34;&gt;basic_istream&lt;/a&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;sentry {
  &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; sentry(&lt;a href=&#34;http://cpprefjp.github.io/reference/istream/basic_istream.html&#34;&gt;basic_istream&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; is, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; noskipws &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;);
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;入力処理の前処理を行う。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/good.md.nolink&#34;&gt;&lt;code&gt;good&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;なら、&lt;code&gt;is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/setstate.md.nolink&#34;&gt;&lt;code&gt;setstate&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(failbit)&lt;/code&gt;を呼び出し、関数から帰る。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/tie.md.nolink&#34;&gt;&lt;code&gt;tie&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;が非ヌルポインタなら、&lt;code&gt;is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/tie.md.nolink&#34;&gt;&lt;code&gt;tie&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()-&amp;gt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/flush.md.nolink&#34;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;を呼び出す。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/tie.md.nolink&#34;&gt;&lt;code&gt;tie&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;が指す先のストリームバッファのput areaが空なら、この処理を省略しても良い。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/rdbuf.md.nolink&#34;&gt;&lt;code&gt;rdbuf&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()-&amp;gt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf/underflow.md.nolink&#34;&gt;&lt;code&gt;underflow&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;の呼び出しが発生するまで、この処理を遅延させても良い。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/rdbuf.md.nolink&#34;&gt;&lt;code&gt;rdbuf&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()-&amp;gt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf/underflow.md.nolink&#34;&gt;&lt;code&gt;underflow&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;の呼び出しが発生しなかったら、この処理を省略して良い（標準ライブラリ実装内部で、そのような最適化を行っても良い）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noskipws&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;かつ&lt;code&gt;is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/ios_base/flags.md.nolink&#34;&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/a&gt;&lt;code&gt;() &amp;amp;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/ios_base.html&#34;&gt;&lt;code&gt;ios_base&lt;/code&gt;&lt;/a&gt;&lt;code&gt;::skipws&lt;/code&gt;が真なら、ストリームから空白文字を読み捨てる。&lt;ul&gt;
&lt;li&gt;空白文字の判定は、文字&lt;code&gt;c&lt;/code&gt;について&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/use_facet.md.nolink&#34;&gt;&lt;code&gt;use_facet&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/ctype.html&#34;&gt;&lt;code&gt;ctype&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;CharT&amp;gt;&amp;gt;(is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/ios_base/getloc.md.nolink&#34;&gt;&lt;code&gt;getloc&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()).&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/ctype/is.md.nolink&#34;&gt;&lt;code&gt;is&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/ctype.html&#34;&gt;&lt;code&gt;ctype&lt;/code&gt;&lt;/a&gt;&lt;code&gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/ctype_base.html&#34;&gt;&lt;code&gt;space&lt;/code&gt;&lt;/a&gt;&lt;code&gt;, c)&lt;/code&gt;と等価な方法で行う。&lt;/li&gt;
&lt;li&gt;このとき&lt;code&gt;is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/rdbuf.md.nolink&#34;&gt;&lt;code&gt;rdbuf&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()-&amp;gt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf/sbumpc.md.nolink&#34;&gt;&lt;code&gt;sbumpc&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;または&lt;code&gt;is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/rdbuf.md.nolink&#34;&gt;&lt;code&gt;rdbuf&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()-&amp;gt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf/sgetc.md.nolink&#34;&gt;&lt;code&gt;sgetc&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;が&lt;code&gt;Traits::eof()&lt;/code&gt;を返したら、&lt;code&gt;is.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/setstate.md.nolink&#34;&gt;&lt;code&gt;setstate&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(failbit | eofbit)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ここまでの手順が完了したら、このオブジェクトの&lt;code&gt;explicit operator bool&lt;/code&gt;関数は&lt;code&gt;true&lt;/code&gt;を、さもなくば&lt;code&gt;false&lt;/code&gt;を返すようになる。&lt;/p&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- deque: コンストラクタを修正</title>
      <link href="http://cpprefjp.github.io/reference/deque/op_constructor.html"/>
      <id>5fa7852d510a2ba57c8af8e922d685a52bd9b4aa:reference/deque/op_constructor.md</id>
      <updated>2015-01-26 00:17:09 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());                                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 まで&lt;/span&gt;

deque();                                                                                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                                                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14 から&lt;/span&gt;

deque(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; T(), &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03 まで&lt;/span&gt;

deque(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(size_type n);                                                            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;deque&lt;/span&gt;(size_type n, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;InputIterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
deque(InputIterator first, InputIterator last, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());

deque(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);

deque(deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y);                                                                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;

deque(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                                              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;

deque(deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a);                                                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;

deque(&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;initializer_list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; il, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Allocator());                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt; オブジェクトの構築&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt; コンテナオブジェクトを構築し、コンストラクタの種類に応じて要素を初期化する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;explicit deque(const Allocator&amp;amp; a = Allocator()); // C++11 まで&lt;/code&gt;&lt;br /&gt;
    デフォルトコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、サイズがゼロで要素を持たない空の &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： 定数時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(); // C++14 から&lt;/code&gt;&lt;br /&gt;
    デフォルトコンストラクタ。サイズがゼロで要素を持たない空の &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： 定数時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit deque(const Allocator&amp;amp; a); // C++14 から&lt;/code&gt;&lt;br /&gt;
    アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、サイズがゼロで要素を持たない空の &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： 定数時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(size_type n, const T&amp;amp; value = T(), const Allocator&amp;amp; a = Allocator()); // C++03 まで&lt;/code&gt;&lt;br /&gt;
    繰り返しシーケンスコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;value&lt;/code&gt; のコピーを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;n&lt;/code&gt;に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(size_type n, const T&amp;amp; value, const Allocator&amp;amp; a = Allocator()); // C++11 から&lt;/code&gt;&lt;br /&gt;
    繰り返しシーケンスコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;value&lt;/code&gt; のコピーを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(size_type n); // C++11&lt;/code&gt;&lt;br /&gt;
    繰り返しシーケンスコンストラクタ。値初期化されたオブジェクトを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(size_type n, const Allocator&amp;amp; a = Allocator()); // C++14 から&lt;/code&gt;&lt;br /&gt;
    繰り返しシーケンスコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、値初期化されたオブジェクトを &lt;code&gt;n&lt;/code&gt; 個要素として保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;n&lt;/code&gt; に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;class InputIterator&amp;gt;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;deque(InputIterator first, InputIterator last, const Allocator&amp;amp; a = Allocator());&lt;/code&gt;&lt;br /&gt;
    イテレータ範囲コンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;[first, last)&lt;/code&gt; の範囲を要素としてコピーした &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;first&lt;/code&gt; から &lt;code&gt;last&lt;/code&gt; への距離に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(const deque&amp;amp; x);&lt;/code&gt;&lt;br /&gt;
    コピーコンストラクタ。&lt;code&gt;x&lt;/code&gt; と同じ要素を保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;x&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(deque&amp;amp;&amp;amp; y); // C++11 から&lt;/code&gt;&lt;br /&gt;
    ムーブコンストラクタ。ムーブセマンティクスを使って &lt;code&gt;y&lt;/code&gt; の要素でコンテナを構築する。&lt;br /&gt;
    計算量： 定数時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(const deque&amp;amp; x, const Allocator&amp;amp; a); // C++11 から&lt;/code&gt;&lt;br /&gt;
    コピーコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、&lt;code&gt;x&lt;/code&gt; と同じ要素を保持した &lt;code&gt;deque&lt;/code&gt; を構築する。&lt;br /&gt;
    計算量： &lt;code&gt;x&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(deque&amp;amp;&amp;amp; y, const Allocator&amp;amp; a); // C++11 から&lt;/code&gt;&lt;br /&gt;
    ムーブコンストラクタ。アロケータに &lt;code&gt;a&lt;/code&gt; を使用して、ムーブセマンティクスを使って &lt;code&gt;y&lt;/code&gt; の要素でコンテナを構築する。&lt;br /&gt;
    計算量： &lt;code&gt;a == y.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; の場合、定数時間、そうでなければ &lt;code&gt;y&lt;/code&gt; の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deque(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&lt;code&gt;initializer_list&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt; il, const Allocator&amp;amp; a = Allocator()); // C++11 から&lt;/code&gt;&lt;br /&gt;
    初期化子リストで要素を構築するコンストラクタ。&lt;code&gt;deque(il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/begin.html&#34;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), il.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/initializer_list/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(), a)&lt;/code&gt; と同等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;イテレータ範囲コンストラクタ &lt;code&gt;template &amp;lt;class InputIter&amp;gt; deque(InputIter first, InputIter last, const Allocator&amp;amp; a = Allocator())&lt;/code&gt; は、C++03 までは &lt;code&gt;InputIter&lt;/code&gt; が整数型の場合には &lt;code&gt;deque(static_cast&amp;lt;typename deque::size_type&amp;gt;(first), static_cast&amp;lt;typename deque::value_type&amp;gt;(last), a)&lt;/code&gt; と同等とされていたが、C++11 では &lt;code&gt;InputIter&lt;/code&gt; が入力イテレータの要件を満たさなければオーバーロード解決に参加しないように変更された。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++11 では、&lt;code&gt;explicit deque(size_type n, const T&amp;amp; value = T(), const Allocator&amp;amp; a = Allocator())&lt;/code&gt; の引数 &lt;code&gt;value&lt;/code&gt; に関するデフォルト引数が削除され、新たなコンストラクタ &lt;code&gt;explicit deque(size_type n)&lt;/code&gt; が追加された。&lt;br /&gt;
    これは、デフォルト引数を使用すると、引数 &lt;code&gt;value&lt;/code&gt; のデフォルト初期化 1 回＋&lt;code&gt;deque&lt;/code&gt; の要素へのコピー初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しが必要となるが、デフォルト引数でなければ &lt;code&gt;deque&lt;/code&gt; の要素へのデフォルト初期化 &lt;code&gt;n&lt;/code&gt; 回のコンストラクタ呼び出しで済むためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、&lt;code&gt;explicit deque(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; がデフォルト引数を使用しない 2 つのオーバーロードに分割された。&lt;br /&gt;
    これは、デフォルトコンストラクタに &lt;code&gt;explicit&lt;/code&gt; が付いていると、&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;deque&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; d &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;のようなコード（C++11 から導入された、コピーリスト初期化によるデフォルトコンストラクタ呼び出し）がエラーになってしまうためである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++14 では、&lt;code&gt;explicit deque(size_type n)&lt;/code&gt; に引数が追加され、&lt;code&gt;explicit deque(size_type n, const Allocator&amp;amp; a = Allocator())&lt;/code&gt; に変更された。&lt;br /&gt;
    これは、変更されないと &lt;code&gt;n&lt;/code&gt; のみを引数にとるアロケータ使用構築（uses-allocator construction）に失敗してしまうためである。
    具体的には、C++11 では以下のようなコードがエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;scoped_allocator&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; di &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/list.html&#34;&gt;list&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;di, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html&#34;&gt;scoped_allocator_adaptor&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;di&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; l;
    l.&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/emplace_back.html&#34;&gt;emplace_back&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10u&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility.html&#34;&gt;utility&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; name, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; c)
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; : {&#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; c) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;}&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main ()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルトコンストラクタ&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c1;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3個の要素を持つコンテナを構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c2(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 値1の要素を3個持つコンテナを構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c3(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// イテレータの範囲による構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c40 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 構築用の一時オブジェクト(説明用)&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c4(c40.&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/begin.html&#34;&gt;begin&lt;/a&gt;(), c40.&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/end.html&#34;&gt;end&lt;/a&gt;());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c5(c4);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c60 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;}; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 構築用の一時オブジェクト(説明用)&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c6(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/move.html&#34;&gt;move&lt;/a&gt;(c60));

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 初期化子リストによる構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c7 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;};

  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c1&#34;&lt;/span&gt;, c1);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c2&#34;&lt;/span&gt;, c2);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c3&#34;&lt;/span&gt;, c3);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c4&#34;&lt;/span&gt;, c4);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c5&#34;&lt;/span&gt;, c5);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c6&#34;&lt;/span&gt;, c6);
  print(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;c7&#34;&lt;/span&gt;, c7);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;c1 : {}
c2 : {0 0 0 }
c3 : {1 1 1 }
c4 : {1 2 3 }
c5 : {1 2 3 }
c6 : {1 2 3 }
c7 : {1 2 3 }
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2193&#34; target=&#34;_blank&#34;&gt;LWG 2193. Default constructors for standard library containers are explicit&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit deque(const Allocator&amp;amp; a = Allocator())&lt;/code&gt; を 2 つのオーバーロードに分割するきっかけとなったレポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cplusplus.github.io/LWG/lwg-defects.html#2210&#34; target=&#34;_blank&#34;&gt;LWG 2210. Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;explicit deque(size_type n)&lt;/code&gt; にアロケータ引数を追加するきっかけとなったレポート&lt;br /&gt;
    なお、Discussion の例はアロケータの型が誤っているので注意&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
</feed>
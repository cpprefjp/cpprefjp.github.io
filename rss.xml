<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-12-14T10:12:49.651587</updated>
  <id>9c7aac27-7b3e-4c6e-9724-51a6cc505cab</id>

  
    <entry>
      <title>tuple -- tuple : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple.html"/>
      <id>4292d91a27752b93dae88e375f6ae0b4dc60842d:reference/tuple/tuple.md</id>
      <updated>2022-12-14T19:07:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple.md b/reference/tuple/tuple.md
index 8bda26c38..6b55fb90a 100644
--- a/reference/tuple/tuple.md
+++ b/reference/tuple/tuple.md
@@ -52,16 +52,17 @@ namespace std {
 | [`swap`](tuple/swap_free.md) | 2つの`tuple`オブジェクトを入れ替える | C++11 |
 
 
-### 関係演算子
+### 比較演算子
 
 | 名前 | 説明 | 対応バージョン |
-|---------------------------------------------|------------------------------------|-------|
-| [`operator==`](tuple/op_equal.md)         | 等値判定を行う | C++11 |
-| [`operator!=`](tuple/op_not_equal.md)     | 非等値判定を行う | C++11 |
-| [`operator&amp;lt;`](tuple/op_less.md)           | 左辺が右辺よりも小さいか判定を行う | C++11 |
-| [`operator&amp;lt;=`](tuple/op_less_equal.md)    | 左辺が右辺以下か判定を行う | C++11 |
-| [`operator&amp;gt;`](tuple/op_greater.md)        | 左辺が右辺より大きいか判定を行う | C++11 |
-| [`operator&amp;gt;=`](tuple/op_greater_equal.md) | 左辺が右辺以上か判定を行う | C++11 |
+|-------------------------------------------|------------------------------------|-------|
+| [`operator==`](tuple/op_equal.md)         | 等値比較を行う | C++11 |
+| [`operator!=`](tuple/op_not_equal.md)     | 非等値比較を行う | C++11 |
+| [`operator&amp;lt;=&amp;gt;`](tuple/op_compare_3way.md) | 三方比較を行う | C++20 |
+| [`operator&amp;lt;`](tuple/op_less.md)           | 左辺が右辺よりも小さいか比較を行う | C++11 |
+| [`operator&amp;lt;=`](tuple/op_less_equal.md)    | 左辺が右辺以下か比較を行う | C++11 |
+| [`operator&amp;gt;`](tuple/op_greater.md)        | 左辺が右辺より大きいか比較を行う | C++11 |
+| [`operator&amp;gt;=`](tuple/op_greater_equal.md) | 左辺が右辺以上か比較を行う | C++11 |
 
 
 ## 推論補助
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- tuple : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/op_compare_3way.html"/>
      <id>4292d91a27752b93dae88e375f6ae0b4dc60842d:reference/tuple/tuple/op_compare_3way.md</id>
      <updated>2022-12-14T19:07:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/op_compare_3way.md b/reference/tuple/tuple/op_compare_3way.md
new file mode 100644
index 000000000..6a52a35f9
--- /dev/null
+++ b/reference/tuple/tuple/op_compare_3way.md
@@ -0,0 +1,83 @@
+# operator&amp;lt;=&amp;gt;
+* tuple[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class... TTypes, class... UTypes&amp;gt;
+  constexpr common_comparison_category_t&amp;lt;synth-three-way-result&amp;lt;TTypes, UTypes&amp;gt;...&amp;gt;
+    operator&amp;lt;=&amp;gt;(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp;, const tuple&amp;lt;UTypes...&amp;gt;&amp;amp;); // (1) C++20
+}
+```
+* tuple[link ../tuple.md]
+* common_comparison_category_t[link /reference/compare/common_comparison_category.md]
+
+## 概要
+2つの[`tuple`](../tuple.md)オブジェクトの三方比較を行う。
+
+
+## 効果
+`t`と`u`の辞書順比較を行う。
+
+長さ0の`tuple`の場合は、`t &amp;lt;=&amp;gt; u`は[`strong_ordering`](/reference/compare/strong_ordering.md)`::equal`を返す。そうでなければ、以下と等価：
+
+```cpp
+if (auto c = synth-three-way(get&amp;lt;0&amp;gt;(t), get&amp;lt;0&amp;gt;(u)); c != 0)
+  return c;
+return t tail &amp;lt;=&amp;gt; u tail;
+```
+* tail[italic]
+* get[link get.md]
+
+ここで`r`&amp;lt;sub&amp;gt;tail&amp;lt;/sub&amp;gt;は、`r`の最初の要素以外のすべてを含む`tuple`である。
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;tuple&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::tuple&amp;lt;int, char, const char*&amp;gt; t1(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
+  std::tuple&amp;lt;int, char, std::string&amp;gt; t2(1, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
+  std::tuple&amp;lt;int, char, std::string&amp;gt; t3(1, &amp;#39;b&amp;#39;, &amp;#34;world&amp;#34;);
+
+  assert((t1 &amp;lt;=&amp;gt; t2) == 0); // ※比較可能であれば型は異なっていてもかまわない
+  assert(t1 &amp;lt; t3);
+  assert(t1 &amp;lt;= t3);
+  assert(t3 &amp;gt; t1);
+  assert(t3 &amp;gt;= t1);
+}
+```
+
+### 出力
+```
+true
+false
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- tuple : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/op_equal.html"/>
      <id>4292d91a27752b93dae88e375f6ae0b4dc60842d:reference/tuple/tuple/op_equal.md</id>
      <updated>2022-12-14T19:07:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/op_equal.md b/reference/tuple/tuple/op_equal.md
index 7549ae8ce..ba77831b5 100644
--- a/reference/tuple/tuple/op_equal.md
+++ b/reference/tuple/tuple/op_equal.md
@@ -8,11 +8,11 @@
 namespace std {
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   bool operator==(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                  const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);           // C++11
+                  const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);           // (1) C++11
 
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   constexpr bool operator==(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                            const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // C++14
+                            const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // (1) C++14
 }
 ```
 * tuple[link ../tuple.md]
@@ -34,6 +34,11 @@ namespace std {
 [`tuple`](../tuple.md)の全ての要素を`std::`[`get`](get.md)`&amp;lt;i&amp;gt;(t) ==std::`[`get`](get.md)`&amp;lt;i&amp;gt;(u)` した結果が`true`である場合`true`を返し、そうでなければ`false`を返す。
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -77,3 +82,5 @@ false
 
 ## 参照
 - [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- tuple : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/op_greater.html"/>
      <id>4292d91a27752b93dae88e375f6ae0b4dc60842d:reference/tuple/tuple/op_greater.md</id>
      <updated>2022-12-14T19:07:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/op_greater.md b/reference/tuple/tuple/op_greater.md
index e0c8d9c51..d2ba113df 100644
--- a/reference/tuple/tuple/op_greater.md
+++ b/reference/tuple/tuple/op_greater.md
@@ -6,18 +6,19 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   bool operator&amp;gt;(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                 const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);           // C++11
+                 const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);           // (1) C++11
 
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   constexpr bool operator&amp;gt;(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                           const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // C++14
+                           const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // (1) C++14
 }
 ```
 
 ## 概要
-2つの`tuple`において、左辺が右辺より大きいかの判定を行う。
+2つの`tuple`において、左辺が右辺より大きいかの比較を行う。
 
 
 ## 要件
@@ -68,10 +69,11 @@ true
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
-## 参照
-- [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
-
-
 ## 関連項目
 - [`operator&amp;lt;`](op_less.md)
 
+
+## 参照
+- [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- tuple : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/op_greater_equal.html"/>
      <id>4292d91a27752b93dae88e375f6ae0b4dc60842d:reference/tuple/tuple/op_greater_equal.md</id>
      <updated>2022-12-14T19:07:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/op_greater_equal.md b/reference/tuple/tuple/op_greater_equal.md
index 9d9f85a89..02cb81f97 100644
--- a/reference/tuple/tuple/op_greater_equal.md
+++ b/reference/tuple/tuple/op_greater_equal.md
@@ -6,18 +6,19 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   bool operator&amp;gt;=(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                  const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);           // C++11
+                  const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);           // (1) C++11
 
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   constexpr bool operator&amp;gt;=(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                            const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // C++14
+                            const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // (1) C++14
 }
 ```
 
 ## 概要
-2つの`tuple`において、左辺が右辺以上かの判定を行う。
+2つの`tuple`において、左辺が右辺以上かの比較を行う。
 
 
 ## 要件
@@ -74,10 +75,11 @@ true
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
-## 参照
-- [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
-
-
 ## 関連項目
 - [`operator&amp;lt;`](op_less.md)
 
+
+## 参照
+- [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- tuple : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/op_less.html"/>
      <id>4292d91a27752b93dae88e375f6ae0b4dc60842d:reference/tuple/tuple/op_less.md</id>
      <updated>2022-12-14T19:07:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/op_less.md b/reference/tuple/tuple/op_less.md
index 51a23ece9..00b54db38 100644
--- a/reference/tuple/tuple/op_less.md
+++ b/reference/tuple/tuple/op_less.md
@@ -6,18 +6,19 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   bool operator&amp;lt;(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                 const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // C++11
+                 const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // (1) C++11
 
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   bool operator&amp;lt;(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                 const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // C++14
+                 const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // (1) C++14
 }
 ```
 
 ## 概要
-2つの`tuple`において、左辺が右辺より小さいかの判定を行う。
+2つの`tuple`において、左辺が右辺より小さいかの比較を行う。
 
 
 ## 要件
@@ -84,3 +85,5 @@ false
 
 ## 参照
 - [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- tuple : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/op_less_equal.html"/>
      <id>4292d91a27752b93dae88e375f6ae0b4dc60842d:reference/tuple/tuple/op_less_equal.md</id>
      <updated>2022-12-14T19:07:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/op_less_equal.md b/reference/tuple/tuple/op_less_equal.md
index b2f88bf97..68f5653f8 100644
--- a/reference/tuple/tuple/op_less_equal.md
+++ b/reference/tuple/tuple/op_less_equal.md
@@ -6,18 +6,19 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   bool operator&amp;lt;=(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                  const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);           // C++11
+                  const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u);           // (1) C++11
 
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   constexpr bool operator&amp;lt;=(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                            const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // C++14
+                            const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // (1) C++14
 }
 ```
 
 ## 概要
-2つの`tuple`において、左辺が右辺以下かの判定を行う。
+2つの`tuple`において、左辺が右辺以下かの比較を行う。
 
 
 ## 要件
@@ -74,10 +75,11 @@ true
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
-## 参照
-- [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
-
-
 ## 関連項目
 - [`operator&amp;lt;`](op_less.md)
 
+
+## 参照
+- [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- tuple : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/op_not_equal.html"/>
      <id>4292d91a27752b93dae88e375f6ae0b4dc60842d:reference/tuple/tuple/op_not_equal.md</id>
      <updated>2022-12-14T19:07:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/op_not_equal.md b/reference/tuple/tuple/op_not_equal.md
index f1b0a16e9..fab8da6ee 100644
--- a/reference/tuple/tuple/op_not_equal.md
+++ b/reference/tuple/tuple/op_not_equal.md
@@ -6,13 +6,14 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   bool operator!=(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                  const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // C++11
+                  const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // (1) C++11
 
   template&amp;lt;class... TTypes, class... UTypes&amp;gt;
   bool operator!=(const tuple&amp;lt;TTypes...&amp;gt;&amp;amp; t,
-                  const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // C++14
+                  const tuple&amp;lt;UTypes...&amp;gt;&amp;amp; u); // (1) C++14
 }
 ```
 * tuple[link ../tuple.md]
@@ -70,10 +71,11 @@ true
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
-## 参照
-- [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
-
-
 ## 関連項目
 - [`operator==`](op_equal.md)
 
+
+## 参照
+- [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pair -- pair : 三方比較演算子の追加と自動導出に対応</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair.html"/>
      <id>622ce4429624102530d65c85666f47af6352d12a:reference/utility/pair.md</id>
      <updated>2022-12-14T18:45:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair.md b/reference/utility/pair.md
index 52c88b02d..23ca91554 100644
--- a/reference/utility/pair.md
+++ b/reference/utility/pair.md
@@ -47,9 +47,10 @@ namespace std {
 ### 比較演算子
 
 | 名前 | 説明 | 対応バージョン |
-|--------------------------------------------|----------------------------|-------|
+|------------------------------------------|----------------------------|-------|
 | [`operator==`](pair/op_equal.md)         | 等値比較を行う | |
 | [`operator!=`](pair/op_not_equal.md)     | 非等値比較を行う | |
+| [`operator&amp;lt;=&amp;gt;`](pair/op_compare_3way.md) | 三方比較を行う | C++20 |
 | [`operator&amp;lt;`](pair/op_less.md)           | 左辺が右辺よりも小さいか判定を行う | |
 | [`operator&amp;lt;=`](pair/op_less_equal.md)    | 左辺が右辺以下か判定を行う | |
 | [`operator&amp;gt;`](pair/op_greater.md)        | 左辺が右辺より大きいか判定を行う | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- pair : 三方比較演算子の追加と自動導出に対応</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_compare_3way.html"/>
      <id>622ce4429624102530d65c85666f47af6352d12a:reference/utility/pair/op_compare_3way.md</id>
      <updated>2022-12-14T18:45:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_compare_3way.md b/reference/utility/pair/op_compare_3way.md
new file mode 100644
index 000000000..142fc4c8a
--- /dev/null
+++ b/reference/utility/pair/op_compare_3way.md
@@ -0,0 +1,62 @@
+# operator&amp;lt;=&amp;gt;
+* utility[meta header]
+* std[meta namespace]
+* pair[meta class]
+* function template[meta id-type]
+
+```cpp
+friend constexpr common_comparison_category_t&amp;lt;synth-three-way-result&amp;lt;T1&amp;gt;, synth-three-way-result&amp;lt;T2&amp;gt;&amp;gt;
+   operator&amp;lt;=&amp;gt;(const pair&amp;amp; x, const pair&amp;amp; y);
+```
+* common_comparison_category_t[link /reference/compare/common_comparison_category.md]
+
+## 概要
+2つの`pair`の三方比較を行う。
+
+
+## 効果
+以下と等価：
+
+```cpp
+if (auto c = synth-three-way(x.first, y.first); c != 0)
+  return c;
+return synth-three-way(x.second, y.second);
+```
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;utility&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::pair&amp;lt;int, std::string&amp;gt; p1(1, &amp;#34;aaa&amp;#34;);
+  std::pair&amp;lt;int, std::string&amp;gt; p2(1, &amp;#34;aaa&amp;#34;);
+  std::pair&amp;lt;int, std::string&amp;gt; p3(2, &amp;#34;bbb&amp;#34;);
+
+  assert((p1 &amp;lt;=&amp;gt; p2) == 0);
+  assert((p1 &amp;lt;=&amp;gt; p3) != 0);
+  assert(p1 &amp;lt; p3);
+  assert(p1 &amp;lt;= p3);
+  assert(p3 &amp;gt; p1);
+  assert(p3 &amp;gt;= p1);
+}
+```
+
+### 出力
+```
+```
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- pair : 三方比較演算子の追加と自動導出に対応</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_equal.html"/>
      <id>622ce4429624102530d65c85666f47af6352d12a:reference/utility/pair/op_equal.md</id>
      <updated>2022-12-14T18:45:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_equal.md b/reference/utility/pair/op_equal.md
index 622af3e04..c131b44a0 100644
--- a/reference/utility/pair/op_equal.md
+++ b/reference/utility/pair/op_equal.md
@@ -6,19 +6,35 @@
 ```cpp
 namespace std {
   template &amp;lt;class T1, class T2&amp;gt;
-  bool operator==(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // C++03
+  bool operator==(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // (1) C++03
 
   template &amp;lt;class T1, class T2&amp;gt;
-  constexpr bool operator==(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // C++14
+  constexpr bool operator==(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // (1) C++14
+
+  template &amp;lt;class T1, class T2&amp;gt;
+  struct pair {
+    friend constexpr bool operator==(const pair&amp;amp;, const pair&amp;amp;) = default; // (1) C++20
+
+    friend constexpr bool operator==(const pair&amp;amp; x, const pair&amp;amp; y)        // (2) C++20
+        requires (is_reference_v&amp;lt;T1&amp;gt; || is_reference_v&amp;lt;T2&amp;gt;);
+  };
 }
 ```
+* is_reference_v[link /reference/type_traits/is_reference.md]
 
 ## 概要
 2つの`pair`の等値比較を行う
 
 
 ## 戻り値
-`x.first == y.first &amp;amp;&amp;amp; x.second == y.second`
+```cpp
+return x.first == y.first &amp;amp;&amp;amp; x.second == y.second;
+```
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
 
 
 ## 例
@@ -47,3 +63,5 @@ false
 
 ## 参照
 - [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- pair : 三方比較演算子の追加と自動導出に対応</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_greater.html"/>
      <id>622ce4429624102530d65c85666f47af6352d12a:reference/utility/pair/op_greater.md</id>
      <updated>2022-12-14T18:45:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_greater.md b/reference/utility/pair/op_greater.md
index b81b2ac31..f0ceec80a 100644
--- a/reference/utility/pair/op_greater.md
+++ b/reference/utility/pair/op_greater.md
@@ -5,11 +5,12 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T1, class T2&amp;gt;
-  bool operator&amp;gt;(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // C++03
+  bool operator&amp;gt;(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // (1) C++03
 
   template &amp;lt;class T1, class T2&amp;gt;
-  constexpr bool operator&amp;gt;(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // C++14
+  constexpr bool operator&amp;gt;(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // (1) C++14
 }
 ```
 
@@ -47,3 +48,5 @@ true
 
 ## 参照
 - [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- pair : 三方比較演算子の追加と自動導出に対応</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_greater_equal.html"/>
      <id>622ce4429624102530d65c85666f47af6352d12a:reference/utility/pair/op_greater_equal.md</id>
      <updated>2022-12-14T18:45:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_greater_equal.md b/reference/utility/pair/op_greater_equal.md
index 6e3df6162..474a12715 100644
--- a/reference/utility/pair/op_greater_equal.md
+++ b/reference/utility/pair/op_greater_equal.md
@@ -5,11 +5,12 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T1, class T2&amp;gt;
-  bool operator&amp;gt;=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // C++03
+  bool operator&amp;gt;=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // (1) C++03
 
   template &amp;lt;class T1, class T2&amp;gt;
-  constexpr bool operator&amp;gt;=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // C++14
+  constexpr bool operator&amp;gt;=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // (1) C++14
 }
 ```
 
@@ -18,7 +19,9 @@ namespace std {
 
 
 ## 戻り値
-`!(x &amp;lt; y)`
+```cpp
+return !(x &amp;lt; y);
+```
 
 
 ## 例
@@ -50,3 +53,5 @@ true
 
 ## 参照
 - [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- pair : 三方比較演算子の追加と自動導出に対応</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_less.html"/>
      <id>622ce4429624102530d65c85666f47af6352d12a:reference/utility/pair/op_less.md</id>
      <updated>2022-12-14T18:45:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_less.md b/reference/utility/pair/op_less.md
index 1048bc66f..8ef47d9ee 100644
--- a/reference/utility/pair/op_less.md
+++ b/reference/utility/pair/op_less.md
@@ -5,11 +5,12 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T1, class T2&amp;gt;
-  bool operator&amp;lt;(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // C++03
+  bool operator&amp;lt;(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // (1) C++03
 
   template &amp;lt;class T1, class T2&amp;gt;
-  constexpr bool operator&amp;lt;(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // C++14
+  constexpr bool operator&amp;lt;(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // (1) C++14
 }
 ```
 
@@ -18,7 +19,9 @@ namespace std {
 
 
 ## 戻り値
-`x.first &amp;lt; y.first || (!(y.first &amp;lt; x.first) &amp;amp;&amp;amp; x.second &amp;lt; y.second)`
+```cpp
+return x.first &amp;lt; y.first || (!(y.first &amp;lt; x.first) &amp;amp;&amp;amp; x.second &amp;lt; y.second);
+```
 
 
 ## 例
@@ -51,4 +54,5 @@ false
 
 ## 参照
 - [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- pair : 三方比較演算子の追加と自動導出に対応</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_less_equal.html"/>
      <id>622ce4429624102530d65c85666f47af6352d12a:reference/utility/pair/op_less_equal.md</id>
      <updated>2022-12-14T18:45:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_less_equal.md b/reference/utility/pair/op_less_equal.md
index 49e977e1e..856d7eeb2 100644
--- a/reference/utility/pair/op_less_equal.md
+++ b/reference/utility/pair/op_less_equal.md
@@ -5,11 +5,12 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T1, class T2&amp;gt;
-  bool operator&amp;lt;=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // C++03
+  bool operator&amp;lt;=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // (1) C++03
 
   template &amp;lt;class T1, class T2&amp;gt;
-  constexpr bool operator&amp;lt;=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // C++14
+  constexpr bool operator&amp;lt;=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // (1) C++14
 }
 ```
 
@@ -18,7 +19,9 @@ namespace std {
 
 
 ## 戻り値
-`!(y &amp;lt; x)`
+```cpp
+return !(y &amp;lt; x);
+```
 
 
 ## 例
@@ -50,3 +53,5 @@ true
 
 ## 参照
 - [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- pair : 三方比較演算子の追加と自動導出に対応</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_not_equal.html"/>
      <id>622ce4429624102530d65c85666f47af6352d12a:reference/utility/pair/op_not_equal.md</id>
      <updated>2022-12-14T18:45:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_not_equal.md b/reference/utility/pair/op_not_equal.md
index 1ec4471c2..102e9c193 100644
--- a/reference/utility/pair/op_not_equal.md
+++ b/reference/utility/pair/op_not_equal.md
@@ -5,11 +5,12 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T1, class T2&amp;gt;
-  bool operator!=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // C++03
+  bool operator!=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y);           // (1) C++03
 
   template &amp;lt;class T1, class T2&amp;gt;
-  constexpr bool operator!=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // C++14
+  constexpr bool operator!=(const pair&amp;lt;T1, T2&amp;gt;&amp;amp; x, const pair&amp;lt;T1, T2&amp;gt;&amp;amp; y); // (1) C++14
 }
 ```
 
@@ -18,7 +19,9 @@ namespace std {
 
 
 ## 戻り値
-`!(x == y)`
+```cpp
+return !(x == y);
+```
 
 
 ## 例
@@ -47,3 +50,5 @@ true
 
 ## 参照
 - [N3471 Constexpr Library Additions: utilities, v3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3471.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error_category -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_category.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/error_category.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_category.md b/reference/system_error/error_category.md
index 887f2efbf..26ee36c2d 100644
--- a/reference/system_error/error_category.md
+++ b/reference/system_error/error_category.md
@@ -17,6 +17,7 @@ namespace std {
 
 
 ## メンバ関数
+### 構築・破棄
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
@@ -24,10 +25,19 @@ namespace std {
 | [`(destructor)`](error_category/op_destructor.md)   | デストラクタ | C++11 |
 | `operator=(const error_category&amp;amp;) = delete`           | 代入演算子(使用不可) | C++11 |
 | [`default_error_condition`](error_category/default_error_condition.md) | エラー値と自身のカテゴリから`error_condition`を生成 | C++11 |
+
+### 比較
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
 | [`equivalent`](error_category/equivalent.md) | エラーコードとエラー状態の等値比較 | C++11 |
-| [`operator==`](error_category/op_equal.md) | 等値比較 | C++11 |
+| [`operator==`](error_category/op_equal.md) | 等値比較 (C++20から`operator&amp;lt;=&amp;gt;`により使用可能) | C++11 |
 | [`operator!=`](error_category/op_not_equal.md) | 非等値比較 | C++11 |
-| [`operator&amp;lt;`](error_category/op_less.md) | 小なり比較 | C++11 |
+| [`operator&amp;lt;=&amp;gt;`](error_category/op_compare_3way.md) | 三方比較 | C++20 |
+| [`operator&amp;lt;`](error_category/op_less.md) | 左辺が右辺より小さいか比較 (C++20から`operator&amp;lt;=&amp;gt;`により使用可能) | C++11 |
+| `bool operator&amp;lt;=(const error_category&amp;amp;) const noexcept;` | 左辺が右辺以下か比較 (`operator&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;(const error_category&amp;amp;) const noexcept;` | 左辺が右辺より大きいか比較 (`operator&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;=(const error_category&amp;amp;) const noexcept;` | 左辺が右辺以上か比較 (`operator&amp;lt;=&amp;gt;`により使用可能) | C++20 |
 
 ### 純粋仮想関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_category/op_compare_3way.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/error_category/op_compare_3way.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_category/op_compare_3way.md b/reference/system_error/error_category/op_compare_3way.md
new file mode 100644
index 000000000..ca3e16c59
--- /dev/null
+++ b/reference/system_error/error_category/op_compare_3way.md
@@ -0,0 +1,79 @@
+# operator&amp;lt;=&amp;gt;
+* system_error[meta header]
+* std[meta namespace]
+* error_category[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+strong_ordering operator&amp;lt;=&amp;gt;(const error_category&amp;amp; rhs) const noexcept; // (1) C++11
+```
+
+## 概要
+`error_category`オブジェクトの三方比較を行う。
+
+
+## 戻り値
+```cpp
+return compare_three_way()(this, &amp;amp;rhs);
+```
+* compare_three_way[link /reference/compare/compare_three_way.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;system_error&amp;gt;
+
+int main()
+{
+  const std::error_category&amp;amp; a = std::generic_category();
+  const std::error_category&amp;amp; b = std::generic_category();
+  const std::error_category&amp;amp; c = std::system_category();
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  std::cout &amp;lt;&amp;lt; ((a &amp;lt;=&amp;gt; b) == 0) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (a &amp;lt; c) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (a &amp;lt;= c) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (a &amp;gt; c) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (a &amp;gt;= c) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::generic_category()[link /reference/system_error/generic_category.md]
+* std::system_category()[link /reference/system_error/system_category.md]
+
+### 出力例
+```
+true
+false
+false
+true
+true
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_category/op_equal.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/error_category/op_equal.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_category/op_equal.md b/reference/system_error/error_category/op_equal.md
index c1717b523..b1f26b0c3 100644
--- a/reference/system_error/error_category/op_equal.md
+++ b/reference/system_error/error_category/op_equal.md
@@ -6,7 +6,7 @@
 * cpp11[meta cpp]
 
 ```cpp
-bool operator==(const error_category&amp;amp; rhs) const noexcept;
+bool operator==(const error_category&amp;amp; rhs) const noexcept; // (1) C++11
 ```
 
 ## 概要
@@ -23,6 +23,11 @@ bool operator==(const error_category&amp;amp; rhs) const noexcept;
 投げない
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_category/op_less.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/error_category/op_less.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_category/op_less.md b/reference/system_error/error_category/op_less.md
index 873dfaeee..6274b0373 100644
--- a/reference/system_error/error_category/op_less.md
+++ b/reference/system_error/error_category/op_less.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-bool operator&amp;lt;(const error_category&amp;amp; rhs) const noexcept;
+// operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
+bool operator&amp;lt;(const error_category&amp;amp; rhs) const noexcept; // (1) C++11
 ```
 
 ## 概要
@@ -61,3 +62,5 @@ false
 
 
 ## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_category/op_not_equal.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/error_category/op_not_equal.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_category/op_not_equal.md b/reference/system_error/error_category/op_not_equal.md
index eedbc9a9d..aebcc0c34 100644
--- a/reference/system_error/error_category/op_not_equal.md
+++ b/reference/system_error/error_category/op_not_equal.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-bool operator!=(const error_category&amp;amp; rhs) const noexcept;
+// operator==により、以下の演算子が使用可能になる (C++20)
+bool operator!=(const error_category&amp;amp; rhs) const noexcept; // (1) C++11
 ```
 
 ## 概要
@@ -61,3 +62,5 @@ true
 
 
 ## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error_code -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_code.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/error_code.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_code.md b/reference/system_error/error_code.md
index e7528921a..d2b1e46f3 100644
--- a/reference/system_error/error_code.md
+++ b/reference/system_error/error_code.md
@@ -37,8 +37,12 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | [`operator==`](op_equal.md) | 等値比較 | C++11 |
-| [`operator!=`](op_not_equal.md) | 非等値比較 | C++11 |
-| [`operator&amp;lt;`](error_code/op_less.md) | 左辺が右辺より小さいか判定する | C++11 |
+| [`operator!=`](op_not_equal.md) | 非等値比較 (C++20から`operator&amp;lt;=&amp;gt;`により使用可能) | C++11 |
+| [`operator&amp;lt;=&amp;gt;`](error_code/op_compare_3way.md) | 三方比較 | C++20 |
+| [`operator&amp;lt;`](error_code/op_less.md) | 左辺が右辺より小さいか判定する (C++20から`operator&amp;lt;=&amp;gt;`により使用可能) | C++11 |
+| `bool operator&amp;lt;=(const error_code&amp;amp;, const error_code&amp;amp;) noexcept;` | 左辺が右辺以下か判定する (`operator&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;(const error_code&amp;amp;, const error_code&amp;amp;) noexcept;` | 左辺が右辺より大きいか判定する (`operator&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;=(const error_code&amp;amp;, const error_code&amp;amp;) noexcept;` | 左辺が右辺以上か判定する (`operator&amp;lt;=&amp;gt;`により使用可能) | C++20 |
 | [`operator&amp;lt;&amp;lt;`](error_code/op_ostream.md) | ストリームへ出力 | C++11 |
 | [`make_error_code`](make_error_code.md) | `errc`から`error_code`オブジェクトを生成する | C++11 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_code/op_compare_3way.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/error_code/op_compare_3way.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_code/op_compare_3way.md b/reference/system_error/error_code/op_compare_3way.md
new file mode 100644
index 000000000..e69eca531
--- /dev/null
+++ b/reference/system_error/error_code/op_compare_3way.md
@@ -0,0 +1,78 @@
+# operator&amp;lt;=&amp;gt;
+* system_error[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  strong_ordering
+    operator&amp;lt;=&amp;gt;(const error_code&amp;amp; lhs,
+                const error_code&amp;amp; rhs) noexcept; // (1) C++20
+}
+```
+
+## 概要
+`error_code`オブジェクトの三方比較を行う。
+
+
+## 効果
+以下と等価：
+
+```cpp
+if (auto c = lhs.category() &amp;lt;=&amp;gt; rhs.category(); c != 0)
+  return c;
+return lhs.value() &amp;lt;=&amp;gt; rhs.value();
+```
+* category()[link category.md]
+* value()[link value.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;system_error&amp;gt;
+
+int main()
+{
+  std::error_code ec1 = std::make_error_code(std::errc::invalid_argument);
+  std::error_code ec2 = std::make_error_code(std::errc::invalid_argument);
+  std::error_code ec3 = std::make_error_code(std::errc::permission_denied);
+
+  assert((ec1 &amp;lt;=&amp;gt; ec2) == 0);
+  assert((ec1 &amp;lt;=&amp;gt; ec3) != 0);
+}
+```
+* std::make_error_code[link /reference/system_error/make_error_code.md]
+* std::errc::invalid_argument[link /reference/system_error/errc.md]
+* std::errc::permission_denied[link /reference/system_error/errc.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_code/op_less.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/error_code/op_less.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_code/op_less.md b/reference/system_error/error_code/op_less.md
index 4a547de6c..ff4d23a49 100644
--- a/reference/system_error/error_code/op_less.md
+++ b/reference/system_error/error_code/op_less.md
@@ -6,7 +6,10 @@
 
 ```cpp
 namespace std {
-  bool operator&amp;lt;(const error_code&amp;amp; lhs, const error_code&amp;amp; rhs) noexcept;
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
+  bool
+    operator&amp;lt;(const error_code&amp;amp; lhs,
+              const error_code&amp;amp; rhs) noexcept; // (1) C++11
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error_condition -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/error_condition.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition.md b/reference/system_error/error_condition.md
index ffa845b96..5f6a2ef79 100644
--- a/reference/system_error/error_condition.md
+++ b/reference/system_error/error_condition.md
@@ -40,8 +40,13 @@ Visual C++ 2010、GCC 4.6.1では[`generic_category()`](generic_category.md)と[
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | [`operator==`](op_equal.md) | 等値比較 | C++11 |
-| [`operator!=`](op_not_equal.md) | 非等値比較 | C++11 |
-| [`operator&amp;lt;`](error_condition/op_less.md) | 左辺が右辺より小さいか判定する | C++11 |
+| [`operator!=`](op_not_equal.md) | 非等値比較 (C++20から`operator&amp;lt;=&amp;gt;`により使用可能) | C++11 |
+| [`operator&amp;lt;=&amp;gt;`](error_condition/op_compare_3way.md) | 三方比較 | C++20 |
+| [`operator&amp;lt;`](error_condition/op_less.md) | 左辺が右辺より小さいか判定する (C++20から`operator&amp;lt;=&amp;gt;`により使用可能) | C++11 |
+| `bool operator&amp;lt;=(const error_condition&amp;amp;, const error_condition&amp;amp;) noexcept;` | 左辺が右辺以下か判定する (`operator&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;(const error_condition&amp;amp;, const error_condition&amp;amp;) noexcept;` | 左辺が右辺より大きいか判定する (`operator&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;=(const error_condition&amp;amp;, const error_condition&amp;amp;) noexcept;` | 左辺が右辺以上か判定する (`operator&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+
 | [`make_error_condition`](make_error_condition.md) | `errc`から`error_condition`オブジェクトを生成する | C++11 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition/op_compare_3way.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/error_condition/op_compare_3way.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition/op_compare_3way.md b/reference/system_error/error_condition/op_compare_3way.md
new file mode 100644
index 000000000..0e7991235
--- /dev/null
+++ b/reference/system_error/error_condition/op_compare_3way.md
@@ -0,0 +1,78 @@
+# operator&amp;lt;=&amp;gt;
+* system_error[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  strong_ordering
+    operator&amp;lt;=&amp;gt;(const error_condition&amp;amp; lhs,
+                const error_condition&amp;amp; rhs) noexcept; // (1) C++20
+}
+```
+
+## 概要
+`error_condition`オブジェクトの三方比較を行う。
+
+
+## 効果
+以下と等価：
+
+```cpp
+if (auto c = lhs.category() &amp;lt;=&amp;gt; rhs.category(); c != 0)
+  return c;
+return lhs.value() &amp;lt;=&amp;gt; rhs.value();
+```
+* category()[link category.md]
+* value()[link value.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;system_error&amp;gt;
+
+int main()
+{
+  std::error_condition ec1 = std::make_error_condition(std::errc::invalid_argument);
+  std::error_condition ec2 = std::make_error_condition(std::errc::invalid_argument);
+  std::error_condition ec3 = std::make_error_condition(std::errc::permission_denied);
+
+  assert((ec1 &amp;lt;=&amp;gt; ec2) == 0);
+  assert((ec1 &amp;lt;=&amp;gt; ec3) != 0);
+}
+```
+* std::make_error_condition[link /reference/system_error/make_error_condition.md]
+* std::errc::invalid_argument[link /reference/system_error/errc.md]
+* std::errc::permission_denied[link /reference/system_error/errc.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition/op_less.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/error_condition/op_less.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition/op_less.md b/reference/system_error/error_condition/op_less.md
index 033d18ff0..9ab45fb4c 100644
--- a/reference/system_error/error_condition/op_less.md
+++ b/reference/system_error/error_condition/op_less.md
@@ -6,7 +6,10 @@
 
 ```cpp
 namespace std {
-  bool operator&amp;lt;(const error_condition&amp;amp; lhs, const error_condition&amp;amp; rhs) noexcept;
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
+  bool
+    operator&amp;lt;(const error_condition&amp;amp; lhs,
+              const error_condition&amp;amp; rhs) noexcept; // (1) C++11
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/op_equal.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/op_equal.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/op_equal.md b/reference/system_error/op_equal.md
index 87ac1967a..b6221a0e7 100644
--- a/reference/system_error/op_equal.md
+++ b/reference/system_error/op_equal.md
@@ -6,10 +6,12 @@
 
 ```cpp
 namespace std {
-  bool operator==(const error_code&amp;amp; lhs, const error_code&amp;amp; rhs) noexcept;           // (1)
-  bool operator==(const error_code&amp;amp; lhs, const error_condition&amp;amp; rhs) noexcept;      // (2)
-  bool operator==(const error_condition&amp;amp; lhs, const error_code&amp;amp; rhs) noexcept;      // (3)
-  bool operator==(const error_condition&amp;amp; lhs, const error_condition&amp;amp; rhs) noexcept; // (4)
+  bool operator==(const error_code&amp;amp; lhs, const error_code&amp;amp; rhs) noexcept;           // (1) C++11
+  bool operator==(const error_code&amp;amp; lhs, const error_condition&amp;amp; rhs) noexcept;      // (2) C++11
+  bool operator==(const error_condition&amp;amp; lhs, const error_condition&amp;amp; rhs) noexcept; // (3) C++11
+
+  // (2)により以下のオーバーロードが使用可能になる (C++20)
+  bool operator==(const error_condition&amp;amp; lhs, const error_code&amp;amp; rhs) noexcept;      // (4) C++11
 }
 ```
 * error_code[link /reference/system_error/error_code.md]
@@ -21,7 +23,6 @@ namespace std {
 
 ## 戻り値
 - (1) :
-
     ```cpp
     lhs.category() == rhs.category() &amp;amp;&amp;amp; lhs.value() == rhs.value()
     ```
@@ -30,7 +31,6 @@ namespace std {
 
 
 - (2) :
-
     ```cpp
     lhs.category().equivalent(lhs.value(), rhs) || rhs.category().equivalent(lhs, rhs.value())
     ```
@@ -40,9 +40,15 @@ namespace std {
     * lhs.value()[link error_code/value.md]
     * rhs.value()[link error_condition/value.md]
 
-
 - (3) :
+    ```cpp
+    lhs.category() == rhs.category() &amp;amp;&amp;amp; lhs.value() == rhs.value()
+    ```
+    * category()[link error_condition/category.md]
+    * value()[link error_condition/value.md]
 
+
+- (4) :
     ```cpp
     rhs.category().equivalent(rhs.value(), lhs) || lhs.category().equivalent(rhs, lhs.value())
     ```
@@ -53,15 +59,6 @@ namespace std {
     * rhs.value()[link error_code/value.md]
 
 
-- (4) :
-
-    ```cpp
-    lhs.category() == rhs.category() &amp;amp;&amp;amp; lhs.value() == rhs.value()
-    ```
-    * category()[link error_condition/category.md]
-    * value()[link error_condition/value.md]
-
-
 ## 例外
 投げない
 
@@ -120,5 +117,5 @@ error_condition == error_condition : false
 
 
 ## 参照
-
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- error_code, error_condition, error_category : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/system_error/op_not_equal.html"/>
      <id>26eca643fa3060f50feedb62a0bb4596382ccbb0:reference/system_error/op_not_equal.md</id>
      <updated>2022-12-14T02:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/op_not_equal.md b/reference/system_error/op_not_equal.md
index 9c6d48b21..0e061e8b6 100644
--- a/reference/system_error/op_not_equal.md
+++ b/reference/system_error/op_not_equal.md
@@ -6,10 +6,11 @@
 
 ```cpp
 namespace std {
-  bool operator!=(const error_code&amp;amp; lhs, const error_code&amp;amp; rhs) noexcept;
-  bool operator!=(const error_code&amp;amp; lhs, const error_condition&amp;amp; rhs) noexcept;
-  bool operator!=(const error_condition&amp;amp; lhs, const error_code&amp;amp; rhs) noexcept;
-  bool operator!=(const error_condition&amp;amp; lhs, const error_condition&amp;amp; rhs) noexcept;
+  // operator==により、以下の演算子が使用可能になる (C++20)
+  bool operator!=(const error_code&amp;amp; lhs, const error_code&amp;amp; rhs) noexcept;           // (1) C++11
+  bool operator!=(const error_code&amp;amp; lhs, const error_condition&amp;amp; rhs) noexcept;      // (2) C++11
+  bool operator!=(const error_condition&amp;amp; lhs, const error_code&amp;amp; rhs) noexcept;      // (3) C++11
+  bool operator!=(const error_condition&amp;amp; lhs, const error_condition&amp;amp; rhs) noexcept; // (4) C++11
 }
 ```
 * error_code[link error_code.md]
@@ -80,5 +81,10 @@ error_condition != error_condition : true
 - [Visual C++](/implementation.md#visual_cpp): 2010
 
 
+## 関連項目
+- [`operator==()`](op_equal.md)
+
+
 ## 参照
-[`operator==()`](op_equal.md)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unique_ptr -- unique_ptr : operator&lt;&lt;のページを追加</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr.html"/>
      <id>e06b66c0dddcbdbc2252ccb005108b4edc0422c6:reference/memory/unique_ptr.md</id>
      <updated>2022-12-13T23:12:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr.md b/reference/memory/unique_ptr.md
index 9f1a4861c..cde23f7d4 100644
--- a/reference/memory/unique_ptr.md
+++ b/reference/memory/unique_ptr.md
@@ -80,7 +80,7 @@ namespace std {
 | [`operator&amp;gt;=`](unique_ptr/op_greater_equal.md) | 左辺が右辺以上かを判定する                | C++11 |
 | [`swap`](unique_ptr/swap_free.md)              | 2つの`unique_ptr`オブジェクトを入れ替える | C++11 |
 | [`make_unique`](make_unique.md)                | `unique_ptr`を構築するヘルパ関数          | C++14 |
-| `template&amp;lt;class E, class T, class Y, class D&amp;gt;`&amp;lt;br/&amp;gt;`basic_ostream&amp;lt;E, T&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;E, T&amp;gt;&amp;amp; os, const unique_ptr&amp;lt;Y, D&amp;gt;&amp;amp; p);`                | 保持するポインタ値を出力する。この関数は`os &amp;lt;&amp;lt; p.get()`が有効である場合にのみオーバーロード解決に参加する。          | C++17 |
+| [`operator&amp;lt;&amp;lt;`](unique_ptr/op_ostream.md)       | ストリームへ出力する                      | C++17 |
 
 ## ハッシュサポート
 
@@ -135,6 +135,11 @@ hoge::~hoge()
 - [Visual C++](/implementation.md#visual_cpp): 2010
 
 
+## 関連項目
+
+- [`std::shared_ptr`の推論補助](/reference/memory/shared_ptr/op_deduction_guide.md)
+
+
 ## 参照
 - [C++11 右辺値参照・ムーブセマンティクス](/lang/cpp11/rvalue_ref_and_move_semantics.md)
 - [Rvalue Reference Recommendations for Chapter 20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1856.html)
@@ -143,8 +148,4 @@ hoge::~hoge()
     - `unique_ptr&amp;lt;void, Deleter&amp;gt;`を許可するために、インタフェースを改良した経緯
 - [LWG Issue 762. `std::unique_ptr` requires complete type?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#762)
 - [N4089 Safe conversions in `unique_ptr&amp;lt;T[]&amp;gt;`, revision 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4089.pdf)
-- [LWG Issue 2948. `unique_ptr` does not define `operator&amp;lt;&amp;lt;` for stream output](https://wg21.cmeerw.net/lwg/issue2948)
-
-## 関連項目
 
-- [`std::shared_ptr`の推論補助](/reference/memory/shared_ptr/op_deduction_guide.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- unique_ptr : operator&lt;&lt;のページを追加</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_ostream.html"/>
      <id>e06b66c0dddcbdbc2252ccb005108b4edc0422c6:reference/memory/unique_ptr/op_ostream.md</id>
      <updated>2022-12-13T23:12:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_ostream.md b/reference/memory/unique_ptr/op_ostream.md
new file mode 100644
index 000000000..fca2caab9
--- /dev/null
+++ b/reference/memory/unique_ptr/op_ostream.md
@@ -0,0 +1,68 @@
+# operator&amp;lt;&amp;lt;
+* memory[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp17[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class E, class T, class Y, class D&amp;gt;
+  std::basic_ostream&amp;lt;E, T&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;E, T&amp;gt;&amp;amp; os,
+               const unique_ptr&amp;lt;Y, D&amp;gt;&amp;amp; p); // (1) C++17
+}
+```
+
+## 概要
+ストリームへ出力する。
+
+
+## テンプレートパラメータ制約
+
+- `os &amp;lt;&amp;lt; p.get()`が妥当な式であること
+
+
+## 効果
+以下と等価：
+
+```cpp
+os &amp;lt;&amp;lt; p.get();
+```
+* get()[link get.md]
+
+
+## 戻り値
+`os`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;memory&amp;gt;
+
+int main()
+{
+  std::unique_ptr&amp;lt;int&amp;gt; p(new int(3));
+
+  std::cout &amp;lt;&amp;lt; p &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力例
+```
+0x14d1b20
+```
+
+## バージョン
+### 言語
+- C++17
+
+### 処理系
+- [GCC](/implementation.md#gcc): 10
+- [Clang](/implementation.md#clang): 7.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [LWG Issue 2948. `unique_ptr` does not define `operator&amp;lt;&amp;lt;` for stream output](https://wg21.cmeerw.net/lwg/issue2948)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shared_ptr -- shared_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr.html"/>
      <id>dc3c3e9d2bdd29f5f5c105f00210359b4c5416da:reference/memory/shared_ptr.md</id>
      <updated>2022-12-13T23:05:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr.md b/reference/memory/shared_ptr.md
index 6cf2c2537..e997226fc 100644
--- a/reference/memory/shared_ptr.md
+++ b/reference/memory/shared_ptr.md
@@ -58,9 +58,10 @@ namespace std {
 ## 非メンバ関数
 
 | 名前 | 説明 | 対応バージョン |
-|----------------------------------------------------------------|-------------------------------------------|-------|
+|--------------------------------------------------------------|-------------------------------------------|-------|
 | [`operator==`](shared_ptr/op_equal.md)                       | 等値比較                                  | C++11 |
 | [`operator!=`](shared_ptr/op_not_equal.md)                   | 非等値比較                                | C++11 |
+| [`operator&amp;lt;=&amp;gt;`](shared_ptr/op_compare_3way.md)               | 三方比較                                  | C++20 |
 | [`operator&amp;lt;`](shared_ptr/op_less.md)                         | 左辺が右辺より小さいかを判定する          | C++11 |
 | [`operator&amp;lt;=`](shared_ptr/op_less_equal.md)                  | 左辺が右辺以下かを判定する                | C++11 |
 | [`operator&amp;gt;`](shared_ptr/op_greater.md)                      | 左辺が右辺より大きいかを判定する          | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- shared_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_compare_3way.html"/>
      <id>dc3c3e9d2bdd29f5f5c105f00210359b4c5416da:reference/memory/shared_ptr/op_compare_3way.md</id>
      <updated>2022-12-13T23:05:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_compare_3way.md b/reference/memory/shared_ptr/op_compare_3way.md
new file mode 100644
index 000000000..2938f9bbb
--- /dev/null
+++ b/reference/memory/shared_ptr/op_compare_3way.md
@@ -0,0 +1,93 @@
+# operator&amp;lt;=&amp;gt;
+* memory[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class T, class U&amp;gt;
+  strong_ordering
+    operator&amp;lt;=&amp;gt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
+                const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++20
+
+  template &amp;lt;class T&amp;gt;
+  strong_ordering
+    operator&amp;lt;=&amp;gt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
+                nullptr_t) noexcept;              // (2) C++20
+}
+```
+* nullptr_t[link /reference/cstddef/nullptr_t.md]
+
+## 概要
+`shared_ptr`オブジェクトの三方比較を行う。
+
+
+## 戻り値
+- (1) :
+    ```cpp
+    return compare_three_way()(a.get(), b.get());
+    ```
+    * compare_three_way[link /reference/compare/compare_three_way.md]
+    * get()[link get.md]
+
+- (2) :
+    ```cpp
+    return compare_three_way()(a.get(), nullptr);
+    ```
+    * compare_three_way[link /reference/compare/compare_three_way.md]
+    * get()[link get.md]
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;memory&amp;gt;
+
+int main()
+{
+  std::shared_ptr&amp;lt;int&amp;gt; p1(new int(3));
+  std::shared_ptr&amp;lt;int&amp;gt; p2 = p1;
+  if ((p1 &amp;lt;=&amp;gt; p2) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+
+  std::shared_ptr&amp;lt;int&amp;gt; p3;
+  if ((p3 &amp;lt;=&amp;gt; nullptr) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;p3 is nullptr&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+
+  if ((nullptr &amp;lt;=&amp;gt; p3) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;p3 is nullptr&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+equal
+p3 is nullptr
+p3 is nullptr
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- shared_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_equal.html"/>
      <id>dc3c3e9d2bdd29f5f5c105f00210359b4c5416da:reference/memory/shared_ptr/op_equal.md</id>
      <updated>2022-12-13T23:05:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_equal.md b/reference/memory/shared_ptr/op_equal.md
index 1940d67a3..ab176979e 100644
--- a/reference/memory/shared_ptr/op_equal.md
+++ b/reference/memory/shared_ptr/op_equal.md
@@ -7,13 +7,17 @@
 ```cpp
 namespace std {
   template&amp;lt;class T, class U&amp;gt;
-  bool operator==(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1)
+  bool operator==(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
+                  const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++11
 
   template &amp;lt;class T&amp;gt;
-  bool operator==(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x, nullptr_t) noexcept;              // (2)
+  bool operator==(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
+                  nullptr_t) noexcept;              // (2) C++11
 
+  // (2)により、以下のオーバーロードが使用可能になる (C++20)
   template &amp;lt;class T&amp;gt;
-  bool operator==(nullptr_t, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept;              // (3)
+  bool operator==(nullptr_t,
+                  const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept; // (3) C++11
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -27,6 +31,11 @@ namespace std {
 - (2), (3) : `!x`
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -68,3 +77,8 @@ p3 is nullptr
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2008 (TR1), 2010, 2012, 2013
 	- 2012までは`nullptr`バージョンがない。
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- shared_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_greater.html"/>
      <id>dc3c3e9d2bdd29f5f5c105f00210359b4c5416da:reference/memory/shared_ptr/op_greater.md</id>
      <updated>2022-12-13T23:05:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_greater.md b/reference/memory/shared_ptr/op_greater.md
index a7cf0c2ac..1962d081d 100644
--- a/reference/memory/shared_ptr/op_greater.md
+++ b/reference/memory/shared_ptr/op_greater.md
@@ -6,14 +6,18 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class U&amp;gt;
-  bool operator&amp;gt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1)
+  bool operator&amp;gt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
+                 const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++11
 
   template &amp;lt;class T&amp;gt;
-  bool operator&amp;gt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x, nullptr_t) noexcept;              // (2)
+  bool operator&amp;gt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
+                 nullptr_t) noexcept;              // (2) C++11
 
   template &amp;lt;class T&amp;gt;
-  bool operator&amp;gt;(nullptr_t, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept;              // (3)
+  bool operator&amp;gt;(nullptr_t,
+                 const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept; // (3) C++11
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -70,3 +74,8 @@ false
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 	- 2012までは`nullptr`バージョンがない。
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- shared_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_greater_equal.html"/>
      <id>dc3c3e9d2bdd29f5f5c105f00210359b4c5416da:reference/memory/shared_ptr/op_greater_equal.md</id>
      <updated>2022-12-13T23:05:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_greater_equal.md b/reference/memory/shared_ptr/op_greater_equal.md
index a2f694a7b..da474f9a1 100644
--- a/reference/memory/shared_ptr/op_greater_equal.md
+++ b/reference/memory/shared_ptr/op_greater_equal.md
@@ -6,14 +6,18 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class U&amp;gt;
-  bool operator&amp;gt;=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1)
+  bool operator&amp;gt;=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
+                  const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++11
 
   template &amp;lt;class T&amp;gt;
-  bool operator&amp;gt;=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x, nullptr_t) noexcept;              // (2)
+  bool operator&amp;gt;=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
+                  nullptr_t) noexcept;              // (2) C++11
 
   template &amp;lt;class T&amp;gt;
-  bool operator&amp;gt;=(nullptr_t, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept;              // (3)
+  bool operator&amp;gt;=(nullptr_t,
+                  const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept; // (3) C++11
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -70,3 +74,8 @@ false
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 	- 2012までは`nullptr`バージョンがない。
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- shared_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_less.html"/>
      <id>dc3c3e9d2bdd29f5f5c105f00210359b4c5416da:reference/memory/shared_ptr/op_less.md</id>
      <updated>2022-12-13T23:05:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_less.md b/reference/memory/shared_ptr/op_less.md
index bf4b160eb..fc0d0304e 100644
--- a/reference/memory/shared_ptr/op_less.md
+++ b/reference/memory/shared_ptr/op_less.md
@@ -6,14 +6,18 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class U&amp;gt;
-  bool operator&amp;lt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1)
+  bool operator&amp;lt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
+                 const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++11
 
   template &amp;lt;class T&amp;gt;
-  bool operator&amp;lt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x, nullptr_t) noexcept;              // (2)
+  bool operator&amp;lt;(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
+                 nullptr_t) noexcept;              // (2) C++11
 
   template &amp;lt;class T&amp;gt;
-  bool operator&amp;lt;(nullptr_t, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept;              // (3)
+  bool operator&amp;lt;(nullptr_t,
+                 const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept; // (3) C++11
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -81,3 +85,5 @@ true
 ## 参照
 - [N2637 Revisiting `std::shared_ptr` comparison](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2637.pdf)
 - [P0497R0 Fixes to `shared_ptr` support for arrays](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0497r0.html)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- shared_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_less_equal.html"/>
      <id>dc3c3e9d2bdd29f5f5c105f00210359b4c5416da:reference/memory/shared_ptr/op_less_equal.md</id>
      <updated>2022-12-13T23:05:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_less_equal.md b/reference/memory/shared_ptr/op_less_equal.md
index 52e5c1d6c..7c53b03fc 100644
--- a/reference/memory/shared_ptr/op_less_equal.md
+++ b/reference/memory/shared_ptr/op_less_equal.md
@@ -6,14 +6,18 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class U&amp;gt;
-  bool operator&amp;lt;=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1)
+  bool operator&amp;lt;=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
+                  const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++11
 
   template &amp;lt;class T&amp;gt;
-  bool operator&amp;lt;=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x, nullptr_t) noexcept;              // (2)
+  bool operator&amp;lt;=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
+                  nullptr_t) noexcept;              // (2) C++11
 
   template &amp;lt;class T&amp;gt;
-  bool operator&amp;lt;=(nullptr_t, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept;              // (3)
+  bool operator&amp;lt;=(nullptr_t,
+                  const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept; // (3) C++11
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -70,3 +74,8 @@ true
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 	- 2012までは`nullptr`バージョンがない。
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- shared_ptr : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_not_equal.html"/>
      <id>dc3c3e9d2bdd29f5f5c105f00210359b4c5416da:reference/memory/shared_ptr/op_not_equal.md</id>
      <updated>2022-12-13T23:05:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_not_equal.md b/reference/memory/shared_ptr/op_not_equal.md
index 3f66d4b51..171fe0e65 100644
--- a/reference/memory/shared_ptr/op_not_equal.md
+++ b/reference/memory/shared_ptr/op_not_equal.md
@@ -6,14 +6,18 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template&amp;lt;class T, class U&amp;gt;
-  bool operator!=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a, const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1)
+  bool operator!=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; a,
+                  const shared_ptr&amp;lt;U&amp;gt;&amp;amp; b) noexcept; // (1) C++11
 
   template &amp;lt;class T&amp;gt;
-  bool operator!=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x, nullptr_t) noexcept;              // (2)
+  bool operator!=(const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x,
+                  nullptr_t) noexcept;              // (2) C++11
 
   template &amp;lt;class T&amp;gt;
-  bool operator!=(nullptr_t, const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept;              // (3)
+  bool operator!=(nullptr_t,
+                  const shared_ptr&amp;lt;T&amp;gt;&amp;amp; x) noexcept; // (3) C++11
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -68,3 +72,8 @@ p3 is not nullptr
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2008 (TR1), 2010, 2012, 2013
 	- 2012までは`nullptr`バージョンがない。
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-01T11:05:52.507257</updated>
  <id>950c9493-a1c4-498f-add5-ea41b7b33d27</id>

  
    <entry>
      <title>bulk -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/bulk.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/bulk.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/bulk.md b/reference/execution/execution/bulk.md
index 3689a9aed..1b90ea800 100644
--- a/reference/execution/execution/bulk.md
+++ b/reference/execution/execution/bulk.md
@@ -71,7 +71,7 @@ namespace std::execution {
   }
 ```
 * set_value_t[link set_value.md]
-* TRY-EVAL[link TRY-EVAL.md.nolink]
+* TRY-EVAL[link set_value.md]
 * std::move[link /reference/utility/move.md]
 * see below[italic]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>connect -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/connect.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/connect.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/connect.md b/reference/execution/execution/connect.md
index f519456cd..079f27adb 100644
--- a/reference/execution/execution/connect.md
+++ b/reference/execution/execution/connect.md
@@ -111,7 +111,6 @@ namespace std::execution {
 `C`型の`c`と[コルーチンPromise型](/lang/cpp20/coroutines.md)の左辺値`p`に対して、`await-result-type&amp;lt;C, Promise&amp;gt;`を`decltype(`[`GET-AWAITER`](../is-awaitable.md)`(c, p).`[`await_resume()`](/lang/cpp20/coroutines.md)`)`型とする。
 型`V`を`await-result-type&amp;lt;DS, connect-awaitable-promise&amp;gt;`とする。
 
-`SET-VALUE-SIG(T)`を、`T`がCV修飾された`void`ならば[`set_value_t`](set_value.md)`()`型、そうでなければ[`set_value_t`](set_value.md)`(T)`型とする。
 型`Sigs`を下記の通り定義する。
 
 ```cpp
@@ -121,10 +120,10 @@ completion_signatures&amp;lt;
   set_stopped_t()&amp;gt;
 ```
 * completion_signatures[link completion_signatures.md]
+* SET-VALUE-SIG[link set_value.md]
 * set_error_t[link set_error.md]
 * set_stopped_t[link set_stopped.md]
 * exception_ptr[link /reference/exception/exception_ptr.md]
-* SET-VALUE-SIG[italic]
 
 説明用の関数テンプレート`suspend-complete`とコルーチン`suspend-awaitable`を下記の通り定義する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>continues_on -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/continues_on.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/continues_on.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/continues_on.md b/reference/execution/execution/continues_on.md
index d320b53ac..917fdd897 100644
--- a/reference/execution/execution/continues_on.md
+++ b/reference/execution/execution/continues_on.md
@@ -47,8 +47,8 @@ namespace std::execution {
 ```
 * impls-for[link impls-for.md]
 * default-impls[link impls-for.md]
-* JOIN-ENV[link JOIN-ENV.md.nolink]
-* SCHED-ATTRS[link SCHED-ATTRS.md.nolink]
+* JOIN-ENV[link ../queryable.md]
+* SCHED-ATTRS[link scheduler.md]
 * FWD-ENV[link ../forwarding_query.md]
 * get_env[link get_env.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_completion_signatures -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_completion_signatures.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/get_completion_signatures.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_completion_signatures.md b/reference/execution/execution/get_completion_signatures.md
index 4ef53f601..f8838b3a3 100644
--- a/reference/execution/execution/get_completion_signatures.md
+++ b/reference/execution/execution/get_completion_signatures.md
@@ -34,7 +34,7 @@ namespace std::execution {
       set_stopped_t()&amp;gt;
     ```
     * completion_signatures[link completion_signatures.md]
-    * SET-VALUE-SIG[link connect.md]
+    * SET-VALUE-SIG[link set_value.md]
     * await-result-type[link connect.md]
     * env-promise[link env-promise.md]
     * set_error_t[link set_error.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>into_variant -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/into_variant.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/into_variant.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/into_variant.md b/reference/execution/execution/into_variant.md
index d511575a3..2008a4b40 100644
--- a/reference/execution/execution/into_variant.md
+++ b/reference/execution/execution/into_variant.md
@@ -80,6 +80,7 @@ namespace std::execution {
 }
 ```
 * set_value_t[link set_value.md]
+* TRY-SET-VALUE[link set_value.md]
 * decayed-tuple[link decayed-tuple.md]
 * std::move[link /reference/utility/move.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_value -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_value.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/let_value.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_value.md b/reference/execution/execution/let_value.md
index d0b36b088..a8ef9f842 100644
--- a/reference/execution/execution/let_value.md
+++ b/reference/execution/execution/let_value.md
@@ -114,19 +114,19 @@ namespace std::execution {
 ```
 * set_value[link set_value.md]
 * decayed-typeof[link /reference/functional/decayed-typeof.md]
-* TRY-EVAL[link TRY-EVAL.md.nolink]
+* TRY-EVAL[link set_value.md]
 * std::move[link /reference/utility/move.md]
 
 説明用の式`sndr`と`env`に対して、型`Sndr`を`decltype((sndr))`とする。[`sender-for`](sender-for.md)`&amp;lt;Sndr,` [`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;let_value&amp;gt;&amp;gt; == false`のとき、式`let_value.transform_env(sndr, env)`は不適格となる。
 
-そうでなければ、式`let_value.transform_env(sndr, env)`は[`JOIN-ENV`](JOIN-ENV.md.nolink)`(let-env(sndr),` [`FWD-ENV`](../forwarding_query.md)`(env))`と等価。
+そうでなければ、式`let_value.transform_env(sndr, env)`は[`JOIN-ENV`](../queryable.md)`(let-env(sndr),` [`FWD-ENV`](../forwarding_query.md)`(env))`と等価。
 
 
 ## 説明専用エンティティ
 説明用の式`sndr`を用いて、`let-env(sndr)`を下記リストのうち最初に適格となる式と定義する。
 
-- [`SCHED-ENV`](SCHED-ENV.md.nolink)`(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;`[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;`[`set_value`](set_value.md)`&amp;gt;&amp;gt;(`[`get_env`](get_env.md)`(sndr)))`
-- [`MAKE-ENV`](MAKE-ENV.md.nolink)`(`[`get_domain`](get_domain.md)`,` [`get_domain`](get_domain.md)`(`[`get_env`](get_env.md)`(sndr)))`
+- [`SCHED-ENV`](schedule.md)`(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;`[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;`[`set_value`](set_value.md)`&amp;gt;&amp;gt;(`[`get_env`](get_env.md)`(sndr)))`
+- [`MAKE-ENV`](../queryable.md)`(`[`get_domain`](get_domain.md)`,` [`get_domain`](get_domain.md)`(`[`get_env`](get_env.md)`(sndr)))`
 - `(void(sndr),` [`env&amp;lt;&amp;gt;{}`](env.md)`)`
 
 説明専用の`let-bind`テンプレート関数を下記の通り定義する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>on -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/on.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/on.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/on.md b/reference/execution/execution/on.md
index 90c4e0fa7..134e06588 100644
--- a/reference/execution/execution/on.md
+++ b/reference/execution/execution/on.md
@@ -79,8 +79,8 @@ transform_sender(
     }
     ```
     * scheduler[link scheduler.md]
-    * JOIN-ENV[link JOIN-ENV.md.nolink]
-    * SCHED-ENV[link SCHED-ENV.md.nolink]
+    * JOIN-ENV[link ../queryable.md]
+    * SCHED-ENV[link scheduler.md]
     * FWD-ENV[link ../forwarding_query.md]
 
 - 式`on.transform_sender(out_sndr, env)`は下記と等価。
@@ -128,7 +128,7 @@ transform_sender(
     * get_env[link get_env.md]
     * query-with-default[link query-with-default.md]
     * write-env[link write-env.md]
-    * SCHED-ENV[link SCHED-ENV.md.nolink]
+    * SCHED-ENV[link scheduler.nolink]
     * std::move[link /reference/utility/move.md]
 
 説明専用のクラス`not-a-scheduler`を未規定な空のクラス型、`not-a-sender`を下記の通り定義する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>read_env -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/read_env.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/read_env.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/read_env.md b/reference/execution/execution/read_env.md
index e93d649f3..d494bedbd 100644
--- a/reference/execution/execution/read_env.md
+++ b/reference/execution/execution/read_env.md
@@ -39,6 +39,7 @@ namespace std::execution {
 * decayed-typeof[link /reference/functional/decayed-typeof.md]
 * impls-for[link impls-for.md]
 * default-impls[link impls-for.md]
+* TRY-SET-VALUE[link set_value.md]
 * get_env[link get_env.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule_from -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule_from.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/schedule_from.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule_from.md b/reference/execution/execution/schedule_from.md
index 6c3014d2c..eec40b797 100644
--- a/reference/execution/execution/schedule_from.md
+++ b/reference/execution/execution/schedule_from.md
@@ -59,8 +59,8 @@ namespace std::execution {
   return JOIN-ENV(SCHED-ATTRS(data), FWD-ENV(get_env(child)));
 }
 ```
-* JOIN-ENV[link JOIN-ENV.md.nolink]
-* SCHED-ATTRS[link SCHED-ATTRS.md.nolink]
+* JOIN-ENV[link ../queryable.md]
+* SCHED-ATTRS[link scheduler.md]
 * FWD-ENV[link ../forwarding_query.md]
 * get_env[link get_env.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/scheduler.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index f113de558..959ceaa34 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -80,6 +80,20 @@ namespace std::execution {
 Scheduler型のデストラクタは、[`schedule`](schedule.md)が返すSenderオブジェクトに接続されたReceiverの完了を待機してブロックしてはならない。
 
 
+## 説明専用エンティティ
+### `SCHED-ATTRS`
+説明用のScheduler`sch`に対して、式`SCHED-ATTRS(sch)`は[`queryable`](../queryable.md)を満たす型の式`o1`となり、下記を満たす。
+
+- 型`Tag`が[`set_value_t`](set_value.md)もしくは[`set_stopped_t`](set_stopped.md)のとき、式`o1.query(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;Tag&amp;gt;)`の型および値が`sch`と等しい。
+- 式`o1.query(`[`get_domain`](get_domain.md)`)`は`sch.query(`[`get_domain`](get_domain.md)`)`と等価。
+
+### `SCHED-ENV`
+説明用のScheduler`sch`に対して、式`SCHED-ENV(sch)`は[`queryable`](../queryable.md)を満たす型の式`o2`となり、下記を満たす。
+
+- 式`o2.query(`[`get_scheduler`](get_scheduler.md)`)`は、型および値が`sch`と等しい右辺値。
+- 式`o2.query(`[`get_domain`](get_domain.md)`)`は`sch.query(`[`get_domain`](get_domain.md)`)`と等価。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;execution&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_value -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/set_value.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/set_value.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/set_value.md b/reference/execution/execution/set_value.md
index 085ec50f3..e62d9f1af 100644
--- a/reference/execution/execution/set_value.md
+++ b/reference/execution/execution/set_value.md
@@ -33,6 +33,45 @@ namespace std::execution {
 このとき、`noexcept(rcvr.set_value(vs...)) == true`であること。
 
 
+## 説明専用エンティティ
+### `SET-VALUE`
+説明用の式`rcvr`, `expr`に対して、説明専用の式`SET-VALUE(rcvr, expr)`は下記と等価である。
+
+- `expr`の型が`void`のとき、式`(expr, set_value(`[`std::move`](/reference/utility/move.md)`(rcvr)))`
+- そうでなければ、式`set_value(`[`std::move`](/reference/utility/move.md)`(rcvr), expr)`
+
+### `TRY-EVAL`
+説明用の式`rcvr`, `expr`に対して、説明専用の式`TRY-EVAL(rcvr, expr)`は下記と等価である。
+
+- `expr`が潜在的に例外送出するならば、下記と等価。
+
+    ```cpp
+    try {
+      expr;
+    } catch(...) {
+      set_error(std::move(rcvr), current_exception());
+    }
+    ```
+    * set_error[link set_error.md]
+    * std::move[link /reference/utility/move.md]
+    * current_exception()[link /reference/exception/current_exception.md]
+
+- そうでなければ、式`expr`
+
+### `TRY-SET-VALUE`
+説明用の式`rcvr`, `expr`に対して、説明専用の式`TRY-SET-VALUE(rcvr, expr)`は`rcvr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+TRY-EVAL(rcvr, SET-VALUE(rcvr, expr))
+```
+
+### `SET-VALUE-SIG`
+説明用の型`T`に対して、説明専用の型`SET-VALUE-SIG(T)`を下記の通り定義する。
+
+- `T`がCV修飾された`void`ならば、型`set_value_t()`
+- そうでなければ、型`set_value_t(T)`
+
+
 ## 備考
 完了関数`set_value`は[Sender](sender.md)内部実装から呼び出される想定であり、実行制御ライブラリ利用者が直接利用する必要はない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>starts_on -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/starts_on.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/starts_on.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/starts_on.md b/reference/execution/execution/starts_on.md
index 4f23445fb..c82f71db8 100644
--- a/reference/execution/execution/starts_on.md
+++ b/reference/execution/execution/starts_on.md
@@ -44,8 +44,8 @@ transform_sender(
     auto&amp;amp;&amp;amp; [_, sch, _] = out_sndr;
     return JOIN-ENV(SCHED-ENV(sch), FWD-ENV(env));
     ```
-    * JOIN-ENV[link JOIN-ENV.md.nolink]
-    * SCHED-ENV[link SCHED-ENV.md.nolink]
+    * JOIN-ENV[link ../queryable.md]
+    * SCHED-ENV[link scheduler.md]
     * FWD-ENV[link ../forwarding_query.md]
 
 - 式`starts_on.transform_sender(out_sndr, env)`は下記と等価。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>then -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/then.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/then.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/then.md b/reference/execution/execution/then.md
index 22d67d5a4..27187eda4 100644
--- a/reference/execution/execution/then.md
+++ b/reference/execution/execution/then.md
@@ -55,6 +55,7 @@ namespace std::execution {
 * impls-for[link impls-for.md]
 * default-impls[link impls-for.md]
 * set_value[link set_value.md]
+* TRY-SET-VALUE[link set_value.md]
 * invoke[link /reference/functional/invoke.md]
 * std::move[link /reference/utility/move.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>when_all -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/when_all.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/when_all.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/when_all.md b/reference/execution/execution/when_all.md
index 44a365383..bfa79b04f 100644
--- a/reference/execution/execution/when_all.md
+++ b/reference/execution/execution/when_all.md
@@ -73,7 +73,7 @@ namespace std::execution {
 ```
 * default_domain[link default_domain.md]
 * env&amp;lt;&amp;gt;[link env.md]
-* MAKE-ENV[link MAKE-ENV.md.nolink]
+* MAKE-ENV[link ../queryable.md]
 * get_domain[link get_domain.md]
 
 `impls-for&amp;lt;when_all_t&amp;gt;::get-env`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forwarding_query -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/forwarding_query.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/forwarding_query.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/forwarding_query.md b/reference/execution/forwarding_query.md
index 2d72071f7..3f973fabe 100644
--- a/reference/execution/forwarding_query.md
+++ b/reference/execution/forwarding_query.md
@@ -51,7 +51,7 @@ namespace std {
 下記[クエリオブジェクト](queryable.md)に対する問い合わせは、`FWD-ENV`経由で転送されない。
 
 - [`execution::get_env`](execution/get_env.md)
-- [`executoin::get_forward_progress_guarantee`](executionget_forward_progress_guarantee.md.nolink)
+- [`executoin::get_forward_progress_guarantee`](execution/get_forward_progress_guarantee.md)
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>queryable -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/queryable.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/queryable.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/queryable.md b/reference/execution/queryable.md
index b6caabdc0..f0852bfc7 100644
--- a/reference/execution/queryable.md
+++ b/reference/execution/queryable.md
@@ -44,6 +44,21 @@ concept queryable = destructible&amp;lt;T&amp;gt;;
 呼び出し可能オブジェクト`q`と部分式パック`args`に対して、`requires { q(env, args...) }`が`true`であれば、`q(env, args...)`が`q`に課されるセマンティック要件を満たす場合に、`Env`は`queryable`のモデルである。
 
 
+## 説明専用エンティティ
+### `MAKE-ENV`
+説明用のクエリオブジェクト`q`と式`v`に対して、式`MAKE-ENV(q, v)`は`queryable`を満たす型の式`env`となり、下記を満たす。
+
+- `env.query(q)`の結果が`v`と等しい。
+- 明に規定されない限り、`env`が有効の間は`env.query(q)`のオブジェクトも有効である。
+
+### `JOIN-ENV`
+説明用のクエリ可能オブジェクト`env1`, `env2`、クエリオブジェクト`q`、パック式`as`に対して、式`JOIN-ENV(env1, env2)`は`queryable`を満たす型の式`env3`となり、式`env3.query(q, as...)`は下記と等価である。
+
+- 適格であるならば、式`env1.query(q, as...)`
+- そうではなく、適格であるならば、式`env2.query(q, as...)`
+- そうでなければ、式`env3.query(q, as...)`は不適格
+
+
 ## 備考
 [Sender](execution/sender.md)に関連付けられたクエリ可能オブジェクトは「属性(attributes)」と呼ばれるが、実行制御ライブラリの仕様記述では[Receiver](execution/receiver.md)の「環境(environment)」と合わせて`Env`型や識別子名`env`として包括的に言及される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: get_forward_progress_guarantee (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>deaaa1657f781bafd179d51a1a448e1e5e1760d5:reference/execution/execution.md</id>
      <updated>2025-06-01T17:08:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index a2499d162..b9cb37594 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -42,8 +42,8 @@ namespace std::execution {
 | [`execution::get_domain`](execution/get_domain.md) | 実行ドメイン取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::get_scheduler`](execution/get_scheduler.md) | Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::get_delegation_scheduler`](execution/get_delegation_scheduler.md) | 委任Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
-| [`execution::forward_progress_guarantee`](execution/forward_progress_guarantee.md.nolink) | 前方進行保証 (enum) | C++26 |
-| [`execution::get_forward_progress_guarantee`](execution/get_forward_progress_guarantee.md.nolink) | 前方進行保証取得のクエリオブジェクト (customization point object) | C++26 |
+| [`execution::forward_progress_guarantee`](execution/forward_progress_guarantee.md) | 前方進行保証 (enum) | C++26 |
+| [`execution::get_forward_progress_guarantee`](execution/get_forward_progress_guarantee.md) | 前方進行保証取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::get_completion_scheduler`](execution/get_completion_scheduler.md) | 完了Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::get_env`](execution/get_env.md) | 環境取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::env_of_t`](execution/env_of_t.md) | 指定型から環境型を取得 (alias template) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forward_progress_guarantee -- execution: get_forward_progress_guarantee (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/forward_progress_guarantee.html"/>
      <id>deaaa1657f781bafd179d51a1a448e1e5e1760d5:reference/execution/execution/forward_progress_guarantee.md</id>
      <updated>2025-06-01T17:08:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/forward_progress_guarantee.md b/reference/execution/execution/forward_progress_guarantee.md
new file mode 100644
index 000000000..a5c1daf8f
--- /dev/null
+++ b/reference/execution/execution/forward_progress_guarantee.md
@@ -0,0 +1,45 @@
+# forward_progress_guarantee
+* execution[meta header]
+* std::execution[meta namespace]
+* enum[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  enum class forward_progress_guarantee {
+    concurrent,
+    parallel,
+    weakly_parallel
+  };
+}
+```
+
+## 概要
+[Scheduler](scheduler.md)に関連付けられた実行リソースに属する実行エージェントの、前方進行保証(forward progress guarantees)レベルを表現する列挙型。
+
+| 列挙子 | 前方進行保証レベル |
+|----|----|
+| `concurrent` | 全ての実行エージェントが並行前方進行保証(concurrent forward progress guarantees)を提供する |
+| `parallel` | 全ての実行エージェントが少なくとも並列前方進行保証(parallel forward progress guarantees)を提供する |
+| `weakly_parallel` | 弱い並列前方進行保証(weakly parallel forward progress guarantees)となる |
+
+`concurrent`が最も強い前方進行保証を与え、`parallel`、`weakly_parallel`の順に前方進行保証が弱くなる。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::get_forward_progress_guarantee`](get_forward_progress_guarantee.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_delegation_scheduler -- execution: get_forward_progress_guarantee (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_delegation_scheduler.html"/>
      <id>deaaa1657f781bafd179d51a1a448e1e5e1760d5:reference/execution/execution/get_delegation_scheduler.md</id>
      <updated>2025-06-01T17:08:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_delegation_scheduler.md b/reference/execution/execution/get_delegation_scheduler.md
index 17b242821..cafd4f489 100644
--- a/reference/execution/execution/get_delegation_scheduler.md
+++ b/reference/execution/execution/get_delegation_scheduler.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std::execution {
   struct get_delegation_scheduler_t { unspecified };
-  constexpr get_delegation_scheduler_t get_delegation_scheduler{};
+  inline constexpr get_delegation_scheduler_t get_delegation_scheduler{};
 }
 ```
 * unspecified[italic]
@@ -45,7 +45,7 @@ const修飾[クエリ可能オブジェクト](../queryable.md)`cenv`に対し
 
 
 ## 関連項目
-- [`scheduler`](scheduler.md)
+- [`execution::scheduler`](scheduler.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_domain -- execution: get_forward_progress_guarantee (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_domain.html"/>
      <id>deaaa1657f781bafd179d51a1a448e1e5e1760d5:reference/execution/execution/get_domain.md</id>
      <updated>2025-06-01T17:08:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_domain.md b/reference/execution/execution/get_domain.md
index dfbbe540f..62aeb6164 100644
--- a/reference/execution/execution/get_domain.md
+++ b/reference/execution/execution/get_domain.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std::execution {
   struct get_domain_t { unspecified };
-  constexpr get_domain_t get_domain{};
+  inline constexpr get_domain_t get_domain{};
 }
 ```
 * unspecified[italic]
@@ -45,7 +45,7 @@ const修飾[クエリ可能オブジェクト](../queryable.md)`cenv`に対し
 
 
 ## 関連項目
-- [`default_domain`](default_domain.md)
+- [`execution::default_domain`](default_domain.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_forward_progress_guarantee -- execution: get_forward_progress_guarantee (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_forward_progress_guarantee.html"/>
      <id>deaaa1657f781bafd179d51a1a448e1e5e1760d5:reference/execution/execution/get_forward_progress_guarantee.md</id>
      <updated>2025-06-01T17:08:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_forward_progress_guarantee.md b/reference/execution/execution/get_forward_progress_guarantee.md
new file mode 100644
index 000000000..ff555bdca
--- /dev/null
+++ b/reference/execution/execution/get_forward_progress_guarantee.md
@@ -0,0 +1,54 @@
+# get_forward_progress_guarantee
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct get_forward_progress_guarantee_t { unspecified };
+  inline constexpr get_forward_progress_guarantee_t get_forward_progress_guarantee{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`get_forward_progress_guarantee_t`は、[Scheduler](scheduler.md)に関連付けられた実行リソースによる実行エージェントの前方進行保証を取得する[クエリオブジェクト](../queryable.md)である。
+
+
+## 効果
+説明用の変数`sch`に対して、型`Sch`を`decltype((sch))`とする。`Sch`が[`scheduler`](scheduler.md)を満たさないとき、`get_forward_progress_guarantee`は不適格となる。
+
+そうでなければ、呼び出し式`get_forward_progress_guarantee(sch)`は下記と等価であり、[`forward_progress_guarantee`](forward_progress_guarantee.md)列挙型の値となる。
+
+- 引数`sch`がconst修飾された`csch`を用いて、適格であるならば式`cenv.query(get_forward_progress_guarantee)`
+- そうでなければ、[`forward_progress_guarantee::weakly_parallel`](forward_progress_guarantee.md)
+
+
+## 例外
+投げない
+
+
+## カスタマイゼーションポイント
+const修飾[Scheduler](scheduler.md)`sch`に対して式`csch.query(get_forward_progress_guarantee)`が呼び出される。
+このとき、`noexcept(csch.query(get_forward_progress_guarantee)) == true`であること。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::scheduler`](scheduler.md)
+- [`execution::forward_progress_guarantee`](forward_progress_guarantee.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_scheduler -- execution: get_forward_progress_guarantee (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_scheduler.html"/>
      <id>deaaa1657f781bafd179d51a1a448e1e5e1760d5:reference/execution/execution/get_scheduler.md</id>
      <updated>2025-06-01T17:08:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_scheduler.md b/reference/execution/execution/get_scheduler.md
index b8a729419..80079c60e 100644
--- a/reference/execution/execution/get_scheduler.md
+++ b/reference/execution/execution/get_scheduler.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std::execution {
   struct get_scheduler { unspecified };
-  constexpr get_scheduler_t get_scheduler{};
+  inline constexpr get_scheduler_t get_scheduler{};
 }
 ```
 * unspecified[italic]
@@ -45,7 +45,7 @@ const修飾[クエリ可能オブジェクト](../queryable.md)`cenv`に対し
 
 
 ## 関連項目
-- [`scheduler`](scheduler.md)
+- [`execution::scheduler`](scheduler.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forwarding-query -- execution: get_forward_progress_guarantee (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/forwarding-query.html"/>
      <id>deaaa1657f781bafd179d51a1a448e1e5e1760d5:reference/execution/forwarding-query.md</id>
      <updated>2025-06-01T17:08:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/forwarding-query.md b/reference/execution/forwarding-query.md
index 2cc3f7d1c..bc1f240df 100644
--- a/reference/execution/forwarding-query.md
+++ b/reference/execution/forwarding-query.md
@@ -22,7 +22,7 @@ namespace std {
 
 
 ## 関連項目
-- [`forwarding_query`](forwarding_query.md)
+- [`execution::forwarding_query`](forwarding_query.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_allocator -- execution: get_forward_progress_guarantee (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/get_allocator.html"/>
      <id>deaaa1657f781bafd179d51a1a448e1e5e1760d5:reference/execution/get_allocator.md</id>
      <updated>2025-06-01T17:08:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/get_allocator.md b/reference/execution/get_allocator.md
index 4f0440975..bf6bb267e 100644
--- a/reference/execution/get_allocator.md
+++ b/reference/execution/get_allocator.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std {
   struct get_allocator_t { unspecified };
-  constexpr get_allocator_t get_allocator{};
+  inline constexpr get_allocator_t get_allocator{};
 }
 ```
 * unspecified[italic]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_stop_token -- execution: get_forward_progress_guarantee (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/get_stop_token.html"/>
      <id>deaaa1657f781bafd179d51a1a448e1e5e1760d5:reference/execution/get_stop_token.md</id>
      <updated>2025-06-01T17:08:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/get_stop_token.md b/reference/execution/get_stop_token.md
index 26e2be5aa..d31e8962d 100644
--- a/reference/execution/get_stop_token.md
+++ b/reference/execution/get_stop_token.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std {
   struct get_stop_token_t { unspecified };
-  constexpr get_stop_token_t get_stop_token{};
+  inline constexpr get_stop_token_t get_stop_token{};
 }
 ```
 * unspecified[italic]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix wrong numbers in unordered_map::insert()</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html"/>
      <id>5907be1caf5fe5cb6a9ea16d9ff5e79fad87e682:reference/unordered_map/unordered_map/insert.md</id>
      <updated>2025-06-01T11:21:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/insert.md b/reference/unordered_map/unordered_map/insert.md
index 3b89f15a1..c837beeee 100644
--- a/reference/unordered_map/unordered_map/insert.md
+++ b/reference/unordered_map/unordered_map/insert.md
@@ -78,15 +78,15 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (10) C++17
 - (1), (2), (3) :
     - [`pair`](/reference/utility/pair.md) の `bool` 部分（`second` 部）は、要素が追加されたら `true`、追加されなかったら（既にあったら）`false`を返す
     - [`pair`](/reference/utility/pair.md) の `iterator` 部分（`first` 部）は、追加された要素（`bool` 部分が `true` の場合）、あるいは、既にあった要素（`bool` 部分が `false` の場合）を指すイテレータを返す
-- (4), (5) :
+- (4), (5), (6) :
     - 新たな要素が追加された場合、その追加された要素を指すイテレータを返す
     - 新たな要素が追加されなかった場合、すでにあった要素を指すイテレータを返す
-- (6), (7) : なし
+- (7), (8) : なし
 - (9) :
     - [`insert_return_type`](/reference/map/map.md)を返す。`insert_return_type`のイテレータ型メンバ変数`position`、`bool`型メンバ変数`inserted`に格納される値は(1), (2), (3)のものと同じ情報である。`nh`が空の場合は、`position`は終端イテレータである。`node_type`型メンバ変数`node`には、
         - 挿入された場合には、空の[ノードハンドル](/reference/node_handle/node_handle.md)
         - 挿入されなかった場合には、`nh`の値である
-- (8) : `nh`が空の場合、`(*this).end()`を返す。そうではない場合、`nh`と等価のキーの要素を指すイテレータを常に返す
+- (10) : `nh`が空の場合、`(*this).end()`を返す。そうではない場合、`nh`と等価のキーの要素を指すイテレータを常に返す
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_awaitable -- execution/as_awaitable: 概要増補 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/as_awaitable.html"/>
      <id>1a6cd9cb028ec39fe556b218ffebd57039df314d:reference/execution/execution/as_awaitable.md</id>
      <updated>2025-05-31T00:39:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/as_awaitable.md b/reference/execution/execution/as_awaitable.md
index 96fb0d803..eede9fa1b 100644
--- a/reference/execution/execution/as_awaitable.md
+++ b/reference/execution/execution/as_awaitable.md
@@ -13,7 +13,19 @@ namespace std::execution {
 * unspecified[italic]
 
 ## 概要
-`as_awaitable`は、オブジェクトを特定コルーチン内でAwaitableに変換するカスタマイゼーションポイントオブジェクトである。
+`as_awaitable`は、オブジェクトを特定の[コルーチン](/lang/cpp20/coroutines.md)内でAwaitableに変換するカスタマイゼーションポイントオブジェクトである。
+
+Promise型`p`をもつコルーチンにおいて、Await式`co_await as_awaitable(expr, p)`は下記のように動作する。
+
+- 式`expr.as_awaitable(p)`が有効ならば、同式が返すAwaitableオブジェクトに対してAwait式を実行する。
+- `expr`が[単一の値を送信するSender](single-sender.md)であり、Promise型が停止完了ハンドラを定義するならば、下記動作を行う。
+    - Senderを[接続(connect)](connect.md)し、結果[Operation State](operation_state.md)をAwaitableオブジェクトに格納する。
+    - コルーチンを中断し、Operation Stateを[開始(start)](start.md)する。
+    - [クエリオブジェクト](../queryable.md)による[Receiver](receiver.md)環境への問い合わせは、Promise型に関連付けられた環境(`get_env`)へと転送される。
+    - Senderが[値完了](set_value.md)した場合、送信値をAwait式の結果としてコルーチンを再開する。
+    - Senderが[エラー完了](set_error.md)した場合、エラー値を例外としてコルーチンから再スローする。
+    - Senderが[停止完了](set_stopped.md)した場合、停止完了ハンドラ(`unhandled_stopped`)が返す別のコルーチンを再開させる。
+- そうでなければ、式`expr`に対してAwait式を実行する。
 
 
 ## 効果
@@ -43,6 +55,7 @@ namespace std::execution {
 }
 ```
 * single-sender[link single-sender.md]
+* env_of_t[link env_of_t.md]
 * sender_to[link sender_to.md]
 * convertible_to[link /reference/concepts/convertible_to.md]
 * coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
@@ -102,7 +115,7 @@ struct awaitable-receiver {
 
 説明用の式`rcvr`を`awaitable-reciever`型の右辺値、`crcvr`を`rcvr`をconst参照する左辺値、`vs`を式パック、`err`を`Err`型の式とする。このとき
 
-- [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;result-type, decltype((vs))...&amp;gt;`を満たすとき、式`set_value(rcvr, vs...)`は下記と等価。そうでなければ、式`set_value(rcvr, vs...)`は不適格となる。
+- [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;result-type, decltype((vs))...&amp;gt;`を満たすとき、式[`set_value`](set_value.md)`(rcvr, vs...)`は下記と等価。そうでなければ、式`set_value(rcvr, vs...)`は不適格となる。
 
     ```cpp
     try {
@@ -116,7 +129,7 @@ struct awaitable-receiver {
     * current_exception()[link /reference/exception/current_exception.md]
     * resume()[link /reference/coroutine/coroutine_handle/resume.md]
 
-- 式`set_error(rcvr, err)`は下記と等価。
+- 式[`set_error`](set_error.md)`(rcvr, err)`は下記と等価。
 
     ```cpp
     rcvr.result-ptr-&amp;gt;template emplace&amp;lt;2&amp;gt;(AS-EXCEPT-PTR(err));
@@ -125,7 +138,7 @@ struct awaitable-receiver {
     * template emplace[link /reference/variant/variant/emplace.md]
     * resume()[link /reference/coroutine/coroutine_handle/resume.md]
 
-- 式`set_stopped(rcvr)`は下記と等価。
+- 式[`set_stopped`](set_stopped.md)`(rcvr)`は下記と等価。
 
     ```cpp
     static_cast&amp;lt;coroutine_handle&amp;lt;&amp;gt;&amp;gt;(rcvr.continuation.promise().unhandled_stopped()).resume();
@@ -134,7 +147,7 @@ struct awaitable-receiver {
     * promise()[link /reference/coroutine/coroutine_handle/promise.md]
     * resume()[link /reference/coroutine/coroutine_handle/resume.md]
 
-- [`forwarding-query`](../forwarding-query.md)を満たす型の式`tag`とパック式`as`に対して、[`get_env`](get_env.md)`(crcvr).query(tag, as...)`は下記と等価。
+- [`forwarding-query`](../forwarding-query.md)を満たす型の式`tag`とパック式`as`に対して、式[`get_env`](get_env.md)`(crcvr).query(tag, as...)`は下記と等価。
 
     ```cpp
     tag(get_env(as_const(crcvr.continuation.promise())), as...)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>class-type -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/class-type.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/class-type.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/class-type.md b/reference/execution/class-type.md
new file mode 100644
index 000000000..92511231c
--- /dev/null
+++ b/reference/execution/class-type.md
@@ -0,0 +1,26 @@
+# class-type
+* execution[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  concept class-type = decays-to&amp;lt;T, T&amp;gt; &amp;amp;&amp;amp; is_class_v&amp;lt;T&amp;gt;;  // exposition only
+}
+```
+* decays-to[link decays-to.md]
+* is_class_v[link /reference/type_traits/is_class.md]
+
+## 概要
+`class-type`は、型`T`がクラス型であることを表す説明専用のコンセプトである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index e596e690b..a2499d162 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -151,7 +151,7 @@ Senderコンシューマは名前空間 `std::this_thread` で定義される。
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`execution::as_awaitable`](execution/as_awaitable.md.nolink) | Senderを[Awaitable型](/lang/cpp20/coroutines.md)へ変換 (customization point object) | C++26 |
+| [`execution::as_awaitable`](execution/as_awaitable.md) | Senderを[Awaitable型](/lang/cpp20/coroutines.md)へ変換 (customization point object) | C++26 |
 | [`execution::with_awaitable_senders`](execution/with_awaitable_senders.md) | [Promise型](/lang/cpp20/coroutines.md)の基底クラス (class template) | C++26 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_awaitable -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/as_awaitable.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/as_awaitable.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/as_awaitable.md b/reference/execution/execution/as_awaitable.md
new file mode 100644
index 000000000..96fb0d803
--- /dev/null
+++ b/reference/execution/execution/as_awaitable.md
@@ -0,0 +1,199 @@
+# as_awaitable
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct as_awaitable_t { unspecified };
+  inline constexpr as_awaitable_t as_awaitable{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`as_awaitable`は、オブジェクトを特定コルーチン内でAwaitableに変換するカスタマイゼーションポイントオブジェクトである。
+
+
+## 効果
+説明用の式`expr`と左辺値`p`に対して、型`Expr`を`decltype((expr))`、型`Promise`を[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((p))&amp;gt;`とする。
+
+呼び出し式`as_awaitable(expr, p)`は、`expr`と`p`の評価が不定順で順序付けられることを除いて、下記と等価。
+
+- 適格であるならば、式`expr.as_awaitable(p)`
+    - 適格要件 : 同式の型を`A`としたとき、[`is-awaitable`](../is-awaitable.md)`&amp;lt;A, Promise&amp;gt; == true`であるべき。
+- そうではなく、説明用の型`U`を`Promise`とは異なりかつ`await_transform`メンバ関数を持たない未規定の型としたとき、[`is-awaitable`](../is-awaitable.md)`&amp;lt;Expr, U&amp;gt; == true`ならば、式`(void(p), expr)`
+    - 事前条件 : [`is-awaitable`](../is-awaitable.md)`&amp;lt;Expr, Promise&amp;gt; == true`、かつPromise型`U`のコルーチンにおける式`co_await expr`がPromise型`Promise`のコルーチンにおける同式と等しさを保持すること。
+- そうではなく、`awaitable-sender&amp;lt;Expr, Promise&amp;gt;`ならば、式`sender-awaitable{expr, p}`
+- そうでなければ、式`(void(p), expr)`
+
+
+## 説明専用エンティティ
+### コンセプト`awaitable-sender`
+```cpp
+namespace std::execution {
+  template&amp;lt;class Sndr, class Promise&amp;gt;
+  concept awaitable-sender =
+    single-sender&amp;lt;Sndr, env_of_t&amp;lt;Promise&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    sender_to&amp;lt;Sndr, awaitable-receiver&amp;gt; &amp;amp;&amp;amp;  // see below
+    requires (Promise&amp;amp; p) {
+      { p.unhandled_stopped() } -&amp;gt; convertible_to&amp;lt;coroutine_handle&amp;lt;&amp;gt;&amp;gt;;
+    };
+}
+```
+* single-sender[link single-sender.md]
+* sender_to[link sender_to.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
+* see below[italic]
+
+### クラステンプレート`sender-awaitable`
+```cpp
+namespace std::execution {
+  template&amp;lt;class Sndr, class Promise&amp;gt;
+  class sender-awaitable {
+    struct unit {};                                           // exposition only
+    using value-type =                                        // exposition only
+      single-sender-value-type&amp;lt;Sndr, env_of_t&amp;lt;Promise&amp;gt;&amp;gt;;
+    using result-type =                                       // exposition only
+      conditional_t&amp;lt;is_void_v&amp;lt;value-type&amp;gt;, unit, value-type&amp;gt;;
+    struct awaitable-receiver;                                // exposition only
+
+    variant&amp;lt;monostate, result-type, exception_ptr&amp;gt; result{};  // exposition only
+    connect_result_t&amp;lt;Sndr, awaitable-receiver&amp;gt; state;         // exposition only
+
+  public:
+    sender-awaitable(Sndr&amp;amp;&amp;amp; sndr, Promise&amp;amp; p);
+    static constexpr bool await_ready() noexcept { return false; }
+    void await_suspend(coroutine_handle&amp;lt;Promise&amp;gt;) noexcept { start(state); }
+    value-type await_resume();
+  };
+}
+```
+* single-sender-value-type[link single-sender-value-type.md]
+* env_of_t[link env_of_t.md]
+* connect_result_t[link connect_result_t.md]
+* start[link start.md]
+* conditional_t[link /reference/type_traits/conditional.md]
+* is_void_v[link /reference/type_traits/is_void.md]
+* variant[link /reference/variant/variant.md]
+* monostate[link /reference/variant/monostate.md]
+* exception_ptr[link /reference/exception/exception_ptr.md]
+* coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+
+### クラステンプレート`awaitable-receiver`
+説明専用のクラステンプレート`sender-awaitable&amp;lt;Sndr, Promise&amp;gt;::awaitable-receiver`は下記の通り定義される。
+
+```cpp
+struct awaitable-receiver {
+  using receiver_concept = receiver_t;
+  variant&amp;lt;monostate, result-type, exception_ptr&amp;gt;* result-ptr;  // exposition only
+  coroutine_handle&amp;lt;Promise&amp;gt; continuation;                      // exposition only
+  // see below
+};
+```
+* receiver_t[link receiver.md]
+* variant[link /reference/variant/variant.md]
+* monostate[link /reference/variant/monostate.md]
+* exception_ptr[link /reference/exception/exception_ptr.md]
+* coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+* see below[italic]
+
+説明用の式`rcvr`を`awaitable-reciever`型の右辺値、`crcvr`を`rcvr`をconst参照する左辺値、`vs`を式パック、`err`を`Err`型の式とする。このとき
+
+- [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;result-type, decltype((vs))...&amp;gt;`を満たすとき、式`set_value(rcvr, vs...)`は下記と等価。そうでなければ、式`set_value(rcvr, vs...)`は不適格となる。
+
+    ```cpp
+    try {
+      rcvr.result-ptr-&amp;gt;template emplace&amp;lt;1&amp;gt;(vs...);
+    } catch(...) {
+      rcvr.result-ptr-&amp;gt;template emplace&amp;lt;2&amp;gt;(current_exception());
+    }
+    rcvr.continuation.resume();
+    ```
+    * template emplace[link /reference/variant/variant/emplace.md]
+    * current_exception()[link /reference/exception/current_exception.md]
+    * resume()[link /reference/coroutine/coroutine_handle/resume.md]
+
+- 式`set_error(rcvr, err)`は下記と等価。
+
+    ```cpp
+    rcvr.result-ptr-&amp;gt;template emplace&amp;lt;2&amp;gt;(AS-EXCEPT-PTR(err));
+    rcvr.continuation.resume();
+    ```
+    * template emplace[link /reference/variant/variant/emplace.md]
+    * resume()[link /reference/coroutine/coroutine_handle/resume.md]
+
+- 式`set_stopped(rcvr)`は下記と等価。
+
+    ```cpp
+    static_cast&amp;lt;coroutine_handle&amp;lt;&amp;gt;&amp;gt;(rcvr.continuation.promise().unhandled_stopped()).resume();
+    ```
+    * coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
+    * promise()[link /reference/coroutine/coroutine_handle/promise.md]
+    * resume()[link /reference/coroutine/coroutine_handle/resume.md]
+
+- [`forwarding-query`](../forwarding-query.md)を満たす型の式`tag`とパック式`as`に対して、[`get_env`](get_env.md)`(crcvr).query(tag, as...)`は下記と等価。
+
+    ```cpp
+    tag(get_env(as_const(crcvr.continuation.promise())), as...)
+    ```
+    * get_env[link get_env.md]
+    * as_const[link /reference/utility/as_const.md]
+    * promise()[link /reference/coroutine/coroutine_handle/promise.md]
+
+```cpp
+sender-awaitable(Sndr&amp;amp;&amp;amp; sndr, Promise&amp;amp; p);
+```
+
+- 効果 : `state`を下記で初期化する。
+
+    ```cpp
+    connect(std::forward&amp;lt;Sndr&amp;gt;(sndr),
+            awaitable-receiver{addressof(result), coroutine_handle&amp;lt;Promise&amp;gt;::from_promise(p)})
+    ```
+    * connect[link connect.md]
+    * coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+    * from_promise[link /reference/coroutine/coroutine_handle/from_promise.md]
+
+```cpp
+value-type await_resume();
+```
+
+- 効果 : 下記と等価。
+
+    ```cpp
+    if (result.index() == 2)
+      rethrow_exception(get&amp;lt;2&amp;gt;(result));
+    if constexpr (!is_void_v&amp;lt;value-type&amp;gt;)
+      return std::forward&amp;lt;value-type&amp;gt;(get&amp;lt;1&amp;gt;(result));
+    ```
+    * index()[link /reference/variant/variant/index.md]
+    * get[link /reference/variant/variant/get.md]
+    * rethrow_exception[link /reference/exception/rethrow_exception.md]
+    * is_void_v[link /reference/type_traits/is_void.md]
+
+
+## カスタマイゼーションポイント
+`expr`に対して、適格であるならば式`expr.as_awaitable(p)`が呼び出される。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::with_awaitable_senders`](with_awaitable_senders.md)
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_adaptor_closure -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_adaptor_closure.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/sender_adaptor_closure.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_adaptor_closure.md b/reference/execution/execution/sender_adaptor_closure.md
index d92530aef..dfd10664d 100644
--- a/reference/execution/execution/sender_adaptor_closure.md
+++ b/reference/execution/execution/sender_adaptor_closure.md
@@ -10,7 +10,7 @@ namespace std::execution {
   struct sender_adaptor_closure { };
 }
 ```
-* class-type[link class-type.md.nolink]
+* class-type[link ../class-type.md]
 
 ## 概要
 `sender_adaptor_closure`は、ユーザ定義のパイプ可能Senderアダプタクロージャオブジェクトの実装を補助するクラステンプレートである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>single-sender-value-type -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/single-sender-value-type.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/single-sender-value-type.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/single-sender-value-type.md b/reference/execution/execution/single-sender-value-type.md
index 9687b191d..38d30c9fb 100644
--- a/reference/execution/execution/single-sender-value-type.md
+++ b/reference/execution/execution/single-sender-value-type.md
@@ -28,7 +28,7 @@ using single-sender-value-type = see below;  // exposition only
 
 ## 関連項目
 - [`execution::stopped_as_optional`](stopped_as_optional.md)
-- [`sender-awaitable`](sender-awaitable.md.nolink)
+- [`execution::as_awaitable`](as_awaitable.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>single-sender -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/single-sender.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/single-sender.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/single-sender.md b/reference/execution/execution/single-sender.md
new file mode 100644
index 000000000..b1e724288
--- /dev/null
+++ b/reference/execution/execution/single-sender.md
@@ -0,0 +1,31 @@
+# single-sender
+* execution[meta header]
+* type-alias[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Sndr, class Env&amp;gt;
+concept single-sender = sender_in&amp;lt;Sndr, Env&amp;gt; &amp;amp;&amp;amp;
+  requires {
+    typename single-sender-value-type&amp;lt;Sndr, Env&amp;gt;;
+  };
+```
+* sender_in[link sender_in.md]
+* single-sender-value-type[link single-sender-value-type.md]
+
+## 概要
+`single-sender`は、実行制御ライブラリの仕様定義で用いられる説明専用のエイリアステンプレートである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`execution::as_awaitable`](as_awaitable.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>with_awaitable_senders -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/with_awaitable_senders.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/with_awaitable_senders.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/with_awaitable_senders.md b/reference/execution/execution/with_awaitable_senders.md
index ec76e23ad..fd0cabaa1 100644
--- a/reference/execution/execution/with_awaitable_senders.md
+++ b/reference/execution/execution/with_awaitable_senders.md
@@ -33,7 +33,7 @@ namespace std::execution {
   };
 }
 ```
-* class-type[link class-type.md.nolink]
+* class-type[link ../class-type.md]
 * terminate()[link /reference/exception/terminate.md]
 * coroutine_handle[link /reference/coroutine/coroutine_handle.md]
 * address()[link /reference/coroutine/coroutine_handle/address.md]
@@ -173,7 +173,7 @@ value=42
 
 
 ## 関連項目
-- [`execution::as_awaitable`](as_awaitable.md.nolink)
+- [`execution::as_awaitable`](as_awaitable.md)
 - [コルーチン](/lang/cpp20/coroutines.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>await_transform -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/with_awaitable_senders/await_transform.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/with_awaitable_senders/await_transform.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/with_awaitable_senders/await_transform.md b/reference/execution/execution/with_awaitable_senders/await_transform.md
index 4127777e5..1f9643427 100644
--- a/reference/execution/execution/with_awaitable_senders/await_transform.md
+++ b/reference/execution/execution/with_awaitable_senders/await_transform.md
@@ -11,10 +11,10 @@ call-result-t&amp;lt;as_awaitable_t, Value, Promise&amp;amp;&amp;gt;
   await_transform(Value&amp;amp;&amp;amp; value);
 ```
 * call-result-t[link /reference/functional/call-result-t.md]
-* as_awaitable_t[link ../as_awaitable.md.nolink]
+* as_awaitable_t[link ../as_awaitable.md]
 
 ## 概要
-コルーチンの[`co_await`演算子](/lang/cpp20/coroutines.md)にアダプトし、[`as_awaitable`](../as_awaitable.md.nolink)で変換したAwaitableオブジェクトを返す。
+コルーチンの[`co_await`演算子](/lang/cpp20/coroutines.md)にアダプトし、[`as_awaitable`](../as_awaitable.md)で変換したAwaitableオブジェクトを返す。
 
 
 ## 効果
@@ -23,7 +23,7 @@ call-result-t&amp;lt;as_awaitable_t, Value, Promise&amp;amp;&amp;gt;
 ```cpp
 return as_awaitable(std::forward&amp;lt;Value&amp;gt;(value), static_cast&amp;lt;Promise&amp;amp;&amp;gt;(*this));
 ```
-* as_awaitable[link ../as_awaitable.md.nolink]
+* as_awaitable[link ../as_awaitable.md]
 
 
 ## バージョン
@@ -38,7 +38,7 @@ return as_awaitable(std::forward&amp;lt;Value&amp;gt;(value), static_cast&amp;lt;Promise&amp;amp;&amp;gt;(*this));
 
 
 ## 関連項目
-- [`execution::as_awaitable`](../as_awaitable.md.nolink)
+- [`execution::as_awaitable`](../as_awaitable.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forwarding-query -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/forwarding-query.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/forwarding-query.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/forwarding-query.md b/reference/execution/forwarding-query.md
new file mode 100644
index 000000000..2cc3f7d1c
--- /dev/null
+++ b/reference/execution/forwarding-query.md
@@ -0,0 +1,29 @@
+# forwarding-query
+* execution[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  concept forwarding-query = forwarding_query(T{});  // exposition only
+}
+```
+* forwarding_query[link forwarding_query.md]
+
+## 概要
+`forwarding_query`は、型`T`が[クエリ可能アダプタを通じて転送可能](forwarding_query.md)か否かを確認する説明専用のコンセプトである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`forwarding_query`](forwarding_query.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
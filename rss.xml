<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-07-07T14:02:52.201788</updated>
  <id>2e27d01c-9548-430e-825d-d532302ce9c8</id>

  
    <entry>
      <title>free -- 出力結果−＞出力</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/free.html"/>
      <id>1b8a7cdc159a3c9475930fb8d215f8c9522c0b6b:reference/cstdlib/free.md</id>
      <updated>2025-07-07T13:40:35+00:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/free.md b/reference/cstdlib/free.md
index 389c2fbb8..8d785c808 100644
--- a/reference/cstdlib/free.md
+++ b/reference/cstdlib/free.md
@@ -36,7 +36,7 @@ int main(void)
     free(p2); // realloc が失敗した場合は元の領域を解放
 }
 ```
-### 出力結果
+### 出力
 ```
 
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>K10-K10</name>
        <email>keito.tottori@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- flatなコンテナのinsert()の計算量修正</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/insert.html"/>
      <id>39b99d1b9628accc8ddb71e9e2f08be4359ac926:reference/flat_map/flat_map/insert.md</id>
      <updated>2025-07-07T22:38:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/insert.md b/reference/flat_map/flat_map/insert.md
index a4ce80b3f..f83c8ca4e 100644
--- a/reference/flat_map/flat_map/insert.md
+++ b/reference/flat_map/flat_map/insert.md
@@ -50,8 +50,6 @@ void insert(sorted_unique_t s,
 
 内部的に `flat_map` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
 
-この操作は、適切な引数 `position` を提供することで効率を飛躍的に改善することができる。
-
 - (1) : 単一要素を挿入する
 - (2) : 単一要素の一時オブジェクトを挿入する
 - (3) : 指定された位置に、単一要素を挿入する
@@ -198,8 +196,11 @@ void insert(sorted_unique_t s,
 
 
 ## 計算量
+- (1)~(6) : コンテナサイズ（[`size()`](size.md)）に対して線形
 - (7) : Nをこの操作の前の[`size()`](size.md)、Mを[`distance`](/reference/iterator/distance.md)`(first, last)`として、N + MlogM
 - (8) : Nをこの操作のあとの[`size()`](size.md)として、Nに対して線形
+- (9) : Nをこの操作の前の[`size()`](size.md)、Mを`il.size()`として、N + MlogM
+- (10) : Nをこの操作のあとの[`size()`](size.md)として、Nに対して線形
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- flatなコンテナのinsert()の計算量修正</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_multimap/insert.html"/>
      <id>39b99d1b9628accc8ddb71e9e2f08be4359ac926:reference/flat_map/flat_multimap/insert.md</id>
      <updated>2025-07-07T22:38:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_multimap/insert.md b/reference/flat_map/flat_multimap/insert.md
index 08e944b5f..4f8ebed9f 100644
--- a/reference/flat_map/flat_multimap/insert.md
+++ b/reference/flat_map/flat_multimap/insert.md
@@ -45,8 +45,6 @@ void insert(sorted_equivalent_t,
 
 内部的に `flat_multimap` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
 
-この操作は、適切な引数 `position` を提供することで効率を飛躍的に改善することができる。
-
 - (1) : 単一要素を挿入する
 - (2) : 単一要素の一時オブジェクトを挿入する
 - (3) : 指定された位置に、単一要素を挿入する
@@ -158,8 +156,11 @@ void insert(sorted_equivalent_t,
 
 
 ## 計算量
+- (1)~(6) : コンテナサイズ（[`size()`](size.md)）に対して線形
 - (7) : Nをこの操作の前の[`size()`](size.md)、Mを[`distance`](/reference/iterator/distance.md)`(first, last)`として、N + MlogM
 - (8) : Nをこの操作のあとの[`size()`](size.md)として、Nに対して線形
+- (9) : Nをこの操作の前の[`size()`](size.md)、Mを`il.size()`として、N + MlogM
+- (10) : Nをこの操作のあとの[`size()`](size.md)として、Nに対して線形
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- flatなコンテナのinsert()の計算量修正</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/insert.html"/>
      <id>39b99d1b9628accc8ddb71e9e2f08be4359ac926:reference/flat_set/flat_multiset/insert.md</id>
      <updated>2025-07-07T22:38:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/insert.md b/reference/flat_set/flat_multiset/insert.md
index 58985f98d..14294b61e 100644
--- a/reference/flat_set/flat_multiset/insert.md
+++ b/reference/flat_set/flat_multiset/insert.md
@@ -45,8 +45,6 @@ void insert(sorted_equivalent_t,
 
 内部的に `flat_multiset` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
 
-この操作は、適切な引数 `position` を提供することで効率を飛躍的に改善することができる。
-
 - (1) : 単一要素を挿入する
 - (2) : 単一要素の一時オブジェクトを挿入する
 - (3) : 指定された位置に、単一要素を挿入する
@@ -148,8 +146,11 @@ void insert(sorted_equivalent_t,
 
 
 ## 計算量
+- (1)~(6) : コンテナサイズ（[`size()`](size.md)）に対して線形
 - (7) : Nをこの操作の前の[`size()`](size.md)、Mを[`distance`](/reference/iterator/distance.md)`(first, last)`として、N + MlogM
 - (8) : Nをこの操作のあとの[`size()`](size.md)として、Nに対して線形
+- (9) : Nをこの操作の前の[`size()`](size.md)、Mを`il.size()`として、N + MlogM
+- (10) : Nをこの操作のあとの[`size()`](size.md)として、Nに対して線形
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- flatなコンテナのinsert()の計算量修正</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/insert.html"/>
      <id>39b99d1b9628accc8ddb71e9e2f08be4359ac926:reference/flat_set/flat_set/insert.md</id>
      <updated>2025-07-07T22:38:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/insert.md b/reference/flat_set/flat_set/insert.md
index 02134d89c..2096a7078 100644
--- a/reference/flat_set/flat_set/insert.md
+++ b/reference/flat_set/flat_set/insert.md
@@ -50,8 +50,6 @@ void insert(sorted_unique_t s,
 
 内部的に `flat_set` コンテナは、コンストラクト時に指定された比較オブジェクトによって要素を下位から上位へとソートして保持する。
 
-この操作は、適切な引数 `position` を提供することで効率を飛躍的に改善することができる。
-
 - (1) : 単一要素を挿入する
 - (2) : 単一要素の一時オブジェクトを挿入する
 - (3) : 指定された位置に、単一要素を挿入する
@@ -160,8 +158,11 @@ void insert(sorted_unique_t s,
 
 
 ## 計算量
+- (1)~(6) : コンテナサイズ（[`size()`](size.md)）に対して線形
 - (7) : Nをこの操作の前の[`size()`](size.md)、Mを[`distance`](/reference/iterator/distance.md)`(first, last)`として、N + MlogM
 - (8) : Nをこの操作のあとの[`size()`](size.md)として、Nに対して線形
+- (9) : Nをこの操作の前の[`size()`](size.md)、Mを`il.size()`として、N + MlogM
+- (10) : Nをこの操作のあとの[`size()`](size.md)として、Nに対して線形
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>malloc -- `free.md`のパスを修正</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/malloc.html"/>
      <id>6ba8c53818059f2d2de201eb3f02d9b58e0d65be:reference/cstdlib/malloc.md</id>
      <updated>2025-07-07T22:15:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/malloc.md b/reference/cstdlib/malloc.md
index 98990cf85..6820bc78f 100644
--- a/reference/cstdlib/malloc.md
+++ b/reference/cstdlib/malloc.md
@@ -70,7 +70,7 @@ p1[3] == 9
 
 ## 関連項目
 
-- [`free`](/cstdlib/free.md): 確保したメモリを解放する。
+- [`free`](free.md): 確保したメモリを解放する。
 
 ## 参照
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>K10-K10</name>
        <email>keito.tottori@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>free -- 文法の修正</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/free.html"/>
      <id>f189c2260e14694f7db6fbb34b27cc00006d27e8:reference/cstdlib/free.md</id>
      <updated>2025-07-07T22:12:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/free.md b/reference/cstdlib/free.md
index fd1dc695a..389c2fbb8 100644
--- a/reference/cstdlib/free.md
+++ b/reference/cstdlib/free.md
@@ -12,7 +12,7 @@ namespace std {
 ## 概要
 `malloc`、`calloc`、`aligned_alloc`、`realloc`で確保されたメモリ領域を解放する。
 
-解放済みのポインタを再度 `free` に渡したり、アクセスしたりすると未定義動作となる。
+解放済みのポインタを再度 `free` に渡したり、アクセスしたりするときの動作は未定義となる。
 
 ポインタが`nullptr`の場合、この関数は何も実行しない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>K10-K10</name>
        <email>keito.tottori@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>calloc -- 文法の修正</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/calloc.html"/>
      <id>f11509601cfac4c7730f3cf113d2308ec8acfd6f:reference/cstdlib/calloc.md</id>
      <updated>2025-07-07T22:10:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/calloc.md b/reference/cstdlib/calloc.md
index 8defdcecb..c370b8ad1 100644
--- a/reference/cstdlib/calloc.md
+++ b/reference/cstdlib/calloc.md
@@ -24,7 +24,7 @@ namespace std {
 
 ## 備考
 
-- `calloc`・`malloc`・`realloc` によって確保されたメモリの連続性や順序は保証されない。
+- `calloc`・`malloc`・`realloc` によって複数個の異なる領域が確保された場合、それらの連続性や順序は保証されない。
 
 - メモリリークを避けるため、この関数で確保したメモリは、`free`などを使い、メモリ解放するべきである。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>K10-K10</name>
        <email>keito.tottori@gmail.com</email>
      </author>
    </entry>
  
</feed>
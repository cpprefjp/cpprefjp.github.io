<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-06-13T12:22:22.786224</updated>
  <id>e270feeb-8dc0-4689-9b4e-2cbbd051e8c7</id>

  
    <entry>
      <title>map -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/map.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map.md b/reference/map/map.md
index 3ced8970a..6c8e0a233 100644
--- a/reference/map/map.md
+++ b/reference/map/map.md
@@ -69,12 +69,12 @@ namespace std {
 |------------------------------|----------------------------------------------|-------|
 | [`begin`](map/begin.md)     | 先頭を指すイテレータを取得する               | |
 | [`cbegin`](map/cbegin.md)   | 先頭を指す読み取り専用イテレータを取得する   | C++11 |
-| [`end`](map/end.md)         | 末尾を指すイテレータを取得する               | |
-| [`cend`](map/cend.md)       | 末尾を指す読み取り専用イテレータを取得する   | C++11 |
+| [`end`](map/end.md)         | 末尾の次を指すイテレータを取得する               | |
+| [`cend`](map/cend.md)       | 末尾の次を指す読み取り専用イテレータを取得する   | C++11 |
 | [`rbegin`](map/rbegin.md)   | 末尾を指す逆イテレータを取得する             | |
 | [`crbegin`](map/crbegin.md) | 末尾を指す読み取り専用逆イテレータを取得する | C++11 |
-| [`rend`](map/rend.md)       | 先頭を指す逆イテレータを取得する             | |
-| [`crend`](map/crend.md)     | 先頭を指す読み取り専用逆イテレータを取得する | C++11 |
+| [`rend`](map/rend.md)       | 先頭の前を指す逆イテレータを取得する             | |
+| [`crend`](map/crend.md)     | 先頭の前を指す読み取り専用逆イテレータを取得する | C++11 |
 
 
 ### 領域
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map/begin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/map/begin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/begin.md b/reference/map/map/begin.md
index ffc6c0bf7..83a13b26b 100644
--- a/reference/map/map/begin.md
+++ b/reference/map/map/begin.md
@@ -11,8 +11,8 @@ const_iterator begin() const noexcept;
 
 
 ## 概要
-`map` コンテナの先頭のキーと要素のpairを参照するイテレータを返す。 
-内部的に、`map`コンテナは要素を下位から上位へと並べており、従って `begin()`は `map` 内の最下位のキーにあたるpairのイテレータを返す。
+`map` コンテナの先頭のキーと要素のpairを参照するイテレータを取得する。 
+内部的に、`map`コンテナは要素を下位から上位へと並べており、従って `begin()`は `map` 内の最下位のキーにあたるpairへのイテレータを返す。
 
 
 ## 戻り値
@@ -77,13 +77,13 @@ int main()
 ## 関連項目
 
 | 名前 | 説明 |
-|------------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`map::end`](/reference/map/map/end.md) | 末尾を指すイテレータを取得する |
-| [`map::cbegin`](/reference/map/map/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`map::cend`](/reference/map/map/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`map::rbegin`](/reference/map/map/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`map::rend`](/reference/map/map/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`map::crbegin`](/reference/map/map/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`map::crend`](/reference/map/map/crend.md) | 先頭を指す逆constイテレータを取得する |
+|------------------------------|------------------------------------------|
+| [`map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`map::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map/cbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/map/cbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/cbegin.md b/reference/map/map/cbegin.md
index 72e2f04fc..cfdd8f467 100644
--- a/reference/map/map/cbegin.md
+++ b/reference/map/map/cbegin.md
@@ -11,8 +11,8 @@ const_iterator cbegin() const noexcept;
 
 
 ## 概要
-`map` コンテナの先頭のキーと要素のpairを参照するイテレータを返す。 
-内部的に、`map`コンテナは要素を下位から上位へと並べており、従って `cbegin()` は `map` 内の最下位のキーにあたるpairのイテレータを返す。
+`map` コンテナの先頭のキーと要素のpairを参照するイテレータを取得する。 
+内部的に、`map`コンテナは要素を下位から上位へと並べており、従って `cbegin()` は `map` 内の最下位のキーにあたるpairへのイテレータを返す。
 
 
 ## 戻り値
@@ -73,14 +73,14 @@ int main()
 ## 関連項目
 
 | 名前 | 説明 |
-|------------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`map::begin`](/reference/map/map/begin.md) | 先頭を指すイテレータを取得する |
-| [`map::end`](/reference/map/map/end.md) | 末尾を指すイテレータを取得する |
-| [`map::cend`](/reference/map/map/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`map::rbegin`](/reference/map/map/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`map::rend`](/reference/map/map/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`map::crbegin`](/reference/map/map/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`map::crend`](/reference/map/map/crend.md) | 先頭を指す逆constイテレータを取得する |
+|------------------------------|-------------------------------------------|
+| [`map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`map::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
 
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map/cend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/map/cend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/cend.md b/reference/map/map/cend.md
index abacf1b58..b35609733 100644
--- a/reference/map/map/cend.md
+++ b/reference/map/map/cend.md
@@ -10,11 +10,11 @@ const_iterator cend() const noexcept;
 ```
 
 ## 概要
-`map` コンテナの最後の要素の次を参照するイテレータを返す。
+`map` コンテナの末尾の次を参照するイテレータを取得する。
 
 
 ## 戻り値
-コンテナの最後の要素の次を参照するイテレータ。 
+コンテナの末尾の次を参照するイテレータ。 
 `const_iterator` はいずれもメンバ型である。`map` クラステンプレートにおいて、これらは双方向イテレータである。
 
 
@@ -78,14 +78,14 @@ int main()
 ## 関連項目
 
 | 名前 | 説明 |
-|------------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`map::begin`](/reference/map/map/begin.md) | 先頭を指すイテレータを取得する |
-| [`map::end`](/reference/map/map/end.md) | 末尾を指すイテレータを取得する |
-| [`map::cbegin`](/reference/map/map/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`map::rbegin`](/reference/map/map/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`map::rend`](/reference/map/map/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`map::crbegin`](/reference/map/map/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`map::crend`](/reference/map/map/crend.md) | 先頭を指す逆constイテレータを取得する |
+|------------------------------|-------------------------------------------|
+| [`map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`map::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
 
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map/crbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/map/crbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/crbegin.md b/reference/map/map/crbegin.md
index 8624ad553..5b724949f 100644
--- a/reference/map/map/crbegin.md
+++ b/reference/map/map/crbegin.md
@@ -10,9 +10,9 @@ const_reverse_iterator crbegin() const noexcept;
 ```
 
 ## 概要
-`map` コンテナ内の最後の要素を指す逆イテレータを返す。 
-内部的に、`map` コンテナは各要素をキーの値に従って下位から上位へと並べており、従って `crbegin()` は最上位のキーにあたる値を返す。 
-`crbegin()` は [`end()`](/reference/map/map/end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+`map` コンテナ内の末尾を指す逆イテレータを取得する。 
+内部的に、`map` コンテナは各要素をキーの値に従って下位から上位へと並べており、従って `crbegin()` は最上位のキーにあたる値へのイテレータを返す。 
+`crbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
 
 ## 戻り値
@@ -66,11 +66,11 @@ int main()
 
 ## 関連項目
 | 名前 | 説明 |
----------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`map::begin`](/reference/map/map/begin.md) | 先頭を指すイテレータを取得する |
-| [`map::end`](/reference/map/map/end.md) | 末尾を指すイテレータを取得する |
-| [`map::cbegin`](/reference/map/map/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`map::cend`](/reference/map/map/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`map::rbegin`](/reference/map/map/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`map::rend`](/reference/map/map/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`map::crend`](/reference/map/map/crend.md) | 先頭を指す逆constイテレータを取得する |
+-----------------------------|-------------------------------------------|
+| [`map::begin`](begin.md)   | 先頭を指すイテレータを取得する |
+| [`map::end`](end.md)       | 末尾の次を指すイテレータを取得する |
+| [`map::cbegin`](cbegin.md) | 先頭を指すconstイテレータを取得する |
+| [`map::cend`](cend.md)     | 末尾の次を指すconstイテレータを取得する |
+| [`map::rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
+| [`map::rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
+| [`map::crend`](crend.md)   | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map/crend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/map/crend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/crend.md b/reference/map/map/crend.md
index ecda48420..f896d56bf 100644
--- a/reference/map/map/crend.md
+++ b/reference/map/map/crend.md
@@ -11,8 +11,8 @@ const_reverse_iterator crend() const noexcept;
 
 
 ## 概要
-`map` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを返す。 
-`crend()` は [`begin()`](/reference/map/map/begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+`map` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。 
+`crend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
 
 ## 戻り値
@@ -64,11 +64,11 @@ int main()
 ## 関連項目
 
 | 名前 | 説明 |
-|------------------------------------------------------------------------------------------------|--------------------------------------------|
-| [`map::begin`](/reference/map/map/begin.md) | 先頭を指すイテレータを取得する |
-| [`map::end`](/reference/map/map/end.md) | 末尾を指すイテレータを取得する |
-| [`map::cbegin`](/reference/map/map/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`map::cend`](/reference/map/map/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`map::rbegin`](/reference/map/map/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`map::rend`](/reference/map/map/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`map::crbegin`](/reference/map/map/crbegin.md) | 末尾を指す逆constイテレータを取得する |
+|------------------------------|-----------------------------------------|
+| [`map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`map::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map/end.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/map/end.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/end.md b/reference/map/map/end.md
index b99f96425..295f317db 100644
--- a/reference/map/map/end.md
+++ b/reference/map/map/end.md
@@ -10,11 +10,11 @@ const_iterator end() const noexcept;
 ```
 
 ## 概要
-`map` コンテナの最後の要素の次を参照するイテレータを返す。
+`map` コンテナの末尾の次を参照するイテレータを取得する。
 
 
 ## 戻り値
-コンテナの最後の要素の次を参照するイテレータ。 
+コンテナの末尾の次を参照するイテレータ。 
 `iterator` と `const_iterator` はいずれもメンバ型である。`map` クラステンプレートにおいて、これらは双方向イテレータである。
 
 
@@ -79,11 +79,11 @@ int main()
 ## 関連項目
 
 | 名前 | 説明 |
-|------------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`map::begin`](/reference/map/map/begin.md) | 先頭を指すイテレータを取得する |
-| [`map::cbegin`](/reference/map/map/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`map::cend`](/reference/map/map/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`map::rbegin`](/reference/map/map/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`map::rend`](/reference/map/map/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`map::crbegin`](/reference/map/map/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`map::crend`](/reference/map/map/crend.md) | 先頭を指す逆constイテレータを取得する |
+|------------------------------|-------------------------------------------|
+| [`map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`map::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map/rbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/map/rbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/rbegin.md b/reference/map/map/rbegin.md
index ef66e81f8..d22d28ff1 100644
--- a/reference/map/map/rbegin.md
+++ b/reference/map/map/rbegin.md
@@ -10,9 +10,9 @@ const_reverse_iterator rbegin() const noexcept;
 ```
 
 ## 概要
-`map` コンテナ内の最後の要素を指す逆イテレータを返す。 
-内部的に、`map` コンテナは各要素をキーの値に従って下位から上位へと並べており、従って `rbegin()` は最上位のキーにあたる値を返す。 
-`rbegin()` は [`end()`](/reference/map/map/end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+`map` コンテナ内の末尾を指す逆イテレータを取得する。 
+内部的に、`map` コンテナは各要素をキーの値に従って下位から上位へと並べており、従って `rbegin()` は最上位のキーにあたる値を指すイテレータを返す。 
+`rbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
 
 ## 戻り値
@@ -66,12 +66,12 @@ int main()
 
 ## 関連項目
 | 名前 | 説明 |
----------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`map::begin`](/reference/map/map/begin.md) | 先頭を指すイテレータを取得する |
-| [`map::end`](/reference/map/map/end.md) | 末尾を指すイテレータを取得する |
-| [`map::cbegin`](/reference/map/map/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`map::cend`](/reference/map/map/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`map::rend`](/reference/map/map/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`map::crbegin`](/reference/map/map/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`map::crend`](/reference/map/map/crend.md) | 先頭を指す逆constイテレータを取得する |
+-------------------------------|-----------------------------------------|
+| [`map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`map::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map/rend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/map/rend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/rend.md b/reference/map/map/rend.md
index a6192d436..819480823 100644
--- a/reference/map/map/rend.md
+++ b/reference/map/map/rend.md
@@ -10,8 +10,8 @@ const_reverse_iterator rend() const noexcept;
 ```
 
 ## 概要
-`map` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを返す。 
-`rend()` は [`begin()`](/reference/map/map/begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+`map` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。 
+`rend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
 ## 戻り値
 反転シーケンスの終端を指す逆イテレータ。 
@@ -60,12 +60,12 @@ int main()
 ## 関連項目
 
 | 名前 | 説明　|
-|------------------------------------------------------------------------------------------------|--------------------------------------------|
-| [`map::begin`](/reference/map/map/begin.md) | 先頭を指すイテレータを取得する |
-| [`map::end`](/reference/map/map/end.md) | 末尾を指すイテレータを取得する |
-| [`map::cbegin`](/reference/map/map/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`map::cend`](/reference/map/map/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`map::rbegin`](/reference/map/map/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`map::crbegin`](/reference/map/map/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`map::crend`](/reference/map/map/crend.md) | 先頭を指す逆constイテレータを取得する |
+|------------------------------|--------------------------------------------|
+| [`map::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`map::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`map::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`map::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`map::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`map::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`map::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multimap -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/multimap.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap.md b/reference/map/multimap.md
index 8cf3d751d..180e5c2c0 100644
--- a/reference/map/multimap.md
+++ b/reference/map/multimap.md
@@ -68,12 +68,12 @@ namespace std {
 |------------------------------|----------------------------------------------|-------|
 | [`begin`](multimap/begin.md)     | 先頭を指すイテレータを取得する               | |
 | [`cbegin`](multimap/cbegin.md)   | 先頭を指す読み取り専用イテレータを取得する   | C++11 |
-| [`end`](multimap/end.md)         | 末尾を指すイテレータを取得する               | |
-| [`cend`](multimap/cend.md)       | 末尾を指す読み取り専用イテレータを取得する   | C++11 |
+| [`end`](multimap/end.md)         | 末尾の次を指すイテレータを取得する               | |
+| [`cend`](multimap/cend.md)       | 末尾の次を指す読み取り専用イテレータを取得する   | C++11 |
 | [`rbegin`](multimap/rbegin.md)   | 末尾を指す逆イテレータを取得する             | |
 | [`crbegin`](multimap/crbegin.md) | 末尾を指す読み取り専用逆イテレータを取得する | C++11 |
-| [`rend`](multimap/rend.md)       | 先頭を指す逆イテレータを取得する             | |
-| [`crend`](multimap/crend.md)     | 先頭を指す読み取り専用逆イテレータを取得する | C++11 |
+| [`rend`](multimap/rend.md)       | 先頭の前を指す逆イテレータを取得する             | |
+| [`crend`](multimap/crend.md)     | 先頭の前を指す読み取り専用逆イテレータを取得する | C++11 |
 
 
 ### 領域
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/begin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/multimap/begin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/begin.md b/reference/map/multimap/begin.md
index b8c082ed3..f992c019f 100644
--- a/reference/map/multimap/begin.md
+++ b/reference/map/multimap/begin.md
@@ -11,8 +11,8 @@ const_iterator begin() const noexcept;
 
 
 ## 概要
-`multimap` コンテナの先頭のキーと要素のpairを参照するイテレータを返す。 
-内部的に、`multimap`コンテナは要素を下位から上位へと並べており、従って `begin()`は `multimap` 内の最下位のキーにあたるpairのイテレータを返す。
+`multimap` コンテナの先頭のキーと要素のpairを参照するイテレータを取得する。 
+内部的に、`multimap`コンテナは要素を下位から上位へと並べており、従って `begin()`は `multimap` 内の最下位のキーにあたるpairへのイテレータを返す。
 
 
 ## 戻り値
@@ -80,13 +80,13 @@ int main()
 ## 関連項目
 
 | 名前 | 説明 |
-|------------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`multimap::end`](/reference/map/multimap/end.md) | 末尾を指すイテレータを取得する |
-| [`multimap::cbegin`](/reference/map/multimap/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`multimap::cend`](/reference/map/multimap/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`multimap::rbegin`](/reference/map/multimap/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`multimap::rend`](/reference/map/multimap/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`multimap::crbegin`](/reference/map/multimap/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`multimap::crend`](/reference/map/multimap/crend.md) | 先頭を指す逆constイテレータを取得する |
+|-----------------------------------|-------------------------------------------|
+| [`multimap::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`multimap::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`multimap::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`multimap::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`multimap::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`multimap::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`multimap::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/cbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/multimap/cbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/cbegin.md b/reference/map/multimap/cbegin.md
index 89b46de68..8b5408b04 100644
--- a/reference/map/multimap/cbegin.md
+++ b/reference/map/multimap/cbegin.md
@@ -10,8 +10,8 @@ const_iterator cbegin() const noexcept;
 ```
 
 ## 概要
-`multimap` コンテナの先頭のキーと要素のpairを参照するイテレータを返す。 
-内部的に、`multimap`コンテナは要素を下位から上位へと並べており、従って `cbegin()` は `multimap` 内の最下位のキーにあたるpairのイテレータを返す。
+`multimap` コンテナの先頭のキーと要素のpairを参照するイテレータを取得する。 
+内部的に、`multimap`コンテナは要素を下位から上位へと並べており、従って `cbegin()` は `multimap` 内の最下位のキーにあたるpairへのイテレータを返す。
 
 
 ## 戻り値
@@ -75,16 +75,12 @@ int main()
 ## 関連項目
 
 | 名前 | 説明 |
-|------------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`multimap::begin`](/reference/map/multimap/begin.md) | 先頭を指すイテレータを取得する |
-| [`multimap::end`](/reference/map/multimap/end.md) | 末尾を指すイテレータを取得する |
-| [`multimap::cend`](/reference/map/multimap/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`multimap::rbegin`](/reference/map/multimap/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`multimap::rend`](/reference/map/multimap/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`multimap::crbegin`](/reference/map/multimap/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`multimap::crend`](/reference/map/multimap/crend.md) | 先頭を指す逆constイテレータを取得する |
-
-
-
-
+|-----------------------------------|-------------------------------------------|
+| [`multimap::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`multimap::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`multimap::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`multimap::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`multimap::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`multimap::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`multimap::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/cend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/multimap/cend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/cend.md b/reference/map/multimap/cend.md
index 1f74d30a4..4df914fa0 100644
--- a/reference/map/multimap/cend.md
+++ b/reference/map/multimap/cend.md
@@ -10,11 +10,11 @@ const_iterator cend() const noexcept;
 ```
 
 ## 概要
-`multimap` コンテナの最後の要素の次を参照するイテレータを返す。
+`multimap` コンテナの末尾の次を参照するイテレータを取得する。
 
 
 ## 戻り値
-コンテナの最後の要素の次を参照するイテレータ。 
+コンテナの末尾の次を参照するイテレータ。 
 `const_iterator` はいずれもメンバ型である。`multimap` クラステンプレートにおいて、これらは双方向イテレータである。
 
 
@@ -81,14 +81,14 @@ int main()
 ## 関連項目
 
 | 名前 | 説明 |
-|------------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`multimap::begin`](/reference/map/multimap/begin.md) | 先頭を指すイテレータを取得する |
-| [`multimap::end`](/reference/map/multimap/end.md) | 末尾を指すイテレータを取得する |
-| [`multimap::cbegin`](/reference/map/multimap/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`multimap::rbegin`](/reference/map/multimap/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`multimap::rend`](/reference/map/multimap/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`multimap::crbegin`](/reference/map/multimap/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`multimap::crend`](/reference/map/multimap/crend.md) | 先頭を指す逆constイテレータを取得する |
+|-----------------------------------|-------------------------------------------|
+| [`multimap::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`multimap::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`multimap::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`multimap::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`multimap::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`multimap::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`multimap::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
 
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/crbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/multimap/crbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/crbegin.md b/reference/map/multimap/crbegin.md
index a6809b1ac..6e492f98d 100644
--- a/reference/map/multimap/crbegin.md
+++ b/reference/map/multimap/crbegin.md
@@ -10,9 +10,9 @@ const_reverse_iterator crbegin() const noexcept;
 ```
 
 ## 概要
-`multimap` コンテナ内の最後の要素を指す逆イテレータを返す。 
-内部的に、`multimap` コンテナは各要素をキーの値に従って下位から上位へと並べており、従って `crbegin()` は最上位のキーにあたる値を返す。 
-`crbegin()` は [`end()`](/reference/map/multimap/end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+`multimap` コンテナ内の末尾を指す逆イテレータを取得する。 
+内部的に、`multimap` コンテナは各要素をキーの値に従って下位から上位へと並べており、従って `crbegin()` は最上位のキーにあたる値へのイテレータを返す。 
+`crbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
 
 ## 戻り値
@@ -67,11 +67,11 @@ int main()
 
 ## 関連項目
 | 名前 | 説明 |
----------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`multimap::begin`](/reference/map/multimap/begin.md) | 先頭を指すイテレータを取得する |
-| [`multimap::end`](/reference/map/multimap/end.md) | 末尾を指すイテレータを取得する |
-| [`multimap::cbegin`](/reference/map/multimap/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`multimap::cend`](/reference/map/multimap/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`multimap::rbegin`](/reference/map/multimap/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`multimap::rend`](/reference/map/multimap/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`multimap::crend`](/reference/map/multimap/crend.md) | 先頭を指す逆constイテレータを取得する |
+----------------------------------|-------------------------------------------|
+| [`multimap::begin`](begin.md)   | 先頭を指すイテレータを取得する |
+| [`multimap::end`](end.md)       | 末尾の次を指すイテレータを取得する |
+| [`multimap::cbegin`](cbegin.md) | 先頭を指すconstイテレータを取得する |
+| [`multimap::cend`](cend.md)     | 末尾の次を指すconstイテレータを取得する |
+| [`multimap::rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
+| [`multimap::rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
+| [`multimap::crend`](crend.md)   | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/crend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/multimap/crend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/crend.md b/reference/map/multimap/crend.md
index 9041b1499..214442dbd 100644
--- a/reference/map/multimap/crend.md
+++ b/reference/map/multimap/crend.md
@@ -11,8 +11,8 @@ const_reverse_iterator crend() const noexcept;
 
 
 ## 概要
-`multimap` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを返す。 
-`crend()` は [`begin()`](/reference/map/multimap/begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+`multimap` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。 
+`crend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
 
 ## 戻り値
@@ -65,11 +65,12 @@ int main()
 ## 関連項目
 
 | 名前 | 説明 |
-|------------------------------------------------------------------------------------------------|--------------------------------------------|
-| [`multimap::begin`](/reference/map/multimap/begin.md) | 先頭を指すイテレータを取得する |
-| [`multimap::end`](/reference/map/multimap/end.md) | 末尾を指すイテレータを取得する |
-| [`multimap::cbegin`](/reference/map/multimap/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`multimap::cend`](/reference/map/multimap/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`multimap::rbegin`](/reference/map/multimap/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`multimap::rend`](/reference/map/multimap/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`multimap::crbegin`](/reference/map/multimap/crbegin.md) | 末尾を指す逆constイテレータを取得する |
+|-----------------------------------|-----------------------------------------|
+| [`multimap::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`multimap::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`multimap::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`multimap::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`multimap::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`multimap::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`multimap::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/end.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/multimap/end.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/end.md b/reference/map/multimap/end.md
index 4bf789171..d1b69cfea 100644
--- a/reference/map/multimap/end.md
+++ b/reference/map/multimap/end.md
@@ -10,11 +10,11 @@ const_iterator end() const noexcept;
 ```
 
 ## 概要
-`multimap` コンテナの最後の要素の次を参照するイテレータを返す。
+`multimap` コンテナの末尾の次を参照するイテレータを取得する。
 
 
 ## 戻り値
-コンテナの最後の要素の次を参照するイテレータ。 
+コンテナの末尾の次を参照するイテレータ。 
 `iterator` と `const_iterator` はいずれもメンバ型である。`multimap` クラステンプレートにおいて、これらは双方向イテレータである。
 
 
@@ -82,11 +82,11 @@ int main()
 ## 関連項目
 
 | 名前 | 説明 |
-|------------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`multimap::begin`](/reference/map/multimap/begin.md) | 先頭を指すイテレータを取得する |
-| [`multimap::cbegin`](/reference/map/multimap/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`multimap::cend`](/reference/map/multimap/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`multimap::rbegin`](/reference/map/multimap/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`multimap::rend`](/reference/map/multimap/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`multimap::crbegin`](/reference/map/multimap/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`multimap::crend`](/reference/map/multimap/crend.md) | 先頭を指す逆constイテレータを取得する |
+|-----------------------------------|-------------------------------------------|
+| [`multimap::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`multimap::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`multimap::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`multimap::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`multimap::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`multimap::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`multimap::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/rbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/multimap/rbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/rbegin.md b/reference/map/multimap/rbegin.md
index ac65f4a05..b19d19bbc 100644
--- a/reference/map/multimap/rbegin.md
+++ b/reference/map/multimap/rbegin.md
@@ -10,9 +10,9 @@ const_reverse_iterator rbegin() const noexcept;
 ```
 
 ## 概要
-`multimap` コンテナ内の最後の要素を指す逆イテレータを返す。 
-内部的に、`multimap` コンテナは各要素をキーの値に従って下位から上位へと並べており、従って `rbegin()` は最上位のキーにあたる値を返す。 
-`rbegin()` は [`end()`](/reference/map/multimap/end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+`multimap` コンテナ内の末尾を指す逆イテレータを取得する。 
+内部的に、`multimap` コンテナは各要素をキーの値に従って下位から上位へと並べており、従って `rbegin()` は最上位のキーにあたる値をへのイテレータ返す。 
+`rbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
 
 ## 戻り値
@@ -67,12 +67,12 @@ int main()
 
 ## 関連項目
 | 名前 | 説明 |
----------------------------------------------------------------------------------------------|--------------------------------------------------|
-| [`multimap::begin`](/reference/map/multimap/begin.md) | 先頭を指すイテレータを取得する |
-| [`multimap::end`](/reference/map/multimap/end.md) | 末尾を指すイテレータを取得する |
-| [`multimap::cbegin`](/reference/map/multimap/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`multimap::cend`](/reference/map/multimap/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`multimap::rend`](/reference/map/multimap/rend.md) | 先頭を指す逆イテレータを取得する |
-| [`multimap::crbegin`](/reference/map/multimap/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`multimap::crend`](/reference/map/multimap/crend.md) | 先頭を指す逆constイテレータを取得する |
+------------------------------------|-------------------------------------------|
+| [`multimap::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`multimap::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`multimap::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`multimap::cend`](cend.md)       | 末尾を指すconstイテレータを取得する |
+| [`multimap::rend`](rend.md)       | 先頭の前を指す逆イテレータを取得する |
+| [`multimap::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`multimap::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/rend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/map/multimap/rend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/rend.md b/reference/map/multimap/rend.md
index 8bd6a71b2..b677d1e65 100644
--- a/reference/map/multimap/rend.md
+++ b/reference/map/multimap/rend.md
@@ -10,8 +10,8 @@ const_reverse_iterator rend() const noexcept;
 ```
 
 ## 概要
-`multimap` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを返す。 
-`rend()` は [`begin()`](/reference/map/multimap/begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
+`multimap` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。 
+`rend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
 ## 戻り値
 反転シーケンスの終端を指す逆イテレータ。 
@@ -61,12 +61,12 @@ int main()
 ## 関連項目
 
 | 名前 | 説明　|
-|------------------------------------------------------------------------------------------------|--------------------------------------------|
-| [`multimap::begin`](/reference/map/multimap/begin.md) | 先頭を指すイテレータを取得する |
-| [`multimap::end`](/reference/map/multimap/end.md) | 末尾を指すイテレータを取得する |
-| [`multimap::cbegin`](/reference/map/multimap/cbegin.md) | 先頭を指すconstイテレータを取得する |
-| [`multimap::cend`](/reference/map/multimap/cend.md) | 末尾を指すconstイテレータを取得する |
-| [`multimap::rbegin`](/reference/map/multimap/rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`multimap::crbegin`](/reference/map/multimap/crbegin.md) | 末尾を指す逆constイテレータを取得する |
-| [`multimap::crend`](/reference/map/multimap/crend.md) | 先頭を指す逆constイテレータを取得する |
+|-----------------------------------|-------------------------------------------|
+| [`multimap::begin`](begin.md)     | 先頭を指すイテレータを取得する |
+| [`multimap::end`](end.md)         | 末尾の次を指すイテレータを取得する |
+| [`multimap::cbegin`](cbegin.md)   | 先頭を指すconstイテレータを取得する |
+| [`multimap::cend`](cend.md)       | 末尾の次を指すconstイテレータを取得する |
+| [`multimap::rbegin`](rbegin.md)   | 末尾を指す逆イテレータを取得する |
+| [`multimap::crbegin`](crbegin.md) | 末尾を指す逆constイテレータを取得する |
+| [`multimap::crend`](crend.md)     | 先頭の前を指す逆constイテレータを取得する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multiset -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/multiset.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset.md b/reference/set/multiset.md
index 36892db95..b00dee107 100644
--- a/reference/set/multiset.md
+++ b/reference/set/multiset.md
@@ -57,12 +57,12 @@ namespace std {
 |-------------------------------|----------------------------------------------|-------|
 | [`begin`](multiset/begin.md)     | 先頭を指すイテレータを取得する               | |
 | [`cbegin`](multiset/cbegin.md)   | 先頭を指す読み取り専用イテレータを取得する   | C++11 |
-| [`end`](multiset/end.md)         | 末尾を指すイテレータを取得する               | |
-| [`cend`](multiset/cend.md)       | 末尾を指す読み取り専用イテレータを取得する   | C++11 |
+| [`end`](multiset/end.md)         | 末尾の次を指すイテレータを取得する               | |
+| [`cend`](multiset/cend.md)       | 末尾の次を指す読み取り専用イテレータを取得する   | C++11 |
 | [`rbegin`](multiset/rbegin.md)   | 末尾を指す逆イテレータを取得する             | |
 | [`crbegin`](multiset/crbegin.md) | 末尾を指す読み取り専用逆イテレータを取得する | C++11 |
-| [`rend`](multiset/rend.md)       | 先頭を指す逆イテレータを取得する             | |
-| [`crend`](multiset/crend.md)     | 先頭を指す読み取り専用逆イテレータを取得する | C++11 |
+| [`rend`](multiset/rend.md)       | 先頭の前を指す逆イテレータを取得する             | |
+| [`crend`](multiset/crend.md)     | 先頭の前を指す読み取り専用逆イテレータを取得する | C++11 |
 
 
 ### 領域
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/begin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/multiset/begin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/begin.md b/reference/set/multiset/begin.md
index 344415f45..034179969 100644
--- a/reference/set/multiset/begin.md
+++ b/reference/set/multiset/begin.md
@@ -11,9 +11,9 @@ const_iterator begin() const noexcept;
 
 
 ## 概要
-`multiset` コンテナの先頭要素を参照するイテレータを返す。
+`multiset` コンテナの先頭要素を参照するイテレータを取得する。
 
-内部的に、`multiset`コンテナは要素を下位から上位へと並べており、従って `begin()` は `multiset` 内の最下位のキーにあたる値を返す。
+内部的に、`multiset`コンテナは要素を下位から上位へと並べており、従って `begin()` は `multiset` 内の最下位のキーにあたる値へのイテレータを返す。
 
 
 ## 戻り値
@@ -67,6 +67,6 @@ int main()
 
 | 名前                       | 説明                             |
 |----------------------------|----------------------------------|
-| [`multiset::end`](end.md)       | 末尾を指すイテレータを取得する   |
+| [`multiset::end`](end.md)       | 末尾の次を指すイテレータを取得する |
 | [`multiset::rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`multiset::rend`](rend.md)     | 先頭を指す逆イテレータを取得する |
+| [`multiset::rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/cbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/multiset/cbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/cbegin.md b/reference/set/multiset/cbegin.md
index 0a9b0ef5b..9c95d81fd 100644
--- a/reference/set/multiset/cbegin.md
+++ b/reference/set/multiset/cbegin.md
@@ -11,7 +11,7 @@ const_iterator cbegin() const noexcept;
 
 
 ## 概要
-`multiset` コンテナの先頭要素を参照する読み取り専用イテレータを返す。
+`multiset` コンテナの先頭要素を参照する読み取り専用イテレータを取得する。
 
 
 ## 戻り値
@@ -52,7 +52,7 @@ int main()
 
 | 名前                       | 説明                             |
 |----------------------------|----------------------------------|
-| [`multiset::cend`](cend.md)     | 末尾を指す読み取り専用イテレータを取得する |
+| [`multiset::cend`](cend.md)     | 末尾の次を指す読み取り専用イテレータを取得する |
 | [`multuset::rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`multiset::rend`](rend.md)     | 先頭を指す逆イテレータを取得する |
+| [`multiset::rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/cend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/multiset/cend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/cend.md b/reference/set/multiset/cend.md
index 78807770c..2d776a64a 100644
--- a/reference/set/multiset/cend.md
+++ b/reference/set/multiset/cend.md
@@ -10,11 +10,11 @@ const_iterator cend() const noexcept;
 ```
 
 ## 概要
-`multiset` コンテナの最後の要素の次を参照する読み取り専用イテレータを返す。
+`multiset` コンテナの末尾の次を参照する読み取り専用イテレータを取得する。
 
 
 ## 戻り値
-コンテナの最後の要素の次を参照する読み取り専用イテレータ。
+コンテナの末尾の次を参照する読み取り専用イテレータ。
 
 `const_iterator` はメンバ型である。`multiset` クラステンプレートにおいて、これは双方向イテレータである。
 
@@ -59,5 +59,5 @@ int main()
 |-------------------------|----------------------------------|
 | [`cbegin`](cbegin.md) | 先頭を指す読み取り専用イテレータを取得する |
 | [`rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`rend`](rend.md)     | 先頭を指す逆イテレータを取得する |
+| [`rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/crbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/multiset/crbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/crbegin.md b/reference/set/multiset/crbegin.md
index e2912cff7..f7d188d48 100644
--- a/reference/set/multiset/crbegin.md
+++ b/reference/set/multiset/crbegin.md
@@ -11,7 +11,7 @@ const_reverse_iterator crbegin() const noexcept;
 
 
 ## 概要
-`multiset` コンテナ内の最後の要素を指す、読み取り専用逆イテレータを返す。
+`multiset` コンテナ内の末尾の要素を指す、読み取り専用逆イテレータを取得する。
 
 
 ## 戻り値
@@ -54,7 +54,7 @@ int main()
 
 | 名前                    | 説明                             |
 |-------------------------|----------------------------------|
-| [`crend`](crend.md)   | 先頭を指す読み取り専用逆イテレータを取得する |
+| [`crend`](crend.md)   | 先頭の前を指す読み取り専用逆イテレータを取得する |
 | [`cbegin`](cbegin.md) | 先頭を指す読み取り専用イテレータを取得する   |
-| [`cend`](cend.md)     | 末尾を指す読み取り専用イテレータを取得する   |
+| [`cend`](cend.md)     | 末尾の次を指す読み取り専用イテレータを取得する   |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/crend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/multiset/crend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/crend.md b/reference/set/multiset/crend.md
index 7447f8f57..48973d85a 100644
--- a/reference/set/multiset/crend.md
+++ b/reference/set/multiset/crend.md
@@ -11,7 +11,7 @@ const_reverse_iterator crend() const noexcept;
 
 
 ## 概要
-`multiset` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す読み取り専用逆イテレータを返す。
+`multiset` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す読み取り専用逆イテレータを取得する。
 
 
 ## 戻り値
@@ -50,7 +50,7 @@ int main()
 
 | 名前                    | 説明                         |
 |-------------------------|------------------------------|
-| [`crbegin`](rbegin.md) | 末尾を指す読み取り専用逆イテレータを返す |
+| [`crbegin`](crbegin.md) | 末尾を指す読み取り専用逆イテレータを返す |
 | [`cbegin`](begin.md)   | 先頭を指す読み取り専用イテレータを返す   |
-| [`cend`](end.md)       | 末尾を指す読み取り専用イテレータを返す   |
+| [`cend`](end.md)       | 末尾の次を指す読み取り専用イテレータを返す   |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/end.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/multiset/end.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/end.md b/reference/set/multiset/end.md
index d11e9f9c5..6956b6585 100644
--- a/reference/set/multiset/end.md
+++ b/reference/set/multiset/end.md
@@ -10,11 +10,11 @@ const_iterator end() const noexcept;
 ```
 
 ## 概要
-`multiset` コンテナの最後の要素の次を参照するイテレータを返す。
+`multiset` コンテナの末尾の次を参照するイテレータを取得する。
 
 
 ## 戻り値
-コンテナの最後の要素の次を参照するイテレータ。
+コンテナの末尾の次を参照するイテレータ。
 
 `iterator` と `const_iterator` はいずれもメンバ型である。`multiset` クラステンプレートにおいて、これらは双方向イテレータである。
 
@@ -70,5 +70,5 @@ int main()
 |-------------------------|----------------------------------|
 | [`begin`](begin.md)   | 先頭を指すイテレータを取得する   |
 | [`rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`rend`](rend.md)     | 先頭を指す逆イテレータを取得する |
+| [`rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/rbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/multiset/rbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/rbegin.md b/reference/set/multiset/rbegin.md
index 7c3433ef3..4220ad8ee 100644
--- a/reference/set/multiset/rbegin.md
+++ b/reference/set/multiset/rbegin.md
@@ -11,9 +11,9 @@ const_reverse_iterator rbegin() const noexcept;
 
 
 ## 概要
-`multiset` コンテナ内の最後の要素を指す逆イテレータを返す。
+`multiset` コンテナ内の末尾の要素を指す逆イテレータを取得する。
 
-内部的に、`multiset` コンテナは各要素を下位から上位へと並べており、従って `rbegin()` は最上位のキーにあたる値を返す。
+内部的に、`multiset` コンテナは各要素を下位から上位へと並べており、従って `rbegin()` は最上位のキーにあたる値へのイテレータを返す。
 
 `rbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
@@ -63,7 +63,7 @@ int main()
 
 | 名前                  | 説明                             |
 |-----------------------|----------------------------------|
-| [`rend`](rend.md)   | 先頭を指す逆イテレータを取得する |
+| [`rend`](rend.md)   | 先頭の前を指す逆イテレータを取得する |
 | [`begin`](begin.md) | 先頭を指すイテレータを取得する   |
-| [`end`](end.md)     | 末尾を指すイテレータを取得する   |
+| [`end`](end.md)     | 末尾の次を指すイテレータを取得する   |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/rend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/multiset/rend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/rend.md b/reference/set/multiset/rend.md
index 6ebfb9cc4..c8ea58d0c 100644
--- a/reference/set/multiset/rend.md
+++ b/reference/set/multiset/rend.md
@@ -11,7 +11,7 @@ const_reverse_iterator rend() const noexcept;
 
 
 ## 概要
-`multiset` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを返す。
+`multiset` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。
 
 `rend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
@@ -59,4 +59,4 @@ int main()
 |-------------------------|------------------------------|
 | [`rbegin`](rbegin.md) | 末尾を指す逆イテレータを返す |
 | [`begin`](begin.md)   | 先頭を指すイテレータを返す   |
-| [`end`](end.md)       | 末尾を指すイテレータを返す   |
+| [`end`](end.md)       | 末尾の次を指すイテレータを返す   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/set.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/set.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set.md b/reference/set/set.md
index 2b94af98d..eda67be00 100644
--- a/reference/set/set.md
+++ b/reference/set/set.md
@@ -58,12 +58,12 @@ namespace std {
 |-------------------------------|----------------------------------------------|-------|
 | [`begin`](set/begin.md)     | 先頭を指すイテレータを取得する               | |
 | [`cbegin`](set/cbegin.md)   | 先頭を指す読み取り専用イテレータを取得する   | C++11 |
-| [`end`](set/end.md)         | 末尾を指すイテレータを取得する               | |
-| [`cend`](set/cend.md)       | 末尾を指す読み取り専用イテレータを取得する   | C++11 |
+| [`end`](set/end.md)         | 末尾の次を指すイテレータを取得する               | |
+| [`cend`](set/cend.md)       | 末尾の次を指す読み取り専用イテレータを取得する   | C++11 |
 | [`rbegin`](set/rbegin.md)   | 末尾を指す逆イテレータを取得する             | |
 | [`crbegin`](set/crbegin.md) | 末尾を指す読み取り専用逆イテレータを取得する | C++11 |
-| [`rend`](set/rend.md)       | 先頭を指す逆イテレータを取得する             | |
-| [`crend`](set/crend.md)     | 先頭を指す読み取り専用逆イテレータを取得する | C++11 |
+| [`rend`](set/rend.md)       | 先頭の前を指す逆イテレータを取得する             | |
+| [`crend`](set/crend.md)     | 先頭の前を指す読み取り専用逆イテレータを取得する | C++11 |
 
 
 ### 領域
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/set/begin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/set/begin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/begin.md b/reference/set/set/begin.md
index 8d7b34c8d..dcf55187c 100644
--- a/reference/set/set/begin.md
+++ b/reference/set/set/begin.md
@@ -11,9 +11,9 @@ const_iterator begin() const noexcept;
 
 
 ## 概要
-`set` コンテナの先頭要素を参照するイテレータを返す。
+`set` コンテナの先頭要素を参照するイテレータを取得する。
 
-内部的に、`set`コンテナは要素を下位から上位へと並べており、従って `begin()` は `set` 内の最下位のキーにあたる値を返す。
+内部的に、`set`コンテナは要素を下位から上位へと並べており、従って `begin()` は `set` 内の最下位のキーにあたる値へのイテレータを返す。
 
 
 ## 戻り値
@@ -67,6 +67,6 @@ int main()
 
 | 名前                       | 説明                             |
 |----------------------------|----------------------------------|
-| [`set::end`](end.md)       | 末尾を指すイテレータを取得する   |
+| [`set::end`](end.md)       | 末尾の次を指すイテレータを取得する   |
 | [`set::rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`set::rend`](rend.md)     | 先頭を指す逆イテレータを取得する |
+| [`set::rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/set/cbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/set/cbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/cbegin.md b/reference/set/set/cbegin.md
index 4a5252d05..f33001749 100644
--- a/reference/set/set/cbegin.md
+++ b/reference/set/set/cbegin.md
@@ -11,7 +11,7 @@ const_iterator cbegin() const noexcept;
 
 
 ## 概要
-`set` コンテナの先頭要素を参照する読み取り専用イテレータを返す。
+`set` コンテナの先頭要素を参照する読み取り専用イテレータを取得する。
 
 
 ## 戻り値
@@ -52,7 +52,7 @@ int main()
 
 | 名前                       | 説明                             |
 |----------------------------|----------------------------------|
-| [`set::cend`](cend.md)     | 末尾を指す読み取り専用イテレータを取得する |
+| [`set::cend`](cend.md)     | 末尾の次を指す読み取り専用イテレータを取得する |
 | [`set::rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`set::rend`](rend.md)     | 先頭を指す逆イテレータを取得する |
+| [`set::rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/set/cend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/set/cend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/cend.md b/reference/set/set/cend.md
index d80cbb7cb..0e9bed668 100644
--- a/reference/set/set/cend.md
+++ b/reference/set/set/cend.md
@@ -10,11 +10,11 @@ const_iterator cend() const noexcept;
 ```
 
 ## 概要
-`set` コンテナの最後の要素の次を参照する読み取り専用イテレータを返す。
+`set` コンテナの末尾の次を参照する読み取り専用イテレータを取得する。
 
 
 ## 戻り値
-コンテナの最後の要素の次を参照する読み取り専用イテレータ。
+コンテナの末尾の次を参照する読み取り専用イテレータ。
 
 `const_iterator` はメンバ型である。`set` クラステンプレートにおいて、これは双方向イテレータである。
 
@@ -59,5 +59,5 @@ int main()
 |-------------------------|----------------------------------|
 | [`cbegin`](cbegin.md) | 先頭を指す読み取り専用イテレータを取得する |
 | [`rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`rend`](rend.md)     | 先頭を指す逆イテレータを取得する |
+| [`rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/set/crbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/set/crbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/crbegin.md b/reference/set/set/crbegin.md
index 2760394b7..fc1825d95 100644
--- a/reference/set/set/crbegin.md
+++ b/reference/set/set/crbegin.md
@@ -11,7 +11,7 @@ const_reverse_iterator crbegin() const noexcept;
 
 
 ## 概要
-`set` コンテナ内の最後の要素を指す、読み取り専用逆イテレータを返す。
+`set` コンテナ内の末尾の要素を指す、読み取り専用逆イテレータを取得する。
 
 
 ## 戻り値
@@ -54,7 +54,7 @@ int main()
 
 | 名前                    | 説明                             |
 |-------------------------|----------------------------------|
-| [`crend`](crend.md)   | 先頭を指す読み取り専用逆イテレータを取得する |
+| [`crend`](crend.md)   | 先頭の前を指す読み取り専用逆イテレータを取得する |
 | [`cbegin`](cbegin.md) | 先頭を指す読み取り専用イテレータを取得する   |
-| [`cend`](cend.md)     | 末尾を指す読み取り専用イテレータを取得する   |
+| [`cend`](cend.md)     | 末尾の次を指す読み取り専用イテレータを取得する   |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/set/crend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/set/crend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/crend.md b/reference/set/set/crend.md
index a6043a679..ebf206350 100644
--- a/reference/set/set/crend.md
+++ b/reference/set/set/crend.md
@@ -11,7 +11,7 @@ const_reverse_iterator crend() const noexcept;
 
 
 ## 概要
-`set` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す読み取り専用逆イテレータを返す。
+`set` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す読み取り専用逆イテレータを取得する。
 
 
 ## 戻り値
@@ -52,5 +52,5 @@ int main()
 |-------------------------|------------------------------|
 | [`crbegin`](rbegin.md) | 末尾を指す読み取り専用逆イテレータを返す |
 | [`cbegin`](begin.md)   | 先頭を指す読み取り専用イテレータを返す   |
-| [`cend`](end.md)       | 末尾を指す読み取り専用イテレータを返す   |
+| [`cend`](end.md)       | 末尾の次を指す読み取り専用イテレータを返す   |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/set/end.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/set/end.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/end.md b/reference/set/set/end.md
index 91d728408..66aab63ba 100644
--- a/reference/set/set/end.md
+++ b/reference/set/set/end.md
@@ -10,11 +10,11 @@ const_iterator end() const noexcept;
 ```
 
 ## 概要
-`set` コンテナの最後の要素の次を参照するイテレータを返す。
+`set` コンテナの末尾の次を参照するイテレータを取得する。
 
 
 ## 戻り値
-コンテナの最後の要素の次を参照するイテレータ。
+コンテナの末尾の次を参照するイテレータ。
 
 `iterator` と `const_iterator` はいずれもメンバ型である。`set` クラステンプレートにおいて、これらは双方向イテレータである。
 
@@ -70,5 +70,5 @@ int main()
 |-------------------------|----------------------------------|
 | [`begin`](begin.md)   | 先頭を指すイテレータを取得する   |
 | [`rbegin`](rbegin.md) | 末尾を指す逆イテレータを取得する |
-| [`rend`](rend.md)     | 先頭を指す逆イテレータを取得する |
+| [`rend`](rend.md)     | 先頭の前を指す逆イテレータを取得する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/set/rbegin.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/set/rbegin.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/rbegin.md b/reference/set/set/rbegin.md
index 0ee8c2961..27a33219a 100644
--- a/reference/set/set/rbegin.md
+++ b/reference/set/set/rbegin.md
@@ -11,9 +11,9 @@ const_reverse_iterator rbegin() const noexcept;
 
 
 ## 概要
-`set` コンテナ内の最後の要素を指す逆イテレータを返す。
+`set` コンテナ内の末尾の要素を指す逆イテレータを取得する。
 
-内部的に、`set` コンテナは各要素を下位から上位へと並べており、従って `rbegin()` は最上位のキーにあたる値を返す。
+内部的に、`set` コンテナは各要素を下位から上位へと並べており、従って `rbegin()` は最上位のキーにあたる値を指すイテレータを返す。
 
 `rbegin()` は [`end()`](end.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
@@ -63,7 +63,7 @@ int main()
 
 | 名前                  | 説明                             |
 |-----------------------|----------------------------------|
-| [`rend`](rend.md)   | 先頭を指す逆イテレータを取得する |
+| [`rend`](rend.md)   | 先頭の前を指す逆イテレータを取得する |
 | [`begin`](begin.md) | 先頭を指すイテレータを取得する   |
-| [`end`](end.md)     | 末尾を指すイテレータを取得する   |
+| [`end`](end.md)     | 末尾の次を指すイテレータを取得する   |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- set/mapのbegin/end系 : ほかのコンテナに合わせて文章を整理</title>
      <link href="https://cpprefjp.github.io/reference/set/set/rend.html"/>
      <id>8f3626e2afa6c227bc9170774fd7b72e87d3c7c8:reference/set/set/rend.md</id>
      <updated>2023-06-13T21:17:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/rend.md b/reference/set/set/rend.md
index b0560212b..ffdbe061c 100644
--- a/reference/set/set/rend.md
+++ b/reference/set/set/rend.md
@@ -11,7 +11,7 @@ const_reverse_iterator rend() const noexcept;
 
 
 ## 概要
-`set` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを返す。
+`set` コンテナの先頭要素の前（これは反転シーケンスの末尾にあたる）を指す逆イテレータを取得する。
 
 `rend()` は [`begin()`](begin.md) と同じ要素を指すわけではなく、その前の要素を指すことに注意。
 
@@ -59,4 +59,4 @@ int main()
 |-------------------------|------------------------------|
 | [`rbegin`](rbegin.md) | 末尾を指す逆イテレータを返す |
 | [`begin`](begin.md)   | 先頭を指すイテレータを返す   |
-| [`end`](end.md)       | 末尾を指すイテレータを返す   |
+| [`end`](end.md)       | 末尾の次を指すイテレータを返す   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++20 -- C++20 : shared_ptrのアトミック操作が非推奨になったことを記載</title>
      <link href="https://cpprefjp.github.io/lang/cpp20.html"/>
      <id>0f3743e212c0c612150466f8fec1babd509c7a6f:lang/cpp20.md</id>
      <updated>2023-06-13T16:09:39+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++20&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20とは、2020年中に改訂され、ISO/IEC 14882:2020で標準規格化されたC++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++2aと呼ばれることがあった。「202a年にリリースされる」という伏せ字として「a」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;クラス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;三方比較演算子によって比較演算子の自動生成を行うようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html&#34;&gt;ビットフィールドのメンバ変数初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドメンバ変数のデフォルト値を設定する構文を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/explicit_bool.html&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;explicit(true)&lt;/code&gt;のように&lt;code&gt;explicit&lt;/code&gt;に真理値パラメータを指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html&#34;&gt;&lt;code&gt;const&lt;/code&gt;修飾されたメンバポインタの制限を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.*&lt;/code&gt;演算子での左辺値の&lt;code&gt;const&lt;/code&gt;メンバ関数呼び出しを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.html&#34;&gt;デフォルトのコピーコンストラクタと非&lt;code&gt;const&lt;/code&gt;なコンストラクタが衝突する問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非&lt;code&gt;const&lt;/code&gt;なオブジェクトをとるコンストラクタを定義すると、そのクラスをラップしたクラスのコピーコンストラクタが&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;になってしまう問題を修正&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/access_checking_on_specializations.html&#34;&gt;特殊化のアクセスチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html&#34;&gt;空オブジェクトに対する最適化を支援する属性&lt;code&gt;[[no_unique_address]]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[no_unique_address]]&lt;/code&gt;属性を導入し、空の型のオブジェクトをほかのオブジェクトと共有する最適化を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html&#34;&gt;friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構造化束縛の仕様として公開メンバ変数のみを取り出せるようになっていたが、friend指定された関数からは非公開メンバ変数にもアクセスできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html&#34;&gt;構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非テンプレートの&lt;code&gt;get()&lt;/code&gt;メンバ関数が見つかった場合は、非メンバ関数の&lt;code&gt;get()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/checking_for_abstract_class_types.html&#34;&gt;抽象型のチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の宣言段階では、パラメータおよび戻り値型が抽象型かどうかをチェックしないようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.html&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラスの&lt;code&gt;delete&lt;/code&gt;演算子が呼び出される前にデストラクタが呼ばれないようにするオプションを追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.md.nolink&#34;&gt;条件付きで特殊メンバ関数をトリビアルに定義するように&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;制約によってトリビアルな特殊メンバ関数と非トリビアルな特殊メンバ関数をオーバーロードできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html&#34;&gt;未初期化領域への暗黙的なオブジェクト構築&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域の利用時に自動的にトリビアルな型のオブジェクトを構築する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;列挙型&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;using enum EnumType;&lt;/code&gt;もしくは&lt;code&gt;using EnumType::enumerator&lt;/code&gt;とすることで、列挙値のスコープ指定を省略できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/designated_initialization.html&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;波カッコによる集成体初期化でメンバ名を指定して初期化できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html&#34;&gt;構造化束縛を拡張して通常の変数宣言のように使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;記憶域指定子として&lt;code&gt;static&lt;/code&gt;と&lt;code&gt;thread_local&lt;/code&gt;の指定を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T x{1, 2, 3};&lt;/code&gt;と同様に&lt;code&gt;T x(1, 2, 3);&lt;/code&gt;でも集成体初期化できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.html&#34;&gt;&lt;code&gt;new&lt;/code&gt;式での配列要素数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;double* p = new double[]{1,2,3};&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.html&#34;&gt;要素数不明の配列への変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数が判明している配列から、要素数が不明の配列への変換を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html&#34;&gt;ほとんどの&lt;code&gt;volatile&lt;/code&gt;を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;volatile&lt;/code&gt;の有用な機能のみを残し、効果が疑わしい、または壊れている機能を非推奨化する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.html&#34;&gt;ポインタから&lt;code&gt;bool&lt;/code&gt;への変換を縮小変換とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポインタから&lt;code&gt;bool&lt;/code&gt;値への変換を縮小変換と規定することで、意図しない変換を防止する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;整数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html&#34;&gt;符号付き整数型が2の補数表現であることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;符号付き整数型のビット表現を2の補数に規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/char8_t.html&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-8エンコードされた文字かどうかでオーバーロード・特殊化をできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルを、文字コードUTF-16/32に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;、&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;の定義に関係なく、&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;のリテラルをUTF-16/32文字コードに規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/nodiscard_should_have_a_reason.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性に理由となる文字列を付加できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならない理由を関数宣言に持たせ、警告メッセージに役立てる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/nodiscard_for_constructors.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;をコンストラクタのオーバーロードごとに付加できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リソース確保するコンストラクタにのみ&lt;code&gt;[[nodisacrd]]&lt;/code&gt;を付加できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;制御構文&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html&#34;&gt;初期化式をともなう範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲for文スコープで使用する変数の初期化のための構文を追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html&#34;&gt;範囲for文がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;メンバ関数のどちらかが見つからなかった場合に非メンバ関数の&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html&#34;&gt;確率が高い分岐と低い分岐を伝える属性 &lt;code&gt;[[likely]]&lt;/code&gt;, &lt;code&gt;[[unlikely]]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;条件分岐の最適化ヒントを与える属性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/concepts.html&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータに対する制約を行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/function_templates_with_auto_parameters.html&#34;&gt;autoパラメータによる関数テンプレートの簡易定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックラムダと同様、関数パラメータをの型を&lt;code&gt;auto&lt;/code&gt;にすることで簡易的に関数テンプレートを定義できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/down_with_typename.html&#34;&gt;型の文脈で&lt;code&gt;typename&lt;/code&gt;の省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型しか現れない文脈では、依存名を解決するための&lt;code&gt;typename&lt;/code&gt;キーワードを省略できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.html&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式として使用できる型を広く非型テンプレートパラメータとして使用できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/adl_and_function_templates_that_are_not_visible.html&#34;&gt;関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;名前空間内の関数テンプレートをテンプレート引数指定かつ非修飾・ADLで正しく呼び出せるよう修正&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_aggregates.html&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラステンプレートのテンプレート引数推論はコンストラクタ引数から推論されるが、集成体初期化からも推論できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_alias_templates.html&#34;&gt;エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エイリアステンプレートからクラステンプレートのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/less_eager_instantiation_of_constexpr_functions.html&#34;&gt;評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sizeof&lt;/code&gt;や&lt;code&gt;decltype&lt;/code&gt;などの評価されない文脈において定数式評価を行った場合に、ムーブコンストラクタのような特殊メンバ関数が定義されることを規定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;仮想関数に&lt;code&gt;constexpr&lt;/code&gt;を付けられない制限を解除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式での動的多態を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/try-catch_blocks_in_constexpr_functions.html&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内で&lt;code&gt;try-catch&lt;/code&gt;ブロックを書けるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/immediate_functions.html&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;consteval&lt;/code&gt;キーワードを追加し、常に定数式評価されるよう指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.html&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体メンバの書き換えを定数式内で行えるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.html&#34;&gt;constexpr関数内でのトリビアルなデフォルト初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でのデフォルト初期化を許可し、未初期化値を読むことのみ禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない場合にconstexpr関数にasm定義を含めることを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/constinit.html&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;初期化のみコンパイル時におわらせたい場合に使用する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/more_constexpr_containers.html&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;記憶域をもつメモリアロケータの存在を考慮することで、可変サイズをもつコンテナをコンパイル時に使用できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ラムダ式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックラムダでテンプレートパラメータを定義できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html&#34;&gt;ラムダ式のキャプチャとして&lt;code&gt;[=, this]&lt;/code&gt;を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトコピーキャプチャと&lt;code&gt;this&lt;/code&gt;ポインタのコピーキャプチャを両方指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html&#34;&gt;&lt;code&gt;[=]&lt;/code&gt;による&lt;code&gt;this&lt;/code&gt;の暗黙のキャプチャを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コピーのデフォルトキャプチャでは、&lt;code&gt;this&lt;/code&gt;ポインタをキャプチャされなくする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/simplifying_implicit_lambda_capture.html&#34;&gt;暗黙のラムダキャプチャを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のキャプチャに関する仕様整理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html&#34;&gt;状態を持たないラムダ式を、デフォルト構築可能、代入可能とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャしていないラムダ式をデフォルト構築・代入可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html&#34;&gt;評価されない文脈でのラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;評価されない文脈でもラムダ式を書くことができるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.html&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[...args = std::move(args)]&lt;/code&gt;のようなキャプチャを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.html&#34;&gt;構造化束縛した変数の参照キャプチャを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構造化束縛をした変数は特殊な扱いのためラムダ式で参照キャプチャできない規定となっていたがこれを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;名前空間&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/nested_inline_mamespaces.html&#34;&gt;入れ子名前空間定義でのインライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace ns1::inline ns2::ns3 {}&lt;/code&gt;のように、入れ子名前空間を定義する式にインライン名前空間の指定を含められるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;モジュール化&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヘッダファイル・ソースファイル、インクルードに変わる仕組みとしてモジュールを導入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;並行・並列処理&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数実行を中断・再開する仕組みとしてコルーチンを導入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;プリプロセッサ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/va_opt.html&#34;&gt;可変引数が空でない場合のトークン置換&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの置換で可変引数が空の場合に余計なカンマが付いてしまう問題に対処&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_pod.html&#34;&gt;PODを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;PODという用語を非推奨化する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html&#34;&gt;&lt;code&gt;[=]&lt;/code&gt;による&lt;code&gt;this&lt;/code&gt;の暗黙のキャプチャを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コピーのデフォルトキャプチャでは、&lt;code&gt;this&lt;/code&gt;ポインタのキャプチャを非推奨化する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.html&#34;&gt;添字演算子内でのカンマ演算子の使用を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ar[i, j]&lt;/code&gt;を非推奨化。&lt;code&gt;ar[(i, j)]&lt;/code&gt;はOK&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/remove_deprecated_nothrow_exception_specification.html&#34;&gt;&lt;code&gt;throw()&lt;/code&gt;による例外送出しない指定を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代わりに&lt;code&gt;noexcept&lt;/code&gt;を使用すること&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.html&#34;&gt;ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタが&lt;code&gt;delete&lt;/code&gt;／&lt;code&gt;default&lt;/code&gt;宣言されているクラスを、集成体初期化によってコンストラクタ呼び出しを回避して構築できてしまっていた技法を禁止&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/predefined_macros.html&#34;&gt;更新された定義済みマクロ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準規格で定義されたマクロの更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/update_the_reference_to_the_unicode_standard.html&#34;&gt;Unicode標準への参照を更新&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準C++からISO/IEC 10646への参照を更新する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/reserving_attribute_namespaces_for_future_use.html&#34;&gt;属性の名前空間を予約&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将来の使用のために属性の名前空間を予約&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;バージョン情報ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加。ここでは、実装依存の情報 (バージョンやリリース日付など) が標準ライブラリの実装によって定義される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;ライブラリに、カレンダーとタイムゾーンの機能を拡張&lt;/li&gt;
&lt;li&gt;任意のシーケンスの部分シーケンスを参照するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;文字列フォーマットライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;出力ストリームを同期するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;三方比較ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;数値ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加。数学定数が定義される&lt;/li&gt;
&lt;li&gt;ビット操作ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;Strict Aliasing規則に抵触しないビットレベルの再解釈キャストである&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_cast.html&#34;&gt;std::bit_cast()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;1ビットだけ立っている値をもっているかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/has_single_bit.html&#34;&gt;std::has_single_bit()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;整数値を2の累乗値に切り上げる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_ceil.html&#34;&gt;std::bit_ceil()&lt;/a&gt;&lt;/code&gt;関数、整数値を2の累乗値に切り下げる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_floor.html&#34;&gt;std::bit_floor()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;値を表現するために必要なビット幅を求める&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_width.html&#34;&gt;std::bit_width()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;循環ビットシフトを行う&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/rotl.html&#34;&gt;std::rotl()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/rotr.html&#34;&gt;std::rotr()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;連続した0もしくは1のビットを数える&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countl_zero.html&#34;&gt;std::countl_zero()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countl_one.html&#34;&gt;std::countl_one()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countr_zero.html&#34;&gt;std::countr_zero()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countr_one.html&#34;&gt;std::countr_one()&lt;/a&gt;&lt;/code&gt;、および立っているビットを数える&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/popcount.html&#34;&gt;std::popcount()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;エンディアンを表す列挙型として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/endian.html&#34;&gt;std::endian&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;型制約のための要件ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;言語機能であるコルーチンを制御するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スレッドの実行を停止させるメカニズムとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加し、停止に対応したスレッドクラスとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/jthread.html&#34;&gt;std::jthread&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;軽量な同期プリミティブであるセマフォのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スレッド調整メカニズムとして、ラッチライブラリの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;、バリアライブラリの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;イテレータの組ではなく、コンテナや配列、部分的なコンテナなどを扱う範囲ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;既存のイテレータの組を扱うアルゴリズムは、&lt;code&gt;std::ranges&lt;/code&gt;名前空間に範囲版アルゴリズムが追加される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ソースコードの位置を取得するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;取り決め&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;名前空間以下の関数テンプレートをユーザーが特殊化することを禁止する (参照 : &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0551r3.pdf&#34; target=&#34;_blank&#34;&gt;P0551R3&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;連想コンテナに、要素がコンテナに含まれているかを判定する&lt;code&gt;contains()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;順序付き連想コンテナと同様に、非順序連想コンテナの検索処理で、一時オブジェクトが生成されるコストを抑える拡張を追加。キー等値比較を行う関数オブジェクトとハッシュ計算を行う関数オブジェクトの両方に&lt;code&gt;is_transparent&lt;/code&gt;が定義されていれば、透過的な検索が使用できる。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;std::hash&lt;/a&gt;&lt;/code&gt;クラスのページを参照&lt;/li&gt;
&lt;li&gt;各コンテナの非メンバ関数として、要素を削除する&lt;code&gt;std::erase()&lt;/code&gt;関数と&lt;code&gt;std::erase_if()&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/forward_list/forward_list.html&#34;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/list/list.html&#34;&gt;std::list&lt;/a&gt;&lt;/code&gt;のメンバ関数&lt;code&gt;remove()&lt;/code&gt;、&lt;code&gt;remove_if()&lt;/code&gt;、&lt;code&gt;unique()&lt;/code&gt;の戻り値型を、&lt;code&gt;void&lt;/code&gt;から&lt;code&gt;Container::size_type&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;クラスの比較演算子、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array/fill.html&#34;&gt;fill()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array/swap.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array/swap_free.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;非メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加。このクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;li&gt;組み込み配列を&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;に変換する関数として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/to_array.html&#34;&gt;std::to_array()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;に、符号付き整数としてコンテナの要素数を取得する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ssize.html&#34;&gt;std::ssize()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;、および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/vector/vector.html&#34;&gt;std::vector&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;の多くの関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、要素位置をシフトする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/shift_left.html&#34;&gt;std::shift_left()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/shift_right.html&#34;&gt;std::shift_right()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に三方比較による辞書順比較アルゴリズム&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/lexicographical_compare_three_way.html&#34;&gt;std::lexicographical_compare_three_way()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;数値とポインタの中点を求める関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/midpoint.html&#34;&gt;std::midpoint()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;浮動小数点数を線形補間する関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/lerp.html&#34;&gt;std::lerp()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;の数値計算アルゴリズムをムーブに対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;の数値計算アルゴリズムに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_insert_iterator.html&#34;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_insert_iterator.html&#34;&gt;std::front_insert_iterator&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/insert_iterator.html&#34;&gt;std::insert_iterator&lt;/a&gt;&lt;/code&gt;クラスのコンストラクタ、代入演算子、間接参照演算子、インクリメント演算子、および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_inserter.html&#34;&gt;std::back_inserter()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_inserter.html&#34;&gt;std::front_inserter()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/inserter.html&#34;&gt;std::inserter()&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;constexpr&lt;/code&gt;を追加。これらのクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/ref.html&#34;&gt;std::ref()&lt;/a&gt;&lt;/code&gt;関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/cref.html&#34;&gt;std::cref()&lt;/a&gt;&lt;/code&gt;関数のテンプレートパラメータ&lt;code&gt;T&lt;/code&gt;型に不完全型を指定することを許可&lt;/li&gt;
&lt;li&gt;メンバ関数の部分適用を簡単にするために、プレースホルダーの指定なく引数を先頭から順に束縛する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt;の各操作、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.html&#34;&gt;std::not_fn()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;std::bind()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/mem_fn.html&#34;&gt;std::mem_fn()&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;li&gt;コンセプトの導入にともない、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に、受け取った値をそのまま返す関数オブジェクト&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/identity.html&#34;&gt;std::identity&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;クラスに、先頭の部分文字列を判定する&lt;code&gt;starts_with()&lt;/code&gt;メンバ関数、末尾の部分文字列を判定する&lt;code&gt;ends_with()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/reserve.html&#34;&gt;reserve()&lt;/a&gt;&lt;/code&gt;メンバ関数の、メモリの縮小機能を削除し、伸長のみとする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;std::char_traits&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits/move.html&#34;&gt;move()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits/copy.html&#34;&gt;copy()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits/assign.html&#34;&gt;assign()&lt;/a&gt;&lt;/code&gt;静的メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行・並列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag.html&#34;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt;クラスのデフォルトコンストラクタが、値初期化するよう動作変更。これまではC言語との互換性のために未初期化となっていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;に対する特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスの浮動小数点数型に対する特殊化を追加&lt;/li&gt;
&lt;li&gt;アトミッククラスに対するブロッキング同期の機能として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/wait.html&#34;&gt;wait()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/notify_one.html&#34;&gt;notify_one()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/notify_all.html&#34;&gt;notify_all()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ロックフリーであることが保証されたアトミック整数型の別名として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;atomic_signed_lock_free&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;atomic_unsigned_lock_free&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/memory_order.html&#34;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;の列挙子にスコープをもたせた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag.html&#34;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;bool&lt;/code&gt;値を読み込むメンバ関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag/test.html&#34;&gt;test()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;非アトミックなオブジェクトにアトミック操作を適用するためのクラス&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_ref.html&#34;&gt;std::atomic_ref&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ベクトル化の実行ポリシーとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/execution/execution/execution_policy.html&#34;&gt;std::execution::unsequenced_policy&lt;/a&gt;&lt;/code&gt;型と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/execution/execution/execution_policy.html&#34;&gt;std::execution::unseq&lt;/a&gt;&lt;/code&gt;タグを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;同期ストリームの追加にともなって、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;に、同期ストリーム関係の出力マニピュレータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/istream/basic_istream/op_istream_free.html&#34;&gt;operator&amp;gt;&amp;gt;&lt;/a&gt;(basic_istream&amp;amp;, CharT*)&lt;/code&gt;を&lt;code&gt;operator&amp;gt;&amp;gt;(basic_istream&amp;amp;, CharT (&amp;amp;)[N])&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html&#34;&gt;operator&amp;lt;&amp;lt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;wchar_t&lt;/code&gt; (&lt;code&gt;char&lt;/code&gt;版のみ)、&lt;code&gt;char8_t&lt;/code&gt;、&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;のdelete宣言を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/istream_iterator.html&#34;&gt;std::istream_iterator&lt;/a&gt;&lt;/code&gt;について、要件の書き方を整理し、振る舞いをより明確化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::basic_stringbuf&lt;/code&gt;、&lt;code&gt;std::basic_istringstream&lt;/code&gt;、&lt;code&gt;std::basic_ostringstream&lt;/code&gt;クラスに、アロケータを伝播させるためのインタフェースを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_shared.html&#34;&gt;std::make_shared()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocate_shared.html&#34;&gt;std::allocate_shared()&lt;/a&gt;&lt;/code&gt;を配列に対応&lt;/li&gt;
&lt;li&gt;スマートポインタをデフォルト初期化で構築するヘルパ関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_unique_for_overwrite.html&#34;&gt;std::make_unique_for_overwrite()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_shared_for_overwrite.html&#34;&gt;std::make_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocate_shared_for_overwrite.html&#34;&gt;std::allocate_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ポインタを生ポインタに変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/to_address.html&#34;&gt;std::to_address()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_traits.html&#34;&gt;std::pointer_traits&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_traits/pointer_to.html&#34;&gt;pointer_to()&lt;/a&gt;&lt;/code&gt;関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Nバイトアライメントされたポインタであることをコンパイラに伝える&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/assume_aligned.html&#34;&gt;std::assume_aligned()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、uses allocator構築をサポートするユーティリティ関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uses_allocator_construction_args.html&#34;&gt;std::uses_allocator_construction_args()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_obj_using_allocator.html&#34;&gt;std::make_obj_using_allocator()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_construct_using_allocator.html&#34;&gt;std::uninitialized_construct_using_allocator()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator.html&#34;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt;に、以下の変更を追加：&lt;ul&gt;
&lt;li&gt;クラステンプレートのデフォルトテンプレート引数を&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;&lt;/code&gt;型とした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void*&lt;/code&gt;のバイト列をメモリ確保する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_bytes.html&#34;&gt;allocate_bytes()&lt;/a&gt;&lt;/code&gt;、解放する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/deallocate_bytes.html&#34;&gt;deallocate_bytes()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;指定した型のメモリを確保する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_object.html&#34;&gt;allocate_object()&lt;/a&gt;&lt;/code&gt;、解放する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/deallocate_object.html&#34;&gt;deallocate_object()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;指定した型のメモリ確保と構築をする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/new_object.html&#34;&gt;new_object()&lt;/a&gt;&lt;/code&gt;、破棄と解放をする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/delete_object.html&#34;&gt;delete_object()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、符号付き整数と符号なし整数の安全な比較関数として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/cmp_equal.html&#34;&gt;std::cmp_equal()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/cmp_not_equal.html&#34;&gt;std::cmp_not_equal()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/cmp_less.html&#34;&gt;std::cmp_less()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/cmp_less_equal.html&#34;&gt;std::cmp_less_equal()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/cmp_greater.html&#34;&gt;std::cmp_greater()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/cmp_greater_equal.html&#34;&gt;std::cmp_greater_equal()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/in_range.html&#34;&gt;std::in_range()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/swap.html&#34;&gt;std::swap()&lt;/a&gt;&lt;/code&gt;関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/exchange.html&#34;&gt;std::exchange()&lt;/a&gt;&lt;/code&gt;関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/code&gt;クラスを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;クラスの&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/op_constructor.html&#34;&gt;コンストラクタ&lt;/a&gt;、&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/op_assign.html&#34;&gt;代入演算子&lt;/a&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/swap.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/swap_free.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;非メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加。このクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;クラスの&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/op_constructor.html&#34;&gt;コンストラクタ&lt;/a&gt;、&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/op_assign.html&#34;&gt;代入演算子&lt;/a&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/swap.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/swap_free.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;非メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加。このクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファイルシステム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/create_directory.html&#34;&gt;std::filesystem::create_directory()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/create_directories.html&#34;&gt;std::filesystem::create_directories()&lt;/a&gt;&lt;/code&gt;の仕様が直感的ではなく、すでにディレクトリが存在している場合にエラーとなっていた。C++20ではその状況ではエラーにならないようにする (エラーではなく&lt;code&gt;false&lt;/code&gt;が返る)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、constexpr関数が定数式評価されたかを判定する特殊な関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、型のCV修飾と参照を除去する型特性クラスとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_cvref.html&#34;&gt;std::remove_cvref&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、受け取った型をそのまま返す&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/type_identity.html&#34;&gt;std::type_identity&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、例外送出せずに暗黙の型変換が可能かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_convertible.html&#34;&gt;std::is_nothrow_convertible&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、要素数が判明している配列型かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_bounded_array.html&#34;&gt;std::is_bounded_array&lt;/a&gt;&lt;/code&gt;、要素数が不明な配列型かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_unbounded_array.html&#34;&gt;std::is_unbounded_array&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、レイアウト互換性、ポインタ相互交換可能性を判定する以下の型特性を追加：&lt;ul&gt;
&lt;li&gt;2つの型にレイアウト互換があるかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_layout_compatible.html&#34;&gt;std::is_layout_compatible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2つのメンバポインタが互換な共通位置にあるかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_corresponding_member.html&#34;&gt;std::is_corresponding_member()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;基底クラスと派生クラスの間でポインタ相互交換可能かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pointer_interconvertible_base_of.html&#34;&gt;std::is_pointer_interconvertible_base_of&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;メンバポインタとクラスの間でポインタ相互交換可能かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pointer_interconvertible_with_class.html&#34;&gt;is_pointer_interconvertible_with_class()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;型を&lt;code&gt;T&amp;amp;&lt;/code&gt;型に展開する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/unwrap_reference.html&#34;&gt;std::unwrap_reference&lt;/a&gt;&lt;/code&gt;型特性、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;std::decay&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;型の展開をする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/unwrap_ref_decay.html&#34;&gt;std::unwrap_ref_decay&lt;/a&gt;&lt;/code&gt;型特性を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一貫比較機能によって比較演算子の定義が容易になったため、不要になった演算子の簡潔定義機能である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/rel_ops.html&#34;&gt;std::rel_ops&lt;/a&gt;&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/reserve.html&#34;&gt;reserve()&lt;/a&gt;&lt;/code&gt;メンバ関数が、メモリの縮小をしなくなったため、デフォルト引数&lt;code&gt;0&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag.html&#34;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt;クラスのデフォルトコンストラクタが値初期化するようになったため、不要になった以下のアトミックオブジェクトの初期化機能を非推奨化：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_init.html&#34;&gt;std::atomic_init()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_var_init.html&#34;&gt;ATOMIC_VAR_INIT&lt;/a&gt;&lt;/code&gt;マクロ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag_init.html&#34;&gt;ATOMIC_FLAG_INIT&lt;/a&gt;&lt;/code&gt;マクロ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;の&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/atomic.html&#34;&gt;&lt;code&gt;std::atomic&lt;/code&gt;特殊化&lt;/a&gt;追加にともない、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;に対する以下のアトミック操作を非推奨化：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_is_lock_free.html&#34;&gt;atomic_is_lock_free&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_load.html&#34;&gt;atomic_load&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_load_explicit.html&#34;&gt;atomic_load_explicit&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_store.html&#34;&gt;atomic_store&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_store_explicit.html&#34;&gt;atomic_store_explicit&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_exchange.html&#34;&gt;atomic_exchange&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_exchange_explicit.html&#34;&gt;atomic_exchange_explicit&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_compare_exchange_weak.html&#34;&gt;atomic_compare_exchange_weak&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_compare_exchange_strong.html&#34;&gt;atomic_compare_exchange_strong&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_compare_exchange_weak_explicit.html&#34;&gt;atomic_compare_exchange_weak_explicit&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_compare_exchange_strong_explicit.html&#34;&gt;atomic_compare_exchange_strong_explicit&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/code&gt;クラスが導入されたことでC++17から非推奨化されていた、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;/code&gt;の以下のメンバを削除：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difference_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pointer&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_pointer&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reference&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_reference&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rebind&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/address.html&#34;&gt;address()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/allocate.html&#34;&gt;allocate()&lt;/a&gt;&lt;/code&gt;メンバ関数の&lt;code&gt;hint&lt;/code&gt;パラメータ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/max_size.html&#34;&gt;max_size()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/construct.html&#34;&gt;construct()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/destroy.html&#34;&gt;destroy()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/code&gt;クラスが導入されたことでC++17から非推奨化されていた、要素型を再束縛するための&lt;code&gt;allocator&amp;lt;void&amp;gt;&lt;/code&gt;特殊化を削除&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていた、&lt;code&gt;constexpr&lt;/code&gt;で扱える型の分類である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_literal_type.html&#34;&gt;is_literal_type&lt;/a&gt;&lt;/code&gt;型特性を削除&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていた、一時的なメモリ確保のための&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/get_temporary_buffer.html&#34;&gt;std::get_temporary_buffer()&lt;/a&gt;&lt;/code&gt;関数と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/return_temporary_buffer.html&#34;&gt;std::return_temporary_buffer()&lt;/a&gt;&lt;/code&gt;関数を削除&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/raw_storage_iterator.html&#34;&gt;raw_storage_iterator&lt;/a&gt;&lt;/code&gt;クラスを削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.html&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;の追加にともない、C++17から非推奨化されていた以下の機能を削除：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;not1()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;not2()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;unary_negate&lt;/a&gt;&lt;/code&gt;クラス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;binary_negate&lt;/a&gt;&lt;/code&gt;クラス&lt;/li&gt;
&lt;li&gt;標準関数オブジェクトの&lt;code&gt;result_type&lt;/code&gt;、&lt;code&gt;argument_type&lt;/code&gt;、&lt;code&gt;first_argument_type&lt;/code&gt;、&lt;code&gt;second_argument_type&lt;/code&gt;型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++17から非推奨化されていた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/unique.html&#34;&gt;unique()&lt;/a&gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/invoke_result.html&#34;&gt;invoke_result&lt;/a&gt;&lt;/code&gt;の追加にともない、C++17から非推奨化されていた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;C++17での&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/uncaught_exceptions.html&#34;&gt;uncaught_exceptions()&lt;/a&gt;&lt;/code&gt;の追加にともない、非推奨化していた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/uncaught_exception.html&#34;&gt;uncaught_exception()&lt;/a&gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていたC互換ライブラリ&lt;code&gt;&amp;lt;ccomplex&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ctgmath&amp;gt;&lt;/code&gt;を削除。また、C++ではなにも定義されないC互換ライブラリ&lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2131r0.html&#34; target=&#34;_blank&#34;&gt;P2131R0 Changes between C++17 and C++20 DIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : emplace_hintを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>fb295e5dead94487ffcc86042b541ab62e3cb068:reference/flat_map/flat_map.md</id>
      <updated>2023-06-13T16:00:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index 18628ef35..779e4536b 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -62,7 +62,7 @@ namespace std {
 | [`insert_or_assign`](flat_map/insert_or_assign.md.nolink) | 要素を挿入、あるいは代入する               | C++23 |
 | [`insert_range`](flat_map/insert_range.md.nolink)         | Rangeを挿入する                            | C++23 |
 | [`emplace`](flat_map/emplace.md)                   | 要素を直接構築する                         | C++23 |
-| [`emplace_hint`](flat_map/emplace_hint.md.nolink)         | ヒントを使って要素を直接構築する           | C++23 |
+| [`emplace_hint`](flat_map/emplace_hint.md)         | ヒントを使って要素を直接構築する           | C++23 |
 | [`try_emplace`](flat_map/try_emplace.md.nolink)           | キーが存在しない場合のみ要素を直接構築する | C++23 |
 | [`erase`](flaflat_maptmap/erase.md.nolink)                | 要素を削除する                             | C++23 |
 | [`swap`](flat_map/swap.md.nolink)                         | コンテンツを交換する                       | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- flat_map : emplace_hintを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/emplace.html"/>
      <id>fb295e5dead94487ffcc86042b541ab62e3cb068:reference/flat_map/flat_map/emplace.md</id>
      <updated>2023-06-13T16:00:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/emplace.md b/reference/flat_map/flat_map/emplace.md
index f822e8ec7..398b43084 100644
--- a/reference/flat_map/flat_map/emplace.md
+++ b/reference/flat_map/flat_map/emplace.md
@@ -134,6 +134,6 @@ CCC : (1, 2)
 |------------------------------------------------|--------------------------------------------|
 | [`flat_map::insert`](insert.md.nolink)                     | 要素を挿入する                             |
 | [`flat_map::insert_or_assign`](insert_or_assign.md.nolink) | 要素を挿入、あるいは代入する               |
-| [`flat_map::emplace_hint`](emplace_hint.md.nolink)         | ヒントを使って要素を直接構築する           |
+| [`flat_map::emplace_hint`](emplace_hint.md)         | ヒントを使って要素を直接構築する           |
 | [`flat_map::try_emplace`](try_emplace.md.nolink)           | キーが存在しない場合のみ要素を直接構築する |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_hint -- flat_map : emplace_hintを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/emplace_hint.html"/>
      <id>fb295e5dead94487ffcc86042b541ab62e3cb068:reference/flat_map/flat_map/emplace_hint.md</id>
      <updated>2023-06-13T16:00:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/emplace_hint.md b/reference/flat_map/flat_map/emplace_hint.md
new file mode 100644
index 000000000..113abdf27
--- /dev/null
+++ b/reference/flat_map/flat_map/emplace_hint.md
@@ -0,0 +1,82 @@
+# emplace_hint
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class... Args&amp;gt;
+iterator emplace_hint(const_iterator hint, Args&amp;amp;&amp;amp;... args);
+```
+
+## 概要
+要素が配置されるべき場所を示唆するパラメータ `hint` を使って、コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数と同じ引数で呼ばれる。
+
+
+## パラメータ
+- `hint` : 新しい要素をどこへ挿入するかを示唆するために使われるイテレータ
+- `args...` : 要素のコンストラクタへ転送される引数パック
+
+
+## 戻り値
+新たな要素が追加された場合、その追加された要素を指すイテレータ。新たな要素が追加されなかった場合、既にあった要素を指すイテレータ。
+
+
+## 計算量
+一般にコンテナのサイズについて対数時間だが、新しい要素が `hint` の前に挿入された場合は償却定数時間。
+
+
+## 備考
+- [`try_emplace`](try_emplace.md.nolink) と異なり、たとえ要素が挿入されなかった場合でも `value_type` 型のオブジェクトが構築される可能性があり、結果として引数 `args` が [`move`](/reference/utility/move.md) の対象となって変更されてしまっている可能性があるため、注意が必要である。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm;
+
+  fm.emplace(1, &amp;#39;A&amp;#39;);
+
+  // キー2の要素が最後尾に追加されることが事前にわかっているので、fm.end()をヒントとして与える
+  fm.emplace_hint(fm.end(), 2, &amp;#39;B&amp;#39;);
+
+  for (const auto&amp;amp; [key, value] : fm) {
+    std::cout &amp;lt;&amp;lt; key &amp;lt;&amp;lt; &amp;#34; : &amp;#34; &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* emplace_hint[color ff0000]
+* fm.emplace[link emplace.md]
+* fm.end()[link end.md.nolink]
+
+### 出力
+```
+1 : A
+2 : B
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前                                           | 説明                                       |
+|------------------------------------------------|--------------------------------------------|
+| [`flat_map::insert`](insert.md.nolink)                     | 要素を挿入する                             |
+| [`flat_map::insert_or_assign`](insert_or_assign.md.nolink) | 要素を挿入、あるいは代入する               |
+| [`flat_map::emplace`](emplace.md)                   | 要素を直接構築する                         |
+| [`flat_map::try_emplace`](try_emplace.md.nolink)           | キーが存在しない場合のみ要素を直接構築する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shared_ptr -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr.md b/reference/memory/shared_ptr.md
index e997226fc..796eb02a7 100644
--- a/reference/memory/shared_ptr.md
+++ b/reference/memory/shared_ptr.md
@@ -81,17 +81,17 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |-------------------------------------------|--------------------------------------------------|-------|
-| [`atomic_is_lock_free`][is_lock_free]     | 指定されたオブジェクトがロックフリーに振る舞えるかを調べる | C++11 |
-| [`atomic_store`][store]                   | 値を書き込む | C++11 |
-| [`atomic_store_explicit`][store_ex]       | メモリオーダーを指定して値を書き込む | C++11 |
-| [`atomic_load`][load]                     | 値を読み込む | C++11 |
-| [`atomic_load_explicit`][load_ex]         | メモリオーダーを指定して値を読み込む | C++11 |
-| [`atomic_exchange`][exchange]             | 値を入れ替える | C++11 |
-| [`atomic_exchange_explicit`][exchange_ex] | メモリオーダーを指定して値を入れ替える | C++11 |
-| [`atomic_compare_exchange_weak`][exchange_weak] | 弱い比較で値の入れ替えを行う | C++11 |
-| [`atomic_compare_exchange_strong`][exchange_strong] | 強い比較で値の入れ替えを行う | C++11 |
-| [`atomic_compare_exchange_weak_explicit`][exchange_weak_ex] | 弱い比較でメモリオーダーを指定して値の入れ替えを行う | C++11 |
-| [`atomic_compare_exchange_strong_explicit`][exchange_strong_ex] | 強い比較でメモリオーダーを指定して値の入れ替えを行う | C++11 |
+| [`atomic_is_lock_free`][is_lock_free]     | 指定されたオブジェクトがロックフリーに振る舞えるかを調べる | C++11&amp;lt;br/&amp;gt; C++20から非推奨 |
+| [`atomic_store`][store]                   | 値を書き込む | C++11&amp;lt;br/&amp;gt; C++20から非推奨 |
+| [`atomic_store_explicit`][store_ex]       | メモリオーダーを指定して値を書き込む | C++11&amp;lt;br/&amp;gt; C++20から非推奨 |
+| [`atomic_load`][load]                     | 値を読み込む | C++11&amp;lt;br/&amp;gt; C++20から非推奨 |
+| [`atomic_load_explicit`][load_ex]         | メモリオーダーを指定して値を読み込む | C++11&amp;lt;br/&amp;gt; C++20から非推奨 |
+| [`atomic_exchange`][exchange]             | 値を入れ替える | C++11&amp;lt;br/&amp;gt; C++20から非推奨 |
+| [`atomic_exchange_explicit`][exchange_ex] | メモリオーダーを指定して値を入れ替える | C++11&amp;lt;br/&amp;gt; C++20から非推奨 |
+| [`atomic_compare_exchange_weak`][exchange_weak] | 弱い比較で値の入れ替えを行う | C++11&amp;lt;br/&amp;gt; C++20から非推奨 |
+| [`atomic_compare_exchange_strong`][exchange_strong] | 強い比較で値の入れ替えを行う | C++11&amp;lt;br/&amp;gt; C++20から非推奨 |
+| [`atomic_compare_exchange_weak_explicit`][exchange_weak_ex] | 弱い比較でメモリオーダーを指定して値の入れ替えを行う | C++11&amp;lt;br/&amp;gt; C++20から非推奨 |
+| [`atomic_compare_exchange_strong_explicit`][exchange_strong_ex] | 強い比較でメモリオーダーを指定して値の入れ替えを行う | C++11&amp;lt;br/&amp;gt; C++20から非推奨 |
 
 [is_lock_free]: shared_ptr/atomic_is_lock_free.md
 [store]: shared_ptr/atomic_store.md
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_compare_exchange_strong -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_compare_exchange_strong.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr/atomic_compare_exchange_strong.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_compare_exchange_strong.md b/reference/memory/shared_ptr/atomic_compare_exchange_strong.md
index 8a5f0cd78..34571b12c 100644
--- a/reference/memory/shared_ptr/atomic_compare_exchange_strong.md
+++ b/reference/memory/shared_ptr/atomic_compare_exchange_strong.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * function template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -12,6 +13,8 @@ namespace std {
 }
 ```
 
+この関数は、C++20から非推奨となった。アトミックアクセスの対象としている`shared_ptr`を[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)で置き換えることで同等の機能を使用できる。
+
 ## 概要
 強い比較で、アトミックに`shared_ptr`オブジェクトを入れ替える。
 
@@ -37,6 +40,15 @@ atomic_compare_exchange_strong_explicit(
 ## 例外
 投げない
 
+## 非推奨・削除の詳細
+
+この関数はフリー関数であるため、この関数によってアトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものはどこかに配置されている非アトミックオブジェクトである。そのため、アトミックアクセスしたい文脈の外側から通常のアクセスが可能であり、もし別のスレッドからそのようなアクセスが行われているとこの関数を用いていてもデータ競合を引き起こし未定義動作となる。
+
+すなわち、アトミックにアクセスしたい`shared_ptr`オブジェクトに対する全てのアクセスをプログラマがきちんと管理しなければこの関数の使用は安全ではなく、それはかなり困難であったためこの関数は危険な利用がデフォルトとなっていた。
+
+そのため、この関数（とそのファミリ）は非推奨とされ、代わりに[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)が追加された。`shared_ptr`に対する`atomic`特殊化を利用すれば、アトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものをアトミックオブジェクトとすることができるため、どこからアクセスしたとしても全てのアクセスは自動的にアトミックアクセスとなり、前述の問題は回避できる。
+
+この関数から`shared_ptr`に対する`atomic`特殊化に移行する場合は、元のコードでアトミックアクセス対象となっていた`shared_ptr`オブジェクトの型を`std::atomic&amp;lt;std::shared_ptr&amp;gt;`に変更することで移行でき、その場合は`atomic`のために用意されているフリー関数が代わりに使用される（宣言されているヘッダが異なるため、`&amp;lt;atomic&amp;gt;`ヘッダのインクルードが必要となるかもしれない）。
 
 ## 例
 ```cpp example
@@ -81,5 +93,4 @@ int main()
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
 - [LWG Issue 2172. Does `atomic_compare_exchange_*` accept `v == nullptr` arguments?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2172)
-
-
+- [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_compare_exchange_strong_explicit -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_compare_exchange_strong_explicit.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr/atomic_compare_exchange_strong_explicit.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_compare_exchange_strong_explicit.md b/reference/memory/shared_ptr/atomic_compare_exchange_strong_explicit.md
index 83a83f9af..d87cd9c12 100644
--- a/reference/memory/shared_ptr/atomic_compare_exchange_strong_explicit.md
+++ b/reference/memory/shared_ptr/atomic_compare_exchange_strong_explicit.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * function template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -14,6 +15,8 @@ namespace std {
 ```
 * memory_order[link /reference/atomic/memory_order.md]
 
+この関数は、C++20から非推奨となった。アトミックアクセスの対象としている`shared_ptr`を[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)で置き換えることで同等の機能を使用できる。
+
 ## 概要
 メモリオーダーを指定して、強い比較で、アトミックに`shared_ptr`オブジェクトを入れ替える。
 
@@ -43,6 +46,15 @@ namespace std {
 ## 備考
 等値比較は、2つの`shared_ptr`オブジェクトが同じポインタを保持し、リソースを共有していれば`true`となる。
 
+## 非推奨・削除の詳細
+
+この関数はフリー関数であるため、この関数によってアトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものはどこかに配置されている非アトミックオブジェクトである。そのため、アトミックアクセスしたい文脈の外側から通常のアクセスが可能であり、もし別のスレッドからそのようなアクセスが行われているとこの関数を用いていてもデータ競合を引き起こし未定義動作となる。
+
+すなわち、アトミックにアクセスしたい`shared_ptr`オブジェクトに対する全てのアクセスをプログラマがきちんと管理しなければこの関数の使用は安全ではなく、それはかなり困難であったためこの関数は危険な利用がデフォルトとなっていた。
+
+そのため、この関数（とそのファミリ）は非推奨とされ、代わりに[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)が追加された。`shared_ptr`に対する`atomic`特殊化を利用すれば、アトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものをアトミックオブジェクトとすることができるため、どこからアクセスしたとしても全てのアクセスは自動的にアトミックアクセスとなり、前述の問題は回避できる。
+
+この関数から`shared_ptr`に対する`atomic`特殊化に移行する場合は、元のコードでアトミックアクセス対象となっていた`shared_ptr`オブジェクトの型を`std::atomic&amp;lt;std::shared_ptr&amp;gt;`に変更することで移行でき、その場合は`atomic`のために用意されているフリー関数が代わりに使用される（宣言されているヘッダが異なるため、`&amp;lt;atomic&amp;gt;`ヘッダのインクルードが必要となるかもしれない）。
 
 ## 例
 ```cpp example
@@ -93,5 +105,4 @@ int main()
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
 - [LWG Issue 2172. Does `atomic_compare_exchange_*` accept `v == nullptr` arguments?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2172)
-
-
+- [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_compare_exchange_weak -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_compare_exchange_weak.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr/atomic_compare_exchange_weak.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_compare_exchange_weak.md b/reference/memory/shared_ptr/atomic_compare_exchange_weak.md
index fafe20cb2..8a8d5d53c 100644
--- a/reference/memory/shared_ptr/atomic_compare_exchange_weak.md
+++ b/reference/memory/shared_ptr/atomic_compare_exchange_weak.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * function template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -12,6 +13,8 @@ namespace std {
 }
 ```
 
+この関数は、C++20から非推奨となった。アトミックアクセスの対象としている`shared_ptr`を[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)で置き換えることで同等の機能を使用できる。
+
 ## 概要
 弱い比較で、アトミックに`shared_ptr`オブジェクトを入れ替える。
 
@@ -37,6 +40,15 @@ atomic_compare_exchange_weak_explicit(
 ## 例外
 投げない
 
+## 非推奨・削除の詳細
+
+この関数はフリー関数であるため、この関数によってアトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものはどこかに配置されている非アトミックオブジェクトである。そのため、アトミックアクセスしたい文脈の外側から通常のアクセスが可能であり、もし別のスレッドからそのようなアクセスが行われているとこの関数を用いていてもデータ競合を引き起こし未定義動作となる。
+
+すなわち、アトミックにアクセスしたい`shared_ptr`オブジェクトに対する全てのアクセスをプログラマがきちんと管理しなければこの関数の使用は安全ではなく、それはかなり困難であったためこの関数は危険な利用がデフォルトとなっていた。
+
+そのため、この関数（とそのファミリ）は非推奨とされ、代わりに[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)が追加された。`shared_ptr`に対する`atomic`特殊化を利用すれば、アトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものをアトミックオブジェクトとすることができるため、どこからアクセスしたとしても全てのアクセスは自動的にアトミックアクセスとなり、前述の問題は回避できる。
+
+この関数から`shared_ptr`に対する`atomic`特殊化に移行する場合は、元のコードでアトミックアクセス対象となっていた`shared_ptr`オブジェクトの型を`std::atomic&amp;lt;std::shared_ptr&amp;gt;`に変更することで移行でき、その場合は`atomic`のために用意されているフリー関数が代わりに使用される（宣言されているヘッダが異なるため、`&amp;lt;atomic&amp;gt;`ヘッダのインクルードが必要となるかもしれない）。
 
 ## 例
 ```cpp example
@@ -80,4 +92,4 @@ int main()
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
 - [LWG Issue 2172. Does `atomic_compare_exchange_*` accept `v == nullptr` arguments?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2172)
-
+- [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_compare_exchange_weak_explicit -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_compare_exchange_weak_explicit.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr/atomic_compare_exchange_weak_explicit.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_compare_exchange_weak_explicit.md b/reference/memory/shared_ptr/atomic_compare_exchange_weak_explicit.md
index 910f866cb..665cd6186 100644
--- a/reference/memory/shared_ptr/atomic_compare_exchange_weak_explicit.md
+++ b/reference/memory/shared_ptr/atomic_compare_exchange_weak_explicit.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * function template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -14,6 +15,8 @@ namespace std {
 ```
 * memory_order[link /reference/atomic/memory_order.md]
 
+この関数は、C++20から非推奨となった。アトミックアクセスの対象としている`shared_ptr`を[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)で置き換えることで同等の機能を使用できる。
+
 ## 概要
 メモリオーダーを指定して、弱い比較で、アトミックに`shared_ptr`オブジェクトを入れ替える。
 
@@ -43,6 +46,15 @@ namespace std {
 ## 備考
 等値比較は、2つの`shared_ptr`オブジェクトが同じポインタを保持し、リソースを共有していれば`true`となる。
 
+## 非推奨・削除の詳細
+
+この関数はフリー関数であるため、この関数によってアトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものはどこかに配置されている非アトミックオブジェクトである。そのため、アトミックアクセスしたい文脈の外側から通常のアクセスが可能であり、もし別のスレッドからそのようなアクセスが行われているとこの関数を用いていてもデータ競合を引き起こし未定義動作となる。
+
+すなわち、アトミックにアクセスしたい`shared_ptr`オブジェクトに対する全てのアクセスをプログラマがきちんと管理しなければこの関数の使用は安全ではなく、それはかなり困難であったためこの関数は危険な利用がデフォルトとなっていた。
+
+そのため、この関数（とそのファミリ）は非推奨とされ、代わりに[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)が追加された。`shared_ptr`に対する`atomic`特殊化を利用すれば、アトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものをアトミックオブジェクトとすることができるため、どこからアクセスしたとしても全てのアクセスは自動的にアトミックアクセスとなり、前述の問題は回避できる。
+
+この関数から`shared_ptr`に対する`atomic`特殊化に移行する場合は、元のコードでアトミックアクセス対象となっていた`shared_ptr`オブジェクトの型を`std::atomic&amp;lt;std::shared_ptr&amp;gt;`に変更することで移行でき、その場合は`atomic`のために用意されているフリー関数が代わりに使用される（宣言されているヘッダが異なるため、`&amp;lt;atomic&amp;gt;`ヘッダのインクルードが必要となるかもしれない）。
 
 ## 例
 ```cpp example
@@ -91,5 +103,4 @@ int main()
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
 - [LWG Issue 2172. Does `atomic_compare_exchange_*` accept `v == nullptr` arguments?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2172)
-
-
+- [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_exchange -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_exchange.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr/atomic_exchange.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_exchange.md b/reference/memory/shared_ptr/atomic_exchange.md
index 3a1591c7b..0397fea06 100644
--- a/reference/memory/shared_ptr/atomic_exchange.md
+++ b/reference/memory/shared_ptr/atomic_exchange.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * function template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -11,6 +12,8 @@ namespace std {
 }
 ```
 
+この関数は、C++20から非推奨となった。アトミックアクセスの対象としている`shared_ptr`を[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)で置き換えることで同等の機能を使用できる。
+
 ## 概要
 `shared_ptr`オブジェクトを、アトミックに入れ替える。
 
@@ -30,6 +33,15 @@ atomic_exchange_explicit(p, r, memory_order_seq_cst)
 ## 例外
 投げない
 
+## 非推奨・削除の詳細
+
+この関数はフリー関数であるため、この関数によってアトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものはどこかに配置されている非アトミックオブジェクトである。そのため、アトミックアクセスしたい文脈の外側から通常のアクセスが可能であり、もし別のスレッドからそのようなアクセスが行われているとこの関数を用いていてもデータ競合を引き起こし未定義動作となる。
+
+すなわち、アトミックにアクセスしたい`shared_ptr`オブジェクトに対する全てのアクセスをプログラマがきちんと管理しなければこの関数の使用は安全ではなく、それはかなり困難であったためこの関数は危険な利用がデフォルトとなっていた。
+
+そのため、この関数（とそのファミリ）は非推奨とされ、代わりに[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)が追加された。`shared_ptr`に対する`atomic`特殊化を利用すれば、アトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものをアトミックオブジェクトとすることができるため、どこからアクセスしたとしても全てのアクセスは自動的にアトミックアクセスとなり、前述の問題は回避できる。
+
+この関数から`shared_ptr`に対する`atomic`特殊化に移行する場合は、元のコードでアトミックアクセス対象となっていた`shared_ptr`オブジェクトの型を`std::atomic&amp;lt;std::shared_ptr&amp;gt;`に変更することで移行でき、その場合は`atomic`のために用意されているフリー関数が代わりに使用される（宣言されているヘッダが異なるため、`&amp;lt;atomic&amp;gt;`ヘッダのインクルードが必要となるかもしれない）。
 
 ## 例
 ```cpp example
@@ -71,5 +83,4 @@ int main()
 - [`atomic_exchange() - &amp;lt;atomic&amp;gt;`](/reference/atomic/atomic_exchange.md)
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
-
-
+- [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_exchange_explicit -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_exchange_explicit.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr/atomic_exchange_explicit.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_exchange_explicit.md b/reference/memory/shared_ptr/atomic_exchange_explicit.md
index 5a8533931..574fc8856 100644
--- a/reference/memory/shared_ptr/atomic_exchange_explicit.md
+++ b/reference/memory/shared_ptr/atomic_exchange_explicit.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * function template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -13,6 +14,8 @@ namespace std {
 ```
 * memory_order[link /reference/atomic/memory_order.md]
 
+この関数は、C++20から非推奨となった。アトミックアクセスの対象としている`shared_ptr`を[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)で置き換えることで同等の機能を使用できる。
+
 ## 概要
 メモリオーダーを指定して、`shared_ptr`オブジェクトを、アトミックに入れ替える。
 
@@ -32,6 +35,15 @@ namespace std {
 ## 例外
 投げない
 
+## 非推奨・削除の詳細
+
+この関数はフリー関数であるため、この関数によってアトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものはどこかに配置されている非アトミックオブジェクトである。そのため、アトミックアクセスしたい文脈の外側から通常のアクセスが可能であり、もし別のスレッドからそのようなアクセスが行われているとこの関数を用いていてもデータ競合を引き起こし未定義動作となる。
+
+すなわち、アトミックにアクセスしたい`shared_ptr`オブジェクトに対する全てのアクセスをプログラマがきちんと管理しなければこの関数の使用は安全ではなく、それはかなり困難であったためこの関数は危険な利用がデフォルトとなっていた。
+
+そのため、この関数（とそのファミリ）は非推奨とされ、代わりに[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)が追加された。`shared_ptr`に対する`atomic`特殊化を利用すれば、アトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものをアトミックオブジェクトとすることができるため、どこからアクセスしたとしても全てのアクセスは自動的にアトミックアクセスとなり、前述の問題は回避できる。
+
+この関数から`shared_ptr`に対する`atomic`特殊化に移行する場合は、元のコードでアトミックアクセス対象となっていた`shared_ptr`オブジェクトの型を`std::atomic&amp;lt;std::shared_ptr&amp;gt;`に変更することで移行でき、その場合は`atomic`のために用意されているフリー関数が代わりに使用される（宣言されているヘッダが異なるため、`&amp;lt;atomic&amp;gt;`ヘッダのインクルードが必要となるかもしれない）。
 
 ## 例
 ```cpp example
@@ -75,5 +87,4 @@ int main()
 - [`atomic_exchange_explicit() - &amp;lt;atomic&amp;gt;`](/reference/atomic/atomic_exchange_explicit.md)
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
-
-
+- [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_is_lock_free -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_is_lock_free.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr/atomic_is_lock_free.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_is_lock_free.md b/reference/memory/shared_ptr/atomic_is_lock_free.md
index 48f99c08d..281dafdfd 100644
--- a/reference/memory/shared_ptr/atomic_is_lock_free.md
+++ b/reference/memory/shared_ptr/atomic_is_lock_free.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * function template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -11,6 +12,7 @@ namespace std {
 }
 ```
 
+この関数は、C++20から非推奨となった。アトミックアクセスの対象としている`shared_ptr`を[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)で置き換えることで同等の機能を使用できる。
 
 ## 概要
 `shared_ptr`オブジェクトがロックフリーに振る舞えるかを判定する。
@@ -29,6 +31,15 @@ namespace std {
 ## 例外
 投げない
 
+## 非推奨・削除の詳細
+
+この関数はフリー関数であるため、この関数によってアトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものはどこかに配置されている非アトミックオブジェクトである。そのため、アトミックアクセスしたい文脈の外側から通常のアクセスが可能であり、もし別のスレッドからそのようなアクセスが行われているとこの関数を用いていてもデータ競合を引き起こし未定義動作となる。
+
+すなわち、アトミックにアクセスしたい`shared_ptr`オブジェクトに対する全てのアクセスをプログラマがきちんと管理しなければこの関数の使用は安全ではなく、それはかなり困難であったためこの関数は危険な利用がデフォルトとなっていた。
+
+そのため、この関数（とそのファミリ）は非推奨とされ、代わりに[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)が追加された。`shared_ptr`に対する`atomic`特殊化を利用すれば、アトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものをアトミックオブジェクトとすることができるため、どこからアクセスしたとしても全てのアクセスは自動的にアトミックアクセスとなり、前述の問題は回避できる。
+
+この関数から`shared_ptr`に対する`atomic`特殊化に移行する場合は、元のコードでアトミックアクセス対象となっていた`shared_ptr`オブジェクトの型を`std::atomic&amp;lt;std::shared_ptr&amp;gt;`に変更することで移行でき、その場合は`atomic`のために用意されているフリー関数が代わりに使用される（宣言されているヘッダが異なるため、`&amp;lt;atomic&amp;gt;`ヘッダのインクルードが必要となるかもしれない）。
 
 ## 例
 ```cpp example
@@ -71,4 +82,4 @@ shared_ptr&amp;lt;int&amp;gt; isn&amp;#39;t lock-free
 - [`atomic_is_lock_free() - &amp;lt;atomic&amp;gt;`](/reference/atomic/atomic_is_lock_free.md)
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
-
+- [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_load -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_load.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr/atomic_load.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_load.md b/reference/memory/shared_ptr/atomic_load.md
index 54deb6bb7..94b1b3ef1 100644
--- a/reference/memory/shared_ptr/atomic_load.md
+++ b/reference/memory/shared_ptr/atomic_load.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * function template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -11,6 +12,8 @@ namespace std {
 }
 ```
 
+この関数は、C++20から非推奨となった。アトミックアクセスの対象としている`shared_ptr`を[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)で置き換えることで同等の機能を使用できる。
+
 ## 概要
 `shared_ptr`オブジェクトを、アトミックに読み込む。
 
@@ -30,6 +33,15 @@ atomic_load_explicit(p, memory_order_seq_cst)
 ## 例外
 投げない
 
+## 非推奨・削除の詳細
+
+この関数はフリー関数であるため、この関数によってアトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものはどこかに配置されている非アトミックオブジェクトである。そのため、アトミックアクセスしたい文脈の外側から通常のアクセスが可能であり、もし別のスレッドからそのようなアクセスが行われているとこの関数を用いていてもデータ競合を引き起こし未定義動作となる。
+
+すなわち、アトミックにアクセスしたい`shared_ptr`オブジェクトに対する全てのアクセスをプログラマがきちんと管理しなければこの関数の使用は安全ではなく、それはかなり困難であったためこの関数は危険な利用がデフォルトとなっていた。
+
+そのため、この関数（とそのファミリ）は非推奨とされ、代わりに[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)が追加された。`shared_ptr`に対する`atomic`特殊化を利用すれば、アトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものをアトミックオブジェクトとすることができるため、どこからアクセスしたとしても全てのアクセスは自動的にアトミックアクセスとなり、前述の問題は回避できる。
+
+この関数から`shared_ptr`に対する`atomic`特殊化に移行する場合は、元のコードでアトミックアクセス対象となっていた`shared_ptr`オブジェクトの型を`std::atomic&amp;lt;std::shared_ptr&amp;gt;`に変更することで移行でき、その場合は`atomic`のために用意されているフリー関数が代わりに使用される（宣言されているヘッダが異なるため、`&amp;lt;atomic&amp;gt;`ヘッダのインクルードが必要となるかもしれない）。
 
 ## 例
 ```cpp example
@@ -73,5 +85,4 @@ int main()
 - [`atomic_load() - &amp;lt;atomic&amp;gt;`](/reference/atomic/atomic_load.md)
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
-
-
+- [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_load_explicit -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_load_explicit.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr/atomic_load_explicit.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_load_explicit.md b/reference/memory/shared_ptr/atomic_load_explicit.md
index 57cd1d6bd..12b91bdaa 100644
--- a/reference/memory/shared_ptr/atomic_load_explicit.md
+++ b/reference/memory/shared_ptr/atomic_load_explicit.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * function template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -12,6 +13,8 @@ namespace std {
 ```
 * memory_order[link /reference/atomic/memory_order.md]
 
+この関数は、C++20から非推奨となった。アトミックアクセスの対象としている`shared_ptr`を[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)で置き換えることで同等の機能を使用できる。
+
 ## 概要
 メモリオーダーを指定して、`shared_ptr`オブジェクトを、アトミックに読み込む。
 
@@ -32,6 +35,15 @@ namespace std {
 ## 例外
 投げない
 
+## 非推奨・削除の詳細
+
+この関数はフリー関数であるため、この関数によってアトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものはどこかに配置されている非アトミックオブジェクトである。そのため、アトミックアクセスしたい文脈の外側から通常のアクセスが可能であり、もし別のスレッドからそのようなアクセスが行われているとこの関数を用いていてもデータ競合を引き起こし未定義動作となる。
+
+すなわち、アトミックにアクセスしたい`shared_ptr`オブジェクトに対する全てのアクセスをプログラマがきちんと管理しなければこの関数の使用は安全ではなく、それはかなり困難であったためこの関数は危険な利用がデフォルトとなっていた。
+
+そのため、この関数（とそのファミリ）は非推奨とされ、代わりに[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)が追加された。`shared_ptr`に対する`atomic`特殊化を利用すれば、アトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものをアトミックオブジェクトとすることができるため、どこからアクセスしたとしても全てのアクセスは自動的にアトミックアクセスとなり、前述の問題は回避できる。
+
+この関数から`shared_ptr`に対する`atomic`特殊化に移行する場合は、元のコードでアトミックアクセス対象となっていた`shared_ptr`オブジェクトの型を`std::atomic&amp;lt;std::shared_ptr&amp;gt;`に変更することで移行でき、その場合は`atomic`のために用意されているフリー関数が代わりに使用される（宣言されているヘッダが異なるため、`&amp;lt;atomic&amp;gt;`ヘッダのインクルードが必要となるかもしれない）。
 
 ## 例
 ```cpp example
@@ -77,5 +89,4 @@ int main()
 - [`atomic_load_explicit() - &amp;lt;atomic&amp;gt;`](/reference/atomic/atomic_load.md)
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
-
-
+- [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_store -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_store.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr/atomic_store.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_store.md b/reference/memory/shared_ptr/atomic_store.md
index 96158d354..fa00e9399 100644
--- a/reference/memory/shared_ptr/atomic_store.md
+++ b/reference/memory/shared_ptr/atomic_store.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * function template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -11,6 +12,8 @@ namespace std {
 }
 ```
 
+この関数は、C++20から非推奨となった。アトミックアクセスの対象としている`shared_ptr`を[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)で置き換えることで同等の機能を使用できる。
+
 ## 概要
 `shared_ptr`オブジェクトに、アトミックに値を書き込む。
 
@@ -34,6 +37,15 @@ atomic_store_explicit(p, r, memory_order_seq_cst)
 ## 例外
 投げない
 
+## 非推奨・削除の詳細
+
+この関数はフリー関数であるため、この関数によってアトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものはどこかに配置されている非アトミックオブジェクトである。そのため、アトミックアクセスしたい文脈の外側から通常のアクセスが可能であり、もし別のスレッドからそのようなアクセスが行われているとこの関数を用いていてもデータ競合を引き起こし未定義動作となる。
+
+すなわち、アトミックにアクセスしたい`shared_ptr`オブジェクトに対する全てのアクセスをプログラマがきちんと管理しなければこの関数の使用は安全ではなく、それはかなり困難であったためこの関数は危険な利用がデフォルトとなっていた。
+
+そのため、この関数（とそのファミリ）は非推奨とされ、代わりに[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)が追加された。`shared_ptr`に対する`atomic`特殊化を利用すれば、アトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものをアトミックオブジェクトとすることができるため、どこからアクセスしたとしても全てのアクセスは自動的にアトミックアクセスとなり、前述の問題は回避できる。
+
+この関数から`shared_ptr`に対する`atomic`特殊化に移行する場合は、元のコードでアトミックアクセス対象となっていた`shared_ptr`オブジェクトの型を`std::atomic&amp;lt;std::shared_ptr&amp;gt;`に変更することで移行でき、その場合は`atomic`のために用意されているフリー関数が代わりに使用される（宣言されているヘッダが異なるため、`&amp;lt;atomic&amp;gt;`ヘッダのインクルードが必要となるかもしれない）。
 
 ## 例
 ```cpp example
@@ -77,5 +89,4 @@ int main()
 - [`atomic_store() - &amp;lt;atomic&amp;gt;`](/reference/atomic/atomic_store.md)
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
-
-
+- [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_store_explicit -- P0718R2のshared_ptrのアトミックフリー関数非推奨を適用</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/atomic_store_explicit.html"/>
      <id>90927bc3454740d33a8e2933e23ebbc8f3d96ea5:reference/memory/shared_ptr/atomic_store_explicit.md</id>
      <updated>2023-06-13T14:47:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/atomic_store_explicit.md b/reference/memory/shared_ptr/atomic_store_explicit.md
index e70914eca..bc1e5c5f0 100644
--- a/reference/memory/shared_ptr/atomic_store_explicit.md
+++ b/reference/memory/shared_ptr/atomic_store_explicit.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * function template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -12,6 +13,8 @@ namespace std {
 ```
 * memory_order[link /reference/atomic/memory_order.md]
 
+この関数は、C++20から非推奨となった。アトミックアクセスの対象としている`shared_ptr`を[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)で置き換えることで同等の機能を使用できる。
+
 ## 概要
 メモリオーダーを指定して、`shared_ptr`オブジェクトに、アトミックに値を書き込む。
 
@@ -36,6 +39,15 @@ namespace std {
 ## 例外
 投げない
 
+## 非推奨・削除の詳細
+
+この関数はフリー関数であるため、この関数によってアトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものはどこかに配置されている非アトミックオブジェクトである。そのため、アトミックアクセスしたい文脈の外側から通常のアクセスが可能であり、もし別のスレッドからそのようなアクセスが行われているとこの関数を用いていてもデータ競合を引き起こし未定義動作となる。
+
+すなわち、アトミックにアクセスしたい`shared_ptr`オブジェクトに対する全てのアクセスをプログラマがきちんと管理しなければこの関数の使用は安全ではなく、それはかなり困難であったためこの関数は危険な利用がデフォルトとなっていた。
+
+そのため、この関数（とそのファミリ）は非推奨とされ、代わりに[`shared_ptr`に対する`atomic`特殊化](/reference/memory/atomic.md)が追加された。`shared_ptr`に対する`atomic`特殊化を利用すれば、アトミックにアクセスする対象となる`shared_ptr`オブジェクトそのものをアトミックオブジェクトとすることができるため、どこからアクセスしたとしても全てのアクセスは自動的にアトミックアクセスとなり、前述の問題は回避できる。
+
+この関数から`shared_ptr`に対する`atomic`特殊化に移行する場合は、元のコードでアトミックアクセス対象となっていた`shared_ptr`オブジェクトの型を`std::atomic&amp;lt;std::shared_ptr&amp;gt;`に変更することで移行でき、その場合は`atomic`のために用意されているフリー関数が代わりに使用される（宣言されているヘッダが異なるため、`&amp;lt;atomic&amp;gt;`ヘッダのインクルードが必要となるかもしれない）。
 
 ## 例
 ```cpp example
@@ -81,5 +93,4 @@ int main()
 - [`atomic_store_explicit() - &amp;lt;atomic&amp;gt;`](/reference/atomic/atomic_store_explicit.md)
 - [N2674 Shared_ptr atomic access, revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2674.htm)
 - [C++0x Shared_ptr atomic access - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20081015/1224066366)
-
-
+- [P0718R2 Revising `atomic_shared_ptr` for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirectly_writable -- NGワードとしてpvalue (prvalueのtypo) を追加</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_writable.html"/>
      <id>5ae2c39abd2fa04018b5ee8add2a054c25079f4c:reference/iterator/indirectly_writable.md</id>
      <updated>2023-06-12T19:14:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_writable.md b/reference/iterator/indirectly_writable.md
index c8e64a86c..f0974db85 100644
--- a/reference/iterator/indirectly_writable.md
+++ b/reference/iterator/indirectly_writable.md
@@ -33,26 +33,26 @@ namespace std {
 
 `const_cast`を用いる制約式は、非プロキシオブジェクト（値を所有するオブジェクトのことである。[`std::string`](/reference/string/basic_string.md)などが該当）を弾くために存在する。
 
-まず前提として、非プロキシオブジェクトは[メンバ関数の左辺値／右辺値修飾](https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html)が追加される以前からの慣習により、*pvalue*であっても代入が可能である。また、値を所有するために`const`が付与されれば代入は不可能となる。
+まず前提として、非プロキシオブジェクトは[メンバ関数の左辺値／右辺値修飾](https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html)が追加される以前からの慣習により、*prvalue*であっても代入が可能である。また、値を所有するために`const`が付与されれば代入は不可能となる。
 
 ```cpp example
 #include &amp;lt;string&amp;gt;
 
 int main()
 { 
-  std::string()  = &amp;#34;string&amp;#34;; // pvalueに代入
+  std::string()  = &amp;#34;string&amp;#34;; // prvalueに代入
 }
 ```
 
-このような非プロキシオブジェクトの*pvalue*がイテレータの間接参照結果として返された場合、それに書き込んだとしても、その*pvalue*のオブジェクトが所有する値を書き換えるのみであり、正しく出力されるとは言えない。
+このような非プロキシオブジェクトの*prvalue*がイテレータの間接参照結果として返された場合、それに書き込んだとしても、その*prvalue*のオブジェクトが所有する値を書き換えるのみであり、正しく出力されるとは言えない。
 
-一方で、プロキシオブジェクト（所有権を持たず、他のオブジェクトを参照するオブジェクト）がイテレータの間接参照結果として返された場合は、*pvalue*の場合も代入された値を「参照する先のオブジェクトが所有する値」へ書き込むことによって、正しく出力を完了することが出来る。
+一方で、プロキシオブジェクト（所有権を持たず、他のオブジェクトを参照するオブジェクト）がイテレータの間接参照結果として返された場合は、*prvalue*の場合も代入された値を「参照する先のオブジェクトが所有する値」へ書き込むことによって、正しく出力を完了することが出来る。
 
 更に、プロキシオブジェクトは値を所有しないため「`const`な参照先」でなければ、プロキシオブジェクトそれ自体が`const`であっても代入は可能であるべきである。しかしながら、従来のプロキシオブジェクトは`const`を付与された場合代入が不可能になる実装が殆どであり、変更が必要である。例としては[`std::vector&amp;lt;bool&amp;gt;::reference`](/reference/vector/vector.md)がある。
 
 プロキシオブジェクトの他にも、参照（右辺値参照/左辺値参照問わず）も正しく出力が可能である。このことから、「`const`を付与した上でも代入が可能であるようなプロキシオブジェクト」と「参照」を合わせて「プロキシ参照（proxy reference）」と呼称することがある。
 
-以上のことから、`const`を付与した際にも代入が可能であればプロキシ参照、不可能であれば非プロキシ参照と区別することが可能となる。したがって、間接参照が非プロキシ参照（プロキシオブジェクトでない*pvalue*など）を返すイテレータ型は本コンセプトのモデルとならず、プロキシ参照を返すイテレータは本コンセプトのモデルとなる事ができる。
+以上のことから、`const`を付与した際にも代入が可能であればプロキシ参照、不可能であれば非プロキシ参照と区別することが可能となる。したがって、間接参照が非プロキシ参照（プロキシオブジェクトでない*prvalue*など）を返すイテレータ型は本コンセプトのモデルとならず、プロキシ参照を返すイテレータは本コンセプトのモデルとなる事ができる。
 
 ## モデル
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reference_constructs_from_temporary -- NGワードとしてpvalue (prvalueのtypo) を追加</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/reference_constructs_from_temporary.html"/>
      <id>5ae2c39abd2fa04018b5ee8add2a054c25079f4c:reference/type_traits/reference_constructs_from_temporary.md</id>
      <updated>2023-06-12T19:14:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/reference_constructs_from_temporary.md b/reference/type_traits/reference_constructs_from_temporary.md
index 05d91676b..1e50abada 100644
--- a/reference/type_traits/reference_constructs_from_temporary.md
+++ b/reference/type_traits/reference_constructs_from_temporary.md
@@ -31,17 +31,17 @@ namespace std {
 `VAL&amp;lt;U&amp;gt;`を次のように定義する。
 
 - `U`が参照型や関数型の場合、[`declval`](/reference/utility/declval.md)`&amp;lt;U&amp;gt;()`と同じ型と値カテゴリを持つ式
-- `U`が参照型や関数型でない場合、型`U`である`pvalue`（ただし、`U`に`const`/`volatile`修飾があれば調整される）
+- `U`が参照型や関数型でない場合、型`U`である`prvalue`（ただし、`U`に`const`/`volatile`修飾があれば調整される）
 
 [`conjunction_v`](conjunction.md)`&amp;lt;`[`is_reference`](is_reference.md)`&amp;lt;T&amp;gt;,` [`is_constructible`](is_constructible.md)`&amp;lt;T, U&amp;gt;&amp;gt;`が`true`かつ、`T t(VAL&amp;lt;U&amp;gt;)`において`t`が一時オブジェクトの寿命を延長する場合に[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 
 ## 備考
-多くのメタ関数は`pvalue`と`xvalue`を区別しないが、このメタ関数は区別する。例えば、右辺値参照に「戻り値の型が右辺値参照である関数」の戻り値を束縛することを考える。（再現コードは、説明の最後に付す）
+多くのメタ関数は`prvalue`と`xvalue`を区別しないが、このメタ関数は区別する。例えば、右辺値参照に「戻り値の型が右辺値参照である関数」の戻り値を束縛することを考える。（再現コードは、説明の最後に付す）
 
-この事自体は即座に不適格とはならない。しかし、その関数が実際には`pvalue`を返しているとすれば、その`pvalue`は戻り値の時点で右辺値参照に束縛されるため、それを右辺値参照に束縛したとしても寿命は延長されることはない。そのため、最終的にダングリング参照を生じることとなる。
+この事自体は即座に不適格とはならない。しかし、その関数が実際には`prvalue`を返しているとすれば、その`prvalue`は戻り値の時点で右辺値参照に束縛されるため、それを右辺値参照に束縛したとしても寿命は延長されることはない。そのため、最終的にダングリング参照を生じることとなる。
 
-このような場面においては、本メタ関数が`pvalue`と`xvalue`を、`pvalue`を`T`（参照なしの型）として、`xvalue`を`T&amp;amp;&amp;amp;`（右辺値参照である型、転送参照(Forwarding Reference) を意味しているわけではない）として区別すれば検出が可能となる。
+このような場面においては、本メタ関数が`prvalue`と`xvalue`を、`prvalue`を`T`（参照なしの型）として、`xvalue`を`T&amp;amp;&amp;amp;`（右辺値参照である型、転送参照(Forwarding Reference) を意味しているわけではない）として区別すれば検出が可能となる。
 
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reference_converts_from_temporary -- NGワードとしてpvalue (prvalueのtypo) を追加</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/reference_converts_from_temporary.html"/>
      <id>5ae2c39abd2fa04018b5ee8add2a054c25079f4c:reference/type_traits/reference_converts_from_temporary.md</id>
      <updated>2023-06-12T19:14:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/reference_converts_from_temporary.md b/reference/type_traits/reference_converts_from_temporary.md
index 63ea01dea..35cde01c5 100644
--- a/reference/type_traits/reference_converts_from_temporary.md
+++ b/reference/type_traits/reference_converts_from_temporary.md
@@ -27,17 +27,17 @@ namespace std {
 `VAL&amp;lt;U&amp;gt;`を次のように定義する。
 
 - `U`が参照型や関数型の場合、[`declval`](/reference/utility/declval.md)`&amp;lt;U&amp;gt;()`と同じ型と値カテゴリを持つ式
-- `U`が参照型や関数型でない場合、型`U`である`pvalue`（ただし、`U`に`const`/`volatile`修飾があれば調整される）
+- `U`が参照型や関数型でない場合、型`U`である`prvalue`（ただし、`U`に`const`/`volatile`修飾があれば調整される）
 
 [`conjunction_v`](conjunction.md)`&amp;lt;`[`is_reference`](is_reference.md)`&amp;lt;T&amp;gt;,` [`is_convertible`](is_convertible.md)`&amp;lt;U, T&amp;gt;&amp;gt;`が`true`かつ、`T t(VAL&amp;lt;U&amp;gt;)`において`t`が一時オブジェクトの寿命を延長する場合に[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 
 ## 備考
-多くのメタ関数は`pvalue`と`xvalue`を区別しないが、このメタ関数は区別する。例えば、右辺値参照に「戻り値の型が右辺値参照である関数」の戻り値を束縛することを考える。（再現コードは、説明の最後に付す）
+多くのメタ関数は`prvalue`と`xvalue`を区別しないが、このメタ関数は区別する。例えば、右辺値参照に「戻り値の型が右辺値参照である関数」の戻り値を束縛することを考える。（再現コードは、説明の最後に付す）
 
-この事自体は即座に不適格とはならない。しかし、その関数が実際には`pvalue`を返しているとすれば、その`pvalue`は戻り値の時点で右辺値参照に束縛されるため、それを右辺値参照に束縛したとしても寿命は延長されることはない。そのため、最終的にダングリング参照を生じることとなる。
+この事自体は即座に不適格とはならない。しかし、その関数が実際には`prvalue`を返しているとすれば、その`prvalue`は戻り値の時点で右辺値参照に束縛されるため、それを右辺値参照に束縛したとしても寿命は延長されることはない。そのため、最終的にダングリング参照を生じることとなる。
 
-このような場面においては、本メタ関数が`pvalue`と`xvalue`を、`pvalue`を`T`（参照なしの型）として、`xvalue`を`T&amp;amp;&amp;amp;`（右辺値参照である型、転送参照(Forwarding Reference) を意味しているわけではない）として区別すれば検出が可能となる。
+このような場面においては、本メタ関数が`prvalue`と`xvalue`を、`prvalue`を`T`（参照なしの型）として、`xvalue`を`T&amp;amp;&amp;amp;`（右辺値参照である型、転送参照(Forwarding Reference) を意味しているわけではない）として区別すれば検出が可能となる。
 
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
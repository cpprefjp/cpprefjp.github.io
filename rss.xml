<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-03-20T21:24:52.921162</updated>
  <id>1df731e8-a58e-4b9f-bdd3-fe9e7ab7237a</id>

  
    <entry>
      <title>merge -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_merge.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_merge.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_merge.md b/reference/algorithm/ranges_merge.md
index 239840117..c56b5c539 100644
--- a/reference/algorithm/ranges_merge.md
+++ b/reference/algorithm/ranges_merge.md
@@ -17,7 +17,7 @@ namespace std::ranges {
   constexpr merge_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;, O&amp;gt; merge(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});  // (2)
 }
 ```
-* merge_result[link in_in_out_result.md]
+* merge_result[link ranges_in_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -52,7 +52,7 @@ merge_result {
   .out = result + (last1 - first1) + (last2 - first2),
 }
 ```
-* merge_result[link in_in_out_result.md]
+* merge_result[link ranges_in_in_out_result.md]
 
 ## 計算量
 `N = (last1 - first1) + (last2 - first2)`であるとして最大で、N - 1回比較する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_minmax.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_minmax.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_minmax.md b/reference/algorithm/ranges_minmax.md
index 7cb63e129..9588684ce 100644
--- a/reference/algorithm/ranges_minmax.md
+++ b/reference/algorithm/ranges_minmax.md
@@ -21,7 +21,7 @@ namespace std::ranges {
   constexpr minmax_result&amp;lt;range_value_t&amp;lt;R&amp;gt;&amp;gt; minmax(R&amp;amp;&amp;amp; r, Comp comp = {}, Proj proj = {});
 }
 ```
-* minmax_result[link min_max_result.md]
+* minmax_result[link ranges_min_max_result.md]
 * identity[link /reference/functional/identity.md]
 * indirect_strict_weak_order[link /reference/iterator/indirect_strict_weak_order.md]
 * projected[link /reference/iterator/projected.md]
@@ -42,7 +42,7 @@ minmax_result {
   .max = 最大値,
 }
 ```
-* minmax_result[link min_max_result.md]
+* minmax_result[link ranges_min_max_result.md]
 
 それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断された最初の値となる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax_element -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_minmax_element.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_minmax_element.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_minmax_element.md b/reference/algorithm/ranges_minmax_element.md
index d2131b6a4..32bbf40e1 100644
--- a/reference/algorithm/ranges_minmax_element.md
+++ b/reference/algorithm/ranges_minmax_element.md
@@ -15,7 +15,7 @@ namespace std::ranges {
   constexpr minmax_element_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;&amp;gt; minmax_element(R&amp;amp;&amp;amp; r, Comp comp = {}, Proj proj = {});
 }
 ```
-* minmax_element_result[link min_max_result.md]
+* minmax_element_result[link ranges_min_max_result.md]
 * forward_iterator[link /reference/iterator/forward_iterator.md]
 * identity[link /reference/functional/identity.md]
 * indirect_strict_weak_order[link /reference/iterator/indirect_strict_weak_order.md]
@@ -38,7 +38,7 @@ minmax_element_result {
   .max = 最大の要素を指すイテレータ,
 }
 ```
-* minmax_element_result[link min_max_result.md]
+* minmax_element_result[link ranges_min_max_result.md]
 
 それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断し、同じ値の要素が複数ある場合は、最小の要素は最初の要素、最大の要素は最後の要素となる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partial_sort_copy -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_partial_sort_copy.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_partial_sort_copy.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_partial_sort_copy.md b/reference/algorithm/ranges_partial_sort_copy.md
index 0842b59ba..9342d7403 100644
--- a/reference/algorithm/ranges_partial_sort_copy.md
+++ b/reference/algorithm/ranges_partial_sort_copy.md
@@ -22,7 +22,7 @@ namespace std::ranges {
     partial_sort_copy(R1&amp;amp;&amp;amp; r, R2&amp;amp;&amp;amp; result_r, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                              // (2)
 }
 ```
-* partial_sort_copy_result[link in_out_result.md]
+* partial_sort_copy_result[link ranges_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * random_access_iterator[link /reference/iterator/random_access_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
@@ -56,7 +56,7 @@ partial_sort_copy_result {
   .out = result_first + N
 }
 ```
-* partial_sort_copy_result[link in_out_result.md]
+* partial_sort_copy_result[link ranges_in_out_result.md]
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_difference -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_difference.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_set_difference.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_difference.md b/reference/algorithm/ranges_set_difference.md
index 3541b5802..8a8f3cb4f 100644
--- a/reference/algorithm/ranges_set_difference.md
+++ b/reference/algorithm/ranges_set_difference.md
@@ -19,7 +19,7 @@ namespace std::ranges {
     set_difference(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                         // (2)
 }
 ```
-* set_difference_result[link in_out_result.md]
+* set_difference_result[link ranges_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -52,7 +52,7 @@ set_difference_result {
   .out = result_last,
 }
 ```
-* set_difference_result[link in_out_result.md]
+* set_difference_result[link ranges_in_out_result.md]
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_intersection -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_intersection.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_set_intersection.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_intersection.md b/reference/algorithm/ranges_set_intersection.md
index 548ad8cab..134478e9a 100644
--- a/reference/algorithm/ranges_set_intersection.md
+++ b/reference/algorithm/ranges_set_intersection.md
@@ -19,7 +19,7 @@ namespace std::ranges {
     set_intersection(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                          // (2)
 }
 ```
-* set_intersection_result[link in_in_out_result.md]
+* set_intersection_result[link ranges_in_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -55,7 +55,7 @@ set_intersection_result {
   .out = result_last,
 }
 ```
-* set_intersection_result[link in_in_out_result.md]
+* set_intersection_result[link ranges_in_in_out_result.md]
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_symmetric_difference -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_symmetric_difference.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_set_symmetric_difference.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_symmetric_difference.md b/reference/algorithm/ranges_set_symmetric_difference.md
index 2635bdf68..ed699dc5d 100644
--- a/reference/algorithm/ranges_set_symmetric_difference.md
+++ b/reference/algorithm/ranges_set_symmetric_difference.md
@@ -22,7 +22,7 @@ namespace std::ranges {
     set_symmetric_difference(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
 }
 ```
-* set_symmetric_difference_result[link in_in_out_result.md] 
+* set_symmetric_difference_result[link ranges_in_in_out_result.md] 
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -56,7 +56,7 @@ set_symmetric_difference_result {
   .out = result_last,
 }
 ```
-* set_symmetric_difference_result[link in_in_out_result.md] 
+* set_symmetric_difference_result[link ranges_in_in_out_result.md] 
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_union -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_union.html"/>
      <id>7b37f98ae2cf9fff60d8eb05e7d5bc158fa804f3:reference/algorithm/ranges_set_union.md</id>
      <updated>2022-03-21T06:20:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_union.md b/reference/algorithm/ranges_set_union.md
index 6133663ef..e876af5d5 100644
--- a/reference/algorithm/ranges_set_union.md
+++ b/reference/algorithm/ranges_set_union.md
@@ -19,7 +19,7 @@ namespace std::ranges {
     set_union(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                           // (2)
 }
 ```
-* set_union_result[link in_in_out_result.md]
+* set_union_result[link ranges_in_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -52,7 +52,7 @@ set_union_result {
   .out = result_last,
 }
 ```
-* set_union_result[link in_in_out_result.md]
+* set_union_result[link ranges_in_in_out_result.md]
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- copy関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>37fbca7ae3449f94f27e45d195883d7f38f15bb3:reference/algorithm.md</id>
      <updated>2022-03-21T06:16:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index ec57f7a87..9faaea77f 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -181,11 +181,10 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`stable_partition`](algorithm/stable_partition.md) | 与えられた範囲を相対順序を保ちながら条件によって[区分化](/reference/algorithm.md#sequence-is-partitioned)する | |
 | [`partition_copy`](algorithm/partition_copy.md)   | 与えられた範囲を条件によって 2 つの出力の範囲へ分けてコピーする | C++11 |
 | [`partition_point`](algorithm/partition_point.md) | 与えられた範囲から条件によって[区分化](/reference/algorithm.md#sequence-is-partitioned)されている位置を得る | C++11 |
-| [`ranges::copy`](algorithm/ranges_copy.md.nolink)                         | 指定された範囲の要素をコピーする                                                                                | C++20 |
-| [`ranges::copy`](algorithm/ranges_copy.md.nolink)                         | 指定された範囲の要素をコピーする                                                                                | C++20 |
-| [`ranges::copy_n`](algorithm/ranges_copy_n.md.nolink)                     | 指定された数の要素をコピーする                                                                                  | C++20 |
-| [`ranges::copy_if`](algorithm/ranges_copy_if.md.nolink)                   | 条件を満たす要素のみをコピーする                                                                                | C++20 |
-| [`ranges::copy_backward`](algorithm/ranges_copy_backward.md.nolink)       | 指定された範囲の要素を後ろからコピーする                                                                        | C++20 |
+| [`ranges::copy`](algorithm/ranges_copy.md)                         | 指定された範囲の要素をコピーする                                                                                | C++20 |
+| [`ranges::copy_n`](algorithm/ranges_copy_n.md)                     | 指定された数の要素をコピーする                                                                                  | C++20 |
+| [`ranges::copy_if`](algorithm/ranges_copy_if.md)                   | 条件を満たす要素のみをコピーする                                                                                | C++20 |
+| [`ranges::copy_backward`](algorithm/ranges_copy_backward.md)       | 指定された範囲の要素を後ろからコピーする                                                                        | C++20 |
 | [`ranges::move`](algorithm/ranges_move.md.nolink)                         | 指定された範囲の要素をムーブする                                                                                | C++20 |
 | [`ranges::move_backward`](algorithm/ranges_move_backward.md.nolink)       | 指定された範囲の要素を後ろからムーブする                                                                        | C++20 |
 | [`ranges::swap_ranges`](algorithm/ranges_swap_ranges.md.nolink)           | 指定された2つの範囲同士を swap する                                                                             | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy -- copy関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_copy.html"/>
      <id>37fbca7ae3449f94f27e45d195883d7f38f15bb3:reference/algorithm/ranges_copy.md</id>
      <updated>2022-03-21T06:16:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_copy.md b/reference/algorithm/ranges_copy.md
new file mode 100644
index 000000000..6b68acc53
--- /dev/null
+++ b/reference/algorithm/ranges_copy.md
@@ -0,0 +1,101 @@
+# copy
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, weakly_incrementable O&amp;gt;
+    requires indirectly_copyable&amp;lt;I, O&amp;gt;
+  constexpr copy_result&amp;lt;I, O&amp;gt; copy(I first, S last, O result);            // (1)
+
+  template&amp;lt;input_range R, weakly_incrementable O&amp;gt;
+    requires indirectly_copyable&amp;lt;iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+  constexpr copy_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, O&amp;gt; copy(R&amp;amp;&amp;amp; r, O result); // (2)
+}
+```
+* copy_result[link ranges_in_out_result.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* indirectly_copyable[link /reference/iterator/indirectly_copyable.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+指定された範囲の要素をコピーする。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+
+## 事前条件
+`result` は `[first,last)` の範囲に含まれてはならない。
+
+
+## 効果
+`[first,last)` 内の要素を、それぞれ `[result,result + (last - first))` へコピーする。
+
+コピーは `first` から順番に行い、0 以上 `last - first` 未満であるそれぞれの `n` について、`*(result + n) = *(first + n)` を行う。
+
+
+## 戻り値
+```cpp
+copy_result {
+  .in  = last,
+  .out = result + (last - first),
+}
+```
+* copy_result[link ranges_in_out_result.md]
+
+
+## 計算量
+正確に `last - first` 回代入が行われる。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 3,1,2 };
+
+  // v から v2 へ普通にコピーする
+  std::vector&amp;lt;int&amp;gt; v2(v.size()); // ちゃんと確保しておくこと
+  std::ranges::copy(v, v2.begin());
+
+  // back_inserter を使って v3 へ設定。
+  // back_inserter は要素をコピーするときに v3.push_back() するイテレータを作る関数。
+  std::list&amp;lt;int&amp;gt; ls3;
+  std::ranges::copy(v2, std::back_inserter(ls3));
+
+  // ostream_iterator を使って出力。
+  // ostream_iterator&amp;lt;int&amp;gt;(cout, &amp;#34;,&amp;#34;) は要素をコピーするときに cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;,&amp;#34; としてくれるイテレータ。
+  std::ranges::copy(ls3, std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
+}
+```
+* std::ranges::copy[color ff0000]
+
+### 出力
+```
+3,1,2,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_backward -- copy関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_copy_backward.html"/>
      <id>37fbca7ae3449f94f27e45d195883d7f38f15bb3:reference/algorithm/ranges_copy_backward.md</id>
      <updated>2022-03-21T06:16:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_copy_backward.md b/reference/algorithm/ranges_copy_backward.md
new file mode 100644
index 000000000..e58f5b5db
--- /dev/null
+++ b/reference/algorithm/ranges_copy_backward.md
@@ -0,0 +1,112 @@
+# copy_backward
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;bidirectional_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, bidirectional_iterator I2&amp;gt;
+    requires indirectly_copyable&amp;lt;I1, I2&amp;gt;
+  constexpr copy_backward_result&amp;lt;I1, I2&amp;gt; copy_backward(I1 first, S1 last, I2 result);       // (1)
+
+  template&amp;lt;bidirectional_range R, bidirectional_iterator I&amp;gt;
+    requires indirectly_copyable&amp;lt;iterator_t&amp;lt;R&amp;gt;, I&amp;gt;
+  constexpr copy_backward_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, I&amp;gt; copy_backward(R&amp;amp;&amp;amp; r, I result); // (2)
+}
+```
+* copy_backward_result[link ranges_in_out_result.md]
+* bidirectional_iterator[link /reference/iterator/bidirectional_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* indirectly_copyable[link /reference/iterator/indirectly_copyable.md]
+* bidirectional_range[link /reference/ranges/bidirectional_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+指定された範囲の要素を後ろからコピーする。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+
+## 事前条件
+`result` は `(first,last]` の範囲に含まれてはならない。
+
+
+## 効果
+`[first,last)` 内にある要素を、それぞれ `[result - (last-first),result)` へコピーする。
+
+コピーは `last - 1` から順番に行い、1 以上 `last - first` 以下であるそれぞれの `n` について、`*(result - n) = *(last - n)` を行う。
+
+
+## 戻り値
+```cpp
+copy_backward_result {
+  .in  = last,
+  .out = result - (last - first),
+}
+```
+* copy_backward_result[link ranges_in_out_result.md]
+
+## 計算量
+正確に `last - first` 回代入が行われる。
+
+
+## 備考
+`last` が `[result - (last-first), result)` の範囲内にあるときには、`copy()` の代わりに `copy_backward()` を使うべきである。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::list&amp;lt;int&amp;gt; ls = { 1,2,3,4,5 };
+  // 1,2,3 の範囲を、3,4,5 の値のある範囲へコピーする
+  std::copy_backward(ls.begin(), std::next(ls.begin(), 3), ls.end());
+
+  // 以下のコードだと期待した結果にならないことを確認しよう
+  // std::copy(ls.begin(), std::next(ls.begin(), 3), std::next(ls.begin(), 2));
+
+  std::copy(ls.begin(), ls.end(), std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
+}
+```
+* std::copy_backward[color ff0000]
+* ls.begin()[link /reference/list/list/begin.md]
+* std::next[link /reference/iterator/next.md]
+* ls.end()[link /reference/list/list/end.md]
+
+### 出力
+```
+1,2,1,2,3,
+```
+
+
+## 実装例
+```cpp
+template &amp;lt;class BidirectionalIterator1, class BidirectionalIterator2&amp;gt;
+BidirectionalIterator2 copy_backward(BidirectionalIterator1 first,
+                                     BidirectionalIterator1 last,
+                                     BidirectionalIterator2 result) {
+  while (first != last)
+    *--result = *--last;
+  return result;
+}
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_if -- copy関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_copy_if.html"/>
      <id>37fbca7ae3449f94f27e45d195883d7f38f15bb3:reference/algorithm/ranges_copy_if.md</id>
      <updated>2022-03-21T06:16:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_copy_if.md b/reference/algorithm/ranges_copy_if.md
new file mode 100644
index 000000000..96ab68519
--- /dev/null
+++ b/reference/algorithm/ranges_copy_if.md
@@ -0,0 +1,102 @@
+# copy_if
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+* cpp11[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, weakly_incrementable O, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    requires indirectly_copyable&amp;lt;I, O&amp;gt;
+  constexpr copy_if_result&amp;lt;I, O&amp;gt; copy_if(I first, S last, O result, Pred pred, Proj proj = {});            // (1)
+
+  template&amp;lt;input_range R, weakly_incrementable O, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    requires indirectly_copyable&amp;lt;iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+  constexpr copy_if_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, O&amp;gt; copy_if(R&amp;amp;&amp;amp; r, O result, Pred pred, Proj proj = {}); // (2)
+}
+```
+* copy_if_result[link ranges_in_out_result.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* projected[link /reference/iterator/projected.md]
+* indirectly_copyable[link /reference/iterator/indirectly_copyable.md]
+* input_range[link /reference/ranges/input_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+
+## 概要
+条件を満たす要素のみをコピーする。
+
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+## 事前条件
+`[first,last)` の範囲と、`[result,result + (last - first))` の範囲は重なっていてはならない。
+
+## 効果
+`[first,last)` 内のイテレータ `i` について `pred(*i)` が `true` である要素を `result` へ順番にコピーする。
+
+## 戻り値
+```cpp
+copy_if_result {
+  .in  = last,
+  .out = result + (last - first),
+}
+```
+* copy_if_result[link ranges_in_out_result.md]
+
+## 計算量
+正確に `last - first` 回述語を適用する。
+
+
+## 備考
+このコピーは安定なコピーである。つまり、コピーによって要素の前後が入れ替わることは無い。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+bool isOdd(int x) { return x % 2 != 0; }
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1 = { 3, 1, 4 };
+  std::vector&amp;lt;int&amp;gt; v2 = { 1, 5, 9 };
+  std::vector&amp;lt;int&amp;gt; v3 = { 2, 6, 5 };
+  std::vector&amp;lt;int&amp;gt; result(v1.size() + v2.size() + v3.size());
+
+  // copy_if の戻り値を使って、複数のコンテナにある奇数を全て繋げる
+  auto out = result.begin();
+  out = std::ranges::copy_if(v1, out, isOdd).out;
+  out = std::ranges::copy_if(v2, out, isOdd).out;
+  out = std::ranges::copy_if(v3, out, isOdd).out;
+
+  std::ranges::copy(result.begin(), out, std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
+}
+```
+* std::ranges::copy_if[color ff0000]
+* result.begin()[link /reference/vector/vector/begin.md]
+
+### 出力
+```
+3,1,1,5,9,5,
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_n -- copy関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_copy_n.html"/>
      <id>37fbca7ae3449f94f27e45d195883d7f38f15bb3:reference/algorithm/ranges_copy_n.md</id>
      <updated>2022-03-21T06:16:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_copy_n.md b/reference/algorithm/ranges_copy_n.md
new file mode 100644
index 000000000..9517e4e1a
--- /dev/null
+++ b/reference/algorithm/ranges_copy_n.md
@@ -0,0 +1,77 @@
+# copy_n
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+* cpp11[meta cpp]
+
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_iterator I, weakly_incrementable O&amp;gt;
+    requires indirectly_copyable&amp;lt;I, O&amp;gt;
+  constexpr copy_n_result&amp;lt;I, O&amp;gt; copy_n(I first, iter_difference_t&amp;lt;I&amp;gt; n, O result);
+}
+```
+* copy_n_result[link ranges_in_out_result.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* indirectly_copyable[link /reference/iterator/indirectly_copyable.md]
+
+## 概要
+指定された数の要素をコピーする。
+
+
+## 効果
+0 以上 `n` 未満であるそれぞれの `i` について、`*(result + i) = *(first + i)` を行う。
+
+
+## 戻り値
+```cpp
+copy_n_result {
+  .in  = first + n,
+  .out = result + n,
+}
+```
+* copy_n_result[link ranges_in_out_result.md]
+
+
+## 計算量
+正確に `n` 回代入が行われる。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 3, 1, 5, 2, 4 };
+  std::ranges::copy_n(v.begin(), 5, std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;\n&amp;#34;));
+}
+```
+* std::ranges::copy_n[color ff0000]
+
+### 出力
+```
+3
+1
+5
+2
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_out_result -- copy関係の関数の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_out_result.html"/>
      <id>37fbca7ae3449f94f27e45d195883d7f38f15bb3:reference/algorithm/ranges_in_out_result.md</id>
      <updated>2022-03-21T06:16:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_out_result.md b/reference/algorithm/ranges_in_out_result.md
index c2bf2f929..0310f56b4 100644
--- a/reference/algorithm/ranges_in_out_result.md
+++ b/reference/algorithm/ranges_in_out_result.md
@@ -96,10 +96,10 @@ namespace std::ranges {
 
 ## 概要
 * (1): 2つのイテレータを格納する型
-* (2): [`ranges::copy`](ranges_copy.md.nolink)で使用するエイリアス
-* (3): [`ranges::copy_n`](ranges_copy_n.md.nolink)で使用するエイリアス
-* (4): [`ranges::copy_if`](ranges_copy_if.md.nolink)で使用するエイリアス
-* (5): [`ranges::copy_backward`](ranges_copy_backward.md.nolink)で使用するエイリアス
+* (2): [`ranges::copy`](ranges_copy.md)で使用するエイリアス
+* (3): [`ranges::copy_n`](ranges_copy_n.md)で使用するエイリアス
+* (4): [`ranges::copy_if`](ranges_copy_if.md)で使用するエイリアス
+* (5): [`ranges::copy_backward`](ranges_copy_backward.md)で使用するエイリアス
 * (6): [`ranges::move`](ranges_move.md.nolink)で使用するエイリアス
 * (7): [`ranges::move_backward`](ranges_move_backward.md.nolink)で使用するエイリアス
 * (8): [`ranges::unary_transform`](ranges_unary_transform.md.nolink)で使用するエイリアス
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index f8e74ad2d..ec57f7a87 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -408,15 +408,15 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 
 これらの型は、複数の値を1つの戻り値として返すために使われる汎用的な型である。構造化束縛で受け取ることが想定されている。
 
-| 名前 | 説明 | 対応バージョン |
-|-------------------------------------------------------|------------------------|-------|
-| [`ranges::in_fun_result`](algorithm/ranges_in_fun_result.md.nolink)         | イテレータと関数オブジェクトを格納する型 | C++20 |
-| [`ranges::in_in_result`](algorithm/ranges_in_in_result.md.nolink)           | 2つのイテレータを格納する型              | C++20 |
-| [`ranges::in_out_result`](algorithm/ranges_in_out_result.md.nolink)         | 2つのイテレータを格納する型              | C++20 |
-| [`ranges::in_in_out_result`](algorithm/ranges_in_in_out_result.md.nolink)   | 3つのイテレータを格納する型              | C++20 |
-| [`ranges::in_out_out_result`](algorithm/ranges_in_out_out_result.md.nolink) | 3つのイテレータを格納する型              | C++20 |
-| [`ranges::min_max_result`](algorithm/ranges_min_max_result.md.nolink)       | 2つの値または参照を格納する型            | C++20 |
-| [`ranges::in_found_result`](algorithm/ranges_in_found_result.md.nolink)     | イテレータとbool値を格納する型           | C++20 |
+| 名前                                                                 | 説明                                     | 対応バージョン |
+|----------------------------------------------------------------------|------------------------------------------|----------------|
+| [`ranges::in_fun_result`](algorithm/ranges_in_fun_result.md)         | イテレータと関数オブジェクトを格納する型 | C++20          |
+| [`ranges::in_in_result`](algorithm/ranges_in_in_result.md)           | 2つのイテレータを格納する型              | C++20          |
+| [`ranges::in_out_result`](algorithm/ranges_in_out_result.md)         | 2つのイテレータを格納する型              | C++20          |
+| [`ranges::in_in_out_result`](algorithm/ranges_in_in_out_result.md)   | 3つのイテレータを格納する型              | C++20          |
+| [`ranges::in_out_out_result`](algorithm/ranges_in_out_out_result.md) | 3つのイテレータを格納する型              | C++20          |
+| [`ranges::min_max_result`](algorithm/ranges_min_max_result.md)       | 2つの値または参照を格納する型            | C++20          |
+| [`ranges::in_found_result`](algorithm/ranges_in_found_result.md)     | イテレータとbool値を格納する型           | C++20          |
 
 ## 関連項目
 - [`&amp;lt;numeric&amp;gt;`](/reference/numeric.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for_each -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_for_each.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_for_each.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_for_each.md b/reference/algorithm/ranges_for_each.md
index 3db4f4ca8..6100702e2 100644
--- a/reference/algorithm/ranges_for_each.md
+++ b/reference/algorithm/ranges_for_each.md
@@ -6,9 +6,6 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class I, class F&amp;gt;
-  using for_each_result = in_fun_result&amp;lt;I, F&amp;gt;;
-
   template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity, indirectly_unary_invocable&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Fun&amp;gt;
   constexpr for_each_result&amp;lt;I, Fun&amp;gt; for_each(I first, S last, Fun f, Proj proj = {});                     // (1)
 
@@ -24,7 +21,7 @@ namespace std::ranges {
 * input_range[link /reference/ranges/input_range.md]
 * borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
 * projected[link /reference/iterator/projected.md]
-* in_fun_result[link /reference/algorithm/ranges_in_fun_result.md.nolink]
+* for_each_result[link /reference/algorithm/ranges_in_fun_result.md]
 
 
 ## 概要
@@ -49,7 +46,13 @@ namespace std::ranges {
 
 ## 戻り値
 
-`{last, std::move(f)}`
+```cpp
+for_each_result {
+  .in = last,
+  .fun = std::move(f),
+}
+```
+* for_each_result[link /reference/algorithm/ranges_in_fun_result.md]
 
 ## 計算量
 正確に `f` を `last - first` 回適用する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for_each_n -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_for_each_n.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_for_each_n.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_for_each_n.md b/reference/algorithm/ranges_for_each_n.md
index 04e082207..af7a4db63 100644
--- a/reference/algorithm/ranges_for_each_n.md
+++ b/reference/algorithm/ranges_for_each_n.md
@@ -6,9 +6,6 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class I, class F&amp;gt;
-  using for_each_n_result = in_fun_result&amp;lt;I, F&amp;gt;;
-
   template&amp;lt;input_iterator I, class Proj = identity, indirectly_unary_invocable&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Fun&amp;gt;
   constexpr for_each_n_result&amp;lt;I, Fun&amp;gt; for_each_n(I first, iter_difference_t&amp;lt;I&amp;gt; n, Fun f, Proj proj = {});
 }
@@ -18,7 +15,7 @@ namespace std::ranges {
 * indirectly_unary_invocable[link /reference/iterator/indirectly_unary_invocable.md]
 * projected[link /reference/iterator/projected.md]
 * iter_difference_t[link /reference/iterator/iter_difference_t.md]
-* in_fun_result[link /reference/algorithm/ranges_in_fun_result.md.nolink]
+* for_each_n_result[link /reference/algorithm/ranges_in_fun_result.md]
 
 ## 概要
 範囲の先頭N個の要素に、指定された関数を適用する。
@@ -39,7 +36,13 @@ namespace std::ranges {
 このアルゴリズムはその他のアルゴリズムと違い、[`invoke`](/reference/functional/invoke.md)`(proj, *i)` が書き換え可能な参照であれば、関数 `f` の内部でその値を書き換えても構わない。
 
 ## 戻り値
-`{first + n, std::move(f)}`
+```cpp
+for_each_n_result {
+  .in = first + n,
+  .fun = std::move(f)
+}
+```
+* for_each_n_result[link /reference/algorithm/ranges_in_fun_result.md]
 
 ## 備考
 - 関数 `f` に戻り値がある場合、それは単に無視される
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_fun_result -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_found_result.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_in_found_result.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_found_result.md b/reference/algorithm/ranges_in_found_result.md
new file mode 100644
index 000000000..c172d324a
--- /dev/null
+++ b/reference/algorithm/ranges_in_found_result.md
@@ -0,0 +1,71 @@
+# in_fun_result
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;class I&amp;gt;
+  struct in_found_result {
+    [[no_unique_address]] I in;
+    bool found;
+
+    template&amp;lt;class I2&amp;gt;
+      requires convertible_to&amp;lt;const I&amp;amp;, I2&amp;gt;
+    constexpr operator in_found_result&amp;lt;I2&amp;gt;() const &amp;amp; {
+      return {in, found};
+    }
+    template&amp;lt;class I2&amp;gt;
+      requires convertible_to&amp;lt;I, I2&amp;gt;
+    constexpr operator in_found_result&amp;lt;I2&amp;gt;() &amp;amp;&amp;amp; {
+      return {std::move(in), found};
+    }
+  };
+
+  // (2)
+  template&amp;lt;class I&amp;gt;
+  using next_permutation_result = in_found_result&amp;lt;I&amp;gt;;
+
+  // (3)
+  template&amp;lt;class I&amp;gt;
+  using prev_permutation_result = in_found_result&amp;lt;I&amp;gt;;
+}
+```
+* no_unique_address[link /lang/cpp20/language_support_for_empty_objects.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* std::move[link /reference/utility/move.md]
+
+## 概要
+* (1): イテレータと`bool`を格納する型
+* (2): [`ranges::next_permutation`](ranges_next_permutation.md)で使用するエイリアス
+* (3): [`ranges::prev_permutation`](ranges_prev_permutation.md)で使用するエイリアス
+
+この型は、関数が範囲を受け取り、何かを発見したかどうかを返す場合に、処理した範囲の末尾と結果を返すために使用される。
+
+標準アルゴリズム関数ではこの型を直接返す代わりに、関数毎にエイリアスを定義している。
+
+## メンバ関数
+
+| 名前                           | 説明           | 対応バージョン |
+|--------------------------------|----------------|----------------|
+| `operator in_found_result&amp;lt;I2&amp;gt;` | 変換演算子     | C++20          |
+
+変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_fun_result -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_fun_result.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_in_fun_result.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_fun_result.md b/reference/algorithm/ranges_in_fun_result.md
new file mode 100644
index 000000000..a162a4922
--- /dev/null
+++ b/reference/algorithm/ranges_in_fun_result.md
@@ -0,0 +1,72 @@
+# in_fun_result
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;class I, class F&amp;gt;
+  struct in_fun_result {
+    [[no_unique_address]] I in;
+    [[no_unique_address]] F fun;
+
+    template&amp;lt;class I2, class F2&amp;gt;
+      requires convertible_to&amp;lt;const I&amp;amp;, I2&amp;gt; &amp;amp;&amp;amp; convertible_to&amp;lt;const F&amp;amp;, F2&amp;gt;
+    constexpr operator in_fun_result&amp;lt;I2, F2&amp;gt;() const &amp;amp; {
+      return {in, fun};
+    }
+
+    template&amp;lt;class I2, class F2&amp;gt;
+      requires convertible_to&amp;lt;I, I2&amp;gt; &amp;amp;&amp;amp; convertible_to&amp;lt;F, F2&amp;gt;
+    constexpr operator in_fun_result&amp;lt;I2, F2&amp;gt;() &amp;amp;&amp;amp; {
+      return {std::move(in), std::move(fun)};
+    }
+  };
+
+  // (2)
+  template&amp;lt;class I, class F&amp;gt;
+  using for_each_result = in_fun_result&amp;lt;I, F&amp;gt;;
+
+  // (3)
+  template&amp;lt;class I, class F&amp;gt;
+  using for_each_n_result = in_fun_result&amp;lt;I, F&amp;gt;;
+}
+```
+* no_unique_address[link /lang/cpp20/language_support_for_empty_objects.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* std::move[link /reference/utility/move.md]
+
+## 概要
+* (1): イテレータと関数オブジェクトを格納する型
+* (2): [`ranges::for_each`](ranges_for_each.md)で使用するエイリアス
+* (3): [`ranges::for_each_n`](ranges_for_each_n.md)で使用するエイリアス
+
+この型は、関数が範囲と関数オブジェクトを受け取る場合に、処理した範囲の末尾と渡した関数オブジェクトを返すために使用される。
+
+標準アルゴリズム関数ではこの型を直接返す代わりに、関数毎にエイリアスを定義している。
+
+## メンバ関数
+
+| 名前                             | 説明           | 対応バージョン |
+|----------------------------------|----------------|----------------|
+| `operator in_fun_result&amp;lt;I2, F2&amp;gt;` | 変換演算子     | C++20          |
+
+変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_in_out_result -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_in_out_result.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_in_in_out_result.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_in_out_result.md b/reference/algorithm/ranges_in_in_out_result.md
new file mode 100644
index 000000000..1123f4952
--- /dev/null
+++ b/reference/algorithm/ranges_in_in_out_result.md
@@ -0,0 +1,92 @@
+# in_in_out_result
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;class I1, class I2, class O&amp;gt;
+  struct in_in_out_result {
+    [[no_unique_address]] I1 in1;
+    [[no_unique_address]] I2 in2;
+    [[no_unique_address]] O  out;
+
+    template&amp;lt;class II1, class II2, class OO&amp;gt;
+      requires convertible_to&amp;lt;const I1&amp;amp;, II1&amp;gt; &amp;amp;&amp;amp;
+               convertible_to&amp;lt;const I2&amp;amp;, II2&amp;gt; &amp;amp;&amp;amp;
+               convertible_to&amp;lt;const O&amp;amp;, OO&amp;gt;
+    constexpr operator in_in_out_result&amp;lt;II1, II2, OO&amp;gt;() const &amp;amp; {
+      return {in1, in2, out};
+    }
+
+    template&amp;lt;class II1, class II2, class OO&amp;gt;
+      requires convertible_to&amp;lt;I1, II1&amp;gt; &amp;amp;&amp;amp;
+               convertible_to&amp;lt;I2, II2&amp;gt; &amp;amp;&amp;amp;
+               convertible_to&amp;lt;O, OO&amp;gt;
+    constexpr operator in_in_out_result&amp;lt;II1, II2, OO&amp;gt;() &amp;amp;&amp;amp; {
+      return {std::move(in1), std::move(in2), std::move(out)};
+    }
+  };
+
+  // (2)
+  template&amp;lt;class I1, class I2, class O&amp;gt;
+  using binary_transform_result = in_in_out_result&amp;lt;I1, I2, O&amp;gt;;
+
+  // (3)
+  template&amp;lt;class I1, class I2, class O&amp;gt;
+  using merge_result  = in_in_out_result&amp;lt;I1, I2, O&amp;gt;;
+
+  // (4)
+  template&amp;lt;class I1, class I2, class O&amp;gt;
+  using set_union_result  = in_in_out_result&amp;lt;I1, I2, O&amp;gt;;
+
+  // (5)
+  template&amp;lt;class I1, class I2, class O&amp;gt;
+  using set_intersection_result  = in_in_out_result&amp;lt;I1, I2, O&amp;gt;;
+
+  // (6)
+  template&amp;lt;class I1, class I2, class O&amp;gt;
+  using set_symmetric_difference_result = in_in_out_result&amp;lt;I1, I2, O&amp;gt;;
+}
+```
+* no_unique_address[link /lang/cpp20/language_support_for_empty_objects.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* std::move[link /reference/utility/move.md]
+
+## 概要
+* (1): 3つのイテレータを格納する型
+* (2): [`ranges::transform`](ranges_transform.md.nolink)で使用するエイリアス
+* (2): [`ranges::merge`](ranges_merge.md)で使用するエイリアス
+* (2): [`ranges::set_union`](ranges_set_union.md)で使用するエイリアス
+* (2): [`ranges::set_intersection`](ranges_set_intersection.md)で使用するエイリアス
+* (2): [`ranges::set_symmetric_difference`](ranges_set_symmetric_difference.md)で使用するエイリアス
+
+この型は、関数が2つの入力用の範囲と出力用の範囲を受け取る場合に、それぞれ処理した範囲の末尾を返すために使用される。
+
+標準アルゴリズム関数ではこの型を直接返す代わりに、関数毎にエイリアスを定義している。
+
+## メンバ関数
+
+| 名前                                      | 説明           | 対応バージョン |
+|-------------------------------------------|----------------|----------------|
+| `operator in_in_out_result&amp;lt;II1, II2, OO&amp;gt;` | 変換演算子     | C++20          |
+
+変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_in_result -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_in_result.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_in_in_result.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_in_result.md b/reference/algorithm/ranges_in_in_result.md
new file mode 100644
index 000000000..40a260e79
--- /dev/null
+++ b/reference/algorithm/ranges_in_in_result.md
@@ -0,0 +1,72 @@
+# in_in_result
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;class I1, class I2&amp;gt;
+  struct in_in_result {
+    [[no_unique_address]] I1 in1;
+    [[no_unique_address]] I2 in2;
+
+    template&amp;lt;class II1, class II2&amp;gt;
+      requires convertible_to&amp;lt;const I1&amp;amp;, II1&amp;gt; &amp;amp;&amp;amp; convertible_to&amp;lt;const I2&amp;amp;, II2&amp;gt;
+    constexpr operator in_in_result&amp;lt;II1, II2&amp;gt;() const &amp;amp; {
+      return {in1, in2};
+    }
+
+    template&amp;lt;class II1, class II2&amp;gt;
+      requires convertible_to&amp;lt;I1, II1&amp;gt; &amp;amp;&amp;amp; convertible_to&amp;lt;I2, II2&amp;gt;
+    constexpr operator in_in_result&amp;lt;II1, II2&amp;gt;() &amp;amp;&amp;amp; {
+      return {std::move(in1), std::move(in2)};
+    }
+  };
+
+  // (2)
+  template&amp;lt;class I1, class I2&amp;gt;
+  using mismatch_result = in_in_result&amp;lt;I1, I2&amp;gt;;
+
+  // (3)
+  template&amp;lt;class I1, class I2&amp;gt;
+  using swap_ranges_result = in_in_result&amp;lt;I1, I2&amp;gt;;
+}
+```
+* no_unique_address[link /lang/cpp20/language_support_for_empty_objects.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* std::move[link /reference/utility/move.md]
+
+## 概要
+* (1): 2つのイテレータを格納する型
+* (2): [`ranges::mismatch`](ranges_mismatch.md)で使用するエイリアス
+* (3): [`ranges::swap_ranges`](ranges_swap_ranges.md.nolink)で使用するエイリアス
+
+この型は、関数が入力用に2つの範囲を受け取る場合に、それぞれ処理した範囲の末尾を返すために使用される。
+
+標準アルゴリズム関数ではこの型を直接返す代わりに、関数毎にエイリアスを定義している。
+
+## メンバ関数
+
+| 名前                               | 説明           | 対応バージョン |
+|------------------------------------|----------------|----------------|
+| `operator in_in_result&amp;lt;II1, II22&amp;gt;` | 変換演算子     | C++20          |
+
+変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_fun_result -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_out_out_result.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_in_out_out_result.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_out_out_result.md b/reference/algorithm/ranges_in_out_out_result.md
new file mode 100644
index 000000000..bf52fb647
--- /dev/null
+++ b/reference/algorithm/ranges_in_out_out_result.md
@@ -0,0 +1,72 @@
+# in_fun_result
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;class I, class O1, class O2&amp;gt;
+  struct in_out_out_result {
+    [[no_unique_address]] I  in;
+    [[no_unique_address]] O1 out1;
+    [[no_unique_address]] O2 out2;
+
+    template&amp;lt;class II, class OO1, class OO2&amp;gt;
+      requires convertible_to&amp;lt;const I&amp;amp;, II&amp;gt; &amp;amp;&amp;amp;
+               convertible_to&amp;lt;const O1&amp;amp;, OO1&amp;gt; &amp;amp;&amp;amp;
+               convertible_to&amp;lt;const O2&amp;amp;, OO2&amp;gt;
+    constexpr operator in_out_out_result&amp;lt;II, OO1, OO2&amp;gt;() const &amp;amp; {
+      return {in, out1, out2};
+    }
+
+    template&amp;lt;class II, class OO1, class OO2&amp;gt;
+      requires convertible_to&amp;lt;I, II&amp;gt; &amp;amp;&amp;amp;
+               convertible_to&amp;lt;O1, OO1&amp;gt; &amp;amp;&amp;amp;
+               convertible_to&amp;lt;O2, OO2&amp;gt;
+    constexpr operator in_out_out_result&amp;lt;II, OO1, OO2&amp;gt;() &amp;amp;&amp;amp; {
+      return {std::move(in), std::move(out1), std::move(out2)};
+    }
+  };
+
+  // (2)
+  template&amp;lt;class I, class O1, class O2&amp;gt;
+  using partition_copy_result = in_out_out_result&amp;lt;I, O1, O2&amp;gt;;
+}
+```
+* no_unique_address[link /lang/cpp20/language_support_for_empty_objects.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* std::move[link /reference/utility/move.md]
+
+## 概要
+* (1): 3つのイテレータを格納する型
+* (2): [`ranges::partition_copy`](ranges_partition_copy.md.nolink)で使用するエイリアス
+
+この型は、関数が入力用の範囲と2つの出力用の範囲を受け取る場合に、それぞれ処理した範囲の末尾を返すために使用される。
+
+標準アルゴリズム関数ではこの型を直接返す代わりに、関数毎にエイリアスを定義している。
+
+## メンバ関数
+
+| 名前                                       | 説明           | 対応バージョン |
+|--------------------------------------------|----------------|----------------|
+| `operator in_out_out_result&amp;lt;II, OO1, OO2&amp;gt;` | 変換演算子     | C++20          |
+
+変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_out_result -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_out_result.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_in_out_result.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_out_result.md b/reference/algorithm/ranges_in_out_result.md
new file mode 100644
index 000000000..c2bf2f929
--- /dev/null
+++ b/reference/algorithm/ranges_in_out_result.md
@@ -0,0 +1,142 @@
+# in_out_result
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;class I, class O&amp;gt;
+  struct in_out_result {
+    [[no_unique_address]] I in;
+    [[no_unique_address]] O out;
+
+    template&amp;lt;class I2, class O2&amp;gt;
+      requires convertible_to&amp;lt;const I&amp;amp;, I2&amp;gt; &amp;amp;&amp;amp; convertible_to&amp;lt;const O&amp;amp;, O2&amp;gt;
+    constexpr operator in_out_result&amp;lt;I2, O2&amp;gt;() const &amp;amp; {
+      return {in, out};
+    }
+
+    template&amp;lt;class I2, class O2&amp;gt;
+      requires convertible_to&amp;lt;I, I2&amp;gt; &amp;amp;&amp;amp; convertible_to&amp;lt;O, O2&amp;gt;
+    constexpr operator in_out_result&amp;lt;I2, O2&amp;gt;() &amp;amp;&amp;amp; {
+      return {std::move(in), std::move(out)};
+    }
+  };
+
+  // (2)
+  template&amp;lt;class I, class O&amp;gt;
+  using copy_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (3)
+  template&amp;lt;class I, class O&amp;gt;
+  using copy_n_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (4)
+  template&amp;lt;class I, class O&amp;gt;
+  using copy_if_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (5)
+  template&amp;lt;class I, class O&amp;gt;
+  using copy_backward_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (6)
+  template&amp;lt;class I, class O&amp;gt;
+  using move_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (7)
+  template&amp;lt;class I, class O&amp;gt;
+  using move_backward_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (8)
+  template&amp;lt;class I, class O&amp;gt;
+  using unary_transform_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (9)
+  template&amp;lt;class I, class O&amp;gt;
+  using replace_copy_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (10)
+  template&amp;lt;class I, class O&amp;gt;
+  using replace_copy_if_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (11)
+  template&amp;lt;class I, class O&amp;gt;
+  using remove_copy_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (12)
+  template&amp;lt;class I, class O&amp;gt;
+  using remove_copy_if_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (13)
+  template&amp;lt;class I, class O&amp;gt;
+  using unique_copy_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (14)
+  template&amp;lt;class I, class O&amp;gt;
+  using reverse_copy_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (15)
+  template&amp;lt;class I, class O&amp;gt;
+  using rotate_copy_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (16)
+  template&amp;lt;class I, class O&amp;gt;
+  using partial_sort_copy_result = in_out_result&amp;lt;I, O&amp;gt;;
+
+  // (17)
+  template&amp;lt;class I, class O&amp;gt;
+  using set_difference_result = in_out_result&amp;lt;I, O&amp;gt;;
+}
+```
+* no_unique_address[link /lang/cpp20/language_support_for_empty_objects.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* std::move[link /reference/utility/move.md]
+
+## 概要
+* (1): 2つのイテレータを格納する型
+* (2): [`ranges::copy`](ranges_copy.md.nolink)で使用するエイリアス
+* (3): [`ranges::copy_n`](ranges_copy_n.md.nolink)で使用するエイリアス
+* (4): [`ranges::copy_if`](ranges_copy_if.md.nolink)で使用するエイリアス
+* (5): [`ranges::copy_backward`](ranges_copy_backward.md.nolink)で使用するエイリアス
+* (6): [`ranges::move`](ranges_move.md.nolink)で使用するエイリアス
+* (7): [`ranges::move_backward`](ranges_move_backward.md.nolink)で使用するエイリアス
+* (8): [`ranges::unary_transform`](ranges_unary_transform.md.nolink)で使用するエイリアス
+* (9): [`ranges::replace_copy`](ranges_replace_copy.md.nolink)で使用するエイリアス
+* (10): [`ranges::replace_copy_if`](ranges_replace_copy_if.md.nolink)で使用するエイリアス
+* (11): [`ranges::remove_copy`](ranges_remove_copy.md.nolink)で使用するエイリアス
+* (12): [`ranges::remove_copy_if`](ranges_remove_copy_if.md.nolink)で使用するエイリアス
+* (13): [`ranges::unique_copy`](ranges_unique_copy.md.nolink)で使用するエイリアス
+* (14): [`ranges::reverse_copy`](ranges_reverse_copy.md.nolink)で使用するエイリアス
+* (15): [`ranges::rotate_copy`](ranges_rotate_copy.md.nolink)で使用するエイリアス
+* (16): [`ranges::partial_sort_copy`](ranges_partial_sort_copy.md)で使用するエイリアス
+* (17): [`ranges::set_difference`](ranges_set_difference.md)で使用するエイリアス
+
+この型は、関数が入力用と出力用に範囲を受け取る場合に、それぞれ処理した範囲の末尾を返すために使用される。
+
+標準アルゴリズム関数ではこの型を直接返す代わりに、関数毎にエイリアスを定義している。
+
+## メンバ関数
+
+| 名前                             | 説明           | 対応バージョン |
+|----------------------------------|----------------|----------------|
+| `operator in_out_result&amp;lt;I2, O2&amp;gt;` | 変換演算子     | C++20          |
+
+変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>merge -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_merge.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_merge.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_merge.md b/reference/algorithm/ranges_merge.md
index 16bcabc78..239840117 100644
--- a/reference/algorithm/ranges_merge.md
+++ b/reference/algorithm/ranges_merge.md
@@ -6,9 +6,6 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class I1, class I2, class O&amp;gt;
-  using merge_result = in_in_out_result&amp;lt;I1, I2, O&amp;gt;;
-
   template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, weakly_incrementable O,
            class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
     requires mergeable&amp;lt;I1, I2, O, Comp, Proj1, Proj2&amp;gt;
@@ -20,7 +17,7 @@ namespace std::ranges {
   constexpr merge_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;, O&amp;gt; merge(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});  // (2)
 }
 ```
-* in_in_out_result[link in_in_out_result.md.nolink]
+* merge_result[link in_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -48,8 +45,6 @@ namespace std::ranges {
 
 
 ## 戻り値
-次のメンバをもつtuple-likeオブジェクト。
-
 ```cpp
 merge_result {
   .in1 = last1,
@@ -57,6 +52,7 @@ merge_result {
   .out = result + (last1 - first1) + (last2 - first2),
 }
 ```
+* merge_result[link in_in_out_result.md]
 
 ## 計算量
 `N = (last1 - first1) + (last2 - first2)`であるとして最大で、N - 1回比較する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_fun_result -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_min_max_result.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_min_max_result.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_min_max_result.md b/reference/algorithm/ranges_min_max_result.md
new file mode 100644
index 000000000..652228c85
--- /dev/null
+++ b/reference/algorithm/ranges_min_max_result.md
@@ -0,0 +1,72 @@
+# in_fun_result
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;class T&amp;gt;
+  struct min_max_result {
+    [[no_unique_address]] T min;
+    [[no_unique_address]] T max;
+
+    template&amp;lt;class T2&amp;gt;
+      requires convertible_to&amp;lt;const T&amp;amp;, T2&amp;gt;
+    constexpr operator min_max_result&amp;lt;T2&amp;gt;() const &amp;amp; {
+      return {min, max};
+    }
+
+    template&amp;lt;class T2&amp;gt;
+      requires convertible_to&amp;lt;T, T2&amp;gt;
+    constexpr operator min_max_result&amp;lt;T2&amp;gt;() &amp;amp;&amp;amp; {
+      return {std::move(min), std::move(max)};
+    }
+  };
+
+  // (2)
+  template&amp;lt;class T&amp;gt;
+  using minmax_result = min_max_result&amp;lt;T&amp;gt;;
+
+  // (3)
+  template&amp;lt;class I&amp;gt;
+  using minmax_element_result = min_max_result&amp;lt;I&amp;gt;;
+}
+```
+* no_unique_address[link /lang/cpp20/language_support_for_empty_objects.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* std::move[link /reference/utility/move.md]
+
+## 概要
+* (1): 最小値と最大値、またはそれらのイテレータを格納する型
+* (2): [`ranges::minmax`](ranges_minmax.md)で使用するエイリアス
+* (3): [`ranges::minmax_element`](ranges_fominmax_element.md)で使用するエイリアス
+
+この型は、関数が最小値と最大値またはそれらのイテレータを返す場合に使用される。
+
+標準アルゴリズム関数ではこの型を直接返す代わりに、関数毎にエイリアスを定義している。
+
+## メンバ関数
+
+| 名前                          | 説明           | 対応バージョン |
+|-------------------------------|----------------|----------------|
+| `operator min_max_result&amp;lt;T2&amp;gt;` | 変換演算子     | C++20          |
+
+変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_minmax.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_minmax.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_minmax.md b/reference/algorithm/ranges_minmax.md
index ab8178e25..7cb63e129 100644
--- a/reference/algorithm/ranges_minmax.md
+++ b/reference/algorithm/ranges_minmax.md
@@ -7,9 +7,6 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class T&amp;gt;
-  using minmax_result = min_max_result&amp;lt;T&amp;gt;;
-
   template&amp;lt;class T, class Proj = identity,
            indirect_strict_weak_order&amp;lt;projected&amp;lt;const T*, Proj&amp;gt;&amp;gt; Comp = ranges::less&amp;gt;
   constexpr minmax_result&amp;lt;const T&amp;amp;&amp;gt; minmax(const T&amp;amp; a, const T&amp;amp; b, Comp comp = {}, Proj proj = {});
@@ -24,7 +21,7 @@ namespace std::ranges {
   constexpr minmax_result&amp;lt;range_value_t&amp;lt;R&amp;gt;&amp;gt; minmax(R&amp;amp;&amp;amp; r, Comp comp = {}, Proj proj = {});
 }
 ```
-* min_max_result[link min_max_result.md.nolink]
+* minmax_result[link min_max_result.md]
 * identity[link /reference/functional/identity.md]
 * indirect_strict_weak_order[link /reference/iterator/indirect_strict_weak_order.md]
 * projected[link /reference/iterator/projected.md]
@@ -39,7 +36,13 @@ namespace std::ranges {
 同じ型の2つの値、もしくは範囲によるN個の値のうち、最小値と最大値の組を取得する。
 
 ## 戻り値
-第1メンバ`min`が最小値、第2メンバ`max`が最大値となるtuple-likeオブジェクト([`min_max_result`](min_max_result.md.nolink))
+```cpp
+minmax_result {
+  .min = 最小値,
+  .max = 最大値,
+}
+```
+* minmax_result[link min_max_result.md]
 
 それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断された最初の値となる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax_element -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_minmax_element.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_minmax_element.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_minmax_element.md b/reference/algorithm/ranges_minmax_element.md
index 5914791fd..d2131b6a4 100644
--- a/reference/algorithm/ranges_minmax_element.md
+++ b/reference/algorithm/ranges_minmax_element.md
@@ -6,19 +6,16 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class T&amp;gt;
-  using minmax_result = min_max_result&amp;lt;T&amp;gt;;
-
   template&amp;lt;forward_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity,
            indirect_strict_weak_order&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Comp = ranges::less&amp;gt;
-  constexpr minmax_result&amp;lt;I&amp;gt; minmax_element(I first, S last, Comp comp = {}, Proj proj = {});
+  constexpr minmax_element_result&amp;lt;I&amp;gt; minmax_element(I first, S last, Comp comp = {}, Proj proj = {});
 
   template&amp;lt;forward_range R, class Proj = identity,
            indirect_strict_weak_order&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Comp = ranges::less&amp;gt;
-  constexpr minmax_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;&amp;gt; minmax_element(R&amp;amp;&amp;amp; r, Comp comp = {}, Proj proj = {});
+  constexpr minmax_element_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;&amp;gt; minmax_element(R&amp;amp;&amp;amp; r, Comp comp = {}, Proj proj = {});
 }
 ```
-* min_max_result[link min_max_result.md.nolink]
+* minmax_element_result[link min_max_result.md]
 * forward_iterator[link /reference/iterator/forward_iterator.md]
 * identity[link /reference/functional/identity.md]
 * indirect_strict_weak_order[link /reference/iterator/indirect_strict_weak_order.md]
@@ -35,8 +32,13 @@ namespace std::ranges {
 
 
 ## 戻り値
-
-第1メンバ`min`が最小の要素、第2メンバ`max`が最大の要素をそれぞれ指すイテレータとなるtuple-likeオブジェクト([`min_max_result`](min_max_result.md.nolink))
+```cpp
+minmax_element_result {
+  .min = 最小の要素を指すイテレータ,
+  .max = 最大の要素を指すイテレータ,
+}
+```
+* minmax_element_result[link min_max_result.md]
 
 それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断し、同じ値の要素が複数ある場合は、最小の要素は最初の要素、最大の要素は最後の要素となる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mismatch -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_mismatch.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_mismatch.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_mismatch.md b/reference/algorithm/ranges_mismatch.md
index 923fd5530..c25f09b6c 100644
--- a/reference/algorithm/ranges_mismatch.md
+++ b/reference/algorithm/ranges_mismatch.md
@@ -6,19 +6,16 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class I1, class I2&amp;gt;
-  using mismatch_result = in_in_result&amp;lt;I1, I2&amp;gt;; // (1)
-
   template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity&amp;gt;
     requires indirectly_comparable&amp;lt;I1, I2, Pred, Proj1, Proj2&amp;gt;
-  constexpr mismatch_result&amp;lt;I1, I2&amp;gt; mismatch(I1 first1, S1 last1, I2 first2, S2 last2, Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                      // (2)
+  constexpr mismatch_result&amp;lt;I1, I2&amp;gt; mismatch(I1 first1, S1 last1, I2 first2, S2 last2, Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                      // (1)
 
   template&amp;lt;input_range R1, input_range R2, class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity&amp;gt;
     requires indirectly_comparable&amp;lt;iterator_t&amp;lt;R1&amp;gt;, iterator_t&amp;lt;R2&amp;gt;, Pred, Proj1, Proj2&amp;gt;
-  constexpr mismatch_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;&amp;gt; mismatch(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});    // (3)
+  constexpr mismatch_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;&amp;gt; mismatch(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {});    // (2)
 }
 ```
-* in_fun_result[link ranges_in_fun_result.md.nolink]
+* mismatch_result[link ranges_in_in_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * ranges::equal_to[link /reference/functional/ranges_equal_to.md]
@@ -37,16 +34,18 @@ namespace std::ranges {
 ## 概要
 2つのシーケンスが一致していない場所を検索する。
 
+* (1): イテレーターペアで範囲を指定する
+* (2): 範囲を直接指定する
+
 ## 戻り値
-戻り値の型 `mismatch_result` は2つのイテレータからなるtuple-likeな型である。
 
 `[first1,last1)` 内にあるイテレータ `i` と、`j == first2 + (i - first1)` であるイテレータ `j` について、
 
 - `j`が範囲`[first2, last2)`に含まれており、
 - `!(*i == *j)` もしくは
-- [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj1, *i), `[`invoke`](/reference/functional/invoke.md)`(proj2, *j)) == false` であるような、最初のイテレータのペア `{i, j}` を返す。
+- [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj1, *i), `[`invoke`](/reference/functional/invoke.md)`(proj2, *j)) == false` であるような、最初のイテレータのペア [`mismatch_result`](ranges_in_in_result.md)`{ .in1 = i, .in2 = j }` を返す。
 
-そのようなイテレータが見つからなかった場合は `{last1, first2 + (last1 - first1)}` を返す。
+そのようなイテレータが見つからなかった場合は [`mismatch_result`](ranges_in_in_result.md)`{ .in1 = last1, .in2 = first2 + (last1 - first1)}` を返す。
 
 ## 計算量
 最大で `last1 - first1` 回の対応する述語が適用される。
@@ -110,7 +109,7 @@ mismatch value: (end,2)
 struct mismatch_impl {
   template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, class Pred = ranges::equal_to, class Proj1 = identity, class Proj2 = identity&amp;gt;
     requires indirectly_comparable&amp;lt;I1, I2, Pred, Proj1, Proj2&amp;gt;
-  constexpr ranges::mismatch_result&amp;lt;I1, I2&amp;gt; operator()(I1 first1, S1 last1, I2 first2, S2 last2, Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {}) const {
+  constexpr mismatch_result&amp;lt;I1, I2&amp;gt; operator()(I1 first1, S1 last1, I2 first2, S2 last2, Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {}) const {
     for ( ; first1 != last1 &amp;amp;&amp;amp; first != last2; ++first1, ++first2)
       if (!bool(invoke(pred, invoke(proj1, *first1), invoke(proj2, *first2))))
         return {first1, first2};
@@ -126,7 +125,7 @@ struct mismatch_impl {
 
 inline constexpr mismatch_impl mismatch;
 ```
-* in_fun_result[link ranges_in_fun_result.md.nolink]
+* mismatch_result[link ranges_in_in_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * ranges::equal_to[link /reference/functional/ranges_equal_to.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>next_permutation -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_next_permutation.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_next_permutation.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_next_permutation.md b/reference/algorithm/ranges_next_permutation.md
index 94a95dbda..9185d950e 100644
--- a/reference/algorithm/ranges_next_permutation.md
+++ b/reference/algorithm/ranges_next_permutation.md
@@ -7,9 +7,6 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class I&amp;gt;
-  using next_permutation_result = in_found_result&amp;lt;I&amp;gt;;
-
   template&amp;lt;bidirectional_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Comp = ranges::less, class Proj = identity&amp;gt;
     requires sortable&amp;lt;I, Comp, Proj&amp;gt;
   constexpr next_permutation_result&amp;lt;I&amp;gt; next_permutation(I first, S last, Comp comp = {}, Proj proj = {});             // (1)
@@ -19,7 +16,7 @@ namespace std::ranges {
   constexpr next_permutation_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;&amp;gt; next_permutation(R&amp;amp;&amp;amp; r, Comp comp = {}, Proj proj = {});  // (2)
 }
 ```
-* in_found_result[link in_found_result.md.nolink]
+* next_permutation_result[link in_found_result.md]
 * bidirectional_iterator[link /reference/iterator/bidirectional_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * ranges::less[link /reference/functional/ranges_less.md]
@@ -44,10 +41,14 @@ namespace std::ranges {
 辞書順による次の順列とは、現在の順列（`[first, last)`）よりも（上記の意味の順序で）大きい順列のうち取り得る最小のもののことである。
 
 ## 戻り値
-次のメンバをもつtuple-lileオブジェクト。
 
-1. `in`: `last`
-2. `found`: 次の順列が存在する場合は`true`、そうでなければ`false`
+```cpp
+next_permutation_result {
+  .in = last,
+  .found = 次の順列が存在する場合は true、そうでなければ false,
+}
+```
+* next_permutation_result[link in_found_result.md]
 
 ## 計算量
 高々`(last - first)/2`回の要素の交換
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partial_sort_copy -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_partial_sort_copy.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_partial_sort_copy.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_partial_sort_copy.md b/reference/algorithm/ranges_partial_sort_copy.md
index 9c7922ca3..0842b59ba 100644
--- a/reference/algorithm/ranges_partial_sort_copy.md
+++ b/reference/algorithm/ranges_partial_sort_copy.md
@@ -6,9 +6,6 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class I, class O&amp;gt;
-  using partial_sort_copy_result = in_out_result&amp;lt;I, O&amp;gt;;
-
   template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, random_access_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2,
            class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
     requires indirectly_copyable&amp;lt;I1, I2&amp;gt; &amp;amp;&amp;amp; sortable&amp;lt;I2, Comp, Proj2&amp;gt; &amp;amp;&amp;amp;
@@ -25,7 +22,7 @@ namespace std::ranges {
     partial_sort_copy(R1&amp;amp;&amp;amp; r, R2&amp;amp;&amp;amp; result_r, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                              // (2)
 }
 ```
-* in_out_result[link in_out_result.md.nolink]
+* partial_sort_copy_result[link in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * random_access_iterator[link /reference/iterator/random_access_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
@@ -53,7 +50,13 @@ namespace std::ranges {
 
 
 ## 戻り値
-`{last, result_first + N}`
+```cpp
+partial_sort_copy_result {
+  .in = last,
+  .out = result_first + N
+}
+```
+* partial_sort_copy_result[link in_out_result.md]
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prev_permutation -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_prev_permutation.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_prev_permutation.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_prev_permutation.md b/reference/algorithm/ranges_prev_permutation.md
index 73dd7d9d1..08fe16022 100644
--- a/reference/algorithm/ranges_prev_permutation.md
+++ b/reference/algorithm/ranges_prev_permutation.md
@@ -6,9 +6,6 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class I&amp;gt;
-  using prev_permutation_result = in_found_result&amp;lt;I&amp;gt;;
-
   template&amp;lt;bidirectional_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Comp = ranges::less, class Proj = identity&amp;gt;
     requires sortable&amp;lt;I, Comp, Proj&amp;gt;
   constexpr prev_permutation_result&amp;lt;I&amp;gt; next_permutation(I first, S last, Comp comp = {}, Proj proj = {});             // (1)
@@ -18,7 +15,7 @@ namespace std::ranges {
   constexpr prev_permutation_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;&amp;gt; next_permutation(R&amp;amp;&amp;amp; r, Comp comp = {}, Proj proj = {});  // (2)
 }
 ```
-* in_found_result[link in_found_result.md.nolink]
+* prev_permutation_result[link in_found_result.md]
 * bidirectional_iterator[link /reference/iterator/bidirectional_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * ranges::less[link /reference/functional/ranges_less.md]
@@ -40,10 +37,13 @@ namespace std::ranges {
 比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって辞書順に並んでいる全ての順列の集合があると仮定すると、前の順列が発見される。
 
 ## 戻り値
-次のメンバをもつtuple-lileオブジェクト。
-
-1. `in`: `last`
-2. `found`: 前の順列が存在する場合は`true`、そうでなければ`false`
+```cpp
+prev_permutation_result {
+  .in = last,
+  .found = 前の順列が存在する場合は true、そうでなければ false,
+}
+```
+* prev_permutation_result[link in_found_result.md]
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_difference -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_difference.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_set_difference.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_difference.md b/reference/algorithm/ranges_set_difference.md
index 7f78332e5..3541b5802 100644
--- a/reference/algorithm/ranges_set_difference.md
+++ b/reference/algorithm/ranges_set_difference.md
@@ -6,9 +6,6 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class I, class O&amp;gt;
-  using set_union_result = in_out_result&amp;lt;I, O&amp;gt;;
-
   template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, weakly_incrementable O,
            class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
     requires mergeable&amp;lt;I1, I2, O, Comp, Proj1, Proj2&amp;gt;
@@ -22,7 +19,7 @@ namespace std::ranges {
     set_difference(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                         // (2)
 }
 ```
-* in_out_result[link in_out_result.md.nolink]
+* set_difference_result[link in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -49,14 +46,13 @@ namespace std::ranges {
 
 
 ## 戻り値
-次のメンバをもつtuple-likeオブジェクト。
-
 ```cpp
-set_union_result {
+set_difference_result {
   .in  = last1,
   .out = result_last,
 }
 ```
+* set_difference_result[link in_out_result.md]
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_intersection -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_intersection.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_set_intersection.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_intersection.md b/reference/algorithm/ranges_set_intersection.md
index f62d384e3..548ad8cab 100644
--- a/reference/algorithm/ranges_set_intersection.md
+++ b/reference/algorithm/ranges_set_intersection.md
@@ -6,9 +6,6 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class I1, class I2, class O&amp;gt;
-  using set_intersection_result = in_in_out_result&amp;lt;I1, I2, O&amp;gt;;
-
   template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, weakly_incrementable O,
            class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
     requires mergeable&amp;lt;I1, I2, O, Comp, Proj1, Proj2&amp;gt;
@@ -22,7 +19,7 @@ namespace std::ranges {
     set_intersection(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                          // (2)
 }
 ```
-* in_in_out_result[link in_in_out_result.md.nolink]
+* set_intersection_result[link in_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -52,12 +49,13 @@ namespace std::ranges {
 次のメンバをもつtuple-likeオブジェクト。
 
 ```cpp
-set_union_result {
+set_intersection_result {
   .in1 = last1,
   .in2 = last2,
   .out = result_last,
 }
 ```
+* set_intersection_result[link in_in_out_result.md]
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_symmetric_difference -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_symmetric_difference.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_set_symmetric_difference.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_symmetric_difference.md b/reference/algorithm/ranges_set_symmetric_difference.md
index dfe6bc611..2635bdf68 100644
--- a/reference/algorithm/ranges_set_symmetric_difference.md
+++ b/reference/algorithm/ranges_set_symmetric_difference.md
@@ -22,7 +22,7 @@ namespace std::ranges {
     set_symmetric_difference(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});
 }
 ```
-* in_in_out_result[link in_in_out_result.md.nolink]
+* set_symmetric_difference_result[link in_in_out_result.md] 
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -49,15 +49,14 @@ namespace std::ranges {
 
 
 ## 戻り値
-次のメンバをもつtuple-likeオブジェクト。
-
 ```cpp
-set_union_result {
+set_symmetric_difference_result {
   .in1 = last1,
   .in2 = last2,
   .out = result_last,
 }
 ```
+* set_symmetric_difference_result[link in_in_out_result.md] 
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_union -- 戻り値型の説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_union.html"/>
      <id>d6071adcdc9fefae160a1d8cfc7ac6638c2736d8:reference/algorithm/ranges_set_union.md</id>
      <updated>2022-03-21T05:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_union.md b/reference/algorithm/ranges_set_union.md
index 84673cc4e..6133663ef 100644
--- a/reference/algorithm/ranges_set_union.md
+++ b/reference/algorithm/ranges_set_union.md
@@ -6,9 +6,6 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class I1, class I2, class O&amp;gt;
-  using set_union_result = in_in_out_result&amp;lt;I1, I2, O&amp;gt;;
-
   template&amp;lt;input_iterator I1, sentinel_for&amp;lt;I1&amp;gt; S1, input_iterator I2, sentinel_for&amp;lt;I2&amp;gt; S2, weakly_incrementable O,
            class Comp = ranges::less, class Proj1 = identity, class Proj2 = identity&amp;gt;
     requires mergeable&amp;lt;I1, I2, O, Comp, Proj1, Proj2&amp;gt;
@@ -22,7 +19,7 @@ namespace std::ranges {
     set_union(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});                           // (2)
 }
 ```
-* in_in_out_result[link in_in_out_result.md.nolink]
+* set_union_result[link in_in_out_result.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
@@ -48,8 +45,6 @@ namespace std::ranges {
 
 
 ## 戻り値
-次のメンバをもつtuple-likeオブジェクト。
-
 ```cpp
 set_union_result {
   .in1 = last1,
@@ -57,6 +52,7 @@ set_union_result {
   .out = result_last,
 }
 ```
+* set_union_result[link in_in_out_result.md]
 
 ただし、`result_last` は構築された範囲の終端。 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- 例を修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_equal_range.html"/>
      <id>756792647298addf922812967a445b7cfac9ac0c:reference/algorithm/ranges_equal_range.md</id>
      <updated>2022-03-21T03:01:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_equal_range.md b/reference/algorithm/ranges_equal_range.md
index 83e73b1a4..0905144fb 100644
--- a/reference/algorithm/ranges_equal_range.md
+++ b/reference/algorithm/ranges_equal_range.md
@@ -55,6 +55,7 @@ int main()
   std::vector&amp;lt;int&amp;gt; v2  = {1, 4, 2, 5};
 
   std::ranges::sort(v);
+  std::ranges::sort(v2);
 
   auto result  = std::ranges::equal_range(v, 3);
   auto result2 = std::ranges::equal_range(v2, 3);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>merge -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_merge.html"/>
      <id>04c97bbdab986678ffd15cf53cb0337400a3febe:reference/algorithm/ranges_merge.md</id>
      <updated>2022-03-21T02:35:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_merge.md b/reference/algorithm/ranges_merge.md
index 83ecc4a2b..16bcabc78 100644
--- a/reference/algorithm/ranges_merge.md
+++ b/reference/algorithm/ranges_merge.md
@@ -20,7 +20,7 @@ namespace std::ranges {
   constexpr merge_result&amp;lt;borrowed_iterator_t&amp;lt;R1&amp;gt;, borrowed_iterator_t&amp;lt;R2&amp;gt;, O&amp;gt; merge(R1&amp;amp;&amp;amp; r1, R2&amp;amp;&amp;amp; r2, O result, Comp comp = {}, Proj1 proj1 = {}, Proj2 proj2 = {});  // (2)
 }
 ```
-* in_in_out_result[link in_in_out_result.md]
+* in_in_out_result[link in_in_out_result.md.nolink]
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-05T03:46:11.486392</updated>
  <id>c3a42fdc-6acf-499e-9669-49024d46eeb9</id>

  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- スポンサー更新 #1453</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>3dd6a8e1f56eaa67a717f7879360d74d1c7b98f6:index.md</id>
      <updated>2025-06-05T12:42:05+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjp - C++日本語リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;最新C++バージョンのリファレンスを提供していきます。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;HTMLデータのダウンロード&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/cpprefjp.github.io/archive/refs/heads/master.zip&#34; target=&#34;_blank&#34;&gt;cpprefjp.github.io-master.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ローカルで閲覧できるHTMLを用意しています。&lt;/p&gt;
&lt;h2&gt;スポンサーシップ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプロジェクトは、持続的な活動のため、ユーザーの方々からのご支援をお待ちしております。上記Open Collectiveのプロジェクトでスポンサーシップの募集をしております。&lt;/p&gt;
&lt;p&gt;ご支援いただくユーザーの方々には、以下の特典があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本ページ (cpprefjpサイトのトップページ) に1年間、金額順でロゴを表示させていただきます (金額が同じ場合は登録順)&lt;/li&gt;
&lt;li&gt;シルバースポンサー以上の方は、&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;cpprefjp/site&lt;/a&gt;リポジトリのissueとして、採用情報を投稿できます (一週間ほどで閉じます)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ご支援いただいた資金は、貢献度に応じてコントリビューターに分配させていただきます。&lt;/p&gt;
&lt;p&gt;また、スポンサーシップの入金方法として、Open Collectiveのほかに銀行振込も対応しております。&lt;/p&gt;
&lt;p&gt;銀行振込に関して、またはそれ以外でスポンサーシップの相談に関しては、以下のメールアドレスにお問い合わせください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メールアドレス : &lt;a href=&#34;mailto:cpprefjp_org@googlegroups.com&#34;&gt;cpprefjp_org@googlegroups.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;宛名 : cpprefjp管理者&lt;ul&gt;
&lt;li&gt;代表として、主に高橋晶 (Akira Takahashi) がご対応させていただきます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190112041213/http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スポンサー&lt;/h2&gt;
&lt;p&gt;cpprefjpプロジェクトは、以下の方々にスポンサーになっていただいております。&lt;/p&gt;
&lt;h3&gt;ゴールドスポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cocotone.jp&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;cocotone様&#34; src=&#34;static/image/sponsors/cocotone/cocotone.png&#34; title=&#34;cocotone様&#34; width=&#34;560&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cube-soft.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;CubeSoft様&#34; src=&#34;https://raw.githubusercontent.com/cube-soft/cube.assets/master/home/banner/large.png&#34; title=&#34;CubeSoft様&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;シルバースポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://acerola-software.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Acerola Software様&#34; src=&#34;static/image/sponsors/Acerola/as_logo.png&#34; title=&#34;Acerola Software様&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.fixstars.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Fixstars様&#34; src=&#34;static/image/sponsors/Fixstars/fixstars-logo.png&#34; title=&#34;Fixstars様&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.pegasys-inc.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;pegasys様&#34; src=&#34;https://tmpgenc.pegasys-inc.com/images/pegasys_logo.png&#34; title=&#34;pegasys様&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://vaporoid.com/sys/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;vaporoid様&#34; src=&#34;static/image/sponsors/vaporoid/cpprefjp-400x150.png&#34; title=&#34;vaporoid様&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://mkohana.github.io/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;M.Kohana様&#34; src=&#34;static/image/sponsors/m_kohana/m_kohana.jpg&#34; title=&#34;M.Kohana様&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.techarts.co.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;有限会社テクニカルアーツ様&#34; src=&#34;static/image/sponsors/technical_arts/TechnicalArtsLogo3.png&#34; title=&#34;有限会社テクニカルアーツ様&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;li&gt;T.Kishu様&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;h3&gt;ブロンズスポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;img alt=&#34;Azaika様&#34; src=&#34;static/image/sponsors/Azaika/Azaika.jpg&#34; title=&#34;Azaika様&#34; width=&#34;256&#34; /&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;li&gt;イシハラユウヤ様&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://opencollective.com/meg_nakagami&#34; target=&#34;_blank&#34;&gt;Megumi Nakagami様&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/minachun/minachun&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;minachun / J.Minami様&#34; src=&#34;https://raw.githubusercontent.com/minachun/minachun/main/banner.png&#34; title=&#34;minachun / J.Minami様&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://gravatar.com/overthestardust&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;星くず彼方に&#34; src=&#34;static/image/sponsors/overthestardust/overthestardust.png&#34; title=&#34;星くず彼方に&#34; width=&#34;256&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/zonuexe&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;USAMI Kenta&#34; src=&#34;https://gravatar.com/userimage/33138763/7af48baae61cde116bd8d28a5158946e.jpeg?size=256&#34; title=&#34;USAMI Kenta&#34; width=&#34;256&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/soramimi&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;soramimi&#34; src=&#34;https://www.soramimi.jp/avater.jpg&#34; title=&#34;soramimi&#34; width=&#34;256&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;ul&gt;&lt;li&gt;Agate Pris様&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;img alt=&#34;unagi様&#34; src=&#34;https://www.unagiworks.net/blog/wp-content/uploads/2019/01/logo.gif&#34; title=&#34;unagi様&#34; /&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://x.com/HappyLuckyAkira&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Akira Kubo様&#34; src=&#34;static/image/sponsors/HappyLuckyAkira/HappyLuckyAkira.jpg&#34; title=&#34;Akira Kubo様&#34; width=&#34;256&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;スポンサーシップについては、以下のページを参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;連絡先が不明なスポンサー様は、ロゴの表示が現在できておりません。Open Collectiveの問い合わせフォームから、表示するロゴ画像とリンク先URLについてご連絡いただきたいです。&lt;/p&gt;
&lt;h2&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;本サイトは、サイトの改善のためにGoogleアナリティクスを使用しています。本サイトをご利用中のブラウザは、Googleに特定の情報を自動的に送信します。本サイトは、この分析のためにCookieを使用します。利用者は、本サイトを利用することで、この目的においてCookieを使用することを許可したものとみなします。&lt;/p&gt;
&lt;p&gt;Googleによるデータ使用の詳細は、以下のURLで確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/ja/policies/privacy/partners/&#34; target=&#34;_blank&#34;&gt;https://www.google.com/intl/ja/policies/privacy/partners/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのアイコン・ロゴ画像は、&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 (CC BY-NC-ND 4.0)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;高解像度画像データ： &lt;a href=&#34;https://github.com/cpprefjp/image/tree/master/cpprefjp/icon&#34; target=&#34;_blank&#34;&gt;cpprefjp/image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_istringstream -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_istringstream.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream.md b/reference/sstream/basic_istringstream.md
index 4b8565091..8aa37930c 100644
--- a/reference/sstream/basic_istringstream.md
+++ b/reference/sstream/basic_istringstream.md
@@ -25,20 +25,20 @@ namespace std {
 
 | 名前                                | 説明                                       | 対応バージョン |
 |-------------------------------------|--------------------------------------------|----------------|
-| `(constructor)`                     | コンストラクタ                             | |
-| `(destructor)`                      | デストラクタ                               | |
-| `operator=`                         | ムーブ代入                                 | C++11 |
-| `swap`                              | 値の交換                                   | C++11 |
-| `rdbuf`                             | ストリームバッファオブジェクトの設定・取得 | |
-| [`str`](basic_istringstream/str.md) | 文字列オブジェクトの設定・取得             | |
-| `view`                              | 文字列ビューオブジェクトの取得             | C++20 |
+| [`(constructor)`](basic_istringstream/op_constructor.md) | コンストラクタ                             | |
+| [`(destructor)`](basic_istringstream/op_destructor.md)  | デストラクタ                               | |
+| [`operator=`](basic_istringstream/op_assign.md)         | ムーブ代入                                 | C++11 |
+| [`swap`](basic_istringstream/swap.md)                   | 値の交換                                   | C++11 |
+| [`rdbuf`](basic_istringstream/rdbuf.md)                 | ストリームバッファオブジェクトの設定・取得 | |
+| [`str`](basic_istringstream/str.md)                     | 文字列オブジェクトの設定・取得             | |
+| [`view`](basic_istringstream/view.md)                   | 文字列ビューオブジェクトの取得             | C++20 |
 
 
 ## 非メンバ関数
 
 | 名前   | 説明                          | 対応バージョン |
 |--------|-------------------------------|----------------|
-| `swap` | 2つのオブジェクトを入れ替える | C++11 |
+| [`swap`](basic_istringstream/swap_free.md) | 2つのオブジェクトを入れ替える | C++11 |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream/op_assign.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_istringstream/op_assign.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream/op_assign.md b/reference/sstream/basic_istringstream/op_assign.md
new file mode 100644
index 000000000..d0c7dfb25
--- /dev/null
+++ b/reference/sstream/basic_istringstream/op_assign.md
@@ -0,0 +1,54 @@
+# operator=
+* sstream[meta header]
+* std[meta namespace]
+* basic_istringstream[meta class]
+* function[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+basic_istringstream&amp;amp; operator=(basic_istringstream&amp;amp;&amp;amp; rhs);           // (1) C++11
+basic_istringstream&amp;amp; operator=(const basic_istringstream&amp;amp;) = delete; // (2) C++11
+```
+
+## 概要
+ムーブ代入を行う。
+
+## 効果
+- (1) : `basic_istream&amp;lt;CharT, Traits&amp;gt;::operator=(std::move(rhs))`を呼び出し、`sb = std::move(rhs.sb)`を実行する。ここで`sb`は内部の`basic_stringbuf`オブジェクトである。
+
+## 戻り値
+`*this`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::istringstream ss1(&amp;#34;first&amp;#34;);
+  std::istringstream ss2;
+  
+  // ムーブ代入
+  ss2 = std::move(ss1);
+  
+  std::string s;
+  ss2 &amp;gt;&amp;gt; s;
+  std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): ??
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream/op_constructor.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_istringstream/op_constructor.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream/op_constructor.md b/reference/sstream/basic_istringstream/op_constructor.md
new file mode 100644
index 000000000..906de25e7
--- /dev/null
+++ b/reference/sstream/basic_istringstream/op_constructor.md
@@ -0,0 +1,97 @@
+# コンストラクタ
+* sstream[meta header]
+* std[meta namespace]
+* basic_istringstream[meta class]
+* function[meta id-type]
+
+```cpp
+basic_istringstream()
+  : basic_istringstream(ios_base::in) {}      // (1) C++11
+explicit basic_istringstream(
+  ios_base::openmode which);                  // (2) C++11
+explicit basic_istringstream(
+  ios_base::openmode which = ios_base::in);   // (1)+(2) C++03
+
+explicit basic_istringstream(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  ios_base::openmode which = ios_base::in);          // (2) C++03
+
+explicit basic_istringstream(
+  basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s,
+  ios_base::openmode which = ios_base::in);          // (3) C++20
+
+basic_istringstream(
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                               // (4) C++20
+
+explicit basic_istringstream(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  const Allocator&amp;amp; a)
+    : basic_istringstream(s, ios_base::in, a) {}     // (5) C++20
+
+explicit basic_istringstream(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                               // (6) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+explicit basic_istringstream(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  ios_base::openmode which = ios_base::in);          // (7) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+basic_istringstream(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  const Allocator&amp;amp; a)
+    : basic_istringstream(s, ios_base::in, a) {}     // (8) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+basic_istringstream(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                               // (9) C++20
+
+basic_istringstream(basic_istringstream&amp;amp;&amp;amp; rhs);      // (10) C++11
+```
+* ios_base[link /reference/ios/ios_base.md]
+* basic_string[link /reference/string/basic_string.md]
+
+## 概要
+`basic_istringstream`オブジェクトを構築する。
+
+## 効果
+- (1) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(ios_base::in)`で構築する
+- (2) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which | ios_base::in)`で構築する
+- (3) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(s, which | ios_base::in)`で構築する
+- (4) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(std::move(s), which | ios_base::in)`で構築する
+- (5) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which | ios_base::in, a)`で構築する
+- (6), (7), (8), (9), (10) : 各引数が対応する`basic_stringbuf`のコンストラクタに渡される
+- (11) : `rhs`から`basic_istringstream`オブジェクトをムーブ構築する
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main()
+{
+  // (1) デフォルト構築
+  std::istringstream ss1;
+  
+  // (3) 文字列を指定して構築
+  std::istringstream ss2(&amp;#34;initial text&amp;#34;);
+  
+  int value;
+  ss2 &amp;gt;&amp;gt; value;
+  std::cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+initial
+```
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream/op_destructor.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_istringstream/op_destructor.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream/op_destructor.md b/reference/sstream/basic_istringstream/op_destructor.md
new file mode 100644
index 000000000..cf64d0abb
--- /dev/null
+++ b/reference/sstream/basic_istringstream/op_destructor.md
@@ -0,0 +1,12 @@
+# デストラクタ
+* sstream[meta header]
+* std[meta namespace]
+* basic_istringstream[meta class]
+* function[meta id-type]
+
+```cpp
+virtual ~basic_istringstream();
+```
+
+## 概要
+`basic_istringstream`オブジェクトを破棄する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rdbuf -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream/rdbuf.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_istringstream/rdbuf.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream/rdbuf.md b/reference/sstream/basic_istringstream/rdbuf.md
new file mode 100644
index 000000000..36a2417e5
--- /dev/null
+++ b/reference/sstream/basic_istringstream/rdbuf.md
@@ -0,0 +1,39 @@
+# rdbuf
+* sstream[meta header]
+* std[meta namespace]
+* basic_istringstream[meta class]
+* function[meta id-type]
+
+```cpp
+basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;* rdbuf() const;
+```
+* basic_stringbuf[link /reference/sstream/basic_stringbuf.md]
+
+## 概要
+ストリームバッファオブジェクトを取得する。
+
+## 戻り値
+内部の`basic_stringbuf`オブジェクトへのポインタ。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main()
+{
+  std::istringstream ss(&amp;#34;test&amp;#34;);
+  
+  std::streambuf* buf = ss.rdbuf();
+  
+  std::cout &amp;lt;&amp;lt; static_cast&amp;lt;char&amp;gt;(buf-&amp;gt;sbumpc()) &amp;lt;&amp;lt; std::endl; // &amp;#39;t&amp;#39;
+  std::cout &amp;lt;&amp;lt; static_cast&amp;lt;char&amp;gt;(buf-&amp;gt;sbumpc()) &amp;lt;&amp;lt; std::endl; // &amp;#39;e&amp;#39;
+}
+```
+* sbumpc()[link /reference/streambuf/basic_streambuf/sbumpc.md]
+
+### 出力
+```
+t
+e
+```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream/str.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_istringstream/str.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream/str.md b/reference/sstream/basic_istringstream/str.md
index ef88b9951..fae012a55 100644
--- a/reference/sstream/basic_istringstream/str.md
+++ b/reference/sstream/basic_istringstream/str.md
@@ -7,11 +7,14 @@
 ```cpp
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() const;                // (1) C++03
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() const &amp;amp;;              // (1) C++20
+
 template &amp;lt;class SAlloc&amp;gt;
 basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt; str(const SAlloc&amp;amp; sa) const &amp;amp;; // (2) C++20
+
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() const &amp;amp;&amp;amp;;             // (3) C++20
 
-void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s);  // (4)
+void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s);  // (4) C++03
+
 template &amp;lt;class SAlloc&amp;gt;
 void str(const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s);     // (5) C++20
 void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
@@ -30,4 +33,8 @@ void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 - (6) : `rdbuf()-&amp;gt;str(std::move(s))` と等価
 
 ## 関連項目
-[basic_stringbuf::str](../basic_stringbuf/str.md)
+- [`basic_stringbuf::str`](../basic_stringbuf/str.md)
+
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream/swap.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_istringstream/swap.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream/swap.md b/reference/sstream/basic_istringstream/swap.md
new file mode 100644
index 000000000..3857dbaff
--- /dev/null
+++ b/reference/sstream/basic_istringstream/swap.md
@@ -0,0 +1,60 @@
+# swap
+* sstream[meta header]
+* std[meta namespace]
+* basic_istringstream[meta class]
+* function[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+void swap(basic_istringstream&amp;amp; rhs);                         // (1) C++11
+void swap(basic_istringstream&amp;amp; rhs) noexcept(/*see below*/); // (1) C++17
+```
+
+## 概要
+値を交換する。
+
+## 効果
+`basic_istream&amp;lt;CharT, Traits&amp;gt;::swap(rhs)`を呼び出し、`sb.swap(rhs.sb)`を実行する。ここで`sb`は内部の`basic_stringbuf`オブジェクトである。
+
+
+## 例外
+- C++17 : 実装が例外を投げない場合、この関数は`noexcept`が指定される。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::istringstream ss1(&amp;#34;first&amp;#34;);
+  std::istringstream ss2(&amp;#34;second&amp;#34;);
+  
+  ss1.swap(ss2);
+  
+  std::string s1, s2;
+  ss1 &amp;gt;&amp;gt; s1;
+  ss2 &amp;gt;&amp;gt; s2;
+  
+  std::cout &amp;lt;&amp;lt; s1 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; s2 &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+second
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream/swap_free.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_istringstream/swap_free.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream/swap_free.md b/reference/sstream/basic_istringstream/swap_free.md
new file mode 100644
index 000000000..eec17efd8
--- /dev/null
+++ b/reference/sstream/basic_istringstream/swap_free.md
@@ -0,0 +1,57 @@
+# swap (非メンバ関数)
+* sstream[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  void swap(basic_istringstream&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; x,
+            basic_istringstream&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y);
+}
+```
+
+## 概要
+2つの`basic_istringstream`オブジェクトを入れ替える。
+
+## 効果
+`x.swap(y)`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::istringstream ss1(&amp;#34;first&amp;#34;);
+  std::istringstream ss2(&amp;#34;second&amp;#34;);
+  
+  std::swap(ss1, ss2);
+  
+  std::string s1, s2;
+  ss1 &amp;gt;&amp;gt; s1;
+  ss2 &amp;gt;&amp;gt; s2;
+  
+  std::cout &amp;lt;&amp;lt; s1 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; s2 &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+second
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>view -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream/view.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_istringstream/view.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream/view.md b/reference/sstream/basic_istringstream/view.md
new file mode 100644
index 000000000..d5ffef3e5
--- /dev/null
+++ b/reference/sstream/basic_istringstream/view.md
@@ -0,0 +1,51 @@
+# view
+* sstream[meta header]
+* std[meta namespace]
+* basic_istringstream[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+basic_string_view&amp;lt;CharT, Traits&amp;gt; view() const noexcept;
+```
+* basic_string_view[link /reference/string_view/basic_string_view.md]
+
+## 概要
+文字列ビューオブジェクトの取得を行う。
+
+## 戻り値
+`rdbuf()-&amp;gt;view()`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  std::istringstream ss(&amp;#34;Hello World&amp;#34;);
+  
+  std::string_view sv = ss.view();
+  
+  std::cout &amp;lt;&amp;lt; sv.substr(0, 5) &amp;lt;&amp;lt; std::endl;  // &amp;#34;Hello&amp;#34;
+}
+```
+* substr[link /reference/string_view/basic_string_view/substr.md]
+
+### 出力
+```
+Hello
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 12 [mark verified]
+- [GCC](/implementation.md#gcc): 12 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_ostringstream -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_ostringstream.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream.md b/reference/sstream/basic_ostringstream.md
index e6f90336c..3d5aed8ed 100644
--- a/reference/sstream/basic_ostringstream.md
+++ b/reference/sstream/basic_ostringstream.md
@@ -25,20 +25,20 @@ namespace std {
 
 | 名前                                | 説明                                       | 対応バージョン |
 |-------------------------------------|--------------------------------------------|----------------|
-| `(constructor)`                     | コンストラクタ                             | |
-| `(destructor)`                      | デストラクタ                               | |
-| `operator=`                         | ムーブ代入                                 | C++11 |
-| `swap`                              | 値の交換                                   | C++11 |
-| `rdbuf`                             | ストリームバッファオブジェクトの設定・取得 | |
-| [`str`](basic_ostringstream/str.md) | 文字列オブジェクトの設定・取得             | |
-| `view`                              | 文字列ビューオブジェクトの取得             | C++20 |
+| [`(constructor)`](basic_ostringstream/op_constructor.md) | コンストラクタ                             | |
+| [`(destructor)`](basic_ostringstream/op_destructor.md)  | デストラクタ                               | |
+| [`operator=`](basic_ostringstream/op_assign.md)         | ムーブ代入                                 | C++11 |
+| [`swap`](basic_ostringstream/swap.md)                   | 値の交換                                   | C++11 |
+| [`rdbuf`](basic_ostringstream/rdbuf.md)                 | ストリームバッファオブジェクトの設定・取得 | |
+| [`str`](basic_ostringstream/str.md)                     | 文字列オブジェクトの設定・取得             | |
+| [`view`](basic_ostringstream/view.md)                   | 文字列ビューオブジェクトの取得             | C++20 |
 
 
 ## 非メンバ関数
 
 | 名前   | 説明                          | 対応バージョン |
 |--------|-------------------------------|----------------|
-| `swap` | 2つのオブジェクトを入れ替える | C++11 |
+| [`swap`](basic_ostringstream/swap_free.md) | 2つのオブジェクトを入れ替える | C++11 |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream/op_assign.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_ostringstream/op_assign.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream/op_assign.md b/reference/sstream/basic_ostringstream/op_assign.md
new file mode 100644
index 000000000..52fd35a1c
--- /dev/null
+++ b/reference/sstream/basic_ostringstream/op_assign.md
@@ -0,0 +1,56 @@
+# operator=
+* sstream[meta header]
+* std[meta namespace]
+* basic_ostringstream[meta class]
+* function[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+basic_ostringstream&amp;amp; operator=(basic_ostringstream&amp;amp;&amp;amp; rhs);           // (1) C++11
+basic_ostringstream&amp;amp; operator=(const basic_ostringstream&amp;amp;) = delete; // (2) C++11
+```
+
+## 概要
+ムーブ代入を行う。
+
+## 効果
+- (1) : `basic_ostream&amp;lt;CharT, Traits&amp;gt;::operator=(std::move(rhs))`を呼び出し、`sb = std::move(rhs.sb)`を実行する。ここで`sb`は内部の`basic_stringbuf`オブジェクトである。
+
+## 戻り値
+`*this`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::ostringstream ss1;
+  std::ostringstream ss2;
+  
+  ss1 &amp;lt;&amp;lt; &amp;#34;first&amp;#34;;
+  
+  // ムーブ代入
+  ss2 = std::move(ss1);
+  
+  std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* str()[link str.md]
+
+### 出力
+```
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified], 3.1 [mark verified], 3.2 [mark verified], 3.3 [mark verified], 3.4 [mark verified], 3.5.0 [mark verified], 3.6.0 [mark verified], 3.7.0 [mark verified], 3.8.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified], 5.2.0 [mark verified], 6.0.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream/op_constructor.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_ostringstream/op_constructor.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream/op_constructor.md b/reference/sstream/basic_ostringstream/op_constructor.md
new file mode 100644
index 000000000..075af3c23
--- /dev/null
+++ b/reference/sstream/basic_ostringstream/op_constructor.md
@@ -0,0 +1,99 @@
+# コンストラクタ
+* sstream[meta header]
+* std[meta namespace]
+* basic_ostringstream[meta class]
+* function[meta id-type]
+
+```cpp
+basic_ostringstream()
+  : basic_ostringstream(ios_base::out) {}     // (1) C++11
+explicit basic_ostringstream(
+  ios_base::openmode which);                  // (2) C++11
+explicit basic_ostringstream(
+  ios_base::openmode which = ios_base::out);  // (1)+(2) C++03
+
+explicit basic_ostringstream(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  ios_base::openmode which = ios_base::out);         // (2) C++03
+
+explicit basic_ostringstream(
+  basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s,
+  ios_base::openmode which = ios_base::out);         // (3) C++20
+
+basic_ostringstream(
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                               // (4) C++20
+
+explicit basic_ostringstream(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  const Allocator&amp;amp; a)
+    : basic_ostringstream(s, ios_base::out, a) {}    // (5) C++20
+
+explicit basic_ostringstream(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                               // (6) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+explicit basic_ostringstream(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  ios_base::openmode which = ios_base::out);         // (7) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+basic_ostringstream(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  const Allocator&amp;amp; a)
+    : basic_ostringstream(s, ios_base::out, a) {}    // (8) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+basic_ostringstream(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                               // (9) C++20
+
+basic_ostringstream(basic_ostringstream&amp;amp;&amp;amp; rhs);      // (10) C++11
+```
+* ios_base[link /reference/ios/ios_base.md]
+* basic_string[link /reference/string/basic_string.md]
+
+## 概要
+`basic_ostringstream`オブジェクトを構築する。
+
+## 効果
+- (1) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(ios_base::out)`で構築する
+- (2) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which | ios_base::out)`で構築する
+- (3) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(s, which | ios_base::out)`で構築する
+- (4) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(std::move(s), which | ios_base::out)`で構築する
+- (5) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which | ios_base::out, a)`で構築する
+- (6), (7), (8), (9), (10) : 各引数が対応する`basic_stringbuf`のコンストラクタに渡される
+- (11) : `rhs`から`basic_ostringstream`オブジェクトをムーブ構築する
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main()
+{
+  // (1) デフォルト構築
+  std::ostringstream ss1;
+  ss1 &amp;lt;&amp;lt; &amp;#34;default&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss1.str() &amp;lt;&amp;lt; std::endl;
+  
+  // (3) 文字列を指定して構築
+  std::ostringstream ss2(&amp;#34;initial &amp;#34;);
+  ss2 &amp;lt;&amp;lt; &amp;#34;text&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* str()[link str.md]
+
+### 出力
+```
+default
+initial text
+```
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream/op_destructor.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_ostringstream/op_destructor.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream/op_destructor.md b/reference/sstream/basic_ostringstream/op_destructor.md
new file mode 100644
index 000000000..7fccec10f
--- /dev/null
+++ b/reference/sstream/basic_ostringstream/op_destructor.md
@@ -0,0 +1,12 @@
+# デストラクタ
+* sstream[meta header]
+* std[meta namespace]
+* basic_ostringstream[meta class]
+* function[meta id-type]
+
+```cpp
+virtual ~basic_ostringstream();
+```
+
+## 概要
+`basic_ostringstream`オブジェクトを破棄する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rdbuf -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream/rdbuf.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_ostringstream/rdbuf.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream/rdbuf.md b/reference/sstream/basic_ostringstream/rdbuf.md
new file mode 100644
index 000000000..cfa07d54f
--- /dev/null
+++ b/reference/sstream/basic_ostringstream/rdbuf.md
@@ -0,0 +1,43 @@
+# rdbuf
+* sstream[meta header]
+* std[meta namespace]
+* basic_ostringstream[meta class]
+* function[meta id-type]
+
+```cpp
+basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;* rdbuf() const;
+```
+* basic_stringbuf[link /reference/sstream/basic_stringbuf.md]
+
+## 概要
+ストリームバッファオブジェクトを取得する。
+
+## 戻り値
+内部の`basic_stringbuf`オブジェクトへのポインタ。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main()
+{
+  std::ostringstream ss;
+  
+  std::streambuf* buf = ss.rdbuf();
+  
+  buf-&amp;gt;sputc(&amp;#39;t&amp;#39;);
+  buf-&amp;gt;sputc(&amp;#39;e&amp;#39;);
+  buf-&amp;gt;sputc(&amp;#39;s&amp;#39;);
+  buf-&amp;gt;sputc(&amp;#39;t&amp;#39;);
+  
+  std::cout &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* sputc[link /reference/streambuf/basic_streambuf/sputc.md]
+* str()[link str.md]
+
+### 出力
+```
+test
+```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream/str.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_ostringstream/str.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream/str.md b/reference/sstream/basic_ostringstream/str.md
index f0c1eca18..0412ec540 100644
--- a/reference/sstream/basic_ostringstream/str.md
+++ b/reference/sstream/basic_ostringstream/str.md
@@ -7,13 +7,17 @@
 ```cpp
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() const;                // (1) C++03
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() const &amp;amp;;              // (1) C++20
+
 template &amp;lt;class SAlloc&amp;gt;
 basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt; str(const SAlloc&amp;amp; sa) const;   // (2) C++20
+
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() &amp;amp;&amp;amp;;                   // (3) C++20
 
-void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s);  // (4)
+void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s);  // (4) C++03
+
 template &amp;lt;class SAlloc&amp;gt;
 void str(const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s);     // (5) C++20
+
 void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 ```
 * basic_string[link /reference/string/basic_string.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream/swap.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_ostringstream/swap.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream/swap.md b/reference/sstream/basic_ostringstream/swap.md
new file mode 100644
index 000000000..cb7d94d5e
--- /dev/null
+++ b/reference/sstream/basic_ostringstream/swap.md
@@ -0,0 +1,60 @@
+# swap
+* sstream[meta header]
+* std[meta namespace]
+* basic_ostringstream[meta class]
+* function[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+void swap(basic_ostringstream&amp;amp; rhs);                         // (1) C++11
+void swap(basic_ostringstream&amp;amp; rhs) noexcept(/*see below*/); // (1) C++17
+```
+
+## 概要
+値を交換する。
+
+## 効果
+`basic_ostream&amp;lt;CharT, Traits&amp;gt;::swap(rhs)`を呼び出し、`sb.swap(rhs.sb)`を実行する。ここで`sb`は内部の`basic_stringbuf`オブジェクトである。
+
+
+## 例外
+- C++17 : 実装が例外を投げない場合、この関数は`noexcept`が指定される。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::ostringstream ss1;
+  std::ostringstream ss2;
+  
+  ss1 &amp;lt;&amp;lt; &amp;#34;first&amp;#34;;
+  ss2 &amp;lt;&amp;lt; &amp;#34;second&amp;#34;;
+  
+  ss1.swap(ss2);
+  
+  std::cout &amp;lt;&amp;lt; ss1.str() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* str()[link str.md]
+
+### 出力
+```
+second
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream/swap_free.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_ostringstream/swap_free.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream/swap_free.md b/reference/sstream/basic_ostringstream/swap_free.md
new file mode 100644
index 000000000..3d9fe4c1e
--- /dev/null
+++ b/reference/sstream/basic_ostringstream/swap_free.md
@@ -0,0 +1,57 @@
+# swap (非メンバ関数)
+* sstream[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  void swap(basic_ostringstream&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; x,
+            basic_ostringstream&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y);
+}
+```
+
+## 概要
+2つの`basic_ostringstream`オブジェクトを入れ替える。
+
+## 効果
+`x.swap(y)`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::ostringstream ss1;
+  std::ostringstream ss2;
+  
+  ss1 &amp;lt;&amp;lt; &amp;#34;first&amp;#34;;
+  ss2 &amp;lt;&amp;lt; &amp;#34;second&amp;#34;;
+  
+  std::swap(ss1, ss2);
+  
+  std::cout &amp;lt;&amp;lt; ss1.str() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* str()[link str.md]
+
+### 出力
+```
+second
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>view -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream/view.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_ostringstream/view.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream/view.md b/reference/sstream/basic_ostringstream/view.md
new file mode 100644
index 000000000..f956af85e
--- /dev/null
+++ b/reference/sstream/basic_ostringstream/view.md
@@ -0,0 +1,52 @@
+# view
+* sstream[meta header]
+* std[meta namespace]
+* basic_ostringstream[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+basic_string_view&amp;lt;CharT, Traits&amp;gt; view() const noexcept;
+```
+* basic_string_view[link /reference/string_view/basic_string_view.md]
+
+## 概要
+文字列ビューオブジェクトの取得を行う。
+
+## 戻り値
+`rdbuf()-&amp;gt;view()`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  std::ostringstream ss;
+  ss &amp;lt;&amp;lt; &amp;#34;Hello World&amp;#34;;
+  
+  std::string_view sv = ss.view();
+  
+  std::cout &amp;lt;&amp;lt; sv.substr(0, 5) &amp;lt;&amp;lt; std::endl;  // &amp;#34;Hello&amp;#34;
+}
+```
+* substr[link /reference/string_view/basic_string_view/substr.md]
+
+### 出力
+```
+Hello
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 12 [mark verified]
+- [GCC](/implementation.md#gcc): 12 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stringbuf -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringbuf.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf.md b/reference/sstream/basic_stringbuf.md
index eeb830933..76ac70b0e 100644
--- a/reference/sstream/basic_stringbuf.md
+++ b/reference/sstream/basic_stringbuf.md
@@ -25,20 +25,20 @@ namespace std {
 
 | 名前                            | 説明                                       | 対応バージョン |
 |---------------------------------|--------------------------------------------|----------------|
-| `(constructor)`                 | コンストラクタ                             | |
-| `(destructor)`                  | デストラクタ                               | |
-| `operator=`                     | ムーブ代入                                 | C++11 |
-| `swap`                          | 値の交換                                   | C++11 |
-| [`str`](basic_stringbuf/str.md) | 文字列オブジェクトの設定・取得             | |
-| `view`                          | 文字列ビューオブジェクトの取得             | C++20 |
-| `get_allocator`                 | アロケータの取得                           | C++20 |
+| [`(constructor)`](basic_stringbuf/op_constructor.md) | コンストラクタ                             | |
+| [`(destructor)`](basic_stringbuf/op_destructor.md)  | デストラクタ                               | |
+| [`operator=`](basic_stringbuf/op_assign.md)         | ムーブ代入                                 | C++11 |
+| [`swap`](basic_stringbuf/swap.md)                   | 値の交換                                   | C++11 |
+| [`str`](basic_stringbuf/str.md)                     | 文字列オブジェクトの設定・取得             | |
+| [`view`](basic_stringbuf/view.md)                   | 文字列ビューオブジェクトの取得             | C++20 |
+| [`get_allocator`](basic_stringbuf/get_allocator.md) | アロケータの取得                           | C++20 |
 
 
 ## 非メンバ関数
 
 | 名前   | 説明                          | 対応バージョン |
 |--------|-------------------------------|----------------|
-| `swap` | 2つのオブジェクトを入れ替える | C++11 |
+| [`swap`](basic_stringbuf/swap_free.md) | 2つのオブジェクトを入れ替える | C++11 |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_allocator -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/get_allocator.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringbuf/get_allocator.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/get_allocator.md b/reference/sstream/basic_stringbuf/get_allocator.md
new file mode 100644
index 000000000..2c36d251a
--- /dev/null
+++ b/reference/sstream/basic_stringbuf/get_allocator.md
@@ -0,0 +1,49 @@
+# get_allocator
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringbuf[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+allocator_type get_allocator() const noexcept;
+```
+
+## 概要
+アロケータを取得する。
+
+## 戻り値
+内部の文字列バッファが保持しているアロケータのコピー。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main()
+{
+  std::stringbuf buf;
+  
+  auto alloc = buf.get_allocator();
+  
+  // アロケータの型名を出力（処理系依存）
+  std::cout &amp;lt;&amp;lt; typeid(alloc).name() &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力例
+```
+std::allocator&amp;lt;char&amp;gt;
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 12 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/op_assign.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringbuf/op_assign.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/op_assign.md b/reference/sstream/basic_stringbuf/op_assign.md
new file mode 100644
index 000000000..9abfaf684
--- /dev/null
+++ b/reference/sstream/basic_stringbuf/op_assign.md
@@ -0,0 +1,54 @@
+# operator=
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringbuf[meta class]
+* function[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+basic_stringbuf&amp;amp; operator=(basic_stringbuf&amp;amp;&amp;amp; rhs);           // (1) C++11
+basic_stringbuf&amp;amp; operator=(const basic_stringbuf&amp;amp;) = delete; // (2) C++11
+```
+
+## 概要
+ムーブ代入を行う。
+
+## 効果
+- (1) : `basic_streambuf&amp;lt;CharT, Traits&amp;gt;::operator=(std::move(rhs))`を呼び出した後、`mode = rhs.mode`、`buf = std::move(rhs.buf)`を実行する。ここで`mode`は内部のオープンモード、`buf`は内部の文字列バッファである。
+
+## 戻り値
+`*this`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::stringbuf buf1(&amp;#34;first&amp;#34;);
+  std::stringbuf buf2;
+  
+  // ムーブ代入
+  buf2 = std::move(buf1);
+  
+  std::cout &amp;lt;&amp;lt; buf2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* str()[link str.md]
+
+### 出力
+```
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified], 3.1 [mark verified], 3.2 [mark verified], 3.3 [mark verified], 3.4 [mark verified], 3.5.0 [mark verified], 3.6.0 [mark verified], 3.7.0 [mark verified], 3.8.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified], 5.2.0 [mark verified], 6.0.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/op_constructor.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringbuf/op_constructor.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/op_constructor.md b/reference/sstream/basic_stringbuf/op_constructor.md
new file mode 100644
index 000000000..ed4659c25
--- /dev/null
+++ b/reference/sstream/basic_stringbuf/op_constructor.md
@@ -0,0 +1,105 @@
+# コンストラクタ
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringbuf[meta class]
+* function[meta id-type]
+
+```cpp
+basic_stringbuf()
+  : basic_stringbuf(ios_base::in | ios_base::out) {}        // (1) C++11
+explicit basic_stringbuf(
+  ios_base::openmode which);                                // (2) C++11
+explicit basic_stringbuf(
+  ios_base::openmode which = ios_base::in | ios_base::out); // (1)+(2) C++03
+
+explicit basic_stringbuf(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  ios_base::openmode which = ios_base::in | ios_base::out);  // (2) C++03
+
+explicit basic_stringbuf(
+  basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s,
+  ios_base::openmode which = ios_base::in | ios_base::out);   // (3) C++20
+
+basic_stringbuf(
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                                        // (4) C++20
+
+explicit basic_stringbuf(const Allocator&amp;amp; a)
+  : basic_stringbuf(ios_base::in | ios_base::out, a) {}       // (5) C++20
+
+explicit basic_stringbuf(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  const Allocator&amp;amp; a)
+    : basic_stringbuf(s, ios_base::in | ios_base::out, a) {}  // (6) C++20
+
+explicit basic_stringbuf(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                                        // (7) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+explicit basic_stringbuf(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  ios_base::openmode which = ios_base::in | ios_base::out);   // (8) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+basic_stringbuf(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  const Allocator&amp;amp; a)
+    : basic_stringbuf(s, ios_base::in | ios_base::out, a) {}  // (9) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+basic_stringbuf(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                                        // (10) C++20
+
+basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs);                       // (11) C++11
+basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs, const Allocator&amp;amp; a);   // (12) C++20
+```
+* ios_base[link /reference/ios/ios_base.md]
+* basic_string[link /reference/string/basic_string.md]
+
+## 概要
+`basic_stringbuf`オブジェクトを構築する。
+
+## 効果
+- (1) : 内部の文字列バッファを空にし、モードは`ios_base::in | ios_base::out`に設定する
+- (2) : 内部の文字列バッファを空にし、モードは`which`に設定する
+- (3) : 内部の文字列バッファを`s`のコピー、モードは`which`に設定する
+- (4) : 内部の文字列バッファを`std::move(s)`で、モードは`which`に設定する
+- (5) : 内部の文字列バッファを空にし、モードは`which`、アロケータは`a`に設定する
+- (6), (7), (8), (9), (10), (11) : 各引数は内部状態の初期化に使用される
+- (12) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築する
+- (13) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築し、アロケータは`a`を使用する
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main()
+{
+  // (1) デフォルト構築
+  std::stringbuf buf1;
+  buf1.sputc(&amp;#39;a&amp;#39;);
+  std::cout &amp;lt;&amp;lt; buf1.str() &amp;lt;&amp;lt; std::endl;
+  
+  // (3) 文字列を指定して構築
+  std::stringbuf buf2(&amp;#34;initial&amp;#34;);
+  buf2.sputc(&amp;#39;!&amp;#39;);
+  std::cout &amp;lt;&amp;lt; buf2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* sputc[link /reference/streambuf/basic_streambuf/sputc.md]
+* str()[link str.md]
+
+### 出力
+```
+a
+initial!
+```
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/op_destructor.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringbuf/op_destructor.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/op_destructor.md b/reference/sstream/basic_stringbuf/op_destructor.md
new file mode 100644
index 000000000..38998425a
--- /dev/null
+++ b/reference/sstream/basic_stringbuf/op_destructor.md
@@ -0,0 +1,12 @@
+# デストラクタ
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringbuf[meta class]
+* function[meta id-type]
+
+```cpp
+virtual ~basic_stringbuf();
+```
+
+## 概要
+`basic_stringbuf`オブジェクトを破棄する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/str.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringbuf/str.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/str.md b/reference/sstream/basic_stringbuf/str.md
index 1d4b691af..4f7b91704 100644
--- a/reference/sstream/basic_stringbuf/str.md
+++ b/reference/sstream/basic_stringbuf/str.md
@@ -7,13 +7,17 @@
 ```cpp
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() const;                // (1) C++03
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() const &amp;amp;;              // (1) C++20
+
 template &amp;lt;class SAlloc&amp;gt;
 basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt; str(const SAlloc&amp;amp; sa) const;   // (2) C++20
+
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() &amp;amp;&amp;amp;;                   // (3) C++20
 
-void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s);  // (4)
+void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s);  // (4) C++03
+
 template &amp;lt;class SAlloc&amp;gt;
 void str(const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s);     // (5) C++20
+
 void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 ```
 * basic_string[link /reference/string/basic_string.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/swap.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringbuf/swap.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/swap.md b/reference/sstream/basic_stringbuf/swap.md
new file mode 100644
index 000000000..89f1a7c5f
--- /dev/null
+++ b/reference/sstream/basic_stringbuf/swap.md
@@ -0,0 +1,55 @@
+# swap
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringbuf[meta class]
+* function[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+void swap(basic_stringbuf&amp;amp; rhs);                         // (1) C++11
+void swap(basic_stringbuf&amp;amp; rhs) noexcept(/*see below*/); // (1) C++17
+```
+
+## 概要
+値を交換する。
+
+## 効果
+`basic_streambuf&amp;lt;CharT, Traits&amp;gt;::swap(rhs)`を呼び出し、`mode`と内部の文字列バッファを`rhs`と交換する。
+
+## 例外
+- C++17 : 実装が例外を投げない場合、この関数は`noexcept`が指定される。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::stringbuf buf1(&amp;#34;first&amp;#34;);
+  std::stringbuf buf2(&amp;#34;second&amp;#34;);
+  
+  buf1.swap(buf2);
+  
+  std::cout &amp;lt;&amp;lt; buf1.str() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; buf2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* str()[link str.md]
+
+### 出力
+```
+second
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/swap_free.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringbuf/swap_free.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/swap_free.md b/reference/sstream/basic_stringbuf/swap_free.md
new file mode 100644
index 000000000..6cf73ef46
--- /dev/null
+++ b/reference/sstream/basic_stringbuf/swap_free.md
@@ -0,0 +1,54 @@
+# swap (非メンバ関数)
+* sstream[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  void swap(basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; x,
+            basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y);
+}
+```
+
+## 概要
+2つの`basic_stringbuf`オブジェクトを入れ替える。
+
+## 効果
+`x.swap(y)`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::stringbuf buf1(&amp;#34;first&amp;#34;);
+  std::stringbuf buf2(&amp;#34;second&amp;#34;);
+  
+  std::swap(buf1, buf2);
+  
+  std::cout &amp;lt;&amp;lt; buf1.str() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; buf2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* str()[link str.md]
+
+### 出力
+```
+second
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>view -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/view.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringbuf/view.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/view.md b/reference/sstream/basic_stringbuf/view.md
new file mode 100644
index 000000000..521657fea
--- /dev/null
+++ b/reference/sstream/basic_stringbuf/view.md
@@ -0,0 +1,52 @@
+# view
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringbuf[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+basic_string_view&amp;lt;CharT, Traits&amp;gt; view() const noexcept;
+```
+* basic_string_view[link /reference/string_view/basic_string_view.md]
+
+## 概要
+文字列ビューオブジェクトの取得を行う。
+
+## 戻り値
+バッファが初期化されている場合、[`gptr()`](/reference/streambuf/basic_streambuf/gptr.md)と[`egptr()`](/reference/streambuf/basic_streambuf/egptr.md)の間の文字列を指す`basic_string_view`オブジェクトを返す。  
+それ以外の場合、[`pbase()`](/reference/streambuf/basic_streambuf/pbase.md)と[`epptr()`](/reference/streambuf/basic_streambuf/pptr.md)の間の文字列を指す`basic_string_view`オブジェクトを返す。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  std::stringbuf buf(&amp;#34;Hello World&amp;#34;);
+  
+  std::string_view sv = buf.view();
+  
+  std::cout &amp;lt;&amp;lt; sv.substr(0, 5) &amp;lt;&amp;lt; std::endl;  // &amp;#34;Hello&amp;#34;
+}
+```
+* substr[link /reference/string_view/basic_string_view/substr.md]
+
+### 出力
+```
+Hello
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 12 [mark verified]
+- [GCC](/implementation.md#gcc): 12 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stringstream -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringstream.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream.md b/reference/sstream/basic_stringstream.md
index 71337c146..b10e7a68e 100644
--- a/reference/sstream/basic_stringstream.md
+++ b/reference/sstream/basic_stringstream.md
@@ -25,20 +25,20 @@ namespace std {
 
 | 名前                                | 説明                                       | 対応バージョン |
 |-------------------------------------|--------------------------------------------|----------------|
-| `(constructor)`                     | コンストラクタ                             | |
-| `(destructor)`                      | デストラクタ                               | |
-| `operator=`                         | ムーブ代入                                 | C++11 |
-| `swap`                              | 値の交換                                   | C++11 |
-| `rdbuf`                             | ストリームバッファオブジェクトの設定・取得 | |
-| [`str`](basic_stringstream/str.md)  | 文字列オブジェクトの設定・取得             | |
-| `view`                              | 文字列ビューオブジェクトの取得             | C++20 |
+| [`(constructor)`](basic_stringstream/op_constructor.md) | コンストラクタ                             | |
+| [`(destructor)`](basic_stringstream/op_destructor.md)  | デストラクタ                               | |
+| [`operator=`](basic_stringstream/op_assign.md)         | ムーブ代入                                 | C++11 |
+| [`swap`](basic_stringstream/swap.md)                   | 値の交換                                   | C++11 |
+| [`rdbuf`](basic_stringstream/rdbuf.md)                 | ストリームバッファオブジェクトの設定・取得 | |
+| [`str`](basic_stringstream/str.md)                     | 文字列オブジェクトの設定・取得             | |
+| [`view`](basic_stringstream/view.md)                   | 文字列ビューオブジェクトの取得             | C++20 |
 
 
 ## 非メンバ関数
 
 | 名前   | 説明                          | 対応バージョン |
 |--------|-------------------------------|----------------|
-| `swap` | 2つのオブジェクトを入れ替える | C++11 |
+| [`swap`](basic_stringstream/swap_free.md) | 2つのオブジェクトを入れ替える | C++11 |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/op_assign.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringstream/op_assign.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/op_assign.md b/reference/sstream/basic_stringstream/op_assign.md
new file mode 100644
index 000000000..07460e746
--- /dev/null
+++ b/reference/sstream/basic_stringstream/op_assign.md
@@ -0,0 +1,54 @@
+# operator=
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringstream[meta class]
+* function[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+basic_stringstream&amp;amp; operator=(basic_stringstream&amp;amp;&amp;amp; rhs);           // (1) C++11
+basic_stringstream&amp;amp; operator=(const basic_stringstream&amp;amp;) = delete; // (2) C++11
+```
+
+## 概要
+ムーブ代入を行う。
+
+## 効果
+- (1) : `basic_iostream&amp;lt;CharT, Traits&amp;gt;::operator=(std::move(rhs))`を呼び出し、`sb = std::move(rhs.sb)`を実行する。ここで`sb`は内部の`basic_stringbuf`オブジェクトである。
+
+## 戻り値
+`*this`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::stringstream ss1(&amp;#34;first&amp;#34;);
+  std::stringstream ss2;
+  
+  // ムーブ代入
+  ss2 = std::move(ss1);
+  
+  std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* str()[link str.md]
+
+### 出力
+```
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified], 3.1 [mark verified], 3.2 [mark verified], 3.3 [mark verified], 3.4 [mark verified], 3.5.0 [mark verified], 3.6.0 [mark verified], 3.7.0 [mark verified], 3.8.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified], 5.2.0 [mark verified], 6.0.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/op_constructor.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringstream/op_constructor.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/op_constructor.md b/reference/sstream/basic_stringstream/op_constructor.md
new file mode 100644
index 000000000..6bf358aca
--- /dev/null
+++ b/reference/sstream/basic_stringstream/op_constructor.md
@@ -0,0 +1,99 @@
+# コンストラクタ
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringstream[meta class]
+* function[meta id-type]
+
+```cpp
+basic_stringstream()
+  : basic_stringstream(ios_base::in | ios_base::out) {}     // (1) C++11
+explicit basic_stringstream(
+  ios_base::openmode which);                                // (1) C++11
+explicit basic_stringstream(
+  ios_base::openmode which = ios_base::in | ios_base::out); // (1)+(2) C++03
+
+explicit basic_stringstream(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  ios_base::openmode which = ios_base::in | ios_base::out); // (2) C++03
+
+explicit basic_stringstream(
+  basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s,
+  ios_base::openmode which = ios_base::in | ios_base::out);       // (3) C++20
+
+basic_stringstream(ios_base::openmode which, const Allocator&amp;amp; a); // (4) C++20
+
+explicit basic_stringstream(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  const Allocator&amp;amp; a)
+    : basic_stringstream(s, ios_base::in | ios_base::out, a) {}   // (5) C++20
+
+explicit basic_stringstream(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                                            // (6) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+explicit basic_stringstream(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  ios_base::openmode which = ios_base::in | ios_base::out);       // (7) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+basic_stringstream(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  const Allocator&amp;amp; a)
+    : basic_stringstream(s, ios_base::in | ios_base::out, a) {}   // (8) C++20
+
+template&amp;lt;class SAlloc&amp;gt;
+basic_stringstream(
+  const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                                            // (9) C++20
+
+basic_stringstream(basic_stringstream&amp;amp;&amp;amp; rhs);                     // (10) C++11
+```
+* ios_base[link /reference/ios/ios_base.md]
+* basic_string[link /reference/string/basic_string.md]
+
+## 概要
+`basic_stringstream`オブジェクトを構築する。
+
+## 効果
+- (1) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(ios_base::in | ios_base::out)`で構築する
+- (2) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which)`で構築する
+- (3) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(s, which)`で構築する
+- (4) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(std::move(s), which)`で構築する
+- (5) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which, a)`で構築する
+- (6), (7), (8), (9), (10) : 各引数は対応する`basic_stringbuf`のコンストラクタに渡される
+- (11) : `rhs`から`basic_stringstream`オブジェクトをムーブ構築する
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main()
+{
+  // (1) デフォルト構築
+  std::stringstream ss1;
+  ss1 &amp;lt;&amp;lt; &amp;#34;hello&amp;#34;;
+  std::string s;
+  ss1 &amp;gt;&amp;gt; s;
+  std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
+  
+  // (3) 文字列を指定して構築
+  std::stringstream ss2(&amp;#34;initial value&amp;#34;);
+  ss2 &amp;lt;&amp;lt; &amp;#34; added&amp;#34;;
+  std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* str()[link str.md]
+
+### 出力
+```
+hello
+initial value added
+```
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/op_destructor.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringstream/op_destructor.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/op_destructor.md b/reference/sstream/basic_stringstream/op_destructor.md
new file mode 100644
index 000000000..63865e4a9
--- /dev/null
+++ b/reference/sstream/basic_stringstream/op_destructor.md
@@ -0,0 +1,12 @@
+# デストラクタ
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringstream[meta class]
+* function[meta id-type]
+
+```cpp
+virtual ~basic_stringstream();
+```
+
+## 概要
+`basic_stringstream`オブジェクトを破棄する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rdbuf -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/rdbuf.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringstream/rdbuf.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/rdbuf.md b/reference/sstream/basic_stringstream/rdbuf.md
new file mode 100644
index 000000000..c79760227
--- /dev/null
+++ b/reference/sstream/basic_stringstream/rdbuf.md
@@ -0,0 +1,46 @@
+# rdbuf
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringstream[meta class]
+* function[meta id-type]
+
+```cpp
+basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;* rdbuf() const;
+```
+* basic_stringbuf[link /reference/sstream/basic_stringbuf.md]
+
+## 概要
+ストリームバッファオブジェクトを取得する。
+
+## 戻り値
+内部の`basic_stringbuf`オブジェクトへのポインタ。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main()
+{
+  std::stringstream ss(&amp;#34;test&amp;#34;);
+  
+  std::streambuf* buf = ss.rdbuf();
+  
+  // バッファから文字を読み取り
+  std::cout &amp;lt;&amp;lt; static_cast&amp;lt;char&amp;gt;(buf-&amp;gt;sbumpc()) &amp;lt;&amp;lt; std::endl; // &amp;#39;t&amp;#39;
+  
+  // バッファに文字を書き込み
+  buf-&amp;gt;sputc(&amp;#39;!&amp;#39;);
+  
+  std::cout &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* sbumpc()[link /reference/streambuf/basic_streambuf/sbumpc.md]
+* sputc[link /reference/streambuf/basic_streambuf/sputc.md]
+* str()[link str.md]
+
+### 出力
+```
+t
+est!
+```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/str.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringstream/str.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/str.md b/reference/sstream/basic_stringstream/str.md
index d76900b4f..72e0f5b0f 100644
--- a/reference/sstream/basic_stringstream/str.md
+++ b/reference/sstream/basic_stringstream/str.md
@@ -7,13 +7,17 @@
 ```cpp
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() const;                // (1) C++03
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() const &amp;amp;;              // (1) C++20
+
 template &amp;lt;class SAlloc&amp;gt;
 basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt; str(const SAlloc&amp;amp; sa) const &amp;amp;; // (2) C++20
+
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; str() const &amp;amp;&amp;amp;;             // (3) C++20
 
-void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s);  // (4)
+void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s);  // (4) C++03
+
 template &amp;lt;class SAlloc&amp;gt;
 void str(const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s);     // (5) C++20
+
 void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 ```
 * basic_string[link /reference/string/basic_string.md]
@@ -30,4 +34,4 @@ void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 - (6) : `rdbuf()-&amp;gt;str(std::move(s))` と等価
 
 ## 関連項目
-[basic_stringbuf::str](../basic_stringbuf/str.md)
+- [`basic_stringbuf::str`](../basic_stringbuf/str.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/swap.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringstream/swap.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/swap.md b/reference/sstream/basic_stringstream/swap.md
new file mode 100644
index 000000000..915112f68
--- /dev/null
+++ b/reference/sstream/basic_stringstream/swap.md
@@ -0,0 +1,55 @@
+# swap
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringstream[meta class]
+* function[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+void swap(basic_stringstream&amp;amp; rhs);                         // (1) C++11
+void swap(basic_stringstream&amp;amp; rhs) noexcept(/*see below*/); // (1) C++17
+```
+
+## 概要
+値を交換する。
+
+## 効果
+`basic_iostream&amp;lt;CharT, Traits&amp;gt;::swap(rhs)`を呼び出し、`sb.swap(rhs.sb)`を実行する。ここで`sb`は内部の`basic_stringbuf`オブジェクトである。
+
+## 例外
+- C++17 : 実装が例外を投げない場合、この関数は`noexcept`が指定される。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::stringstream ss1(&amp;#34;first&amp;#34;);
+  std::stringstream ss2(&amp;#34;second&amp;#34;);
+  
+  ss1.swap(ss2);
+  
+  std::cout &amp;lt;&amp;lt; ss1.str() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* str()[link str.md]
+
+### 出力
+```
+second
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/swap_free.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringstream/swap_free.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/swap_free.md b/reference/sstream/basic_stringstream/swap_free.md
new file mode 100644
index 000000000..7df16d334
--- /dev/null
+++ b/reference/sstream/basic_stringstream/swap_free.md
@@ -0,0 +1,54 @@
+# swap (非メンバ関数)
+* sstream[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  void swap(basic_stringstream&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; x,
+            basic_stringstream&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y);
+}
+```
+
+## 概要
+2つの`basic_stringstream`オブジェクトを入れ替える。
+
+## 効果
+`x.swap(y)`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::stringstream ss1(&amp;#34;first&amp;#34;);
+  std::stringstream ss2(&amp;#34;second&amp;#34;);
+  
+  std::swap(ss1, ss2);
+  
+  std::cout &amp;lt;&amp;lt; ss1.str() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; ss2.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* str()[link str.md]
+
+### 出力
+```
+second
+first
+```
+
+## バージョン
+### 言語
+- C++11
+
+### 処理系
+- [Clang](/implementation.md#clang): 3.0 [mark verified]
+- [GCC](/implementation.md#gcc): 5.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>view -- sstream : C++20時点のメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/view.html"/>
      <id>639c8172b1c235a48bca3650d9854a35404d6fa1:reference/sstream/basic_stringstream/view.md</id>
      <updated>2025-06-05T12:37:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/view.md b/reference/sstream/basic_stringstream/view.md
new file mode 100644
index 000000000..767963f4f
--- /dev/null
+++ b/reference/sstream/basic_stringstream/view.md
@@ -0,0 +1,51 @@
+# view
+* sstream[meta header]
+* std[meta namespace]
+* basic_stringstream[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+basic_string_view&amp;lt;CharT, Traits&amp;gt; view() const noexcept;
+```
+* basic_string_view[link /reference/string_view/basic_string_view.md]
+
+## 概要
+文字列ビューオブジェクトの取得を行う。
+
+## 戻り値
+`rdbuf()-&amp;gt;view()`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  std::stringstream ss(&amp;#34;Hello World&amp;#34;);
+  
+  std::string_view sv = ss.view();
+  
+  std::cout &amp;lt;&amp;lt; sv.substr(0, 5) &amp;lt;&amp;lt; std::endl;  // &amp;#34;Hello&amp;#34;
+}
+```
+* substr[link /reference/string_view/basic_string_view/substr.md]
+
+### 出力
+```
+Hello
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 12 [mark verified]
+- [GCC](/implementation.md#gcc): 12 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unreachable_sentinel_t -- unreachable_sentinel: 説明を修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/unreachable_sentinel_t.html"/>
      <id>c4d5bec557079e03eb029537a59c5b9964d8c5c3:reference/iterator/unreachable_sentinel_t.md</id>
      <updated>2025-06-05T03:01:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/unreachable_sentinel_t.md b/reference/iterator/unreachable_sentinel_t.md
index 4694befc9..15ecfbff8 100644
--- a/reference/iterator/unreachable_sentinel_t.md
+++ b/reference/iterator/unreachable_sentinel_t.md
@@ -19,11 +19,13 @@ namespace std {
 
 ## 概要
 
-`unreachable_sentinel_t`は、`weakly_incrementable`な型（イテレータ型）とともに用いて、任意の（半）開区間の上界を示すことのできる番兵型である。
+`unreachable_sentinel_t`は、`weakly_incrementable`な型（主にイテレータ型）とともに用いて、非有界な区間の上界を表すことのできる番兵型である。
 
-検索などを目的として範囲を走査する際、検索対象が範囲内に存在している場合その終端まで到達することは無く、範囲の探索は必ずしも範囲の先頭から行われる訳でも無い。任意の（半）開区間とは、ある範囲の内部にあるその様な走査の対象となる部分範囲のことを指す。`unreachable_sentinel`はその様な区間の終端を暗に指定する、その様な開区間の上界を表す番兵である。
+非有界な区間とは無限長の範囲のように、その終端が指定されない区間（範囲）のこと。そのような範囲の走査に対して`unreachable_sentinel`を使用して、別の方法によって範囲の終端が示されることを表し、それによって区間の上界を指定することができる。
 
-検索など、ある範囲の一部を走査する際にそのイテレータに対する番兵として用いる事で、範囲の終端チェックを省略して走査を効率化できる可能性がある。ただし、実際の終端に到達しても走査が終了しないため、利用にあたっては事前条件（終端となる値が存在しているか）が必ず満たされるかに注意を払う必要がある。
+1つの使い方は、無限長の範囲や`view`の番兵型として指定することで、その長さが無制限であることを表すことである。[`views::iota`](/reference/ranges/iota_view.md)や[`views::repeat`](/reference/ranges/repeat_view.md)でそのような使用方法を見ることができる。
+
+もう一つの使い方として、検索などにおいてある範囲の一部を走査する際にそのイテレータに対する番兵として用いる事で、範囲の終端チェックを省略して走査を効率化できる可能性がある。ただし、実際の終端に到達しても走査が終了しないため、利用にあたっては事前条件（終端となる値が存在しているか）が必ず満たされるかに注意を払う必要がある。
 
 ## 非メンバ（*Hidden friends*）関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- meta header修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/base.html"/>
      <id>197166c65d7647ce67a63c4f91d6522d5c0113eb:reference/ranges/to_input_view/base.md</id>
      <updated>2025-06-04T19:24:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/base.md b/reference/ranges/to_input_view/base.md
index 7571f2a49..b7073445d 100644
--- a/reference/ranges/to_input_view/base.md
+++ b/reference/ranges/to_input_view/base.md
@@ -1,5 +1,5 @@
 # base
-* to_input_view[meta header]
+* ranges[meta header]
 * std::ranges[meta namespace]
 * to_input_view[meta class]
 * function[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- meta header修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/begin.html"/>
      <id>197166c65d7647ce67a63c4f91d6522d5c0113eb:reference/ranges/to_input_view/begin.md</id>
      <updated>2025-06-04T19:24:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/begin.md b/reference/ranges/to_input_view/begin.md
index 14db28ac0..d6236644f 100644
--- a/reference/ranges/to_input_view/begin.md
+++ b/reference/ranges/to_input_view/begin.md
@@ -1,5 +1,5 @@
 # begin
-* to_input_view[meta header]
+* ranges[meta header]
 * std::ranges[meta namespace]
 * to_input_view[meta class]
 * function[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- meta header修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/end.html"/>
      <id>197166c65d7647ce67a63c4f91d6522d5c0113eb:reference/ranges/to_input_view/end.md</id>
      <updated>2025-06-04T19:24:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/end.md b/reference/ranges/to_input_view/end.md
index 0e7245afb..1fc532852 100644
--- a/reference/ranges/to_input_view/end.md
+++ b/reference/ranges/to_input_view/end.md
@@ -1,5 +1,5 @@
 # end
-* to_input_view[meta header]
+* ranges[meta header]
 * std::ranges[meta namespace]
 * to_input_view[meta class]
 * function[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- meta header修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/op_constructor.html"/>
      <id>197166c65d7647ce67a63c4f91d6522d5c0113eb:reference/ranges/to_input_view/op_constructor.md</id>
      <updated>2025-06-04T19:24:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/op_constructor.md b/reference/ranges/to_input_view/op_constructor.md
index 79534fdaa..a6b41061a 100644
--- a/reference/ranges/to_input_view/op_constructor.md
+++ b/reference/ranges/to_input_view/op_constructor.md
@@ -1,5 +1,5 @@
 # コンストラクタ
-* to_input_view[meta header]
+* ranges[meta header]
 * std::ranges[meta namespace]
 * to_input_view[meta class]
 * function[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- meta header修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/op_deduction_guide.html"/>
      <id>197166c65d7647ce67a63c4f91d6522d5c0113eb:reference/ranges/to_input_view/op_deduction_guide.md</id>
      <updated>2025-06-04T19:24:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/op_deduction_guide.md b/reference/ranges/to_input_view/op_deduction_guide.md
index 4ade4bf5b..68f1b925b 100644
--- a/reference/ranges/to_input_view/op_deduction_guide.md
+++ b/reference/ranges/to_input_view/op_deduction_guide.md
@@ -1,5 +1,5 @@
 # 推論補助
-* to_input_view[meta header]
+* ranges[meta header]
 * std::ranges[meta namespace]
 * to_input_view[meta class]
 * function[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- meta header修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/size.html"/>
      <id>197166c65d7647ce67a63c4f91d6522d5c0113eb:reference/ranges/to_input_view/size.md</id>
      <updated>2025-06-04T19:24:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/size.md b/reference/ranges/to_input_view/size.md
index 79fb4ac0d..9f06c8412 100644
--- a/reference/ranges/to_input_view/size.md
+++ b/reference/ranges/to_input_view/size.md
@@ -1,5 +1,5 @@
 # size
-* to_input_view[meta header]
+* ranges[meta header]
 * std::ranges[meta namespace]
 * to_input_view[meta class]
 * function[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_input_view -- to_input_view : メンバ関数を追加 #1423</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view.html"/>
      <id>2f6270fdf097c8b560b45410b776b2ffd03d17e0:reference/ranges/to_input_view.md</id>
      <updated>2025-06-04T19:22:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view.md b/reference/ranges/to_input_view.md
index b06359d0f..88459150b 100644
--- a/reference/ranges/to_input_view.md
+++ b/reference/ranges/to_input_view.md
@@ -48,11 +48,11 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](to_input_view/op_constructor.md.nolink) | コンストラクタ                   | C++26          |
-| [`base`](to_input_view/base.md.nolink)                    | `V`の参照を取得する              | C++26          |
-| [`begin`](to_input_view/begin.md.nolink)                  | 先頭を指すイテレータを取得する   | C++26          |
-| [`end`](to_input_view/end.md.nolink)                      | 番兵を取得する                   | C++26          |
-| [`size`](to_input_view/size.md.nolink)                    | 要素数を取得する                 | C++26          |
+| [`(constructor)`](to_input_view/op_constructor.md) | コンストラクタ                   | C++26          |
+| [`base`](to_input_view/base.md)                    | `V`の参照を取得する              | C++26          |
+| [`begin`](to_input_view/begin.md)                  | 先頭を指すイテレータを取得する   | C++26          |
+| [`end`](to_input_view/end.md)                      | 番兵を取得する                   | C++26          |
+| [`size`](to_input_view/size.md)                    | 要素数を取得する                 | C++26          |
 
 ## 継承しているメンバ関数
 
@@ -70,7 +70,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](to_input_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++26          |
+| [`(deduction_guide)`](to_input_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++26          |
 
 ## 例
 ### 基本的な使い方
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- to_input_view : メンバ関数を追加 #1423</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/base.html"/>
      <id>2f6270fdf097c8b560b45410b776b2ffd03d17e0:reference/ranges/to_input_view/base.md</id>
      <updated>2025-06-04T19:22:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/base.md b/reference/ranges/to_input_view/base.md
new file mode 100644
index 000000000..7571f2a49
--- /dev/null
+++ b/reference/ranges/to_input_view/base.md
@@ -0,0 +1,58 @@
+# base
+* to_input_view[meta header]
+* std::ranges[meta namespace]
+* to_input_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+constexpr V base() const&amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++26
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++26
+```
+
+## 概要
+メンバ変数として保持している、元のRangeを取得する。
+
+## 効果
+- (1): `return base_;`
+- (2): `return std::move(base_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  std::ranges::to_input_view view{vec};
+  
+  // (1) コピーして取得
+  std::vector&amp;lt;int&amp;gt; v1 = view.base();
+  
+  // (2) ムーブして取得
+  std::ranges::to_input_view view2{vec};
+  std::vector&amp;lt;int&amp;gt; v2 = std::move(view2).base();
+  
+  std::cout &amp;lt;&amp;lt; v1.size() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; v2.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+5
+5
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 21 [mark verified]
+- [GCC](/implementation.md#gcc): 15.1 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- to_input_view : メンバ関数を追加 #1423</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/begin.html"/>
      <id>2f6270fdf097c8b560b45410b776b2ffd03d17e0:reference/ranges/to_input_view/begin.md</id>
      <updated>2025-06-04T19:22:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/begin.md b/reference/ranges/to_input_view/begin.md
new file mode 100644
index 000000000..14db28ac0
--- /dev/null
+++ b/reference/ranges/to_input_view/begin.md
@@ -0,0 +1,57 @@
+# begin
+* to_input_view[meta header]
+* std::ranges[meta namespace]
+* to_input_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;); // (1) C++26
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt;;    // (2) C++26
+```
+
+## 概要
+先頭を指すイテレータを取得する。
+
+## 効果
+- (1): `return iterator&amp;lt;false&amp;gt;(ranges::begin(base_));`
+- (2): `return iterator&amp;lt;true&amp;gt;(ranges::begin(base_));`
+
+ここで、`iterator`は`to_input_view`の内部で定義される説明専用のイテレータクラスである。
+
+## 備考
+- このイテレータは`input_iterator`コンセプトを満たし、`forward_iterator`コンセプトを満たさない。
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  std::ranges::to_input_view view{v};
+  
+  auto it = view.begin();
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+1
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 21 [mark verified]
+- [GCC](/implementation.md#gcc): 15.1 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- to_input_view : メンバ関数を追加 #1423</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/end.html"/>
      <id>2f6270fdf097c8b560b45410b776b2ffd03d17e0:reference/ranges/to_input_view/end.md</id>
      <updated>2025-06-04T19:22:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/end.md b/reference/ranges/to_input_view/end.md
new file mode 100644
index 000000000..0e7245afb
--- /dev/null
+++ b/reference/ranges/to_input_view/end.md
@@ -0,0 +1,66 @@
+# end
+* to_input_view[meta header]
+* std::ranges[meta namespace]
+* to_input_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;); // (1) C++26
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt;;    // (2) C++26
+```
+
+## 概要
+番兵を取得する。
+
+## 効果
+以下と等価：
+
+```cpp
+return ranges::end(base_);
+```
+
+## 備考
+- `to_input_view`は[`common_range`](/reference/ranges/common_range.md)コンセプトを満たさないため、イテレータ型と番兵型は異なる型となる
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  std::ranges::to_input_view view{v};
+  
+  auto it = view.begin();
+  auto sentinel = view.end();
+  static_assert(!std::same_as&amp;lt;decltype(it), decltype(sentinel)&amp;gt;);
+  
+  int count = 0;
+  for (; it != sentinel; ++it) {
+    ++count;
+  }
+  
+  std::cout &amp;lt;&amp;lt; &amp;#34;size: &amp;#34; &amp;lt;&amp;lt; count &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+size: 5
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 21 [mark verified]
+- [GCC](/implementation.md#gcc): 15.1 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- to_input_view : メンバ関数を追加 #1423</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/op_constructor.html"/>
      <id>2f6270fdf097c8b560b45410b776b2ffd03d17e0:reference/ranges/to_input_view/op_constructor.md</id>
      <updated>2025-06-04T19:22:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/op_constructor.md b/reference/ranges/to_input_view/op_constructor.md
new file mode 100644
index 000000000..79534fdaa
--- /dev/null
+++ b/reference/ranges/to_input_view/op_constructor.md
@@ -0,0 +1,53 @@
+# コンストラクタ
+* to_input_view[meta header]
+* std::ranges[meta namespace]
+* to_input_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+to_input_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default;  // (1) C++26
+
+constexpr explicit
+to_input_view(V base);                          // (2) C++26
+```
+
+## 概要
+`to_input_view`オブジェクトを構築する。
+
+- (1): デフォルトコンストラクタ
+- (2): ベースとなるRangeを受け取るコンストラクタ
+
+## 効果
+- (1): ベースとなるRangeをデフォルト構築する
+- (2): ベースとなるRangeを`std::move(base)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  
+  // (1) デフォルトコンストラクタ
+  std::ranges::to_input_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;&amp;gt; view1{};
+  
+  // (2) ベースRangeを受け取るコンストラクタ
+  std::ranges::to_input_view view2{v};
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 21 [mark verified]
+- [GCC](/implementation.md#gcc): 15.1 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- to_input_view : メンバ関数を追加 #1423</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/op_deduction_guide.html"/>
      <id>2f6270fdf097c8b560b45410b776b2ffd03d17e0:reference/ranges/to_input_view/op_deduction_guide.md</id>
      <updated>2025-06-04T19:22:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/op_deduction_guide.md b/reference/ranges/to_input_view/op_deduction_guide.md
new file mode 100644
index 000000000..4ade4bf5b
--- /dev/null
+++ b/reference/ranges/to_input_view/op_deduction_guide.md
@@ -0,0 +1,48 @@
+# 推論補助
+* to_input_view[meta header]
+* std::ranges[meta namespace]
+* to_input_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class V&amp;gt;
+  to_input_view(V) -&amp;gt; to_input_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+
+## 概要
+`to_input_view`クラステンプレートの型推論補助。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  
+  // 推論補助によりテンプレート引数を明示的に指定する必要がない
+  std::ranges::to_input_view view{v};
+  
+  static_assert(std::same_as&amp;lt;
+    decltype(view),
+    std::ranges::to_input_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 21 [mark verified]
+- [GCC](/implementation.md#gcc): 15.1 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- to_input_view : メンバ関数を追加 #1423</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to_input_view/size.html"/>
      <id>2f6270fdf097c8b560b45410b776b2ffd03d17e0:reference/ranges/to_input_view/size.md</id>
      <updated>2025-06-04T19:22:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to_input_view/size.md b/reference/ranges/to_input_view/size.md
new file mode 100644
index 000000000..79fb4ac0d
--- /dev/null
+++ b/reference/ranges/to_input_view/size.md
@@ -0,0 +1,54 @@
+# size
+* to_input_view[meta header]
+* std::ranges[meta namespace]
+* to_input_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++26
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++26
+```
+
+## 概要
+要素数を取得する。
+
+## 効果
+- (1), (2): 以下と等価：
+
+```cpp
+return ranges::size(base_);
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  std::ranges::to_input_view view{v};
+  
+  std::cout &amp;lt;&amp;lt; view.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+5
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 21 [mark verified]
+- [GCC](/implementation.md#gcc): 15.1 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
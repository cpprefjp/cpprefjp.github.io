<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-04T03:03:26.246087</updated>
  <id>60b878c0-0aa5-4378-bbe7-aeb5d70dc432</id>

  
    <entry>
      <title>adjacent_view -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view.md b/reference/ranges/adjacent_view.md
index c43cdb999..63b69d494 100644
--- a/reference/ranges/adjacent_view.md
+++ b/reference/ranges/adjacent_view.md
@@ -50,11 +50,11 @@ namespace std::ranges {
 
 | 名前                                                | 説明                             | 対応バージョン |
 |-----------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](adjacent_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
-| [`base`](adjacent_view/base.md.nolink)                     | `V`の参照を取得する              | C++23          |
-| [`begin`](adjacent_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
-| [`end`](adjacent_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](adjacent_view/size.md.nolink)                     | 要素数を取得する                 | C++23          |
+| [`(constructor)`](adjacent_view/op_constructor.md)  | コンストラクタ                   | C++23          |
+| [`base`](adjacent_view/base.md)                     | `V`の参照を取得する              | C++23          |
+| [`begin`](adjacent_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](adjacent_view/end.md)                       | 番兵を取得する                   | C++23          |
+| [`size`](adjacent_view/size.md)                     | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
@@ -72,7 +72,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](adjacent_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](adjacent_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23          |
 
 ## 例
 ```cpp example
@@ -105,10 +105,9 @@ int main() {
 - C++23
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
 
 ## 関連項目
 - [`adjacent_transform_view`](adjacent_transform_view.md): `adjacent_view` と同じように要素を取得して関数を適用する
@@ -116,3 +115,4 @@ int main() {
 
 ## 参照
 - [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
+- [P2321R2 zip](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2321r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/base.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/base.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/base.md b/reference/ranges/adjacent_view/base.md
new file mode 100644
index 000000000..117b9bfc5
--- /dev/null
+++ b/reference/ranges/adjacent_view/base.md
@@ -0,0 +1,68 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++23
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++23
+```
+
+## 概要
+
+メンバ変数として保持している、元のviewを取得する。
+
+## 効果
+
+- (1) : `return base_;`
+- (2) : `return std::move(base_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av(v);
+  
+  // (1) コピーして取得
+  auto base1 = av.base();
+  static_assert(std::same_as&amp;lt;decltype(base1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  
+  // (2) ムーブして取得
+  auto base2 = std::move(av).base();
+  static_assert(std::same_as&amp;lt;decltype(base2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  
+  // 取得したviewを使用（元の要素を表示）
+  for (int n : base1) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* base[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.27 Adjacent view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/begin.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/begin.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/begin.md b/reference/ranges/adjacent_view/begin.md
new file mode 100644
index 000000000..c0c6951b3
--- /dev/null
+++ b/reference/ranges/adjacent_view/begin.md
@@ -0,0 +1,68 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);      // (1) C++23
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt;;         // (2) C++23
+```
+
+## 概要
+
+先頭を指すイテレータを取得する。
+
+## 効果
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(ranges::begin(base_), ranges::end(base_));`
+- (2) : `return iterator&amp;lt;true&amp;gt;(ranges::begin(base_), ranges::end(base_));`
+
+ここで、`iterator`は`adjacent_view`の内部で定義される説明専用のイテレータクラスである。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av(v);
+  
+  auto it = av.begin();
+  
+  // 最初の要素（隣接する3要素のタプル）
+  auto [a, b, c] = *it;
+  std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
+  
+  // 次の要素へ
+  ++it;
+  auto [a2, b2, c2] = *it;
+  std::cout &amp;lt;&amp;lt; a2 &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; b2 &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c2 &amp;lt;&amp;lt; std::endl;
+}
+```
+* begin[color ff0000]
+
+### 出力
+```
+1, 2, 3
+2, 3, 4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.27 Adjacent view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/end.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/end.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/end.md b/reference/ranges/adjacent_view/end.md
new file mode 100644
index 000000000..7fca485b2
--- /dev/null
+++ b/reference/ranges/adjacent_view/end.md
@@ -0,0 +1,75 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);                              // (1) C++23
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt;;                                 // (2) C++23
+```
+
+## 概要
+
+番兵を取得する。
+
+## 効果
+
+`common_range&amp;lt;V&amp;gt;`が`true`の場合：
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(as-sentinel{ranges::end(base_)}, ranges::begin(base_), ranges::end(base_));`
+- (2) : `return iterator&amp;lt;true&amp;gt;(as-sentinel{ranges::end(base_)}, ranges::begin(base_), ranges::end(base_));`
+
+それ以外の場合：
+
+- (1) : `return sentinel&amp;lt;false&amp;gt;(ranges::end(base_));`
+- (2) : `return sentinel&amp;lt;true&amp;gt;(ranges::end(base_));`
+
+ここで、`iterator`と`sentinel`は`adjacent_view`の内部で定義される説明専用のクラスであり、`as-sentinel`は説明専用の空クラスである。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av(v);
+  
+  auto begin = av.begin();
+  auto end = av.end();
+  
+  // 全要素を出力
+  for (auto it = begin; it != end; ++it) {
+    auto [a, b, c] = *it;
+    std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+```
+1, 2, 3
+2, 3, 4
+3, 4, 5
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.27 Adjacent view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/op_constructor.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/op_constructor.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/op_constructor.md b/reference/ranges/adjacent_view/op_constructor.md
new file mode 100644
index 000000000..d19841345
--- /dev/null
+++ b/reference/ranges/adjacent_view/op_constructor.md
@@ -0,0 +1,64 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+adjacent_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default;  // (1) C++23
+
+constexpr explicit
+adjacent_view(V base);                          // (2) C++23
+```
+
+## 概要
+
+- (1) : デフォルトコンストラクタ
+- (2) : 元となるRangeを受け取るコンストラクタ
+
+## 効果
+
+- (1) : `base_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  // (1) デフォルトコンストラクタ
+  std::ranges::adjacent_view&amp;lt;std::ranges::empty_view&amp;lt;int&amp;gt;, 2&amp;gt; av1;
+  
+  // (2) 元となるRangeを受け取るコンストラクタ
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av2(v);
+  
+  for (auto [a, b, c] : av2) {
+    std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::adjacent_view[color ff0000]
+
+### 出力
+```
+1, 2, 3
+2, 3, 4
+3, 4, 5
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.27 Adjacent view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/op_deduction_guide.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/op_deduction_guide.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/op_deduction_guide.md b/reference/ranges/adjacent_view/op_deduction_guide.md
new file mode 100644
index 000000000..8eca83ea9
--- /dev/null
+++ b/reference/ranges/adjacent_view/op_deduction_guide.md
@@ -0,0 +1,53 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  adjacent_view(R&amp;amp;&amp;amp;) -&amp;gt; adjacent_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, 1&amp;gt;;
+}
+```
+
+## 概要
+`adjacent_view`クラステンプレートの型推論補助。
+
+## 備考
+
+この推論補助は、第2テンプレート引数`N`のデフォルト値として`1`を使用する。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  // adjacent_viewの型を明示的に指定する必要がない（Nはデフォルトで1）
+  std::ranges::adjacent_view av{v};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(av),
+    std::ranges::adjacent_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, 1&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- adjacent_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view/size.html"/>
      <id>47160743e4d780b8e52f709475e1af514b6ece92:reference/ranges/adjacent_view/size.md</id>
      <updated>2025-06-04T11:59:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view/size.md b/reference/ranges/adjacent_view/size.md
new file mode 100644
index 000000000..afd9c8ae8
--- /dev/null
+++ b/reference/ranges/adjacent_view/size.md
@@ -0,0 +1,73 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++23
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++23
+```
+
+## 概要
+
+要素数を取得する。
+
+## 効果
+
+説明専用の変数 `n` を `ranges::size(base_)` とする。
+
+- (1)、(2) : `n` が `N` 未満なら `0` を返す。それ以外なら `n - (N - 1)` を返す。
+
+## 備考
+
+元のRangeのサイズが`N`未満の場合、`adjacent_view`は空となる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av(v);
+  
+  // サイズは元のサイズ(5) - (N(3) - 1) = 3
+  std::cout &amp;lt;&amp;lt; &amp;#34;size: &amp;#34; &amp;lt;&amp;lt; av.size() &amp;lt;&amp;lt; std::endl;
+  
+  // const版も動作する
+  const auto&amp;amp; cav = av;
+  std::cout &amp;lt;&amp;lt; &amp;#34;const size: &amp;#34; &amp;lt;&amp;lt; cav.size() &amp;lt;&amp;lt; std::endl;
+  
+  // 元のRangeが小さい場合
+  std::vector&amp;lt;int&amp;gt; v2 = {1, 2};
+  std::ranges::adjacent_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, 3&amp;gt; av2(v2);
+  std::cout &amp;lt;&amp;lt; &amp;#34;small range size: &amp;#34; &amp;lt;&amp;lt; av2.size() &amp;lt;&amp;lt; std::endl; // 0
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+size: 3
+const size: 3
+small range size: 0
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 7 [mark verified]
+
+## 参照
+- [N4950 26.7.27 Adjacent view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_transform_view -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view.md b/reference/ranges/adjacent_transform_view.md
index 4e4c10baa..96e092134 100644
--- a/reference/ranges/adjacent_transform_view.md
+++ b/reference/ranges/adjacent_transform_view.md
@@ -54,43 +54,54 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](adjacent_transform_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
-| [`base`](adjacent_transform_view/base.md.nolink)                     | `V`の参照を取得する              | C++23          |
-| [`begin`](adjacent_transform_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
-| [`end`](adjacent_transform_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](adjacent_transform_view/size.md.nolink)                     | 要素数を取得する                 | C++23          |
+| [`(constructor)`](adjacent_transform_view/op_constructor.md)  | コンストラクタ                   | C++23          |
+| [`base`](adjacent_transform_view/base.md)                     | `V`の参照を取得する              | C++23          |
+| [`begin`](adjacent_transform_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](adjacent_transform_view/end.md)                       | 番兵を取得する                   | C++23          |
+| [`size`](adjacent_transform_view/size.md)                     | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
 | 名前                                         | 説明                              | 対応バージョン |
 |----------------------------------------------|-----------------------------------|----------------|
-| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
-| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++23          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++23          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++23          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++23          |
 | [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
 | [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++23          |
 
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](adjacent_transform_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](adjacent_transform_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23          |
 
 ## 例
 ```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
 int main() {
   // 隣接する要素間の差を計算する
   std::vector v = {9, 2, 5, 3, 6, 7};
-  std::println(&amp;#34;{}&amp;#34;, v | std::views::adjacent_transform_view&amp;lt;2&amp;gt;([](auto x, auto y) { return y - x; }));
+  for (int x : v | std::views::adjacent_transform_view&amp;lt;2&amp;gt;(
+                     [](auto x, auto y) { return y - x; })) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }
 }
 ```
 * std::views::adjacent_transform_view[color ff0000]
 
 ### 出力
 ```
-[-7, 3, -2, 3, 1]
+-7
+3
+-2
+3
+1
 ```
 
 
@@ -99,13 +110,15 @@ int main() {
 - C++23
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
 
 ## 関連項目
-- [`adjacent_difference`](/reference/numeric/adjacent_difference.md) 隣接する2つの要素間の差を計算するアルゴリズム関数
+- [`std::adjacent_difference`](/reference/numeric/adjacent_difference.md)
+    - 隣接する2つの要素間の差を計算するアルゴリズム関数
+
 
 ## 参照
 - [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
+- [P2321R2 zip](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2321r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/base.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/base.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/base.md b/reference/ranges/adjacent_transform_view/base.md
new file mode 100644
index 000000000..27640b2f6
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/base.md
@@ -0,0 +1,71 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++23
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++23
+```
+
+## 概要
+
+メンバ変数として保持している、元のviewを取得する。
+
+## 効果
+
+- (1) : `return inner_.base();`
+- (2) : `return std::move(inner_).base();`
+
+ここで、`inner_`は`adjacent_view&amp;lt;V, N&amp;gt;`型のメンバ変数。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  auto diff = [](int x, int y) { return y - x; };
+  std::ranges::adjacent_transform_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, decltype(diff), 2&amp;gt; atv(v, diff);
+  
+  // (1) コピーして取得
+  auto base1 = atv.base();
+  static_assert(std::same_as&amp;lt;decltype(base1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  
+  // (2) ムーブして取得
+  auto base2 = std::move(atv).base();
+  static_assert(std::same_as&amp;lt;decltype(base2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  
+  // 取得したviewを使用（元の要素を表示）
+  for (int n : base1) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* base[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
+
+## 参照
+- [N4950 26.7.28 Adjacent transform view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/begin.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/begin.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/begin.md b/reference/ranges/adjacent_transform_view/begin.md
new file mode 100644
index 000000000..0b1e5550b
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/begin.md
@@ -0,0 +1,72 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto begin();      // (1) C++23
+
+constexpr auto begin() const
+  requires range&amp;lt;const InnerView&amp;gt; &amp;amp;&amp;amp;
+           regular_invocable&amp;lt;const F&amp;amp;, REPEAT(range_reference_t&amp;lt;const V&amp;gt;, N)...&amp;gt;; // (2) C++23
+```
+* REPEAT[italic]
+
+## 概要
+
+先頭を指すイテレータを取得する。
+
+## 効果
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(*this, inner_.begin());`
+- (2) : `return iterator&amp;lt;true&amp;gt;(*this, inner_.begin());`
+
+ここで、`iterator`は`adjacent_transform_view`の内部で定義される説明専用のイテレータクラスであり、`InnerView`は説明専用の[`adjacent_view`](../adjacent_view.md)`&amp;lt;V, N&amp;gt;`である。
+
+## 備考
+- `REPEAT(T, N)` をT型のN個のパックとする。
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  auto diff = [](int x, int y) { return y - x; };
+  std::ranges::adjacent_transform_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, decltype(diff), 2&amp;gt; atv(v, diff);
+  
+  auto it = atv.begin();
+  
+  // 最初の要素（隣接する2要素の差）
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;  // 2 - 1 = 1
+  
+  // 次の要素へ
+  ++it;
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;  // 3 - 2 = 1
+}
+```
+* begin[color ff0000]
+
+### 出力
+```
+1
+1
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
+
+## 参照
+- [N4950 26.7.28 Adjacent transform view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/end.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/end.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/end.md b/reference/ranges/adjacent_transform_view/end.md
new file mode 100644
index 000000000..259037cc1
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/end.md
@@ -0,0 +1,79 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto end();      // (1) C++23
+
+constexpr auto end() const
+  requires range&amp;lt;const InnerView&amp;gt; &amp;amp;&amp;amp;
+           regular_invocable&amp;lt;const F&amp;amp;, REPEAT(range_reference_t&amp;lt;const V&amp;gt;, N)...&amp;gt;; // (2) C++23
+```
+* REPEAT[italic]
+
+## 概要
+
+番兵を取得する。
+
+## 効果
+
+`common_range&amp;lt;InnerView&amp;gt;`が`true`の場合：
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(*this, inner_.end());`
+- (2) : `return iterator&amp;lt;true&amp;gt;(*this, inner_.end());`
+
+それ以外の場合：
+
+- (1) : `return sentinel&amp;lt;false&amp;gt;(inner_.end());`
+- (2) : `return sentinel&amp;lt;true&amp;gt;(inner_.end());`
+
+ここで、`iterator`と`sentinel`は`adjacent_transform_view`の内部で定義される説明専用のクラスであり、`InnerView`は説明専用の[`adjacent_view`](../adjacent_view.md)`&amp;lt;V, N&amp;gt;`である。
+
+## 備考
+- `REPEAT(T, N)` をT型のN個のパックとする。
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  auto diff = [](int x, int y) { return y - x; };
+  std::ranges::adjacent_transform_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, decltype(diff), 2&amp;gt; atv(v, diff);
+  
+  auto begin = atv.begin();
+  auto end = atv.end();
+  
+  // 全要素を出力
+  for (auto it = begin; it != end; ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+```
+1 1 1 1 
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
+
+## 参照
+- [N4950 26.7.28 Adjacent transform view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/op_constructor.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/op_constructor.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/op_constructor.md b/reference/ranges/adjacent_transform_view/op_constructor.md
new file mode 100644
index 000000000..a3c26db74
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/op_constructor.md
@@ -0,0 +1,68 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+adjacent_transform_view() = default;     // (1) C++23
+
+constexpr explicit
+adjacent_transform_view(V base, F fun);  // (2) C++23
+```
+
+## 概要
+
+- (1) : デフォルトコンストラクタ
+- (2) : 元となるRangeと変換関数を受け取るコンストラクタ
+
+## 効果
+
+- (1) : `fun_`と`inner_`をデフォルト構築する
+- (2) : `fun_`を`std::move(fun)`で初期化し、`inner_`を`std::move(base)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  // (1) デフォルトコンストラクタ
+  std::ranges::adjacent_transform_view&amp;lt;
+    std::ranges::empty_view&amp;lt;int&amp;gt;,
+    decltype([](int, int) { return 0; }),
+    2
+  &amp;gt; atv1;
+  
+  // (2) 元となるRangeと変換関数を受け取るコンストラクタ
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  auto diff = [](int x, int y) { return y - x; };
+  std::ranges::adjacent_transform_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, decltype(diff), 2&amp;gt; atv2(v, diff);
+  
+  for (int d : atv2) {
+    std::cout &amp;lt;&amp;lt; d &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::adjacent_transform_view[color ff0000]
+* std::ranges::empty_view[link ../empty_view.md]
+
+### 出力
+```
+1 1 1 1 
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
+
+## 参照
+- [N4950 26.7.28 Adjacent transform view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/op_deduction_guide.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/op_deduction_guide.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/op_deduction_guide.md b/reference/ranges/adjacent_transform_view/op_deduction_guide.md
new file mode 100644
index 000000000..d5fd8d477
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/op_deduction_guide.md
@@ -0,0 +1,59 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class F&amp;gt;
+  adjacent_transform_view(R&amp;amp;&amp;amp;, F) -&amp;gt;
+    adjacent_transform_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, decay_t&amp;lt;F&amp;gt;, 2&amp;gt;;
+}
+```
+
+## 概要
+`adjacent_transform_view`クラステンプレートの型推論補助。
+
+## 備考
+
+この推論補助は、第3テンプレート引数`N`のデフォルト値として`2`を使用する。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  auto diff = [](int x, int y) { return y - x; };
+  
+  // adjacent_transform_viewの型を明示的に指定する必要がない（Nはデフォルトで2）
+  std::ranges::adjacent_transform_view atv{v, diff};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(atv),
+    std::ranges::adjacent_transform_view&amp;lt;
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      decltype(diff),
+      2
+    &amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark noimpl]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- adjacent_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view/size.html"/>
      <id>03cf02bed041cce71b018d21e9ae2320ac30c20c:reference/ranges/adjacent_transform_view/size.md</id>
      <updated>2025-06-04T11:59:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view/size.md b/reference/ranges/adjacent_transform_view/size.md
new file mode 100644
index 000000000..b9ac49e06
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view/size.md
@@ -0,0 +1,73 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* adjacent_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;InnerView&amp;gt;;       // (1) C++23
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const InnerView&amp;gt;; // (2) C++23
+```
+* sized_range[link ../sized_range.md]
+
+## 概要
+
+要素数を取得する。
+
+## 効果
+
+- (1) : `return inner_.size();`
+- (2) : `return inner_.size();`
+
+ここで、`InnerView`は説明専用の[`adjacent_view`](../adjacent_view.md)`&amp;lt;V, N&amp;gt;`である。
+
+## 備考
+
+`adjacent_transform_view`のサイズは、内部で保持する`adjacent_view`のサイズと同じ。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  auto diff = [](int x, int y) { return y - x; };
+  std::ranges::adjacent_transform_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;amp;&amp;gt;, decltype(diff), 2&amp;gt; atv(v, diff);
+  
+  // サイズは元のサイズ(5) - (N(2) - 1) = 4
+  std::cout &amp;lt;&amp;lt; &amp;#34;size: &amp;#34; &amp;lt;&amp;lt; atv.size() &amp;lt;&amp;lt; std::endl;
+  
+  // const版も動作する
+  const auto&amp;amp; catv = atv;
+  std::cout &amp;lt;&amp;lt; &amp;#34;const size: &amp;#34; &amp;lt;&amp;lt; catv.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+* std::ranges::adjacent_transform_view[link ../adjacent_transform_view.md]
+* std::views::all_t[link ../all.md]
+
+### 出力
+```
+size: 4
+const size: 4
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [N4950 26.7.28 Adjacent transform view](https://timsong-cpp.github.io/cppwp/n4950/range.adjacent.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_awaitable -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/as_awaitable.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/as_awaitable.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/as_awaitable.md b/reference/execution/execution/as_awaitable.md
index fa406534a..9b758ed05 100644
--- a/reference/execution/execution/as_awaitable.md
+++ b/reference/execution/execution/as_awaitable.md
@@ -218,3 +218,4 @@ value-type await_resume();
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic-operation -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/basic-operation.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/basic-operation.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/basic-operation.md b/reference/execution/execution/basic-operation.md
index d6b41da85..ff9838484 100644
--- a/reference/execution/execution/basic-operation.md
+++ b/reference/execution/execution/basic-operation.md
@@ -151,3 +151,4 @@ using indices-for = remove_reference_t&amp;lt;Sndr&amp;gt;::indices-for;  // exposition only
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>connect -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/connect.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/connect.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/connect.md b/reference/execution/execution/connect.md
index 346172278..1ca3d497b 100644
--- a/reference/execution/execution/connect.md
+++ b/reference/execution/execution/connect.md
@@ -125,7 +125,7 @@ completion_signatures&amp;lt;
 * set_stopped_t[link set_stopped.md]
 * exception_ptr[link /reference/exception/exception_ptr.md]
 
-説明用の関数テンプレート`suspend-complete`とコルーチン`suspend-awaitable`を下記の通り定義する。
+説明用の関数テンプレート`suspend-complete`とコルーチン`connect-awaitable`を下記の通り定義する。
 
 ```cpp
 namespace std::execution {
@@ -237,3 +237,4 @@ int main()
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_value -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_value.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/let_value.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_value.md b/reference/execution/execution/let_value.md
index effdb9a9d..126b5d1e8 100644
--- a/reference/execution/execution/let_value.md
+++ b/reference/execution/execution/let_value.md
@@ -403,3 +403,4 @@ catch 0
 ## 参照
 - [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule_from -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule_from.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/schedule_from.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule_from.md b/reference/execution/execution/schedule_from.md
index 43464855e..7ca0c2e01 100644
--- a/reference/execution/execution/schedule_from.md
+++ b/reference/execution/execution/schedule_from.md
@@ -212,3 +212,4 @@ Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、
 ## 参照
 - [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/scheduler.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 0a456b15a..9cb7b25f2 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -133,3 +133,4 @@ int main()
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>when_all -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/when_all.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/when_all.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/when_all.md b/reference/execution/execution/when_all.md
index 31cff92e1..b94f58fd7 100644
--- a/reference/execution/execution/when_all.md
+++ b/reference/execution/execution/when_all.md
@@ -482,3 +482,4 @@ error=-2
 ## 参照
 - [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>write-env -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/write-env.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/write-env.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/write-env.md b/reference/execution/execution/write-env.md
index 8b97ac73c..3bfda3d39 100644
--- a/reference/execution/execution/write-env.md
+++ b/reference/execution/execution/write-env.md
@@ -57,3 +57,4 @@ struct impls-for&amp;lt;write-env-t&amp;gt; : default-impls {
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>call-result-t -- functional: 実行制御ライブラリへの内部リンク付与 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/functional/call-result-t.html"/>
      <id>d512d567fb5228d3abb008e160cfdbe8be1fb7d0:reference/functional/call-result-t.md</id>
      <updated>2025-06-03T23:55:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/call-result-t.md b/reference/functional/call-result-t.md
index 687b8eda2..bccac0051 100644
--- a/reference/functional/call-result-t.md
+++ b/reference/functional/call-result-t.md
@@ -14,7 +14,7 @@ using call-result-t = decltype(declval&amp;lt;Fn&amp;gt;()(declval&amp;lt;Args&amp;gt;()...));  // expositio
 
 
 ## 備考
-説明専用のエイリアステンプレート`call-result-t`は、実行制御ライブラリの仕様定義のため導入された。
+説明専用のエイリアステンプレート`call-result-t`は、[実行制御ライブラリ](/reference/execution/execution.md)の仕様定義のため導入された。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>callable -- functional: 実行制御ライブラリへの内部リンク付与 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/functional/callable.html"/>
      <id>d512d567fb5228d3abb008e160cfdbe8be1fb7d0:reference/functional/callable.md</id>
      <updated>2025-06-03T23:55:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/callable.md b/reference/functional/callable.md
index da1ac1b63..29ca46abb 100644
--- a/reference/functional/callable.md
+++ b/reference/functional/callable.md
@@ -17,7 +17,7 @@ concept callable =  // exposition only
 
 
 ## 備考
-説明専用のコンセプト`callable`は、実行制御ライブラリの仕様定義のため導入された。
+説明専用のコンセプト`callable`は、[実行制御ライブラリ](/reference/execution/execution.md)の仕様定義のため導入された。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decayed-typeof -- functional: 実行制御ライブラリへの内部リンク付与 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/functional/decayed-typeof.html"/>
      <id>d512d567fb5228d3abb008e160cfdbe8be1fb7d0:reference/functional/decayed-typeof.md</id>
      <updated>2025-06-03T23:55:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/decayed-typeof.md b/reference/functional/decayed-typeof.md
index f7d9e6cc5..6c243dc42 100644
--- a/reference/functional/decayed-typeof.md
+++ b/reference/functional/decayed-typeof.md
@@ -14,7 +14,7 @@ using decayed-typeof = decltype(auto(Tag));  // exposition only
 
 
 ## 備考
-説明専用のエイリアステンプレート`decayed-typeof`は、実行制御ライブラリの仕様定義のため導入された。
+説明専用のエイリアステンプレート`decayed-typeof`は、[実行制御ライブラリ](/reference/execution/execution.md)の仕様定義のため導入された。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nothrow-callable -- functional: 実行制御ライブラリへの内部リンク付与 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/functional/nothrow-callable.html"/>
      <id>d512d567fb5228d3abb008e160cfdbe8be1fb7d0:reference/functional/nothrow-callable.md</id>
      <updated>2025-06-03T23:55:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/nothrow-callable.md b/reference/functional/nothrow-callable.md
index d82448883..836c61e12 100644
--- a/reference/functional/nothrow-callable.md
+++ b/reference/functional/nothrow-callable.md
@@ -19,7 +19,7 @@ concept nothrow-callable =   // exposition only
 
 
 ## 備考
-説明専用のコンセプト`nothrow-callable`は、実行制御ライブラリの仕様定義のため導入された。
+説明専用のコンセプト`nothrow-callable`は、[実行制御ライブラリ](/reference/execution/execution.md)の仕様定義のため導入された。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 2b8269b57..352d5fec1 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -119,8 +119,8 @@ namespace std::execution {
 | [`execution::upon_error`](execution/upon_error.md) | エラー完了時の継続処理をアタッチ (customization point object) | C++26 |
 | [`execution::upon_stopped`](execution/upon_stopped.md) | 停止完了時の継続処理をアタッチ (customization point object) | C++26 |
 | [`execution::let_value`](execution/let_value.md) | 値完了結果から入れ子の非同期操作へ変換 (customization point object) | C++26 |
-| [`execution::let_error`](execution/let_error.md.nolink) | エラー完了結果から入れ子の非同期操作へ変換 (customization point object) | C++26 |
-| [`execution::let_stopped`](execution/let_stopped.md.nolink) | 停止完了を入れ子の非同期操作へ変換 (customization point object) | C++26 |
+| [`execution::let_error`](execution/let_error.md) | エラー完了結果から入れ子の非同期操作へ変換 (customization point object) | C++26 |
+| [`execution::let_stopped`](execution/let_stopped.md) | 停止完了を入れ子の非同期操作へ変換 (customization point object) | C++26 |
 | [`execution::bulk`](execution/bulk.md) | インデクス空間上で指定関数を反復実行 (customization point object) | C++26 |
 | [`execution::split`](execution/split.md) | 入力Senderの値を複製回送信可能とする (customization point object) | C++26 |
 | [`execution::when_all`](execution/when_all.md) | 全ての入力Sender完了を待機 (customization point object) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_error -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_error.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution/let_error.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_error.md b/reference/execution/execution/let_error.md
new file mode 100644
index 000000000..696142e47
--- /dev/null
+++ b/reference/execution/execution/let_error.md
@@ -0,0 +1,84 @@
+# let_error
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct let_error_t { unspecified };
+  inline constexpr let_error_t let_error{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`let_error`は、新しいSenderを返す関数呼び出し可能なオブジェクトに引き渡すことで、入力[Sender](sender.md)の[エラー完了](set_error.md)結果から入れ子の非同期操作へと変換するSenderアダプタである。
+
+`let_error`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
+
+Senderアルゴリズム`let_error`の仕様は、[`let_value`](let_value.md)ページを参照のこと。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  { // 関数呼び出し
+    ex::sender auto snd0 = ex::just_error(21);
+    ex::sender auto snd1 = ex::let_error(
+      snd0,
+      [](int n) -&amp;gt; ex::sender auto {
+        return ex::just(n * 2);
+      });
+    auto [val] = std::this_thread::sync_wait(snd1).value();
+    std::println(&amp;#34;{}&amp;#34;, val);
+  }
+
+  { // パイプライン記法
+    ex::sender auto sndr = ex::just_error(21)
+      | ex::let_error(
+          [](int n) -&amp;gt; ex::sender auto {
+            return ex::just(n * 2);
+          });
+    auto [val] = std::this_thread::sync_wait(sndr).value();
+    std::println(&amp;#34;{}&amp;#34;, val);
+  }
+}
+```
+* ex::let_error[color ff0000]
+* ex::sender[link sender.md]
+* ex::just[link just.md]
+* ex::just_error[link just_error.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* value()[link /reference/optional/optional/value.md]
+
+### 出力
+```
+42
+42
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::let_value`](let_value.md)
+- [`execution::let_stopped`](let_stopped.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_stopped -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_stopped.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution/let_stopped.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_stopped.md b/reference/execution/execution/let_stopped.md
new file mode 100644
index 000000000..6710af764
--- /dev/null
+++ b/reference/execution/execution/let_stopped.md
@@ -0,0 +1,84 @@
+# let_stopped
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct let_stopped_t { unspecified };
+  inline constexpr let_stopped_t let_stopped{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`let_stopped`は、新しいSenderを返す関数呼び出し可能なオブジェクトに引き渡すことで、入力[Sender](sender.md)の[停止完了](set_stopped.md)結果から入れ子の非同期操作へと変換するSenderアダプタである。
+
+`let_stopped`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
+
+Senderアルゴリズム`let_stopped`の仕様は、[`let_value`](let_value.md)ページを参照のこと。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  { // 関数呼び出し
+    ex::sender auto snd0 = ex::just_stopped();
+    ex::sender auto snd1 = ex::let_stopped(
+      snd0,
+      []() -&amp;gt; ex::sender auto {
+        return ex::just(42);
+      });
+    auto [val] = std::this_thread::sync_wait(snd1).value();
+    std::println(&amp;#34;{}&amp;#34;, val);
+  }
+
+  { // パイプライン記法
+    ex::sender auto sndr = ex::just_stopped()
+      | ex::let_stopped(
+          []() -&amp;gt; ex::sender auto {
+            return ex::just(42);
+          });
+    auto [val] = std::this_thread::sync_wait(sndr).value();
+    std::println(&amp;#34;{}&amp;#34;, val);
+  }
+}
+```
+* ex::let_stopped[color ff0000]
+* ex::sender[link sender.md]
+* ex::just[link just.md]
+* ex::just_stopped[link just_stopped.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* value()[link /reference/optional/optional/value.md]
+
+### 出力
+```
+42
+42
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::let_value`](let_value.md)
+- [`execution::let_error`](let_error.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_value -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_value.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution/let_value.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_value.md b/reference/execution/execution/let_value.md
index a8ef9f842..effdb9a9d 100644
--- a/reference/execution/execution/let_value.md
+++ b/reference/execution/execution/let_value.md
@@ -17,27 +17,35 @@ namespace std::execution {
 
 `let_value`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
 
+本ページにてSenderアルゴリズム`let_value`／[`let_error`](let_error.md)／[`let_stopped`](let_stopped.md)の動作仕様を包括的に説明するため、以降のセクションにおいては、`let-cpo`, `set-cpo`をそれぞれ下記の通りとする。
+
+| `let-cpo` | `set-cpo` |
+|----|----|
+| `let_value` | [`set_value`](set_value.md) |
+| [`let_error`](let_error.md) | [`set_error`](set_error.md) |
+| [`let_stopped`](let_stopped.md) | [`set_stopped`](set_stopped.md) |
+
 
 ## 効果
-説明用の式`sndr`と`f`に対して、`decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは`decltype((f))`が[`movable-value`](../movable-value.md)を満たさないとき、呼び出し式`let_value(sndr, f)`は不適格となる。
+説明用の式`sndr`と`f`に対して、`decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは`decltype((f))`が[`movable-value`](../movable-value.md)を満たさないとき、呼び出し式`let-cpo(sndr, f)`は不適格となる。
 
-そうでなければ、呼び出し式`let_value(sndr, f)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+そうでなければ、呼び出し式`let-cpo(sndr, f)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
 
 ```cpp
-transform_sender(get-domain-early(sndr), make-sender(let_value, f, sndr))
+transform_sender(get-domain-early(sndr), make-sender(let-cpo, f, sndr))
 ```
 * transform_sender[link transform_sender.md]
 * get-domain-early[link get-domain-early.md]
 * make-sender[link make-sender.md]
 
 
-### Senderアルゴリズムタグ `let_value`
+### Senderアルゴリズムタグ `let-cpo`
 Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
 
 ```cpp
 namespace std::execution {
   template&amp;lt;&amp;gt;
-  struct impls-for&amp;lt;decayed-typeof&amp;lt;let_value&amp;gt;&amp;gt; : default-impls {
+  struct impls-for&amp;lt;decayed-typeof&amp;lt;let-cpo&amp;gt;&amp;gt; : default-impls {
     static constexpr auto get-state = see below;
     static constexpr auto complete = see below;
   };
@@ -46,9 +54,10 @@ namespace std::execution {
 * impls-for[link impls-for.md]
 * default-impls[link impls-for.md]
 * decayed-typeof[link /reference/functional/decayed-typeof.md]
+* let-cpo[italic]
 * see below[italic]
 
-`impls-for&amp;lt;decayed-typeof&amp;lt;let_value&amp;gt;&amp;gt;::get-state`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+`impls-for&amp;lt;decayed-typeof&amp;lt;let-cpo&amp;gt;&amp;gt;::get-state`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
 
 - `args_variant_t` : 入力Sender`sndr`の完了シグネチャ集合から求まる送信値リスト型情報(`variant&amp;lt;monostate, tuple&amp;lt;...&amp;gt;, ...&amp;gt;`)
 - `ops2_variant_t` : `f`が返すSenderに対応する非同期操作型情報(`variant&amp;lt;monostate, {OperationState型}, ...&amp;gt;`)
@@ -78,7 +87,7 @@ namespace std::execution {
 * decay_t[link /reference/type_traits/decay.md]
 * see below[italic]
 
-- 説明用のパック`Sigs`を[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;`[`child-type`](child-type.md)`&amp;lt;Sndr&amp;gt;,` [`env_of_t`](env_of_t.md)`&amp;lt;Rcvr&amp;gt;&amp;gt;`による[`completion_signatures`](completion_signatures.md)特殊化のテンプレートパラメータとし、パック`LetSigs`を`Sigs`に含まれる型のうち戻り値型が[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;`[`set_value`](set_value.md)`&amp;gt;`に等しいものと定義する。説明用のエイリアステンプレート`as-tuple&amp;lt;Tag(Args...)&amp;gt;`を[`decayed-tuple`](decayed-tuple.md)`&amp;lt;Args...&amp;gt;`と定義する。型`args_variant_t`は下記定義において重複削除した型となる。
+- 説明用のパック`Sigs`を[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;`[`child-type`](child-type.md)`&amp;lt;Sndr&amp;gt;,` [`env_of_t`](env_of_t.md)`&amp;lt;Rcvr&amp;gt;&amp;gt;`による[`completion_signatures`](completion_signatures.md)特殊化のテンプレートパラメータとし、パック`LetSigs`を`Sigs`に含まれる型のうち戻り値型が[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;set-cpo&amp;gt;`に等しいものと定義する。説明用のエイリアステンプレート`as-tuple&amp;lt;Tag(Args...)&amp;gt;`を[`decayed-tuple`](decayed-tuple.md)`&amp;lt;Args...&amp;gt;`と定義する。型`args_variant_t`は下記定義において重複削除した型となる。
 
     ```cpp
     variant&amp;lt;monostate, as-tuple&amp;lt;LetSigs&amp;gt;...&amp;gt;
@@ -97,35 +106,35 @@ namespace std::execution {
 
 - 型`args_variant_t`および`ops2_variant_t`が適格なときに限って、上記ラムダ式のrequires節が満たされる。
 
-`impls-for&amp;lt;decayed-typeof&amp;lt;let_value&amp;gt;&amp;gt;::complete`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+`impls-for&amp;lt;decayed-typeof&amp;lt;let-cpo&amp;gt;&amp;gt;::complete`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
 
-- [値完了](set_value.md)の場合、`let_value`Sender構築時の引数`f`に対して`f(args...)`を呼び出し、戻り値[Sender](sender.md)から入れ子非同期操作を開始する。同Senderの完了結果を接続先[Receiver](receiver.md)へ転送する。
+- 完了関数`set-cpo`の場合、Sender構築時の引数`f`に対して`f(args...)`を呼び出し、戻り値[Sender](sender.md)から入れ子非同期操作を開始する。同Senderの完了結果を接続先[Receiver](receiver.md)へ転送する。
 - それ以外の完了操作の場合、接続先[Receiver](receiver.md)の同種完了関数へ転送する。
 
 ```cpp
 []&amp;lt;class Tag, class... Args&amp;gt;
   (auto, auto&amp;amp; state, auto&amp;amp; rcvr, Tag, Args&amp;amp;&amp;amp;... args) noexcept -&amp;gt; void {
-    if constexpr (same_as&amp;lt;Tag, decayed-typeof&amp;lt;set_value&amp;gt;&amp;gt;) {
+    if constexpr (same_as&amp;lt;Tag, decayed-typeof&amp;lt;set-cpo&amp;gt;&amp;gt;) {
       TRY-EVAL(rcvr, let-bind(state, rcvr, std::forward&amp;lt;Args&amp;gt;(args)...));
     } else {
       Tag()(std::move(rcvr), std::forward&amp;lt;Args&amp;gt;(args)...);
     }
   }
 ```
-* set_value[link set_value.md]
 * decayed-typeof[link /reference/functional/decayed-typeof.md]
 * TRY-EVAL[link set_value.md]
 * std::move[link /reference/utility/move.md]
+* set-cpo[italic]
 
-説明用の式`sndr`と`env`に対して、型`Sndr`を`decltype((sndr))`とする。[`sender-for`](sender-for.md)`&amp;lt;Sndr,` [`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;let_value&amp;gt;&amp;gt; == false`のとき、式`let_value.transform_env(sndr, env)`は不適格となる。
+説明用の式`sndr`と`env`に対して、型`Sndr`を`decltype((sndr))`とする。[`sender-for`](sender-for.md)`&amp;lt;Sndr,` [`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;let-cpo&amp;gt;&amp;gt; == false`のとき、式`let-cpo.transform_env(sndr, env)`は不適格となる。
 
-そうでなければ、式`let_value.transform_env(sndr, env)`は[`JOIN-ENV`](../queryable.md)`(let-env(sndr),` [`FWD-ENV`](../forwarding_query.md)`(env))`と等価。
+そうでなければ、式`let-cpo.transform_env(sndr, env)`は[`JOIN-ENV`](../queryable.md)`(let-env(sndr),` [`FWD-ENV`](../forwarding_query.md)`(env))`と等価。
 
 
 ## 説明専用エンティティ
 説明用の式`sndr`を用いて、`let-env(sndr)`を下記リストのうち最初に適格となる式と定義する。
 
-- [`SCHED-ENV`](schedule.md)`(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;`[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;`[`set_value`](set_value.md)`&amp;gt;&amp;gt;(`[`get_env`](get_env.md)`(sndr)))`
+- [`SCHED-ENV`](schedule.md)`(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;`[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;set-cpo&amp;gt;&amp;gt;(`[`get_env`](get_env.md)`(sndr)))`
 - [`MAKE-ENV`](../queryable.md)`(`[`get_domain`](get_domain.md)`,` [`get_domain`](get_domain.md)`(`[`get_env`](get_env.md)`(sndr)))`
 - `(void(sndr),` [`env&amp;lt;&amp;gt;{}`](env.md)`)`
 
@@ -210,11 +219,11 @@ namespace std::execution {
 Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
 [デフォルト実行ドメイン](default_domain.md)では無変換。
 
-説明用の式`out_sndr`を`let_value(sndr, f)`の戻り値[Sender](sender.md)とし、式`rcvr`を式[`connect`](connect.md)`(out_sndr, rcvr)`が適格となる[Receiver](receiver.md)とする。式[`connect`](connect.md)`(out_sndr, rcvr)`は[開始(start)](start.md)時に下記を満たす非同期操作を生成しない場合、動作は未定義となる。
+説明用の式`out_sndr`を`let-cpo(sndr, f)`の戻り値[Sender](sender.md)とし、式`rcvr`を式[`connect`](connect.md)`(out_sndr, rcvr)`が適格となる[Receiver](receiver.md)とする。式[`connect`](connect.md)`(out_sndr, rcvr)`は[開始(start)](start.md)時に下記を満たす非同期操作を生成しない場合、動作は未定義となる。
 
-- 入力[Sender](sender.md)`sndr`の完了結果で[`set_value`](set_value.md)が呼ばれるとき、`f`を呼び出すこと。
+- 入力[Sender](sender.md)`sndr`の完了結果で`set-cpo`が呼ばれるとき、`f`を呼び出すこと。
 - 非同期操作の完了は、`f`が返すSenderの完了に依存すること。
-- `sndr`により送信された他完了操作を伝搬すること。
+- `sndr`により送信された他の完了操作を伝搬すること。
 
 
 ## 例
@@ -387,8 +396,8 @@ catch 0
 
 
 ## 関連項目
-- [`execution::let_error`](let_error.md.nolink)
-- [`execution::let_stopped`](let_stopped.md.nolink)
+- [`execution::let_error`](let_error.md)
+- [`execution::let_stopped`](let_stopped.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stopped_as_error -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/stopped_as_error.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution/stopped_as_error.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/stopped_as_error.md b/reference/execution/execution/stopped_as_error.md
index 678417fc2..92c680eee 100644
--- a/reference/execution/execution/stopped_as_error.md
+++ b/reference/execution/execution/stopped_as_error.md
@@ -45,7 +45,7 @@ return let_stopped(
       return just_error(std::move(err));
     });
 ```
-* let_stopped[link let_stopped.md.nolink]
+* let_stopped[link let_stopped.md]
 * just_error[link just_error.md]
 * is_nothrow_move_constructible_v[link /reference/type_traits/is_nothrow_move_constructible.md]
 * std::move[link /reference/utility/move.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stopped_as_optional -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/stopped_as_optional.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution/stopped_as_optional.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/stopped_as_optional.md b/reference/execution/execution/stopped_as_optional.md
index 7cbab481f..fab6ba572 100644
--- a/reference/execution/execution/stopped_as_optional.md
+++ b/reference/execution/execution/stopped_as_optional.md
@@ -45,7 +45,7 @@ return let_stopped(
     []() noexcept { return just(optional&amp;lt;V&amp;gt;()); });
 ```
 * single-sender-value-type[link single-sender-value-type.md]
-* let_stopped[link let_stopped.md.nolink]
+* let_stopped[link let_stopped.md]
 * then[link then.md]
 * just[link just.md]
 * is_nothrow_constructible_v[link /reference/type_traits/is_nothrow_constructible.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
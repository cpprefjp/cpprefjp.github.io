<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-01T02:25:38.965182</updated>
  <id>829ddd73-face-4e4f-b8ce-6149941863a3</id>

  
    <entry>
      <title>insert -- fix wrong numbers in unordered_map::insert()</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html"/>
      <id>5907be1caf5fe5cb6a9ea16d9ff5e79fad87e682:reference/unordered_map/unordered_map/insert.md</id>
      <updated>2025-06-01T11:21:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/insert.md b/reference/unordered_map/unordered_map/insert.md
index 3b89f15a1..c837beeee 100644
--- a/reference/unordered_map/unordered_map/insert.md
+++ b/reference/unordered_map/unordered_map/insert.md
@@ -78,15 +78,15 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (10) C++17
 - (1), (2), (3) :
     - [`pair`](/reference/utility/pair.md) の `bool` 部分（`second` 部）は、要素が追加されたら `true`、追加されなかったら（既にあったら）`false`を返す
     - [`pair`](/reference/utility/pair.md) の `iterator` 部分（`first` 部）は、追加された要素（`bool` 部分が `true` の場合）、あるいは、既にあった要素（`bool` 部分が `false` の場合）を指すイテレータを返す
-- (4), (5) :
+- (4), (5), (6) :
     - 新たな要素が追加された場合、その追加された要素を指すイテレータを返す
     - 新たな要素が追加されなかった場合、すでにあった要素を指すイテレータを返す
-- (6), (7) : なし
+- (7), (8) : なし
 - (9) :
     - [`insert_return_type`](/reference/map/map.md)を返す。`insert_return_type`のイテレータ型メンバ変数`position`、`bool`型メンバ変数`inserted`に格納される値は(1), (2), (3)のものと同じ情報である。`nh`が空の場合は、`position`は終端イテレータである。`node_type`型メンバ変数`node`には、
         - 挿入された場合には、空の[ノードハンドル](/reference/node_handle/node_handle.md)
         - 挿入されなかった場合には、`nh`の値である
-- (8) : `nh`が空の場合、`(*this).end()`を返す。そうではない場合、`nh`と等価のキーの要素を指すイテレータを常に返す
+- (10) : `nh`が空の場合、`(*this).end()`を返す。そうではない場合、`nh`と等価のキーの要素を指すイテレータを常に返す
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_awaitable -- execution/as_awaitable: 概要増補 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/as_awaitable.html"/>
      <id>1a6cd9cb028ec39fe556b218ffebd57039df314d:reference/execution/execution/as_awaitable.md</id>
      <updated>2025-05-31T00:39:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/as_awaitable.md b/reference/execution/execution/as_awaitable.md
index 96fb0d803..eede9fa1b 100644
--- a/reference/execution/execution/as_awaitable.md
+++ b/reference/execution/execution/as_awaitable.md
@@ -13,7 +13,19 @@ namespace std::execution {
 * unspecified[italic]
 
 ## 概要
-`as_awaitable`は、オブジェクトを特定コルーチン内でAwaitableに変換するカスタマイゼーションポイントオブジェクトである。
+`as_awaitable`は、オブジェクトを特定の[コルーチン](/lang/cpp20/coroutines.md)内でAwaitableに変換するカスタマイゼーションポイントオブジェクトである。
+
+Promise型`p`をもつコルーチンにおいて、Await式`co_await as_awaitable(expr, p)`は下記のように動作する。
+
+- 式`expr.as_awaitable(p)`が有効ならば、同式が返すAwaitableオブジェクトに対してAwait式を実行する。
+- `expr`が[単一の値を送信するSender](single-sender.md)であり、Promise型が停止完了ハンドラを定義するならば、下記動作を行う。
+    - Senderを[接続(connect)](connect.md)し、結果[Operation State](operation_state.md)をAwaitableオブジェクトに格納する。
+    - コルーチンを中断し、Operation Stateを[開始(start)](start.md)する。
+    - [クエリオブジェクト](../queryable.md)による[Receiver](receiver.md)環境への問い合わせは、Promise型に関連付けられた環境(`get_env`)へと転送される。
+    - Senderが[値完了](set_value.md)した場合、送信値をAwait式の結果としてコルーチンを再開する。
+    - Senderが[エラー完了](set_error.md)した場合、エラー値を例外としてコルーチンから再スローする。
+    - Senderが[停止完了](set_stopped.md)した場合、停止完了ハンドラ(`unhandled_stopped`)が返す別のコルーチンを再開させる。
+- そうでなければ、式`expr`に対してAwait式を実行する。
 
 
 ## 効果
@@ -43,6 +55,7 @@ namespace std::execution {
 }
 ```
 * single-sender[link single-sender.md]
+* env_of_t[link env_of_t.md]
 * sender_to[link sender_to.md]
 * convertible_to[link /reference/concepts/convertible_to.md]
 * coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
@@ -102,7 +115,7 @@ struct awaitable-receiver {
 
 説明用の式`rcvr`を`awaitable-reciever`型の右辺値、`crcvr`を`rcvr`をconst参照する左辺値、`vs`を式パック、`err`を`Err`型の式とする。このとき
 
-- [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;result-type, decltype((vs))...&amp;gt;`を満たすとき、式`set_value(rcvr, vs...)`は下記と等価。そうでなければ、式`set_value(rcvr, vs...)`は不適格となる。
+- [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;result-type, decltype((vs))...&amp;gt;`を満たすとき、式[`set_value`](set_value.md)`(rcvr, vs...)`は下記と等価。そうでなければ、式`set_value(rcvr, vs...)`は不適格となる。
 
     ```cpp
     try {
@@ -116,7 +129,7 @@ struct awaitable-receiver {
     * current_exception()[link /reference/exception/current_exception.md]
     * resume()[link /reference/coroutine/coroutine_handle/resume.md]
 
-- 式`set_error(rcvr, err)`は下記と等価。
+- 式[`set_error`](set_error.md)`(rcvr, err)`は下記と等価。
 
     ```cpp
     rcvr.result-ptr-&amp;gt;template emplace&amp;lt;2&amp;gt;(AS-EXCEPT-PTR(err));
@@ -125,7 +138,7 @@ struct awaitable-receiver {
     * template emplace[link /reference/variant/variant/emplace.md]
     * resume()[link /reference/coroutine/coroutine_handle/resume.md]
 
-- 式`set_stopped(rcvr)`は下記と等価。
+- 式[`set_stopped`](set_stopped.md)`(rcvr)`は下記と等価。
 
     ```cpp
     static_cast&amp;lt;coroutine_handle&amp;lt;&amp;gt;&amp;gt;(rcvr.continuation.promise().unhandled_stopped()).resume();
@@ -134,7 +147,7 @@ struct awaitable-receiver {
     * promise()[link /reference/coroutine/coroutine_handle/promise.md]
     * resume()[link /reference/coroutine/coroutine_handle/resume.md]
 
-- [`forwarding-query`](../forwarding-query.md)を満たす型の式`tag`とパック式`as`に対して、[`get_env`](get_env.md)`(crcvr).query(tag, as...)`は下記と等価。
+- [`forwarding-query`](../forwarding-query.md)を満たす型の式`tag`とパック式`as`に対して、式[`get_env`](get_env.md)`(crcvr).query(tag, as...)`は下記と等価。
 
     ```cpp
     tag(get_env(as_const(crcvr.continuation.promise())), as...)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>class-type -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/class-type.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/class-type.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/class-type.md b/reference/execution/class-type.md
new file mode 100644
index 000000000..92511231c
--- /dev/null
+++ b/reference/execution/class-type.md
@@ -0,0 +1,26 @@
+# class-type
+* execution[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  concept class-type = decays-to&amp;lt;T, T&amp;gt; &amp;amp;&amp;amp; is_class_v&amp;lt;T&amp;gt;;  // exposition only
+}
+```
+* decays-to[link decays-to.md]
+* is_class_v[link /reference/type_traits/is_class.md]
+
+## 概要
+`class-type`は、型`T`がクラス型であることを表す説明専用のコンセプトである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index e596e690b..a2499d162 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -151,7 +151,7 @@ Senderコンシューマは名前空間 `std::this_thread` で定義される。
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`execution::as_awaitable`](execution/as_awaitable.md.nolink) | Senderを[Awaitable型](/lang/cpp20/coroutines.md)へ変換 (customization point object) | C++26 |
+| [`execution::as_awaitable`](execution/as_awaitable.md) | Senderを[Awaitable型](/lang/cpp20/coroutines.md)へ変換 (customization point object) | C++26 |
 | [`execution::with_awaitable_senders`](execution/with_awaitable_senders.md) | [Promise型](/lang/cpp20/coroutines.md)の基底クラス (class template) | C++26 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_awaitable -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/as_awaitable.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/as_awaitable.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/as_awaitable.md b/reference/execution/execution/as_awaitable.md
new file mode 100644
index 000000000..96fb0d803
--- /dev/null
+++ b/reference/execution/execution/as_awaitable.md
@@ -0,0 +1,199 @@
+# as_awaitable
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct as_awaitable_t { unspecified };
+  inline constexpr as_awaitable_t as_awaitable{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`as_awaitable`は、オブジェクトを特定コルーチン内でAwaitableに変換するカスタマイゼーションポイントオブジェクトである。
+
+
+## 効果
+説明用の式`expr`と左辺値`p`に対して、型`Expr`を`decltype((expr))`、型`Promise`を[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((p))&amp;gt;`とする。
+
+呼び出し式`as_awaitable(expr, p)`は、`expr`と`p`の評価が不定順で順序付けられることを除いて、下記と等価。
+
+- 適格であるならば、式`expr.as_awaitable(p)`
+    - 適格要件 : 同式の型を`A`としたとき、[`is-awaitable`](../is-awaitable.md)`&amp;lt;A, Promise&amp;gt; == true`であるべき。
+- そうではなく、説明用の型`U`を`Promise`とは異なりかつ`await_transform`メンバ関数を持たない未規定の型としたとき、[`is-awaitable`](../is-awaitable.md)`&amp;lt;Expr, U&amp;gt; == true`ならば、式`(void(p), expr)`
+    - 事前条件 : [`is-awaitable`](../is-awaitable.md)`&amp;lt;Expr, Promise&amp;gt; == true`、かつPromise型`U`のコルーチンにおける式`co_await expr`がPromise型`Promise`のコルーチンにおける同式と等しさを保持すること。
+- そうではなく、`awaitable-sender&amp;lt;Expr, Promise&amp;gt;`ならば、式`sender-awaitable{expr, p}`
+- そうでなければ、式`(void(p), expr)`
+
+
+## 説明専用エンティティ
+### コンセプト`awaitable-sender`
+```cpp
+namespace std::execution {
+  template&amp;lt;class Sndr, class Promise&amp;gt;
+  concept awaitable-sender =
+    single-sender&amp;lt;Sndr, env_of_t&amp;lt;Promise&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    sender_to&amp;lt;Sndr, awaitable-receiver&amp;gt; &amp;amp;&amp;amp;  // see below
+    requires (Promise&amp;amp; p) {
+      { p.unhandled_stopped() } -&amp;gt; convertible_to&amp;lt;coroutine_handle&amp;lt;&amp;gt;&amp;gt;;
+    };
+}
+```
+* single-sender[link single-sender.md]
+* sender_to[link sender_to.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
+* see below[italic]
+
+### クラステンプレート`sender-awaitable`
+```cpp
+namespace std::execution {
+  template&amp;lt;class Sndr, class Promise&amp;gt;
+  class sender-awaitable {
+    struct unit {};                                           // exposition only
+    using value-type =                                        // exposition only
+      single-sender-value-type&amp;lt;Sndr, env_of_t&amp;lt;Promise&amp;gt;&amp;gt;;
+    using result-type =                                       // exposition only
+      conditional_t&amp;lt;is_void_v&amp;lt;value-type&amp;gt;, unit, value-type&amp;gt;;
+    struct awaitable-receiver;                                // exposition only
+
+    variant&amp;lt;monostate, result-type, exception_ptr&amp;gt; result{};  // exposition only
+    connect_result_t&amp;lt;Sndr, awaitable-receiver&amp;gt; state;         // exposition only
+
+  public:
+    sender-awaitable(Sndr&amp;amp;&amp;amp; sndr, Promise&amp;amp; p);
+    static constexpr bool await_ready() noexcept { return false; }
+    void await_suspend(coroutine_handle&amp;lt;Promise&amp;gt;) noexcept { start(state); }
+    value-type await_resume();
+  };
+}
+```
+* single-sender-value-type[link single-sender-value-type.md]
+* env_of_t[link env_of_t.md]
+* connect_result_t[link connect_result_t.md]
+* start[link start.md]
+* conditional_t[link /reference/type_traits/conditional.md]
+* is_void_v[link /reference/type_traits/is_void.md]
+* variant[link /reference/variant/variant.md]
+* monostate[link /reference/variant/monostate.md]
+* exception_ptr[link /reference/exception/exception_ptr.md]
+* coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+
+### クラステンプレート`awaitable-receiver`
+説明専用のクラステンプレート`sender-awaitable&amp;lt;Sndr, Promise&amp;gt;::awaitable-receiver`は下記の通り定義される。
+
+```cpp
+struct awaitable-receiver {
+  using receiver_concept = receiver_t;
+  variant&amp;lt;monostate, result-type, exception_ptr&amp;gt;* result-ptr;  // exposition only
+  coroutine_handle&amp;lt;Promise&amp;gt; continuation;                      // exposition only
+  // see below
+};
+```
+* receiver_t[link receiver.md]
+* variant[link /reference/variant/variant.md]
+* monostate[link /reference/variant/monostate.md]
+* exception_ptr[link /reference/exception/exception_ptr.md]
+* coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+* see below[italic]
+
+説明用の式`rcvr`を`awaitable-reciever`型の右辺値、`crcvr`を`rcvr`をconst参照する左辺値、`vs`を式パック、`err`を`Err`型の式とする。このとき
+
+- [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;result-type, decltype((vs))...&amp;gt;`を満たすとき、式`set_value(rcvr, vs...)`は下記と等価。そうでなければ、式`set_value(rcvr, vs...)`は不適格となる。
+
+    ```cpp
+    try {
+      rcvr.result-ptr-&amp;gt;template emplace&amp;lt;1&amp;gt;(vs...);
+    } catch(...) {
+      rcvr.result-ptr-&amp;gt;template emplace&amp;lt;2&amp;gt;(current_exception());
+    }
+    rcvr.continuation.resume();
+    ```
+    * template emplace[link /reference/variant/variant/emplace.md]
+    * current_exception()[link /reference/exception/current_exception.md]
+    * resume()[link /reference/coroutine/coroutine_handle/resume.md]
+
+- 式`set_error(rcvr, err)`は下記と等価。
+
+    ```cpp
+    rcvr.result-ptr-&amp;gt;template emplace&amp;lt;2&amp;gt;(AS-EXCEPT-PTR(err));
+    rcvr.continuation.resume();
+    ```
+    * template emplace[link /reference/variant/variant/emplace.md]
+    * resume()[link /reference/coroutine/coroutine_handle/resume.md]
+
+- 式`set_stopped(rcvr)`は下記と等価。
+
+    ```cpp
+    static_cast&amp;lt;coroutine_handle&amp;lt;&amp;gt;&amp;gt;(rcvr.continuation.promise().unhandled_stopped()).resume();
+    ```
+    * coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
+    * promise()[link /reference/coroutine/coroutine_handle/promise.md]
+    * resume()[link /reference/coroutine/coroutine_handle/resume.md]
+
+- [`forwarding-query`](../forwarding-query.md)を満たす型の式`tag`とパック式`as`に対して、[`get_env`](get_env.md)`(crcvr).query(tag, as...)`は下記と等価。
+
+    ```cpp
+    tag(get_env(as_const(crcvr.continuation.promise())), as...)
+    ```
+    * get_env[link get_env.md]
+    * as_const[link /reference/utility/as_const.md]
+    * promise()[link /reference/coroutine/coroutine_handle/promise.md]
+
+```cpp
+sender-awaitable(Sndr&amp;amp;&amp;amp; sndr, Promise&amp;amp; p);
+```
+
+- 効果 : `state`を下記で初期化する。
+
+    ```cpp
+    connect(std::forward&amp;lt;Sndr&amp;gt;(sndr),
+            awaitable-receiver{addressof(result), coroutine_handle&amp;lt;Promise&amp;gt;::from_promise(p)})
+    ```
+    * connect[link connect.md]
+    * coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+    * from_promise[link /reference/coroutine/coroutine_handle/from_promise.md]
+
+```cpp
+value-type await_resume();
+```
+
+- 効果 : 下記と等価。
+
+    ```cpp
+    if (result.index() == 2)
+      rethrow_exception(get&amp;lt;2&amp;gt;(result));
+    if constexpr (!is_void_v&amp;lt;value-type&amp;gt;)
+      return std::forward&amp;lt;value-type&amp;gt;(get&amp;lt;1&amp;gt;(result));
+    ```
+    * index()[link /reference/variant/variant/index.md]
+    * get[link /reference/variant/variant/get.md]
+    * rethrow_exception[link /reference/exception/rethrow_exception.md]
+    * is_void_v[link /reference/type_traits/is_void.md]
+
+
+## カスタマイゼーションポイント
+`expr`に対して、適格であるならば式`expr.as_awaitable(p)`が呼び出される。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::with_awaitable_senders`](with_awaitable_senders.md)
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_adaptor_closure -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_adaptor_closure.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/sender_adaptor_closure.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_adaptor_closure.md b/reference/execution/execution/sender_adaptor_closure.md
index d92530aef..dfd10664d 100644
--- a/reference/execution/execution/sender_adaptor_closure.md
+++ b/reference/execution/execution/sender_adaptor_closure.md
@@ -10,7 +10,7 @@ namespace std::execution {
   struct sender_adaptor_closure { };
 }
 ```
-* class-type[link class-type.md.nolink]
+* class-type[link ../class-type.md]
 
 ## 概要
 `sender_adaptor_closure`は、ユーザ定義のパイプ可能Senderアダプタクロージャオブジェクトの実装を補助するクラステンプレートである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>single-sender-value-type -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/single-sender-value-type.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/single-sender-value-type.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/single-sender-value-type.md b/reference/execution/execution/single-sender-value-type.md
index 9687b191d..38d30c9fb 100644
--- a/reference/execution/execution/single-sender-value-type.md
+++ b/reference/execution/execution/single-sender-value-type.md
@@ -28,7 +28,7 @@ using single-sender-value-type = see below;  // exposition only
 
 ## 関連項目
 - [`execution::stopped_as_optional`](stopped_as_optional.md)
-- [`sender-awaitable`](sender-awaitable.md.nolink)
+- [`execution::as_awaitable`](as_awaitable.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>single-sender -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/single-sender.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/single-sender.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/single-sender.md b/reference/execution/execution/single-sender.md
new file mode 100644
index 000000000..b1e724288
--- /dev/null
+++ b/reference/execution/execution/single-sender.md
@@ -0,0 +1,31 @@
+# single-sender
+* execution[meta header]
+* type-alias[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class Sndr, class Env&amp;gt;
+concept single-sender = sender_in&amp;lt;Sndr, Env&amp;gt; &amp;amp;&amp;amp;
+  requires {
+    typename single-sender-value-type&amp;lt;Sndr, Env&amp;gt;;
+  };
+```
+* sender_in[link sender_in.md]
+* single-sender-value-type[link single-sender-value-type.md]
+
+## 概要
+`single-sender`は、実行制御ライブラリの仕様定義で用いられる説明専用のエイリアステンプレートである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`execution::as_awaitable`](as_awaitable.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>with_awaitable_senders -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/with_awaitable_senders.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/with_awaitable_senders.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/with_awaitable_senders.md b/reference/execution/execution/with_awaitable_senders.md
index ec76e23ad..fd0cabaa1 100644
--- a/reference/execution/execution/with_awaitable_senders.md
+++ b/reference/execution/execution/with_awaitable_senders.md
@@ -33,7 +33,7 @@ namespace std::execution {
   };
 }
 ```
-* class-type[link class-type.md.nolink]
+* class-type[link ../class-type.md]
 * terminate()[link /reference/exception/terminate.md]
 * coroutine_handle[link /reference/coroutine/coroutine_handle.md]
 * address()[link /reference/coroutine/coroutine_handle/address.md]
@@ -173,7 +173,7 @@ value=42
 
 
 ## 関連項目
-- [`execution::as_awaitable`](as_awaitable.md.nolink)
+- [`execution::as_awaitable`](as_awaitable.md)
 - [コルーチン](/lang/cpp20/coroutines.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>await_transform -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/with_awaitable_senders/await_transform.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/execution/with_awaitable_senders/await_transform.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/with_awaitable_senders/await_transform.md b/reference/execution/execution/with_awaitable_senders/await_transform.md
index 4127777e5..1f9643427 100644
--- a/reference/execution/execution/with_awaitable_senders/await_transform.md
+++ b/reference/execution/execution/with_awaitable_senders/await_transform.md
@@ -11,10 +11,10 @@ call-result-t&amp;lt;as_awaitable_t, Value, Promise&amp;amp;&amp;gt;
   await_transform(Value&amp;amp;&amp;amp; value);
 ```
 * call-result-t[link /reference/functional/call-result-t.md]
-* as_awaitable_t[link ../as_awaitable.md.nolink]
+* as_awaitable_t[link ../as_awaitable.md]
 
 ## 概要
-コルーチンの[`co_await`演算子](/lang/cpp20/coroutines.md)にアダプトし、[`as_awaitable`](../as_awaitable.md.nolink)で変換したAwaitableオブジェクトを返す。
+コルーチンの[`co_await`演算子](/lang/cpp20/coroutines.md)にアダプトし、[`as_awaitable`](../as_awaitable.md)で変換したAwaitableオブジェクトを返す。
 
 
 ## 効果
@@ -23,7 +23,7 @@ call-result-t&amp;lt;as_awaitable_t, Value, Promise&amp;amp;&amp;gt;
 ```cpp
 return as_awaitable(std::forward&amp;lt;Value&amp;gt;(value), static_cast&amp;lt;Promise&amp;amp;&amp;gt;(*this));
 ```
-* as_awaitable[link ../as_awaitable.md.nolink]
+* as_awaitable[link ../as_awaitable.md]
 
 
 ## バージョン
@@ -38,7 +38,7 @@ return as_awaitable(std::forward&amp;lt;Value&amp;gt;(value), static_cast&amp;lt;Promise&amp;amp;&amp;gt;(*this));
 
 
 ## 関連項目
-- [`execution::as_awaitable`](../as_awaitable.md.nolink)
+- [`execution::as_awaitable`](../as_awaitable.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forwarding-query -- execution: as_awaitable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/forwarding-query.html"/>
      <id>2705e5ad6beba34acdc803456a0afd3cf2a868b9:reference/execution/forwarding-query.md</id>
      <updated>2025-05-30T23:37:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/forwarding-query.md b/reference/execution/forwarding-query.md
new file mode 100644
index 000000000..2cc3f7d1c
--- /dev/null
+++ b/reference/execution/forwarding-query.md
@@ -0,0 +1,29 @@
+# forwarding-query
+* execution[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  concept forwarding-query = forwarding_query(T{});  // exposition only
+}
+```
+* forwarding_query[link forwarding_query.md]
+
+## 概要
+`forwarding_query`は、型`T`が[クエリ可能アダプタを通じて転送可能](forwarding_query.md)か否かを確認する説明専用のコンセプトである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`forwarding_query`](forwarding_query.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 [P0002R1] -- GLOBAL_QUALIFY_LIST: std::exchange追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>24f1d8158e909d0e8285da40f6644084592c7344:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2025-05-30T22:19:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index cb4a2fe81..f0e2048d9 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -77,7 +77,6 @@ int main()
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
 }
 ```
-* std::exchange[link /reference/utility/exchange.md]
 
 
 ## 仕様
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン [P0912R5] -- GLOBAL_QUALIFY_LIST: std::exchange追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>24f1d8158e909d0e8285da40f6644084592c7344:lang/cpp20/coroutines.md</id>
      <updated>2025-05-30T22:19:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 763a5db47..87891533e 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -577,7 +577,6 @@ int main()
 }
 ```
 * co_yield[color ff0000]
-* std::exchange[link /reference/utility/exchange.md]
 * std::terminate()[link /reference/exception/terminate.md]
 * std::coroutine_handle[link /reference/coroutine/coroutine_handle.md]
 * std::suspend_always[link /reference/coroutine/suspend_always.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_handle -- GLOBAL_QUALIFY_LIST: std::exchange追加</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html"/>
      <id>24f1d8158e909d0e8285da40f6644084592c7344:reference/coroutine/coroutine_handle.md</id>
      <updated>2025-05-30T22:19:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle.md b/reference/coroutine/coroutine_handle.md
index 98de8c5ed..630932db7 100644
--- a/reference/coroutine/coroutine_handle.md
+++ b/reference/coroutine/coroutine_handle.md
@@ -171,7 +171,6 @@ int main()
 * done()[link coroutine_handle/done.md]
 * from_promise[link coroutine_handle/from_promise.md]
 * promise()[link coroutine_handle/promise.md]
-* std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_traits -- GLOBAL_QUALIFY_LIST: std::exchange追加</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html"/>
      <id>24f1d8158e909d0e8285da40f6644084592c7344:reference/coroutine/coroutine_traits.md</id>
      <updated>2025-05-30T22:19:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_traits.md b/reference/coroutine/coroutine_traits.md
index 1fe6a6c4a..3c2a8c0e7 100644
--- a/reference/coroutine/coroutine_traits.md
+++ b/reference/coroutine/coroutine_traits.md
@@ -103,7 +103,6 @@ int main()
 * resume()[link coroutine_handle/resume.md]
 * done()[link coroutine_handle/done.md]
 * from_promise[link coroutine_handle/from_promise.md]
-* std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine -- GLOBAL_QUALIFY_LIST: std::exchange追加</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html"/>
      <id>24f1d8158e909d0e8285da40f6644084592c7344:reference/coroutine/noop_coroutine.md</id>
      <updated>2025-05-30T22:19:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine.md b/reference/coroutine/noop_coroutine.md
index 2d5de67ee..2d90f81e8 100644
--- a/reference/coroutine/noop_coroutine.md
+++ b/reference/coroutine/noop_coroutine.md
@@ -119,7 +119,6 @@ int main()
 * done()[link coroutine_handle/done.md]
 * from_promise[link coroutine_handle/from_promise.md]
 * promise()[link coroutine_handle/promise.md]
-* std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_always -- GLOBAL_QUALIFY_LIST: std::exchange追加</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_always.html"/>
      <id>24f1d8158e909d0e8285da40f6644084592c7344:reference/coroutine/suspend_always.md</id>
      <updated>2025-05-30T22:19:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_always.md b/reference/coroutine/suspend_always.md
index 74f2ab175..039d79a13 100644
--- a/reference/coroutine/suspend_always.md
+++ b/reference/coroutine/suspend_always.md
@@ -97,7 +97,6 @@ int main()
 * done()[link coroutine_handle/done.md]
 * from_promise[link coroutine_handle/from_promise.md]
 * promise()[link coroutine_handle/promise.md]
-* std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_never -- GLOBAL_QUALIFY_LIST: std::exchange追加</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_never.html"/>
      <id>24f1d8158e909d0e8285da40f6644084592c7344:reference/coroutine/suspend_never.md</id>
      <updated>2025-05-30T22:19:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_never.md b/reference/coroutine/suspend_never.md
index 3b0752ff5..a909bf231 100644
--- a/reference/coroutine/suspend_never.md
+++ b/reference/coroutine/suspend_never.md
@@ -98,7 +98,6 @@ int main()
 * done()[link coroutine_handle/done.md]
 * from_promise[link coroutine_handle/from_promise.md]
 * promise()[link coroutine_handle/promise.md]
-* std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>span -- GLOBAL_QUALIFY_LIST: std::exchange追加</title>
      <link href="https://cpprefjp.github.io/reference/span/span.html"/>
      <id>24f1d8158e909d0e8285da40f6644084592c7344:reference/span/span.md</id>
      <updated>2025-05-30T22:19:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/span.md b/reference/span/span.md
index f04dee885..f29a43993 100644
--- a/reference/span/span.md
+++ b/reference/span/span.md
@@ -192,7 +192,6 @@ int main()
   print(std::span&amp;lt;int&amp;gt;{ar, 3});
 }
 ```
-* std::exchange[link /reference/utility/exchange.md]
 * subspan[link span/subspan.md]
 
 #### 出力
@@ -251,7 +250,6 @@ int main()
 * s.first[link span/first.md]
 * s.last[link span/last.md]
 * s.size()[link span/size.md]
-* std::exchange[link /reference/utility/exchange.md]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_view -- transform_view : メンバ型の概要だけ追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/transform_view.html"/>
      <id>d36b13a0f5b40b965e48464b316b9392d11b6bf9:reference/ranges/transform_view.md</id>
      <updated>2025-05-30T17:29:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/transform_view.md b/reference/ranges/transform_view.md
index c4e9efe33..ba6c6e488 100644
--- a/reference/ranges/transform_view.md
+++ b/reference/ranges/transform_view.md
@@ -66,6 +66,13 @@ namespace std::ranges {
 | [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
 | [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
 
+## メンバ型
+
+| 名前                               | 説明                         | 対応バージョン |
+|------------------------------------|------------------------------|----------------|
+| `template &amp;lt;bool Const&amp;gt; iterator;`  | イテレータ型(説明専用)       | C++20          |
+| `template &amp;lt;bool Const&amp;gt; sentinel;`  | 番兵型(説明専用)             | C++20          |
+
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-04-03T02:40:56.235345</updated>
  <id>7efd0996-b939-4a62-9f6f-9f6d3118cc7a</id>

  
    <entry>
      <title>コンストラクタ -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view/op_constructor.html"/>
      <id>20104fbc06f4689aa768800b6e023604cdceabbc:reference/ranges/iota_view/op_constructor.md</id>
      <updated>2022-04-03T11:36:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view/op_constructor.md b/reference/ranges/iota_view/op_constructor.md
index 8c49f35cc..b8327a6eb 100644
--- a/reference/ranges/iota_view/op_constructor.md
+++ b/reference/ranges/iota_view/op_constructor.md
@@ -25,16 +25,18 @@ constexpr iota_view(iterator first, sentinel last);
 
 ## 概要
 - (1) : `[W(), Bound())` を範囲とする`iota_view`を構築する
-- (2) : `Bound`が`unreachable_sentinel_t`のとき、`value`から始まる無限長の`iota_view`を構築する。それ以外のとき、`[value, Bound())` を範囲とする`iota_view`を構築する
+- (2) : `[value, Bound())` を範囲とする`iota_view`を構築する
 - (3) : `[value, bound)` を範囲とする`iota_view`を構築する
 - (4) : イテレータ `[first, last)` が指す値を範囲とする`iota_view`を構築する((3)に委譲)
 
+`Bound`が[`unreachable_sentinel_t`](/reference/iterator/unreachable_sentinel_t.md)のとき、無限長の`iota_view`となる。
+
 ## 事前条件
 
 `e`が`b`から到達できるとは、`b`をn回インクリメントしたとき、`e == b`が真となるようなnが存在することをいう。
 
 - (2): `Bound`は[`unreachable_sentinel_t`](/reference/iterator/unreachable_sentinel_t.md)である。または、`Bound()`は`value`から到達できる
-- (3): `Bound`は[`unreachable_sentinel_t`](/reference/iterator/unreachable_sentinel_t.md)である。または、`Bound()`は`value`から到達できる。[`totally_ordered_with`](/reference/concepts/totally_ordered.md)`&amp;lt;W, Bound&amp;gt;`ならば、`bool(value &amp;lt;= bound)`が`true`である
+- (3): `Bound`は[`unreachable_sentinel_t`](/reference/iterator/unreachable_sentinel_t.md)である。または、`bound`は`value`から到達できる。[`totally_ordered_with`](/reference/concepts/totally_ordered.md)`&amp;lt;W, Bound&amp;gt;`ならば、`bool(value &amp;lt;= bound)`が`true`である
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is-integer-like -- 実装例を追加</title>
      <link href="https://cpprefjp.github.io/reference/iterator/is_integer_like.html"/>
      <id>ad2cae7774836306ef2a4931f4ed0cd52a3e3b58:reference/iterator/is_integer_like.md</id>
      <updated>2022-04-03T00:03:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/is_integer_like.md b/reference/iterator/is_integer_like.md
index d67494342..69505c1dc 100644
--- a/reference/iterator/is_integer_like.md
+++ b/reference/iterator/is_integer_like.md
@@ -53,6 +53,28 @@ namespace std {
 - [`numeric_limits&amp;lt;I&amp;gt;::digits10`](/reference/limits/numeric_limits/digits10.md)は`static_cast&amp;lt;int&amp;gt;(digits * log10(2))`と等しい
 - [`numeric_limits&amp;lt;I&amp;gt;::min()`](/reference/limits/numeric_limits/min.md)と[`numeric_limits&amp;lt;I&amp;gt;::max()`](/reference/limits/numeric_limits/max.md)はそれぞれ、`I`の表現可能な値の最小値と最大値を返す。[`numeric_limits&amp;lt;I&amp;gt;::lowest()`](/reference/limits/numeric_limits/lowest.md)は`numeric_limits&amp;lt;I&amp;gt;::max()`を返す。
 
+## 実装例 (MSVC)
+
+```cpp
+inline constexpr bool _Is_nonbool_integral = is_integral_v&amp;lt;_Ty&amp;gt; &amp;amp;&amp;amp; !is_same_v&amp;lt;remove_cv_t&amp;lt;_Ty&amp;gt;, bool&amp;gt;;
+
+template &amp;lt;class _Ty&amp;gt;
+inline constexpr bool _Integer_class = requires {
+  typename _Ty::_Signed_type;
+  typename _Ty::_Unsigned_type;
+};
+
+template &amp;lt;class _Ty&amp;gt;
+concept _Integer_like = _Is_nonbool_integral&amp;lt;remove_cv_t&amp;lt;_Ty&amp;gt;&amp;gt; || _Integer_class&amp;lt;_Ty&amp;gt;;
+
+template &amp;lt;class _Ty&amp;gt;
+concept _Signed_integer_like = _Integer_like&amp;lt;_Ty&amp;gt; &amp;amp;&amp;amp; static_cast&amp;lt;_Ty&amp;gt;(-1) &amp;lt; static_cast&amp;lt;_Ty&amp;gt;(0);
+```
+* is_integral_v[like /reference/type_traits/is_integral.md]
+* is_same_v[like /reference/type_traits/is_same.md]
+* remove_cv_t[like /reference/type_traits/remove_cv.md]
+
+上記の説明のうち構文的な要件を素直に実装している。MSVCでは、128ビット整数が*integer-class*型である。
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- Typo修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view/begin.html"/>
      <id>6a37e656b5b6ec67ea9b9672fabccbb52dc54b5d:reference/ranges/iota_view/begin.md</id>
      <updated>2022-04-02T15:26:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view/begin.md b/reference/ranges/iota_view/begin.md
index 59991638f..1ca5205a3 100644
--- a/reference/ranges/iota_view/begin.md
+++ b/reference/ranges/iota_view/begin.md
@@ -8,16 +8,16 @@
 ```cpp
 constexpr iterator begin() const;
 ```
-* itetator[link itetator.md]
+* iterator[link iterator.md]
 
 ## 概要
 先頭要素を指すイテレータを取得する。
 
 ## 効果
 ```cpp
-return itetator{value_};
+return iterator{value_};
 ```
-* itetator[link itetator.md]
+* iterator[link iterator.md]
 
 ただし、`value_`は`iota_view`が内部で保持する先頭の値。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- iota_viewのメンバを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>fefcb4bb07ab21530695e1f892f3f745b47eb46b:reference/ranges.md</id>
      <updated>2022-04-02T15:17:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 33a460871..e5fadd07d 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -334,6 +334,11 @@ range | adaptor(args...)
 |----------------------|----------------------------------------------------------------|----------------|
 | [`to`](ranges/to.md.nolink) | パイプライン記法でRangeからコンテナを構築する (class template) | C++23          |
 
+## 実装例
+- [libstdc++](https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/std/ranges)
+- [libc++](https://github.com/llvm/llvm-project/blob/main/libcxx/include/ranges)
+- [MSVC](https://github.com/microsoft/STL/blob/main/stl/inc/ranges)
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iota_view -- iota_viewのメンバを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view.html"/>
      <id>fefcb4bb07ab21530695e1f892f3f745b47eb46b:reference/ranges/iota_view.md</id>
      <updated>2022-04-02T15:17:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view.md b/reference/ranges/iota_view.md
index a67fea0c4..bb0db8423 100644
--- a/reference/ranges/iota_view.md
+++ b/reference/ranges/iota_view.md
@@ -56,12 +56,12 @@ namespace std::ranges {
 
 ## メンバ関数
 
-| 名前                                             | 説明                             | 対応バージョン |
-|--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](iota_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`begin`](iota_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](iota_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
-| [`size`](iota_view/size.md.nolink)                     | 有限長のとき、要素数を取得する   | C++20          |
+| 名前                                            | 説明                             | 対応バージョン |
+|-------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](iota_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`begin`](iota_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](iota_view/end.md)                       | 番兵を取得する                   | C++20          |
+| [`size`](iota_view/size.md)                     | 有限長のとき、要素数を取得する   | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -73,11 +73,23 @@ namespace std::ranges {
 | [`back`](view_interface/back.md)             | 有限長のとき、末尾要素への参照を取得する | C++20          |
 | [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                       | C++20          |
 
+## メンバ型
+
+| 名前                                      | 説明                         | 対応バージョン |
+|-------------------------------------------|------------------------------|----------------|
+| [`iterator`](iota_view/iterator.md)       | イテレータ型(説明専用)       | C++20          |
+| [`sentinel`](iota_view/sentinel.md)       | 番兵型(説明専用)             | C++20          |
+
+## その他
+| 名前                                      | 説明                         | 対応バージョン |
+|-------------------------------------------|------------------------------|----------------|
+| [`iota_diff_t`](iota_view/iota_diff_t.md) | イテレータの差の型(説明専用) | C++20          |
+
 ## 推論補助
 
-| 名前                                                  | 説明                         | 対応バージョン |
-|-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](iota_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| 名前                                                   | 説明                         | 対応バージョン |
+|--------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](iota_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
@@ -91,18 +103,85 @@ int main() {
     cout &amp;lt;&amp;lt; i;
   }
   cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
-  for (int i : views::iota(10)) {
-     cout &amp;lt;&amp;lt; i;
-     break;
+  for (int i : views::iota(1) | views::filter([](auto&amp;amp;&amp;amp; x) { return x % 3 == 0; }) | views::take(3)) {
+    cout &amp;lt;&amp;lt; i;
   }
 }
 ```
 * views::iota[color ff0000]
+* views::filter[link filter_view.md]
+* views::take[link take_view.md]
 
 ### 出力
 ```
 123456789
-10
+369
+```
+
+## 例 自作クラスを使用する
+
+```cpp
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+struct fizzbuzz_t {
+  int value_ = 0;
+  constexpr fizzbuzz_t&amp;amp; operator++(){
+    ++value_;
+    return *this;
+  }
+  constexpr fizzbuzz_t operator++(int){
+    ++value_;
+    return {value_ - 1};
+  }
+  using difference_type = int;
+  constexpr auto operator&amp;lt;=&amp;gt;(const fizzbuzz_t&amp;amp;) const = default;
+};
+
+static_assert(std::weakly_incrementable&amp;lt;fizzbuzz_t&amp;gt;);
+
+std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, fizzbuzz_t fb) {
+  if(fb.value_ % 15 == 0) {
+    return os &amp;lt;&amp;lt; &amp;#34;FizzBuzz&amp;#34;;
+  }
+  if(fb.value_ % 3 == 0) {
+    return os &amp;lt;&amp;lt; &amp;#34;Fizz&amp;#34;;
+  }
+  if(fb.value_ % 5 == 0) {
+    return os &amp;lt;&amp;lt; &amp;#34;Buzz&amp;#34;;
+  }
+  return os &amp;lt;&amp;lt; fb.value_;
+}
+
+int main()
+{
+  for(auto fb : std::views::iota(fizzbuzz_t{1}, fizzbuzz_t{16})) {
+    std::cout &amp;lt;&amp;lt; fb &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* std::weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* std::views::iota[color ff0000]
+
+### 出力
+```
+1
+2
+Fizz
+4
+Buzz
+Fizz
+7
+8
+Fizz
+Buzz
+11
+Fizz
+13
+14
+FizzBuzz
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- iota_viewのメンバを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view/begin.html"/>
      <id>fefcb4bb07ab21530695e1f892f3f745b47eb46b:reference/ranges/iota_view/begin.md</id>
      <updated>2022-04-02T15:17:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view/begin.md b/reference/ranges/iota_view/begin.md
new file mode 100644
index 000000000..59991638f
--- /dev/null
+++ b/reference/ranges/iota_view/begin.md
@@ -0,0 +1,60 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* iota_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator begin() const;
+```
+* itetator[link itetator.md]
+
+## 概要
+先頭要素を指すイテレータを取得する。
+
+## 効果
+```cpp
+return itetator{value_};
+```
+* itetator[link itetator.md]
+
+ただし、`value_`は`iota_view`が内部で保持する先頭の値。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  // .begin と .end を暗黙的に使用
+  for (int x : std::views::iota(1, 6)) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* std::views::iota[link ../iota_view.md]
+
+### 出力
+```
+1
+2
+3
+4
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- iota_viewのメンバを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view/end.html"/>
      <id>fefcb4bb07ab21530695e1f892f3f745b47eb46b:reference/ranges/iota_view/end.md</id>
      <updated>2022-04-02T15:17:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view/end.md b/reference/ranges/iota_view/end.md
new file mode 100644
index 000000000..a2b1e2bb5
--- /dev/null
+++ b/reference/ranges/iota_view/end.md
@@ -0,0 +1,74 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* iota_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end() const;                                    // (1)
+constexpr iterator end() const requires same_as&amp;lt;W, Bound&amp;gt;;     // (2)
+```
+* same_as[link /reference/concepts/same_as.md]
+* iterator[link iterator.md]
+
+## 概要
+番兵を取得する。
+
+## 効果
+
+```cpp
+// (1)
+if constexpr (same_as&amp;lt;Bound, unreachable_sentinel_t&amp;gt;)
+  return unreachable_sentinel;
+else
+  return sentinel{bound_};
+
+// (2)
+return iterator{bound_};
+```
+* same_as[link /reference/concepts/same_as.md]
+* unreachable_sentinel_t[link /reference/iterator/unreachable_sentinel_t.md]
+* unreachable_sentinel[link /reference/iterator/unreachable_sentinel_t.md]
+* sentinel[link sentinel.md]
+* iterator[link iterator.md]
+
+ただし、`bound_`は`iota_view`が内部で保持する末尾の次の値。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  // .begin と .end を暗黙的に使用
+  for (int x : std::views::iota(1, 6)) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* std::views::iota[link ../iota_view.md]
+
+### 出力
+```
+1
+2
+3
+4
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iota_diff_t -- iota_viewのメンバを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view/iota_diff_t.html"/>
      <id>fefcb4bb07ab21530695e1f892f3f745b47eb46b:reference/ranges/iota_view/iota_diff_t.md</id>
      <updated>2022-04-02T15:17:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view/iota_diff_t.md b/reference/ranges/iota_view/iota_diff_t.md
new file mode 100644
index 000000000..04a4a78a2
--- /dev/null
+++ b/reference/ranges/iota_view/iota_diff_t.md
@@ -0,0 +1,47 @@
+# iota_diff_t
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+## 概要
+
+[`iota_view`](../iota_view.md)のイテレータの差の型。
+
+このクラスの名前は規定されていない。
+
+このクラスの型を取得したい場合、[`range_difference_t`](../range_difference_t.md)を使用できる。
+
+## 定義
+
+`iota_diff_t(W)` は次のように定義される。
+
+1. `W`が整数型ではないか、`sizeof(`[`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;W&amp;gt;) &amp;gt; sizeof(W)`ならば、[`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;W&amp;gt;`
+2. それ以外の場合、そのような型が存在すれば、符号付き整数型であってその幅が`W`の幅より大きい型
+3. それ以外の場合、未規定の[符号付き整数のような型](/reference/iterator/is_integer_like.md)で、幅が`W`の幅以上の型
+
+## 実装例(MSVC)
+```cpp
+template &amp;lt;class _Ty&amp;gt;
+using _Iota_diff_t = conditional_t&amp;lt;is_integral_v&amp;lt;_Ty&amp;gt;,
+  conditional_t&amp;lt;sizeof(_Ty) &amp;lt; sizeof(int), int,
+    conditional_t&amp;lt;sizeof(_Ty) &amp;lt; sizeof(long long), long long, _Signed128&amp;gt;&amp;gt;,
+  iter_difference_t&amp;lt;_Ty&amp;gt;&amp;gt;;
+```
+* conditional_t[link /reference/type_traits/conditional.md]
+* is_integral_v[link /reference/type_traits/is_integral.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- iota_viewのメンバを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view/iterator.html"/>
      <id>fefcb4bb07ab21530695e1f892f3f745b47eb46b:reference/ranges/iota_view/iterator.md</id>
      <updated>2022-04-02T15:17:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view/iterator.md b/reference/ranges/iota_view/iterator.md
new file mode 100644
index 000000000..37473b1c2
--- /dev/null
+++ b/reference/ranges/iota_view/iterator.md
@@ -0,0 +1,209 @@
+# iterator
+* ranges[meta header]
+* std::ranges[meta namespace]
+* iota_view[meta class]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+## 概要
+
+[`iota_view`](../iota_view.md)のイテレータ。
+
+[`iota_view`](../iota_view.md)の要素型の値を1つ記憶していて、イテレータに対するインクリメントなどの演算は、そのまま内部の値への演算となる。
+
+このクラスの名前は規定されておらず、振る舞いのみが規定されている。
+
+このクラスの型を取得したい場合、[`iterator_t`](../iterator_t.md)を使用できる。
+
+
+## 実装例
+
+```cpp
+namespace std::ranges {
+
+  inline namespace details {
+    template&amp;lt;class I&amp;gt;
+    concept decrementable =
+      incrementable&amp;lt;I&amp;gt; &amp;amp;&amp;amp; requires(I i) {
+        { --i } -&amp;gt; same_as&amp;lt;I&amp;amp;&amp;gt;;
+        { i-- } -&amp;gt; same_as&amp;lt;I&amp;gt;;
+      };
+
+    template&amp;lt;class I&amp;gt;
+    concept advanceable =
+      decrementable&amp;lt;I&amp;gt; &amp;amp;&amp;amp; totally_ordered&amp;lt;I&amp;gt; &amp;amp;&amp;amp;
+      requires(I i, const I j, const iota_diff_t&amp;lt;I&amp;gt; n) {
+        { i += n } -&amp;gt; same_as&amp;lt;I&amp;amp;&amp;gt;;
+        { i -= n } -&amp;gt; same_as&amp;lt;I&amp;amp;&amp;gt;;
+        I(j + n);
+        I(n + j);
+        I(j - n);
+        { j - j } -&amp;gt; convertible_to&amp;lt;iota_diff_t&amp;lt;I&amp;gt;&amp;gt;;
+      };
+
+    template&amp;lt;class W&amp;gt;
+    constexpr auto get_iota_view_iterator_concept() {
+      if constexpr (advanceable&amp;lt;W&amp;gt;) {
+        return random_access_iterator_tag{};
+      } else if constexpr (decrementable&amp;lt;W&amp;gt;) {
+        return bidirectional_iterator_tag{};
+      } else if constexpr (incrementable&amp;lt;W&amp;gt;) {
+        return forward_iterator_tag{};
+      } else {
+        return input_iterator_tag{};
+      }
+    }
+  }
+
+  template&amp;lt;weakly_incrementable W, semiregular Bound&amp;gt;
+    requires weakly-equality-comparable-with&amp;lt;W, Bound&amp;gt;
+  struct iota_view&amp;lt;W, Bound&amp;gt;::iterator {
+  private:
+    W value_ = W();
+  public:
+    using iterator_concept = decltype(get_iota_view_iterator_concept());
+    using iterator_category = input_iterator_tag;
+    using value_type = W;
+    using difference_type = iota_diff_t&amp;lt;W&amp;gt;;
+
+    iterator() = default;
+    constexpr explicit iterator(W value) : value_(value) {
+    }
+
+    constexpr W operator*() const noexcept(is_nothrow_copy_constructible_v&amp;lt;W&amp;gt;) {
+      return value_;
+    }
+
+    constexpr iterator&amp;amp; operator++() {
+      ++value_;
+      return *this;
+    }
+
+    constexpr void operator++(int) {
+      ++*this;
+    }
+
+    constexpr iterator operator++(int) requires incrementable&amp;lt;W&amp;gt; {
+      auto tmp = *this;
+      ++*this;
+      return tmp;
+    }
+
+    constexpr iterator&amp;amp; operator--() requires decrementable&amp;lt;W&amp;gt; {
+      --value_;
+      return *this;
+    }
+
+    constexpr iterator operator--(int) requires decrementable&amp;lt;W&amp;gt; {
+      auto tmp = *this;
+      --*this;
+      return tmp;
+    }
+
+    constexpr iterator&amp;amp; operator+=(difference_type n) requires advanceable&amp;lt;W&amp;gt; {
+      if constexpr (is-integer-like&amp;lt;W&amp;gt; &amp;amp;&amp;amp; !is-signed-integer-like&amp;lt;W&amp;gt;) {
+        if (n &amp;gt;= difference_type(0))
+          value_ += static_cast&amp;lt;W&amp;gt;(n);
+        else
+          value_ -= static_cast&amp;lt;W&amp;gt;(-n);
+      } else {
+        value_ += n;
+      }
+      return *this;
+    }
+
+    constexpr iterator&amp;amp; operator-=(difference_type n) requires advanceable&amp;lt;W&amp;gt; {
+      if constexpr (is-integer-like&amp;lt;W&amp;gt; &amp;amp;&amp;amp; !is-signed-integer-like&amp;lt;W&amp;gt;) {
+        if (n &amp;gt;= difference_type(0))
+          value_ -= static_cast&amp;lt;W&amp;gt;(n);
+        else
+          value_ += static_cast&amp;lt;W&amp;gt;(-n);
+      } else {
+        value_ -= n;
+      }
+      return *this;
+    }
+
+    constexpr W operator[](difference_type n) const requires advanceable&amp;lt;W&amp;gt; {
+      return W(value_ + n);
+    }
+
+    friend constexpr bool operator==(const iterator&amp;amp; x, const iterator&amp;amp; y) requires equality_comparable&amp;lt;W&amp;gt; {
+      return x.value_ == y.value_;
+    }
+
+    friend constexpr bool operator&amp;lt;(const iterator&amp;amp; x, const iterator&amp;amp; y) requires totally_ordered&amp;lt;W&amp;gt; {
+      return x.value_ &amp;lt; y.value_;
+    }
+
+    friend constexpr bool operator&amp;gt;(const iterator&amp;amp; x, const iterator&amp;amp; y) requires totally_ordered&amp;lt;W&amp;gt; {
+      return return y &amp;lt; x;
+    }
+
+    friend constexpr bool operator&amp;lt;=(const iterator&amp;amp; x, const iterator&amp;amp; y) requires totally_ordered&amp;lt;W&amp;gt; {
+      return !(y &amp;lt; x);
+    }
+
+    friend constexpr bool operator&amp;gt;=(const iterator&amp;amp; x, const iterator&amp;amp; y) requires totally_ordered&amp;lt;W&amp;gt; {
+      return !(x &amp;lt; y);
+    }
+
+    friend constexpr auto operator&amp;lt;=&amp;gt;(const iterator&amp;amp; x, const iterator&amp;amp; y) requires totally_ordered&amp;lt;W&amp;gt; &amp;amp;&amp;amp; three_way_comparable&amp;lt;W&amp;gt; {
+      return x.value_ &amp;lt;=&amp;gt; y.value_;
+    }
+
+    friend constexpr iterator operator+(iterator i, difference_type n) requires advanceable&amp;lt;W&amp;gt; {
+      return i += n;
+    }
+
+    friend constexpr iterator operator+(difference_type n, iterator i) requires advanceable&amp;lt;W&amp;gt; {
+      return i + n;
+    }
+
+    friend constexpr iterator operator-(iterator i, difference_type n) requires advanceable&amp;lt;W&amp;gt; {
+      return i -= n;
+    }
+
+    friend constexpr difference_type operator-(const iterator&amp;amp; x, const iterator&amp;amp; y) requires advanceable&amp;lt;W&amp;gt; {
+      using D = difference_type;
+      if constexpr (is-integer-like&amp;lt;W&amp;gt;) {
+        if constexpr (is-signed-integer-like&amp;lt;W&amp;gt;) {
+          return D(D(x.value_) - D(y.value_));
+        } else {
+          return (y.value_ &amp;gt; x.value_)
+            ? D(-D(y.value_ - x.value_))
+            : D(x.value_ - y.value_);
+        }
+      } else {
+        return x.value_ - y.value_;
+      }
+    }
+  };
+}
+```
+* iota_diff_t[link iota_diff_t.md]
+* iota_view[link ../iota_view.md]
+* is-integer-like[link /reference/iterator/is_integer_like.md]
+* is-signed-integer-like[link /reference/iterator/is_integer_like.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* incrementable[link /reference/iterator/incrementable.md]
+* semiregular[link /reference/concepts/semiregular.md]
+* totally_ordered[link /reference/concepts/totally_ordered.md]
+* three_way_comparable[link /reference/compare/three_way_comparable.md]
+* is_nothrow_copy_constructible_v[link /reference/type_traits/is_nothrow_copy_constructible.md]
+* unreachable_sentinel_t[link /reference/iterator/unreachable_sentinel_t.md]
+* weakly-equality-comparable-with[link /reference/concepts/equality_comparable.md]
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- iota_viewのメンバを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view/op_constructor.html"/>
      <id>fefcb4bb07ab21530695e1f892f3f745b47eb46b:reference/ranges/iota_view/op_constructor.md</id>
      <updated>2022-04-02T15:17:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view/op_constructor.md b/reference/ranges/iota_view/op_constructor.md
new file mode 100644
index 000000000..8c49f35cc
--- /dev/null
+++ b/reference/ranges/iota_view/op_constructor.md
@@ -0,0 +1,81 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* iota_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+// (1)
+iota_view() = default;
+
+// (2)
+constexpr explicit iota_view(W value);
+
+// (3)
+constexpr iota_view(type_identity_t&amp;lt;W&amp;gt; value, type_identity_t&amp;lt;Bound&amp;gt; bound);
+
+// (4)
+constexpr iota_view(iterator first, sentinel last);
+```
+* iota_view[link ../iota_view.md]
+* type_identity_t[link /reference/type_traits/type_identity.md]
+* iterator[link iterator.md]
+* sentinel[link sentinel.md]
+
+## 概要
+- (1) : `[W(), Bound())` を範囲とする`iota_view`を構築する
+- (2) : `Bound`が`unreachable_sentinel_t`のとき、`value`から始まる無限長の`iota_view`を構築する。それ以外のとき、`[value, Bound())` を範囲とする`iota_view`を構築する
+- (3) : `[value, bound)` を範囲とする`iota_view`を構築する
+- (4) : イテレータ `[first, last)` が指す値を範囲とする`iota_view`を構築する((3)に委譲)
+
+## 事前条件
+
+`e`が`b`から到達できるとは、`b`をn回インクリメントしたとき、`e == b`が真となるようなnが存在することをいう。
+
+- (2): `Bound`は[`unreachable_sentinel_t`](/reference/iterator/unreachable_sentinel_t.md)である。または、`Bound()`は`value`から到達できる
+- (3): `Bound`は[`unreachable_sentinel_t`](/reference/iterator/unreachable_sentinel_t.md)である。または、`Bound()`は`value`から到達できる。[`totally_ordered_with`](/reference/concepts/totally_ordered.md)`&amp;lt;W, Bound&amp;gt;`ならば、`bool(value &amp;lt;= bound)`が`true`である
+
+## 効果
+
+`iota_view`が内部で保持する先頭と終端の値を引数で初期化する。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+
+int main()
+{
+  // 無限長
+  constexpr std::ranges::iota_view iota1{0};
+  static_assert(not std::ranges::sized_range&amp;lt;decltype(iota1)&amp;gt;);
+  static_assert(iota1.front() == 0);
+
+  // 1引数だが、Boundがintなので、範囲は [-5, int()) すなわち [-5, 0) となり有限長
+  constexpr std::ranges::iota_view&amp;lt;int, int&amp;gt; iota2{-5};
+  static_assert(std::ranges::size(iota2) == 5);
+
+  // iota_viewの部分範囲
+  constexpr std::ranges::iota_view iota3{0, 10};
+  constexpr decltype(iota3) sub{iota3.begin() + 3, iota3.end()};
+  static_assert(sub.front() == 3);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- iota_viewのメンバを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view/op_deduction_guide.html"/>
      <id>fefcb4bb07ab21530695e1f892f3f745b47eb46b:reference/ranges/iota_view/op_deduction_guide.md</id>
      <updated>2022-04-02T15:17:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view/op_deduction_guide.md b/reference/ranges/iota_view/op_deduction_guide.md
new file mode 100644
index 000000000..c337e2bf7
--- /dev/null
+++ b/reference/ranges/iota_view/op_deduction_guide.md
@@ -0,0 +1,59 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class W, class Bound&amp;gt;
+    requires (!is-integer-like&amp;lt;W&amp;gt; || !is-integer-like&amp;lt;Bound&amp;gt; ||
+              (is-signed-integer-like&amp;lt;W&amp;gt; == is-signed-integer-like&amp;lt;Bound&amp;gt;))
+  iota_view(W, Bound) -&amp;gt; iota_view&amp;lt;W, Bound&amp;gt;;
+}
+```
+* iota_view[link ../iota_view.md]
+* is-integer-like[link /reference/iterator/is_integer_like.md]
+* is-signed-integer-like[link /reference/iterator/is_integer_like.md]
+
+## 概要
+[`iota_view`](../iota_view.md)クラステンプレートの型推論補助。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main()
+{
+  std::ranges::iota_view iota{0, 10};
+  static_assert(std::same_as&amp;lt;
+    decltype(iota),
+    std::ranges::iota_view&amp;lt;int, int&amp;gt;
+  &amp;gt;);
+}
+```
+* std::ranges::iota_view[link ../iota_view.md]
+* std::same_as[link /reference/concepts/same_as.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 関連項目
+- [C++17 クラステンプレートのテンプレート引数推論](/lang/cpp17/type_deduction_for_class_templates.md)
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sentinel -- iota_viewのメンバを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view/sentinel.html"/>
      <id>fefcb4bb07ab21530695e1f892f3f745b47eb46b:reference/ranges/iota_view/sentinel.md</id>
      <updated>2022-04-02T15:17:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view/sentinel.md b/reference/ranges/iota_view/sentinel.md
new file mode 100644
index 000000000..01b83187a
--- /dev/null
+++ b/reference/ranges/iota_view/sentinel.md
@@ -0,0 +1,68 @@
+# sentinel
+* ranges[meta header]
+* std::ranges[meta namespace]
+* iota_view[meta class]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+## 概要
+
+[`iota_view`](../iota_view.md)が有限長かつ[`common_range`](../common_range.md)ではない場合の番兵型。
+
+[`iota_view`](../iota_view.md)の終端要素型の値を1つ記憶していて、比較演算は内部の値同士の比較となる。
+
+このクラスの名前は規定されておらず、振る舞いのみが規定されている。
+
+このクラスの型を取得したい場合、[`sentinel_t`](../iterator_t.md)を使用できる。
+
+なお、[`iota_view`](../iota_view.md)の番兵型は、無限長のときは[`unreachable_sentinel_t`](/reference/iterator/unreachable_sentinel_t.md)、有限長で[`common_range`](../common_range.md)のときは[`iterator`](iterator.md)である。
+
+## 実装例
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;weakly_incrementable W, semiregular Bound&amp;gt;
+    requires weakly-equality-comparable-with&amp;lt;W, Bound&amp;gt;
+  struct iota_view&amp;lt;W, Bound&amp;gt;::sentinel {
+  private:
+    Bound bound_ = Bound();
+  public:
+    sentinel() = default;
+    constexpr explicit sentinel(Bound bound): bound_{bound} {
+    }
+
+    friend constexpr bool operator==(const iterator&amp;amp; x, const sentinel&amp;amp; y) {
+      return x.value_ == y.bound_;
+    }
+
+    friend constexpr iter_difference_t&amp;lt;W&amp;gt; operator-(const iterator&amp;amp; x, const sentinel&amp;amp; y) requires sized_sentinel_for&amp;lt;Bound, W&amp;gt; {
+      return x.value_ - y.bound_;
+    }
+
+    friend constexpr iter_difference_t&amp;lt;W&amp;gt; operator-(const sentinel&amp;amp; x, const iterator&amp;amp; y) requires sized_sentinel_for&amp;lt;Bound, W&amp;gt; {
+      return -(y - x);
+    }
+  };
+}
+```
+* iterator[link iterator.md]
+* iota_view[link ../iota_view.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* semiregular[link /reference/concepts/semiregular.md]
+* weakly-equality-comparable-with[link /reference/concepts/equality_comparable.md]
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- iota_viewのメンバを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/iota_view/size.html"/>
      <id>fefcb4bb07ab21530695e1f892f3f745b47eb46b:reference/ranges/iota_view/size.md</id>
      <updated>2022-04-02T15:17:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/iota_view/size.md b/reference/ranges/iota_view/size.md
new file mode 100644
index 000000000..20cf7f485
--- /dev/null
+++ b/reference/ranges/iota_view/size.md
@@ -0,0 +1,67 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* iota_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto size() const
+  requires (same_as&amp;lt;W, Bound&amp;gt; &amp;amp;&amp;amp; advanceable&amp;lt;W&amp;gt;) || (integral&amp;lt;W&amp;gt; &amp;amp;&amp;amp; integral&amp;lt;Bound&amp;gt;) || sized_sentinel_for&amp;lt;Bound, W&amp;gt;;
+```
+* same_as[link /reference/concepts/same_as.md]
+* integral[link /reference/concepts/same_as.md]
+* advanceable[italic][link iterator.md]
+* sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
+
+## 概要
+[`iota_view`](../iota_view.md)の大きさを取得する。
+
+この関数は、[`iota_view`](../iota_view.md)が[`sized_range`](../sized_range.md)のときのみオーバーロード解決に参加する。
+
+## 効果
+
+```cpp
+if constexpr (is-integer-like&amp;lt;W&amp;gt; &amp;amp;&amp;amp; is-integer-like&amp;lt;Bound&amp;gt;)
+  return (value_ &amp;lt; 0)
+    ? ((bound_ &amp;lt; 0)
+      ? to-unsigned-like(-value_) - to-unsigned-like(-bound_)
+      : to-unsigned-like(bound_) + to-unsigned-like(-value_))
+    : to-unsigned-like(bound_) - to-unsigned-like(value_);
+else
+  return to-unsigned-like(bound_ - value_);
+```
+* to-unsigned-like[italic]
+* is-integer-like[link /reference/iterator/is_integer_like.md]
+
+`to-unsigned-like`は、処理系定義の型(例えば128ビット整数など)も含めて、符号なし整数へ変換する説明専用の関数。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+
+int main()
+{
+  constexpr std::ranges::iota_view iota{0, 5};
+  static_assert(iota.size() == 5);
+  static_assert(std::same_as&amp;lt;decltype(iota.size()), unsigned int&amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-= -- Merge pull request #961 from cpprefjp/fix_typos</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic/op_minus_assign.html"/>
      <id>cc1a01506b1935c0f6935f9ed04cdf627c31f618:reference/atomic/atomic/op_minus_assign.md</id>
      <updated>2022-03-30T21:06:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic/op_minus_assign.md b/reference/atomic/atomic/op_minus_assign.md
index 353b2c194..45302ce31 100644
--- a/reference/atomic/atomic/op_minus_assign.md
+++ b/reference/atomic/atomic/op_minus_assign.md
@@ -23,7 +23,7 @@ T operator-=(T operand) noexcept;          // (2) C++11
 以下と等価の式により、演算結果の値が返る：
 
 ```cpp
-return fetch_sub(operand) + operand;
+return fetch_sub(operand) - operand;
 ```
 * fetch_sub[link fetch_sub.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #961 from cpprefjp/fix_typos</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_constructor.html"/>
      <id>cc1a01506b1935c0f6935f9ed04cdf627c31f618:reference/bitset/bitset/op_constructor.md</id>
      <updated>2022-03-30T21:06:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_constructor.md b/reference/bitset/bitset/op_constructor.md
index 63a797e0d..a21dae1a6 100644
--- a/reference/bitset/bitset/op_constructor.md
+++ b/reference/bitset/bitset/op_constructor.md
@@ -67,7 +67,7 @@ bitset(
 - (3) : `pos &amp;gt; str.`[`size()`](/reference/string/basic_string/size.md)の場合、[`out_of_range`](/reference/stdexcept.md)例外を送出する。
 	- C++03 : `str`に`&amp;#39;0&amp;#39;`と`&amp;#39;1&amp;#39;`以外の文字が含まれていた場合、[`invalid_argument`](/reference/stdexcept.md)例外を送出する。
 	- C++11 : `str`に`zero`と`one`以外の文字が含まれていた場合、[`invalid_argument`](/reference/stdexcept.md)例外を送出する。
-
+- (4) : `str`に`zero`と`one`以外の文字が含まれていた場合、[`invalid_argument`](/reference/stdexcept.md)例外を送出する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- Merge pull request #961 from cpprefjp/fix_typos</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/op_less.html"/>
      <id>cc1a01506b1935c0f6935f9ed04cdf627c31f618:reference/memory/shared_ptr/op_less.md</id>
      <updated>2022-03-30T21:06:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/op_less.md b/reference/memory/shared_ptr/op_less.md
index e560fdf93..bf4b160eb 100644
--- a/reference/memory/shared_ptr/op_less.md
+++ b/reference/memory/shared_ptr/op_less.md
@@ -26,8 +26,8 @@ namespace std {
 
 ## 戻り値
 - (1)
-    - C++11 : [`std::common_type`](/reference/type_traits/common_type.md)`&amp;lt;T*, U*&amp;gt;::type`を、`a`と`b`が持つポインタの共通の型`CT`とし、[`std::less`](/reference/functional/less.md)`&amp;lt;CT&amp;gt;(a.`[`get()`](get.md), b.`[`get()`](get.md)`)`で比較した結果を返す。
-    - C++17 :[`std::less`](/reference/functional/less.md)`&amp;lt;&amp;gt;(a.`[`get()`](get.md), b.`[`get()`](get.md)`)`で比較した結果を返す。
+    - C++11 : [`std::common_type`](/reference/type_traits/common_type.md)`&amp;lt;T*, U*&amp;gt;::type`を、`a`と`b`が持つポインタの共通の型`CT`とし、[`std::less`](/reference/functional/less.md)`&amp;lt;CT&amp;gt;(a.`[`get()`](get.md)`, b.`[`get()`](get.md)`)`で比較した結果を返す。
+    - C++17 :[`std::less`](/reference/functional/less.md)`&amp;lt;&amp;gt;(a.`[`get()`](get.md)`, b.`[`get()`](get.md)`)`で比較した結果を返す。
 - (2)
     - C++11 : [`std::less`](/reference/functional/less.md)`&amp;lt;T*&amp;gt;()(x.`[`get()`](get.md)`, nullptr)`で比較した結果を返す。
     - C++17 : [`std::less`](/reference/functional/less.md)`&amp;lt;typename shared_ptr&amp;lt;T&amp;gt;::element_type*&amp;gt;()(x.`[`get()`](get.md)`, nullptr)`で比較した結果を返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- Merge pull request #961 from cpprefjp/fix_typos</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_less.html"/>
      <id>cc1a01506b1935c0f6935f9ed04cdf627c31f618:reference/memory/unique_ptr/op_less.md</id>
      <updated>2022-03-30T21:06:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_less.md b/reference/memory/unique_ptr/op_less.md
index 080e0fcf5..f70eafa83 100644
--- a/reference/memory/unique_ptr/op_less.md
+++ b/reference/memory/unique_ptr/op_less.md
@@ -25,7 +25,7 @@ namespace std {
 
 
 ## 戻り値
-- (1) : [`std::common_type`](/reference/type_traits/common_type.md)`&amp;lt;unique_ptr&amp;lt;T1, D1&amp;gt;::pointer, unique_ptr&amp;lt;T2, D2&amp;gt;::pointer&amp;gt;::type`を、`a`と`b`が持つポインタの共通の型`CT`とし、[`std::less`](/reference/functional/less.md)`&amp;lt;CT&amp;gt;(a.`[`get()`](get.md), b.`[`get()`](get.md)`)`で比較した結果を返す。
+- (1) : [`std::common_type`](/reference/type_traits/common_type.md)`&amp;lt;unique_ptr&amp;lt;T1, D1&amp;gt;::pointer, unique_ptr&amp;lt;T2, D2&amp;gt;::pointer&amp;gt;::type`を、`a`と`b`が持つポインタの共通の型`CT`とし、[`std::less`](/reference/functional/less.md)`&amp;lt;CT&amp;gt;(a.`[`get()`](get.md)`, b.`[`get()`](get.md)`)`で比較した結果を返す。
 
 - (2) : [`std::less`](/reference/functional/less.md)`&amp;lt;unique_ptr&amp;lt;T, D&amp;gt;::pointer&amp;gt;()(x.`[`get()`](get.md)`, nullptr)`で比較した結果を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
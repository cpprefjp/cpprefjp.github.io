<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-07-19T09:48:18.578889</updated>
  <id>ce7dbbcf-1d38-44d0-9a46-3e6a21913e03</id>

  
    <entry>
      <title>convertible_to -- convertible_to : 意味論要件を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/convertible_to.html"/>
      <id>6360867a1f9b313a4b4f84bc8b75a231bfd341ea:reference/concepts/convertible_to.md</id>
      <updated>2022-07-19T18:42:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/convertible_to.md b/reference/concepts/convertible_to.md
index 1b4a82011..b6be42623 100644
--- a/reference/concepts/convertible_to.md
+++ b/reference/concepts/convertible_to.md
@@ -25,28 +25,27 @@ namespace std {
 
 ## モデル
 
-`FromR = add_rvalue_reference_t&amp;lt;From&amp;gt;`として、説明のための関数`test(), f()`を以下のように定義、宣言する。
+`FromR = add_rvalue_reference_t&amp;lt;From&amp;gt;`として、説明のための関数`test()`を以下のように定義する。
 
 ```cpp
-To test(FromR (&amp;amp;func)()) {
-  return func();
+To test(FromR (&amp;amp;f)()) {
+  return f();
 }
-
-FromR f();
 ```
 
-この`test()`関数、型`FromR, To`及び、[等しさを保持](/reference/concepts.md)し`FromR`型を返す引数なしの関数`f`について、以下の条件を満たす場合に限って型`From, To`は`convertible_to`のモデルである。
+この`f`は引数をとらず`FromR`を返す関数であり、`f()`の呼び出しは[等しさを保持](/reference/concepts.md)する。
+
+この`test()`と`FromR, To`について、以下の条件を満たす場合に限って型`From, To`は`convertible_to`のモデルである。
 
 - 次のどちらかを満たす
     - `To`は[オブジェクト型](/reference/type_traits/is_object.md)でもオブジェクトへの参照型でもない
     - `static_cast&amp;lt;To&amp;gt;(f())`と`test(f)`は等しい
-- 次のいずれかを満たす
-    - `FromR`はオブジェクトへの参照型ではない
-    - `FromR`が非`const`右辺値参照型の場合、`f()`の呼び出しによって参照されるオブジェクトの状態は、上記の式の実行の後でも有効だが未規定となる
+- `FromR`がオブジェクトへの参照型ではない場合、次のどちらかを満たす
+    - `FromR`が非`const`右辺値参照型の場合、`f()`の呼び出しによって参照されるオブジェクトの状態は、上記の式の実行の後で有効だが未規定となる
         - 標準ライブラリの型のオブジェクトは特に指定がない場合、ムーブされた後の状態は有効だが未規定となる
-    - `f()`の呼び出しによって参照されるオブジェクトは上記の式の実行によって変更されない
+    - それ以外の場合、`f()`の呼び出しによって参照されるオブジェクトは上記の式の実行によって変更されない
 
-2つ目のor条件列に出てくる「上記の式」とは、`static_cast&amp;lt;To&amp;gt;(f())`と`test(f)`のこと。
+2つ目の条件内に出てくる「上記の式」とは、`static_cast&amp;lt;To&amp;gt;(f())`と`test(f)`のこと。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- path::operator== : equivalentについて追記</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/path/op_equal.html"/>
      <id>8916c59afde174e282c65bc803f0e9a4c5b745a3:reference/filesystem/path/op_equal.md</id>
      <updated>2022-07-19T17:10:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/path/op_equal.md b/reference/filesystem/path/op_equal.md
index ee2ebe1c8..8f8b81b79 100644
--- a/reference/filesystem/path/op_equal.md
+++ b/reference/filesystem/path/op_equal.md
@@ -23,6 +23,7 @@ return !(lhs &amp;lt; rhs) &amp;amp;&amp;amp; !(rhs &amp;lt; lhs);
 ## 備考
 `lhs.`[`compare`](compare.md)`(rhs) == 0`と等価
 
+この演算子はパス要素列の等価性を判定するため、パスが意味的に同一かどうかを判定することはできない。パス文字列の意味的な等価性判定には、[filesystem::equivalent()](/reference/filesystem/equivalent.md)を使用する。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>totally_ordered -- totally_ordered : 意味論要件の修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/totally_ordered.html"/>
      <id>6815142e2ef7142c9f9e1508a29307e5e422735e:reference/concepts/totally_ordered.md</id>
      <updated>2022-07-19T13:00:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/totally_ordered.md b/reference/concepts/totally_ordered.md
index ce7eb1bbe..2bacae631 100644
--- a/reference/concepts/totally_ordered.md
+++ b/reference/concepts/totally_ordered.md
@@ -38,7 +38,6 @@ namespace std {
 - (1) : `const remove_reference_t&amp;lt;T&amp;gt;`型の左辺値`a, b, c`について次の条件を満たす場合に限って、型`T`は`totally_ordered`のモデルである。
     - `bool(a &amp;lt; b)`、`bool(a &amp;gt; b)`、`bool(a == b)`はいずれか1つだけが`true`となる
     - `bool(a &amp;lt; b)`かつ`bool(b &amp;lt; c)`ならば、`bool(a &amp;lt; c)`
-    - `bool(a &amp;gt; b) == bool(b &amp;lt; a)`が`true`であること
     - `bool(a &amp;lt;= b) == !bool(b &amp;lt; a)`が`true`であること
     - `bool(a &amp;gt;= b) == !bool(a &amp;lt; b)`が`true`であること
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assignable_from -- assignable_from : 間違いを訂正と追記</title>
      <link href="https://cpprefjp.github.io/reference/concepts/assignable_from.html"/>
      <id>b77a069a7043bb64b41c3356a803fc62c63afb3c:reference/concepts/assignable_from.md</id>
      <updated>2022-07-18T16:53:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/assignable_from.md b/reference/concepts/assignable_from.md
index 256e22170..7c27d2213 100644
--- a/reference/concepts/assignable_from.md
+++ b/reference/concepts/assignable_from.md
@@ -26,19 +26,21 @@ namespace std {
 
 ## モデル
 
-まず、`lhs`を`decltype((lhs))`が`LHS`であるような`lcopy`オブジェクトを参照する左辺値、`rhs`を`decltype((rhs))`が`RHS`であるような式、`rcopy`を`rhs`と等値な個別のオブジェクトとして定義する。
+まず、`lhs`を`decltype((lhs))`が`LHS`であるような`lcopy`オブジェクトを参照する左辺値（参照）、`rhs`を`decltype((rhs))`が`RHS`であるような式、`rcopy`を`rhs`と等値な別のオブジェクトとして定義する。
 
 これらの`lhs, rhs, lcopy, rcopy`について、以下の条件を満たす場合に限って、型`LHS, RHS`は`assignable_from`のモデルである。
 
 - [`addressof`](/reference/memory/addressof.md)`(lhs = rhs) == `[`addressof`](/reference/memory/addressof.md)`(lcopy)`となる
-- `lhs = rhs;`という式の評価の後で以下のいずれかのことが成り立っている
-    - `rhs`が`lcopy`を参照する非`const` *xvalue*でないならば
+- `lhs = rhs;`という式の評価の後で以下のことが成り立っている
+    - `rhs`が`lcopy`を参照する非`const` *xvalue*でない（ムーブが起こる自己代入ではない）場合
         - `lhs`は`rcopy`と等値である
     - `rhs`が非`const` *xvalue*ならば
         - `rhs`が参照するオブジェクトの状態は有効だが未規定
     - それ以外の場合で、`rhs`が*glvalue*ならば
         - `rhs`が参照するオブジェクトは変更されない
 
+`rhs`が*prvalue*の場合、2つめの条件のいずれにも該当しない。これはコピー省略等の最適化を考慮したものである。
+
 ## 備考
 
 代入操作では、引数型の一部の値が本コンセプトが要求する構文・意味論的制約を必ずしも満たしていなくても構わない。特に、あるオブジェクト`x`への代入操作によって別のオブジェクト`y`が変更される時、`x, y`はその場合の`=`の定義域に含まれない事がある。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>same_as -- same_as : fix typo</title>
      <link href="https://cpprefjp.github.io/reference/concepts/same_as.html"/>
      <id>252847055fcca10a9407e00642e4ae8d4b9a80c8:reference/concepts/same_as.md</id>
      <updated>2022-07-17T17:27:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/same_as.md b/reference/concepts/same_as.md
index 8e7e756ad..ed7053b3d 100644
--- a/reference/concepts/same_as.md
+++ b/reference/concepts/same_as.md
@@ -30,7 +30,7 @@ concept same-as-impl = is_same_v&amp;lt;T, U&amp;gt;;
 
 ```cpp
 template &amp;lt;class T, class U&amp;gt;
-concept C = same-as-impl&amp;lt;T, U&amp;gt; &amp;amp;&amp;amp; same-as-impl&amp;lt;U, T&amp;gt;;
+concept same_as = same-as-impl&amp;lt;T, U&amp;gt; &amp;amp;&amp;amp; same-as-impl&amp;lt;U, T&amp;gt;;
 ```
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
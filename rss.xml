<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-05-23T18:04:01.384070</updated>
  <id>f77e4894-4a8b-4ee1-8c04-6b4199b3a677</id>

  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>8aab7698e2911eb03078316fbc0198cfaea98b7c:lang/cpp20/modules.md</id>
      <updated>2021-05-24T02:59:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 073b333ed..04dd4e08e 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -239,8 +239,8 @@ export {
 
 C++20では、新たにモジュールリンケージが追加された。
 
+* エクスポートしている名前は外部リンケージを持つ。
 * 名前のあるモジュールに属していてエクスポートしていない名前は、モジュールリンケージを持つ。
-    * エクスポートしている名前は外部リンケージを持つ。
 * モジュールリンケージを持つ名前は、同一モジュール内で参照できる。
 
 ### インポート
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>3e5362a9044ef243a7e723def5ddcda0be51dc8a:lang/cpp20/modules.md</id>
      <updated>2021-05-24T02:53:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index aa8b95f6f..073b333ed 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -253,7 +253,7 @@ import lib; // libのインポート
 
 モジュールインポート宣言は、モジュールのインターフェースユニットをインポートする。
 
-- モジュール実装ユニットはモジュールインターフェースユニットを暗黙的にインポートする。ソースファイルと同名のヘッダーファイルをインクルードすることは多いが、これを自動化したものである。
+- モジュール本体の実装ユニットはプライマリーモジュールインターフェースユニットを暗黙的にインポートする。ソースファイルと同名のヘッダーファイルをインクルードすることは多いが、これを自動化したものである。
 
 インポートされた翻訳単位でエクスポートされている名前は、インポート宣言を記述した翻訳単位において**可視**(visible)となる。
 名前が可視であるとき、かつそのときに限り、名前は名前探索の候補となる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cout -- chore(cout): use archive URL</title>
      <link href="https://cpprefjp.github.io/reference/iostream/cout.html"/>
      <id>2f81026abfb8140518f84a4d581e58cd01798c97:reference/iostream/cout.md</id>
      <updated>2021-05-24T01:16:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iostream/cout.md b/reference/iostream/cout.md
index 5d8b1e527..ed878e357 100644
--- a/reference/iostream/cout.md
+++ b/reference/iostream/cout.md
@@ -109,7 +109,7 @@ Windowsでは`wchar_t`型といえばUTF-16でエンコードされた文字を
 ## 参照
 
 - [使用できるロケール文字列](../../article/platform/locales.md)
-- [標準出力に書き込む | 株式会社きじねこ](http://www.kijineko.co.jp/tech/cppsamples/stdout.html)
+- [標準出力に書き込む | 株式会社きじねこ](https://web.archive.org/web/20191011112040/http://www.kijineko.co.jp/tech/cppsamples/stdout.html)
 - [c++で日本語の処理（ロケール周り） 7/8追記 - nullnull7の日記](http://nullnull.hatenablog.com/entry/20120629/1340935277)
 - [std::locale constructor modifies global locale via &amp;#34;setlocale()&amp;#34; | Microsoft Connect](http://web.archive.org/web/20100328154628/http://connect.microsoft.com:80/VisualStudio/feedback/details/492128/std-locale-constructor-modifies-global-locale-via-setlocale)
 - [ASCII.jp：Windows 10に“まとも”に使えるコンソール「WindowsTerminal」が登場する (2/2)](https://ascii.jp/elem/000/001/868/1868623/2/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>iリテラル -- iリテラルの引数名を明記</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/op_i.html"/>
      <id>bb064cc055dbd658437963cfa115b0c14b0ac16b:reference/complex/complex/op_i.md</id>
      <updated>2021-05-22T15:11:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/op_i.md b/reference/complex/complex/op_i.md
index b9bd97317..cc4da8f72 100644
--- a/reference/complex/complex/op_i.md
+++ b/reference/complex/complex/op_i.md
@@ -8,9 +8,9 @@
 namespace std {
 inline namespace literals {
 inline namespace complex_literals {
-  constexpr complex&amp;lt;double&amp;gt; operator&amp;#34;&amp;#34;i(long double);
+  constexpr complex&amp;lt;double&amp;gt; operator&amp;#34;&amp;#34;i(long double d);
 
-  constexpr complex&amp;lt;double&amp;gt; operator&amp;#34;&amp;#34;i(unsigned long long);
+  constexpr complex&amp;lt;double&amp;gt; operator&amp;#34;&amp;#34;i(unsigned long long d);
 }}}
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Toshinori Tsuboi</name>
        <email>ikamat.kmr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>polymorphic_allocator -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator.html"/>
      <id>df189fefabbf261cdb312b8f2ec0f575d2611b57:reference/memory_resource/polymorphic_allocator.md</id>
      <updated>2021-05-22T03:28:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator.md b/reference/memory_resource/polymorphic_allocator.md
index b1a2e7c4d..bdaa26a6c 100644
--- a/reference/memory_resource/polymorphic_allocator.md
+++ b/reference/memory_resource/polymorphic_allocator.md
@@ -86,7 +86,7 @@ C++20にてC++プログラミングにおいての基礎部品となる型（*vo
 ## 参照
 - [C++1z 多相アロケータとメモリプール - Faith and Brave - C++で遊ぼう ](https://faithandbrave.hateblo.jp/entry/2016/08/08/170454)
 - [memory_resourceについて - 本の虫](https://cpplover.blogspot.com/2015/09/memoryresource.html)
-- [Polymorphic Allocator in C++17 - Qita](https://qiita.com/MitsutakaTakeda/items/48980faa9498c46b15b2)
+- [Polymorphic Allocator in C++17 - Qiita](https://qiita.com/MitsutakaTakeda/items/48980faa9498c46b15b2)
 - [P0220R1 Adopt Library Fundamentals V1 TS Components for C++17 (R1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html)
 - [P0337r0 | Delete operator= for polymorphic_allocator](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0337r0.html)
 - [Working Draft, C++ Extensions for Library Fundamentals, Version 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4562.html#memory.resource.synop)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Kisaragi</name>
        <email>48310258+KisaragiEffective@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
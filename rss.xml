<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-05-28T05:41:33.768556</updated>
  <id>35030ec7-10b0-4ace-93c0-856ec33f159a</id>

  
    <entry>
      <title>uniform_random_bit_generator -- uniform_random_bit_generator : コード修飾修正</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_random_bit_generator.html"/>
      <id>f7c4382addebf189bd2541054b34b541265f1591:reference/random/uniform_random_bit_generator.md</id>
      <updated>2020-05-28T14:37:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_random_bit_generator.md b/reference/random/uniform_random_bit_generator.md
index 1fad92140..31ce03450 100644
--- a/reference/random/uniform_random_bit_generator.md
+++ b/reference/random/uniform_random_bit_generator.md
@@ -62,7 +62,7 @@ int main() {
   f&amp;lt;std::exponential_distribution&amp;lt;&amp;gt;&amp;gt;(&amp;#34;std::exponential_distribution&amp;lt;&amp;gt;&amp;#34;);
 }
 ```
-* std::predicate[color ff0000]
+* std::uniform_random_bit_generator[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>file_time -- file_time : リンクを直すのを忘れていた</title>
      <link href="https://cpprefjp.github.io/reference/chrono/file_time.html"/>
      <id>11cb4fade5b1641a5c315b0d85701cff80b261c4:reference/chrono/file_time.md</id>
      <updated>2020-05-28T13:15:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/file_time.md b/reference/chrono/file_time.md
index ff56d4ed7..a57bd8758 100644
--- a/reference/chrono/file_time.md
+++ b/reference/chrono/file_time.md
@@ -187,11 +187,9 @@ int main()
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7 : %T&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
 }
 ```
-* chrono::system_clock[link system_clock.md]
-* now()[link system_clock/now.md]
-* chrono::zoned_seconds[link zoned_time.md]
+* fs::file_time_type[link /reference/filesystem/file_time_type.md]
+* fs::last_write_time[link /reference/filesystem/last_write_time.md]
 * std::format[link format.md]
-* std::locale[link /reference/locale/locale.md]
 
 #### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>file_time -- file_time : 文字列フォーマットの仕様と例を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/file_time.html"/>
      <id>181100bc7c4a02ed5c893bc3719a18bad81a5964:reference/chrono/file_time.md</id>
      <updated>2020-05-28T13:13:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/file_time.md b/reference/chrono/file_time.md
index d567f8565..ff56d4ed7 100644
--- a/reference/chrono/file_time.md
+++ b/reference/chrono/file_time.md
@@ -22,6 +22,11 @@ namespace std::chrono {
                 std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;* abbrev = nullptr,
                 minutes* offset = nullptr);              // (3) C++20
 }
+
+namespace std {
+  template &amp;lt;class Duration, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::file_time&amp;lt;Duration&amp;gt;, charT&amp;gt;;  // (4) C++20
+}
 ```
 * time_point[link time_point.md]
 * file_clock[link file_clock.md]
@@ -29,9 +34,12 @@ namespace std::chrono {
 ## 概要
 ファイル時間の一点を指す[`time_point`](time_point.md)に対する別名。
 
+この時間点はUTCタイムゾーンの時間を指す。
+
 - (1) : [`file_clock`](file_clock.md)の[`time_point`](time_point.md)に対する別名。時間間隔を表す型はパラメータ化されている
 - (2) : 時間点に含まれる日付と時間を出力ストリームに出力する
 - (3) : フォーマット指定して入力ストリームから日付・時間を時間点オブジェクトに入力する
+- (4) : `file_time`型に対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化
 
 
 ## 効果
@@ -54,6 +62,10 @@ namespace std::chrono {
 
 ## 備考
 - (1) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`file_clock::time_point`がもつ時間間隔の単位は未規定 (実装定義) であるため、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
+- (4) :
+    - `%Z` (タイムゾーンの省略名) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;UTC&amp;#34;)`で置き換えられる
+    - `%z`もしくはその改良コマンドが指定された場合、`0`[`min`](duration/op_min.md)が使用される
+    - この日付と時間のフォーマットは、`file_time&amp;lt;Duration&amp;gt;`型変数`t`を[`clock_cast`](clock_cast.md)`&amp;lt;`[`system_clock`](system_clock.md)`&amp;gt;(t)`で変換した[`sys_time`](sys_time.md)、もしくは[`clock_cast`](clock_cast.md)`&amp;lt;`[`utc_clock`](utc_clock.md)`&amp;gt;(t)`で変換した[`utc_time`](utc_time.md)をフォーマットした場合と等価である
 
 
 ## 例
@@ -62,6 +74,7 @@ namespace std::chrono {
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;fstream&amp;gt;
 #include &amp;lt;filesystem&amp;gt;
+#include &amp;lt;fstream&amp;gt;
 
 namespace chrono = std::chrono;
 namespace fs = std::filesystem;
@@ -138,6 +151,60 @@ UTC
 540
 ```
 
+### 文字列フォーマットの例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+#include &amp;lt;filesystem&amp;gt;
+#include &amp;lt;fstream&amp;gt;
+
+namespace chrono = std::chrono;
+namespace fs = std::filesystem;
+
+int main()
+{
+  std::ofstream{&amp;#34;regular.txt&amp;#34;};
+
+  // ファイルの最終更新日時を取得して出力
+  fs::file_time_type tp = fs::last_write_time(&amp;#34;regulat.txt&amp;#34;);
+
+  // デフォルトフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+
+  // 「年月日 時分秒」のフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {0:%Y/%m/%d %H:%M:%S}&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+
+  // 日付だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : %Y年%m月%d日&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5 : %F&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+
+  // 時間だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6 : %H時%M分%S秒&amp;#34;, lt) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7 : %T&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::system_clock[link system_clock.md]
+* now()[link system_clock/now.md]
+* chrono::zoned_seconds[link zoned_time.md]
+* std::format[link format.md]
+* std::locale[link /reference/locale/locale.md]
+
+#### 出力例
+```
+1 : 2019-12-20 10:05:00 UTC
+2 : 2019年12月20日 10時05分05秒
+3 : 2019/12/20 10:05:05
+4 : 2019年12月20日
+5 : 2019-12-20
+6 : 10時05分05秒
+7 : 10:05:05
+```
+
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>select_on_container_copy_construction -- allocator_traits::select_on_container_copy_construction : サンプルコードのアロケータの渡し方がまちがっていた</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator_traits/select_on_container_copy_construction.html"/>
      <id>b4df002c7153634e19e23e60be49337ec51d71c4:reference/memory/allocator_traits/select_on_container_copy_construction.md</id>
      <updated>2020-05-28T12:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator_traits/select_on_container_copy_construction.md b/reference/memory/allocator_traits/select_on_container_copy_construction.md
index 59a93ba59..9ab9e36e7 100644
--- a/reference/memory/allocator_traits/select_on_container_copy_construction.md
+++ b/reference/memory/allocator_traits/select_on_container_copy_construction.md
@@ -67,7 +67,7 @@ public:
   MyVector(const MyVector&amp;amp; other)
     : MyVector(
         other,
-        std::allocator_traits&amp;lt;Alloc&amp;gt;::select_on_container_copy_construction(alloc_)) {}
+        std::allocator_traits&amp;lt;Alloc&amp;gt;::select_on_container_copy_construction(other.alloc_)) {}
 
   ~MyVector()
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cos -- sin/cos : 利便性のためpiへのリンクを追加</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cos.html"/>
      <id>04d8a120529412c64874774dd1ccade776cdc5a2:reference/cmath/cos.md</id>
      <updated>2020-05-27T22:32:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cos.md b/reference/cmath/cos.md
index a68a98214..2f8306873 100644
--- a/reference/cmath/cos.md
+++ b/reference/cmath/cos.md
@@ -105,3 +105,7 @@ int main()
 以下のマクローリン級数を適当な次数で打ち切ることで近似的に求めることができる。
 
 $$ \cos x = \sum_{n = 0}^{\infty} \frac{(-1)^n}{(2n)!} x^{2n} \quad \mathrm{for~all} \; x $$
+
+
+## 関連項目
+- [`std::numbers::pi`](/reference/numbers/pi.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sin -- sin/cos : 利便性のためpiへのリンクを追加</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sin.html"/>
      <id>04d8a120529412c64874774dd1ccade776cdc5a2:reference/cmath/sin.md</id>
      <updated>2020-05-27T22:32:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sin.md b/reference/cmath/sin.md
index 86bc99357..e26f6e35b 100644
--- a/reference/cmath/sin.md
+++ b/reference/cmath/sin.md
@@ -105,3 +105,7 @@ int main()
 以下のマクローリン級数を適当な次数で打ち切ることで近似的に求めることができる。
 
 $$ \sin x = \sum_{n = 0}^{\infty} \frac{(-1)^n}{(2n + 1)!} x^{2n + 1} \quad \mathrm{for~all} \; x $$
+
+
+## 関連項目
+- [`std::numbers::pi`](/reference/numbers/pi.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
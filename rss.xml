<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-03T00:39:13.988080</updated>
  <id>193808cc-e7e4-49d4-a480-7b3546946a7a</id>

  
    <entry>
      <title>swap -- rages::swap : 追記</title>
      <link href="https://cpprefjp.github.io/reference/concepts/swap.html"/>
      <id>cbbd230e3fd2c2ac80d86fe0d7f4cf495a0c3ec5:reference/concepts/swap.md</id>
      <updated>2020-06-03T09:35:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/swap.md b/reference/concepts/swap.md
index 7a2898e0f..4009782f8 100644
--- a/reference/concepts/swap.md
+++ b/reference/concepts/swap.md
@@ -68,7 +68,7 @@ namespace std::ranges {
 
 上記「効果」節1のケースでは、ユーザー定義の`swap()`を定義しておくことによって実行される交換操作をカスタマイズすることができる。
 
-1. `a, b`のどちらかの型と同じ名前空間もしくはその型の定義内で`friend`関数として、`a, b`の型のペアについて呼び出し可能な`swap()`を定義しておく
+1. `a, b`のどちらかの型のメンバ関数として、あるいは同じ名前空間もしくはその型の定義内で`friend`関数として、`a, b`の型のペアについて呼び出し可能な`swap()`を定義しておく
 2. その要素型について、1にアダプトしておく
 3. --
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>file_time -- s/省略名/略称/</title>
      <link href="https://cpprefjp.github.io/reference/chrono/file_time.html"/>
      <id>720f7810536dc3485f1c2d50ce60176265928bd5:reference/chrono/file_time.md</id>
      <updated>2020-06-02T17:53:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/file_time.md b/reference/chrono/file_time.md
index a57bd8758..3a9115f4f 100644
--- a/reference/chrono/file_time.md
+++ b/reference/chrono/file_time.md
@@ -63,7 +63,7 @@ namespace std {
 ## 備考
 - (1) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`file_clock::time_point`がもつ時間間隔の単位は未規定 (実装定義) であるため、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
 - (4) :
-    - `%Z` (タイムゾーンの省略名) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;UTC&amp;#34;)`で置き換えられる
+    - `%Z` (タイムゾーンの略称) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;UTC&amp;#34;)`で置き換えられる
     - `%z`もしくはその改良コマンドが指定された場合、`0`[`min`](duration/op_min.md)が使用される
     - この日付と時間のフォーマットは、`file_time&amp;lt;Duration&amp;gt;`型変数`t`を[`clock_cast`](clock_cast.md)`&amp;lt;`[`system_clock`](system_clock.md)`&amp;gt;(t)`で変換した[`sys_time`](sys_time.md)、もしくは[`clock_cast`](clock_cast.md)`&amp;lt;`[`utc_clock`](utc_clock.md)`&amp;gt;(t)`で変換した[`utc_time`](utc_time.md)をフォーマットした場合と等価である
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- s/省略名/略称/</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>720f7810536dc3485f1c2d50ce60176265928bd5:reference/chrono/format.md</id>
      <updated>2020-06-02T17:53:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index 5b693c9e1..5eb43968e 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -24,9 +24,9 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 
 | フォーマット指定子 | 説明 | 例 |
 |--------------------|------|----|
-| `%a` | ロケール依存の曜日の省略名。&amp;lt;br/&amp;gt; 値に有効な曜日が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Fri&amp;#34;`, `&amp;#34;金&amp;#34;` |
+| `%a` | ロケール依存の曜日の略称。&amp;lt;br/&amp;gt; 値に有効な曜日が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Fri&amp;#34;`, `&amp;#34;金&amp;#34;` |
 | `%A` | ロケール依存の曜日の完全名。&amp;lt;br/&amp;gt; 値に有効な曜日が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Friday&amp;#34;`, `&amp;#34;金曜日&amp;#34;` |
-| `%b` | ロケール依存の月の省略名。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Apr&amp;#34;`, `&amp;#34;4月&amp;#34;` |
+| `%b` | ロケール依存の月の略称。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Apr&amp;#34;`, `&amp;#34;4月&amp;#34;` |
 | `%B` | ロケール依存の月の完全名。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;April&amp;#34;`, `&amp;#34;4月&amp;#34;` |
 | `%c` | ロケール依存の日付・時間の表現。改良コマンド`%Ec`を指定すると、異なる表現を出力する | `&amp;#34;Fri Apr 24 17:14:44 2020&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;2020年04月24日 17時14分44秒&amp;#34;`&amp;lt;br/&amp;gt; `%Ec`では`&amp;#34;令和02年04月24日 17時14分44秒&amp;#34;` |
 | `%C` | 100で切り下げ除算した年 (世紀)。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%EC`を指定すると、ロケール依存の世紀の異なる表現を出力する | `&amp;#34;21&amp;#34;`&amp;lt;br/&amp;gt; `%EC`では`&amp;#34;令和&amp;#34;` (元号) |
@@ -61,7 +61,7 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 | `%y` | 10進数での年のうしろ2桁。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0y`を指定すると、ロケール依存の異なる表現を出力する。改良コマンド`%Ey`を指定すると、`%EC`からのオフセットとしてロケール依存の異なる表現を出力する。 | `&amp;#34;20&amp;#34;`&amp;lt;br/&amp;gt; `%Ey`では`&amp;#34;02&amp;#34;` |
 | `%Y` | 10進数での年。結果が4桁未満の場合、4桁になるよう左が`0`で埋められる。改良コマンド`%EY`を指定すると、ロケール依存の異なる表現の完全な年を出力する | `&amp;#34;2020&amp;#34;`&amp;lt;br/&amp;gt; `%EY`では`&amp;#34;令和02年&amp;#34;` |
 | `%z` | ISO 8601フォーマットでのUTCからのオフセット。例として`-0430`はUTCから4時間30分遅れていることを表す。オフセットがゼロの場合は`+0000`が使用される。改良コマンド`%Ez`と`%0z`を指定すると、時と分の間にコロン (`:`) が挿入される。オフセット情報が利用可能でない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;+0900&amp;#34;`&amp;lt;br/&amp;gt;`%Ez`では`&amp;#34;+09:00&amp;#34;` |
-| `%Z` | タイムゾーンの省略名。タイムゾーンの省略名が利用可能でない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;JST&amp;#34;` |
+| `%Z` | タイムゾーンの略称。タイムゾーンの略称が利用可能でない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;JST&amp;#34;` |
 | `%%` | 文字`%` | `&amp;#34;%&amp;#34;` |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gps_time -- s/省略名/略称/</title>
      <link href="https://cpprefjp.github.io/reference/chrono/gps_time.html"/>
      <id>720f7810536dc3485f1c2d50ce60176265928bd5:reference/chrono/gps_time.md</id>
      <updated>2020-06-02T17:53:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/gps_time.md b/reference/chrono/gps_time.md
index 1edd375d4..4895cfd09 100644
--- a/reference/chrono/gps_time.md
+++ b/reference/chrono/gps_time.md
@@ -64,7 +64,7 @@ GPS時間の一点を指す[`time_point`](time_point.md)に対する別名。
 ## 備考
 - (1) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`gps_clock::time_point`がもつ時間間隔の単位は未規定 (実装定義) であるため、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
 - (5) :
-    - `%Z` (タイムゾーンの省略名) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;GPS&amp;#34;)`で置き換えられる
+    - `%Z` (タイムゾーンの略称) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;GPS&amp;#34;)`で置き換えられる
     - `%z`もしくはその改良コマンドが指定された場合、`0`[`min`](duration/op_min.md)が使用される
     - この日付と時間のフォーマットは、`gps_time&amp;lt;Duration&amp;gt;`型変数`tp`を以下のように変換した[`sys_time`](sys_time.md)をフォーマットした場合と等価：
         ```cpp
@@ -176,7 +176,7 @@ int main()
   // 「年月日 時分秒」のフォーマット
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
 
-  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの省略名付き
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの略称付き
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {0:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
 
   // 日付だけ出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- s/省略名/略称/</title>
      <link href="https://cpprefjp.github.io/reference/chrono/local-time-format-t/formatter.html"/>
      <id>720f7810536dc3485f1c2d50ce60176265928bd5:reference/chrono/local-time-format-t/formatter.md</id>
      <updated>2020-06-02T17:53:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/local-time-format-t/formatter.md b/reference/chrono/local-time-format-t/formatter.md
index 80e7e9b0c..406a437f5 100644
--- a/reference/chrono/local-time-format-t/formatter.md
+++ b/reference/chrono/local-time-format-t/formatter.md
@@ -17,7 +17,7 @@ namespace std {
 
 `formatter::format()`関数に渡される`local-time-format-t&amp;lt;Duration&amp;gt;`型の変数`f`があるとして、
 
-- `%Z` (タイムゾーンの省略名) が指定された場合、`f.abbrev`がヌルポインタでなければ`*f.abbrev`で置き換えられる。`%Z`が指定されて`f.abbrev`がヌルポインタだった場合、[`std::format_error`](/reference/format/format_error.md)例外が送出される
+- `%Z` (タイムゾーンの略称) が指定された場合、`f.abbrev`がヌルポインタでなければ`*f.abbrev`で置き換えられる。`%Z`が指定されて`f.abbrev`がヌルポインタだった場合、[`std::format_error`](/reference/format/format_error.md)例外が送出される
 - `%z`もしくはその改良コマンドが指定された場合、`f.offset_sec`がヌルポインタでなければ`*f.offset_sec`がフォーマットされる。`%z`もしくはその改良コマンドが指定されて`f.offset_sec`がヌルポインタだった場合、[`std::format_error`](/reference/format/format_error.md)例外が送出される
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>local_time -- s/省略名/略称/</title>
      <link href="https://cpprefjp.github.io/reference/chrono/local_time.html"/>
      <id>720f7810536dc3485f1c2d50ce60176265928bd5:reference/chrono/local_time.md</id>
      <updated>2020-06-02T17:53:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/local_time.md b/reference/chrono/local_time.md
index 047cac222..55e2596a5 100644
--- a/reference/chrono/local_time.md
+++ b/reference/chrono/local_time.md
@@ -72,7 +72,7 @@ namespace std {
 - (2) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`local_time`がもつ時間間隔の単位は未規定 (実装定義) であり、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
 - [`year`](year.md)クラスの制限により、年の値としては`[-32767, 32767]`の範囲までしか入出力できないことに注意 (その範囲外は未規定の値となる)
 - (5) : 出力ストリームの演算子は、ローカルのタイムゾーンへの変換を行わない。そのため、システム時間から変換したローカル時間をそのまま出力すると、デフォルトではUTCタイムゾーンの日時が出力される。日本のタイムゾーンで出力したい場合は、[`zoned_time`](zoned_time.md)クラスを介して出力するか、9時間を加算して出力すること
-- (7) : `%Z` (タイムゾーンの省略名), `%z` (UTCタイムゾーンからのオフセット時間) もしくはその改良コマンドが指定された場合、[`std::format_error`](/reference/format/format_error.md)例外が送出される
+- (7) : `%Z` (タイムゾーンの略称), `%z` (UTCタイムゾーンからのオフセット時間) もしくはその改良コマンドが指定された場合、[`std::format_error`](/reference/format/format_error.md)例外が送出される
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- s/省略名/略称/</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month/formatter.html"/>
      <id>720f7810536dc3485f1c2d50ce60176265928bd5:reference/chrono/month/formatter.md</id>
      <updated>2020-06-02T17:53:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month/formatter.md b/reference/chrono/month/formatter.md
index 9039bb797..7daeebfd3 100644
--- a/reference/chrono/month/formatter.md
+++ b/reference/chrono/month/formatter.md
@@ -18,7 +18,7 @@ namespace std {
 
 | フォーマット指定子 | 説明 |
 |--------------------|------|
-| `%b` | ロケール依存の月の省略名 |
+| `%b` | ロケール依存の月の略称 |
 | `%B` | ロケール依存の月の完全名 |
 | `%h` | `%b`と等価 |
 | `%m` | 10進数での月。2桁0埋め |
@@ -37,7 +37,7 @@ int main()
   // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl;
 
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%b}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl; // 省略名
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%b}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl; // 略称
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%B}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl; // 完全名
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%m}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl; // 完全名
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sys_time -- s/省略名/略称/</title>
      <link href="https://cpprefjp.github.io/reference/chrono/sys_time.html"/>
      <id>720f7810536dc3485f1c2d50ce60176265928bd5:reference/chrono/sys_time.md</id>
      <updated>2020-06-02T17:53:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/sys_time.md b/reference/chrono/sys_time.md
index 55dc6fbf4..d2bb04ac9 100644
--- a/reference/chrono/sys_time.md
+++ b/reference/chrono/sys_time.md
@@ -91,7 +91,7 @@ namespace std {
 - [`year`](year.md)クラスの制限により、年の値としては`[-32767, 32767]`の範囲までしか入出力できないことに注意 (その範囲外は未規定の値となる)
 - (4), (5) : 出力ストリームの演算子は、ローカルのタイムゾーンへの変換を行わない。そのため、システム時間をそのまま出力すると、デフォルトではUTCタイムゾーンの日時が出力される。日本のタイムゾーンで出力したい場合は、[`zoned_time`](zoned_time.md)クラスを介して出力するか、9時間を加算して出力すること
 - (7) :
-    - `%Z` (タイムゾーンの省略名) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;UTC&amp;#34;)`で置き換えられる
+    - `%Z` (タイムゾーンの略称) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;UTC&amp;#34;)`で置き換えられる
     - `%z`もしくはその改良コマンドが指定された場合、`0`[`min`](duration/op_min.md)が使用される
 
 
@@ -226,7 +226,7 @@ int main()
   // 「年月日 時分秒」のフォーマット
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
 
-  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの省略名付き
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの略称付き
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {0:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
 
   // 日付だけ出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tai_time -- s/省略名/略称/</title>
      <link href="https://cpprefjp.github.io/reference/chrono/tai_time.html"/>
      <id>720f7810536dc3485f1c2d50ce60176265928bd5:reference/chrono/tai_time.md</id>
      <updated>2020-06-02T17:53:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/tai_time.md b/reference/chrono/tai_time.md
index 16cc9a59b..47d3a09b3 100644
--- a/reference/chrono/tai_time.md
+++ b/reference/chrono/tai_time.md
@@ -64,7 +64,7 @@ TAI時間の一点を指す[`time_point`](time_point.md)に対する別名。
 ## 備考
 - (1) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`tai_clock::time_point`がもつ時間間隔の単位は未規定 (実装定義) であるため、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
 - (5) :
-    - `%Z` (タイムゾーンの省略名) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;TAI&amp;#34;)`で置き換えられる
+    - `%Z` (タイムゾーンの略称) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;TAI&amp;#34;)`で置き換えられる
     - `%z`もしくはその改良コマンドが指定された場合、`0`[`min`](duration/op_min.md)が使用される
     - この日付と時間のフォーマットは、`gps_time&amp;lt;Duration&amp;gt;`型変数`tp`を以下のように変換した[`sys_time`](sys_time.md)をフォーマットした場合と等価：
         ```cpp
@@ -175,7 +175,7 @@ int main()
   // 「年月日 時分秒」のフォーマット
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
 
-  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの省略名付き
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの略称付き
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {0:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
 
   // 日付だけ出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>utc_time -- s/省略名/略称/</title>
      <link href="https://cpprefjp.github.io/reference/chrono/utc_time.html"/>
      <id>720f7810536dc3485f1c2d50ce60176265928bd5:reference/chrono/utc_time.md</id>
      <updated>2020-06-02T17:53:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/utc_time.md b/reference/chrono/utc_time.md
index d6c17ae7e..e0ba0d17f 100644
--- a/reference/chrono/utc_time.md
+++ b/reference/chrono/utc_time.md
@@ -64,7 +64,7 @@ UTC時間の一点を指す[`time_point`](time_point.md)に対する別名。
 ## 備考
 - (1) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`utc_clock::time_point`がもつ時間間隔の単位は未規定 (実装定義) であるため、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
 - (5) :
-    - `%Z` (タイムゾーンの省略名) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;UTC&amp;#34;)`で置き換えられる
+    - `%Z` (タイムゾーンの略称) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;UTC&amp;#34;)`で置き換えられる
     - `%z`もしくはその改良コマンドが指定された場合、`0`[`min`](duration/op_min.md)が使用される
     - 引数がうるう秒が挿入された時間を表す場合、秒フィールドは`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;60&amp;#34;)`でフォーマットされる
 
@@ -169,7 +169,7 @@ int main()
   // 「年月日 時分秒」のフォーマット
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
 
-  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの省略名付き
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの略称付き
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {0:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
 
   // 日付だけ出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- s/省略名/略称/</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday/formatter.html"/>
      <id>720f7810536dc3485f1c2d50ce60176265928bd5:reference/chrono/weekday/formatter.md</id>
      <updated>2020-06-02T17:53:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday/formatter.md b/reference/chrono/weekday/formatter.md
index 118bab48e..7ec101d33 100644
--- a/reference/chrono/weekday/formatter.md
+++ b/reference/chrono/weekday/formatter.md
@@ -18,7 +18,7 @@ namespace std {
 
 | フォーマット指定子 | 説明 |
 |--------------------|------|
-| `%a` | ロケール依存の曜日の省略名 |
+| `%a` | ロケール依存の曜日の略称 |
 | `%A` | ロケール依存の曜日の完全名 |
 | `%u` | 10進数での月曜を1とするISO曜日番号 (1-7) |
 | `%0u` | ロケール依存の`%u`の異なる表現 |
@@ -38,7 +38,7 @@ int main()
   // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::Sunday) &amp;lt;&amp;lt; std::endl;
 
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%a}&amp;#34;, chrono::Sunday) &amp;lt;&amp;lt; std::endl; // 省略名
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%a}&amp;#34;, chrono::Sunday) &amp;lt;&amp;lt; std::endl; // 略称
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%A}&amp;#34;, chrono::Sunday) &amp;lt;&amp;lt; std::endl; // 完全名
 
   // ロケール依存の出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- s/省略名/略称/</title>
      <link href="https://cpprefjp.github.io/reference/chrono/zoned_time/op_ostream.html"/>
      <id>720f7810536dc3485f1c2d50ce60176265928bd5:reference/chrono/zoned_time/op_ostream.md</id>
      <updated>2020-06-02T17:53:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/zoned_time/op_ostream.md b/reference/chrono/zoned_time/op_ostream.md
index 6f8b9a301..3ebca5d43 100644
--- a/reference/chrono/zoned_time/op_ostream.md
+++ b/reference/chrono/zoned_time/op_ostream.md
@@ -24,7 +24,7 @@ namespace std::chrono {
 
 - `&amp;#34;%F&amp;#34;`は`&amp;#34;%Y-%m-%d&amp;#34;` (4桁ゼロ埋めの年-2桁ゼロ埋めの月-2桁ゼロ埋めの日) と等価
 - `&amp;#34;%T&amp;#34;`は`&amp;#34;%H:%M:%S&amp;#34;` (2桁ゼロ埋めの時:2桁ゼロ埋めの分:2桁ゼロ埋めの秒と小数点以下の時間) と等価
-- `&amp;#34;%Z&amp;#34;`はタイムゾーンの省略名 (日本は`&amp;#34;JST&amp;#34;`、UTCは`&amp;#34;UTC&amp;#34;`)
+- `&amp;#34;%Z&amp;#34;`はタイムゾーンの略称 (日本は`&amp;#34;JST&amp;#34;`、UTCは`&amp;#34;UTC&amp;#34;`)
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parse -- chronoのparse : 途中までフォーマット指定子を書いて力尽きた</title>
      <link href="https://cpprefjp.github.io/reference/chrono/parse.html"/>
      <id>44ff5d04b1b53bbe2b1d7e1ea07c2908f239bd03:reference/chrono/parse.md</id>
      <updated>2020-06-02T17:49:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/parse.md b/reference/chrono/parse.md
index bf5b37bc7..20381a81b 100644
--- a/reference/chrono/parse.md
+++ b/reference/chrono/parse.md
@@ -41,7 +41,18 @@ namespace std::chrono {
 - (3) chronoオブジェクトと、UTCタイムゾーンからのオフセット時間を解析する
 - (4) chronoオブジェクトと、タイムゾーンの略称、UTCタイムゾーンからのオフセット時間を解析する
 
-(TODO : ここにフォーマット指定子の表を書く)
+`fmt`パラメータに指定できるフォーマット指定子は、以下である。`N`として10進整数を指定できる場合があり、それを指定することでより多くの文字数を読み込める。
+
+| フォーマット指定子 | 説明 | 例 |
+|--------------------|------|----|
+| `%a` | ロケール依存の曜日の略称 (大文字・小文字を区別しない) | `&amp;#34;Sun&amp;#34;`&amp;lt;br/&amp;gt; 日本のロケールでは`&amp;#34;日&amp;#34;` |
+| `%A` | `%a`と等価 | |
+| `%b` | ロケール依存の月の略称 (大文字・小文字を区別しない) | `&amp;#34;Apr&amp;#34;`&amp;lt;br/&amp;gt; 日本のロケールでは`&amp;#34;4月&amp;#34;` |
+| `%B` | `%b`と等価 | |
+| `%c` | ロケール依存の日付・時間の表現。改良コマンド`%Ec`を指定すると、異なる表現になる | `&amp;#34;Fri Apr 24 17:14:44 2020&amp;#34;`&amp;lt;br/&amp;gt; 日本のロケールでは`&amp;#34;2020年04月24日 17時14分44秒&amp;#34;`&amp;lt;br/&amp;gt; `%Ec`では`&amp;#34;令和02年04月24日 17時14分44秒&amp;#34;` |
+| `%C` | 世紀の10進数番号。改良コマンド`%NC` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定子ない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%EC`と`%OC`はロケール依存の異なる表現になる | `&amp;#34;21&amp;#34;`&amp;lt;br/&amp;gt; `%EC`では元号`&amp;#34;令和&amp;#34;` |
+
+(書きかけ)
 
 
 ## テンプレートパラメータ制約
@@ -63,9 +74,9 @@ namespace std::chrono {
 - これらの関数は書式化されていない入力関数として動作するが ([`std::boolalpha`](/reference/ios/boolalpha.md), [`std::quoted`](/reference/iomanip/quoted.md)などの影響を受けない)、後続で呼び出された[`std::basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;&amp;gt;::`[`gcount()`](/reference/istream/basic_istream/gcount.md)の戻り値に未規定の影響がある
 - 概要欄に示したフォーマット指定子に含まれておらず、スペースを除くフォーマット文字列のすべての文字は、ストリームから変更されずに解析される
 - スペース文字は、入力ストリーム内の「ゼロ個以上のスペース文字」と合致する
-- 解析する`tp`の型が、フォーマットフラグの情報を表現できない場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出される
+- 解析する`tp`の型が、フォーマット指定子の情報を表現できない場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出される
     - 例として、[`duration`](duration.md)は[`weekday`](weekday.md)を表現できない
-    - ただし、フラグが時刻を表すものである場合 (`&amp;#34;%H&amp;#34;`, `&amp;#34;%I&amp;#34;`, `&amp;#34;%p&amp;#34;`など)、[`duration`](duration.md)の特殊化は、その日の深夜0時からの経過時間だと見なして読み込む
+    - ただし、フォーマット指定子が時刻を表すものである場合 (`&amp;#34;%H&amp;#34;`, `&amp;#34;%I&amp;#34;`, `&amp;#34;%p&amp;#34;`など)、[`duration`](duration.md)の特殊化は、その日の深夜0時からの経過時間だと見なして読み込む
 - フォーマット文字列で指定されたいずれの解析にも失敗した場合、もしくは完全な`duration`、時間点、カレンダーデータ構造を指定するために十分な情報が解析されなかった場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出される
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sys_time -- chronoのparse : 途中までフォーマット指定子を書いて力尽きた</title>
      <link href="https://cpprefjp.github.io/reference/chrono/sys_time.html"/>
      <id>44ff5d04b1b53bbe2b1d7e1ea07c2908f239bd03:reference/chrono/sys_time.md</id>
      <updated>2020-06-02T17:49:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/sys_time.md b/reference/chrono/sys_time.md
index 7dcd61acd..55dc6fbf4 100644
--- a/reference/chrono/sys_time.md
+++ b/reference/chrono/sys_time.md
@@ -78,7 +78,7 @@ namespace std {
     * year_month_day[link year_month_day.md]
 
 - (6) :
-    - パラメータ`fmt`で指定されたフォーマットフラグを使用して、入力を解析し、`tp`に代入する
+    - パラメータ`fmt`で指定されたフォーマット指定子を使用して、入力を解析し、`tp`に代入する
     - 有効な日付・時間の解析に失敗した場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出され、パラメータ`tp`は変更されない
     - タイムゾーンフォーマット`&amp;#34;%Z&amp;#34;`が指定され、解析が成功した場合、パラメータ`abbrev`が非ヌルである場合に`*abbrev`にタイムゾーン名が代入される
     - タイムゾーンとしてUTC時間からのオフセット時間 (日本なら`&amp;#34;+0900&amp;#34;`) を意味するフォーマット`&amp;#34;%z&amp;#34;`が指定され、解析が成功した場合、パラメータ`offset`が非ヌルである場合に`*offset`にその値が代入される
@@ -265,4 +265,5 @@ int main()
 
 
 ## 関連項目
-- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+- [chronoの`std::format()`](/reference/chrono/format.md) (出力フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parse -- chronoのparse : 仕様を追記</title>
      <link href="https://cpprefjp.github.io/reference/chrono/parse.html"/>
      <id>2ad6780ac2640606b7a4c5e00c9db0c66e64f0ec:reference/chrono/parse.md</id>
      <updated>2020-06-02T17:07:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/parse.md b/reference/chrono/parse.md
index ede3aa94f..bf5b37bc7 100644
--- a/reference/chrono/parse.md
+++ b/reference/chrono/parse.md
@@ -41,6 +41,8 @@ namespace std::chrono {
 - (3) chronoオブジェクトと、UTCタイムゾーンからのオフセット時間を解析する
 - (4) chronoオブジェクトと、タイムゾーンの略称、UTCタイムゾーンからのオフセット時間を解析する
 
+(TODO : ここにフォーマット指定子の表を書く)
+
 
 ## テンプレートパラメータ制約
 - (1) : `from_stream(`[`declval`](/reference/utility/declval.md)`&amp;lt;basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp;&amp;gt;(), fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp)`が妥当な式であること
@@ -49,11 +51,26 @@ namespace std::chrono {
 - (4) : `from_stream(`[`declval`](/reference/utility/declval.md)`&amp;lt;basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp;&amp;gt;(), fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp,` [`addressof`](/reference/memory/addressof.md)`(abbrev), &amp;amp;offset)`が妥当な式であること
 
 
+## 効果
+- (1) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp)`を呼び出す
+- (2) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp,` [`addressof`](/reference/memory/addressof.md)`(abbrev))`を呼び出す
+- (3) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp, static_cast&amp;lt;`[`basic_string`](/reference/string/basic_string.md)`&amp;lt;charT, traits, Alloc&amp;gt;*&amp;gt;(nullptr), &amp;amp;offset)`を呼び出す
+- (4) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp,` [`addressof`](/reference/memory/addressof.md)`(abbrev), &amp;amp;offset)`を呼び出す
+
+以下、オーバーロード全体について、
+
+- これらの関数をADL (引数依存の名前探索、argument dependent lookup) で呼び出すために、`from_stream`を修飾せずに呼び出している
+- これらの関数は書式化されていない入力関数として動作するが ([`std::boolalpha`](/reference/ios/boolalpha.md), [`std::quoted`](/reference/iomanip/quoted.md)などの影響を受けない)、後続で呼び出された[`std::basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;&amp;gt;::`[`gcount()`](/reference/istream/basic_istream/gcount.md)の戻り値に未規定の影響がある
+- 概要欄に示したフォーマット指定子に含まれておらず、スペースを除くフォーマット文字列のすべての文字は、ストリームから変更されずに解析される
+- スペース文字は、入力ストリーム内の「ゼロ個以上のスペース文字」と合致する
+- 解析する`tp`の型が、フォーマットフラグの情報を表現できない場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出される
+    - 例として、[`duration`](duration.md)は[`weekday`](weekday.md)を表現できない
+    - ただし、フラグが時刻を表すものである場合 (`&amp;#34;%H&amp;#34;`, `&amp;#34;%I&amp;#34;`, `&amp;#34;%p&amp;#34;`など)、[`duration`](duration.md)の特殊化は、その日の深夜0時からの経過時間だと見なして読み込む
+- フォーマット文字列で指定されたいずれの解析にも失敗した場合、もしくは完全な`duration`、時間点、カレンダーデータ構造を指定するために十分な情報が解析されなかった場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出される
+
+
 ## 戻り値
-- (1) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp)`を呼び出して返す
-- (2) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp,` [`addressof`](/reference/memory/addressof.md)`(abbrev))`を呼び出して返す
-- (3) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp, static_cast&amp;lt;`[`basic_string`](/reference/string/basic_string.md)`&amp;lt;charT, traits, Alloc&amp;gt;*&amp;gt;(nullptr), &amp;amp;offset)`を呼び出して返す
-- (4) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp,` [`addressof`](/reference/memory/addressof.md)`(abbrev), &amp;amp;offset)`を呼び出して返す
+未規定
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parse -- chronoのparse : いらない情報を削除</title>
      <link href="https://cpprefjp.github.io/reference/chrono/parse.html"/>
      <id>3f5665c75e4d74c0aed43e8fb1e416107b167191:reference/chrono/parse.md</id>
      <updated>2020-06-02T16:37:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/parse.md b/reference/chrono/parse.md
index 6788f400e..ede3aa94f 100644
--- a/reference/chrono/parse.md
+++ b/reference/chrono/parse.md
@@ -56,14 +56,6 @@ namespace std::chrono {
 - (4) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp,` [`addressof`](/reference/memory/addressof.md)`(abbrev), &amp;amp;offset)`を呼び出して返す
 
 
-## 戻り値
-```cpp
-return get_tzdb().locate_zone(tz_name);
-```
-* get_tzdb()[link get_tzdb.md]
-* locate_zone()[link tzdb/locate_zone.md]
-
-
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
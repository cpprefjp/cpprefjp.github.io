<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-11T10:15:59.037550</updated>
  <id>66a3781f-48b3-4bd1-b5aa-742a9141ff67</id>

  
    <entry>
      <title>apply_givens_rotation -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/apply_givens_rotation.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/apply_givens_rotation.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/apply_givens_rotation.md b/reference/linalg/apply_givens_rotation.md
index 11ff401f7..1e8d4ed20 100644
--- a/reference/linalg/apply_givens_rotation.md
+++ b/reference/linalg/apply_givens_rotation.md
@@ -50,6 +50,7 @@ namespace std::linalg {
     complex&amp;lt;Real&amp;gt; s); // (4)
 }
 ```
+* complex[link /reference/complex/complex.md]
 
 
 ## 概要
@@ -73,8 +74,8 @@ $$
 
 ## 適格要件
 - 共通:
-  + `Real`が`complex&amp;lt;Real&amp;gt;`を規定できる型であること
-  + [`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InOutVec1, InOutVec2&amp;gt;(0,0) == true`
+    + `Real`が[`complex`](/reference/complex/complex.md)`&amp;lt;Real&amp;gt;`を規定できる型であること
+    + [`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InOutVec1, InOutVec2&amp;gt;(0,0) == true`
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/copy.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/copy.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/copy.md b/reference/linalg/copy.md
index 586373809..668b6ff2c 100644
--- a/reference/linalg/copy.md
+++ b/reference/linalg/copy.md
@@ -30,15 +30,17 @@ namespace std::linalg {
 
 ## テンプレートパラメータ制約
 `x`と`y`の次元が等しくなければならない。
+
 - `x.rank() == y.rank()`
 
 
 ## 適格要件
-- (1), (2): 0以上`x.rank()`未満の整数rに対して、[`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InVec, OutVec&amp;gt;(r,r)`が`true`
+- (1), (2): 0以上[`x.rank()`](/reference/mdspan/mdspan/rank.md)未満の整数`r`に対して、[`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InVec, OutVec&amp;gt;(r,r)`が`true`
 - (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 事前条件
 `x`と`y`の各次元の要素数が等しくなければならない。
+
 - `x.extents() == y.extents()`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dot -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/dot.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/dot.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/dot.md b/reference/linalg/dot.md
index 8dea51686..95bf0a5c3 100644
--- a/reference/linalg/dot.md
+++ b/reference/linalg/dot.md
@@ -45,7 +45,7 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0)`が`true` (2つのベクトルの静的な要素数が同じ)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0)`が`true` (2つのベクトルの静的な要素数が同じ)
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
@@ -58,8 +58,8 @@ namespace std::linalg {
 ## 効果
 - (1), (2): なし
 - (3), (4): `T`を各ベクトルの値型の積の型`decltype(declval&amp;lt;typename InVec1::value_type&amp;gt;() * declval&amp;lt;typename InVec2::value_type&amp;gt;())`とする。
-  + (3): `dot(v1, v2, T{})`を返す。
-  + (4): `dot(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v1, v2, T{})`を返す。
+    + (3): `dot(v1, v2, T{})`を返す。
+    + (4): `dot(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v1, v2, T{})`を返す。
 
 
 ## 戻り値
@@ -77,7 +77,7 @@ $$
 
 
 ## 備考
-- (1), (2): もし`InVec1::value_type`、`InVec2::value_type`、`Scalar`が全て浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InVec1::value_type`と`InVec2::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InVec1::value_type`、`InVec2::value_type`、`Scalar`が全て浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InVec1::value_type`と`InVec2::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dotc -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/dotc.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/dotc.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/dotc.md b/reference/linalg/dotc.md
index 1349e6d16..a8dd35350 100644
--- a/reference/linalg/dotc.md
+++ b/reference/linalg/dotc.md
@@ -45,7 +45,7 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0)`が`true` (2つのベクトルの静的な要素数が同じ)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0)`が`true` (2つのベクトルの静的な要素数が同じ)
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
@@ -57,10 +57,10 @@ namespace std::linalg {
 
 ## 効果
 - (1): [`dot`](dot.md)`(`[`conjugated`](conjugated.md)`(v1), v2, init)`を返す。
-- (2): `dot(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), conjugated(v1), v2, init)`を返す。
-- (3), (4): `T`を各ベクトルの値型の積の型`decltype(conj-if-needed(declval&amp;lt;typename InVec1::value_type&amp;gt;()) * declval&amp;lt;typename InVec2::value_type&amp;gt;())`とする。
-  + (3): `dotc(v1, v2, T{})`を返す。
-  + (4): `dotc(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v1, v2, T{})`を返す。
+- (2): [`dot`](dot.md)`(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec),` [`conjugated`](conjugated.md)`(v1), v2, init)`を返す。
+- (3), (4): `T`を各ベクトルの値型の積の型`decltype(`[`conj-if-needed`](conj-if-needed.md)`(declval&amp;lt;typename InVec1::value_type&amp;gt;()) * declval&amp;lt;typename InVec2::value_type&amp;gt;())`とする。
+    + (3): `dotc(v1, v2, T{})`を返す。
+    + (4): `dotc(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v1, v2, T{})`を返す。
 
 
 ## 戻り値
@@ -114,7 +114,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::dotc[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_frob_norm -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_frob_norm.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/matrix_frob_norm.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_frob_norm.md b/reference/linalg/matrix_frob_norm.md
index 544a175ec..44a97bd11 100644
--- a/reference/linalg/matrix_frob_norm.md
+++ b/reference/linalg/matrix_frob_norm.md
@@ -38,13 +38,13 @@ namespace std::linalg {
 
 
 ## 適格要件
-- (1), (2): `decltype(init + `[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`が`Scalar`に変換可能。
+- (1), (2): `decltype(init +` [`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`が`Scalar`に変換可能。
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 効果
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_frob_norm(A, T{})`を返す。
-  + (4): `matrix_frob_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_frob_norm(A, T{})`を返す。
+    + (4): `matrix_frob_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 戻り値
@@ -54,13 +54,13 @@ $$
 \sqrt{\sum_{i = 0}^{m - 1} \sum_{j = 0}^{n - 1} |\verb|A[|i, j\verb|]||^2 + \verb|init|^2}
 $$
 
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_frob_norm(A, T{})`を返す。
-  + (4): `matrix_frob_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_frob_norm(A, T{})`を返す。
+    + (4): `matrix_frob_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 備考
-- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -97,7 +97,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::matrix_frob_norm[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_inf_norm -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_inf_norm.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/matrix_inf_norm.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_inf_norm.md b/reference/linalg/matrix_inf_norm.md
index 76844e853..f11272888 100644
--- a/reference/linalg/matrix_inf_norm.md
+++ b/reference/linalg/matrix_inf_norm.md
@@ -43,9 +43,9 @@ namespace std::linalg {
 
 
 ## 効果
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_inf_norm(A, T{})`を返す。
-  + (4): `matrix_inf_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_inf_norm(A, T{})`を返す。
+    + (4): `matrix_inf_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 戻り値
@@ -57,13 +57,13 @@ $$
 \verb|init| + \max_{i = 0, \dots ,m - 1}\sum_{j = 0}^{n - 1} |\verb|A[|i, j\verb|]||
 $$
 
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_inf_norm(A, T{})`を返す。
-  + (4): `matrix_inf_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_inf_norm(A, T{})`を返す。
+    + (4): `matrix_inf_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 備考
-- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -100,7 +100,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::matrix_inf_norm[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_one_norm -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_one_norm.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/matrix_one_norm.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_one_norm.md b/reference/linalg/matrix_one_norm.md
index a0cd520e9..f736b56f9 100644
--- a/reference/linalg/matrix_one_norm.md
+++ b/reference/linalg/matrix_one_norm.md
@@ -43,9 +43,9 @@ namespace std::linalg {
 
 
 ## 効果
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_one_norm(A, T{})`を返す。
-  + (4): `matrix_one_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_one_norm(A, T{})`を返す。
+    + (4): `matrix_one_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 戻り値
@@ -57,13 +57,13 @@ $$
 \verb|init| + \max_{j = 0, \dots ,n - 1}\sum_{i = 0}^{m - 1} |\verb|A[|i, j\verb|]||
 $$
 
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_one_norm(A, T{})`を返す。
-  + (4): `matrix_one_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_one_norm(A, T{})`を返す。
+    + (4): `matrix_one_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 備考
-- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -100,7 +100,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::matrix_one_norm[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setup_givens_rotation -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/setup_givens_rotation.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/setup_givens_rotation.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/setup_givens_rotation.md b/reference/linalg/setup_givens_rotation.md
index 18c9bb4ac..f91e11574 100644
--- a/reference/linalg/setup_givens_rotation.md
+++ b/reference/linalg/setup_givens_rotation.md
@@ -9,13 +9,16 @@
 ```cpp
 namespace std::linalg {
   template&amp;lt;class Real&amp;gt;
-  setup_givens_rotation_result&amp;lt;Real&amp;gt; setup_givens_rotation(Real a, Real b) noexcept; // (1)
+  setup_givens_rotation_result&amp;lt;Real&amp;gt;
+    setup_givens_rotation(Real a, Real b) noexcept; // (1)
 
   template&amp;lt;class Real&amp;gt;
-  setup_givens_rotation_result&amp;lt;complex&amp;lt;Real&amp;gt;&amp;gt; setup_givens_rotation(complex&amp;lt;Real&amp;gt; a, complex&amp;lt;Real&amp;gt; b) noexcept; // (2)
+  setup_givens_rotation_result&amp;lt;complex&amp;lt;Real&amp;gt;&amp;gt;
+    setup_givens_rotation(complex&amp;lt;Real&amp;gt; a, complex&amp;lt;Real&amp;gt; b) noexcept; // (2)
 }
 ```
-
+* setup_givens_rotation_result[link setup_givens_rotation_result.md]
+* complex[link /reference/complex/complex.md]
 
 ## 概要
 ギブンス回転を計算する。すなわち、以下の式が成り立つような、`Real`型の値`c`と `s`, `r`を計算する。
@@ -53,7 +56,7 @@ $$
 
 
 ## 適格要件
-- `Real`は`complex&amp;lt;Real&amp;gt;`が規定できる型であること。
+- `Real`は[`complex`](/reference/complex/complex.md)`&amp;lt;Real&amp;gt;`が規定できる型であること。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setup_givens_rotation_result -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/setup_givens_rotation_result.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/setup_givens_rotation_result.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/setup_givens_rotation_result.md b/reference/linalg/setup_givens_rotation_result.md
index b38e24b36..5cd720420 100644
--- a/reference/linalg/setup_givens_rotation_result.md
+++ b/reference/linalg/setup_givens_rotation_result.md
@@ -21,13 +21,15 @@ namespace std::linalg {
   };
 }
 ```
+* complex[link /reference/complex/complex.md]
+
 
 ## 概要
 ギブンス回転の結果を表すクラス。詳しくは、[`setup_givens_rotation`](setup_givens_rotation.md)にて。
 
 
 ## 適格要件
-- `Real`は`complex&amp;lt;Real&amp;gt;`が規定できる型であること。
+- `Real`は[`complex`](/reference/complex/complex.md)`&amp;lt;Real&amp;gt;`が規定できる型であること。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap_elements -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/swap_elements.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/swap_elements.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/swap_elements.md b/reference/linalg/swap_elements.md
index 4fc87ae70..a8be2a486 100644
--- a/reference/linalg/swap_elements.md
+++ b/reference/linalg/swap_elements.md
@@ -30,6 +30,7 @@ namespace std::linalg {
 
 ## テンプレートパラメータ制約
 `x`と`y`の次元が等しくなければならない。
+
 - `x.rank() == y.rank()`
 
 
@@ -40,6 +41,7 @@ namespace std::linalg {
 
 ## 事前条件
 `x`と`y`の各次元の要素数が等しくなければならない。
+
 - `x.extents() == y.extents()`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_abs_sum -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_abs_sum.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/vector_abs_sum.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_abs_sum.md b/reference/linalg/vector_abs_sum.md
index 837a36833..774fb08c2 100644
--- a/reference/linalg/vector_abs_sum.md
+++ b/reference/linalg/vector_abs_sum.md
@@ -37,25 +37,25 @@ namespace std::linalg {
 
 
 ## 適格要件
-- (1), (2): `decltype(init + `[`abs-if-needed`](abs-if-needed.md)`(`[`real-if-needed`](real-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())) + abs-if-needed(`[`imag-if-needed`](imag-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())))`が`Scalar`に変換可能。
+- (1), (2): `decltype(init +` [`abs-if-needed`](abs-if-needed.md)`(`[`real-if-needed`](real-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())) + abs-if-needed(`[`imag-if-needed`](imag-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())))`が`Scalar`に変換可能。
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 効果
 - (3), (4): `T`を`typename InVec::value_type`とすると、
-  + (3): `vector_abs_sum(v, T{})`を返す。
-  + (4): `vector_abs_sum(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
+    + (3): `vector_abs_sum(v, T{})`を返す。
+    + (4): `vector_abs_sum(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
 
 
 ## 戻り値
 - (1), (2): `N`を`v`の次元`v.extent(0)`とすると、以下を返す。
-  1. もし`N`が0なら`init`
-  2. そうでない場合、もし`InVec::value_type`が算術型なら以下の式の値
+    - もし`N`が0なら`init`
+    - そうでない場合、もし`InVec::value_type`が算術型なら以下の式の値
 
 $$
 \sum_{i = 0}^{N - 1} |\verb|v[|i\verb|]|| + \verb|init|
 $$
 
-  3. そうでない場合、以下の式の値
+    - そうでない場合、以下の式の値
 
 $$
 \sum_{i = 0}^{N - 1} \left\{|\mathrm{Re}(\verb|v[|i\verb|]|)| + |\mathrm{Im}(\verb|v[|i\verb|]|)|\right\} + \verb|init|
@@ -63,12 +63,12 @@ $$
 
 
 - (3), (4): `T`を`typename InVec::value_type`とすると、
-  + (3): `vector_abs_sum(v, T{})`を返す。
-  + (4): `vector_abs_sum(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
+    + (3): `vector_abs_sum(v, T{})`を返す。
+    + (4): `vector_abs_sum(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
 
 
 ## 備考
-- (1), (2): もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -102,7 +102,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::vector_abs_sum[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_idx_abs_sum -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_idx_abs_max.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/vector_idx_abs_max.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_idx_abs_max.md b/reference/linalg/vector_idx_abs_max.md
index 63d50f909..85b4e234d 100644
--- a/reference/linalg/vector_idx_abs_max.md
+++ b/reference/linalg/vector_idx_abs_max.md
@@ -32,16 +32,18 @@ namespace std::linalg {
 
 ## 戻り値
 - (1), (2): `N`を`v`の次元`v.extent(0)`とすると、以下を返す。
-  1. もし`N`が0なら`std::numeric_limits&amp;lt;typename InVec::size_type&amp;gt;::max()`
-  2. そうでない場合、もし`InVec::value_type`が算術型なら絶対値が最大の最初の`v`の成分のインデックス。つまり、
-  $$
-  \argmax_{i = 0, \dots, N - 1} |\verb|v[|i\verb|]||
-  $$
-  3. そうでない場合、
+    + もし`N`が0なら[`std::numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;typename InVec::size_type&amp;gt;::max()`
+    + そうでない場合、もし`InVec::value_type`が算術型なら絶対値が最大の最初の`v`の成分のインデックス。つまり、
 
-  $$
-  \argmax_{i = 0, \dots, N - 1}\left\{|\mathrm{Re}(\verb|v[|i\verb|]|)| + |\mathrm{Im}(\verb|v[|i\verb|]|)|\right\}
-  $$
+$$
+\argmax_{i = 0, \dots, N - 1} |\verb|v[|i\verb|]||
+$$
+
+    + そうでない場合、
+
+$$
+\argmax_{i = 0, \dots, N - 1}\left\{|\mathrm{Re}(\verb|v[|i\verb|]|)| + |\mathrm{Im}(\verb|v[|i\verb|]|)|\right\}
+$$
 
 
 ## 例
@@ -73,7 +75,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::vector_idx_abs_max[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sum_of_squares_result -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_sum_of_squares.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/vector_sum_of_squares.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_sum_of_squares.md b/reference/linalg/vector_sum_of_squares.md
index 98ed9076e..be29e69b5 100644
--- a/reference/linalg/vector_sum_of_squares.md
+++ b/reference/linalg/vector_sum_of_squares.md
@@ -22,6 +22,7 @@ namespace std::linalg {
     sum_of_squares_result&amp;lt;Scalar&amp;gt; init); // (2)
 }
 ```
+* sum_of_squares_result[link sum_of_squares_result.md]
 
 
 ## 概要
@@ -33,6 +34,7 @@ namespace std::linalg {
     return std::pow(result.scaling_factor, 2) * result.scaled_sum_of_squares;
   }
 ```
+* sum_of_squares_result[link sum_of_squares_result.md]
 
 を定義すると、以下の式が成り立つように計算する。
 
@@ -49,19 +51,19 @@ $$
 
 
 ## 効果
-- (1): 以下の条件を満たす`sum_of_squares_result&amp;lt;Scalar&amp;gt;`型の値`result`を返す。
-  + `result.scaling_factor`が`init.scaling_factor`と$\max_{i = 0, \dots, n - 1}|\verb|v[|i\verb|]||$の最大値。ただし、`n`は`v`の次元である。
-  + 概要に記載した式を満たす。
+- (1): 以下の条件を満たす[`sum_of_squares_result`](sum_of_squares_result.md)`&amp;lt;Scalar&amp;gt;`型の値`result`を返す。
+    + `result.scaling_factor`が`init.scaling_factor`と$\max_{i = 0, \dots, n - 1}|\verb|v[|i\verb|]||$の最大値。ただし、`n`は`v`の次元である。
+    + 概要に記載した式を満たす。
 - (2): (1)の並列アルゴリズム版。
 
 
 ## 戻り値
-`sum_of_squares_result&amp;lt;Scalar&amp;gt;`
+[`sum_of_squares_result`](sum_of_squares_result.md)`&amp;lt;Scalar&amp;gt;`
 
 
 ## 備考
 - `init.scaled_sum_of_squares`は0以上でなければならない。
-- もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -109,7 +111,8 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::vector_sum_of_squares[color ff0000]
+* std::linalg::sum_of_squares_result[link sum_of_squares_result.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_two_norm -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_two_norm.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/vector_two_norm.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_two_norm.md b/reference/linalg/vector_two_norm.md
index 1178dc20c..46ce843d5 100644
--- a/reference/linalg/vector_two_norm.md
+++ b/reference/linalg/vector_two_norm.md
@@ -37,14 +37,14 @@ namespace std::linalg {
 
 
 ## 適格要件
-- (1), (2): `decltype(init + `[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`が`Scalar`に変換可能。
+- (1), (2): `decltype(init +` [`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`が`Scalar`に変換可能。
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 効果
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`とすると、
-  + (3): `vector_two_norm(v, T{})`を返す。
-  + (4): `vector_two_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`とすると、
+    + (3): `vector_two_norm(v, T{})`を返す。
+    + (4): `vector_two_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
 
 
 ## 戻り値
@@ -55,13 +55,13 @@ $$
 $$
 
 
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`とすると、
-  + (3): `vector_two_norm(v, T{})`を返す。
-  + (4): `vector_two_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`とすると、
+    + (3): `vector_two_norm(v, T{})`を返す。
+    + (4): `vector_two_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
 
 
 ## 備考
-- (1), (2): もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -95,7 +95,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::vector_two_norm[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_idx_abs_sum -- linalg/vector_idx_abs_max: fix page title</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_idx_abs_max.html"/>
      <id>0ee79ff478e2f18eb89dc3a93bc1fbf85b8accdc:reference/linalg/vector_idx_abs_max.md</id>
      <updated>2024-07-11T18:31:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_idx_abs_max.md b/reference/linalg/vector_idx_abs_max.md
index 87b5300fc..63d50f909 100644
--- a/reference/linalg/vector_idx_abs_max.md
+++ b/reference/linalg/vector_idx_abs_max.md
@@ -1,4 +1,4 @@
-# vector_abs_sum
+# vector_idx_abs_sum
 
 * [mathjax enable]
 * linalg[meta header]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- ロゴサイズを調整 #1297</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>94d1eced0b8ba8b85dbef3eeebc88ef1fca629a9:index.md</id>
      <updated>2024-07-11T14:47:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjp - C++日本語リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;最新C++バージョンのリファレンスを提供していきます。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;HTMLデータのダウンロード&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/cpprefjp.github.io/archive/refs/heads/master.zip&#34; target=&#34;_blank&#34;&gt;cpprefjp.github.io-master.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ローカルで閲覧できるHTMLを用意しています。&lt;/p&gt;
&lt;h2&gt;スポンサーシップ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプロジェクトは、持続的な活動のため、ユーザーの方々からのご支援をお待ちしております。上記Open Collectiveのプロジェクトでスポンサーシップの募集をしております。&lt;/p&gt;
&lt;p&gt;ご支援いただくユーザーの方々には、以下の特典があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本ページ (cpprefjpサイトのトップページ) に、金額順でロゴを表示させていただきます (金額が同じ場合は登録順)&lt;/li&gt;
&lt;li&gt;シルバースポンサー以上の方は、&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;cpprefjp/site&lt;/a&gt;リポジトリのissueとして、採用情報を投稿できます (一週間ほどで閉じます)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ご支援いただいた資金は、貢献度に応じてコントリビューターに分配させていただきます。&lt;/p&gt;
&lt;p&gt;また、スポンサーシップの入金方法として、Open Collectiveのほかに銀行振込も対応しております。&lt;/p&gt;
&lt;p&gt;銀行振込に関して、またはそれ以外でスポンサーシップの相談に関しては、以下のメールアドレスにお問い合わせください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メールアドレス : &lt;a href=&#34;mailto:cpprefjp_org@googlegroups.com&#34;&gt;cpprefjp_org@googlegroups.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;宛名 : cpprefjp管理者&lt;ul&gt;
&lt;li&gt;代表として、主に高橋晶 (Akira Takahashi) がご対応させていただきます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190112041213/http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スポンサー&lt;/h2&gt;
&lt;p&gt;cpprefjpプロジェクトは、以下の方々にスポンサーになっていただいております。&lt;/p&gt;
&lt;h3&gt;ゴールドスポンサー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hiroshi様&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://shiguredo.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;shiguredo&#34; src=&#34;static/image/sponsors/shiguredo/shiguredo.png&#34; width=&#34;560&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cocotone.jp&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;cocotone&#34; src=&#34;static/image/sponsors/cocotone/cocotone.png&#34; width=&#34;560&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;シルバースポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.fixstars.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Fixstars&#34; src=&#34;static/image/sponsors/Fixstars/fixstars-logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://acerola-software.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Acerola Software&#34; src=&#34;static/image/sponsors/Acerola/as_logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://vaporoid.com/sys/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;vaporoid&#34; src=&#34;static/image/sponsors/vaporoid/cpprefjp-400x150.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cube-soft.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;CubeSoft&#34; src=&#34;https://raw.githubusercontent.com/cube-soft/cube.assets/master/home/banner/large.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://mkohana.github.io/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;M.Kohana&#34; src=&#34;static/image/sponsors/m_kohana/m_kohana.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.pegasys-inc.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;pegasys&#34; src=&#34;https://tmpgenc.pegasys-inc.com/images/pegasys_logo.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.techarts.co.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;technical arts&#34; src=&#34;static/image/sponsors/technical_arts/TechnicalArtsLogo3.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;ブロンズスポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://opencollective.com/odan&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;odan&#34; src=&#34;https://odan.dev/icon.jpeg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.unagiworks.net/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;unagi&#34; src=&#34;https://www.unagiworks.net/blog/wp-content/uploads/2019/01/logo.gif&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/nodchip&#34; target=&#34;_blank&#34;&gt;nodchip&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;イシハラユウヤ様&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/meg_nakagami&#34; target=&#34;_blank&#34;&gt;Megumi Nakagami様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/minachun/minachun&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;minachun / J.Minami&#34; src=&#34;https://raw.githubusercontent.com/minachun/minachun/main/banner.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/hashitaku&#34; target=&#34;_blank&#34;&gt;Hashitaku様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;img alt=&#34;yukika2e&#34; src=&#34;static/image/sponsors/yukika2e/yukika2e.png&#34; /&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/ugai&#34; target=&#34;_blank&#34;&gt;ugai様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スポンサーシップについては、以下のページを参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;連絡先が不明なスポンサー様は、ロゴの表示が現在できておりません。Open Collectiveの問い合わせフォームから、表示するロゴ画像とリンク先URLについてご連絡いただきたいです。&lt;/p&gt;
&lt;h2&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;本サイトは、サイトの改善のためにGoogleアナリティクスを使用しています。本サイトをご利用中のブラウザは、Googleに特定の情報を自動的に送信します。本サイトは、この分析のためにCookieを使用します。利用者は、本サイトを利用することで、この目的においてCookieを使用することを許可したものとみなします。&lt;/p&gt;
&lt;p&gt;Googleによるデータ使用の詳細は、以下のURLで確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/ja/policies/privacy/partners/&#34; target=&#34;_blank&#34;&gt;https://www.google.com/intl/ja/policies/privacy/partners/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのアイコン・ロゴ画像は、&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 (CC BY-NC-ND 4.0)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;高解像度画像データ： &lt;a href=&#34;https://github.com/cpprefjp/image/tree/master/cpprefjp/icon&#34; target=&#34;_blank&#34;&gt;cpprefjp/image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- スポンサー追加： テクニカルアーツ社</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>810f928e365029981b2e3e5e2baa9c48e4c22370:index.md</id>
      <updated>2024-07-11T14:40:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjp - C++日本語リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;最新C++バージョンのリファレンスを提供していきます。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;HTMLデータのダウンロード&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/cpprefjp.github.io/archive/refs/heads/master.zip&#34; target=&#34;_blank&#34;&gt;cpprefjp.github.io-master.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ローカルで閲覧できるHTMLを用意しています。&lt;/p&gt;
&lt;h2&gt;スポンサーシップ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプロジェクトは、持続的な活動のため、ユーザーの方々からのご支援をお待ちしております。上記Open Collectiveのプロジェクトでスポンサーシップの募集をしております。&lt;/p&gt;
&lt;p&gt;ご支援いただくユーザーの方々には、以下の特典があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本ページ (cpprefjpサイトのトップページ) に、金額順でロゴを表示させていただきます (金額が同じ場合は登録順)&lt;/li&gt;
&lt;li&gt;シルバースポンサー以上の方は、&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;cpprefjp/site&lt;/a&gt;リポジトリのissueとして、採用情報を投稿できます (一週間ほどで閉じます)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ご支援いただいた資金は、貢献度に応じてコントリビューターに分配させていただきます。&lt;/p&gt;
&lt;p&gt;また、スポンサーシップの入金方法として、Open Collectiveのほかに銀行振込も対応しております。&lt;/p&gt;
&lt;p&gt;銀行振込に関して、またはそれ以外でスポンサーシップの相談に関しては、以下のメールアドレスにお問い合わせください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メールアドレス : &lt;a href=&#34;mailto:cpprefjp_org@googlegroups.com&#34;&gt;cpprefjp_org@googlegroups.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;宛名 : cpprefjp管理者&lt;ul&gt;
&lt;li&gt;代表として、主に高橋晶 (Akira Takahashi) がご対応させていただきます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190112041213/http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スポンサー&lt;/h2&gt;
&lt;p&gt;cpprefjpプロジェクトは、以下の方々にスポンサーになっていただいております。&lt;/p&gt;
&lt;h3&gt;ゴールドスポンサー&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hiroshi様&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://shiguredo.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;shiguredo&#34; src=&#34;static/image/sponsors/shiguredo/shiguredo.png&#34; width=&#34;560&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cocotone.jp&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;cocotone&#34; src=&#34;static/image/sponsors/cocotone/cocotone.png&#34; width=&#34;560&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;シルバースポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.fixstars.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Fixstars&#34; src=&#34;static/image/sponsors/Fixstars/fixstars-logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://acerola-software.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Acerola Software&#34; src=&#34;static/image/sponsors/Acerola/as_logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://vaporoid.com/sys/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;vaporoid&#34; src=&#34;static/image/sponsors/vaporoid/cpprefjp-400x150.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cube-soft.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;CubeSoft&#34; src=&#34;https://raw.githubusercontent.com/cube-soft/cube.assets/master/home/banner/large.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://mkohana.github.io/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;M.Kohana&#34; src=&#34;static/image/sponsors/m_kohana/m_kohana.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.pegasys-inc.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;pegasys&#34; src=&#34;https://tmpgenc.pegasys-inc.com/images/pegasys_logo.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.techarts.co.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;technical arts&#34; src=&#34;static/image/sponsors/technical_arts/TechnicalArtsLogo3.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;ブロンズスポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://opencollective.com/odan&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;odan&#34; src=&#34;https://odan.dev/icon.jpeg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.unagiworks.net/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;unagi&#34; src=&#34;https://www.unagiworks.net/blog/wp-content/uploads/2019/01/logo.gif&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/nodchip&#34; target=&#34;_blank&#34;&gt;nodchip&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;イシハラユウヤ様&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/meg_nakagami&#34; target=&#34;_blank&#34;&gt;Megumi Nakagami様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/minachun/minachun&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;minachun / J.Minami&#34; src=&#34;https://raw.githubusercontent.com/minachun/minachun/main/banner.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/hashitaku&#34; target=&#34;_blank&#34;&gt;Hashitaku様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;img alt=&#34;yukika2e&#34; src=&#34;static/image/sponsors/yukika2e/yukika2e.png&#34; /&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/ugai&#34; target=&#34;_blank&#34;&gt;ugai様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スポンサーシップについては、以下のページを参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;連絡先が不明なスポンサー様は、ロゴの表示が現在できておりません。Open Collectiveの問い合わせフォームから、表示するロゴ画像とリンク先URLについてご連絡いただきたいです。&lt;/p&gt;
&lt;h2&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;本サイトは、サイトの改善のためにGoogleアナリティクスを使用しています。本サイトをご利用中のブラウザは、Googleに特定の情報を自動的に送信します。本サイトは、この分析のためにCookieを使用します。利用者は、本サイトを利用することで、この目的においてCookieを使用することを許可したものとみなします。&lt;/p&gt;
&lt;p&gt;Googleによるデータ使用の詳細は、以下のURLで確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/ja/policies/privacy/partners/&#34; target=&#34;_blank&#34;&gt;https://www.google.com/intl/ja/policies/privacy/partners/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのアイコン・ロゴ画像は、&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 (CC BY-NC-ND 4.0)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;高解像度画像データ： &lt;a href=&#34;https://github.com/cpprefjp/image/tree/master/cpprefjp/icon&#34; target=&#34;_blank&#34;&gt;cpprefjp/image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_product -- linalg : 余計なカッコを削除 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_product.html"/>
      <id>7282dc32844e625aae53da097a177c575b61df83:reference/linalg/hermitian_matrix_product.md</id>
      <updated>2024-07-11T10:40:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_product.md b/reference/linalg/hermitian_matrix_product.md
index cba4988bf..dc3c1696a 100644
--- a/reference/linalg/hermitian_matrix_product.md
+++ b/reference/linalg/hermitian_matrix_product.md
@@ -139,8 +139,8 @@ namespace std::linalg {
 ## 事前条件
 - 共通
   + [`multipliable`](multipliable.md)`(A, B, C) == true`
-- (1), (2), (5), (6): [`A.extent(0) == A.extent(1)`]
-- (3), (4), (7), (8): [`B.extent(0) == B.extent(1)`]
+- (1), (2), (5), (6): `A.extent(0) == A.extent(1)`
+- (3), (4), (7), (8): `B.extent(0) == B.extent(1)`
 - (5), (6), (7), (8): [`addable`](addable.md)`(E, E, C) == true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_product -- linalg : 余計なカッコを削除 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_product.html"/>
      <id>7282dc32844e625aae53da097a177c575b61df83:reference/linalg/symmetric_matrix_product.md</id>
      <updated>2024-07-11T10:40:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_product.md b/reference/linalg/symmetric_matrix_product.md
index 46a826621..52897a0b5 100644
--- a/reference/linalg/symmetric_matrix_product.md
+++ b/reference/linalg/symmetric_matrix_product.md
@@ -139,8 +139,8 @@ namespace std::linalg {
 ## 事前条件
 - 共通
   + [`multipliable`](multipliable.md)`(A, B, C) == true`
-- (1), (2), (5), (6): [`A.extent(0) == A.extent(1)`]
-- (3), (4), (7), (8): [`B.extent(0) == B.extent(1)`]
+- (1), (2), (5), (6): `A.extent(0) == A.extent(1)`
+- (3), (4), (7), (8): `B.extent(0) == B.extent(1)`
 - (5), (6), (7), (8): [`addable`](addable.md)`(E, E, C) == true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_product -- linalg : 余計なカッコを削除 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_product.html"/>
      <id>7282dc32844e625aae53da097a177c575b61df83:reference/linalg/triangular_matrix_product.md</id>
      <updated>2024-07-11T10:40:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_product.md b/reference/linalg/triangular_matrix_product.md
index f6febd648..8956496ec 100644
--- a/reference/linalg/triangular_matrix_product.md
+++ b/reference/linalg/triangular_matrix_product.md
@@ -156,8 +156,8 @@ namespace std::linalg {
 ## 事前条件
 - 共通
   + [`multipliable`](multipliable.md)`(A, B, C) == true`
-- (1), (2), (5), (6): [`A.extent(0) == A.extent(1)`]
-- (3), (4), (7), (8): [`B.extent(0) == B.extent(1)`]
+- (1), (2), (5), (6): `A.extent(0) == A.extent(1)`
+- (3), (4), (7), (8): `B.extent(0) == B.extent(1)`
 - (5), (6), (7), (8): [`addable`](addable.md)`(E, E, C) == true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
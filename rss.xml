<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-12-12T08:46:41.218869</updated>
  <id>2cf0a65e-da29-46b0-8dd8-823b4bd685e4</id>

  
    <entry>
      <title>synth-three-way-result -- synth-three-way-resultの修飾順を逆にした</title>
      <link href="https://cpprefjp.github.io/reference/exposition-only/synth-three-way-result.html"/>
      <id>07078f8099ce246a43fe729d9a9e1c1498b71ad9:reference/exposition-only/synth-three-way-result.md</id>
      <updated>2022-12-12T17:42:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/exposition-only/synth-three-way-result.md b/reference/exposition-only/synth-three-way-result.md
index 1254c8602..91ae71050 100644
--- a/reference/exposition-only/synth-three-way-result.md
+++ b/reference/exposition-only/synth-three-way-result.md
@@ -24,8 +24,8 @@ template &amp;lt;class T, class U=T&amp;gt;
 using synth-three-way-result =
   decltype(synth-three-way(declval&amp;lt;T&amp;amp;&amp;gt;(), declval&amp;lt;U&amp;amp;&amp;gt;())); // (2) C++20
 ```
-* synth-three-way[italic]
 * synth-three-way-result[italic]
+* synth-three-way[italic]
 * boolean-testable[link /reference/concepts/boolean-testable.md]
 * three_way_comparable_with[link /reference/compare/three_way_comparable.md]
 * weak_ordering[link /reference/compare/weak_ordering.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forward_list -- forward_list : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list.html"/>
      <id>8c3fc884f8449b4037ad352605731d14618e6476:reference/forward_list/forward_list.md</id>
      <updated>2022-12-12T17:36:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list.md b/reference/forward_list/forward_list.md
index 9a11827aa..91d9d18ae 100644
--- a/reference/forward_list/forward_list.md
+++ b/reference/forward_list/forward_list.md
@@ -132,9 +132,10 @@ namespace std {
 ### 比較演算子
 
 | 名前 | 説明 | 対応バージョン |
-|----------------------------------------------------|----------|-------|
+|--------------------------------------------------|----------|-------|
 | [`operator==`](forward_list/op_equal.md)         | 等値比較 | C++11 |
 | [`operator!=`](forward_list/op_not_equal.md)     | 非等値比較 | C++11 |
+| [`operator&amp;lt;=&amp;gt;`](forward_list/op_compare_3way.md) | 三方比較 | C++20 |
 | [`operator&amp;lt;`](forward_list/op_less.md)           | 左辺が右辺より小さいかの判定を行う | C++11 |
 | [`operator&amp;lt;=`](forward_list/op_less_equal.md)    | 左辺が右辺以下かの判定を行う | C++11 |
 | [`operator&amp;gt;`](forward_list/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- forward_list : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_compare_3way.html"/>
      <id>8c3fc884f8449b4037ad352605731d14618e6476:reference/forward_list/forward_list/op_compare_3way.md</id>
      <updated>2022-12-12T17:36:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_compare_3way.md b/reference/forward_list/forward_list/op_compare_3way.md
new file mode 100644
index 000000000..a414f5732
--- /dev/null
+++ b/reference/forward_list/forward_list/op_compare_3way.md
@@ -0,0 +1,84 @@
+# operator&amp;lt;=&amp;gt;
+* forward_list[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class T, class Allocator&amp;gt;
+  synth-three-way-result&amp;lt;T&amp;gt;
+    operator==(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+               const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++20
+}
+```
+
+## 概要
+`forward_list`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 型 (`const`) `T` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `T` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+
+
+## 効果
+```cpp
+return lexicographical_compare_three_way(
+    x.begin(), x.end(),
+    y.begin(), y.end(),
+    synth-three-way);
+```
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+線形時間
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;forward_list&amp;gt;
+
+int main ()
+{
+  std::forward_list&amp;lt;int&amp;gt; ls1 = {1, 2, 3};
+  std::forward_list&amp;lt;int&amp;gt; ls2 = {1, 2, 3};
+  std::forward_list&amp;lt;int&amp;gt; ls3 = {1, 2, 3, 4};
+
+  // 要素数と要素の値が等しい
+  assert((ls1 &amp;lt;=&amp;gt; ls2) == 0);
+
+  // 要素の値は(左辺の要素数分まで)等しいが要素数が異なる
+  assert((ls1 &amp;lt;=&amp;gt; ls3) != 0);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- forward_list : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_equal.html"/>
      <id>8c3fc884f8449b4037ad352605731d14618e6476:reference/forward_list/forward_list/op_equal.md</id>
      <updated>2022-12-12T17:36:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_equal.md b/reference/forward_list/forward_list/op_equal.md
index 0f809069b..df415d350 100644
--- a/reference/forward_list/forward_list/op_equal.md
+++ b/reference/forward_list/forward_list/op_equal.md
@@ -7,7 +7,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator==(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator==(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++11
 }
 ```
 
@@ -32,6 +33,11 @@ namespace std {
 線形時間
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- forward_list : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_greater.html"/>
      <id>8c3fc884f8449b4037ad352605731d14618e6476:reference/forward_list/forward_list/op_greater.md</id>
      <updated>2022-12-12T17:36:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_greater.md b/reference/forward_list/forward_list/op_greater.md
index 7710e3209..36691c700 100644
--- a/reference/forward_list/forward_list/op_greater.md
+++ b/reference/forward_list/forward_list/op_greater.md
@@ -6,8 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;gt;(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;gt;(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                 const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++11
 }
 ```
 
@@ -57,5 +59,5 @@ true
 
 
 ## 参照
-
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- forward_list : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_greater_equal.html"/>
      <id>8c3fc884f8449b4037ad352605731d14618e6476:reference/forward_list/forward_list/op_greater_equal.md</id>
      <updated>2022-12-12T17:36:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_greater_equal.md b/reference/forward_list/forward_list/op_greater_equal.md
index acf2d7889..6670c89d0 100644
--- a/reference/forward_list/forward_list/op_greater_equal.md
+++ b/reference/forward_list/forward_list/op_greater_equal.md
@@ -6,8 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;gt;=(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++11
 }
 ```
 
@@ -57,5 +59,5 @@ true
 
 
 ## 参照
-
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- forward_list : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_less.html"/>
      <id>8c3fc884f8449b4037ad352605731d14618e6476:reference/forward_list/forward_list/op_less.md</id>
      <updated>2022-12-12T17:36:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_less.md b/reference/forward_list/forward_list/op_less.md
index 15e6aa914..29d9b65c2 100644
--- a/reference/forward_list/forward_list/op_less.md
+++ b/reference/forward_list/forward_list/op_less.md
@@ -6,8 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;lt; (const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;lt;(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                 const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++11
 }
 ```
 
@@ -67,5 +69,5 @@ true
 
 
 ## 参照
-
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- forward_list : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_less_equal.html"/>
      <id>8c3fc884f8449b4037ad352605731d14618e6476:reference/forward_list/forward_list/op_less_equal.md</id>
      <updated>2022-12-12T17:36:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_less_equal.md b/reference/forward_list/forward_list/op_less_equal.md
index efc9c47ec..122293d96 100644
--- a/reference/forward_list/forward_list/op_less_equal.md
+++ b/reference/forward_list/forward_list/op_less_equal.md
@@ -6,8 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;lt;=(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++11
 }
 ```
 
@@ -58,5 +60,5 @@ true
 
 
 ## 参照
-
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- forward_list : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_not_equal.html"/>
      <id>8c3fc884f8449b4037ad352605731d14618e6476:reference/forward_list/forward_list/op_not_equal.md</id>
      <updated>2022-12-12T17:36:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_not_equal.md b/reference/forward_list/forward_list/op_not_equal.md
index a7b1de130..a29772f95 100644
--- a/reference/forward_list/forward_list/op_not_equal.md
+++ b/reference/forward_list/forward_list/op_not_equal.md
@@ -6,8 +6,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator!=(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator!=(const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const forward_list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++11
 }
 ```
 
@@ -67,5 +69,5 @@ true
 
 
 ## 参照
-
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/array/array/op_compare_3way.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/array/array/op_compare_3way.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/op_compare_3way.md b/reference/array/array/op_compare_3way.md
index 552605bd5..18a549fb5 100644
--- a/reference/array/array/op_compare_3way.md
+++ b/reference/array/array/op_compare_3way.md
@@ -25,7 +25,7 @@ namespace std {
 return lexicographical_compare_three_way(
     x.begin(), x.end(),
     y.begin(), y.end(),
-    synth-three-way)
+    synth-three-way);
 ```
 * lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
 * begin()[link begin.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>deque -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/deque/deque.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque.md b/reference/deque/deque.md
index 4f50f1372..466c3e65b 100644
--- a/reference/deque/deque.md
+++ b/reference/deque/deque.md
@@ -128,7 +128,7 @@ namespace std {
 |-------------------------------------------|------------------------------------|-------|
 | [`operator==`](deque/op_equal.md)         | 等値比較 | |
 | [`operator!=`](deque/op_not_equal.md)     | 非等値比較 | |
-| [`operator&amp;lt;=&amp;gt;`](deque/op_compare_3way.md) | 三方比較 | |
+| [`operator&amp;lt;=&amp;gt;`](deque/op_compare_3way.md) | 三方比較 | C++20 |
 | [`operator&amp;lt;`](deque/op_less.md)           | 左辺が右辺より小さいかの判定を行う | |
 | [`operator&amp;lt;=`](deque/op_less_equal.md)    | 左辺が右辺以下かの判定を行う | |
 | [`operator&amp;gt;`](deque/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_compare_3way.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/deque/deque/op_compare_3way.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_compare_3way.md b/reference/deque/deque/op_compare_3way.md
index 17ce9def1..fd47ade56 100644
--- a/reference/deque/deque/op_compare_3way.md
+++ b/reference/deque/deque/op_compare_3way.md
@@ -8,7 +8,8 @@
 namespace std {
   template &amp;lt;class T, class Allocator&amp;gt;
   synth-three-way-result&amp;lt;T&amp;gt;
-    operator==(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+    operator&amp;lt;=&amp;gt;(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++20
 }
 ```
 
@@ -25,7 +26,7 @@ namespace std {
 return lexicographical_compare_three_way(
     x.begin(), x.end(),
     y.begin(), y.end(),
-    synth-three-way)
+    synth-three-way);
 ```
 * lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
 * begin()[link begin.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_equal.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/deque/deque/op_equal.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_equal.md b/reference/deque/deque/op_equal.md
index 0b5706ae9..8c3f42d56 100644
--- a/reference/deque/deque/op_equal.md
+++ b/reference/deque/deque/op_equal.md
@@ -6,7 +6,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator==(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator==(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_greater.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/deque/deque/op_greater.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_greater.md b/reference/deque/deque/op_greater.md
index 11caac7e3..609a42c2f 100644
--- a/reference/deque/deque/op_greater.md
+++ b/reference/deque/deque/op_greater.md
@@ -7,7 +7,8 @@
 namespace std {
   // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;gt;(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;gt;(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                 const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_greater_equal.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/deque/deque/op_greater_equal.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_greater_equal.md b/reference/deque/deque/op_greater_equal.md
index 6c3eae0ad..bcfc4e983 100644
--- a/reference/deque/deque/op_greater_equal.md
+++ b/reference/deque/deque/op_greater_equal.md
@@ -7,7 +7,8 @@
 namespace std {
   // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;gt;=(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_less.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/deque/deque/op_less.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_less.md b/reference/deque/deque/op_less.md
index 82a390692..cb95bdce3 100644
--- a/reference/deque/deque/op_less.md
+++ b/reference/deque/deque/op_less.md
@@ -7,7 +7,8 @@
 namespace std {
   // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;lt;(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;lt;(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                 const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_less_equal.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/deque/deque/op_less_equal.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_less_equal.md b/reference/deque/deque/op_less_equal.md
index 05c430af3..5762b861f 100644
--- a/reference/deque/deque/op_less_equal.md
+++ b/reference/deque/deque/op_less_equal.md
@@ -7,7 +7,8 @@
 namespace std {
   // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;lt;=(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_not_equal.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/deque/deque/op_not_equal.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_not_equal.md b/reference/deque/deque/op_not_equal.md
index 0725dacc3..4b725d1ef 100644
--- a/reference/deque/deque/op_not_equal.md
+++ b/reference/deque/deque/op_not_equal.md
@@ -7,7 +7,8 @@
 namespace std {
   // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator!=(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator!=(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>list -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/list/list.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/list/list.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list.md b/reference/list/list.md
index e7f25943a..bf49d1d98 100644
--- a/reference/list/list.md
+++ b/reference/list/list.md
@@ -133,6 +133,7 @@ namespace std {
 |--------------------------------------------|-------------------------------------|-------|
 | [`operator==`](list/op_equal.md)         | 等値比較                            | |
 | [`operator!=`](list/op_not_equal.md)     | 非等値比較                          | |
+| [`operator&amp;lt;=&amp;gt;`](list/op_compare_3way.md) | 三方比較                            | C++20 |
 | [`operator&amp;lt;`](list/op_less.md)           | 左辺が右辺より小さいかの判定を行う  | |
 | [`operator&amp;lt;=`](list/op_less_equal.md)    | 左辺が右辺以下かの判定を行う        | |
 | [`operator&amp;gt;`](list/op_greater.md)        | 左辺が右辺より大きいかの判定を行う  | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_compare_3way.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/list/list/op_compare_3way.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_compare_3way.md b/reference/list/list/op_compare_3way.md
new file mode 100644
index 000000000..eb0d6c7cb
--- /dev/null
+++ b/reference/list/list/op_compare_3way.md
@@ -0,0 +1,74 @@
+# operator&amp;lt;=&amp;gt;
+* list[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class T, class Allocator&amp;gt;
+  synth-three-way-result&amp;lt;T&amp;gt;
+    operator&amp;lt;=&amp;gt;(const list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                const list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++20
+}
+```
+
+## 概要
+`list`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 型 (`const`) `T` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `T` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+
+
+## 効果
+```cpp
+return lexicographical_compare_three_way(
+    x.begin(), x.end(),
+    y.begin(), y.end(),
+    synth-three-way);
+```
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+線形時間
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;list&amp;gt;
+
+int main ()
+{
+  std::list&amp;lt;int&amp;gt; ls1 = {1, 2, 3};
+  std::list&amp;lt;int&amp;gt; ls2 = {1, 2, 3};
+  std::list&amp;lt;int&amp;gt; ls3 = {1, 2, 3, 4};
+
+  // 要素数と要素の値が等しい
+  assert((ls1 &amp;lt;=&amp;gt; ls2) == 0);
+
+  // 要素の値は(左辺の要素数分まで)等しいが要素数が異なる
+  assert((ls1 &amp;lt;=&amp;gt; ls3) != 0);
+}
+```
+
+### 出力
+```
+```
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_equal.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/list/list/op_equal.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_equal.md b/reference/list/list/op_equal.md
index beeff7973..ada8d47a5 100644
--- a/reference/list/list/op_equal.md
+++ b/reference/list/list/op_equal.md
@@ -31,6 +31,11 @@ namespace std {
 線形時間。ただし、`x`と`y`のサイズが異なる場合は定数時間。
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -63,4 +68,5 @@ false
 ## 参照
 - [LWG Issue 2257. Simplify container requirements with the new algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257)
     - C++14から、2つ目の範囲のendイテレータをとる`equal()`アルゴリズムを使用するようになった。
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_greater.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/list/list/op_greater.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_greater.md b/reference/list/list/op_greater.md
index 737041c06..bdb18a43a 100644
--- a/reference/list/list/op_greater.md
+++ b/reference/list/list/op_greater.md
@@ -5,8 +5,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;gt;(const list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;gt;(const list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                 const list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -45,3 +47,6 @@ true
 ```
 
 
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_greater_equal.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/list/list/op_greater_equal.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_greater_equal.md b/reference/list/list/op_greater_equal.md
index c5840f80b..9484428b9 100644
--- a/reference/list/list/op_greater_equal.md
+++ b/reference/list/list/op_greater_equal.md
@@ -5,8 +5,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;gt;=(const list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -27,7 +29,7 @@ namespace std {
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;list&amp;gt;
 
-int main ()
+int main()
 {
   std::list&amp;lt;int&amp;gt; ls1 = {4, 5, 6};
   std::list&amp;lt;int&amp;gt; ls2 = {1, 2, 3};
@@ -45,3 +47,6 @@ true
 ```
 
 
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_less.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/list/list/op_less.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_less.md b/reference/list/list/op_less.md
index 8c852ffd3..370cb2a38 100644
--- a/reference/list/list/op_less.md
+++ b/reference/list/list/op_less.md
@@ -5,8 +5,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;lt; (const list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;lt;(const list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                 const list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -55,3 +57,6 @@ true
 ```
 
 
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_less_equal.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/list/list/op_less_equal.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_less_equal.md b/reference/list/list/op_less_equal.md
index 0b4b54594..0a723e13f 100644
--- a/reference/list/list/op_less_equal.md
+++ b/reference/list/list/op_less_equal.md
@@ -5,8 +5,10 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;lt;=(const list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -44,4 +46,6 @@ int main ()
 true
 ```
 
-
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_not_equal.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/list/list/op_not_equal.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_not_equal.md b/reference/list/list/op_not_equal.md
index 7792de072..42390ed4d 100644
--- a/reference/list/list/op_not_equal.md
+++ b/reference/list/list/op_not_equal.md
@@ -5,8 +5,10 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator!=(const list&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const list&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator!=(const list&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const list&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++03
 }
 ```
 
@@ -54,4 +56,6 @@ false
 true
 ```
 
-
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- list : 三方比較演算子を追加し、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_compare_3way.html"/>
      <id>00e51609b8afa0aebfd112cc08e7dd1685c224df:reference/vector/vector/op_compare_3way.md</id>
      <updated>2022-12-12T17:27:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_compare_3way.md b/reference/vector/vector/op_compare_3way.md
index 1937fec1a..be8db1d55 100644
--- a/reference/vector/vector/op_compare_3way.md
+++ b/reference/vector/vector/op_compare_3way.md
@@ -26,7 +26,7 @@ namespace std {
 return lexicographical_compare_three_way(
     x.begin(), x.end(),
     y.begin(), y.end(),
-    synth-three-way)
+    synth-three-way);
 ```
 * lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
 * begin()[link begin.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>deque -- deque : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque.html"/>
      <id>414980ee953ccf3c51cbdf15924dc2b26dfad1d4:reference/deque/deque.md</id>
      <updated>2022-12-12T16:57:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque.md b/reference/deque/deque.md
index 77ce553d4..4f50f1372 100644
--- a/reference/deque/deque.md
+++ b/reference/deque/deque.md
@@ -125,9 +125,10 @@ namespace std {
 ### 比較演算子
 
 | 名前 | 説明 | 対応バージョン |
-|---------------------------------------------|------------------------------------|-------|
+|-------------------------------------------|------------------------------------|-------|
 | [`operator==`](deque/op_equal.md)         | 等値比較 | |
 | [`operator!=`](deque/op_not_equal.md)     | 非等値比較 | |
+| [`operator&amp;lt;=&amp;gt;`](deque/op_compare_3way.md) | 三方比較 | |
 | [`operator&amp;lt;`](deque/op_less.md)           | 左辺が右辺より小さいかの判定を行う | |
 | [`operator&amp;lt;=`](deque/op_less_equal.md)    | 左辺が右辺以下かの判定を行う | |
 | [`operator&amp;gt;`](deque/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- deque : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_compare_3way.html"/>
      <id>414980ee953ccf3c51cbdf15924dc2b26dfad1d4:reference/deque/deque/op_compare_3way.md</id>
      <updated>2022-12-12T16:57:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_compare_3way.md b/reference/deque/deque/op_compare_3way.md
new file mode 100644
index 000000000..17ce9def1
--- /dev/null
+++ b/reference/deque/deque/op_compare_3way.md
@@ -0,0 +1,82 @@
+# operator&amp;lt;=&amp;gt;
+* deque[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class T, class Allocator&amp;gt;
+  synth-three-way-result&amp;lt;T&amp;gt;
+    operator==(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+}
+```
+
+## 概要
+`deque`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 型 (`const`) `T` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `T` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+
+
+## 効果
+```cpp
+return lexicographical_compare_three_way(
+    x.begin(), x.end(),
+    y.begin(), y.end(),
+    synth-three-way)
+```
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+線形時間
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;deque&amp;gt;
+
+int main ()
+{
+  std::deque&amp;lt;int&amp;gt; c1 = {1, 2, 3};
+  std::deque&amp;lt;int&amp;gt; c2 = {1, 2, 3};
+  std::deque&amp;lt;int&amp;gt; c3 = {1, 2, 3, 4};
+
+  // 要素数と要素の値が等しい
+  assert((c1 &amp;lt;=&amp;gt; c2) == 0);
+
+  // 要素の値は(左辺の要素数分まで)等しいが要素数が異なる
+  assert((c1 &amp;lt;=&amp;gt; c3) != 0);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- deque : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_equal.html"/>
      <id>414980ee953ccf3c51cbdf15924dc2b26dfad1d4:reference/deque/deque/op_equal.md</id>
      <updated>2022-12-12T16:57:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_equal.md b/reference/deque/deque/op_equal.md
index bf46504fa..0b5706ae9 100644
--- a/reference/deque/deque/op_equal.md
+++ b/reference/deque/deque/op_equal.md
@@ -47,6 +47,11 @@ namespace std {
 `x.`[`size()`](size.md)に対して線形時間。ただし、`x`と`y`のサイズが異なる場合は定数時間。
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -78,4 +83,5 @@ false
 ## 参照
 - [LWG Issue 2257. Simplify container requirements with the new algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257)
     - C++14から、2つ目の範囲のendイテレータをとる`equal()`アルゴリズムを使用するようになった。
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- deque : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_greater.html"/>
      <id>414980ee953ccf3c51cbdf15924dc2b26dfad1d4:reference/deque/deque/op_greater.md</id>
      <updated>2022-12-12T16:57:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_greater.md b/reference/deque/deque/op_greater.md
index 37b79f2aa..11caac7e3 100644
--- a/reference/deque/deque/op_greater.md
+++ b/reference/deque/deque/op_greater.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
   bool operator&amp;gt;(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
 }
@@ -44,5 +45,5 @@ true
 ```
 
 ## 参照
-
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- deque : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_greater_equal.html"/>
      <id>414980ee953ccf3c51cbdf15924dc2b26dfad1d4:reference/deque/deque/op_greater_equal.md</id>
      <updated>2022-12-12T16:57:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_greater_equal.md b/reference/deque/deque/op_greater_equal.md
index 8dc794e80..6c3eae0ad 100644
--- a/reference/deque/deque/op_greater_equal.md
+++ b/reference/deque/deque/op_greater_equal.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
   bool operator&amp;gt;=(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
 }
@@ -44,5 +45,5 @@ true
 ```
 
 ## 参照
-
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- deque : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_less.html"/>
      <id>414980ee953ccf3c51cbdf15924dc2b26dfad1d4:reference/deque/deque/op_less.md</id>
      <updated>2022-12-12T16:57:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_less.md b/reference/deque/deque/op_less.md
index 00eab92d9..82a390692 100644
--- a/reference/deque/deque/op_less.md
+++ b/reference/deque/deque/op_less.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
   bool operator&amp;lt;(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
 }
@@ -53,5 +54,5 @@ true
 ```
 
 ## 参照
-
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- deque : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_less_equal.html"/>
      <id>414980ee953ccf3c51cbdf15924dc2b26dfad1d4:reference/deque/deque/op_less_equal.md</id>
      <updated>2022-12-12T16:57:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_less_equal.md b/reference/deque/deque/op_less_equal.md
index ed49cba23..05c430af3 100644
--- a/reference/deque/deque/op_less_equal.md
+++ b/reference/deque/deque/op_less_equal.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
   bool operator&amp;lt;=(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
 }
@@ -48,5 +49,5 @@ true
 ```
 
 ## 参照
-
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- deque : 三方比較演算子の追加と自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_not_equal.html"/>
      <id>414980ee953ccf3c51cbdf15924dc2b26dfad1d4:reference/deque/deque/op_not_equal.md</id>
      <updated>2022-12-12T16:57:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_not_equal.md b/reference/deque/deque/op_not_equal.md
index 037f7d397..0725dacc3 100644
--- a/reference/deque/deque/op_not_equal.md
+++ b/reference/deque/deque/op_not_equal.md
@@ -5,6 +5,7 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, class Allocator&amp;gt;
   bool operator!=(const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const deque&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
 }
@@ -54,5 +55,5 @@ true
 ```
 
 ## 参照
-
-
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>array -- array : 三方比較演算子の追加と、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/array/array.html"/>
      <id>c76c647f103176a6e2e791b1f16a3d9693113414:reference/array/array.md</id>
      <updated>2022-12-12T16:51:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array.md b/reference/array/array.md
index 619f2e122..855c119a5 100644
--- a/reference/array/array.md
+++ b/reference/array/array.md
@@ -92,10 +92,11 @@ namespace std {
 
 ## 非メンバ関数
 
-| 名前                                        | 説明                                   | 対応バージョン |
-|---------------------------------------------|----------------------------------------|----------------|
+| 名前                                      | 説明                                   | 対応バージョン |
+|-------------------------------------------|----------------------------------------|----------------|
 | [`operator==`](array/op_equal.md)         | 等値比較                               | C++11          |
 | [`operator!=`](array/op_not_equal.md)     | 非等値比較                             | C++11          |
+| [`operator&amp;lt;=&amp;gt;`](array/op_compare_3way.md) | 三方比較                               | C++20          |
 | [`operator&amp;lt;`](array/op_less.md)           | 左辺が右辺より小さいかの判定を行う     | C++11          |
 | [`operator&amp;lt;=`](array/op_less_equal.md)    | 左辺が右辺以下かの判定を行う           | C++11          |
 | [`operator&amp;gt;`](array/op_greater.md)        | 左辺が右辺より大きいかの判定を行う     | C++11          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- array : 三方比較演算子の追加と、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/array/array/op_compare_3way.html"/>
      <id>c76c647f103176a6e2e791b1f16a3d9693113414:reference/array/array/op_compare_3way.md</id>
      <updated>2022-12-12T16:51:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/op_compare_3way.md b/reference/array/array/op_compare_3way.md
new file mode 100644
index 000000000..552605bd5
--- /dev/null
+++ b/reference/array/array/op_compare_3way.md
@@ -0,0 +1,83 @@
+# operator&amp;lt;=&amp;gt;
+* array[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class T, size_t N&amp;gt;
+  constexpr synth-three-way-result&amp;lt;T&amp;gt;
+    operator==(const array&amp;lt;T, N&amp;gt;&amp;amp; x, const array&amp;lt;T, N&amp;gt;&amp;amp; y); // C++20
+}
+```
+
+## 概要
+`array`オブジェクトの三方比較を行う。
+
+
+## テンプレートパラメータ制約
+- 型 (`const`) `T` の値に対して`operator&amp;lt;=&amp;gt;`が定義されるか、型 (`const`) `T` の値に対して`operator&amp;lt;`が定義され全順序をもつこと
+
+
+## 効果
+```cpp
+return lexicographical_compare_three_way(
+    x.begin(), x.end(),
+    y.begin(), y.end(),
+    synth-three-way)
+```
+* lexicographical_compare_three_way[link /reference/algorithm/lexicographical_compare_three_way.md]
+* begin()[link begin.md]
+* end()[link end.md]
+
+
+## 計算量
+線形時間
+
+
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator&amp;lt;`
+    - `operator&amp;lt;=`
+    - `operator&amp;gt;`
+    - `operator&amp;gt;=`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;array&amp;gt;
+
+int main()
+{
+  std::array&amp;lt;int, 3&amp;gt; x = {1, 2, 3};
+  std::array&amp;lt;int, 3&amp;gt; y = {1, 2, 3};
+
+  if ((x &amp;lt;=&amp;gt; y) == 0) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not equal&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+equal
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 10
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- array : 三方比較演算子の追加と、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/array/array/op_equal.html"/>
      <id>c76c647f103176a6e2e791b1f16a3d9693113414:reference/array/array/op_equal.md</id>
      <updated>2022-12-12T16:51:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/op_equal.md b/reference/array/array/op_equal.md
index 35e4e4879..7b890f066 100644
--- a/reference/array/array/op_equal.md
+++ b/reference/array/array/op_equal.md
@@ -35,6 +35,11 @@ namespace std {
 線形時間
 
 
+## 備考
+- この演算子により、以下の演算子が使用可能になる (C++20)：
+    - `operator!=`
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -74,3 +79,5 @@ equal
 - [LWG Issue 2257. Simplify container requirements with the new algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257)
     - C++14から、2つ目の範囲のendイテレータをとる`equal()`アルゴリズムを使用するようになった。
 - [P1023R0 `constexpr` comparison operators for `std::array`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1023r0.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- array : 三方比較演算子の追加と、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/array/array/op_greater.html"/>
      <id>c76c647f103176a6e2e791b1f16a3d9693113414:reference/array/array/op_greater.md</id>
      <updated>2022-12-12T16:51:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/op_greater.md b/reference/array/array/op_greater.md
index f297b1ffa..d61166fc5 100644
--- a/reference/array/array/op_greater.md
+++ b/reference/array/array/op_greater.md
@@ -6,6 +6,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, size_t N&amp;gt;
   bool operator&amp;gt;(const array&amp;lt;T, N&amp;gt;&amp;amp; x, const array&amp;lt;T, N&amp;gt;&amp;amp; y);           // C++11
 
@@ -64,3 +65,5 @@ greater
 
 ## 参照
 - [P1023R0 `constexpr` comparison operators for `std::array`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1023r0.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- array : 三方比較演算子の追加と、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/array/array/op_greater_equal.html"/>
      <id>c76c647f103176a6e2e791b1f16a3d9693113414:reference/array/array/op_greater_equal.md</id>
      <updated>2022-12-12T16:51:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/op_greater_equal.md b/reference/array/array/op_greater_equal.md
index 9ab47e915..d2f41150c 100644
--- a/reference/array/array/op_greater_equal.md
+++ b/reference/array/array/op_greater_equal.md
@@ -6,6 +6,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, size_t N&amp;gt;
   bool operator&amp;gt;=(const array&amp;lt;T, N&amp;gt;&amp;amp; x, const array&amp;lt;T, N&amp;gt;&amp;amp; y);           // C++11
 
@@ -63,3 +64,5 @@ greater equal
 
 ## 参照
 - [P1023R0 `constexpr` comparison operators for `std::array`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1023r0.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- array : 三方比較演算子の追加と、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/array/array/op_less.html"/>
      <id>c76c647f103176a6e2e791b1f16a3d9693113414:reference/array/array/op_less.md</id>
      <updated>2022-12-12T16:51:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/op_less.md b/reference/array/array/op_less.md
index f0781c91d..802d8f4d3 100644
--- a/reference/array/array/op_less.md
+++ b/reference/array/array/op_less.md
@@ -6,6 +6,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, size_t N&amp;gt;
   bool operator&amp;lt;(const array&amp;lt;T, N&amp;gt;&amp;amp; x, const array&amp;lt;T, N&amp;gt;&amp;amp; y);           // C++11
 
@@ -74,3 +75,5 @@ less
 
 ## 参照
 - [P1023R0 `constexpr` comparison operators for `std::array`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1023r0.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- array : 三方比較演算子の追加と、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/array/array/op_less_equal.html"/>
      <id>c76c647f103176a6e2e791b1f16a3d9693113414:reference/array/array/op_less_equal.md</id>
      <updated>2022-12-12T16:51:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/op_less_equal.md b/reference/array/array/op_less_equal.md
index 61a6f073a..3cc899bae 100644
--- a/reference/array/array/op_less_equal.md
+++ b/reference/array/array/op_less_equal.md
@@ -6,6 +6,7 @@
 
 ```cpp
 namespace std {
+  // operator&amp;lt;=&amp;gt;により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, size_t N&amp;gt;
   bool operator&amp;lt;=(const array&amp;lt;T, N&amp;gt;&amp;amp; x, const array&amp;lt;T, N&amp;gt;&amp;amp; y);           // C++11
 
@@ -64,3 +65,5 @@ less equal
 
 ## 参照
 - [P1023R0 `constexpr` comparison operators for `std::array`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1023r0.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- array : 三方比較演算子の追加と、自動導出に対応 #900</title>
      <link href="https://cpprefjp.github.io/reference/array/array/op_not_equal.html"/>
      <id>c76c647f103176a6e2e791b1f16a3d9693113414:reference/array/array/op_not_equal.md</id>
      <updated>2022-12-12T16:51:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/op_not_equal.md b/reference/array/array/op_not_equal.md
index dd1d9c9c2..f3596f509 100644
--- a/reference/array/array/op_not_equal.md
+++ b/reference/array/array/op_not_equal.md
@@ -6,6 +6,7 @@
 
 ```cpp
 namespace std {
+  // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T, size_t N&amp;gt;
   bool operator!=(const array&amp;lt;T, N&amp;gt;&amp;amp; x, const array&amp;lt;T, N&amp;gt;&amp;amp; y);           // C++11
 
@@ -68,3 +69,5 @@ equal
 
 ## 参照
 - [P1023R0 `constexpr` comparison operators for `std::array`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1023r0.pdf)
+- [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
+    - C++20での三方比較演算子の追加と、関連する演算子の自動導出
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
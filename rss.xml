<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-03-19T02:24:07.221223</updated>
  <id>5b047977-e355-449a-bf99-ac515105af7c</id>

  
    <entry>
      <title>identity -- identity : 不可視の文字の削除</title>
      <link href="https://cpprefjp.github.io/reference/functional/identity.html"/>
      <id>5e77e8407ad71d5fb7e7e1d8cf57e1493fe086c6:reference/functional/identity.md</id>
      <updated>2020-03-19T11:20:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/identity.md b/reference/functional/identity.md
index 8e60194ad..ad8b8975a 100644
--- a/reference/functional/identity.md
+++ b/reference/functional/identity.md
@@ -28,7 +28,7 @@ namespace std {
 
 | 名前         | 説明           | 対応バージョン |
 |--------------|----------------|----------------|
-| `operator()` | `return std​::​forward&amp;lt;T&amp;gt;(t);` | C++20          |
+| `operator()` | `return std::forward&amp;lt;T&amp;gt;(t);` | C++20          |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>functional -- identity : サンプルコード出力の追加とclassへの修正</title>
      <link href="https://cpprefjp.github.io/reference/functional.html"/>
      <id>0d699bc654080c0397a0e43bd5236cf22d0d511c:reference/functional.md</id>
      <updated>2020-03-19T11:08:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional.md b/reference/functional.md
index e5f63fc6c..6e2a12ff2 100644
--- a/reference/functional.md
+++ b/reference/functional.md
@@ -122,7 +122,7 @@ struct doubler {
 
 | 名前 | 説明 | 対応バージョン |
 |---------------------------------------------|--------------------------|-------|
-| [`identity`](functional/identity.md)          | 入力値を値カテゴリも含めてそのまま返す (function template) | C++20 |
+| [`identity`](functional/identity.md)          | 入力値を値カテゴリも含めてそのまま返す (class) | C++20 |
 
 
 ## 検索
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>identity -- identity : サンプルコード出力の追加とclassへの修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/identity.html"/>
      <id>0d699bc654080c0397a0e43bd5236cf22d0d511c:reference/functional/identity.md</id>
      <updated>2020-03-19T11:08:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/identity.md b/reference/functional/identity.md
index e649b5452..8e60194ad 100644
--- a/reference/functional/identity.md
+++ b/reference/functional/identity.md
@@ -1,7 +1,7 @@
 # identity
 * functional[meta header]
 * std[meta namespace]
-* class template[meta id-type]
+* class[meta id-type]
 * cpp20[meta cpp]
 
 ```cpp
@@ -68,6 +68,9 @@ int main()
 
 ### 出力
 ```
+20
+10
+30
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>functional -- identity追加 #711</title>
      <link href="https://cpprefjp.github.io/reference/functional.html"/>
      <id>18218a8b7daa8b6836d93bdd2233968c782d31df:reference/functional.md</id>
      <updated>2020-03-19T11:06:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional.md b/reference/functional.md
index 6caa4516d..e5f63fc6c 100644
--- a/reference/functional.md
+++ b/reference/functional.md
@@ -118,6 +118,13 @@ struct doubler {
 | [`not2`](functional/negators.md)          | 二項の述語を論理反転する (function template) | C++17から非推奨&amp;lt;br/&amp;gt; C++20で削除 |
 
 
+## 恒等写像関数オブジェクト
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------------------|--------------------------|-------|
+| [`identity`](functional/identity.md)          | 入力値を値カテゴリも含めてそのまま返す (function template) | C++20 |
+
+
 ## 検索
 
 | 名前 | 説明 | 対応バージョン |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>identity -- identity追加 #711</title>
      <link href="https://cpprefjp.github.io/reference/functional/identity.html"/>
      <id>18218a8b7daa8b6836d93bdd2233968c782d31df:reference/functional/identity.md</id>
      <updated>2020-03-19T11:06:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/identity.md b/reference/functional/identity.md
new file mode 100644
index 000000000..e649b5452
--- /dev/null
+++ b/reference/functional/identity.md
@@ -0,0 +1,84 @@
+# identity
+* functional[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+
+  struct identity {
+    template&amp;lt;class T&amp;gt;
+    constexpr T&amp;amp;&amp;amp; operator()(T&amp;amp;&amp;amp; t) const noexcept;
+
+    using is_transparent = unspecified;
+  };
+}
+```
+* unspecified[italic]
+
+## 概要
+
+`identity`クラスは、引数に対して恒等変換を行う関数オブジェクトである。この恒等変換はC++意味論においてのものであり、値そのもの及びCV修飾や値カテゴリも含めて引数をそのまま返す。
+
+この関数オブジェクトは一切のメンバ変数を持たず、状態を保持しない。
+
+
+## メンバ関数
+
+| 名前         | 説明           | 対応バージョン |
+|--------------|----------------|----------------|
+| `operator()` | `return std​::​forward&amp;lt;T&amp;gt;(t);` | C++20          |
+
+
+## メンバ型
+
+| 名前                   | 説明                                                                                                                                                       | 対応バージョン |
+|------------------------|--------------------------------|----------------|
+| `is_transparent`       | `operator()` が関数テンプレートである事を示すタグ型。&amp;lt;br/&amp;gt;実装依存の型であるがあくまでタグ型であり、型そのものには意味はない。（`T` が `void` の場合のみ） | C++20          |
+
+## 備考
+
+これは主に[`&amp;lt;ranges&amp;gt;`](/reference/ranges.md.nolink)において、カスタマイズ可能な射影操作のデフォルトとして利用される。
+
+## 例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;functional&amp;gt;
+
+//intを受け取ってその値と射影した値を足して返す
+//デフォルトはnを2倍にする
+template&amp;lt;typename Projection = std::identity&amp;gt;
+auto f(int n, Projection proj = {}) -&amp;gt; int {
+  return n + proj(n);
+}
+
+int main()
+{
+  //デフォルトの射影で呼び出し
+  std::cout &amp;lt;&amp;lt; f(10) &amp;lt;&amp;lt; std::endl;
+  //何も足さないようにカスタマイズ
+  std::cout &amp;lt;&amp;lt; f(10, [](int){return 0;}) &amp;lt;&amp;lt; std::endl;
+  //3倍にする
+  std::cout &amp;lt;&amp;lt; f(10, [](int m){return m + m;}) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::identity[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 3
+
+## 参照
+
+- [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>relation -- relation : 不可視の文字の削除</title>
      <link href="https://cpprefjp.github.io/reference/concepts/relation.html"/>
      <id>f60d6f03d651433333f47116daa960f296c987dc:reference/concepts/relation.md</id>
      <updated>2020-03-18T15:52:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/relation.md b/reference/concepts/relation.md
index fbc9c13c3..8def5a9a9 100644
--- a/reference/concepts/relation.md
+++ b/reference/concepts/relation.md
@@ -12,7 +12,7 @@ namespace std {
     predicate&amp;lt;R, T, U&amp;gt; &amp;amp;&amp;amp; predicate&amp;lt;R, U, T&amp;gt;;
 }
 ```
-* regular_­invocable[link /reference/concepts/­invocable.md]
+* regular_invocable[link /reference/concepts/invocable.md]
 * boolean-testable[link /reference/concepts/boolean.md]
 * invoke_result_t[link /reference/type_traits/invoke_result.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>predicate -- predicate : 不可視の文字の削除</title>
      <link href="https://cpprefjp.github.io/reference/concepts/predicate.html"/>
      <id>efa49df481f22ddf016fdbeb224631d776fa889c:reference/concepts/predicate.md</id>
      <updated>2020-03-18T15:51:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/predicate.md b/reference/concepts/predicate.md
index eff7a0d74..27c9d8bc3 100644
--- a/reference/concepts/predicate.md
+++ b/reference/concepts/predicate.md
@@ -11,13 +11,13 @@ namespace std {
     regular_invocable&amp;lt;F, Args...&amp;gt; &amp;amp;&amp;amp; boolean-testable&amp;lt;invoke_result_t&amp;lt;F, Args...&amp;gt;&amp;gt;;
 }
 ```
-* regular_­invocable[link /reference/concepts/­invocable.md]
+* regular_invocable[link /reference/concepts/invocable.md]
 * boolean-testable[link /reference/concepts/boolean.md]
 * invoke_result_t[link /reference/type_traits/invoke_result.md]
 
 ## 概要
 
-`predicate`は、任意の関数呼び出し可能な型`F`が引数`Args...`によって関数呼び出し可能（[`regular_­invocable`](/reference/concepts/­invocable.md)）であり、その戻り値型が`bool`に変換可能であることを表すコンセプトである。
+`predicate`は、任意の関数呼び出し可能な型`F`が引数`Args...`によって関数呼び出し可能（[`regular_invocable`](/reference/concepts/invocable.md)）であり、その戻り値型が`bool`に変換可能であることを表すコンセプトである。
 
 `predicate`のモデルとなる`F`はその引数`Args...`に対しての述語（*predicate*）と呼ばれ、（[`&amp;lt;algorithm&amp;gt;`](/reference/algorithm.md)の関数などにおいて）引数がある条件を満たしているかを判定するものとして利用される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
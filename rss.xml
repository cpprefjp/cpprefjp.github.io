<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-10T10:10:40.850219</updated>
  <id>7001cbe1-5200-4750-81d9-2ec3875913cf</id>

  
    <entry>
      <title>execution -- execution: starts_on (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>331cc4e67f7fba8f4aaa49cbd76c92c513ba3b89:reference/execution/execution.md</id>
      <updated>2025-05-10T19:06:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index c398ec228..7f05c0f7b 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -111,7 +111,7 @@ namespace std::execution {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | [`execution::sender_adaptor_closure`](execution/sender_adaptor_closure.md.nolink) | Senderアダプタ実装用クロージャ型(class template) | C++26 |
-| [`execution::starts_on`](execution/starts_on.md.nolink) | 指定Scheduler上で開始する (customization point object) | C++26 |
+| [`execution::starts_on`](execution/starts_on.md) | 指定Scheduler上で開始する (customization point object) | C++26 |
 | [`execution::continues_on`](execution/continues_on.md.nolink) | 指定Scheduler上で継続する (customization point object) | C++26 |
 | [`execution::on`](execution/on.md.nolink) | 指定Scheduler上で実行する (customization point object) | C++26 |
 | [`execution::schedule_from`](execution/schedule_from.md.nolink) | Sender完了に依存する作業をスケジュール (customization point object) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>into_variant -- execution: starts_on (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/into_variant.html"/>
      <id>331cc4e67f7fba8f4aaa49cbd76c92c513ba3b89:reference/execution/execution/into_variant.md</id>
      <updated>2025-05-10T19:06:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/into_variant.md b/reference/execution/execution/into_variant.md
index 484727fa7..c3fd2b6d2 100644
--- a/reference/execution/execution/into_variant.md
+++ b/reference/execution/execution/into_variant.md
@@ -85,7 +85,7 @@ namespace std::execution {
 
 
 ## カスタマイゼーションポイント
-[Sender](sender.md)`sndr`に[関連付けられた実行ドメイン](get-domain-early.md)`dom`に対して、[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+Senderアルゴリズム構築時に、入力[Sender](sender.md)`sndr`に[関連付けられた実行ドメイン](get-domain-early.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
 [デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>just -- execution: starts_on (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/just.html"/>
      <id>331cc4e67f7fba8f4aaa49cbd76c92c513ba3b89:reference/execution/execution/just.md</id>
      <updated>2025-05-10T19:06:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/just.md b/reference/execution/execution/just.md
index f8183b819..dedcc340c 100644
--- a/reference/execution/execution/just.md
+++ b/reference/execution/execution/just.md
@@ -22,7 +22,7 @@ namespace std::execution {
 
 
 ### Senderアルゴリズムタグ `just`
-Senderアルゴリズム動作説明用のクラステンプレート`impls-for`に対して、下記の特殊化が定義される。
+Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
 
 ```cpp
 namespace std::execution {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>read_env -- execution: starts_on (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/read_env.html"/>
      <id>331cc4e67f7fba8f4aaa49cbd76c92c513ba3b89:reference/execution/execution/read_env.md</id>
      <updated>2025-05-10T19:06:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/read_env.md b/reference/execution/execution/read_env.md
index 41e98e7f8..616da6497 100644
--- a/reference/execution/execution/read_env.md
+++ b/reference/execution/execution/read_env.md
@@ -23,7 +23,7 @@ namespace std::execution {
 
 
 ### Senderアルゴリズムタグ
-Senderアルゴリズム動作説明用のクラステンプレート`impls-for`に対して、下記の特殊化が定義される。
+Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
 
 ```cpp
 namespace std::execution {
@@ -66,8 +66,9 @@ int main()
 * ex::read_env[color ff0000]
 * ex::sender[link sender.md]
 * ex::get_scheduler[link get_scheduler.md]
-* ex::starts_on[link starts_on.md.nolink]
+* ex::starts_on[link starts_on.md]
 * std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* value()[link /reference/optional/optional/value.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule -- execution: starts_on (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule.html"/>
      <id>331cc4e67f7fba8f4aaa49cbd76c92c513ba3b89:reference/execution/execution/schedule.md</id>
      <updated>2025-05-10T19:06:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule.md b/reference/execution/execution/schedule.md
index 36712f705..915d9e716 100644
--- a/reference/execution/execution/schedule.md
+++ b/reference/execution/execution/schedule.md
@@ -13,10 +13,13 @@ namespace std::execution {
 * unspecified[italic]
 
 ## 概要
-`schedule`は、[Scheduler](scheduler.md)から[スケジュールSender](sender.md)を取得するSenderファクトリである。
+`schedule`は、[Scheduler](scheduler.md)からスケジュール[Sender](sender.md)を取得するSenderファクトリである。
+
+### スケジュールSender
+`schedule(sch)`式の結果はスケジュールSender(schedule sender)と呼ばれる。
 
 スケジュールSenderより生成される[非同期操作](operation_state.md)を開始すると、Schedulerに関連付けられた実行リソース上で空の[値完了関数](set_value.md)を呼び出す。
-スケジュールSenderの[値完了Scheduler](get_completion_scheduler.md)は、引数に指定したScheduler`sch`に等しい。
+スケジュールSenderの[値完了Scheduler](get_completion_scheduler.md)は、`schedule(sch)`式の引数に指定した[Scheduler](scheduler.md)`sch`に等しい。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>starts_on -- execution: starts_on (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/starts_on.html"/>
      <id>331cc4e67f7fba8f4aaa49cbd76c92c513ba3b89:reference/execution/execution/starts_on.md</id>
      <updated>2025-05-10T19:06:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/starts_on.md b/reference/execution/execution/starts_on.md
new file mode 100644
index 000000000..2fedaa2a1
--- /dev/null
+++ b/reference/execution/execution/starts_on.md
@@ -0,0 +1,155 @@
+# starts_on
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct starts_on_t { unspecified };
+  inline constexpr starts_on_t starts_on{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`starts_on`は、入力[Sender](sender.md)を指定[Scheduler](scheduler.md)に関連付けられた実行リソースに属する実行エージェント上で開始するSenderアダプタである。
+
+
+## 効果
+説明用の式`sch`と`sndr`に対して、`decltype((sch))`が[`scheduler`](scheduler.md)を満たさない、もしくは`decltype((sndr))`が[`sender`](sender.md)を満たさないとき、呼び出し式`starts_on(sch, sndr)`は不適格となる。
+
+そうでなければ、呼び出し式`starts_on(sch, sndr)`は`sch`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+transform_sender(
+  query-or-default(get_domain, sch, default_domain()),
+  make-sender(starts_on, sch, sndr))
+```
+* transform_sender[link transform_sender.md]
+* query-or-default[link query-or-default.md.nolink]
+* get_domain[link get_domain.md]
+* default_domain()[link default_domain.md]
+* make-sender[link make-sender.md]
+
+
+### Senderアルゴリズムタグ `starts_on`
+説明用の式`out_sndr`と`env`に対して、型`OutSndr`を`decltype((out_sndr))`とする。[`sender-for`](sender-for.md)`&amp;lt;OutSndr, starts_on_t&amp;gt; == false`のとき、式`starts_on.transform_env(out_sndr, env)`および式`starts_on.transform_sender(out_sndr, env)`はいずれも不適格となる。
+
+そうでなければ、下記の通り。
+
+- 式`starts_on.transform_env(out_sndr, env)`は下記と等価。
+
+    ```cpp
+    auto&amp;amp;&amp;amp; [_, sch, _] = out_sndr;
+    return JOIN-ENV(SCHED-ENV(sch), FWD-ENV(env));
+    ```
+    * JOIN-ENV[link JOIN-ENV.md.nolink]
+    * SCHED-ENV[link SCHED-ENV.md.nolink]
+    * FWD-ENV[link ../forwarding_query.md]
+
+- 式`starts_on.transform_sender(out_sndr, env)`は下記と等価。
+
+    ```cpp
+    auto&amp;amp;&amp;amp; [_, sch, sndr] = out_sndr;
+    return let_value(
+      schedule(sch),
+      [sndr = std::forward_like&amp;lt;OutSndr&amp;gt;(sndr)]() mutable
+        noexcept(is_nothrow_move_constructible_v&amp;lt;decay_t&amp;lt;OutSndr&amp;gt;&amp;gt;) {
+        return std::move(sndr);
+      });
+    ```
+    * let_value[link let_value.md.nolink]
+    * schedule[link schedule.md]
+    * is_nothrow_move_constructible_v[link /reference/type_traits/is_nothrow_move_constructible.md]
+    * decay_t[link /reference/type_traits/decay.md]
+    * std::move[link /reference/utility/move.md]
+
+
+## カスタマイゼーションポイント
+Senderアルゴリズム構築時に、[Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](query-or-default.md.nolink)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
+
+[Receiver](receiver.md)との[接続(connect)](connect.md)時に、[関連付けられた実行ドメイン](get-domain-late.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](../execution/default_domain.md)では`starts_on.transform_sender(out_sndr, env)`が呼ばれ、前述仕様通りのSenderへと変換される。
+
+説明用の式`out_sndr`を`starts_on(sch, sndr)`の戻り値[Sender](sender.md)とし、型`OutSndr`を`decltype((out_sndr))`とする。式`out_rcvr`を[`sender_in`](sender_in.md)`&amp;lt;OutSndr, Env&amp;gt; == true`となる[環境](../queryable.md)`Env`に関連付けられた[Receiver](receiver.md)とする。`out_sndr`と`out_rcvr`との[接続(connect)](connect.md)結果[Operation State](operation_state.md)への左辺値参照を`op`としたとき、
+
+- 呼び出し[`start`](start.md)`(op)`は、[Scheduler](scheduler.md)`sch`に関連づけられた実行リソースに属する実行エージェント上で入力[Sender](sender.md)`sndr`を開始すべき。
+- `sch`上でのスケジューリングが失敗した場合、未規定の実行エージェント上で`out_rcvr`の[エラー完了](set_error.md)が行われるべき。
+
+
+## 例
+```cpp example
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::run_loop loop;
+  std::jthread worker{[&amp;amp;]{
+    std::println(&amp;#34;start worker#{}&amp;#34;, std::this_thread::get_id());
+    loop.run();
+  }};
+
+  ex::scheduler auto sch = loop.get_scheduler();
+  ex::sender auto sndr =
+    ex::starts_on(sch, ex::just(21))
+    | ex::then([](int n) {
+      std::println(&amp;#34;on worker#{}&amp;#34;, std::this_thread::get_id());
+      return n * 2;
+    });
+
+  std::println(&amp;#34;main#{}&amp;#34;, std::this_thread::get_id());
+
+  auto [val] = std::this_thread::sync_wait(std::move(sndr)).value();
+  std::println(&amp;#34;val={}&amp;#34;, val);
+
+  loop.finish();
+}
+```
+* ex::starts_on[color ff0000]
+* ex::run_loop[link run_loop.md]
+* ex::sender[link sender.md]
+* ex::scheduler[link scheduler.md]
+* ex::then[link then.md]
+* get_scheduler()[link run_loop/get_scheduler.md]
+* run()[link run_loop/run.md]
+* finish()[link run_loop/finish.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* value()[link /reference/optional/optional/value.md]
+* std::move[link /reference/utility/move.md]
+* std::this_thread::get_id()[link /reference/thread/this_thread/get_id.md]
+
+
+### 出力例
+```
+main#126057012819776
+start worker#126057007023680
+on worker#126057007023680
+val=42
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::schedule`](schedule.md)
+- [`execution::continues_on`](continues_on.md.nolink)
+- [`execution::on`](on.md.nolink)
+
+
+## 参照
+- [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>then -- execution: starts_on (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/then.html"/>
      <id>331cc4e67f7fba8f4aaa49cbd76c92c513ba3b89:reference/execution/execution/then.md</id>
      <updated>2025-05-10T19:06:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/then.md b/reference/execution/execution/then.md
index 3758369d3..54dcb1fdf 100644
--- a/reference/execution/execution/then.md
+++ b/reference/execution/execution/then.md
@@ -32,7 +32,7 @@ transform_sender(get-domain-early(sndr), make-sender(then, f, sndr))
 
 
 ### Senderアルゴリズムタグ `then`
-Senderアルゴリズム動作説明用のクラステンプレート`impls-for`に対して、下記の特殊化が定義される。
+Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
 
 ```cpp
 namespace std::execution {
@@ -60,7 +60,7 @@ namespace std::execution {
 
 
 ## カスタマイゼーションポイント
-[Sender](sender.md)`sndr`に[関連付けられた実行ドメイン](get-domain-early.md)`dom`に対して、[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+Senderアルゴリズム構築時に、入力[Sender](sender.md)`sndr`に[関連付けられた実行ドメイン](get-domain-early.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
 [デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
 
 戻り値の[Sender](sender.md)`out_sndr`が下記を満たさない場合、呼び出し式`then(sndr, f)`の動作は未定義となる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync_wait -- execution: starts_on (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync_wait.html"/>
      <id>331cc4e67f7fba8f4aaa49cbd76c92c513ba3b89:reference/execution/this_thread/sync_wait.md</id>
      <updated>2025-05-10T19:06:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync_wait.md b/reference/execution/this_thread/sync_wait.md
index a82fc3256..d80039fd1 100644
--- a/reference/execution/this_thread/sync_wait.md
+++ b/reference/execution/this_thread/sync_wait.md
@@ -13,7 +13,7 @@ namespace std::this_thread {
 * unspecified[italic]
 
 ## 概要
-`sync_wait`は、[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
+`sync_wait`は、入力[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
 
 `sync_wait`は入力Senderが[値完了シグネチャ](../execution/set_value.md)を1個だけ持つことを要求する。
 値完了シグネチャが複数存在する場合は[`sync_wait_with_variant`](sync_wait_with_variant.md)アルゴリズムを利用する。
@@ -85,7 +85,7 @@ return std::move(state.result);
 
 
 ## カスタマイゼーションポイント
-[Sender](../execution/sender.md)`sndr`に[関連付けられた実行ドメイン](../execution/get-domain-early.md)`dom`に対して、
+入力[Sender](../execution/sender.md)`sndr`に[関連付けられた実行ドメイン](../execution/get-domain-early.md)`dom`に対して、
 [`execution::apply_sender`](../execution/apply_sender.md)経由で`dom.apply_sender(sync_wait, sndr)`が呼ばれる。
 
 [デフォルト実行ドメイン](../execution/default_domain.md)では、`sync_wait.apply_sender(sndr)`が呼ばれる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync_wait_with_variant -- execution: starts_on (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync_wait_with_variant.html"/>
      <id>331cc4e67f7fba8f4aaa49cbd76c92c513ba3b89:reference/execution/this_thread/sync_wait_with_variant.md</id>
      <updated>2025-05-10T19:06:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync_wait_with_variant.md b/reference/execution/this_thread/sync_wait_with_variant.md
index efa32e34b..7e4900711 100644
--- a/reference/execution/this_thread/sync_wait_with_variant.md
+++ b/reference/execution/this_thread/sync_wait_with_variant.md
@@ -13,7 +13,7 @@ namespace std::this_thread {
 * unspecified[italic]
 
 ## 概要
-`sync_wait_with_variant`は、[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
+`sync_wait_with_variant`は、入力[Sender](../execution/sender.md)が完了するまで現在のスレッドをブロックし、非同期操作の結果を取得するSenderコンシューマである。
 
 `sync_wait_with_variant`は入力Senderが複数の[値完了シグネチャ](../execution/set_value.md)を持つケースに対応する。
 値完了シグネチャが1個だけの場合は[`sync_wait`](sync_wait.md)アルゴリズムを利用する。
@@ -76,7 +76,7 @@ return result_type(nullopt);
 
 
 ## カスタマイゼーションポイント
-[Sender](../execution/sender.md)`sndr`に[関連付けられた実行ドメイン](../execution/get-domain-early.md)`dom`に対して、
+入力[Sender](../execution/sender.md)`sndr`に[関連付けられた実行ドメイン](../execution/get-domain-early.md)`dom`に対して、
 [`execution::apply_sender`](../execution/apply_sender.md)経由で`dom.apply_sender(sync_wait_with_variant, sndr)`が呼ばれる。
 
 [デフォルト実行ドメイン](../execution/default_domain.md)では、`sync_wait_with_variant.apply_sender(sndr)`が呼ばれる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>into_variant -- execution/into_variant: 効果説明誤りを修正 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/into_variant.html"/>
      <id>1adf476c417dacd845bb7d30ffcd13a2d1eb7956:reference/execution/execution/into_variant.md</id>
      <updated>2025-05-10T17:07:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/into_variant.md b/reference/execution/execution/into_variant.md
index 3ec44c2b9..484727fa7 100644
--- a/reference/execution/execution/into_variant.md
+++ b/reference/execution/execution/into_variant.md
@@ -49,7 +49,7 @@ namespace std::execution {
 
 `impls-for&amp;lt;into_variant_t&amp;gt;::get-state`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
 
-- 子[Sender](sender.md)の[値完了シグニチャを集約](value_types_of_t.md)した[`variant`](/reference/variant/variant.md)`&amp;lt;`[`tuple`](/reference/variant/variant.md)`&amp;lt;...&amp;gt;, ...&amp;gt;`型をデフォルト構築して返す。
+- 子[Sender](sender.md)の[値完了シグニチャを集約](value_types_of_t.md)した[`variant`](/reference/variant/variant.md)`&amp;lt;`[`tuple`](/reference/variant/variant.md)`&amp;lt;...&amp;gt;, ...&amp;gt;`型を[`type_identity`](/reference/type_traits/type_identity.md)クラステンプレートのパラメータに格納して返す。
 
 ```cpp
 []&amp;lt;class Sndr, class Rcvr&amp;gt;(Sndr&amp;amp;&amp;amp; sndr, Rcvr&amp;amp; rcvr) noexcept
@@ -64,7 +64,8 @@ namespace std::execution {
 
 `impls-for&amp;lt;into_variant_t&amp;gt;::complete`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
 
-- [値完了](set_value.md)の場合、引数パック`args...`から[`variant`](/reference/variant/variant.md)型の送信値を構築して接続先[Receiver](receiver.md)の[値完了関数](set_value.md)を呼び出す。
+- `State`として渡される前述`get-state`メンバ戻り値型([`type_identity`](/reference/type_traits/type_identity.md))から、`into_varinat`の送信値となる[`variant`](/reference/variant/variant.md)`&amp;lt;`[`tuple`](/reference/variant/variant.md)`&amp;lt;...&amp;gt;, ...&amp;gt;`型情報を取り出す。
+- [値完了](set_value.md)の場合、引数パック`args...`から送信値を構築して接続先[Receiver](receiver.md)の[値完了関数](set_value.md)を呼び出す。
 - [エラー完了](set_error.md)または[停止完了](set_stopped.md)の場合、接続先[Receiver](receiver.md)の同種完了関数に全引数を転送する。
 
 ```cpp
@@ -78,7 +79,7 @@ namespace std::execution {
   }
 }
 ```
-* set_value[link set_value.md]
+* set_value_t[link set_value.md]
 * decayed-tuple[link decayed-tuple.md]
 * std::move[link /reference/utility/move.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>into_variant -- execution/into_variant: fix example</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/into_variant.html"/>
      <id>248c362956d5157b1c7924309b6ea6c86b3c87ba:reference/execution/execution/into_variant.md</id>
      <updated>2025-05-10T13:18:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/into_variant.md b/reference/execution/execution/into_variant.md
index 68b6379f1..3ec44c2b9 100644
--- a/reference/execution/execution/into_variant.md
+++ b/reference/execution/execution/into_variant.md
@@ -94,8 +94,8 @@ namespace std::execution {
 #include &amp;lt;tuple&amp;gt;
 #include &amp;lt;print&amp;gt;
 #include &amp;lt;variant&amp;gt;
-#include &amp;lt;stdexec/execution.hpp&amp;gt;
-namespace ex = stdexec;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
 
 struct FizzBuzzSender {
   using sender_concept = ex::sender_t;
@@ -158,6 +158,7 @@ int main()
 * ex::sender_t[link sender.md]
 * ex::sender[link sender.md]
 * ex::completion_signatures[link completion_signatures.md]
+* ex::operation_state[link operation_state.md]
 * ex::set_value_t[link set_value.md]
 * ex::set_value[link set_value.md]
 * ex::operation_state[link operation_state.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: into_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>e411c3ded63dccff143070d9e897fad4128cbd41:reference/execution/execution.md</id>
      <updated>2025-05-10T12:29:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 3bdb0796d..c398ec228 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -125,7 +125,7 @@ namespace std::execution {
 | [`execution::split`](execution/split.md.nolink) | 入力Senderの値を複製送信 (customization point object) | C++26 |
 | [`execution::when_all`](execution/when_all.md.nolink) | 全ての入力Sender完了を待機 (customization point object) | C++26 |
 | [`execution::when_all_with_variant`](execution/when_all_with_variant.md.nolink) | 複数の値完了シグネチャをもつ全ての入力Sender完了を待機 (customization point object) | C++26 |
-| [`execution::into_variant`](execution/into_variant.md.nolink) | 複数の値完了シグネチャを単一[`variant`](/reference/variant/variant.md)型の値完了シグネチャに変換 (customization point object) | C++26 |
+| [`execution::into_variant`](execution/into_variant.md) | 複数の値完了シグネチャを単一[`variant`](/reference/variant/variant.md)型の値完了シグネチャに変換 (customization point object) | C++26 |
 | [`execution::stopped_as_optional`](execution/stopped_as_optional.md.nolink) | 入力Senderの停止完了を[`optional`](/reference/optional/optional.md)型の値完了に変換 (customization point object) | C++26 |
 | [`execution::stopped_as_error`](execution/stopped_as_error.md.nolink) | 入力Senderの停止完了をエラー完了に変換 (customization point object) | C++26 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>child-type -- execution: into_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/child-type.html"/>
      <id>e411c3ded63dccff143070d9e897fad4128cbd41:reference/execution/execution/child-type.md</id>
      <updated>2025-05-10T12:29:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/child-type.md b/reference/execution/execution/child-type.md
new file mode 100644
index 000000000..d9208860c
--- /dev/null
+++ b/reference/execution/execution/child-type.md
@@ -0,0 +1,29 @@
+# child-type
+* execution[meta header]
+* std::execution[meta namespace]
+* type-alias[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class Sndr, size_t I = 0&amp;gt;
+  using child-type = decltype(declval&amp;lt;Sndr&amp;gt;().template get&amp;lt;I+2&amp;gt;());  // exposition only
+}
+```
+* template get[link product-type.md]
+
+## 概要
+[Senderアルゴリズム型](basic-sender.md)`Sndr`の子Sender型を取得する説明専用のエイリアステンプレート。
+
+
+## バージョン
+### 言語
+- C++26
+
+## 関連項目
+- [`execution::schedule_from`](schedule_from.md.nolink)
+- [`execution::into_variant`](into_variant.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>into_variant -- execution: into_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/into_variant.html"/>
      <id>e411c3ded63dccff143070d9e897fad4128cbd41:reference/execution/execution/into_variant.md</id>
      <updated>2025-05-10T12:29:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/into_variant.md b/reference/execution/execution/into_variant.md
new file mode 100644
index 000000000..68b6379f1
--- /dev/null
+++ b/reference/execution/execution/into_variant.md
@@ -0,0 +1,193 @@
+# into_variant
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct into_variant_t { unspecified };
+  inline constexpr into_variant_t into_variant{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`into_variant`は、複数の[値完了シグネチャ](set_value.md)を持つ入力[Sender](sender.md)から複数[`tuple`](/reference/tuple/tuple.md)型からなる[`variant`](/reference/variant/variant.md)型の[値完了シグネチャへと変換](value_types_of_t.md)するSenderアダプタである。
+
+`into_variant`はパイプライン記法をサポートする。
+
+
+## 効果
+説明用の式`sndr`に対して`decltype((sndr))`が[`sender`](sender.md)を満たさないとき、呼び出し式`into_variant(sndr)`は不適格となる。
+
+そうでなければ、呼び出し式`into_variant(sndr)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+transform_sender(get-domain-early(sndr), make-sender(into_variant, {}, sndr))
+```
+* transform_sender[link transform_sender.md]
+* get-domain-early[link get-domain-early.md]
+* make-sender[link make-sender.md]
+
+
+### Senderアルゴリズムタグ `into_variant`
+Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
+
+```cpp
+namespace std::execution {
+  template&amp;lt;&amp;gt;
+  struct impls-for&amp;lt;into_variant_t&amp;gt; : default-impls {
+    static constexpr auto get-state = see below;
+    static constexpr auto complete = see below;
+  };
+}
+```
+* impls-for[link impls-for.md]
+* default-impls[link impls-for.md]
+* see below[italic]
+
+`impls-for&amp;lt;into_variant_t&amp;gt;::get-state`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+
+- 子[Sender](sender.md)の[値完了シグニチャを集約](value_types_of_t.md)した[`variant`](/reference/variant/variant.md)`&amp;lt;`[`tuple`](/reference/variant/variant.md)`&amp;lt;...&amp;gt;, ...&amp;gt;`型をデフォルト構築して返す。
+
+```cpp
+[]&amp;lt;class Sndr, class Rcvr&amp;gt;(Sndr&amp;amp;&amp;amp; sndr, Rcvr&amp;amp; rcvr) noexcept
+  -&amp;gt; type_identity&amp;lt;value_types_of_t&amp;lt;child-type&amp;lt;Sndr&amp;gt;, env_of_t&amp;lt;Rcvr&amp;gt;&amp;gt;&amp;gt; {
+  return {};
+}
+```
+* type_identity[link /reference/type_traits/type_identity.md]
+* value_types_of_t[link value_types_of_t.md]
+* child-type[link child-type.md]
+* env_of_t[link env_of_t.md]
+
+`impls-for&amp;lt;into_variant_t&amp;gt;::complete`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+
+- [値完了](set_value.md)の場合、引数パック`args...`から[`variant`](/reference/variant/variant.md)型の送信値を構築して接続先[Receiver](receiver.md)の[値完了関数](set_value.md)を呼び出す。
+- [エラー完了](set_error.md)または[停止完了](set_stopped.md)の場合、接続先[Receiver](receiver.md)の同種完了関数に全引数を転送する。
+
+```cpp
+[]&amp;lt;class State, class Rcvr, class Tag, class... Args&amp;gt;(
+    auto, State, Rcvr&amp;amp; rcvr, Tag, Args&amp;amp;&amp;amp;... args) noexcept -&amp;gt; void {
+  if constexpr (same_as&amp;lt;Tag, set_value_t&amp;gt;) {
+    using variant_type = typename State::type;
+    TRY-SET-VALUE(rcvr, variant_type(decayed-tuple&amp;lt;Args...&amp;gt;{std::forward&amp;lt;Args&amp;gt;(args)...}));
+  } else {
+    Tag()(std::move(rcvr), std::forward&amp;lt;Args&amp;gt;(args)...);
+  }
+}
+```
+* set_value[link set_value.md]
+* decayed-tuple[link decayed-tuple.md]
+* std::move[link /reference/utility/move.md]
+
+
+## カスタマイゼーションポイント
+[Sender](sender.md)`sndr`に[関連付けられた実行ドメイン](get-domain-early.md)`dom`に対して、[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](../execution/default_domain.md)では無変換。
+
+
+## 例
+```cpp example
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;tuple&amp;gt;
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;variant&amp;gt;
+#include &amp;lt;stdexec/execution.hpp&amp;gt;
+namespace ex = stdexec;
+
+struct FizzBuzzSender {
+  using sender_concept = ex::sender_t;
+  using completion_signatures = ex::completion_signatures&amp;lt;
+    ex::set_value_t(int),
+    ex::set_value_t(std::string)
+  &amp;gt;;
+
+  template &amp;lt;typename Rcvr&amp;gt;
+  struct state {
+    using operation_state_concept = ex::operation_state_t;
+
+    state(Rcvr rcvr, int val)
+      : rcvr_{std::move(rcvr)}, val_{val} {}
+
+    void start() noexcept {
+      if (val_ % 15 == 0) {
+        ex::set_value(std::move(rcvr_), &amp;#34;FizzBuzz&amp;#34;);
+      } else if (val_ % 3 == 0) {
+        ex::set_value(std::move(rcvr_), &amp;#34;Fizz&amp;#34;);
+      } else if (val_ % 5 == 0) {
+        ex::set_value(std::move(rcvr_), &amp;#34;Buzz&amp;#34;);
+      } else {
+        ex::set_value(std::move(rcvr_), val_);
+      }
+    }
+
+    Rcvr rcvr_;
+    int val_;
+  };
+
+  template &amp;lt;typename Rcvr&amp;gt;
+  auto connect(Rcvr rcvr) noexcept {
+    return state{std::move(rcvr), val_};
+  }
+
+  int val_;
+};
+
+template&amp;lt;typename... Ts&amp;gt;
+struct overload : Ts... { using Ts::operator()...; };
+
+int main()
+{
+  int val = 15;
+  ex::sender auto sndr = ex::into_variant(FizzBuzzSender{val});
+  auto [result] = std::this_thread::sync_wait(sndr).value();
+
+  std::visit(overload{
+    [](std::tuple&amp;lt;int&amp;gt; n) {
+      std::println(&amp;#34;(int) {}&amp;#34;, get&amp;lt;0&amp;gt;(n));
+    },
+    [](std::tuple&amp;lt;std::string&amp;gt; s) {
+      std::println(&amp;#34;(str) {}&amp;#34;, get&amp;lt;0&amp;gt;(s));
+    }
+  }, result);
+}
+```
+* ex::into_variant[color ff0000]
+* ex::sender_t[link sender.md]
+* ex::sender[link sender.md]
+* ex::completion_signatures[link completion_signatures.md]
+* ex::set_value_t[link set_value.md]
+* ex::set_value[link set_value.md]
+* ex::operation_state[link operation_state.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* value()[link /reference/optional/optional/value.md]
+* std::move[link /reference/utility/move.md]
+* std::visit[link /reference/variant/visit.md]
+* get&amp;lt;0&amp;gt;[link /reference/tuple/tuple/get.md]
+
+### 出力
+```
+(str) FizzBuzz
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::when_all_with_variant`](when_all_with_variant.md.nolink)
+- [`this_thread::sync_wait_with_variant`](../this_thread/sync_wait_with_variant.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync_wait_with_variant -- execution: into_variant (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync_wait_with_variant.html"/>
      <id>e411c3ded63dccff143070d9e897fad4128cbd41:reference/execution/this_thread/sync_wait_with_variant.md</id>
      <updated>2025-05-10T12:29:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync_wait_with_variant.md b/reference/execution/this_thread/sync_wait_with_variant.md
index 9754db1d4..efa32e34b 100644
--- a/reference/execution/this_thread/sync_wait_with_variant.md
+++ b/reference/execution/this_thread/sync_wait_with_variant.md
@@ -23,7 +23,7 @@ namespace std::this_thread {
 
 
 ## 効果
-説明用の`sndr`を`decltype(`[`into_variant`](into_variant.md.nolink)`(sndr))`が`Sndr`型となる式とする。
+説明用の`sndr`を`decltype(`[`into_variant`](../execution/into_variant.md)`(sndr))`が`Sndr`型となる式とする。
 
 [`sender_in`](../execution/sender_in.md)`&amp;lt;Sndr,` [`sync-wait-env`](sync-wait-env.md)`&amp;gt; == false`のとき、呼び出し式`this_thread::sync_wait_with_variant(sndr)`は不適格となる。
 
@@ -55,7 +55,7 @@ namespace std::this_thread {
 
 
 ### Senderアルゴリズムタグ `sync_wait_with_variant`
-説明用の`sndr`を`decltype(`[`into_variant`](into_variant.md.nolink)`(sndr))`が`Sndr`型となる式とする。
+説明用の`sndr`を`decltype(`[`into_variant`](../execution/into_variant.md)`(sndr))`が`Sndr`型となる式とする。
 
 [`callable`](/reference/functional/callable.md.nolink)`&amp;lt;`[`sync_wait_t`](sync_wait.md)`, Sndr&amp;gt; == false`のとき、式`sync_wait_with_variant.apply_sender(sndr)`は不適格となる。
 
@@ -69,7 +69,7 @@ if (auto opt_value = sync_wait(into_variant(sndr))) {
 return result_type(nullopt);
 ```
 * sync_wait[link sync_wait.md]
-* into_variant[link into_variant.md.nolink]
+* into_variant[link ../execution/into_variant.md]
 * std::move[link /reference/utility/move.md]
 * get&amp;lt;0&amp;gt;[link /reference/tuple/tuple/get.md]
 * nullopt[link /reference/optional/nullopt_t.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extern template [N1987] -- fix typo: ディレクトティブ → ディレクティブ</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/extern_template.html"/>
      <id>a2c9f2ffd68c10ddf59cb6fcb81eeaf73534f92f:lang/cpp11/extern_template.md</id>
      <updated>2025-05-09T22:10:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/extern_template.md b/lang/cpp11/extern_template.md
index e62ec385d..7bedc9cd9 100644
--- a/lang/cpp11/extern_template.md
+++ b/lang/cpp11/extern_template.md
@@ -58,7 +58,7 @@ void user2()
 
 
 ## 仕様
-- `extern template`ディレクトティブがひとつの翻訳単位で現れた場合、他のいずれかの翻訳単位、もしくは同じ翻訳単位の`extern template`指定後に、そのエンティティをインスタンス化しなければならない。そのエンティティがインスタンス化されない場合、プログラムは不適格となる
+- `extern template`ディレクティブがひとつの翻訳単位で現れた場合、他のいずれかの翻訳単位、もしくは同じ翻訳単位の`extern template`指定後に、そのエンティティをインスタンス化しなければならない。そのエンティティがインスタンス化されない場合、プログラムは不適格となる
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
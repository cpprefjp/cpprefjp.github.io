<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-19T05:30:12.739382</updated>
  <id>6283501d-b6f9-4446-b472-34564ae4dd9d</id>

  
    <entry>
      <title>operator&lt;&lt; -- durationのoperator&lt;&lt; : 浮動小数点数を考慮した仕様に修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_ostream.html"/>
      <id>47c74e094d51acd787236b2f154f4760fad388f2:reference/chrono/duration/op_ostream.md</id>
      <updated>2020-11-19T14:25:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_ostream.md b/reference/chrono/duration/op_ostream.md
index 33bb6e472..0153558f6 100644
--- a/reference/chrono/duration/op_ostream.md
+++ b/reference/chrono/duration/op_ostream.md
@@ -23,9 +23,26 @@ namespace std::chrono {
 
 
 ## 効果
-- `charT`が`char`の場合は[`to_string()`](/reference/string/to_string.md)、`wchar_t`の場合は[`to_wstring()`](/reference/string/to_wstring.md)を使用して[`d.count()`](count.md)から[`basic_string`](/reference/string/basic_string.md)`&amp;lt;charT, traits&amp;gt;`を構築し、以下で述べるサフィックスを追加して`os`に出力する：
+以下のように実装し、`duration`オブジェクト`d`を出力ストリーム`os`に出力する：
 
-| `Period::type`単位型 | サフィックス |
+```cpp
+basic_ostringstream&amp;lt;charT, traits&amp;gt; s;
+s.flags(os.flags());
+s.imbue(os.getloc());
+s.precision(os.precision());
+s &amp;lt;&amp;lt; d.count() &amp;lt;&amp;lt; units_suffix;
+return os &amp;lt;&amp;lt; s.str();
+```
+* basic_ostringstream[link /reference/sstream/basic_ostringstream.md.nolink]
+* flags[link /reference/ios/ios_base/flags.md]
+* s.imbue[link /reference/ios/ios_base/imbue.md]
+* os.getloc()[link reference/ios/ios_base/getloc.md]
+* precision[link /reference/ios/ios_base/precision.md]
+* s.str()[link /reference/sstream/basic_ostringstream/str.md.nolink]
+
+ここでの`units_suffix`は、`Period::type`単位型に以下のように対応する：
+
+| `Period::type`単位型 | `units_suffix` |
 |----------------------|--------------|
 | [`atto`](/reference/ratio/si_prefix.md)       | `&amp;#34;as&amp;#34;` |
 | [`femto`](/reference/ratio/si_prefix.md)      | `&amp;#34;fs&amp;#34;` |
@@ -50,8 +67,8 @@ namespace std::chrono {
 
 値`num`を`Period::type::num`、値`den`を`Period::type::den`をゼロ埋めなしの10進数で文字列化したものであるとして、
 
-- `Period::type::den == 1`である場合、サフィックス`&amp;#34;[num]s&amp;#34;`
-- いずれにもあてはまらない場合、サフィックスは`&amp;#34;[num/den]s&amp;#34;`
+- `Period::type::den == 1`である場合、`units_suffix`は`&amp;#34;[num]s&amp;#34;`
+- いずれにもあてはまらない場合、`units_suffix`は`&amp;#34;[num/den]s&amp;#34;`
 
 マイクロ秒として`&amp;#34;µs&amp;#34;`が表現できないエンコーディングの場合、代わりに`&amp;#34;us&amp;#34;`が使用される。
 
@@ -108,3 +125,6 @@ float sec : 1.23s
 - [Clang](/implementation.md#clang): (9.0時点で実装なし)
 - [GCC](/implementation.md#gcc): (9.2時点で実装なし)
 - [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+## 参照
+- [P2051R0 C++ Standard Library Issues to be moved in Prague](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- zoned_timeの推論ガイド : TimeZonePtrとstring_viewの推論ガイドを統合</title>
      <link href="https://cpprefjp.github.io/reference/chrono/zoned_time/op_deduction_guide.html"/>
      <id>c604d8b8a7cdb763b12336eff8f30969afef86c4:reference/chrono/zoned_time/op_deduction_guide.md</id>
      <updated>2020-11-19T14:11:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/zoned_time/op_deduction_guide.md b/reference/chrono/zoned_time/op_deduction_guide.md
index a99b3647b..4ea873e1f 100644
--- a/reference/chrono/zoned_time/op_deduction_guide.md
+++ b/reference/chrono/zoned_time/op_deduction_guide.md
@@ -6,37 +6,43 @@
 
 ```cpp
 namespace std::chrono {
-  zoned_time() -&amp;gt; zoned_time&amp;lt;seconds&amp;gt;;                            // (1) C++20
+  zoned_time() -&amp;gt; zoned_time&amp;lt;seconds&amp;gt;;                          // (1) C++20
 
   template &amp;lt;class Duration&amp;gt;
   zoned_time(sys_time&amp;lt;Duration&amp;gt;)
-    -&amp;gt; zoned_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;;              // (2) C++20
-
-  template &amp;lt;class TimeZonePtr, class Duration&amp;gt;
-  zoned_time(TimeZonePtr, sys_time&amp;lt;Duration&amp;gt;)
-    -&amp;gt; zoned_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;, TimeZonePtr&amp;gt;; // (3) C++20
-
-  template &amp;lt;class TimeZonePtr, class Duration&amp;gt;
-  zoned_time(TimeZonePtr, local_time&amp;lt;Duration&amp;gt;, choose = choose::earliest)
-    -&amp;gt; zoned_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;, TimeZonePtr&amp;gt;; // (4) C++20
-
-  template &amp;lt;class TimeZonePtr, class Duration&amp;gt;
-  zoned_time(TimeZonePtr, zoned_time&amp;lt;Duration&amp;gt;, choose = choose::earliest)
-    -&amp;gt; zoned_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;, TimeZonePtr&amp;gt;; // (5) C++20
-
-  zoned_time(string_view) -&amp;gt; zoned_time&amp;lt;seconds&amp;gt;;                 // (6) C++20
-
-  template &amp;lt;class Duration&amp;gt;
-  zoned_time(string_view, sys_time&amp;lt;Duration&amp;gt;)
-    -&amp;gt; zoned_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;;              // (7) C++20
-
-  template &amp;lt;class Duration&amp;gt;
-  zoned_time(string_view, local_time&amp;lt;Duration&amp;gt;, choose = choose::earliest)
-    -&amp;gt; zoned_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;;              // (8) C++20
-
-  template &amp;lt;class Duration, class TimeZonePtr, class TimeZonePtr2&amp;gt;
-  zoned_time(TimeZonePtr, zoned_time&amp;lt;Duration, TimeZonePtr2&amp;gt;, choose = choose::earliest)
-    -&amp;gt; zoned_time&amp;lt;Duration, TimeZonePtr&amp;gt;;                         // (9) C++20
+    -&amp;gt; zoned_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;;            // (2) C++20
+
+  // 説明用の型
+  template &amp;lt;class TimeZonePtrOrName&amp;gt;
+  using time-zone-representation =
+    conditional_t&amp;lt;is_convertible_v&amp;lt;TimeZonePtrOrName, string_view&amp;gt;,
+                  const time_zone*,
+                  remove_cvref_t&amp;lt;TimeZonePtrOrName&amp;gt;&amp;gt;;
+
+  template &amp;lt;class TimeZonePtrOrName&amp;gt;
+  zoned_time(TimeZonePtrOrName&amp;amp;&amp;amp;)
+    -&amp;gt; zoned_time&amp;lt;seconds,
+                  time-zone-representation&amp;lt;TimeZonePtrOrName&amp;gt;&amp;gt;; // (3) C++20
+
+  template &amp;lt;class TimeZonePtrOrName, class Duration&amp;gt;
+  zoned_time(TimeZonePtrOrName&amp;amp;&amp;amp;,
+            sys_time&amp;lt;Duration&amp;gt;)
+    -&amp;gt; zoned_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;,
+                  time-zone-representation&amp;lt;TimeZonePtrOrName&amp;gt;&amp;gt;; // (4) C++20
+
+  template &amp;lt;class TimeZonePtrOrName, class Duration&amp;gt;
+  zoned_time(TimeZonePtrOrName&amp;amp;&amp;amp;,
+             local_time&amp;lt;Duration&amp;gt;,
+             choose = choose::earliest)
+    -&amp;gt; zoned_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;,
+                  time-zone-representation&amp;lt;TimeZonePtrOrName&amp;gt;&amp;gt;; // (5) C++20
+
+  template &amp;lt;class TimeZonePtrOrName, class Duration&amp;gt;
+  zoned_time(TimeZonePtrOrName&amp;amp;&amp;amp;,
+             zoned_time&amp;lt;Duration&amp;gt;,
+             choose = choose::earliest)
+    -&amp;gt; zoned_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;,
+                  time-zone-representation&amp;lt;TimeZonePtrOrName&amp;gt;&amp;gt;; // (6) C++20
 }
 ```
 * sys_time[link /reference/chrono/sys_time.md]
@@ -44,19 +50,28 @@ namespace std::chrono {
 * local_time[link /reference/chrono/local_time.md]
 * choose[link /reference/chrono/choose.md]
 * string_view[link /reference/string_view/basic_string_view.md]
+* conditional_t[link /reference/type_traits/conditional.md]
+* is_convertible[link /reference/type_traits/is_convertible.md]
+* time_zone[link /reference/chrono/time_zone.md]
+* remove_cvref_t[link /reference/type_traits/remove_cvref.md]
 
 ## 概要
 `std::chrono::zoned_time`クラステンプレートの型推論補助。
 
 - (1) : デフォルトコンストラクタ。秒単位の時間間隔を使用する
 - (2) : [`sys_time`](/reference/chrono/sys_time.md)`&amp;lt;Duration&amp;gt;`からの推論。`Duration`と[`seconds`](/reference/chrono/duration_aliases.md)の共通の時間間隔を使用する
-- (3) : 任意のタイムゾーンオブジェクトへのポインタ型と[`sys_time`](/reference/chrono/sys_time.md)`&amp;lt;Duration&amp;gt;`からの推論。`Duration`と[`seconds`](/reference/chrono/duration_aliases.md)の共通の時間間隔と、受け取ったタイムゾーンオブジェクトへのポインタ型を使用する
-- (4) : 任意のタイムゾーンオブジェクトへのポインタ型、[`local_time`](/reference/chrono/local_time.md)`&amp;lt;Duration&amp;gt;`、[`choose`](/reference/chrono/choose.md)型からの推論。`Duration`と[`seconds`](/reference/chrono/duration_aliases.md)の共通の時間間隔と、受け取ったタイムゾーンオブジェクトへのポインタ型を使用する
-- (5) : 任意のタイムゾーンオブジェクトへのポインタ型、`zoned_time&amp;lt;Duration&amp;gt;`、[`choose`](/reference/chrono/choose.md)型からの推論。`Duration`と[`seconds`](/reference/chrono/duration_aliases.md)の共通の時間間隔と、受け取ったタイムゾーンオブジェクトへのポインタ型を使用する
-- (6) : タイムゾーン名の[`string_view`](/reference/string_view/basic_string_view.md)型からの推論。秒単位の時間間隔を使用する
-- (7) : タイムゾーン名の[`string_view`](/reference/string_view/basic_string_view.md)型と、[`sys_time`](/reference/chrono/sys_time.md)`&amp;lt;Duration&amp;gt;`からの推論。`Duration`と[`seconds`](/reference/chrono/duration_aliases.md)の共通の時間間隔を使用する
-- (8) : タイムゾーン名の[`string_view`](/reference/string_view/basic_string_view.md)型、[`local_time`](/reference/chrono/local_time.md)`&amp;lt;Duration&amp;gt;`、[`choose`](/reference/chrono/choose.md)型からの推論。`Duration`と[`seconds`](/reference/chrono/duration_aliases.md)の共通の時間間隔と、受け取ったタイムゾーンオブジェクトへのポインタ型を使用する
-- (9) : タイムゾーン名の[`string_view`](/reference/string_view/basic_string_view.md)型、`zoned_time&amp;lt;Duration&amp;gt;`、[`choose`](/reference/chrono/choose.md)型からの推論。`Duration`と[`seconds`](/reference/chrono/duration_aliases.md)の共通の時間間隔と、受け取ったタイムゾーンオブジェクトへのポインタ型を使用する
+- (3) : 任意のタイムゾーンオブジェクトへのポインタ型もしくはタイムゾーン名の文字列型からの推論
+    - 時間間隔として[`seconds`](/reference/chrono/duration_aliases.md)をもつ
+    - タイムゾーンへのポインタ型として、渡された型が文字列であれば`const` [`time_zone`](/reference/chrono/time_zone.md)`*`、そうでなければCV参照修飾を外したパラメータ型をもつ
+- (4) : 任意のタイムゾーンオブジェクトへのポインタ型もしくはタイムゾーン名の文字列型と、[`sys_time`](/reference/chrono/sys_time.md)`&amp;lt;Duration&amp;gt;`からの推論
+    - 時間間隔として`Duration`と[`seconds`](/reference/chrono/duration_aliases.md)の共通の型をもつ
+    - タイムゾーンへのポインタ型として、渡された型が文字列であれば`const` [`time_zone`](/reference/chrono/time_zone.md)`*`、そうでなければCV参照修飾を外したパラメータ型をもつ
+- (5) : 任意のタイムゾーンオブジェクトへのポインタ型もしくはタイムゾーン名の文字列型と、[`local_time`](/reference/chrono/local_time.md)`&amp;lt;Duration&amp;gt;`、[`choose`](/reference/chrono/choose.md)型からの推論
+    - 時間間隔として`Duration`と[`seconds`](/reference/chrono/duration_aliases.md)の共通の型をもつ
+    - タイムゾーンへのポインタ型として、渡された型が文字列であれば`const` [`time_zone`](/reference/chrono/time_zone.md)`*`、そうでなければCV参照修飾を外したパラメータ型をもつ
+- (6) : 任意のタイムゾーンオブジェクトへのポインタ型もしくはタイムゾーン名の文字列型、`zoned_time&amp;lt;Duration&amp;gt;`、[`choose`](/reference/chrono/choose.md)型からの推論
+    - 時間間隔として、`Duration`と[`seconds`](/reference/chrono/duration_aliases.md)の共通の型をもつ
+    - タイムゾーンへのポインタ型として、渡された型が文字列であれば`const` [`time_zone`](/reference/chrono/time_zone.md)`*`、そうでなければCV参照修飾を外したパラメータ型をもつ
 
 
 ## 備考
@@ -131,3 +146,7 @@ int main()
 - [Clang](/implementation.md#clang): (9.0時点で実装なし)
 - [GCC](/implementation.md#gcc): (9.2時点で実装なし)
 - [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 参照
+- [P2051R0 C++ Standard Library Issues to be moved in Prague](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>incrementable_traits -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/incrementable_traits.html"/>
      <id>2f246c3bab9cef40549faf7cc16ad6692f239dfc:reference/iterator/incrementable_traits.md</id>
      <updated>2020-11-19T11:31:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/incrementable_traits.md b/reference/iterator/incrementable_traits.md
index e616a2125..0e10befc9 100644
--- a/reference/iterator/incrementable_traits.md
+++ b/reference/iterator/incrementable_traits.md
@@ -59,7 +59,7 @@ namespace std {
 また、標準ライブラリ内のいくつかのクラスに対して予め特殊化が用意されている。
 
 - [`projected`](projected.md)
-- [`common_iterator`](common_iterator.md.nolink)
+- [`common_iterator`](common_iterator.md)
 - [`counted_iterator`](counted_iterator.md.nolink)
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- common_iteratorページ追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator.html"/>
      <id>dc3e09beb7f13b6d8417a62035543a4def198e7b:reference/iterator.md</id>
      <updated>2020-11-19T11:29:16+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;iterator&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;ヘッダでは、イテレータに関する機能群を提供する。
イテレータは日本語では反復子とも呼ばれ、配列やコンテナのような範囲を横断する手段として使用できる。&lt;/p&gt;
&lt;p&gt;C++標準ライブラリのイテレータは、以下のように階層的に定義される。
この階層はC++言語機能の継承と同じように見なせる。たとえば、入力イテレータと前方向イテレータはis a関係が成り立っており、前方向イテレータは入力イテレータと見なすことができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.github.com/cpprefjp/image/master/reference/iterator/iterators.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;C++20以降の標準ライブラリでは、任意のイテレータに対して可能な操作によって上記5つに隣接イテレータ（&lt;em&gt;contiguous iterator&lt;/em&gt;）を加えた6つのイテレータカテゴリを定義する。それぞれ次のイテレータコンセプトが対応する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入力イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_iterator.html&#34;&gt;input_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;出力イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/output_iterator.html&#34;&gt;output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前方向イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/forward_iterator.html&#34;&gt;forward_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;双方向イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/bidirectional_iterator.html&#34;&gt;bidirectional_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ランダムアクセスイテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/random_access_iterator.html&#34;&gt;random_access_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;隣接イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/contiguous_iterator.html&#34;&gt;contiguous_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;イテレータコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_readable.html&#34;&gt;indirectly_readable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照によって読み取り可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_writable.html&#34;&gt;indirectly_writable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照によって書き込み可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/weakly_incrementable.html&#34;&gt;weakly_incrementable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前置/後置インクリメント可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/incrementable.html&#34;&gt;incrementable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;weakly_incrementable&lt;/code&gt;かつ&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/regular.html&#34;&gt;正則&lt;/a&gt; (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_or_output_iterator.html&#34;&gt;input_or_output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基礎的なイテレータコンセプト (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sentinel_for.html&#34;&gt;sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同じ範囲についてのイテレータと番兵 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sized_sentinel_for.html&#34;&gt;sized_sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;距離を定義可能なイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/disable_sized_sentinel_for.html&#34;&gt;disable_sized_sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sentinel_for&amp;lt;S, I&amp;gt;&lt;/code&gt;について、&lt;code&gt;sized_sentinel_for&lt;/code&gt;を不適合にする (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_iterator.html&#34;&gt;input_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/output_iterator.html&#34;&gt;output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/forward_iterator.html&#34;&gt;forward_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/bidirectional_iterator.html&#34;&gt;bidirectional_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/random_access_iterator.html&#34;&gt;random_access_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/contiguous_iterator.html&#34;&gt;contiguous_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータを介した関数呼び出しに関するコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_unary_invocable.html&#34;&gt;indirectly_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型によって呼び出し可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_unary_invocable.html&#34;&gt;indirectly_regular_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正則な&lt;code&gt;indirectly_unary_invocable&lt;/code&gt; (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_unary_predicate.html&#34;&gt;indirect_unary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型についての単項述語 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_binary_predicate.html&#34;&gt;indirect_binary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの要素型についての二項述語 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_equivalence_relation.html&#34;&gt;indirect_equivalence_relation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの要素型についての同値関係 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_strict_weak_order.html&#34;&gt;indirect_strict_weak_order&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの要素型についての狭義の弱順序 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータによるアルゴリズムに関するコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_movable.html&#34;&gt;indirectly_movable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ要素をムーブ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_movable_storable.html&#34;&gt;indirectly_movable_storable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ中間オブジェクトを介して要素をムーブ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_copyable.html&#34;&gt;indirectly_copyable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ要素をコピー可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_copyable_storable.html&#34;&gt;indirectly_copyable_storable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ中間オブジェクトを介して要素をコピー可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_swappable.html&#34;&gt;indirectly_swappable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータ間で要素を交換可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_comparable.html&#34;&gt;indirectly_comparable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータ間で要素を比較可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/permutable.html&#34;&gt;permutable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して要素を並べ替え可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/mergeable.html&#34;&gt;mergeable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して範囲をマージ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sortable.html&#34;&gt;sortable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して範囲をソート可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータの情報&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;iterator_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータに関する型情報(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator.html&#34;&gt;iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを定義するための基底クラス(class template)&lt;/td&gt;
&lt;td&gt;C++17から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_difference_t.html&#34;&gt;iter_difference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;difference_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_value_t.html&#34;&gt;iter_value_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;value_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_reference_t.html&#34;&gt;iter_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;reference_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_rvalue_reference_t.html&#34;&gt;iter_rvalue_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの指す要素の右辺値参照型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_common_reference_t.html&#34;&gt;iter_common_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;value_type&lt;/code&gt;と&lt;code&gt;reference_type&lt;/code&gt;の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/common_reference.html&#34;&gt;common_reference&lt;/a&gt;&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_result_t.html&#34;&gt;indirect_result_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数呼び出し可能な型&lt;code&gt;F&lt;/code&gt;を複数のイテレータ&lt;code&gt;Is...&lt;/code&gt;によって呼び出した時の戻り値型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/projected.html&#34;&gt;projected&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ&lt;code&gt;I&lt;/code&gt;の&lt;code&gt;Proj&lt;/code&gt;による射影操作の結果を表すことのできる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_readable.html&#34;&gt;indirectly_readable&lt;/a&gt;&lt;/code&gt;なクラス (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/incrementable_traits.html&#34;&gt;incrementable_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iter_difference_t&lt;/code&gt;にアダプトするためのカスタマイゼーションポイント (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_readable_traits.html&#34;&gt;indirectly_readable_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iter_value_t&lt;/code&gt;にアダプトするためのカスタマイゼーションポイント (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;input_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;output_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;forward_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;bidirectional_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;random_access_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;contiguous_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータの進行と距離&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/advance.html&#34;&gt;advance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;distance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ間の距離を求める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回前方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/prev.html&#34;&gt;prev&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回後方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ranges_advance.html&#34;&gt;ranges::advance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ranges_distance.html&#34;&gt;ranges::distance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の長さを求める(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ranges_next.html&#34;&gt;ranges::next&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ranges_prev.html&#34;&gt;ranges::prev&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;逆順イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆方向に進むイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/make_reverse_iterator.html&#34;&gt;make_reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;挿入イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_insert_iterator.html&#34;&gt;back_insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;末尾に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_inserter.html&#34;&gt;back_inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;back_insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_insert_iterator.html&#34;&gt;front_insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_inserter.html&#34;&gt;front_inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;front_insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/insert_iterator.html&#34;&gt;insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/inserter.html&#34;&gt;inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素を移動するイテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/move_iterator.html&#34;&gt;move_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照時にムーブするイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/make_move_iterator.html&#34;&gt;make_move_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;move_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/move_sentinel.html&#34;&gt;move_sentinel&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;move_iterator&lt;/code&gt;の終端を表す番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ストリームイテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/istream_iterator.html&#34;&gt;istream_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/istreambuf_iterator.html&#34;&gt;istreambuf_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ostreambuf_iterator.html&#34;&gt;ostreambuf_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;その他のイテレータアダプタ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/common_iterator.html&#34;&gt;common_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ型と番兵型が異なる場合に型を共通化するためのラッパーイテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/counted_iterator.md.nolink&#34;&gt;counted_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;予め指定された&lt;code&gt;N&lt;/code&gt;個の要素だけをイテレートするラッパーイテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;番兵型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/default_sentinel_t.md.nolink&#34;&gt;default_sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の範囲の終端を表すことのできるデフォルトの番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/unreachable_sentinel_t.md.nolink&#34;&gt;unreachable_sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;別の方法で終端が指定される範囲の仮想的な終端を表す番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;先頭イテレータと末尾イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;begin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;end&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/cbegin.html&#34;&gt;cbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/cend.html&#34;&gt;cend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/rbegin.html&#34;&gt;rbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/rend.html&#34;&gt;rend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/crbegin.html&#34;&gt;crbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す読み取り専用逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/crend.html&#34;&gt;crend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す読み取り専用逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンテナアクセス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/size.html&#34;&gt;size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素数を取得する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ssize.html&#34;&gt;ssize&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素数を、符号付き整数型で取得する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/empty.html&#34;&gt;empty&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空かどうかを判定する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/data.html&#34;&gt;data&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素配列へのポインタを取得する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;カスタマイゼーションポイントオブジェクト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_move.md.nolink&#34;&gt;ranges::iter_move&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの指す要素をムーブする (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_swap.md.nolink&#34;&gt;ranges::iter_swap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの指す要素を&lt;em&gt;swap&lt;/em&gt;する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;説明専用コンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;with-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型&lt;code&gt;T&lt;/code&gt;に参照を付加する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;can-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;with-reference&lt;/code&gt;可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;dereferenceable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単純な間接参照が可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/is_integer_like.html&#34;&gt;is-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号付整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/is_integer_like.html&#34;&gt;is-signed-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なし整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf&#34; target=&#34;_blank&#34;&gt;P0896R4 The One Ranges Proposal (was Merging the Ranges TS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_iterator -- common_iteratorページ追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator.html"/>
      <id>dc3e09beb7f13b6d8417a62035543a4def198e7b:reference/iterator/common_iterator.md</id>
      <updated>2020-11-19T11:29:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator.md b/reference/iterator/common_iterator.md
new file mode 100644
index 000000000..47d964995
--- /dev/null
+++ b/reference/iterator/common_iterator.md
@@ -0,0 +1,148 @@
+# common_iterator
+* iterator[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+    requires (!same_as&amp;lt;I, S&amp;gt; &amp;amp;&amp;amp; copyable&amp;lt;I&amp;gt;)
+  class common_iterator {
+
+  private:
+    variant&amp;lt;I, S&amp;gt; v_; // 説明専用メンバ変数
+  };
+
+
+  // incrementable_traitsにアダプトする
+  template&amp;lt;class I, class S&amp;gt;
+  struct incrementable_traits&amp;lt;common_iterator&amp;lt;I, S&amp;gt;&amp;gt; {
+    using difference_type = iter_difference_t&amp;lt;I&amp;gt;;
+  };
+
+  // iterator_traitsにアダプトする
+  template&amp;lt;input_iterator I, class S&amp;gt;
+  struct iterator_traits&amp;lt;common_iterator&amp;lt;I, S&amp;gt;&amp;gt; {
+    using iterator_concept = /*see below*/;
+    using iterator_category = /*see below*/;
+    using value_type = iter_value_t&amp;lt;I&amp;gt;;
+    using difference_type = iter_difference_t&amp;lt;I&amp;gt;;
+    using pointer = /*see below*/;
+    using reference = iter_reference_t&amp;lt;I&amp;gt;;
+  };
+}
+```
+* input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* same_as[link /reference/concepts/same_as.md]
+* copyable[link /reference/concepts/copyable.md]
+* variant[link /reference/variant/variant.md]
+* incrementable_traits[link /reference/iterator/incrementable_traits.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* iterator_traits[link /reference/iterator/iterator_traits.md]
+* iter_value_t[link /reference/iterator/iter_value_t.md]
+* iter_reference_t[link /reference/iterator/iter_reference_t.md]
+
+## 概要
+`common_iterator`は、イテレータ型と番兵型が異なる範囲についてそれぞれをラップして、同じ範囲を表しながらイテレータ型と番兵型を共通化させるためのイテレータ/番兵アダプタである。
+
+同じ範囲についてのイテレータ/番兵を保持して、等値比較演算子を適切に実装することで共通化を行う。
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------------|-------------|-------|
+| [`(constructor)`](common_iterator/op_constructor.md.nolink) | コンストラクタ | C++20 |
+| [`operator=`](common_iterator/op_assign.md.nolink)          | 代入演算子 | C++20 |
+| [`operator*`](common_iterator/op_deref.md.nolink)           | 間接参照演算子 | C++20 |
+| [`operator-&amp;gt;`](common_iterator/op_arrow.md.nolink)          | メンバアクセス演算子 | C++20 |
+| [`operator++`](common_iterator/op_increment.md.nolink)      | イテレータをインクリメントする | C++20 |
+
+## 非メンバ（*Hidden friends*）関数
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------------|-------------|-------|
+| [`operator==`](common_iterator/op_equal.md.nolink)         | 等値比較 | C++20 |
+| `operator!=`     | 非等値比較 (`==`により使用可能) | C++20 |
+| [`operator-`](common_iterator/op_minus.md.nolink)          | 2つの`common_iterator`の差を求める | C++20 |
+| [`iter_move`](common_iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++20 |
+| [`iter_swap`](common_iterator/iter_swap.md.nolink)     | イテレータの要素の交換 | C++20 |
+
+## `iterator_traits`の型
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------------|-------------|-------|
+| `iterator_concept` | [`forward_iterator_tag`](/reference/iterator/iterator_tag.md) &amp;lt;br/&amp;gt; ただし、`I`が[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルではない場合は[`input_iterator_tag`](/reference/iterator/iterator_tag.md) | C++20 |
+| `iterator_category` | [`forward_iterator_tag`](/reference/iterator/iterator_tag.md) &amp;lt;br/&amp;gt; ただし、[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;I&amp;gt;::iterator_category`が[`derived_from`](/reference/concepts/derived_from.md)`&amp;lt;forward_iterator_tag&amp;gt;`のモデルではない場合は`input_iterator_tag` | C++20 |
+| `value_type` | [`iter_value_t`](/reference/iterator/iter_value_t.md)`&amp;lt;I&amp;gt;` | C++20 |
+| `difference_type` | [`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;I&amp;gt;` | C++20 |
+| `pointer` | `void` &amp;lt;br/&amp;gt; ただし、[`operator-&amp;gt;`](common_iterator/op_arrow.md.nolink)が利用可能である場合はその戻り値型 | C++20 |
+| `reference` | [`iter_reference_t`](/reference/iterator/iter_reference_t.md)`&amp;lt;I&amp;gt;`  | C++20 |
+
+
+## 例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+// イテレータによって範囲の要素を出力する
+// イテレータ型と番兵型が同一であることを前提とするレガシーな実装
+template&amp;lt;typename I&amp;gt;
+void iter_output(I it, I end) {
+  for (;it != end; ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+  }
+}
+
+int main() {
+  auto seq = std::views::iota(1) | std::views::take(5);
+
+  // 範囲seqはイテレータ型と番兵型が異なっているためそのままだとエラー
+  //iter_output(std::ranges::begin(seq), std::ranges::end(seq));
+
+  // common_iteratorを通すことでイテレータ型と番兵型を合わせる
+  using CI = std::common_iterator&amp;lt;std::ranges::iterator_t&amp;lt;decltype(seq)&amp;gt;, std::ranges::sentinel_t&amp;lt;decltype(seq)&amp;gt;&amp;gt;;
+
+  auto it = CI{std::ranges::begin(seq)};
+  auto end = CI{std::ranges::end(seq)};
+
+  iter_output(it, end);
+}
+```
+* std::common_iterator[color ff0000]
+* views::iota[link /reference/ranges/iota_view.md.nolink]
+* views::take[link /reference/ranges/take_view.md.nolink]
+* iterator_t[link /reference/ranges/iterator_t.md.nolink]
+* sentinel_t[link /reference/ranges/sentinel_t.md.nolink]
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+* seranges::end[link /reference/ranges/end.md.nolink]
+
+### 出力
+
+```
+1
+2
+3
+4
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 7
+
+## 関連項目
+
+- [`common_range`](/reference/ranges/common_range.md.nolink)
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [Hidden Friends - yohhoyの日記](https://yohhoy.hatenadiary.jp/entry/20190531/p1)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- move_sentinel : 利用例追加</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_equal.html"/>
      <id>85e60cf1c7359e2d9eeb691143464712cc634ca2:reference/iterator/move_iterator/op_equal.md</id>
      <updated>2020-11-18T14:42:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_equal.md b/reference/iterator/move_iterator/op_equal.md
index a2d05ee62..954b3a754 100644
--- a/reference/iterator/move_iterator/op_equal.md
+++ b/reference/iterator/move_iterator/op_equal.md
@@ -6,22 +6,27 @@
 
 ```cpp
 namespace std {
+  template &amp;lt;class Iterator&amp;gt;
+  class move_iterator {
+
+    template &amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+    friend constexpr bool operator==(const move_iterator&amp;amp; x,
+                                     const move_sentinel&amp;lt;S&amp;gt;&amp;amp; y);  // (1) C++20
+    
+    // (1)のoperator==により、以下のオーバーロードが使用可能になる
+    template &amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+    friend constexpr bool operator==(const move_sentinel&amp;lt;S&amp;gt;&amp;amp; x,
+                                     const move_iterator&amp;amp; y);     // (2) C++20
+  };
+
+
   template &amp;lt;class Iterator1, class Iterator2&amp;gt;
   bool operator==(const move_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x,
-                  const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y);           // (1) C++11
+                  const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y);             // (3) C++11
 
   template &amp;lt;class Iterator1, class Iterator2&amp;gt;
   constexpr bool operator==(const move_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x,
-                            const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y); // (1) C++17
-
-  template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
-  friend constexpr bool operator==(const move_iterator&amp;amp; x,
-                                   const move_sentinel&amp;lt;S&amp;gt;&amp;amp; y);  // (2) C++20
-  
-  // (2)のoperator==により、以下のオーバーロードが使用可能になる
-  template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
-  friend constexpr bool operator==(const move_sentinel&amp;lt;S&amp;gt;&amp;amp; x,
-                                   const move_iterator&amp;amp; y);     // (3) C++20
+                            const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y);   // (3) C++17
 }
 ```
 * sentinel_for[link /reference/iterator/sentinel_for.md)
@@ -45,7 +50,7 @@ namespace std {
 
 ## 備考
 
-C++20以降、この演算子により以下の演算子が使用可能になる。
+C++20以降、これらの演算子により以下の演算子が使用可能になる。
 
 - [`operator!=(const move_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x, const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y)`](/reference/iterator/move_iterator/op_not_equal.md) 
 - `operator!=(const move_iterator&amp;amp; x, const move_sentinel&amp;lt;S&amp;gt;&amp;amp; y)`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- (非メンバ関数) -- move_sentinel : 利用例追加</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_minus.html"/>
      <id>85e60cf1c7359e2d9eeb691143464712cc634ca2:reference/iterator/move_iterator/op_minus.md</id>
      <updated>2020-11-18T14:42:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_minus.md b/reference/iterator/move_iterator/op_minus.md
index 23afb4c2c..44563d80d 100644
--- a/reference/iterator/move_iterator/op_minus.md
+++ b/reference/iterator/move_iterator/op_minus.md
@@ -6,23 +6,27 @@
 
 ```cpp
 namespace std {
+  template &amp;lt;class Iterator&amp;gt;
+  class move_iterator {
+
+    template &amp;lt;sized_sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+    friend constexpr iter_difference_t&amp;lt;Iterator&amp;gt;
+      operator-(const move_sentinel&amp;lt;S&amp;gt;&amp;amp; x, const move_iterator&amp;amp; y); // (1) C++20
+
+    template &amp;lt;sized_sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+    friend constexpr iter_difference_t&amp;lt;Iterator&amp;gt;
+      operator-(const move_iterator&amp;amp; x, const move_sentinel&amp;lt;S&amp;gt;&amp;amp; y); // (2) C++20
+  };
+
   template &amp;lt;class Iterator1, class Iterator2&amp;gt;
   auto operator-(const move_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x,
                  const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y)
-    -&amp;gt; decltype(x.base() - y.base());                             // (1) C++11
+    -&amp;gt; decltype(x.base() - y.base());                               // (3) C++11
 
   template &amp;lt;class Iterator1, class Iterator2&amp;gt;
   constexpr auto operator-(const move_iterator&amp;lt;Iterator1&amp;gt;&amp;amp; x,
                            const move_iterator&amp;lt;Iterator2&amp;gt;&amp;amp; y)
-    -&amp;gt; decltype(x.base() - y.base());                             // (1) C++17
-
-  template&amp;lt;sized_sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
-  friend constexpr iter_difference_t&amp;lt;Iterator&amp;gt;
-    operator-(const move_sentinel&amp;lt;S&amp;gt;&amp;amp; x, const move_iterator&amp;amp; y); // (2) C++20
-
-  template&amp;lt;sized_sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
-  friend constexpr iter_difference_t&amp;lt;Iterator&amp;gt;
-    operator-(const move_iterator&amp;amp; x, const move_sentinel&amp;lt;S&amp;gt;&amp;amp; y); // (3) C++20
+    -&amp;gt; decltype(x.base() - y.base());                               // (3) C++17
 }
 ```
 * base[link /reference/iterator/move_iterator/base.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>move_sentinel -- move_sentinel : 利用例追加</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_sentinel.html"/>
      <id>85e60cf1c7359e2d9eeb691143464712cc634ca2:reference/iterator/move_sentinel.md</id>
      <updated>2020-11-18T14:42:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_sentinel.md b/reference/iterator/move_sentinel.md
index 23e8b6a0d..3934767a1 100644
--- a/reference/iterator/move_sentinel.md
+++ b/reference/iterator/move_sentinel.md
@@ -39,27 +39,30 @@ namespace std {
 | [`operator!=`](move_iterator/op_equal.md)     | 非等値比較（`==`により使用可能） | C++20 |
 | [`operator-`](move_iterator/op_minus.md)          | `move_iterator`との距離を求める | C++20 |
 
-## 例
+## 利用例
 
-(執筆中)
+例えば次のようなアルゴリズムを構成する際に利用する事ができる。
 
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
-#include &amp;lt;vector&amp;gt;
-#include &amp;lt;memory&amp;gt;
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 
-int main()
-{
+// 範囲[first, last)から条件を満たす要素だけをムーブしてoutへ出力する
+template&amp;lt;std::input_iterator I, std::sentinel_for&amp;lt;I&amp;gt; S, std::weakly_incrementable O, std::indirect_unary_predicate&amp;lt;I&amp;gt; Pred&amp;gt;
+  requires std::indirectly_movable&amp;lt;I, O&amp;gt;
+void move_if(I first, S last, O out, Pred pred) {
+  // 番兵型SがIと異なり、イテレータ要件を満たさなかったとしても、move_iterator&amp;lt;I&amp;gt;の終端として扱う事ができる
+  std::ranges::copy_if(std::move_iterator&amp;lt;I&amp;gt;{first}, std::move_sentinel&amp;lt;S&amp;gt;{last}, out, pred);
 }
 ```
-* std::make_move_iterator[color ff0000]
-* v.emplace_back[link /reference/vector/vector/emplace_back.md]
+* std::move_sentinel[color ff0000]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* indirectly_movable[link /reference/iterator/indirectly_movable.md]
+* copy_if[link /reference/algorithm/copy_if.md]
 
-### 出力
-```
-```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
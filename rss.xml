<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-28T08:53:00.999908</updated>
  <id>317d68dd-4669-48c6-902d-e9717566fba8</id>

  
    <entry>
      <title>operator&lt;&lt; -- basic_ostream::operator&lt;&lt; : C++23対応として拡張浮動小数点数型サポートを追加 #1022</title>
      <link href="https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream.html"/>
      <id>85010fbf2610dd0ecf5616502c609d70839d02b3:reference/ostream/basic_ostream/op_ostream.md</id>
      <updated>2023-02-28T17:48:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/basic_ostream/op_ostream.md b/reference/ostream/basic_ostream/op_ostream.md
index 740f02cec..6a1dfae91 100644
--- a/reference/ostream/basic_ostream/op_ostream.md
+++ b/reference/ostream/basic_ostream/op_ostream.md
@@ -7,75 +7,86 @@
 ```cpp
 // マニピュレータの実行
 // 3つとも関数へのポインタを引数に取る。
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; (*pf)(basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp;));
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(basic_ios&amp;lt;CharT, Traits&amp;gt;&amp;amp; (*pf)(basic_ios&amp;lt;CharT, Traits&amp;gt;&amp;amp;));
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(ios_base&amp;amp; (*pf)(ios_base&amp;amp;));
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp;
+  operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; (*pf)(basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp;)); // (1) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp;
+  operator&amp;lt;&amp;lt;(basic_ios&amp;lt;CharT, Traits&amp;gt;&amp;amp; (*pf)(basic_ios&amp;lt;CharT, Traits&amp;gt;&amp;amp;));         // (2) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp;
+  operator&amp;lt;&amp;lt;(ios_base&amp;amp; (*pf)(ios_base&amp;amp;));                                         // (3) C++03
 
 // bool値・数値・ポインタの書式化出力
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(bool n);
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(short n);
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(unsigned short n);
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(int n);
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(unsigned int n);
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(long n);
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(unsigned long n);
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(long long n); // C++11
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(unsigned long long n); // C++11
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(float f);
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(double f);
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(long double f);
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(const void* p);
-basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(nullptr_t);            // C++17
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(bool n);               // (4) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(short n);              // (5) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(unsigned short n);     // (6) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(int n);                // (7) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(unsigned int n);       // (8) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(long n);               // (9) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(unsigned long n);      // (10) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(long long n);          // (11) C++11
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(unsigned long long n); // (12) C++11
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(float f);              // (13) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(double f);             // (14) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(long double f);        // (15) C++03
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp;
+  operator&amp;lt;&amp;lt;(extended-floating-point-type f);                   // (16) C++23
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(const void* p);        // (17) C++03
+basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(nullptr_t);            // (18) C++17
 
 // ストリームバッファの非書式化出力
-basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(basic_streambuf&amp;lt;CharT, Traits&amp;gt;* sb);
+basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(basic_streambuf&amp;lt;CharT, Traits&amp;gt;* sb); // (19) C++03
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
+* extended-floating-point-type[link /reference/stdfloat.md]
 
 ## 概要
 
 ストリームへの出力またはマニピュレータの実行を行う。
 
-- マニピュレータを実行するオーバーロードそれ自体は、書式化出力関数・非書式化出力関数いずれにも該当しない。
-- 数値型（`bool`も含む）とポインタに対するオーバーロードは、書式化出力関数である。
-- `basic_streambuf`に対するオーバーロードは、非書式化出力関数である。
+- (1)-(3) : マニピュレータを実行するオーバーロードそれ自体は、書式化出力関数・非書式化出力関数いずれにも該当しない
+- (4)-(18) : 数値型（`bool`も含む）とポインタに対するオーバーロードは、書式化出力関数である
+- (19) : `basic_streambuf`に対するオーバーロードは、非書式化出力関数である
 
 ## 効果
 
-### マニピュレータの実行
+### (1)-(3) : マニピュレータの実行
 
 1. `pf(*this)`を呼び出す。
 
-### bool値・数値・ポインタの書式化出力
+### (4)-(17) : bool値・数値・ポインタの書式化出力
 
-1. `sentry`オブジェクトを構築する。`sentry`オブジェクトが失敗を示した場合、何もしない。
-1. `num_put::put`を使用して入力のパース・数値への変換を行う。実引数を渡すに際し、一部の型では以下のように型変換を行う。
-	- `short`
-		- `flags()`に`hex`または`oct`が設定されていれば`static_cast&amp;lt;long&amp;gt;(static_cast&amp;lt;unsigned short&amp;gt;(n))`
-		- それ以外では`static_cast&amp;lt;long&amp;gt;(n)`
-	- `int`
-		- `flags()`に`hex`または`oct`が設定されていれば`static_cast&amp;lt;long&amp;gt;(static_cast&amp;lt;unsigned int&amp;gt;(n))`
-		- それ以外では`static_cast&amp;lt;long&amp;gt;(n)`
-	- `unsigned short`、`unsigned int`: `static_cast&amp;lt;unsigned long&amp;gt;(n)`
-	- `float`: `static_cast&amp;lt;double&amp;gt;(n)`
-1. `num_put::put`から得られた`iostate`値を実引数にして`setstate`関数を呼び出す。
+1. `sentry`オブジェクトを構築する。`sentry`オブジェクトが失敗を示した場合、何もしない
+1. `num_put::put`を使用して入力のパース・数値への変換を行う。実引数を渡すに際し、一部の型では以下のように型変換を行う
+    - (5) `short`:
+        - `flags()`に`hex`または`oct`が設定されていれば`static_cast&amp;lt;long&amp;gt;(static_cast&amp;lt;unsigned short&amp;gt;(n))`
+        - それ以外では`static_cast&amp;lt;long&amp;gt;(n)`
+    - (6) `unsigned short`: `static_cast&amp;lt;unsigned long&amp;gt;(n)`
+    - (7) `int`:
+        - `flags()`に`hex`または`oct`が設定されていれば`static_cast&amp;lt;long&amp;gt;(static_cast&amp;lt;unsigned int&amp;gt;(n))`
+        - それ以外では`static_cast&amp;lt;long&amp;gt;(n)`
+    - (8) `unsigned int`: `static_cast&amp;lt;unsigned long&amp;gt;(n)`
+    - (13) `float`: `static_cast&amp;lt;double&amp;gt;(f)`
+    - (16) 拡張浮動小数点数型:
+        - 変換順位が`double`以下であれば、`static_cast&amp;lt;double&amp;gt;(f)`
+        - そうでなく変換順位が`long double`以下であれば、`static_cast&amp;lt;long double&amp;gt;(f)`
+        - そうでなければ実装定義の意味論を持ち、この演算子は条件付きサポートとなる
+1. `num_put::put`から得られた`iostate`値を実引数にして`setstate`関数を呼び出す
 
 
-### `nullptr_t`の出力
+### (18) : `nullptr_t`の出力
 
 - C++17 : 実装定義の出力文字列`s`を、`return operator&amp;lt;&amp;lt;(s)`として渡した場合と等価である。
 
 
-### ストリームバッファの非書式化出力
+### (19) : ストリームバッファの非書式化出力
 
 別のストリームバッファからの入力をストリームに出力する。
 
 1. `sentry`オブジェクトを構築する。`sentry`オブジェクトが失敗を示した場合、何もしない。
 1. 仮引数`sb`がヌルポインタの場合、`setstate(badbit)`を呼び出して終了する。
 1. 以下のいずれかを満たすまで、`sb`から文字を入力して`this`へ出力する。
-	- EOFに達した。
-	- 出力処理に失敗した（この場合、失敗したときの文字は入力側のストリームバッファに戻される）。
-	- 例外が発生した。
+    - EOFに達した。
+    - 出力処理に失敗した（この場合、失敗したときの文字は入力側のストリームバッファに戻される）。
+    - 例外が発生した。
 
 入力がなされなかった場合、`setstate(failbit)`を呼び出す。
 
@@ -86,9 +97,9 @@ basic_ostream&amp;lt;CharT, Traits&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;(basic_streambuf&amp;lt;CharT, Traits&amp;gt;* sb);
 
 
 ## 備考
-
 - このクラスにはメンバ関数版の`operator&amp;lt;&amp;lt;`と非メンバ関数版の`operator&amp;lt;&amp;lt;`があるが、ロケールに依存して出力が変わる型へのオーバーロードが、メンバ関数版として定義される設計となっている。
     - 参照 : [N0470 A Draft for the Specification of the IOStream Classes](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1994/N0470.asc)
+- (16) : 実装はCV修飾されていない全ての拡張浮動小数点数型に対するオーバーロードを提供する
 
 
 ## 例
@@ -105,8 +116,6 @@ int main() {
 101
 ```
 
-## 実装例
-TBD
 
 ## バージョン
 ### 言語
@@ -117,43 +126,45 @@ TBD
 ## 関連項目
 
 - このほかの`&amp;lt;&amp;lt;`演算子関数
-	- [文字・文字列の書式化出力、および、右辺値ストリームに対する出力](op_ostream_free.md)
-	- [`std::sub_match`に関するもの](../../regex/sub_match/op_ostream.md)
-	- [`std::error_code`に関するもの](../../system_error/error_code/op_ostream.md)
-	- [`std::complex`に関するもの](../../complex/complex/op_ostream.md)
-	- [`std::bitset`に関するもの](../../bitset/bitset/op_ostream.md)
-	- [`std::basic_string`に関するもの](../../string/basic_string/op_ostream.md)
-	- [`std::shared_ptr`に関するもの](../../memory/shared_ptr/op_ostream.md)
-	- [`std::shuffle_order_engine`に関するもの](../../random/shuffle_order_engine/op_ostream.md)
-	- [`std::gamma_distribution`に関するもの](../../random/gamma_distribution/op_ostream.md)
-	- [`std::geometric_distribution`に関するもの](../../random/geometric_distribution/op_ostream.md)
-	- [`std::extreme_value_distribution`に関するもの](../../random/extreme_value_distribution/op_ostream.md)
-	- [`std::fisher_f_distribution`に関するもの](../../random/fisher_f_distribution/op_ostream.md)
-	- [`std::mersenne_twister_engine`に関するもの](../../random/mersenne_twister_engine/op_ostream.md)
-	- [`std::chi_squared_distribution`に関するもの](../../random/chi_squared_distribution/op_ostream.md)
-	- [`std::exponential_distribution`に関するもの](../../random/exponential_distribution/op_ostream.md)
-	- [`std::discrete_distribution`に関するもの](../../random/discrete_distribution/op_ostream.md)
-	- [`std::subtract_with_carry_engine`に関するもの](../../random/subtract_with_carry_engine/op_ostream.md)
-	- [`std::piecewise_constant_distribution`に関するもの](../../random/piecewise_constant_distribution/op_ostream.md)
-	- [`std::poisson_distribution`に関するもの](../../random/poisson_distribution/op_ostream.md)
-	- [`std::student_t_distribution`に関するもの](../../random/student_t_distribution/op_ostream.md)
-	- [`std::bernoulli_distribution`に関するもの](../../random/bernoulli_distribution/op_ostream.md)
-	- [`std::weibull_distribution`に関するもの](../../random/weibull_distribution/op_ostream.md)
-	- [`std::binomial_distribution`に関するもの](../../random/binomial_distribution/op_ostream.md)
-	- [`std::piecewise_linear_distribution`に関するもの](../../random/piecewise_linear_distribution/op_ostream.md)
-	- [`std::uniform_real_distribution`に関するもの](../../random/uniform_real_distribution/op_ostream.md)
-	- [`std::negative_binomial_distribution`に関するもの](../../random/negative_binomial_distribution/op_ostream.md)
-	- [`std::discard_block_engine`に関するもの](../../random/discard_block_engine/op_ostream.md)
-	- [`std::normal_distribution`に関するもの](../../random/normal_distribution/op_ostream.md)
-	- [`std::cauchy_distribution`に関するもの](../../random/cauchy_distribution/op_ostream.md)
-	- [`std::lognormal_distribution`に関するもの](../../random/lognormal_distribution/op_ostream.md)
-	- [`std::linear_congruential_engine`に関するもの](../../random/linear_congruential_engine/op_ostream.md)
-	- [`std::uniform_int_distribution`に関するもの](../../random/uniform_int_distribution/op_ostream.md)
-	- [`std::independent_bits_engine`に関するもの](../../random/independent_bits_engine/op_ostream.md)
+    - [文字・文字列の書式化出力、および、右辺値ストリームに対する出力](op_ostream_free.md)
+    - [`std::sub_match`に関するもの](../../regex/sub_match/op_ostream.md)
+    - [`std::error_code`に関するもの](../../system_error/error_code/op_ostream.md)
+    - [`std::complex`に関するもの](../../complex/complex/op_ostream.md)
+    - [`std::bitset`に関するもの](../../bitset/bitset/op_ostream.md)
+    - [`std::basic_string`に関するもの](../../string/basic_string/op_ostream.md)
+    - [`std::shared_ptr`に関するもの](../../memory/shared_ptr/op_ostream.md)
+    - [`std::shuffle_order_engine`に関するもの](../../random/shuffle_order_engine/op_ostream.md)
+    - [`std::gamma_distribution`に関するもの](../../random/gamma_distribution/op_ostream.md)
+    - [`std::geometric_distribution`に関するもの](../../random/geometric_distribution/op_ostream.md)
+    - [`std::extreme_value_distribution`に関するもの](../../random/extreme_value_distribution/op_ostream.md)
+    - [`std::fisher_f_distribution`に関するもの](../../random/fisher_f_distribution/op_ostream.md)
+    - [`std::mersenne_twister_engine`に関するもの](../../random/mersenne_twister_engine/op_ostream.md)
+    - [`std::chi_squared_distribution`に関するもの](../../random/chi_squared_distribution/op_ostream.md)
+    - [`std::exponential_distribution`に関するもの](../../random/exponential_distribution/op_ostream.md)
+    - [`std::discrete_distribution`に関するもの](../../random/discrete_distribution/op_ostream.md)
+    - [`std::subtract_with_carry_engine`に関するもの](../../random/subtract_with_carry_engine/op_ostream.md)
+    - [`std::piecewise_constant_distribution`に関するもの](../../random/piecewise_constant_distribution/op_ostream.md)
+    - [`std::poisson_distribution`に関するもの](../../random/poisson_distribution/op_ostream.md)
+    - [`std::student_t_distribution`に関するもの](../../random/student_t_distribution/op_ostream.md)
+    - [`std::bernoulli_distribution`に関するもの](../../random/bernoulli_distribution/op_ostream.md)
+    - [`std::weibull_distribution`に関するもの](../../random/weibull_distribution/op_ostream.md)
+    - [`std::binomial_distribution`に関するもの](../../random/binomial_distribution/op_ostream.md)
+    - [`std::piecewise_linear_distribution`に関するもの](../../random/piecewise_linear_distribution/op_ostream.md)
+    - [`std::uniform_real_distribution`に関するもの](../../random/uniform_real_distribution/op_ostream.md)
+    - [`std::negative_binomial_distribution`に関するもの](../../random/negative_binomial_distribution/op_ostream.md)
+    - [`std::discard_block_engine`に関するもの](../../random/discard_block_engine/op_ostream.md)
+    - [`std::normal_distribution`に関するもの](../../random/normal_distribution/op_ostream.md)
+    - [`std::cauchy_distribution`に関するもの](../../random/cauchy_distribution/op_ostream.md)
+    - [`std::lognormal_distribution`に関するもの](../../random/lognormal_distribution/op_ostream.md)
+    - [`std::linear_congruential_engine`に関するもの](../../random/linear_congruential_engine/op_ostream.md)
+    - [`std::uniform_int_distribution`に関するもの](../../random/uniform_int_distribution/op_ostream.md)
+    - [`std::independent_bits_engine`に関するもの](../../random/independent_bits_engine/op_ostream.md)
 - 出力対象の型
-	- [`basic_streambuf`](../../streambuf/basic_streambuf.md)
+    - [`basic_streambuf`](../../streambuf/basic_streambuf.md)
 
 
 ## 参照
 - [N2114 `long long` Goes to the Library, Revision 1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2114.html)
 - [LWG Issue 2221. No formatted output operator for `nullptr`](https://wg21.cmeerw.net/lwg/issue2221)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で拡張浮動小数点数型の`ostream`出力がサポートされた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bfloat16_t -- basic_ostream::operator&lt;&lt; : C++23対応として拡張浮動小数点数型サポートを追加 #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/bfloat16_t.html"/>
      <id>85010fbf2610dd0ecf5616502c609d70839d02b3:reference/stdfloat/bfloat16_t.md</id>
      <updated>2023-02-28T17:48:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/bfloat16_t.md b/reference/stdfloat/bfloat16_t.md
index 8334dbc2b..8e748b72d 100644
--- a/reference/stdfloat/bfloat16_t.md
+++ b/reference/stdfloat/bfloat16_t.md
@@ -176,6 +176,7 @@ int main() {
 - [`std::float32_t`](float32_t.md)
 - [`std::float64_t`](float64_t.md)
 - [`std::float128_t`](float128_t.md)
+- [`std::basic_ostream::operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float128_t -- basic_ostream::operator&lt;&lt; : C++23対応として拡張浮動小数点数型サポートを追加 #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float128_t.html"/>
      <id>85010fbf2610dd0ecf5616502c609d70839d02b3:reference/stdfloat/float128_t.md</id>
      <updated>2023-02-28T17:48:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float128_t.md b/reference/stdfloat/float128_t.md
index a3802e2db..f27a31bce 100644
--- a/reference/stdfloat/float128_t.md
+++ b/reference/stdfloat/float128_t.md
@@ -175,6 +175,7 @@ int main() {
 - [`std::float64_t`](float64_t.md)
 - [`std::bfloat16_t`](bfloat16_t.md)
 - [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
+- [`std::basic_ostream::operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float16_t -- basic_ostream::operator&lt;&lt; : C++23対応として拡張浮動小数点数型サポートを追加 #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float16_t.html"/>
      <id>85010fbf2610dd0ecf5616502c609d70839d02b3:reference/stdfloat/float16_t.md</id>
      <updated>2023-02-28T17:48:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float16_t.md b/reference/stdfloat/float16_t.md
index 38896bf40..8ddfe47e5 100644
--- a/reference/stdfloat/float16_t.md
+++ b/reference/stdfloat/float16_t.md
@@ -175,6 +175,7 @@ int main() {
 - [`std::float128_t`](float128_t.md)
 - [`std::bfloat16_t`](bfloat16_t.md)
 - [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
+- [`std::basic_ostream::operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float32_t -- basic_ostream::operator&lt;&lt; : C++23対応として拡張浮動小数点数型サポートを追加 #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float32_t.html"/>
      <id>85010fbf2610dd0ecf5616502c609d70839d02b3:reference/stdfloat/float32_t.md</id>
      <updated>2023-02-28T17:48:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float32_t.md b/reference/stdfloat/float32_t.md
index de37aa6a8..18870b67f 100644
--- a/reference/stdfloat/float32_t.md
+++ b/reference/stdfloat/float32_t.md
@@ -175,6 +175,7 @@ int main() {
 - [`std::float128_t`](float128_t.md)
 - [`std::bfloat16_t`](bfloat16_t.md)
 - [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
+- [`std::basic_ostream::operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float64_t -- basic_ostream::operator&lt;&lt; : C++23対応として拡張浮動小数点数型サポートを追加 #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float64_t.html"/>
      <id>85010fbf2610dd0ecf5616502c609d70839d02b3:reference/stdfloat/float64_t.md</id>
      <updated>2023-02-28T17:48:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float64_t.md b/reference/stdfloat/float64_t.md
index e696fd9c8..186c998a3 100644
--- a/reference/stdfloat/float64_t.md
+++ b/reference/stdfloat/float64_t.md
@@ -175,6 +175,7 @@ int main() {
 - [`std::float128_t`](float128_t.md)
 - [`std::bfloat16_t`](bfloat16_t.md)
 - [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
+- [`std::basic_ostream::operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_iec559 -- numeric_limits::is_iec559 : C++23対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/is_iec559.html"/>
      <id>3607e5ab6eb5bf25b32929dc2426d78672ab5e9f:reference/limits/numeric_limits/is_iec559.md</id>
      <updated>2023-02-27T18:24:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/is_iec559.md b/reference/limits/numeric_limits/is_iec559.md
index 1c563ec06..b08d9d4cc 100644
--- a/reference/limits/numeric_limits/is_iec559.md
+++ b/reference/limits/numeric_limits/is_iec559.md
@@ -5,17 +5,18 @@
 * variable[meta id-type]
 
 ```cpp
-// C++03
-static const bool is_iec559;
-
-// C++11
-static constexpr bool is_iec559;
+static const bool is_iec559;     // (1) C++03
+static constexpr bool is_iec559; // (1) C++11
 ```
 
 ## 概要
 浮動小数点数型において、型`T`がIEC 559 (IEEE 754) に準拠しているかを判定する。
 
 
+## 備考
+- C++23 : [`float16_t`](/reference/stdfloat/float16_t.md)、[`float32_t`](/reference/stdfloat/float32_t.md)、[`float64_t`](/reference/stdfloat/float64_t.md)、[`float128_t`](/reference/stdfloat/float128_t.md)が存在する場合、この値は`true`となる
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float128_t -- numeric_limits::is_iec559 : C++23対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float128_t.html"/>
      <id>3607e5ab6eb5bf25b32929dc2426d78672ab5e9f:reference/stdfloat/float128_t.md</id>
      <updated>2023-02-27T18:24:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float128_t.md b/reference/stdfloat/float128_t.md
index c0547e7de..a3802e2db 100644
--- a/reference/stdfloat/float128_t.md
+++ b/reference/stdfloat/float128_t.md
@@ -174,6 +174,7 @@ int main() {
 - [`std::float32_t`](float32_t.md)
 - [`std::float64_t`](float64_t.md)
 - [`std::bfloat16_t`](bfloat16_t.md)
+- [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float16_t -- numeric_limits::is_iec559 : C++23対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float16_t.html"/>
      <id>3607e5ab6eb5bf25b32929dc2426d78672ab5e9f:reference/stdfloat/float16_t.md</id>
      <updated>2023-02-27T18:24:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float16_t.md b/reference/stdfloat/float16_t.md
index 1e6f2eb83..38896bf40 100644
--- a/reference/stdfloat/float16_t.md
+++ b/reference/stdfloat/float16_t.md
@@ -174,6 +174,7 @@ int main() {
 - [`std::float64_t`](float64_t.md)
 - [`std::float128_t`](float128_t.md)
 - [`std::bfloat16_t`](bfloat16_t.md)
+- [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float32_t -- numeric_limits::is_iec559 : C++23対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float32_t.html"/>
      <id>3607e5ab6eb5bf25b32929dc2426d78672ab5e9f:reference/stdfloat/float32_t.md</id>
      <updated>2023-02-27T18:24:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float32_t.md b/reference/stdfloat/float32_t.md
index ff19acbd0..de37aa6a8 100644
--- a/reference/stdfloat/float32_t.md
+++ b/reference/stdfloat/float32_t.md
@@ -174,6 +174,7 @@ int main() {
 - [`std::float64_t`](float64_t.md)
 - [`std::float128_t`](float128_t.md)
 - [`std::bfloat16_t`](bfloat16_t.md)
+- [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float64_t -- numeric_limits::is_iec559 : C++23対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float64_t.html"/>
      <id>3607e5ab6eb5bf25b32929dc2426d78672ab5e9f:reference/stdfloat/float64_t.md</id>
      <updated>2023-02-27T18:24:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float64_t.md b/reference/stdfloat/float64_t.md
index c477a8ace..e696fd9c8 100644
--- a/reference/stdfloat/float64_t.md
+++ b/reference/stdfloat/float64_t.md
@@ -174,6 +174,7 @@ int main() {
 - [`std::float32_t`](float32_t.md)
 - [`std::float128_t`](float128_t.md)
 - [`std::bfloat16_t`](bfloat16_t.md)
+- [`std::numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>variant -- Merge pull request #1129 from cpprefjp/sakujiro-inagaki-patch-1</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant.html"/>
      <id>1a85749125767560b89ee47d346006157bd320a0:reference/variant/variant.md</id>
      <updated>2023-02-25T19:25:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant.md b/reference/variant/variant.md
index fa7cd33db..fb0dae86a 100644
--- a/reference/variant/variant.md
+++ b/reference/variant/variant.md
@@ -43,7 +43,7 @@ std::visit([](auto&amp;amp; x) {
 
 このクラスと同様のことは共用体を使用しても達成できるが、このクラスはより使いやすいよう設計されている。
 
-このクラスは動的メモリ確保は行わず、スタック領域のみを使用する。
+このクラスは追加の動的メモリ確保は行わず、保持するオブジェクトを自身のオブジェクト表現内に直接割り当てる。
 
 
 ### 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>variant -- variantが追加の動的メモリ確保を行わないことを説明する文を修正</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant.html"/>
      <id>9116a9393d60707981347afccd127578fd47f374:reference/variant/variant.md</id>
      <updated>2023-02-25T12:56:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant.md b/reference/variant/variant.md
index fa7cd33db..fb0dae86a 100644
--- a/reference/variant/variant.md
+++ b/reference/variant/variant.md
@@ -43,7 +43,7 @@ std::visit([](auto&amp;amp; x) {
 
 このクラスと同様のことは共用体を使用しても達成できるが、このクラスはより使いやすいよう設計されている。
 
-このクラスは動的メモリ確保は行わず、スタック領域のみを使用する。
+このクラスは追加の動的メモリ確保は行わず、保持するオブジェクトを自身のオブジェクト表現内に直接割り当てる。
 
 
 ### 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>sakujiro-inagaki</name>
        <email>81898143+sakujiro-inagaki@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化領域への暗黙的なオブジェクト構築 -- 未初期化領域への暗黙的なオブジェクト構築 : ご指摘反映 #1117</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html"/>
      <id>16e1d9768ef71370827c7cdb4a2a6c7d338d4914:lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md</id>
      <updated>2023-02-24T18:03:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
index 032c88222..5d41421f9 100644
--- a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
+++ b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
@@ -118,9 +118,9 @@ struct Vec {
     std::uninitialized_copy(begin(), end(), (T*)newbuf); // #a 💀 UB
 
     ::operator delete(buf, std::align_val_t(alignof(T)));
+    buf = newbuf;
     buf_end_size = newbuf + sizeof(T) * size(); // #b 💀 UB
     buf_end_capacity = newbuf + sizeof(T) * n;  // #c 💀 UB
-    buf = newbuf;
   }
 
   void push_back(T t) {
@@ -367,13 +367,17 @@ void process(Stream *stream) {
   std::unique_ptr&amp;lt;char[]&amp;gt; buffer = stream-&amp;gt;read();
 
   // 先頭バイトの状態によって適切なオブジェクトがStream::read()内で構築されている
+  // ただし、reinterpret_castの代わりにstd::launder()を使用する必要がある
   if (buffer[0] == FOO) {
-    process_foo(reinterpret_cast&amp;lt;Foo*&amp;gt;(buffer.get())); // ✅ ok
+    process_foo(std::launder&amp;lt;Foo&amp;gt;(buffer.get())); // ✅ ok
   } else {
-    process_bar(reinterpret_cast&amp;lt;Bar*&amp;gt;(buffer.get())); // ✅ ok
+    process_bar(std::launder&amp;lt;Bar&amp;gt;(buffer.get())); // ✅ ok
   }
 }
 ```
+* std::launder[link /reference/new/launder.md]
+
+追加で、各分岐においては返された`buffer`ポインタ（`char(*)[]`）から、それぞれの場合で適切なオブジェクト（`Foo`/`Bar`）へのポインタを[`std::launder()`](/reference/new/launder.md)によって取得する必要がある。`reinterpret_cast`はポインタの変換のみを行うため、この場合に
 
 ### 動的配列の実装
 
@@ -393,14 +397,14 @@ struct Vec {
 
     // newbufにはT[]のオブジェクトが生存期間内にあるため、ポインタT*をイテレータとして使用可能となる
     // ここで、T[]の要素のTのオブジェクトが構築される（明示的）
-    std::uninitialized_copy(begin(), end(), (T*)newbuf); // #a ✅ ok
+    std::uninitialized_copy(begin(), end(), std::launder&amp;lt;T&amp;gt;(newbuf)); // #a ✅ ok
 
     ::operator delete(buf, std::align_val_t(alignof(T)));
     
+    buf = newbuf;
     // newbufにはchar[]のオブジェクトが生存期間内にあるため、newbuf(char*)をイテレータとして使用可能となる
     buf_end_size = newbuf + sizeof(T) * size(); // #b ✅ ok
     buf_end_capacity = newbuf + sizeof(T) * n;  // #c ✅ ok
-    buf = newbuf;
   }
 
   void push_back(T t) {
@@ -412,9 +416,9 @@ struct Vec {
     buf_end_size += sizeof(T); // #d ✅ ok
   }
 
-  T *begin() { return (T*)buf; }
+  T *begin() { return std::launder&amp;lt;T&amp;gt;(buf); }
 
-  T *end() { return (T*)buf_end_size; }
+  T *end() { return std::launder&amp;lt;T&amp;gt;(buf_end_size); }
 
   // buf及びbuf_end_sizeの指す領域にはT[]のオブジェクトが生存期間内にあるため、ポインタをイテレータとして使用可能
   std::size_t size() { return end() - begin(); } // #e ✅ ok
@@ -433,6 +437,8 @@ int main() {
 
 この例では、`reserve()`内`newbuf`及びそれを保存している`Vec::buf`の領域に`T[]`（`T`の配列型）と`char[]`のオブジェクトが暗黙的に構築され、同時に生存期間内にあることで、問題（配列オブジェクトを指さないポインタのイテレータとしての使用）が解消され、すべての箇所で定義された振る舞いをもたらしている。
 
+ここでも同様に、`newbuf`及び`Vec::buf`から都度適切なオブジェクトへのポインタを得るのに[`std::launder()`](/reference/new/launder.md)を使用する必要がある。
+
 ## この機能が必要になった背景・経緯
 (執筆中)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
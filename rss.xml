<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-11-02T19:58:17.807353</updated>
  <id>ce41460d-d02f-4123-9abe-ffe32fc77fd2</id>

  
    <entry>
      <title>コンストラクタ -- functionのコンストラクタ : C++23でのfunction(F)からfunction(F&amp;&amp;)への変更を記載 #1358</title>
      <link href="https://cpprefjp.github.io/reference/functional/function/op_constructor.html"/>
      <id>daf75340c859eaf615f19f0b5ce321f42bc801be:reference/functional/function/op_constructor.md</id>
      <updated>2024-11-03T04:55:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/function/op_constructor.md b/reference/functional/function/op_constructor.md
index 5cddc1bad..e3d6172f5 100644
--- a/reference/functional/function/op_constructor.md
+++ b/reference/functional/function/op_constructor.md
@@ -6,15 +6,17 @@
 * cpp11[meta cpp]
 
 ```cpp
-function() noexcept;          // (1)
-function(nullptr_t) noexcept; // (2)
-function(const function&amp;amp; f);  // (3)
+function() noexcept;              // (1) C++11
+function(nullptr_t) noexcept;     // (2) C++11
+function(const function&amp;amp; f);      // (3) C++11
 
-function(function&amp;amp;&amp;amp; f);           // (4) C++17まで
+function(function&amp;amp;&amp;amp; f);           // (4) C++11
 function(function&amp;amp;&amp;amp; f) noexcept;  // (4) C++20
 
 template &amp;lt;class F&amp;gt;
-function(F&amp;amp;&amp;amp; f);                // (5)
+function(F f);                    // (5) C++11
+template &amp;lt;class F&amp;gt;
+function(F&amp;amp;&amp;amp; f);                  // (5) C++23
 
 template &amp;lt;class Alloc&amp;gt;
 function(allocator_arg_t, const Alloc&amp;amp; alloc) noexcept;            // (6) C++17で削除
@@ -34,11 +36,44 @@ function(allocator_arg_t, const Alloc&amp;amp; alloc, F f);                // (10) C++17
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
 * allocator_arg_t[link /reference/memory/allocator_arg_t.md]
 
-## 要件
-- (5), (10) :
-    - `F`はコピー構築可能であること。
-    - `F`のコピーコンストラクタとデストラクタは、例外を投げるべきではない。
-    - C++11まで : `F`は、パラメータとして`ArgTypes...`型をとり、戻り値として`R`型を返す関数ポインタ、メンバ関数ポインタ、メンバ変数ポインタ、または関数オブジェクトであること。
+## 概要
+`function`オブジェクトを構築する。
+
+- (1) : デフォルト構築。空の`function`オブジェクトを構築する
+- (2) : `nullptr`からの構築。空の`function`オブジェクトを構築する
+- (3) : コピー構築する
+- (4) : ムーブ構築する
+- (5) : 任意の型の関数ポインタ、メンバポインタ、関数オブジェクトを受け取って構築する
+- (6) : アロケータをとって空の`function`オブジェクトを構築する
+- (7) : アロケータと`nullptr`をとって空の`function`オブジェクトを構築する
+- (8) : アロケータをとってコピー構築する
+- (9) : アロケータをとってムーブ構築する
+- (10) : アロケータと、任意の型の関数ポインタ、メンバポインタ、関数オブジェクトを受け取って構築する
+
+
+## テンプレートパラメータ制約
+[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;F&amp;gt;`を`FD`として、
+
+- (5) :
+    - C++11
+        - `F`は、パラメータとして`ArgTypes...`型をとり、戻り値として`R`型を返す関数ポインタ、メンバ関数ポインタ、メンバ変数ポインタ、または関数オブジェクトであること
+    - C++23
+        - `F`が`function`ではないこと
+        - `FD`は、パラメータとして`ArgTypes...`型をとり、戻り値として`R`型を返す関数ポインタ、メンバ関数ポインタ、メンバ変数ポインタ、または関数オブジェクトであること
+- (10) :
+    - `F`はコピー構築可能であること
+    - `F`のコピーコンストラクタとデストラクタは、例外を投げるべきではない
+    - `F`は、パラメータとして`ArgTypes...`型をとり、戻り値として`R`型を返す関数ポインタ、メンバ関数ポインタ、メンバ変数ポインタ、または関数オブジェクトであること
+
+
+## 適格要件
+- (5) :
+    - C++11
+        - `F`はコピー構築可能であること
+        - `F`は、パラメータとして`ArgTypes...`型をとり、戻り値として`R`型を返す関数ポインタ、メンバ関数ポインタ、メンバ変数ポインタ、または関数オブジェクトであること。
+    - C++23
+        - `FD`はコピー構築可能であること
+        - `FD`は`F`から構築可能であること
 
 
 ## 効果
@@ -242,3 +277,5 @@ int main()
     - C++14から、(5)と(10)でシグニチャが合わない関数オブジェクトが渡された場合に、SFINAEされるようになった。
 - [P0302R1 Removing Allocator Support in `std::function` (rev 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0302r1.html)
 - [P0771R1 std::function move constructor should be noexcept](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0771r1.pdf)
+- [LWG Issue 2774. `std::function` construction vs assignment](https://cplusplus.github.io/LWG/issue2774)
+    - C++23から、`function(F)`のオーバーロードが`function(F&amp;amp;&amp;amp;)`に変更された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1358 from biobios/master</title>
      <link href="https://cpprefjp.github.io/reference/functional/function/op_constructor.html"/>
      <id>00b8c131d37ff22de95c488c30fe68bf3193d11c:reference/functional/function/op_constructor.md</id>
      <updated>2024-11-03T04:26:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/function/op_constructor.md b/reference/functional/function/op_constructor.md
index f0a1d8bce..5cddc1bad 100644
--- a/reference/functional/function/op_constructor.md
+++ b/reference/functional/function/op_constructor.md
@@ -14,7 +14,7 @@ function(function&amp;amp;&amp;amp; f);           // (4) C++17まで
 function(function&amp;amp;&amp;amp; f) noexcept;  // (4) C++20
 
 template &amp;lt;class F&amp;gt;
-function(F f);                // (5)
+function(F&amp;amp;&amp;amp; f);                // (5)
 
 template &amp;lt;class Alloc&amp;gt;
 function(allocator_arg_t, const Alloc&amp;amp; alloc) noexcept;            // (6) C++17で削除
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- コンストラクタ引数の誤りを修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/function/op_constructor.html"/>
      <id>eee0ae9b0e2607ec07876fa2a8c495bff43cc28b:reference/functional/function/op_constructor.md</id>
      <updated>2024-11-03T03:25:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/function/op_constructor.md b/reference/functional/function/op_constructor.md
index f0a1d8bce..5cddc1bad 100644
--- a/reference/functional/function/op_constructor.md
+++ b/reference/functional/function/op_constructor.md
@@ -14,7 +14,7 @@ function(function&amp;amp;&amp;amp; f);           // (4) C++17まで
 function(function&amp;amp;&amp;amp; f) noexcept;  // (4) C++20
 
 template &amp;lt;class F&amp;gt;
-function(F f);                // (5)
+function(F&amp;amp;&amp;amp; f);                // (5)
 
 template &amp;lt;class Alloc&amp;gt;
 function(allocator_arg_t, const Alloc&amp;amp; alloc) noexcept;            // (6) C++17で削除
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>biobios</name>
        <email>biobios1024@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- unorderedのinsert : hintの活用についてのMicrosoftの記事を参照に追加</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html"/>
      <id>19bc6aeae5911beec14833e57b007a067f2b424b:reference/unordered_map/unordered_map/insert.md</id>
      <updated>2024-11-01T11:26:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/insert.md b/reference/unordered_map/unordered_map/insert.md
index 6b0e903f3..4eec85b02 100644
--- a/reference/unordered_map/unordered_map/insert.md
+++ b/reference/unordered_map/unordered_map/insert.md
@@ -314,3 +314,4 @@ inline void unordered_map&amp;lt;Key, Hash, Pred, Allocator&amp;gt;::insert(initializer_list&amp;lt;K
 - [LWG Issue 2156. Unordered containers&amp;#39; reserve(n) reserves for n-1 elements](https://wg21.cmeerw.net/lwg/issue2156)
 - [Splicing Maps and Sets(Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0083r3.pdf)
     - (9), (10)経緯となる提案文書
+- [How useful is the hint passed to the std::unordered_... collections? - The Old New Thing](https://devblogs.microsoft.com/oldnewthing/20241028-00/?p=110428)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- unorderedのinsert : hintの活用についてのMicrosoftの記事を参照に追加</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html"/>
      <id>19bc6aeae5911beec14833e57b007a067f2b424b:reference/unordered_map/unordered_multimap/insert.md</id>
      <updated>2024-11-01T11:26:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/insert.md b/reference/unordered_map/unordered_multimap/insert.md
index 49b058d6e..209d4ca8a 100644
--- a/reference/unordered_map/unordered_multimap/insert.md
+++ b/reference/unordered_map/unordered_multimap/insert.md
@@ -305,3 +305,4 @@ inline void unordered_multimap&amp;lt;Key, Hash, Pred, Allocator&amp;gt;::insert(initializer_l
 - [LWG Issue 2156. Unordered containers&amp;#39; reserve(n) reserves for n-1 elements](https://wg21.cmeerw.net/lwg/issue2156)
 - [Splicing Maps and Sets(Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0083r3.pdf)
     - (9), (10)経緯となる提案文書
+- [How useful is the hint passed to the std::unordered_... collections? - The Old New Thing](https://devblogs.microsoft.com/oldnewthing/20241028-00/?p=110428)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- unorderedのinsert : hintの活用についてのMicrosoftの記事を参照に追加</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/insert.html"/>
      <id>19bc6aeae5911beec14833e57b007a067f2b424b:reference/unordered_set/unordered_multiset/insert.md</id>
      <updated>2024-11-01T11:26:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/insert.md b/reference/unordered_set/unordered_multiset/insert.md
index 8731400d7..918f905b2 100644
--- a/reference/unordered_set/unordered_multiset/insert.md
+++ b/reference/unordered_set/unordered_multiset/insert.md
@@ -245,3 +245,4 @@ inline void unordered_multiset&amp;lt;Key, Hash, Pred, Allocator&amp;gt;::insert(std::initiali
     - 安定性の保証が規定された経緯のレポート
 - [Splicing Maps and Sets(Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0083r3.pdf)
     - (5), (6)経緯となる提案文書
+- [How useful is the hint passed to the std::unordered_... collections? - The Old New Thing](https://devblogs.microsoft.com/oldnewthing/20241028-00/?p=110428)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- unorderedのinsert : hintの活用についてのMicrosoftの記事を参照に追加</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html"/>
      <id>19bc6aeae5911beec14833e57b007a067f2b424b:reference/unordered_set/unordered_set/insert.md</id>
      <updated>2024-11-01T11:26:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/insert.md b/reference/unordered_set/unordered_set/insert.md
index e6779f65a..c6eb0e16e 100644
--- a/reference/unordered_set/unordered_set/insert.md
+++ b/reference/unordered_set/unordered_set/insert.md
@@ -260,3 +260,4 @@ inline void unordered_set&amp;lt;Key, Hash, Pred, Allocator&amp;gt;::insert(initializer_list&amp;lt;K
     - (4)の経緯となる提案文書
 - [Splicing Maps and Sets(Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0083r3.pdf)
     - (5), (6)経緯となる提案文書
+- [How useful is the hint passed to the std::unordered_... collections? - The Old New Thing](https://devblogs.microsoft.com/oldnewthing/20241028-00/?p=110428)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- string::contains : バージョン表記のミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/contains.html"/>
      <id>7de58d9f34f0503f97ee10ccec8f90ff48d5cf6d:reference/string/basic_string/contains.md</id>
      <updated>2024-10-28T14:25:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/contains.md b/reference/string/basic_string/contains.md
index 52cd09cc0..ebb7a3287 100644
--- a/reference/string/basic_string/contains.md
+++ b/reference/string/basic_string/contains.md
@@ -70,12 +70,12 @@ int main() {
 
 ## バージョン
 ### 言語
-- C++20
+- C++23
 
 ### 処理系
 - [Clang](/implementation.md#clang): 12.0 [mark verified]
-- [GCC](/implementation.md#gcc):
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [GCC](/implementation.md#gcc): 11 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 [mark verified]
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-30T04:51:41.644247</updated>
  <id>513674f2-3a22-4344-942b-1e5ef3b118db</id>

  
    <entry>
      <title>as_rvalue_view -- as_rvalue_view : グローバル修飾が効くようにstd::をつけた #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_rvalue_view.html"/>
      <id>515f73141a9de4600b098df7934924b728afd5f9:reference/ranges/as_rvalue_view.md</id>
      <updated>2025-05-30T13:47:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_rvalue_view.md b/reference/ranges/as_rvalue_view.md
index 68f163a31..c8b41aee1 100644
--- a/reference/ranges/as_rvalue_view.md
+++ b/reference/ranges/as_rvalue_view.md
@@ -27,10 +27,11 @@ namespace std::ranges {
 この[`view`](view.md)は、あるRangeの要素をムーブして別のコンテナに挿入する場合などに利用できる。
 
 ```cpp
-vector&amp;lt;string&amp;gt; words = {&amp;#34;the&amp;#34;, &amp;#34;quick&amp;#34;, &amp;#34;brown&amp;#34;, &amp;#34;fox&amp;#34;, &amp;#34;ate&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;pterodactyl&amp;#34;};
-vector&amp;lt;string&amp;gt; new_words;
-ranges::copy(words | views::as_rvalue, back_inserter(new_words));
+std::vector&amp;lt;std::string&amp;gt; words = {&amp;#34;the&amp;#34;, &amp;#34;quick&amp;#34;, &amp;#34;brown&amp;#34;, &amp;#34;fox&amp;#34;, &amp;#34;ate&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;pterodactyl&amp;#34;};
+std::vector&amp;lt;std::string&amp;gt; new_words;
+std::ranges::copy(words | views::as_rvalue, std::back_inserter(new_words));
 ```
+* std::ranges::copy[link /reference/algorithm/ranges_copy.md]
 
 ### Rangeコンセプト
 
@@ -88,19 +89,17 @@ ranges::copy(words | views::as_rvalue, back_inserter(new_words));
 #include &amp;lt;ranges&amp;gt;
 #include &amp;lt;vector&amp;gt;
 #include &amp;lt;iterator&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;print&amp;gt;
 
 int main() {
-  using namespace std;
-
-  vector&amp;lt;string&amp;gt; words = {&amp;#34;the&amp;#34;, &amp;#34;quick&amp;#34;, &amp;#34;brown&amp;#34;, &amp;#34;fox&amp;#34;, &amp;#34;ate&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;pterodactyl&amp;#34;};
-  vector&amp;lt;string&amp;gt; new_words;
-  ranges::copy(words | views::as_rvalue, back_inserter(new_words));
-  print(&amp;#34;{}&amp;#34;, new_words);
+  std::vector&amp;lt;std::string&amp;gt; words = {&amp;#34;the&amp;#34;, &amp;#34;quick&amp;#34;, &amp;#34;brown&amp;#34;, &amp;#34;fox&amp;#34;, &amp;#34;ate&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;pterodactyl&amp;#34;};
+  std::vector&amp;lt;std::string&amp;gt; new_words;
+  std::ranges::copy(words | std::views::as_rvalue, std::back_inserter(new_words));
+  std::println(&amp;#34;{}&amp;#34;, new_words);
 }
 ```
-* views::as_rvalue[color ff0000]
-* print[link /reference/print/print.md]
+* std::views::as_rvalue[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ref_view -- ref_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view.html"/>
      <id>d9e860a139bd1ecbe5ba1b1cbe691d6637042a3b:reference/ranges/ref_view.md</id>
      <updated>2025-05-30T13:42:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view.md b/reference/ranges/ref_view.md
index 9d9341dab..73c0212b1 100644
--- a/reference/ranges/ref_view.md
+++ b/reference/ranges/ref_view.md
@@ -29,15 +29,15 @@ Rangeへの参照として振る舞う[`view`](view.md)。このクラスのオ
 
 ## メンバ関数
 
-| 名前                                             | 説明                              | 対応バージョン |
-|--------------------------------------------------|-----------------------------------|----------------|
-| [`(constructor)`](ref_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
-| [`base`](ref_view/base.md.nolink)                     | `R`の参照を取得する               | C++20          |
-| [`begin`](ref_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
-| [`end`](ref_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
-| [`empty`](ref_view/empty.md.nolink)                   | Rangeが空かどうかを判定する       | C++20          |
-| [`size`](ref_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
-| [`data`](ref_view/data.md.nolink)                     | Rangeの先頭へのポインタを取得する | C++20          |
+| 名前                                           | 説明                              | 対応バージョン |
+|------------------------------------------------|-----------------------------------|----------------|
+| [`(constructor)`](ref_view/op_constructor.md)  | コンストラクタ                    | C++20          |
+| [`base`](ref_view/base.md)                     | 元となるRangeへの参照を取得する   | C++20          |
+| [`begin`](ref_view/begin.md)                   | 先頭を指すイテレータを取得する    | C++20          |
+| [`end`](ref_view/end.md)                       | 番兵を取得する                    | C++20          |
+| [`empty`](ref_view/empty.md)                   | Rangeが空かどうかを判定する       | C++20          |
+| [`size`](ref_view/size.md)                     | 要素数を取得する                  | C++20          |
+| [`data`](ref_view/data.md)                     | Rangeの先頭へのポインタを取得する | C++20          |
 
 `r`を参照先のRangeとする。`empty`、`size`、`data`は、それぞれ[`ranges::empty`](empty.md)`(r)`、[`ranges::size`](size.md)`(r)`、[`ranges::data`](data.md)`(r)`が有効な式であるときに定義される。
 
@@ -49,14 +49,14 @@ Rangeへの参照として振る舞う[`view`](view.md)。このクラスのオ
 | [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
 | [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
 | [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
-| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する             | C++23          |
-| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する      | C++23          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
 
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](ref_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](ref_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- ref_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view/base.html"/>
      <id>d9e860a139bd1ecbe5ba1b1cbe691d6637042a3b:reference/ranges/ref_view/base.md</id>
      <updated>2025-05-30T13:42:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view/base.md b/reference/ranges/ref_view/base.md
new file mode 100644
index 000000000..b35f657d6
--- /dev/null
+++ b/reference/ranges/ref_view/base.md
@@ -0,0 +1,54 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* ref_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr R&amp;amp; base() const; // (1) C++20
+```
+
+## 概要
+元となるRangeへの参照を取得する。
+
+
+## 戻り値
+
+メンバ変数`r_`として保持しているRangeへのポインタがあるとして、以下を返す：
+
+```cpp
+return *r_;
+```
+
+
+## 例
+```cpp
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  auto r = std::ranges::ref_view(v);
+  auto&amp;amp; base = r.base();
+
+  assert(&amp;amp;base == &amp;amp;v);
+}
+```
+* base()[color ff0000]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- ref_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view/begin.html"/>
      <id>d9e860a139bd1ecbe5ba1b1cbe691d6637042a3b:reference/ranges/ref_view/begin.md</id>
      <updated>2025-05-30T13:42:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view/begin.md b/reference/ranges/ref_view/begin.md
new file mode 100644
index 000000000..dab222e13
--- /dev/null
+++ b/reference/ranges/ref_view/begin.md
@@ -0,0 +1,57 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* ref_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator_t&amp;lt;R&amp;gt; begin() const; // (1) C++20
+```
+
+## 概要
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+メンバ変数`r_`として保持しているRangeへのポインタがあるとして、以下を返す：
+
+```cpp
+return ranges::begin(*r_);
+```
+* ranges::begin[link /reference/ranges/begin.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  auto r = std::ranges::ref_view(v);
+  auto it = r.begin();
+  auto end = r.end();
+
+  while (it != end) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+    ++it;
+}
+```
+* begin[color ff0000]
+* end()[link end.md]
+
+### 出力
+```
+1 2 3 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- ref_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view/data.html"/>
      <id>d9e860a139bd1ecbe5ba1b1cbe691d6637042a3b:reference/ranges/ref_view/data.md</id>
      <updated>2025-05-30T13:42:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view/data.md b/reference/ranges/ref_view/data.md
new file mode 100644
index 000000000..d1213ae61
--- /dev/null
+++ b/reference/ranges/ref_view/data.md
@@ -0,0 +1,61 @@
+# data
+* ranges[meta header]
+* std::ranges[meta namespace]
+* ref_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto data() const
+  requires contiguous_range&amp;lt;R&amp;gt;; // (1) C++20
+```
+
+## 概要
+Rangeの先頭へのポインタを取得する。
+
+
+## テンプレートパラメータ制約
+- 型`R`が[`contiguous_range`](/reference/ranges/contiguous_range.md)であること。
+
+
+## 戻り値
+
+メンバ変数`r_`として保持しているRangeへのポインタがあるとして、以下を返す：
+
+```cpp
+return ranges::data(*r_);
+```
+* ranges::data[link /reference/ranges/data.md]
+
+
+## 例
+```cpp
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  auto r = std::ranges::ref_view(v);
+
+  int* p = r.data();
+  assert(p == v.data());
+}
+```
+* r.data[color ff0000]
+* v.data()[link /reference/vector/vector/data.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- ref_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view/empty.html"/>
      <id>d9e860a139bd1ecbe5ba1b1cbe691d6637042a3b:reference/ranges/ref_view/empty.md</id>
      <updated>2025-05-30T13:42:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view/empty.md b/reference/ranges/ref_view/empty.md
new file mode 100644
index 000000000..d848628d8
--- /dev/null
+++ b/reference/ranges/ref_view/empty.md
@@ -0,0 +1,60 @@
+# empty
+* ranges[meta header]
+* std::ranges[meta namespace]
+* ref_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr bool empty() const
+  requires requires { ranges::empty(*r_); }; // (1) C++20
+```
+* ranges::empty[link /reference/ranges/empty.md]
+
+## 概要
+Rangeが空かどうかを判定する。
+
+
+## テンプレートパラメータ制約
+- [`ranges::empty`](/reference/ranges/empty.md)`(*r_)`が有効な式であること
+
+
+## 戻り値
+
+メンバ変数`r_`として保持しているRangeへのポインタがあるとして、以下を返す：
+
+```cpp
+return ranges::empty(*r_);
+```
+* ranges::empty[link /reference/ranges/empty.md]
+
+
+## 例
+```cpp
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  auto r = std::ranges::ref_view(v);
+  std::cout &amp;lt;&amp;lt; r.empty() &amp;lt;&amp;lt; std::endl;
+}
+```
+* empty[color ff0000]
+
+### 出力
+```
+0
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- ref_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view/end.html"/>
      <id>d9e860a139bd1ecbe5ba1b1cbe691d6637042a3b:reference/ranges/ref_view/end.md</id>
      <updated>2025-05-30T13:42:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view/end.md b/reference/ranges/ref_view/end.md
new file mode 100644
index 000000000..4256efda3
--- /dev/null
+++ b/reference/ranges/ref_view/end.md
@@ -0,0 +1,60 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* ref_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr sentinel_t&amp;lt;R&amp;gt; end() const; // (1) C++20
+```
+
+## 概要
+
+番兵を取得する。
+
+
+## 戻り値
+メンバ変数`r_`として保持しているRangeへのポインタがあるとして、以下を返す：
+
+```cpp
+ranges::end(*r_);
+```
+* ranges::end[link /reference/ranges/end.md]
+
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  auto r = std::ranges::ref_view(v);
+  auto it = r.begin();
+  auto end = r.end();
+
+  while (it != end) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+    ++it;
+}
+```
+* end[color ff0000]
+* begin()[link begin.md]
+
+### 出力
+```
+1 2 3 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- ref_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view/op_constructor.html"/>
      <id>d9e860a139bd1ecbe5ba1b1cbe691d6637042a3b:reference/ranges/ref_view/op_constructor.md</id>
      <updated>2025-05-30T13:42:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view/op_constructor.md b/reference/ranges/ref_view/op_constructor.md
new file mode 100644
index 000000000..2c028299e
--- /dev/null
+++ b/reference/ranges/ref_view/op_constructor.md
@@ -0,0 +1,68 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* ref_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template &amp;lt;different-from&amp;lt;ref_view&amp;gt; T&amp;gt;
+  requires 以下参照
+constexpr
+  ref_view(T&amp;amp;&amp;amp; t);          // (1) C++20
+```
+
+## 概要
+[`ref_view`](../ref_view.md)オブジェクトを構築する。
+
+- (1) : `t`へのポインタを`*this`に保持する
+
+
+## 効果
+- (1) : メンバ変数`r_`を[`addressof`](/reference/memory/addressof.md)`(static_cast&amp;lt;R&amp;amp;&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;T&amp;gt;(t)))`で初期化する
+
+
+## 備考
+- (1) : 説明専用の関数`FUN`を以下のように定義する：
+    ```cpp
+    void FUN(R&amp;amp;);
+    void FUN(R&amp;amp;&amp;amp;) = delete;
+    ```
+
+    - requires節は、以下と等価になる：
+
+    ```cpp
+    convertible_to&amp;lt;T, R&amp;amp;&amp;gt; &amp;amp;&amp;amp; requires { FUN(declval&amp;lt;T&amp;gt;()); }
+    ```
+
+    - これはつまり、このコンストラクタには一時オブジェクトは渡せないことを意味する
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  for (int x : std::ranges::ref_view(v)) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+  }
+}
+```
+
+### 出力
+```
+1 2 3 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- ref_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view/op_deduction_guide.html"/>
      <id>d9e860a139bd1ecbe5ba1b1cbe691d6637042a3b:reference/ranges/ref_view/op_deduction_guide.md</id>
      <updated>2025-05-30T13:42:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view/op_deduction_guide.md b/reference/ranges/ref_view/op_deduction_guide.md
new file mode 100644
index 000000000..a9e8c0995
--- /dev/null
+++ b/reference/ranges/ref_view/op_deduction_guide.md
@@ -0,0 +1,49 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template &amp;lt;class R&amp;gt;
+  ref_view(R&amp;amp;) -&amp;gt; ref_view&amp;lt;R&amp;gt;;
+}
+```
+
+## 概要
+
+[`ref_view`](../ref_view.md)クラステンプレートの型推論補助。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  auto r = std::ranges::ref_view(v);
+  for (int x : r) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+1
+2
+3
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- ref_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view/size.html"/>
      <id>d9e860a139bd1ecbe5ba1b1cbe691d6637042a3b:reference/ranges/ref_view/size.md</id>
      <updated>2025-05-30T13:42:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view/size.md b/reference/ranges/ref_view/size.md
new file mode 100644
index 000000000..62dd20500
--- /dev/null
+++ b/reference/ranges/ref_view/size.md
@@ -0,0 +1,59 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* ref_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto size() const
+  requires sized_range&amp;lt;R&amp;gt;; // (1) C++20
+```
+
+## 概要
+要素数を取得する。
+
+
+## テンプレートパラメータ制約
+- 型`R`が[`sized_range`](/reference/ranges/sized_range.md)であること。
+
+
+## 戻り値
+
+メンバ変数`r_`として保持しているRangeへのポインタがあるとして、以下を返す：
+
+```cpp
+return ranges::size(*r_);
+```
+* ranges::size[link /reference/ranges/size.md]
+
+
+## 例
+```cpp
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  auto r = std::ranges::ref_view(v);
+  std::cout &amp;lt;&amp;lt; r.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+3
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- Merge pull request #1450 from math-hiyoko/complexity_of_hash_table_clear</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/clear.html"/>
      <id>773e04a8fa8d232d4b56020467c2d4d0b85f48cf:reference/unordered_map/unordered_map/clear.md</id>
      <updated>2025-05-30T12:51:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/clear.md b/reference/unordered_map/unordered_map/clear.md
index 1d0ce4f0c..34eaefc58 100644
--- a/reference/unordered_map/unordered_map/clear.md
+++ b/reference/unordered_map/unordered_map/clear.md
@@ -36,6 +36,24 @@ void clear() noexcept;
 ## 計算量
 本関数呼び出し前のコンテナの要素数（[`size`](size.md)`()`）に比例
 
+### 計算量に関する備考
+多くの実装（GCC libstdc++, LLVM libc++ など）は
+
+1. 全ての要素を走査して各要素を破棄
+2. 全てのバケットを走査して各バケットの状態をリセット
+
+という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() *` [`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
+規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
+
+
+## 備考
+- `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
+実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
+- バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
+    ```cpp
+    um = std::unordered_map&amp;lt;std::string, int&amp;gt;();
+    ```
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- Merge pull request #1450 from math-hiyoko/complexity_of_hash_table_clear</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/clear.html"/>
      <id>773e04a8fa8d232d4b56020467c2d4d0b85f48cf:reference/unordered_map/unordered_multimap/clear.md</id>
      <updated>2025-05-30T12:51:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/clear.md b/reference/unordered_map/unordered_multimap/clear.md
index e4d252581..9480119e0 100644
--- a/reference/unordered_map/unordered_multimap/clear.md
+++ b/reference/unordered_map/unordered_multimap/clear.md
@@ -36,6 +36,24 @@ void clear() noexcept;
 ## 計算量
 本関数呼び出し前のコンテナの要素数（[`size`](size.md)`()`）に比例
 
+### 計算量に関する備考
+多くの実装（GCC libstdc++, LLVM libc++ など）は
+
+1. 全ての要素を走査して各要素を破棄
+2. 全てのバケットを走査して各バケットの状態をリセット
+
+という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() *` [`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
+規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
+
+
+## 備考
+- `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
+実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
+- バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
+    ```cpp
+    um = std::unordered_multimap&amp;lt;std::string, int&amp;gt;();
+    ```
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- Merge pull request #1450 from math-hiyoko/complexity_of_hash_table_clear</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/clear.html"/>
      <id>773e04a8fa8d232d4b56020467c2d4d0b85f48cf:reference/unordered_set/unordered_multiset/clear.md</id>
      <updated>2025-05-30T12:51:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/clear.md b/reference/unordered_set/unordered_multiset/clear.md
index 8ba2f6e24..f19039fd3 100644
--- a/reference/unordered_set/unordered_multiset/clear.md
+++ b/reference/unordered_set/unordered_multiset/clear.md
@@ -36,6 +36,24 @@ void clear() noexcept;
 ## 計算量
 本関数呼び出し前のコンテナの要素数（[`size`](size.md)`()`）に比例
 
+### 計算量に関する備考
+多くの実装（GCC libstdc++, LLVM libc++ など）は
+
+1. 全ての要素を走査して各要素を破棄
+2. 全てのバケットを走査して各バケットの状態をリセット
+
+という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() *` [`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
+規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
+
+
+## 備考
+- `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
+実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
+- バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
+    ```cpp
+    ums = std::unordered_multiset&amp;lt;int&amp;gt;();
+    ```
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- Merge pull request #1450 from math-hiyoko/complexity_of_hash_table_clear</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/clear.html"/>
      <id>773e04a8fa8d232d4b56020467c2d4d0b85f48cf:reference/unordered_set/unordered_set/clear.md</id>
      <updated>2025-05-30T12:51:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/clear.md b/reference/unordered_set/unordered_set/clear.md
index e54f8a9f4..4aabb8fe9 100644
--- a/reference/unordered_set/unordered_set/clear.md
+++ b/reference/unordered_set/unordered_set/clear.md
@@ -36,6 +36,24 @@ void clear() noexcept;
 ## 計算量
 本関数呼び出し前のコンテナの要素数（[`size`](size.md)`()`）に比例
 
+### 計算量に関する備考
+多くの実装（GCC libstdc++, LLVM libc++ など）は
+
+1. 全ての要素を走査して各要素を破棄
+2. 全てのバケットを走査して各バケットの状態をリセット
+
+という手順を取るため、実際の実行時間はバケット数 [`bucket_count`](bucket_count.md)`()` について線形となる (`size() &amp;lt;= bucket_count() *` [`max_load_factor()`](max_load_factor.md) = O(`bucket_count()`) であることに注意)。
+規格の計算量の要件は要素数 `size()` に線形となっているが、規格がコンテナに対して定義する計算量は「コンテナに格納している要素に対する操作の数の計算量」であるためバケットの走査などを考慮していない。
+
+
+## 備考
+- `clear()` がバケット数([`bucket_count`](bucket_count.md)`()`)を縮小することを規格は要求していない。
+実装によっては `clear()` 後もバケット配列が維持され、動的メモリが残る場合がある。
+- バケット数を初期状態まで縮小させたいときには `clear()` の代わりに以下のように操作する
+    ```cpp
+    us = std::unordered_set&amp;lt;int&amp;gt;();
+    ```
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_istream_view -- basic_istream_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/basic_istream_view.html"/>
      <id>0d8274fb2864796421c8f9bb995382a00906040d:reference/ranges/basic_istream_view.md</id>
      <updated>2025-05-30T12:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/basic_istream_view.md b/reference/ranges/basic_istream_view.md
index 9008e803c..ee8f80af0 100644
--- a/reference/ranges/basic_istream_view.md
+++ b/reference/ranges/basic_istream_view.md
@@ -69,9 +69,17 @@ concept stream-extractable = requires(basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; is, Val&amp;amp; t)
 
 | 名前                                                     | 説明                             | 対応バージョン |
 |----------------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](basic_istream_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`begin`](basic_istream_view/begin.md.nolink)                   | ストリームから値を1つ読み、それを指すイテレータを取得する   | C++20          |
-| [`end`](basic_istream_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](basic_istream_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`begin`](basic_istream_view/begin.md)                   | ストリームから値を1つ読み、それを指すイテレータを取得する   | C++20          |
+| [`end`](basic_istream_view/end.md)                       | 番兵を取得する                   | C++20          |
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|------------------------------ ----|----------------|
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- basic_istream_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/basic_istream_view/begin.html"/>
      <id>0d8274fb2864796421c8f9bb995382a00906040d:reference/ranges/basic_istream_view/begin.md</id>
      <updated>2025-05-30T12:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/basic_istream_view/begin.md b/reference/ranges/basic_istream_view/begin.md
new file mode 100644
index 000000000..237814e8a
--- /dev/null
+++ b/reference/ranges/basic_istream_view/begin.md
@@ -0,0 +1,56 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* basic_istream_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin(); // (1) C++20
+```
+
+## 概要
+
+ストリームから値を1つ読み、それを指すイテレータを取得する。
+
+
+## 効果
+以下と等価：
+
+```cpp
+*stream_ &amp;gt;&amp;gt; value_;
+return iterator{*this};
+```
+
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  auto iss = std::istringstream{&amp;#34;1 2 3 4 5&amp;#34;};
+  auto r = std::views::istream&amp;lt;int&amp;gt;(iss);
+  auto it = r.begin();
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- basic_istream_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/basic_istream_view/end.html"/>
      <id>0d8274fb2864796421c8f9bb995382a00906040d:reference/ranges/basic_istream_view/end.md</id>
      <updated>2025-05-30T12:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/basic_istream_view/end.md b/reference/ranges/basic_istream_view/end.md
new file mode 100644
index 000000000..be86e677f
--- /dev/null
+++ b/reference/ranges/basic_istream_view/end.md
@@ -0,0 +1,60 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* basic_istream_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr default_sentinel_t end() const noexcept; // (1) C++20
+```
+
+## 概要
+
+番兵を取得する。
+
+
+## 戻り値
+以下と等価：
+
+```cpp
+return default_sentinel;
+```
+
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  auto iss = std::istringstream{&amp;#34;1 2 3 4 5&amp;#34;};
+  auto r = std::views::istream&amp;lt;int&amp;gt;(iss);
+  auto it = r.begin();
+  auto last = r.end();
+
+  for (; it != last; ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+  }
+}
+```
+* end[color ff0000]
+* begin()[link begin.md]
+
+### 出力
+
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_istream_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/basic_istream_view/op_constructor.html"/>
      <id>0d8274fb2864796421c8f9bb995382a00906040d:reference/ranges/basic_istream_view/op_constructor.md</id>
      <updated>2025-05-30T12:45:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/basic_istream_view/op_constructor.md b/reference/ranges/basic_istream_view/op_constructor.md
new file mode 100644
index 000000000..c37f9b480
--- /dev/null
+++ b/reference/ranges/basic_istream_view/op_constructor.md
@@ -0,0 +1,52 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* basic_istream_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr explicit
+  basic_istream_view(basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; stream); // (1) C++20
+```
+
+## 概要
+[`basic_istream_view`](../basic_istream_view.md)オブジェクトを構築する。
+
+- (1) : [`basic_istream`](/reference/istream/basic_istream.md)の参照を受け取るコンストラクタ
+
+
+## 効果
+
+- (1) : [`addressof`](/reference/memory/addressof.md)`(stream)`をメンバ変数`stream_`に保持する
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  auto iss = std::istringstream{&amp;#34;1 2 3 4 5&amp;#34;};
+
+  for (int i : std::views::istream&amp;lt;int&amp;gt;(iss)) {
+    std::cout &amp;lt;&amp;lt; i;
+  }
+}
+```
+
+### 出力
+```
+12345
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stopped_as_error -- execution/stopped_as_error: 効果を修正 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/stopped_as_error.html"/>
      <id>c658129825465e613e0ed82e5af2f5ae1379365a:reference/execution/execution/stopped_as_error.md</id>
      <updated>2025-05-30T10:54:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/stopped_as_error.md b/reference/execution/execution/stopped_as_error.md
index c815f9729..678417fc2 100644
--- a/reference/execution/execution/stopped_as_error.md
+++ b/reference/execution/execution/stopped_as_error.md
@@ -32,7 +32,7 @@ transform_sender(get-domain-early(sndr), make-sender(stopped_as_error, err, sndr
 
 
 ### Senderアルゴリズムタグ `stopped_as_error`
-説明用の式`sndr`と`env`に対して、型`Sndr`を`decltype((sndr))`、型`Env`を`decltype((env))`とする。[`sender-for`](sender-for.md)`&amp;lt;Sndr, stopped_as_error_t&amp;gt; == false`、もしくは[`single-sender-value-type`](single-sender-value-type.md.nolink)`&amp;lt;Sndr, Env&amp;gt;`が不適格または`void`のとき、式`stopped_as_error.transform_sender(sndr, env)`は不適格となる。
+説明用の式`sndr`と`env`に対して、型`Sndr`を`decltype((sndr))`、型`Env`を`decltype((env))`とする。[`sender-for`](sender-for.md)`&amp;lt;Sndr, stopped_as_error_t&amp;gt; == false`のとき、式`stopped_as_error.transform_sender(sndr, env)`は不適格となる。
 
 そうでなければ、式`stopped_as_error.transform_sender(sndr, env)`は下記と等価。
 
@@ -108,7 +108,7 @@ int main()
     ex::sender auto snd0 = MySender{-1};
     ex::sender auto snd1 = ex::stopped_as_error(snd0, MyStoppedError{});
     try {
-      auto result = std::this_thread::sync_wait(snd1).value();
+      auto [result] = std::this_thread::sync_wait(snd1).value();
       std::println(&amp;#34;(int) {}&amp;#34;, result);
     } catch (MyStoppedError) {
       std::println(&amp;#34;stopped&amp;#34;);
@@ -120,7 +120,7 @@ int main()
       MySender{-1}
       | ex::stopped_as_error(MyStoppedError{});
     try {
-      auto result = std::this_thread::sync_wait(sndr).value();
+      auto [result] = std::this_thread::sync_wait(sndr).value();
       std::println(&amp;#34;(int) {}&amp;#34;, result);
     } catch (MyStoppedError) {
       std::println(&amp;#34;stopped&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
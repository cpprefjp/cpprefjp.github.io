<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-08T11:06:32.924538</updated>
  <id>66d408d8-0fc4-473a-a55b-d8e721c1af48</id>

  
    <entry>
      <title>実行ポリシー -- execution/execution_policy: add inner link</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/execution_policy.html"/>
      <id>128604dd6229da84c06238db27e64b5a94c00a0d:reference/execution/execution/execution_policy.md</id>
      <updated>2025-06-08T20:02:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/execution_policy.md b/reference/execution/execution/execution_policy.md
index 3a546b20d..a9d078547 100644
--- a/reference/execution/execution/execution_policy.md
+++ b/reference/execution/execution/execution_policy.md
@@ -162,7 +162,7 @@ int main()
 * std::execution::par[color ff0000]
 * std::execution::par_unseq[color ff0000]
 * count.load[link /reference/atomic/atomic/load.md]
-* is_always_lock_free[link /reference/atomic/atomic/is_always_lock_free.md.nolink]
+* is_always_lock_free[link /reference/atomic/atomic.md]
 
 #### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ws -- ws : サンプルコードのインデントを4→2に修正</title>
      <link href="https://cpprefjp.github.io/reference/istream/ws.html"/>
      <id>67160f5f8b23448c7a71e7a0001c79de190ec5a5:reference/istream/ws.md</id>
      <updated>2025-06-06T10:38:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/istream/ws.md b/reference/istream/ws.md
index 58dea186d..7e59b2c56 100644
--- a/reference/istream/ws.md
+++ b/reference/istream/ws.md
@@ -30,21 +30,21 @@ namespace std {
 #include &amp;lt;string&amp;gt;
 
 int main() {
-    // マニピュレータとして使用
-    {
-        std::istringstream ss(&amp;#34;   42&amp;#34;);
-        std::string line;
-        std::getline(ss &amp;gt;&amp;gt; std::ws, line);
-        std::cout &amp;lt;&amp;lt; line &amp;lt;&amp;lt; std::endl; // &amp;#34;42&amp;#34;
-    }
-
-    // 関数として使用（通常はしない）
-    {
-        std::istringstream ss(&amp;#34;   42&amp;#34;);
-        std::cout &amp;lt;&amp;lt; ss.tellg() &amp;lt;&amp;lt; std::endl; // &amp;#34;0&amp;#34;
-        std::ws(ss);
-        std::cout &amp;lt;&amp;lt; ss.tellg() &amp;lt;&amp;lt; std::endl; // &amp;#34;3&amp;#34;
-    }
+  // マニピュレータとして使用
+  {
+    std::istringstream ss(&amp;#34;   42&amp;#34;);
+    std::string line;
+    std::getline(ss &amp;gt;&amp;gt; std::ws, line);
+    std::cout &amp;lt;&amp;lt; line &amp;lt;&amp;lt; std::endl; // &amp;#34;42&amp;#34;
+  }
+
+  // 関数として使用（通常はしない）
+  {
+    std::istringstream ss(&amp;#34;   42&amp;#34;);
+    std::cout &amp;lt;&amp;lt; ss.tellg() &amp;lt;&amp;lt; std::endl; // &amp;#34;0&amp;#34;
+    std::ws(ss);
+    std::cout &amp;lt;&amp;lt; ss.tellg() &amp;lt;&amp;lt; std::endl; // &amp;#34;3&amp;#34;
+  }
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ws -- add sample to std::ws</title>
      <link href="https://cpprefjp.github.io/reference/istream/ws.html"/>
      <id>1a53cfe9f233ee2fd70f96ff186f7c04ab38a160:reference/istream/ws.md</id>
      <updated>2025-06-05T20:23:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/istream/ws.md b/reference/istream/ws.md
index c523930ba..58dea186d 100644
--- a/reference/istream/ws.md
+++ b/reference/istream/ws.md
@@ -24,13 +24,36 @@ namespace std {
 `is`
 
 ## 例
-TBD
+```cpp
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main() {
+    // マニピュレータとして使用
+    {
+        std::istringstream ss(&amp;#34;   42&amp;#34;);
+        std::string line;
+        std::getline(ss &amp;gt;&amp;gt; std::ws, line);
+        std::cout &amp;lt;&amp;lt; line &amp;lt;&amp;lt; std::endl; // &amp;#34;42&amp;#34;
+    }
+
+    // 関数として使用（通常はしない）
+    {
+        std::istringstream ss(&amp;#34;   42&amp;#34;);
+        std::cout &amp;lt;&amp;lt; ss.tellg() &amp;lt;&amp;lt; std::endl; // &amp;#34;0&amp;#34;
+        std::ws(ss);
+        std::cout &amp;lt;&amp;lt; ss.tellg() &amp;lt;&amp;lt; std::endl; // &amp;#34;3&amp;#34;
+    }
+}
+```
 
 ### 出力
-TBD
-
-## 実装例
-TBD
+```
+42
+0
+3
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt; (非メンバ関数) -- fix typo in basic_istream</title>
      <link href="https://cpprefjp.github.io/reference/istream/basic_istream/op_istream_free.html"/>
      <id>d9fff1aa54f0134b841eaf56b2a74baca8478c9e:reference/istream/basic_istream/op_istream_free.md</id>
      <updated>2025-06-05T20:11:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/istream/basic_istream/op_istream_free.md b/reference/istream/basic_istream/op_istream_free.md
index 1dc60946e..152d4f5f0 100644
--- a/reference/istream/basic_istream/op_istream_free.md
+++ b/reference/istream/basic_istream/op_istream_free.md
@@ -88,7 +88,7 @@ namespace std {
 
 ## 戻り値
 
-`*this`
+`is`
 
 
 ## 例（文字列）
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- sstream: 不足していた例を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream/str.html"/>
      <id>47a5703c92ab58bb27c33297e3eabae5cc2642c8:reference/sstream/basic_istringstream/str.md</id>
      <updated>2025-06-05T12:56:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream/str.md b/reference/sstream/basic_istringstream/str.md
index fae012a55..090f76f19 100644
--- a/reference/sstream/basic_istringstream/str.md
+++ b/reference/sstream/basic_istringstream/str.md
@@ -32,6 +32,49 @@ void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 - (5) : `rdbuf()-&amp;gt;str(s)` と等価
 - (6) : `rdbuf()-&amp;gt;str(std::move(s))` と等価
 
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // 文字列の取得
+  std::istringstream iss(&amp;#34;Hello World 123 45.67&amp;#34;);
+  std::cout &amp;lt;&amp;lt; &amp;#34;Content: &amp;#34; &amp;lt;&amp;lt; iss.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 一部を読み取っても、str()は全体を返す
+  std::string word;
+  iss &amp;gt;&amp;gt; word;
+  std::cout &amp;lt;&amp;lt; &amp;#34;Read word: &amp;#34; &amp;lt;&amp;lt; word &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;Full content: &amp;#34; &amp;lt;&amp;lt; iss.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 新しい文字列を設定
+  iss.str(&amp;#34;New content 999&amp;#34;);
+  iss.clear();  // エラーフラグをクリア
+  
+  // 新しい内容から読み取り
+  std::string s1, s2;
+  int num;
+  iss &amp;gt;&amp;gt; s1 &amp;gt;&amp;gt; s2 &amp;gt;&amp;gt; num;
+  std::cout &amp;lt;&amp;lt; &amp;#34;New read: &amp;#34; &amp;lt;&amp;lt; s1 &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; s2 &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; num &amp;lt;&amp;lt; std::endl;
+  
+  // 空文字列を設定してリセット
+  iss.str(&amp;#34;&amp;#34;);
+  std::cout &amp;lt;&amp;lt; &amp;#34;Empty? &amp;#34; &amp;lt;&amp;lt; (iss.str().empty() ? &amp;#34;yes&amp;#34; : &amp;#34;no&amp;#34;) &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+Content: Hello World 123 45.67
+Read word: Hello
+Full content: Hello World 123 45.67
+New read: New content 999
+Empty? yes
+```
+
 ## 関連項目
 - [`basic_stringbuf::str`](../basic_stringbuf/str.md)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_ostringstream -- sstream: 不足していた例を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream.html"/>
      <id>47a5703c92ab58bb27c33297e3eabae5cc2642c8:reference/sstream/basic_ostringstream.md</id>
      <updated>2025-06-05T12:56:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream.md b/reference/sstream/basic_ostringstream.md
index 3d5aed8ed..e14486acb 100644
--- a/reference/sstream/basic_ostringstream.md
+++ b/reference/sstream/basic_ostringstream.md
@@ -53,11 +53,34 @@ namespace std {
 | `allocator_type` | テンプレート仮引数`Allocator` | |
 
 ## 例
-```cpp
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::ostringstream oss;
+  
+  // 数値や文字列を書き込む
+  oss &amp;lt;&amp;lt; &amp;#34;The answer is &amp;#34; &amp;lt;&amp;lt; 42 &amp;lt;&amp;lt; &amp;#34; and pi is approximately &amp;#34; &amp;lt;&amp;lt; 3.14;
+  
+  // 文字列として取得
+  std::string result = oss.str();
+  std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+  
+  // バッファをクリアして新しい内容を書き込む
+  oss.str(&amp;#34;&amp;#34;);
+  oss &amp;lt;&amp;lt; &amp;#34;New content: &amp;#34; &amp;lt;&amp;lt; 123.456;
+  std::cout &amp;lt;&amp;lt; oss.str() &amp;lt;&amp;lt; std::endl;
+}
 ```
+* oss.str[link basic_ostringstream/str.md]
 
 ### 出力
 ```
+The answer is 42 and pi is approximately 3.14
+New content: 123.456
 ```
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- sstream: 不足していた例を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream/str.html"/>
      <id>47a5703c92ab58bb27c33297e3eabae5cc2642c8:reference/sstream/basic_ostringstream/str.md</id>
      <updated>2025-06-05T12:56:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream/str.md b/reference/sstream/basic_ostringstream/str.md
index 0412ec540..e8d2d3258 100644
--- a/reference/sstream/basic_ostringstream/str.md
+++ b/reference/sstream/basic_ostringstream/str.md
@@ -33,5 +33,46 @@ void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 - (5) : `rdbuf()-&amp;gt;str(s)` と等価
 - (6) : `rdbuf()-&amp;gt;str(std::move(s))` と等価
 
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // 文字列の取得
+  std::ostringstream oss;
+  oss &amp;lt;&amp;lt; &amp;#34;Hello &amp;#34; &amp;lt;&amp;lt; 123 &amp;lt;&amp;lt; &amp;#34; World&amp;#34;;
+  std::cout &amp;lt;&amp;lt; &amp;#34;Content: &amp;#34; &amp;lt;&amp;lt; oss.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 追記モード
+  oss &amp;lt;&amp;lt; &amp;#34; + more&amp;#34;;
+  std::cout &amp;lt;&amp;lt; &amp;#34;After append: &amp;#34; &amp;lt;&amp;lt; oss.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 新しい文字列を設定（内容を置き換える）
+  oss.str(&amp;#34;Reset content&amp;#34;);
+  std::cout &amp;lt;&amp;lt; &amp;#34;After reset: &amp;#34; &amp;lt;&amp;lt; oss.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 書き込み位置は先頭にリセットされる
+  oss &amp;lt;&amp;lt; &amp;#34;!!&amp;#34;;
+  std::cout &amp;lt;&amp;lt; &amp;#34;After write: &amp;#34; &amp;lt;&amp;lt; oss.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 空文字列でクリア
+  oss.str(&amp;#34;&amp;#34;);
+  oss &amp;lt;&amp;lt; &amp;#34;Fresh start&amp;#34;;
+  std::cout &amp;lt;&amp;lt; &amp;#34;Final: &amp;#34; &amp;lt;&amp;lt; oss.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+Content: Hello 123 World
+After append: Hello 123 World + more
+After reset: Reset content
+After write: !!set content
+Final: Fresh start
+```
+
 ## 関連項目
-[basic_stringbuf::str](../basic_stringbuf/str.md)
+- [`basic_stringbuf::str`](../basic_stringbuf/str.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stringbuf -- sstream: 不足していた例を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf.html"/>
      <id>47a5703c92ab58bb27c33297e3eabae5cc2642c8:reference/sstream/basic_stringbuf.md</id>
      <updated>2025-06-05T12:56:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf.md b/reference/sstream/basic_stringbuf.md
index 76ac70b0e..0c2f2a467 100644
--- a/reference/sstream/basic_stringbuf.md
+++ b/reference/sstream/basic_stringbuf.md
@@ -53,5 +53,63 @@ namespace std {
 | `allocator_type` | テンプレート仮引数`Allocator` | |
 
 
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;cstring&amp;gt;
+
+int main()
+{
+  // basic_stringbufはストリームの内部バッファとして動作する
+  std::stringbuf buf;
+  
+  // 書き込み: sputc()で1文字ずつ書き込む
+  buf.sputc(&amp;#39;H&amp;#39;);
+  buf.sputc(&amp;#39;e&amp;#39;);
+  buf.sputc(&amp;#39;l&amp;#39;);
+  buf.sputc(&amp;#39;l&amp;#39;);
+  buf.sputc(&amp;#39;o&amp;#39;);
+  
+  // 文字列として取得
+  std::cout &amp;lt;&amp;lt; &amp;#34;Written: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 新しい文字列を設定
+  buf.str(&amp;#34;World&amp;#34;);
+  
+  // 読み取り: sbumpc()で1文字ずつ読み取る
+  std::cout &amp;lt;&amp;lt; &amp;#34;Read: &amp;#34;;
+  while (buf.in_avail() &amp;gt; 0) {
+    char c = buf.sbumpc();
+    std::cout &amp;lt;&amp;lt; c;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+  
+  // sputn()で文字列を一度に書き込む
+  buf.str(&amp;#34;&amp;#34;);  // バッファをクリア
+  const char* message = &amp;#34;Hello, World!&amp;#34;;
+  buf.sputn(message, std::strlen(message));
+  
+  // C++20以降: view()で文字列ビューとして取得
+  // std::string_view sv = buf.view();
+  // std::cout &amp;lt;&amp;lt; &amp;#34;View: &amp;#34; &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; std::endl;
+  
+  std::cout &amp;lt;&amp;lt; &amp;#34;Final: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+* sputc[link /reference/streambuf/basic_streambuf/sputc.md]
+* sbumpc[link /reference/streambuf/basic_streambuf/sbumpc.md]
+* in_avail[link /reference/streambuf/basic_streambuf/in_avail.md]
+* sputn[link /reference/streambuf/basic_streambuf/sputn.md]
+* str[link basic_stringbuf/str.md]
+
+### 出力
+```
+Written: Hello
+Read: World
+Final: Hello, World!
+```
+
 ## 参照
 - [P0408R7 Efficient Access to `basic_stringbuf`’s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- sstream: 不足していた例を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/str.html"/>
      <id>47a5703c92ab58bb27c33297e3eabae5cc2642c8:reference/sstream/basic_stringbuf/str.md</id>
      <updated>2025-06-05T12:56:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/str.md b/reference/sstream/basic_stringbuf/str.md
index 4f7b91704..3b05fee01 100644
--- a/reference/sstream/basic_stringbuf/str.md
+++ b/reference/sstream/basic_stringbuf/str.md
@@ -32,3 +32,58 @@ void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 - (4) : 文字列オブジェクト`s`を設定する
 - (5) : `SAlloc`型のアロケータによって確保されているデータをコピーして、文字列オブジェクト`s`を設定する
 - (6) : 与えられた文字列オブジェクト`s`をムーブして設定する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // 文字列の取得
+  std::stringbuf buf;
+  buf.sputn(&amp;#34;Hello, World!&amp;#34;, 13);
+  std::cout &amp;lt;&amp;lt; &amp;#34;1: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 文字列の設定
+  buf.str(&amp;#34;New content&amp;#34;);
+  std::cout &amp;lt;&amp;lt; &amp;#34;2: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 読み書き位置のリセット
+  buf.str(&amp;#34;Read/Write test&amp;#34;);
+  
+  // 読み取り
+  char ch;
+  ch = buf.sbumpc();  // &amp;#39;R&amp;#39;
+  ch = buf.sbumpc();  // &amp;#39;e&amp;#39;
+  std::cout &amp;lt;&amp;lt; &amp;#34;3: After reading 2 chars: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 書き込み（現在の位置から）
+  buf.sputc(&amp;#39;X&amp;#39;);
+  buf.sputc(&amp;#39;Y&amp;#39;);
+  std::cout &amp;lt;&amp;lt; &amp;#34;4: After writing: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+  
+  // C++20: ムーブによる設定
+  std::string s = &amp;#34;Move test&amp;#34;;
+  buf.str(std::move(s));
+  std::cout &amp;lt;&amp;lt; &amp;#34;5: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 空文字列でクリア
+  buf.str(&amp;#34;&amp;#34;);
+  std::cout &amp;lt;&amp;lt; &amp;#34;6: Empty? &amp;#34; &amp;lt;&amp;lt; (buf.str().empty() ? &amp;#34;yes&amp;#34; : &amp;#34;no&amp;#34;) &amp;lt;&amp;lt; std::endl;
+}
+```
+* sputn[link /reference/streambuf/basic_streambuf/sputn.md]
+* sbumpc[link /reference/streambuf/basic_streambuf/sbumpc.md]
+* sputc[link /reference/streambuf/basic_streambuf/sputc.md]
+
+### 出力
+```
+1: Hello, World!
+2: New content
+3: After reading 2 chars: Read/Write test
+4: After writing: ReXY/Write test
+5: Move test
+6: Empty? yes
+```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stringstream -- sstream: 不足していた例を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream.html"/>
      <id>47a5703c92ab58bb27c33297e3eabae5cc2642c8:reference/sstream/basic_stringstream.md</id>
      <updated>2025-06-05T12:56:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream.md b/reference/sstream/basic_stringstream.md
index b10e7a68e..1557bc763 100644
--- a/reference/sstream/basic_stringstream.md
+++ b/reference/sstream/basic_stringstream.md
@@ -53,11 +53,58 @@ namespace std {
 | `allocator_type` | テンプレート仮引数`Allocator` | |
 
 ## 例
-```cpp
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // 読み取りと書き込みが可能なストリーム
+  std::stringstream ss;
+  
+  // データを書き込む
+  ss &amp;lt;&amp;lt; &amp;#34;Hello &amp;#34; &amp;lt;&amp;lt; 123 &amp;lt;&amp;lt; &amp;#34; World &amp;#34; &amp;lt;&amp;lt; 45.67;
+  
+  // 文字列として取得
+  std::cout &amp;lt;&amp;lt; &amp;#34;Content: &amp;#34; &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 読み取り位置をリセット
+  ss.seekg(0);
+  
+  // データを読み取る
+  std::string word1, word3;
+  int num1;
+  double num2;
+  
+  ss &amp;gt;&amp;gt; word1 &amp;gt;&amp;gt; num1 &amp;gt;&amp;gt; word3 &amp;gt;&amp;gt; num2;
+  
+  std::cout &amp;lt;&amp;lt; &amp;#34;Read: word1=&amp;#34; &amp;lt;&amp;lt; word1 
+            &amp;lt;&amp;lt; &amp;#34;, num1=&amp;#34; &amp;lt;&amp;lt; num1 
+            &amp;lt;&amp;lt; &amp;#34;, word3=&amp;#34; &amp;lt;&amp;lt; word3 
+            &amp;lt;&amp;lt; &amp;#34;, num2=&amp;#34; &amp;lt;&amp;lt; num2 &amp;lt;&amp;lt; std::endl;
+  
+  // 新しい内容でリセット
+  ss.str(&amp;#34;42 3.14159 test&amp;#34;);
+  ss.clear();  // エラーフラグをクリア
+  
+  int value;
+  double pi;
+  std::string text;
+  ss &amp;gt;&amp;gt; value &amp;gt;&amp;gt; pi &amp;gt;&amp;gt; text;
+  
+  std::cout &amp;lt;&amp;lt; &amp;#34;New data: &amp;#34; &amp;lt;&amp;lt; value &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; pi &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; text &amp;lt;&amp;lt; std::endl;
+}
 ```
+* ss.str[link basic_stringstream/str.md]
+* ss.seekg[link /reference/istream/basic_istream/seekg.md]
+* ss.clear[link /reference/ios/basic_ios/clear.md]
 
 ### 出力
 ```
+Content: Hello 123 World 45.67
+Read: word1=Hello, num1=123, word3=World, num2=45.67
+New data: 42, 3.14159, test
 ```
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- sstream: 不足していた例を追加</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/str.html"/>
      <id>47a5703c92ab58bb27c33297e3eabae5cc2642c8:reference/sstream/basic_stringstream/str.md</id>
      <updated>2025-06-05T12:56:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/str.md b/reference/sstream/basic_stringstream/str.md
index 72e0f5b0f..7c4b542b3 100644
--- a/reference/sstream/basic_stringstream/str.md
+++ b/reference/sstream/basic_stringstream/str.md
@@ -33,5 +33,49 @@ void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
 - (5) : `rdbuf()-&amp;gt;str(s)` と等価
 - (6) : `rdbuf()-&amp;gt;str(std::move(s))` と等価
 
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::stringstream ss;
+  
+  // 文字列を設定
+  ss.str(&amp;#34;initial content&amp;#34;);
+  std::cout &amp;lt;&amp;lt; &amp;#34;1: &amp;#34; &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+  
+  // ストリームに追記
+  ss &amp;lt;&amp;lt; &amp;#34; + added&amp;#34;;
+  std::cout &amp;lt;&amp;lt; &amp;#34;2: &amp;#34; &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 新しい文字列で置き換え
+  ss.str(&amp;#34;new content&amp;#34;);
+  std::cout &amp;lt;&amp;lt; &amp;#34;3: &amp;#34; &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;
+  
+  // 読み取り位置に注意
+  std::string word;
+  ss &amp;gt;&amp;gt; word;  // &amp;#34;new&amp;#34;を読む
+  std::cout &amp;lt;&amp;lt; &amp;#34;Read: &amp;#34; &amp;lt;&amp;lt; word &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;4: &amp;#34; &amp;lt;&amp;lt; ss.str() &amp;lt;&amp;lt; std::endl;  // 全体は変わらない
+  
+  // 空文字列でクリア
+  ss.str(&amp;#34;&amp;#34;);
+  std::cout &amp;lt;&amp;lt; &amp;#34;5: Empty? &amp;#34; &amp;lt;&amp;lt; (ss.str().empty() ? &amp;#34;yes&amp;#34; : &amp;#34;no&amp;#34;) &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+1: initial content
+2: initial content + added
+3: new content
+Read: new
+4: new content
+5: Empty? yes
+```
+
 ## 関連項目
 - [`basic_stringbuf::str`](../basic_stringbuf/str.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
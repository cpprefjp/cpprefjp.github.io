<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-01-14T14:37:56.592089</updated>
  <id>bebca006-700a-404c-813f-dea748f54593</id>

  
    <entry>
      <title>LayoutMapping --  mdspan/LayoutMapping: remove forbidden chars(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>c38cacd6357c780e1cdc98f0d8e161b21146c7d1:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-01-14T20:16:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
index e3fd173e4..680c4ebf6 100644
--- a/reference/mdspan/LayoutMapping.md
+++ b/reference/mdspan/LayoutMapping.md
@@ -63,11 +63,11 @@ LayoutMappingを満たす型`M`は
 
 説明用の変数`m`を`(const) M`の値、パック`i`を[`M::extents_type::rank()`](extents/rank.md)個からなる整数値、変数`r`を多次元の次元番号としたとき、下記の式が妥当であること
 
-- `m.extents()` : `const M​::​extents_type&amp;amp;`型を返すこと。
-- `m(i...)` : `M​::​index_type`型を返すこと。
+- `m.extents()` : `const M::extents_type&amp;amp;`型を返すこと。
+- `m(i...)` : `M::index_type`型を返すこと。
     - 戻り値 : 非負整数値
 - `m(i...) == m(static_cast&amp;lt;M::index_type&amp;gt;(i)...)` : `true`となること。
-- `m.required_span_size()` : `M​::​index_type`型を返すこと。
+- `m.required_span_size()` : `M::index_type`型を返すこと。
     - 戻り値 : `m.extents()`の多次元インデクス空間サイズが0のときは値`0`。そうでなければ、レイアウトマッピングによりアクセスする可能性のあるメモリブロック範囲の最大値に`1`を足した値。
 - `m.is_unique()` : `bool`型を返すこと。
     - 戻り値 : Unique特性を満たすときに限り`true`。
@@ -75,7 +75,7 @@ LayoutMappingを満たす型`M`は
     - 戻り値 : Exhaustive特性を満たすときに限り`true`。
 - `m.is_strided()` : `bool`型を返すこと。
     - 戻り値 : Strided特性を満たすときに限り`true`。
-- `m.stride(r)` : `M​::​index_type`型を返すこと。
+- `m.stride(r)` : `M::index_type`型を返すこと。
     - 前提条件 : `m.is_strided() == true`
     - 戻り値 : `r`番目次元のストライド幅
 - `M::is_always_unique()` : `bool`型の定数式となること。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>AccsessorPolicy -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/AccessorPolicy.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/AccessorPolicy.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;named requirement&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;AccsessorPolicy&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;AccsessorPolicyは、多次元配列ビュー&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;を介した要素アクセス動作を定義するクラスが満たすべき要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;AccsessorPolicyを満たす型&lt;code&gt;A&lt;/code&gt;は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;は&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/copyable.html&#34;&gt;copyable&lt;/a&gt;&lt;/code&gt;のモデルであり、かつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_constructible.html&#34;&gt;is_nothrow_move_constructible_v&lt;/a&gt;&amp;lt;A&amp;gt;&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;であり、かつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_move_assignable.html&#34;&gt;is_nothrow_move_assignable_v&lt;/a&gt;&amp;lt;A&amp;gt;&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;であり、かつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_swappable.html&#34;&gt;is_nothrow_swappable_v&lt;/a&gt;&amp;lt;A&amp;gt;&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;であること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型&lt;code&gt;A&lt;/code&gt;は下記のメンバ型を持つこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A::element_type&lt;/code&gt; : 要素型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A::data_handle_type&lt;/code&gt; : メモリブロックのポインタ型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A::reference&lt;/code&gt; : 要素への参照型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A::offset_policy&lt;/code&gt; : &lt;code&gt;offset&lt;/code&gt;適用後のアクセサポリシー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;説明用の変数&lt;code&gt;a&lt;/code&gt;を&lt;code&gt;(const) A&lt;/code&gt;の値、&lt;code&gt;p&lt;/code&gt;を&lt;code&gt;(const) A::data_handle_type&lt;/code&gt;の値、&lt;code&gt;i&lt;/code&gt;を&lt;code&gt;size_t&lt;/code&gt;の値としたとき、下記の式が妥当であること&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.access(p, i)&lt;/code&gt; : &lt;code&gt;A::reference&lt;/code&gt;を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.offset(p, i)&lt;/code&gt; : &lt;code&gt;A::offset_policy::data_handle_type&lt;/code&gt;を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;AccessorPolicy&lt;/code&gt;に該当する型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2604r0.html&#34; target=&#34;_blank&#34;&gt;P2604R0 &lt;code&gt;mdspan&lt;/code&gt;: rename &lt;code&gt;pointer&lt;/code&gt; and &lt;code&gt;contiguous&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMapping -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
new file mode 100644
index 000000000..e3fd173e4
--- /dev/null
+++ b/reference/mdspan/LayoutMapping.md
@@ -0,0 +1,109 @@
+# LayoutMapping
+* named requirement[meta id-type]
+* cpp23[meta cpp]
+
+
+## 概要
+LayoutMappingは、多次元配列ビュー[`mdspan`](mdspan.md)において多次元インデクスから参照先メモリブロック位置への対応関係（レイアウトマッピング）を定めるクラスが満たすべき要件である。
+
+LayoutMappingを満たすユーザ定義型`layout_custom::mapping&amp;lt;E&amp;gt;`は、常に[レイアウトマッピングポリシー](LayoutMappingPolicy.md)を満たす`layout_custom`の公開メンバ`mapping`クラステンプレートとして定義される。
+
+```cpp
+// レイアウトマッピングポリシーs
+struct layout_custom {
+  // レイアウトマッピング
+  template&amp;lt;class Extents&amp;gt;
+  class mapping {
+  public:
+    using layout_type = layout_custom;
+    using extent_type = Extents;
+    // ...
+  };
+};
+```
+* Extents[link extents.md]
+
+### レイアウトマッピング特性
+
+レイアウトマッピングによる多次元インデクスからメモリブロック位置への変換は、次の3種類の特性によって記述される。
+
+- Unique特性 : 異なる多次元インデクス値であれば、互いに異なる要素位置へと変換される。
+- Exhaustive特性 : 取りうる全ての多次元インデクス値に対応する要素位置を考えたとき、アクセスされうる要素位置に隙間が生じない。
+- Strided特性 : 要素位置は多次元インデクス値と各次元ストライド幅のみを用いて計算できる。
+
+例えば、多次元配列ビュー[`mdspan`](mdspan.md)のデフォルトレイアウトポリシー[`layout_right`](layout_right.md)は3つの特性を全て満たす。
+要素数3×2の2次元配列ビュー`mat3x2`における有効な多次元インデクス値`i,j`は`0,0`, `0,1`, `1,0`, `1,1`, `2,0`, `2,1`の6パターンとなり、それぞれ参照先メモリブロック`a`の要素位置`a[0]`, `a[1]`, `a[2]`, `a[3]`, `a[4]`, `a[5]`に対応する。
+
+```cpp
+int a[6] = {0, 1, 2, 3, 4, 5};
+
+using Extents = std::extents&amp;lt;size_t, 3, 2&amp;gt;;
+std::mdspan&amp;lt;int, Extents&amp;gt; mat3x2{a};
+```
+
+- Unique特性 : 異なる多次元インデクス値は、異なる要素位置に対応する。参照先が重複することはない。
+- Exhaustive特性 : 全ての多次元インデクス値に対応する要素位置は連続している。
+- Strided特性 : 多次元インデクス値`i,j`に対応する要素位置は、ストライド幅`2,1`を用いて`(i*2+j)*1`と計算できる。
+
+
+## 要件
+LayoutMappingを満たす型`M`は
+
+- `M`は[`copyable`](/reference/concepts/copyable.md)および[`equality_comparable`](/reference/concepts/equality_comparable.md)のモデルであり、かつ
+- [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;M&amp;gt;`は`true`であり、かつ
+- [`is_nothrow_move_assignable_v`](/reference/type_traits/is_nothrow_move_assignable.md)`&amp;lt;M&amp;gt;`は`true`であり、かつ
+- [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;M&amp;gt;`は`true`であること
+
+型`M`は下記のメンバ型を持つこと
+
+- `M::extents_type` : [`extents`](extents.md)の特殊化
+- `M::index_type` : [`extents_type::index_type`](extents.md)
+- `M::rank_type` : [`extents_type::rank_type`](extents.md)
+- `M::layout_type` : 自クラスを提供する[レイアウトマッピングポリシー型](LayoutMappingPolicy.md)
+
+説明用の変数`m`を`(const) M`の値、パック`i`を[`M::extents_type::rank()`](extents/rank.md)個からなる整数値、変数`r`を多次元の次元番号としたとき、下記の式が妥当であること
+
+- `m.extents()` : `const M​::​extents_type&amp;amp;`型を返すこと。
+- `m(i...)` : `M​::​index_type`型を返すこと。
+    - 戻り値 : 非負整数値
+- `m(i...) == m(static_cast&amp;lt;M::index_type&amp;gt;(i)...)` : `true`となること。
+- `m.required_span_size()` : `M​::​index_type`型を返すこと。
+    - 戻り値 : `m.extents()`の多次元インデクス空間サイズが0のときは値`0`。そうでなければ、レイアウトマッピングによりアクセスする可能性のあるメモリブロック範囲の最大値に`1`を足した値。
+- `m.is_unique()` : `bool`型を返すこと。
+    - 戻り値 : Unique特性を満たすときに限り`true`。
+- `m.is_exhaustive()` : `bool`型を返すこと。
+    - 戻り値 : Exhaustive特性を満たすときに限り`true`。
+- `m.is_strided()` : `bool`型を返すこと。
+    - 戻り値 : Strided特性を満たすときに限り`true`。
+- `m.stride(r)` : `M​::​index_type`型を返すこと。
+    - 前提条件 : `m.is_strided() == true`
+    - 戻り値 : `r`番目次元のストライド幅
+- `M::is_always_unique()` : `bool`型の定数式となること。
+    - 戻り値 : 型`M`のあらゆるオブジェクトにおいてUnique特性を満たすときに`true`。
+- `M::is_always_exhaustive()` : `bool`型の定数となること。
+    - 戻り値 : 型`M`のあらゆるオブジェクトにおいてExhaustive特性を満たすときに`true`。
+- `M::is_always_strided()` : `bool`型の定数となること。
+    - 戻り値 : 型`M`のあらゆるオブジェクトにおいてStrided特性を満たすときに`true`。
+
+
+## `LayoutMapping`に該当する型
+
+- `layout_left::mapping&amp;lt;E&amp;gt;`
+- `layout_right::mapping&amp;lt;E&amp;gt;`
+- `layout_stride::mapping&amp;lt;E&amp;gt;`
+
+
+## バージョン
+### 言語
+- C++23
+
+
+## 関連項目
+- [`mdspan`](mdspan.md)
+- [`extents`](extents.md)
+- [LayoutMappingPolicy](LayoutMappingPolicy.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [P2604R0 `mdspan`: rename `pointer` and `contiguous`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2604r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMappingPolicy -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMappingPolicy.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/LayoutMappingPolicy.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMappingPolicy.md b/reference/mdspan/LayoutMappingPolicy.md
new file mode 100644
index 000000000..5a6be231a
--- /dev/null
+++ b/reference/mdspan/LayoutMappingPolicy.md
@@ -0,0 +1,55 @@
+# LayoutMappingPolicy
+* named requirement[meta id-type]
+* cpp23[meta cpp]
+
+
+## 概要
+LayoutMappingPolicyは、多次元配列ビュー[`mdspan`](mdspan.md)において多次元インデクスから参照先メモリブロック位置へと変換する[レイアウトマッピング](LayoutMapping.md)を定めるクラスが満たすべき要件である。
+
+LayoutMappingPolicyを満たすユーザ定義`layout_custom`ポリシークラスは、下記の構造で定義される。
+
+```cpp
+// レイアウトマッピングポリシー
+struct layout_custom {
+  // レイアウトマッピング
+  template&amp;lt;class Extents&amp;gt;
+  class mapping {
+  public:
+    using layout_type = layout_custom;
+    using extent_type = Extents;
+    // ...
+  };
+};
+```
+* Extents[link extents.md]
+
+
+## 要件
+LayoutMappingPolicyを満たす型`MP`は
+
+- [`extents`](extents.md)の特殊化`E`に対して`MP::mapping&amp;lt;E&amp;gt;`が有効であり、かつ
+- その型`X`が[レイアウトマッピング要件](LayoutMapping.md)を満たし、かつ
+- メンバ型`X::layout_type`が型`MP`を表しており、かつ
+- メンバ型`X::extent_type`が型`E`を表すこと。
+
+
+## `LayoutMappingPolicy`に該当する型
+
+- [`layout_left`](layout_left.md)
+- [`layout_right`](layout_right.md)
+- [`layout_stride`](layout_stride.md)
+
+
+## バージョン
+### 言語
+- C++23
+
+
+## 関連項目
+- [`mdspan`](mdspan.md)
+- [`extents`](extents.md)
+- [LayoutMapping](LayoutMapping.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_accessor -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/default_accessor.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/default_accessor.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/default_accessor.md b/reference/mdspan/default_accessor.md
index ed76a8268..a14f5ef0d 100644
--- a/reference/mdspan/default_accessor.md
+++ b/reference/mdspan/default_accessor.md
@@ -18,27 +18,7 @@ namespace std {
 
 `default_accessor`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`semiregular`](/reference/concepts/semiregular.md)のモデルである。
 
-### アクセサポリシー要件
-`default_accessor`は、下記のアクセサポリシー要件を満たす。
-
-説明用の型`A`をアクセサポリシーとしたとき
-
-- `A`は[`copyable`](/reference/concepts/copyable.md)のモデルであり、かつ
-- [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;A&amp;gt;`は`true`であり、かつ
-- [`is_nothrow_move_assignable_v`](/reference/type_traits/is_nothrow_move_assignable.md)`&amp;lt;A&amp;gt;`は`true`であり、かつ
-- [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;A&amp;gt;`は`true`であること
-
-型`A`は下記のメンバ型を持つこと
-
-- `A::element_type` : 要素型
-- `A::data_handle_type` : メモリブロックのポインタ型
-- `A::reference` : 要素への参照型
-- `A::offset_policy` : `offset`適用後のアクセサポリシー
-
-説明用の変数`a`を`(const) A`の値、`p`を`(const) A::data_handle_type`の値、`i`を`size_t`の値としたとき、下記の式が妥当であること
-
-- `a.access(p, i)` : `A::eference`を返す
-- `a.offset(p, i)` : `A::offset_policy::data_handle_type`を返す
+`default_accessor`は[アクセサポリシー要件](AccessorPolicy.md)を満たす。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/layout_left.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left.md b/reference/mdspan/layout_left.md
index 2c01a5492..91c040cbc 100644
--- a/reference/mdspan/layout_left.md
+++ b/reference/mdspan/layout_left.md
@@ -16,9 +16,11 @@ namespace std {
 * mapping[link mapping.md.nolink]
 
 ## 概要
-`layout_left`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、FortranやMatlab多次元配列と互換性のある列優先(column major)レイアウトマッピングを表現するポリシークラスである。
+`layout_left`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、FortranやMatlab多次元配列と互換性のある列優先(column major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
 
-ポリシークラス名の由来は、多次元配列インデクスのうち最左次元が隣接配置（ストライド=1）されるところから来ている。
+`layout_left`は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
+
+ポリシークラス名の由来は、多次元インデクスのうち最左次元が隣接配置（ストライド=1）され、インデクス次元の左から右の順にストライドが増大するところから来ている。
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/layout_right.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right.md b/reference/mdspan/layout_right.md
index 67c72013b..9d514db34 100644
--- a/reference/mdspan/layout_right.md
+++ b/reference/mdspan/layout_right.md
@@ -16,9 +16,11 @@ namespace std {
 * mapping[link mapping.md.nolink]
 
 ## 概要
-`layout_right`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、C/C++多次元配列と互換性のある行優先(row major)レイアウトマッピングを表現するポリシークラスである。
+`layout_right`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、C/C++多次元配列と互換性のある行優先(row major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
 
-ポリシークラス名の由来は、多次元配列インデクスのうち最右次元が隣接配置（ストライド=1）されるところから来ている。
+`layout_right`は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
+
+ポリシークラス名の由来は、多次元インデクスのうち最右次元が隣接配置（ストライド=1）され、インデクス次元の右から左の順にストライドが増大するところから来ている。
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
index 1163ecf4d..875850089 100644
--- a/reference/mdspan/layout_stride.md
+++ b/reference/mdspan/layout_stride.md
@@ -16,7 +16,9 @@ namespace std {
 * mapping[link mapping.md.nolink]
 
 ## 概要
-`layout_stride`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定したレイアウトマッピングを表現するポリシークラスである。
+`layout_stride`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定した[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
+
+`layout_stride`は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/mdspan.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
index 2938e5749..3ab404ac7 100644
--- a/reference/mdspan/mdspan.md
+++ b/reference/mdspan/mdspan.md
@@ -14,6 +14,9 @@ namespace std {
   class mdspan;
 }
 ```
+* Extents[link extents.md]
+* LayoutPolicy[link LayoutMappingPolicy.md]
+* AccessorPolicy[link AccessorPolicy.md]
 * layout_right[link layout_right.md]
 * default_accessor[link default_accessor.md]
 
@@ -31,8 +34,8 @@ namespace std {
 ### 説明専用メンバ変数
 `mdspan`クラスは、下記の説明専用メンバ変数を保持する。
 
-- `acc_` : `accessor_type`型の要素アクセサ
-- `map_` : `mapping_type`型のレイアウトマッピング
+- `acc_` : `accessor_type`型の[要素アクセサ](AccessorPolicy.md)
+- `map_` : `mapping_type`型の[レイアウトマッピング](LayoutMapping.md)
 - `ptr_` : `data_handle_type`型のメモリブロックへのハンドル（ポインタ）
 
 
@@ -41,7 +44,7 @@ namespace std {
 - `Extents`は[`extents`](extents.md)の特殊化であり、かつ
 - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;ElementType, typename AccessorPolicy::element_type&amp;gt;`が`true`であること。
 
-`LayoutPolicy`はレイアウトマッピングポリシー要件を満たし、かつ`AccessorPolicy`はアクセサポリシー要件を満たすこと。
+`LayoutPolicy`は[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たし、かつ`AccessorPolicy`は[アクセサポリシー要件](AccessorPolicy.md)を満たすこと。
 
 
 ## メンバ関数
@@ -83,13 +86,13 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| `is_always_unique()`     | `mapping_type::is_always_unique()`     | C++23 |
-| `is_always_exhaustive()` | `mapping_type::is_always_exhaustive()` | C++23 |
-| `is_always_strided()`    | `mapping_type::is_always_strided()`    | C++23 |
-| `is_unique()`     | `map_.is_unique()`     | C++23 |
-| `is_exhaustive()` | `map_.is_exhaustive()` | C++23 |
-| `is_strided()`    | `map_.is_strided()`    | C++23 |
-| `stride(rank_type r)` | `map_.stride(r)`   | C++23 |
+| `is_always_unique()`     | [`mapping_type::is_always_unique()`](LayoutMapping.md)     | C++23 |
+| `is_always_exhaustive()` | [`mapping_type::is_always_exhaustive()`](LayoutMapping.md) | C++23 |
+| `is_always_strided()`    | [`mapping_type::is_always_strided()`](LayoutMapping.md)    | C++23 |
+| `is_unique()`         | [`map_.is_unique()`](LayoutMapping.md)     | C++23 |
+| `is_exhaustive()`     | [`map_.is_exhaustive()`](LayoutMapping.md) | C++23 |
+| `is_strided()`        | [`map_.is_strided()`](LayoutMapping.md)    | C++23 |
+| `stride(rank_type r)` | [`map_.stride(r)`](LayoutMapping.md)       | C++23 |
 
 
 ## メンバ型
@@ -97,15 +100,15 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `extents_type`  | 多次元配列サイズ型[`Extents`](extents.md) | C++23 |
-| `layout_type`   | レイアウトマッピングポリシー`LayoutPolicy` | C++23 |
-| `accessor_type` | アクセサポリシー`AccessorPolicy` | C++23 |
-| `mapping_type` | レイアウトマッピング`LayoutPolicy::mapping&amp;lt;Extents&amp;gt;` | C++23 |
+| `layout_type`   | [レイアウトマッピングポリシー型`LayoutPolicy`](LayoutMappingPolicy.md) | C++23 |
+| `accessor_type` | [アクセサポリシー型`AccessorPolicy`](AccessorPolicy.md) | C++23 |
+| `mapping_type` | [レイアウトマッピング型`LayoutPolicy::mapping&amp;lt;Extents&amp;gt;`](LayoutMapping.md) | C++23 |
 | `element_type` | 要素型`ElementType` | C++23 |
 | `value_type`   | 要素の値型[`remove_cv_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;ElementType&amp;gt;` | C++23 |
 | `size_type` | [`Extents::size_type`](extents.md) | C++23 |
 | `rank_type` | [`Extents::rank_type`](extents.md) | C++23 |
-| `pointer`   | `AccessorPolicy::pointer` | C++23 |
-| `reference` | `AccessorPolicy::reference` | C++23 |
+| `pointer`   | [`AccessorPolicy::pointer`](AccessorPolicy.md) | C++23 |
+| `reference` | [`AccessorPolicy::reference`](AccessorPolicy.md) | C++23 |
 
 
 ## 非メンバ（*Hidden friends*）関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:working_style.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index 07f729d4a..05f738d96 100644
--- a/working_style.md
+++ b/working_style.md
@@ -71,6 +71,7 @@ C++11以降対応については対応バージョンを明記します。バー
 | derived class                      | 派生クラス                   |
 | direct base class                  | 直接基底クラス               |
 | delegate                           | 委譲                         |
+| dynamic extent                     | (std::mdspanの) 動的要素数   |
 | effects                            | 効果                         |
 | emplace                            | 直接構築                     |
 | empty                              | 空                           |
@@ -94,6 +95,8 @@ C++11以降対応については対応バージョンを明記します。バー
 | move                               | (std::move 的な意味で)ムーブ |
 | move assignment                    | ムーブ代入                   |
 | move constructor                   | ムーブコンストラクタ         |
+| multidimensional index             | 多次元インデクス             |
+| multidimensional index space       | 多次元インデクス空間         |
 | mutable iterator                   | 可変イテレータ               |
 | non-virtual base class             | 非仮想基底クラス             |
 | note                               | 注                           |
@@ -117,6 +120,7 @@ C++11以降対応については対応バージョンを明記します。バー
 | rvalue reference                   | 右辺値参照                   |
 | sequence container(s)              | シーケンスコンテナ           |
 | signed                             | 符号付き                     |
+| static extent                      | (std::mdspanの) 静的要素数   |
 | stop request                       | 停止要求                     |
 | stop state                         | 停止状態                     |
 | Spurious Failure                   | 見かけ上の失敗&amp;lt;br/&amp;gt; [https://togetter.com/li/430770](https://togetter.com/li/430770) |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- スポンサー更新 #1228</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>d436315498e9a97e949f7edbba103fb451da3a9a:index.md</id>
      <updated>2024-01-14T00:45:21+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjp - C++日本語リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;最新C++バージョンのリファレンスを提供していきます。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;スポンサーシップ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプロジェクトは、持続的な活動のため、ユーザーの方々からのご支援をお待ちしております。上記Open Collectiveのプロジェクトでスポンサーシップの募集をしております。&lt;/p&gt;
&lt;p&gt;ご支援いただくユーザーの方々には、以下の特典があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本ページ (cpprefjpサイトのトップページ) に、金額順でロゴを表示させていただきます (金額が同じ場合は登録順)&lt;/li&gt;
&lt;li&gt;シルバースポンサー以上の方は、&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;cpprefjp/site&lt;/a&gt;リポジトリのissueとして、採用情報を投稿できます (一週間ほどで閉じます)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ご支援いただいた資金は、貢献度に応じてコントリビューターに分配させていただきます。&lt;/p&gt;
&lt;p&gt;また、スポンサーシップの入金方法として、Open Collectiveのほかに銀行振込も対応しております。&lt;/p&gt;
&lt;p&gt;銀行振込に関して、またはそれ以外でスポンサーシップの相談に関しては、以下のメールアドレスにお問い合わせください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メールアドレス : &lt;a href=&#34;mailto:cpprefjp_org@googlegroups.com&#34;&gt;cpprefjp_org@googlegroups.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;宛名 : cpprefjp管理者&lt;ul&gt;
&lt;li&gt;代表として、主に高橋晶 (Akira Takahashi) がご対応させていただきます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190112041213/http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スポンサー&lt;/h2&gt;
&lt;p&gt;cpprefjpプロジェクトは、以下の方々にスポンサーになっていただいております。&lt;/p&gt;
&lt;h3&gt;ゴールドスポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://shiguredo.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;shiguredo&#34; src=&#34;https://raw.githubusercontent.com/cpprefjp/image/master/sponsors/shiguredo/shiguredo.png&#34; width=&#34;560&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cocotone.jp&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;cocotone&#34; src=&#34;https://raw.githubusercontent.com/cpprefjp/image/master/sponsors/cocotone/cocotone.png&#34; width=&#34;560&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;シルバースポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.fixstars.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Fixstars&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/Fixstars/fixstars-logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://acerola-software.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Acerola Software&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/Acerola/as_logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://vaporoid.com/sys/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;vaporoid&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/vaporoid/cpprefjp-400x150.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cube-soft.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;CubeSoft&#34; src=&#34;https://raw.githubusercontent.com/cube-soft/cube.assets/master/home/banner/large.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://mkohana.github.io/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;M.Kohana&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/m_kohana/m_kohana.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.pegasys-inc.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;pegasys&#34; src=&#34;https://tmpgenc.pegasys-inc.com/images/pegasys_logo.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;ブロンズスポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://opencollective.com/odan&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;odan&#34; src=&#34;https://odan.dev/icon.jpeg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.unagiworks.net/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;unagi&#34; src=&#34;https://www.unagiworks.net/blog/wp-content/uploads/2019/01/logo.gif&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/nodchip&#34; target=&#34;_blank&#34;&gt;nodchip&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;イシハラユウヤ様&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/meg_nakagami&#34; target=&#34;_blank&#34;&gt;Megumi Nakagami様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/minachun/minachun&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;minachun / J.Minami&#34; src=&#34;https://raw.githubusercontent.com/minachun/minachun/main/banner.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/hashitaku&#34; target=&#34;_blank&#34;&gt;Hashitaku様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;img alt=&#34;yukika2e&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/yukika2e/yukika2e.png&#34; /&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;スポンサーシップについては、以下のページを参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;連絡先が不明なスポンサー様は、ロゴの表示が現在できておりません。Open Collectiveの問い合わせフォームから、表示するロゴ画像とリンク先URLについてご連絡いただきたいです。&lt;/p&gt;
&lt;h2&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;本サイトは、サイトの改善のためにGoogleアナリティクスを使用しています。本サイトをご利用中のブラウザは、Googleに特定の情報を自動的に送信します。本サイトは、この分析のためにCookieを使用します。利用者は、本サイトを利用することで、この目的においてCookieを使用することを許可したものとみなします。&lt;/p&gt;
&lt;p&gt;Googleによるデータ使用の詳細は、以下のURLで確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/ja/policies/privacy/partners/&#34; target=&#34;_blank&#34;&gt;https://www.google.com/intl/ja/policies/privacy/partners/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのアイコン・ロゴ画像は、&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 (CC BY-NC-ND 4.0)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;高解像度画像データ： &lt;a href=&#34;https://github.com/cpprefjp/image/tree/master/cpprefjp/icon&#34; target=&#34;_blank&#34;&gt;cpprefjp/image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left_first -- fold_* : 修正と追記</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_first.html"/>
      <id>54a9faf17d7055af5f9d5c81f1273c286de1020d:reference/algorithm/ranges_fold_left_first.md</id>
      <updated>2024-01-12T10:15:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left_first.md b/reference/algorithm/ranges_fold_left_first.md
index a7db71768..9bac033d2 100644
--- a/reference/algorithm/ranges_fold_left_first.md
+++ b/reference/algorithm/ranges_fold_left_first.md
@@ -44,6 +44,10 @@ namespace std::ranges {
     - `f(*first, *first)`のような呼び出しが可能であり（実際にこの様に呼ばれるわけではない）、その戻り値型のオブジェクトを`acc`とすると
     - `acc = f(std::move(acc), *first)`のような呼び出しも可能である必要がある
 
+## テンプレートパラメータ制約
+
+[`indirectly-binary-left-foldable`](ranges_fold_left.md)では、初期値の型`T`が戻り値型（積算値の型）`U`に変換可能であることが要求（[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;T, U&amp;gt;`）されており、この関数では初期値の型を指定できない（`range_value_t&amp;lt;R&amp;gt;`が使用される）ため戻り値型を大きく制御することが困難になる。
+
 ## 戻り値
 
 - (1) : 以下と等価
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_right -- fold_* : 修正と追記</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_right.html"/>
      <id>54a9faf17d7055af5f9d5c81f1273c286de1020d:reference/algorithm/ranges_fold_right.md</id>
      <updated>2024-01-12T10:15:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_right.md b/reference/algorithm/ranges_fold_right.md
index f4484bed2..b6bd5625e 100644
--- a/reference/algorithm/ranges_fold_right.md
+++ b/reference/algorithm/ranges_fold_right.md
@@ -76,7 +76,8 @@ class flipped {
   F f;
 
 public:
-  template&amp;lt;class T, class U&amp;gt; requires invocable&amp;lt;F&amp;amp;, U, T&amp;gt;
+  template&amp;lt;class T, class U&amp;gt;
+    requires invocable&amp;lt;F&amp;amp;, U, T&amp;gt;
   invoke_result_t&amp;lt;F&amp;amp;, U, T&amp;gt; operator()(T&amp;amp;&amp;amp;, U&amp;amp;&amp;amp;);
 };
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_right_last -- fold_* : 修正と追記</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_right_last.html"/>
      <id>54a9faf17d7055af5f9d5c81f1273c286de1020d:reference/algorithm/ranges_fold_right_last.md</id>
      <updated>2024-01-12T10:15:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_right_last.md b/reference/algorithm/ranges_fold_right_last.md
index e3a53f931..6491ba9fc 100644
--- a/reference/algorithm/ranges_fold_right_last.md
+++ b/reference/algorithm/ranges_fold_right_last.md
@@ -44,6 +44,12 @@ namespace std::ranges {
     - `f(*first, *first)`のような呼び出しが可能であり（実際にこの様に呼ばれるわけではない）、その戻り値型のオブジェクトを`acc`とすると
     - `acc = f(*first, std::move(acc))`のような呼び出しも可能である必要がある
 
+## テンプレートパラメータ制約
+
+`indirectly-binary-right-foldable`は`F`の引数順が逆になることを除いて[`indirectly-binary-left-foldable`](ranges_fold_left.md)と同様の制約となる。
+
+`indirectly-binary-left-foldable`では、初期値の型`T`が戻り値型（積算値の型）`U`に変換可能であることが要求（[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;T, U&amp;gt;`）されており、この関数では初期値の型を指定できない（`range_value_t&amp;lt;R&amp;gt;`が使用される）ため戻り値型を大きく制御することが困難になる（例えば、[`fold_right`](./ranges_fold_right.md)の例にある入力範囲を反転させる例の様なことは素直にはできない）。
+
 ## 戻り値
 
 (1)(2)ともに、以下と等価
@@ -208,7 +214,7 @@ constexpr auto fold_right_last(I first, S last, F f) {
 - [`ranges::fold_right`](ranges_fold_right.md)
     - 範囲の右からの`fold`
 - [`ranges::fold_left_first`](ranges_fold_left_first.md)
-    - 範囲の最後の要素を初期値として`fold_right`
+    - 範囲の最初の要素を初期値として`fold_left`
 - [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md.nolink)
     - `fold_left`の結果と共に、計算した終端イテレータも返す
 - [`ranges::fold_left_first_with_iter`](ranges_fold_left_first_with_iter.md.nolink)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left.html"/>
      <id>eff2b0b7ca783edc86b75e4fd83875ae956d7391:reference/algorithm/ranges_fold_left.md</id>
      <updated>2024-01-11T18:44:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left.md b/reference/algorithm/ranges_fold_left.md
index 3fa232e78..9a540b2b8 100644
--- a/reference/algorithm/ranges_fold_left.md
+++ b/reference/algorithm/ranges_fold_left.md
@@ -262,7 +262,7 @@ constexpr auto fold_left(I first, S last, T init, F f) {
     - 範囲の右からの`fold`
 - [`ranges::fold_left_first`](ranges_fold_left_first.md)
     - 範囲の最初の要素を初期値として`fold_left`
-- [`ranges::fold_right_last`](ranges_fold_right_last.md.nolink)
+- [`ranges::fold_right_last`](ranges_fold_right_last.md)
     - 範囲の最後の要素を初期値として`fold_right`
 - [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md.nolink)
     - `fold_left`の結果と共に、計算した終端イテレータも返す
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_right -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_right.html"/>
      <id>eff2b0b7ca783edc86b75e4fd83875ae956d7391:reference/algorithm/ranges_fold_right.md</id>
      <updated>2024-01-11T18:44:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_right.md b/reference/algorithm/ranges_fold_right.md
index 4df8aaa53..f4484bed2 100644
--- a/reference/algorithm/ranges_fold_right.md
+++ b/reference/algorithm/ranges_fold_right.md
@@ -297,7 +297,7 @@ constexpr auto fold_right(I first, S last, T init, F f) {
     - 範囲の左からの`fold`
 - [`ranges::fold_left_first`](ranges_fold_left_first.md)
     - 範囲の最初の要素を初期値として`fold_left`
-- [`ranges::fold_right_last`](ranges_fold_right_last.md.nolink)
+- [`ranges::fold_right_last`](ranges_fold_right_last.md)
     - 範囲の最後の要素を初期値として`fold_right`
 - [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md.nolink)
     - `fold_left`の結果と共に、計算した終端イテレータも返す
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
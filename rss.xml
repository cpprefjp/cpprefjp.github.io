<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-12-11T14:40:02.331084</updated>
  <id>582f44e2-1a64-49c4-96ff-1dba07cb6a64</id>

  
    <entry>
      <title>委譲コンストラクタ -- 委譲コンストラクタの実行順序を明記</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html"/>
      <id>ea41b5db13806290e0f2e2ac3e229dc81607def8:lang/cpp11/delegating_constructors.md</id>
      <updated>2023-12-11T02:29:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/delegating_constructors.md b/lang/cpp11/delegating_constructors.md
index d43818f11..89285941f 100644
--- a/lang/cpp11/delegating_constructors.md
+++ b/lang/cpp11/delegating_constructors.md
@@ -16,6 +16,7 @@ public:
 ```
 
 (2)のコンストラクタでの、`X(42)`の部分が委譲コンストラクタに当たる。(2)のコンストラクタから(1)のコンストラクタを呼び出し、初期化処理を(1)のコンストラクタに集約している。
+(1)のコンストラクタから返ったのちに、(2)のコンストラクタの本体が実行される。
 
 この機能を使用することにより、複数のコンストラクタを作成・メンテナンスするコストが減り、コードの肥大化を抑えられる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文 -- fix: P2718R0 の作用にC++11の範囲forの解説から言及する (#1111)</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/range_based_for.html"/>
      <id>2da58ef5105c2ba71d84713a5ae5b641187f9e5d:lang/cpp11/range_based_for.md</id>
      <updated>2023-12-10T15:15:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/range_based_for.md b/lang/cpp11/range_based_for.md
index a5017a772..741fa2538 100644
--- a/lang/cpp11/range_based_for.md
+++ b/lang/cpp11/range_based_for.md
@@ -353,6 +353,8 @@ int main()
 }
 ```
 
+また、C++23からは`for-range-initializer`の寿命が条件を満たせば延長されるようになったので([C++23 範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定](/lang/cpp23/lifetime_extension_in_range_based_for_loop.md))、この問題を踏みにくくなっている。
+
 ## 関連項目
 
 - [C++17 範囲forの制限緩和 — `begin` と `end` の型が異なることを許可](/lang/cpp17/generalizing_the_range-based_for_loop.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left -- リンク修正など</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left.html"/>
      <id>5b1d104a57b7eed1e4f35415ff4bd41cce23e2ed:reference/algorithm/ranges_fold_left.md</id>
      <updated>2023-12-08T13:21:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left.md b/reference/algorithm/ranges_fold_left.md
index 3a08326c5..38273bdfa 100644
--- a/reference/algorithm/ranges_fold_left.md
+++ b/reference/algorithm/ranges_fold_left.md
@@ -218,7 +218,7 @@ int main() {
 ```
 * fold_left[color ff0000]
 * println[link /reference/print/println.md]
-* fold_right[link /referencealgorithm/ranges_fold_right.md]
+* fold_right[link ranges_fold_right.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_right -- リンク修正など</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_right.html"/>
      <id>5b1d104a57b7eed1e4f35415ff4bd41cce23e2ed:reference/algorithm/ranges_fold_right.md</id>
      <updated>2023-12-08T13:21:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_right.md b/reference/algorithm/ranges_fold_right.md
index 73cd849f4..95b45b828 100644
--- a/reference/algorithm/ranges_fold_right.md
+++ b/reference/algorithm/ranges_fold_right.md
@@ -247,7 +247,7 @@ int main() {
 
   std::vector&amp;lt;int&amp;gt; res = fold_right(rng, init, op);
 
-  std::println(&amp;#34;{:s}&amp;#34;, res);
+  std::println(&amp;#34;{}&amp;#34;, res);
 }
 ```
 * fold_right[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left -- 文章順序や処理結果例の修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left.html"/>
      <id>3888639209a892adebc7232795ed4a1c68645fda:reference/algorithm/ranges_fold_left.md</id>
      <updated>2023-12-08T13:19:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left.md b/reference/algorithm/ranges_fold_left.md
index 8a6ff6466..3a08326c5 100644
--- a/reference/algorithm/ranges_fold_left.md
+++ b/reference/algorithm/ranges_fold_left.md
@@ -24,13 +24,13 @@ namespace std::ranges {
 
 初期値から始めて、入力範囲の各要素に対して指定された二項演算を適用していきその結果を返す。二項演算が適用される各ステップでは、前のステップまでの積算値が一緒に渡される。
 
+この関数は、初期値を入力範囲の先頭に付加した範囲に対してその先頭の隣り合う2要素に対して与えられた二項演算を適用し、その結果によって処理した要素を置換し、処理後の範囲に対して同様の処理を残りの要素が無くなるまで繰り返すような処理を行う。
+
 これは、関数型言語におけるリスト操作の一般形である高階関数`foldl`に対応し、[`std::accumulate`](/reference/numeric/accumulate.md)を改善したものでもある。
 
 - (1) : 入力としてイテレータ範囲をとるオーバーロード
 - (2) : 入力として範囲を直接とるオーバーロード
 
-この関数は、初期値を入力範囲の先頭に付加した範囲に対してその先頭の隣り合う2要素に対して与えられた二項演算を適用し、その結果によって処理した要素を置換し、処理後の範囲に対して同様の処理を残りの要素が無くなるまで繰り返すような処理を行う。
-
 入力範囲を`{1, 2, 3, 4, 5}`、初期値を`0`、二項演算を`+`（[`std::plus&amp;lt;&amp;gt;`](/reference/functional/plus.md)）とした時の`fold_left`の処理の様子
 
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_right -- 文章順序や処理結果例の修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_right.html"/>
      <id>3888639209a892adebc7232795ed4a1c68645fda:reference/algorithm/ranges_fold_right.md</id>
      <updated>2023-12-08T13:19:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_right.md b/reference/algorithm/ranges_fold_right.md
index 9d68e571f..73cd849f4 100644
--- a/reference/algorithm/ranges_fold_right.md
+++ b/reference/algorithm/ranges_fold_right.md
@@ -24,13 +24,13 @@ namespace std::ranges {
 
 初期値から始めて、入力範囲の各要素に対して指定された二項演算を適用していきその結果を返す。二項演算が適用される各ステップでは、前のステップまでの積算値が一緒に渡される。
 
+この関数は、初期値を入力範囲の末尾に付加した範囲に対してその末尾の隣り合う2要素に対して与えられた二項演算を適用し、その結果によって処理した要素を置換し、処理後の範囲に対して同様の処理を残りの要素が無くなるまで繰り返すような処理を行う。
+
 これは、関数型言語におけるリスト操作の一般形である高階関数`foldr`に対応し、[`std::accumulate`](/reference/numeric/accumulate.md)を改善したものでもある。
 
 - (1) : 入力としてイテレータ範囲をとるオーバーロード
 - (2) : 入力として範囲を直接とるオーバーロード
 
-この関数は、初期値を入力範囲の末尾に付加した範囲に対してその末尾の隣り合う2要素に対して与えられた二項演算を適用し、その結果によって処理した要素を置換し、処理後の範囲に対して同様の処理を残りの要素が無くなるまで繰り返すような処理を行う。
-
 入力範囲を`{1, 2, 3, 4, 5}`、初期値を`0`、二項演算を`+`（[`std::plus&amp;lt;&amp;gt;`](/reference/functional/plus.md)）とした時の`fold_right()`の処理の様子
 
 ```
@@ -256,7 +256,7 @@ int main() {
 
 ### 出力
 ```
-[10 9 8 7 6 5 4 3 2 1]
+[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
 ```
 
 ## 実装例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_left -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_left.html"/>
      <id>487904288cf18b707c0adeabc1a3ec0922557b6f:reference/algorithm/ranges_fold_left.md</id>
      <updated>2023-12-08T13:14:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_left.md b/reference/algorithm/ranges_fold_left.md
index 52967d509..8a6ff6466 100644
--- a/reference/algorithm/ranges_fold_left.md
+++ b/reference/algorithm/ranges_fold_left.md
@@ -218,7 +218,7 @@ int main() {
 ```
 * fold_left[color ff0000]
 * println[link /reference/print/println.md]
-* fold_right[link /referencealgorithm/ranges_fold_right.md.nolink]
+* fold_right[link /referencealgorithm/ranges_fold_right.md]
 
 ### 出力
 ```
@@ -261,15 +261,15 @@ constexpr auto fold_left(I first, S last, T init, F f) {
 
 ## 関連項目
 
-- [`ranges::fold_right`](algorithm/ranges_fold_right.md.nolink)
+- [`ranges::fold_right`](ranges_fold_right.md)
     - 範囲の右からの`fold`
-- [`ranges::fold_left_first`](algorithm/ranges_fold_left_first.md.nolink)
+- [`ranges::fold_left_first`](ranges_fold_left_first.md.nolink)
     - 範囲の最初の要素を初期値として`fold_left`
-- [`ranges::fold_right_last`](algorithm/ranges_fold_right_last.md.nolink)
+- [`ranges::fold_right_last`](ranges_fold_right_last.md.nolink)
     - 範囲の最後の要素を初期値として`fold_right`
-- [`ranges::fold_left_with_iter`](algorithm/ranges_fold_left_with_iter.md.nolink)
+- [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md.nolink)
     - `fold_left`の結果と共に、計算した終端イテレータも返す
-- [`ranges::fold_left_first_with_iter`](algorithm/ranges_fold_left_first_with_iter.md.nolink)
+- [`ranges::fold_left_first_with_iter`](ranges_fold_left_first_with_iter.md.nolink)
     - `fold_left_first`の結果と共に、計算した終端イテレータも返す
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_right -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_right.html"/>
      <id>487904288cf18b707c0adeabc1a3ec0922557b6f:reference/algorithm/ranges_fold_right.md</id>
      <updated>2023-12-08T13:14:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_right.md b/reference/algorithm/ranges_fold_right.md
index f928e9d23..9d68e571f 100644
--- a/reference/algorithm/ranges_fold_right.md
+++ b/reference/algorithm/ranges_fold_right.md
@@ -212,9 +212,9 @@ int main() {
   std::println(&amp;#34;{:s}&amp;#34;, resr);
 }
 ```
-* fold_left[color ff0000]
+* fold_right[color ff0000]
 * println[link /reference/print/println.md]
-* fold_right[link /referencealgorithm/ranges_fold_right.md.nolink]
+* fold_left[link /reference/algorithm/ranges_fold_left.md]
 
 ### 出力
 ```
@@ -250,9 +250,9 @@ int main() {
   std::println(&amp;#34;{:s}&amp;#34;, res);
 }
 ```
-* fold_left[color ff0000]
+* fold_right[color ff0000]
+* iota[link /reference/ranges/iota_view.md]
 * println[link /reference/print/println.md]
-* fold_right[link /referencealgorithm/ranges_fold_right.md.nolink]
 
 ### 出力
 ```
@@ -293,15 +293,15 @@ constexpr auto fold_right(I first, S last, T init, F f) {
 
 ## 関連項目
 
-- [`ranges::fold_left`](algorithm/ranges_fold_left.md)
+- [`ranges::fold_left`](ranges_fold_left.md)
     - 範囲の左からの`fold`
-- [`ranges::fold_left_first`](algorithm/ranges_fold_left_first.md.nolink)
+- [`ranges::fold_left_first`](ranges_fold_left_first.md.nolink)
     - 範囲の最初の要素を初期値として`fold_left`
-- [`ranges::fold_right_last`](algorithm/ranges_fold_right_last.md.nolink)
+- [`ranges::fold_right_last`](ranges_fold_right_last.md.nolink)
     - 範囲の最後の要素を初期値として`fold_right`
-- [`ranges::fold_left_with_iter`](algorithm/ranges_fold_left_with_iter.md.nolink)
+- [`ranges::fold_left_with_iter`](ranges_fold_left_with_iter.md.nolink)
     - `fold_left`の結果と共に、計算した終端イテレータも返す
-- [`ranges::fold_left_first_with_iter`](algorithm/ranges_fold_left_first_with_iter.md.nolink)
+- [`ranges::fold_left_first_with_iter`](ranges_fold_left_first_with_iter.md.nolink)
     - `fold_left_first`の結果と共に、計算した終端イテレータも返す
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-23T07:12:16.995501</updated>
  <id>f81adc4f-9406-4f54-9c2a-cead9150d517</id>

  
    <entry>
      <title>format -- formatter : parseを実装する例を記載</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>322f877cba64aafc0fe6e828f93455ddfaa8ecb8:reference/format/format.md</id>
      <updated>2023-01-23T16:08:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 2a7a42ba9..9f8b0498e 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -277,7 +277,7 @@ _`basic_format_string`_ のコンストラクタは[即時関数](/lang/cpp20/im
 * 書式文字列は定数式であり、[`string_view`](/reference/string_view/basic_string_view.md)(ワイド文字列版は[`wstring_view`](/reference/string_view/basic_string_view.md))に暗黙変換できること。
 * 書式文字列にエラーがないこと。例えば、
     * 閉じていないカッコなどの構文エラーがないこと。
-    * 実際に渡している引数の型が書式文字列中の置換フィールドが要求する型に合うこと。
+    * 実際に渡している引数の型が、書式文字列中の置換フィールドに要求される型と合うこと。
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- formatter : parseを実装する例を記載</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>322f877cba64aafc0fe6e828f93455ddfaa8ecb8:reference/format/formatter.md</id>
      <updated>2023-01-23T16:08:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 329f90fc8..f815402b9 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -131,6 +131,7 @@ namespace std {
 
 
 ## 例
+### オリジナル書式なし、型変換のみの場合
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;format&amp;gt;
@@ -151,12 +152,73 @@ int main()
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, red) &amp;lt;&amp;lt; std::endl;
 }
 ```
+* std::format_context[link basic_format_context.md]
 
-### 出力
+#### 出力
 ```
 red
 ```
 
+### オリジナル書式を定義する例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+enum color { red, green, blue };
+
+const char* color_names[] = { &amp;#34;red&amp;#34;, &amp;#34;green&amp;#34;, &amp;#34;blue&amp;#34; };
+const char* jp_color_names[] = { &amp;#34;赤&amp;#34;, &amp;#34;緑&amp;#34;, &amp;#34;青&amp;#34; };
+
+template&amp;lt;&amp;gt;
+struct std::formatter&amp;lt;color&amp;gt; {
+  bool is_jp = false;
+
+  // コンパイル時の書式文字列の解析があるため、
+  // constexprにする必要がある。
+  // この関数に渡されるパラメータは、{:%j}の%以降。
+  // 解析がおわった場所を指すイテレータを返す。
+  constexpr auto parse(std::format_parse_context&amp;amp; ctx) {
+    auto it = ctx.begin();
+    if (*it == &amp;#39;%&amp;#39;) {
+      ++it;
+      if (*it == &amp;#39;j&amp;#39;) {
+        is_jp = true;
+      }
+      else if (*it == &amp;#39;e&amp;#39;) {
+        is_jp = false;
+      }
+      ++it;
+    }
+    return it;
+  }
+
+  // format()関数は書式の情報をもたない。
+  // parse()関数で解析した書式をメンバ変数で保持しておいて、
+  // それをもとに書式化する
+  auto format(color c, std::format_context&amp;amp; ctx) const {
+    return std::format_to(ctx.out(), &amp;#34;{}&amp;#34;,
+      is_jp ? jp_color_names[c] : color_names[c]
+    );
+  }
+};
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%j} {:%e}&amp;#34;, red, blue) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::format_parse_context[link basic_format_parse_context.md]
+* ctx.begin()[link basic_format_parse_context/begin.md.nolink]
+* std::format_context[link basic_format_context.md]
+* ctx.out()[link basic_format_context/out.md]
+* std::format_to[link format_to.md]
+
+
+#### 出力
+```
+赤 blue
+```
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- foramt : デバッグ出力例を修正 デバッグ出力は、入力文字列と等価な文字列リテラルを生成可能な文字列を出力するので \nは改行文字1文字としてエスケープシーケンスに置換される（はず）（未確認）</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>3fd8e81e2945ef1acf4bb9b0cd348214e4ffff61:reference/format/format.md</id>
      <updated>2023-01-23T15:33:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 09665bed3..2a7a42ba9 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -97,7 +97,7 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 | type       | 意味         |効果                                                                             | 対応バージョン |
 |:-----------|:-------------|--------------------------------------------------------------------------------------|-------|
 | s (省略可) | 文字列       | 文字列をそのまま出力                                                                      | C++20 |
-| ?          | デバッグ出力 | 文字・文字列を引用符で囲み、エスケープシーケンスをエスケープして出力 (例:`&amp;#34;\n&amp;#34;`は`&amp;#34;\&amp;#34;\\n\&amp;#34;&amp;#34;`となる) | C++23 |
+| ?          | デバッグ出力 | 文字・文字列を引用符で囲み、エスケープシーケンスをエスケープして出力 (例:`&amp;#34;\n&amp;#34;`は`&amp;#34;\&amp;#34;\n\&amp;#34;&amp;#34;`となる) | C++23 |
 
 #### 文字型 / `bool`型 / 整数型の場合
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- format : 表の修正</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>549b24e254087fe066ec04c189647a895df995f0:reference/format/format.md</id>
      <updated>2023-01-23T15:30:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index e0b6d8095..09665bed3 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -94,9 +94,9 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 #### 文字列型の場合
 
-| type       | 意味         | 対応バージョン |
-|:-----------|:-------------|----------------|
-| s (省略可) | 文字列       | C++20 |
+| type       | 意味         |効果                                                                             | 対応バージョン |
+|:-----------|:-------------|--------------------------------------------------------------------------------------|-------|
+| s (省略可) | 文字列       | 文字列をそのまま出力                                                                      | C++20 |
 | ?          | デバッグ出力 | 文字・文字列を引用符で囲み、エスケープシーケンスをエスケープして出力 (例:`&amp;#34;\n&amp;#34;`は`&amp;#34;\&amp;#34;\\n\&amp;#34;&amp;#34;`となる) | C++23 |
 
 #### 文字型 / `bool`型 / 整数型の場合
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>version -- &lt;version&gt; : 説明を修正</title>
      <link href="https://cpprefjp.github.io/reference/version.html"/>
      <id>14f1a2ea622be0674ca9d977cb02d08d951ee03d:reference/version.md</id>
      <updated>2023-01-23T15:27:47+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;version&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;ヘッダでは、実装依存でのC++標準ライブラリのバージョン情報を提供する。機能テストマクロ以外のバージョン情報以外に何が定義されるかは実装ごとに決められる。&lt;/p&gt;
&lt;p&gt;本ヘッダはフリースタンディング環境でも提供される。&lt;/p&gt;
&lt;h2&gt;機能テストマクロ&lt;/h2&gt;
&lt;p&gt;本ヘッダをインクルードすることにより、標準で提供される全てのライブラリ機能テストマクロを利用することができる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/feature_test_macros.html&#34;&gt;C++14 機能テストマクロ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/feature_test_macros.html&#34;&gt;C++17 機能テストマクロ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/feature_test_macros.html&#34;&gt;C++20 機能テストマクロ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0754r2.pdf&#34; target=&#34;_blank&#34;&gt;P0754R2 &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_format_context -- basic_format_context : out, advance_to, localeを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_context.html"/>
      <id>410c5724eb943491f7efda14612ede8075ef839d:reference/format/basic_format_context.md</id>
      <updated>2023-01-23T14:35:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_context.md b/reference/format/basic_format_context.md
index 00c619c43..17cf7666a 100644
--- a/reference/format/basic_format_context.md
+++ b/reference/format/basic_format_context.md
@@ -19,28 +19,28 @@ namespace std {
 ## 概要
 実際に渡されたフォーマット引数を含む、フォーマット実行中の状態を保持するクラス。
 
-* (1): テンプレートの定義
-* (2): マルチバイト文字列版の特殊化 (出力イテレータの型は未規定)
-* (3): ワイド文字列版の特殊化 (出力イテレータの型は未規定)
+- (1): テンプレートの定義
+- (2): マルチバイト文字列版の別名 (出力イテレータの型は未規定)
+- (3): ワイド文字列版の別名 (出力イテレータの型は未規定)
 
 ## テンプレートパラメータ制約
+- `Out`は`OutputIterator&amp;lt;const charT&amp;amp;&amp;gt;`であること
 
-`Out`は`OutputIterator&amp;lt;const charT&amp;amp;&amp;gt;`であること。
 
 ## メンバ関数
 
-| 名前                                 | 説明                                             | 対応バージョン |
-|--------------------------------------|--------------------------------------------------|----------------|
-| [`arg`](basic_format_context/arg.md) | フォーマット引数を得る                           | C++20          |
-| `out`                                | 出力イテレータを得る                           | C++20          |
-| `advance_to`                         | 出力イテレータを指定したイテレータに設定する | C++20          |
-| `locale`                             | ロケールを得る                                | C++20          |
+| 名前                                 | 説明                                         | 対応バージョン |
+|--------------------------------------|----------------------------------------------|----------------|
+| [`arg`](basic_format_context/arg.md) | フォーマット引数を取得する                   | C++20          |
+| [`out`](basic_format_context/out.md) | 出力イテレータを取得する                     | C++20          |
+| [`advance_to`](basic_format_context/advance_to.md) | 出力イテレータを指定したイテレータに設定する | C++20          |
+| [`locale`](basic_format_context/locale.md) | ロケールを取得する                     | C++20          |
 
 ## メンバ型
 
 | 名前             | 説明                                               | 対応バージョン |
 |------------------|----------------------------------------------------|----------------|
-| `iterator`       | 出力イテレータ(`Out`と等しい) (type-alias)       | C++20          |
+| `iterator`       | 出力イテレータ(`Out`と等しい) (type-alias)         | C++20          |
 | `char_type`      | 文字の型(`charT`と等しい) (type-alias)             | C++20          |
 | `formatter_type` | 型`T`に対応するフォーマッターの型 (alias-template) | C++20          |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>advance_to -- basic_format_context : out, advance_to, localeを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_context/advance_to.html"/>
      <id>410c5724eb943491f7efda14612ede8075ef839d:reference/format/basic_format_context/advance_to.md</id>
      <updated>2023-01-23T14:35:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_context/advance_to.md b/reference/format/basic_format_context/advance_to.md
new file mode 100644
index 000000000..5aff44b4a
--- /dev/null
+++ b/reference/format/basic_format_context/advance_to.md
@@ -0,0 +1,40 @@
+# advance_to
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* basic_format_context[meta class]
+* cpp20[meta cpp]
+
+```cpp
+void advance_to(iterator it);
+```
+* basic_format_arg[link /reference/format/basic_format_arg.md]
+* basic_format_context[link /reference/format/basic_format_context.md]
+
+## 概要
+出力イテレータを指定したイテレータに設定する。
+
+
+## 効果
+以下と等価：
+
+```cpp
+out_ = std::move(it);
+```
+* std::move[link /reference/utility/move.md]
+
+ここで`out_`は、メンバ変数として保持している出力イテレータである。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+
+- [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arg -- basic_format_context : out, advance_to, localeを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_context/arg.html"/>
      <id>410c5724eb943491f7efda14612ede8075ef839d:reference/format/basic_format_context/arg.md</id>
      <updated>2023-01-23T14:35:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_context/arg.md b/reference/format/basic_format_context/arg.md
index 067b2d4d9..5787680bb 100644
--- a/reference/format/basic_format_context/arg.md
+++ b/reference/format/basic_format_context/arg.md
@@ -1,5 +1,4 @@
 # arg
-
 * format[meta header]
 * function[meta id-type]
 * std[meta namespace]
@@ -7,14 +6,14 @@
 * cpp20[meta cpp]
 
 ```cpp
-basic_format_arg&amp;lt;basic_format_context&amp;gt; arg(size_t id) const
+basic_format_arg&amp;lt;basic_format_context&amp;gt; arg(size_t id) const;
 ```
 * basic_format_arg[link /reference/format/basic_format_arg.md]
 * basic_format_context[link /reference/format/basic_format_context.md]
 
 ## 概要
 
-`i`番目のフォーマット引数を得る。`i`が範囲外の場合、`basic_format_arg&amp;lt;basic_format_context&amp;gt;`のデフォルト値を返す。
+`i`番目のフォーマット引数を取得する。`i`が範囲外の場合、`basic_format_arg&amp;lt;basic_format_context&amp;gt;`のデフォルト値を返す。
 
 ## バージョン
 ### 言語
@@ -22,10 +21,10 @@ basic_format_arg&amp;lt;basic_format_context&amp;gt; arg(size_t id) const
 
 ### 処理系
 - [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
+- [GCC](/implementation.md#gcc): 13
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 ## 参照
 
-* [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
+- [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>locale -- basic_format_context : out, advance_to, localeを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_context/locale.html"/>
      <id>410c5724eb943491f7efda14612ede8075ef839d:reference/format/basic_format_context/locale.md</id>
      <updated>2023-01-23T14:35:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_context/locale.md b/reference/format/basic_format_context/locale.md
new file mode 100644
index 000000000..5990d19ea
--- /dev/null
+++ b/reference/format/basic_format_context/locale.md
@@ -0,0 +1,32 @@
+# locale
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* basic_format_context[meta class]
+* cpp20[meta cpp]
+
+```cpp
+std::locale locale();
+```
+* std::locale[link /reference/locale/locale.md]
+
+## 概要
+ロケールを取得する。
+
+
+## 効果
+文字列フォーマット関数に指定されたロケールオブジェクトがあればそれを返し、そうでなければ[`std::locale()`](/reference/locale/locale.md)を返す。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+
+- [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>out -- basic_format_context : out, advance_to, localeを追加</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_context/out.html"/>
      <id>410c5724eb943491f7efda14612ede8075ef839d:reference/format/basic_format_context/out.md</id>
      <updated>2023-01-23T14:35:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_context/out.md b/reference/format/basic_format_context/out.md
new file mode 100644
index 000000000..4c8569f05
--- /dev/null
+++ b/reference/format/basic_format_context/out.md
@@ -0,0 +1,40 @@
+# out
+* format[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* basic_format_context[meta class]
+* cpp20[meta cpp]
+
+```cpp
+iterator out();
+```
+* basic_format_arg[link /reference/format/basic_format_arg.md]
+* basic_format_context[link /reference/format/basic_format_context.md]
+
+## 概要
+出力イテレータを取得する。
+
+
+## 効果
+以下と等価：
+
+```cpp
+return std::move(out_);
+```
+* std::move[link /reference/utility/move.md]
+
+ここで`out_`は、メンバ変数として保持している出力イテレータである。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+
+- [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
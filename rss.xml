<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-06-12T05:09:50.324414</updated>
  <id>97fb27fc-675e-4768-b6a6-e5206333bbff</id>

  
    <entry>
      <title>flat_map -- flat_map : emplaceを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>ff098b7d447c0a2f43b975706bdbdfd457da3c9e:reference/flat_map/flat_map.md</id>
      <updated>2023-06-12T14:04:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index 60a86281a..18628ef35 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -61,7 +61,7 @@ namespace std {
 | [`insert`](flat_map/insert.md.nolink)                     | 要素を挿入する                             | C++23 |
 | [`insert_or_assign`](flat_map/insert_or_assign.md.nolink) | 要素を挿入、あるいは代入する               | C++23 |
 | [`insert_range`](flat_map/insert_range.md.nolink)         | Rangeを挿入する                            | C++23 |
-| [`emplace`](flat_map/emplace.md.nolink)                   | 要素を直接構築する                         | C++23 |
+| [`emplace`](flat_map/emplace.md)                   | 要素を直接構築する                         | C++23 |
 | [`emplace_hint`](flat_map/emplace_hint.md.nolink)         | ヒントを使って要素を直接構築する           | C++23 |
 | [`try_emplace`](flat_map/try_emplace.md.nolink)           | キーが存在しない場合のみ要素を直接構築する | C++23 |
 | [`erase`](flaflat_maptmap/erase.md.nolink)                | 要素を削除する                             | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- flat_map : emplaceを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/emplace.html"/>
      <id>ff098b7d447c0a2f43b975706bdbdfd457da3c9e:reference/flat_map/flat_map/emplace.md</id>
      <updated>2023-06-12T14:04:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/emplace.md b/reference/flat_map/flat_map/emplace.md
new file mode 100644
index 000000000..68174e75b
--- /dev/null
+++ b/reference/flat_map/flat_map/emplace.md
@@ -0,0 +1,136 @@
+# emplace
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;class... Args&amp;gt;
+pair&amp;lt;iterator, bool&amp;gt; emplace(Args&amp;amp;&amp;amp;... args);
+```
+* pair[link /reference/utility/pair.md]
+
+## 概要
+コンテナに新しい要素を挿入する。要素は直接構築される（コピーもムーブもされない）。要素のコンストラクタはこの関数に渡された引数を与えることによって呼ばれる。
+
+
+## パラメータ
+- `args...` : 要素のコンストラクタへ転送される引数パック。
+
+
+## テンプレートパラメータ制約
+- [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;`[`pair`](/reference/utility/pair.md)`&amp;lt;key_type, mapped_type&amp;gt;, Arg...&amp;gt;`が`true`であること
+
+
+## 効果
+[`pair`](/reference/utility/pair.md)`&amp;lt;key_type, mapped_type&amp;gt;`型の変数`t`を[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で初期化する。このコンテナが`t.first`と等価なキーをすでにもっている場合、`*this`を変更しない。そうでない場合、以下と等価：
+
+```cpp
+auto key_it = ranges::upper_bound(c.keys, t.first, compare);
+auto value_it = c.values.begin() + distance(c.keys.begin(), key_it);
+c.keys.insert(key_it, std::move(t.first));
+c.values.insert(value_it, std::move(t.second));
+```
+* ranges::upper_bound[link /reference/algorithm/ranges_upper_bound.md]
+* begin()[link /reference/vector/vector/begin.md]
+* insert[link /reference/vector/vector/insert.md]
+* std::move[link /reference/utility/move.md]
+
+
+## 戻り値
+挿入されたかどうかを示す `bool` と、挿入された要素へのイテレータからなる [`pair`](/reference/utility/pair.md) を返す。挿入されなかったときは、既存要素へのイテレータを返す。
+
+
+## 例
+### 単純なキー・値を挿入する例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm;
+
+  // キーと値のpairを作ることなく挿入できる
+  fm.emplace(3, &amp;#39;A&amp;#39;); // キー3と、値&amp;#39;A&amp;#39;を挿入
+  fm.emplace(1, &amp;#39;B&amp;#39;);
+  fm.emplace(4, &amp;#39;C&amp;#39;);
+
+  for (const auto&amp;amp; [key, value] : fm) {
+    std::cout &amp;lt;&amp;lt; key &amp;lt;&amp;lt; &amp;#34; : &amp;#34; &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* emplace[color ff0000]
+
+#### 出力
+```
+1 : B
+3 : A
+4 : C
+```
+
+### キーと値もそれぞれコンストラクタ引数を渡す例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;tuple&amp;gt;
+
+struct Point {
+  int x, y;
+  Point(int x, int y) : x(x), y(y) {}
+};
+
+int main()
+{
+  stdx::flat_map&amp;lt;std::string, Point&amp;gt; fm;
+
+  fm.emplace(std::piecewise_construct,
+             std::forward_as_tuple(3, &amp;#39;C&amp;#39;), // キーの型std::stringのコンストラクタ引数を渡す
+             std::forward_as_tuple(1, 2));  // 値の型Pointのコンストラクタ引数を渡す
+
+  fm.emplace(std::piecewise_construct,
+             std::forward_as_tuple(3, &amp;#39;A&amp;#39;),
+             std::forward_as_tuple(3, 4));
+
+  fm.emplace(std::piecewise_construct,
+             std::forward_as_tuple(3, &amp;#39;B&amp;#39;),
+             std::forward_as_tuple(5, 6));
+
+  for (const auto&amp;amp; [key, value] : fm) {
+    std::cout &amp;lt;&amp;lt; key &amp;lt;&amp;lt; &amp;#34; : (&amp;#34; &amp;lt;&amp;lt; value.x &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; value.y &amp;lt;&amp;lt; &amp;#39;)&amp;#39; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* emplace[color ff0000]
+* std::piecewise_construct[link /reference/utility/piecewise_construct_t.md]
+* std::forward_as_tuple[link /reference/tuple/forward_as_tuple.md]
+
+#### 出力
+```
+AAA : (3, 4)
+BBB : (5, 6)
+CCC : (1, 2)
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+
+| 名前                                           | 説明                                       |
+|------------------------------------------------|--------------------------------------------|
+| [`flat_map::insert`](insert.md.nolink)                     | 要素を挿入する                             |
+| [`flat_map::insert_or_assign`](insert_or_assign.md.nolink) | 要素を挿入、あるいは代入する               |
+| [`flat_map::emplace_hint`](emplace_hint.md.nolink)         | ヒントを使って要素を直接構築する           |
+| [`flat_map::try_emplace`](try_emplace.md.nolink)           | キーが存在しない場合のみ要素を直接構築する |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dynamic_extent -- span/dynamic_extent: P2116R0対応</title>
      <link href="https://cpprefjp.github.io/reference/span/dynamic_extent.html"/>
      <id>066971a8538f6c7d522967cb1c65cad8d1b355e3:reference/span/dynamic_extent.md</id>
      <updated>2023-06-09T21:47:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/span/dynamic_extent.md b/reference/span/dynamic_extent.md
index cdf8db9cb..ed6a29bb8 100644
--- a/reference/span/dynamic_extent.md
+++ b/reference/span/dynamic_extent.md
@@ -22,8 +22,6 @@ namespace std {
 - 動的な長さをもつ範囲を参照する ([`std::vector`](/reference/vector/vector.md)や、ポインタと要素数の組など)
 - 参照範囲の変更を、動的な値で指定する (`s.`[`first`](span/first.md)`&amp;lt;N&amp;gt;()`は静的な要素数、`s.`[`first`](span/first.md)`(n)`は動的な要素数をもつ`span`オブジェクトを作成する)
 
-動的な要素数をもつ[`std::span`](span.md)クラスには、タプルインタフェースを使用できないという制限がある。
-
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float_denorm_style -- has_denorm(_loss) : 非推奨の詳細を記載</title>
      <link href="https://cpprefjp.github.io/reference/limits/float_denorm_style.html"/>
      <id>6b1443d2ddd576603a80d4c6b321941d86ab42ed:reference/limits/float_denorm_style.md</id>
      <updated>2023-06-08T17:51:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/float_denorm_style.md b/reference/limits/float_denorm_style.md
index 578258c28..7a0f7289c 100644
--- a/reference/limits/float_denorm_style.md
+++ b/reference/limits/float_denorm_style.md
@@ -14,8 +14,10 @@ namespace std {
 }
 ```
 
-この型を返すメンバ変数がC++23にて非推奨化されるため、列挙型も非推奨とされる。
+この型を返すメンバ変数がC++23にて非推奨化されるため、列挙型も非推奨とされる。非推奨の詳細は[`std::numeric_limits::has_denorm`](numeric_limits/has_denorm.md)を参照。
 
+
+## 概要
 `std::float_denorm_style`列挙型は、非正規化数(Denormal Number)のサポートに関する情報のための列挙値を提供する。
 
 | 列挙値                 | 説明                                       |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>has_denorm -- has_denorm(_loss) : 非推奨の詳細を記載</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm.html"/>
      <id>6b1443d2ddd576603a80d4c6b321941d86ab42ed:reference/limits/numeric_limits/has_denorm.md</id>
      <updated>2023-06-08T17:51:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/has_denorm.md b/reference/limits/numeric_limits/has_denorm.md
index f355ceb1f..7eafd921e 100644
--- a/reference/limits/numeric_limits/has_denorm.md
+++ b/reference/limits/numeric_limits/has_denorm.md
@@ -6,14 +6,14 @@
 * cpp23deprecated[meta cpp]
 
 ```cpp
-// C++03
-static const float_denorm_style has_denorm;
-
-// C++11
-static constexpr float_denorm_style has_denorm;
+static const float_denorm_style has_denorm;     // (1) C++03
+static constexpr float_denorm_style has_denorm; // (1) C++11
 ```
 * float_denorm_style[link /reference/limits/float_denorm_style.md]
 
+この機能は、C++23で非推奨となった。
+
+
 ## 概要
 浮動小数点数型において、型`T`の非正規化数(Denormal Number)のサポート状況を判定する。
 
@@ -32,6 +32,17 @@ static constexpr float_denorm_style has_denorm;
 | `long double` | [`LDBL_HAS_SUBNORM`](/reference/cfloat/ldbl_has_subnorm.md) |
 
 
+## 非推奨・削除の詳細
+C言語側で対応するマクロ`*_HAS_SUBNORM`が廃止されたため、C++側でも非推奨とする。
+
+この機能はコンパイル時定数として非正規化数のサポート状況を取得するものであった。しかし、これには以下のような問題があった：
+
+- ハードウェアによっては非正規化数をサポートしていない場合があり、その場合はソフトウェアエミュレーションによってサポートされている場合がある。この場合、同じ系統のハードウェアであっても将来のバージョンでサポートされる可能性があり、このときにABI破壊を回避しようとすると[`std::denorm_indeterminate`](../float_denorm_style.md)を常に使用せざるを得なくなってしまう
+- ハードウェアサポートがある場合でも、実行時のフラグ切り替えによって非正規化数をゼロにフラッシュするように設定することが可能であり、非正規化数のサポート状況は必ずしもコンパイル時に確定するプロパティではない場合がある
+
+これらの理由から、この機能は有用なものではなく、最悪勘違いして使用される危険性があるため、非推奨とする。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>has_denorm_loss -- has_denorm(_loss) : 非推奨の詳細を記載</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/has_denorm_loss.html"/>
      <id>6b1443d2ddd576603a80d4c6b321941d86ab42ed:reference/limits/numeric_limits/has_denorm_loss.md</id>
      <updated>2023-06-08T17:51:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/has_denorm_loss.md b/reference/limits/numeric_limits/has_denorm_loss.md
index f16a0b5e3..8726aa17c 100644
--- a/reference/limits/numeric_limits/has_denorm_loss.md
+++ b/reference/limits/numeric_limits/has_denorm_loss.md
@@ -6,15 +6,27 @@
 * cpp23deprecated[meta cpp]
 
 ```cpp
-// C++03
-static const bool has_denorm_loss;
-
-// C++11
-static constexpr bool has_denorm_loss;
+static const bool has_denorm_loss;     // (1) C++03
+static constexpr bool has_denorm_loss; // (1) C++11
 ```
 
+この機能は、C++23で非推奨となった。
+
 ## 概要
-浮動小数点数型において、精度の損失が非正規化数によるものかを判定する
+浮動小数点数型において、精度の損失が非正規化数によるものかを判定する。
+
+
+## 非推奨・削除の詳細
+非正規化数が使用されたことによって精度が低下した場合にそれを検出する次の2つの方法がIEEE754標準で指定されていた：
+
+- 非正規化損失（Denormalization loss）
+- 不正確な結果（Inexact result）
+
+実際には1つ目の実装は存在しなかったため、現在のIEE754からは削除されており、2つ目の実装だけが存在している。この機能はこの2つのどちらがその環境の浮動小数点数型で実装されているかを示すものだったが、このような理由によりもはや意味がない状況となった。
+
+また、この値は実装によってなぜか異なっている（MSVCだけが浮動小数点数型に対して`true`を返す）。
+
+これらの理由から、この機能は有用なものではなく、最悪勘違いして使用される危険性があるため、非推奨とする。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 関数の雛形ページ : 非推奨・削除の書き方が記載されていなかった</title>
      <link href="https://cpprefjp.github.io/start_editing/function_template_page.html"/>
      <id>1007613676069369e0090ad3305b504e2e83815c:start_editing/function_template_page.md</id>
      <updated>2023-06-08T17:35:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/function_template_page.md b/start_editing/function_template_page.md
index ab695a3b1..a8d92a04f 100644
--- a/start_editing/function_template_page.md
+++ b/start_editing/function_template_page.md
@@ -42,6 +42,10 @@
 void definition(); // 関数・変数・定数の宣言を記述します。
 ```
 
+(非推奨・削除となった場合は、その旨を記載し、代わりの機能に誘導します)
+
+(例：この関数は、C++14から非推奨となり、C++17で削除された。代わりに[`shuffle()`](/reference/algorithm/shuffle.md)関数を使用すること。)
+
 ## 概要
 (ここには、関数・変数・定数の概要を記述します。必須事項です。)
 
@@ -103,6 +107,10 @@ void definition(); // 関数・変数・定数の宣言を記述します。
 (ここには、関数・変数・定数を説明するにあたっての、補足事項を記述します。とくになければ、項目を削除してください。)
 
 
+## 非推奨・削除の詳細
+(非推奨・削除となった背景を記載します。)
+
+
 ## 例
 ```cpp example
 // (ここには、関数・変数・定数を解説するための、サンプルコードを記述します。)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 -- 打ち消し線から追記へ</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>afc7241e8a6dd56adef175e6b1174aa743c93f87:lang/cpp20/deprecating_volatile.md</id>
      <updated>2023-06-08T16:49:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index 9cded3cda..8de6ac723 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -7,7 +7,8 @@ C++20より、`volatile`の本来の役割に照らして不正確、あるい
 
 非推奨となるのは次のもの
 
-1. ~`volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）~
+1. `volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）
+    - C++23で非推奨化解除
 2. `volatile`値に対するインクリメント／デクリメント演算子（算術型・ポインタ型のみ）
 3. 間に`volatile`値がある場合の連鎖した代入演算子（非クラス型のみ）
 4. 関数引数のトップレベル`volatile`修飾
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
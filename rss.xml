<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-01-06T04:31:44.365727</updated>
  <id>1654fe5a-0132-4a6c-a58e-9172ed65ec4c</id>

  
    <entry>
      <title>bind (C++11) -- bind のレイアウトを修正</title>
      <link href="http://cpprefjp.github.io/reference/functional/bind.html"/>
      <id>b1814459aa6397583e1201e80448f4f8e6a3eee9:reference/functional/bind.md</id>
      <updated>2015-01-06 04:30:11 +0900</updated>
      
        <content type="html">&lt;h1&gt;bind (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, class... BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; bind(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, BoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... bound_args);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクトに対し、引数を部分的に束縛(bind)する。&lt;/p&gt;
&lt;h3&gt;引数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; -- 束縛先となる &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bound_args&lt;/code&gt; -- 束縛対象の値やプレースホルダ(&lt;code&gt;_1&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;, ...)、別の &lt;code&gt;bind()&lt;/code&gt; 呼び出し&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;戻り値&lt;/h3&gt;
&lt;p&gt;引数を部分束縛された &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;i&gt;Callable&lt;/i&gt;&lt;/a&gt; オブジェクト。このオブジェクトは、次のような関数オブジェクトとして扱うことができる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;i&gt;bound_function_type &lt;/i&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; result_type;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;class... UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;i&gt;unspecified&lt;/i&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(UnBoundArgs&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... unbound_args) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;

注意： &lt;code&gt;bound_args&lt;/code&gt; は明示的に &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/ref.html&#34;&gt;&lt;code&gt;std::ref()&lt;/code&gt;&lt;/a&gt; または &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/cref.html&#34;&gt;&lt;code&gt;std::cref()&lt;/code&gt;&lt;/a&gt; で包まない限り、内部でコピーして保持される。他方、&lt;code&gt;unbound_args&lt;/code&gt; は通常の &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;perfect forwarding&lt;/a&gt; が行われるため、&lt;code&gt;move&lt;/code&gt; で渡したあるいは一時オブジェクトを直接渡した &lt;code&gt;unbound_args&lt;/code&gt; を複数回プレースホルダ経由で使用すると予期しない結果になることがある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34;&gt;functional&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; c)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; c;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 第1引数のみを先に渡す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/placeholders.html&#34;&gt;placeholders&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/function.html&#34;&gt;function&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;bind&lt;/span&gt;(add, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, _1, _2);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 残りの引数を渡して関数を呼び出す&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; f(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>算術演算関数オブジェクト -- 算術演算関数オブジェクトの定義を「スタイル」の記載に揃えた</title>
      <link href="http://cpprefjp.github.io/reference/functional/arithmetic_operations.html"/>
      <id>636958bb9299e9a6b11882336237452389af3e53:reference/functional/arithmetic_operations.md</id>
      <updated>2015-01-06 04:08:36 +0900</updated>
      
        <content type="html">&lt;h1&gt;算術演算関数オブジェクト&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; plus {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; minus {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; multiplies {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; divides {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; modulus {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; negate {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T argument_type, result_type;
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;算術演算を提供する関数オブジェクト群。これらは一切のメンバ変数を持たず、状態を保持しない。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;plus&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x + y&lt;/code&gt; と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minus&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x - y&lt;/code&gt; と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;multiplies&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x * y&lt;/code&gt; と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;divides&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x / y&lt;/code&gt; と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;modulus&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x % y&lt;/code&gt; と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;negate&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-x&lt;/code&gt; と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first_argument_type, argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;second_argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;result_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34;&gt;functional&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;plus&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;()(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3789.htm&#34; target=&#34;_blank&#34;&gt;N3789 Constexpr Library Additions: functional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ビット演算関数オブジェクト (C++11) -- ビット演算関数オブジェクトの定義を「スタイル」の記載に揃えた</title>
      <link href="http://cpprefjp.github.io/reference/functional/bitwise_operations.html"/>
      <id>0f4f063ffa0d9f69df5be1b932f0ed07b3d4f34a:reference/functional/bitwise_operations.md</id>
      <updated>2015-01-06 03:49:25 +0900</updated>
      
        <content type="html">&lt;h1&gt;ビット演算関数オブジェクト (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_and {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_or {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_xor {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };


  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14 から（operator() が constexpr、テンプレート引数にデフォルトが指定された）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_and {
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_or {
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_xor {
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_not {
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T argument_type, result_type;
  };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数が void（デフォルト）の場合の特殊化（operator() が関数テンプレート）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_and&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; U&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; u) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(t) &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(u));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; is_transparent;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_or&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; U&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; u) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(t) &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(u));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; is_transparent;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_xor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; U&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; u) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(t) &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(u));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; is_transparent;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_not&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; t) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(&lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(t));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; is_transparent;
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ビット演算を提供する関数オブジェクト群。これらは一切のメンバ変数を持たず、状態を保持しない。&lt;code&gt;bit_not&lt;/code&gt; は C++14 で用意された。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bit_and&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x &amp;amp; y&lt;/code&gt; と等価&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bit_or&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x | y&lt;/code&gt; と等価&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bit_xor&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x ^ y&lt;/code&gt; と等価&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bit_not&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~x&lt;/code&gt; と等価&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first_argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt; の最初の引数の型。&lt;code&gt;T&lt;/code&gt; と等価（&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; 以外の場合のみ。&lt;code&gt;bit_not&lt;/code&gt; には無い）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;second_argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt; の２番目の引数の型。&lt;code&gt;T&lt;/code&gt; と等価（&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; 以外の場合のみ。&lt;code&gt;bit_not&lt;/code&gt; には無い）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt; の引数の型。&lt;code&gt;T&lt;/code&gt; と等価（&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; 以外の場合のみ。&lt;code&gt;bit_not&lt;/code&gt; のみ）&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;result_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt; の戻り値の型。&lt;code&gt;T&lt;/code&gt; と等価（&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; 以外の場合のみ）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is_transparent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt; が関数テンプレートである事を示すタグ型。&lt;br /&gt;実装依存の型であるがあくまでタグ型であり、型そのものには意味はない。（&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; の場合のみ）&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34;&gt;functional&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数で operator() の引数の型を指定した書き方（C++11 でも使用可能）&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/hex.html&#34;&gt;hex&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;bit_and&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;()(&lt;span style=&#34;color: #666666&#34;&gt;0xFA&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0x47&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数で operator() の引数の型を指定しない書き方（C++11 では使用不可能）&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/hex.html&#34;&gt;hex&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;bit_and&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;()(&lt;span style=&#34;color: #666666&#34;&gt;0xFA&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0x47&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0x42
0x42
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3421.htm&#34; target=&#34;_blank&#34;&gt;N3421 Making Operator Functors greater&amp;lt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3789.htm&#34; target=&#34;_blank&#34;&gt;N3789 Constexpr Library Additions: functional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>論理反転関数オブジェクト -- 論理反転関数オブジェクトのレイアウトを修正</title>
      <link href="http://cpprefjp.github.io/reference/functional/negators.html"/>
      <id>f8197e3495a19860ccb2b0e61ced7120650ebc97:reference/functional/negators.md</id>
      <updated>2015-01-06 03:44:04 +0900</updated>
      
        <content type="html">&lt;h1&gt;論理反転関数オブジェクト&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; unary_negate {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; unary_negate(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pred);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; constexpr &lt;span style=&#34;color: #0000FF&#34;&gt;unary_negate&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pred); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;argument_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;argument_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;argument_type argument_type;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  unary_negate&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; not1(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pred);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  constexpr unary_negate&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; not1(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pred); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; binary_negate {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; binary_negate(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pred);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; constexpr &lt;span style=&#34;color: #0000FF&#34;&gt;binary_negate&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pred); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;first_argument_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;second_argument_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;first_argument_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x,
             &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;second_argument_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;first_argument_type first_argument_type;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;second_argument_type second_argument_type;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  binary_negate&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; not2(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pred); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++98&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  binary_negate&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; not2(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Pred&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; pred); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;述語関数オブジェクトの結果を反転する関数オブジェクトアダプタ。&lt;code&gt;unary_negate&lt;/code&gt; は1引数述語用、&lt;code&gt;binary_negate&lt;/code&gt; は2引数述語用。&lt;/p&gt;
&lt;p&gt;テンプレート引数 &lt;code&gt;Pred&lt;/code&gt; に対する要求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unary_negate&lt;/code&gt;の場合&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;Pred&lt;/code&gt;に&lt;code&gt;argument_type&lt;/code&gt;という nested typedef が存在すること&lt;/li&gt;
&lt;li&gt;型&lt;code&gt;Pred&lt;/code&gt;への&lt;code&gt;const&lt;/code&gt;参照&lt;code&gt;pred&lt;/code&gt;に対して、式 &lt;code&gt;(bool)pred(x)&lt;/code&gt; が有効であること。ただし &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;argument_type&lt;/code&gt; への &lt;code&gt;const&lt;/code&gt; 参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binary_negate&lt;/code&gt;の場合&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;Pred&lt;/code&gt;に&lt;code&gt;first_argument_type&lt;/code&gt;、&lt;code&gt;second_argument_type&lt;/code&gt;という nested typedef が存在すること&lt;/li&gt;
&lt;li&gt;型&lt;code&gt;Pred&lt;/code&gt;への&lt;code&gt;const&lt;/code&gt;参照&lt;code&gt;pred&lt;/code&gt;に対して、式 &lt;code&gt;(bool)pred(x, y)&lt;/code&gt; が有効であること。ただし &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; は、それぞれ &lt;code&gt;first_argument_type&lt;/code&gt; と &lt;code&gt;second_argument_type&lt;/code&gt; への &lt;code&gt;const&lt;/code&gt; 参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unary_negate&amp;lt;Pred&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!pred(x)&lt;/code&gt; と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;binary_negate&amp;lt;Pred&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!pred(x, y)&lt;/code&gt; と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;(&lt;code&gt;unary_negate&lt;/code&gt;のみ) &lt;code&gt;typename Pred::argument_type&lt;/code&gt; と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first_argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;(&lt;code&gt;binary_negate&lt;/code&gt;のみ) &lt;code&gt;typename Pred::first_argument_type&lt;/code&gt; と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;second_argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;(&lt;code&gt;binary_negate&lt;/code&gt;のみ) &lt;code&gt;typename Pred::second_argument_type&lt;/code&gt; と等価&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;result_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not1(const Pred&amp;amp; pred)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unary_negate&amp;lt;Pred&amp;gt;(pred)&lt;/code&gt; を構築して返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not2(const Pred&amp;amp; pred)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;binary_negate&amp;lt;Pred&amp;gt;(pred)&lt;/code&gt; を構築して返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34;&gt;functional&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/boolalpha.html&#34;&gt;boolalpha&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;not2&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/comparisons.html&#34;&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;())(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;false
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3789.htm&#34; target=&#34;_blank&#34;&gt;N3789 Constexpr Library Additions: functional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>functional -- ビット演算関数オブジェクトの説明を拡充</title>
      <link href="http://cpprefjp.github.io/reference/functional.html"/>
      <id>8c5a7d831c4813182b133e3e1002253ea3cc7c6a:reference/functional.md</id>
      <updated>2015-01-06 02:43:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;functional&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt;ヘッダは、関数オブジェクトに関する機能を提供する。&lt;/p&gt;
&lt;p&gt;関数オブジェクトとは、通常の関数と同じシンタックスで扱えるクラスである。&lt;br /&gt;
単純な関数オブジェクトの構造は次のとおりである：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; doubler {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;; }
};
&lt;/pre&gt;&lt;/div&gt;

関数オブジェクトは、関数・関数へのポインタに対して、以下のような利点がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状態を保持できる&lt;/li&gt;
&lt;li&gt;(特にアルゴリズムにファンクタとして渡した場合)インライン展開が容易である&lt;/li&gt;
&lt;li&gt;多相(オーバーロードやテンプレート)にしても関数へのポインタのように曖昧にならない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;多相的な関数オブジェクト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/function.html&#34;&gt;&lt;code&gt;function&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数・関数オブジェクトの多相的なラッパー(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bad_function_call.html&#34;&gt;&lt;code&gt;bad_function_call&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;不正な関数呼び出しに関する例外(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;引数の束縛&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の引数を部分適用する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_bind_expression.html&#34;&gt;&lt;code&gt;is_bind_expression&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型を&lt;code&gt;bind&lt;/code&gt;の式と見なすか判定する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/is_placeholder.html&#34;&gt;&lt;code&gt;is_placeholder&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型がプレースホルダーかどうかを判定する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/placeholders.html&#34;&gt;&lt;code&gt;placeholders&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;部分適用のためのプレースホルダー(namespace)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/mem_fn.html&#34;&gt;&lt;code&gt;mem_fn&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数アダプタ(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照ラッパー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;&lt;code&gt;reference_wrapper&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートで参照を渡すためのラッパー(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/ref.html&#34;&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトへの参照を構築する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/reference_wrapper/cref.html&#34;&gt;&lt;code&gt;cref&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトへのconst左辺値参照を構築する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ハッシュ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトを示すハッシュを計算する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;算術演算関数オブジェクト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/arithmetic_operations.html&#34;&gt;&lt;code&gt;plus&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;加算(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/arithmetic_operations.html&#34;&gt;&lt;code&gt;minus&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;減算(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/arithmetic_operations.html&#34;&gt;&lt;code&gt;multiplies&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乗算(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/arithmetic_operations.html&#34;&gt;&lt;code&gt;divides&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;除算(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/arithmetic_operations.html&#34;&gt;&lt;code&gt;modulus&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;剰余算(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/arithmetic_operations.html&#34;&gt;&lt;code&gt;negate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;符号反転(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;比較演算関数オブジェクト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/comparisons.html&#34;&gt;&lt;code&gt;equal_to&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/comparisons.html&#34;&gt;&lt;code&gt;not_equal_to&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/comparisons.html&#34;&gt;&lt;code&gt;less&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかの比較(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/comparisons.html&#34;&gt;&lt;code&gt;less_equal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下かの比較(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/comparisons.html&#34;&gt;&lt;code&gt;greater&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかの比較(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/comparisons.html&#34;&gt;&lt;code&gt;greater_equal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上かの比較(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;論理演算関数オブジェクト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/logical_operations.html&#34;&gt;&lt;code&gt;logical_and&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;論理積(AND) (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/logical_operations.html&#34;&gt;&lt;code&gt;logical_or&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;論理和(OR) (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/logical_operations.html&#34;&gt;&lt;code&gt;logical_not&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;論理否定 (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ビット演算関数オブジェクト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bitwise_operations.html&#34;&gt;&lt;code&gt;bit_and&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットごとの論理積(AND) (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bitwise_operations.html&#34;&gt;&lt;code&gt;bit_or&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットごとの論理和(OR) (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bitwise_operations.html&#34;&gt;&lt;code&gt;bit_xor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットごとの排他的論理和(XOR) (class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/bitwise_operations.html&#34;&gt;&lt;code&gt;bit_not&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットごとの論理否定(NOT) (class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;論理反転関数オブジェクト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;&lt;code&gt;unary_negate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;単項の論理反転 (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;&lt;code&gt;not1&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;単項の述語を論理反転する (function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;&lt;code&gt;binary_negate&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;二項の論理反転 (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;&lt;code&gt;not2&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;二項の述語を論理反転する (function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;古い関数オブジェクトアダプタ(C++11から非推奨)&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unary_function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単項関数オブジェクト(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;binary_function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二項関数オブジェクト(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer_to_unary_function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単項関数ポインタを関数オブジェクトに変換するアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer_to_binary_function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二項関数ポインタを関数オブジェクトに変換するアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ptr_fun&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数ポインタを関数オブジェクトに変換する(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mem_fun_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数ポインタを関数オブジェクトに変換するアダプタ。 オブジェクトへのポインタに対してメンバ関数を呼び出す。(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mem_fun1_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単項メンバ関数ポインタを関数オブジェクトに変換するアダプタ。 オブジェクトへのポインタに対してメンバ関数を呼び出す。(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mem_fun_ref_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数ポインタを関数オブジェクトに変換するアダプタ。 オブジェクトへの参照に対してメンバ関数を呼び出す。(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mem_fun1_ref_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単項メンバ関数ポインタを関数オブジェクトに変換するアダプタ。 オブジェクトへの参照に対してメンバ関数を呼び出す。(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_mem_fun_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数ポインタを関数オブジェクトに変換するアダプタ。 オブジェクトへのconstポインタに対してメンバ関数を呼び出す。(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_mem_fun1_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単項メンバ関数ポインタを関数オブジェクトに変換するアダプタ。 オブジェクトへのconstポインタに対してメンバ関数を呼び出す。(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mem_fun&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数ポインタを関数オブジェクトに変換する。 返される関数オブジェクトは、オブジェクトへのポインタを引数にとる。(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mem_fun_ref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数ポインタを関数オブジェクトに変換する。 返される関数オブジェクトは、オブジェクトへの参照を引数にとる。(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;古い関数バインダ(C++11から非推奨)&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;binder1st&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第1引数を部分適用する関数オブジェクト(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bind1st&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第1引数を部分適用する(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;binder2nd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第2引数を部分適用する関数オブジェクト(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bind2nd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第2引数を部分適用する関数オブジェクト(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/callable.html&#34;&gt;&lt;code&gt;Callable&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数呼び出し可能な型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数呼び出しの式&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ビット演算関数オブジェクト (C++11) -- ビット演算関数オブジェクトの説明を拡充</title>
      <link href="http://cpprefjp.github.io/reference/functional/bitwise_operations.html"/>
      <id>8c5a7d831c4813182b133e3e1002253ea3cc7c6a:reference/functional/bitwise_operations.md</id>
      <updated>2015-01-06 02:43:24 +0900</updated>
      
        <content type="html">&lt;h1&gt;ビット演算関数オブジェクト (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_and {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_or {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_xor {
    T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };


  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++14 から（operator() が constexpr、テンプレート引数にデフォルトが指定された）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_and {
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_or {
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_xor {
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;y) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T first_argument_type, second_argument_type, result_type;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_not {
    constexpr T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; T argument_type, result_type;
  };

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数が void（デフォルト）の場合の特殊化（operator() が関数テンプレート）&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_and&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; U &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;u) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(t) &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(u));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; is_transparent;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_or&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; U &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;u) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(t) &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(u));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; is_transparent;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_xor&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; ()(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;t, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; U &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;u) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(t) &lt;span style=&#34;color: #666666&#34;&gt;^&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;U&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(u));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; is_transparent;
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; bit_not&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
    constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()(T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; t) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; decltype(&lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(t));
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt; is_transparent;
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ビット演算を提供する関数オブジェクト群。これらは一切のメンバ変数を持たず、状態を保持しない。&lt;code&gt;bit_not&lt;/code&gt; は C++14 で用意された。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bit_and&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x &amp;amp; y&lt;/code&gt; と等価&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bit_or&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x | y&lt;/code&gt; と等価&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bit_xor&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x ^ y&lt;/code&gt; と等価&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bit_not&amp;lt;T&amp;gt;::operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~x&lt;/code&gt; と等価&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first_argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt; の最初の引数の型。&lt;code&gt;T&lt;/code&gt; と等価（&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; 以外の場合のみ。&lt;code&gt;bit_not&lt;/code&gt; には無い）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;second_argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt; の２番目の引数の型。&lt;code&gt;T&lt;/code&gt; と等価（&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; 以外の場合のみ。&lt;code&gt;bit_not&lt;/code&gt; には無い）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt; の引数の型。&lt;code&gt;T&lt;/code&gt; と等価（&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; 以外の場合のみ。&lt;code&gt;bit_not&lt;/code&gt; のみ）&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;result_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt; の戻り値の型。&lt;code&gt;T&lt;/code&gt; と等価（&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; 以外の場合のみ）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is_transparent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt; が関数テンプレートである事を示すタグ型。&lt;br /&gt;実装依存の型であるがあくまでタグ型であり、型そのものには意味はない。（&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;void&lt;/code&gt; の場合のみ）&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/functional.html&#34;&gt;functional&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数で operator() の引数の型を指定した書き方（C++11 でも使用可能）&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/hex.html&#34;&gt;hex&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;bit_and&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;()(&lt;span style=&#34;color: #666666&#34;&gt;0xFA&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0x47&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// テンプレート引数で operator() の引数の型を指定しない書き方（C++11 では使用不可能）&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;0x&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/hex.html&#34;&gt;hex&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;bit_and&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;()(&lt;span style=&#34;color: #666666&#34;&gt;0xFA&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0x47&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0x42
0x42
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3421.htm&#34; target=&#34;_blank&#34;&gt;N3421 Making Operator Functors greater&amp;lt;&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3789.htm&#34; target=&#34;_blank&#34;&gt;N3789 Constexpr Library Additions: functional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Library Reference</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2014-11-20T15:24:34.319716</updated>
  <id>45e7ab7a-7971-41ce-ab9b-6567e631a52d</id>

  
    <entry>
      <title>decay (C++11) -- decay : 参考になるページを参照に追加</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/decay.html"/>
      <id>45e7ab7a-7971-41ce-ab9b-6567e631a52d</id>
      <updated>2014-11-20 12:59:22 +0900</updated>
      
        <content type="html">&lt;h1&gt;decay (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; decay {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt; type;
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;T&lt;/span&gt;&lt;/code&gt;に対して関数テンプレートと同じ規則で推論した型を取得する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_reference.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;remove_reference&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;&amp;lt;T&amp;gt;::type&lt;/span&gt;&lt;/code&gt;した型を&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;U&lt;/span&gt;&lt;/code&gt;とする。&lt;br /&gt;
型&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;U&lt;/span&gt;&lt;/code&gt;が配列型&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;U[N]&lt;/span&gt;&lt;/code&gt;であれば、&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;U*&lt;/span&gt;&lt;/code&gt;型をメンバ型&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;type&lt;/span&gt;&lt;/code&gt;として定義する。&lt;br /&gt;
型&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;U&lt;/span&gt;&lt;/code&gt;が関数型&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;R(Args...)&lt;/span&gt;&lt;/code&gt;であれば、&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;R(*)(Args...)&lt;/span&gt;&lt;/code&gt;型をメンバ型&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;type&lt;/span&gt;&lt;/code&gt;として定義する。&lt;br /&gt;
それ以外の場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_cv.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;remove_cv&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;&amp;lt;U&amp;gt;::type&lt;/span&gt;&lt;/code&gt;した型を、メンバ型&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;type&lt;/span&gt;&lt;/code&gt;として定義する。  &lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; my_pair {
  T1 first;
  T2 second;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;U2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  my_pair(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; U1&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; U2&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b)
    &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; first(a), second(b) {}
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
my_pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T1, T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; my_bad_make_pair(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T1&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; my_pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T1, T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(a, b);
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T1&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
my_pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;decay&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T1&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type,
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;decay&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type
&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  my_make_pair(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T1&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; b)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; my_pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;decay&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T1&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type,
           &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;decay&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type
          &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(a, b);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コンパイルエラー！&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 配列をコンストラクタの初期化子で初期化できない&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//auto p = my_bad_make_pair(&#34;hello&#34;, &#34;world&#34;);&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// decltype(q) == my_pair&amp;lt;const char*, const char*&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; q &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; my_make_pair(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;world&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// OK&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// decltype(a) == mu_pair&amp;lt;int, int&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; a &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; my_make_pair(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  a.first &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.4.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/25732386/what-is-stddecay-and-when-it-should-be-used&#34; target=&#34;_blank&#34;&gt;What is std::decay and when it should be used? - StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignment_of (C++11) -- alignment_of: 出力例を追記</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/alignment_of.html"/>
      <id>45e7ab7a-7971-41ce-ab9b-6567e631a52d</id>
      <updated>2014-11-16 17:03:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;alignment_of (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; alignment_of {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; constexpr std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt;;
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;T&lt;/span&gt;&lt;/code&gt;のアラインメントを取得する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;T&lt;/span&gt;&lt;/code&gt;に対して&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;alignof(T)&lt;/span&gt;&lt;/code&gt;が有効であること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;alignof(T)&lt;/span&gt;&lt;/code&gt;で得られた&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;std::size_t&lt;/span&gt;&lt;/code&gt;型の値を、メンバ定数&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;value&lt;/span&gt;&lt;/code&gt;として定義する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  constexpr std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;alignment_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.6.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- stack: 他のクラスに合わせて見出しを「デストラクタ」に修正</title>
      <link href="http://cpprefjp.github.io/reference/stack/-stack.html"/>
      <id>45e7ab7a-7971-41ce-ab9b-6567e631a52d</id>
      <updated>2014-11-16 00:02:32 +0900</updated>
      
        <content type="html">&lt;h1&gt;デストラクタ&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;stack();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;stack コンテナアダプタのオブジェクトを破棄する。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;線形時間 O(n) (全要素のデストラクタ呼び出し)&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- stack: 他のクラスに合わせて見出しを「コンストラクタ」に修正</title>
      <link href="http://cpprefjp.github.io/reference/stack/stack.html"/>
      <id>45e7ab7a-7971-41ce-ab9b-6567e631a52d</id>
      <updated>2014-11-16 00:00:39 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stack&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Container&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; cont &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Container());
stack(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; stack&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; st);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11から追加されたコンストラクタ&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;stack&lt;/span&gt;(Container&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cont &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Container());
stack(stack&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; st);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; stack(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; stack(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Container&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; cont, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; stack(Container&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cont, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; stack(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; stack&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; st, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; stack(stack&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; st, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; alloc);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;stack&lt;/span&gt;&lt;/code&gt; コンテナアダプタのオブジェクトを構築する。 
コンテナアダプタは、実際にデータを保持するコンテナオブジェクトを内部に持つが、これは引数として渡されたコンテナオブジェクトをコピー、もしくはムーブして用いる。 
空のコンテナが引数として渡された場合も同様の動作を行う。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;cont&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初期化に用いるコンテナオブジェクト&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;alloc&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内部のコンテナで使用するアロケータオブジェクト&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;st&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コピー・ムーブ元の &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;stack&lt;/span&gt;&lt;/code&gt; オブジェクト&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;線形時間 O(n)。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;stack&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルトでは Container == deque&amp;lt;T&amp;gt;&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  vec;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素を追加&lt;/span&gt;
  vec.push_back(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  vec.push_back(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
  vec.push_back(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// vec を引数に構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stack&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;  st(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(vec));

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;st.empty()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; st.top() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 末尾要素を参照する&lt;/span&gt;
    st.pop(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 末尾要素を削除&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;3 2 1 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/op_assign.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;operator=&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stack -- stack: デストラクタのファイル名を修正</title>
      <link href="http://cpprefjp.github.io/reference/stack.html"/>
      <id>45e7ab7a-7971-41ce-ab9b-6567e631a52d</id>
      <updated>2014-11-15 23:24:19 +0900</updated>
      
        <content type="html">&lt;h1&gt;stack&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Container&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/deque.html&#34;&gt;deque&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;stack&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;stack&lt;/span&gt;&lt;/code&gt; はコンテナアダプタであり、LIFO (last-in first-out) の動作――コンテナの一方から要素が挿入され、挿入された側から要素を取り出す――を実現する目的で設計されている。要素をコンテナの &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;back()&lt;/span&gt;&lt;/code&gt; 側から挿入し、同じく &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;back()&lt;/span&gt;&lt;/code&gt; 側から取り出す。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;stack&lt;/span&gt;&lt;/code&gt; は、所定のメンバ関数を持つコンテナのオブジェクトを内部実装として用いており、標準のコンテナ、もしくは独自に実装したコンテナを指定することができる。 
このコンテナに必要な要件は、以下のメンバ関数を持つことである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;back()&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;push_back()&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;pop_back()&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;emplace_back()&lt;/span&gt;&lt;/code&gt; (C++11)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この要件を満たすものとしては &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;vector&lt;/span&gt;&lt;/code&gt; 、&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;deque&lt;/span&gt;&lt;/code&gt; 、&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;list&lt;/span&gt;&lt;/code&gt; があり、デフォルトでは &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;deque&lt;/span&gt;&lt;/code&gt; が使用される。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;stack&lt;/span&gt;&lt;/code&gt; は2つのテンプレートパラメータを持つ。各テンプレートパラメータの意味は以下の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;T&lt;/span&gt;&lt;/code&gt;: 格納される要素の型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;Container&lt;/span&gt;&lt;/code&gt;: 要素へのアクセス・保存に用いる内部実装のコンテナクラス&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/stack.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;(constructor)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/-stack.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;(destructor)&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/op_assign.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;operator=&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/top.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;top&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;次の要素へアクセスする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/empty.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;empty&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素が空であるかを確認する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/size.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;size&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/push.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;push&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を追加する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/emplace.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;emplace&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;直接構築で要素を追加する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/pop.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;pop&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;次の要素を削除する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/swap.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;swap&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;他の &lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;stack&lt;/span&gt;&lt;/code&gt; オブジェクトと値を入れ替える&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;protectedメンバ変数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;変数名&lt;/th&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;c&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;Container&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;container_type&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;Container&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;value_type&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;Container::value_type&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;size_type&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;Container::size_type&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;reference&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;Container::reference&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;const_reference&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;Container::const_reference&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/op_equal.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;operator==&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/op_not_equal.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;operator!=&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/op_less.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;operator&amp;lt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/op_less_equal.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;operator&amp;lt;=&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下かの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/op_greater.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;operator&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/op_greater_equal.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;operator&amp;gt;=&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上かの判定を行う&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/stack/swap_free.html&#34;&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;swap&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2つの&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;stack&lt;/span&gt;&lt;/code&gt;オブジェクトを入れ替える&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;stack&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt; ()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;stack&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;  st;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 要素を追加&lt;/span&gt;
  st.push(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  st.push(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);
  st.push(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;st.empty()) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; st.top() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; &#34;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 末尾要素を参照する&lt;/span&gt;
    st.pop(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 末尾要素を削除&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;3 2 1 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;参照&lt;/h3&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>~stack -- stack: デストラクタのファイル名を修正</title>
      <link href="http://cpprefjp.github.io/reference/stack/-stack.html"/>
      <id>45e7ab7a-7971-41ce-ab9b-6567e631a52d</id>
      <updated>2014-11-15 23:24:19 +0900</updated>
      
        <content type="html">&lt;h1&gt;~stack&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;stack();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;stack コンテナアダプタのオブジェクトを破棄する。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;線形時間 O(n) (全要素のデストラクタ呼び出し)&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;span style=&#34;color: #000&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stack-1.md -- stack: デストラクタのファイル名を修正</title>
      <link href="http://cpprefjp.github.io/reference/stack/stack-1.html"/>
      <id>45e7ab7a-7971-41ce-ab9b-6567e631a52d</id>
      <updated>2014-11-15 23:24:19 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stack/stack-1.md b/reference/stack/stack-1.md
deleted file mode 100644
index c433bda..0000000
--- a/reference/stack/stack-1.md
+++ /dev/null
@@ -1,21 +0,0 @@
-#~stack
-```cpp
-~stack();
-```
-
-##概要
-stack コンテナアダプタのオブジェクトを破棄する。
-
-
-##計算量
-線形時間 O(n) (全要素のデストラクタ呼び出し)
-
-
-##例
-```cpp
-```
-
-###出力
-```
-```
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
</feed>
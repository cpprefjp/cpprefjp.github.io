<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-25T22:12:51.300296</updated>
  <id>d05f6381-9dd8-4eea-8668-3d75db3c7dbf</id>

  
    <entry>
      <title>notify_all -- atomic_ref : notify_all, notify_one, operator=をconstメンバ関数にした</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/notify_all.html"/>
      <id>dc35f117cdff4e63e0d727175cd440a4a808838e:reference/atomic/atomic_ref/notify_all.md</id>
      <updated>2020-11-26T07:08:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/notify_all.md b/reference/atomic/atomic_ref/notify_all.md
index 15ec2288c..0579533ba 100644
--- a/reference/atomic/atomic_ref/notify_all.md
+++ b/reference/atomic/atomic_ref/notify_all.md
@@ -6,7 +6,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-void notify_all() noexcept;
+void notify_all() const noexcept;
 ```
 
 ## 概要
@@ -81,3 +81,5 @@ int main()
 - [P0514R4 Efficient concurrent waiting for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0514r4.pdf)
 - [ogiroux/atomic_wait - Sample implementation of C++20 atomic_wait/notify](https://github.com/ogiroux/atomic_wait)
 - [P1643R1 Add wait/notify to `atomic_ref`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1643r1.html)
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 宣言に`const`を追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>notify_one -- atomic_ref : notify_all, notify_one, operator=をconstメンバ関数にした</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/notify_one.html"/>
      <id>dc35f117cdff4e63e0d727175cd440a4a808838e:reference/atomic/atomic_ref/notify_one.md</id>
      <updated>2020-11-26T07:08:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/notify_one.md b/reference/atomic/atomic_ref/notify_one.md
index ce2e299d9..a15e9e73c 100644
--- a/reference/atomic/atomic_ref/notify_one.md
+++ b/reference/atomic/atomic_ref/notify_one.md
@@ -6,7 +6,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-void notify_one() noexcept;
+void notify_one() const noexcept;
 ```
 
 ## 概要
@@ -108,3 +108,5 @@ int main()
 - [P0514R4 Efficient concurrent waiting for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0514r4.pdf)
 - [ogiroux/atomic_wait - Sample implementation of C++20 atomic_wait/notify](https://github.com/ogiroux/atomic_wait)
 - [P1643R1 Add wait/notify to `atomic_ref`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1643r1.html)
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 宣言に`const`を追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- atomic_ref : notify_all, notify_one, operator=をconstメンバ関数にした</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/op_assign.html"/>
      <id>dc35f117cdff4e63e0d727175cd440a4a808838e:reference/atomic/atomic_ref/op_assign.md</id>
      <updated>2020-11-26T07:08:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/op_assign.md b/reference/atomic/atomic_ref/op_assign.md
index ea540cf87..27e1a3256 100644
--- a/reference/atomic/atomic_ref/op_assign.md
+++ b/reference/atomic/atomic_ref/op_assign.md
@@ -64,3 +64,7 @@ int main()
 - [GCC](/implementation.md#gcc): 10.1
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 宣言に`const`を追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>notify_all -- atomic_ref : 間違ってvolatileオーバーロードを書いてしまっていたので削除</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/notify_all.html"/>
      <id>c13bf21fef4ed5a2d3a07d596f064c14fc179bd0:reference/atomic/atomic_ref/notify_all.md</id>
      <updated>2020-11-26T07:02:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/notify_all.md b/reference/atomic/atomic_ref/notify_all.md
index 4ef7409cf..15ec2288c 100644
--- a/reference/atomic/atomic_ref/notify_all.md
+++ b/reference/atomic/atomic_ref/notify_all.md
@@ -6,7 +6,6 @@
 * cpp20[meta cpp]
 
 ```cpp
-void notify_all() volatile noexcept;
 void notify_all() noexcept;
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>notify_one -- atomic_ref : 間違ってvolatileオーバーロードを書いてしまっていたので削除</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/notify_one.html"/>
      <id>c13bf21fef4ed5a2d3a07d596f064c14fc179bd0:reference/atomic/atomic_ref/notify_one.md</id>
      <updated>2020-11-26T07:02:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/notify_one.md b/reference/atomic/atomic_ref/notify_one.md
index f972b5420..ce2e299d9 100644
--- a/reference/atomic/atomic_ref/notify_one.md
+++ b/reference/atomic/atomic_ref/notify_one.md
@@ -6,7 +6,6 @@
 * cpp20[meta cpp]
 
 ```cpp
-void notify_one() volatile noexcept;
 void notify_one() noexcept;
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- atomic_ref : 間違ってvolatileオーバーロードを書いてしまっていたので削除</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/wait.html"/>
      <id>c13bf21fef4ed5a2d3a07d596f064c14fc179bd0:reference/atomic/atomic_ref/wait.md</id>
      <updated>2020-11-26T07:02:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/wait.md b/reference/atomic/atomic_ref/wait.md
index 7eb23a10f..71ffb0317 100644
--- a/reference/atomic/atomic_ref/wait.md
+++ b/reference/atomic/atomic_ref/wait.md
@@ -6,7 +6,6 @@
 * cpp20[meta cpp]
 
 ```cpp
-void wait(T old, memory_order order = memory_order::seq_cst) const volatile noexcept;
 void wait(T old, memory_order order = memory_order::seq_cst) const noexcept;
 ```
 * memory_order[link /reference/atomic/memory_order.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_compare_exchange_strong -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_compare_exchange_strong.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_compare_exchange_strong.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_compare_exchange_strong.md b/reference/atomic/atomic_compare_exchange_strong.md
index 8a3ae8e04..dd9835c89 100644
--- a/reference/atomic/atomic_compare_exchange_strong.md
+++ b/reference/atomic/atomic_compare_exchange_strong.md
@@ -38,6 +38,11 @@ namespace std {
 強い比較でアトミックに値を入れ替える
 
 
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 [`memory_order_seq_cst`](memory_order.md)のメモリオーダーにしたがって現在の値`object`と`expected`をバイトレベルで等値比較を行う、`true`である場合は現在の値を`desired`で置き換え、`false`である場合は`expected`を現在の値`object`で置き換える。
 
@@ -111,6 +116,10 @@ false 3 3
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [atomic compare_exchange_weak/strong関数 - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20120725/p1)
 - [N2748 Strong Compare and Exchange](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2748.html)
@@ -118,3 +127,5 @@ false 3 3
 - [What does &amp;#39;spurious failure&amp;#39; on a CAS mean? - StackOverflow](http://stackoverflow.com/q/355365/463412)
 - [“Strong” and “weak” hardware memory models - Sutter’s Mill](https://herbsutter.com/2012/08/02/strong-and-weak-hardware-memory-models/)
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_compare_exchange_strong_explicit -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_compare_exchange_strong_explicit.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_compare_exchange_strong_explicit.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_compare_exchange_strong_explicit.md b/reference/atomic/atomic_compare_exchange_strong_explicit.md
index 6047f194f..fb4596020 100644
--- a/reference/atomic/atomic_compare_exchange_strong_explicit.md
+++ b/reference/atomic/atomic_compare_exchange_strong_explicit.md
@@ -47,7 +47,12 @@ namespace std {
 強い比較でアトミックに値を入れ替える
 
 
-## 要件
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
+## 事前条件
 - `failure`が[`memory_order_release`](memory_order.md), [`memory_order_acq_rel`](memory_order.md)ではないこと。
 - `failure`が`success`よりも強くないこと。
 
@@ -131,6 +136,10 @@ false 3 3
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [atomic compare_exchange_weak/strong関数 - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20120725/p1)
 - [N2748 Strong Compare and Exchange](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2748.html)
@@ -138,3 +147,5 @@ false 3 3
 - [What does &amp;#39;spurious failure&amp;#39; on a CAS mean? - StackOverflow](http://stackoverflow.com/q/355365/463412)
 - [“Strong” and “weak” hardware memory models - Sutter’s Mill](https://herbsutter.com/2012/08/02/strong-and-weak-hardware-memory-models/)
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_compare_exchange_weak -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_compare_exchange_weak.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_compare_exchange_weak.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_compare_exchange_weak.md b/reference/atomic/atomic_compare_exchange_weak.md
index 8561f85eb..53e833002 100644
--- a/reference/atomic/atomic_compare_exchange_weak.md
+++ b/reference/atomic/atomic_compare_exchange_weak.md
@@ -37,6 +37,11 @@ namespace std {
 弱い比較でアトミックに値を入れ替える
 
 
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 [`memory_order_seq_cst`](memory_order.md)のメモリオーダーにしたがって現在の値`object`と`expected`をバイトレベルで等値比較を行い、`true`である場合は現在の値`object`を`desired`で置き換え、`false`である場合は`expected`を現在の値で置き換える。
 
@@ -115,6 +120,10 @@ false 3 3
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [atomic compare_exchange_weak/strong関数 - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20120725/p1)
 - [N2748 Strong Compare and Exchange](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2748.html)
@@ -122,3 +131,5 @@ false 3 3
 - [What does &amp;#39;spurious failure&amp;#39; on a CAS mean? - StackOverflow](http://stackoverflow.com/q/355365/463412)
 - [“Strong” and “weak” hardware memory models - Sutter’s Mill](https://herbsutter.com/2012/08/02/strong-and-weak-hardware-memory-models/)
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_compare_exchange_weak_explicit -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_compare_exchange_weak_explicit.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_compare_exchange_weak_explicit.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_compare_exchange_weak_explicit.md b/reference/atomic/atomic_compare_exchange_weak_explicit.md
index 2e0f089f9..9109db505 100644
--- a/reference/atomic/atomic_compare_exchange_weak_explicit.md
+++ b/reference/atomic/atomic_compare_exchange_weak_explicit.md
@@ -47,7 +47,12 @@ namespace std {
 弱い比較でアトミックに値を入れ替える
 
 
-## 要件
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
+## 事前条件
 - `failure`が[`memory_order_release`](memory_order.md), [`memory_order_acq_rel`](memory_order.md)ではないこと。
 - `failure`が`success`よりも強くないこと。
 
@@ -133,6 +138,10 @@ false 3 3
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [atomic compare_exchange_weak/strong関数 - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20120725/p1)
 - [N2748 Strong Compare and Exchange](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2748.html)
@@ -140,3 +149,5 @@ false 3 3
 - [What does &amp;#39;spurious failure&amp;#39; on a CAS mean? - StackOverflow](http://stackoverflow.com/q/355365/463412)
 - [“Strong” and “weak” hardware memory models - Sutter’s Mill](https://herbsutter.com/2012/08/02/strong-and-weak-hardware-memory-models/)
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_exchange -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_exchange.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_exchange.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_exchange.md b/reference/atomic/atomic_exchange.md
index 7ec25fda6..90312032f 100644
--- a/reference/atomic/atomic_exchange.md
+++ b/reference/atomic/atomic_exchange.md
@@ -34,6 +34,11 @@ namespace std {
 アトミックに値を入れ替える
 
 
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 [`memory_order_seq_cst`](memory_order.md)のメモリオーダーにしたがって、現在の値を`desired`でアトミックに置き換える
 
@@ -86,5 +91,11 @@ replaced 1 by 2
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_exchange_explicit -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_exchange_explicit.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_exchange_explicit.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_exchange_explicit.md b/reference/atomic/atomic_exchange_explicit.md
index fedd7079d..2efa5fecd 100644
--- a/reference/atomic/atomic_exchange_explicit.md
+++ b/reference/atomic/atomic_exchange_explicit.md
@@ -39,6 +39,11 @@ namespace std {
 アトミックに値を入れ替える
 
 
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 `order`で指定されたメモリオーダーにしたがって、現在の値を`desired`でアトミックに置き換える
 
@@ -92,5 +97,11 @@ replaced 1 by 2
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_fetch_add -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_fetch_add.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_fetch_add.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_fetch_add.md b/reference/atomic/atomic_fetch_add.md
index a0d6b4a7d..8dcaf0c73 100644
--- a/reference/atomic/atomic_fetch_add.md
+++ b/reference/atomic/atomic_fetch_add.md
@@ -34,8 +34,11 @@ namespace std {
 アトミックに値を加算する
 
 
-## 要件
-- C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+## テンプレートパラメータ制約
+- (1), (2) :
+    - C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
 ## 効果
@@ -91,5 +94,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_fetch_add_explicit -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_fetch_add_explicit.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_fetch_add_explicit.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_fetch_add_explicit.md b/reference/atomic/atomic_fetch_add_explicit.md
index b022e32f7..d49c95fe8 100644
--- a/reference/atomic/atomic_fetch_add_explicit.md
+++ b/reference/atomic/atomic_fetch_add_explicit.md
@@ -38,8 +38,11 @@ namespace std {
 アトミックに加算を行う
 
 
-## 要件
-- C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+## テンプレートパラメータ制約
+- (1), (2) :
+    - C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
 ## 効果
@@ -94,5 +97,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_fetch_and -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_fetch_and.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_fetch_and.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_fetch_and.md b/reference/atomic/atomic_fetch_and.md
index 1fce5da08..589d46856 100644
--- a/reference/atomic/atomic_fetch_and.md
+++ b/reference/atomic/atomic_fetch_and.md
@@ -33,8 +33,11 @@ namespace std {
 アトミックにAND演算を行う
 
 
-## 要件
-- C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+## テンプレートパラメータ制約
+- (1), (2) :
+    - C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
 ## 効果
@@ -97,5 +100,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_fetch_and_explicit -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_fetch_and_explicit.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_fetch_and_explicit.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_fetch_and_explicit.md b/reference/atomic/atomic_fetch_and_explicit.md
index 0faf3cfae..2c3428564 100644
--- a/reference/atomic/atomic_fetch_and_explicit.md
+++ b/reference/atomic/atomic_fetch_and_explicit.md
@@ -38,8 +38,11 @@ namespace std {
 アトミックにAND演算を行う
 
 
-## 要件
-- C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+## テンプレートパラメータ制約
+- (1), (2) :
+    - C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
 ## 効果
@@ -102,5 +105,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_fetch_or -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_fetch_or.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_fetch_or.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_fetch_or.md b/reference/atomic/atomic_fetch_or.md
index e10c7c367..3dd0f1a66 100644
--- a/reference/atomic/atomic_fetch_or.md
+++ b/reference/atomic/atomic_fetch_or.md
@@ -33,8 +33,11 @@ namespace std {
 アトミックにOR演算を行う
 
 
-## 要件
-- C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+## テンプレートパラメータ制約
+- (1), (2) :
+    - C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
 ## 効果
@@ -97,5 +100,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_fetch_or_explicit -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_fetch_or_explicit.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_fetch_or_explicit.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_fetch_or_explicit.md b/reference/atomic/atomic_fetch_or_explicit.md
index 457c99327..4242e8b85 100644
--- a/reference/atomic/atomic_fetch_or_explicit.md
+++ b/reference/atomic/atomic_fetch_or_explicit.md
@@ -38,8 +38,11 @@ namespace std {
 アトミックにOR演算を行う
 
 
-## 要件
-- C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+## テンプレートパラメータ制約
+- (1), (2) :
+    - C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
 ## 効果
@@ -101,5 +104,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_fetch_sub -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_fetch_sub.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_fetch_sub.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_fetch_sub.md b/reference/atomic/atomic_fetch_sub.md
index 98b78e59a..b284dcc71 100644
--- a/reference/atomic/atomic_fetch_sub.md
+++ b/reference/atomic/atomic_fetch_sub.md
@@ -33,8 +33,11 @@ namespace std {
 アトミックに減算を行う
 
 
-## 要件
-- C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+## テンプレートパラメータ制約
+- (1), (2) :
+    - C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
 ## 効果
@@ -90,5 +93,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_fetch_sub_explicit -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_fetch_sub_explicit.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_fetch_sub_explicit.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_fetch_sub_explicit.md b/reference/atomic/atomic_fetch_sub_explicit.md
index d758f25d1..a3eb40684 100644
--- a/reference/atomic/atomic_fetch_sub_explicit.md
+++ b/reference/atomic/atomic_fetch_sub_explicit.md
@@ -38,8 +38,11 @@ namespace std {
 アトミックに減算を行う
 
 
-## 要件
-- C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+## テンプレートパラメータ制約
+- (1), (2) :
+    - C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
 ## 効果
@@ -95,5 +98,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_fetch_xor -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_fetch_xor.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_fetch_xor.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_fetch_xor.md b/reference/atomic/atomic_fetch_xor.md
index 15a27a534..58478178a 100644
--- a/reference/atomic/atomic_fetch_xor.md
+++ b/reference/atomic/atomic_fetch_xor.md
@@ -33,8 +33,11 @@ namespace std {
 アトミックにXOR演算を行う
 
 
-## 要件
-- C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+## テンプレートパラメータ制約
+- (1), (2) :
+    - C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
 ## 効果
@@ -97,5 +100,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_fetch_xor_explicit -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_fetch_xor_explicit.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_fetch_xor_explicit.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_fetch_xor_explicit.md b/reference/atomic/atomic_fetch_xor_explicit.md
index bbba632ee..1b7522b74 100644
--- a/reference/atomic/atomic_fetch_xor_explicit.md
+++ b/reference/atomic/atomic_fetch_xor_explicit.md
@@ -38,8 +38,11 @@ namespace std {
 アトミックにXOR演算を行う
 
 
-## 要件
-- C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+## テンプレートパラメータ制約
+- (1), (2) :
+    - C++17 : 型`T`がオブジェクト型であること。型`T`が`void*`や関数ポインタであってはならない
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
 
 
 ## 効果
@@ -103,5 +106,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_load -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_load.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_load.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_load.md b/reference/atomic/atomic_load.md
index f21a1c2c6..e6ce7c8e0 100644
--- a/reference/atomic/atomic_load.md
+++ b/reference/atomic/atomic_load.md
@@ -7,10 +7,10 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  T atomic_load(const volatile atomic&amp;lt;T&amp;gt;* object) noexcept; // (1)
+  T atomic_load(const volatile atomic&amp;lt;T&amp;gt;* object) noexcept; // (1) C++11
 
   template &amp;lt;class T&amp;gt;
-  T atomic_load(const atomic&amp;lt;T&amp;gt;* object) noexcept;          // (2)
+  T atomic_load(const atomic&amp;lt;T&amp;gt;* object) noexcept;          // (2) C++11
 }
 ```
 * atomic[link /reference/atomic/atomic.md]
@@ -20,6 +20,11 @@ namespace std {
 アトミックに値を読み込む
 
 
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 [`memory_order_seq_cst`](memory_order.md)のメモリオーダーにしたがって、アトミックに値を読み込む
 
@@ -71,5 +76,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_load_explicit -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_load_explicit.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_load_explicit.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_load_explicit.md b/reference/atomic/atomic_load_explicit.md
index ac862a8b7..5bbd4bb3c 100644
--- a/reference/atomic/atomic_load_explicit.md
+++ b/reference/atomic/atomic_load_explicit.md
@@ -9,12 +9,12 @@ namespace std {
   template &amp;lt;class T&amp;gt;
   T atomic_load_explicit(
       const volatile atomic&amp;lt;T&amp;gt;* object,
-      memory_order order) noexcept;     // (1)
+      memory_order order) noexcept;     // (1) C++11
 
   template &amp;lt;class T&amp;gt;
   T atomic_load_explicit(
       const atomic&amp;lt;T&amp;gt;* object,
-      memory_order order) noexcept;     // (2)
+      memory_order order) noexcept;     // (2) C++11
 }
 ```
 * atomic[link atomic.md]
@@ -24,7 +24,12 @@ namespace std {
 アトミックに値を読み込む
 
 
-## 要件
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
+## 事前条件
 `order`が以下のメモリオーダーではないこと：
 
 - [`memory_order_release`](memory_order.md)
@@ -83,3 +88,5 @@ int main()
 
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_notify_all -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_notify_all.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_notify_all.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_notify_all.md b/reference/atomic/atomic_notify_all.md
index 5de6392f2..b9f697332 100644
--- a/reference/atomic/atomic_notify_all.md
+++ b/reference/atomic/atomic_notify_all.md
@@ -7,10 +7,10 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  void atomic_notify_all(volatile atomic&amp;lt;T&amp;gt;* object);
+  void atomic_notify_all(volatile atomic&amp;lt;T&amp;gt;* object); // (1) C++20
 
   template &amp;lt;class T&amp;gt;
-  void atomic_notify_all(atomic&amp;lt;T&amp;gt;* object);
+  void atomic_notify_all(atomic&amp;lt;T&amp;gt;* object);          // (2) C++20
 }
 ```
 
@@ -20,6 +20,10 @@ namespace std {
 この関数は、[`atomic_wait()`](atomic_wait.md)関数によるブロッキング待機を解除する。
 
 
+## テンプレートパラメータ制約
+- (1) : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 起床待機している全てのアトミックオブジェクトの待機を解除する
 
@@ -81,7 +85,13 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0514R4 Efficient concurrent waiting for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0514r4.pdf)
 - [ogiroux/atomic_wait - Sample implementation of C++20 atomic_wait/notify](https://github.com/ogiroux/atomic_wait)
 - [P1135R6 The C++20 Synchronization Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1135r6.html)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_notify_one -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_notify_one.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_notify_one.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_notify_one.md b/reference/atomic/atomic_notify_one.md
index 2df0fb067..71297ac9f 100644
--- a/reference/atomic/atomic_notify_one.md
+++ b/reference/atomic/atomic_notify_one.md
@@ -20,6 +20,10 @@ namespace std {
 この関数は、[`atomic_wait()`](atomic_wait.md)関数によるブロッキング待機を解除する。
 
 
+## テンプレートパラメータ制約
+- (1) : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 起床待機している少なくともひとつのアトミックオブジェクトの待機を解除する
 
@@ -107,7 +111,13 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0514R4 Efficient concurrent waiting for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0514r4.pdf)
 - [ogiroux/atomic_wait - Sample implementation of C++20 atomic_wait/notify](https://github.com/ogiroux/atomic_wait)
 - [P1135R6 The C++20 Synchronization Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1135r6.html)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_store -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_store.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_store.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_store.md b/reference/atomic/atomic_store.md
index 4d79177d3..ce2ee799e 100644
--- a/reference/atomic/atomic_store.md
+++ b/reference/atomic/atomic_store.md
@@ -30,6 +30,11 @@ namespace std {
 アトミックに値を書き込む
 
 
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 [`memory_order_seq_cst`](memory_order.md)のメモリオーダーにしたがって、`object`が指す値を`desired`でアトミックに置き換える。
 この関数は、戻り値のない[`atomic_exchange()`](atomic_exchange.md)と見なせる。
@@ -83,5 +88,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_store_explicit -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_store_explicit.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_store_explicit.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_store_explicit.md b/reference/atomic/atomic_store_explicit.md
index 8ef3c31e3..4f73f1691 100644
--- a/reference/atomic/atomic_store_explicit.md
+++ b/reference/atomic/atomic_store_explicit.md
@@ -38,6 +38,11 @@ namespace std {
 アトミックに値を書き込む
 
 
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 指定されたメモリオーダーにしたがって、`object`が指す値を`desired`でアトミックに置き換える。
 
@@ -92,5 +97,11 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_wait -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_wait.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_wait.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_wait.md b/reference/atomic/atomic_wait.md
index 84c2a4b9f..ae082fe7f 100644
--- a/reference/atomic/atomic_wait.md
+++ b/reference/atomic/atomic_wait.md
@@ -24,6 +24,10 @@ namespace std {
 この関数によってブロッキング待機をしたら、対応する起床関数である[`atomic_notify_one()`](atomic_notify_one.md)、[`atomic_notify_all()`](atomic_notify_all.md)によってブロッキング待機を解除できる。
 
 
+## テンプレートパラメータ制約
+- (1) : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 - 以下のステップを順に繰り返し実行する：
     - [`atomic_load`](atomic_load.md)`(object)`によって現在の値を読み込み、`old`と値を比較する
@@ -119,6 +123,12 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0514R4 Efficient concurrent waiting for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0514r4.pdf)
 - [ogiroux/atomic_wait - Sample implementation of C++20 atomic_wait/notify](https://github.com/ogiroux/atomic_wait)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_wait_explicit -- atomic : 非メンバ関数にもvolatile制約を記載</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_wait_explicit.html"/>
      <id>7bff03b2f8528ee986dd122103f6086e51048a97:reference/atomic/atomic_wait_explicit.md</id>
      <updated>2020-11-26T05:53:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_wait_explicit.md b/reference/atomic/atomic_wait_explicit.md
index 5c458cf1f..37712438e 100644
--- a/reference/atomic/atomic_wait_explicit.md
+++ b/reference/atomic/atomic_wait_explicit.md
@@ -26,6 +26,10 @@ namespace std {
 この関数によってブロッキング待機をしたら、対応する起床関数である[`atomic_notify_one()`](atomic_notify_one.md)、[`atomic_notify_all()`](atomic_notify_all.md)によってブロッキング待機を解除できる。
 
 
+## テンプレートパラメータ制約
+- (1) : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 - 以下のステップを順に繰り返し実行する：
     - [`atomic_load_explicit`](atomic_load_explicit.md)`(object, order)`によって現在の値を読み込み、`old`と値を比較する
@@ -122,6 +126,12 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0514R4 Efficient concurrent waiting for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0514r4.pdf)
 - [ogiroux/atomic_wait - Sample implementation of C++20 atomic_wait/notify](https://github.com/ogiroux/atomic_wait)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_init -- atomic_init : volatileオブジェクトをとるオーバーロードに制約を追加</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_init.html"/>
      <id>89ef74a13689bade8b1e90abae83d57e9e6ea145:reference/atomic/atomic_init.md</id>
      <updated>2020-11-26T05:25:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_init.md b/reference/atomic/atomic_init.md
index b50b4ff7c..0ca54e66a 100644
--- a/reference/atomic/atomic_init.md
+++ b/reference/atomic/atomic_init.md
@@ -33,6 +33,11 @@ namespace std {
 アトミックオブジェクトを初期化する
 
 
+## テンプレートパラメータ制約
+- (1) :
+    - C++20 : `atomic&amp;lt;T&amp;gt;::is_always_lock_free`が`true`であること
+
+
 ## 効果
 この関数は、アトミックオブジェクト`object`を値`desired`で非アトミックに初期化する。この関数は、デフォルト構築されたオブジェクトに対して一度だけ呼びださなければならない。変数の初期化中に並行アクセスされた場合、それがアトミックな操作であったとしてもデータ競合を引き起こす。
 
@@ -87,6 +92,12 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013
 
 
+## 関連項目
+- [C++20 ほとんどの`volatile`を非推奨化](/lang/cpp20/cpp20/deprecating_volatile.md.nolink)
+
+
 ## 参照
 - [P0558R1 Resolving `atomic&amp;lt;T&amp;gt;` named base class inconsistencies](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf)
 - [P0883R2 Fixing Atomic Initialization, Rev2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0883r2.pdf)
+- [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
+    - C++20での、`volatile`版への制約追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- condition_variable_anyのwait操作 : 引数順が変更された提案文書を参照に追加</title>
      <link href="https://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait.html"/>
      <id>8e1e6965345d5e10a17c0bbdc0a34b521d0c53b8:reference/condition_variable/condition_variable_any/wait.md</id>
      <updated>2020-11-26T04:50:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/condition_variable/condition_variable_any/wait.md b/reference/condition_variable/condition_variable_any/wait.md
index 15cff6ffc..759d1b43d 100644
--- a/reference/condition_variable/condition_variable_any/wait.md
+++ b/reference/condition_variable/condition_variable_any/wait.md
@@ -181,3 +181,4 @@ process data
 - [LWG Issue 2093. Throws clause of `condition_variable::wait` with predicate](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2093)
 - [LWG Issue 2135. Unclear requirement for exceptions thrown in `condition_variable::wait()`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2135)
 - [P0660R10 Stop Token and Joining Thread, Rev 10](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0660r10.pdf)
+- [P1869R1 Rename `condition_variable_any` interruptible wait methods](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1869r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait_for -- condition_variable_anyのwait操作 : 引数順が変更された提案文書を参照に追加</title>
      <link href="https://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait_for.html"/>
      <id>8e1e6965345d5e10a17c0bbdc0a34b521d0c53b8:reference/condition_variable/condition_variable_any/wait_for.md</id>
      <updated>2020-11-26T04:50:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/condition_variable/condition_variable_any/wait_for.md b/reference/condition_variable/condition_variable_any/wait_for.md
index 03ce231c4..54b0fb60a 100644
--- a/reference/condition_variable/condition_variable_any/wait_for.md
+++ b/reference/condition_variable/condition_variable_any/wait_for.md
@@ -202,3 +202,4 @@ process data
 - [LWG Issue 2093. Throws clause of `condition_variable::wait` with predicate](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2093)
 - [LWG Issue 2135. Unclear requirement for exceptions thrown in `condition_variable::wait()`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2135)
 - [P0660R10 Stop Token and Joining Thread, Rev 10](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0660r10.pdf)
+- [P1869R1 Rename `condition_variable_any` interruptible wait methods](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1869r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait_until -- condition_variable_anyのwait操作 : 引数順が変更された提案文書を参照に追加</title>
      <link href="https://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait_until.html"/>
      <id>8e1e6965345d5e10a17c0bbdc0a34b521d0c53b8:reference/condition_variable/condition_variable_any/wait_until.md</id>
      <updated>2020-11-26T04:50:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/condition_variable/condition_variable_any/wait_until.md b/reference/condition_variable/condition_variable_any/wait_until.md
index bfc26b988..93ef3bc24 100644
--- a/reference/condition_variable/condition_variable_any/wait_until.md
+++ b/reference/condition_variable/condition_variable_any/wait_until.md
@@ -217,3 +217,4 @@ process data
 - [Bug 41861 (DR887) - [DR 887][C++0x] `&amp;lt;condition_variable&amp;gt;` does not use `monotonic_clock`](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=41861)
     - GCC 10から`steady_clock`がサポートされた
 - [P0660R10 Stop Token and Joining Thread, Rev 10](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0660r10.pdf)
+- [P1869R1 Rename `condition_variable_any` interruptible wait methods](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1869r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
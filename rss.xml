<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-07-28T03:38:20.610524</updated>
  <id>0c1f7c3b-ba8c-417e-9a39-8da98e8caca6</id>

  
    <entry>
      <title>basic_const_iterator -- basic_const_iterator : コンストラクタと.base()追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>fb63802526c3daea90356da72e0ed67a8dd05f22:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-07-28T12:33:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index 07c9c7a44..61c588114 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -20,9 +20,8 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
-| [`(constructor)`](basic_const_iterator/op_constructor.md.nolink) | コンストラクタ | C++23 |
-| [`operator=`](basic_const_iterator/op_assign.md.nolink)          | 代入演算子 | C++23 |
-| [`base`](basic_const_iterator/base.md.nolink)                    | 元のイテレータを取得する | C++23 |
+| [`(constructor)`](basic_const_iterator/op_constructor.md) | コンストラクタ | C++23 |
+| [`base`](basic_const_iterator/base.md)                    | 元のイテレータを取得する | C++23 |
 | [`operator*`](basic_const_iterator/op_deref.md.nolink)           | 間接参照演算子 | C++23 |
 | [`operator-&amp;gt;`](basic_const_iterator/op_arrow.md.nolink)          | メンバアクセス演算子 | C++23 |
 | [`operator++`](basic_const_iterator/op_increment.md.nolink)      | イテレータをインクリメントする | C++23 |
@@ -64,7 +63,7 @@ namespace std {
 - それ以外の場合
     - `input_iterator_tag`
 
-## 非メンバ関数
+## 非メンバ（*Hidden friends*）関数
 
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
@@ -75,11 +74,15 @@ namespace std {
 | [`operator+`](basic_const_iterator/op_plus.md.nolink)           | イテレータを進める | C++23 |
 | [`operator-`](basic_const_iterator/op_minus.md.nolink)          | 2つの`basic_const_iterator`の差を求める | C++23 |
 | [`iter_move`](basic_const_iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++23 |
+
+## 非メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------------|-------------|-------|
 | [`make_const_iterator`](make_const_iterator.md.nolink)     | `basic_const_iterator`のヘルパ関数 | C++23 |
 | [`make_const_sentinel`](make_const_sentinel.md.nolink)     | `basic_const_iterator`のヘルパ関数 | C++23 |
 
 ## 例
-（執筆中）
 
 ```cpp example
 #include &amp;lt;iterator&amp;gt;
@@ -101,6 +104,7 @@ int main() {
   //*cit = 0;
 }
 ```
+
 ### 出力
 ```
 1
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- basic_const_iterator : コンストラクタと.base()追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/base.html"/>
      <id>fb63802526c3daea90356da72e0ed67a8dd05f22:reference/iterator/basic_const_iterator/base.md</id>
      <updated>2023-07-28T12:33:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/base.md b/reference/iterator/basic_const_iterator/base.md
new file mode 100644
index 000000000..c8f53374a
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/base.md
@@ -0,0 +1,63 @@
+# base
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr const Iterator&amp;amp; base() const &amp;amp; noexcept;  // (1)
+constexpr Iterator base() &amp;amp;&amp;amp;;  // (2)
+```
+
+## 概要
+
+メンバ変数として保持している、元のイテレータを取得する。
+
+## 戻り値
+
+- (1) : 元のイテレータへの`const`参照を返す。
+- (2) : 元のイテレータをムーブして返す。
+
+## 例
+
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+  
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; *(cit.base()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // 元のイテレータが可変イテレータならば要素を変更可能
+  *(cit.base()) = 0;
+  std::cout &amp;lt;&amp;lt; *(cit.base()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+1
+1
+0
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_const_iterator : コンストラクタと.base()追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_constructor.html"/>
      <id>fb63802526c3daea90356da72e0ed67a8dd05f22:reference/iterator/basic_const_iterator/op_constructor.md</id>
      <updated>2023-07-28T12:33:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_constructor.md b/reference/iterator/basic_const_iterator/op_constructor.md
new file mode 100644
index 000000000..40b7ccc3d
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_constructor.md
@@ -0,0 +1,88 @@
+# コンストラクタ
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr basic_const_iterator() requires default_initializable&amp;lt;Iterator&amp;gt; = default;  // (1)
+
+constexpr basic_const_iterator(Iterator current);                                     // (2)
+
+template&amp;lt;convertible_to&amp;lt;Iterator&amp;gt; U&amp;gt;
+constexpr basic_const_iterator(basic_const_iterator&amp;lt;U&amp;gt; current);                      // (3)
+
+template&amp;lt;different-from&amp;lt;basic_const_iterator&amp;gt; T&amp;gt;
+  requires convertible_to&amp;lt;T, Iterator&amp;gt;
+constexpr basic_const_iterator(T&amp;amp;&amp;amp; current);                                          // (4)
+```
+* default_initializable[link /reference/concepts/default_initializable.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* different-from[link /reference/ranges/different-from.md]
+
+## 概要
+
+`basic_const_iterator`オブジェクトを構築する。
+
+## 効果
+
+ラップするイテレータを`current_`というメンバに保持するとして
+
+- (1) : `current_`をデフォルト構築する
+- (2) : `current_`を`std::move(current)`で初期化する
+- (3) : `current_`を`std::move(current.current_)`で初期化する
+- (4) : `current_`を`std::forward&amp;lt;T&amp;gt;(current)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+// 例示のための単純なイテレータラッパ、ラップするイテレータへの暗黙変換を提供する
+template&amp;lt;typename I&amp;gt;
+struct wrap_iter {
+  I it;
+
+  operator I() const {
+    return it;
+  }
+};
+
+int main() {
+  using I = std::vector&amp;lt;int&amp;gt;::iterator;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  // (1) デフォルトコンストラクタ
+  std::basic_const_iterator&amp;lt;I&amp;gt; ci1{};
+
+  // (2) イテレータから構築
+  std::basic_const_iterator ci2{vec.begin()};
+
+  // (3) 別のbasic_const_iteratorから変換して構築（コピーコンストラクタ）
+  std::basic_const_iterator&amp;lt;I&amp;gt; ci3{ci2};
+
+  wrap_iter wrap{ci2};
+  // (4) Iteratorに変換可能な型から構築
+  std::basic_const_iterator&amp;lt;I&amp;gt; ci4{wrap};
+}
+```
+* basic_const_iterator[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- basic_const_iterator : コンストラクタと.base()追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/base.html"/>
      <id>fb63802526c3daea90356da72e0ed67a8dd05f22:reference/iterator/counted_iterator/base.md</id>
      <updated>2023-07-28T12:33:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/base.md b/reference/iterator/counted_iterator/base.md
index b70286fa7..f66dcb947 100644
--- a/reference/iterator/counted_iterator/base.md
+++ b/reference/iterator/counted_iterator/base.md
@@ -39,7 +39,7 @@ int main() {
   std::cout &amp;lt;&amp;lt; *(ci.base());
 }
 ```
-* count[color ff0000]
+* base[color ff0000]
 * ranges::begin[link /reference/ranges/begin.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- Merge pull request #1163 from sf624/fix/unordered_op_at_exception</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_at.html"/>
      <id>2df8781afd4795ff885d5c7306ab08fd1e79414a:reference/unordered_map/unordered_map/op_at.md</id>
      <updated>2023-07-28T11:19:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/op_at.md b/reference/unordered_map/unordered_map/op_at.md
index 8fcae8789..a1c7fbebe 100644
--- a/reference/unordered_map/unordered_map/op_at.md
+++ b/reference/unordered_map/unordered_map/op_at.md
@@ -17,8 +17,7 @@ T&amp;amp; operator[](key_type&amp;amp;&amp;amp; x);
 キー`x`に対応する値を返す。対応する要素が存在しない場合は、要素を値初期化して参照を返す。
 
 ## 例外
-投げない。
-
+ハッシュ関数以外から例外が投げられた場合には、対応する要素がない場合の新規要素の挿入処理は実施されない。
 
 ## 計算量
 - 平均： 定数時間
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- fix: unordered_mapのoperator[]の例外仕様を修正</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_at.html"/>
      <id>206dcffbd83c1b4e070233ee321bbe16b8bad024:reference/unordered_map/unordered_map/op_at.md</id>
      <updated>2023-07-28T00:21:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/op_at.md b/reference/unordered_map/unordered_map/op_at.md
index 8fcae8789..a1c7fbebe 100644
--- a/reference/unordered_map/unordered_map/op_at.md
+++ b/reference/unordered_map/unordered_map/op_at.md
@@ -17,8 +17,7 @@ T&amp;amp; operator[](key_type&amp;amp;&amp;amp; x);
 キー`x`に対応する値を返す。対応する要素が存在しない場合は、要素を値初期化して参照を返す。
 
 ## 例外
-投げない。
-
+ハッシュ関数以外から例外が投げられた場合には、対応する要素がない場合の新規要素の挿入処理は実施されない。
 
 ## 計算量
 - 平均： 定数時間
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Shun Fujioka</name>
        <email>shun.fujioka624@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- Merge pull request #1162 from sf624/fix/map_op_at</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_at.html"/>
      <id>4be1d11afa0367747c309d97a7de7dd5c262e581:reference/map/map/op_at.md</id>
      <updated>2023-07-27T16:17:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_at.md b/reference/map/map/op_at.md
index 5870ff609..340d961d1 100644
--- a/reference/map/map/op_at.md
+++ b/reference/map/map/op_at.md
@@ -14,7 +14,7 @@ T&amp;amp; operator[](key_type&amp;amp;&amp;amp; x);      // (2) C++11
 
 
 ## 戻り値
-キー`x`に対応する値を返す。対応する要素が存在しない場合は、要素をデフォルト構築して参照を返す。
+キー`x`に対応する値を返す。対応する要素が存在しない場合は、要素を値初期化して参照を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- Merge pull request #1162 from sf624/fix/map_op_at</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_at.html"/>
      <id>4be1d11afa0367747c309d97a7de7dd5c262e581:reference/unordered_map/unordered_map/op_at.md</id>
      <updated>2023-07-27T16:17:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/op_at.md b/reference/unordered_map/unordered_map/op_at.md
index d4f1bdcd7..8fcae8789 100644
--- a/reference/unordered_map/unordered_map/op_at.md
+++ b/reference/unordered_map/unordered_map/op_at.md
@@ -14,8 +14,7 @@ T&amp;amp; operator[](key_type&amp;amp;&amp;amp; x);
 要素へのアクセス
 
 ## 戻り値
-キーxに対応する値を返す。
-オブジェクトが存在しないときは、新しい要素が追加される。
+キー`x`に対応する値を返す。対応する要素が存在しない場合は、要素を値初期化して参照を返す。
 
 ## 例外
 投げない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_const_iterator -- リンク修正と不可視文字削除</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>ec6330712a56da138e4b977ca03476a72fa80801:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-07-27T14:23:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index 42043ad02..07c9c7a44 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -36,7 +36,7 @@ namespace std {
 | [`operator&amp;lt;`](basic_const_iterator/op_less.md.nolink)           | 左辺が右辺より小さいかの判定を行う | C++23 |
 | [`operator&amp;lt;=`](basic_const_iterator/op_less_equal.md.nolink)    | 左辺が右辺以下かの判定を行う | C++23 |
 | [`operator&amp;gt;`](basic_const_iterator/op_greater.md.nolink)        | 左辺が右辺より大きいかの判定を行う | C++23 |
-| [`operator&amp;gt;=`](basic_const_iterator/op_greater_equal.md) | 左辺が右辺以上かの判定を行う | C++23 |
+| [`operator&amp;gt;=`](basic_const_iterator/op_greater_equal.md.nolink) | 左辺が右辺以上かの判定を行う | C++23 |
 | [`operator&amp;lt;=&amp;gt;`](basic_const_iterator/op_compare_3way.md.nolink)           | 三方比較を行う | C++23 |
 | [`operator-`](basic_const_iterator/op_minus.md.nolink)          | 2つの`basic_const_iterator`の差を求める | C++23 |
 | [`operator+`](basic_const_iterator/op_plus.md.nolink)           | イテレータを進める | C++23 |
@@ -47,7 +47,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
 | `iterator_concept` | `Iterator`がモデルとなる最も強いイテレータコンセプトに対応する[イテレータタグ型](/reference/iterator/iterator_tag.md) | C++23 |
-| `iterator_category` | `Iterator`が[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルである場合にのみ[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;​Iterator&amp;gt;​::​iterator_category`として定義される | C++23 |
+| `iterator_category` | `Iterator`が[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルである場合にのみ[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category`として定義される | C++23 |
 | `value_type` | [`iter_value_t`](/reference/iterator/iter_value_t.md)`&amp;lt;Iterator&amp;gt;` | C++23 |
 | `difference_type` | [`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;Iterator&amp;gt;` | C++23 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-26T14:46:26.065764</updated>
  <id>016c2e11-a152-40f9-8caa-1547a8bb8085</id>

  
    <entry>
      <title>remove -- algorithm/remove : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_remove.html"/>
      <id>b810699ddaff07d777dd421a8600be32cb5df601:reference/algorithm/ranges_remove.md</id>
      <updated>2025-05-26T19:08:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_remove.md b/reference/algorithm/ranges_remove.md
index 515d89247..5a3564710 100644
--- a/reference/algorithm/ranges_remove.md
+++ b/reference/algorithm/ranges_remove.md
@@ -16,6 +16,16 @@ namespace std::ranges {
            S last,
            const T&amp;amp; value,
            Proj proj = {}); // (1) C++20
+  template &amp;lt;permutable I,
+            sentinel_for&amp;lt;I&amp;gt; S,
+            class Proj = identity,
+            class T = projected_value_t&amp;lt;I, Proj&amp;gt;&amp;gt;
+    requires indirect_binary_predicate&amp;lt;ranges::equal_to, projected&amp;lt;I, Proj&amp;gt;, const T*&amp;gt;
+  constexpr subrange&amp;lt;I&amp;gt;
+    remove(I first,
+           S last,
+           const T&amp;amp; value,
+           Proj proj = {}); // (1) C++26
 
   template &amp;lt;forward_range R,
             class T,
@@ -30,6 +40,19 @@ namespace std::ranges {
     remove(R&amp;amp;&amp;amp; r,
            const T&amp;amp; value,
            Proj proj = {}); // (2) C++20
+  template &amp;lt;forward_range R,
+            class Proj = identity,
+            class T = projected_value_t&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt;
+    requires permutable&amp;lt;iterator_t&amp;lt;R&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+             indirect_binary_predicate&amp;lt;
+               ranges::equal_to,
+               projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;,
+               const T*
+             &amp;gt;
+  constexpr borrowed_subrange_t&amp;lt;R&amp;gt;
+    remove(R&amp;amp;&amp;amp; r,
+           const T&amp;amp; value,
+           Proj proj = {}); // (2) C++26
 }
 ```
 * permutable[link /reference/iterator/permutable.md]
@@ -67,12 +90,18 @@ namespace std::ranges {
 
 
 ## 備考
-有効な要素を範囲の前方に集める処理には、ムーブを使用する。
-
-取り除いた要素の先頭を指すイテレータを`ret`とし、範囲`[ret, last)`の各要素には、有効な要素からムーブされた値が設定される。それらの値は、「有効だが未規定な値」となる。
+- 有効な要素を範囲の前方に集める処理には、ムーブが使用される
+    - 取り除いた要素の先頭を指すイテレータを`ret`とし、範囲`[ret, last)`の各要素には、有効な要素からムーブされた値が設定される。それらの値は、「有効だが未規定な値」となる
+- (1), (2) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::vector&amp;lt;T&amp;gt; v;
+        auto sr = std::ranges::remove(v, {a, b});
+        ```
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -101,17 +130,57 @@ int main() {
 ```
 * result[color ff0000]
 * std::ranges::remove[color ff0000]
-* v.erase[color ff0000][link /reference/vector/vector/erase.md]
+* v.erase[link /reference/vector/vector/erase.md]
 * std::ranges::subrange[link /reference/ranges/subrange.md]
 * Erase-remove イディオム[link https://ja.wikibooks.org/wiki/More_C%2B%2B_Idioms/%E6%B6%88%E5%8E%BB%E3%83%BB%E5%89%8A%E9%99%A4(Erase-Remove)]
 
-### 出力
+#### 出力
 ```
 2,3,2,
 size before: 5
 size after: 3
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v = {
+    {1, 2},
+    {3, 4},
+    {5, 6},
+    {1, 2},
+  };
+
+  // 値{1, 2}を除去する
+  std::ranges::subrange sr = std::ranges::remove(v, {1, 2});
+  v.erase(sr.begin(), v.end());
+
+  for (const Point&amp;amp; p : v) {
+    std::cout &amp;lt;&amp;lt; p.x &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; p.y &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::remove[color ff0000]
+* v.erase[link /reference/vector/vector/erase.md]
+* std::ranges::subrange[link /reference/ranges/subrange.md]
+
+#### 出力
+```
+3,4
+5,6
+```
+
 ## バージョン
 ### 言語
 - C++20
@@ -124,3 +193,5 @@ size after: 3
 
 ## 参照
 - [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove -- algorithm/remove : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/remove.html"/>
      <id>b810699ddaff07d777dd421a8600be32cb5df601:reference/algorithm/remove.md</id>
      <updated>2025-05-26T19:08:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/remove.md b/reference/algorithm/remove.md
index fbbca8269..425eb8894 100644
--- a/reference/algorithm/remove.md
+++ b/reference/algorithm/remove.md
@@ -5,24 +5,41 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class ForwardIterator, class T&amp;gt;
+  template &amp;lt;class ForwardIterator,
+            class T&amp;gt;
   ForwardIterator
     remove(ForwardIterator first,
            ForwardIterator last,
            const T&amp;amp; value);        // (1) C++03
-
-  template &amp;lt;class ForwardIterator, class T&amp;gt;
+  template &amp;lt;class ForwardIterator,
+            class T&amp;gt;
   constexpr ForwardIterator
     remove(ForwardIterator first,
            ForwardIterator last,
            const T&amp;amp; value);        // (1) C++20
+  template &amp;lt;class ForwardIterator,
+            class T = typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::value_type&amp;gt;
+  constexpr ForwardIterator
+    remove(ForwardIterator first,
+           ForwardIterator last,
+           const T&amp;amp; value);        // (1) C++26
 
-  template &amp;lt;class ExecutionPolicy, class ForwardIterator, class T&amp;gt;
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class T&amp;gt;
   ForwardIterator
     remove(ExecutionPolicy&amp;amp;&amp;amp; exec,
            ForwardIterator first,
            ForwardIterator last,
            const T&amp;amp; value);        // (2) C++17
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class T = typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::value_type&amp;gt;
+  ForwardIterator
+    remove(ExecutionPolicy&amp;amp;&amp;amp; exec,
+           ForwardIterator first,
+           ForwardIterator last,
+           const T&amp;amp; value);        // (2) C++26
 }
 ```
 
@@ -51,12 +68,18 @@ namespace std {
 
 
 ## 備考
-有効な要素を範囲の前方に集める処理には、ムーブを使用する。
-
-取り除いた要素の先頭を指すイテレータを`ret`とし、範囲`[ret, last)`の各要素には、有効な要素からムーブされた値が設定される。それらの値は、「有効だが未規定な値」となる。
+- 有効な要素を範囲の前方に集める処理には、ムーブが使用される
+    - 取り除いた要素の先頭を指すイテレータを`ret`とし、範囲`[ret, last)`の各要素には、有効な要素からムーブされた値が設定される。それらの値は、「有効だが未規定な値」となる
+- (1), (2) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::vector&amp;lt;T&amp;gt; v;
+        auto it = std::remove(v.begin(), v.end(), {a, b});
+        ```
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -83,16 +106,55 @@ int main() {
 ```
 * result[color ff0000]
 * std::remove[color ff0000]
-* v.erase[color ff0000][link /reference/vector/vector/erase.md]
+* v.erase[link /reference/vector/vector/erase.md]
 * Erase-remove イディオム[link https://ja.wikibooks.org/wiki/More_C%2B%2B_Idioms/%E6%B6%88%E5%8E%BB%E3%83%BB%E5%89%8A%E9%99%A4(Erase-Remove)]
 
-### 出力
+#### 出力
 ```
 2,3,2,
 size before: 5
 size after: 3
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v = {
+    {1, 2},
+    {3, 4},
+    {5, 6},
+    {1, 2},
+  };
+
+  // 値{1, 2}を除去する
+  auto it = std::remove(v.begin(), v.end(), {1, 2});
+  v.erase(it, v.end());
+
+  for (const Point&amp;amp; p : v) {
+    std::cout &amp;lt;&amp;lt; p.x &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; p.y &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::remove[color ff0000]
+* v.erase[link /reference/vector/vector/erase.md]
+
+#### 出力
+```
+3,4
+5,6
+```
+
 
 ## 実装例
 ```cpp
@@ -113,3 +175,5 @@ ForwardIterator remove(ForwardIterator first, ForwardIterator last, const T&amp;amp; val
 - [LWG Issue 2110. `remove` can&amp;#39;t swap but note says it might](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2110)
     - C++11までのこのアルゴリズムは、要素の移動にswap操作が行われるかもしれない、と書いていた。だが、このアルゴリズムの要件は`MoveAssignable`のみであるため、swapはできない。そのため、C++14からは、ムーブのみで要素の移動が行われるようになった。
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fill_n -- algorithm/fill_n : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/fill_n.html"/>
      <id>e463c2f1b30245bf44d5d57c3eaa3cfb0e5dbb9a:reference/algorithm/fill_n.md</id>
      <updated>2025-05-26T18:42:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/fill_n.md b/reference/algorithm/fill_n.md
index d737860ca..d79e725d8 100644
--- a/reference/algorithm/fill_n.md
+++ b/reference/algorithm/fill_n.md
@@ -5,31 +5,53 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class OutputIterator, class Size, class T&amp;gt;
+  template &amp;lt;class OutputIterator,
+            class Size,
+            class T&amp;gt;
   void
     fill_n(OutputIterator first,
            Size n,
            const T&amp;amp; value);        // (1) C++03
-
-  template &amp;lt;class OutputIterator, class Size, class T&amp;gt;
+  template &amp;lt;class OutputIterator,
+            class Size,
+            class T&amp;gt;
   OutputIterator
     fill_n(OutputIterator first,
            Size n,
            const T&amp;amp; value);        // (1) C++11
-
-  template &amp;lt;class OutputIterator, class Size, class T&amp;gt;
+  template &amp;lt;class OutputIterator,
+            class Size,
+            class T&amp;gt;
   constexpr OutputIterator
     fill_n(OutputIterator first,
            Size n,
            const T&amp;amp; value);        // (1) C++20
+  template &amp;lt;class OutputIterator,
+            class Size,
+            class T = typename iterator_traits&amp;lt;OutputIterator&amp;gt;::value_type&amp;gt;
+  constexpr OutputIterator
+    fill_n(OutputIterator first,
+           Size n,
+           const T&amp;amp; value);        // (1) C++26
 
-  template &amp;lt;class ExecutionPolicy, class ForwardIterator,
-            class Size, class T&amp;gt;
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class Size,
+            class T&amp;gt;
   ForwardIterator
     fill_n(ExecutionPolicy&amp;amp;&amp;amp; exec,
            ForwardIterator first,
            Size n,
            const T&amp;amp; value);        // (2) C++17
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class Size,
+            class T = typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::value_type&amp;gt;
+  ForwardIterator
+    fill_n(ExecutionPolicy&amp;amp;&amp;amp; exec,
+           ForwardIterator first,
+           Size n,
+           const T&amp;amp; value);        // (2) C++26
 }
 ```
 
@@ -37,7 +59,7 @@ namespace std {
 イテレータ範囲`[first, first + n)`のすべての要素に指定された値を書き込む。
 
 
-## 要件
+## 適格要件
 - `value` は `output iterator` へ書き込み可能でなければならない。
 - `Size` は `integral type` に変換可能でなければならない。
 
@@ -57,24 +79,69 @@ namespace std {
 `n` が 1 以上の場合は `n` 回、そうでない場合は 0 回の代入を行う。
 
 
+## 備考
+- (1), (2) :
+    - C++26 : `value`パラメータとして波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::vector&amp;lt;T&amp;gt; v;
+        std::fill_n(v.begin(), n, {a, b});
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 
 int main() {
-  // 3 を出力しまくる
+  // 値3を10個出力する
   std::fill_n(std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;), 10, 3);
 }
 ```
 * std::fill_n[color ff0000]
 
-### 出力
+#### 出力
 ```
 3,3,3,3,3,3,3,3,3,3,
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v(5);
+
+  // 先頭3個の要素を値{1, 2}で埋める
+  std::fill_n(v.begin(), 3, {1, 2});
+
+  for (const Point&amp;amp; p : v) {
+    std::cout &amp;lt;&amp;lt; p.x &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; p.y &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::fill_n[color ff0000]
+
+#### 出力
+```
+1,2
+1,2
+1,2
+0,0
+0,0
+```
+
 
 ## 実装例
 ```cpp
@@ -107,3 +174,5 @@ fill_n(OutputIterator first, Size n, const T&amp;amp; value) {
 	戻り値が追加されるきっかけとなったレポート
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
 - [P0467R2 Iterator Concerns for Parallel Algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0467r2.html)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fill_n -- algorithm/fill_n : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fill_n.html"/>
      <id>e463c2f1b30245bf44d5d57c3eaa3cfb0e5dbb9a:reference/algorithm/ranges_fill_n.md</id>
      <updated>2025-05-26T18:42:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fill_n.md b/reference/algorithm/ranges_fill_n.md
index 4ccd268ed..6a89db71c 100644
--- a/reference/algorithm/ranges_fill_n.md
+++ b/reference/algorithm/ranges_fill_n.md
@@ -6,9 +6,19 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;class T, output_iterator&amp;lt;const T&amp;amp;&amp;gt; O&amp;gt;
+  template &amp;lt;class T,
+            output_iterator&amp;lt;const T&amp;amp;&amp;gt; O&amp;gt;
   constexpr O
-    fill_n(O first, iter_difference_t&amp;lt;O&amp;gt; n, const T&amp;amp; value); // (1) C++20
+    fill_n(O first,
+           iter_difference_t&amp;lt;O&amp;gt; n,
+           const T&amp;amp; value);   // (1) C++20
+  template &amp;lt;class O,
+            class T = iter_value_t&amp;lt;O&amp;gt;&amp;gt;
+    requires output_iterator&amp;lt;O, const T&amp;amp;&amp;gt;
+  constexpr O
+    fill_n(O first,
+           iter_difference_t&amp;lt;O&amp;gt; n,
+           const T&amp;amp; value);   // (1) C++26
 }
 ```
 * output_iterator[link /reference/iterator/output_iterator.md]
@@ -30,24 +40,69 @@ namespace std::ranges {
 `n` が 1 以上の場合は `n` 回、そうでない場合は 0 回の代入を行う。
 
 
+## 備考
+- (1) :
+    - C++26 : `value`パラメータとして波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::vector&amp;lt;T&amp;gt; v;
+        std::ranges::fill_n(v.begin(), n, {a, b});
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 
 int main() {
-  // 3 を10回出力する
+  // 値3を10個出力する
   std::ranges::fill_n(std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;), 10, 3);
 }
 ```
 * std::ranges::fill_n[color ff0000]
 
-### 出力
+#### 出力
 ```
 3,3,3,3,3,3,3,3,3,3,
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v(5);
+
+  // 先頭3個の要素を値{1, 2}で埋める
+  std::ranges::fill_n(v.begin(), 3, {1, 2});
+
+  for (const Point&amp;amp; p : v) {
+    std::cout &amp;lt;&amp;lt; p.x &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; p.y &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::fill_n[color ff0000]
+
+#### 出力
+```
+1,2
+1,2
+1,2
+0,0
+0,0
+```
+
 
 ## バージョン
 ### 言語
@@ -61,3 +116,5 @@ int main() {
 
 ## 参照
 - [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fill -- algorithm/fill : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/fill.html"/>
      <id>319fdf9e7686cad754111f1a91b35f9c965273b3:reference/algorithm/fill.md</id>
      <updated>2025-05-26T18:30:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/fill.md b/reference/algorithm/fill.md
index d37db4a8e..4828c5f28 100644
--- a/reference/algorithm/fill.md
+++ b/reference/algorithm/fill.md
@@ -5,22 +5,41 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class ForwardIterator, class T&amp;gt;
-  void fill(ForwardIterator first,
-            ForwardIterator last,
-            const T&amp;amp; value);                  // (1) C++03
-
-  template &amp;lt;class ForwardIterator, class T&amp;gt;
-  constexpr void fill(ForwardIterator first,
-                      ForwardIterator last,
-                      const T&amp;amp; value);        // (1) C++20
-
-  template &amp;lt;class ExecutionPolicy, class ForwardIterator,
+  template &amp;lt;class ForwardIterator,
+            class T&amp;gt;
+  void
+    fill(ForwardIterator first,
+         ForwardIterator last,
+         const T&amp;amp; value);        // (1) C++03
+  template &amp;lt;class ForwardIterator,
             class T&amp;gt;
-  void fill(ExecutionPolicy&amp;amp;&amp;amp; exec,
-            ForwardIterator first,
-            ForwardIterator last,
-            const T&amp;amp; value);                  // (2) C++17
+  constexpr void
+    fill(ForwardIterator first,
+         ForwardIterator last,
+         const T&amp;amp; value);        // (1) C++20
+  template &amp;lt;class ForwardIterator,
+            class T = typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::value_type&amp;gt;
+  constexpr void
+    fill(ForwardIterator first,
+         ForwardIterator last,
+         const T&amp;amp; value);        // (1) C++20
+
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class T&amp;gt;
+  void
+    fill(ExecutionPolicy&amp;amp;&amp;amp; exec,
+         ForwardIterator first,
+         ForwardIterator last,
+         const T&amp;amp; value);        // (2) C++17
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator,
+            class T = typename iterator_traits&amp;lt;ForwardIterator&amp;gt;::value_type&amp;gt;
+  void
+    fill(ExecutionPolicy&amp;amp;&amp;amp; exec,
+         ForwardIterator first,
+         ForwardIterator last,
+         const T&amp;amp; value);        // (2) C++26
 }
 ```
 
@@ -28,7 +47,7 @@ namespace std {
 イテレータ範囲`[first, last)`のすべての要素に指定された値を書き込む。
 
 
-## 要件
+## 適格要件
 `value` は `output iterator` へ書き込み可能でなければならない
 
 
@@ -40,7 +59,17 @@ namespace std {
 正確に `last - first` 回の代入を行う
 
 
+## 備考
+- (1), (2) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::vector&amp;lt;T&amp;gt; v;
+        std::fill(v.begin(), v.end(), {a, b});
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -57,11 +86,45 @@ int main() {
 ```
 * std::fill[color ff0000]
 
-### 出力
+#### 出力
 ```
 3,3,3,3,3,
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v(5);
+
+  std::fill(v.begin(), v.end(), {1, 2});
+
+  for (const Point&amp;amp; p : v) {
+    std::cout &amp;lt;&amp;lt; p.x &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; p.y &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::fill[color ff0000]
+
+#### 出力
+```
+1,2
+1,2
+1,2
+1,2
+1,2
+```
+
 
 ## 実装例
 ```cpp
@@ -75,3 +138,5 @@ void fill(ForwardIterator first, ForwardIterator last, const T&amp;amp; value) {
 
 ## 参照
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fill -- algorithm/fill : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fill.html"/>
      <id>319fdf9e7686cad754111f1a91b35f9c965273b3:reference/algorithm/ranges_fill.md</id>
      <updated>2025-05-26T18:30:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fill.md b/reference/algorithm/ranges_fill.md
index 4726a288f..2b28d0a90 100644
--- a/reference/algorithm/ranges_fill.md
+++ b/reference/algorithm/ranges_fill.md
@@ -11,12 +11,22 @@ namespace std::ranges {
             sentinel_for&amp;lt;O&amp;gt; S&amp;gt;
   constexpr O
     fill(O first, S last, const T&amp;amp; value); // (1) C++20
+  template &amp;lt;class I,
+            sentinel_for&amp;lt;O&amp;gt; S,
+            class T = iter_value_t&amp;lt;O&amp;gt;&amp;gt;
+    requires output_iterator&amp;lt;O, const T&amp;amp;&amp;gt;
+  constexpr O
+    fill(O first, S last, const T&amp;amp; value); // (1) C++26
 
   template &amp;lt;class T,
             output_range&amp;lt;const T&amp;amp;&amp;gt; R&amp;gt;
   constexpr borrowed_iterator_t&amp;lt;R&amp;gt;
     fill(R&amp;amp;&amp;amp; r, const T&amp;amp; value);           // (2) C++20
-
+  template &amp;lt;class R,
+            class T = range_value_t&amp;lt;R&amp;gt;&amp;gt;
+    requires output_range&amp;lt;R, const T&amp;amp;&amp;gt;
+  constexpr borrowed_iterator_t&amp;lt;R&amp;gt;
+    fill(R&amp;amp;&amp;amp; r, const T&amp;amp; value);           // (2) C++26
 }
 ```
 * output_iterator[link /reference/iterator/output_iterator.md]
@@ -43,7 +53,17 @@ namespace std::ranges {
 正確に `last - first` 回の代入を行う
 
 
+## 備考
+- (1), (2) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::vector&amp;lt;T&amp;gt; v;
+        std::ranges::fill(v, {a, b});
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -62,11 +82,45 @@ int main() {
 ```
 * std::ranges::fill[color ff0000]
 
-### 出力
+#### 出力
 ```
 3,3,3,3,3,
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v(5);
+
+  std::ranges::fill(v.begin(), v.end(), {1, 2});
+
+  for (const Point&amp;amp; p : v) {
+    std::cout &amp;lt;&amp;lt; p.x &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; p.y &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::fill[color ff0000]
+
+#### 出力
+```
+1,2
+1,2
+1,2
+1,2
+1,2
+```
+
 ## バージョン
 ### 言語
 - C++20
@@ -79,3 +133,5 @@ int main() {
 
 ## 参照
 - [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace_copy -- ranges::replace_copy : サンプルコードのミスを修正 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_replace_copy.html"/>
      <id>a2bacbe63b0c1af074a06d1dbfca46289ab492d3:reference/algorithm/ranges_replace_copy.md</id>
      <updated>2025-05-26T17:15:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_replace_copy.md b/reference/algorithm/ranges_replace_copy.md
index fc6c6e3f6..9630d53bd 100644
--- a/reference/algorithm/ranges_replace_copy.md
+++ b/reference/algorithm/ranges_replace_copy.md
@@ -123,7 +123,7 @@ namespace std::ranges {
     - C++26 : 引数として波カッコ初期化`{}`を受け付ける
         ```cpp
         std::vector&amp;lt;T&amp;gt; v;
-        std::ranges::replace_copy_if(v, result, {a, b}, {c, d});
+        std::ranges::replace_copy(v, result, {a, b}, {c, d});
         ```
 
 
@@ -176,9 +176,8 @@ int main() {
   };
 
   // 値が{1, 2}の要素をすべて{9, 9}に置き換えたものを出力する
-  std::replace_copy(
-    v.begin(),
-    v.end(),
+  std::ranges::replace_copy(
+    v,
     std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;\n&amp;#34;),
     {1, 2},
     {9, 9}
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace_copy -- replace_copy(_if) : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_replace_copy.html"/>
      <id>4c8f46515766f4d4dab7f34ad65e0675ce966c37:reference/algorithm/ranges_replace_copy.md</id>
      <updated>2025-05-26T17:12:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_replace_copy.md b/reference/algorithm/ranges_replace_copy.md
index 108231a70..fc6c6e3f6 100644
--- a/reference/algorithm/ranges_replace_copy.md
+++ b/reference/algorithm/ranges_replace_copy.md
@@ -25,6 +25,25 @@ namespace std::ranges {
                  const T1&amp;amp; old_value,
                  const T2&amp;amp; new_value,
                  Proj proj = {}); // (1) C++20
+  template &amp;lt;input_iterator I,
+            sentinel_for&amp;lt;I&amp;gt; S,
+            class O,
+            class Proj = identity,
+            class T1 = projected_value_t&amp;lt;I, Proj&amp;gt;,
+            class T2 = iter_value_t&amp;lt;O&amp;gt;&amp;gt;
+    requires indirectly_copyable&amp;lt;I, O&amp;gt; &amp;amp;&amp;amp;
+             indirect_binary_predicate&amp;lt;
+               ranges::equal_to,
+               projected&amp;lt;I, Proj&amp;gt;,
+               const T1*
+             &amp;gt;
+  constexpr replace_copy_result&amp;lt;I, O&amp;gt;
+    replace_copy(I first,
+                 S last,
+                 O result,
+                 const T1&amp;amp; old_value,
+                 const T2&amp;amp; new_value,
+                 Proj proj = {}); // (1) C++26
 
   template &amp;lt;input_range R,
             class T1,
@@ -36,13 +55,32 @@ namespace std::ranges {
                ranges::equal_to,
                projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;,
                const T1*
-             &amp;gt;
+             &amp;gt; &amp;amp;&amp;amp;
+             output_iterator&amp;lt;O, const T2&amp;amp;&amp;gt;
   constexpr replace_copy_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
     replace_copy(R&amp;amp;&amp;amp; r,
                  O result,
                  const T1&amp;amp; old_value,
                  const T2&amp;amp; new_value,
                  Proj proj = {}); // (2) C++20
+  template &amp;lt;input_range R,
+            class O,
+            class Proj = identity,
+            class T1 = projected_value_t&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;,
+            class T2 = iter_value_t&amp;lt;O&amp;gt;&amp;gt;
+    requires indirectly_copyable&amp;lt;iterator_t&amp;lt;R&amp;gt;, O&amp;gt; &amp;amp;&amp;amp;
+             indirect_binary_predicate&amp;lt;
+               ranges::equal_to,
+               projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;,
+               const T1*
+             &amp;gt; &amp;amp;&amp;amp;
+             output_iterator&amp;lt;O, const T2&amp;amp;&amp;gt;
+  constexpr replace_copy_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+    replace_copy(R&amp;amp;&amp;amp; r,
+                 O result,
+                 const T1&amp;amp; old_value,
+                 const T2&amp;amp; new_value,
+                 Proj proj = {}); // (2) C++26
 }
 ```
 * input_iterator[link /reference/iterator/input_iterator.md]
@@ -80,7 +118,17 @@ namespace std::ranges {
 正確に `last - first` 回の比較を行う
 
 
+## 備考
+- (1), (2) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::vector&amp;lt;T&amp;gt; v;
+        std::ranges::replace_copy_if(v, result, {a, b}, {c, d});
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -96,11 +144,57 @@ int main() {
 ```
 * std::ranges::replace_copy[color ff0000]
 
-### 出力
+#### 出力
 ```
 3,10,2,10,2,
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Point&amp;amp; p) {
+  return os &amp;lt;&amp;lt; p.x &amp;lt;&amp;lt; &amp;#39;,&amp;#39; &amp;lt;&amp;lt; p.y &amp;lt;&amp;lt; std::endl;
+}
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v = {
+    {1, 2},
+    {3, 4},
+    {5, 6},
+    {1, 2},
+  };
+
+  // 値が{1, 2}の要素をすべて{9, 9}に置き換えたものを出力する
+  std::replace_copy(
+    v.begin(),
+    v.end(),
+    std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;\n&amp;#34;),
+    {1, 2},
+    {9, 9}
+  );
+}
+```
+* std::ranges::replace_copy[color ff0000]
+
+#### 出力
+```
+9,9
+3,4
+5,6
+9,9
+```
+
 ## バージョン
 ### 言語
 - C++20
@@ -113,3 +207,5 @@ int main() {
 
 ## 参照
 - [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace_copy_if -- replace_copy(_if) : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_replace_copy_if.html"/>
      <id>4c8f46515766f4d4dab7f34ad65e0675ce966c37:reference/algorithm/ranges_replace_copy_if.md</id>
      <updated>2025-05-26T17:12:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_replace_copy_if.md b/reference/algorithm/ranges_replace_copy_if.md
index 3d6e5bbe1..75cd00256 100644
--- a/reference/algorithm/ranges_replace_copy_if.md
+++ b/reference/algorithm/ranges_replace_copy_if.md
@@ -20,6 +20,22 @@ namespace std::ranges {
                     Pred pred,
                     const T&amp;amp; new_value,
                     Proj proj = {}); // (1) C++20
+  template &amp;lt;input_iterator I,
+            sentinel_for&amp;lt;I&amp;gt; S,
+            class O,
+            class T = iter_value_t&amp;lt;O&amp;gt;,
+            class Proj = identity,
+            indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    requires
+      indirectly_copyable&amp;lt;I, O&amp;gt; &amp;amp;&amp;amp;
+      output_iterator&amp;lt;O, const T&amp;amp;&amp;gt;
+  constexpr replace_copy_if_result&amp;lt;I, O&amp;gt;
+    replace_copy_if(I first,
+                    S last,
+                    O result,
+                    Pred pred,
+                    const T&amp;amp; new_value,
+                    Proj proj = {}); // (1) C++26
 
   template &amp;lt;input_range R,
             class T,
@@ -33,6 +49,20 @@ namespace std::ranges {
                     Pred pred,
                     const T&amp;amp; new_value,
                     Proj proj = {}); // (2) C++20
+  template &amp;lt;input_range R,
+            class O,
+            class T = iter_value_t&amp;lt;O&amp;gt;,
+            class Proj = identity,
+            indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+    requires
+      indirectly_copyable&amp;lt;iterator_t&amp;lt;R&amp;gt;, O&amp;gt; &amp;amp;&amp;amp;
+      output_iterator&amp;lt;O, const T&amp;amp;&amp;gt;
+  constexpr replace_copy_if_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, O&amp;gt;
+    replace_copy_if(R&amp;amp;&amp;amp; r,
+                    O result,
+                    Pred pred,
+                    const T&amp;amp; new_value,
+                    Proj proj = {}); // (2) C++26
 }
 ```
 * input_iterator[link /reference/iterator/input_iterator.md]
@@ -69,7 +99,17 @@ namespace std::ranges {
 正確に `last - first` 回の述語の適用を行う
 
 
+## 備考
+- (1), (2) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::vector&amp;lt;T&amp;gt; v;
+        std::ranges::replace_copy_if(v, result, pred, {a, b});
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -80,16 +120,65 @@ int main() {
   std::vector&amp;lt;int&amp;gt; v = { 3,1,2,1,2 };
 
   // 奇数の要素を全部 10 に置き換えたものを出力する
-  std::ranges::replace_copy_if(v, std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;), [](int x) { return x%2 != 0; }, 10);
+  std::ranges::replace_copy_if(
+    v,
+    std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;),
+    [](int x) { return x%2 != 0; },
+    10
+  );
 }
 ```
 * std::ranges::replace_copy_if[color ff0000]
 
-### 出力
+#### 出力
 ```
 10,10,2,10,2,
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Point&amp;amp; p) {
+  return os &amp;lt;&amp;lt; p.x &amp;lt;&amp;lt; &amp;#39;,&amp;#39; &amp;lt;&amp;lt; p.y &amp;lt;&amp;lt; std::endl;
+}
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v = {
+    {1, 2},
+    {3, 4},
+    {5, 6},
+    {1, 2},
+  };
+
+  // 値が{1, 2}の要素をすべて{9, 9}に置き換えたものを出力する
+  std::ranges::replace_copy_if(
+    v,
+    std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;\n&amp;#34;),
+    [](const Point&amp;amp; p) { return p.x == 1 &amp;amp;&amp;amp; p.y == 2; },
+    {9, 9}
+  );
+}
+```
+* std::ranges::replace_copy_if[color ff0000]
+
+#### 出力
+```
+9,9
+3,4
+5,6
+9,9
+```
 
 ## バージョン
 ### 言語
@@ -103,3 +192,5 @@ int main() {
 
 ## 参照
 - [N4861 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace_copy_if -- replace_copy(_if) : C++26波カッコ初期化に対応 #1311</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/replace_copy_if.html"/>
      <id>4c8f46515766f4d4dab7f34ad65e0675ce966c37:reference/algorithm/replace_copy_if.md</id>
      <updated>2025-05-26T17:12:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/replace_copy_if.md b/reference/algorithm/replace_copy_if.md
index 82635adc8..afcf0e642 100644
--- a/reference/algorithm/replace_copy_if.md
+++ b/reference/algorithm/replace_copy_if.md
@@ -15,7 +15,6 @@ namespace std {
                     OutputIterator result,
                     Predicate pred,
                     const T&amp;amp; new_value);     // (1) C++03
-
   template &amp;lt;class InputIterator,
             class OutputIterator,
             class Predicate,
@@ -26,11 +25,22 @@ namespace std {
                     OutputIterator result,
                     Predicate pred,
                     const T&amp;amp; new_value);     // (1) C++20
+  template &amp;lt;class InputIterator,
+            class OutputIterator,
+            class Predicate,
+            class T = typename iterator_traits&amp;lt;OutputIterator&amp;gt;::value_type&amp;gt;
+  constexpr OutputIterator
+    replace_copy_if(InputIterator first,
+                    InputIterator last,
+                    OutputIterator result,
+                    Predicate pred,
+                    const T&amp;amp; new_value);     // (1) C++26
 
   template &amp;lt;class ExecutionPolicy,
             class ForwardIterator1,
             class ForwardIterator2,
-            class Predicate, class T&amp;gt;
+            class Predicate,
+            class T&amp;gt;
   ForwardIterator2
     replace_copy_if(ExecutionPolicy&amp;amp;&amp;amp; exec,
                     ForwardIterator1 first,
@@ -38,6 +48,18 @@ namespace std {
                     ForwardIterator2 result,
                     Predicate pred,
                     const T&amp;amp; new_value);     // (2) C++17
+  template &amp;lt;class ExecutionPolicy,
+            class ForwardIterator1,
+            class ForwardIterator2,
+            class Predicate,
+            class T = typename iterator_traits&amp;lt;ForwardIterator2&amp;gt;::value_type&amp;gt;
+  ForwardIterator2
+    replace_copy_if(ExecutionPolicy&amp;amp;&amp;amp; exec,
+                    ForwardIterator1 first,
+                    ForwardIterator1 last,
+                    ForwardIterator2 result,
+                    Predicate pred,
+                    const T&amp;amp; new_value);     // (2) C++26
 }
 ```
 
@@ -45,7 +67,7 @@ namespace std {
 イテレータ範囲`[first, last)`のうち、条件を満たす要素を指定された値に置き換え、その結果を出力の範囲へコピーする。
 
 
-## テンプレートパラメータ制約
+## 適格要件
 - `*first` と `new_value` は `result` へ書き込み可能であること
 
 
@@ -65,7 +87,17 @@ namespace std {
 正確に `last - first` 回の述語の適用を行う
 
 
+## 備考
+- (1), (2) :
+    - C++26 : 引数として波カッコ初期化`{}`を受け付ける
+        ```cpp
+        std::vector&amp;lt;T&amp;gt; v;
+        std::replace_copy_if(v.begin(), v.end(), result, pred, {a, b});
+        ```
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
@@ -83,11 +115,57 @@ int main() {
 ```
 * std::replace_copy_if[color ff0000]
 
-### 出力
+#### 出力
 ```
 10,10,2,10,2,
 ```
 
+### 波カッコ初期化を入力として使用する (C++26)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+struct Point {
+  int x;
+  int y;
+
+  bool operator==(const Point&amp;amp; other) const = default;
+};
+
+std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Point&amp;amp; p) {
+  return os &amp;lt;&amp;lt; p.x &amp;lt;&amp;lt; &amp;#39;,&amp;#39; &amp;lt;&amp;lt; p.y &amp;lt;&amp;lt; std::endl;
+}
+
+int main() {
+  std::vector&amp;lt;Point&amp;gt; v = {
+    {1, 2},
+    {3, 4},
+    {5, 6},
+    {1, 2},
+  };
+
+  // 値が{1, 2}の要素をすべて{9, 9}に置き換えたものを出力する
+  std::replace_copy_if(
+    v.begin(),
+    v.end(),
+    std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;\n&amp;#34;),
+    [](const Point&amp;amp; p) { return p.x == 1 &amp;amp;&amp;amp; p.y == 2; },
+    {9, 9}
+  );
+}
+```
+* std::replace_copy_if[color ff0000]
+
+#### 出力
+```
+9,9
+3,4
+5,6
+9,9
+```
+
 ## 実装例
 ```cpp
 template &amp;lt;class InputIterator, class OutputIterator, class Predicate, class T&amp;gt;
@@ -103,3 +181,5 @@ OutputIterator replace_copy_if(InputIterator first, InputIterator last, OutputIt
 ## 参照
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
 - [P0467R2 Iterator Concerns for Parallel Algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0467r2.html)
+- [P2248R8 Enabling list-initialization for algorithms](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2248r8.html)
+    - C++26で波カッコ初期化 (リスト初期化) に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
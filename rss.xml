<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-02T10:17:53.451583</updated>
  <id>0f3725de-fee5-444e-ba09-fd4f41eaba07</id>

  
    <entry>
      <title>common_view -- common_view : 概要文章がわかりにくかったので平易にした</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view.html"/>
      <id>3380084316ebdc67be4d7541f2ad61f93305cd8f:reference/ranges/common_view.md</id>
      <updated>2025-06-02T19:13:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view.md b/reference/ranges/common_view.md
index 10213afb5..38d4784eb 100644
--- a/reference/ranges/common_view.md
+++ b/reference/ranges/common_view.md
@@ -25,7 +25,8 @@ namespace std::ranges {
 - (1): 任意のRangeを[`common_range`](common_range.md)にする[`view`](view.md)
 - (2): `common_view`または同じ効果を実現する[`view`](view.md)を生成するRangeアダプタオブジェクト
 
-同じ型のイテレータペアを受け取るレガシーなアルゴリズム関数に対して、[`common_range`](common_range.md)ではない範囲を渡したい場合、`common`を使用することで同じ型のイテレータペアを取得できるようになる。
+イテレータと番兵の型が同じである必要があるレガシーなアルゴリズム関数に対して、イテレータと番兵が異なるRangeを渡したい場合 (たとえば[`iota_view`](iota_view.md))、このビューで[`common_range`](common_range.md)に変換することで、同じ型のイテレータペアを取得できるようになる。
+
 
 ### Rangeコンセプト
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_range -- common_range : 例を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_range.html"/>
      <id>e399f0d76a3cfe60d255e529df7f805f5bf3efca:reference/ranges/common_range.md</id>
      <updated>2025-06-02T19:02:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_range.md b/reference/ranges/common_range.md
index 8fe68d450..1bff945a9 100644
--- a/reference/ranges/common_range.md
+++ b/reference/ranges/common_range.md
@@ -23,10 +23,25 @@ namespace std::ranges {
 型`T`が`common_range`のモデルとなるのは、`T`が[`range`](range.md)のモデルであり、`T`から取得した番兵とイテレータの型が等しい場合である。
 
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  namespace ranges = std::ranges;
+  namespace views = std::views;
+
+  // 無限長のiotaはcommon_rangeではない
+  // (イテレータと番兵の型が異なる)
+  static_assert(!ranges::common_range&amp;lt;decltype(views::iota(0))&amp;gt;);
+
+  // commonを適用するとcommon_rangeになる
+  static_assert(ranges::common_range&amp;lt;decltype(views::iota(0) | views::common)&amp;gt;);
+}
+```
 
 ### 出力
-(執筆中)
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>concat_view -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view.md b/reference/ranges/concat_view.md
index 769dd0c11..54b39fc32 100644
--- a/reference/ranges/concat_view.md
+++ b/reference/ranges/concat_view.md
@@ -108,28 +108,28 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](concat_view/op_constructor.md.nolink)  | コンストラクタ                   | C++26          |
-| [`begin`](concat_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++26          |
-| [`end`](concat_view/end.md.nolink)                       | 番兵を取得する                   | C++26          |
-| [`size`](concat_view/size.md.nolink)                     | 要素数を取得する                 | C++26          |
+| [`(constructor)`](concat_view/op_constructor.md)  | コンストラクタ                   | C++26          |
+| [`begin`](concat_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++26          |
+| [`end`](concat_view/end.md)                       | 番兵を取得する                   | C++26          |
+| [`size`](concat_view/size.md)                     | 要素数を取得する                 | C++26          |
 
 ## 継承しているメンバ関数
 
 | 名前                                         | 説明                              | 対応バージョン |
 |----------------------------------------------|-----------------------------------|----------------|
-| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
-| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
-| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
-| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++26          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++26          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++26          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++26          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++26          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++26          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++26          |
 
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](concat_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](concat_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++26          |
 
 ## 例
 ```cpp example
@@ -155,10 +155,9 @@ int main() {
 - C++26
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
 
 ## 参照
 - [26.7.18 Concat view](https://timsong-cpp.github.io/cppwp/range.concat) (2024-08-10)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view/begin.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view/begin.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view/begin.md b/reference/ranges/concat_view/begin.md
new file mode 100644
index 000000000..01986d7ae
--- /dev/null
+++ b/reference/ranges/concat_view/begin.md
@@ -0,0 +1,59 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* concat_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;Views&amp;gt; || ...);       // (1) C++26
+
+constexpr auto begin() const
+  requires (range&amp;lt;const Views&amp;gt; &amp;amp;&amp;amp; ...);        // (2) C++26
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+- (1), (2) : `concat_view`の先頭を指すイテレータを返す。連結されたRangeが空でない場合、最初の非空Rangeの先頭要素を指す。すべてのRangeが空の場合、[`end()`](end.md)と等価なイテレータを返す。
+
+## 例
+
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1{1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2{4, 5};
+  std::array&amp;lt;int, 3&amp;gt; a{6, 7, 8};
+
+  std::ranges::concat_view r{v1, v2, a};
+
+  auto it = r.begin();
+  
+  int x = *it;
+  std::println(&amp;#34;{}&amp;#34;, x);
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+1
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view/end.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view/end.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view/end.md b/reference/ranges/concat_view/end.md
new file mode 100644
index 000000000..992c02a50
--- /dev/null
+++ b/reference/ranges/concat_view/end.md
@@ -0,0 +1,62 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* concat_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;Views&amp;gt; || ...);       // (1) C++26
+
+constexpr auto end() const
+  requires (range&amp;lt;const Views&amp;gt; &amp;amp;&amp;amp; ...);        // (2) C++26
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1), (2) : `concat_view`の番兵を返す
+
+## 例
+
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1{1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2{4, 5};
+  std::array&amp;lt;int, 3&amp;gt; a{6, 7, 8};
+
+  std::ranges::concat_view r{v1, v2, a};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    std::print(&amp;#34;{} &amp;#34;, *it);
+    ++it;
+  }
+  std::println();
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+1 2 3 4 5 6 7 8
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view/op_constructor.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view/op_constructor.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view/op_constructor.md b/reference/ranges/concat_view/op_constructor.md
new file mode 100644
index 000000000..0d1be8934
--- /dev/null
+++ b/reference/ranges/concat_view/op_constructor.md
@@ -0,0 +1,61 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* concat_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+concat_view()
+  requires (default_initializable&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...) = default;  // (1) C++26
+
+constexpr explicit concat_view(Views... views);              // (2) C++26
+```
+
+## 概要
+
+[`concat_view`](../concat_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 連結する複数のviewを指定して構築
+
+## 効果
+
+- (1) : 各`views_`メンバをデフォルト構築する
+- (2) : `views_`を`std::move(views)...`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1{1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2{4, 5};
+  std::array&amp;lt;int, 3&amp;gt; a{6, 7, 8};
+
+  std::ranges::concat_view view{v1, v2, a};
+  
+  for (int i : view) {
+    std::print(&amp;#34;{} &amp;#34;, i);
+  }
+  std::println();
+}
+```
+* concat_view[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 6 7 8
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view/op_deduction_guide.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view/op_deduction_guide.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view/op_deduction_guide.md b/reference/ranges/concat_view/op_deduction_guide.md
new file mode 100644
index 000000000..a82d21f75
--- /dev/null
+++ b/reference/ranges/concat_view/op_deduction_guide.md
@@ -0,0 +1,69 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class... Rs&amp;gt;
+  concat_view(Rs&amp;amp;&amp;amp;...) -&amp;gt; concat_view&amp;lt;views::all_t&amp;lt;Rs&amp;gt;...&amp;gt;;
+}
+```
+
+## 概要
+
+[`concat_view`](../concat_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、渡されたRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1{1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2{4, 5};
+  std::array&amp;lt;int, 3&amp;gt; a{6, 7, 8};
+
+  std::ranges::concat_view r1{v1, v2, a};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::concat_view&amp;lt;
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::ref_view&amp;lt;std::array&amp;lt;int, 3&amp;gt;&amp;gt;
+    &amp;gt;
+  &amp;gt;);
+
+  std::ranges::concat_view r2{
+    std::vector&amp;lt;int&amp;gt;{1, 2, 3},
+    std::vector&amp;lt;int&amp;gt;{4, 5},
+    std::array&amp;lt;int, 3&amp;gt;{6, 7, 8}
+  };
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::concat_view&amp;lt;
+      std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::owning_view&amp;lt;std::array&amp;lt;int, 3&amp;gt;&amp;gt;
+    &amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view/size.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view/size.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view/size.md b/reference/ranges/concat_view/size.md
new file mode 100644
index 000000000..8fd66ab5d
--- /dev/null
+++ b/reference/ranges/concat_view/size.md
@@ -0,0 +1,68 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* concat_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires (sized_range&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...);        // (1) C++26
+
+constexpr auto size() const
+  requires (sized_range&amp;lt;const Views&amp;gt; &amp;amp;&amp;amp; ...);  // (2) C++26
+```
+
+## 概要
+連結されたすべてのRangeの要素数の合計を取得する。
+
+## 制約
+- (1) : `Views...`のすべてが[`sized_range`](../sized_range.md)であること
+- (2) : `const Views...`のすべてが[`sized_range`](../sized_range.md)であること
+
+## 戻り値
+- (1), (2) : 連結されたすべてのRangeの要素数の合計を返す
+
+## 計算量
+- O(1)
+
+## 例
+
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1{1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2{4, 5};
+  std::array&amp;lt;int, 3&amp;gt; a{6, 7, 8};
+
+  std::ranges::concat_view r{v1, v2, a};
+
+  std::println(&amp;#34;size: {}&amp;#34;, r.size());
+  
+  // 実際の要素数を確認
+  auto count = std::ranges::distance(r);
+  std::println(&amp;#34;distance: {}&amp;#34;, count);
+}
+```
+* size[color ff0000]
+
+### 出力
+
+```
+size: 8
+distance: 8
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>split_view -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view.md b/reference/ranges/split_view.md
index 411ef0e7c..bd478450d 100644
--- a/reference/ranges/split_view.md
+++ b/reference/ranges/split_view.md
@@ -62,10 +62,10 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](split_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](split_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`begin`](split_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](split_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](split_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`base`](split_view/base.md)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](split_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](split_view/end.md)                       | 番兵を取得する                   | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -81,7 +81,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](split_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](split_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view/base.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view/base.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view/base.md b/reference/ranges/split_view/base.md
new file mode 100644
index 000000000..8b08080c2
--- /dev/null
+++ b/reference/ranges/split_view/base.md
@@ -0,0 +1,69 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+  using namespace std::literals;
+
+  std::string_view text = &amp;#34;hello,world,split&amp;#34;;
+  std::string_view delimiter = &amp;#34;,&amp;#34;;
+
+  std::ranges::split_view r{text, delimiter};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::string_view&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::string_view&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::string_view&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view/begin.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view/begin.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view/begin.md b/reference/ranges/split_view/begin.md
new file mode 100644
index 000000000..e2f2773f8
--- /dev/null
+++ b/reference/ranges/split_view/begin.md
@@ -0,0 +1,63 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           forward_range&amp;lt;const Pattern&amp;gt;;  // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+- (1), (2) : `split_view`の先頭を指すイテレータを返す。このイテレータは部分Rangeを指し、外側のRangeが空でない場合、最初の部分Rangeを指す。外側のRangeが空の場合、[`end()`](end.md)と等価なイテレータを返す。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std::literals;
+  
+  std::string_view text = &amp;#34;hello,world,split&amp;#34;;
+  std::string_view delimiter = &amp;#34;,&amp;#34;;
+
+  std::ranges::split_view r{text, delimiter};
+
+  auto it = r.begin();
+
+  // 最初の部分Rangeを取得
+  auto first_subrange = *it;
+  std::string_view sv{first_subrange.begin(), first_subrange.end()};
+  std::cout &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+hello
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view/end.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view/end.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view/end.md b/reference/ranges/split_view/end.md
new file mode 100644
index 000000000..dcc5332f7
--- /dev/null
+++ b/reference/ranges/split_view/end.md
@@ -0,0 +1,67 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           forward_range&amp;lt;const Pattern&amp;gt;;  // (2) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1), (2) : `split_view`の番兵を返す
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std::literals;
+  
+  std::string_view text = &amp;#34;hello,world,split&amp;#34;;
+  std::string_view delimiter = &amp;#34;,&amp;#34;;
+
+  std::ranges::split_view r{text, delimiter};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    auto subrange = *it;
+    std::string_view sv{subrange.begin(), subrange.end()};
+    std::cout &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+    ++it;
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+hello
+world
+split
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view/op_constructor.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view/op_constructor.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view/op_constructor.md b/reference/ranges/split_view/op_constructor.md
new file mode 100644
index 000000000..86679fb97
--- /dev/null
+++ b/reference/ranges/split_view/op_constructor.md
@@ -0,0 +1,66 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+split_view()
+  requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp;
+           default_initializable&amp;lt;Pattern&amp;gt;
+  = default;                                   // (1) C++20
+
+constexpr split_view(V base, Pattern pattern); // (2) C++20
+```
+
+## 概要
+
+[`split_view`](../split_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewとパターンを指定して構築
+
+## 効果
+
+- (1) : `base_`と`pattern_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`pattern_`を`std::move(pattern)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main() {
+  using namespace std::literals;
+  
+  std::string_view text = &amp;#34;hello,world,split&amp;#34;;
+  std::string_view delimiter = &amp;#34;,&amp;#34;;
+
+  std::ranges::split_view view{text, delimiter};
+  
+  for (auto subrange : view) {
+    std::string_view sv{subrange.begin(), subrange.end()};
+    std::cout &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* split_view[color ff0000]
+
+### 出力
+```
+hello
+world
+split
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view/op_deduction_guide.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view/op_deduction_guide.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view/op_deduction_guide.md b/reference/ranges/split_view/op_deduction_guide.md
new file mode 100644
index 000000000..004edda08
--- /dev/null
+++ b/reference/ranges/split_view/op_deduction_guide.md
@@ -0,0 +1,71 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class P&amp;gt;
+  split_view(R&amp;amp;&amp;amp;, P&amp;amp;&amp;amp;)
+    -&amp;gt; split_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, views::all_t&amp;lt;P&amp;gt;&amp;gt;; // (1) C++20
+
+  template&amp;lt;forward_range R&amp;gt;
+  split_view(R&amp;amp;&amp;amp;, range_value_t&amp;lt;R&amp;gt;)
+    -&amp;gt; split_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, single_view&amp;lt;range_value_t&amp;lt;R&amp;gt;&amp;gt;&amp;gt;; // (2) C++20
+}
+```
+
+## 概要
+
+[`split_view`](../split_view.md)クラステンプレートの型推論補助。
+
+- (1) : 元のRangeとパターンが暗黙的に[all view](../all.md)でラップされる
+- (2) : 元のRangeが[all view](../all.md)、区切り要素が[`single_view`](../single_view.md)でラップされる
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::string_view text = &amp;#34;hello,world,split&amp;#34;;
+  std::string_view delimiter = &amp;#34;,&amp;#34;;
+
+  std::ranges::split_view r1{text, delimiter};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::split_view&amp;lt;
+      std::string_view,
+      std::string_view
+    &amp;gt;
+  &amp;gt;);
+
+  std::ranges::split_view r2{
+    std::string{&amp;#34;hello,world,split&amp;#34;},
+    std::string{&amp;#34;,&amp;#34;}
+  };
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::split_view&amp;lt;
+      std::ranges::owning_view&amp;lt;std::string&amp;gt;,
+      std::ranges::owning_view&amp;lt;std::string&amp;gt;
+    &amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_completion_signatures_of -- execution/transform_completion_signatures_of: fix markup</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/transform_completion_signatures_of.html"/>
      <id>d4f031709a452650ac165782c25b2a0cb3749e56:reference/execution/execution/transform_completion_signatures_of.md</id>
      <updated>2025-06-02T18:02:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/transform_completion_signatures_of.md b/reference/execution/execution/transform_completion_signatures_of.md
index a45d97324..84e1c6dbf 100644
--- a/reference/execution/execution/transform_completion_signatures_of.md
+++ b/reference/execution/execution/transform_completion_signatures_of.md
@@ -20,11 +20,12 @@ namespace std::exectution {
       AdditionalSignatures, SetValue, SetError, SetStopped&amp;gt;;
 }
 ```
+* sender[link sender.md]
 * env&amp;lt;&amp;gt;[link env.md]
 * valid-completion-signatures[link completion_signatures.md]
 * completion_signatures[link completion_signatures.md]
 * set_stopped_t()[link set_stopped.md]
-* sender_in[lin sender_in.md]
+* sender_in[link sender_in.md]
 * transform_completion_signatures[link transform_completion_signatures.md]
 * completion_signatures_of_t[link completion_signatures_of_t.md]
 * see below[italic]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2019-08-28T15:42:31.172972</updated>
  <id>71f7bb4e-1681-4cc8-8002-d36a17419bc7</id>

  
    <entry>
      <title>mem_fn -- mem_fn : 戻り値の仕様変更追記 #687</title>
      <link href="https://cpprefjp.github.io/reference/functional/mem_fn.html"/>
      <id>5f2de4123b4b1a1a45deca3b7aff0e9361c4ed3c:reference/functional/mem_fn.md</id>
      <updated>2019-08-29T00:37:04+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;functional&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;mem_fn&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;i&gt;unspecified&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mem_fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;//C++11&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;i&gt;unspecified&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mem_fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;//C++17&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;unspecified&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mem_fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//C++20&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;与えられたメンバ関数を呼び出す &lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/Callable.html&#34;&gt;&lt;em&gt;Callable&lt;/em&gt;&lt;/a&gt; オブジェクトを生成して返す。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;h3&gt;C++17まで&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fn(t, a2, ..., aN)&lt;/code&gt; の呼出しが &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/Invoke.html&#34;&gt;INVOKE&lt;/a&gt;(pm, t, a2, ..., aN)&lt;/code&gt; と等価となる &lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/Callable.html&#34;&gt;&lt;em&gt;Callable&lt;/em&gt;&lt;/a&gt; オブジェクト &lt;code&gt;fn&lt;/code&gt; を返す。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; の型には、必要に応じて型の別名 &lt;code&gt;argument_type&lt;/code&gt;, &lt;code&gt;first_argument_type&lt;/code&gt;, &lt;code&gt;second_argument_type&lt;/code&gt;, &lt;code&gt;result_type&lt;/code&gt; が定義される。&lt;/p&gt;
&lt;h3&gt;C++20から&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fn(call_args...)&lt;/code&gt;の呼び出しが&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;invoke&lt;/a&gt;(pmd,  call_args...)&lt;/code&gt;を行うシンプルなcall wrapperオブジェクト &lt;code&gt;fn&lt;/code&gt; を返す。&lt;br /&gt;
ここで、&lt;code&gt;pmd&lt;/code&gt;は&lt;code&gt;R T::* pmd(pm)&lt;/code&gt;のように初期化された&lt;code&gt;fn&lt;/code&gt;が保持するメンバポインタ、&lt;code&gt;call_args...&lt;/code&gt;は&lt;code&gt;pm&lt;/code&gt;の関数呼び出しに必要となる引数リストである。&lt;/p&gt;
&lt;p&gt;メンバポインタ呼び出しのためには&lt;code&gt;call_args...&lt;/code&gt;の先頭に、&lt;code&gt;T&lt;/code&gt;のオブジェクトもしくはそれを参照する何らかのものが無ければならない（詳細は&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/Invoke.html&#34;&gt;INVOKE&lt;/a&gt;&lt;/code&gt;を参照）。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;e27486be65a9cde12ecd6a883103f45f8c7ad375&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;functional&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_shared.html&#34;&gt;std::make_shared&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;boolalpha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::mem_fn&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;())(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;std::bind&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/placeholders.html&#34;&gt;std::placeholders::_1&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// std::cout &amp;lt;&amp;lt; &lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;std::bind&lt;/a&gt;(l, &lt;a href=&#34;https://cpprefjp.github.io/reference/functional/placeholders.html&#34;&gt;std::placeholders::_1&lt;/a&gt;, 5)(3) &amp;lt;&amp;lt; std::endl;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//   エラー！ std::shared_ptr&amp;lt; &lt;a href=&#34;https://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;&amp;lt;int&amp;gt; &amp;gt; は &lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/Callable.html&#34;&gt;Callable&lt;/a&gt; ではない&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// mem_fn() で包むと &lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/Callable.html&#34;&gt;Callable&lt;/a&gt; になる&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;std::bind&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;std::mem_fn&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/placeholders.html&#34;&gt;std::placeholders::_1&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;true
true
true
true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2048&#34; target=&#34;_blank&#34;&gt;LWG Issue 2048. Unnecessary &lt;code&gt;mem_fn&lt;/code&gt; overloads&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;不必要なオーバーロードを、C++14で削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wg21.cmeerw.net/lwg/issue2489&#34; target=&#34;_blank&#34;&gt;LWG Issue 2489. mem_fn() should be noexcept&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1065r2.html&#34; target=&#34;_blank&#34;&gt;P1065R2 constexpr INVOKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- reference_wrapper : 下記参照をsee belowへ</title>
      <link href="https://cpprefjp.github.io/reference/functional/reference_wrapper/op_constructor.html"/>
      <id>79e6be76cff9206a61e32c3af828b8c7abed5168:reference/functional/reference_wrapper/op_constructor.md</id>
      <updated>2019-08-28T18:01:08+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;functional&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class reference_wrapper&#34;&gt;reference_wrapper::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;コンストラクタ&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;reference_wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*see below*/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;// (1) C++11&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reference_wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*see below*/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// (1) C++20&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;reference_wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reference_wrapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// (2) C++11&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reference_wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reference_wrapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (2) C++20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;与えられた参照で、参照オブジェクトを構築する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) : &lt;code&gt;T&amp;amp; r = &lt;a href=&#34;https://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;forward&lt;/a&gt;&amp;lt;U&amp;gt;(u)&lt;/code&gt;のように作成した&lt;code&gt;r&lt;/code&gt;への参照を保持する&lt;code&gt;reference_wrapper&lt;/code&gt;オブジェクトを構築する&lt;br /&gt;
&lt;code&gt;u&lt;/code&gt;が右辺値、もしくは参照とCV修飾を除去した&lt;code&gt;U&lt;/code&gt;が&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;である（&lt;code&gt;is_same_v&amp;lt;remove_cvref_t&amp;lt;U&amp;gt;, reference_wrapper&amp;lt;T&amp;gt;&amp;gt; == true&lt;/code&gt;となる）場合、このコンストラクタはオーバーロード解決に参加しない&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) : &lt;code&gt;x.&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper/get.html&#34;&gt;get()&lt;/a&gt;&lt;/code&gt;への参照を保持する&lt;code&gt;reference_wrapper&lt;/code&gt;オブジェクトを構築する&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 投げない（右辺値を受け取らない限り&lt;code&gt;noexcept&lt;/code&gt;指定される）&lt;/li&gt;
&lt;li&gt;(2) : 投げない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;右辺値参照を保持してしまうことを防止するために&lt;code&gt;reference_wrapper(T&amp;amp;&amp;amp;) = delete;&lt;/code&gt;のようなコンストラクタを用意しないのは、この&lt;code&gt;delete&lt;/code&gt;指定コンストラクタの存在によって&lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;から&lt;code&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/code&gt;への暗黙変換が引き起こされることを防止するためである（なお、そのような変換が起こったとしても&lt;code&gt;delete&lt;/code&gt;指定コンストラクタが選ばれるため右辺値参照を保持することは無い）。&lt;br /&gt;
ただし、これはC++17規格完成後の欠陥報告（&lt;a href=&#34;https://wg21.cmeerw.net/lwg/issue2993&#34; target=&#34;_blank&#34;&gt;LWG Issue 2993&lt;/a&gt;）による修正のため、実装によっては&lt;code&gt;delete&lt;/code&gt;指定したコンストラクタを用意している可能性がある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;3c0d109a887da85d06f067d15677e11809428c0d&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;functional&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (1)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// xへの参照を保持する&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reference_wrapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper/get.html&#34;&gt;r.get()&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (2)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 参照ラッパーrが指すxへの参照を保持する&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reference_wrapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;r2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;4
5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wg21.cmeerw.net/lwg/issue2993&#34; target=&#34;_blank&#34;&gt;LWG Issue 2993. reference_wrapper&amp;lt;T&amp;gt; conversion from T&amp;amp;&amp;amp;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>placeholders -- placeholders : 下記参照をsee belowへ</title>
      <link href="https://cpprefjp.github.io/reference/functional/placeholders.html"/>
      <id>7a16a6c416041a602600951aa052ea4cfa7251f9:reference/functional/placeholders.md</id>
      <updated>2019-08-28T17:59:38+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;variable&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;functional&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;placeholders&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;placeholders&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;cm&#34;&gt;/*see below*/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;unspecified&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;cm&#34;&gt;/*see below*/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;unspecified&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;
  &lt;span class=&#34;cm&#34;&gt;/*see below*/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;i&gt;unspecified&lt;/i&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;_1&lt;/code&gt;、&lt;code&gt;_2&lt;/code&gt;、…、&lt;code&gt;_N&lt;/code&gt;は、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;bind()&lt;/a&gt;&lt;/code&gt;で使用するプレースホルダーオブジェクトである。&lt;/p&gt;
&lt;p&gt;それぞれ、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;bind()&lt;/a&gt;&lt;/code&gt;によって返された関数オブジェクトに指定する「第1引数」「第2引数」…「第N引数」であることを意味する。&lt;/p&gt;
&lt;p&gt;各プレースホルダーオブジェクトの宣言は、可能ならば以下のように行われる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;inline constexpr unspecified _1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;そうできない場合、もしくはC++14までは次のように宣言される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;extern unspecified _1;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;プレースホルダーの数(&lt;code&gt;N&lt;/code&gt;の値)は、10以上実装することが推奨される。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2488&#34; target=&#34;_blank&#34;&gt;LWG Issue 2488. Placeholders should be allowed and encouraged to be constexpr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0607r0.html&#34; target=&#34;_blank&#34;&gt;P0607R0 Inline Variables for the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>CopyInsertable.md -- &lt;container_concepts&gt;を削除 : C++11 Committee Draftにはあったが、当面追加されそうにないので。</title>
      <link href="https://cpprefjp.github.io/reference/container_concepts/CopyInsertable.html"/>
      <id>f00a99a2c333fd4fa7f167017f28ce6539a42a39:reference/container_concepts/CopyInsertable.md</id>
      <updated>2019-08-28T17:58:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/container_concepts/CopyInsertable.md b/reference/container_concepts/CopyInsertable.md
deleted file mode 100644
index 3f5b1836b..000000000
--- a/reference/container_concepts/CopyInsertable.md
+++ /dev/null
@@ -1,20 +0,0 @@
-# CopyInsertable
-
-## 概要
-CopyInsertableは、任意のコンテナ`X`に対して、その要素型オブジェクトをコピー挿入可能かを表す要件である。
-
-
-## 要件
-以下の式が可能であること：
-
-```cpp
-allocator_traits&amp;lt;A&amp;gt;::construct(m, p, v)
-```
-* allocator_traits[link /reference/memory/allocator_traits.md]
-* construct[link /reference/memory/allocator_traits/construct.md]
-
-- 型`A`は、任意のコンテナ`X`に使用するメモリアロケータ型
-- `m`は、型`A`のメモリアロケータオブジェクト
-- `p`は、コンテナ`X`の要素型を指すポインタ型オブジェクト
-- `v`は、挿入する要素。コンテナ`X`の要素型`T`のオブジェクトである
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>EmplaceConstructible.md -- &lt;container_concepts&gt;を削除 : C++11 Committee Draftにはあったが、当面追加されそうにないので。</title>
      <link href="https://cpprefjp.github.io/reference/container_concepts/EmplaceConstructible.html"/>
      <id>f00a99a2c333fd4fa7f167017f28ce6539a42a39:reference/container_concepts/EmplaceConstructible.md</id>
      <updated>2019-08-28T17:58:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/container_concepts/EmplaceConstructible.md b/reference/container_concepts/EmplaceConstructible.md
deleted file mode 100644
index 1a28d0b65..000000000
--- a/reference/container_concepts/EmplaceConstructible.md
+++ /dev/null
@@ -1,20 +0,0 @@
-# EmplaceConstructible
-
-## 概要
-EmplaceConstructibleは、任意のコンテナ`X`に対して、要素型`T`のコンストラクタ引数列`args`から直接構築可能かを表す要件である。
-
-
-## 要件
-以下の式が可能であること：
-
-```cpp
-allocator_traits&amp;lt;A&amp;gt;::construct(m, p, args)
-```
-* allocator_traits[link /reference/memory/allocator_traits.md]
-* construct[link /reference/memory/allocator_traits/construct.md]
-
-- 型`A`は、任意のコンテナ`X`に使用するメモリアロケータ型
-- `m`は、型`A`のメモリアロケータオブジェクト
-- `p`は、コンテナ`X`の要素型を指すポインタ型オブジェクト
-- `args`は、挿入する要素のコンストラクタ引数。コンテナ`X`の要素型`T`の、ゼロ個以上のコンストラクタ引数列である
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>MoveInsertable.md -- &lt;container_concepts&gt;を削除 : C++11 Committee Draftにはあったが、当面追加されそうにないので。</title>
      <link href="https://cpprefjp.github.io/reference/container_concepts/MoveInsertable.html"/>
      <id>f00a99a2c333fd4fa7f167017f28ce6539a42a39:reference/container_concepts/MoveInsertable.md</id>
      <updated>2019-08-28T17:58:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/container_concepts/MoveInsertable.md b/reference/container_concepts/MoveInsertable.md
deleted file mode 100644
index b9e6b91a9..000000000
--- a/reference/container_concepts/MoveInsertable.md
+++ /dev/null
@@ -1,20 +0,0 @@
-# MoveInsertable
-
-## 概要
-MoveInsertableは、任意のコンテナ`X`に対して、その要素型の右辺値オブジェクトをムーブ挿入可能かを表す要件である。
-
-
-## 要件
-以下の式が可能であること：
-
-```cpp
-allocator_traits&amp;lt;A&amp;gt;::construct(m, p, rv)
-```
-* allocator_traits[link /reference/memory/allocator_traits.md]
-* construct[link /reference/memory/allocator_traits/construct.md]
-
-- 型`A`は、任意のコンテナ`X`に使用するメモリアロケータ型
-- `m`は、型`A`のメモリアロケータオブジェクト
-- `p`は、コンテナ`X`の要素型を指すポインタ型オブジェクト
-- `rv`は、挿入する要素の右辺値。コンテナ`X`の要素型`T`の右辺値オブジェクトである
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_constructible -- &lt;concepts&gt; : ページ名をsnake_caseに修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/copy_constructible.html"/>
      <id>00a897f859aa0ec3efe9b9314af0bf332d5a0c0f:reference/concepts/copy_constructible.md</id>
      <updated>2019-08-28T17:51:24+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;concept&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;copy_constructible&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;copy_constructible&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;がコピー構築可能であることを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/MoveConstructible.html&#34;&gt;MoveConstructible&lt;/a&gt;の要件に加えて、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;の左辺値オブジェクト(&lt;code&gt;const&lt;/code&gt;であってもよい)&lt;/li&gt;
&lt;li&gt;上述した式を実行した結果として、&lt;code&gt;v&lt;/code&gt;の状態は変わらず、&lt;code&gt;u&lt;/code&gt;は&lt;code&gt;v&lt;/code&gt;と等価になること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;の左辺値オブジェクト(&lt;code&gt;const&lt;/code&gt;であってもよい)&lt;/li&gt;
&lt;li&gt;上述した式を実行した結果として、&lt;code&gt;v&lt;/code&gt;の状態は変わらず、&lt;code&gt;T(v)&lt;/code&gt;の結果となるオブジェクトは&lt;code&gt;v&lt;/code&gt;と等価になること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_copy_constructible.html&#34;&gt;is_copy_constructible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_constructible -- &lt;concepts&gt; : ページ名をsnake_caseに修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/default_constructible.html"/>
      <id>00a897f859aa0ec3efe9b9314af0bf332d5a0c0f:reference/concepts/default_constructible.md</id>
      <updated>2019-08-28T17:51:24+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;concept&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;default_constructible&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;default_constructible&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;がデフォルト構築可能であること表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この式を実行した結果として、&lt;code&gt;t&lt;/code&gt;はデフォルト初期化されること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この式を実行した結果として、&lt;code&gt;u&lt;/code&gt;は値初期化されること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これらの式を実行した結果として、&lt;code&gt;T&lt;/code&gt;型の一時オブジェクトは値初期化されること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_default_constructible.html&#34;&gt;is_default_constructible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>destructible -- &lt;concepts&gt; : ページ名をsnake_caseに修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/destructible.html"/>
      <id>00a897f859aa0ec3efe9b9314af0bf332d5a0c0f:reference/concepts/destructible.md</id>
      <updated>2019-08-28T17:51:24+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;concept&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;destructible&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;destructible&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;が破棄可能であることを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;任意の型&lt;code&gt;T&lt;/code&gt;の変更可能な左辺値オブジェクト&lt;code&gt;u&lt;/code&gt;について、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この式を実行した結果として、オブジェクト&lt;code&gt;u&lt;/code&gt;が所有する全てのリソースが回収され、例外を伝搬しないこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_destructible.html&#34;&gt;is_destructible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_destructible.html&#34;&gt;is_nothrow_destructible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equality_comparable -- &lt;concepts&gt; : ページ名をsnake_caseに修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/equality_comparable.html"/>
      <id>00a897f859aa0ec3efe9b9314af0bf332d5a0c0f:reference/concepts/equality_comparable.md</id>
      <updated>2019-08-28T17:51:24+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;concept&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;equality_comparable&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;equality_comparable&lt;/code&gt;は、2つのオブジェクト&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;が&lt;code&gt;==&lt;/code&gt;演算子で同値関係にあるかを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;のオブジェクト&lt;/li&gt;
&lt;li&gt;上述した式の結果として、&lt;code&gt;bool&lt;/code&gt;に変換可能な型が返ること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;が同値関係を持ち、以下の特性を持つこと：&lt;ul&gt;
&lt;li&gt;全ての&lt;code&gt;a&lt;/code&gt;について、&lt;code&gt;a == a&lt;/code&gt;が成り立つこと&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a == b&lt;/code&gt;であれば、&lt;code&gt;b == a&lt;/code&gt;であること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a == b&lt;/code&gt;かつ&lt;code&gt;b == c&lt;/code&gt;であれば、&lt;code&gt;a == c&lt;/code&gt;であること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>move_constructible -- &lt;concepts&gt; : ページ名をsnake_caseに修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/move_constructible.html"/>
      <id>00a897f859aa0ec3efe9b9314af0bf332d5a0c0f:reference/concepts/move_constructible.md</id>
      <updated>2019-08-28T17:51:24+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;concept&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;move_constructible&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;move_constructible&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;がムーブ構築可能であることを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rv&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;の右辺値オブジェクト&lt;/li&gt;
&lt;li&gt;上述した式を実行した結果として、&lt;code&gt;u&lt;/code&gt;はこの式を実行する前の&lt;code&gt;rv&lt;/code&gt;と等価になること&lt;/li&gt;
&lt;li&gt;上述した式を実行したあとの&lt;code&gt;rv&lt;/code&gt;の状態は未規定とし、各ライブラリもしくは実装がその動作を規定する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rv&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;の右辺値オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T(rv)&lt;/code&gt;を実行した結果のオブジェクトは、その式を実行する前の&lt;code&gt;rv&lt;/code&gt;と等価になること&lt;/li&gt;
&lt;li&gt;上述した式を実行したあとの&lt;code&gt;rv&lt;/code&gt;の状態は未規定とし、各ライブラリもしくは実装がその動作を規定する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_move_constructible.html&#34;&gt;is_move_constructible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swappable -- &lt;concepts&gt; : ページ名をsnake_caseに修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/swappable.html"/>
      <id>00a897f859aa0ec3efe9b9314af0bf332d5a0c0f:reference/concepts/swappable.md</id>
      <updated>2019-08-28T17:51:24+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;concept&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;swappable&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;swappable&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;のオブジェクトと任意の型&lt;code&gt;U&lt;/code&gt;のオブジェクトが入れ替え可能かを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt;を型&lt;code&gt;T&lt;/code&gt;のオブジェクト、&lt;code&gt;u&lt;/code&gt;を型&lt;code&gt;U&lt;/code&gt;のオブジェクトとする&lt;/li&gt;
&lt;li&gt;以下が可能である場合にのみ、&lt;code&gt;t&lt;/code&gt;は&lt;code&gt;u&lt;/code&gt;と入れ替え可能(swappable)である：&lt;ul&gt;
&lt;li&gt;式&lt;code&gt;swap(t, u)&lt;/code&gt;と式&lt;code&gt;swap(u, t)&lt;/code&gt;が、後述する文脈で評価された場合に、有効であり、それに加えて&lt;/li&gt;
&lt;li&gt;その式が以下の効果を持っていること：&lt;ul&gt;
&lt;li&gt;オブジェクト&lt;code&gt;t&lt;/code&gt;が、変更前の&lt;code&gt;u&lt;/code&gt;が保持していた値を持つようになり、&lt;/li&gt;
&lt;li&gt;オブジェクト&lt;code&gt;u&lt;/code&gt;が、変更前の&lt;code&gt;t&lt;/code&gt;が保持していた値を持つようになる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap(t, u)&lt;/code&gt;と&lt;code&gt;swap(u, t)&lt;/code&gt;が評価される文脈は、「&lt;code&gt;swap&lt;/code&gt;」という名前の、2つのパラメータをとる非メンバ関数が、オーバーロード解決を介して選択されることを保証しなければならない。そのオーバーロードの候補は、以下を含む：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/swap.html&#34;&gt;&lt;code&gt;swap()&lt;/code&gt;関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;引数依存の名前探索によって見つかる&lt;code&gt;swap()&lt;/code&gt;関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;右辺値もしくは左辺値の&lt;code&gt;t&lt;/code&gt;は、&lt;code&gt;t&lt;/code&gt;が右辺値もしくは左辺値と入れ替え可能である場合にのみ入れ替え可能である&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
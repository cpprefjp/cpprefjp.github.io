<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-23T10:58:10.725354</updated>
  <id>f8704acd-0485-4306-9c3e-65edd9526c31</id>

  
    <entry>
      <title>mdspan -- mdspan: layout_{left,right}_padded概要 P2645R5</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>da93e928b05e188ead8309f5aecb6d2835ffaa1b:reference/mdspan.md</id>
      <updated>2024-07-23T19:54:09+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;dims&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_left.html&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(Fortran/Matlabスタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_right.html&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(C/C++スタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_stride.html&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストライド幅指定レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_left_padded.html&#34;&gt;layout_left_padded&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;パディングあり列優先レイアウトマッピングポリシー (class templte)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_right_padded.html&#34;&gt;layout_right_padded&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;パディングあり行優先レイアウトマッピングポリシー (class templte)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列部分ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/strided_slice.html&#34;&gt;strided_slice&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元のストライド指定要素取り出しを指示する集成体クラステンプレート (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/full_extent_t.html&#34;&gt;full_extent_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/full_extent_t.html&#34;&gt;full_extent&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ値 (variable)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan_mapping_result.html&#34;&gt;submdspan_mapping_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューのレイアウトマッピング情報 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan_extents.html&#34;&gt;submdspan_extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューの多次元配列サイズを計算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan.html&#34;&gt;submdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューを取得する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++26 &lt;code&gt;&lt;a href=&#34;linalg.html&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html&#34; target=&#34;_blank&#34;&gt;P2630R4 Submdspan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2642r5.html&#34; target=&#34;_blank&#34;&gt;P2642R5 Padded mdspan layouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMapping -- mdspan: layout_{left,right}_padded概要 P2645R5</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>da93e928b05e188ead8309f5aecb6d2835ffaa1b:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-07-23T19:54:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
index 4fde61d7e..fbc2c425f 100644
--- a/reference/mdspan/LayoutMapping.md
+++ b/reference/mdspan/LayoutMapping.md
@@ -93,6 +93,8 @@ LayoutMappingを満たす型`M`は
 - [`layout_left::mapping&amp;lt;E&amp;gt;`](layout_left/mapping.md)
 - [`layout_right::mapping&amp;lt;E&amp;gt;`](layout_right/mapping.md)
 - [`layout_stride::mapping&amp;lt;E&amp;gt;`](layout_stride/mapping.md)
+- [`layout_left_padded&amp;lt;PV&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_left_padded/mapping.md.nolink)
+- [`layout_right_padded&amp;lt;PV&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_right_padded/mapping.md.nolink)
 - [`layout_blas_packed&amp;lt;T,SO&amp;gt;::mapping&amp;lt;E&amp;gt;`](/reference/linalg/layout_blas_packed/mapping.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMappingPolicy -- mdspan: layout_{left,right}_padded概要 P2645R5</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMappingPolicy.html"/>
      <id>da93e928b05e188ead8309f5aecb6d2835ffaa1b:reference/mdspan/LayoutMappingPolicy.md</id>
      <updated>2024-07-23T19:54:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMappingPolicy.md b/reference/mdspan/LayoutMappingPolicy.md
index 08ec23b8b..52161f276 100644
--- a/reference/mdspan/LayoutMappingPolicy.md
+++ b/reference/mdspan/LayoutMappingPolicy.md
@@ -40,6 +40,8 @@ LayoutMappingPolicyを満たす型`MP`は
 - [`layout_left`](layout_left.md)
 - [`layout_right`](layout_right.md)
 - [`layout_stride`](layout_stride.md)
+- [`layout_left_padded&amp;lt;PV&amp;gt;`](layout_left_padded.md)
+- [`layout_right_padded&amp;lt;PV&amp;gt;`](layout_right_padded.md)
 - [`linalg::layout_blas_packed&amp;lt;T,SO&amp;gt;`](/reference/linalg/layout_blas_packed.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left_padded -- mdspan: layout_{left,right}_padded概要 P2645R5</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded.html"/>
      <id>da93e928b05e188ead8309f5aecb6d2835ffaa1b:reference/mdspan/layout_left_padded.md</id>
      <updated>2024-07-23T19:54:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded.md b/reference/mdspan/layout_left_padded.md
new file mode 100644
index 000000000..32d916a80
--- /dev/null
+++ b/reference/mdspan/layout_left_padded.md
@@ -0,0 +1,86 @@
+# layout_left_padded
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;size_t PaddingValue = dynamic_extent&amp;gt;
+  struct layout_left_padded {
+    template&amp;lt;class Extents&amp;gt;
+    class mapping;
+  };
+}
+```
+* dynamic_extent[link /reference/span/dynamic_extent.md]
+* Extents[link extents.md]
+* mapping[link layout_left_padded/mapping.md.nolink]
+
+## 概要
+`layout_left_padded`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、パディングあり列優先(column major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
+
+全要素が隣接配置される[`layout_left`](layout_left.md)とは異なり、`layout_left_padded`では最左次元の隣次元（第1次元）ストライド幅`stride(1)`が最左次元の要素数`extent(0)`よりも大きい、つまり第1次元においてパディングが挿入される可能性がある。
+
+`layout_left_padded`の特殊化は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`mapping`](layout_left_padded/mapping.md.nolink) | レイアウトマッピング | C++26 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 0, 0, 3, 4, 0, 0, 5, 6, 0, 0};
+  // 1 3 5
+  // 2 4 6
+  // - - -
+  // - - -
+
+  // 要素数2x3の2次元配列／列優先レイアウト／アライメント4
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;
+  std::mdspan&amp;lt;double, Ext2x3, std::layout_left_padded&amp;lt;4&amp;gt;&amp;gt; mat{arr};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::print(&amp;#34;{}{}&amp;#34;, (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;), mat[i, j]);
+    }
+    std::println();
+  }
+}
+```
+* std::layout_left_padded[color ff0000]
+* extent[link mdspan/extent.md]
+
+### 出力
+```
+1 3 5
+2 4 6
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_left`](layout_left.md)
+
+
+## 参照
+- [P2642R5 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2642r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right_padded -- mdspan: layout_{left,right}_padded概要 P2645R5</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded.html"/>
      <id>da93e928b05e188ead8309f5aecb6d2835ffaa1b:reference/mdspan/layout_right_padded.md</id>
      <updated>2024-07-23T19:54:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded.md b/reference/mdspan/layout_right_padded.md
new file mode 100644
index 000000000..9b5af7ef0
--- /dev/null
+++ b/reference/mdspan/layout_right_padded.md
@@ -0,0 +1,84 @@
+# layout_right_padded
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;size_t PaddingValue = dynamic_extent&amp;gt;
+  struct layout_right_padded {
+    template&amp;lt;class Extents&amp;gt;
+    class mapping;
+  };
+}
+```
+* dynamic_extent[link /reference/span/dynamic_extent.md]
+* Extents[link extents.md]
+* mapping[link layout_right_padded/mapping.md.nolink]
+
+## 概要
+`layout_right_padded`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、パディングあり行優先(row major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
+
+全要素が隣接配置される[`layout_right`](layout_right.md)とは異なり、`layout_right_padded`では最右次元の隣次元（第R-2次元）ストライド幅`stride(`[`extents_type​::​rank()`](extents/rank.md) `- 2)`が最右次元の要素数`extent(extents_type​::​rank() - 1)`よりも大きい、つまり第R-2次元においてパディングが挿入される可能性がある。
+
+`layout_right_padded`の特殊化は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`mapping`](layout_right_padded/mapping.md.nolink) | レイアウトマッピング | C++26 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 3, 0, 4, 5, 6, 0};
+  // 1 2 3 -
+  // 4 5 6 -
+
+  // 要素数2x3の2次元配列／行優先レイアウト／アライメント4
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;
+  std::mdspan&amp;lt;double, Ext2x3, std::layout_right_padded&amp;lt;4&amp;gt;&amp;gt; mat{arr};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::print(&amp;#34;{}{}&amp;#34;, (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;), mat[i, j]);
+    }
+    std::println();
+  }
+}
+```
+* std::layout_right_padded[color ff0000]
+* extent[link mdspan/extent.md]
+
+### 出力
+```
+1 2 3
+4 5 6
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_right`](layout_right.md)
+
+
+## 参照
+- [P2642R5 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2642r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap_elements -- linalg : 赤文字を修正 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/swap_elements.html"/>
      <id>ed8ddfec6ab72490750bcc2988a1f84649cfb9a3:reference/linalg/swap_elements.md</id>
      <updated>2024-07-23T10:03:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/swap_elements.md b/reference/linalg/swap_elements.md
index 553ee7040..932f48479 100644
--- a/reference/linalg/swap_elements.md
+++ b/reference/linalg/swap_elements.md
@@ -106,7 +106,7 @@ int main()
   return 0;
 }
 ```
-* std::linalg::copy[color ff0000]
+* std::linalg::swap_elements[color ff0000]
 
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap_elements -- linalg : swap_elelemtsに例を追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/swap_elements.html"/>
      <id>cbd3dfc2186ae70039acb93ef78f6df5e90581f3:reference/linalg/swap_elements.md</id>
      <updated>2024-07-23T10:02:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/swap_elements.md b/reference/linalg/swap_elements.md
index a8be2a486..553ee7040 100644
--- a/reference/linalg/swap_elements.md
+++ b/reference/linalg/swap_elements.md
@@ -57,9 +57,71 @@ namespace std::linalg {
 
 
 ## 例
+**[注意] 処理系にあるコンパイラで確認していないため、間違っているかもしれません。**
+
+```cpp example
+#include &amp;lt;cmath&amp;gt;
+#include &amp;lt;execution&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;linalg&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+
+template &amp;lt;class Vector&amp;gt;
+void print(Vector v) {
+  for (int i = 0; i &amp;lt; v.extent(0) - 1; ++i) {
+    std::cout &amp;lt;&amp;lt; v[i] &amp;lt;&amp;lt; &amp;#34;, &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; v[v.extent(0) - 1] &amp;lt;&amp;lt; std::endl;
+}
+
+
+int main()
+{
+  constexpr size_t N = 3;
+
+  std::vector&amp;lt;double&amp;gt; a_vec({1, 2, 3});
+  std::mdspan a(a_vec.data(), N);
+
+  std::vector&amp;lt;double&amp;gt; b_vec({4, 5, 6});
+  std::mdspan b(b_vec.data(), N);
+
+  // (1)
+  std::linalg::swap_elements(a, b);
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)\n&amp;#34;;
+  std::cout &amp;lt;&amp;lt; &amp;#34;a\n&amp;#34;;
+  print(a);
+  std::cout &amp;lt;&amp;lt; &amp;#34;b\n&amp;#34;;
+  print(b);
+
+  // (2)
+  std::linalg::swap_elements(std::execution::par, a, b);
+  std::cout &amp;lt;&amp;lt; &amp;#34;(2)\n&amp;#34;;
+  std::cout &amp;lt;&amp;lt; &amp;#34;a\n&amp;#34;;
+  print(a);
+  std::cout &amp;lt;&amp;lt; &amp;#34;b\n&amp;#34;;
+  print(b);
+
+  return 0;
+}
+```
+* std::linalg::copy[color ff0000]
 
 
 ### 出力
+```
+(1)
+a
+4, 5, 6
+b
+1, 2, 3
+(2)
+a
+1, 2, 3
+b
+4, 5, 6
+```
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>add -- linalg : scaleに例を追加し、addの例を修正 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/add.html"/>
      <id>ab8a6b1eb58e0464d8036fb51396c2a124642157:reference/linalg/add.md</id>
      <updated>2024-07-22T21:24:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/add.md b/reference/linalg/add.md
index d46d89d79..fa172a385 100644
--- a/reference/linalg/add.md
+++ b/reference/linalg/add.md
@@ -81,7 +81,7 @@ $x + y$ を`z`に代入する。
 template &amp;lt;class Vector&amp;gt;
 void print(Vector v) {
   for (int i = 0; i &amp;lt; v.extent(0) - 1; ++i) {
-    std::cout &amp;lt;&amp;lt; v[i] &amp;lt;&amp;lt; &amp;#39;, &amp;#39;;
+    std::cout &amp;lt;&amp;lt; v[i] &amp;lt;&amp;lt; &amp;#34;, &amp;#34;;
   }
   std::cout &amp;lt;&amp;lt; v[v.extent(0) - 1] &amp;lt;&amp;lt; std::endl;
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scale -- linalg : scaleに例を追加し、addの例を修正 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/scale.html"/>
      <id>ab8a6b1eb58e0464d8036fb51396c2a124642157:reference/linalg/scale.md</id>
      <updated>2024-07-22T21:24:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/scale.md b/reference/linalg/scale.md
index 7ce8d8ca2..345b613d2 100644
--- a/reference/linalg/scale.md
+++ b/reference/linalg/scale.md
@@ -48,9 +48,54 @@ $$
 
 
 ## 例
+**[注意] 処理系にあるコンパイラで確認していないため、間違っているかもしれません。**
+
+```cpp example
+#include &amp;lt;cmath&amp;gt;
+#include &amp;lt;execution&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;linalg&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+
+template &amp;lt;class Vector&amp;gt;
+void print(Vector v) {
+  for (int i = 0; i &amp;lt; v.extent(0) - 1; ++i) {
+    std::cout &amp;lt;&amp;lt; v[i] &amp;lt;&amp;lt; &amp;#34;, &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; v[v.extent(0) - 1] &amp;lt;&amp;lt; std::endl;
+}
+
+
+int main()
+{
+  constexpr size_t N = 3;
+
+  std::vector&amp;lt;double&amp;gt; a_vec({1, 2, 3});
+  std::mdspan a(a_vec.data(), N);
+
+  double alpha = 2.0;
+
+  // (1)
+  std::linalg::scale(alpha, a);
+  print(a);
+
+  // (2)
+  std::linalg::scale(std::execution::par, alpha, a);
+  print(a);
+
+  return 0;
+}
+```
+* std::linalg::scale[color ff0000]
 
 
 ### 出力
+```
+2, 4, 6
+4, 8, 12
+```
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>println -- fix typo (print -&gt; println)</title>
      <link href="https://cpprefjp.github.io/reference/print/println.html"/>
      <id>8cc238ce20e5136912f1e70f7e426d6cc8b669de:reference/print/println.md</id>
      <updated>2024-07-22T15:31:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/println.md b/reference/print/println.md
index 542fd0bf0..8fd358046 100644
--- a/reference/print/println.md
+++ b/reference/print/println.md
@@ -31,7 +31,7 @@ namespace std {
 
 この関数は、末尾に改行コードが付くことに注意。改行コードが不要な場合は、[`std::print()`](print.md)関数を使用すること。
 
-[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::print()`](/reference/ostream/println.md)関数を使用すること。
+[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::println()`](/reference/ostream/println.md)関数を使用すること。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
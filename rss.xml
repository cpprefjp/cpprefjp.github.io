<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-07-28T14:45:37.928023</updated>
  <id>6e969147-c736-4279-9f29-51c455ca9935</id>

  
    <entry>
      <title>ranlux24 -- randlux(24|48) : cernのページがなくなっていたのでarchiveに差し替え (close #986)</title>
      <link href="https://cpprefjp.github.io/reference/random/ranlux24.html"/>
      <id>0c2cebf7ee866b3c0471ad45e73144634159c697:reference/random/ranlux24.md</id>
      <updated>2022-07-27T00:24:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/ranlux24.md b/reference/random/ranlux24.md
index b91570544..fb8ca50e5 100644
--- a/reference/random/ranlux24.md
+++ b/reference/random/ranlux24.md
@@ -101,6 +101,6 @@ int main()
 
 ## 参照
 - [N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html)
-- [Ranlux - Random number generator](http://luscher.web.cern.ch/luscher/ranlux/)
+- [Ranlux - Random number generator](https://web.archive.org/web/20220414101703/https://luscher.web.cern.ch/luscher/ranlux/)
 - [Uniform Random Numbers of Guaranteed Quality](https://web.archive.org/web/20190922154624/http://cmd.inp.nsk.su/old/cmd2/manuals/cernlib/shortwrups/node244.html)
 - [M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, *ACM Trans. Model. Comput. Simul.* **17**, 15 (2007)](https://doi.org/10.1145/1276927.1276928)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux48 -- randlux(24|48) : cernのページがなくなっていたのでarchiveに差し替え (close #986)</title>
      <link href="https://cpprefjp.github.io/reference/random/ranlux48.html"/>
      <id>0c2cebf7ee866b3c0471ad45e73144634159c697:reference/random/ranlux48.md</id>
      <updated>2022-07-27T00:24:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/ranlux48.md b/reference/random/ranlux48.md
index 476903f37..1833e0562 100644
--- a/reference/random/ranlux48.md
+++ b/reference/random/ranlux48.md
@@ -101,6 +101,6 @@ int main()
 
 ## 参照
 - [N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html)
-- [Ranlux - Random number generator](http://luscher.web.cern.ch/luscher/ranlux/)
+- [Ranlux - Random number generator](https://web.archive.org/web/20220414101703/https://luscher.web.cern.ch/luscher/ranlux/)
 - [Uniform Random Numbers of Guaranteed Quality](https://web.archive.org/web/20190922154624/http://cmd.inp.nsk.su/old/cmd2/manuals/cernlib/shortwrups/node244.html)
 - [M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, *ACM Trans. Model. Comput. Simul.* **17**, 15 (2007)](https://doi.org/10.1145/1276927.1276928)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ssize -- Merge pull request #985 from cpprefjp/fix_ssize_sample</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ssize.html"/>
      <id>520ec66309b3a882c641ec487a44cd8146b3fbfb:reference/iterator/ssize.md</id>
      <updated>2022-07-26T16:51:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ssize.md b/reference/iterator/ssize.md
index eace56b46..6bb79bf89 100644
--- a/reference/iterator/ssize.md
+++ b/reference/iterator/ssize.md
@@ -44,7 +44,6 @@ int main()
   int ar[] = {1, 2, 3};
 
   // コンテナの要素数を取得。
-  // ptrdiff_tは、多くの環境ではintだと思ってよい
   std::ptrdiff_t n1 = std::ssize(v);
   assert(n1 == 3);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ssize -- Merge pull request #985 from cpprefjp/fix_ssize_sample</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ssize.html"/>
      <id>520ec66309b3a882c641ec487a44cd8146b3fbfb:reference/ranges/ssize.md</id>
      <updated>2022-07-26T16:51:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ssize.md b/reference/ranges/ssize.md
index 140d6f0f2..d39cc4155 100644
--- a/reference/ranges/ssize.md
+++ b/reference/ranges/ssize.md
@@ -39,7 +39,6 @@ int main()
   int ar[] = {1, 2, 3};
 
   // コンテナの要素数を取得。
-  // ptrdiff_tは、多くの環境ではintだと思ってよい
   std::ptrdiff_t n1 = std::ranges::ssize(v);
   assert(n1 == 3);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bad_function_call -- bad_function_call.mdの概要の脱字を修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/bad_function_call.html"/>
      <id>dea2af7230b390a2677c1807acc34f5ae3023dcf:reference/functional/bad_function_call.md</id>
      <updated>2022-07-25T22:18:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/bad_function_call.md b/reference/functional/bad_function_call.md
index 4f201b09e..713478dd0 100644
--- a/reference/functional/bad_function_call.md
+++ b/reference/functional/bad_function_call.md
@@ -12,7 +12,7 @@ namespace std {
 * exception[link /reference/exception/exception.md]
 
 ## 概要
-`std::bad_function`は、空の[`std::function`](function.md)オブジェクトに対して`operator()`を呼び出した際に送出される例外クラスである。
+`std::bad_function_call`は、空の[`std::function`](function.md)オブジェクトに対して`operator()`を呼び出した際に送出される例外クラスである。
 
 注意: 空の[`std::function`](function.md)オブジェクトに対して[`std::bind()`](bind.md)を呼び出した結果を[`std::function`](function.md)オブジェクトに格納しても空にはならないが、実際に`operator()`を呼ぶと`std::bad_function_call`例外が送出される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>pea-sys</name>
        <email>49807271+pea-sys@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ssize -- remove unnecessary comment in samples</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ssize.html"/>
      <id>39e256a53a6216a917da44baafc84d6061a03737:reference/iterator/ssize.md</id>
      <updated>2022-07-23T15:43:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ssize.md b/reference/iterator/ssize.md
index eace56b46..6bb79bf89 100644
--- a/reference/iterator/ssize.md
+++ b/reference/iterator/ssize.md
@@ -44,7 +44,6 @@ int main()
   int ar[] = {1, 2, 3};
 
   // コンテナの要素数を取得。
-  // ptrdiff_tは、多くの環境ではintだと思ってよい
   std::ptrdiff_t n1 = std::ssize(v);
   assert(n1 == 3);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ssize -- remove unnecessary comment in samples</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ssize.html"/>
      <id>39e256a53a6216a917da44baafc84d6061a03737:reference/ranges/ssize.md</id>
      <updated>2022-07-23T15:43:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ssize.md b/reference/ranges/ssize.md
index 140d6f0f2..d39cc4155 100644
--- a/reference/ranges/ssize.md
+++ b/reference/ranges/ssize.md
@@ -39,7 +39,6 @@ int main()
   int ar[] = {1, 2, 3};
 
   // コンテナの要素数を取得。
-  // ptrdiff_tは、多くの環境ではintだと思ってよい
   std::ptrdiff_t n1 = std::ranges::ssize(v);
   assert(n1 == 3);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- add missing</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator/op_equal.html"/>
      <id>f04988a625fe9ab6a883ee4a6337886ba4c77062:reference/memory/allocator/op_equal.md</id>
      <updated>2022-07-23T15:20:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator/op_equal.md b/reference/memory/allocator/op_equal.md
index a40c87d29..3cfb146f0 100644
--- a/reference/memory/allocator/op_equal.md
+++ b/reference/memory/allocator/op_equal.md
@@ -4,13 +4,15 @@
 * function template[meta id-type]
 
 ```cpp
-// C++03
-template &amp;lt;class T1, class T2&amp;gt;
-bool operator==(const allocator&amp;lt;T1&amp;gt;&amp;amp;, const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();
-
-// C++11
-template &amp;lt;class T, class U&amp;gt;
-bool operator==(const allocator&amp;lt;T&amp;gt;&amp;amp;, const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;
+namespace std {
+  // C++03
+  template &amp;lt;class T1, class T2&amp;gt;
+  bool operator==(const allocator&amp;lt;T1&amp;gt;&amp;amp;, const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();
+
+  // C++11
+  template &amp;lt;class T, class U&amp;gt;
+  bool operator==(const allocator&amp;lt;T&amp;gt;&amp;amp;, const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;
+}
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- add missing</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator/op_not_equal.html"/>
      <id>f04988a625fe9ab6a883ee4a6337886ba4c77062:reference/memory/allocator/op_not_equal.md</id>
      <updated>2022-07-23T15:20:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator/op_not_equal.md b/reference/memory/allocator/op_not_equal.md
index 0dba1a2da..d819aa05f 100644
--- a/reference/memory/allocator/op_not_equal.md
+++ b/reference/memory/allocator/op_not_equal.md
@@ -4,13 +4,15 @@
 * function template[meta id-type]
 
 ```cpp
-// C++03
-template &amp;lt;class T1, class T2&amp;gt;
-bool operator!=(const allocator&amp;lt;T1&amp;gt;&amp;amp;, const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();
-
-// C++11
-template &amp;lt;class T, class U&amp;gt;
-bool operator!=(const allocator&amp;lt;T&amp;gt;&amp;amp;, const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;
+namespace std {
+  // C++03
+  template &amp;lt;class T1, class T2&amp;gt;
+  bool operator!=(const allocator&amp;lt;T1&amp;gt;&amp;amp;, const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();
+
+  // C++11
+  template &amp;lt;class T, class U&amp;gt;
+  bool operator!=(const allocator&amp;lt;T&amp;gt;&amp;amp;, const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;
+}
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+ -- add missing</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus.html"/>
      <id>f04988a625fe9ab6a883ee4a6337886ba4c77062:reference/string/basic_string/op_plus.md</id>
      <updated>2022-07-23T15:20:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus.md b/reference/string/basic_string/op_plus.md
index da8d2c48b..da716ec55 100644
--- a/reference/string/basic_string/op_plus.md
+++ b/reference/string/basic_string/op_plus.md
@@ -4,65 +4,67 @@
 * function template[meta id-type]
 
 ```cpp
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-            const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (1)
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-            const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (2) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-            basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (3) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-            basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (4) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const charT* lhs,
-            const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (5)
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const charT* lhs,
-            basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (6) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(charT lhs,
-            const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (7)
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(charT lhs,
-            basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (8) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-            const charT* rhs);                                  // (9)
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-            const charT* rhs);                                  // (10) C++11 から
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-            charT rhs);                                         // (11)
-
-template &amp;lt;class charT, class traits, class Allocator&amp;gt;
-basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-            charT rhs);                                         // (12) C++11 から
+namespace std {
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (1)
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (2) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (3) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (4) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const charT* lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (5)
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const charT* lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (6) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(charT lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (7)
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(charT lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (8) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const charT* rhs);                                  // (9)
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              const charT* rhs);                                  // (10) C++11 から
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              charT rhs);                                         // (11)
+
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              charT rhs);                                         // (12) C++11 から
+}
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
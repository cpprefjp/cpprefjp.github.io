<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-09-07T11:04:41.881354</updated>
  <id>b9aea94b-ff4d-42e0-b317-24c5ba756330</id>

  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 -- chore(cpp20/char8_t): fix link</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>bc6b75afc3d74ae37a92c9d949b31b2264418998:lang/cpp20/char8_t.md</id>
      <updated>2020-09-07T20:00:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 781a7f315..cf44bc059 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -168,5 +168,5 @@ enum class char8_t : unsigned char {};
 
 ### その他
 
-- [Proposal for a C/C++ language extension to support portable UTF-16](http://www.unicode.org/%7Easmus/stdc-utf-16.txt)
+- [Proposal for a C/C++ language extension to support portable UTF-16](http://web.archive.org/web/20140701223639/http://www.unicode.org/~asmus/stdc-utf-16.txt)
 - [char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr -- chore(cpp11/constexpr): fix link</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/constexpr.html"/>
      <id>b45e3d0e998d087d9ac8ad0537e2528368d0d2e9:lang/cpp11/constexpr.md</id>
      <updated>2020-09-07T19:51:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/constexpr.md b/lang/cpp11/constexpr.md
index 545fa4c44..8817c78d1 100644
--- a/lang/cpp11/constexpr.md
+++ b/lang/cpp11/constexpr.md
@@ -146,7 +146,7 @@ std::thread t2{job2};
 
 そんな状況のために、[`std::mutex`クラスのデフォルトコンストラクタ](/reference/mutex/mutex/op_constructor.md)には、`constexpr`修飾が行われている。そうすることで、その型の非ローカル変数を作ったときに、その変数は他の任意のスレッド開始よりも先に行われることが保証される。
 
-- [Constant Initialization - 雑貨&amp;#39;s tumblr](http://zakkas783.tumblr.com/post/25490513807/constant-initialization)
+- [雑貨&amp;#39;s tumblr - Constant Initialization](https://zakkas783-blog-blog.tumblr.com/post/25490513807/constant-initialization)
 - [`mutex`のconstexprコンストラクタ](http://d.hatena.ne.jp/yohhoy/20120621/p1)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文 -- fix(cpp11/range-based for): remove dead link</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/range_based_for.html"/>
      <id>8fffa170f5133010ce26b0deb772e3a4d98aeb0b:lang/cpp11/range_based_for.md</id>
      <updated>2020-09-07T19:40:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/range_based_for.md b/lang/cpp11/range_based_for.md
index c22ac5b8f..29d52e3ca 100644
--- a/lang/cpp11/range_based_for.md
+++ b/lang/cpp11/range_based_for.md
@@ -296,5 +296,4 @@ int main()
 - [N2930 Range-Based For Loop Wording (Without Concepts)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html)
 - [N3337 Working Draft, Standard for Programming Language C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf)
 - [一時オブジェクトの寿命と右辺値参照、ムーブセマンティクスのお話 - Qiita](https://qiita.com/rinse_/items/ad0cc7e351e836595c94)
-- [rforでバグる対処　※for( T aaa : vvv ) - Qiita](https://qiita.com/loppta/items/69a0ed56ff12d2c0261c)
 - [c++ - Safe to erase from map inside range based for? - Stack Overflow](https://stackoverflow.com/questions/25246937/safe-to-erase-from-map-inside-range-based-for)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>contiguous_iterator -- contiguous_iterator : typo修正とリンク追加</title>
      <link href="https://cpprefjp.github.io/reference/iterator/contiguous_iterator.html"/>
      <id>bdd7535c8047c7cd743e43cb8f53371bb60b4676:reference/iterator/contiguous_iterator.md</id>
      <updated>2020-09-07T16:41:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/contiguous_iterator.md b/reference/iterator/contiguous_iterator.md
index 217e2c8e0..d9c13dd71 100644
--- a/reference/iterator/contiguous_iterator.md
+++ b/reference/iterator/contiguous_iterator.md
@@ -37,7 +37,7 @@ namespace std {
 
 ## モデル
 
-`a, b`を間接参照可能なイテレータ、`c`を間接参照不可能なイテレータとし、`b`は`a`から、`c`は`b`からそれぞれ到達可能であるとする。そのような型`I`のイテレータ`a, b, c`と`iter_reference_t&amp;lt;I&amp;gt;`の示す型`D`について次の条件を満たす場合に限って、型`I`は`contiguous_iterator`のモデルである。
+`a, b`を間接参照可能なイテレータ、`c`を間接参照不可能なイテレータとし、`b`は`a`から、`c`は`b`からそれぞれ到達可能であるとする。そのような型`I`のイテレータ`a, b, c`と[`iter_difference_t&amp;lt;I&amp;gt;`](/reference/iterator/iter_difference_t.md)の示す型`D`について次の条件を満たす場合に限って、型`I`は`contiguous_iterator`のモデルである。
 
 - `to_address(a) == addressof(*a)`
 - `to_address(b) == to_address(a) + D(b - a)`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>istream -- Merge pull request #803 from kenichiice/fix-istream</title>
      <link href="https://cpprefjp.github.io/reference/istream.html"/>
      <id>e1318046eb4519b833f0caf610c4becab8f36b67:reference/istream.md</id>
      <updated>2020-09-07T14:54:14+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;istream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;istream&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;istream&amp;gt;&lt;/code&gt;ヘッダでは、入力・入出力処理に関するクラスやマニピュレータ（の実体である関数）などが定義されている。&lt;/p&gt;
&lt;h2&gt;型と関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/istream/basic_istream.html&#34;&gt;basic_istream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリーム (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/istream/basic_iostream.html&#34;&gt;basic_iostream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力ストリーム (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/istream/ws.html&#34;&gt;ws&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空白を読み飛ばす (maniplator, function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-04-23T04:54:03.242294</updated>
  <id>63106600-bbb1-4e8a-a8dd-a740e75af083</id>

  
    <entry>
      <title>double_t -- reference/cmath/double_t.md: New sample program</title>
      <link href="https://cpprefjp.github.io/reference/cmath/double_t.html"/>
      <id>dbd3566a381d0bbccd28bfa51211ebeee04a4c5e:reference/cmath/double_t.md</id>
      <updated>2025-04-23T13:49:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/double_t.md b/reference/cmath/double_t.md
index 5fecdefac..57ea716c5 100644
--- a/reference/cmath/double_t.md
+++ b/reference/cmath/double_t.md
@@ -15,6 +15,20 @@ namespace std {
 
 [`FLT_EVAL_METHOD`](/reference/cfloat/flt_eval_method.md) が 0 または 1 のとき `double`, 2 のとき `long double`, それ以外の場合は実装依存。
 
+## 使用例
+```cpp example
+#include &amp;lt;cmath&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+int main() {
+	std::double_t num = 1.00001;
+	std::cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; std::endl;
+}
+```
+
+## 出力例
+```
+1.00001
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>契約プログラミング [P2900R14] -- lang/cpp26/contracts.md: Fixed it correctly</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/contracts.html"/>
      <id>93cfae5853d0ecb315d930cbecf7845d162b5a3a:lang/cpp26/contracts.md</id>
      <updated>2025-04-23T12:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/contracts.md b/lang/cpp26/contracts.md
index f8af8f946..0d82b64e6 100644
--- a/lang/cpp26/contracts.md
+++ b/lang/cpp26/contracts.md
@@ -17,6 +17,20 @@ C++26では、関数の正確な動作を明示的に指定でき、プログラ
 この機能は、関数のインターフェースに対する期待値を明確にする役割があり、バグの早期発見、コードの可読性向上に寄与することが期待されている。
 
 ## 仕様
+### キーワード
+`pre`、`post`、`assert`は文脈依存キーワードである。これらは`override`や`final`と同様に、特定の文脈でのみ特別な意味を持つ。
+
+- 変数名や関数名として使用可能
+  ```cpp
+  int pre = 42;  // OK: 変数名として使用
+  void post() {} // OK: 関数名として使用
+  ```
+- 契約指定の文脈でのみ特別な意味を持つ
+  ```cpp
+  void f()
+    pre(true);   // ここでは契約指定として機能
+  ```
+
 ### 契約の種類
 契約には以下の3種類が定められている。
 
@@ -35,6 +49,24 @@ int safe_division(int numerator, int denominator)
 ```
 ここでは、`denominator`が0でないことを事前条件として指定している。
 
+事前条件では、必ずしも関数のパラメータを使用する必要はない。グローバル状態やクラスのメンバ変数など、呼び出し時点で有効な任意の式を使用できる。
+```cpp
+class Resource {
+private:
+    bool is_available = false;
+public:
+    void use()
+        pre(is_available)  // 引数を使用していない事前条件
+    {
+        // リソースを使用
+    }
+    
+    void activate() {
+        is_available = true;
+    }
+};
+```
+
 #### 事後条件(post)
 関数の実行後に満たされているべき条件を指定する。
 ```cpp
@@ -48,6 +80,25 @@ int increment(int x)
 
 `post`では、返り値を`r`としてバインドし、条件式内で利用している。ここには、任意の変数名が使用できる。変数は定数(`const`)な左辺値参照である。
 
+事後条件の結果名導入子（result-name-introducer）は省略可能である。特に、`void`を返す関数では、戻り値を参照する必要がない場合に省略できる。
+
+```cpp
+class Container {
+    // ...
+public:
+    void clear()
+        post(empty())  // 結果名導入子を省略した事後条件
+    {
+        // コンテナの内容をクリア
+    }
+    
+    bool empty() const {
+        // コンテナが空かどうかを返す
+        return true;
+    }
+};
+```
+
 #### アサーション(assert)
 関数の実行中に満たされているべき条件を指定する。
 ```cpp
@@ -101,7 +152,7 @@ g++ -std=c++26 -fcontracts -fcontract-semantic=observe main.cpp
 以下の操作は、気をつけなければならない。
 - 契約式内において副作用を要する式を記述した場合(グローバル変数の変更、`volatile`変数への参照、`constexpr`でない関数の呼び出しなど)
 - 契約式内で例外を送出すると、std::terminate()が呼び出され、プログラムが終了する。
-- 通常の関数やメンバ関数には契約を適用できるが、特殊な関数(例えば`default`によって定義されたコピーコンストラクタやデストラクタ)には適用できない。適用すると、プログラムは不正(ill-formed)となる。
+- 通常の関数やメンバ関数には契約を適用できるが、特殊な関数(例えば`default`によって定義されたコピーコンストラクタやデストラクタ)には適用できない。適用すると、プログラムは不適格(ill-formed)となる。
 
 ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++ 将来 契約に基づくプログラミング](/lang/future/contract-based_programming.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-12-05T04:30:17.306790</updated>
  <id>eeaf9582-490a-4f48-84bf-6187a585e7f3</id>

  
    <entry>
      <title>コンパイル時アサート [N1720] -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_assert.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:lang/cpp11/static_assert.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_assert.md b/lang/cpp11/static_assert.md
index 0d76aaab1..c0d9d15ae 100644
--- a/lang/cpp11/static_assert.md
+++ b/lang/cpp11/static_assert.md
@@ -37,7 +37,7 @@ static_assert(定数式, 文字列リテラル);
 - 定数式が真であると評価された場合は何も効果がない。定数式が偽であると評価された場合は、指定された文字列リテラルを含む診断メッセージがコンパイラによって問題報告される。ただし、基本ソース文字集合に含まれない文字集合は、診断メッセージに表示することはコンパイラに要求されない
 - `static_assert`宣言では、新たな型やオブジェクトは宣言しない。また、実行時にサイズや時間コストは発生しない
 - (CWG 2518が適用された環境): template文(もしくは適切な特殊化や[C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)の中の文)が実際にインスタンス化されるまで、`static_assert`文の宣言は遅延される。
-  - [C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)の解説を参照
+    - [C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)の解説を参照
 
 ## 例
 ```cpp example
@@ -99,4 +99,4 @@ Boost Static Assertion Libraryが開発されたときに、コンパイル時
 - [N1617 Proposal to Add Static Assertions to the Core Language (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1617.html)
 - [N1720 Proposal to Add Static Assertions to the Core Language (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html)
 - [P2593R1: Allowing static_assert(false)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2593r1.html)
-- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
\ No newline at end of file
+- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>値のコピー省略を保証 [P0135R1] -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:lang/cpp17/guaranteed_copy_elision.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/guaranteed_copy_elision.md b/lang/cpp17/guaranteed_copy_elision.md
index 4cf9aeef9..c11f847d8 100644
--- a/lang/cpp17/guaranteed_copy_elision.md
+++ b/lang/cpp17/guaranteed_copy_elision.md
@@ -35,20 +35,20 @@ int k = X().n; // ok, X() prvalue は xvalue に変換される
 
 不必要な一時オブジェクトの作成を避けるために、一時オブジェクトの実体化は一般に可能な限り遅らせる。
 注：一時オブジェクトは次のとき実体化されている。
-  
- - 参照を`prvalue`にバインドするとき
- - クラス`prvalue`でメンバアクセスを実行するとき
- - 配列からポインタへの変換を実行するとき、または配列`prvalue`をサブスクライブするとき
- -  `braced-init-list`から`std::initializer_list&amp;lt;T&amp;gt;`型のオブジェクトを初期化するとき
- - 特定の未評価のオペランド、および`prvalue`が廃棄値式(`discarded-value expression`)として現れる場合
+
+- 参照を`prvalue`にバインドするとき
+- クラス`prvalue`でメンバアクセスを実行するとき
+- 配列からポインタへの変換を実行するとき、または配列`prvalue`をサブスクライブするとき
+- `braced-init-list`から`std::initializer_list&amp;lt;T&amp;gt;`型のオブジェクトを初期化するとき
+- 特定の未評価のオペランド、および`prvalue`が廃棄値式(`discarded-value expression`)として現れる場合
 
 これより、上の例は「クラス`prvalue`でメンバアクセスを実行するとき」にあたり、`xvalue`として一時オブジェクトを生成している。
 
 また、`prvalue`から`prvalue`への変換は、上記の「一時オブジェクトの実体化は一般に可能な限り遅らせられる」ことより、一時オブジェクトを実体化しない。よって、次の例における`prvalue`の`T`型の戻り値は、呼び出し元の`t`を直接初期化する。
 
 ```cpp
- T Func() {return T();} 
- T t = Func(); // 直接初期化
+T Func() {return T();} 
+T t = Func(); // 直接初期化
 ```
 
 ## 例
@@ -178,4 +178,4 @@ Foo x = foo(); // error Foo型のコピーコンストラクタが必要
 - [Guaranteed Copy Elision](https://jonasdevlieghere.com/guaranteed-copy-elision/)
 
 ## 注釈
-1. **&amp;lt;a id=&amp;#34;note-1&amp;#34; href=&amp;#34;#note_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** &amp;lt;cite&amp;gt;[右辺値、左辺値などの細かい定義 - Qiita](https://qiita.com/rinse_/items/cffa87016b7de49391ae)&amp;lt;/cite&amp;gt;を参照
\ No newline at end of file
+1. **&amp;lt;a id=&amp;#34;note-1&amp;#34; href=&amp;#34;#note_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** &amp;lt;cite&amp;gt;[右辺値、左辺値などの細かい定義 - Qiita](https://qiita.com/rinse_/items/cffa87016b7de49391ae)&amp;lt;/cite&amp;gt;を参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定 [P2718R0] -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/lifetime_extension_in_range_based_for_loop.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:lang/cpp23/lifetime_extension_in_range_based_for_loop.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
index 7e3e11524..18a74d5d0 100644
--- a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
+++ b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
@@ -134,7 +134,7 @@ void foo() {
 - この `t` は &amp;#34;一時オブジェクトの寿命が `for-range-initializer` 完全式の終わりではない場合&amp;#34; にも該当すると考えられる
 - この `t` は、構文的に見ると `for-range-initializer` の中で生じたとは言えないという意見もある
 - &amp;#34;`for-range-initializer` の中&amp;#34; を実行時のことだと解釈すると、そこから呼び出された関数の中なども含むことになるが、それを排除する規定が &amp;#34;一時オブジェクトの寿命が `for-range-initializer` 完全式の終わりではない場合&amp;#34; ではないか
-  - インライン展開されたときなどに効いてくるのかもしれない
+    - インライン展開されたときなどに効いてくるのかもしれない
 
 ## 検討されたほかの選択肢
 
@@ -149,4 +149,4 @@ void foo() {
 - [地に足のついた範囲for文 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2022/12/05/000923)
 - [範囲for文範囲初期化子内の一時オブジェクト延命の説明見直し
  #1246](https://github.com/cpprefjp/site/issues/1246)
-- [Are function parameter objects temporary objects?](https://stackoverflow.com/questions/77676199/are-function-parameter-objects-temporary-objects/77676480)
\ No newline at end of file
+- [Are function parameter objects temporary objects?](https://stackoverflow.com/questions/77676199/are-function-parameter-objects-temporary-objects/77676480)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/algorithm.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 34fe94c3f..0795f49b8 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -273,11 +273,11 @@ ranges::sort(pv, {}, &amp;amp;Person::name);
 - `comp(a, b) &amp;amp;&amp;amp; comp(b, c)` は `comp(a, c)` を意味する
 - `equiv(a, b) &amp;amp;&amp;amp; equiv(b, c)` は `equiv(a, c)` を意味する
 
-  これらの前提のもと、以下を示すことができる。
+これらの前提のもと、以下を示すことができる。
 
-  - `equiv` は同値関係 (equivalence relation) である
-  - `comp` は `equiv` によって決まる同値類 (equivalence class) の間での明確な関係を示す
-  - その示される関係は狭義の全順序 (strict total ordering) である
+- `equiv` は同値関係 (equivalence relation) である
+- `comp` は `equiv` によって決まる同値類 (equivalence class) の間での明確な関係を示す
+- その示される関係は狭義の全順序 (strict total ordering) である
 
 数学用語の日本語訳として &amp;#34;equivalence relation&amp;#34; には「同値関係」 &amp;#34;equivalence class&amp;#34; には「同値類」が定着しており、同じく数学的な文脈では上記 `equiv` を満たす２つの値を「同値」 (equivalent) であると言う。しかし特に数学的でない文脈で「同値」と言った場合は `operator==` による &amp;#34;equal&amp;#34; の関係と誤解される可能性が高いと考えられるため、本サイトでは上記 `equiv` による &amp;#34;equivalent&amp;#34; の関係を「等価」 `operator==` による &amp;#34;equal&amp;#34; の関係を「等値」として区別する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/compare/partial_ordering/op_equal.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/compare/partial_ordering/op_equal.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/partial_ordering/op_equal.md b/reference/compare/partial_ordering/op_equal.md
index d7627d73a..e961cf991 100644
--- a/reference/compare/partial_ordering/op_equal.md
+++ b/reference/compare/partial_ordering/op_equal.md
@@ -34,9 +34,9 @@ friend constexpr bool operator==(/*unspecified*/, partial_ordering v) noexcept;
 ## 備考
 この演算子により、以下の演算子が使用可能になる：
 
-  - `bool operator!=(partial_ordering v, partial_ordering w) noexcept;`
-  - `bool operator!=(partial_ordering v, /*unspecified*/) noexcept;`
-  - `bool operator!=(/*unspecified*/, partial_ordering w) noexcept;`
+- `bool operator!=(partial_ordering v, partial_ordering w) noexcept;`
+- `bool operator!=(partial_ordering v, /*unspecified*/) noexcept;`
+- `bool operator!=(/*unspecified*/, partial_ordering w) noexcept;`
 
 *unspecified*となっている片側の引数には`0`リテラルのみが使用できる。それ以外の物を渡した場合、動作は未定義。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/compare/strong_ordering/op_equal.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/compare/strong_ordering/op_equal.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/strong_ordering/op_equal.md b/reference/compare/strong_ordering/op_equal.md
index 9f05e31d7..421860f86 100644
--- a/reference/compare/strong_ordering/op_equal.md
+++ b/reference/compare/strong_ordering/op_equal.md
@@ -34,9 +34,9 @@ friend constexpr bool operator==(/*unspecified*/, strong_ordering v) noexcept;
 ## 備考
 この演算子により、以下の演算子が使用可能になる：
 
-  - `bool operator!=(strong_ordering v, strong_ordering w) noexcept;`
-  - `bool operator!=(strong_ordering v, /*unspecified*/) noexcept;`
-  - `bool operator!=(/*unspecified*/, strong_ordering w) noexcept;`
+- `bool operator!=(strong_ordering v, strong_ordering w) noexcept;`
+- `bool operator!=(strong_ordering v, /*unspecified*/) noexcept;`
+- `bool operator!=(/*unspecified*/, strong_ordering w) noexcept;`
 
 *unspecified*となっている片側の引数には`0`リテラルのみが使用できる。それ以外の物を渡した場合、動作は未定義。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/compare/weak_ordering/op_equal.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/compare/weak_ordering/op_equal.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/weak_ordering/op_equal.md b/reference/compare/weak_ordering/op_equal.md
index f7f8ec4a2..c6eba5fdb 100644
--- a/reference/compare/weak_ordering/op_equal.md
+++ b/reference/compare/weak_ordering/op_equal.md
@@ -34,9 +34,9 @@ friend constexpr bool operator==(/*unspecified*/, weak_ordering v) noexcept;   /
 ## 備考
 この演算子により、以下の演算子が使用可能になる：
 
-  - `bool operator!=(weak_ordering v, weak_ordering w) noexcept;`
-  - `bool operator!=(weak_ordering v, /*unspecified*/) noexcept;`
-  - `bool operator!=(/*unspecified*/, weak_ordering w) noexcept;`
+- `bool operator!=(weak_ordering v, weak_ordering w) noexcept;`
+- `bool operator!=(weak_ordering v, /*unspecified*/) noexcept;`
+- `bool operator!=(/*unspecified*/, weak_ordering w) noexcept;`
 
 *unspecified*となっている片側の引数には`0`リテラルのみが使用できる。それ以外の物を渡した場合、動作は未定義。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/concepts/swap.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/concepts/swap.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/swap.md b/reference/concepts/swap.md
index 726018ae0..f04d01926 100644
--- a/reference/concepts/swap.md
+++ b/reference/concepts/swap.md
@@ -29,7 +29,7 @@ namespace std::ranges {
    ```
 
 2. `a, b`が共に同じ長さの配列型の左辺値であり、`ranges::swap(*a, *b)`が呼び出し可能ならば`ranges::swap_ranges(a, b)`
-      - 1か3に委譲して要素毎に`swap`される
+    - 1か3に委譲して要素毎に`swap`される
 
 3. `a, b`が共に同じ型`T`の左辺値であり、`T`と`T&amp;amp;`は[`move_constructible&amp;lt;T&amp;gt;`](move_constructible.md)及び[`assignable_from&amp;lt;T&amp;amp;, T&amp;gt;`](assignable_from.md)のモデルとなる場合、[`std::swap()`](/reference/utility/swap.md)相当の操作によって`a, b`の値を交換する。
 
@@ -56,9 +56,9 @@ namespace std::ranges {
 1. 呼び出される`swap(a, b)`（及び、もし返されるのならば戻り値のデストラクタ）が定数評価可能であるかに従う。
 2. `a, b`の要素型によって、1か3に従う
 3. 以下の条件を全て満たす場合に定数評価可能
-      - `T`はリテラル型である
-      - `a = std::move(b), b = std::move(a)`は共に定数評価可能
-      - 次のような初期化式が定数評価可能
+    - `T`はリテラル型である
+    - `a = std::move(b), b = std::move(a)`は共に定数評価可能
+    - 次のような初期化式が定数評価可能
         ```cpp
         T t1(std::move(a));
         T t2(std::move(b));
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function/op_constructor.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/functional/copyable_function/op_constructor.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function/op_constructor.md b/reference/functional/copyable_function/op_constructor.md
index 3db59be24..50abbe182 100644
--- a/reference/functional/copyable_function/op_constructor.md
+++ b/reference/functional/copyable_function/op_constructor.md
@@ -66,8 +66,8 @@ explicit copyable_function(in_place_type_t&amp;lt;T&amp;gt;, initializer_list&amp;lt;U&amp;gt;, Args&amp;amp;&amp;amp;...);
 ## 効果
 - (1), (2) : 関数を持たない空の`copyable_function`オブジェクトを構築する。この方法で構築した後、[`operator bool`](op_bool.md)は`false`を返す。
 - (3) : `*this`の格納オブジェクトを
-   - `f`が値を保持していない場合、値を保持しない。
-   - そうでなければ、`f`が保持する値をコピーして保持する。
+    - `f`が値を保持していない場合、値を保持しない。
+    - そうでなければ、`f`が保持する値をコピーして保持する。
 - (4) : `f`が保持する状態を`*this`に移動する。移動された後の`f`は、未規定な値を持つ有効な状態となる。
 - (5) : `*this`の格納オブジェクトを
     - `f`が関数ポインタ型、メンバ関数ポインタ型、メンバ変数ポインタ型いずれかのヌルポインタ値の場合、値を保持しない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/iterator/data.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/iterator/data.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/data.md b/reference/iterator/data.md
index ed7f419c8..f4a8964c5 100644
--- a/reference/iterator/data.md
+++ b/reference/iterator/data.md
@@ -34,18 +34,18 @@ namespace std {
 ## 備考
 - [機能テストマクロ](../../lang/cpp17/feature_test_macros.md)は`__cpp_lib_nonmember_container_access`で値は`201411`
 - `&amp;lt;iterator&amp;gt;`ヘッダを読み込む以外では、以下のヘッダが読み込まれている場合に、この関数を使用できる：
-     - [`&amp;lt;array&amp;gt;`](../array.md)
-     - [`&amp;lt;deque&amp;gt;`](../deque.md)
-     - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
-     - [`&amp;lt;list&amp;gt;`](../list.md)
-     - [`&amp;lt;map&amp;gt;`](../map.md)
-     - [`&amp;lt;regex&amp;gt;`](../regex.md)
-     - [`&amp;lt;set&amp;gt;`](../set.md)
-     - [`&amp;lt;string&amp;gt;`](../string.md)
-     - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
-     - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
-     - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
-     - [`&amp;lt;vector&amp;gt;`](../vector.md)
+    - [`&amp;lt;array&amp;gt;`](../array.md)
+    - [`&amp;lt;deque&amp;gt;`](../deque.md)
+    - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
+    - [`&amp;lt;list&amp;gt;`](../list.md)
+    - [`&amp;lt;map&amp;gt;`](../map.md)
+    - [`&amp;lt;regex&amp;gt;`](../regex.md)
+    - [`&amp;lt;set&amp;gt;`](../set.md)
+    - [`&amp;lt;string&amp;gt;`](../string.md)
+    - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
+    - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
+    - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
+    - [`&amp;lt;vector&amp;gt;`](../vector.md)
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/iterator/empty.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/iterator/empty.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/empty.md b/reference/iterator/empty.md
index d0f3c9373..63e62f390 100644
--- a/reference/iterator/empty.md
+++ b/reference/iterator/empty.md
@@ -40,18 +40,18 @@ namespace std {
 ## 備考
 - [機能テストマクロ](../../lang/cpp17/feature_test_macros.md)は`__cpp_lib_nonmember_container_access`で値は`201411`
 - `&amp;lt;iterator&amp;gt;`ヘッダを読み込む以外では、以下のヘッダが読み込まれている場合に、この関数を使用できる：
-     - [`&amp;lt;array&amp;gt;`](../array.md)
-     - [`&amp;lt;deque&amp;gt;`](../deque.md)
-     - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
-     - [`&amp;lt;list&amp;gt;`](../list.md)
-     - [`&amp;lt;map&amp;gt;`](../map.md)
-     - [`&amp;lt;regex&amp;gt;`](../regex.md)
-     - [`&amp;lt;set&amp;gt;`](../set.md)
-     - [`&amp;lt;string&amp;gt;`](../string.md)
-     - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
-     - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
-     - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
-     - [`&amp;lt;vector&amp;gt;`](../vector.md)
+    - [`&amp;lt;array&amp;gt;`](../array.md)
+    - [`&amp;lt;deque&amp;gt;`](../deque.md)
+    - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
+    - [`&amp;lt;list&amp;gt;`](../list.md)
+    - [`&amp;lt;map&amp;gt;`](../map.md)
+    - [`&amp;lt;regex&amp;gt;`](../regex.md)
+    - [`&amp;lt;set&amp;gt;`](../set.md)
+    - [`&amp;lt;string&amp;gt;`](../string.md)
+    - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
+    - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
+    - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
+    - [`&amp;lt;vector&amp;gt;`](../vector.md)
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_assign.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/iterator/move_iterator/op_assign.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_assign.md b/reference/iterator/move_iterator/op_assign.md
index 42def6003..90291eae8 100644
--- a/reference/iterator/move_iterator/op_assign.md
+++ b/reference/iterator/move_iterator/op_assign.md
@@ -24,12 +24,12 @@ constexpr move_iterator&amp;amp; operator=(move_iterator&amp;amp;&amp;amp;) = default;      // (3) C++17
 ## テンプレートパラメータ制約
 
 - C++17まで
-  - (1) : `U`が`Iterator`に変換可能であること
+    - (1) : `U`が`Iterator`に変換可能であること
 - C++20
-  - (1) : 次の両方を満たす
-    - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
-    - `const U&amp;amp;`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
-    - `Iterator&amp;amp;, const U&amp;amp;`が[`assignable_from&amp;lt;Iterator&amp;amp;, const U&amp;amp;&amp;gt;`](/reference/concepts/assignable_from.md)のモデルとなること。
+    - (1) : 次の両方を満たす
+        - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
+        - `const U&amp;amp;`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
+        - `Iterator&amp;amp;, const U&amp;amp;`が[`assignable_from&amp;lt;Iterator&amp;amp;, const U&amp;amp;&amp;gt;`](/reference/concepts/assignable_from.md)のモデルとなること。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_constructor.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/iterator/move_iterator/op_constructor.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_constructor.md b/reference/iterator/move_iterator/op_constructor.md
index 5c9df17b9..b617d135b 100644
--- a/reference/iterator/move_iterator/op_constructor.md
+++ b/reference/iterator/move_iterator/op_constructor.md
@@ -31,11 +31,11 @@ constexpr move_iterator(move_iterator&amp;amp;&amp;amp;) noexcept = default; // (4) C++17
 ## テンプレートパラメータ制約
 
 - C++17まで
-  - (3) : `U`が`Iterator`に変換可能であること
+    - (3) : `U`が`Iterator`に変換可能であること
 - C++20
-  - (3) : 次の全てを満たす
-    - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
-    - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
+    - (3) : 次の全てを満たす
+        - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
+        - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/iterator/reverse_iterator/op_assign.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/iterator/reverse_iterator/op_assign.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/reverse_iterator/op_assign.md b/reference/iterator/reverse_iterator/op_assign.md
index 2f35f6909..fb4db494a 100644
--- a/reference/iterator/reverse_iterator/op_assign.md
+++ b/reference/iterator/reverse_iterator/op_assign.md
@@ -20,12 +20,12 @@ constexpr reverse_iterator&amp;amp; operator=(const reverse_iterator&amp;lt;U&amp;gt;&amp;amp; u);        // (
 ## テンプレートパラメータ制約
 
 - C++17まで
-  - (2) : `U`が`Iterator`に変換可能であること
+    - (2) : `U`が`Iterator`に変換可能であること
 - C++20
-  - (2) : 次の両方を満たす
-    - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
-    - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
-    - `Iterator&amp;amp;, const U&amp;amp;`が[`assignable_from&amp;lt;Iterator&amp;amp;, const U&amp;amp;&amp;gt;`](/reference/concepts/assignable_from.md)のモデルとなること。
+    - (2) : 次の両方を満たす
+        - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
+        - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
+        - `Iterator&amp;amp;, const U&amp;amp;`が[`assignable_from&amp;lt;Iterator&amp;amp;, const U&amp;amp;&amp;gt;`](/reference/concepts/assignable_from.md)のモデルとなること。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/iterator/reverse_iterator/op_constructor.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/iterator/reverse_iterator/op_constructor.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/reverse_iterator/op_constructor.md b/reference/iterator/reverse_iterator/op_constructor.md
index 6f1dcadc6..35c326cea 100644
--- a/reference/iterator/reverse_iterator/op_constructor.md
+++ b/reference/iterator/reverse_iterator/op_constructor.md
@@ -28,11 +28,11 @@ constexpr reverse_iterator(const reverse_iterator&amp;lt;U&amp;gt;&amp;amp; u); // (3) C++17
 ## テンプレートパラメータ制約
 
 - C++17まで
-  - (3) : `U`が`Iterator`に変換可能であること
+    - (3) : `U`が`Iterator`に変換可能であること
 - C++20
-  - (3) : 次の両方を満たす
-    - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
-    - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
+    - (3) : 次の両方を満たす
+        - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
+        - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
 
 ## 要件
 - (3) : `U`が`Iterator`に変換可能であること
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/iterator/size.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/iterator/size.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/size.md b/reference/iterator/size.md
index cba14eef4..21906c4d5 100644
--- a/reference/iterator/size.md
+++ b/reference/iterator/size.md
@@ -26,18 +26,18 @@ namespace std {
 ## 備考
 - [機能テストマクロ](../../lang/cpp17/feature_test_macros.md)は`__cpp_lib_nonmember_container_access`で値は`201411`
 - `&amp;lt;iterator&amp;gt;`ヘッダを読み込む以外では、以下のヘッダが読み込まれている場合に、この関数を使用できる：
-     - [`&amp;lt;array&amp;gt;`](../array.md)
-     - [`&amp;lt;deque&amp;gt;`](../deque.md)
-     - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
-     - [`&amp;lt;list&amp;gt;`](../list.md)
-     - [`&amp;lt;map&amp;gt;`](../map.md)
-     - [`&amp;lt;regex&amp;gt;`](../regex.md)
-     - [`&amp;lt;set&amp;gt;`](../set.md)
-     - [`&amp;lt;string&amp;gt;`](../string.md)
-     - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
-     - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
-     - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
-     - [`&amp;lt;vector&amp;gt;`](../vector.md)
+    - [`&amp;lt;array&amp;gt;`](../array.md)
+    - [`&amp;lt;deque&amp;gt;`](../deque.md)
+    - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
+    - [`&amp;lt;list&amp;gt;`](../list.md)
+    - [`&amp;lt;map&amp;gt;`](../map.md)
+    - [`&amp;lt;regex&amp;gt;`](../regex.md)
+    - [`&amp;lt;set&amp;gt;`](../set.md)
+    - [`&amp;lt;string&amp;gt;`](../string.md)
+    - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
+    - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
+    - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
+    - [`&amp;lt;vector&amp;gt;`](../vector.md)
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_product -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_product.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/linalg/hermitian_matrix_product.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_product.md b/reference/linalg/hermitian_matrix_product.md
index 1f50e37d4..ab9ab2f33 100644
--- a/reference/linalg/hermitian_matrix_product.md
+++ b/reference/linalg/hermitian_matrix_product.md
@@ -124,10 +124,10 @@ namespace std::linalg {
 - 共通
     + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
     + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(C)&amp;gt;()`が`true`
-  - (1), (2), (5), (6):
+- (1), (2), (5), (6):
     + `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  - (3), (4), (7), (8):
+- (3), (4), (7), (8):
     + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
 - (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_rank_1_update -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_rank_1_update.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/linalg/hermitian_matrix_rank_1_update.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_rank_1_update.md b/reference/linalg/hermitian_matrix_rank_1_update.md
index 0aaf1dd6d..2211afe13 100644
--- a/reference/linalg/hermitian_matrix_rank_1_update.md
+++ b/reference/linalg/hermitian_matrix_rank_1_update.md
@@ -66,10 +66,10 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_rank_2_update -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_rank_2_update.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/linalg/hermitian_matrix_rank_2_update.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_rank_2_update.md b/reference/linalg/hermitian_matrix_rank_2_update.md
index f42c7b9f8..514255df1 100644
--- a/reference/linalg/hermitian_matrix_rank_2_update.md
+++ b/reference/linalg/hermitian_matrix_rank_2_update.md
@@ -43,9 +43,9 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
 - (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_vector_product -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_vector_product.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/linalg/hermitian_matrix_vector_product.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_vector_product.md b/reference/linalg/hermitian_matrix_vector_product.md
index c56c46d0d..8b0f40f3c 100644
--- a/reference/linalg/hermitian_matrix_vector_product.md
+++ b/reference/linalg/hermitian_matrix_vector_product.md
@@ -74,18 +74,18 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
 - (3), (4): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(x),decltype(y),decltype(z)&amp;gt;()`が`true`
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
 - 共通:
-  + `A.extent(0) == A.extent(1)`
-  + [`multipliable`](multipliable.md)`(A, x, y) == true`
+    + `A.extent(0) == A.extent(1)`
+    + [`multipliable`](multipliable.md)`(A, x, y) == true`
 - (3), (4): [`addable`](addable.md)`(x, y, z) == true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_product -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_product.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/linalg/symmetric_matrix_product.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_product.md b/reference/linalg/symmetric_matrix_product.md
index 3c3b35acf..e71eb1d41 100644
--- a/reference/linalg/symmetric_matrix_product.md
+++ b/reference/linalg/symmetric_matrix_product.md
@@ -124,10 +124,10 @@ namespace std::linalg {
 - 共通
     + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
     + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(C)&amp;gt;()`が`true`
-  - (1), (2), (5), (6):
+- (1), (2), (5), (6):
     + `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  - (3), (4), (7), (8):
+- (3), (4), (7), (8):
     + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
 - (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
@@ -136,7 +136,7 @@ namespace std::linalg {
 
 ## 事前条件
 - 共通
-  + [`multipliable`](multipliable.md)`(A, B, C) == true`
+    + [`multipliable`](multipliable.md)`(A, B, C) == true`
 - (1), (2), (5), (6): `A.extent(0) == A.extent(1)`
 - (3), (4), (7), (8): `B.extent(0) == B.extent(1)`
 - (5), (6), (7), (8): [`addable`](addable.md)`(E, E, C) == true`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_rank_1_update -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_rank_1_update.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/linalg/symmetric_matrix_rank_1_update.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_rank_1_update.md b/reference/linalg/symmetric_matrix_rank_1_update.md
index 1c3c08789..a4d66f1fb 100644
--- a/reference/linalg/symmetric_matrix_rank_1_update.md
+++ b/reference/linalg/symmetric_matrix_rank_1_update.md
@@ -63,10 +63,10 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_rank_2_update -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_rank_2_update.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/linalg/symmetric_matrix_rank_2_update.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_rank_2_update.md b/reference/linalg/symmetric_matrix_rank_2_update.md
index 92c8b7da4..a00862056 100644
--- a/reference/linalg/symmetric_matrix_rank_2_update.md
+++ b/reference/linalg/symmetric_matrix_rank_2_update.md
@@ -43,9 +43,9 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
 - (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_vector_product -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_vector_product.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/linalg/symmetric_matrix_vector_product.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_vector_product.md b/reference/linalg/symmetric_matrix_vector_product.md
index 1dc63373a..193260dfa 100644
--- a/reference/linalg/symmetric_matrix_vector_product.md
+++ b/reference/linalg/symmetric_matrix_vector_product.md
@@ -70,10 +70,10 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
 - (3), (4): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(x),decltype(y),decltype(z)&amp;gt;()`が`true`
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_product -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_product.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/linalg/triangular_matrix_product.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_product.md b/reference/linalg/triangular_matrix_product.md
index 5d20663ff..ef75266e0 100644
--- a/reference/linalg/triangular_matrix_product.md
+++ b/reference/linalg/triangular_matrix_product.md
@@ -141,10 +141,10 @@ namespace std::linalg {
     + `DiagonalStorage`が[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
     + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
     + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(C)&amp;gt;()`が`true`
-  - (1), (2), (5), (6):
+- (1), (2), (5), (6):
     + `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  - (3), (4), (7), (8):
+- (3), (4), (7), (8):
     + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
 - (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
@@ -153,7 +153,7 @@ namespace std::linalg {
 
 ## 事前条件
 - 共通
-  + [`multipliable`](multipliable.md)`(A, B, C) == true`
+    + [`multipliable`](multipliable.md)`(A, B, C) == true`
 - (1), (2), (5), (6): `A.extent(0) == A.extent(1)`
 - (3), (4), (7), (8): `B.extent(0) == B.extent(1)`
 - (5), (6), (7), (8): [`addable`](addable.md)`(E, E, C) == true`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_vector_product -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_vector_product.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/linalg/triangular_matrix_vector_product.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_vector_product.md b/reference/linalg/triangular_matrix_vector_product.md
index 8e835bebc..28df94dbe 100644
--- a/reference/linalg/triangular_matrix_vector_product.md
+++ b/reference/linalg/triangular_matrix_vector_product.md
@@ -103,11 +103,11 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `DiagonalStorage`は[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(y)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`y`の次元が同じであること)
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `DiagonalStorage`は[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(y)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`y`の次元が同じであること)
 - (1), (2), (5), (6): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
 - (5), (6): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(z)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
 - (2), (4), (6): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
@@ -115,8 +115,8 @@ namespace std::linalg {
 
 ## 事前条件
 - 共通:
-  + `A.extent(0) == A.extent(1)` (つまり`A`が正方行列であること)
-  + `A.extent(0) == y.extent(0)` (つまり`y`に結果を代入できること)
+    + `A.extent(0) == A.extent(1)` (つまり`A`が正方行列であること)
+    + `A.extent(0) == y.extent(0)` (つまり`y`に結果を代入できること)
 - (1), (2), (5), (6): `A.extent(0) == x.extent(0)` (つまり$Ax$を計算できること)
 - (5), (6): `A.extent(0) == z.extent(0)` (つまり`z`に結果を代入できること)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_vector_solve -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_vector_solve.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/linalg/triangular_matrix_vector_solve.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_vector_solve.md b/reference/linalg/triangular_matrix_vector_solve.md
index d680f9465..94b17c28b 100644
--- a/reference/linalg/triangular_matrix_vector_solve.md
+++ b/reference/linalg/triangular_matrix_vector_solve.md
@@ -134,19 +134,19 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `DiagonalStorage`は[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(b)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`b`の次元が同じであること)
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `DiagonalStorage`は[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(b)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`b`の次元が同じであること)
 - (1), (2), (3), (4): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`b`の次元が同じであること)
 - (2), (4), (6), (8): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
 - 共通:
-  + `A.extent(0) == A.extent(1)` (つまり`A`が正方行列であること)
-  + `A.extent(0) == b.extent(0)` (つまり`A`の次元と`b`の次元が同じであること)
+    + `A.extent(0) == A.extent(1)` (つまり`A`が正方行列であること)
+    + `A.extent(0) == b.extent(0)` (つまり`A`の次元と`b`の次元が同じであること)
 - (1), (2), (3), (4): `A.extent(0) == x.extent(0)` (つまり`A`の次元と`x`の次元が同じであること)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_default_construct.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/memory/ranges_uninitialized_default_construct.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_default_construct.md b/reference/memory/ranges_uninitialized_default_construct.md
index ee6fac6fa..732025acc 100644
--- a/reference/memory/ranges_uninitialized_default_construct.md
+++ b/reference/memory/ranges_uninitialized_default_construct.md
@@ -68,7 +68,7 @@ return first;
 
 ## 備考
 - [`std::vector`](/reference/vector/vector.md)クラスの要素数を変更する操作は、要素を値構築するためゼロ初期化が行われる。その値初期化のコストが気になるような場合に、デフォルト構築することでプログラマの責任で必要な分だけ任意に初期化でき、パフォーマンス向上が期待できるようになる。
-     - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
+    - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_default_construct.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/memory/uninitialized_default_construct.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_default_construct.md b/reference/memory/uninitialized_default_construct.md
index 64df4a7dd..bd9133eb8 100644
--- a/reference/memory/uninitialized_default_construct.md
+++ b/reference/memory/uninitialized_default_construct.md
@@ -44,7 +44,7 @@ for (; first != last; ++first)
 
 ## 備考
 - [`std::vector`](/reference/vector/vector.md)クラスの要素数を変更する操作は、要素を値構築するためゼロ初期化が行われる。その値初期化のコストが気になるような場合に、デフォルト構築することでプログラマの責任で必要な分だけ任意に初期化でき、パフォーマンス向上が期待できるようになる。
-     - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
+    - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
 
 
 ### 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct_n -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_default_construct_n.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/memory/uninitialized_default_construct_n.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_default_construct_n.md b/reference/memory/uninitialized_default_construct_n.md
index 104b396f2..c489c0e84 100644
--- a/reference/memory/uninitialized_default_construct_n.md
+++ b/reference/memory/uninitialized_default_construct_n.md
@@ -43,7 +43,7 @@ return first;
 
 ## 備考
 - [`std::vector`](/reference/vector/vector.md)クラスの要素数を変更する操作は、要素を値構築するためゼロ初期化が行われる。その値初期化のコストが気になるような場合に、デフォルト構築することでプログラマの責任で必要な分だけ任意に初期化でき、パフォーマンス向上が期待できるようになる。
-     - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
+    - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
 
 
 ### 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/op_assign.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/node_handle/node_handle/op_assign.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/op_assign.md b/reference/node_handle/node_handle/op_assign.md
index f72652e47..efa67a46f 100644
--- a/reference/node_handle/node_handle/op_assign.md
+++ b/reference/node_handle/node_handle/op_assign.md
@@ -19,11 +19,10 @@ node_handle&amp;amp; operator=(node_handle&amp;amp;&amp;amp; nh);
 
 ## 効果
 - `ptr_ != nullptr` の場合、
-  - `std::allocator_traits&amp;lt;allocator_type&amp;gt;::destroy` を呼び出して `ptr_` が指す `container_node_type` オブジェクト内の `value_type` サブオブジェクトを破棄し、
-  - 次に `std::allocator_traits&amp;lt;allocator_type&amp;gt;::template rebind_traits&amp;lt;container_node_type&amp;gt;::deallocate` を呼び出して `ptr_` の割り当てを解除する。
-
-- `ptr_` に `nh.ptr_` を代入する。  
-- `!alloc_` または `std::allocator_traits&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value` が `true` の場合、`nh.alloc_` を `alloc_` にムーブ代入する。  
+    - `std::allocator_traits&amp;lt;allocator_type&amp;gt;::destroy` を呼び出して `ptr_` が指す `container_node_type` オブジェクト内の `value_type` サブオブジェクトを破棄し、
+    - 次に `std::allocator_traits&amp;lt;allocator_type&amp;gt;::template rebind_traits&amp;lt;container_node_type&amp;gt;::deallocate` を呼び出して `ptr_` の割り当てを解除する。
+- `ptr_` に `nh.ptr_` を代入する。
+- `!alloc_` または `std::allocator_traits&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value` が `true` の場合、`nh.alloc_` を `alloc_` にムーブ代入する。
 - `nh.ptr_` に `nullptr` を代入し、`nh.alloc_` に `nullopt` を代入する。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generate_random -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/random/generate_random.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/random/generate_random.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/generate_random.md b/reference/random/generate_random.md
index b13fab2c8..254bb192a 100644
--- a/reference/random/generate_random.md
+++ b/reference/random/generate_random.md
@@ -94,7 +94,7 @@ for (auto&amp;amp; x : v) {
     * std::move[link /reference/utility/move.md]
 
 - (3) :
-     - `d.generate_random(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r), g)`が妥当な式であれば、それを呼び出す
+    - `d.generate_random(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r), g)`が妥当な式であれば、それを呼び出す
         - 備考 : 分布生成器が`generate_random()`メンバ関数をもっていればそれを使用する
     - そうでなく、`R`が[`sized_range`](/reference/ranges/sized_range.md)のモデルである場合、値`N`と[`span`](/reference/span/span.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;D&amp;amp;, G&amp;amp;&amp;gt;, N&amp;gt;`型オブジェクト`s`に対して、式[`invoke`](/reference/functional/invoke.md)`(d, g)`または`d.generate_random(s, g)`を未規定の回数だけ呼び出して実行し、`r`の各要素に代入する
         - 備考 : ここでの`N`は乱数生成の回数と異なってもよい
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_constructor.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/random/subtract_with_carry_engine/op_constructor.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine/op_constructor.md b/reference/random/subtract_with_carry_engine/op_constructor.md
index 7ac7e3709..a954e310d 100644
--- a/reference/random/subtract_with_carry_engine/op_constructor.md
+++ b/reference/random/subtract_with_carry_engine/op_constructor.md
@@ -23,7 +23,7 @@ subtract_with_carry_engine(subtract_with_carry_engine&amp;amp;&amp;amp; e) = default;      // (5
 ## 概要
 - (1) : デフォルトコンストラクタ
     - C++17まで：シード値が指定されない場合はデフォルトのシード値 (`subtract_with_carry_engine::default_seed`) で構築される
-      - [`linear_congruential_engine`](../linear_congruential_engine.md) を $n = \lceil 32 / \mathtt{w} \rceil$ 回 (`w` は `subtract_with_carry_engine::word_size`) 呼び出して内部状態を初期化する
+        - [`linear_congruential_engine`](../linear_congruential_engine.md) を $n = \lceil 32 / \mathtt{w} \rceil$ 回 (`w` は `subtract_with_carry_engine::word_size`) 呼び出して内部状態を初期化する
     - C++20から : デフォルトのシード値 (`subtract_with_carry_engine::default_seed`) で(2)に委譲
     - C++26から : シード値を`0u`として(2)に委譲
 - (2) : シード値を受け取って状態シーケンスを構築する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/streambuf/basic_streambuf/op_constructor.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/streambuf/basic_streambuf/op_constructor.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/streambuf/basic_streambuf/op_constructor.md b/reference/streambuf/basic_streambuf/op_constructor.md
index 3aed4eb9a..c764eb4d4 100644
--- a/reference/streambuf/basic_streambuf/op_constructor.md
+++ b/reference/streambuf/basic_streambuf/op_constructor.md
@@ -30,21 +30,21 @@ namespace std {
 
 ## 事後条件
 - (1) :
-  - `eback()` == `nullptr`
-  - `gptr()` == `nullptr`
-  - `egptr()` == `nullptr`
-  - `pbase()` == `nullptr`
-  - `pptr()` == `nullptr`
-  - `epptr()` == `nullptr`
-  - `getloc()` == `locale()`
+    - `eback()` == `nullptr`
+    - `gptr()` == `nullptr`
+    - `egptr()` == `nullptr`
+    - `pbase()` == `nullptr`
+    - `pptr()` == `nullptr`
+    - `epptr()` == `nullptr`
+    - `getloc()` == `locale()`
 - (2) :
-  - `eback()` == `rhs.eback()`
-  - `gptr()` == `rhs.gptr()`
-  - `egptr()` == `rhs.egptr()`
-  - `pbase()` == `rhs.pbase()`
-  - `pptr()` == `rhs.pptr()`
-  - `epptr()` == `rhs.epptr()`
-  - `getloc()` == `rhs.getloc()`
+    - `eback()` == `rhs.eback()`
+    - `gptr()` == `rhs.gptr()`
+    - `egptr()` == `rhs.egptr()`
+    - `pbase()` == `rhs.pbase()`
+    - `pptr()` == `rhs.pptr()`
+    - `epptr()` == `rhs.epptr()`
+    - `getloc()` == `rhs.getloc()`
 
 
 ## 実装例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_type -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/common_type.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/type_traits/common_type.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/common_type.md b/reference/type_traits/common_type.md
index 1a0d91e09..6ef83f500 100644
--- a/reference/type_traits/common_type.md
+++ b/reference/type_traits/common_type.md
@@ -64,8 +64,8 @@ namespace std {
 `common_type`は以下の条件を満たす場合に、2引数のもの（`common_type&amp;lt;T1, T2&amp;gt;`）に限ってユーザー定義の特殊化が許可されている。
 
 - `T1, T2`の少なくとも片方はプログラム定義型に依存している
-  - プログラム定義型とは、標準ライブラリの型を除いた、ユーザーによって定義された型のこと
-	- 「プログラム定義型に依存している」とは例えば、プログラム定義型に対する`vector`等の特殊化のこと
+    - プログラム定義型とは、標準ライブラリの型を除いた、ユーザーによって定義された型のこと
+        - 「プログラム定義型に依存している」とは例えば、プログラム定義型に対する`vector`等の特殊化のこと
 - `T1, T2`に対する[`decay`](/reference/type_traits/decay.md)の適用はともに恒等写像となる（上記参照）
 
 そして、そのような特殊化は必ずしもメンバ型`type`を持たなくても構わない。  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:reference/unordered_set/unordered_set/insert.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/insert.md b/reference/unordered_set/unordered_set/insert.md
index c6eb0e16e..ffa4344d8 100644
--- a/reference/unordered_set/unordered_set/insert.md
+++ b/reference/unordered_set/unordered_set/insert.md
@@ -106,7 +106,7 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (6) C++17
 	のいずれかである。  
 	なお、後者の条件は「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。[`reserve`](reserve.md) も参照。
 
- - (5), (6) の場合、要素はコピーもムーブもされない。
+- (5), (6) の場合、要素はコピーもムーブもされない。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>はじめてのコントリビュート -- Merge pull request #1367 from cpprefjp/display_error_check_ci</title>
      <link href="https://cpprefjp.github.io/start_editing.html"/>
      <id>a693024efb7b8405ac45c0f783b49c6f4ff48391:start_editing.md</id>
      <updated>2024-12-05T11:57:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing.md b/start_editing.md
index 94bbf5891..f531cda39 100644
--- a/start_editing.md
+++ b/start_editing.md
@@ -60,6 +60,8 @@ buildアクションで、MarkdownからHTMLへの変換と、GitHub Pagesへの
 - 用語の誤った使い方を検出 (defined word checkアクション)
     - 用語の許可した使い方、許可しない使い方を列挙し、許可した使い方以外の使われ方をエラーとして検出する
     - 具体的な用語、許可した使い方、許可しない使い方は、[defined_word_check.py](https://github.com/cpprefjp/site/blob/master/.github/workflows/script/defined_word_check.py)を参照
+- 表示崩れする書き方を検出 (display error checkアクション)
+    - 箇条書きのインデントが4の倍数でない行をエラーとして検出する
 
 
 ### 自動反映ツール
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時アサート [N1720] -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_assert.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:lang/cpp11/static_assert.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_assert.md b/lang/cpp11/static_assert.md
index 0d76aaab1..c0d9d15ae 100644
--- a/lang/cpp11/static_assert.md
+++ b/lang/cpp11/static_assert.md
@@ -37,7 +37,7 @@ static_assert(定数式, 文字列リテラル);
 - 定数式が真であると評価された場合は何も効果がない。定数式が偽であると評価された場合は、指定された文字列リテラルを含む診断メッセージがコンパイラによって問題報告される。ただし、基本ソース文字集合に含まれない文字集合は、診断メッセージに表示することはコンパイラに要求されない
 - `static_assert`宣言では、新たな型やオブジェクトは宣言しない。また、実行時にサイズや時間コストは発生しない
 - (CWG 2518が適用された環境): template文(もしくは適切な特殊化や[C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)の中の文)が実際にインスタンス化されるまで、`static_assert`文の宣言は遅延される。
-  - [C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)の解説を参照
+    - [C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)の解説を参照
 
 ## 例
 ```cpp example
@@ -99,4 +99,4 @@ Boost Static Assertion Libraryが開発されたときに、コンパイル時
 - [N1617 Proposal to Add Static Assertions to the Core Language (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1617.html)
 - [N1720 Proposal to Add Static Assertions to the Core Language (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html)
 - [P2593R1: Allowing static_assert(false)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2593r1.html)
-- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
\ No newline at end of file
+- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>値のコピー省略を保証 [P0135R1] -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:lang/cpp17/guaranteed_copy_elision.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/guaranteed_copy_elision.md b/lang/cpp17/guaranteed_copy_elision.md
index 4cf9aeef9..c11f847d8 100644
--- a/lang/cpp17/guaranteed_copy_elision.md
+++ b/lang/cpp17/guaranteed_copy_elision.md
@@ -35,20 +35,20 @@ int k = X().n; // ok, X() prvalue は xvalue に変換される
 
 不必要な一時オブジェクトの作成を避けるために、一時オブジェクトの実体化は一般に可能な限り遅らせる。
 注：一時オブジェクトは次のとき実体化されている。
-  
- - 参照を`prvalue`にバインドするとき
- - クラス`prvalue`でメンバアクセスを実行するとき
- - 配列からポインタへの変換を実行するとき、または配列`prvalue`をサブスクライブするとき
- -  `braced-init-list`から`std::initializer_list&amp;lt;T&amp;gt;`型のオブジェクトを初期化するとき
- - 特定の未評価のオペランド、および`prvalue`が廃棄値式(`discarded-value expression`)として現れる場合
+
+- 参照を`prvalue`にバインドするとき
+- クラス`prvalue`でメンバアクセスを実行するとき
+- 配列からポインタへの変換を実行するとき、または配列`prvalue`をサブスクライブするとき
+- `braced-init-list`から`std::initializer_list&amp;lt;T&amp;gt;`型のオブジェクトを初期化するとき
+- 特定の未評価のオペランド、および`prvalue`が廃棄値式(`discarded-value expression`)として現れる場合
 
 これより、上の例は「クラス`prvalue`でメンバアクセスを実行するとき」にあたり、`xvalue`として一時オブジェクトを生成している。
 
 また、`prvalue`から`prvalue`への変換は、上記の「一時オブジェクトの実体化は一般に可能な限り遅らせられる」ことより、一時オブジェクトを実体化しない。よって、次の例における`prvalue`の`T`型の戻り値は、呼び出し元の`t`を直接初期化する。
 
 ```cpp
- T Func() {return T();} 
- T t = Func(); // 直接初期化
+T Func() {return T();} 
+T t = Func(); // 直接初期化
 ```
 
 ## 例
@@ -178,4 +178,4 @@ Foo x = foo(); // error Foo型のコピーコンストラクタが必要
 - [Guaranteed Copy Elision](https://jonasdevlieghere.com/guaranteed-copy-elision/)
 
 ## 注釈
-1. **&amp;lt;a id=&amp;#34;note-1&amp;#34; href=&amp;#34;#note_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** &amp;lt;cite&amp;gt;[右辺値、左辺値などの細かい定義 - Qiita](https://qiita.com/rinse_/items/cffa87016b7de49391ae)&amp;lt;/cite&amp;gt;を参照
\ No newline at end of file
+1. **&amp;lt;a id=&amp;#34;note-1&amp;#34; href=&amp;#34;#note_ref-1&amp;#34;&amp;gt;^&amp;lt;/a&amp;gt;** &amp;lt;cite&amp;gt;[右辺値、左辺値などの細かい定義 - Qiita](https://qiita.com/rinse_/items/cffa87016b7de49391ae)&amp;lt;/cite&amp;gt;を参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定 [P2718R0] -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/lifetime_extension_in_range_based_for_loop.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:lang/cpp23/lifetime_extension_in_range_based_for_loop.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
index 7e3e11524..18a74d5d0 100644
--- a/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
+++ b/lang/cpp23/lifetime_extension_in_range_based_for_loop.md
@@ -134,7 +134,7 @@ void foo() {
 - この `t` は &amp;#34;一時オブジェクトの寿命が `for-range-initializer` 完全式の終わりではない場合&amp;#34; にも該当すると考えられる
 - この `t` は、構文的に見ると `for-range-initializer` の中で生じたとは言えないという意見もある
 - &amp;#34;`for-range-initializer` の中&amp;#34; を実行時のことだと解釈すると、そこから呼び出された関数の中なども含むことになるが、それを排除する規定が &amp;#34;一時オブジェクトの寿命が `for-range-initializer` 完全式の終わりではない場合&amp;#34; ではないか
-  - インライン展開されたときなどに効いてくるのかもしれない
+    - インライン展開されたときなどに効いてくるのかもしれない
 
 ## 検討されたほかの選択肢
 
@@ -149,4 +149,4 @@ void foo() {
 - [地に足のついた範囲for文 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2022/12/05/000923)
 - [範囲for文範囲初期化子内の一時オブジェクト延命の説明見直し
  #1246](https://github.com/cpprefjp/site/issues/1246)
-- [Are function parameter objects temporary objects?](https://stackoverflow.com/questions/77676199/are-function-parameter-objects-temporary-objects/77676480)
\ No newline at end of file
+- [Are function parameter objects temporary objects?](https://stackoverflow.com/questions/77676199/are-function-parameter-objects-temporary-objects/77676480)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/algorithm.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 34fe94c3f..0795f49b8 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -273,11 +273,11 @@ ranges::sort(pv, {}, &amp;amp;Person::name);
 - `comp(a, b) &amp;amp;&amp;amp; comp(b, c)` は `comp(a, c)` を意味する
 - `equiv(a, b) &amp;amp;&amp;amp; equiv(b, c)` は `equiv(a, c)` を意味する
 
-  これらの前提のもと、以下を示すことができる。
+これらの前提のもと、以下を示すことができる。
 
-  - `equiv` は同値関係 (equivalence relation) である
-  - `comp` は `equiv` によって決まる同値類 (equivalence class) の間での明確な関係を示す
-  - その示される関係は狭義の全順序 (strict total ordering) である
+- `equiv` は同値関係 (equivalence relation) である
+- `comp` は `equiv` によって決まる同値類 (equivalence class) の間での明確な関係を示す
+- その示される関係は狭義の全順序 (strict total ordering) である
 
 数学用語の日本語訳として &amp;#34;equivalence relation&amp;#34; には「同値関係」 &amp;#34;equivalence class&amp;#34; には「同値類」が定着しており、同じく数学的な文脈では上記 `equiv` を満たす２つの値を「同値」 (equivalent) であると言う。しかし特に数学的でない文脈で「同値」と言った場合は `operator==` による &amp;#34;equal&amp;#34; の関係と誤解される可能性が高いと考えられるため、本サイトでは上記 `equiv` による &amp;#34;equivalent&amp;#34; の関係を「等価」 `operator==` による &amp;#34;equal&amp;#34; の関係を「等値」として区別する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/compare/partial_ordering/op_equal.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/compare/partial_ordering/op_equal.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/partial_ordering/op_equal.md b/reference/compare/partial_ordering/op_equal.md
index d7627d73a..e961cf991 100644
--- a/reference/compare/partial_ordering/op_equal.md
+++ b/reference/compare/partial_ordering/op_equal.md
@@ -34,9 +34,9 @@ friend constexpr bool operator==(/*unspecified*/, partial_ordering v) noexcept;
 ## 備考
 この演算子により、以下の演算子が使用可能になる：
 
-  - `bool operator!=(partial_ordering v, partial_ordering w) noexcept;`
-  - `bool operator!=(partial_ordering v, /*unspecified*/) noexcept;`
-  - `bool operator!=(/*unspecified*/, partial_ordering w) noexcept;`
+- `bool operator!=(partial_ordering v, partial_ordering w) noexcept;`
+- `bool operator!=(partial_ordering v, /*unspecified*/) noexcept;`
+- `bool operator!=(/*unspecified*/, partial_ordering w) noexcept;`
 
 *unspecified*となっている片側の引数には`0`リテラルのみが使用できる。それ以外の物を渡した場合、動作は未定義。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/compare/strong_ordering/op_equal.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/compare/strong_ordering/op_equal.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/strong_ordering/op_equal.md b/reference/compare/strong_ordering/op_equal.md
index 9f05e31d7..421860f86 100644
--- a/reference/compare/strong_ordering/op_equal.md
+++ b/reference/compare/strong_ordering/op_equal.md
@@ -34,9 +34,9 @@ friend constexpr bool operator==(/*unspecified*/, strong_ordering v) noexcept;
 ## 備考
 この演算子により、以下の演算子が使用可能になる：
 
-  - `bool operator!=(strong_ordering v, strong_ordering w) noexcept;`
-  - `bool operator!=(strong_ordering v, /*unspecified*/) noexcept;`
-  - `bool operator!=(/*unspecified*/, strong_ordering w) noexcept;`
+- `bool operator!=(strong_ordering v, strong_ordering w) noexcept;`
+- `bool operator!=(strong_ordering v, /*unspecified*/) noexcept;`
+- `bool operator!=(/*unspecified*/, strong_ordering w) noexcept;`
 
 *unspecified*となっている片側の引数には`0`リテラルのみが使用できる。それ以外の物を渡した場合、動作は未定義。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/compare/weak_ordering/op_equal.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/compare/weak_ordering/op_equal.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/weak_ordering/op_equal.md b/reference/compare/weak_ordering/op_equal.md
index f7f8ec4a2..c6eba5fdb 100644
--- a/reference/compare/weak_ordering/op_equal.md
+++ b/reference/compare/weak_ordering/op_equal.md
@@ -34,9 +34,9 @@ friend constexpr bool operator==(/*unspecified*/, weak_ordering v) noexcept;   /
 ## 備考
 この演算子により、以下の演算子が使用可能になる：
 
-  - `bool operator!=(weak_ordering v, weak_ordering w) noexcept;`
-  - `bool operator!=(weak_ordering v, /*unspecified*/) noexcept;`
-  - `bool operator!=(/*unspecified*/, weak_ordering w) noexcept;`
+- `bool operator!=(weak_ordering v, weak_ordering w) noexcept;`
+- `bool operator!=(weak_ordering v, /*unspecified*/) noexcept;`
+- `bool operator!=(/*unspecified*/, weak_ordering w) noexcept;`
 
 *unspecified*となっている片側の引数には`0`リテラルのみが使用できる。それ以外の物を渡した場合、動作は未定義。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/concepts/swap.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/concepts/swap.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/swap.md b/reference/concepts/swap.md
index 726018ae0..f04d01926 100644
--- a/reference/concepts/swap.md
+++ b/reference/concepts/swap.md
@@ -29,7 +29,7 @@ namespace std::ranges {
    ```
 
 2. `a, b`が共に同じ長さの配列型の左辺値であり、`ranges::swap(*a, *b)`が呼び出し可能ならば`ranges::swap_ranges(a, b)`
-      - 1か3に委譲して要素毎に`swap`される
+    - 1か3に委譲して要素毎に`swap`される
 
 3. `a, b`が共に同じ型`T`の左辺値であり、`T`と`T&amp;amp;`は[`move_constructible&amp;lt;T&amp;gt;`](move_constructible.md)及び[`assignable_from&amp;lt;T&amp;amp;, T&amp;gt;`](assignable_from.md)のモデルとなる場合、[`std::swap()`](/reference/utility/swap.md)相当の操作によって`a, b`の値を交換する。
 
@@ -56,9 +56,9 @@ namespace std::ranges {
 1. 呼び出される`swap(a, b)`（及び、もし返されるのならば戻り値のデストラクタ）が定数評価可能であるかに従う。
 2. `a, b`の要素型によって、1か3に従う
 3. 以下の条件を全て満たす場合に定数評価可能
-      - `T`はリテラル型である
-      - `a = std::move(b), b = std::move(a)`は共に定数評価可能
-      - 次のような初期化式が定数評価可能
+    - `T`はリテラル型である
+    - `a = std::move(b), b = std::move(a)`は共に定数評価可能
+    - 次のような初期化式が定数評価可能
         ```cpp
         T t1(std::move(a));
         T t2(std::move(b));
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function/op_constructor.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/functional/copyable_function/op_constructor.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function/op_constructor.md b/reference/functional/copyable_function/op_constructor.md
index 3db59be24..50abbe182 100644
--- a/reference/functional/copyable_function/op_constructor.md
+++ b/reference/functional/copyable_function/op_constructor.md
@@ -66,8 +66,8 @@ explicit copyable_function(in_place_type_t&amp;lt;T&amp;gt;, initializer_list&amp;lt;U&amp;gt;, Args&amp;amp;&amp;amp;...);
 ## 効果
 - (1), (2) : 関数を持たない空の`copyable_function`オブジェクトを構築する。この方法で構築した後、[`operator bool`](op_bool.md)は`false`を返す。
 - (3) : `*this`の格納オブジェクトを
-   - `f`が値を保持していない場合、値を保持しない。
-   - そうでなければ、`f`が保持する値をコピーして保持する。
+    - `f`が値を保持していない場合、値を保持しない。
+    - そうでなければ、`f`が保持する値をコピーして保持する。
 - (4) : `f`が保持する状態を`*this`に移動する。移動された後の`f`は、未規定な値を持つ有効な状態となる。
 - (5) : `*this`の格納オブジェクトを
     - `f`が関数ポインタ型、メンバ関数ポインタ型、メンバ変数ポインタ型いずれかのヌルポインタ値の場合、値を保持しない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/iterator/data.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/iterator/data.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/data.md b/reference/iterator/data.md
index ed7f419c8..f4a8964c5 100644
--- a/reference/iterator/data.md
+++ b/reference/iterator/data.md
@@ -34,18 +34,18 @@ namespace std {
 ## 備考
 - [機能テストマクロ](../../lang/cpp17/feature_test_macros.md)は`__cpp_lib_nonmember_container_access`で値は`201411`
 - `&amp;lt;iterator&amp;gt;`ヘッダを読み込む以外では、以下のヘッダが読み込まれている場合に、この関数を使用できる：
-     - [`&amp;lt;array&amp;gt;`](../array.md)
-     - [`&amp;lt;deque&amp;gt;`](../deque.md)
-     - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
-     - [`&amp;lt;list&amp;gt;`](../list.md)
-     - [`&amp;lt;map&amp;gt;`](../map.md)
-     - [`&amp;lt;regex&amp;gt;`](../regex.md)
-     - [`&amp;lt;set&amp;gt;`](../set.md)
-     - [`&amp;lt;string&amp;gt;`](../string.md)
-     - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
-     - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
-     - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
-     - [`&amp;lt;vector&amp;gt;`](../vector.md)
+    - [`&amp;lt;array&amp;gt;`](../array.md)
+    - [`&amp;lt;deque&amp;gt;`](../deque.md)
+    - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
+    - [`&amp;lt;list&amp;gt;`](../list.md)
+    - [`&amp;lt;map&amp;gt;`](../map.md)
+    - [`&amp;lt;regex&amp;gt;`](../regex.md)
+    - [`&amp;lt;set&amp;gt;`](../set.md)
+    - [`&amp;lt;string&amp;gt;`](../string.md)
+    - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
+    - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
+    - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
+    - [`&amp;lt;vector&amp;gt;`](../vector.md)
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/iterator/empty.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/iterator/empty.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/empty.md b/reference/iterator/empty.md
index d0f3c9373..63e62f390 100644
--- a/reference/iterator/empty.md
+++ b/reference/iterator/empty.md
@@ -40,18 +40,18 @@ namespace std {
 ## 備考
 - [機能テストマクロ](../../lang/cpp17/feature_test_macros.md)は`__cpp_lib_nonmember_container_access`で値は`201411`
 - `&amp;lt;iterator&amp;gt;`ヘッダを読み込む以外では、以下のヘッダが読み込まれている場合に、この関数を使用できる：
-     - [`&amp;lt;array&amp;gt;`](../array.md)
-     - [`&amp;lt;deque&amp;gt;`](../deque.md)
-     - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
-     - [`&amp;lt;list&amp;gt;`](../list.md)
-     - [`&amp;lt;map&amp;gt;`](../map.md)
-     - [`&amp;lt;regex&amp;gt;`](../regex.md)
-     - [`&amp;lt;set&amp;gt;`](../set.md)
-     - [`&amp;lt;string&amp;gt;`](../string.md)
-     - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
-     - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
-     - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
-     - [`&amp;lt;vector&amp;gt;`](../vector.md)
+    - [`&amp;lt;array&amp;gt;`](../array.md)
+    - [`&amp;lt;deque&amp;gt;`](../deque.md)
+    - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
+    - [`&amp;lt;list&amp;gt;`](../list.md)
+    - [`&amp;lt;map&amp;gt;`](../map.md)
+    - [`&amp;lt;regex&amp;gt;`](../regex.md)
+    - [`&amp;lt;set&amp;gt;`](../set.md)
+    - [`&amp;lt;string&amp;gt;`](../string.md)
+    - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
+    - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
+    - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
+    - [`&amp;lt;vector&amp;gt;`](../vector.md)
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_assign.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/iterator/move_iterator/op_assign.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_assign.md b/reference/iterator/move_iterator/op_assign.md
index 42def6003..90291eae8 100644
--- a/reference/iterator/move_iterator/op_assign.md
+++ b/reference/iterator/move_iterator/op_assign.md
@@ -24,12 +24,12 @@ constexpr move_iterator&amp;amp; operator=(move_iterator&amp;amp;&amp;amp;) = default;      // (3) C++17
 ## テンプレートパラメータ制約
 
 - C++17まで
-  - (1) : `U`が`Iterator`に変換可能であること
+    - (1) : `U`が`Iterator`に変換可能であること
 - C++20
-  - (1) : 次の両方を満たす
-    - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
-    - `const U&amp;amp;`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
-    - `Iterator&amp;amp;, const U&amp;amp;`が[`assignable_from&amp;lt;Iterator&amp;amp;, const U&amp;amp;&amp;gt;`](/reference/concepts/assignable_from.md)のモデルとなること。
+    - (1) : 次の両方を満たす
+        - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
+        - `const U&amp;amp;`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
+        - `Iterator&amp;amp;, const U&amp;amp;`が[`assignable_from&amp;lt;Iterator&amp;amp;, const U&amp;amp;&amp;gt;`](/reference/concepts/assignable_from.md)のモデルとなること。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/op_constructor.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/iterator/move_iterator/op_constructor.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/op_constructor.md b/reference/iterator/move_iterator/op_constructor.md
index 5c9df17b9..b617d135b 100644
--- a/reference/iterator/move_iterator/op_constructor.md
+++ b/reference/iterator/move_iterator/op_constructor.md
@@ -31,11 +31,11 @@ constexpr move_iterator(move_iterator&amp;amp;&amp;amp;) noexcept = default; // (4) C++17
 ## テンプレートパラメータ制約
 
 - C++17まで
-  - (3) : `U`が`Iterator`に変換可能であること
+    - (3) : `U`が`Iterator`に変換可能であること
 - C++20
-  - (3) : 次の全てを満たす
-    - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
-    - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
+    - (3) : 次の全てを満たす
+        - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
+        - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/iterator/reverse_iterator/op_assign.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/iterator/reverse_iterator/op_assign.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/reverse_iterator/op_assign.md b/reference/iterator/reverse_iterator/op_assign.md
index 2f35f6909..fb4db494a 100644
--- a/reference/iterator/reverse_iterator/op_assign.md
+++ b/reference/iterator/reverse_iterator/op_assign.md
@@ -20,12 +20,12 @@ constexpr reverse_iterator&amp;amp; operator=(const reverse_iterator&amp;lt;U&amp;gt;&amp;amp; u);        // (
 ## テンプレートパラメータ制約
 
 - C++17まで
-  - (2) : `U`が`Iterator`に変換可能であること
+    - (2) : `U`が`Iterator`に変換可能であること
 - C++20
-  - (2) : 次の両方を満たす
-    - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
-    - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
-    - `Iterator&amp;amp;, const U&amp;amp;`が[`assignable_from&amp;lt;Iterator&amp;amp;, const U&amp;amp;&amp;gt;`](/reference/concepts/assignable_from.md)のモデルとなること。
+    - (2) : 次の両方を満たす
+        - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
+        - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
+        - `Iterator&amp;amp;, const U&amp;amp;`が[`assignable_from&amp;lt;Iterator&amp;amp;, const U&amp;amp;&amp;gt;`](/reference/concepts/assignable_from.md)のモデルとなること。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/iterator/reverse_iterator/op_constructor.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/iterator/reverse_iterator/op_constructor.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/reverse_iterator/op_constructor.md b/reference/iterator/reverse_iterator/op_constructor.md
index 6f1dcadc6..35c326cea 100644
--- a/reference/iterator/reverse_iterator/op_constructor.md
+++ b/reference/iterator/reverse_iterator/op_constructor.md
@@ -28,11 +28,11 @@ constexpr reverse_iterator(const reverse_iterator&amp;lt;U&amp;gt;&amp;amp; u); // (3) C++17
 ## テンプレートパラメータ制約
 
 - C++17まで
-  - (3) : `U`が`Iterator`に変換可能であること
+    - (3) : `U`が`Iterator`に変換可能であること
 - C++20
-  - (3) : 次の両方を満たす
-    - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
-    - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
+    - (3) : 次の両方を満たす
+        - `is_same_v&amp;lt;U, Iterator&amp;gt; == false`であること。
+        - `const U&amp;amp;, Iterator`が[`convertible_to&amp;lt;Iterator&amp;gt;`](/reference/concepts/convertible_to.md)のモデルとなること。
 
 ## 要件
 - (3) : `U`が`Iterator`に変換可能であること
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/iterator/size.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/iterator/size.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/size.md b/reference/iterator/size.md
index cba14eef4..21906c4d5 100644
--- a/reference/iterator/size.md
+++ b/reference/iterator/size.md
@@ -26,18 +26,18 @@ namespace std {
 ## 備考
 - [機能テストマクロ](../../lang/cpp17/feature_test_macros.md)は`__cpp_lib_nonmember_container_access`で値は`201411`
 - `&amp;lt;iterator&amp;gt;`ヘッダを読み込む以外では、以下のヘッダが読み込まれている場合に、この関数を使用できる：
-     - [`&amp;lt;array&amp;gt;`](../array.md)
-     - [`&amp;lt;deque&amp;gt;`](../deque.md)
-     - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
-     - [`&amp;lt;list&amp;gt;`](../list.md)
-     - [`&amp;lt;map&amp;gt;`](../map.md)
-     - [`&amp;lt;regex&amp;gt;`](../regex.md)
-     - [`&amp;lt;set&amp;gt;`](../set.md)
-     - [`&amp;lt;string&amp;gt;`](../string.md)
-     - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
-     - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
-     - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
-     - [`&amp;lt;vector&amp;gt;`](../vector.md)
+    - [`&amp;lt;array&amp;gt;`](../array.md)
+    - [`&amp;lt;deque&amp;gt;`](../deque.md)
+    - [`&amp;lt;forward_list&amp;gt;`](../forward_list.md)
+    - [`&amp;lt;list&amp;gt;`](../list.md)
+    - [`&amp;lt;map&amp;gt;`](../map.md)
+    - [`&amp;lt;regex&amp;gt;`](../regex.md)
+    - [`&amp;lt;set&amp;gt;`](../set.md)
+    - [`&amp;lt;string&amp;gt;`](../string.md)
+    - [`&amp;lt;string_view&amp;gt;`](../string_view.md) (C++20)
+    - [`&amp;lt;unordered_map&amp;gt;`](../unordered_map.md)
+    - [`&amp;lt;unordered_set&amp;gt;`](../unordered_set.md)
+    - [`&amp;lt;vector&amp;gt;`](../vector.md)
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_product -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_product.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/linalg/hermitian_matrix_product.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_product.md b/reference/linalg/hermitian_matrix_product.md
index 1f50e37d4..ab9ab2f33 100644
--- a/reference/linalg/hermitian_matrix_product.md
+++ b/reference/linalg/hermitian_matrix_product.md
@@ -124,10 +124,10 @@ namespace std::linalg {
 - 共通
     + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
     + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(C)&amp;gt;()`が`true`
-  - (1), (2), (5), (6):
+- (1), (2), (5), (6):
     + `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  - (3), (4), (7), (8):
+- (3), (4), (7), (8):
     + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
 - (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_rank_1_update -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_rank_1_update.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/linalg/hermitian_matrix_rank_1_update.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_rank_1_update.md b/reference/linalg/hermitian_matrix_rank_1_update.md
index 0aaf1dd6d..2211afe13 100644
--- a/reference/linalg/hermitian_matrix_rank_1_update.md
+++ b/reference/linalg/hermitian_matrix_rank_1_update.md
@@ -66,10 +66,10 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_rank_2_update -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_rank_2_update.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/linalg/hermitian_matrix_rank_2_update.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_rank_2_update.md b/reference/linalg/hermitian_matrix_rank_2_update.md
index f42c7b9f8..514255df1 100644
--- a/reference/linalg/hermitian_matrix_rank_2_update.md
+++ b/reference/linalg/hermitian_matrix_rank_2_update.md
@@ -43,9 +43,9 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
 - (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_vector_product -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_vector_product.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/linalg/hermitian_matrix_vector_product.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_vector_product.md b/reference/linalg/hermitian_matrix_vector_product.md
index c56c46d0d..8b0f40f3c 100644
--- a/reference/linalg/hermitian_matrix_vector_product.md
+++ b/reference/linalg/hermitian_matrix_vector_product.md
@@ -74,18 +74,18 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
 - (3), (4): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(x),decltype(y),decltype(z)&amp;gt;()`が`true`
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
 - 共通:
-  + `A.extent(0) == A.extent(1)`
-  + [`multipliable`](multipliable.md)`(A, x, y) == true`
+    + `A.extent(0) == A.extent(1)`
+    + [`multipliable`](multipliable.md)`(A, x, y) == true`
 - (3), (4): [`addable`](addable.md)`(x, y, z) == true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_product -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_product.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/linalg/symmetric_matrix_product.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_product.md b/reference/linalg/symmetric_matrix_product.md
index 3c3b35acf..e71eb1d41 100644
--- a/reference/linalg/symmetric_matrix_product.md
+++ b/reference/linalg/symmetric_matrix_product.md
@@ -124,10 +124,10 @@ namespace std::linalg {
 - 共通
     + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
     + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(C)&amp;gt;()`が`true`
-  - (1), (2), (5), (6):
+- (1), (2), (5), (6):
     + `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  - (3), (4), (7), (8):
+- (3), (4), (7), (8):
     + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
 - (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
@@ -136,7 +136,7 @@ namespace std::linalg {
 
 ## 事前条件
 - 共通
-  + [`multipliable`](multipliable.md)`(A, B, C) == true`
+    + [`multipliable`](multipliable.md)`(A, B, C) == true`
 - (1), (2), (5), (6): `A.extent(0) == A.extent(1)`
 - (3), (4), (7), (8): `B.extent(0) == B.extent(1)`
 - (5), (6), (7), (8): [`addable`](addable.md)`(E, E, C) == true`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_rank_1_update -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_rank_1_update.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/linalg/symmetric_matrix_rank_1_update.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_rank_1_update.md b/reference/linalg/symmetric_matrix_rank_1_update.md
index 1c3c08789..a4d66f1fb 100644
--- a/reference/linalg/symmetric_matrix_rank_1_update.md
+++ b/reference/linalg/symmetric_matrix_rank_1_update.md
@@ -63,10 +63,10 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_rank_2_update -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_rank_2_update.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/linalg/symmetric_matrix_rank_2_update.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_rank_2_update.md b/reference/linalg/symmetric_matrix_rank_2_update.md
index 92c8b7da4..a00862056 100644
--- a/reference/linalg/symmetric_matrix_rank_2_update.md
+++ b/reference/linalg/symmetric_matrix_rank_2_update.md
@@ -43,9 +43,9 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
 - (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_vector_product -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_vector_product.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/linalg/symmetric_matrix_vector_product.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_vector_product.md b/reference/linalg/symmetric_matrix_vector_product.md
index 1dc63373a..193260dfa 100644
--- a/reference/linalg/symmetric_matrix_vector_product.md
+++ b/reference/linalg/symmetric_matrix_vector_product.md
@@ -70,10 +70,10 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
 - (3), (4): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(x),decltype(y),decltype(z)&amp;gt;()`が`true`
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_product -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_product.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/linalg/triangular_matrix_product.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_product.md b/reference/linalg/triangular_matrix_product.md
index 5d20663ff..ef75266e0 100644
--- a/reference/linalg/triangular_matrix_product.md
+++ b/reference/linalg/triangular_matrix_product.md
@@ -141,10 +141,10 @@ namespace std::linalg {
     + `DiagonalStorage`が[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
     + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
     + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(C)&amp;gt;()`が`true`
-  - (1), (2), (5), (6):
+- (1), (2), (5), (6):
     + `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  - (3), (4), (7), (8):
+- (3), (4), (7), (8):
     + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
 - (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
@@ -153,7 +153,7 @@ namespace std::linalg {
 
 ## 事前条件
 - 共通
-  + [`multipliable`](multipliable.md)`(A, B, C) == true`
+    + [`multipliable`](multipliable.md)`(A, B, C) == true`
 - (1), (2), (5), (6): `A.extent(0) == A.extent(1)`
 - (3), (4), (7), (8): `B.extent(0) == B.extent(1)`
 - (5), (6), (7), (8): [`addable`](addable.md)`(E, E, C) == true`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_vector_product -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_vector_product.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/linalg/triangular_matrix_vector_product.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_vector_product.md b/reference/linalg/triangular_matrix_vector_product.md
index 8e835bebc..28df94dbe 100644
--- a/reference/linalg/triangular_matrix_vector_product.md
+++ b/reference/linalg/triangular_matrix_vector_product.md
@@ -103,11 +103,11 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `DiagonalStorage`は[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(y)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`y`の次元が同じであること)
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `DiagonalStorage`は[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(y)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`y`の次元が同じであること)
 - (1), (2), (5), (6): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
 - (5), (6): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(z)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
 - (2), (4), (6): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
@@ -115,8 +115,8 @@ namespace std::linalg {
 
 ## 事前条件
 - 共通:
-  + `A.extent(0) == A.extent(1)` (つまり`A`が正方行列であること)
-  + `A.extent(0) == y.extent(0)` (つまり`y`に結果を代入できること)
+    + `A.extent(0) == A.extent(1)` (つまり`A`が正方行列であること)
+    + `A.extent(0) == y.extent(0)` (つまり`y`に結果を代入できること)
 - (1), (2), (5), (6): `A.extent(0) == x.extent(0)` (つまり$Ax$を計算できること)
 - (5), (6): `A.extent(0) == z.extent(0)` (つまり`z`に結果を代入できること)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_vector_solve -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_vector_solve.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/linalg/triangular_matrix_vector_solve.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_vector_solve.md b/reference/linalg/triangular_matrix_vector_solve.md
index d680f9465..94b17c28b 100644
--- a/reference/linalg/triangular_matrix_vector_solve.md
+++ b/reference/linalg/triangular_matrix_vector_solve.md
@@ -134,19 +134,19 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-  + `DiagonalStorage`は[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
-  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(b)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`b`の次元が同じであること)
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `DiagonalStorage`は[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
+    + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(b)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`b`の次元が同じであること)
 - (1), (2), (3), (4): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`b`の次元が同じであること)
 - (2), (4), (6), (8): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
 - 共通:
-  + `A.extent(0) == A.extent(1)` (つまり`A`が正方行列であること)
-  + `A.extent(0) == b.extent(0)` (つまり`A`の次元と`b`の次元が同じであること)
+    + `A.extent(0) == A.extent(1)` (つまり`A`が正方行列であること)
+    + `A.extent(0) == b.extent(0)` (つまり`A`の次元と`b`の次元が同じであること)
 - (1), (2), (3), (4): `A.extent(0) == x.extent(0)` (つまり`A`の次元と`x`の次元が同じであること)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_default_construct.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/memory/ranges_uninitialized_default_construct.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_default_construct.md b/reference/memory/ranges_uninitialized_default_construct.md
index ee6fac6fa..732025acc 100644
--- a/reference/memory/ranges_uninitialized_default_construct.md
+++ b/reference/memory/ranges_uninitialized_default_construct.md
@@ -68,7 +68,7 @@ return first;
 
 ## 備考
 - [`std::vector`](/reference/vector/vector.md)クラスの要素数を変更する操作は、要素を値構築するためゼロ初期化が行われる。その値初期化のコストが気になるような場合に、デフォルト構築することでプログラマの責任で必要な分だけ任意に初期化でき、パフォーマンス向上が期待できるようになる。
-     - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
+    - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_default_construct.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/memory/uninitialized_default_construct.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_default_construct.md b/reference/memory/uninitialized_default_construct.md
index 64df4a7dd..bd9133eb8 100644
--- a/reference/memory/uninitialized_default_construct.md
+++ b/reference/memory/uninitialized_default_construct.md
@@ -44,7 +44,7 @@ for (; first != last; ++first)
 
 ## 備考
 - [`std::vector`](/reference/vector/vector.md)クラスの要素数を変更する操作は、要素を値構築するためゼロ初期化が行われる。その値初期化のコストが気になるような場合に、デフォルト構築することでプログラマの責任で必要な分だけ任意に初期化でき、パフォーマンス向上が期待できるようになる。
-     - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
+    - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
 
 
 ### 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct_n -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_default_construct_n.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/memory/uninitialized_default_construct_n.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_default_construct_n.md b/reference/memory/uninitialized_default_construct_n.md
index 104b396f2..c489c0e84 100644
--- a/reference/memory/uninitialized_default_construct_n.md
+++ b/reference/memory/uninitialized_default_construct_n.md
@@ -43,7 +43,7 @@ return first;
 
 ## 備考
 - [`std::vector`](/reference/vector/vector.md)クラスの要素数を変更する操作は、要素を値構築するためゼロ初期化が行われる。その値初期化のコストが気になるような場合に、デフォルト構築することでプログラマの責任で必要な分だけ任意に初期化でき、パフォーマンス向上が期待できるようになる。
-     - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
+    - 例としてBoost Container Libraryの`vector`クラスには、要素数を変更するメンバ関数にデフォルト構築のオプションとして[`default_init`](https://www.boost.org/doc/libs/release/doc/html/container/extended_functionality.html#container.extended_functionality.default_initialialization)がある
 
 
 ### 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/op_assign.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/node_handle/node_handle/op_assign.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/op_assign.md b/reference/node_handle/node_handle/op_assign.md
index f72652e47..efa67a46f 100644
--- a/reference/node_handle/node_handle/op_assign.md
+++ b/reference/node_handle/node_handle/op_assign.md
@@ -19,11 +19,10 @@ node_handle&amp;amp; operator=(node_handle&amp;amp;&amp;amp; nh);
 
 ## 効果
 - `ptr_ != nullptr` の場合、
-  - `std::allocator_traits&amp;lt;allocator_type&amp;gt;::destroy` を呼び出して `ptr_` が指す `container_node_type` オブジェクト内の `value_type` サブオブジェクトを破棄し、
-  - 次に `std::allocator_traits&amp;lt;allocator_type&amp;gt;::template rebind_traits&amp;lt;container_node_type&amp;gt;::deallocate` を呼び出して `ptr_` の割り当てを解除する。
-
-- `ptr_` に `nh.ptr_` を代入する。  
-- `!alloc_` または `std::allocator_traits&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value` が `true` の場合、`nh.alloc_` を `alloc_` にムーブ代入する。  
+    - `std::allocator_traits&amp;lt;allocator_type&amp;gt;::destroy` を呼び出して `ptr_` が指す `container_node_type` オブジェクト内の `value_type` サブオブジェクトを破棄し、
+    - 次に `std::allocator_traits&amp;lt;allocator_type&amp;gt;::template rebind_traits&amp;lt;container_node_type&amp;gt;::deallocate` を呼び出して `ptr_` の割り当てを解除する。
+- `ptr_` に `nh.ptr_` を代入する。
+- `!alloc_` または `std::allocator_traits&amp;lt;allocator_type&amp;gt;::propagate_on_container_move_assignment::value` が `true` の場合、`nh.alloc_` を `alloc_` にムーブ代入する。
 - `nh.ptr_` に `nullptr` を代入し、`nh.alloc_` に `nullopt` を代入する。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>generate_random -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/random/generate_random.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/random/generate_random.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/generate_random.md b/reference/random/generate_random.md
index b13fab2c8..254bb192a 100644
--- a/reference/random/generate_random.md
+++ b/reference/random/generate_random.md
@@ -94,7 +94,7 @@ for (auto&amp;amp; x : v) {
     * std::move[link /reference/utility/move.md]
 
 - (3) :
-     - `d.generate_random(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r), g)`が妥当な式であれば、それを呼び出す
+    - `d.generate_random(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r), g)`が妥当な式であれば、それを呼び出す
         - 備考 : 分布生成器が`generate_random()`メンバ関数をもっていればそれを使用する
     - そうでなく、`R`が[`sized_range`](/reference/ranges/sized_range.md)のモデルである場合、値`N`と[`span`](/reference/span/span.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;D&amp;amp;, G&amp;amp;&amp;gt;, N&amp;gt;`型オブジェクト`s`に対して、式[`invoke`](/reference/functional/invoke.md)`(d, g)`または`d.generate_random(s, g)`を未規定の回数だけ呼び出して実行し、`r`の各要素に代入する
         - 備考 : ここでの`N`は乱数生成の回数と異なってもよい
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_constructor.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/random/subtract_with_carry_engine/op_constructor.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine/op_constructor.md b/reference/random/subtract_with_carry_engine/op_constructor.md
index 7ac7e3709..a954e310d 100644
--- a/reference/random/subtract_with_carry_engine/op_constructor.md
+++ b/reference/random/subtract_with_carry_engine/op_constructor.md
@@ -23,7 +23,7 @@ subtract_with_carry_engine(subtract_with_carry_engine&amp;amp;&amp;amp; e) = default;      // (5
 ## 概要
 - (1) : デフォルトコンストラクタ
     - C++17まで：シード値が指定されない場合はデフォルトのシード値 (`subtract_with_carry_engine::default_seed`) で構築される
-      - [`linear_congruential_engine`](../linear_congruential_engine.md) を $n = \lceil 32 / \mathtt{w} \rceil$ 回 (`w` は `subtract_with_carry_engine::word_size`) 呼び出して内部状態を初期化する
+        - [`linear_congruential_engine`](../linear_congruential_engine.md) を $n = \lceil 32 / \mathtt{w} \rceil$ 回 (`w` は `subtract_with_carry_engine::word_size`) 呼び出して内部状態を初期化する
     - C++20から : デフォルトのシード値 (`subtract_with_carry_engine::default_seed`) で(2)に委譲
     - C++26から : シード値を`0u`として(2)に委譲
 - (2) : シード値を受け取って状態シーケンスを構築する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/streambuf/basic_streambuf/op_constructor.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/streambuf/basic_streambuf/op_constructor.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/streambuf/basic_streambuf/op_constructor.md b/reference/streambuf/basic_streambuf/op_constructor.md
index 3aed4eb9a..c764eb4d4 100644
--- a/reference/streambuf/basic_streambuf/op_constructor.md
+++ b/reference/streambuf/basic_streambuf/op_constructor.md
@@ -30,21 +30,21 @@ namespace std {
 
 ## 事後条件
 - (1) :
-  - `eback()` == `nullptr`
-  - `gptr()` == `nullptr`
-  - `egptr()` == `nullptr`
-  - `pbase()` == `nullptr`
-  - `pptr()` == `nullptr`
-  - `epptr()` == `nullptr`
-  - `getloc()` == `locale()`
+    - `eback()` == `nullptr`
+    - `gptr()` == `nullptr`
+    - `egptr()` == `nullptr`
+    - `pbase()` == `nullptr`
+    - `pptr()` == `nullptr`
+    - `epptr()` == `nullptr`
+    - `getloc()` == `locale()`
 - (2) :
-  - `eback()` == `rhs.eback()`
-  - `gptr()` == `rhs.gptr()`
-  - `egptr()` == `rhs.egptr()`
-  - `pbase()` == `rhs.pbase()`
-  - `pptr()` == `rhs.pptr()`
-  - `epptr()` == `rhs.epptr()`
-  - `getloc()` == `rhs.getloc()`
+    - `eback()` == `rhs.eback()`
+    - `gptr()` == `rhs.gptr()`
+    - `egptr()` == `rhs.egptr()`
+    - `pbase()` == `rhs.pbase()`
+    - `pptr()` == `rhs.pptr()`
+    - `epptr()` == `rhs.epptr()`
+    - `getloc()` == `rhs.getloc()`
 
 
 ## 実装例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_type -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/common_type.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/type_traits/common_type.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/common_type.md b/reference/type_traits/common_type.md
index 1a0d91e09..6ef83f500 100644
--- a/reference/type_traits/common_type.md
+++ b/reference/type_traits/common_type.md
@@ -64,8 +64,8 @@ namespace std {
 `common_type`は以下の条件を満たす場合に、2引数のもの（`common_type&amp;lt;T1, T2&amp;gt;`）に限ってユーザー定義の特殊化が許可されている。
 
 - `T1, T2`の少なくとも片方はプログラム定義型に依存している
-  - プログラム定義型とは、標準ライブラリの型を除いた、ユーザーによって定義された型のこと
-	- 「プログラム定義型に依存している」とは例えば、プログラム定義型に対する`vector`等の特殊化のこと
+    - プログラム定義型とは、標準ライブラリの型を除いた、ユーザーによって定義された型のこと
+        - 「プログラム定義型に依存している」とは例えば、プログラム定義型に対する`vector`等の特殊化のこと
 - `T1, T2`に対する[`decay`](/reference/type_traits/decay.md)の適用はともに恒等写像となる（上記参照）
 
 そして、そのような特殊化は必ずしもメンバ型`type`を持たなくても構わない。  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:reference/unordered_set/unordered_set/insert.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/insert.md b/reference/unordered_set/unordered_set/insert.md
index c6eb0e16e..ffa4344d8 100644
--- a/reference/unordered_set/unordered_set/insert.md
+++ b/reference/unordered_set/unordered_set/insert.md
@@ -106,7 +106,7 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (6) C++17
 	のいずれかである。  
 	なお、後者の条件は「よりも小さい」となっているが、最大負荷率の定義からすると「以下」の方が適切と思われる。[`reserve`](reserve.md) も参照。
 
- - (5), (6) の場合、要素はコピーもムーブもされない。
+- (5), (6) の場合、要素はコピーもムーブもされない。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>はじめてのコントリビュート -- 表示崩れチェックのCIとして、箇条書きのインデントをチェック #1362</title>
      <link href="https://cpprefjp.github.io/start_editing.html"/>
      <id>2273c7261b1c4dd66d2e6de80cda52903da563a4:start_editing.md</id>
      <updated>2024-12-05T11:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing.md b/start_editing.md
index 94bbf5891..f531cda39 100644
--- a/start_editing.md
+++ b/start_editing.md
@@ -60,6 +60,8 @@ buildアクションで、MarkdownからHTMLへの変換と、GitHub Pagesへの
 - 用語の誤った使い方を検出 (defined word checkアクション)
     - 用語の許可した使い方、許可しない使い方を列挙し、許可した使い方以外の使われ方をエラーとして検出する
     - 具体的な用語、許可した使い方、許可しない使い方は、[defined_word_check.py](https://github.com/cpprefjp/site/blob/master/.github/workflows/script/defined_word_check.py)を参照
+- 表示崩れする書き方を検出 (display error checkアクション)
+    - 箇条書きのインデントが4の倍数でない行をエラーとして検出する
 
 
 ### 自動反映ツール
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bfloat16_t -- 拡張浮動小数点数型の変換順位について修正と追記</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/bfloat16_t.html"/>
      <id>d609dd117b52b3e844666f2697222ce06c0d469a:reference/stdfloat/bfloat16_t.md</id>
      <updated>2024-12-04T14:32:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/bfloat16_t.md b/reference/stdfloat/bfloat16_t.md
index d4b04444a..a95b671e0 100644
--- a/reference/stdfloat/bfloat16_t.md
+++ b/reference/stdfloat/bfloat16_t.md
@@ -45,10 +45,10 @@ std::bfloat16_t b = 2.0BF16;
 
 - `long double` &amp;gt; `double` &amp;gt; `float`のように、`long double`が最も高い順位をもつ
 - 同じ値集合をもつ2つの拡張浮動小数点数型は、同じ順位をもつ
-- 標準浮動小数点数型と同じ値集合をもつ拡張浮動小数点数型は、同じ順位をもつ
-- 標準浮動小数点数型より多くの値集合をもつ拡張浮動小数点数型は、`double`と同じ順位をもつ
+- 1つの標準浮動小数点数型だけと同じ値集合をもつ拡張浮動小数点数型は、その型と同じ順位をもつ
+- 2つ以上の標準浮動小数点数型と同じ値集合をもつ拡張浮動小数点数型は、`double`と同じ順位をもつ
 
-注意として、浮動小数点数型`T1`の値集合が浮動小数点数型`T2`の値集合の部分集合でも上位集合でもない場合、浮動小数点数型`T1`と`T2`の変換順位は順位通りではない。これは、一方の型が他方より大きな範囲と低い精度の両方を持つ場合に起こり得る。
+注意として、浮動小数点数型`T1`の値集合が浮動小数点数型`T2`の値集合の部分集合でも上位集合でもない場合、浮動小数点数型`T1`と`T2`の変換順位は定義されない。これは、一方の型が他方より大きな範囲と低い精度の両方を持つ場合に起こり得る。例えば、`std::float16_t`と`std::bfloat16_t`の間には変換順位が付かず、相互に暗黙変換できない。
 
 順位が同じ浮動小数点数型は、サブ順位 (subrank) で順序付けられる。拡張浮動小数点数は、標準浮動小数点数型よりも大きなサブ順位をもつ。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float128_t -- 拡張浮動小数点数型の変換順位について修正と追記</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float128_t.html"/>
      <id>d609dd117b52b3e844666f2697222ce06c0d469a:reference/stdfloat/float128_t.md</id>
      <updated>2024-12-04T14:32:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float128_t.md b/reference/stdfloat/float128_t.md
index 0472946b4..6ff96cea2 100644
--- a/reference/stdfloat/float128_t.md
+++ b/reference/stdfloat/float128_t.md
@@ -41,10 +41,10 @@ std::float128_t b = 2.0F128;
 
 - `long double` &amp;gt; `double` &amp;gt; `float`のように、`long double`が最も高い順位をもつ
 - 同じ値集合をもつ2つの拡張浮動小数点数型は、同じ順位をもつ
-- 標準浮動小数点数型と同じ値集合をもつ拡張浮動小数点数型は、同じ順位をもつ
-- 標準浮動小数点数型より多くの値集合をもつ拡張浮動小数点数型は、`double`と同じ順位をもつ
+- 1つの標準浮動小数点数型だけと同じ値集合をもつ拡張浮動小数点数型は、その型と同じ順位をもつ
+- 2つ以上の標準浮動小数点数型と同じ値集合をもつ拡張浮動小数点数型は、`double`と同じ順位をもつ
 
-注意として、浮動小数点数型`T1`の値集合が浮動小数点数型`T2`の値集合の部分集合でも上位集合でもない場合、浮動小数点数型`T1`と`T2`の変換順位は順位通りではない。これは、一方の型が他方より大きな範囲と低い精度の両方を持つ場合に起こり得る。
+注意として、浮動小数点数型`T1`の値集合が浮動小数点数型`T2`の値集合の部分集合でも上位集合でもない場合、浮動小数点数型`T1`と`T2`の変換順位は定義されない。これは、一方の型が他方より大きな範囲と低い精度の両方を持つ場合に起こり得る。例えば、`std::float16_t`と`std::bfloat16_t`の間には変換順位が付かず、相互に暗黙変換できない。
 
 順位が同じ浮動小数点数型は、サブ順位 (subrank) で順序付けられる。拡張浮動小数点数は、標準浮動小数点数型よりも大きなサブ順位をもつ。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float16_t -- 拡張浮動小数点数型の変換順位について修正と追記</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float16_t.html"/>
      <id>d609dd117b52b3e844666f2697222ce06c0d469a:reference/stdfloat/float16_t.md</id>
      <updated>2024-12-04T14:32:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float16_t.md b/reference/stdfloat/float16_t.md
index 683462259..c5aa48420 100644
--- a/reference/stdfloat/float16_t.md
+++ b/reference/stdfloat/float16_t.md
@@ -41,10 +41,10 @@ std::float16_t b = 2.0F16;
 
 - `long double` &amp;gt; `double` &amp;gt; `float`のように、`long double`が最も高い順位をもつ
 - 同じ値集合をもつ2つの拡張浮動小数点数型は、同じ順位をもつ
-- 標準浮動小数点数型と同じ値集合をもつ拡張浮動小数点数型は、同じ順位をもつ
-- 標準浮動小数点数型より多くの値集合をもつ拡張浮動小数点数型は、`double`と同じ順位をもつ
+- 1つの標準浮動小数点数型だけと同じ値集合をもつ拡張浮動小数点数型は、その型と同じ順位をもつ
+- 2つ以上の標準浮動小数点数型と同じ値集合をもつ拡張浮動小数点数型は、`double`と同じ順位をもつ
 
-注意として、浮動小数点数型`T1`の値集合が浮動小数点数型`T2`の値集合の部分集合でも上位集合でもない場合、浮動小数点数型`T1`と`T2`の変換順位は順位通りではない。これは、一方の型が他方より大きな範囲と低い精度の両方を持つ場合に起こり得る。
+注意として、浮動小数点数型`T1`の値集合が浮動小数点数型`T2`の値集合の部分集合でも上位集合でもない場合、浮動小数点数型`T1`と`T2`の変換順位は定義されない。これは、一方の型が他方より大きな範囲と低い精度の両方を持つ場合に起こり得る。例えば、`std::float16_t`と`std::bfloat16_t`の間には変換順位が付かず、相互に暗黙変換できない。
 
 順位が同じ浮動小数点数型は、サブ順位 (subrank) で順序付けられる。拡張浮動小数点数は、標準浮動小数点数型よりも大きなサブ順位をもつ。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float32_t -- 拡張浮動小数点数型の変換順位について修正と追記</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float32_t.html"/>
      <id>d609dd117b52b3e844666f2697222ce06c0d469a:reference/stdfloat/float32_t.md</id>
      <updated>2024-12-04T14:32:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float32_t.md b/reference/stdfloat/float32_t.md
index 3ffb0ed3c..7cafe5f13 100644
--- a/reference/stdfloat/float32_t.md
+++ b/reference/stdfloat/float32_t.md
@@ -41,10 +41,10 @@ std::float32_t b = 2.0F32;
 
 - `long double` &amp;gt; `double` &amp;gt; `float`のように、`long double`が最も高い順位をもつ
 - 同じ値集合をもつ2つの拡張浮動小数点数型は、同じ順位をもつ
-- 標準浮動小数点数型と同じ値集合をもつ拡張浮動小数点数型は、同じ順位をもつ
-- 標準浮動小数点数型より多くの値集合をもつ拡張浮動小数点数型は、`double`と同じ順位をもつ
+- 1つの標準浮動小数点数型だけと同じ値集合をもつ拡張浮動小数点数型は、その型と同じ順位をもつ
+- 2つ以上の標準浮動小数点数型と同じ値集合をもつ拡張浮動小数点数型は、`double`と同じ順位をもつ
 
-注意として、浮動小数点数型`T1`の値集合が浮動小数点数型`T2`の値集合の部分集合でも上位集合でもない場合、浮動小数点数型`T1`と`T2`の変換順位は順位通りではない。これは、一方の型が他方より大きな範囲と低い精度の両方を持つ場合に起こり得る。
+注意として、浮動小数点数型`T1`の値集合が浮動小数点数型`T2`の値集合の部分集合でも上位集合でもない場合、浮動小数点数型`T1`と`T2`の変換順位は定義されない。これは、一方の型が他方より大きな範囲と低い精度の両方を持つ場合に起こり得る。例えば、`std::float16_t`と`std::bfloat16_t`の間には変換順位が付かず、相互に暗黙変換できない。
 
 順位が同じ浮動小数点数型は、サブ順位 (subrank) で順序付けられる。拡張浮動小数点数は、標準浮動小数点数型よりも大きなサブ順位をもつ。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>float64_t -- 拡張浮動小数点数型の変換順位について修正と追記</title>
      <link href="https://cpprefjp.github.io/reference/stdfloat/float64_t.html"/>
      <id>d609dd117b52b3e844666f2697222ce06c0d469a:reference/stdfloat/float64_t.md</id>
      <updated>2024-12-04T14:32:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stdfloat/float64_t.md b/reference/stdfloat/float64_t.md
index b1e89ed2a..4c33f3b61 100644
--- a/reference/stdfloat/float64_t.md
+++ b/reference/stdfloat/float64_t.md
@@ -41,10 +41,10 @@ std::float64_t b = 2.0F64;
 
 - `long double` &amp;gt; `double` &amp;gt; `float`のように、`long double`が最も高い順位をもつ
 - 同じ値集合をもつ2つの拡張浮動小数点数型は、同じ順位をもつ
-- 標準浮動小数点数型と同じ値集合をもつ拡張浮動小数点数型は、同じ順位をもつ
-- 標準浮動小数点数型より多くの値集合をもつ拡張浮動小数点数型は、`double`と同じ順位をもつ
+- 1つの標準浮動小数点数型だけと同じ値集合をもつ拡張浮動小数点数型は、その型と同じ順位をもつ
+- 2つ以上の標準浮動小数点数型と同じ値集合をもつ拡張浮動小数点数型は、`double`と同じ順位をもつ
 
-注意として、浮動小数点数型`T1`の値集合が浮動小数点数型`T2`の値集合の部分集合でも上位集合でもない場合、浮動小数点数型`T1`と`T2`の変換順位は順位通りではない。これは、一方の型が他方より大きな範囲と低い精度の両方を持つ場合に起こり得る。
+注意として、浮動小数点数型`T1`の値集合が浮動小数点数型`T2`の値集合の部分集合でも上位集合でもない場合、浮動小数点数型`T1`と`T2`の変換順位は定義されない。これは、一方の型が他方より大きな範囲と低い精度の両方を持つ場合に起こり得る。例えば、`std::float16_t`と`std::bfloat16_t`の間には変換順位が付かず、相互に暗黙変換できない。
 
 順位が同じ浮動小数点数型は、サブ順位 (subrank) で順序付けられる。拡張浮動小数点数は、標準浮動小数点数型よりも大きなサブ順位をもつ。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
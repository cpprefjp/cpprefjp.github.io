<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-08-20T14:39:20.784688</updated>
  <id>154beba8-0a62-4fbc-afec-4c59843a3cbb</id>

  
    <entry>
      <title>flat_map -- flat_map : erase_ifを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>7f2cc9c03b4d65c0b81a0e9106ce065c74a017ea:reference/flat_map/flat_map.md</id>
      <updated>2023-08-18T17:10:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index 8eb87457b..04eee438c 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -121,7 +121,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`erase_if`](flat_map/erase_if_free.md.nolink) | 指定した条件に合致する要素とその分の領域を、コンテナから削除する | C++23 |
+| [`erase_if`](flat_map/erase_if_free.md) | 指定した条件に合致する要素とその分の領域を、コンテナから削除する | C++23 |
 
 
 ## 非メンバ（*Hidden friends*）関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- flat_map : erase_ifを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/erase_if_free.html"/>
      <id>7f2cc9c03b4d65c0b81a0e9106ce065c74a017ea:reference/flat_map/flat_map/erase_if_free.md</id>
      <updated>2023-08-18T17:10:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/erase_if_free.md b/reference/flat_map/flat_map/erase_if_free.md
new file mode 100644
index 000000000..ff886ba08
--- /dev/null
+++ b/reference/flat_map/flat_map/erase_if_free.md
@@ -0,0 +1,80 @@
+# erase_if
+* flat_map[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Key,
+           class T,
+           class Compare,
+           class KeyContainer,
+           class MappedContainer,
+           class Predicate&amp;gt;
+  typename flat_map&amp;lt;Key, T, Compare, KeyContainer, MappedContainer&amp;gt;::size_type
+    erase_if(flat_map&amp;lt;Key, T, Compare, KeyContainer, MappedContainer&amp;gt;&amp;amp; c,
+             Predicate pred);
+}
+```
+
+## 概要
+指定した条件に合致する要素とその分の領域を、コンテナから削除する。
+
+述語関数オブジェクトには、キーではなく、要素全体 (キーと値の[`pair`](/reference/utility/pair.md)) が渡されるので注意。
+
+
+## 事前条件
+- `Key`と`T`がムーブ代入可能であること
+
+
+## 効果
+メンバ変数として保持しているコンテナ`c`の各要素`e`について、`bool(pred(pair&amp;lt;const Key&amp;amp;, const T&amp;amp;&amp;gt;(e)))`を`E`として、`E`が`true`であるすべての要素を削除する。
+
+
+## 戻り値
+削除した要素数を返す。
+
+
+## 計算量
+正確に[`size()`](size.md)回だけ述語適用する。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm = {
+    {3, &amp;#39;a&amp;#39;},
+    {1, &amp;#39;b&amp;#39;},
+    {4, &amp;#39;c&amp;#39;}
+  };
+
+  // コンテナfmから、キー1をもつ要素をすべて削除する
+  std::erase_if(fm, [](const auto&amp;amp; x) { return x.first == 1; });
+
+  for (const auto&amp;amp; [key, value] : fm) {
+    std::cout &amp;lt;&amp;lt; key &amp;lt;&amp;lt; &amp;#39;:&amp;#39; &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::erase_if[color ff0000]
+
+### 出力
+```
+3:a
+4:c
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- flat_map : erase_ifを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/map/map/erase_if_free.html"/>
      <id>7f2cc9c03b4d65c0b81a0e9106ce065c74a017ea:reference/map/map/erase_if_free.md</id>
      <updated>2023-08-18T17:10:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/erase_if_free.md b/reference/map/map/erase_if_free.md
index f0ff43d5e..46e3e7963 100644
--- a/reference/map/map/erase_if_free.md
+++ b/reference/map/map/erase_if_free.md
@@ -15,7 +15,7 @@ namespace std {
 ## 概要
 指定した条件に合致する要素とその分の領域を、コンテナから削除する。
 
-述語関数オブジェクトには、キーではなく、要素全体 (キーと値の組) が渡されるので注意。
+述語関数オブジェクトには、キーではなく、要素全体 (キーと値の[`pair`](/reference/utility/pair.md)) が渡されるので注意。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- flat_map : erase_ifを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/erase_if_free.html"/>
      <id>7f2cc9c03b4d65c0b81a0e9106ce065c74a017ea:reference/map/multimap/erase_if_free.md</id>
      <updated>2023-08-18T17:10:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/erase_if_free.md b/reference/map/multimap/erase_if_free.md
index b891823c5..6f406c93d 100644
--- a/reference/map/multimap/erase_if_free.md
+++ b/reference/map/multimap/erase_if_free.md
@@ -15,7 +15,7 @@ namespace std {
 ## 概要
 指定した条件に合致する要素とその分の領域を、コンテナから削除する。
 
-述語関数オブジェクトには、キーではなく、要素全体 (キーと値の組) が渡されるので注意。
+述語関数オブジェクトには、キーではなく、要素全体 (キーと値の[`pair`](/reference/utility/pair.md)) が渡されるので注意。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : lower_bound, upper_bound, equal_rangeを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>d210ea7ae2005bc551bb475f8f29e3d2eb36458d:reference/flat_map/flat_map.md</id>
      <updated>2023-08-18T14:53:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index 1f8d0b0ba..8eb87457b 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -79,9 +79,9 @@ namespace std {
 | [`count`](flat_map/count.md)             | 指定したキーにマッチする要素の数を取得する | C++23 |
 | [`find`](flat_map/find.md)               | 指定したキーで要素を探す                   | C++23 |
 | [`contains`](flat_map/contains.md)       | 指定したキーの要素が含まれているかを判定する | C++23 |
-| [`equal_range`](flat_map/equal_range.md.nolink) | 指定したキーにマッチする要素範囲を取得する | C++23 |
-| [`lower_bound`](flat_map/lower_bound.md.nolink) | 与えられた値より小さくない最初の要素へのイテレータを取得する | C++23 |
-| [`upper_bound`](flat_map/upper_bound.md.nolink) | 特定の値よりも大きい最初の要素へのイテレータを取得する       | C++23 |
+| [`equal_range`](flat_map/equal_range.md) | 指定したキーにマッチする要素範囲を取得する | C++23 |
+| [`lower_bound`](flat_map/lower_bound.md) | 与えられた値より小さくない最初の要素へのイテレータを取得する | C++23 |
+| [`upper_bound`](flat_map/upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを取得する       | C++23 |
 
 ### オブザーバー
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- flat_map : lower_bound, upper_bound, equal_rangeを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/equal_range.html"/>
      <id>d210ea7ae2005bc551bb475f8f29e3d2eb36458d:reference/flat_map/flat_map/equal_range.md</id>
      <updated>2023-08-18T14:53:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/equal_range.md b/reference/flat_map/flat_map/equal_range.md
new file mode 100644
index 000000000..7fb856d0b
--- /dev/null
+++ b/reference/flat_map/flat_map/equal_range.md
@@ -0,0 +1,85 @@
+# equal_range
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+pair&amp;lt;iterator, iterator&amp;gt; equal_range(const key_type&amp;amp; x); // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+pair&amp;lt;iterator, iterator&amp;gt; equal_range(const K&amp;amp; x);        // (2) C++23
+
+pair&amp;lt;const_iterator, const_iterator&amp;gt;
+  equal_range(const key_type&amp;amp; x) const;                  // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+pair&amp;lt;const_iterator, const_iterator&amp;gt;
+  equal_range(const K&amp;amp; x) const;                         // (4) C++23
+```
+* pair[link /reference/utility/pair.md]
+
+## 概要
+コンテナ内の、`x` と等しいキー要素を全て含む範囲の境界を返す。`map` コンテナではキーの重複は無いため、この範囲は最大一つの要素を含む。 
+
+もし `x` がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは `x` より大きく最も近い値を指す。そうでない場合、`x` がコンテナ内の全ての要素よりも大きい場合は [`end`](end.md) を指す。
+
+- (1) : `key_type`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+
+
+## 戻り値
+この関数は `pair` を返す。ここで `pair::first` は [`lower_bound`](lower_bound.md)`(x)` が返すであろう値と同じ値で範囲の下境界にあたり、`pair::second` は [`upper_bound`](upper_bound.md)`(x)` が返すであろう値と同じ値で範囲の上境界にあたる。
+
+
+## 計算量
+[`size`](size.md) について対数時間。
+
+
+## 備考
+- (2), (4) : この関数がオーバーロード解決に参加する条件は、[`find()`](find.md)メンバ関数の備考欄を参照。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  std::flat_map&amp;lt;std::string, int&amp;gt; fm = {
+    {&amp;#34;A&amp;#34;, 3},
+    {&amp;#34;B&amp;#34;, 1},
+    {&amp;#34;C&amp;#34;, 4},
+    {&amp;#34;D&amp;#34;, 5}
+  };
+
+  using iterator = decltype(fm)::iterator;
+  std::pair&amp;lt;iterator, iterator&amp;gt; ret = fm.equal_range(&amp;#34;B&amp;#34;);
+
+  for (iterator it = ret.first; it != ret.second; ++it) {
+    std::cout &amp;lt;&amp;lt; it-&amp;gt;first &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; it-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* equal_range[color ff0000]
+
+### 出力
+```
+B,1
+```
+
+
+## 関連項目
+
+| 名前 | 説明 |
+|-------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|
+| [`flat_map::count`](count.md) | 指定したキーにマッチする要素の数を返す |
+| [`flat_map::lower_bound`](lower_bound.md) | 与えられた値より小さくない最初の要素へのイテレータを返す |
+| [`flat_map::upper_bound`](upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを返す |
+| [`flat_map::find`](find.md) | 指定したキーで要素を探す |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- flat_map : lower_bound, upper_bound, equal_rangeを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/lower_bound.html"/>
      <id>d210ea7ae2005bc551bb475f8f29e3d2eb36458d:reference/flat_map/flat_map/lower_bound.md</id>
      <updated>2023-08-18T14:53:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/lower_bound.md b/reference/flat_map/flat_map/lower_bound.md
new file mode 100644
index 000000000..092a2e6b9
--- /dev/null
+++ b/reference/flat_map/flat_map/lower_bound.md
@@ -0,0 +1,119 @@
+# lower_bound
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator lower_bound(const key_type&amp;amp; x);             // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+iterator lower_bound(const K&amp;amp; x);                    // (2) C++23
+
+const_iterator lower_bound(const key_type&amp;amp; x) const; // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+const_iterator lower_bound(const K&amp;amp; x) const;        // (4) C++23
+```
+
+## 概要
+`x` を右辺とする `&amp;lt;` 演算が成り立たない最初の要素を指すイテレータを返す（コンテナの比較オブジェクトが使われる）。すなわちこれは `&amp;gt;=` 演算にあたる。
+
+[`upper_bound()`](upper_bound.md) とは異なり、このメンバ関数は `x` より大きいだけでなく、`x` と等しい場合であってもその要素へのイテレータを返す。
+
+内部的には `map` コンテナ内の全ての要素は常に比較オブジェクトが定義する基準に沿って並んでいるため、この関数が返すいずれかの後に続く全ての要素が `x` より大きいか等しいことに注意。
+
+- (1) : `key_type`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+
+
+## 戻り値
+- (1), (3) : コンテナ内で `x` を右辺とする `&amp;lt;` 演算が成り立たない最初の要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md)を返す。
+- (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが小さくないか判定する式`!c(k, x)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md) を返す。
+
+
+## 計算量
+[`size()`](size.md) について対数時間。
+
+
+## 備考
+- (2), (4) : この関数がオーバーロード解決に参加する条件は、[`find()`](find.md)メンバ関数の備考欄を参照。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  // (1)
+  {
+    std::flat_map&amp;lt;std::string, int&amp;gt; fm = {
+      {&amp;#34;A&amp;#34;, 3},
+      {&amp;#34;B&amp;#34;, 1},
+      {&amp;#34;C&amp;#34;, 4},
+      {&amp;#34;D&amp;#34;, 5}
+    };
+
+    // B以上D以下の範囲を取得
+    decltype(fm)::iterator it = fm.lower_bound(&amp;#34;B&amp;#34;);
+    decltype(fm)::iterator last = fm.upper_bound(&amp;#34;D&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; it-&amp;gt;first &amp;lt;&amp;lt; &amp;#39;,&amp;#39; &amp;lt;&amp;lt; it-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+    std::cout &amp;lt;&amp;lt; std::endl;
+  }
+
+  // (2)
+  {
+    std::flat_map&amp;lt;std::string, int, std::less&amp;lt;&amp;gt;&amp;gt; fm = {
+      {&amp;#34;A&amp;#34;, 3},
+      {&amp;#34;B&amp;#34;, 1},
+      {&amp;#34;C&amp;#34;, 4},
+      {&amp;#34;D&amp;#34;, 5}
+    };
+
+    // std::lessのvoidに対する特殊化を使用することで、
+    // 文字列リテラルをlower_bound()関数の引数として渡した際に、
+    // std::string型の一時オブジェクトが生成されない。
+    decltype(fm)::iterator it = fm.lower_bound(&amp;#34;B&amp;#34;);
+    decltype(fm)::iterator last = fm.upper_bound(&amp;#34;D&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; it-&amp;gt;first &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; it-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+  }
+}
+```
+* lower_bound[color ff0000]
+* fm.upper_bound[link upper_bound.md]
+* std::less[link /reference/functional/less.md]
+
+### 出力
+```
+B,1
+C,4
+D,5
+
+B,1
+C,4
+D,5
+```
+
+## 関連項目
+
+| 名前 | 説明 |
+|-------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|
+| [`upper_bound`](upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを返す |
+| [`equal_range`](equal_range.md) | 指定したキーにマッチする要素範囲を返す |
+| [`find`](find.md) | 指定したキーで要素を探す |
+| [`count`](count.md) | 指定したキーにマッチする要素の数を返す |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_bound -- flat_map : lower_bound, upper_bound, equal_rangeを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/upper_bound.html"/>
      <id>d210ea7ae2005bc551bb475f8f29e3d2eb36458d:reference/flat_map/flat_map/upper_bound.md</id>
      <updated>2023-08-18T14:53:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/upper_bound.md b/reference/flat_map/flat_map/upper_bound.md
new file mode 100644
index 000000000..6ec16277b
--- /dev/null
+++ b/reference/flat_map/flat_map/upper_bound.md
@@ -0,0 +1,119 @@
+# upper_bound
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator upper_bound(const key_type&amp;amp; x);             // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+iterator upper_bound(const K&amp;amp; x);                    // (2) C++23
+
+const_iterator upper_bound(const key_type&amp;amp; x) const; // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+const_iterator upper_bound(const K&amp;amp; x) const;        // (4) C++23
+```
+
+## 概要
+`x` より大きいキーを持つコンテナ内の最初の要素を指すイテレータを返す（コンテナの比較オブジェクトを使う）。
+
+[`lower_bound()`](lower_bound.md) と異なり、このメンバ関数は `x` と等しいときは要素へのイテレータを返さず、それは大きい場合にのみ要素へのイテレータを返す。
+
+内部的に、`map` コンテナ内の全ての要素は常に比較オブジェクトで定義された基準に従って並ぶため、この関数が返す値に続く全ての要素は `x` より大きいことに注意。
+
+- (1) : `key_type`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+
+
+## 戻り値
+- (1), (3) : キー`x`より大きい最初の要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md)を返す。
+- (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが小さくないか判定する式`c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md) を返す。
+
+
+## 計算量
+[`size()`](size.md) について対数時間。
+
+
+## 備考
+- (2), (4) : この関数がオーバーロード解決に参加する条件は、[`find()`](find.md)メンバ関数の備考欄を参照。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  // (1)
+  {
+    std::flat_map&amp;lt;std::string, int&amp;gt; fm = {
+      {&amp;#34;A&amp;#34;, 3},
+      {&amp;#34;B&amp;#34;, 1},
+      {&amp;#34;C&amp;#34;, 4},
+      {&amp;#34;D&amp;#34;, 5}
+    };
+
+    // B以上D以下の範囲を取得
+    decltype(fm)::iterator it = fm.lower_bound(&amp;#34;B&amp;#34;);
+    decltype(fm)::iterator last = fm.upper_bound(&amp;#34;D&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; it-&amp;gt;first &amp;lt;&amp;lt; &amp;#39;,&amp;#39; &amp;lt;&amp;lt; it-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+    std::cout &amp;lt;&amp;lt; std::endl;
+  }
+
+  // (2)
+  {
+    std::flat_map&amp;lt;std::string, int, std::less&amp;lt;&amp;gt;&amp;gt; fm = {
+      {&amp;#34;A&amp;#34;, 3},
+      {&amp;#34;B&amp;#34;, 1},
+      {&amp;#34;C&amp;#34;, 4},
+      {&amp;#34;D&amp;#34;, 5}
+    };
+
+    // std::lessのvoidに対する特殊化を使用することで、
+    // 文字列リテラルをlower_bound()関数の引数として渡した際に、
+    // std::string型の一時オブジェクトが生成されない。
+    decltype(fm)::iterator it = fm.lower_bound(&amp;#34;B&amp;#34;);
+    decltype(fm)::iterator last = fm.upper_bound(&amp;#34;D&amp;#34;);
+
+    while (it != last) {
+      std::cout &amp;lt;&amp;lt; it-&amp;gt;first &amp;lt;&amp;lt; &amp;#34;,&amp;#34; &amp;lt;&amp;lt; it-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+      ++it;
+    }
+  }
+}
+```
+* upper_bound[color ff0000]
+* fm.lower_bound[link lower_bound.md]
+* std::less[link /reference/functional/less.md]
+
+### 出力
+```
+B,1
+C,4
+D,5
+
+B,1
+C,4
+D,5
+```
+
+## 関連項目
+
+| 名前 | 説明 |
+|-------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|
+| [`lower_bound`](lower_bound.md) | 与えられた値よりも小さくない最初の要素へのイテレータを返す |
+| [`equal_range`](equal_range.md) | 指定したキーにマッチする要素範囲を返す |
+| [`find`](find.md) | 指定したキーで要素を探す |
+| [`count`](count.md) | 指定したキーにマッチする要素の数を返す |
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- flat_map : lower_bound, upper_bound, equal_rangeを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/map/map/equal_range.html"/>
      <id>d210ea7ae2005bc551bb475f8f29e3d2eb36458d:reference/map/map/equal_range.md</id>
      <updated>2023-08-18T14:53:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/equal_range.md b/reference/map/map/equal_range.md
index 062369cd3..2705fc06a 100644
--- a/reference/map/map/equal_range.md
+++ b/reference/map/map/equal_range.md
@@ -22,7 +22,7 @@ pair&amp;lt;const_iterator, const_iterator&amp;gt;
 ## 概要
 コンテナ内の、`x` と等しいキー要素を全て含む範囲の境界を返す。`map` コンテナではキーの重複は無いため、この範囲は最大一つの要素を含む。 
 
-もし `x` がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは `x` より大きく最も近い値を指す。そうでない場合、`x` がコンテナ内の全ての要素よりも大きい場合は [`end`](/end.md) を指す。
+もし `x` がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは `x` より大きく最も近い値を指す。そうでない場合、`x` がコンテナ内の全ての要素よりも大きい場合は [`end`](end.md) を指す。
 
 - (1) : `key_type`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
 - (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- map::lower_bound, upper_bound, equal_range : オーバーロード概要とリンクを整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map/equal_range.html"/>
      <id>176e5a6c507f0297020a9ce423ff3fe6f78827f3:reference/map/map/equal_range.md</id>
      <updated>2023-08-18T14:45:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/equal_range.md b/reference/map/map/equal_range.md
index ebfc2bfa7..062369cd3 100644
--- a/reference/map/map/equal_range.md
+++ b/reference/map/map/equal_range.md
@@ -22,18 +22,20 @@ pair&amp;lt;const_iterator, const_iterator&amp;gt;
 ## 概要
 コンテナ内の、`x` と等しいキー要素を全て含む範囲の境界を返す。`map` コンテナではキーの重複は無いため、この範囲は最大一つの要素を含む。 
 
-もし `x` がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは `x` より大きく最も近い値を指す。そうでない場合、`x` がコンテナ内の全ての要素よりも大きい場合は [`end`](/reference/map/map/end.md) を指す。
+もし `x` がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは `x` より大きく最も近い値を指す。そうでない場合、`x` がコンテナ内の全ての要素よりも大きい場合は [`end`](/end.md) を指す。
 
-- (1), (3) : `key_type`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
-- (2), (4) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (1) : `key_type`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。
 
 
 ## 戻り値
-この関数は `pair` を返す。ここで `pair::first` は [`lower_bound`](lower_bound.md)`(x)` が返すであろう値と同じ値で範囲の下境界にあたり、`pair::second` は [`upper_bound`](/reference/map/map/upper_bound.md)`(x)` が返すであろう値と同じ値で範囲の上境界にあたる。
+この関数は `pair` を返す。ここで `pair::first` は [`lower_bound`](lower_bound.md)`(x)` が返すであろう値と同じ値で範囲の下境界にあたり、`pair::second` は [`upper_bound`](upper_bound.md)`(x)` が返すであろう値と同じ値で範囲の上境界にあたる。
 
 
 ## 計算量
-[`size`](/reference/map/map/size.md) について対数時間。
+[`size`](size.md) について対数時間。
 
 
 ## 備考
@@ -75,10 +77,10 @@ B,1
 
 | 名前 | 説明 |
 |-------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|
-| [`map::count`](/reference/map/map/count.md) | 指定したキーにマッチする要素の数を返す |
-| [`map::lower_bound`](/reference/map/map/lower_bound.md) | 与えられた値より小さくない最初の要素へのイテレータを返す |
-| [`map::upper_bound`](/reference/map/map/upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを返す |
-| [`map::find`](/reference/map/map/find.md) | 指定したキーで要素を探す |
+| [`map::count`](count.md) | 指定したキーにマッチする要素の数を返す |
+| [`map::lower_bound`](lower_bound.md) | 与えられた値より小さくない最初の要素へのイテレータを返す |
+| [`map::upper_bound`](upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを返す |
+| [`map::find`](find.md) | 指定したキーで要素を探す |
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- map::lower_bound, upper_bound, equal_range : オーバーロード概要とリンクを整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map/lower_bound.html"/>
      <id>176e5a6c507f0297020a9ce423ff3fe6f78827f3:reference/map/map/lower_bound.md</id>
      <updated>2023-08-18T14:45:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/lower_bound.md b/reference/map/map/lower_bound.md
index 4c1ad305f..52298b0a4 100644
--- a/reference/map/map/lower_bound.md
+++ b/reference/map/map/lower_bound.md
@@ -19,12 +19,14 @@ const_iterator lower_bound(const K&amp;amp; x) const;        // (4) C++14
 ## 概要
 `x` を右辺とする `&amp;lt;` 演算が成り立たない最初の要素を指すイテレータを返す（コンテナの比較オブジェクトが使われる）。すなわちこれは `&amp;gt;=` 演算にあたる。
 
-[`upper_bound()`](/reference/map/map/upper_bound.md) とは異なり、このメンバ関数は `x` より大きいだけでなく、`x` と等しい場合であってもその要素へのイテレータを返す。
+[`upper_bound()`](upper_bound.md) とは異なり、このメンバ関数は `x` より大きいだけでなく、`x` と等しい場合であってもその要素へのイテレータを返す。
 
 内部的には `map` コンテナ内の全ての要素は常に比較オブジェクトが定義する基準に沿って並んでいるため、この関数が返すいずれかの後に続く全ての要素が `x` より大きいか等しいことに注意。
 
-- (1), (3) : `key_type`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
-- (2), (4) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (1) : `key_type`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。
 
 
 ## 戻り値
@@ -33,7 +35,7 @@ const_iterator lower_bound(const K&amp;amp; x) const;        // (4) C++14
 
 
 ## 計算量
-[`size()`](/reference/map/map/size.md) について対数時間。
+[`size()`](size.md) について対数時間。
 
 
 ## 備考
@@ -109,10 +111,10 @@ D,5
 
 | 名前 | 説明 |
 |-------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|
-| [`upper_bound`](/reference/map/map/upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを返す |
-| [`equal_range`](/reference/map/map/equal_range.md) | 指定したキーにマッチする要素範囲を返す |
-| [`find`](/reference/map/map/find.md) | 指定したキーで要素を探す |
-| [`count`](/reference/map/map/count.md) | 指定したキーにマッチする要素の数を返す |
+| [`upper_bound`](upper_bound.md) | 特定の値よりも大きい最初の要素へのイテレータを返す |
+| [`equal_range`](equal_range.md) | 指定したキーにマッチする要素範囲を返す |
+| [`find`](find.md) | 指定したキーで要素を探す |
+| [`count`](count.md) | 指定したキーにマッチする要素の数を返す |
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_bound -- map::lower_bound, upper_bound, equal_range : オーバーロード概要とリンクを整理</title>
      <link href="https://cpprefjp.github.io/reference/map/map/upper_bound.html"/>
      <id>176e5a6c507f0297020a9ce423ff3fe6f78827f3:reference/map/map/upper_bound.md</id>
      <updated>2023-08-18T14:45:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/upper_bound.md b/reference/map/map/upper_bound.md
index 115075f40..6fa5b335d 100644
--- a/reference/map/map/upper_bound.md
+++ b/reference/map/map/upper_bound.md
@@ -19,12 +19,14 @@ const_iterator upper_bound(const K&amp;amp; x) const;        // (4) C++14
 ## 概要
 `x` より大きいキーを持つコンテナ内の最初の要素を指すイテレータを返す（コンテナの比較オブジェクトを使う）。
 
-[`lower_bound()`](/reference/map/map/lower_bound.md) と異なり、このメンバ関数は `x` と等しいときは要素へのイテレータを返さず、それは大きい場合にのみ要素へのイテレータを返す。
+[`lower_bound()`](lower_bound.md) と異なり、このメンバ関数は `x` と等しいときは要素へのイテレータを返さず、それは大きい場合にのみ要素へのイテレータを返す。
 
 内部的に、`map` コンテナ内の全ての要素は常に比較オブジェクトで定義された基準に従って並ぶため、この関数が返す値に続く全ての要素は `x` より大きいことに注意。
 
-- (1), (3) : `key_type`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
-- (2), (4) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (1) : `key_type`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (2) : `key_type`と比較可能な`K`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (3) : `const`な`*this`オブジェクトにおいて、`key_type`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
+- (4) : `const`な`*this`オブジェクトにおいて、`key_type`と比較可能な`K`型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。
 
 
 ## 戻り値
@@ -33,7 +35,7 @@ const_iterator upper_bound(const K&amp;amp; x) const;        // (4) C++14
 
 
 ## 計算量
-[`size()`](/reference/map/map/size.md) について対数時間。
+[`size()`](size.md) について対数時間。
 
 
 ## 備考
@@ -109,10 +111,10 @@ D,5
 
 | 名前 | 説明 |
 |-------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|
-| [`lower_bound`](/reference/map/map/lower_bound.md) | 与えられた値よりも小さくない最初の要素へのイテレータを返す |
-| [`equal_range`](/reference/map/map/equal_range.md) | 指定したキーにマッチする要素範囲を返す |
-| [`find`](/reference/map/map/find.md) | 指定したキーで要素を探す |
-| [`count`](/reference/map/map/count.md) | 指定したキーにマッチする要素の数を返す |
+| [`lower_bound`](lower_bound.md) | 与えられた値よりも小さくない最初の要素へのイテレータを返す |
+| [`equal_range`](equal_range.md) | 指定したキーにマッチする要素範囲を返す |
+| [`find`](find.md) | 指定したキーで要素を探す |
+| [`count`](count.md) | 指定したキーにマッチする要素の数を返す |
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_or_assign -- map::insert_or_assign : オーバーロードの概要文章を追加</title>
      <link href="https://cpprefjp.github.io/reference/map/map/insert_or_assign.html"/>
      <id>21d60b4cf25bad0eeb02c8fc48169f6aca8a8b08:reference/map/map/insert_or_assign.md</id>
      <updated>2023-08-17T17:16:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/insert_or_assign.md b/reference/map/map/insert_or_assign.md
index 331a6187f..22eead398 100644
--- a/reference/map/map/insert_or_assign.md
+++ b/reference/map/map/insert_or_assign.md
@@ -25,6 +25,11 @@ iterator insert_or_assign(const_iterator hint, key_type&amp;amp;&amp;amp; k, M&amp;amp;&amp;amp; obj);
 
 引数 `hint` は、`k` を検索する際のヒントに使用される。
 
+- (1) : `key_type`型のキーをとって挿入もしくは代入する
+- (2) : `key_type`型の一時オブジェクトのキーをとって挿入もしくは代入する
+- (3) : 挿入位置のヒントをともない、`key_type`型のキーをとって挿入もしくは代入する
+- (4) : 挿入位置のヒントをともない、`key_type`型の一時オブジェクトのキーをとって挿入もしくは代入する
+
 
 ## テンプレートパラメータ制約
 - (1)、(3) : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;mapped_type&amp;amp;, M&amp;amp;&amp;amp;&amp;gt;` が `true` であること。`value_type` は、`k`, [`forward`](/reference/utility/forward.md)`&amp;lt;M&amp;gt;(obj)` から `map` に直接構築可能であること
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_or_assign -- flat_map::insert_or_assign : 転送参照は一時オブジェクトではなかった #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/insert_or_assign.html"/>
      <id>cd883d1560a5608d4f3d2df4dec093706a84c305:reference/flat_map/flat_map/insert_or_assign.md</id>
      <updated>2023-08-17T17:15:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/insert_or_assign.md b/reference/flat_map/flat_map/insert_or_assign.md
index 39a0fad21..0a0328719 100644
--- a/reference/flat_map/flat_map/insert_or_assign.md
+++ b/reference/flat_map/flat_map/insert_or_assign.md
@@ -48,10 +48,10 @@ iterator
 
 - (1) : `key_type`型のキーをとって挿入もしくは代入する
 - (2) : `key_type`型の一時オブジェクトのキーをとって挿入もしくは代入する
-- (3) : `key_type`に変換可能な型の一時オブジェクトのキーをとって挿入もしくは代入する
+- (3) : `key_type`に変換可能な型のキーをとって挿入もしくは代入する
 - (4) : 挿入位置のヒントをともない、`key_type`型のキーをとって挿入もしくは代入する
 - (5) : 挿入位置のヒントをともない、`key_type`型の一時オブジェクトのキーをとって挿入もしくは代入する
-- (6) : 挿入位置のヒントをともない、`key_type`に変換可能な型の一時オブジェクトのキーをとって挿入もしくは代入する
+- (6) : 挿入位置のヒントをともない、`key_type`に変換可能な型のキーをとって挿入もしくは代入する
 
 
 ## テンプレートパラメータ制約
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
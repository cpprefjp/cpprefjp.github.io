<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2017-12-04T22:52:06.155880</updated>
  <id>a4605123-3d90-43c7-ac87-f9e491178ee3</id>

  
    <entry>
      <title>入れ子名の指定にグローバルスコープ :: を付加することを許可 -- タイトルの修飾を削除 (cpprefjp/site_generator#10)</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/global_scope_syntax_in_nested_name_specifier.html"/>
      <id>6ea1429ab826287f1800923d65e642c964787694:lang/cpp11/global_scope_syntax_in_nested_name_specifier.md</id>
      <updated>2017-12-05T07:40:56+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;入れ子名の指定にグローバルスコープ :: を付加することを許可&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;入れ子名を指定する構文において、先頭にグローバルスコープの指定&lt;code&gt;::&lt;/code&gt;を付加することが許可された。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// クラスAの宣言&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// クラスAの定義&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;nested-name-specifierの構文が、以下のように変更された。&lt;/p&gt;
&lt;p&gt;変更前：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;nested-name-specifier:
  type-name ::
  namespace-name ::
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;変更後：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;nested-name-specifier:
  :: &lt;i&gt;opt&lt;/i&gt; type-name ::
  :: &lt;i&gt;opt&lt;/i&gt; namespace-name ::
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#355&#34; target=&#34;_blank&#34;&gt;CWG Issue 355. Global-scope &lt;code&gt;::&lt;/code&gt; in nested-name-specifier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>入れ子名前空間の定義 -- コードのミスを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/nested_namespace.html"/>
      <id>7dafc6f2ef8fd070fc64a2a599259d8fee30b404:lang/cpp17/nested_namespace.md</id>
      <updated>2017-12-05T07:23:05+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;入れ子名前空間の定義&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;一度の定義だけで入れ子状になった名前空間を定義可能となる。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;入れ子状にしたい名前空間指定子を &lt;code&gt;::&lt;/code&gt; で結合して定義する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 新機能: C++17 で可能となる入れ子名前空間の定義&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aaa&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bbb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ccc&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;a new nested namespace definition is worked!&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 比較用: C++14 までは入れ子状の名前空間を1つ1つ定義しなければならなかった。&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aaa&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bbb&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ccc&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;a legacy nested namespace definition is workded.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;aaa&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bbb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ccc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;aaa&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bbb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ccc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;a new nested namespace definition is worked!
a legacy nested namespace definition is workded.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;多くのプログラマーが入れ子状の名前空間の定義について従来よりも簡潔な定義を行いたいと考えている事は言語機能に関してディスカッションのある主要なフォーラム等からも明らかで、特に近年では他の言語と比較してC++を学び始めたプログラマーも入れ子状の定義ができて当然と考えている状況すら見られた。
新たに言語仕様に入れ子名前空間の定義を追加する事で熟練されたプログラマーの文法上のタイプ数を抑えるだけでなく、C++言語の初学者に対しても入れ子名前空間の定義について混乱を排除できると考えられ、C++17に提案、採用された。&lt;/p&gt;
&lt;h2&gt;検討されたほかの選択肢&lt;/h2&gt;
&lt;p&gt;この機能はC++0x当時から提案されており、以前の提案等については以下参照されたい。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;言語仕様: §7.3.1 §A.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4230.html&#34; target=&#34;_blank&#34;&gt;N4230 Nested namespace definition (revision 2)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1524.htm&#34; target=&#34;_blank&#34;&gt;N1524 Nested Namespace Definition Proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2869.html&#34; target=&#34;_blank&#34;&gt;N2869 State of C++ Evolution (Post San Francisco 2008)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>[[deprecated]]属性 -- 例の出力はなく，警告が発せられるためヘッダを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html"/>
      <id>0054b9c2e6e4299b2d19739446f71cf8882b1f34:lang/cpp14/deprecated_attr.md</id>
      <updated>2017-12-05T07:04:51+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;[[deprecated]]属性&lt;/span&gt;&lt;span class=&#34;cpp cpp14&#34; title=&#34;C++14で追加&#34;&gt;(C++14)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;は、対象となる機能が非推奨であることを示す属性である。&lt;/p&gt;
&lt;p&gt;ユーザーに提供するAPIは、バージョンアップしていくにあたって、非互換のインタフェース変更が必要になることがある。そういったときに、以下のようなことをユーザーに示す必要がある：&lt;/p&gt;
&lt;p&gt;「この古いAPIは互換性のために残しているが、将来のバージョンでは削除される可能性がある。削除される前に、新しいAPIを使用するようにユーザーコードを修正してほしい」&lt;/p&gt;
&lt;p&gt;このようなアナウンスは、リリースノートやAPI個別のドキュメントに記載されることが多いが、この方法ではユーザーに気づかれにくい。古いAPIを使用したときに、コンパイラに警告を表示させ、ユーザーに確実に非推奨の情報を伝えたい場合に、この&lt;code&gt;[[deprecated]]&lt;/code&gt;属性を使用する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;please use new_func() function&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;old_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// warning: &#39;void old_func()&#39; is deprecated: please use new_func() function&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;は、引数として文字列リテラルを指定すると、コンパイラの実装によっては、それがコンパイル時の警告メッセージとして使用される。引数を指定しない場合には、非推奨であることが警告として知らされるだけである。&lt;/p&gt;
&lt;p&gt;機能を非推奨とするときには、必ず代わりに使用すべきAPIが存在する。可能な限り文字列リテラルを指定して、代わりに何を使用すればよいかをユーザーに示すのがよいだろう。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性の引数は、なにも指定しないか、もしくは文字列リテラルを指定するかのどちらかである&lt;ul&gt;
&lt;li&gt;引数なしの場合は、&lt;code&gt;[[deprecated]]&lt;/code&gt;と記述する&lt;/li&gt;
&lt;li&gt;文字列リテラルを指定する場合は、&lt;code&gt;[[deprecated(&#34;message&#34;)]]&lt;/code&gt;のように記述する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;引数の文字列リテラルの扱いはコンパイラの実装定義だが、多くの場合、指定した文字列を、コンパイル時の警告として出力するだろう&lt;ul&gt;
&lt;li&gt;文字列リテラルの文字コードもまた、コンパイラの実装定義である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;この属性は、以下の宣言に対して適用できることがコンパイラに推奨される：&lt;ul&gt;
&lt;li&gt;クラス&lt;/li&gt;
&lt;li&gt;型の別名&lt;/li&gt;
&lt;li&gt;変数&lt;/li&gt;
&lt;li&gt;非静的メンバ変数&lt;/li&gt;
&lt;li&gt;関数&lt;/li&gt;
&lt;li&gt;列挙型&lt;/li&gt;
&lt;li&gt;テンプレートの特殊化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// 非推奨なクラス&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;please use new_class class&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_class&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 非推奨な型の別名&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;please use new_type type&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 非推奨な変数&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;please use new_variable variable&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 非推奨な非静的メンバ変数&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;please use new_member_variable&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_member_variable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 非推奨な関数&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;please use new_func() function&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 非推奨な列挙型&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;please use new_enum&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_enum&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;class_templ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 非推奨なテンプレートの特殊化&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;don&#39;t use class_templ&amp;lt;int&amp;gt; specialization&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_templ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;old_class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;old_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;old_variable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old_member_variable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;old_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;old_enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;class_templ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;警告例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;prog.cc:33:3: warning: &#39;old_class&#39; is deprecated: please use new_class class
prog.cc:34:3: warning: &#39;old_type&#39; is deprecated: please use new_type type
prog.cc:36:3: warning: &#39;old_variable&#39; is deprecated: please use new_variable variable
prog.cc:39:5: warning: &#39;old_member_variable&#39; is deprecated: please use new_member_variable
prog.cc:41:3: warning: &#39;old_func&#39; is deprecated: please use new_func() function
prog.cc:43:3: warning: &#39;old_enum&#39; is deprecated: please use new_enum
prog.cc:45:3: warning: &#39;class_templ&amp;lt;int&amp;gt;&#39; is deprecated: don&#39;t use class_templ&amp;lt;int&amp;gt; specialization
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;機能が非推奨であることを示す属性は、C++11で属性構文が導入されるより前から、各コンパイラが独自の構文でサポートしていた。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コンパイラ&lt;/th&gt;
&lt;th&gt;簡潔な非推奨化&lt;/th&gt;
&lt;th&gt;メッセージ付きの非推奨化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GCCとClang&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__attribute__((deprecated)) int a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__attribute__((deprecated(&#34;message&#34;))) int a;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual C++&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__declspec(deprecated) int a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__declspec(deprecated(&#34;message&#34;)) int a;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++ Builder&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int a [[deprecated]];&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int a [[deprecated(&#34;message&#34;)]];&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらの機能が使われてきた経験から、この属性・アノテーションは、ユーザーにとって役立つものであることが判明していた。そのため、この機能をC++標準の属性構文でサポートすることとなった。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/attributes.html&#34;&gt;C++11 属性構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3394.html&#34; target=&#34;_blank&#34;&gt;N3394 &lt;code&gt;[[deprecated]]&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3760.html&#34; target=&#34;_blank&#34;&gt;N3760 &lt;code&gt;[[deprecated]]&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前空間と列挙子への属性付加を許可 -- 例の出力はなく，警告が発せられるためヘッダを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/attributes_for_namespaces_and_enumerators.html"/>
      <id>0054b9c2e6e4299b2d19739446f71cf8882b1f34:lang/cpp17/attributes_for_namespaces_and_enumerators.md</id>
      <updated>2017-12-05T07:04:51+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;名前空間と列挙子への属性付加を許可&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;名前空間と列挙子への属性付加が可能となった。&lt;/p&gt;
&lt;p&gt;例えば今後使って欲しくない列挙子に対して&lt;code&gt;[[deprecated]]&lt;/code&gt;属性を指定して警告を発することができる。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;名前空間に属性を付加する場合&lt;code&gt;namespace&lt;/code&gt;の直後に属性を記述する。列挙型の場合&lt;code&gt;enum&lt;/code&gt;/&lt;code&gt;enum class&lt;/code&gt;の列挙子の直後に属性を記述する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FOO&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;FOO_A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;FOO_B&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;FOO_C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FOO_A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FOO_B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//警告される&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var_a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//警告される&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;警告例&lt;/h3&gt;
&lt;p&gt;clang++ 5.0.0 にてコンパイルした場合。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;attributes_for_namespaces_and_enumerators.cpp:18:11: warning: &#39;FOO_B&#39; is deprecated [-Wdeprecated-declarations]
  int b = FOO_B;
          ^
attributes_for_namespaces_and_enumerators.cpp:11:11: note: &#39;FOO_B&#39; has been explicitly marked deprecated here
  FOO_B [[deprecated]],
          ^
attributes_for_namespaces_and_enumerators.cpp:20:14: warning: &#39;bar&#39; is deprecated [-Wdeprecated-declarations]
  int d = bar::var_a;
             ^
attributes_for_namespaces_and_enumerators.cpp:5:13: note: &#39;bar&#39; has been explicitly marked deprecated here
namespace [[deprecated]] bar {
            ^
2 warnings generated.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/attributes.html&#34;&gt;C++11 属性構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4196.html&#34; target=&#34;_blank&#34;&gt;N4196 Attributes for namespaces and enumerators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4266.html&#34; target=&#34;_blank&#34;&gt;N4266 Attributes for namespaces and enumerators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>__has_include -- 例の出力はなく，警告が発せられるためヘッダを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/has_include.html"/>
      <id>0054b9c2e6e4299b2d19739446f71cf8882b1f34:lang/cpp17/has_include.md</id>
      <updated>2017-12-05T07:04:51+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;__has_include&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;__has_include&lt;/code&gt;はインクルードするファイルが存在するかどうかを返す述語である。&lt;/p&gt;
&lt;p&gt;処理系によって異なるヘッダファイルをインクルードする場合、従来はコンパイラのみでヘッダファイルの有無を確認する方法がなく、下記例のように外部ツールにより補助する方法を取ることが多かった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外部ツールでヘッダファイルの存在を確認し、ヘッダファイルの有無を表すマクロ (例: &lt;code&gt;#define HAS_STDIO_H  1&lt;/code&gt;など) を生成&lt;/li&gt;
&lt;li&gt;生成されたマクロは固有のコンフィグヘッダ (例: config.hなど) に出力&lt;/li&gt;
&lt;li&gt;プログラマはコンフィグヘッダのマクロに応じて&lt;code&gt;#if .. #include .. #endif&lt;/code&gt;を記述&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++17では標準的な方法でコンパイラがヘッダファイルの有無を確認できるため、ヘッダファイルの有無を確認するために外部ツールやコンフィグヘッダが不要となる。&lt;/p&gt;
&lt;p&gt;ただし外部ツールの機能はヘッダファイルの有無を確認する以外にも、ライブラリのリンク可否、テストプログラムの実行結果取得など多くの機能を持つため、&lt;code&gt;__has_include&lt;/code&gt;により外部ツールやコンフィグヘッダが完全に不要になるわけではない。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;__has_include&lt;/code&gt;に指定されたインクルードファイルが存在する場合は 1 として評価され、インクルードファイルが存在しない場合は 0 として評価される。&lt;/p&gt;
&lt;p&gt;詳細な文法は下記の通り。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;defined-macro-expression:
  defined identifier
  defined ( identifier )

h-preprocessing-token:
  any preprocessing-token other than &amp;gt;

h-pp-tokens:
  h-preprocessing-token
  h-pp-tokens h-preprocessing-token

has-include-expression:
  __has_include ( &amp;lt;h-char-sequence&amp;gt; )
  __has_include ( &#34;q-char-sequence&#34; )
  __has_include ( string-literal )
  __has_include ( &amp;lt; h-pp-tokens &amp;gt; )
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;誤解を恐れず言えば&lt;code&gt;#include&lt;/code&gt;の後に指定できるトークンと、同様のトークンが&lt;code&gt;__has_include&lt;/code&gt;にも指定できる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#if __has_include(&amp;lt;has_include.hpp&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &amp;lt;has_include.hpp&amp;gt; is found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &amp;lt;has_include.hpp&amp;gt; is not found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#if __has_include(&#34;has_include.hpp&#34;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &#34;has_include.hpp&#34; is found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &#34;has_include.hpp&#34; is not found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#if __has_include(&amp;lt;fuga&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &amp;lt;fuga&amp;gt; is found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &amp;lt;fuga&amp;gt; is not found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#if __has_include(&#34;fuga&#34;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &#34;fuga&#34; is found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &#34;fuga&#34; is not found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;警告例&lt;/h3&gt;
&lt;p&gt;カレントディレクトリに has_include.hpp ファイルが存在する状態で、clang++ 5.0.0 にてコンパイルした場合。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;has_include.cpp:5:4: warning: &amp;lt;has_include.hpp&amp;gt; is not found [-W#warnings]
#  warning &amp;lt;has_include.hpp&amp;gt; is not found
   ^
has_include.cpp:9:4: warning: &#34;has_include.hpp&#34; is found [-W#warnings]
#  warning &#34;has_include.hpp&#34; is found
   ^
has_include.cpp:17:4: warning: &amp;lt;fuga&amp;gt; is not found [-W#warnings]
#  warning &amp;lt;fuga&amp;gt; is not found
   ^
has_include.cpp:23:4: warning: &#34;fuga&#34; is not found [-W#warnings]
#  warning &#34;fuga&#34; is not found
   ^
4 warnings generated.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0061r1.html&#34; target=&#34;_blank&#34;&gt;PR0061R1 __has_include for C++17&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間指定に繰り返しをなくす -- 例の出力はなく，警告が発せられるためヘッダを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html"/>
      <id>0054b9c2e6e4299b2d19739446f71cf8882b1f34:lang/cpp17/using_attribute_namespaces.md</id>
      <updated>2017-12-05T07:04:51+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;属性の名前空間指定に繰り返しをなくす&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;複数の属性を指定する際&lt;code&gt;using&lt;/code&gt;により名前空間を指定できる。&lt;/p&gt;
&lt;p&gt;同じ名前空間に属する複数の属性を指定したい場合がある。従来は同じ名前空間を何度も記述しなければならなかったが、&lt;code&gt;using&lt;/code&gt;で名前空間を指定することで一度で記述できるように変更された。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;文法仕様は下記の通り。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;attribute-specifier:
    [ [ attribute-using-prefix opt attribute-list ] ]
    alignment-specifier

attribute-using-prefix:
    using attribute-namespace :
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;属性の先頭部分に&lt;code&gt;using&lt;/code&gt;、名前空間、コロン&lt;code&gt;:&lt;/code&gt;の順に記述し、その後に続けて属性の名前を記述する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;using&lt;/code&gt;で名前空間を指定した場合は、続く属性の名前に名前空間は指定できない。&lt;code&gt;using&lt;/code&gt;で複数の名前空間を指定することもできない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//正しい&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//正しい&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//正しい、上記の [[CC::opt(1), CC::debug]] と同じ意味になる&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//正しい、上記と同じ意味になる&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//間違い、usingと名前空間の指定は混在できない&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;不適格。&lt;/p&gt;
&lt;h3&gt;警告例&lt;/h3&gt;
&lt;p&gt;clang++ 5.0.0 にてコンパイルした場合。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;using_attribute_namespaces.cpp:13:13: error: attribute with scope specifier cannot follow default scope specifier
[[using CC: CC::opt(1)]] void j() {}
        ~~  ^
1 error generated.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/attributes.html&#34;&gt;C++11 属性構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0028r4.html&#34; target=&#34;_blank&#34;&gt;P0028R4 Using attribute namespaces without repetition.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>__has_include -- main 関数追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/has_include.html"/>
      <id>816a0b93e7e83a808a925a76fccd2bb1358e9c24:lang/cpp17/has_include.md</id>
      <updated>2017-12-05T07:18:01+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;__has_include&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;__has_include&lt;/code&gt;はインクルードするファイルが存在するかどうかを返す述語である。&lt;/p&gt;
&lt;p&gt;処理系によって異なるヘッダファイルをインクルードする場合、従来はコンパイラのみでヘッダファイルの有無を確認する方法がなく、下記例のように外部ツールにより補助する方法を取ることが多かった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外部ツールでヘッダファイルの存在を確認し、ヘッダファイルの有無を表すマクロ (例: &lt;code&gt;#define HAS_STDIO_H  1&lt;/code&gt;など) を生成&lt;/li&gt;
&lt;li&gt;生成されたマクロは固有のコンフィグヘッダ (例: config.hなど) に出力&lt;/li&gt;
&lt;li&gt;プログラマはコンフィグヘッダのマクロに応じて&lt;code&gt;#if .. #include .. #endif&lt;/code&gt;を記述&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++17では標準的な方法でコンパイラがヘッダファイルの有無を確認できるため、ヘッダファイルの有無を確認するために外部ツールやコンフィグヘッダが不要となる。&lt;/p&gt;
&lt;p&gt;ただし外部ツールの機能はヘッダファイルの有無を確認する以外にも、ライブラリのリンク可否、テストプログラムの実行結果取得など多くの機能を持つため、&lt;code&gt;__has_include&lt;/code&gt;により外部ツールやコンフィグヘッダが完全に不要になるわけではない。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;__has_include&lt;/code&gt;に指定されたインクルードファイルが存在する場合は 1 として評価され、インクルードファイルが存在しない場合は 0 として評価される。&lt;/p&gt;
&lt;p&gt;詳細な文法は下記の通り。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;defined-macro-expression:
  defined identifier
  defined ( identifier )

h-preprocessing-token:
  any preprocessing-token other than &amp;gt;

h-pp-tokens:
  h-preprocessing-token
  h-pp-tokens h-preprocessing-token

has-include-expression:
  __has_include ( &amp;lt;h-char-sequence&amp;gt; )
  __has_include ( &#34;q-char-sequence&#34; )
  __has_include ( string-literal )
  __has_include ( &amp;lt; h-pp-tokens &amp;gt; )
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;誤解を恐れず言えば&lt;code&gt;#include&lt;/code&gt;の後に指定できるトークンと、同様のトークンが&lt;code&gt;__has_include&lt;/code&gt;にも指定できる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#if __has_include(&amp;lt;has_include.hpp&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &amp;lt;has_include.hpp&amp;gt; is found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &amp;lt;has_include.hpp&amp;gt; is not found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#if __has_include(&#34;has_include.hpp&#34;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &#34;has_include.hpp&#34; is found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &#34;has_include.hpp&#34; is not found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#if __has_include(&amp;lt;fuga&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &amp;lt;fuga&amp;gt; is found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &amp;lt;fuga&amp;gt; is not found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#if __has_include(&#34;fuga&#34;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &#34;fuga&#34; is found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#  warning &#34;fuga&#34; is not found&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;カレントディレクトリに has_include.hpp ファイルが存在する状態で、clang++ 5.0.0 にてコンパイルした場合。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;has_include.cpp:5:4: warning: &amp;lt;has_include.hpp&amp;gt; is not found [-W#warnings]
#  warning &amp;lt;has_include.hpp&amp;gt; is not found
   ^
has_include.cpp:9:4: warning: &#34;has_include.hpp&#34; is found [-W#warnings]
#  warning &#34;has_include.hpp&#34; is found
   ^
has_include.cpp:17:4: warning: &amp;lt;fuga&amp;gt; is not found [-W#warnings]
#  warning &amp;lt;fuga&amp;gt; is not found
   ^
has_include.cpp:23:4: warning: &#34;fuga&#34; is not found [-W#warnings]
#  warning &#34;fuga&#34; is not found
   ^
4 warnings generated.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0061r1.html&#34; target=&#34;_blank&#34;&gt;PR0061R1 __has_include for C++17&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性の名前空間指定に繰り返しをなくす -- main 関数追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html"/>
      <id>816a0b93e7e83a808a925a76fccd2bb1358e9c24:lang/cpp17/using_attribute_namespaces.md</id>
      <updated>2017-12-05T07:18:01+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;属性の名前空間指定に繰り返しをなくす&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;複数の属性を指定する際&lt;code&gt;using&lt;/code&gt;により名前空間を指定できる。&lt;/p&gt;
&lt;p&gt;同じ名前空間に属する複数の属性を指定したい場合がある。従来は同じ名前空間を何度も記述しなければならなかったが、&lt;code&gt;using&lt;/code&gt;で名前空間を指定することで一度で記述できるように変更された。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;文法仕様は下記の通り。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;attribute-specifier:
    [ [ attribute-using-prefix opt attribute-list ] ]
    alignment-specifier

attribute-using-prefix:
    using attribute-namespace :
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;属性の先頭部分に&lt;code&gt;using&lt;/code&gt;、名前空間、コロン&lt;code&gt;:&lt;/code&gt;の順に記述し、その後に続けて属性の名前を記述する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;using&lt;/code&gt;で名前空間を指定した場合は、続く属性の名前に名前空間は指定できない。&lt;code&gt;using&lt;/code&gt;で複数の名前空間を指定することもできない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//正しい&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//正しい&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//正しい、上記の [[CC::opt(1), CC::debug]] と同じ意味になる&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//正しい、上記と同じ意味になる&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//間違い、usingと名前空間の指定は混在できない&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;clang++ 5.0.0 にてコンパイルした場合。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;using_attribute_namespaces.cpp:13:13: error: attribute with scope specifier cannot follow default scope specifier
[[using CC: CC::opt(1)]] void j() {}
        ~~  ^
1 error generated.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/attributes.html&#34;&gt;C++11 属性構文&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0028r4.html&#34; target=&#34;_blank&#34;&gt;P0028R4 Using attribute namespaces without repetition.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assert のメッセージ省略を許可 -- lang/cpp17/extending_static_assert.md の例をコンパイル可能に</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html"/>
      <id>9b42b2ca2384e0fd2cd022b2d26d7806871b095d:lang/cpp17/extending_static_assert.md</id>
      <updated>2017-12-05T05:14:13+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;static_assert のメッセージ省略を許可&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;static_assert&lt;/code&gt; は &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/static_assert.html&#34;&gt;C++11&lt;/a&gt; で導入されたが、第2引数に診断メッセージを指定しなければならなかった。
C++17 ではこれを省略できるようになった。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;定数式&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;文字列リテラル&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// C++11&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;static_assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;定数式&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// C++17 以降&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「『&lt;code&gt;文字列リテラル&lt;/code&gt;が与えられた場合、』診断メッセージは&lt;code&gt;文字列リテラル&lt;/code&gt;を含む」と文面が改められた&lt;br /&gt;
    それ以外の場合の診断メッセージは未規定&lt;/li&gt;
&lt;li&gt;その他の点は &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/static_assert.html&#34;&gt;C++11&lt;/a&gt; と同じ&lt;/li&gt;
&lt;li&gt;機能テストマクロは &lt;code&gt;__cpp_static_assert&lt;/code&gt; (&lt;code&gt;201411&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//&lt;span style=&#34;color:#ff0000&#34;&gt;static_assert&lt;/span&gt;(flag, &#34;flag should be true&#34;); // C++17 までは診断メッセージを省略できない&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;static_assert&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// C++17 以降&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;不適格。&lt;/p&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;clang++ 5.0.0 にてコンパイルした場合、&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;example_static_assert.cpp:5:3: error: static_assert failed
  static_assert(flag); // C++17 以降
  ^             ~~~~
1 error generated.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;assert&lt;/code&gt; は条件式のみを引数に取るのに対し、&lt;code&gt;static_assert&lt;/code&gt; には診断メッセージを提供しなければならなかった。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.boost.org/doc/libs/release/doc/html/boost_staticassert.html&#34; target=&#34;_blank&#34;&gt;Boost.StaticAssert&lt;/a&gt; は以下のような &lt;code&gt;BOOST_STATIC_ASSERT&lt;/code&gt; マクロを提供しており、
&lt;code&gt;static_assert&lt;/code&gt; の診断メッセージを省略できた:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#define BOOST_STATIC_ASSERT(B) static_assert(B, #B)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;標準の &lt;code&gt;static_assert&lt;/code&gt; でも診断メッセージを省略できることが望まれた。&lt;/p&gt;
&lt;h2&gt;検討されたほかの選択肢&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;BOOST_STATIC_ASSERT&lt;/code&gt; のようなマクロで&lt;code&gt;定数式&lt;/code&gt;をテキスト化することには反対意見があり、以下の案が検討された
(『』内は追加された箇所):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;『&lt;code&gt;文字列リテラル&lt;/code&gt;が与えられた場合、』診断メッセージは&lt;code&gt;文字列リテラル&lt;/code&gt;を含む&lt;br /&gt;
    『それ以外の場合、診断メッセージは&lt;code&gt;定数式&lt;/code&gt;のテキストからなる』&lt;/li&gt;
&lt;li&gt;『&lt;code&gt;文字列リテラル&lt;/code&gt;が与えられた場合、』診断メッセージは&lt;code&gt;文字列リテラル&lt;/code&gt;を含む&lt;br /&gt;
    『それ以外の場合、診断メッセージは実装依存』&lt;/li&gt;
&lt;li&gt;『&lt;code&gt;static_assert&lt;/code&gt; は1つ以上の&lt;code&gt;定数式&lt;/code&gt;を取り、診断メッセージはテキストに変換した&lt;code&gt;定数式&lt;/code&gt;を含む』&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/static_assert.html&#34;&gt;C++11 &lt;code&gt;static_assert&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3846.pdf&#34; target=&#34;_blank&#34;&gt;N3846 Extending &lt;code&gt;static_assert&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3928.pdf&#34; target=&#34;_blank&#34;&gt;N3928 Extending &lt;code&gt;static_assert&lt;/code&gt;, v2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>E Kawashima</name>
        <email>e-kwsm@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-05-05T14:38:43.519182</updated>
  <id>98abaa8f-8718-4765-99ee-e0e1f34a9d30</id>

  
    <entry>
      <title>directory_iterator -- (recursive_)directory_iterator : ディレクトリも列挙されることを明記</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/directory_iterator.html"/>
      <id>d12d62181564bfc35f400bed89cf4b787d112c44:reference/filesystem/directory_iterator.md</id>
      <updated>2024-05-05T10:54:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/directory_iterator.md b/reference/filesystem/directory_iterator.md
index 844f2da3b..94b9c2051 100644
--- a/reference/filesystem/directory_iterator.md
+++ b/reference/filesystem/directory_iterator.md
@@ -74,7 +74,7 @@ int main()
   fs::create_directory(&amp;#34;dir_a/dir_b&amp;#34;);
   std::ofstream{&amp;#34;dir_a/dir_b/b.txt&amp;#34;};
 
-  // dir_aディレクトリ直下に含まれる全ファイルを出力
+  // dir_aディレクトリ直下に含まれる全ファイル・ディレクトリを出力
   for (const fs::directory_entry&amp;amp; x : fs::directory_iterator(&amp;#34;dir_a&amp;#34;)) {
     std::cout &amp;lt;&amp;lt; x.path() &amp;lt;&amp;lt; std::endl;
   }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>recursive_directory_iterator -- (recursive_)directory_iterator : ディレクトリも列挙されることを明記</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/recursive_directory_iterator.html"/>
      <id>d12d62181564bfc35f400bed89cf4b787d112c44:reference/filesystem/recursive_directory_iterator.md</id>
      <updated>2024-05-05T10:54:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/recursive_directory_iterator.md b/reference/filesystem/recursive_directory_iterator.md
index 65e497b1a..5aab4c90d 100644
--- a/reference/filesystem/recursive_directory_iterator.md
+++ b/reference/filesystem/recursive_directory_iterator.md
@@ -92,7 +92,7 @@ int main()
   fs::create_directory(&amp;#34;dir_a/dir_b&amp;#34;);
   std::ofstream{&amp;#34;dir_a/dir_b/b.txt&amp;#34;};
 
-  // dir_aディレクトリに含まれる全ファイルを再帰的に出力
+  // dir_aディレクトリに含まれる全ファイル・ディレクトリを再帰的に出力
   for (const fs::directory_entry&amp;amp; x : fs::recursive_directory_iterator(&amp;#34;dir_a&amp;#34;)) {
     std::cout &amp;lt;&amp;lt; x.path() &amp;lt;&amp;lt; std::endl;
   }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- view_interface::empty : LWG Issue 3715対応</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/empty.html"/>
      <id>16ab0b8514c8390ce0ee6dd92c0bc2032ad371f2:reference/ranges/view_interface/empty.md</id>
      <updated>2024-05-04T20:46:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/empty.md b/reference/ranges/view_interface/empty.md
index f82c4d93f..268537a79 100644
--- a/reference/ranges/view_interface/empty.md
+++ b/reference/ranges/view_interface/empty.md
@@ -7,12 +7,13 @@
 
 ```cpp
 constexpr bool empty()
-  requires forward_range&amp;lt;D&amp;gt;;       // (1)
+  requires sized_range&amp;lt;D&amp;gt; || forward_range&amp;lt;D&amp;gt;;       // (1)
 
 constexpr bool empty() const
-  requires forward_range&amp;lt;const D&amp;gt;; // (2)
+  requires sized_range&amp;lt;const D&amp;gt; || forward_range&amp;lt;const D&amp;gt;; // (2)
 ```
 * forward_range[link ../forward_range.md]
+* forward_range[link ../sized_range.md]
 
 ## 概要
 Rangeが空かどうかを判定する。
@@ -20,8 +21,8 @@ Rangeが空かどうかを判定する。
 ## テンプレートパラメータ制約
 [`view_interface`](../view_interface.md)`&amp;lt;D&amp;gt;`に対して、
 
-- (1): `D`が[`forward_range`](../forward_range.md)であること。
-- (2): `const D`が[`forward_range`](../forward_range.md)であること。
+- (1): `D`が[`sized_range`](../sized_range.md)もしくは[`forward_range`](../forward_range.md)であること。
+- (2): `const D`が[`sized_range`](../sized_range.md)もしくは[`forward_range`](../forward_range.md)であること。
 
 ## 戻り値
 (1)、(2)共に、以下と等価：
@@ -49,3 +50,4 @@ ranges::begin(derived()) == ranges::end(derived())
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [LWG Issue 3715. `view_interface::empty` is overconstrained](https://cplusplus.github.io/LWG/issue3715)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- コード例の一行の長さを短く</title>
      <link href="https://cpprefjp.github.io/reference/future/promise/op_destructor.html"/>
      <id>b9d4a50c1206393ba88cd6366d39fb3aace4d8b9:reference/future/promise/op_destructor.md</id>
      <updated>2024-05-02T01:01:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/promise/op_destructor.md b/reference/future/promise/op_destructor.md
index a922bd7d3..a4b55f036 100644
--- a/reference/future/promise/op_destructor.md
+++ b/reference/future/promise/op_destructor.md
@@ -39,7 +39,8 @@ int main()
   std::thread t(calc, std::move(p));
 
   try {
-    std::cout &amp;lt;&amp;lt; f.get() &amp;lt;&amp;lt; std::endl; // 上で書き込まれた例外が送出される
+    // 上で書き込まれた例外が送出される
+    std::cout &amp;lt;&amp;lt; f.get() &amp;lt;&amp;lt; std::endl;
   }
   catch (std::future_error&amp;amp; e) {
     std::cout &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- promiseデストラクタが例外を格納するコード例を作成 #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/promise/op_destructor.html"/>
      <id>8e854b8d24bb6774f4e3622c881edc0addde5614:reference/future/promise/op_destructor.md</id>
      <updated>2024-05-01T00:29:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/promise/op_destructor.md b/reference/future/promise/op_destructor.md
index 6203910d3..a922bd7d3 100644
--- a/reference/future/promise/op_destructor.md
+++ b/reference/future/promise/op_destructor.md
@@ -18,11 +18,44 @@
 2. 共有状態を解放する。
 
 ## 例
-```cpp
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;future&amp;gt;
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+void calc(std::promise&amp;lt;int&amp;gt; p)
+{
+  // 通常行う p.set_value() をしなかったとする
+
+  // ここで promise のデストラクタが例外オブジェクトを書き込む
+}
+
+int main()
+{
+  std::promise&amp;lt;int&amp;gt; p;
+  std::future&amp;lt;int&amp;gt; f = p.get_future();
+
+  std::thread t(calc, std::move(p));
+
+  try {
+    std::cout &amp;lt;&amp;lt; f.get() &amp;lt;&amp;lt; std::endl; // 上で書き込まれた例外が送出される
+  }
+  catch (std::future_error&amp;amp; e) {
+    std::cout &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
+  }
+
+  t.join();
+}
 ```
+* std::future[link /reference/future/future.md]
+* p.get_future()[link get_future.md]
+* std::move[link /reference/utility/move.md]
+* f.get()[link /reference/future/future/get.md]
 
-### 出力
+### 出力例
 ```
+std::future_error: Broken promise
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- 共有状態を放棄するとき例外を格納する動作を追記（規格に明記された3メソッド） #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/packaged_task/op_destructor.html"/>
      <id>eddd59506ba4c79f2d70a711cf8ba43c26c847a2:reference/future/packaged_task/op_destructor.md</id>
      <updated>2024-04-30T23:24:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/packaged_task/op_destructor.md b/reference/future/packaged_task/op_destructor.md
index 8efda1a00..a2bdd4ee8 100644
--- a/reference/future/packaged_task/op_destructor.md
+++ b/reference/future/packaged_task/op_destructor.md
@@ -14,8 +14,8 @@
 
 
 ## 効果
-共有状態を放棄する
-
+1. まず共有状態が準備完了状態([`future_status::ready`](../future_status.md))でなければ、error conditionとして[`broken_promise`](../future_errc.md)を持つ[`future_error`](../future_error.md)例外オブジェクトを格納したのち、準備完了状態にする。
+2. 共有状態を解放する。
 
 ## 例
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 共有状態を放棄するとき例外を格納する動作を追記（規格に明記された3メソッド） #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/promise/op_assign.html"/>
      <id>eddd59506ba4c79f2d70a711cf8ba43c26c847a2:reference/future/promise/op_assign.md</id>
      <updated>2024-04-30T23:24:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/promise/op_assign.md b/reference/future/promise/op_assign.md
index 7d81f22b8..fc5d42a35 100644
--- a/reference/future/promise/op_assign.md
+++ b/reference/future/promise/op_assign.md
@@ -16,8 +16,10 @@ promise&amp;amp; operator=(const promise&amp;amp; rhs) = delete; // (2)
 
 
 ## 効果
-- (1) : 現在の共有状態を放棄し、`promise(std::`[`move`](/reference/utility/move.md)`(rhs)).swap(*this)`する。
-
+- (1) :
+    1. まず現在の共有状態が準備完了状態([`future_status::ready`](../future_status.md))でなければ、error conditionとして[`broken_promise`](../future_errc.md)を持つ[`future_error`](../future_error.md)例外オブジェクトを格納したのち、準備完了状態にする。
+    2. 現在の共有状態を解放する。
+    3. `promise(std::`[`move`](/reference/utility/move.md)`(rhs)).swap(*this)`する。
 
 ## 戻り値
 - (1) : `*this`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- 共有状態を放棄するとき例外を格納する動作を追記（規格に明記された3メソッド） #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/promise/op_destructor.html"/>
      <id>eddd59506ba4c79f2d70a711cf8ba43c26c847a2:reference/future/promise/op_destructor.md</id>
      <updated>2024-04-30T23:24:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/promise/op_destructor.md b/reference/future/promise/op_destructor.md
index 0d07b50f5..6203910d3 100644
--- a/reference/future/promise/op_destructor.md
+++ b/reference/future/promise/op_destructor.md
@@ -14,8 +14,8 @@
 
 
 ## 効果
-- 共有状態を持っていればそれを解放する。
-- ただし、持っている共有状態が準備完了状態([`future_status::ready`](../future_status.md))でなければ、error conditionとして[`broken_promise`](../future_errc.md)を持つ[`future_error`](../future_error.md)例外オブジェクトを格納して、準備完了状態にしたのち、それを解放する。
+1. まず共有状態が準備完了状態([`future_status::ready`](../future_status.md))でなければ、error conditionとして[`broken_promise`](../future_errc.md)を持つ[`future_error`](../future_error.md)例外オブジェクトを格納したのち、準備完了状態にする。
+2. 共有状態を解放する。
 
 ## 例
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
</feed>
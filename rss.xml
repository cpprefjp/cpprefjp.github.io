<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-04-19T14:35:49.117696</updated>
  <id>a35f0208-0077-4642-a54c-fe3c13176ecf</id>

  
    <entry>
      <title>execution -- execution: schedule_result_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>a4fbd160cb9e78a14ada6491c54dd1d9c55dfed6:reference/execution/execution.md</id>
      <updated>2025-04-19T23:32:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index f4b35abe5..9487a1788 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -104,7 +104,7 @@ namespace std::execution {
 | [`execution::just_stopped`](execution/just_stopped.md.nolink) | 停止を送信するSender (customization point object) | C++26 |
 | [`execution::read_env`](execution/read_env.md.nolink) | Receiver環境から構築されるSender (customization point object) | C++26 |
 | [`execution::schedule`](execution/schedule.md) | Scheduler上で実行されるSender (customization point object) | C++26 |
-| [`execution::schedule_result_t`](execution/schedule_result_t.md.nolink) | `schedule`結果型を取得 (alias template) | C++26 |
+| [`execution::schedule_result_t`](execution/schedule_result_t.md) | [`schedule`](execution/schedule.md)結果型を取得 (alias template) | C++26 |
 
 ### Senderアダプタ
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule -- execution: schedule_result_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule.html"/>
      <id>a4fbd160cb9e78a14ada6491c54dd1d9c55dfed6:reference/execution/execution/schedule.md</id>
      <updated>2025-04-19T23:32:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule.md b/reference/execution/execution/schedule.md
index f7571c0e2..8bd90c80c 100644
--- a/reference/execution/execution/schedule.md
+++ b/reference/execution/execution/schedule.md
@@ -67,6 +67,8 @@ int main()
 * get_scheduler()[link run_loop/get_scheduler.md.nolink]
 * run()[link run_loop/run.md.nolink]
 * finish()[link run_loop/finish.md.nolink]
+* std::move[link /reference/utility/move.md]
+* std::jthread[link /reference/thread/jthread.md]
 * std::this_thread::get_id()[link /reference/thread/this_thread/get_id.md]
 
 ### 出力例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule_result_t -- execution: schedule_result_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule_result_t.html"/>
      <id>a4fbd160cb9e78a14ada6491c54dd1d9c55dfed6:reference/execution/execution/schedule_result_t.md</id>
      <updated>2025-04-19T23:32:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule_result_t.md b/reference/execution/execution/schedule_result_t.md
new file mode 100644
index 000000000..663de9f6e
--- /dev/null
+++ b/reference/execution/execution/schedule_result_t.md
@@ -0,0 +1,36 @@
+# schedule_result_t
+* execution[meta header]
+* std::execution[meta namespace]
+* type-alias[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;scheduler Sndr&amp;gt;
+  using schedule_result_t = decltype(schedule(declval&amp;lt;Sndr&amp;gt;()));
+}
+```
+* scheduler[link scheduler.md]
+* schedule[link schedule.md]
+
+## 概要
+[Scheduler型](scheduler.md)`Sndr`の[`schedule`](schedule.md)結果型を取得する。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::schedule`](schedule.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution --  execution: schedule (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>08365debe249bdbd6a7347ad462ea1c22e7cc2a8:reference/execution/execution.md</id>
      <updated>2025-04-19T23:04:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index cb5b97bb8..f4b35abe5 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -103,7 +103,7 @@ namespace std::execution {
 | [`execution::just_error`](execution/just_error.md.nolink) | エラーを送信するSender (customization point object) | C++26 |
 | [`execution::just_stopped`](execution/just_stopped.md.nolink) | 停止を送信するSender (customization point object) | C++26 |
 | [`execution::read_env`](execution/read_env.md.nolink) | Receiver環境から構築されるSender (customization point object) | C++26 |
-| [`execution::schedule`](execution/schedule.md.nolink) | Scheduler上で実行されるSender (customization point object) | C++26 |
+| [`execution::schedule`](execution/schedule.md) | Scheduler上で実行されるSender (customization point object) | C++26 |
 | [`execution::schedule_result_t`](execution/schedule_result_t.md.nolink) | `schedule`結果型を取得 (alias template) | C++26 |
 
 ### Senderアダプタ
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule --  execution: schedule (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule.html"/>
      <id>08365debe249bdbd6a7347ad462ea1c22e7cc2a8:reference/execution/execution/schedule.md</id>
      <updated>2025-04-19T23:04:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule.md b/reference/execution/execution/schedule.md
new file mode 100644
index 000000000..f7571c0e2
--- /dev/null
+++ b/reference/execution/execution/schedule.md
@@ -0,0 +1,97 @@
+# schedule
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct schedule_t { unspecified };
+  inline constexpr schedule_t schedule{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`schedule`は、[Scheduler](scheduler.md)から[スケジュールSender](sender.md)を取得するSenderファクトリである。
+
+スケジュールSenderより生成される[非同期操作](operation_state.md)を開始すると、Schedulerに関連付けられた実行リソース上で空の[値完了関数](set_value.md)を呼び出す。
+
+
+## 効果
+呼び出し式`schedule(sch)`は式`sch.schedule()`と等価であり、式の型は[`sender`](sender.md)を満たすこと。
+
+式[`get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`get_env`](get_env.md)`(sch.schedule())) == sch`が不適格もしくは`false`となる場合、呼び出し式`schedule(sch)`の動作は未定義となる。
+
+
+## カスタマイゼーションポイント
+[Scheduler](scheduler.md)`sch`に対して、式`sch.schedule()`が呼び出される。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  ex::run_loop loop;
+  std::jthread worker{[&amp;amp;]{
+    std::println(&amp;#34;start worker#{}&amp;#34;, std::this_thread::get_id());
+    loop.run();
+  }};
+
+  ex::scheduler auto sch = loop.get_scheduler();
+  ex::sender auto sndr =
+    ex::schedule(sch)
+    | ex::then([]{
+      std::println(&amp;#34;on worker#{}&amp;#34;, std::this_thread::get_id());
+      return 42;
+    });
+
+  std::println(&amp;#34;main#{}&amp;#34;, std::this_thread::get_id());
+
+  auto [val] = std::this_thread::sync_wait(std::move(sndr)).value();
+  std::println(&amp;#34;val={}&amp;#34;, val);
+
+  loop.finish();
+}
+```
+* ex::schedule[color ff0000]
+* ex::scheduler[link scheduler.md]
+* ex::sender[link sender.md]
+* ex::then[link then.md.nolink]
+* ex::run_loop[link run_loop.md.nolink]
+* get_scheduler()[link run_loop/get_scheduler.md.nolink]
+* run()[link run_loop/run.md.nolink]
+* finish()[link run_loop/finish.md.nolink]
+* std::this_thread::get_id()[link /reference/thread/this_thread/get_id.md]
+
+### 出力例
+```
+main#134276695947072
+start worker#134276691527232
+on worker#134276691527232
+val=42
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::scheduler`](scheduler.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler --  execution: schedule (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>08365debe249bdbd6a7347ad462ea1c22e7cc2a8:reference/execution/execution/scheduler.md</id>
      <updated>2025-04-19T23:04:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 27ef5307c..427727a05 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -25,7 +25,7 @@ namespace std::execution {
 * derived_from[link /reference/concepts/derived_from.md]
 * sender[link sender.md]
 * queryable[link ../queryable.md]
-* schedule[link schedule.md.nolink]
+* schedule[link schedule.md]
 * get_completion_scheduler[link get_completion_scheduler.md.nolink]
 * set_value_t[link set_value.md]
 * get_env[link get_env.md]
@@ -40,7 +40,7 @@ namespace std::execution {
 - `scheduler_t`をメンバ型`Sch::scheduler_concept`として定義する
 - [クエリ可能オブジェクト](../queryable.md)である
 - `Sch`型の値`sch`に対して下記を満たすこと
-    - [`execution::schedule`](schedule.md.nolink)`(sch)`が[Sender](sender.md)を返す
+    - [`execution::schedule`](schedule.md)`(sch)`が[Sender](sender.md)を返す
     - 上記Senderの[値完了関数](set_value.md)の[完了Scheduler](get_completion_scheduler.md.nolink)が`Sch`に等しいこと
 - コピー可能かつ同値比較可能
 
@@ -69,15 +69,15 @@ namespace std::execution {
 型`Sch`を`scheduler`の型、型`Env`を[`sender_in`](sender_in.md)`&amp;lt;schedule_result_t&amp;lt;Sch&amp;gt;, Env&amp;gt;`を満たす実行環境の型としたとき、`sender-in-of&amp;lt;schedule_result_t&amp;lt;Sch&amp;gt;, Env&amp;gt;`のモデルとなること。
 
 [`copyable`](/reference/concepts/copyable.md)`&amp;lt;remove_cvref_t&amp;lt;Sch&amp;gt;&amp;gt;`および[`equality_comparable`](/reference/concepts/equality_comparable.md)`&amp;lt;remove_cvref_t&amp;lt;Sch&amp;gt;&amp;gt;`により要求される操作は、例外で終了してはならない。
-これらの操作やScheduler型の[`schedule`](schedule.md.nolink)関数は、異なるスレッドから同時に操作を呼び出す可能性がある場合でも、データ競合を引き起こしてはならない。
+これらの操作やScheduler型の[`schedule`](schedule.md)関数は、異なるスレッドから同時に操作を呼び出す可能性がある場合でも、データ競合を引き起こしてはならない。
 
 あるScheduler型`Sch`の2つの値`sch1`と`sch2`に対して、`sch1`と`sch2`が同じ実行リソースを共有する場合に限って、`sch1 == sch2`は`true`となる。
 
-あるScheduler`sch`に対して、式[`get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`get_env`](get_env.md)`(`[`schedule`](schedule.md.nolink)`(sch)))`が`sch`と等しいこと。
+あるScheduler`sch`に対して、式[`get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`get_env`](get_env.md)`(`[`schedule`](schedule.md)`(sch)))`が`sch`と等しいこと。
 
-あるScheduler`sch`に対して式[`get_domain`](get_domain.md.nolink)`(sch)`が適格であるとき、式`get_domain(`[`get_env`](get_env.md)`(schedule(sch)))`も適格であり、かつ同じ型を持つ。
+あるScheduler`sch`に対して式[`get_domain`](get_domain.md.nolink)`(sch)`が適格であるとき、式`get_domain(`[`get_env`](get_env.md)`(`[`schedule`](schedule.md)`(sch)))`も適格であり、かつ同じ型を持つ。
 
-Scheduler型のデストラクタは、`schedule`が返すSenderオブジェクトに接続されたReceiverの完了を待機してブロックしてはならない。
+Scheduler型のデストラクタは、[`schedule`](schedule.md)が返すSenderオブジェクトに接続されたReceiverの完了を待機してブロックしてはならない。
 
 
 ## 例
@@ -112,7 +112,7 @@ int main()
 
 
 ## 関連項目
-- [`execution::schedule`](schedule.md.nolink)
+- [`execution::schedule`](schedule.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution/scheduler: fix inner link</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>7a43329c3d646a98daf79ab7f29c9df6d7488bc1:reference/execution/execution/scheduler.md</id>
      <updated>2025-04-19T21:44:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 0e2fd7e19..27ef5307c 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -75,7 +75,7 @@ namespace std::execution {
 
 あるScheduler`sch`に対して、式[`get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`get_env`](get_env.md)`(`[`schedule`](schedule.md.nolink)`(sch)))`が`sch`と等しいこと。
 
-あるScheduler`sch`に対して式[`get_domain`](get_domain.md)`(sch)`が適格であるとき、式`get_domain(`[`get_env`](get_env.md)`(schedule(sch)))`も適格であり、かつ同じ型を持つ。
+あるScheduler`sch`に対して式[`get_domain`](get_domain.md.nolink)`(sch)`が適格であるとき、式`get_domain(`[`get_env`](get_env.md)`(schedule(sch)))`も適格であり、かつ同じ型を持つ。
 
 Scheduler型のデストラクタは、`schedule`が返すSenderオブジェクトに接続されたReceiverの完了を待機してブロックしてはならない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>receiver -- execution/scheduler: refinement (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/receiver.html"/>
      <id>ac9fa1d4237d0b4afacde0c24b5b884195b79dcf:reference/execution/execution/receiver.md</id>
      <updated>2025-04-19T21:41:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/receiver.md b/reference/execution/execution/receiver.md
index 8cd67b2e6..05a15160f 100644
--- a/reference/execution/execution/receiver.md
+++ b/reference/execution/execution/receiver.md
@@ -27,7 +27,11 @@ namespace std::execution {
 ## 概要
 `receiver`は、型`Rcvr`がReceiver型の要件を満たすことを表すコンセプトである。
 
-`receiver_t`をメンバ型`Rcvr::receiver_concept`として定義するクラス型はReceiverとみなせる。
+下記をみたすクラス型はReceiverとみなせる。
+
+- `receiver_t`をメンバ型`Rcvr::receiver_concept`として定義する
+- [`get_env`](get_env.md)で[環境](../queryable.md)を取得できる
+- ムーブ可能
 
 
 ## モデル
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution/scheduler: refinement (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>ac9fa1d4237d0b4afacde0c24b5b884195b79dcf:reference/execution/execution/scheduler.md</id>
      <updated>2025-04-19T21:41:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 2ffa3efc0..0e2fd7e19 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -25,6 +25,7 @@ namespace std::execution {
 * derived_from[link /reference/concepts/derived_from.md]
 * sender[link sender.md]
 * queryable[link ../queryable.md]
+* schedule[link schedule.md.nolink]
 * get_completion_scheduler[link get_completion_scheduler.md.nolink]
 * set_value_t[link set_value.md]
 * get_env[link get_env.md]
@@ -36,11 +37,47 @@ namespace std::execution {
 
 下記をみたすクラス型はSchedulerとみなせる。
 
-- `scheduler_t`をメンバ型`Sch::scheduler_concept`として定義するクラス
-- [クエリ可能オブジェクト](../queryable.md)であること
-- `Sch`型の値`sch`に対して下記が有効な式であること
-    - [`execution::schedule`](schedule.md.nolink)`(sch)`が[Sender](sender.md)を返すこと
-    - [`execution::get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`execution::get_env`](get_env.md)`(`[`execution::schedule`](schedule.md.nolink)`(sch)))`の結果が`Sch`型に等しいこと
+- `scheduler_t`をメンバ型`Sch::scheduler_concept`として定義する
+- [クエリ可能オブジェクト](../queryable.md)である
+- `Sch`型の値`sch`に対して下記を満たすこと
+    - [`execution::schedule`](schedule.md.nolink)`(sch)`が[Sender](sender.md)を返す
+    - 上記Senderの[値完了関数](set_value.md)の[完了Scheduler](get_completion_scheduler.md.nolink)が`Sch`に等しいこと
+- コピー可能かつ同値比較可能
+
+
+## モデル
+説明専用のエイリアステンプレート`value-signature`, コンセプト`sender-in-of`を下記の通り定義する。
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class... As&amp;gt;
+  using value-signature = set_value_t(As...);
+
+  template&amp;lt;class Sndr, class Env, class... Values&amp;gt;
+  concept sender-in-of =
+    sender_in&amp;lt;Sndr, Env&amp;gt; &amp;amp;&amp;amp;
+    MATCHING-SIG(
+      set_value_t(Values...),
+      value_types_of_t&amp;lt;Sndr, Env, value-signature, type_identity_t&amp;gt;);
+}
+```
+* set_value_t[link set_value.md]
+* sender_in[link sender_in.md]
+* value_types_of_t[link value_types_of_t.md.nolink]
+* type_identity_t[link /reference/type_traits/true_type.md]
+
+型`Sch`を`scheduler`の型、型`Env`を[`sender_in`](sender_in.md)`&amp;lt;schedule_result_t&amp;lt;Sch&amp;gt;, Env&amp;gt;`を満たす実行環境の型としたとき、`sender-in-of&amp;lt;schedule_result_t&amp;lt;Sch&amp;gt;, Env&amp;gt;`のモデルとなること。
+
+[`copyable`](/reference/concepts/copyable.md)`&amp;lt;remove_cvref_t&amp;lt;Sch&amp;gt;&amp;gt;`および[`equality_comparable`](/reference/concepts/equality_comparable.md)`&amp;lt;remove_cvref_t&amp;lt;Sch&amp;gt;&amp;gt;`により要求される操作は、例外で終了してはならない。
+これらの操作やScheduler型の[`schedule`](schedule.md.nolink)関数は、異なるスレッドから同時に操作を呼び出す可能性がある場合でも、データ競合を引き起こしてはならない。
+
+あるScheduler型`Sch`の2つの値`sch1`と`sch2`に対して、`sch1`と`sch2`が同じ実行リソースを共有する場合に限って、`sch1 == sch2`は`true`となる。
+
+あるScheduler`sch`に対して、式[`get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`get_env`](get_env.md)`(`[`schedule`](schedule.md.nolink)`(sch)))`が`sch`と等しいこと。
+
+あるScheduler`sch`に対して式[`get_domain`](get_domain.md)`(sch)`が適格であるとき、式`get_domain(`[`get_env`](get_env.md)`(schedule(sch)))`も適格であり、かつ同じ型を持つ。
+
+Scheduler型のデストラクタは、`schedule`が返すSenderオブジェクトに接続されたReceiverの完了を待機してブロックしてはならない。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender -- execution/scheduler: refinement (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender.html"/>
      <id>ac9fa1d4237d0b4afacde0c24b5b884195b79dcf:reference/execution/execution/sender.md</id>
      <updated>2025-04-19T21:41:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender.md b/reference/execution/execution/sender.md
index 4a6f91360..a7aa146f5 100644
--- a/reference/execution/execution/sender.md
+++ b/reference/execution/execution/sender.md
@@ -16,10 +16,13 @@ namespace std::execution {
 ## 概要
 `sender`は、型`Sndr`がSender型の要件を満たすことを表すコンセプトである。
 
-次のいずれかのクラス型はSenderとみなせる。
+下記をみたすクラス型はSenderとみなせる。
 
-- `sender_t`をメンバ型`Sndr::sender_concept`として定義するクラス型
-- [コルーチンのAwaitable型](/lang/cpp20/coroutines.md)クラス型
+- 下記いずれかを満たす
+    - `sender_t`をメンバ型`Sndr::sender_concept`として定義する
+    - [コルーチンのAwaitable型](/lang/cpp20/coroutines.md)
+- [`get_env`](get_env.md)で[属性](../queryable.md)を取得できる
+- ムーブ可能
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>start -- execution/scheduler: refinement (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/start.html"/>
      <id>ac9fa1d4237d0b4afacde0c24b5b884195b79dcf:reference/execution/execution/start.md</id>
      <updated>2025-04-19T21:41:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/start.md b/reference/execution/execution/start.md
index 9c6e4c668..90fc7ed10 100644
--- a/reference/execution/execution/start.md
+++ b/reference/execution/execution/start.md
@@ -12,14 +12,14 @@ namespace std::execution {
 ```
 
 ## 概要
-`start`は、[Operation State](operation_state.md)を開始するカスタマイゼーションポイントオブジェクトである。
+`start`は、[Operation State](operation_state.md)関連付けられた非同期操作(asynchronous operation)を開始するカスタマイゼーションポイントオブジェクトである。
 
 
 ## 効果
 式`start(op)`は、`op`が右辺値の場合は不適格となる。
 そうでなければ、`op.start()`と等価。
 
-`op.start()`が[Operation State](operation_state.md)に関連付けさられた非同期操作を開始しない場合、式`start(op)`の動作は未定義となる。
+`op.start()`が[Operation State](operation_state.md)に関連付けられた非同期操作を開始しない場合、式`start(op)`の動作は未定義となる。
 
 
 ## カスタマイゼーションポイント
@@ -27,6 +27,10 @@ namespace std::execution {
 このとき`noexcept(op.start()) == true`であること。
 
 
+## 備考
+`start`は[Sender](sender.md)内部実装から呼び出される想定であり、実行制御ライブラリ利用者が直接利用する必要はない。
+
+
 ## 例
 ```cpp
 #include &amp;lt;print&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice_after -- Merge pull request #1439 from Gumichocopengin8/fix/unnecessary-move-in-forwared_list-splice</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/splice_after.html"/>
      <id>cf9270b138e48e98ba492cd99978e911d6d096be:reference/forward_list/forward_list/splice_after.md</id>
      <updated>2025-04-19T10:57:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/splice_after.md b/reference/forward_list/forward_list/splice_after.md
index d5404cf6e..ecb33dfab 100644
--- a/reference/forward_list/forward_list/splice_after.md
+++ b/reference/forward_list/forward_list/splice_after.md
@@ -67,7 +67,6 @@ void splice_after(const_iterator position, forward_list&amp;amp;&amp;amp; x,
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;forward_list&amp;gt;
-#include &amp;lt;utility&amp;gt;
 #include &amp;lt;iterator&amp;gt;
 
 template &amp;lt;class T&amp;gt;
@@ -84,7 +83,7 @@ int main()
     std::forward_list&amp;lt;int&amp;gt; xs = {1, 5, 6};
     std::forward_list&amp;lt;int&amp;gt; ys = {2, 3, 4};
 
-    xs.splice_after(xs.begin(), std::move(ys));
+    xs.splice_after(xs.begin(), ys);
 
     print(xs);
   }
@@ -93,7 +92,7 @@ int main()
     std::forward_list&amp;lt;int&amp;gt; xs = {1, 5, 6};
     std::forward_list&amp;lt;int&amp;gt; ys = {2, 3, 4};
 
-    xs.splice_after(xs.begin(), std::move(ys), ys.begin());
+    xs.splice_after(xs.begin(), ys, ys.begin());
 
     print(xs);
   }
@@ -102,7 +101,7 @@ int main()
     std::forward_list&amp;lt;int&amp;gt; xs = {1, 5, 6};
     std::forward_list&amp;lt;int&amp;gt; ys = {2, 3, 4};
 
-    xs.splice_after(xs.begin(), std::move(ys), ys.before_begin(), std::next(ys.begin(), 2));
+    xs.splice_after(xs.begin(), ys, ys.before_begin(), std::next(ys.begin(), 2));
 
     print(xs);
   }
@@ -110,7 +109,6 @@ int main()
 ```
 * splice_after[color ff0000]
 * begin()[link begin.md]
-* std::move[link /reference/utility/move.md]
 * std::next[link /reference/iterator/next.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
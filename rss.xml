<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-04-17T08:20:05.590168</updated>
  <id>6608839f-d483-44bf-a98d-f38333c6a9e6</id>

  
    <entry>
      <title>map -- (multi)map, (multi)set : s/const pointer/const_pointer/</title>
      <link href="https://cpprefjp.github.io/reference/map/map.html"/>
      <id>15e87dfd566db42845f47158e941032b9e0a2de0:reference/map/map.md</id>
      <updated>2023-04-17T17:15:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map.md b/reference/map/map.md
index a3fc5f03c..3ced8970a 100644
--- a/reference/map/map.md
+++ b/reference/map/map.md
@@ -140,7 +140,7 @@ namespace std {
 | `size_type`                             | 要素数を表す符号なし整数型。`difference_type` で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は [`size_t`](/reference/cstddef/size_t.md))                                                                                                                                                                                         |                |
 | `difference_type`                       | 同一のコンテナを指す `iterator` の差を表す符号付き整数型(通常は [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md)) &amp;lt;br/&amp;gt;`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;iterator&amp;gt;::difference_type`、および、`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;const_iterator&amp;gt;::difference_type` と同じ。 |                |
 | `pointer`                               | 要素 `value_type`へのポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::pointer`。                                                                                                                                                 |                |
-| `const pointer`                         | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。                                                                                                                              |                |
+| `const_pointer`                         | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。                                                                                                                              |                |
 | `reverse_iterator`                      | 逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;`。                                                                                                                                                                                                                                     |                |
 | `const_reverse_iterator`                | 読み取り専用逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;`。                                                                                                                                                                                                                   |                |
 | `node_type`                             | [`node_handle`](/reference/node_handle/node_handle.md)クラステンプレートの特殊化。                                                                                                                                                                                                                   | C++17          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multimap -- (multi)map, (multi)set : s/const pointer/const_pointer/</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap.html"/>
      <id>15e87dfd566db42845f47158e941032b9e0a2de0:reference/map/multimap.md</id>
      <updated>2023-04-17T17:15:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap.md b/reference/map/multimap.md
index b5381dce8..8cf3d751d 100644
--- a/reference/map/multimap.md
+++ b/reference/map/multimap.md
@@ -135,7 +135,7 @@ namespace std {
 | `size_type`       | 要素数を表す符号なし整数型。`difference_type` で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は [`size_t`](/reference/cstddef/size_t.md)) | |
 | `difference_type` | 同一のコンテナを指す `iterator` の差を表す符号付き整数型(通常は [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md)) &amp;lt;br/&amp;gt;`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;iterator&amp;gt;::difference_type`、および、`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;const_iterator&amp;gt;::difference_type` と同じ。 | |
 | `pointer`         | 要素 `value_type`へのポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::pointer`。 | |
-| `const pointer`         | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
+| `const_pointer`         | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
 | `reverse_iterator` | 逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;`。 | |
 | `const_reverse_iterator` | 読み取り専用逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;`。 | |
 | `node_type`       | [`node_handle`](/reference/node_handle/node_handle.md)クラステンプレートの特殊化。  | C++17          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multiset -- (multi)map, (multi)set : s/const pointer/const_pointer/</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset.html"/>
      <id>15e87dfd566db42845f47158e941032b9e0a2de0:reference/set/multiset.md</id>
      <updated>2023-04-17T17:15:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset.md b/reference/set/multiset.md
index e8d765498..36892db95 100644
--- a/reference/set/multiset.md
+++ b/reference/set/multiset.md
@@ -124,7 +124,7 @@ namespace std {
 | `size_type`              | 要素数を表す符号なし整数型。`difference_type` で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は [`size_t`](/reference/cstddef/size_t.md)) | |
 | `difference_type`        | 同一のコンテナを指す `iterator` の差を表す符号付き整数型(通常は [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md)) &amp;lt;br/&amp;gt;`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;iterator&amp;gt;::difference_type`、および、`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;const_iterator&amp;gt;::difference_type` と同じ。 | |
 | `pointer`                | 要素 `value_type`へのポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::pointer`。 | |
-| `const pointer`          | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
+| `const_pointer`          | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
 | `reverse_iterator` | 逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;`。 | |
 | `const_reverse_iterator` | 読み取り専用逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;`。 | |
 | `node_type`              | [`node_handle`](/reference/node_handle/node_handle.md)クラステンプレートの特殊化。 | C++17 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set -- (multi)map, (multi)set : s/const pointer/const_pointer/</title>
      <link href="https://cpprefjp.github.io/reference/set/set.html"/>
      <id>15e87dfd566db42845f47158e941032b9e0a2de0:reference/set/set.md</id>
      <updated>2023-04-17T17:15:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set.md b/reference/set/set.md
index ad6b0a5df..2b94af98d 100644
--- a/reference/set/set.md
+++ b/reference/set/set.md
@@ -125,7 +125,7 @@ namespace std {
 | `size_type`              | 要素数を表す符号なし整数型。`difference_type` で表現可能な非負整数（0以上の整数）を表すことが可能。(通常は [`size_t`](/reference/cstddef/size_t.md)) | |
 | `difference_type`        | 同一のコンテナを指す `iterator` の差を表す符号付き整数型(通常は [`ptrdiff_t`](/reference/cstddef/ptrdiff_t.md)) &amp;lt;br/&amp;gt;`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;iterator&amp;gt;::difference_type`、および、`std::`[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;const_iterator&amp;gt;::difference_type` と同じ。 | |
 | `pointer`                | 要素 `value_type`へのポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::pointer`。 | |
-| `const pointer`          | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
+| `const_pointer`          | 要素 `value_type`への`const`ポインタ。&amp;lt;br/&amp;gt; C++03 : `typename Allocator::const_pointer`。&amp;lt;br/&amp;gt; C++11以降 : `typename` [`allocator_traits`](/reference/memory/allocator_traits.md)`&amp;lt;Allocator&amp;gt;::const_pointer`。 | |
 | `reverse_iterator` | 逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;iterator&amp;gt;`。 | |
 | `const_reverse_iterator` | 読み取り専用逆順双方向イテレータ。`std::`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;const_iterator&amp;gt;`。 | |
 | `node_type`              | [`node_handle`](/reference/node_handle/node_handle.md)クラステンプレートの特殊化。 | C++17          |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noexcept -- noexcept : 指定可能な位置について追記</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/noexcept.html"/>
      <id>37440305b5e204f34741e3edb9719a7b852bf4f9:lang/cpp11/noexcept.md</id>
      <updated>2023-04-17T12:19:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/noexcept.md b/lang/cpp11/noexcept.md
index 4257e4bcb..2ac2aff52 100644
--- a/lang/cpp11/noexcept.md
+++ b/lang/cpp11/noexcept.md
@@ -56,13 +56,16 @@ struct X {
   // 例外を送出しない
   int getValue() const noexcept;
 //int getValue() const noexcept(true);
+
+  // noexceptは参照修飾と後置戻り値型の間
+  auto getString() const &amp;amp; noexcept -&amp;gt; std::string;
 };
 ```
 * noexcept[color ff0000]
 
 - `noexcept`もしくは`noexcept(trueに評価される整数定数式)`が指定された関数が例外を送出した場合、[`std::terminate()`](/reference/exception/terminate.md)関数を呼び出してプログラムを異常終了させる。その際、[`std::terminate()`](/reference/exception/terminate.md)関数が呼び出される前に、スタックの巻き戻しは起こらない可能性がある。
 - 従来の`throw`キーワードによる例外仕様(C++03ではexception specification、C++11ではdynamic exception specificationと呼ばれる仕様)は、C++11以降で非推奨である。
-
+- `noexcept`の指定可能な位置は、[参照修飾](/lang/cpp11/ref_qualifier_for_this.md)の後、[戻り値の型を後置する関数宣言構文](/lang/cpp11/trailing_return_types.md)の前である。
 
 ### 式が例外を送出する可能性があるか判定するnoexcept演算子
 - 演算子としての`noexcept`は、引数として指定した定数式が例外を送出する可能性があるかどうかをコンパイル時に判定し、`bool`型の定数値を返す
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append -- basic_string::append : コメントアウトが外れていたのを修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/append.html"/>
      <id>5eaa8eebe4f6275b47229ed76bfb655ae73896a6:reference/string/basic_string/append.md</id>
      <updated>2023-04-17T12:05:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/append.md b/reference/string/basic_string/append.md
index 8ebc7b88d..aec336438 100644
--- a/reference/string/basic_string/append.md
+++ b/reference/string/basic_string/append.md
@@ -54,12 +54,12 @@ template&amp;lt;class T&amp;gt;
 basic_string&amp;amp;
   append(const T&amp;amp; t,
         size_type pos,
-        size_type n = npos); / (9) C++17
+        size_type n = npos); // (9) C++17
 template&amp;lt;class T&amp;gt;
 constexpr basic_string&amp;amp;
   append(const T&amp;amp; t,
         size_type pos,
-        size_type n = npos); / (9) C++20
+        size_type n = npos); // (9) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- type_info::operator!= : =が変だったのを修正</title>
      <link href="https://cpprefjp.github.io/reference/typeinfo/type_info/op_not_equal.html"/>
      <id>b240dfdc804d6675c712e38bad9e666d79964225:reference/typeinfo/type_info/op_not_equal.md</id>
      <updated>2023-04-14T16:22:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/typeinfo/type_info/op_not_equal.md b/reference/typeinfo/type_info/op_not_equal.md
index 77ae97dc9..4f5b6435f 100644
--- a/reference/typeinfo/type_info/op_not_equal.md
+++ b/reference/typeinfo/type_info/op_not_equal.md
@@ -12,7 +12,7 @@ bool operator!=(const type_info&amp;amp; rhs) const noexcept; // (1) C++11
 
 ## 概要
 2つの型が異なるかを判定する
-（C++20からは、`operator＝=`から導出される）
+（C++20からは、`operator==`から導出される）
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- pairコンストラクタ : explicitになる条件の調整</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_constructor.html"/>
      <id>abc25987eceb7bfea7f0dee74dd39a6239e074b3:reference/utility/pair/op_constructor.md</id>
      <updated>2023-04-11T10:37:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_constructor.md b/reference/utility/pair/op_constructor.md
index f4a009000..c0eedfa56 100644
--- a/reference/utility/pair/op_constructor.md
+++ b/reference/utility/pair/op_constructor.md
@@ -128,11 +128,13 @@ constexpr pair(piecewise_construct_t,
     - C++17 : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U1, first_type&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U2, second_type&amp;gt;`である場合、`explicit`指定される
 - (6)-(10) :
     - `FWD(u)`を`static_cast&amp;lt;deccltype(u)&amp;gt;(u)`と定義して
-    - C++23 : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;0&amp;gt;(FWD(p))), T1&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;1&amp;gt;(FWD(p))), T2&amp;gt;`である場合、`explicit`指定される
+    - C++23 : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;0&amp;gt;(FWD(p))), first_type&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;decltype(`[`get`](/reference/utility/pair/get.md)`&amp;lt;1&amp;gt;(FWD(p))), second_type&amp;gt;`である場合、`explicit`指定される
 - (7) :
     - C++17 : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const U1&amp;amp;, first_type&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const U2&amp;amp;, second_type&amp;gt;`である場合、`explicit`指定される
+    - C++23 : (6)-(10) での定義参照（複雑であるが、条件は同等である）
 - (8) :
     - C++17 : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U1, first_type&amp;gt; || !`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;U2, second_type&amp;gt;`である場合、`explicit`指定される
+    - C++23 : (6)-(10) での定義参照（複雑であるが、条件は同等である）
 
 ## 備考
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
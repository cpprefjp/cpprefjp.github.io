<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-04T09:40:01.994556</updated>
  <id>07ee47ed-e9a0-4f42-ad78-601183517a0f</id>

  
    <entry>
      <title>as_const_view -- as_const_view : 例のインクルード不足を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_const_view.html"/>
      <id>0923d23a602778d490aee9e26aff6b690ae5723a:reference/ranges/as_const_view.md</id>
      <updated>2025-06-04T18:35:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_const_view.md b/reference/ranges/as_const_view.md
index 53d93ab59..68310616e 100644
--- a/reference/ranges/as_const_view.md
+++ b/reference/ranges/as_const_view.md
@@ -73,6 +73,7 @@ namespace std::ranges {
 ```cpp example
 #include &amp;lt;ranges&amp;gt;
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
 
 int main() {
   std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4};
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uses_allocator_construction_args -- uses_allocator_construction_args : C++23対応 #1063</title>
      <link href="https://cpprefjp.github.io/reference/memory/uses_allocator_construction_args.html"/>
      <id>3aa3df84dafc10d7c0cdaf55ae0bbb82296bb4f9:reference/memory/uses_allocator_construction_args.md</id>
      <updated>2025-06-04T14:08:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uses_allocator_construction_args.md b/reference/memory/uses_allocator_construction_args.md
index 133a4af45..1efdcafdc 100644
--- a/reference/memory/uses_allocator_construction_args.md
+++ b/reference/memory/uses_allocator_construction_args.md
@@ -5,29 +5,73 @@
 * cpp20[meta cpp]
 
 ```cpp
-template&amp;lt;class T, class Alloc, class... Args&amp;gt;
-  auto uses_allocator_construction_args(const Alloc&amp;amp; alloc, Args&amp;amp;&amp;amp;... args) -&amp;gt; see below;       // (1)
-
-template&amp;lt;class T, class Alloc, class Tuple1, class Tuple2&amp;gt;
-  auto uses_allocator_construction_args(const Alloc&amp;amp; alloc, piecewise_construct_t,
-                                        Tuple1&amp;amp;&amp;amp; x, Tuple2&amp;amp;&amp;amp; y) -&amp;gt; see below;                   // (2)
-
-template&amp;lt;class T, class Alloc&amp;gt;
-  auto uses_allocator_construction_args(const Alloc&amp;amp; alloc) -&amp;gt; see below;                       // (3)
-
-template&amp;lt;class T, class Alloc, class U, class V&amp;gt;
-  auto uses_allocator_construction_args(const Alloc&amp;amp; alloc, U&amp;amp;&amp;amp; u, V&amp;amp;&amp;amp; v) -&amp;gt; see below;         // (4)
-
-template&amp;lt;class T, class Alloc, class U, class V&amp;gt;
-  auto uses_allocator_construction_args(const Alloc&amp;amp; alloc, const pair&amp;lt;U, V&amp;gt;&amp;amp; pr) -&amp;gt; see below; // (5)
-
-template&amp;lt;class T, class Alloc, class U, class V&amp;gt;
-  auto uses_allocator_construction_args(const Alloc&amp;amp; alloc, pair&amp;lt;U, V&amp;gt;&amp;amp;&amp;amp; pr) -&amp;gt; see below;      // (6)
+template &amp;lt;class T, class Alloc, class... Args&amp;gt;
+constexpr auto
+  uses_allocator_construction_args(
+    const Alloc&amp;amp; alloc,
+    Args&amp;amp;&amp;amp;... args) -&amp;gt; see below;       // (1) C++20
+
+template &amp;lt;class T, class Alloc, class Tuple1, class Tuple2&amp;gt;
+constexpr auto
+  uses_allocator_construction_args(
+    const Alloc&amp;amp; alloc,
+    piecewise_construct_t,
+    Tuple1&amp;amp;&amp;amp; x,
+    Tuple2&amp;amp;&amp;amp; y) -&amp;gt; see below;           // (2) C++20
+
+template &amp;lt;class T, class Alloc&amp;gt;
+constexpr auto
+  uses_allocator_construction_args(
+    const Alloc&amp;amp; alloc) -&amp;gt; see below;   // (3) C++20
+
+template &amp;lt;class T, class Alloc, class U, class V&amp;gt;
+constexpr auto
+  uses_allocator_construction_args(
+    const Alloc&amp;amp; alloc,
+    U&amp;amp;&amp;amp; u,
+    V&amp;amp;&amp;amp; v) -&amp;gt; see below;                // (4) C++20
+
+template &amp;lt;class T, class Alloc, class U, class V&amp;gt;
+constexpr auto
+  uses_allocator_construction_args(
+    const Alloc&amp;amp; alloc,
+    pair&amp;lt;U,V&amp;gt;&amp;amp; pr) noexcept;            // (5) C++23
+
+template &amp;lt;class T, class Alloc, class U, class V&amp;gt;
+constexpr auto
+  uses_allocator_construction_args(
+    const Alloc&amp;amp; alloc,
+    const pair&amp;lt;U, V&amp;gt;&amp;amp; pr) -&amp;gt; see below; // (6) C++20
+
+template &amp;lt;class T, class Alloc, class U, class V&amp;gt;
+constexpr auto
+  uses_allocator_construction_args(
+    const Alloc&amp;amp; alloc,
+    pair&amp;lt;U, V&amp;gt;&amp;amp;&amp;amp; pr) -&amp;gt; see below;      // (7) C++20
+
+template &amp;lt;class T, class Alloc, class U, class V&amp;gt;
+constexpr auto
+  uses_allocator_construction_args(
+    const Alloc&amp;amp; alloc,
+    const pair&amp;lt;U,V&amp;gt;&amp;amp;&amp;amp; pr) noexcept;     // (8) C++23
+
+template &amp;lt;class T, class Alloc, pair-like P&amp;gt;
+constexpr auto
+  uses_allocator_construction_args(
+    const Alloc&amp;amp; alloc,
+    P&amp;amp;&amp;amp; p) noexcept;                    // (9) C++23
+
+template &amp;lt;class T, class Alloc, class U&amp;gt;
+constexpr auto
+  uses_allocator_construction_args(
+    const Alloc&amp;amp; alloc,
+    U&amp;amp;&amp;amp; u) noexcept;                    // (10) C++23
 ```
 * see below[italic]
 
 ## 概要
 `Alloc` 型のアロケータオブジェクト `alloc` を使用した `T` 型オブジェクトの uses-allocator 構築のために必要なコンストラクタ引数を、[`tuple`](../tuple/tuple.md) 型にして返す。
+
 また、`T` が [`pair`](../utility/pair.md) だった場合は、それぞれの要素に対して uses-allocator 構築するために必要なコンストラクタ引数を、[`tuple`](../tuple/tuple.md) 型にして返す。
 
 構築対象の型 `T` は関数引数からは推論できないため、明示的に指定する必要がある。
@@ -35,11 +79,15 @@ template&amp;lt;class T, class Alloc, class U, class V&amp;gt;
 
 ## テンプレートパラメータ制約
 - (1) : `T` が [`pair`](../utility/pair.md) の特殊化**ではない**場合のみオーバーロード解決に参加する
-- (2)-(6) : `T` が [`pair`](../utility/pair.md) の特殊化**である**場合のみオーバーロード解決に参加する
+- (2)-(10) : `T` が [`pair`](../utility/pair.md) の特殊化**である**場合のみオーバーロード解決に参加する
+- (9) : `P`が[`std::ranges::subrange`](/reference/ranges/subrange.md)の特殊化である場合のみオーバーロード解決に参加する
+- (10) : 以下のいずれかを満たす場合のみオーバーロード解決に参加する
+    - `P`が[`std::ranges::subrange`](/reference/ranges/subrange.md)の特殊化であること。もしくは
+    - `U`が`pair-like`の要件を満たさず、関数`template&amp;lt;class A, class B&amp;gt; void FUN (const pair&amp;lt;A, B&amp;gt;&amp;amp;);`に`FUN(u)`した場合に適格ではないこと
 
 
 ## 戻り値
-- (1) : 以下のいずれかと同等
+- (1) : 以下のいずれかと等価
 	- もし [`uses_allocator_v`](uses_allocator.md)`&amp;lt;T, Alloc&amp;gt;` が `false` で、かつ、[`is_constructible_v`](../type_traits/is_constructible.md)`&amp;lt;T, Args...&amp;gt;` が `true` の場合、
 
 		```cpp
@@ -69,7 +117,7 @@ forward_as_tuple(std::forward&amp;lt;Args&amp;gt;(args)..., alloc)
 
 	- 上記以外の場合、不適格となる。
 
-- (2) : `T` を [`pair`](../utility/pair.md)`&amp;lt;T1, T2&amp;gt;` とすると、以下と同等
+- (2) : `T` を [`pair`](../utility/pair.md)`&amp;lt;T1, T2&amp;gt;` とすると、以下と等価
 
 	```cpp
 make_tuple(
@@ -89,7 +137,7 @@ make_tuple(
 * apply[link ../tuple/apply.md]
 * make_tuple[link ../tuple/make_tuple.md]
 
-- (3) : 以下と同等
+- (3) : 以下と等価
 
 	```cpp
 uses_allocator_construction_args&amp;lt;T&amp;gt;(alloc, piecewise_construct,
@@ -99,7 +147,7 @@ uses_allocator_construction_args&amp;lt;T&amp;gt;(alloc, piecewise_construct,
 * tuple[link ../tuple/tuple/op_constructor.md]
 * uses_allocator_construction_args[color ff0000]
 
-- (4) : 以下と同等
+- (4) : 以下と等価
 
 	```cpp
 uses_allocator_construction_args&amp;lt;T&amp;gt;(alloc, piecewise_construct,
@@ -111,7 +159,7 @@ uses_allocator_construction_args&amp;lt;T&amp;gt;(alloc, piecewise_construct,
 * forward[link ../utility/forward.md]
 * uses_allocator_construction_args[color ff0000]
 
-- (5) : 以下と同等
+- (5), (6) : 以下と等価
 
 	```cpp
 uses_allocator_construction_args&amp;lt;T&amp;gt;(alloc, piecewise_construct,
@@ -122,7 +170,7 @@ uses_allocator_construction_args&amp;lt;T&amp;gt;(alloc, piecewise_construct,
 * forward_as_tuple[link ../tuple/forward_as_tuple.md]
 * uses_allocator_construction_args[color ff0000]
 
-- (6) : 以下と同等
+- (7), (8) : 以下と等価
 
 	```cpp
 uses_allocator_construction_args&amp;lt;T&amp;gt;(alloc, piecewise_construct,
@@ -134,6 +182,39 @@ uses_allocator_construction_args&amp;lt;T&amp;gt;(alloc, piecewise_construct,
 * move[link ../utility/move.md]
 * uses_allocator_construction_args[color ff0000]
 
+- (9) : 以下と等価
+
+    ```cpp
+return uses_allocator_construction_args&amp;lt;T&amp;gt;(alloc, piecewise_construct,
+                                           forward_as_tuple(get&amp;lt;0&amp;gt;(std::forward&amp;lt;P&amp;gt;(p))),
+                                           forward_as_tuple(get&amp;lt;1&amp;gt;(std::forward&amp;lt;P&amp;gt;(p))));
+```
+* piecewise_construct[link ../utility/piecewise_construct_t.md]
+* forward_as_tuple[link ../tuple/forward_as_tuple.md]
+
+- (10) : 以下の説明用クラスを定義し、
+    ```cpp
+    class pair-constructor {
+      using pair-type = remove_cv_t&amp;lt;T&amp;gt;;
+      constexpr auto do-construct(const pair-type&amp;amp; p) const {
+        return make_obj_using_allocator&amp;lt;pair-type&amp;gt;(alloc_, p);
+      }
+
+      constexpr auto do-construct(pair-type&amp;amp;&amp;amp; p) const {
+        return make_obj_using_allocator&amp;lt;pair-type&amp;gt;(alloc_, std::move(p));
+      }
+
+       const Alloc&amp;amp; alloc_;
+       U&amp;amp; u_;
+    public:
+      constexpr operator pair-type() const {
+        return do-construct(std::forward&amp;lt;U&amp;gt;(u_));
+      }
+    };
+    ```
+
+    - `u`で`u_`、`alloc`で`alloc_`初期化した`pair-constructor`オブジェクト`pc`を生成し、`make_tuple(pc)`を返す
+
 
 ## 備考
 - 本関数は、uses-allocator 構築をサポートするために C++20 で導入された。  
@@ -248,3 +329,4 @@ tuple(piecewise_construct_t, tuple(allocator_arg_t, MyAlloc, 3, ), tuple(4, MyAl
 
 ## 参照
 - [P0591R4 Utility functions to implement uses-allocator construction](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0591r4.pdf)
+- [P2321R2 zip](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2321r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enable_borrowed_range -- empty_view::enable_borrowed_range : meta idを修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/enable_borrowed_range.html"/>
      <id>0405eaf3bb709581f987423a40af95384d7fd5b1:reference/ranges/empty_view/enable_borrowed_range.md</id>
      <updated>2025-06-04T13:48:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/enable_borrowed_range.md b/reference/ranges/empty_view/enable_borrowed_range.md
index e8dd4a5be..eff21b279 100644
--- a/reference/ranges/empty_view/enable_borrowed_range.md
+++ b/reference/ranges/empty_view/enable_borrowed_range.md
@@ -2,7 +2,7 @@
 * ranges[meta header]
 * std::ranges[meta namespace]
 * empty_view[meta class]
-* variable template[meta id-type]
+* variable[meta id-type]
 * cpp20[meta cpp]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>slide_view -- slide_view : revert</title>
      <link href="https://cpprefjp.github.io/reference/ranges/slide_view.html"/>
      <id>97e2c6feab74731eff5186a6d1687da65ff26746:reference/ranges/slide_view.md</id>
      <updated>2025-06-04T13:33:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/slide_view.md b/reference/ranges/slide_view.md
index 671e63e6d..7f4871734 100644
--- a/reference/ranges/slide_view.md
+++ b/reference/ranges/slide_view.md
@@ -65,13 +65,13 @@ namespace std::ranges {
 
 | 名前                                         | 説明                              | 対応バージョン |
 |----------------------------------------------|-----------------------------------|----------------|
-| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
-| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++23          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++23          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++23          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++23          |
 | [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
 | [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++23          |
 
 ## 推論補助
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_rvalue_view -- as_rvalue_view, slide_view : C++23なのに継承メンバーがC++20になっていたのを修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_rvalue_view.html"/>
      <id>76e1dab54abf495ef12d5bbbfa4ce8e8647411af:reference/ranges/as_rvalue_view.md</id>
      <updated>2025-06-04T13:28:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_rvalue_view.md b/reference/ranges/as_rvalue_view.md
index 70c3f3add..1be96bc0d 100644
--- a/reference/ranges/as_rvalue_view.md
+++ b/reference/ranges/as_rvalue_view.md
@@ -69,12 +69,12 @@ std::ranges::copy(words | views::as_rvalue, std::back_inserter(new_words));
 
 | 名前                                         | 説明                              | 対応バージョン |
 |----------------------------------------------|-----------------------------------|----------------|
-| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++23          |
-| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++23          |
-| [`data`](view_interface/data.md)             | Rangeの先頭へのポインタを取得する | C++23          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++23          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++23          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++23          |
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`data`](view_interface/data.md)             | Rangeの先頭へのポインタを取得する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
 | [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
 | [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>slide_view -- as_rvalue_view, slide_view : C++23なのに継承メンバーがC++20になっていたのを修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/slide_view.html"/>
      <id>76e1dab54abf495ef12d5bbbfa4ce8e8647411af:reference/ranges/slide_view.md</id>
      <updated>2025-06-04T13:28:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/slide_view.md b/reference/ranges/slide_view.md
index 7f4871734..671e63e6d 100644
--- a/reference/ranges/slide_view.md
+++ b/reference/ranges/slide_view.md
@@ -65,13 +65,13 @@ namespace std::ranges {
 
 | 名前                                         | 説明                              | 対応バージョン |
 |----------------------------------------------|-----------------------------------|----------------|
-| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++23          |
-| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++23          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++23          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++23          |
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
 | [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
 | [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++23          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
 
 ## 推論補助
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-01-20T14:38:03.959416</updated>
  <id>03e88eae-d26e-4a25-b9f5-c5c5fde26e95</id>

  
    <entry>
      <title>コンパイラの実装状況 -- C++26 : 2023-12 Mailingのコア言語側に対応 #1220</title>
      <link href="https://cpprefjp.github.io/implementation-status.html"/>
      <id>4b9c2df0161814f19d3b8b37138d9bc1a733eddf:implementation-status.md</id>
      <updated>2024-01-19T15:11:26+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;コンパイラの実装状況&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;このページでは、C++のバージョンごとの言語機能を、どのコンパイラがどのバージョンからサポートしているかをまとめる。&lt;/p&gt;
&lt;p&gt;ライブラリ機能については、本サイトのリファレンスで各機能を参照してもらいたい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp11&#34;&gt;C++11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp14&#34;&gt;C++14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp17&#34;&gt;C++17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp20&#34;&gt;C++20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp23&#34;&gt;C++23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp26&#34;&gt;C++26&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp11&#34; id=&#34;cpp11&#34;&gt;C++11言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N2341: &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alignas.html&#34;&gt;alignas&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;2003あるいはそれ以前からある&lt;code&gt;__declspec(align(x))&lt;/code&gt;構文で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2341: &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alignof.html&#34;&gt;alignof&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント取得&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;2003あるいはそれ以前よりある&lt;code&gt;__alignof&lt;/code&gt;で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1984: &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/auto.html&#34;&gt;auto&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型推論&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2343: &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の型を取得&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;2010 (partial)&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1653: C99互換のプリプロセッサ&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/variadic_macros.html&#34;&gt;可変引数マクロ&lt;/a&gt;、&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/pragma_operator.html&#34;&gt;Pragma演算子&lt;/a&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/func.html&#34;&gt;__func__&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2005 (partial): 可変引数のみ &lt;code&gt;_Pragma&lt;/code&gt;の代わりに&lt;code&gt;__pragma&lt;/code&gt;が存在する。&lt;br /&gt; 2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2235: &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数式&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015 (partial)&lt;br /&gt; 2015 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2346: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html&#34;&gt;関数の&lt;code&gt;default/delete&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;自動定義される特殊関数の制御&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2013: ムーブコンストラクタ・ムーブ代入演算子の&lt;code&gt;default&lt;/code&gt;は不可&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1986: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html&#34;&gt;委譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタから他のコンストラクタに処理を委譲する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2437: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/explicit_conversion_operator.html&#34;&gt;明示的な型変換演算子のオーバーロード&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;明示的な型変換が行われる場合にのみ呼び出される演算子をオーバーロードできるようにする&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1791: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/extend_friend_targets.html&#34;&gt;&lt;code&gt;friend&lt;/code&gt;宣言できる対象を拡張&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータや型の別名を&lt;code&gt;friend&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial) &lt;br /&gt; 12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1987: &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/extern_template.html&#34;&gt;extern template&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートのインスタンス化抑止&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2540: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのコンストラクタを継承する&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2927: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクトをその場に書く&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010 (partial)&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2657: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/local_and_unnamed_type_as_template_arguments.html&#34;&gt;ローカル型と無名型を、テンプレート引数として使用することを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ローカルおよび無名として定義したクラスや列挙型を、テンプレート引数として渡せるようにする&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1811: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/long_long_type.html&#34;&gt;&lt;code&gt;long long&lt;/code&gt;型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;64ビット以上の大きさを持つ整数型&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2535: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html&#34;&gt;インライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ネストした名前空間に、透過的にアクセスする&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2249: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-16とUTF-32の文字型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1 (Windows: partial) &lt;br /&gt; 12.1 (GNU/Linux, macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt; 2010より組み込み型ではなく型の別名として存在する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2442: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html&#34;&gt;UTF-8文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;の文字列をUTF-8エンコーディングするプレフィックス&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.1 (Windows: partial) &lt;br /&gt; 12.1 (GNU/Linux, macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2442: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルにRプレフィックスを付けることで、エスケープシーケンスを無視する&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2765: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リテラルのサフィックスをユーザー定義する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2541: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/trailing_return_types.html&#34;&gt;戻り値の型を後置する関数宣言構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;以下のような形式での関数宣言&lt;br /&gt; &lt;code&gt;auto f(arg_types...) -&amp;gt; return_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2431: &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/nullptr.html&#34;&gt;nullptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタを表すポインタリテラル&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1757: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/right_angle_brackets.html&#34;&gt;テンプレートの右山カッコ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;basic_string&amp;lt;char&amp;gt;&amp;gt;&lt;/code&gt;のように、&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;をスペースを空けずに記述可能にする&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2118: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照・ムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;右辺値によるオーバーロード、およびそれによるリソースの所有権移動&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.6&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010 (partial) ムーブコンストラクタと代入演算子の暗黙定義に対応していない。&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N1720: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に条件式が真であることを表明する&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2347: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/scoped_enum.html#extended-unscoped-enum&#34;&gt;&lt;code&gt;enum&lt;/code&gt;の先行宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2347: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/scoped_enum.html&#34;&gt;スコープを持つ列挙型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;強い型付けとスコープを持つ列挙型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2258: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートによって型の別名を定義する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2544: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/unrestricted_unions.html&#34;&gt;共用体の制限解除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体のメンバ変数として、クラスオブジェクトを持つ&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;14.0(Linux系OSおよびMacのみ。Windowsは非対応)&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2242: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の数のテンプレートパラメータを受け取れるようにする&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2930: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列やコンテナといった範囲を表すオブジェクトを、簡潔に走査する&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2928: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/override_final.html&#34;&gt;&lt;code&gt;override&lt;/code&gt;と&lt;code&gt;final&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数のオーバーライド指定、および派生クラスでのオーバーロードを禁止する指定&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2005 (partial): &lt;code&gt;override&lt;/code&gt;のみ。&lt;code&gt;final&lt;/code&gt;の代わりにsealedが存在する。ただし両者ともデストラクタには指定できない。&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2761: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/attributes.html&#34;&gt;属性構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[attr]]&lt;/code&gt;構文による、クラス、関数、変数の属性指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2439: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html&#34;&gt;メンバ関数の左辺値／右辺値修飾&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトが左辺値／右辺値の場合のみ呼び出し可能であることの指定&lt;/td&gt;
&lt;td&gt;4.8.1&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2756: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数の初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ変数を、宣言と同時に初期値指定する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2672: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;波括弧による初期化をユーザー定義する。&lt;code&gt;vector&amp;lt;int&amp;gt; v = {1, 2, 3};&lt;/code&gt;など。&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2672: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/uniform_initialization.html&#34;&gt;一様初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ呼び出しを波カッコで行う。 &lt;code&gt;T x { a, b, c };&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3050: &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/noexcept.html&#34;&gt;noexcept&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の例外指定、例外を投げる可能性のある式かbool値を返す演算子&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2634: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/sfinae_expressions.html&#34;&gt;任意の式によるSFINAE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の式が有効かどうかで、その関数をオーバーロード解決に含めるかどうかを決定する&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2015 Update 1 (partial)&lt;br /&gt; 2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2659: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html&#34;&gt;スレッドローカルストレージ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;スレッドごとに異なる静的記憶域に保持される変数&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;/td&gt;
&lt;td&gt;2010&lt;br /&gt; &lt;code&gt;__declspec(thread)&lt;/code&gt;属性での部分サポート&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N2660: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/static_initialization_thread_safely.html&#34;&gt;ブロックスコープを持つ&lt;code&gt;static&lt;/code&gt;変数初期化のスレッドセーフ化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数ローカルで定義した&lt;code&gt;static&lt;/code&gt;変数の初期化を、スレッドセーフにする&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.0 (Lnux/macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++11実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体的な対応状況： &lt;a href=&#34;http://web.archive.org/web/20160327011707/https://wiki.apache.org/stdcxx/C++0xCompilerSupport&#34; target=&#34;_blank&#34;&gt;C++0xCompilerSupport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC： &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx11&#34; target=&#34;_blank&#34;&gt;C++11 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++ : &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2011&#34; target=&#34;_blank&#34;&gt;C++ 2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang： &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98 and C++11 Support in Clang&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://clang.llvm.org/cxx_dr_status.html&#34; target=&#34;_blank&#34;&gt;C++ Defect Report Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC : &lt;a href=&#34;https://software.intel.com/en-us/articles/c0x-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++11 Features Supported by Intel® C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp14&#34; id=&#34;cpp14&#34;&gt;C++14言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N3472: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/binary_literals.html&#34;&gt;2進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2進数を表す&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;プレフィックスを付けた数値リテラルの記述を可能とする&lt;/td&gt;
&lt;td&gt;4.3(GNU)&lt;br /&gt; 4.9&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3638: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値型を&lt;code&gt;auto&lt;/code&gt;にすることで、&lt;code&gt;return&lt;/code&gt;文から戻り値の型を推論させる&lt;/td&gt;
&lt;td&gt;4.8(partial)&lt;br /&gt;4.9&lt;/td&gt;
&lt;td&gt;3.3(partial)&lt;br /&gt; 3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3648: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/initialize_capture.html&#34;&gt;ラムダ式の初期化キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャに代入構文を導入し、一つの変数に複数のキャプチャ方法を指定可能にする&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3649: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/generic_lambdas.html&#34;&gt;ジェネリックラムダ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のパラメータを&lt;code&gt;auto&lt;/code&gt;にすることで、ジェネリックな関数呼び出し演算子を持つ関数オブジェクトを生成する&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3651: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/variable_templates.html&#34;&gt;変数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数定義時のテンプレート指定を可能にする。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3652: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;文、&lt;code&gt;switch&lt;/code&gt;文による条件分岐の許可。&lt;br /&gt;&lt;code&gt;for&lt;/code&gt;文、&lt;code&gt;while&lt;/code&gt;文、&lt;code&gt;do-while&lt;/code&gt;文によるループの許可。&lt;br /&gt;&lt;code&gt;void&lt;/code&gt;戻り値型の許可&lt;br /&gt;初期化を伴う変数宣言の許可。&lt;br /&gt;変数書き換えの許可。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.3(partial) &lt;br /&gt; 3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3653: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/brace_elision_in_array_temporary_initialization.html&#34;&gt;宣言時のメンバ初期化を持つ型の集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様初期化と初期化子リストを組み合わせた際、二重に波カッコが必要となっていた仕様を緩和し、波カッコを省略できるようにする&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3760: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html&#34;&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非推奨の機能であることを示す属性。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;br /&gt; (Linux/Mac OS)&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;それ以前は&lt;code&gt;__declspec(deprecated)&lt;/code&gt;で代替可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3781: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/digit_separators.html&#34;&gt;数値リテラルの桁区切り文字&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シングルクォーテーションで数値リテラルを桁区切りする。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3778: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/sized_deallocation.html&#34;&gt;サイズ付きデアロケーション&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;サイズをとる&lt;code&gt;delete&lt;/code&gt;演算子のオーバーロードを許可する。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++14実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx14&#34; target=&#34;_blank&#34;&gt;C++14 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++: &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2014&#34; target=&#34;_blank&#34;&gt;C++ 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98, C++11, and C++14 Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++: &lt;a href=&#34;https://libcxx.llvm.org/Status/Cxx14.html&#34; target=&#34;_blank&#34;&gt;libc++ C++14 Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://software.intel.com/en-us/articles/c14-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++14 Features Supported by Intel C++ Compiler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://software.intel.com/en-us/forums/topic/549502&#34; target=&#34;_blank&#34;&gt;Intel (R) Parallel Studio XE 2016 Beta program has begun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp17&#34; id=&#34;cpp17&#34;&gt;C++17言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N3928: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html&#34;&gt;メッセージなしの&lt;code&gt;static_assert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトの表明メッセージを使用する&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4086: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/removing_trigraphs.html&#34;&gt;トライグラフを削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4051: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/allow_typename_in_a_template_template_parameter.html&#34;&gt;テンプレートテンプレートパラメータに&lt;code&gt;typename&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;class&lt;/code&gt;キーワードしか使用できなかった部分に、&lt;code&gt;typename&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N3922: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.html&#34;&gt;単一要素初期化子リストを&lt;code&gt;auto&lt;/code&gt;で受け取った場合の型を変更&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;だったのを&lt;code&gt;T&lt;/code&gt;に変更&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4295: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックに対する2項演算の集積処理&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4267: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html&#34;&gt;UTF-8文字リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルだけでなく、文字リテラルにもUTF-8指定できるようにする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4230: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace A::B {}&lt;/code&gt;のように、入れ子の名前空間を簡単に定義できるようにする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4266: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/attributes_for_namespaces_and_enumerators.html&#34;&gt;名前空間と列挙子に属性の付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;名前空間の定義と、列挙型の各要素の定義に、属性を付けられるようにする&lt;/td&gt;
&lt;td&gt;名前空間は4.0&lt;br /&gt;列挙子は6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N4268: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.html&#34;&gt;全ての非型テンプレート引数の定数式評価を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポインタの定数式評価として、配列からポインタへの変換や、関数から関数ポインタへの変換などを許可&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0001R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_use_of_the_register_keyword.html&#34;&gt;非推奨だった&lt;code&gt;register&lt;/code&gt;キーワードを削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0002R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html&#34;&gt;非推奨だった&lt;code&gt;bool&lt;/code&gt;型オブジェクトに対するインクリメントの仕様を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0012R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0061R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/has_include.html&#34;&gt;プリプロセッサでの条件式&lt;code&gt;__has_include&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対象のインクルードファイルが存在するかをプリプロセス時に判定する&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0136R1: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0136r1.html&#34; target=&#34;_blank&#34;&gt;継承コンストラクタの新仕様&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルト引数を引き継ぐようにした&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0188R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;case&lt;/code&gt;節で&lt;code&gt;break&lt;/code&gt;や&lt;code&gt;return&lt;/code&gt;を書かなかった場合に、それが意図したフォールスルーであることをコンパイラに伝える属性&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0189R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならないことをユーザーに伝える属性&lt;/td&gt;
&lt;td&gt;4.8からは&lt;code&gt;[[gnu::warn_unused_result]]&lt;/code&gt;を使用すること&lt;br /&gt; 7からサポート&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0212R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用しない可能性がある変数であることをコンパイラに伝える属性&lt;/td&gt;
&lt;td&gt;4.8からは&lt;code&gt;[[gnu::unused]]&lt;/code&gt;を使用すること&lt;br /&gt; 7からサポート&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0017R1: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0017r1.html&#34; target=&#34;_blank&#34;&gt;基底クラスのメンバ変数を集成体初期化するための波カッコを省略できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのメンバを集成体初期化するために、&lt;code&gt;derived d {{42}};&lt;/code&gt;の代わりに&lt;code&gt;derived d {42};&lt;/code&gt;と書けるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0170R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/constexpr_lambda.html&#34;&gt;ラムダ式を&lt;code&gt;constexpr&lt;/code&gt;として使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式の関数オブジェクトが定数式の文脈で使用された場合に、それがコンパイル時に評価されるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0184R0: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/generalizing_the_range-based_for_loop.html&#34;&gt;範囲for文のための&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;関数が、異なる型を返すことを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;が異なるイテレータ型を返せるようにすることで、終端イテレータを定義しやすくする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0018R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html&#34;&gt;ラムダ式での&lt;code&gt;*this&lt;/code&gt;のコピーキャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャリストに&lt;code&gt;*this&lt;/code&gt;を指定することで、&lt;code&gt;*this&lt;/code&gt;をコピーキャプチャする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0138R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/construction_enum_class_values.html&#34;&gt;&lt;code&gt;enum class&lt;/code&gt;変数の初期値として整数を指定する際の規則を調整&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャストを使用することなく整数を初期値として使用し、&lt;code&gt;E e{0};&lt;/code&gt;のような初期化を許可&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0245R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/hexadecimal_floating_literals.html&#34;&gt;浮動小数点数の16進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hexfloat&lt;/code&gt;マニピュレータや&lt;code&gt;printf()&lt;/code&gt;の16進数出力に合わせて、浮動小数点数のリテラルも16進数表記できるようにする&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0028R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html&#34;&gt;属性の名前空間指定に繰り返しをなくす&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[using CC: opt(1), debug]]&lt;/code&gt;のように属性の名前空間宣言をまとめて行う&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0035R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator new&lt;/code&gt;と&lt;code&gt;operator delete&lt;/code&gt;でアライメント値を取得できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0091R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html&#34;&gt;クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタの引数からクラスのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0127R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/declaring_non-type_template_arguments_with_auto.html&#34;&gt;非型テンプレート引数の&lt;code&gt;auto&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;typename T, T x&amp;gt;&lt;/code&gt;という冗長なコードを&lt;code&gt;template &amp;lt;auto x&amp;gt;&lt;/code&gt;のようにして受けられるようにし、&lt;br /&gt; &lt;code&gt;X&amp;lt;3&amp;gt;; X&amp;lt;true&amp;gt;; X&amp;lt;&#39;a&#39;&amp;gt;&lt;/code&gt;のように定数を簡潔に渡せるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0135R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html&#34;&gt;値のコピー省略を保証&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一時オブジェクトをコピーする際に、単純な値を持つクラスであればコピーが省略されることを保証する&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0145R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/expression_evaluation_order.html&#34;&gt;厳密な式の評価順&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;式の項が評価される順序を厳密に規定する。&lt;br /&gt; &lt;code&gt;b = a;&lt;/code&gt;の式が右から順番(a, bの順)に評価される&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0283R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html&#34;&gt;不明な属性を無視する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実装が知らない名前空間の属性は無視する&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0292R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/if_constexpr.html&#34;&gt;constexpr if文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(cond)&lt;/code&gt;とすることで、そのif文はコンパイル時に処理される&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0296R2: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0296r2.html&#34; target=&#34;_blank&#34;&gt;処理の進行保証&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;並行処理に関して「処理の進行」を明確に定義&lt;br /&gt; (TODO:言葉の定義だけなので実装状況ページからは取り除く)&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0386R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/inline_variables.html&#34;&gt;インライン変数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インライン指定を関数だけでなく変数にも指定できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0391R0: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0391r0.html&#34; target=&#34;_blank&#34;&gt;templated entityという用語を導入&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;(TODO:言葉の定義だけなので実装状況ページからは取り除く)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0217R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/structured_bindings.html&#34;&gt;構造化束縛&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;タプルやユーザー定義型を分解して受け取れるようにする&lt;br /&gt; &lt;code&gt;tuple&amp;lt;int, string&amp;gt; f();&lt;/code&gt; &lt;br /&gt; &lt;code&gt;const auto [a, b] = f(); // aはintの値、bはstringの値&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0305R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/selection_statements_with_initializer.html&#34;&gt;if文とswitch文の条件式と初期化を分離&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if (init; condition)&lt;/code&gt;のように初期化と条件式を分けて記述できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0137R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/replacement_of_class_objects_containing_reference_members.html&#34;&gt;参照メンバをもつクラスの置き換え&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照型メンバや&lt;code&gt;const&lt;/code&gt;メンバ変数を含むクラスについてこれまで結果は未定義とされていた配置&lt;code&gt;new&lt;/code&gt;によるオブジェクトの置き換えを条件付きで可能とする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0003R5: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_exception_specifications.html&#34;&gt;非推奨だった例外仕様を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;noexcept&lt;/code&gt;が入ったことによって非推奨になった&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様を削除&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0195R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/pack_expansions_in_using.html&#34;&gt;using宣言でのパック展開&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックの型を基底クラスとして指定した場合に、&lt;code&gt;using&lt;/code&gt;宣言に基底クラスのパラメータパックを指定できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0512R0: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0512r0.pdf&#34; target=&#34;_blank&#34;&gt;クラステンプレート引数の推論仕様を調整&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0490R0: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0490r0.html&#34; target=&#34;_blank&#34;&gt;Committee Draftに対するNational Body Commentへの対応&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0522R0: &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0522r0.html&#34; target=&#34;_blank&#34;&gt;テンプレートテンプレート引数のマッチングにおいて、互換性のあるテンプレートを除外&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4 (partial)&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++17実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx17&#34; target=&#34;_blank&#34;&gt;C++17 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++ Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++ : &lt;a href=&#34;https://libcxx.llvm.org/Status/Cxx17.html&#34; target=&#34;_blank&#34;&gt;libc++ C++17 Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://software.intel.com/en-us/articles/c17-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++17 Features Supported by Intel C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp20&#34; id=&#34;cpp20&#34;&gt;C++20言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P0683R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html&#34;&gt;ビットフィールドのメンバ変数初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドメンバ変数のデフォルト値を設定する構文を追加する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0409R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html&#34;&gt;ラムダ式のキャプチャとして&lt;code&gt;[=, this]&lt;/code&gt;を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトコピーキャプチャと&lt;code&gt;this&lt;/code&gt;ポインタのコピーキャプチャを両方指定できるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0806R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html&#34;&gt;&lt;code&gt;[=]&lt;/code&gt;による&lt;code&gt;this&lt;/code&gt;の暗黙のキャプチャを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コピーのデフォルトキャプチャでは、&lt;code&gt;this&lt;/code&gt;ポインタをキャプチャされなくする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0428R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックラムダでテンプレートパラメータを定義できるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0704R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html&#34;&gt;&lt;code&gt;const&lt;/code&gt;修飾されたメンバポインタの制限を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.*&lt;/code&gt;演算子での左辺値の&lt;code&gt;const&lt;/code&gt;メンバ関数呼び出しを許可する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0306R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/va_opt.html&#34;&gt;可変引数が空でない場合のトークン置換&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの置換で可変引数が空の場合に余計なカンマが付いてしまう問題に対処&lt;/td&gt;
&lt;td&gt;8 (partial, &lt;code&gt;#__VA_OPT__&lt;/code&gt;による文字列化が未サポート)&lt;/td&gt;
&lt;td&gt;6.0&lt;br /&gt; 9.0 (&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1042r1.html&#34; target=&#34;_blank&#34;&gt;p1042&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0329R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/designated_initialization.html&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0734R0: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/concepts.html&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータに対する制約を行う&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0614R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html&#34;&gt;初期化式をともなう範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲for文スコープで使用する変数の初期化のための構文を追加&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.7&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0588R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/simplifying_implicit_lambda_capture.html&#34;&gt;暗黙のラムダキャプチャを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のキャプチャに関する仕様整理&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0846R0: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/adl_and_function_templates_that_are_not_visible.html&#34;&gt;関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;名前空間内の関数テンプレートをテンプレート引数指定かつ非修飾・ADLで正しく呼び出せるよう修正&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0641R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/resolving_const_mismatch_with_defaulted_copy_constructor.html&#34;&gt;デフォルトのコピーコンストラクタと非&lt;code&gt;const&lt;/code&gt;なコンストラクタが衝突する問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非&lt;code&gt;const&lt;/code&gt;なオブジェクトをとるコンストラクタを定義すると、そのクラスをラップしたクラスのコピーコンストラクタが&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;になってしまう問題を修正&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0859R0: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/less_eager_instantiation_of_constexpr_functions.html&#34;&gt;評価されない文脈での定数式評価によって特殊メンバ関数がインスタンス化されることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sizeof&lt;/code&gt;や&lt;code&gt;decltype&lt;/code&gt;などの評価されない文脈において定数式評価を行った場合に、ムーブコンストラクタのような特殊メンバ関数が定義されることを規定&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Partial in 2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0515R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;三方比較演算子によって比較演算子の自動生成を行うようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0692R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/access_checking_on_specializations.html&#34;&gt;特殊化のアクセスチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;partial&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0624R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html&#34;&gt;状態を持たないラムダ式を、デフォルト構築可能、代入可能とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャしていないラムダ式をデフォルト構築・代入可能にする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0767R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_pod.html&#34;&gt;PODを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;PODという用語を非推奨化する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0315R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html&#34;&gt;評価されない文脈でのラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;評価されない文脈でもラムダ式を書くことができるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Partial&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0840R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html&#34;&gt;空オブジェクトを言語サポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[no_unique_address]]&lt;/code&gt;属性を導入し、空の型のオブジェクトをほかのオブジェクトと共有する最適化を許可する&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 9 &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#note-t1-1&#34; id=&#34;note_ref-t1-1&#34;&gt;†1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0962R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html&#34;&gt;範囲for文がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;メンバ関数のどちらかが見つからなかった場合に非メンバ関数の&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0969R0: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html&#34;&gt;friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構造化束縛の仕様として公開メンバ変数のみを取り出せるようになっていたが、friend指定された関数からは非公開メンバ変数にもアクセスできるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0961R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html&#34;&gt;構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非テンプレートの&lt;code&gt;get()&lt;/code&gt;メンバ関数が見つかった場合は、非メンバ関数の&lt;code&gt;get()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0634R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/down_with_typename.html&#34;&gt;型の文脈で&lt;code&gt;typename&lt;/code&gt;の省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型しか現れない文脈では、依存名を解決するための&lt;code&gt;typename&lt;/code&gt;キーワードを省略できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2021.4 (2021.6 は未対応)&lt;/td&gt;
&lt;td&gt;2019 Update 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0780R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.html&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[...args = std::move(args)]&lt;/code&gt;のようなキャプチャを許可&lt;/td&gt;
&lt;td&gt;9&lt;br /&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.7&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0479R5: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html&#34;&gt;確率が高い分岐と低い分岐を伝える属性 &lt;code&gt;[[likely]]&lt;/code&gt;, &lt;code&gt;[[unlikely]]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;条件分岐の最適化ヒントを与える属性&lt;/td&gt;
&lt;td&gt;9 (partial, &lt;code&gt;switch&lt;/code&gt; 文のみ可能)&lt;br /&gt; 10&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2021.7&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0929R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/checking_for_abstract_class_types.html&#34;&gt;抽象型のチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の宣言段階では、パラメータおよび戻り値型が抽象型かどうかをチェックしないようにする&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0732R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.html&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式として使用できる型を広く非型テンプレートパラメータとして使用できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;partial&lt;/td&gt;
&lt;td&gt;2022.2 Partial&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0722R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.html&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラスの&lt;code&gt;delete&lt;/code&gt;演算子が呼び出される前にデストラクタが呼ばれないようにするオプションを追加&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;2023.0&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1064R0: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;仮想関数に&lt;code&gt;constexpr&lt;/code&gt;を付けられない制限を解除&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1327R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.html&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式での動的多態を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1002R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/try-catch_blocks_in_constexpr_functions.html&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でtry-catchブロックを書けるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4 (2021.6 は未対応)&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1073R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/immediate_functions.html&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;consteval&lt;/code&gt;キーワードを追加し、常に定数式評価されるよう指定できるようにする&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1330R0: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.html&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体メンバの書き換えを定数式内で行えるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1008R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.html&#34;&gt;ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタが&lt;code&gt;delete&lt;/code&gt;／&lt;code&gt;default&lt;/code&gt;宣言されているクラスを、集成体初期化によってコンストラクタ呼び出しを回避して構築できてしまっていた技法を禁止&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0892R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/explicit_bool.html&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;explicit(true)&lt;/code&gt;のように&lt;code&gt;explicit&lt;/code&gt;に真理値パラメータを指定できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1236R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html&#34;&gt;符号付き整数型が2の補数表現であることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;符号付き整数型のビット表現を2の補数に規定する&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2023.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0482R6: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/char8_t.html&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-8エンコードされた文字かどうかでオーバーロード・特殊化をできるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7 (&lt;code&gt;-fchar8_t&lt;/code&gt;オプションが必要)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1094R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/nested_inline_mamespaces.html&#34;&gt;入れ子名前空間定義でのインライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace ns1::inline ns2::ns3 {}&lt;/code&gt;のように、入れ子名前空間を定義する式にインライン名前空間の指定を含められるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1091R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html&#34;&gt;構造化束縛を拡張して通常の変数宣言のように使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;記憶域指定子として&lt;code&gt;static&lt;/code&gt;と&lt;code&gt;thread_local&lt;/code&gt;の指定を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1381R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.html&#34;&gt;構造化束縛した変数の参照キャプチャを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構造化束縛をした変数は特殊な扱いのためラムダ式で参照キャプチャできない規定となっていたがこれを許可する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0960R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T x{1, 2, 3};&lt;/code&gt;と同様に&lt;code&gt;T x(1, 2, 3);&lt;/code&gt;でも集成体初期化できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1009R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.html&#34;&gt;&lt;code&gt;new&lt;/code&gt;式での配列要素数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;double* p = new double[]{1,2,3};&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1041R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルを、文字コードUTF-16/32に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;、&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;の定義に関係なく、&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;のリテラルをUTF-16/32文字コードに規定する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;2023.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1103R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヘッダファイル・ソースファイル、インクルードに変わる仕組みとしてモジュールを導入する&lt;/td&gt;
&lt;td&gt;11 (&lt;code&gt;-fmodules-ts&lt;/code&gt;が必要)&lt;/td&gt;
&lt;td&gt;15&lt;br /&gt;8.0 partial (&lt;code&gt;-fmodules&lt;/code&gt;, &lt;code&gt;-fmodules-ts&lt;/code&gt;が必要)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0912R5: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数実行を中断・再開する仕組みとしてコルーチンを導入する&lt;/td&gt;
&lt;td&gt;10 (&lt;code&gt;-fcoroutines&lt;/code&gt;が必要)&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;2021.4&lt;/td&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1161R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.html&#34;&gt;添字演算子内でのカンマ演算子の使用を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ar[i, j]&lt;/code&gt;を非推奨化。&lt;code&gt;ar[(i, j)]&lt;/code&gt;はOK&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1331R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.html&#34;&gt;constexpr関数内でのトリビアルなデフォルト初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でのデフォルト初期化を許可し、未初期化値を読むことのみ禁止する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;2022.3&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0848R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.md.nolink&#34;&gt;条件付きで特殊メンバ関数をトリビアルに定義するように&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;制約によってトリビアルな特殊メンバ関数と非トリビアルな特殊メンバ関数をオーバーロードできるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;16 Partial (consepts 未実装部あり)&lt;/td&gt;
&lt;td&gt;2022.3&lt;/td&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1301R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/nodiscard_should_have_a_reason.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性に理由となる文字列を付加できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならない理由を関数宣言に持たせ、警告メッセージに役立てる&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1099R5: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;using enum EnumType;&lt;/code&gt;もしくは&lt;code&gt;using EnumType::enumerator&lt;/code&gt;とすることで、列挙値のスコープ指定を省略できるようにする&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2023.0&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1816R0: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_aggregates.html&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラステンプレートのテンプレート引数推論はコンストラクタ引数から推論されるが、集成体初期化からも推論できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1668R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.html&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない場合にconstexpr関数にasm定義を含めることを許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;2022.3&lt;/td&gt;
&lt;td&gt;2019 Update 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0388R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.html&#34;&gt;要素数不明の配列への変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数が判明している配列から、要素数が不明の配列への変換を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1143R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/constinit.html&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;初期化のみコンパイル時におわらせたい場合に使用する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;2022.3&lt;/td&gt;
&lt;td&gt;2019 Update 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1152R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html&#34;&gt;ほとんどの&lt;code&gt;volatile&lt;/code&gt;を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;volatile&lt;/code&gt;の有用な機能のみを残し、効果が疑わしい、または壊れている機能を非推奨化する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1814R0: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_alias_templates.html&#34;&gt;エイリアステンプレート経由でのクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エイリアステンプレートからクラステンプレートのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0784R7: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/more_constexpr_containers.html&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;記憶域をもつメモリアロケータの存在を考慮することで、可変サイズをもつコンテナをコンパイル時に使用できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;2021.6&lt;/td&gt;
&lt;td&gt;2019 Update 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1957R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/converting_from_pointer_to_bool_should_be_considered_narrowing.html&#34;&gt;ポインタから&lt;code&gt;bool&lt;/code&gt;への変換を縮小変換とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポインタから&lt;code&gt;bool&lt;/code&gt;値への変換を縮小変換と規定することで、意図しない変換を防止する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#note_ref-t1-1&#34; id=&#34;note-t1-1&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; 不明な属性として無視されなくなっただけで期待する効果は得られない。完全に実装されるまでは、代わりに&lt;code&gt;&lt;a href=&#34;https://devblogs.microsoft.com/cppblog/msvc-cpp20-and-the-std-cpp20-switch/#msvc-extensions-and-abi&#34; target=&#34;_blank&#34;&gt;[[msvc::no_unique_address]]&lt;/a&gt;&lt;/code&gt;を使用できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各処理系のC++20実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx20&#34; target=&#34;_blank&#34;&gt;C++20 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++ Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++: &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2020&#34; target=&#34;_blank&#34;&gt;C++ 2020 Implementation Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++: &lt;a href=&#34;https://libcxx.llvm.org/Status/Cxx20.html&#34; target=&#34;_blank&#34;&gt;libc++ C++20 Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/STL/wiki/Changelog&#34; target=&#34;_blank&#34;&gt;次リリース情報(VS2019,2022) - Change log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/technical/c20-features-supported-by-intel-cpp-compiler.html&#34; target=&#34;_blank&#34;&gt;C++20 Features Supported by Intel® C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp23&#34; id=&#34;cpp23&#34;&gt;C++23言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICX&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P0330R8: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/literal_suffix_for_signed_size_t.html&#34;&gt;(符号付き)&lt;code&gt;size_t&lt;/code&gt;リテラルのためのサフィックス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;42z&lt;/code&gt;/&lt;code&gt;42Z&lt;/code&gt;とすることで&lt;code&gt;size_t&lt;/code&gt;に対応する符号付き整数型のリテラルとする&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2290R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/delimited_escape_sequences.md.nolink&#34;&gt;エスケープシーケンスの区切り&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エスケープシーケンスの範囲を明確にする構文を追加する&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2266R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/simpler_implicit_move.md.nolink&#34;&gt;暗黙的なムーブを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照を返す関数の&lt;code&gt;return&lt;/code&gt;文で暗黙的にムーブされない問題を修正&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1787R6: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/declarations_and_where_to_find_them.md.nolink&#34;&gt;スコープと名前ルックアップの仕様整理&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複雑で不完全になっているスコープと名前ルックアップの仕様を整理し、一部の問題を解決する&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2615R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/meaningful_exports.md.nolink&#34;&gt;無意味なexport宣言を禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2360R0: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md.nolink&#34;&gt;初期化文での型の別名宣言を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for (using T = int; T e : v) {}&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2718R0: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/lifetime_extension_in_range_based_for_loop.html&#34;&gt;範囲for文が範囲初期化子内で生じた一時オブジェクトを延命することを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2324R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/labels_at_the_end_of_compound_statements.md.nolink&#34;&gt;関数末尾のラベルを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C互換のため、関数末尾でのgoto文のラベルを許可する&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P0847R7: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/deducing_this.md.nolink&#34;&gt;自身のオブジェクトを明示的にパラメータとして指定する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数が&lt;code&gt;*this&lt;/code&gt;の型・オブジェクトをパラメータとしてとり、&lt;code&gt;*this&lt;/code&gt;オブジェクトがconst/非const、左辺値/右辺値であるかをメンバ関数内で識別できるようにする&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2022 Update 2 (partial)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1847R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/make_declaration_order_layout_mandated.md.nolink&#34;&gt;アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アクセス制御の異なるメンバ変数のレイアウトが実装によって異なっていたため仕様を規定&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2128R6: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/multidimensional_subscript_operator.nd.nolink&#34;&gt;添字演算子の多次元サポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator[](int x, int y, int z)&lt;/code&gt;のように添字演算子のオーバーロードで複数のパラメータをとることを許可&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1169R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/static_operator.md.nolink&#34;&gt;&lt;code&gt;this&lt;/code&gt;ポインタをもつ必要のない演算子を&lt;code&gt;static&lt;/code&gt;として宣言できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2201R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/mixed_string_literal_concatenation.md.nolink&#34;&gt;異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto a = u8&#34;&#34; L&#34;&#34;;&lt;/code&gt;のような異なる文字エンコーディング同士での文字列リテラルを連結を禁止する&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2029R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/numeric_and_universal_character_escapes_in_character_and_string_literals.md.nolink&#34;&gt;文字・文字列リテラル中の数値・ユニバーサルキャラクタのエスケープに関する問題解決&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2362R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md.nolink&#34;&gt;1ワイド文字に収まらないワイド文字リテラルを禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エンコード結果として&lt;code&gt;wchar_t&lt;/code&gt;の大きさに収まらないワイド文字リテラルを禁止する&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2071R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/named_universal_character_escapes.md.nolink&#34;&gt;名前付きユニバーサルキャラクタ名&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;16進数のユニバーサルキャラクタだけでなく、その文字の名前を入力できるようにする&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2096R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/generalized_wording_for_partial_specializations.md.nolink&#34;&gt;部分特殊化の汎用化仕様&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数テンプレートの部分特殊化を許可するために部分特殊化の仕様を汎用化&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2582R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/class_template_argument_deduction_from_inherited.md.nolink&#34;&gt;継承コンストラクタからのクラステンプレート引数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1938R3: &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/if_consteval.md.nolink&#34;&gt;if consteval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時の文脈かどうかで分岐させる&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1401R5: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/narrowing_contextual_conversions_to_bool.md.nolink&#34;&gt;定数式の文脈での&lt;code&gt;bool&lt;/code&gt;への縮小変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(flags &amp;amp; Flags::Exec)&lt;/code&gt;や&lt;code&gt;static_assert(N);&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2242R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/non_literal_variables_in_constexpr_functions.html&#34;&gt;定数式内での非リテラル変数、静的変数・スレッドローカル変数およびgotoとラベルの存在を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない限り、定数式内に静的変数・スレッドローカル変数およびgoto文とラベルを含むことを許可する&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2246R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/character_encoding_of_diagnostic_text.md.nolink&#34;&gt;静的な診断メッセージの文字エンコーディング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などの診断メッセージの文字集合に関する要件をなくす&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2448R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数が定数実行できない場合でも適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;17 (partial)&lt;/td&gt;
&lt;td&gt;2024.0 (partial)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2647R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/permitting_static_constexpr_variables_in_constexpr_functions.md.nolink&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数内での&lt;code&gt;static constexpr&lt;/code&gt;変数を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2564R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/consteval_needs_to_propagate_up.md.nolink&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数内で&lt;code&gt;consteval&lt;/code&gt;関数を呼び出せない問題を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2024.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1102R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/down_with_lambda_parens.md.nolink&#34;&gt;ラムダ式で&lt;code&gt;()&lt;/code&gt;を省略できる条件を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャや修飾をともなってもパラメータリストが空であれば&lt;code&gt;()&lt;/code&gt;を省略できる&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2173R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/attributes_on_lambda_expressions.md.nolink&#34;&gt;ラムダ式に対する属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のいくつかの箇所に属性を記述できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1774R8: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/portable_assumptions.html&#34;&gt;コード内容の仮定をコンパイラに伝えるassume属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最適化のために、コードの仮定をコンパイラに伝える属性を標準化する&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2316R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/consistent_character_literal_encoding.md.nolink&#34;&gt;文字リテラルエンコーディングを一貫させる&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの条件式での文字リテラルの扱いをC++式と同様にする&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2334R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md.nolink&#34;&gt;&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;elifdef&lt;/code&gt;/&lt;code&gt;elifndef&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#if&lt;/code&gt;/&lt;code&gt;#ifdef&lt;/code&gt;/&lt;code&gt;#ifndef&lt;/code&gt;に対応する複数条件命令のサポートを追加する&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2437R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/warning.md.nolink&#34;&gt;&lt;code&gt;#warning&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;多くのC++コンパイラが実装していたプリプロセス時の警告&lt;code&gt;#warning message&lt;/code&gt;を正式サポート&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2295R6: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.md.nolink&#34;&gt;汎用的なソースコードのエンコーディングとしてUTF-8をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2023.2&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2223R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.md.nolink&#34;&gt;行末スペースを無視するよう規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;行末が「&lt;code&gt;\ &lt;/code&gt;」でおわっていた場合にMSVCは行の継続をしない実装になっていたため動作を共通化するため仕様を規定&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;2022.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++23実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx23&#34; target=&#34;_blank&#34;&gt;C++23 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;https://clang.llvm.org/cxx_status.html#cxx23&#34; target=&#34;_blank&#34;&gt;C++2b implementation status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/STL/wiki/Changelog&#34; target=&#34;_blank&#34;&gt;次リリース情報(VS2019,2022) - Change log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICX: &lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/technical/c23-features-supported-by-intel-c-compiler.html&#34; target=&#34;_blank&#34;&gt;C++23 Features Supported by Intel® C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp26&#34; id=&#34;cpp26&#34;&gt;C++26言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICX&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P2752R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/static_storage_for_braced_initializers.md.nolink&#34;&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;の配列を静的ストレージに配置する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::vector v = {1, 2, 3};&lt;/code&gt;のような初期化で初期化子リストを静的ストレージに配置することで無駄なコピーをなくす&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2169R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/nice_placeholder_with_no_name.md.nolink&#34;&gt;宣言のみで使用しない変数の名前として&lt;code&gt;_&lt;/code&gt;をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数名&lt;code&gt;_&lt;/code&gt;は暗黙で&lt;code&gt;[[maybe_unused]]&lt;/code&gt;が指定される&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1854R4: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/making_non-encodable_string_literals_ill-formed.md.nolink&#34;&gt;文字列リテラルの文字エンコーディング失敗を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルのエンコーディング時に文字表現が失われる場合にコンパイルエラーにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2361R6: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/unevaluated_strings.md.nolink&#34;&gt;コンパイル時にのみ使用される文字列の扱いを明確化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などで使用されるコンパイル時の文字列について、文字コードの指定を禁止し、実行時エンコーディングが行われないことを規定&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2552R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/on_the_ignorability_of_standard_attributes.md.nolink&#34;&gt;属性の無視性を見直し&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構文として適格な属性のみを無視できるようにし、そうでない属性の使用を&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;とする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2738R1: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/constexpr_cast_from_voidptr.md.nolink&#34;&gt;定数式での&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型消去のために&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2741R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/user-generated_static_assert_messages.md.nolink&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt;の診断メッセージにユーザーが生成した文字列の指定を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;な&lt;code&gt;S.size()&lt;/code&gt;と&lt;code&gt;S.data()&lt;/code&gt;メンバ関数をもつオブジェクトをコンパイル時文字列として指定できるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2558R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/add_atsign_dollar_graveaccent_to_the_basic_character_set.md.nolink&#34;&gt;基本文字集合に@、$、`を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C言語との互換性のためにこれらの文字を基本文字集合に追加&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2662R3: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/pack_indexing.md.nolink&#34;&gt;パラメータパックへのインデックスアクセスを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;可変引数テンプレートのパラメータパックに添字アクセスできるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2864R2: &lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md.nolink&#34;&gt;非推奨となっていた列挙値から算術型への暗黙変換を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++20から非推奨となっていた列挙値への算術演算で算術型に暗黙変換される仕様を削除&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++26実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx26&#34; target=&#34;_blank&#34;&gt;C++26 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;https://clang.llvm.org/cxx_status.html#cxx26&#34; target=&#34;_blank&#34;&gt;C++2c implementation status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/STL/wiki/Changelog&#34; target=&#34;_blank&#34;&gt;Change log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数テンプレート -- C++26 : 2023-12 Mailingのコア言語側に対応 #1220</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_templates.html"/>
      <id>4b9c2df0161814f19d3b8b37138d9bc1a733eddf:lang/cpp11/variadic_templates.md</id>
      <updated>2024-01-19T15:11:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_templates.md b/lang/cpp11/variadic_templates.md
index 27b024adf..36185d699 100644
--- a/lang/cpp11/variadic_templates.md
+++ b/lang/cpp11/variadic_templates.md
@@ -381,6 +381,7 @@ void f(const T1&amp;amp; t1, const T2&amp;amp; t2, const T3&amp;amp; t3);
 ## 関連項目
 - [C++11 可変引数マクロ](variadic_macros.md)
 - [C++17 畳み込み式](/lang/cpp17/folding_expressions.md)
+- [C++26 パラメータパックへのインデックスアクセスを許可](/lang/cpp26/pack_indexing.md.nolink)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一貫比較 -- C++26 : 2023-12 Mailingのコア言語側に対応 #1220</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>4b9c2df0161814f19d3b8b37138d9bc1a733eddf:lang/cpp20/consistent_comparison.md</id>
      <updated>2024-01-19T15:11:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index c13451d44..dc9123b0b 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -794,6 +794,8 @@ struct has_vector {
         - [`compare_three_way`](/reference/compare/compare_three_way.md)
 - [`&amp;lt;algorithm&amp;gt;`](/reference/algorithm.md)
     - [`lexicographical_compare_three_way`](/reference/algorithm/lexicographical_compare_three_way.md)
+- [C++26 非推奨となっていた列挙値から算術型への暗黙変換を削除](/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md.nolink)
+
 
 ## 参照
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++26 -- C++26 : 2023-12 Mailingのコア言語側に対応 #1220</title>
      <link href="https://cpprefjp.github.io/lang/cpp26.html"/>
      <id>4b9c2df0161814f19d3b8b37138d9bc1a733eddf:lang/cpp26.md</id>
      <updated>2024-01-19T15:11:26+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++26&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++26とは、2026年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2cと呼ばれることがある。「(2020年代の3つ目のバージョンが) 202c年にリリースされる」という伏せ字として「c」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/static_storage_for_braced_initializers.md.nolink&#34;&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;の配列を静的ストレージに配置する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::vector v = {1, 2, 3};&lt;/code&gt;のような初期化で初期化子リストを静的ストレージに配置することで無駄なコピーをなくす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/nice_placeholder_with_no_name.md.nolink&#34;&gt;宣言のみで使用しない変数の名前として&lt;code&gt;_&lt;/code&gt;をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数名&lt;code&gt;_&lt;/code&gt;は暗黙で&lt;code&gt;[[maybe_unused]]&lt;/code&gt;が指定される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md.nolink&#34;&gt;非推奨となっていた列挙値から算術型への暗黙変換を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++20から非推奨となっていた列挙値への算術演算で算術型に暗黙変換される仕様を削除&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/making_non-encodable_string_literals_ill-formed.md.nolink&#34;&gt;文字列リテラルの文字エンコーディング失敗を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルのエンコーディング時に文字表現が失われる場合にコンパイルエラーにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/unevaluated_strings.md.nolink&#34;&gt;コンパイル時にのみ使用される文字列の扱いを明確化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などで使用されるコンパイル時の文字列について、文字コードの指定を禁止し、実行時エンコーディングが行われないことを規定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/on_the_ignorability_of_standard_attributes.md.nolink&#34;&gt;属性の無視性を見直し&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構文として適格な属性のみを無視できるようにし、そうでない属性の使用を&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;とする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/pack_indexing.md.nolink&#34;&gt;パラメータパックへのインデックスアクセスを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;可変引数テンプレートのパラメータパックに添字アクセスできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/constexpr_cast_from_voidptr.md.nolink&#34;&gt;定数式での&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型消去のために&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/user-generated_static_assert_messages.md.nolink&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt;の診断メッセージにユーザーが生成した文字列の指定を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;な&lt;code&gt;S.size()&lt;/code&gt;と&lt;code&gt;S.data()&lt;/code&gt;メンバ関数をもつオブジェクトをコンパイル時文字列として指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ソースコード&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/add_atsign_dollar_graveaccent_to_the_basic_character_set.md.nolink&#34;&gt;基本文字集合に@、$、`を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C言語との互換性のためにこれらの文字を基本文字集合に追加&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文字列エンコーディングを識別するライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/text_encoding.md.nolink&#34;&gt;&amp;lt;text_encoding&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;並行処理におけるデータの参照・更新を行うRCU (Read Copy Update) のライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/rcu.md.nolink&#34;&gt;&amp;lt;rcu&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;並行処理において参照中のデータが更新されないよう保護するハザードポインタのライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/hazard_pointer.md.nolink&#34;&gt;&amp;lt;hazard_pointer&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;std::mdspan&lt;/a&gt;&lt;/code&gt;のサブ配列版として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/submdspan.md.nolink&#34;&gt;std::submdspan&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;連想コンテナの以下のメンバ関数に、一時オブジェクトが生成されるコストを抑える拡張を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/op_at.html&#34;&gt;operator[]&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/try_emplace.html&#34;&gt;try_emplace()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/insert_or_assign.html&#34;&gt;insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_at.html&#34;&gt;operator[]&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/try_emplace.html&#34;&gt;try_emplace()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert_or_assign.html&#34;&gt;insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set.html&#34;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html&#34;&gt;insert()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下のアルゴリズムを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/stable_sort.html&#34;&gt;std::stable_sort()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_stable_sort.html&#34;&gt;std::ranges::stable_sort()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/stable_partition.html&#34;&gt;std::stable_partition()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_stable_partition.html&#34;&gt;std::ranges::stable_partition()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/inplace_merge.html&#34;&gt;std::inplace_merge()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_inplace_merge.html&#34;&gt;std::ranges::stable_partition()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rangeアルゴリズムが完全型を要求しないようにするため、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/projected.html&#34;&gt;std::projected&lt;/a&gt;&lt;/code&gt;の制約を緩和&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有権を保持しない&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function_ref.html&#34;&gt;std::function_ref&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/move_only_function.html&#34;&gt;std::move_only_function&lt;/a&gt;&lt;/code&gt;のコピー可能版として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/copyable_function.html&#34;&gt;std::copyable_function&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_back.md.nolink&#34;&gt;std::bind_back()&lt;/a&gt;&lt;/code&gt;に、非型テンプレート引数として関数を指定するオーバーロードを追加&lt;ul&gt;
&lt;li&gt;関連して、非型テンプレート引数の関数オブジェクトを反転させられるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.html&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;に非型テンプレート引数版のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;の変換結果&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/to_chars_result.html&#34;&gt;std::to_chars_result&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/from_chars_result.html&#34;&gt;std::from_chars_result&lt;/a&gt;&lt;/code&gt;に、変換が正しく完了したかを判定する&lt;code&gt;operator bool&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/to_string.html&#34;&gt;std::to_string()&lt;/a&gt;&lt;/code&gt;の仕様が&lt;code&gt;std::sprintf()&lt;/code&gt;で説明されていたが、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;で定義するよう仕様を変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/sstream/basic_istringstream.html&#34;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/sstream/basic_ostringstream.html&#34;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;のコンストラクタおよび&lt;code&gt;str()&lt;/code&gt;メンバ関数に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;を受け取るオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;に、ポインタ出力のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;で幅と精度を動的に指定した場合でも型の検証がコンパイル時に行われるよう仕様を見直し&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファイル&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ファイルのネイティブハンドルを取得できるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_filebuf.html&#34;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_ifstream.html&#34;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_ofstream.html&#34;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_fstream.html&#34;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt;クラスに、以下のメンバを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;native_handle_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;native_handle()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行・並列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;オブジェクトに対する2つの値の最大値・最小値を取得する関数として、メンバ関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/fetch_max.md.nolink&#34;&gt;fetch_max()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/fetch_min.md.nolink&#34;&gt;fetch_min()&lt;/a&gt;&lt;/code&gt;、非メンバ関数として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_max.md.nolink&#34;&gt;std::atomic_fetch_max&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_max_explicit.md.nolink&#34;&gt;std::atomic_fetch_max_explicit&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_min.md.nolink&#34;&gt;std::atomic_fetch_min&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_min_explicit.md.nolink&#34;&gt;std::atomic_fetch_min_explicit&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;を非順序連想コンテナのキーとして使用できるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に所有権ベースのハッシュ値を取得する関数オブジェクト&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_hash.md.nolink&#34;&gt;std::owner_hash&lt;/a&gt;&lt;/code&gt;、および所有権ベースの等値比較を行う関数オブジェクト&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_equal.md.nolink&#34;&gt;std::owner_equal&lt;/a&gt;&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;関連して、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;クラスのメンバ関数として、&lt;code&gt;owner_hash()&lt;/code&gt;と&lt;code&gt;owner_equal()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;日付・時間&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下のクラスに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;std::hash&lt;/a&gt;&lt;/code&gt;のサポートを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/day.html&#34;&gt;std::chrono::day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month.html&#34;&gt;std::chrono::month&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year.html&#34;&gt;std::chrono::year&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday.html&#34;&gt;std::chrono::weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_indexed.html&#34;&gt;std::chrono::weekday_indexed&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_last.html&#34;&gt;std::chrono::weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_day.html&#34;&gt;std::chrono::month_day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_day_last.html&#34;&gt;std::chrono::month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_weekday.html&#34;&gt;std::chrono::month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_weekday_last.html&#34;&gt;std::chrono::month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month.html&#34;&gt;std::chrono::year_month&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_day.html&#34;&gt;std::chrono::year_month_day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_day_last.html&#34;&gt;std::chrono::year_month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_weekday.html&#34;&gt;std::chrono::year_month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_weekday_last.html&#34;&gt;std::chrono::year_month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/zoned_time.html&#34;&gt;std::chrono::zoned_time&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/leap_second.html&#34;&gt;std::chrono::leap_second&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の関数を、&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cos.html&#34;&gt;std::cos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sin.html&#34;&gt;std::sin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tan.html&#34;&gt;std::tan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cosh.html&#34;&gt;std::cosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sinh.html&#34;&gt;std::sinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tanh.html&#34;&gt;std::tanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/acos.html&#34;&gt;std::acos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/asin.html&#34;&gt;std::asin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan.html&#34;&gt;std::atan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan2.html&#34;&gt;std::atan2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/acosh.html&#34;&gt;std::acosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/asinh.html&#34;&gt;std::asinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atanh.html&#34;&gt;std::atanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/exp.html&#34;&gt;std::exp()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/exp2.html&#34;&gt;std::exp2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/expm1.html&#34;&gt;std::expm1()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log.html&#34;&gt;std::log()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log10.html&#34;&gt;std::log10()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log1p.html&#34;&gt;std::log1p()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log2.html&#34;&gt;std::log2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/pow.html&#34;&gt;std::pow()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sqrt.html&#34;&gt;std::sqrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cbrt.html&#34;&gt;std::cbrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/hypot.html&#34;&gt;std::hypot()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/erf.html&#34;&gt;std::erf()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/erfc.html&#34;&gt;std::erfc()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/lgamma.html&#34;&gt;std::lgamma()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tgamma.html&#34;&gt;std::tgamma()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の関数を、&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/abs.html&#34;&gt;std::abs()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/arg.html&#34;&gt;std::arg()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/proj.html&#34;&gt;std::proj()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/polar.html&#34;&gt;std::polar()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/cos.html&#34;&gt;std::cos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sin.html&#34;&gt;std::sin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/tan.html&#34;&gt;std::tan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/cosh.html&#34;&gt;std::cosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sinh.html&#34;&gt;std::sinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/tanh.html&#34;&gt;std::tanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/acos.html&#34;&gt;std::acos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/asin.html&#34;&gt;std::asin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/atan.html&#34;&gt;std::atan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/acosh.html&#34;&gt;std::acosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/asinh.html&#34;&gt;std::asinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/atanh.html&#34;&gt;std::atanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/exp.html&#34;&gt;std::exp()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/log.html&#34;&gt;std::log()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/log10.html&#34;&gt;std::log10()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/pow.html&#34;&gt;std::pow()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sqrt.html&#34;&gt;std::sqrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;クラスに、メンバ関数版の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant/visit.md.nolink&#34;&gt;visit()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;に、新たなSI接頭辞として、以下を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;ronna&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;27&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;ronto&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;−27&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;quetta&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;30&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;quecto&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;−30&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;共用体のどのメンバがアクティブかを判定するための関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_within_lifetime.md.nolink&#34;&gt;std::is_within_lifetime()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bitset/bitset.html&#34;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;を受け取るコンストラクタを追加&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMapping -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
index 0516a75fc..59560df80 100644
--- a/reference/mdspan/LayoutMapping.md
+++ b/reference/mdspan/LayoutMapping.md
@@ -90,9 +90,9 @@ LayoutMappingを満たす型`M`は
 
 ## `LayoutMapping`に該当する型
 
-- `layout_left::mapping&amp;lt;E&amp;gt;`
-- `layout_right::mapping&amp;lt;E&amp;gt;`
-- `layout_stride::mapping&amp;lt;E&amp;gt;`
+- [`layout_left::mapping&amp;lt;E&amp;gt;`](layout_left/mapping.md)
+- [`layout_right::mapping&amp;lt;E&amp;gt;`](layout_right/mapping.md)
+- [`layout_stride::mapping&amp;lt;E&amp;gt;`](layout_stride/mapping.md)
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extent -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/extent.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/extents/extent.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/extent.md b/reference/mdspan/extents/extent.md
index d27bd5596..f76176307 100644
--- a/reference/mdspan/extents/extent.md
+++ b/reference/mdspan/extents/extent.md
@@ -49,7 +49,6 @@ int main()
 ```
 * extent[color ff0000]
 * static_extent[link static_extent.md]
-* std::extents[link ../extents.md]
 
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_constructor.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/extents/op_constructor.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_constructor.md b/reference/mdspan/extents/op_constructor.md
index 8da24f6ae..30530b9e7 100644
--- a/reference/mdspan/extents/op_constructor.md
+++ b/reference/mdspan/extents/op_constructor.md
@@ -128,7 +128,6 @@ int main()
   }
 }
 ```
-* std::extents[link ../extents.md]
 * std::span[link /reference/span/span.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_deduction_guide.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/extents/op_deduction_guide.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_deduction_guide.md b/reference/mdspan/extents/op_deduction_guide.md
index 29d65744b..e18cb81f3 100644
--- a/reference/mdspan/extents/op_deduction_guide.md
+++ b/reference/mdspan/extents/op_deduction_guide.md
@@ -32,8 +32,6 @@ int main()
   static_assert(std::same_as&amp;lt;decltype(ext3x3), std::dextents&amp;lt;size_t, 2&amp;gt;&amp;gt;);
 }
 ```
-* std::extents[link ../extents.md]
-* std::dextents[link ../extents.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_equal.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/extents/op_equal.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_equal.md b/reference/mdspan/extents/op_equal.md
index 834c44bcf..0f4b7bb14 100644
--- a/reference/mdspan/extents/op_equal.md
+++ b/reference/mdspan/extents/op_equal.md
@@ -47,7 +47,6 @@ int main()
 }
 ```
 * ==[color ff0000]
-* std::extents[link ../extents.md]
 
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rank -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/rank.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/extents/rank.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/rank.md b/reference/mdspan/extents/rank.md
index fc1e9e5ad..0f1ea9ae9 100644
--- a/reference/mdspan/extents/rank.md
+++ b/reference/mdspan/extents/rank.md
@@ -38,7 +38,6 @@ int main()
 ```
 * rank()[color ff0000]
 * rank_dynamic()[link rank_dynamic.md]
-* std::extents[link ../extents.md]
 
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rank_dynamic -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/rank_dynamic.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/extents/rank_dynamic.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/rank_dynamic.md b/reference/mdspan/extents/rank_dynamic.md
index a5b2fdcda..552529dde 100644
--- a/reference/mdspan/extents/rank_dynamic.md
+++ b/reference/mdspan/extents/rank_dynamic.md
@@ -38,8 +38,6 @@ int main()
 ```
 * rank_dynamic()[color ff0000]
 * rank()[link rank.md]
-* std::extents[link ../extents.md]
-
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_extent -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/static_extent.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/extents/static_extent.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/static_extent.md b/reference/mdspan/extents/static_extent.md
index d8cbe1b13..d78fe14f1 100644
--- a/reference/mdspan/extents/static_extent.md
+++ b/reference/mdspan/extents/static_extent.md
@@ -49,8 +49,6 @@ int main()
 ```
 * static_extent[color ff0000]
 * extent[link extent.md]
-* std::extents[link ../extents.md]
-
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_left.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left.md b/reference/mdspan/layout_left.md
index 0d02cd54d..b25b5a862 100644
--- a/reference/mdspan/layout_left.md
+++ b/reference/mdspan/layout_left.md
@@ -52,8 +52,7 @@ int main()
 }
 ```
 * std::layout_left[color ff0000]
-* std::mdspan[link mdspan.md]
-* std::extents[link extents.md]
+* extent[link mdspan/extent.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_left/mapping.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping.md b/reference/mdspan/layout_left/mapping.md
index b6d4264bb..82c48be20 100644
--- a/reference/mdspan/layout_left/mapping.md
+++ b/reference/mdspan/layout_left/mapping.md
@@ -103,8 +103,6 @@ int main()
 }
 ```
 * std::layout_left::mapping[color ff0000]
-* std::mdspan[link ../mdspan.md]
-* std::extents[link ../extents.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_call.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_left/mapping/op_call.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_call.md b/reference/mdspan/layout_left/mapping/op_call.md
index 7be185998..c8b9fc8ab 100644
--- a/reference/mdspan/layout_left/mapping/op_call.md
+++ b/reference/mdspan/layout_left/mapping/op_call.md
@@ -53,7 +53,6 @@ int main()
   assert(map(2,3) == 11);
 }
 ```
-* std::extents[link ../../extents.md]
 * std::layout_left::mapping[link ../mapping.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_constructor.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_left/mapping/op_constructor.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_constructor.md b/reference/mdspan/layout_left/mapping/op_constructor.md
index 4c4b118cf..0f7315570 100644
--- a/reference/mdspan/layout_left/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left/mapping/op_constructor.md
@@ -78,9 +78,6 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
 using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
 
-using Mapping3x4 = ;
-using Mapping3xN = ;
-
 int main()
 {
   // (1) : デフォルトコンストラクタ
@@ -123,8 +120,6 @@ int main()
 }
 ```
 * std::layout_left::mapping[color ff0000]
-* std::extents[link ../../extents.md]
-* std::dextents[link ../../extents.md]
 * std::layout_right::mapping[link ../../layout_right/mapping.md]
 * std::layout_stride::mapping[link ../../layout_stride/mapping.md]
 * required_span_size()[link required_span_size.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_equal.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_left/mapping/op_equal.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_equal.md b/reference/mdspan/layout_left/mapping/op_equal.md
index 2ac7079ad..104465ad8 100644
--- a/reference/mdspan/layout_left/mapping/op_equal.md
+++ b/reference/mdspan/layout_left/mapping/op_equal.md
@@ -51,7 +51,6 @@ int main()
 }
 ```
 * ==[color ff0000]
-* std::extents[link ../../extents.md]
 * std::layout_left::mapping[link ../mapping.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/required_span_size.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_left/mapping/required_span_size.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/required_span_size.md b/reference/mdspan/layout_left/mapping/required_span_size.md
index 4fdcb6eeb..e71b488e8 100644
--- a/reference/mdspan/layout_left/mapping/required_span_size.md
+++ b/reference/mdspan/layout_left/mapping/required_span_size.md
@@ -41,8 +41,6 @@ int main()
 }
 ```
 * required_span_size()[color ff0000]
-* std::extents[link ../../extents.md]
-* std::dextents[link ../../extents.md]
 * std::layout_left::mapping[link ../mapping.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/stride.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_left/mapping/stride.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/stride.md b/reference/mdspan/layout_left/mapping/stride.md
index 0e0180b8b..9e9dad454 100644
--- a/reference/mdspan/layout_left/mapping/stride.md
+++ b/reference/mdspan/layout_left/mapping/stride.md
@@ -54,8 +54,6 @@ int main()
 }
 ```
 * stride[color ff0000]
-* std::extents[link ../../extents.md]
-* std::dextents[link ../../extents.md]
 * std::layout_left::mapping[link ../mapping.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_right.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right.md b/reference/mdspan/layout_right.md
index cd9e6e9a4..58c94e257 100644
--- a/reference/mdspan/layout_right.md
+++ b/reference/mdspan/layout_right.md
@@ -52,8 +52,7 @@ int main()
 }
 ```
 * std::layout_right[color ff0000]
-* std::mdspan[link mdspan.md]
-* std::extents[link extents.md]
+* extent[link mdspan/extent.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_right/mapping.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping.md b/reference/mdspan/layout_right/mapping.md
index 149e98222..891bd98a8 100644
--- a/reference/mdspan/layout_right/mapping.md
+++ b/reference/mdspan/layout_right/mapping.md
@@ -103,8 +103,6 @@ int main()
 }
 ```
 * std::layout_right::mapping[color ff0000]
-* std::mdspan[link ../mdspan.md]
-* std::extents[link ../extents.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_call.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_right/mapping/op_call.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_call.md b/reference/mdspan/layout_right/mapping/op_call.md
index 42420efa5..b36c9c642 100644
--- a/reference/mdspan/layout_right/mapping/op_call.md
+++ b/reference/mdspan/layout_right/mapping/op_call.md
@@ -45,10 +45,6 @@ return ((static_cast&amp;lt;index_type&amp;gt;(Indices...) * stride(P)) + ... + 0);
 int main()
 {
   using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
-  using Mapping = std::layout_stride::mapping&amp;lt;Ext2x3&amp;gt;;
-  std::array strides{4, 1};
-  std::mdspan mat{arr, Mapping{{}, strides}};
-
   using Mapping3x4 = std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;;
   Mapping3x4 map;
   assert(map(0,0) == 0);
@@ -57,8 +53,7 @@ int main()
   assert(map(2,3) == 11);
 }
 ```
-* std::extents[link ../../extents.md]
-* std::layout_stride::mapping[link ../mapping.md]
+* std::layout_right::mapping[link ../mapping.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
index 72e60c94e..b9bf1f36e 100644
--- a/reference/mdspan/layout_right/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -120,8 +120,6 @@ int main()
 }
 ```
 * std::layout_right::mapping[color ff0000]
-* std::extents[link ../../extents.md]
-* std::dextents[link ../../extents.md]
 * std::layout_left::mapping[link ../../layout_left/mapping.md]
 * std::layout_stride::mapping[link ../../layout_stride/mapping.md]
 * required_span_size()[link required_span_size.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_equal.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_right/mapping/op_equal.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_equal.md b/reference/mdspan/layout_right/mapping/op_equal.md
index 7ef766655..a4dc70a82 100644
--- a/reference/mdspan/layout_right/mapping/op_equal.md
+++ b/reference/mdspan/layout_right/mapping/op_equal.md
@@ -51,10 +51,8 @@ int main()
 }
 ```
 * ==[color ff0000]
-* std::extents[link ../../extents.md]
 * std::layout_right::mapping[link ../mapping.md]
 
-
 ### 出力
 ```
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/required_span_size.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_right/mapping/required_span_size.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/required_span_size.md b/reference/mdspan/layout_right/mapping/required_span_size.md
index b6d2e28f0..b340dcf64 100644
--- a/reference/mdspan/layout_right/mapping/required_span_size.md
+++ b/reference/mdspan/layout_right/mapping/required_span_size.md
@@ -41,8 +41,6 @@ int main()
 }
 ```
 * required_span_size()[color ff0000]
-* std::extents[link ../../extents.md]
-* std::dextents[link ../../extents.md]
 * std::layout_right::mapping[link ../mapping.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/stride.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_right/mapping/stride.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/stride.md b/reference/mdspan/layout_right/mapping/stride.md
index e4ab0bac3..dddd2eeed 100644
--- a/reference/mdspan/layout_right/mapping/stride.md
+++ b/reference/mdspan/layout_right/mapping/stride.md
@@ -54,8 +54,6 @@ int main()
 }
 ```
 * stride[color ff0000]
-* std::extents[link ../../extents.md]
-* std::dextents[link ../../extents.md]
 * std::layout_right::mapping[link ../mapping.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
index 69f790cc4..9a6939f29 100644
--- a/reference/mdspan/layout_stride.md
+++ b/reference/mdspan/layout_stride.md
@@ -53,8 +53,8 @@ int main()
 }
 ```
 * std::layout_stride[color ff0000]
-* std::mdspan[link mdspan.md]
-* std::extents[link extents.md]
+* std::layout_stride::mapping[link layout_stride/mapping.md]
+* extent[link mdspan/extent.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_stride/mapping.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping.md b/reference/mdspan/layout_stride/mapping.md
index 81d79bf93..ee1d46372 100644
--- a/reference/mdspan/layout_stride/mapping.md
+++ b/reference/mdspan/layout_stride/mapping.md
@@ -23,7 +23,7 @@ namespace std {
 `layout_stride::mapping`クラステンプレートは、下記の説明専用メンバ変数を保持する。
 
 - `extents_` : `extents_type`型の[多次元配列サイズ情報](../extents.md)
-- `strides_` : `array&amp;lt;index_type,` [`extents_type::rank()`](../extents/rank.md)`&amp;gt;`型のストライド幅配列
+- `strides_` : [`array`](/reference/array/array.md)`&amp;lt;index_type,` [`extents_type::rank()`](../extents/rank.md)`&amp;gt;`型のストライド幅配列
 
 
 ## 適格要件
@@ -107,8 +107,6 @@ int main()
 }
 ```
 * std::layout_stride::mapping[color ff0000]
-* std::mdspan[link ../mdspan.md]
-* std::extents[link ../extents.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_exhaustive -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/is_exhaustive.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_stride/mapping/is_exhaustive.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/is_exhaustive.md b/reference/mdspan/layout_stride/mapping/is_exhaustive.md
index 22ac4e84e..c63ac2c88 100644
--- a/reference/mdspan/layout_stride/mapping/is_exhaustive.md
+++ b/reference/mdspan/layout_stride/mapping/is_exhaustive.md
@@ -28,6 +28,7 @@ constexpr bool is_exhaustive() const noexcept;
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
 #include &amp;lt;mdspan&amp;gt;
 
 int main()
@@ -43,7 +44,6 @@ int main()
 }
 ```
 * is_exhaustive()[color ff0000]
-* std::extents[link ../../extents.md]
 * std::layout_stride::mapping[link ../mapping.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_call.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_stride/mapping/op_call.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_call.md b/reference/mdspan/layout_stride/mapping/op_call.md
index e8ee2367e..cdcf2e782 100644
--- a/reference/mdspan/layout_stride/mapping/op_call.md
+++ b/reference/mdspan/layout_stride/mapping/op_call.md
@@ -40,6 +40,7 @@ return ((static_cast&amp;lt;index_type&amp;gt;(Indices...) * stride(P)) + ... + 0);
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
 #include &amp;lt;mdspan&amp;gt;
 
 int main()
@@ -62,7 +63,6 @@ int main()
   assert(map(3,2,1) == 23);
 }
 ```
-* std::dextents[link ../../extents.md]
 * std::layout_stride::mapping[link ../mapping.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_constructor.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_stride/mapping/op_constructor.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_constructor.md b/reference/mdspan/layout_stride/mapping/op_constructor.md
index 3de01f41a..cc213da70 100644
--- a/reference/mdspan/layout_stride/mapping/op_constructor.md
+++ b/reference/mdspan/layout_stride/mapping/op_constructor.md
@@ -136,7 +136,6 @@ int main()
 }
 ```
 * std::layout_stride::mapping[color ff0000]
-* std::extents[link ../../extents.md]
 * std::layout_right::mapping[link ../../layout_right/mapping.md]
 * std::layout_left::mapping[link ../../layout_left/mapping.md]
 * stride[link stride.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_equal.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_stride/mapping/op_equal.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_equal.md b/reference/mdspan/layout_stride/mapping/op_equal.md
index 2bb0b090c..3bf85cb77 100644
--- a/reference/mdspan/layout_stride/mapping/op_equal.md
+++ b/reference/mdspan/layout_stride/mapping/op_equal.md
@@ -66,7 +66,6 @@ int main()
 }
 ```
 * ==[color ff0000]
-* std::extents[link ../../extents.md]
 * std::layout_stride::mapping[link ../mapping.md]
 * std::layout_left::mapping[link ../../layout_left/mapping.md]
 * std::layout_right::mapping[link ../../layout_right/mapping.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/required_span_size.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_stride/mapping/required_span_size.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/required_span_size.md b/reference/mdspan/layout_stride/mapping/required_span_size.md
index 160e925c3..6cd182df8 100644
--- a/reference/mdspan/layout_stride/mapping/required_span_size.md
+++ b/reference/mdspan/layout_stride/mapping/required_span_size.md
@@ -55,7 +55,6 @@ int main()
 }
 ```
 * required_span_size()[color ff0000]
-* std::extents[link ../../extents.md]
 * std::layout_stride::mapping[link ../mapping.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/stride.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/layout_stride/mapping/stride.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/stride.md b/reference/mdspan/layout_stride/mapping/stride.md
index 1ef0867f2..3c5bf9379 100644
--- a/reference/mdspan/layout_stride/mapping/stride.md
+++ b/reference/mdspan/layout_stride/mapping/stride.md
@@ -39,7 +39,6 @@ int main()
 }
 ```
 * stride[color ff0000]
-* std::dextents[link ../../extents.md]
 * std::layout_stride::mapping[link ../mapping.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/mdspan.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
index 3ab404ac7..3bb309749 100644
--- a/reference/mdspan/mdspan.md
+++ b/reference/mdspan/mdspan.md
@@ -139,8 +139,6 @@ int main()
   }
 }
 ```
-* std::mdspan[color ff0000]
-* std::extents[link extents.md]
 * extent[link mdspan/extent.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>accessor -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/accessor.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/mdspan/accessor.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/accessor.md b/reference/mdspan/mdspan/accessor.md
index 3b248dc46..31f8e8766 100644
--- a/reference/mdspan/mdspan/accessor.md
+++ b/reference/mdspan/mdspan/accessor.md
@@ -37,9 +37,7 @@ int main()
 }
 ```
 * accessor()[color ff0000]
-* std::mdspan[link ../mdspan.md]
-* std::extents[link ../extents.md]
-* acc.access[link ../default_accessor/access.md]
+* access[link ../default_accessor/access.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data_handle -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/data_handle.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/mdspan/data_handle.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/data_handle.md b/reference/mdspan/mdspan/data_handle.md
index b19a2d1bb..f5fc8ea68 100644
--- a/reference/mdspan/mdspan/data_handle.md
+++ b/reference/mdspan/mdspan/data_handle.md
@@ -36,8 +36,6 @@ int main()
 }
 ```
 * data_handle()[color ff0000]
-* std::mdspan[link ../mdspan.md]
-* std::extents[link ../extents.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extent -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/extent.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/mdspan/extent.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/extent.md b/reference/mdspan/mdspan/extent.md
index fe4f0290f..bf3377ec9 100644
--- a/reference/mdspan/mdspan/extent.md
+++ b/reference/mdspan/mdspan/extent.md
@@ -37,8 +37,6 @@ int main()
 }
 ```
 * extent[color ff0000]
-* std::mdspan[link ../mdspan.md]
-* std::dextents[link ../extents.md]
 * static_extent[link static_extent.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extents -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/extents.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/mdspan/extents.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/extents.md b/reference/mdspan/mdspan/extents.md
index a940b1ae1..f6ff72a31 100644
--- a/reference/mdspan/mdspan/extents.md
+++ b/reference/mdspan/mdspan/extents.md
@@ -37,8 +37,6 @@ int main()
 }
 ```
 * extents()[color ff0000]
-* std::mdspan[link ../mdspan.md]
-* std::dextents[link ../extents.md]
 * exts.extent[link ../extents/extent.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/mapping.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/mdspan/mapping.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/mapping.md b/reference/mdspan/mdspan/mapping.md
index b8644d1de..6e120f0c2 100644
--- a/reference/mdspan/mdspan/mapping.md
+++ b/reference/mdspan/mdspan/mapping.md
@@ -37,8 +37,6 @@ int main()
 }
 ```
 * mapping()[color ff0000]
-* std::mdspan[link ../mdspan.md]
-* std::extents[link ../extents.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rank -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/rank.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/mdspan/rank.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/rank.md b/reference/mdspan/mdspan/rank.md
index 7f8fdf2b5..75c7fde5b 100644
--- a/reference/mdspan/mdspan/rank.md
+++ b/reference/mdspan/mdspan/rank.md
@@ -36,8 +36,6 @@ int main()
 }
 ```
 * rank()[color ff0000]
-* std::mdspan[link ../mdspan.md]
-* std::extents[link ../extents.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rank_dynamic -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/rank_dynamic.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/mdspan/rank_dynamic.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/rank_dynamic.md b/reference/mdspan/mdspan/rank_dynamic.md
index ccf24283d..652c9588c 100644
--- a/reference/mdspan/mdspan/rank_dynamic.md
+++ b/reference/mdspan/mdspan/rank_dynamic.md
@@ -36,8 +36,6 @@ int main()
 }
 ```
 * rank_dynamic()[color ff0000]
-* std::mdspan[link ../mdspan.md]
-* std::extents[link ../extents.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_extent -- mdspan: コード修飾調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan/static_extent.html"/>
      <id>b705d4a5c6508097f2adeadf5843973830e50d68:reference/mdspan/mdspan/static_extent.md</id>
      <updated>2024-01-19T00:38:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan/static_extent.md b/reference/mdspan/mdspan/static_extent.md
index 42c41bad0..402b38f08 100644
--- a/reference/mdspan/mdspan/static_extent.md
+++ b/reference/mdspan/mdspan/static_extent.md
@@ -37,8 +37,6 @@ int main()
 }
 ```
 * static_extent[color ff0000]
-* std::mdspan[link ../mdspan.md]
-* std::dextents[link ../extents.md]
 * extent[link extent.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMapping -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
index add212197..0516a75fc 100644
--- a/reference/mdspan/LayoutMapping.md
+++ b/reference/mdspan/LayoutMapping.md
@@ -44,7 +44,7 @@ std::mdspan&amp;lt;int, Extents&amp;gt; mat3x2{a};
 ```
 
 - Unique特性 : 異なる多次元インデクス値は、異なる要素位置に対応する。参照先が重複することはない。
-- Exhaustive特性 : 全ての多次元インデクス値に対応する要素位置は連続している。
+- Exhaustive特性 : 全ての多次元インデクス値に対応する要素位置は隣接配置される。
 - Strided特性 : 多次元インデクス値`i,j`に対応する要素位置は、ストライド幅`2,1`を用いて`i*2+j*1`と計算できる。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_call.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_left/mapping/op_call.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_call.md b/reference/mdspan/layout_left/mapping/op_call.md
index 18c58c9ea..7be185998 100644
--- a/reference/mdspan/layout_left/mapping/op_call.md
+++ b/reference/mdspan/layout_left/mapping/op_call.md
@@ -15,7 +15,7 @@ constexpr index_type operator()(Indices... i) const noexcept;
 
 
 ## テンプレートパラメータ制約
-- `sizeof...(Indices) ==` [`extents_tyoe::rank()`](../../extents/rank.md)が`true`、かつ
+- `sizeof...(Indices) ==` [`extents_type::rank()`](../../extents/rank.md)が`true`、かつ
 - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
 - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_constructor.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_left/mapping/op_constructor.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_constructor.md b/reference/mdspan/layout_left/mapping/op_constructor.md
index 2db5d74df..4c4b118cf 100644
--- a/reference/mdspan/layout_left/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left/mapping/op_constructor.md
@@ -27,7 +27,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 * rank()[link ../../extents/rank.md]
 * layout_right::mapping[link ../../layout_right/mapping.md]
-* layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+* layout_stride::mapping[link ../../layout_stride/mapping.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ
@@ -35,7 +35,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (3) : [`extents`](../../extents.md)からの変換コンストラクタ
 - (4) : 他`layout_left::mapping`からの変換コンストラクタ
 - (5) : [`layout_right::mapping`](../../layout_right/mapping.md)からの変換コンストラクタ
-- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)からの変換コンストラクタ
+- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
 
 
 ## テンプレートパラメータ制約
@@ -52,7 +52,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (6) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_left::mapping`相当の制約](stride.md)をもつこと。
-    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
 
 
 ## 効果
@@ -78,34 +78,34 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
 using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
 
-using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
-using Mapping3xN = std::layout_left::mapping&amp;lt;Ext3xN&amp;gt;;
+using Mapping3x4 = ;
+using Mapping3xN = ;
 
 int main()
 {
   // (1) : デフォルトコンストラクタ
   {
-    Mapping3x4 map1_3x4;
-    Mapping3xN map1_3xN;
+    std::layout_left::mapping&amp;lt;Ext3x4&amp;gt; map1_3x4;
+    std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map1_3xN;
     assert(map1_3x4.required_span_size() == 12);
     assert(map1_3xN.required_span_size() == 0);
   }
   // (2) : コピーコンストラクタ
   {
-    Mapping3xN map2_a;
-    Mapping3xN map2_b = map2_a;
+    std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map2_a;
+    std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map2_b = map2_a;
     assert(map2_a == map2_b);
   }
   // (3) : extentsからの変換コンストラクタ
   {
     Ext3xN ext{4};
-    Mapping3xN map3 = ext;
+    std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map3 = ext;
     assert(map3.extents() == ext);
   }
   // (4) : layout_left::mappingからの変換コンストラクタ
   {
-    Mapping3x4 map4_3x4;
-    Mapping3xN map4_3xN = map4_3x4;
+    std::layout_left::mapping&amp;lt;Ext3x4&amp;gt; map4_3x4;
+    std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map4_3xN = map4_3x4;
     assert(map4_3x4 == map4_3xN);
   }
   // (5) : layout_right::mappingからの変換コンストラクタ
@@ -122,11 +122,11 @@ int main()
   }
 }
 ```
+* std::layout_left::mapping[color ff0000]
 * std::extents[link ../../extents.md]
 * std::dextents[link ../../extents.md]
-* std::layout_left::mapping[link ../mapping.md]
 * std::layout_right::mapping[link ../../layout_right/mapping.md]
-* std::layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+* std::layout_stride::mapping[link ../../layout_stride/mapping.md]
 * required_span_size()[link required_span_size.md]
 
 ### 出力
@@ -147,7 +147,7 @@ int main()
 
 ## 関連項目
 - [`layout_right::mapping`](../../layout_right/mapping.md)
-- [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/required_span_size.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_left/mapping/required_span_size.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/required_span_size.md b/reference/mdspan/layout_left/mapping/required_span_size.md
index 40419fe69..4fdcb6eeb 100644
--- a/reference/mdspan/layout_left/mapping/required_span_size.md
+++ b/reference/mdspan/layout_left/mapping/required_span_size.md
@@ -6,7 +6,7 @@
 * cpp23[meta cpp]
 
 ```cpp
-index_type required_span_size() const noexcept;
+constexpr index_type required_span_size() const noexcept;
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_call.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_right/mapping/op_call.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_call.md b/reference/mdspan/layout_right/mapping/op_call.md
index a8c41860e..42420efa5 100644
--- a/reference/mdspan/layout_right/mapping/op_call.md
+++ b/reference/mdspan/layout_right/mapping/op_call.md
@@ -15,7 +15,7 @@ constexpr index_type operator()(Indices... i) const noexcept;
 
 
 ## テンプレートパラメータ制約
-- `sizeof...(Indices) ==` [`extents_tyoe::rank()`](../../extents/rank.md)が`true`、かつ
+- `sizeof...(Indices) ==` [`extents_type::rank()`](../../extents/rank.md)が`true`、かつ
 - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
 - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
 
@@ -45,6 +45,10 @@ return ((static_cast&amp;lt;index_type&amp;gt;(Indices...) * stride(P)) + ... + 0);
 int main()
 {
   using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext2x3&amp;gt;;
+  std::array strides{4, 1};
+  std::mdspan mat{arr, Mapping{{}, strides}};
+
   using Mapping3x4 = std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;;
   Mapping3x4 map;
   assert(map(0,0) == 0);
@@ -54,7 +58,7 @@ int main()
 }
 ```
 * std::extents[link ../../extents.md]
-* std::layout_right::mapping[link ../mapping.md]
+* std::layout_stride::mapping[link ../mapping.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
index 34679786b..72e60c94e 100644
--- a/reference/mdspan/layout_right/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -27,7 +27,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 * rank()[link ../../extents/rank.md]
 * layout_left::mapping[link ../../layout_left/mapping.md]
-* layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+* layout_stride::mapping[link ../../layout_stride/mapping.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ
@@ -35,7 +35,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (3) : [`extents`](../../extents.md)からの変換コンストラクタ
 - (4) : 他`layout_right::mapping`からの変換コンストラクタ
 - (5) : [`layout_left::mapping`](../../layout_left/mapping.md)からの変換コンストラクタ
-- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)からの変換コンストラクタ
+- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
 
 
 ## テンプレートパラメータ制約
@@ -52,7 +52,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (6) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_right::mapping`相当の制約](stride.md)をもつこと。
-    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
 
 
 ## 効果
@@ -78,34 +78,31 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
 using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
 
-using Mapping3x4 = std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;;
-using Mapping3xN = std::layout_right::mapping&amp;lt;Ext3xN&amp;gt;;
-
 int main()
 {
   // (1) : デフォルトコンストラクタ
   {
-    Mapping3x4 map1_3x4;
-    Mapping3xN map1_3xN;
+    std::layout_right::mapping&amp;lt;Ext3x4&amp;gt; map1_3x4;
+    std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map1_3xN;
     assert(map1_3x4.required_span_size() == 12);
     assert(map1_3xN.required_span_size() == 0);
   }
   // (2) : コピーコンストラクタ
   {
-    Mapping3xN map2_a;
-    Mapping3xN map2_b = map2_a;
+    std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map2_a;
+    std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map2_b = map2_a;
     assert(map2_a == map2_b);
   }
   // (3) : extentsからの変換コンストラクタ
   {
     Ext3xN ext{4};
-    Mapping3xN map3 = ext;
+    std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map3 = ext;
     assert(map3.extents() == ext);
   }
   // (4) : layout_right::mappingからの変換コンストラクタ
   {
-    Mapping3x4 map4_3x4;
-    Mapping3xN map4_3xN = map4_3x4;
+    std::layout_right::mapping&amp;lt;Ext3x4&amp;gt; map4_3x4;
+    std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map4_3xN = map4_3x4;
     assert(map4_3x4 == map4_3xN);
   }
   // (5) : layout_left::mappingからの変換コンストラクタ
@@ -122,11 +119,11 @@ int main()
   }
 }
 ```
+* std::layout_right::mapping[color ff0000]
 * std::extents[link ../../extents.md]
 * std::dextents[link ../../extents.md]
-* std::layout_right::mapping[link ../mapping.md]
 * std::layout_left::mapping[link ../../layout_left/mapping.md]
-* std::layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+* std::layout_stride::mapping[link ../../layout_stride/mapping.md]
 * required_span_size()[link required_span_size.md]
 
 ### 出力
@@ -147,7 +144,7 @@ int main()
 
 ## 関連項目
 - [`layout_left::mapping`](../../layout_left/mapping.md)
-- [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/required_span_size.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_right/mapping/required_span_size.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/required_span_size.md b/reference/mdspan/layout_right/mapping/required_span_size.md
index 234805799..b6d2e28f0 100644
--- a/reference/mdspan/layout_right/mapping/required_span_size.md
+++ b/reference/mdspan/layout_right/mapping/required_span_size.md
@@ -6,7 +6,7 @@
 * cpp23[meta cpp]
 
 ```cpp
-index_type required_span_size() const noexcept;
+constexpr index_type required_span_size() const noexcept;
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
index a2b9899de..69f790cc4 100644
--- a/reference/mdspan/layout_stride.md
+++ b/reference/mdspan/layout_stride.md
@@ -13,7 +13,7 @@ namespace std {
 }
 ```
 * Extents[link extents.md]
-* mapping[link layout_stride/mapping.md.nolink]
+* mapping[link layout_stride/mapping.md]
 
 ## 概要
 `layout_stride`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定した[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
@@ -25,7 +25,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`mapping`](mapping.md.nolink) | レイアウトマッピング | C++23 |
+| [`mapping`](layout_stride/mapping.md) | レイアウトマッピング | C++23 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping.md b/reference/mdspan/layout_stride/mapping.md
new file mode 100644
index 000000000..81d79bf93
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping.md
@@ -0,0 +1,136 @@
+# mapping
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* layout_stride[meta class]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Extents&amp;gt;
+  class layout_stride::mapping;
+}
+```
+* layout_stride[link ../layout_stride.md]
+* Extents[link ../extents.md]
+
+## 概要
+`layout_stride::mapping&amp;lt;E&amp;gt;`は、[`extents`](../extents.md)型の多次元配列サイズ`E`をパラメータとして、次元毎に任意ストライド幅を指定した[レイアウトマッピング](../LayoutMapping.md)を表現するクラスである。
+
+`layout_stride::mapping&amp;lt;E&amp;gt;`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`regular`](/reference/concepts/regular.md)のモデルである。
+
+### 説明専用メンバ変数
+`layout_stride::mapping`クラステンプレートは、下記の説明専用メンバ変数を保持する。
+
+- `extents_` : `extents_type`型の[多次元配列サイズ情報](../extents.md)
+- `strides_` : `array&amp;lt;index_type,` [`extents_type::rank()`](../extents/rank.md)`&amp;gt;`型のストライド幅配列
+
+
+## 適格要件
+- `Extents`は[`extents`](../extents.md)の特殊化であること。
+- [`Extents::rank_dynamic()`](../extents/rank_dynamic.md) `== 0`が`true`のとき、多次元インデクス空間`Extents()`のサイズが`Extents::index_type`型で表現できること。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](mapping/op_constructor.md) | コンストラクタ | C++23 |
+| `(destructor)` | デストラクタ | C++23 |
+| `operator=`    | コピー代入演算子 | C++23 |
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents` | 多次元配列のサイズ`extents_`を取得する | C++23 |
+| `strides` | ストライド配列`strides_`を取得する | C++23 |
+| [`required_span_size`](mapping/required_span_size.md) | 要素アクセス範囲を取得する | C++23 |
+| [`operator()`](mapping/op_call.md) | 多次元配列インデクスから要素位置へ変換する | C++23 |
+| [`is_exhaustive`](mapping/is_exhaustive.md) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++23 |
+| [`stride`](mapping/stride.md) | 指定次元のストライド幅を取得する | C++23 |
+
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `is_always_unique`     | `true`を返す | C++23 |
+| `is_always_exhaustive` | `false`を返す | C++23 |
+| `is_always_strided`    | `true`を返す | C++23 |
+| `is_unique`     | `true`を返す | C++23 |
+| `is_strided`    | `true`を返す | C++23 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents_type` | [`Extents`](../extents.md) | C++23 |
+| `index_type` | [`Extents::index_type`](../extents.md) | C++23 |
+| `size_type` | [`Extents::size_type`](../extents.md) | C++23 |
+| `rank_type` | [`Extents::rank_type`](../extents.md) | C++23 |
+| `layout_type` | [`layout_stride`](../layout_stride.md) | C++23 |
+
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](mapping/op_equal.md) | 等値比較 | C++23 |
+| [`operator!=`](mapping/op_equal.md) | 非等値比較 (`==`により使用可能) | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 3, 0, 4, 5, 6, 0};
+
+  // 要素数2x3の2次元配列／パディングあり行優先レイアウト
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext2x3&amp;gt;;
+  std::array strides{4, 1};
+  std::mdspan mat{arr, Mapping{{}, strides}};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::cout &amp;lt;&amp;lt; (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;) &amp;lt;&amp;lt; mat[i, j];
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* std::layout_stride::mapping[color ff0000]
+* std::mdspan[link ../mdspan.md]
+* std::extents[link ../extents.md]
+
+### 出力
+```
+1 2 3
+4 5 6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`mdspan`](../mdspan.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_exhaustive -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/is_exhaustive.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/is_exhaustive.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/is_exhaustive.md b/reference/mdspan/layout_stride/mapping/is_exhaustive.md
new file mode 100644
index 000000000..22ac4e84e
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/is_exhaustive.md
@@ -0,0 +1,66 @@
+# is_exhaustive
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr bool is_exhaustive() const noexcept;
+```
+
+## 概要
+レイアウトマッピングの[Exhaustive特性](../../LayoutMapping.md)を取得する。
+
+
+## 戻り値
+多次元インデクスの次元数を`rank_`としたとき
+
+- `rank_ == 0`のとき、`true`を返す。
+- そうでなければ、取りうる全ての多次元インデクス値に対応する要素位置を考えたとき、アクセスされうる要素位置に隙間が生じないならば`true`を返す。
+- そうでなければ、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext2x3&amp;gt;;
+
+  Mapping map1{{}, std::array{3, 1}};
+  assert(map1.is_exhaustive());
+
+  Mapping map2{{}, std::array{4, 1}};
+  assert(not map2.is_exhaustive());
+}
+```
+* is_exhaustive()[color ff0000]
+* std::extents[link ../../extents.md]
+* std::layout_stride::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout-mapping-alike -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/layout-mapping-alike.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/layout-mapping-alike.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/layout-mapping-alike.md b/reference/mdspan/layout_stride/mapping/layout-mapping-alike.md
new file mode 100644
index 000000000..ab4ac4ca4
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/layout-mapping-alike.md
@@ -0,0 +1,31 @@
+# layout-mapping-alike
+* mdspan[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class M&amp;gt;
+concept layout-mapping-alike = requires {  // exposition only
+  requires is-extents&amp;lt;typename M::extents_type&amp;gt;;
+  { M::is_always_strided() } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+  { M::is_always_exhaustive() } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+  { M::is_always_unique() } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+  bool_constant&amp;lt;M::is_always_strided()&amp;gt;::value;
+  bool_constant&amp;lt;M::is_always_exhaustive()&amp;gt;::value;
+  bool_constant&amp;lt;M::is_always_unique()&amp;gt;::value;
+};
+```
+
+## 概要
+`layout_stride::mapping`動作仕様のための説明専用コンセプトである。
+
+
+## バージョン
+### 言語
+- C++23
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_call.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/op_call.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_call.md b/reference/mdspan/layout_stride/mapping/op_call.md
new file mode 100644
index 000000000..e8ee2367e
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/op_call.md
@@ -0,0 +1,85 @@
+# operator()
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class... Indices&amp;gt;
+constexpr index_type operator()(Indices... i) const noexcept;
+```
+
+## 概要
+多次元インデクス値`i...`に対応する要素位置を求める。
+
+
+## テンプレートパラメータ制約
+- `sizeof...(Indices) ==` [`extents_type::rank()`](../../extents/rank.md)が`true`、かつ
+- `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+- `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+
+
+## 事前条件
+多次元インデクス値[`extents_type::index-cast(i)`](../../extents/index-cast.md)は、多次元配列サイズ`extents_`における有効なインデクスであること。
+
+
+## 戻り値
+説明用のパラメータパック`P`において、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`index_sequence_for`](/reference/utility/index_sequence_for.md)`&amp;lt;Indices...&amp;gt;,` [`index_sequence`](/reference/utility/index_sequence.md)`&amp;lt;P...&amp;gt;&amp;gt;`が`true`となるとき、以下と等価。
+
+```cpp
+return ((static_cast&amp;lt;index_type&amp;gt;(Indices...) * stride(P)) + ... + 0);
+```
+* stride[link stride.md]
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3D = std::dextents&amp;lt;size_t, 3&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext3D&amp;gt;;
+  std::array strides{6, 1, 3};
+  Mapping map{Ext3D{4, 3, 2}, strides};
+  // map(i,j,k):
+  // i=   0  |   1   |   2   |   3
+  //   ------+-------+-------+-------
+  // j/k -&amp;gt;
+  // |  0  3 |  6  9 | 12 15 | 18 21
+  // V  1  4 |  7 10 | 13 16 | 19 22
+  //    2  5 |  8 11 | 14 17 | 20 23
+  assert(map(0,0,0) == 0);
+  assert(map(1,0,0) == 6);
+  assert(map(0,1,0) == 1);
+  assert(map(0,0,1) == 3);
+  assert(map(3,2,1) == 23);
+}
+```
+* std::dextents[link ../../extents.md]
+* std::layout_stride::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_constructor.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/op_constructor.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_constructor.md b/reference/mdspan/layout_stride/mapping/op_constructor.md
new file mode 100644
index 000000000..3de01f41a
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/op_constructor.md
@@ -0,0 +1,167 @@
+# コンストラクタ
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr mapping() noexcept;  // (1)
+
+constexpr mapping(const mapping&amp;amp;) noexcept = default;  // (2)
+
+template&amp;lt;class OtherIndexType&amp;gt;
+  constexpr mapping(const extents_type&amp;amp;, span&amp;lt;OtherIndexType, rank_&amp;gt;) noexcept;  // (3)
+
+template&amp;lt;class OtherIndexType&amp;gt;
+  constexpr mapping(const extents_type&amp;amp;, const array&amp;lt;OtherIndexType, rank_&amp;gt;&amp;amp;) noexcept;  // (4)
+
+template&amp;lt;class StridedLayoutMapping&amp;gt;
+  constexpr explicit(see below) mapping(const StridedLayoutMapping&amp;amp;) noexcept;  // (5)
+```
+* span[link /reference/span/span.md]
+* array[link /reference/array/array.md]
+* rank_[italic]
+* see below[italic]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : コピーコンストラクタ
+- (3), (4) : [`extents`](../../extents.md)とストライド幅からの構築（定数`rank_`は次元数）
+- (5) : [レイアウトマッピング](../../LayoutMapping.md)からの変換コンストラクタ
+
+
+## テンプレートパラメータ制約
+- (3), (4) :
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const OtherIndexType&amp;amp;, index_type&amp;gt;`が`true`、かつ
+    - [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, const OtherIndexType&amp;amp;&amp;gt;`が`true`であること。
+- (5) :
+   - [`layout-mapping-alike`](layout-mapping-alike.md)`&amp;lt;StridedLayoutMapping&amp;gt;`を満たす
+   - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, typename StridedLayoutMapping::extents_type&amp;gt; == true`
+   - `StridedLayoutMapping::is_always_unique() == true`
+   - `StridedLayoutMapping::is_always_strided() == true`
+
+
+## 事前条件
+- (1) : [`layout_right::mapping&amp;lt;extents_type&amp;gt;()`](../../layout_right/mapping.md)`.`[`required_span_size()`](../../layout_right/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (3), (4) :
+    -　半開区間`[0, rank_)`の全ての`i`に対して、`s[i]`を`index_type`へ変換した結果が`0`より大きいこと。
+    - [`REQUIRED-SPAN-SIZE`](required_span_size.md)`(e, s)`を`index_type`型で表現できること。
+    - `rank_`が`0`より大きいとき、半開区間`[1, rank_)`の全ての`i`に対して`j = i-1`として`s[Pi] &amp;gt;= s[Pj] * e.extents(Pj)`を満たすの整数値の組合せ`P`が存在すること。
+- (5) :
+    - `StridedLayoutMapping`が[レイアウトマッピングポリシー](../../LayoutMappingPolicy.md)を満たす
+    - `extents()`の全ての次元`r`に対して`other.stride(r) &amp;gt; 0`
+    - `other.required_span_size()`を`index_type`型で表現できること
+    - [`OFFSET`](op_equal.md)`(other) == 0`
+
+
+## 効果
+- (1) : `extents_type()`で`extents_`を直接非リスト初期化し、全ての次元`d`に対して[`layout_right::mapping&amp;lt;extents_type&amp;gt;()`](../../layout_right/mapping.md)`.`[`stride(d)`](../../layout_right/mapping/stride.md)で`strides_[d]`を直接非リスト初期化する。
+- (3), (4) : `e`で`extents_`を直接非リスト初期化し、全ての次元`d`に対して[`as_const`](/reference/utility/as_const.md)`(s[d])`で`strides_[d]`を直接非リスト初期化する。
+- (5) : `other.extents()`で`extents_`を直接非リスト初期化し、全ての次元`d`に対して`other.stride(d)`で`strides_[d]`を直接非リスト初期化する。
+
+
+## 例外
+投げない
+
+
+## explicitになる条件
+説明専用の変数テンプレート`is-mapping-of`を下記の通り定義する：
+
+```cpp
+template&amp;lt;class Layout, class Mapping&amp;gt;
+constexpr bool is-mapping-of = // exposition only
+  is_same_v&amp;lt;typename Layout::template mapping&amp;lt;typename Mapping::extents_type&amp;gt;, Mapping&amp;gt;;
+```
+* is-mapping-of[italic]
+* is_same_v[link /reference/type_traits/is_same.md]
+
+- (5) : `explicit`指定子の式は以下と等価
+```cpp
+!(is_convertible_v&amp;lt;typename StridedLayoutMapping::extents_type, extents_type&amp;gt; &amp;amp;&amp;amp;
+  (is-mapping-of&amp;lt;layout_left, StridedLayoutMapping&amp;gt; ||
+   is-mapping-of&amp;lt;layout_right, StridedLayoutMapping&amp;gt; ||
+   is-mapping-of&amp;lt;layout_stride, StridedLayoutMapping&amp;gt;))
+```
+* is_convertible_v[link /reference/type_traits/is_convertible.md]
+* is-mapping-of[italic]
+* layout_left[link ../../layout_left.md]
+* layout_right[link ../../layout_right.md]
+* layout_stride[link ../../layout_stride.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+
+int main()
+{
+  // (1) : デフォルトコンストラクタ
+  {
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map1;
+    std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;  map1R;
+    assert(map1 == map1R);
+  }
+  // (2) : コピーコンストラクタ
+  {
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map2_a;
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map2_b = map2_a;
+    assert(map2_a == map2_b);
+  }
+  // (3) : extentsとストライド幅(span)による構築
+  {
+    int strides[] = {4, 1};
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map3{Ext3x4{}, std::span(strides)};
+    assert(map3.stride(0) == 4);
+    assert(map3.stride(1) == 1);
+  }
+  // (4) : extentsとストライド幅(array)による構築
+  {
+    std::array strides{4, 1};
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map4{Ext3x4{}, strides};
+    assert(map4.stride(0) == 4);
+    assert(map4.stride(1) == 1);
+  }
+  // (5) : レイアウトマッピングからの変換コンストラクタ
+  {
+    std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;   map5L;
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map5 = map5L;
+    assert(map5 == map5L);
+  }
+}
+```
+* std::layout_stride::mapping[color ff0000]
+* std::extents[link ../../extents.md]
+* std::layout_right::mapping[link ../../layout_right/mapping.md]
+* std::layout_left::mapping[link ../../layout_left/mapping.md]
+* stride[link stride.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_left::mapping`](../../layout_left/mapping.md)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [P2763R1 `layout_stride` static extents default constructor fix](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2763r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_equal.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/op_equal.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_equal.md b/reference/mdspan/layout_stride/mapping/op_equal.md
new file mode 100644
index 000000000..2bb0b090c
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/op_equal.md
@@ -0,0 +1,92 @@
+# operator==
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class OtherMapping&amp;gt;
+friend constexpr bool operator==(const mapping&amp;amp; x, const OtherMapping&amp;amp; y) noexcept;
+
+//operator==により、以下のオーバーロードが使用可能になる        
+template&amp;lt;class OtherExtents&amp;gt;
+friend constexpr bool operator!=(const mapping&amp;amp; x, const OtherMapping&amp;amp; y) noexcept;
+```
+
+## 概要
+`mapping`の等値比較を行う。
+
+
+## テンプレートパラメータ制約
+- [`layout-mapping-alike`](layout-mapping-alike.md)`&amp;lt;OtherMapping&amp;gt;`を満たすこと。
+- `extents_type::rank() == OtherMapping::extents_type::rank()`
+- `OtherMapping::is_always_strided() == true`
+
+
+## 事前条件
+`OtherMapping`は[レイアウトマッピング要件](../../LayoutMapping.md)を満たすこと。
+
+
+## 戻り値
+説明専用の関数`OFFSET(m)`を下記の通り定義する：
+
+- 多次元インデクスが0次元のとき[`m()`](op_call.md)
+- そうでなければ、多次元インデクス空間のサイズが0のとき値`0`
+- そうでなければ、多次元インデクス値の全要素が0である整数パック`z`を用いて[`m(z...)`](op_call.md)
+
+下記条件を全て満たすとき、`true`を返す。そうでなければ、`false`を返す。
+
+- `x.extents() == y.extents()`
+- `OFFSET(y) == 0`
+- 全ての次元`r`において[`x.stride(r)`](stride.md) `== y.stride(y)`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext4x3x2 = std::extents&amp;lt;size_t, 4, 3, 2&amp;gt;;
+
+  std::layout_stride::mapping&amp;lt;Ext4x3x2&amp;gt; map1{{}, std::array{1, 4, 12}};
+  std::layout_left::mapping&amp;lt;Ext4x3x2&amp;gt;   mapL;
+  assert(map1 == mapL);
+
+  std::layout_stride::mapping&amp;lt;Ext4x3x2&amp;gt; map2{{}, std::array{6, 2, 1}};
+  std::layout_right::mapping&amp;lt;Ext4x3x2&amp;gt;  mapR;
+  assert(map2 == mapR);
+}
+```
+* ==[color ff0000]
+* std::extents[link ../../extents.md]
+* std::layout_stride::mapping[link ../mapping.md]
+* std::layout_left::mapping[link ../../layout_left/mapping.md]
+* std::layout_right::mapping[link ../../layout_right/mapping.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/required_span_size.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/required_span_size.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/required_span_size.md b/reference/mdspan/layout_stride/mapping/required_span_size.md
new file mode 100644
index 000000000..160e925c3
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/required_span_size.md
@@ -0,0 +1,78 @@
+# required_span_size
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr index_type required_span_size() const noexcept;
+```
+
+## 概要
+メモリブロックに対する要素アクセス範囲を取得する。
+
+説明用の関数`REQUIRED-SPAN-SIZE(e, strides)`を次のように定義する
+
+- `e.`[`rank()`](../../extents/rank.md) `== 0`のとき値`1`
+- そうでなければ、多次元インデクス空間`e`のサイズが0のとき値`0`
+- そうでなければ、半開区間`[0, e.rank())`の全ての`r`に対して`(e.`[`extent`](../../extents/extent.md)`(r) - 1)`と[`extents_type::index-cast`](../../extents/index-cast.md)`(strides_[r])`を乗じた値の総和に`1`を加算した値
+
+
+## 戻り値
+説明専用のメンバ変数`extents_`, `strides_`に対して、`REQUIRED-SPAN-SIZE(extents_, strides_)`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext2x3&amp;gt;;
+
+  Mapping map1{{}, std::array{4, 1}};
+  assert(map1.required_span_size() == 7);
+  // map1(i,j):
+  // i/j -&amp;gt;
+  // |  1 2 3 (4)
+  // V  5 6 7  -
+
+  Mapping map2{{}, std::array{2, 3}};
+  assert(map2.required_span_size() == 9);
+  // map2(i,j):
+  // i/j -&amp;gt;
+  // |   1   4   7
+  // V  (2) (5) (8)
+  //     3   6   9
+}
+```
+* required_span_size()[color ff0000]
+* std::extents[link ../../extents.md]
+* std::layout_stride::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/stride.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/stride.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/stride.md b/reference/mdspan/layout_stride/mapping/stride.md
new file mode 100644
index 000000000..1ef0867f2
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/stride.md
@@ -0,0 +1,62 @@
+# stride
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr index_type stride(rank_type i) const noexcept;
+```
+
+## 概要
+`i`番目次元のストライド幅を取得する。
+
+
+## 戻り値
+説明専用のメンバ変数`strides_`を用いて、`strides_[i]`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3D = std::dextents&amp;lt;size_t, 3&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext3D&amp;gt;;
+  std::array strides{6, 1, 3};
+  Mapping map{Ext3D{4, 3, 2}, strides};
+  assert(map.stride(0) == 6);
+  assert(map.stride(1) == 1);
+  assert(map.stride(2) == 3);
+}
+```
+* stride[color ff0000]
+* std::dextents[link ../../extents.md]
+* std::layout_stride::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left.md b/reference/mdspan/layout_left.md
index 791be790c..0d02cd54d 100644
--- a/reference/mdspan/layout_left.md
+++ b/reference/mdspan/layout_left.md
@@ -13,7 +13,7 @@ namespace std {
 }
 ```
 * Extents[link extents.md]
-* mapping[link mapping.md.nolink]
+* mapping[link layout_left/mapping.md]
 
 ## 概要
 `layout_left`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、FortranやMatlab多次元配列と互換性のある列優先(column major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
@@ -27,7 +27,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`mapping`](mapping.md.nolink) | レイアウトマッピング | C++23 |
+| [`mapping`](layout_left/mapping.md) | レイアウトマッピング | C++23 |
 
 
 ## 例
@@ -37,7 +37,7 @@ namespace std {
 
 int main()
 {
-  double arr[] = {1, 4, 2, 5, 3, 6};
+  double arr[] = {1, 2, 3, 4, 5, 6};
 
   // 要素数2x3の2次元配列／列優先レイアウト
   using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
@@ -57,8 +57,8 @@ int main()
 
 ### 出力
 ```
-1 2 3
-4 5 6
+1 3 5
+2 4 6
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping.md b/reference/mdspan/layout_left/mapping.md
new file mode 100644
index 000000000..b6d4264bb
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping.md
@@ -0,0 +1,132 @@
+# mapping
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* layout_left[meta class]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Extents&amp;gt;
+  class layout_left::mapping;
+}
+```
+* layout_left[link ../layout_left.md]
+* Extents[link ../extents.md]
+
+## 概要
+`layout_left::mapping&amp;lt;E&amp;gt;`は、[`extents`](../extents.md)型の多次元配列サイズ`E`をパラメータとして、Fortran/Matlab多次元配列と互換性のある列優先(column major)[レイアウトマッピング](../LayoutMapping.md)を表現するクラスである。
+
+`layout_left::mapping&amp;lt;E&amp;gt;`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`regular`](/reference/concepts/regular.md)のモデルである。
+
+### 説明専用メンバ変数
+`layout_left::mapping`クラステンプレートは、下記の説明専用メンバ変数を保持する。
+
+- `extents_` : `extents_type`型の[多次元配列サイズ情報](../extents.md)
+
+
+## 適格要件
+- `Extents`は[`extents`](../extents.md)の特殊化であること。
+- [`Extents::rank_dynamic()`](../extents/rank_dynamic.md) `== 0`が`true`のとき、多次元インデクス空間`Extents()`のサイズが`Extents::index_type`型で表現できること。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](mapping/op_constructor.md) | コンストラクタ | C++23 |
+| `(destructor)` | デストラクタ | C++23 |
+| `operator=`    | コピー代入演算子 | C++23 |
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents` | 多次元配列のサイズ`extents_`を取得する | C++23 |
+| [`required_span_size`](mapping/required_span_size.md) | 要素アクセス範囲を取得する | C++23 |
+| [`operator()`](mapping/op_call.md) | 多次元配列インデクスから要素位置へ変換する | C++23 |
+| [`stride`](mapping/stride.md) | 指定次元のストライド幅を取得する | C++23 |
+
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `is_always_unique`     | `true`を返す | C++23 |
+| `is_always_exhaustive` | `true`を返す | C++23 |
+| `is_always_strided`    | `true`を返す | C++23 |
+| `is_unique`     | `true`を返す | C++23 |
+| `is_exhaustive` | `true`を返す | C++23 |
+| `is_strided`    | `true`を返す | C++23 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents_type` | [`Extents`](../extents.md) | C++23 |
+| `index_type` | [`Extents::index_type`](../extents.md) | C++23 |
+| `size_type` | [`Extents::size_type`](../extents.md) | C++23 |
+| `rank_type` | [`Extents::rank_type`](../extents.md) | C++23 |
+| `layout_type` | [`layout_left`](../layout_left.md) | C++23 |
+
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](mapping/op_equal.md) | 等値比較 | C++23 |
+| [`operator!=`](mapping/op_equal.md) | 非等値比較 (`==`により使用可能) | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 3, 4, 5, 6};
+
+  // 要素数2x3の2次元配列／列優先レイアウト
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  using Mapping = std::layout_left::mapping&amp;lt;Ext2x3&amp;gt;;
+  std::mdspan mat{arr, Mapping{}};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::cout &amp;lt;&amp;lt; (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;) &amp;lt;&amp;lt; mat[i, j];
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* std::layout_left::mapping[color ff0000]
+* std::mdspan[link ../mdspan.md]
+* std::extents[link ../extents.md]
+
+### 出力
+```
+1 3 5
+2 4 6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`mdspan`](../mdspan.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_call.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping/op_call.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_call.md b/reference/mdspan/layout_left/mapping/op_call.md
new file mode 100644
index 000000000..18c58c9ea
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping/op_call.md
@@ -0,0 +1,76 @@
+# operator()
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_left::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class... Indices&amp;gt;
+constexpr index_type operator()(Indices... i) const noexcept;
+```
+
+## 概要
+多次元インデクス値`i...`に対応する要素位置を求める。
+
+
+## テンプレートパラメータ制約
+- `sizeof...(Indices) ==` [`extents_tyoe::rank()`](../../extents/rank.md)が`true`、かつ
+- `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+- `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+
+
+## 事前条件
+多次元インデクス値[`extents_type::index-cast(i)`](../../extents/index-cast.md)は、多次元配列サイズ`extents_`における有効なインデクスであること。
+
+
+## 戻り値
+説明用のパラメータパック`P`において、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`index_sequence_for`](/reference/utility/index_sequence_for.md)`&amp;lt;Indices...&amp;gt;,` [`index_sequence`](/reference/utility/index_sequence.md)`&amp;lt;P...&amp;gt;&amp;gt;`が`true`となるとき、以下と等価。
+
+```cpp
+return ((static_cast&amp;lt;index_type&amp;gt;(Indices...) * stride(P)) + ... + 0);
+```
+* stride[link stride.md]
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map;
+  assert(map(0,0) == 0);
+  assert(map(0,1) == 3);
+  assert(map(1,0) == 1);
+  assert(map(2,3) == 11);
+}
+```
+* std::extents[link ../../extents.md]
+* std::layout_left::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_constructor.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping/op_constructor.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_constructor.md b/reference/mdspan/layout_left/mapping/op_constructor.md
new file mode 100644
index 000000000..2db5d74df
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping/op_constructor.md
@@ -0,0 +1,154 @@
+# コンストラクタ
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_left::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr mapping() noexcept = default;  // (1)
+
+constexpr mapping(const mapping&amp;amp;) noexcept = default;  // (2)
+
+constexpr mapping(const extents_type&amp;amp; e) noexcept;  // (3)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
+  mapping(const mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (4)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
+  mapping(const layout_right::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (5)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(extents_type::rank() &amp;gt; 0)
+  mapping(const layout_stride::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (6)
+```
+* is_convertible_v[link /reference/type_traits/is_convertible.md]
+* rank()[link ../../extents/rank.md]
+* layout_right::mapping[link ../../layout_right/mapping.md]
+* layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : コピーコンストラクタ
+- (3) : [`extents`](../../extents.md)からの変換コンストラクタ
+- (4) : 他`layout_left::mapping`からの変換コンストラクタ
+- (5) : [`layout_right::mapping`](../../layout_right/mapping.md)からの変換コンストラクタ
+- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)からの変換コンストラクタ
+
+
+## テンプレートパラメータ制約
+- (4) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (5) :
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;lt;= 1`、かつ
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (6) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+
+
+## 事前条件
+- (3) : `e`の多次元インデクス空間のサイズを、`index_type`型で表現できること。
+- (4) : `other.`[`required_span_size()`](required_span_size.md)を、`index_type`型で表現できること。
+- (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (6) :
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_left::mapping`相当の制約](stride.md)をもつこと。
+    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+
+
+## 効果
+- (3) : `e`を用いて`extents_`を直接非リスト初期化する。
+- (4), (5), (6) : `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+
+
+## 例外
+投げない
+
+
+## explicitになる条件
+- (4), (5) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherExtents, extents_type&amp;gt;`
+- (6) : [`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+
+using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
+using Mapping3xN = std::layout_left::mapping&amp;lt;Ext3xN&amp;gt;;
+
+int main()
+{
+  // (1) : デフォルトコンストラクタ
+  {
+    Mapping3x4 map1_3x4;
+    Mapping3xN map1_3xN;
+    assert(map1_3x4.required_span_size() == 12);
+    assert(map1_3xN.required_span_size() == 0);
+  }
+  // (2) : コピーコンストラクタ
+  {
+    Mapping3xN map2_a;
+    Mapping3xN map2_b = map2_a;
+    assert(map2_a == map2_b);
+  }
+  // (3) : extentsからの変換コンストラクタ
+  {
+    Ext3xN ext{4};
+    Mapping3xN map3 = ext;
+    assert(map3.extents() == ext);
+  }
+  // (4) : layout_left::mappingからの変換コンストラクタ
+  {
+    Mapping3x4 map4_3x4;
+    Mapping3xN map4_3xN = map4_3x4;
+    assert(map4_3x4 == map4_3xN);
+  }
+  // (5) : layout_right::mappingからの変換コンストラクタ
+  {
+    using Ext1D = std::dextents&amp;lt;size_t, 1&amp;gt;;
+    std::layout_right::mapping&amp;lt;Ext1D&amp;gt; src5{Ext1D{5}};
+    std::layout_left::mapping&amp;lt;Ext1D&amp;gt;  dst5 = src5;
+  }
+  // (6) : layout_stride::mappingからの変換コンストラクタ
+  {
+    std::array strides{1, 3};
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; src6{{}, strides};
+    std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;   dst6{src6};  // (explicit)
+  }
+}
+```
+* std::extents[link ../../extents.md]
+* std::dextents[link ../../extents.md]
+* std::layout_left::mapping[link ../mapping.md]
+* std::layout_right::mapping[link ../../layout_right/mapping.md]
+* std::layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+* required_span_size()[link required_span_size.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_right::mapping`](../../layout_right/mapping.md)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_equal.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping/op_equal.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_equal.md b/reference/mdspan/layout_left/mapping/op_equal.md
new file mode 100644
index 000000000..2ac7079ad
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping/op_equal.md
@@ -0,0 +1,75 @@
+# operator==
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_left::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class OtherExtents&amp;gt;
+friend constexpr bool operator==(
+  const mapping&amp;amp; x, const mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; y) noexcept;
+
+//operator==により、以下のオーバーロードが使用可能になる        
+template&amp;lt;class OtherExtents&amp;gt;
+friend constexpr bool operator!=(
+  const mapping&amp;amp; x, const mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; y) noexcept;
+```
+
+## 概要
+`mapping`の等値比較を行う。
+
+
+## テンプレートパラメータ制約
+`extents_type::`[`rank()`](../../extents/rank.md) `== OtherExtents::`[`rank()`](../../extents/rank.md)
+
+
+## 戻り値
+[`x.extents() == y.extents()`](../../extents/op_equal.md)
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map1;
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  using Mapping3xN = std::layout_left::mapping&amp;lt;Ext3xN&amp;gt;;
+  Mapping3xN map2{Ext3xN{4}};
+
+  assert(map1 == map2);
+}
+```
+* ==[color ff0000]
+* std::extents[link ../../extents.md]
+* std::layout_left::mapping[link ../mapping.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/required_span_size.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping/required_span_size.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/required_span_size.md b/reference/mdspan/layout_left/mapping/required_span_size.md
new file mode 100644
index 000000000..40419fe69
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping/required_span_size.md
@@ -0,0 +1,65 @@
+# required_span_size
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+index_type required_span_size() const noexcept;
+```
+
+## 概要
+メモリブロックに対する要素アクセス範囲を取得する。
+
+
+## 戻り値
+多次元配列サイズ[`extents()`](../mapping.md)に対して、全次元の要素数を乗算した値。
+次元数が0の場合は、値1を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map1{};
+  assert(map1.required_span_size() == 12);
+
+  using Ext3D = std::dextents&amp;lt;size_t, 3&amp;gt;;
+  using Mapping3D = std::layout_left::mapping&amp;lt;Ext3D&amp;gt;;
+  Mapping3D map2{Ext3D{4, 3, 2}};
+  assert(map2.required_span_size() == 24);
+}
+```
+* required_span_size()[color ff0000]
+* std::extents[link ../../extents.md]
+* std::dextents[link ../../extents.md]
+* std::layout_left::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/stride.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping/stride.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/stride.md b/reference/mdspan/layout_left/mapping/stride.md
new file mode 100644
index 000000000..0e0180b8b
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping/stride.md
@@ -0,0 +1,78 @@
+# stride
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr index_type stride(rank_type i) const noexcept;
+```
+
+## 概要
+`i`番目次元のストライド幅を取得する。
+
+
+## テンプレートパラメータ制約
+[`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+
+
+## 事前条件
+`i &amp;lt;` [`extents_type::rank()`](../../extents/rank.md)
+
+
+## 戻り値
+多次元配列サイズの次元数`R =` [`extents_type::rank()`](../../extents/rank.md)としたとき
+
+- `i &amp;gt; 0`のとき、最左次元(`0`番目)から`i - 1`番目次元までの要素数を乗算した値を返す。
+- `i == 0`のとき、値1を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map1;
+  assert(map1.stride(0) == 1);
+  assert(map1.stride(1) == 3);
+
+  using Ext3D = std::dextents&amp;lt;size_t, 3&amp;gt;;
+  using Mapping3D = std::layout_left::mapping&amp;lt;Ext3D&amp;gt;;
+  Mapping3D map2{Ext3D{4, 3, 2}};
+  assert(map2.stride(0) == 1);
+  assert(map2.stride(1) == 4);
+  assert(map2.stride(2) == 12);
+}
+```
+* stride[color ff0000]
+* std::extents[link ../../extents.md]
+* std::dextents[link ../../extents.md]
+* std::layout_left::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_right/mapping.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping.md b/reference/mdspan/layout_right/mapping.md
index 5ba076930..149e98222 100644
--- a/reference/mdspan/layout_right/mapping.md
+++ b/reference/mdspan/layout_right/mapping.md
@@ -7,10 +7,8 @@
 
 ```cpp
 namespace std {
-  struct layout_right {
-    template&amp;lt;class Extents&amp;gt;
-    class mapping;
-  };
+  template&amp;lt;class Extents&amp;gt;
+  class layout_right::mapping;
 }
 ```
 * layout_right[link ../layout_right.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
index 13665be4e..34679786b 100644
--- a/reference/mdspan/layout_right/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -26,7 +26,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ```
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 * rank()[link ../../extents/rank.md]
-* layout_left::mapping[link ../../layout_left/mapping.md.nolink]
+* layout_left::mapping[link ../../layout_left/mapping.md]
 * layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
 
 ## 概要
@@ -34,7 +34,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (2) : コピーコンストラクタ
 - (3) : [`extents`](../../extents.md)からの変換コンストラクタ
 - (4) : 他`layout_right::mapping`からの変換コンストラクタ
-- (5) : [`layout_left::mapping`](../../layout_left/mapping.md.nolink)からの変換コンストラクタ
+- (5) : [`layout_left::mapping`](../../layout_left/mapping.md)からの変換コンストラクタ
 - (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)からの変換コンストラクタ
 
 
@@ -49,7 +49,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ## 事前条件
 - (3) : `e`の多次元インデクス空間のサイズを、`index_type`型で表現できること。
 - (4) : `other.`[`required_span_size()`](required_span_size.md)を、`index_type`型で表現できること。
-- (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+- (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (6) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_right::mapping`相当の制約](stride.md)をもつこと。
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
@@ -125,7 +125,7 @@ int main()
 * std::extents[link ../../extents.md]
 * std::dextents[link ../../extents.md]
 * std::layout_right::mapping[link ../mapping.md]
-* std::layout_left::mapping[link ../../layout_left/mapping.md.nolink]
+* std::layout_left::mapping[link ../../layout_left/mapping.md]
 * std::layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
 * required_span_size()[link required_span_size.md]
 
@@ -146,7 +146,7 @@ int main()
 
 
 ## 関連項目
-- [`layout_left::mapping`](../../layout_left/mapping.md.nolink)
+- [`layout_left::mapping`](../../layout_left/mapping.md)
 - [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
index 875850089..a2b9899de 100644
--- a/reference/mdspan/layout_stride.md
+++ b/reference/mdspan/layout_stride.md
@@ -13,7 +13,7 @@ namespace std {
 }
 ```
 * Extents[link extents.md]
-* mapping[link mapping.md.nolink]
+* mapping[link layout_stride/mapping.md.nolink]
 
 ## 概要
 `layout_stride`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定した[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all -- std::ranges::views::all ページ上部の名前空間表示を std::ranges から std::ranges::views に修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/all.html"/>
      <id>323fd208be6218fdffd9b27c76bf5cf554f3e3ad:reference/ranges/all.md</id>
      <updated>2024-01-17T11:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/all.md b/reference/ranges/all.md
index ce8ebd6cd..f0d0da82c 100644
--- a/reference/ranges/all.md
+++ b/reference/ranges/all.md
@@ -1,6 +1,6 @@
 # all
 * ranges[meta header]
-* std::ranges[meta namespace]
+* std::ranges::views[meta namespace]
 * cpo[meta id-type]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Hiroyuki Hori</name>
        <email>43978282+hi-hori@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
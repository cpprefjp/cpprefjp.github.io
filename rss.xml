<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-05T06:54:36.778439</updated>
  <id>4f66a7a9-0d63-476c-b888-980623234533</id>

  
    <entry>
      <title>ranges::advance -- ranges::advance : リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ranges_advance.html"/>
      <id>ff7da10d9c36265a118935336738ec18513790ae:reference/iterator/ranges_advance.md</id>
      <updated>2020-11-05T15:43:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ranges_advance.md b/reference/iterator/ranges_advance.md
index a8a1f15da..6a32351b8 100644
--- a/reference/iterator/ranges_advance.md
+++ b/reference/iterator/ranges_advance.md
@@ -53,7 +53,7 @@ namespace std::ranges {
     - `S, I`が[`sized_sentinel_for`](sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルとなる : `ranges::advance(i, bound - i)`（(1)に委譲）
     - それ以外の場合 : `bool(i != bound) == true`である間、`i`をインクリメントする
 - (3) : 次のいずれかによって、イテレータへの参照`i`を`bound`を超えないように`n`回進める(`n`が負数の場合は逆方向に進める)。
-    - `S, I`が[`sized_sentinel_for`](iterator/sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルとなり
+    - `S, I`が[`sized_sentinel_for`](sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルとなり
         - `|n| &amp;gt;= |bound - i|` : `ranges::advance(i, bound)`（(2)に委譲）
         - `|n| &amp;lt;  |bound - i|` : `ranges::advance(i, n)`（(1)に委譲）
     - それ以外の場合で
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges::advance -- ranges::advance : リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ranges_advance.html"/>
      <id>d73394596fe3b089ce36ab57ebcf8cc971e6ba18:reference/iterator/ranges_advance.md</id>
      <updated>2020-11-05T15:41:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ranges_advance.md b/reference/iterator/ranges_advance.md
index 29be5cd75..a8a1f15da 100644
--- a/reference/iterator/ranges_advance.md
+++ b/reference/iterator/ranges_advance.md
@@ -35,22 +35,22 @@ namespace std::ranges {
 
 ## 事前条件
 
-- (1) : `I`が[`bidirectional_iterator`](iterator/bidirectional_iterator.md)のモデルとならない場合、`n`は負数ではない
+- (1) : `I`が[`bidirectional_iterator`](bidirectional_iterator.md)のモデルとならない場合、`n`は負数ではない
 - (2) : `[i, bound)`は有効な範囲である
 - (3) : 次のいずれか
     - `n &amp;gt;  0` : `[i, bound)`は有効な範囲である
     - `n == 0` : `[i, bound)`もしくは`[bound, i)`は有効な範囲である
-    - `n &amp;lt;  0` : `[bound, i)`は有効な範囲であり、`I`は[`bidirectional_iterator`](iterator/bidirectional_iterator.md)のモデルであり、`I, S`は[`same_as`](/reference/concepts/same_as.md)`&amp;lt;I, S&amp;gt;`のモデルとなる。
+    - `n &amp;lt;  0` : `[bound, i)`は有効な範囲であり、`I`は[`bidirectional_iterator`](bidirectional_iterator.md)のモデルであり、`I, S`は[`same_as`](/reference/concepts/same_as.md)`&amp;lt;I, S&amp;gt;`のモデルとなる。
 
 ## 効果
 
 - (1) : 次のいずれかによって、イテレータへの参照`i`を`n`回進める(`n`が負数の場合は逆方向に進める)。
-    - `I`が[`random_access_iterator`](iterator/random_access_iterator.md)のモデルとなる : `i += n`
+    - `I`が[`random_access_iterator`](random_access_iterator.md)のモデルとなる : `i += n`
     - `n`が正数 : `i`を`n`回インクリメントする
     - `n`が負数 : `i`を`-n`回デクリメントする
 - (2) : 次のいずれかによって、イテレータへの参照`i`を`bound`まで進める。
     - `I, S`が[`assignable_from`](/reference/concepts/assignable_from.md)`&amp;lt;I&amp;amp;, S&amp;gt;`のモデルとなる : `i = std::move(bound)`
-    - `S, I`が[`sized_sentinel_for`](iterator/sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルとなる : `ranges::advance(i, bound - i)`（(1)に委譲）
+    - `S, I`が[`sized_sentinel_for`](sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルとなる : `ranges::advance(i, bound - i)`（(1)に委譲）
     - それ以外の場合 : `bool(i != bound) == true`である間、`i`をインクリメントする
 - (3) : 次のいずれかによって、イテレータへの参照`i`を`bound`を超えないように`n`回進める(`n`が負数の場合は逆方向に進める)。
     - `S, I`が[`sized_sentinel_for`](iterator/sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルとなり
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hh_mm_ss -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/hh_mm_ss.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss.md b/reference/chrono/hh_mm_ss.md
index b1fa9105c..a5edf92d0 100644
--- a/reference/chrono/hh_mm_ss.md
+++ b/reference/chrono/hh_mm_ss.md
@@ -28,7 +28,7 @@ namespace std::chrono {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](hh_mm_ss/op_constructor.md.nolink) | コンストラクタ | C++20 |
+| [`(constructor)`](hh_mm_ss/op_constructor.md) | コンストラクタ | C++20 |
 | `hh_mm_ss&amp;amp; operator=(const hh_mm_ss&amp;amp;) = default;`&amp;lt;br/&amp;gt; `hh_mm_ss&amp;amp; operator=(hh_mm_ss&amp;amp;&amp;amp;) = default;` | 代入演算子 | C++20 |
 
 
@@ -36,11 +36,13 @@ namespace std::chrono {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`is_negative`](hh_mm_ss/is_negative.md.nolink) | 負の時間間隔かを判定する | C++20 |
-| [`hours`](hh_mm_ss/hours.md.nolink)             | 時フィールドを取得する | C++20 |
-| [`minutes`](hh_mm_ss/minutes.md.nolink)         | 分フィールドを取得する | C++20 |
-| [`seconds`](hh_mm_ss/seconds.md.nolink)         | 秒フィールドを取得する | C++20 |
-| [`subseconds`](hh_mm_ss/subseconds.md.nolink)   | 秒未満の時間間隔を取得する | C++20 |
+| [`is_negative`](hh_mm_ss/is_negative.md) | 負の時間かを判定する | C++20 |
+| [`hours`](hh_mm_ss/hours.md)             | 時フィールドを取得する | C++20 |
+| [`minutes`](hh_mm_ss/minutes.md)         | 分フィールドを取得する | C++20 |
+| [`seconds`](hh_mm_ss/seconds.md)         | 秒フィールドを取得する | C++20 |
+| [`subseconds`](hh_mm_ss/subseconds.md)   | 秒未満を取得する | C++20 |
+| [`to_duration`](hh_mm_ss/to_duration.md) | 時:分:秒、秒未満をもつ`duration`オブジェクトに変換する | C++20 |
+| [`operator precision`](hh_mm_ss/op_precision.md) | 時:分:秒、秒未満をもつ`duration`オブジェクトに明示的に変換する | C++20 |
 
 
 ## メンバ定数
@@ -62,14 +64,14 @@ namespace std::chrono {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator&amp;lt;&amp;lt;`](hh_mm_ss/op_ostream.md.nolink) | 出力ストリームに出力する | C++20 |
+| [`operator&amp;lt;&amp;lt;`](hh_mm_ss/op_ostream.md) | 出力ストリームに出力する | C++20 |
 
 
 ## 文字列フォーマット
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`formatter`](hh_mm_ss/formatter.md.nolink) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+| [`formatter`](hh_mm_ss/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
 
 
 ## 例
@@ -113,7 +115,7 @@ int main()
 - C++20
 
 ### 処理系
-- [Clang](/implementation.md#clang): 10.0
-- [GCC](/implementation.md#gcc): 11.1
+- [Clang](/implementation.md#clang): 10.0 (出力ストリームなし)
+- [GCC](/implementation.md#gcc): 11.1 (出力ストリームなし)
 - [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/formatter.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/hh_mm_ss/formatter.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/formatter.md b/reference/chrono/hh_mm_ss/formatter.md
new file mode 100644
index 000000000..f28beb60d
--- /dev/null
+++ b/reference/chrono/hh_mm_ss/formatter.md
@@ -0,0 +1,86 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::hh_mm_ss, charT&amp;gt;;
+}
+```
+
+## 概要
+`hh_mm_ss`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+| フォーマットフラグ | 説明 |
+|--------------------|------|
+| `%H`  | 24時間時計での10進数の時 |
+| `%I`  | 12時間時計での10進数の時 |
+| `%M`  | 10進数での分 |
+| `%S`  | 10進数での秒 (秒未満を含む) |
+| `%p`  | 12時間時計でのロケール依存の午前・午後の表現 |
+| `%R`  | `%H:%M`と等価 |
+| `%r`  | 12時間時計でのロケール依存の時間 |
+| `%T`  | `%H:%M:%S`と等価 |
+| `%X`  | ロケール依存の時間表現 |
+| `%EX` | ロケール依存の別な時間表現 |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main() {
+  chrono::hh_mm_ss time{15h + 30min + 20s};
+
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, time) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%H時%M分%S秒}&amp;#34;, time) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {:%R}&amp;#34;, time) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : {:%T}&amp;#34;, time) &amp;lt;&amp;lt; std::endl;
+
+  // ロケール依存の出力
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;5 : {:%p%I時%M分%S秒}&amp;#34;, time) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;6 : {:%r}&amp;#34;, time) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;7 : {:%X}&amp;#34;, time) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::format[link /reference/chrono/format.md]
+* std::locale[link /reference/locale/locale.md]
+* 15h[link /reference/chrono/duration/op_h.md]
+* 30min[link /reference/chrono/duration/op_min.md]
+* 20s[link /reference/chrono/duration/op_s.md]
+
+### 出力
+```
+1 : 15:30:20
+2 : 15時30分20秒
+3 : 15:30
+4 : 15:30:20
+5: 午後03時30分20秒
+6: 午後03時30分20秒
+7: 15時30分20秒
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (10.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (10.1時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hours -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/hours.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/hh_mm_ss/hours.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/hours.md b/reference/chrono/hh_mm_ss/hours.md
new file mode 100644
index 000000000..82ca38d72
--- /dev/null
+++ b/reference/chrono/hh_mm_ss/hours.md
@@ -0,0 +1,49 @@
+# hours
+* chrono[meta header]
+* std::chrono[meta namespace]
+* hh_mm_ss[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr chrono::hours hours() const noexcept; // (1) C++20
+```
+
+## 概要
+時フィールドを取得する。
+
+
+## 戻り値
+コンストラクタで設定された時を返す。
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  chrono::hh_mm_ss time{-(15h + 30min + 20s)};
+  assert(time.hours() == 15h);
+}
+```
+* hours()[color ff0000]
+* 15h[link /reference/chrono/duration/op_h.md]
+* 30min[link /reference/chrono/duration/op_min.md]
+* 20s[link /reference/chrono/duration/op_s.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 10.0
+- [GCC](/implementation.md#gcc): 11.1
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_negative -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/is_negative.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/hh_mm_ss/is_negative.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/is_negative.md b/reference/chrono/hh_mm_ss/is_negative.md
new file mode 100644
index 000000000..7ce718e4d
--- /dev/null
+++ b/reference/chrono/hh_mm_ss/is_negative.md
@@ -0,0 +1,49 @@
+# is_negative
+* chrono[meta header]
+* std::chrono[meta namespace]
+* hh_mm_ss[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr bool is_negative() const noexcept; // (1) C++20
+```
+
+## 概要
+負の時間かを判定する。
+
+
+## 戻り値
+コンストラクタで設定された時間が負である場合に`true`を返し、そうでなければ`false`を返す
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  chrono::hh_mm_ss time{-(15h + 30min + 20s)};
+  assert(time.is_negative() == true);
+}
+```
+* is_negative()[color ff0000]
+* 15h[link /reference/chrono/duration/op_h.md]
+* 30min[link /reference/chrono/duration/op_min.md]
+* 20s[link /reference/chrono/duration/op_s.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 10.0
+- [GCC](/implementation.md#gcc): 11.1
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minutes -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/minutes.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/hh_mm_ss/minutes.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/minutes.md b/reference/chrono/hh_mm_ss/minutes.md
new file mode 100644
index 000000000..7ec946f79
--- /dev/null
+++ b/reference/chrono/hh_mm_ss/minutes.md
@@ -0,0 +1,49 @@
+# minutes
+* chrono[meta header]
+* std::chrono[meta namespace]
+* hh_mm_ss[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr chrono::minutes minutes() const noexcept; // (1) C++20
+```
+
+## 概要
+分フィールドを取得する。
+
+
+## 戻り値
+コンストラクタで設定された分を返す。
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  chrono::hh_mm_ss time{-(15h + 30min + 20s)};
+  assert(time.minutes() == 30min);
+}
+```
+* minutes()[color ff0000]
+* 15h[link /reference/chrono/duration/op_h.md]
+* 30min[link /reference/chrono/duration/op_min.md]
+* 20s[link /reference/chrono/duration/op_s.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 10.0
+- [GCC](/implementation.md#gcc): 11.1
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/op_constructor.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/hh_mm_ss/op_constructor.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/op_constructor.md b/reference/chrono/hh_mm_ss/op_constructor.md
new file mode 100644
index 000000000..dcade40df
--- /dev/null
+++ b/reference/chrono/hh_mm_ss/op_constructor.md
@@ -0,0 +1,101 @@
+# コンストラクタ
+* chrono[meta header]
+* std::chrono[meta namespace]
+* hh_mm_ss[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr hh_mm_ss() noexcept
+  : hh_mm_ss{Duration::zero()} {}        // (1) C++20
+
+constexpr explicit hh_mm_ss(Duration d); // (2) C++20
+
+hh_mm_ss(const hh_mm_ss&amp;amp;);               // (3) C++20
+hh_mm_ss(hh_mm_ss&amp;amp;&amp;amp;);                    // (4) C++20
+```
+* zero()[link /reference/chrono/duration/zero.md]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : 時間間隔を指定して時:分:秒、秒未満に分割する
+- (3) : コピーコンストラクタ
+- (4) : ムーブコンストラクタ
+
+
+## 効果
+- (1) : `Duration`型の値ゼロで時間を構築する
+- (2) : `precision`型の精度で`Duration d`をもつ`hh_mm_ss`オブジェクトを構築する
+    - `d &amp;lt; Duration::`[`zero()`](/reference/chrono/duration/zero.md)である場合、負の時間とみなし[`is_negative()`](is_negative.md)が`true`を返すようにする
+    - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::hours`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.ms)`(d))`で時を構築する
+    - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::minutes`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.ms)`(d) -` [`hours()`](hours.md)`)`で分を構築する
+    - [`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;`[`chrono::seconds`](/reference/chrono/duration_aliases.md)`&amp;gt;(`[`abs`](/reference/chrono/duration/abs.ms)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md)`)`で秒を構築する
+    - [`treat_as_floating_point_v`](/reference/chrono/treat_as_floating_point.md)`&amp;lt;precision::rep&amp;gt;`が`true`である場合、秒未満は`[`abs`](/reference/chrono/duration/abs.ms)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md)` `-` [`seconds()`](seconds.md)で構築する。そうでなければ、[`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;precision&amp;gt;(`[`abs`](/reference/chrono/duration/abs.ms)`(d) -` [`hours()`](hours.md) `-` [`minutes()`](minutes.md) `-` [`seconds()`](seconds.md)`)`で秒未満を構築する
+
+
+## 事後条件
+- (2) : [`treat_as_floating_point_v`](/reference/chrono/treat_as_floating_point.md)`&amp;lt;precision::rep&amp;gt;`が`true`である場合、[`to_duration()`](to_duration.md)は`d`を返し、そうでなければ[`to_duration()`](to_duration.md)は[`duration_cast`](/reference/chrono/duration_cast.md)`&amp;lt;precision&amp;gt;(d)`を返す
+
+
+## 備考
+- (2) : `precision::rep`が整数型で、`precision::period`が[`ratio`](/reference/ratio/ratio.md)`&amp;lt;1&amp;gt;`である場合、[`subseconds()`](subseconds.md)は常に[`0s`](/reference/chrono/duration/op_s.md)となる
+
+
+### 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  chrono::hh_mm_ss time1{15h + 30min + 20s};
+  assert(time1.is_negative() == false);
+  assert(time1.hours() == 15h);
+  assert(time1.minutes() == 30min);
+  assert(time1.seconds() == 20s);
+  assert(time1.subseconds() == 0s);
+
+  // 負の時間
+  chrono::hh_mm_ss time2{-(15h + 30min + 20s)};
+  assert(time2.is_negative() == true);
+  assert(time2.hours() == 15h);
+  assert(time2.minutes() == 30min);
+  assert(time2.seconds() == 20s);
+  assert(time2.subseconds() == 0s);
+
+  // 秒未満をもつ時間
+  chrono::hh_mm_ss time3{15h + 30min + 20s + 123ms};
+  assert(time3.is_negative() == false);
+  assert(time3.hours() == 15h);
+  assert(time3.minutes() == 30min);
+  assert(time3.seconds() == 20s);
+  assert(time3.subseconds() == 123ms);
+}
+```
+* 15h[link /reference/chrono/duration/op_h.md]
+* 30min[link /reference/chrono/duration/op_min.md]
+* 20s[link /reference/chrono/duration/op_s.md]
+* 0s[link /reference/chrono/duration/op_s.md]
+* 123ms[link /reference/chrono/duration/op_ms.md]
+* is_negative()[link is_negative.md]
+* hours()[link hours.md]
+* minutes()[link minutes.md]
+* seconds()[link seconds.md]
+* subseconds()[link subseconds.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 10.0
+- [GCC](/implementation.md#gcc): 11.1
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/op_ostream.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/hh_mm_ss/op_ostream.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/op_ostream.md b/reference/chrono/hh_mm_ss/op_ostream.md
new file mode 100644
index 000000000..ead77b83f
--- /dev/null
+++ b/reference/chrono/hh_mm_ss/op_ostream.md
@@ -0,0 +1,74 @@
+# operator&amp;lt;&amp;lt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits, class Duration&amp;gt;
+  std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os, const hh_mm_ss&amp;lt;Duration&amp;gt;&amp;amp; hms); // (1) C++20
+}
+```
+
+## 概要
+`hh_mm_ss`オブジェクトを出力ストリームに出力する。
+
+
+## 戻り値
+便宜上のリテラルキャスト`STATICALLY-WIDEN`を導入する。`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;...&amp;#34;)`は、`charT`が`char`である場合は`&amp;#34;...&amp;#34;`、`charT`が`wchar_t`である場合は`L&amp;#34;...&amp;#34;`を意味する。
+
+- (1) : 以下と等価：
+    ```cpp
+    return os &amp;lt;&amp;lt; format(os.getloc(),
+                   hms.is_negative() ?
+                     STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;-{:%T}&amp;#34;)
+                   : STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%T}&amp;#34;),
+                   abs(hms.to_duration()));
+    ```
+    * format[link /reference/format/format.md]
+    * hms.is_negative()[link is_negative.md]
+    * abs[link /reference/chrono/duration/abs.md]
+    * hms.to_dutation()[link to_duration.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+using std::chrono::last;
+using namespace std::chrono_literals;
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; chrono::hh_mm_ss{15h + 30min + 20s} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; chrono::hh_mm_ss{-(15h + 30min + 20s)} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; chrono::hh_mm_ss{15h + 30min + 20s + 123ms} &amp;lt;&amp;lt; std::endl;
+}
+```
+* 15h[link /reference/chrono/duration/op_h.md]
+* 30min[link /reference/chrono/duration/op_min.md]
+* 20s[link /reference/chrono/duration/op_s.md]
+* 123ms[link /reference/chrono/duration/op_ms.md]
+
+### 出力
+```
+15:30:20
+-15:30:20
+15:30:20.123
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (10.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (10.1時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator precision -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/op_precision.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/hh_mm_ss/op_precision.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/op_precision.md b/reference/chrono/hh_mm_ss/op_precision.md
new file mode 100644
index 000000000..a33390b3c
--- /dev/null
+++ b/reference/chrono/hh_mm_ss/op_precision.md
@@ -0,0 +1,59 @@
+# operator precision
+* chrono[meta header]
+* std::chrono[meta namespace]
+* hh_mm_ss[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr explicit operator precision() const noexcept; // (1) C++20
+```
+
+## 概要
+時:分:秒、秒未満をもつ[`duration`](/reference/chrono/duration.md)オブジェクトに明示的に変換する。
+
+
+## 戻り値
+```cpp
+return to_duration();
+```
+* to_duration()[link to_duration.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  chrono::hh_mm_ss time1{15h + 30min + 20s};
+  assert(chrono::seconds{time1} == 15h + 30min + 20s);
+
+  chrono::hh_mm_ss time2{-(15h + 30min + 20s)};
+  assert(chrono::seconds{time2} == -(15h + 30min + 20s));
+
+  chrono::hh_mm_ss time3{15h + 30min + 20s + 123ms};
+  assert(chrono::milliseconds{time3} == 15h + 30min + 20s + 123ms);
+}
+```
+* 15h[link /reference/chrono/duration/op_h.md]
+* 30min[link /reference/chrono/duration/op_min.md]
+* 20s[link /reference/chrono/duration/op_s.md]
+* 123ms[link /reference/chrono/duration/op_ms.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 10.0
+- [GCC](/implementation.md#gcc): 11.1
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>seconds -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/seconds.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/hh_mm_ss/seconds.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/seconds.md b/reference/chrono/hh_mm_ss/seconds.md
new file mode 100644
index 000000000..76eab8c9f
--- /dev/null
+++ b/reference/chrono/hh_mm_ss/seconds.md
@@ -0,0 +1,49 @@
+# seconds
+* chrono[meta header]
+* std::chrono[meta namespace]
+* hh_mm_ss[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr chrono::seconds seconds() const noexcept; // (1) C++20
+```
+
+## 概要
+秒フィールドを取得する。
+
+
+## 戻り値
+コンストラクタで設定された秒を返す。
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  chrono::hh_mm_ss time{-(15h + 30min + 20s)};
+  assert(time.seconds() == 20s);
+}
+```
+* seconds()[color ff0000]
+* 15h[link /reference/chrono/duration/op_h.md]
+* 30min[link /reference/chrono/duration/op_min.md]
+* 20s[link /reference/chrono/duration/op_s.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 10.0
+- [GCC](/implementation.md#gcc): 11.1
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>subseconds -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/subseconds.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/hh_mm_ss/subseconds.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/subseconds.md b/reference/chrono/hh_mm_ss/subseconds.md
new file mode 100644
index 000000000..1f7900b07
--- /dev/null
+++ b/reference/chrono/hh_mm_ss/subseconds.md
@@ -0,0 +1,50 @@
+# subseconds
+* chrono[meta header]
+* std::chrono[meta namespace]
+* hh_mm_ss[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr precision subseconds() const noexcept; // (1) C++20
+```
+
+## 概要
+秒未満を取得する。
+
+
+## 戻り値
+コンストラクタで設定された秒未満を返す。
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  chrono::hh_mm_ss time{-(15h + 30min + 20s + 123ms)};
+  assert(time.subseconds() == 123ms);
+}
+```
+* subseconds()[color ff0000]
+* 15h[link /reference/chrono/duration/op_h.md]
+* 30min[link /reference/chrono/duration/op_min.md]
+* 20s[link /reference/chrono/duration/op_s.md]
+* 123ms[link /reference/chrono/duration/op_ms.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 10.0
+- [GCC](/implementation.md#gcc): 11.1
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_duration -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/hh_mm_ss/to_duration.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/hh_mm_ss/to_duration.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/hh_mm_ss/to_duration.md b/reference/chrono/hh_mm_ss/to_duration.md
new file mode 100644
index 000000000..4cf4d4356
--- /dev/null
+++ b/reference/chrono/hh_mm_ss/to_duration.md
@@ -0,0 +1,57 @@
+# to_duration
+* chrono[meta header]
+* std::chrono[meta namespace]
+* hh_mm_ss[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr precision to_duration() const noexcept; // (1) C++20
+```
+
+## 概要
+時:分:秒、秒未満をもつ[`duration`](/reference/chrono/duration.md)オブジェクトに変換する。
+
+
+## 戻り値
+[`is_negative()`](is_negative.md)が`true`であれば`-(`[`hours()`](hours.md) `+` [`minutes()`](minutes.md) `+` [`seconds()`](seconds.md) `+` [`subseconds()`](subseconds.md)`)`を返し、そうでなければ[`hours()`](hours.md) `+` [`minutes()`](minutes.md) `+` [`seconds()`](seconds.md) `+` [`subseconds()`](subseconds.md)を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  chrono::hh_mm_ss time1{15h + 30min + 20s};
+  assert(time1.to_duration() == 15h + 30min + 20s);
+
+  chrono::hh_mm_ss time2{-(15h + 30min + 20s)};
+  assert(time2.to_duration() == -(15h + 30min + 20s));
+
+  chrono::hh_mm_ss time3{15h + 30min + 20s + 123ms};
+  assert(time3.to_duration() == 15h + 30min + 20s + 123ms);
+}
+```
+* to_duration()[color ff0000]
+* 15h[link /reference/chrono/duration/op_h.md]
+* 30min[link /reference/chrono/duration/op_min.md]
+* 20s[link /reference/chrono/duration/op_s.md]
+* 123ms[link /reference/chrono/duration/op_ms.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 10.0
+- [GCC](/implementation.md#gcc): 11.1
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_am -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/is_am.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/is_am.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/is_am.md b/reference/chrono/is_am.md
index 63ae3302b..9ca1203d9 100644
--- a/reference/chrono/is_am.md
+++ b/reference/chrono/is_am.md
@@ -38,7 +38,7 @@ int main()
 ```
 * chrono::is_am[color ff0000]
 * chrono::hh_mm_ss[link hh_mm_ss.md]
-* time.hours()[link hh_mm_ss/hours.md.nolink]
+* time.hours()[link hh_mm_ss/hours.md]
 * chrono::is_pm[link is_pm.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_pm -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/chrono/is_pm.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/chrono/is_pm.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/is_pm.md b/reference/chrono/is_pm.md
index 6f0755715..961cfce41 100644
--- a/reference/chrono/is_pm.md
+++ b/reference/chrono/is_pm.md
@@ -38,7 +38,7 @@ int main()
 ```
 * chrono::is_pm[color ff0000]
 * chrono::hh_mm_ss[link hh_mm_ss.md]
-* time.hours()[link hh_mm_ss/hours.md.nolink]
+* time.hours()[link hh_mm_ss/hours.md]
 * chrono::is_am[link is_pm.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>digits10 -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/digits10.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/limits/numeric_limits/digits10.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/digits10.md b/reference/limits/numeric_limits/digits10.md
index 93195139d..5d57c87ff 100644
--- a/reference/limits/numeric_limits/digits10.md
+++ b/reference/limits/numeric_limits/digits10.md
@@ -48,8 +48,8 @@ int main()
 ### 出力例
 ```
 6
-9
 15
+9
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exchange -- Merge branch &#39;master&#39; of https://github.com/cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/utility/exchange.html"/>
      <id>5dcafcbaec3603bd4c1df3e9aa4968c80d7c2d38:reference/utility/exchange.md</id>
      <updated>2020-11-05T15:40:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/exchange.md b/reference/utility/exchange.md
index b53236449..23e6c4cc9 100644
--- a/reference/utility/exchange.md
+++ b/reference/utility/exchange.md
@@ -124,14 +124,12 @@ int main()
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;string&amp;gt;
 #include &amp;lt;utility&amp;gt;
-#include &amp;lt;memory&amp;gt;
 
 struct A {};
 
 struct X {
   std::string str;
   int* p = nullptr;
-  std::unique_ptr&amp;lt;A&amp;gt; a;
 
   X() = default;
 
@@ -139,8 +137,7 @@ struct X {
   // ムーブ構築しただけでは、標準範囲のオブジェクトは「有効だが未規定の状態」になる
   X(X&amp;amp;&amp;amp; other)
     : str(std::exchange(other.str, {})),
-      p(std::exchange(other.p, nullptr)),
-      a(std::exchange(other.a, {}))
+      p(std::exchange(other.p, nullptr))
   {}
   // 以下と等価:
   // str{std::move(other.str)};
@@ -149,27 +146,10 @@ struct X {
   // p = other.p;
   // other.p = nullptr;
 
+  // ムーブ代入も同様
   X&amp;amp; operator=(X&amp;amp;&amp;amp; other) {
     str = std::exchange(other.str, {});
     p = std::exchange(other.p, nullptr);
-
-    // 破棄処理をともなう例
-    if (std::unique_ptr&amp;lt;A&amp;gt; old = std::exchange(a, std::exchange(other.a, {}))) {
-      old.reset();
-    }
-    // ほかの書き方1 : わかりにくい
-    // std::swap(a, other.a);
-    // if (other.a) {
-    //   other.a.reset();
-    // }
-    //
-    // ほかの書き方2 : 意図はわかりやすくなった例
-    // std::unique_ptr&amp;lt;A&amp;gt; old = a;
-    // a = std::move(other.a);
-    // if (old) {
-    //   old.reset();
-    // }
-
     return *this;
   }
 };
@@ -181,30 +161,27 @@ int main()
   X a;
   a.str = &amp;#34;Hello&amp;#34;;
   a.p = &amp;amp;value;
-  a.a = std::make_unique&amp;lt;A&amp;gt;();
 
   X b = std::move(a);
 
   // ムーブされたaが空になり、bとcへとデータが移動していくことを確認
-  std::cout &amp;lt;&amp;lt; a.str &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; a.p &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; a.a.get() &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; b.str &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; b.p &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; b.a.get() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; a.str &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; a.p &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; b.str &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; b.p &amp;lt;&amp;lt; std::endl;
 
   X c;
   c = std::move(b);
-  std::cout &amp;lt;&amp;lt; c.str &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; c.p &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; c.a.get() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; c.str &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; c.p &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::exchange[color ff0000]
 * std::move[link move.md]
-* reset()[link /reference/memory/unique_ptr/reset.md]
-* get()[link /reference/memory/unique_ptr/get.md]
 
 
 #### 出力例
 ```
- (nil) (nil)
-Hello 0x7ffdeb8e04bc 0x19be9c0
-Hello 0x7ffdeb8e04bc 0x19be9c0
+ (nil)
+Hello 0x7ffc560ca4cc
+Hello 0x7ffc560ca4cc
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- ranges::advance追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator.html"/>
      <id>acb019bf01675a4b6590c5dc6dc74bd8ea5ce902:reference/iterator.md</id>
      <updated>2020-11-05T15:39:47+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;iterator&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;ヘッダでは、イテレータに関する機能群を提供する。
イテレータは日本語では反復子とも呼ばれ、配列やコンテナのような範囲を横断する手段として使用できる。&lt;/p&gt;
&lt;p&gt;C++標準ライブラリのイテレータは、以下のように階層的に定義される。
この階層はC++言語機能の継承と同じように見なせる。たとえば、入力イテレータと前方向イテレータはis a関係が成り立っており、前方向イテレータは入力イテレータと見なすことができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.github.com/cpprefjp/image/master/reference/iterator/iterators.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;C++20以降の標準ライブラリでは、任意のイテレータに対して可能な操作によって上記5つに隣接イテレータ（&lt;em&gt;contiguous iterator&lt;/em&gt;）を加えた6つのイテレータカテゴリを定義する。それぞれ次のイテレータコンセプトが対応する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入力イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_iterator.html&#34;&gt;input_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;出力イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/output_iterator.html&#34;&gt;output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前方向イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/forward_iterator.html&#34;&gt;forward_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;双方向イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/bidirectional_iterator.html&#34;&gt;bidirectional_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ランダムアクセスイテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/random_access_iterator.html&#34;&gt;random_access_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;隣接イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/contiguous_iterator.html&#34;&gt;contiguous_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;イテレータコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_readable.html&#34;&gt;indirectly_readable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照によって読み取り可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_writable.html&#34;&gt;indirectly_writable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照によって書き込み可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/weakly_incrementable.html&#34;&gt;weakly_incrementable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前置/後置インクリメント可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/incrementable.html&#34;&gt;incrementable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;weakly_incrementable&lt;/code&gt;かつ&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/regular.html&#34;&gt;正則&lt;/a&gt; (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_or_output_iterator.html&#34;&gt;input_or_output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基礎的なイテレータコンセプト (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sentinel_for.html&#34;&gt;sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同じ範囲についてのイテレータと番兵 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sized_sentinel_for.html&#34;&gt;sized_sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;距離を定義可能なイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/disable_sized_sentinel_for.html&#34;&gt;disable_sized_sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sentinel_for&amp;lt;S, I&amp;gt;&lt;/code&gt;について、&lt;code&gt;sized_sentinel_for&lt;/code&gt;を不適合にする (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_iterator.html&#34;&gt;input_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/output_iterator.html&#34;&gt;output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/forward_iterator.html&#34;&gt;forward_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/bidirectional_iterator.html&#34;&gt;bidirectional_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/random_access_iterator.html&#34;&gt;random_access_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/contiguous_iterator.html&#34;&gt;contiguous_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータを介した関数呼び出しに関するコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_unary_invocable.html&#34;&gt;indirectly_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型によって呼び出し可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_unary_invocable.html&#34;&gt;indirectly_regular_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正則な&lt;code&gt;indirectly_unary_invocable&lt;/code&gt; (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_unary_predicate.html&#34;&gt;indirect_unary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型についての単項述語 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_binary_predicate.html&#34;&gt;indirect_binary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの要素型についての二項述語 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_equivalence_relation.html&#34;&gt;indirect_equivalence_relation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの要素型についての同値関係 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_strict_weak_order.html&#34;&gt;indirect_strict_weak_order&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの要素型についての狭義の弱順序 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータによるアルゴリズムに関するコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_movable.html&#34;&gt;indirectly_movable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ要素をムーブ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_movable_storable.html&#34;&gt;indirectly_movable_storable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ中間オブジェクトを介して要素をムーブ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_copyable.html&#34;&gt;indirectly_copyable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ要素をコピー可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_copyable_storable.html&#34;&gt;indirectly_copyable_storable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ中間オブジェクトを介して要素をコピー可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_swappable.html&#34;&gt;indirectly_swappable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータ間で要素を交換可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_comparable.html&#34;&gt;indirectly_comparable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータ間で要素を比較可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/permutable.html&#34;&gt;permutable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して要素を並べ替え可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/mergeable.html&#34;&gt;mergeable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して範囲をマージ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sortable.html&#34;&gt;sortable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して範囲をソート可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータの情報&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;iterator_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータに関する型情報(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator.html&#34;&gt;iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを定義するための基底クラス(class template)&lt;/td&gt;
&lt;td&gt;C++17から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_difference_t.html&#34;&gt;iter_difference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;difference_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_value_t.html&#34;&gt;iter_value_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;value_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_reference_t.html&#34;&gt;iter_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;reference_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_rvalue_reference_t.html&#34;&gt;iter_rvalue_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの指す要素の右辺値参照型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_common_reference_t.html&#34;&gt;iter_common_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;value_type&lt;/code&gt;と&lt;code&gt;reference_type&lt;/code&gt;の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/common_reference.html&#34;&gt;common_reference&lt;/a&gt;&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_result_t.html&#34;&gt;indirect_result_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数呼び出し可能な型&lt;code&gt;F&lt;/code&gt;を複数のイテレータ&lt;code&gt;Is...&lt;/code&gt;によって呼び出した時の戻り値型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/projected.html&#34;&gt;projected&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ&lt;code&gt;I&lt;/code&gt;の&lt;code&gt;Proj&lt;/code&gt;による射影操作の結果を表すことのできる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_readable.html&#34;&gt;indirectly_readable&lt;/a&gt;&lt;/code&gt;なクラス (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/incrementable_traits.html&#34;&gt;incrementable_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iter_difference_t&lt;/code&gt;にアダプトするためのカスタマイゼーションポイント (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_readable_traits.html&#34;&gt;indirectly_readable_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iter_value_t&lt;/code&gt;にアダプトするためのカスタマイゼーションポイント (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;input_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;output_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;forward_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;bidirectional_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;random_access_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;contiguous_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータの進行と距離&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/advance.html&#34;&gt;advance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;distance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ間の距離を求める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回前方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/prev.html&#34;&gt;prev&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回後方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ranges_advance.html&#34;&gt;ranges::advance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ranges_distance.md.nolink&#34;&gt;ranges::distance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ間の距離を求める(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ranges_next.md.nolink&#34;&gt;ranges::next&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ranges_prev.md.nolink&#34;&gt;ranges::prev&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;逆順イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆方向に進むイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/make_reverse_iterator.html&#34;&gt;make_reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;挿入イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_insert_iterator.html&#34;&gt;back_insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;末尾に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_inserter.html&#34;&gt;back_inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;back_insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_insert_iterator.html&#34;&gt;front_insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_inserter.html&#34;&gt;front_inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;front_insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/insert_iterator.html&#34;&gt;insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/inserter.html&#34;&gt;inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素を移動するイテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/move_iterator.html&#34;&gt;move_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照時にムーブするイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/make_move_iterator.html&#34;&gt;make_move_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;move_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/move_sentinel.md.nolink&#34;&gt;move_sentinel&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;move_iterator&lt;/code&gt;の終端を表す番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ストリームイテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/istream_iterator.html&#34;&gt;istream_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/istreambuf_iterator.html&#34;&gt;istreambuf_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ostreambuf_iterator.html&#34;&gt;ostreambuf_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;その他のイテレータアダプタ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/common_iterator.md.nolink&#34;&gt;common_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ型と番兵型が異なる場合に型を共通化するためのラッパーイテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/counted_iterator.md.nolink&#34;&gt;counted_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;予め指定された&lt;code&gt;N&lt;/code&gt;個の要素だけをイテレートするラッパーイテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;番兵型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/default_sentinel_t.md.nolink&#34;&gt;default_sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の範囲の終端を表すことのできるデフォルトの番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/unreachable_sentinel_t.md.nolink&#34;&gt;unreachable_sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;別の方法で終端が指定される範囲の仮想的な終端を表す番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;先頭イテレータと末尾イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;begin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;end&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/cbegin.html&#34;&gt;cbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/cend.html&#34;&gt;cend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/rbegin.html&#34;&gt;rbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/rend.html&#34;&gt;rend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/crbegin.html&#34;&gt;crbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す読み取り専用逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/crend.html&#34;&gt;crend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す読み取り専用逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンテナアクセス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/size.html&#34;&gt;size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素数を取得する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ssize.html&#34;&gt;ssize&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素数を、符号付き整数型で取得する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/empty.html&#34;&gt;empty&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空かどうかを判定する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/data.html&#34;&gt;data&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素配列へのポインタを取得する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;カスタマイゼーションポイントオブジェクト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_move.md.nolink&#34;&gt;ranges::iter_move&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの指す要素をムーブする (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_swap.md.nolink&#34;&gt;ranges::iter_swap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの指す要素を&lt;em&gt;swap&lt;/em&gt;する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;説明専用コンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;with-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型&lt;code&gt;T&lt;/code&gt;に参照を付加する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;can-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;with-reference&lt;/code&gt;可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;dereferenceable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単純な間接参照が可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/is_integer_like.html&#34;&gt;is-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号付整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/is_integer_like.html&#34;&gt;is-signed-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なし整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf&#34; target=&#34;_blank&#34;&gt;P0896R4 The One Ranges Proposal (was Merging the Ranges TS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges::advance -- ranges::advance追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ranges_advance.html"/>
      <id>acb019bf01675a4b6590c5dc6dc74bd8ea5ce902:reference/iterator/ranges_advance.md</id>
      <updated>2020-11-05T15:39:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ranges_advance.md b/reference/iterator/ranges_advance.md
new file mode 100644
index 000000000..29be5cd75
--- /dev/null
+++ b/reference/iterator/ranges_advance.md
@@ -0,0 +1,134 @@
+# ranges::advance
+* iterator[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+
+  template&amp;lt;input_or_output_iterator I&amp;gt;
+  constexpr void advance(I&amp;amp; i, iter_difference_t&amp;lt;I&amp;gt; n);     // (1)
+
+  template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+  constexpr void advance(I&amp;amp; i, S bound);                    // (2)
+
+  template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+  constexpr iter_difference_t&amp;lt;I&amp;gt; advance(I&amp;amp; i, iter_difference_t&amp;lt;I&amp;gt; n, S bound);  // (3)
+}
+```
+* input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+
+## 概要
+
+イテレータを`n`回あるいは指定された位置まで進める。
+
+[`ranges::next()`](ranges_next.md.nolink)、[`ranges::prev()`](ranges_prev.md.nolink)と違い、引数として渡されたイテレータへの参照を書き換える。
+
+## 引数
+
+- `i` -- 進める対象のイテレータ
+- `n` -- 進める距離
+- `bound` -- 進行の目的地となる位置を示すイテレータ（あるいは番兵）
+
+## 事前条件
+
+- (1) : `I`が[`bidirectional_iterator`](iterator/bidirectional_iterator.md)のモデルとならない場合、`n`は負数ではない
+- (2) : `[i, bound)`は有効な範囲である
+- (3) : 次のいずれか
+    - `n &amp;gt;  0` : `[i, bound)`は有効な範囲である
+    - `n == 0` : `[i, bound)`もしくは`[bound, i)`は有効な範囲である
+    - `n &amp;lt;  0` : `[bound, i)`は有効な範囲であり、`I`は[`bidirectional_iterator`](iterator/bidirectional_iterator.md)のモデルであり、`I, S`は[`same_as`](/reference/concepts/same_as.md)`&amp;lt;I, S&amp;gt;`のモデルとなる。
+
+## 効果
+
+- (1) : 次のいずれかによって、イテレータへの参照`i`を`n`回進める(`n`が負数の場合は逆方向に進める)。
+    - `I`が[`random_access_iterator`](iterator/random_access_iterator.md)のモデルとなる : `i += n`
+    - `n`が正数 : `i`を`n`回インクリメントする
+    - `n`が負数 : `i`を`-n`回デクリメントする
+- (2) : 次のいずれかによって、イテレータへの参照`i`を`bound`まで進める。
+    - `I, S`が[`assignable_from`](/reference/concepts/assignable_from.md)`&amp;lt;I&amp;amp;, S&amp;gt;`のモデルとなる : `i = std::move(bound)`
+    - `S, I`が[`sized_sentinel_for`](iterator/sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルとなる : `ranges::advance(i, bound - i)`（(1)に委譲）
+    - それ以外の場合 : `bool(i != bound) == true`である間、`i`をインクリメントする
+- (3) : 次のいずれかによって、イテレータへの参照`i`を`bound`を超えないように`n`回進める(`n`が負数の場合は逆方向に進める)。
+    - `S, I`が[`sized_sentinel_for`](iterator/sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルとなり
+        - `|n| &amp;gt;= |bound - i|` : `ranges::advance(i, bound)`（(2)に委譲）
+        - `|n| &amp;lt;  |bound - i|` : `ranges::advance(i, n)`（(1)に委譲）
+    - それ以外の場合で
+        - `n`が正数 : `bool(i != bound) == true`である間、`i`を最大`n`回インクリメントする
+        - `n`が負数 : `bool(i != bound) == true`である間、`i`を最大`-n`回インクリメントする
+
+## 戻り値
+
+- (1)(2) : なし
+- (3) : 指定した距離`n`と実際に進めた距離との差（進めなかった距離）を返す
+    - `i`の処理終了時と開始時の位置の差を`M`として、`n - M`を返す
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+  
+  auto it = std::begin(vec);
+  
+  // (1)、2つ進める
+  std::ranges::advance(it, 2);
+  
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+  
+  auto bound = std::next(vec.begin(), 5); // 6の位置
+  
+  // (2)、boundまで進める
+  std::ranges::advance(it, bound);
+  
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+  
+  auto bound2 = std::next(bound, 2); // 8の位置
+  
+  // (3)、boundまでの間で、4つ進める
+  auto d = std::ranges::advance(it, 4, bound2);
+  
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;diff : &amp;#34; &amp;lt;&amp;lt; d &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::advance[color ff0000]
+* std::begin[link /reference/iterator/begin.md]
+* std::next[link /reference/iterator/next.md]
+
+### 出力
+```
+3
+6
+8
+diff : 2
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 5
+
+## 関連項目
+
+| 名前                | 説明                              |
+|---------------------|-----------------------------------|
+| [`next()`](next.md) | `n`回前方に進めたイテレータを返す |
+| [`prev()`](prev.md) | `n`回後方に進めたイテレータを返す |
+| [`rangs::next()`](rangs::next.md.nolink) | `n`回前方に進めたイテレータを返す |
+| [`rangs::prev()`](rangs::prev.md.nolink) | `n`回後方に進めたイテレータを返す |
+
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>digits10 -- numeric_limits::digits10 : 出力が間違っていた</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/digits10.html"/>
      <id>297a72fd86f495d5273e6066c8dc8d9a0958bff9:reference/limits/numeric_limits/digits10.md</id>
      <updated>2020-11-05T15:27:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/digits10.md b/reference/limits/numeric_limits/digits10.md
index 93195139d..5d57c87ff 100644
--- a/reference/limits/numeric_limits/digits10.md
+++ b/reference/limits/numeric_limits/digits10.md
@@ -48,8 +48,8 @@ int main()
 ### 出力例
 ```
 6
-9
 15
+9
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
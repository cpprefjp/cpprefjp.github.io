<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2018-06-10T17:38:16.715023</updated>
  <id>b33b1701-7c0c-42ff-b7a1-d6def309403e</id>

  
    <entry>
      <title>処理系 -- fix(implementation): add 15.7.3 information</title>
      <link href="https://cpprefjp.github.io/implementation.html"/>
      <id>2eeaf65ae580823d4d822efea52298373ebf91b4:implementation.md</id>
      <updated>2018-06-11T02:33:46+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;処理系&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GNU Compiler Collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;Intel C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Microsoft Visual C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34; id=&#34;clang&#34;&gt;Clang&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは Clang と呼ぶ。「クラン(グ)」と読む。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://clang.llvm.org/&#34; target=&#34;_blank&#34;&gt;&#34;clang&#34; C Language Family Frontend for LLVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;clang&lt;/li&gt;
&lt;li&gt;clang++&lt;/li&gt;
&lt;li&gt;Apple LLVMコンパイラ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-std=c++11&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clang 3.2から3.4までは、&lt;code&gt;-std=c++1y&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1y&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 3.5以降は、&lt;code&gt;-std=c++14&lt;/code&gt;オプションを使用する(以前までのオプションも使用できる)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++14&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 6.0以降は、C++14がデフォルトとなる。デフォルトバージョンのコンパイルオプションは&lt;code&gt;-std=gnu++14&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clang 3.5から4.0までは、&lt;code&gt;-std=c++1z&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1z&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 5.0以降は、&lt;code&gt;-std=c++17&lt;/code&gt;オプションを使用する(以前までのオプションも使用できる)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++17&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++20の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clang 6.0以降は、&lt;code&gt;-std=c++2a&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34; id=&#34;gcc&#34;&gt;GNU Compiler Collection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは GCC と呼ぶ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34; target=&#34;_blank&#34;&gt;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mingw.org/&#34; target=&#34;_blank&#34;&gt;MinGW | Minimalist GNU for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.equation.com/servlet/equation.cmd?fa=fortran&#34; target=&#34;_blank&#34;&gt;Fortran, C, C++ for Windows&lt;/a&gt; (MinGW バイナリ)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;gcc&lt;/li&gt;
&lt;li&gt;g++&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.3から4.6までは、&lt;code&gt;-std=c++0x&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++0x&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 4.7以降は、&lt;code&gt;-std=c++11&lt;/code&gt;オプションを使用する(旧オプションは非推奨)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++11&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.8から4.9までは、&lt;code&gt;-std=c++1y&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1y&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 5.1以降は、&lt;code&gt;-std=c++14&lt;/code&gt;オプションを使用する(旧オプションは非推奨)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++14&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 6.1以降は、C++14がデフォルトとなる。デフォルトバージョンのコンパイルオプションは&lt;code&gt;-std=gnu++14&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 6.1以降は、&lt;code&gt;-std=c++1z&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1z&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34; id=&#34;icc&#34;&gt;Intel C++ Compiler&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは ICC と呼ぶ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xlsoft.com/jp/products/intel/compilers/ccl/index.html?tab=0&#34; target=&#34;_blank&#34;&gt;XLsoft エクセルソフト : インテル C++ Composer XE Linux 版/インテル C++ コンパイラー XE Linux 版 製品紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xlsoft.com/jp/products/intel/compilers/ccl/index.html?tab=0&#34; target=&#34;_blank&#34;&gt;XLsoft エクセルソフト : インテル C++ Composer XE Mac OS 版/インテル C++ コンパイラー XE Mac OS 版 製品紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xlsoft.com/jp/products/intel/compilers/ccw/index.html?tab=0&#34; target=&#34;_blank&#34;&gt;XLsoft エクセルソフト : インテル C++ Composer XE Windows 版/インテル C++ コンパイラー XE Windows 版 製品紹介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ICC&lt;/li&gt;
&lt;li&gt;ICL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windowsでは&lt;code&gt;/Qstd:c++11&lt;/code&gt;、Linux/macOSでは&lt;code&gt;-std=c++11&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ICC 16.0からは、Windowsでは&lt;code&gt;/Qstd:c++14&lt;/code&gt;オプション、Linux/macOSでは&lt;code&gt;-std=c++14&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ICC 17.0からは、Windowsでは&lt;code&gt;/Qstd:c++17&lt;/code&gt;オプション、Linux/macOSでは&lt;code&gt;-std=c++17&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34; id=&#34;visual_cpp&#34;&gt;Microsoft Visual C++&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは Visual C++ と呼ぶ。Visual Studio 2012 以降、Visual C++は独立した製品名ではなくなり製品Visual Studioのみに含まれるようになったが、当サイトでは製品に含まれているコンポーネント名としてのVisual C++を採用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/ja-jp/visual-studio-homepage-vs.aspx&#34; target=&#34;_blank&#34;&gt;Visual Studio - Microsoft Developer Tools&lt;/a&gt;: Visual C++を含む統合開発環境。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://landinghub.visualstudio.com/visual-cpp-build-tools&#34; target=&#34;_blank&#34;&gt;Visual C++ Build Tools&lt;/a&gt;: コンパイラおよび関連ツールのみのパッケージ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VC&lt;/li&gt;
&lt;li&gt;VC++&lt;/li&gt;
&lt;li&gt;MSVC&lt;/li&gt;
&lt;li&gt;cl&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp_ver&#34; id=&#34;visual_cpp_ver&#34;&gt;バージョンの表記&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下に当サイトにおけるバージョン表記と、製品・バージョン等の対応を示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表記&lt;/th&gt;
&lt;th&gt;製品名 [Visual Studio バージョン] &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-1&#34; id=&#34;note_ref-t1-1&#34;&gt;†1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;VC++ バージョン &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-2&#34; id=&#34;note_ref-t1-2&#34;&gt;†2&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;_MSC_VER&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;_MSC_FULL_VER&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.7.3&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;1914&lt;/td&gt;
&lt;td&gt;191426430&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.7.2&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;1914&lt;/td&gt;
&lt;td&gt;191426429&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.7.1&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;1914&lt;/td&gt;
&lt;td&gt;191426428&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.7&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326132&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.6&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326131&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.4&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326129&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.3&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326129&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.2&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.1&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.0&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.7&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225835&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.6&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225835&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.4&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225834&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.3&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225834&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.2&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225831&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.4.5&lt;/td&gt;
&lt;td&gt;14.11&lt;/td&gt;
&lt;td&gt;1911&lt;/td&gt;
&lt;td&gt;191125547&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.4.4&lt;/td&gt;
&lt;td&gt;14.11&lt;/td&gt;
&lt;td&gt;1911&lt;/td&gt;
&lt;td&gt;191125542&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.3.3&lt;/td&gt;
&lt;td&gt;14.11&lt;/td&gt;
&lt;td&gt;1911&lt;/td&gt;
&lt;td&gt;191125507&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 2 &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-3&#34; id=&#34;note_ref-t1-3-a&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.2&lt;/td&gt;
&lt;td&gt;14.10&lt;/td&gt;
&lt;td&gt;1910&lt;/td&gt;
&lt;td&gt;191025017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 1 &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-3&#34; id=&#34;note_ref-t1-3-b&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.1&lt;/td&gt;
&lt;td&gt;14.10&lt;/td&gt;
&lt;td&gt;1910&lt;/td&gt;
&lt;td&gt;191025017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.0&lt;/td&gt;
&lt;td&gt;14.10 &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-4&#34; id=&#34;note_ref-t1-4&#34;&gt;†4&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;1910&lt;/td&gt;
&lt;td&gt;191025017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2015 Update 3 [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190024210&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2015 Update 2 [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190023918&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015 Update 1&lt;/td&gt;
&lt;td&gt;Visual Studio 2015 Update 1 [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190023506&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;Visual Studio 2015          [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190023026&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 5 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180040629&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 4 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180031101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 3 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180030723&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 2 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180030501&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 1 &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-3&#34; id=&#34;note_ref-t1-3-c&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 1 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180021005&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;Visual Studio 2013          [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180021005&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 4 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170061030&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 3 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170060610&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 2 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170060315&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 1&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 1 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170051106&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;td&gt;Visual Studio 2012          [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170050727&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2010 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio 2010 SP1      [10.0]&lt;br /&gt;Visual C++ 2010 SP1     [10.0]&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;td&gt;160040219&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;td&gt;Visual Studio 2010          [10.0]&lt;br /&gt;Visual C++ 2010         [10.0]&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;td&gt;160030319&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2008 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio 2008 SP1      [9.0] &lt;br /&gt;Visual C++ 2008 SP1     [9.0]&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;150030729&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2008&lt;/td&gt;
&lt;td&gt;Visual Studio 2008          [9.0] &lt;br /&gt;Visual C++ 2008         [9.0]&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;150021022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2005 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio 2005 SP1      [8.0] &lt;br /&gt;Visual C++ 2005 SP1     [8.0]&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;td&gt;140050727&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;td&gt;Visual Studio 2005          [8.0] &lt;br /&gt;Visual C++ 2005         [8.0]&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;td&gt;140050320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows Server 2003 SP1 DDK (for AMD64)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;td&gt;140040310&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2003 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio .NET 2003 SP1 [7.1]&lt;br /&gt;Visual C++ .NET 2003 SP1 [7.1]&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13106030&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows Server 2003 SP1 DDK&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13104035&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;td&gt;Visual Studio .NET 2003     [7.1]&lt;br /&gt;Visual C++ .NET 2003     [7.1]&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13103077&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio Toolkit 2003  [7.1]&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13103052&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows Server 2003 DDK&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13102179&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2002&lt;/td&gt;
&lt;td&gt;Visual Studio .NET 2002     [7.0]&lt;br /&gt;Visual C++ .NET 2002     [7.0]&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;td&gt;13009466&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows XP SP1 DDK&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;td&gt;13009176&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.0 SP6&lt;/td&gt;
&lt;td&gt;Visual Studio 6.0 SP6&lt;br /&gt;Visual C++ 6.0 SP6&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;1200&lt;/td&gt;
&lt;td&gt;12008804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.0 SP5&lt;/td&gt;
&lt;td&gt;Visual Studio 6.0 SP5&lt;br /&gt;Visual C++ 6.0 SP5&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;1200&lt;/td&gt;
&lt;td&gt;12008804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 97 [5.0]&lt;br /&gt;Visual C++ 5.0&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 4.2&lt;/td&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;1020&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 4.1&lt;/td&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;td&gt;1010&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 4.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 2.0&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Microsoft C/C++ 7.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Microsoft C 6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-1&#34; id=&#34;note-t1-1&#34;&gt;^&lt;/a&gt;&lt;/strong&gt; 製品名の列にはVisual C++コンパイラを含む実際に入手する製品の名称を示す。製品のエディション (Express/Standard/Professional/Enterprise/Community 他) は省略する。Visual Studioの製品バージョンは、製品名に現れていないときは &lt;code&gt;[ ～ ]&lt;/code&gt; 内に記す。製品バージョンは、2017以降、メインメニューの [ヘルプ]-[Microsoft Visual Studio のバージョン情報] から確認できるものを指す。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-2&#34; id=&#34;note-t1-2&#34;&gt;^&lt;/a&gt;&lt;/strong&gt; VC++バージョンの列にはVisual C++ツールセットのバージョンを記述する。この表では特にVisual C++を入れた時に既定で選択されるツールセットのみについて扱う。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;note-t1-3&#34;&gt;^&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-3-a&#34;&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-3-b&#34;&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-3-c&#34;&gt;&lt;strong&gt;c&lt;/strong&gt;&lt;/a&gt;&lt;/sup&gt; IDEのみ修正され、コンパイラ、ヘッダー、ライブラリ等は変更されなかった。&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2017/08/11/c17-features-and-stl-fixes-in-vs-2017-15-3/&#34; target=&#34;_blank&#34;&gt;C++17 Features And STL Fixes In VS 2017 15.3 | Visual C++ Team Blog&lt;/a&gt; - &#34;&lt;em&gt;After VS 2017 RTM, the 15.1 and 15.2 updates improved the IDE. The 15.3 update improves both the IDE and the toolset.&lt;/em&gt;&#34;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/en-us/help/2911573/description-of-visual-studio-2013-update-1&#34; target=&#34;_blank&#34;&gt;Description of Visual Studio 2013 Update 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-4&#34; id=&#34;note-t1-4&#34;&gt;^&lt;/a&gt;&lt;/strong&gt; 2017は2015とバイナリ互換が保たれているためメジャーバージョンアップは行われなかった。その結果、製品バージョンとVisual C++バージョンが一致しなくなった。
  &lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2017/03/07/binary-compatibility-and-pain-free-upgrade-why-moving-to-visual-studio-2017-is-almost-too-easy/&#34; target=&#34;_blank&#34;&gt;Binary Compatibility and Pain-free Upgrade: Why Moving to Visual Studio 2017 is almost “too easy”&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015以降、Visual Studioの既定のインストールではVisual C++は入らなくなった。Visual StudioのインストーラでVisual C++コンポーネントを選択する必要がある。
  &lt;a href=&#34;https://msdn.microsoft.com/ja-jp/library/60k1461a.aspx&#34; target=&#34;_blank&#34;&gt;Visual Studio 2015 の Visual C++&lt;/a&gt; の [警告] を参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;2017 Update 5からside-by-sideがサポートされ、一つの製品内で同時に複数のVisual C++ツールセットを選択できるようになった。
  &lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2017/11/15/side-by-side-minor-version-msvc-toolsets-in-visual-studio-2017/&#34; target=&#34;_blank&#34;&gt;Side-by-side minor version MSVC toolsets in Visual Studio 2017 | Visual C++ Team Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11は常に有効である&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++14は常に有効である&lt;/li&gt;
&lt;li&gt;2015 Update 3から&lt;code&gt;/std:c++14&lt;/code&gt;オプションが導入されたが既定値でありC++14を無効化する機能は提供されていない。&lt;code&gt;_MSVC_LANG&lt;/code&gt;マクロの値は&lt;code&gt;201402&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2015 Update 2以前に実装された機能については、互換性の観点から常に有効である&lt;/li&gt;
&lt;li&gt;2015 Update 3以降に実装された機能については、&lt;code&gt;/std:c++17&lt;/code&gt;オプションを使用する。&lt;code&gt;_MSVC_LANG&lt;/code&gt;マクロの値は&lt;code&gt;201703&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;最新バージョンの言語機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2015 Update 3以降は&lt;code&gt;/std:c++latest&lt;/code&gt;オプションを使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/build/reference/std-specify-language-standard-version&#34; target=&#34;_blank&#34;&gt;-std (Specify Language Standard Version) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros&#34; target=&#34;_blank&#34;&gt;Predefined Macros | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2016/06/07/standards-version-switches-in-the-compiler/&#34; target=&#34;_blank&#34;&gt;Standards version switches in the compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>operator delete -- new 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/new/op_delete.html"/>
      <id>4df5f0d39aca7342ed1c3b6cc828fce9a761e430:reference/new/op_delete.md</id>
      <updated>2018-06-09T23:48:53+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;new&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace &#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;operator delete&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;                                                &lt;span class=&#34;c1&#34;&gt;// (1) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                                               &lt;span class=&#34;c1&#34;&gt;// (1) C++11 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                             &lt;span class=&#34;c1&#34;&gt;// (2) C++14 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;// (3) C++17 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (4) C++17 から&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;                              &lt;span class=&#34;c1&#34;&gt;// (5) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                             &lt;span class=&#34;c1&#34;&gt;// (5) C++11 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (6) C++17 から&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;                                     &lt;span class=&#34;c1&#34;&gt;// (7) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                                    &lt;span class=&#34;c1&#34;&gt;// (7) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;動的に確保された単一オブジェクトの記憶域を解放する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 単純な記憶域の解放&lt;/li&gt;
&lt;li&gt;(2) : オブジェクトサイズが判明している場合の、単一オブジェクトの記憶域の解放&lt;/li&gt;
&lt;li&gt;(3) : デフォルトより大きいアライメント要求の、単一オブジェクトの記憶域の解放&lt;/li&gt;
&lt;li&gt;(4) : オブジェクトサイズが判明している場合の、デフォルトより大きいアライメント要求の、単一オブジェクトの記憶域の解放&lt;/li&gt;
&lt;li&gt;(5) : 単純な記憶域の解放。例外を送出しない設定で記憶域を確保されたオブジェクトに対する、単一オブジェクトの記憶域の解放&lt;/li&gt;
&lt;li&gt;(6) : 単純な記憶域の解放。例外を送出しない設定で記憶域を確保されたオブジェクトに対する、デフォルトより大きいアライメント要求の、単一オブジェクトの記憶域の解放&lt;/li&gt;
&lt;li&gt;(7) : 配置newで確保された記憶域の解放&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;new&lt;/a&gt;&lt;/code&gt;演算子によって動的に確保した記憶域を解放する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nothrow&lt;/code&gt;版の&lt;code&gt;delete&lt;/code&gt;演算子は、&lt;code&gt;nothrow&lt;/code&gt;版の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;new&lt;/a&gt;&lt;/code&gt;演算子によって生成されたオブジェクトのコンストラクタが例外を送出した場合に呼び出される。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alignment&lt;/code&gt; 引数を取らない &lt;code&gt;delete&lt;/code&gt; 演算子に渡される &lt;code&gt;ptr&lt;/code&gt; は、 &lt;code&gt;alignment&lt;/code&gt; 引数を取らない &lt;code&gt;new&lt;/code&gt; 演算子によって確保されたものでなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alignment&lt;/code&gt; 引数を取る &lt;code&gt;delete&lt;/code&gt; 演算子に渡される &lt;code&gt;ptr&lt;/code&gt; は、同じ &lt;code&gt;alignment&lt;/code&gt; の値を取った &lt;code&gt;alignment&lt;/code&gt; 版 &lt;code&gt;new&lt;/code&gt; 演算子によって確保されたものでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;3983e48c83c3405709f13f23b9b51a804ac74e34&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;new&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// int型変数を動的に作成&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 確保失敗時にbad_alloc例外が送出される&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;delete&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// p1の領域を解放&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// int型変数を動的に作成&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 確保失敗時にヌルポインタが返される&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;delete&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;std::bad_alloc&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;what&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/sized_deallocation.html&#34;&gt;C++14 サイズ付きデアロケーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wg21.cmeerw.net/lwg/issue2458&#34; target=&#34;_blank&#34;&gt;LWG 2458. N3778 and new library deallocation signatures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator delete[] -- new 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/new/op_delete[].html"/>
      <id>4df5f0d39aca7342ed1c3b6cc828fce9a761e430:reference/new/op_delete[].md</id>
      <updated>2018-06-09T23:48:53+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;new&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace &#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;operator delete[]&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;                                                &lt;span class=&#34;c1&#34;&gt;// (1) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                                               &lt;span class=&#34;c1&#34;&gt;// (1) C++11 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                             &lt;span class=&#34;c1&#34;&gt;// (2) C++14 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;// (3) C++17 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (4) C++17 から&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;                              &lt;span class=&#34;c1&#34;&gt;// (5) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                             &lt;span class=&#34;c1&#34;&gt;// (6) C++11 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (7) C++17 から&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;                                       &lt;span class=&#34;c1&#34;&gt;// (8) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                                      &lt;span class=&#34;c1&#34;&gt;// (8) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;動的に確保された配列オブジェクトの記憶域を解放する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 単純な配列の記憶域の解放&lt;/li&gt;
&lt;li&gt;(2) : オブジェクトサイズが判明している場合の、配列オブジェクトの記憶域の解放&lt;/li&gt;
&lt;li&gt;(3) : デフォルトより大きいアライメント要求の、配列オブジェクトの記憶域の解放&lt;/li&gt;
&lt;li&gt;(4) : オブジェクトサイズが判明している場合の、デフォルトより大きいアライメント要求の、配列オブジェクトの記憶域の解放&lt;/li&gt;
&lt;li&gt;(5) : 単純な記憶域の解放。例外を送出しない設定で記憶域を確保されたオブジェクトに対する、配列オブジェクトの記憶域の解放&lt;/li&gt;
&lt;li&gt;(6) : 単純な記憶域の解放。例外を送出しない設定で記憶域を確保されたオブジェクトに対する、デフォルトより大きいアライメント要求の、配列オブジェクトの記憶域の解放&lt;/li&gt;
&lt;li&gt;(7) : 配置newで確保された配列オブジェクトの記憶域の解放&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new[].html&#34;&gt;new[]&lt;/a&gt;&lt;/code&gt;演算子によって動的に確保した記憶域を解放する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nothrow&lt;/code&gt;版の&lt;code&gt;delete[]&lt;/code&gt;演算子は、&lt;code&gt;nothrow&lt;/code&gt;版の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new[].html&#34;&gt;new[]&lt;/a&gt;&lt;/code&gt;演算子によって生成されたオブジェクトのコンストラクタが例外を送出した場合に呼び出される。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alignment&lt;/code&gt; 引数を取らない &lt;code&gt;delete[]&lt;/code&gt; 演算子に渡される &lt;code&gt;ptr&lt;/code&gt; は、 &lt;code&gt;alignment&lt;/code&gt; 引数を取らない &lt;code&gt;new[]&lt;/code&gt; 演算子によって確保されたものでなければならない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alignment&lt;/code&gt; 引数を取る &lt;code&gt;delete[]&lt;/code&gt; 演算子に渡される &lt;code&gt;ptr&lt;/code&gt; は、同じ &lt;code&gt;alignment&lt;/code&gt; の値を取った &lt;code&gt;alignment&lt;/code&gt; 版 &lt;code&gt;new[]&lt;/code&gt; 演算子によって確保されたものでなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;b364a29c25f68517f7f9e2dfbb957e325672f30d&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;new&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 3要素のint型配列を動的に作成&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 確保失敗時にbad_alloc例外が送出される&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;delete[]&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// p3の配列領域を解放&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 3要素のint型配列を動的に作成&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 確保失敗時にヌルポインタが返される&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;delete[]&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;std::bad_alloc&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;what&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/sized_deallocation.html&#34;&gt;C++14 サイズ付きデアロケーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wg21.cmeerw.net/lwg/issue2458&#34; target=&#34;_blank&#34;&gt;LWG 2458. N3778 and new library deallocation signatures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator new -- new 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/new/op_new.html"/>
      <id>4df5f0d39aca7342ed1c3b6cc828fce9a761e430:reference/new/op_new.md</id>
      <updated>2018-06-09T23:48:53+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;new&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace &#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;operator new&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;std::bad_alloc&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// (1) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                                   &lt;span class=&#34;c1&#34;&gt;// (1) C++11 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// (2) C++17 から&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// (3) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// (3) C++11 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                   &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;// (4) C++17 から&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// (5) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;// (5) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;単一オブジェクトのために動的に記憶域を確保する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 単純な記憶域の確保。指定されたサイズの記憶域を確保する&lt;/li&gt;
&lt;li&gt;(2) : (1)に対してデフォルトよりも大きいアライメント要求がされた場合に、アライメント値付きで呼び出される&lt;/li&gt;
&lt;li&gt;(3) : 単純な記憶域の確保。確保失敗時に例外送出しない。指定されたサイズの記憶域を確保する&lt;/li&gt;
&lt;li&gt;(4) : (3)に対してデフォルトよりも大きいアライメント要求がされた場合に、アライメント値付きで呼び出される&lt;/li&gt;
&lt;li&gt;(5) : 配置newによる記憶域の確保&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;size&lt;/code&gt; で指定したサイズ（バイト）の記憶域を確保する。&lt;br /&gt;
    確保された記憶域の先頭アドレスは、&lt;code&gt;size&lt;/code&gt; バイトのあらゆるオブジェクトのアライメント要求を満たしている。それより大きいアライメントが&lt;code&gt;alignment&lt;/code&gt; によって要求される場合、指定したアライメント要求を満たす。  &lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;size&lt;/code&gt; で指定したサイズ（バイト）の記憶域を確保する。&lt;br /&gt;
    確保された記憶域の先頭アドレスは、&lt;code&gt;alignment&lt;/code&gt;によって指定されたアライメント要求を満たす。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;size&lt;/code&gt; で指定したサイズ（バイト）の記憶域を確保する。&lt;br /&gt;
    確保された記憶域の先頭アドレスは、&lt;code&gt;size&lt;/code&gt; バイトのあらゆるオブジェクトのアライメント要求を満たしている。それより大きいアライメントが&lt;code&gt;alignment&lt;/code&gt; によって要求される場合、指定したアライメント要求を満たす。&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;size&lt;/code&gt; で指定したサイズ（バイト）の記憶域を確保する。&lt;br /&gt;
    確保された記憶域の先頭アドレスは、&lt;code&gt;alignment&lt;/code&gt; によって指定された、アライメント要求を満たす。&lt;/li&gt;
&lt;li&gt;(5) : 何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 確保した記憶域の先頭アドレスを指すポインタ。&lt;/li&gt;
&lt;li&gt;(3), (4) : 記憶域を確保できた場合、確保した記憶域の先頭アドレスを指すポインタ。&lt;br /&gt;
    確保できなかった場合、ヌルポインタ。&lt;/li&gt;
&lt;li&gt;(5) : 引数 &lt;code&gt;ptr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 確保に失敗した場合、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt;&lt;/code&gt; 例外を送出する&lt;/li&gt;
&lt;li&gt;(3), (4) : 確保に失敗した場合でも、例外を送出しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)と(2)、および、(3)と(4) の形式は、&lt;code&gt;size&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; でも他の確保済みの記憶域と異なるアドレスを返す。&lt;br /&gt;
    ただし、記憶域の確保に失敗する可能性もあり、また、成功しても当該ポインタを間接参照した場合の結果は未定義である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1)と(2)、および、(3)と(4) の形式は、利用者がこれらとおなじシグネチャの関数を用意することで、標準ライブラリの提供している関数を置き換えることができる。&lt;br /&gt;
    なお、(5) の形式については、置き換えることはできない（許可されていない）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)、および、(4) の形式は、C++17以降、デフォルトの &lt;code&gt;new&lt;/code&gt; が保証するアライメントよりも大きなアライメントを要求する型については自動的に &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/code&gt; を取るオーバーロードを選択する。
    このとき、&lt;code&gt;align_val_t(alignof(T))&lt;/code&gt; が引数として渡される。この閾値は定義済みマクロ &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt; で提供される。
    既存のコードを利用する観点から、利用者が &lt;code&gt;operator new&lt;/code&gt; を置き換えていた場合は、その型がデフォルトより大きなアライメントを要求していたとしても、ユーザーが置き換えた関数が使用される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)、および、(4) の形式において、&lt;code&gt;alignment&lt;/code&gt; に無効な値を渡した場合、その動作は未定義である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1)と(2) の形式の &lt;code&gt;operator new&lt;/code&gt; を呼び出すだけであれば、（&lt;code&gt;new&lt;/code&gt; 式から間接的に呼ばれる場合も含めて）&lt;code&gt;new&lt;/code&gt; ヘッダをインクルードする必要はない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1)と(2) の形式の詳細な正確な挙動は以下の通りである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; で指定したサイズ（バイト）の記憶域を確保しようとする。なお、記憶域の確保に C 言語のライブラリ関数 &lt;code&gt;malloc&lt;/code&gt; や &lt;code&gt;aligned_alloc&lt;/code&gt; を用いるか否かは規定されていない。&lt;/li&gt;
&lt;li&gt;もし、記憶域を確保できた場合、確保した先頭アドレスを返す。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;もし、確保できなかった場合、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;現在の &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/new_handler.html&#34;&gt;new_handler&lt;/a&gt;&lt;/code&gt; が ヌルポインタであれば、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt;&lt;/code&gt; 例外をスローする。&lt;/li&gt;
&lt;li&gt;現在の &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/new_handler.html&#34;&gt;new_handler&lt;/a&gt;&lt;/code&gt; が ヌルポインタでなければ、当該関数を呼び出した後、最初に戻って記憶域の確保から再試行する（ループする）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/new_handler.html&#34;&gt;new_handler&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt;&lt;/code&gt; 例外をスローしたり、呼び出し元に戻らなかったりすることがあるので注意。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) の形式の詳細な正確な挙動は、以下の通り C++03 までと C++11 以降で異なる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03 までの場合、(1) の形式とほぼ同様の処理を行うが、記憶域が確保できなかったり、現在の &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/new_handler.html&#34;&gt;new_handler&lt;/a&gt;&lt;/code&gt; が&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt;&lt;/code&gt; 例外をスローしたりした場合には、ヌルポインタを返す。&lt;/li&gt;
&lt;li&gt;C++11 以降の場合、(1) の形式を呼び出し、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt;&lt;/code&gt; 例外がスローされた場合には、ヌルポインタを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この差は、利用者が &lt;code&gt;operator new&lt;/code&gt; を置き換えていない場合には顕在化しないが、利用者が (1) の形式のみを置き換えた場合、C++03 までは (2) の形式を呼び出しても置き換えられたバージョンは呼び出されない。&lt;br /&gt;
&lt;code&gt;new&lt;/code&gt; 式と異なり、&lt;code&gt;delete&lt;/code&gt; 式には配置構文が存在しないため、(3) の形式で確保した記憶域も通常の &lt;code&gt;delete&lt;/code&gt; 式で解放することになる（コンストラクタで例外がスローされた場合を除く。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_delete.html&#34;&gt;operator delete&lt;/a&gt;&lt;/code&gt;も参照）。&lt;br /&gt;
従って、C++03 までの場合、(1) の形式を利用者提供の関数で置き換える場合は、(3) の形式も (1) の形式と同様の記憶域確保を行う利用者提供の関数で置き換えるべきである。その場合、C++11 の (3) の形式のように、(1) を呼び出した上で例外ハンドリングする方法が安全確実な方法である。&lt;br /&gt;
なお、C++11 からは (3) の形式は (1) を呼び出すことになっているため、 (1) の形式のみを置き換えれば問題はないが、C++03 までのバージョンでも同様に動くようにするため、あるいは、標準ライブラリのバグで (3) の形式が (1) の形式を呼び出していない可能性もあるため、(3) の形式も提供した方が良いかもしれない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) の形式は、実質何もしていない。この形式は、記憶域を確保した上でそこに新たなオブジェクトを構築するのではなく、あらかじめ確保されている記憶域上に新たなオブジェクトを構築するのに用いられる。&lt;br /&gt;
    一般に、プログラム実行中の記憶域の動的確保は、処理系が OS からヒープを確保するのに対し、(5) の形式では、既にプログラムに確保済みの任意の記憶域上にオブジェクトを構築するため、上手く使った場合には &lt;code&gt;new&lt;/code&gt; / &lt;code&gt;delete&lt;/code&gt; を大量に繰り返す必要のある処理を高速に実現しうる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;new&lt;/code&gt; 式は &lt;code&gt;operator new&lt;/code&gt; を呼び出すだけではない事に注意。&lt;br /&gt;
&lt;code&gt;new&lt;/code&gt; 式は、&lt;code&gt;operator new&lt;/code&gt; を呼び出した後、確保された記憶域上にオブジェクトを構築する（つまり、コンストラクタを呼び出す）。&lt;br /&gt;
    特に、(3) の形式を使用するために &lt;code&gt;new&lt;/code&gt; 式を &lt;code&gt;new(std::&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow&lt;/a&gt;)&lt;/code&gt; のようにしても、依然としてコンストラクタが例外をスローする可能性はあるため、&lt;code&gt;new&lt;/code&gt; 式が例外をスローしないとは限らない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;df208ba759993fbd3fc5f6b9c94f6081d218e8fc&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;span style=&#34;color:#ff0000&#34;&gt;new&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;complex&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (1) cl 型変数を動的に作成&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 確保失敗時に bad_alloc 例外が送出される&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;new&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// (3) cl 型変数を動的に作成&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 確保失敗時にヌルポインタが返される&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;new&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 配置 delete と言うものはないので、通常の delete 式で記憶域を解放する&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// (5) char 配列のスタック領域に、cl 型変数を動的に作成&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 領域のアライメントに注意&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;alignas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;one_field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;one_field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// delete は使えないため、デストラクタを直接呼び出す&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;std::bad_alloc&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;what&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator new[] -- new 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/new/op_new[].html"/>
      <id>4df5f0d39aca7342ed1c3b6cc828fce9a761e430:reference/new/op_new[].md</id>
      <updated>2018-06-09T23:48:53+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;new&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace &#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;operator new[]&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;std::bad_alloc&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;// (1) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                                         &lt;span class=&#34;c1&#34;&gt;// (1) C++11 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// (2) C++17 から&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// (3) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;// (3) C++11 から&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                     &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow_t&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                           &lt;span class=&#34;c1&#34;&gt;// (4) C++17 から&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;                      &lt;span class=&#34;c1&#34;&gt;// (5) C++03 まで&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;// (5) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;配列オブジェクトのために動的に記憶域を確保する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 単純な配列の記憶域の確保。指定されたサイズの記憶域を確保する&lt;/li&gt;
&lt;li&gt;(2) : (1)に対してデフォルトよりも大きいアライメント要求がされた場合に、アライメント値付きで呼び出される&lt;/li&gt;
&lt;li&gt;(3) : 単純な配列の記憶域の確保。確保失敗時に例外送出しない。指定されたサイズの記憶域を確保する&lt;/li&gt;
&lt;li&gt;(4) : (3)に対してデフォルトよりも大きいアライメント要求がされた場合に、アライメント値付きで呼び出される&lt;/li&gt;
&lt;li&gt;(5) : 配置newによる配列の記憶域の確保&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;operator new&lt;/a&gt;(size)&lt;/code&gt; を呼び出す。アライメントに関しては単一オブジェクト版と同様に動作する。&lt;/li&gt;
&lt;li&gt;(3), (4) : C++03 までと C++11 からで異なる。  &lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;operator new&lt;/a&gt;(size, std::&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow&lt;/a&gt;)&lt;/code&gt; を呼び出す。  &lt;/li&gt;
&lt;li&gt;C++11 から：(1) の形式を &lt;code&gt;operator new[](size)&lt;/code&gt; で呼び出す。ただし、記憶域の確保に失敗しても例外をスローしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(5) : 何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : 確保した記憶域の先頭アドレスを指すポインタ（&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;operator new&lt;/a&gt;(size)&lt;/code&gt; の戻り値）。&lt;/li&gt;
&lt;li&gt;(3), (4) : 記憶域を確保できた場合、確保した記憶域の先頭アドレスを指すポインタ。確保できなかった場合、ヌルポインタ。&lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;operator new&lt;/a&gt;(size, std::&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow&lt;/a&gt;)&lt;/code&gt; の戻り値&lt;/li&gt;
&lt;li&gt;C++11 から：&lt;code&gt;operator new[](size)&lt;/code&gt; の戻り値。ただし、&lt;code&gt;std::&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt;&lt;/code&gt; 例外がスローされた場合には、ヌルポインタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(5) : 引数 &lt;code&gt;ptr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)と(2)、および、(3)と(4) の形式は、&lt;code&gt;size&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; でも他の確保済みの記憶域と異なるアドレスを返す。&lt;br /&gt;
    ただし、記憶域の確保に失敗する可能性もあり、また、成功しても当該ポインタを間接参照した場合の結果は未定義である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1)と(2)、および、(3)と(4) の形式は、利用者がこれらとおなじシグネチャの関数を用意することで、標準ライブラリの提供している関数を置き換えることができる。&lt;br /&gt;
    なお、(5) の形式については、置き換えることはできない（許可されていない）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)、および、(4) の形式は、C++17以降、デフォルトの &lt;code&gt;new&lt;/code&gt; が保証するアライメントよりも大きなアライメントを要求する型については自動的に &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;std::align_val_t&lt;/a&gt;&lt;/code&gt; を取るオーバーロードを選択する。
    このとき、&lt;code&gt;align_val_t(alignof(T))&lt;/code&gt; が引数として渡される。この閾値は定義済みマクロ &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt; で提供される。
    既存のコードを利用する観点から、利用者が &lt;code&gt;operator new&lt;/code&gt; を置き換えていた場合は、その型がデフォルトより大きなアライメントを要求していたとしても、ユーザーが置き換えた関数が使用される。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2)、および、(4) の形式において、&lt;code&gt;alignment&lt;/code&gt; に無効な値を渡した場合、その動作は未定義である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1)と(2) の形式の &lt;code&gt;operator new[]&lt;/code&gt; を呼び出すだけであれば、（&lt;code&gt;new&lt;/code&gt; 式から間接的に呼ばれる場合も含めて）&lt;code&gt;new&lt;/code&gt; ヘッダをインクルードする必要はない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) の形式の挙動の C++03 までと C++11 からの差は、利用者が &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;operator new&lt;/a&gt;&lt;/code&gt;、あるいは &lt;code&gt;operator new[]&lt;/code&gt; を置き換えていない場合には顕在化しない。&lt;br /&gt;
    しかし、例えば利用者が (1) の形式のみを置き換えた場合、C++03 までは (3) の形式を呼び出しても置き換えられたバージョンは呼び出されずに、間接的に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;operator new&lt;/a&gt;&lt;/code&gt; の (3) の形式を呼び出す。&lt;br /&gt;
&lt;code&gt;new&lt;/code&gt; 式と異なり、&lt;code&gt;delete&lt;/code&gt; 式には配置構文が存在しないため、(3) の形式で確保した記憶域も通常の &lt;code&gt;delete&lt;/code&gt; 式で解放する事になる（コンストラクタで例外がスローされた場合を除く。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_delete[].html&#34;&gt;operator delete[]&lt;/a&gt;&lt;/code&gt; も参照）。&lt;br /&gt;
    従って、C++03 までの場合、(1) の形式を利用者提供の関数で置き換える場合は、(3) の形式も (1) の形式と同様の記憶域確保を行う利用者提供の関数で置き換えるべきである。その場合、C++11 の (3) の形式のように、(1) を呼び出した上で例外ハンドリングする方法が安全確実な方法である。&lt;br /&gt;
    なお、C++11 からは (3) の形式は (1) を呼び出すことになっているため、 (1) の形式のみを置き換えれば問題はないが、C++03 までのバージョンでも同様に動くようにするため、あるいは、標準ライブラリのバグで (3) の形式が (1) の形式を呼び出していない可能性もあるため、(3) の形式も提供した方が良いかもしれない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(5) の形式は、実質何もしていない。この形式は、記憶域を確保した上でそこに新たなオブジェクトを構築するのではなく、あらかじめ確保されている記憶域上に新たなオブジェクトを構築するのに用いられる。&lt;br /&gt;
    しかし、配列版 &lt;code&gt;new&lt;/code&gt; 式では、指定した配列が必要とする記憶域のサイズをあらかじめ予測することが極めて困難であるため（下記を参照）、配列版 &lt;code&gt;new&lt;/code&gt; 式の配置形式は使用すべきではない。&lt;br /&gt;
    どうしても、あらかじめ確保されている記憶域上に配列を構築したい場合には、ループで単一オブジェクト版の配置 &lt;code&gt;new&lt;/code&gt; を使用するなどして構築すること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配列版 &lt;code&gt;new&lt;/code&gt; 式は &lt;code&gt;operator new[]&lt;/code&gt; を呼び出すだけではない事に注意。&lt;br /&gt;
    配列版 &lt;code&gt;new&lt;/code&gt; 式は、&lt;code&gt;operator new[]&lt;/code&gt; を呼び出した後、確保された記憶域上にオブジェクトを構築する（つまり、コンストラクタを呼び出す）。&lt;br /&gt;
    特に、(3) の形式を使用するために &lt;code&gt;new&lt;/code&gt; 式を &lt;code&gt;new(std::&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow&lt;/a&gt;)&lt;/code&gt; のようにしても、依然としてコンストラクタが例外をスローする可能性はあるため、&lt;code&gt;new&lt;/code&gt; 式が例外をスローしないとは限らない。&lt;br /&gt;
    また、配列版 &lt;code&gt;new&lt;/code&gt; 式は、C++11 以降、配列の要素数の指定によっては &lt;code&gt;std::&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_array_new_length.html&#34;&gt;bad_array_new_length&lt;/a&gt;&lt;/code&gt; をスローする可能性もある。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;size&lt;/code&gt; は、配列版 &lt;code&gt;new&lt;/code&gt; 式で指定されている配列の合計サイズより大きい可能性がある。&lt;br /&gt;
    これは、配列版 &lt;code&gt;delete&lt;/code&gt; 式を実行する際に、全要素に対してデストラクタを呼び出す等のために、配列要素そのもの以外の情報を格納することがあるためである。&lt;br /&gt;
    なお、このオーバーヘッドのサイズは、実装によって異なるだけでなく、同一の実装でも場合によって異なる可能性があり、あらかじめこのサイズを知ることは極めて困難である。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;f7d4f1802830cdd3f976aeed3d15264c598ec9b6&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;&lt;span style=&#34;color:#ff0000&#34;&gt;new&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;complex&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (1) 3 要素の cl 型配列を動的に作成&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 確保失敗時に bad_alloc 例外が送出される&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;new&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 32) 3 要素の cl 型配列を動的に作成&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 確保失敗時にヌルポインタが返される&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;new&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;std::nothrow&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 配置 delete と言うものはないので、通常の delete 式で記憶域を解放する&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// (5) char 配列のスタック領域に、3 要素の cl 型配列を動的に作成&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// ただし、危険なため、使用してはいけない&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//alignas(cl[3]) char array_field[sizeof(cl) * 3] = {};&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//cl* p3 = &lt;span style=&#34;color:#ff0000&#34;&gt;new&lt;/span&gt;(array_field) cl[3];&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//for (std::size_t i = 3; i &amp;gt; 0; ) {    // ループでデストラクタを呼び出す&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//  --i;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//  p3[i].~cl();&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 参考 char 配列のスタック領域に、3 要素の cl 型配列を動的に作成&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// (5) の形式ではなく、ループでオブジェクトを構築&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;alignas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array_field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array_field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// ループで配置 &lt;span style=&#34;color:#ff0000&#34;&gt;new&lt;/span&gt; を呼び出す&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// ループでデストラクタを呼び出す&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;std::bad_alloc&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;what&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Callable -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/Callable.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/Callable.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Callable&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Callable&lt;/code&gt;は、関数呼び出し可能な型を表す、型の分類、または要件である。ライブラリ機能ではない。&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;Callable&lt;/code&gt;に該当する型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;関数ポインタ&lt;/li&gt;
&lt;li&gt;関数オブジェクト&lt;/li&gt;
&lt;li&gt;メンバ関数ポインタ&lt;/li&gt;
&lt;li&gt;メンバ変数ポインタ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;クラスは、&lt;code&gt;Callable&lt;/code&gt;に該当するあらゆる型のオブジェクトを代入できる仕様になっている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;e27a0a2d44fa9bb6390c8100f7b42390ff3a51cb&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;functional&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 関数を代入&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// 関数オブジェクトを代入&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// メンバ関数ポインタを代入&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// メンバ変数ポインタを代入&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>CopyAssignable -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/CopyAssignable.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/CopyAssignable.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;CopyAssignable&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;CopyAssignableは、任意の型&lt;code&gt;T&lt;/code&gt;が、コピー代入可能であることを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/MoveAssignable.html&#34;&gt;MoveAssignable&lt;/a&gt;の要件に加えて、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;の、変更可能な左辺値オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;の左辺値オブジェクト(&lt;code&gt;const&lt;/code&gt;であってもよい)&lt;/li&gt;
&lt;li&gt;上述した式の戻り値型は&lt;code&gt;T&amp;amp;&lt;/code&gt;であること&lt;/li&gt;
&lt;li&gt;上述した式の戻り値は&lt;code&gt;t&lt;/code&gt;であること&lt;/li&gt;
&lt;li&gt;上述した式の結果として、&lt;code&gt;v&lt;/code&gt;の状態は変わらず、&lt;code&gt;t&lt;/code&gt;は&lt;code&gt;v&lt;/code&gt;と同等になること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_copy_assignable.html&#34;&gt;is_copy_assignable&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>CopyConstructible -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/CopyConstructible.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/CopyConstructible.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;CopyConstructible&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;CopyConstructibleは、任意の型&lt;code&gt;T&lt;/code&gt;がコピー構築可能であることを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/MoveConstructible.html&#34;&gt;MoveConstructible&lt;/a&gt;の要件に加えて、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;の左辺値オブジェクト(&lt;code&gt;const&lt;/code&gt;であってもよい)&lt;/li&gt;
&lt;li&gt;上述した式を実行した結果として、&lt;code&gt;v&lt;/code&gt;の状態は変わらず、&lt;code&gt;u&lt;/code&gt;は&lt;code&gt;v&lt;/code&gt;と同等になること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;の左辺値オブジェクト(&lt;code&gt;const&lt;/code&gt;であってもよい)&lt;/li&gt;
&lt;li&gt;上述した式を実行した結果として、&lt;code&gt;v&lt;/code&gt;の状態は変わらず、&lt;code&gt;T(v)&lt;/code&gt;の結果となるオブジェクトは&lt;code&gt;v&lt;/code&gt;と同等になること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_copy_constructible.html&#34;&gt;is_copy_constructible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>DefaultConstructible -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/DefaultConstructible.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/DefaultConstructible.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;DefaultConstructible&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;DefaultConstructibleは、任意の型&lt;code&gt;T&lt;/code&gt;がデフォルト構築可能であること表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この式を実行した結果として、&lt;code&gt;t&lt;/code&gt;はデフォルト初期化されること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この式を実行した結果として、&lt;code&gt;u&lt;/code&gt;は値初期化されること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これらの式を実行した結果として、&lt;code&gt;T&lt;/code&gt;型の一時オブジェクトは値初期化されること&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_default_constructible.html&#34;&gt;is_default_constructible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Destructible -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/Destructible.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/Destructible.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Destructible&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Destructibleは、任意の型&lt;code&gt;T&lt;/code&gt;が破棄可能であることを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;任意の型&lt;code&gt;T&lt;/code&gt;の変更可能な左辺値オブジェクト&lt;code&gt;u&lt;/code&gt;について、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この式を実行した結果として、オブジェクト&lt;code&gt;u&lt;/code&gt;が所有する全てのリソースが回収され、例外を伝搬しないこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_destructible.html&#34;&gt;is_destructible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>EqualityComparable -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/EqualityComparable.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/EqualityComparable.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;EqualityComparable&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;EqualityComparableは、2つのオブジェクト&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;が&lt;code&gt;==&lt;/code&gt;演算子で等価関係にあるかを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;のオブジェクト&lt;/li&gt;
&lt;li&gt;上述した式の結果として、&lt;code&gt;bool&lt;/code&gt;に変換可能な型が返ること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;が等価関係を持ち、以下の特性を持つこと：&lt;ul&gt;
&lt;li&gt;全ての&lt;code&gt;a&lt;/code&gt;について、&lt;code&gt;a == a&lt;/code&gt;が成り立つこと&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a == b&lt;/code&gt;であれば、&lt;code&gt;b == a&lt;/code&gt;であること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a == b&lt;/code&gt;かつ&lt;code&gt;b == c&lt;/code&gt;であれば、&lt;code&gt;a == c&lt;/code&gt;であること&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>INVOKE -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/Invoke.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/Invoke.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;INVOKE&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;用語定義&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;call-signature&lt;/em&gt; とは、戻り値型に続けて丸括弧の中に0個以上の引数型を並べたものである。 &lt;em&gt;cf.&lt;/em&gt; &lt;code&gt;int ( std::string, int )&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;callable-type&lt;/em&gt; とは、関数呼び出し演算子を適用できる型 ( 関数、関数への参照、関数へのポインタ、&lt;code&gt;operator ()&lt;/code&gt; をオーバーロードした型もしくはそれを(直接または間接的に) &lt;code&gt;public&lt;/code&gt; 継承した型 ) もしくはメンバへのポインタ型を指す。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;callable-object&lt;/em&gt; は、 &lt;em&gt;callable-type&lt;/em&gt; 型のオブジェクトである。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;call-wrapper-type&lt;/em&gt; は、 &lt;em&gt;callable-object&lt;/em&gt; を保持し、自身に対する関数呼び出し操作が行われたとき、保持しているオブジェクトに委譲する。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;call-wrapper&lt;/em&gt; は、 &lt;em&gt;call-wrapper-type&lt;/em&gt; 型のオブジェクトである。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;target-object&lt;/em&gt; とは、 &lt;em&gt;callable-object&lt;/em&gt; に保持されているオブジェクトのことである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;仮想操作 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; を次のように定義する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、 &lt;code&gt;t1&lt;/code&gt; が T 型のオブジェクトあるいは &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型への参照であるとき、 &lt;code&gt;(t1.*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、 &lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合、&lt;code&gt;((*t1).*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;t1&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; 型のオブジェクトあるいは &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型への参照であるとき、 &lt;code&gt;t1.*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合、 &lt;code&gt;(*t1).*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;上記の条件のどれにも当てはまらない場合、 &lt;code&gt;f(t1, t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN, R)&lt;/code&gt; を、 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; の実行結果の戻り値が型 &lt;code&gt;R&lt;/code&gt; に暗黙的に変換されること、と定義する。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;call-wrapper&lt;/em&gt; が &lt;em&gt;weak-result-type&lt;/em&gt; を用意している場合、メンバ型 &lt;code&gt;result_type&lt;/code&gt; は&lt;em&gt;target-object&lt;/em&gt; の型 &lt;code&gt;T&lt;/code&gt; に応じて次のように定義される。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; が関数へのポインタ型であるとき、 &lt;code&gt;result_type&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; の戻り値型と等しい。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; がメンバ関数へのポインタ型であるとき、 &lt;code&gt;result_type&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; の戻り値型と等しい。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;result_type&lt;/code&gt; という名前のメンバ型を持つとき、 &lt;code&gt;result_type&lt;/code&gt; は &lt;code&gt;T::result_type&lt;/code&gt; と等しい。&lt;/li&gt;
&lt;li&gt;どの条件にも当てはまらない場合、 &lt;code&gt;result_type&lt;/code&gt; は定義されない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;すべての &lt;em&gt;call-wrapper&lt;/em&gt; は、&lt;em&gt;MoveAssignable&lt;/em&gt; でなければならない。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/Cryolite/status/216814363221303296&#34; target=&#34;_blank&#34;&gt;第1引数がメンバ関数へのポインタの場合でも非静的メンバデータへのポインタの場合でも，第2引数がクラスオブジェクトへの参照の場合でもポインタの場合でもポインタっぽいものの場合でも，なんか知らんけどそれっぽく上手くいく&lt;/a&gt; ように取り計らった操作のことである。&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LessThanComparable -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/LessThanComparable.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/LessThanComparable.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;LessThanComparable&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;LessThanComparableは、2つのオブジェクト&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;が&lt;code&gt;&amp;lt;&lt;/code&gt;演算子で大小関係にあるかを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;のオブジェクト&lt;/li&gt;
&lt;li&gt;上述した式の結果として、&lt;code&gt;bool&lt;/code&gt;に変換可能な型が返ること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;は狭義の弱順序を持つこと&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>MoveAssignable -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/MoveAssignable.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/MoveAssignable.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;MoveAssignable&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;MoveAssignableは、任意の型&lt;code&gt;T&lt;/code&gt;がムーブ代入可能であることを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;の、変更可能な左辺値オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rv&lt;/code&gt;は、任意の型&lt;code&gt;T&lt;/code&gt;の右辺値オブジェクト&lt;/li&gt;
&lt;li&gt;上述した式の戻り値型は&lt;code&gt;T&amp;amp;&lt;/code&gt;であること&lt;/li&gt;
&lt;li&gt;上述した式の戻り値は&lt;code&gt;t&lt;/code&gt;であること&lt;/li&gt;
&lt;li&gt;上述した式の結果として&lt;code&gt;t&lt;/code&gt;は、この式を実行する前の&lt;code&gt;rv&lt;/code&gt;と同等になること&lt;/li&gt;
&lt;li&gt;上述した式を実行したあとの&lt;code&gt;rv&lt;/code&gt;の状態は未規定とし、各ライブラリもしくは実装がその動作を規定する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_move_assignable.html&#34;&gt;is_move_assignable&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>MoveConstructible -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/MoveConstructible.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/MoveConstructible.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;MoveConstructible&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;MoveConstructibleは、任意の型&lt;code&gt;T&lt;/code&gt;がムーブ構築可能であることを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rv&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;の右辺値オブジェクト&lt;/li&gt;
&lt;li&gt;上述した式を実行した結果として、&lt;code&gt;u&lt;/code&gt;はこの式を実行する前の&lt;code&gt;rv&lt;/code&gt;と同等になること&lt;/li&gt;
&lt;li&gt;上述した式を実行したあとの&lt;code&gt;rv&lt;/code&gt;の状態は未規定とし、各ライブラリもしくは実装がその動作を規定する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに、以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rv&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;の右辺値オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T(rv)&lt;/code&gt;を実行した結果のオブジェクトは、その式を実行する前の&lt;code&gt;rv&lt;/code&gt;と同等になること&lt;/li&gt;
&lt;li&gt;上述した式を実行したあとの&lt;code&gt;rv&lt;/code&gt;の状態は未規定とし、各ライブラリもしくは実装がその動作を規定する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_move_constructible.html&#34;&gt;is_move_constructible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Swappable -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/Swappable.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/Swappable.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;Swappable&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Swappableは、任意の型&lt;code&gt;T&lt;/code&gt;のオブジェクトと任意の型&lt;code&gt;U&lt;/code&gt;のオブジェクトが入れ替え可能かを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt;を型&lt;code&gt;T&lt;/code&gt;のオブジェクト、&lt;code&gt;u&lt;/code&gt;を型&lt;code&gt;U&lt;/code&gt;のオブジェクトとする&lt;/li&gt;
&lt;li&gt;以下が可能である場合にのみ、&lt;code&gt;t&lt;/code&gt;は&lt;code&gt;u&lt;/code&gt;と入れ替え可能(swappable)である：&lt;ul&gt;
&lt;li&gt;式&lt;code&gt;swap(t, u)&lt;/code&gt;と式&lt;code&gt;swap(u, t)&lt;/code&gt;が、後述する文脈で評価された場合に、有効であり、それに加えて&lt;/li&gt;
&lt;li&gt;その式が以下の効果を持っていること：&lt;ul&gt;
&lt;li&gt;オブジェクト&lt;code&gt;t&lt;/code&gt;が、変更前の&lt;code&gt;u&lt;/code&gt;が保持していた値を持つようになり、&lt;/li&gt;
&lt;li&gt;オブジェクト&lt;code&gt;u&lt;/code&gt;が、変更前の&lt;code&gt;t&lt;/code&gt;が保持していた値を持つようになる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap(t, u)&lt;/code&gt;と&lt;code&gt;swap(u, t)&lt;/code&gt;が評価される文脈は、「&lt;code&gt;swap&lt;/code&gt;」という名前の、2つのパラメータをとる非メンバ関数が、オーバーロード解決を介して選択されることを保証しなければならない。そのオーバーロードの候補は、以下を含む：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;で定義される&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/swap.html&#34;&gt;&lt;code&gt;swap()&lt;/code&gt;関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;引数依存の名前探索によって見つかる&lt;code&gt;swap()&lt;/code&gt;関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;右辺値もしくは左辺値の&lt;code&gt;t&lt;/code&gt;は、&lt;code&gt;t&lt;/code&gt;が右辺値もしくは左辺値と入れ替え可能である場合にのみ入れ替え可能である&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ValueSwappable -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/ValueSwappable.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/concepts/ValueSwappable.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ValueSwappable&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ValueSwappableは、イテレータ要件を満たす型のオブジェクトが、間接参照した値で入れ替え可能かを表す要件である&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;イテレータの要件を満たす型&lt;code&gt;X&lt;/code&gt;のオブジェクト&lt;code&gt;x&lt;/code&gt;において、式&lt;code&gt;*x&lt;/code&gt;によって得られるオブジェクトで&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/Swappable.html&#34;&gt;入れ替え可能&lt;/a&gt;であること&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>CopyInsertable -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/container_concepts/CopyInsertable.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/container_concepts/CopyInsertable.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;CopyInsertable&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;CopyInsertableは、任意のコンテナ&lt;code&gt;X&lt;/code&gt;に対して、その要素型オブジェクトをコピー挿入可能かを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;construct&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;A&lt;/code&gt;は、任意のコンテナ&lt;code&gt;X&lt;/code&gt;に使用するメモリアロケータ型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt;は、型&lt;code&gt;A&lt;/code&gt;のメモリアロケータオブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;は、コンテナ&lt;code&gt;X&lt;/code&gt;の要素型を指すポインタ型オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;は、挿入する要素。コンテナ&lt;code&gt;X&lt;/code&gt;の要素型&lt;code&gt;T&lt;/code&gt;のオブジェクトである&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>EmplaceConstructible -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/container_concepts/EmplaceConstructible.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/container_concepts/EmplaceConstructible.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;EmplaceConstructible&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;EmplaceConstructibleは、任意のコンテナ&lt;code&gt;X&lt;/code&gt;に対して、要素型&lt;code&gt;T&lt;/code&gt;のコンストラクタ引数列&lt;code&gt;args&lt;/code&gt;から直接構築可能かを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;construct&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;A&lt;/code&gt;は、任意のコンテナ&lt;code&gt;X&lt;/code&gt;に使用するメモリアロケータ型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt;は、型&lt;code&gt;A&lt;/code&gt;のメモリアロケータオブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;は、コンテナ&lt;code&gt;X&lt;/code&gt;の要素型を指すポインタ型オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt;は、挿入する要素のコンストラクタ引数。コンテナ&lt;code&gt;X&lt;/code&gt;の要素型&lt;code&gt;T&lt;/code&gt;の、ゼロ個以上のコンストラクタ引数列である&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>MoveInsertable -- concepts 及び container_concepts 配下のファイルのメタ情報を修正</title>
      <link href="https://cpprefjp.github.io/reference/container_concepts/MoveInsertable.html"/>
      <id>a976747782c0ff549afbb3856c6c4fde06616eb4:reference/container_concepts/MoveInsertable.md</id>
      <updated>2018-06-08T20:44:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;MoveInsertable&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;MoveInsertableは、任意のコンテナ&lt;code&gt;X&lt;/code&gt;に対して、その要素型の右辺値オブジェクトをムーブ挿入可能かを表す要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;以下の式が可能であること：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits/construct.html&#34;&gt;construct&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;A&lt;/code&gt;は、任意のコンテナ&lt;code&gt;X&lt;/code&gt;に使用するメモリアロケータ型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt;は、型&lt;code&gt;A&lt;/code&gt;のメモリアロケータオブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;は、コンテナ&lt;code&gt;X&lt;/code&gt;の要素型を指すポインタ型オブジェクト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rv&lt;/code&gt;は、挿入する要素の右辺値。コンテナ&lt;code&gt;X&lt;/code&gt;の要素型&lt;code&gt;T&lt;/code&gt;の右辺値オブジェクトである&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_directory -- is_directory : シンボリックリンクの例を追加</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/is_directory.html"/>
      <id>e82af6c8a4e2c4bd39022f0f38e86f87ef003dfd:reference/filesystem/is_directory.md</id>
      <updated>2018-06-09T00:40:35+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std::filesystem&#34;&gt;std::filesystem::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;is_directory&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filesystem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;file_status&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                      &lt;span class=&#34;c1&#34;&gt;// (1)&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                               &lt;span class=&#34;c1&#34;&gt;// (2)&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error_code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (3)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定されたパスがディレクトリを指しているかを確認する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;return &lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status/type.html&#34;&gt;s.type()&lt;/a&gt; == &lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type::directory&lt;/a&gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;return is_directory(&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/status.html&#34;&gt;status&lt;/a&gt;(p));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(3) :
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;file_status&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/status.html&#34;&gt;status&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_known&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_code/clear.html&#34;&gt;ec.clear()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 投げない&lt;/li&gt;
&lt;li&gt;(2) : ファイルシステムがエラーを報告する場合がある。それに加えて、指定されたファイルの種別が&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type::unknown&lt;/a&gt;&lt;/code&gt;のいずれかである場合もエラーである。エラーが発生した場合は、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/filesystem_error.html&#34;&gt;std::filesystem::filesystem_error&lt;/a&gt;&lt;/code&gt;例外を送出する&lt;/li&gt;
&lt;li&gt;(3) : 投げない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;ee972cfe7f06e05eea9523b4485f059de1e0c487&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;filesystem&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filesystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ofstream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;regular.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/create_directory.md.nolink&#34;&gt;fs::create_directory&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;dir&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/create_directory_symlink.md.nolink&#34;&gt;fs::create_directory_symlink&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;dir&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;dir_symlink&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (1)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 取得済みのファイル状態を使用して、ディレクトリかを確認&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::is_directory&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/status.html&#34;&gt;fs::status&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;dir&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (2)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// パスを指定して、ディレクトリかを確認。&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// シンボリックリンクはリンク先ファイルで判定される&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::is_directory&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;dir&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::is_directory&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;dir_symlink&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::is_directory&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;regular.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (3)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// エラー情報を例外ではなくerror_codeで受け取る&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error_code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::is_directory&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;dir&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++17&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++17 mode&lt;/a&gt;: 8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_regular_file -- is_regular_file : シンボリックリンクの例を追加</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/is_regular_file.html"/>
      <id>ca0513159a90a2cda6f1bf94180bb927f950c9f1:reference/filesystem/is_regular_file.md</id>
      <updated>2018-06-08T17:57:41+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std::filesystem&#34;&gt;std::filesystem::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;is_regular_file&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filesystem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_regular_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;file_status&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                      &lt;span class=&#34;c1&#34;&gt;// (1)&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_regular_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                               &lt;span class=&#34;c1&#34;&gt;// (2)&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_regular_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error_code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (3)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;指定されたパスが通常ファイルを指しているかを確認する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;return &lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status/type.html&#34;&gt;s.type()&lt;/a&gt; == &lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type::regular&lt;/a&gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;return is_regular_file(&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/status.html&#34;&gt;status&lt;/a&gt;(p));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(3) :
  &lt;br /&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;file_status&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/status.html&#34;&gt;status&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ファイルが見つからなかったらエラー&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status/type.html&#34;&gt;s.type()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;none&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;not_found&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unknown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_code/clear.html&#34;&gt;ec.clear()&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_regular_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 投げない&lt;/li&gt;
&lt;li&gt;(2) : ファイルシステムがエラーを報告する場合がある。それに加えて、指定されたファイルの種別が&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type::none&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type::not_found&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type::unknown&lt;/a&gt;&lt;/code&gt;のいずれかである場合もエラーである。エラーが発生した場合は、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/filesystem_error.html&#34;&gt;std::filesystem::filesystem_error&lt;/a&gt;&lt;/code&gt;例外を送出する&lt;/li&gt;
&lt;li&gt;(3) : 投げない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;a81363a9072238c62d7994df0a78641d77c4a90d&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;filesystem&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filesystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ofstream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;regular.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/create_symlink.md.nolink&#34;&gt;fs::create_symlink&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;regular.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;regular.symlink&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/create_directory.md.nolink&#34;&gt;fs::create_directory&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;dir&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (1)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 取得済みのファイル状態を使用して、通常ファイルかを確認&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::is_regular_file&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/status.html&#34;&gt;fs::status&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;regular.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)));&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (2)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// パスを指定して、通常ファイルかを確認。&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// シンボリックリンクはリンク先ファイルで判定される&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::is_regular_file&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;regular.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::is_regular_file&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;regular.symlink&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::is_regular_file&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;dir&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (3)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// エラー情報を例外ではなくerror_codeで受け取る&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error_code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::is_regular_file&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;regular.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++17&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++17 mode&lt;/a&gt;: 8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symlink_status -- is_regular_file : シンボリックリンクの例を追加</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/symlink_status.html"/>
      <id>ca0513159a90a2cda6f1bf94180bb927f950c9f1:reference/filesystem/symlink_status.md</id>
      <updated>2018-06-08T17:57:41+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std::filesystem&#34;&gt;std::filesystem::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;symlink_status&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filesystem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;file_status&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;symlink_status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;                          &lt;span class=&#34;c1&#34;&gt;// (1)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;file_status&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;symlink_status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/path.html&#34;&gt;path&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_code.html&#34;&gt;error_code&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (2)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;シンボリックリンクの状態を取得する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/status.html&#34;&gt;std::filesystem::status()&lt;/a&gt;&lt;/code&gt;関数にシンボリックリンクのパスを指定した場合、シンボリックリンクが指すファイルの状態を取得するが、この関数はリンク自体の状態を取得する。シンボリックリンク以外のファイルに対しては、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/status.html&#34;&gt;std::filesystem::status()&lt;/a&gt;&lt;/code&gt;関数と同じ動作をする。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 以下を行う：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_code.html&#34;&gt;error_code&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;file_status&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;symlink_status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status/type.html&#34;&gt;result.type()&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/filesystem_error.html&#34;&gt;filesystem_error&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;実装定義のメッセージ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(2) :&lt;ul&gt;
&lt;li&gt;可能なら、ファイルパス&lt;code&gt;p&lt;/code&gt;が指すファイルの属性を決定する。シンボリックリンクに対しては、シンボリックリンクが指すファイルではなく、シンボリックリンク自体のファイル属性を決定する&lt;ul&gt;
&lt;li&gt;POSIX環境であれば&lt;code&gt;&lt;a href=&#34;https://linuxjm.osdn.jp/html/LDP_man-pages/man2/stat.2.html&#34; target=&#34;_blank&#34;&gt;lstat()&lt;/a&gt;&lt;/code&gt;関数を使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OSのファイルシステムAPIによってエラーが報告された場合、&lt;code&gt;ec&lt;/code&gt;にエラー情報が設定される。そうでなければ、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_code/clear.html&#34;&gt;ec.clear()&lt;/a&gt;&lt;/code&gt;を呼び出し、エラー情報をクリアする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : ファイルパス&lt;code&gt;p&lt;/code&gt;が指すファイルの状態を返す&lt;/li&gt;
&lt;li&gt;(2) :&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ec&lt;/code&gt;にエラー情報が設定された場合、&lt;ul&gt;
&lt;li&gt;ファイルパス&lt;code&gt;p&lt;/code&gt;が見つからなかった場合、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;file_status&lt;/a&gt;{&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type::not_found&lt;/a&gt;, &lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/perms.html&#34;&gt;perms::unknown&lt;/a&gt;}&lt;/code&gt;が返る&lt;/li&gt;
&lt;li&gt;ファイルパス&lt;code&gt;p&lt;/code&gt;は見つかったが属性を決定できなかった場合、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;file_status&lt;/a&gt;{&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type::unknown&lt;/a&gt;, &lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/perms.html&#34;&gt;perms::unknown&lt;/a&gt;}&lt;/code&gt;が返る&lt;/li&gt;
&lt;li&gt;そのいずれでもなければ、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;file_status&lt;/a&gt;{&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type::none&lt;/a&gt;, &lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/perms.html&#34;&gt;perms::unknown&lt;/a&gt;}&lt;/code&gt;が返る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正常にファイル属性を取得できた場合、シンボリックリンク以外のファイルに対しては、そのファイル種別とファイル権限。シンボリックリンクに対しては、ファイル種別として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;file_type::symlink&lt;/a&gt;&lt;/code&gt;と、ファイル権限が設定された&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;file_status&lt;/a&gt;&lt;/code&gt;オブジェクトが返る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : ファイルが見つからない場合、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/filesystem_error.html&#34;&gt;std::filesystem::filesystem_error&lt;/a&gt;&lt;/code&gt;例外を送出する&lt;/li&gt;
&lt;li&gt;(2) : 投げない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;e2a7c4b2b8d697e32a14b7ded91a171c01d96efe&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;filesystem&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filesystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ofstream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/create_symlink.md.nolink&#34;&gt;fs::create_symlink&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a_symlink.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;a.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (1)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;fs::file_status&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::symlink_status&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a_symlink.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status/type.html&#34;&gt;status.type()&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;fs::file_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symlink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status/permissions.html&#34;&gt;status.permissions()&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/perms.html&#34;&gt;fs::perms&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;owner_write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/perms.html&#34;&gt;fs::perms&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filesystem_error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;what&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// (2)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error_code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status.html&#34;&gt;fs::file_status&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;fs::symlink_status&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;a_symlink.txt&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status/type.html&#34;&gt;status.type()&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_type.html&#34;&gt;fs::file_type&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symlink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/file_status/permissions.html&#34;&gt;status.permissions()&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/perms.html&#34;&gt;fs::perms&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;owner_write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/perms.html&#34;&gt;fs::perms&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++17&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++17 mode&lt;/a&gt;: 8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
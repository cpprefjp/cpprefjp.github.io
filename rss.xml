<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-10-16T06:40:42.920849</updated>
  <id>36bab996-421e-4b03-aeb0-2132d9803cc2</id>

  
    <entry>
      <title>bad_array_new_length -- bad_array_new_length : サンプルコードを追加</title>
      <link href="https://cpprefjp.github.io/reference/new/bad_array_new_length.html"/>
      <id>ab361724c3a851217581c9daf8eecf009f7527ee:reference/new/bad_array_new_length.md</id>
      <updated>2024-10-16T13:02:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/bad_array_new_length.md b/reference/new/bad_array_new_length.md
index 76f189b9b..6ab8cac67 100644
--- a/reference/new/bad_array_new_length.md
+++ b/reference/new/bad_array_new_length.md
@@ -18,6 +18,31 @@ namespace std {
 動的に記憶域を確保しようとする配列の長さが 0 未満または処理系の最大値以上の場合に送出される例外。
 
 
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  int n = -1;
+  try {
+    int* p = new int[n];
+    delete[] p;
+  }
+  catch (std::bad_array_new_length&amp;amp;) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;bad array new length&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力例
+```
+bad array new length
+```
+
 ## バージョン
 C++11
 
+### 処理系
+- [Clang](/implementation.md#clang): 7 [mark verified]
+- [GCC](/implementation.md#gcc): 4.9 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2019 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>knuth_b -- knuth_b : 書籍での紹介を「考案」→「述べられている」に修正し、.NETの実装は別アルゴリズムであるため言及を削除 #1355</title>
      <link href="https://cpprefjp.github.io/reference/random/knuth_b.html"/>
      <id>7a4c6c55911bbf152021f6a6bcfdd4547179572f:reference/random/knuth_b.md</id>
      <updated>2024-10-16T12:43:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/knuth_b.md b/reference/random/knuth_b.md
index 327897c3f..1c6d6ea38 100644
--- a/reference/random/knuth_b.md
+++ b/reference/random/knuth_b.md
@@ -17,9 +17,7 @@ namespace std {
 
 `knuth_b`では、[`minstd_rand0`](minstd_rand0.md)によって生成された乱数を`256`個バッファリングしておき、順番を入れ替えて値を選択していく。これにより、線形合同法([`minstd_rand0`](minstd_rand0.md) or [`minstd_rand`](minstd_rand.md))を直接使用するよりも出力間の相関関係が小さくなり、乱雑さが増加する。
 
-Donald Knuth氏の著書『The Art of Computer Programming, Second Edition, Volume 2, Seminumerical Algorithms』で考案された、リオーダーアルゴリズムBがそれだ。  
-
-このアルゴリズムは、Microsoft .NET Frameworkの[`System.Random`](https://docs.microsoft.com/ja-jp/dotnet/api/system.random)クラスにも、実装として使用されている。
+Donald Knuth氏の著書『The Art of Computer Programming, Second Edition, Volume 2, Seminumerical Algorithms』で述べられている、リオーダーアルゴリズムBがそれだ。
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
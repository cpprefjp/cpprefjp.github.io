<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-04-06T14:40:58.132397</updated>
  <id>f855d208-a973-4f85-96ec-57e546a35431</id>

  
    <entry>
      <title>stop_token -- stop_token: inplace_stop_source (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token.html"/>
      <id>7c7167bda624129a8db51d8c8bc458684031262b:reference/stop_token.md</id>
      <updated>2025-04-06T22:18:59+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;stop_token&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;stop_token&amp;gt;&lt;/code&gt;ヘッダは、マルチスレッド処理や非同期処理おける停止要求の状態 &lt;code&gt;停止状態&lt;/code&gt; を扱うクラスを定義する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_token.html&#34;&gt;stop_token&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;stop_token/stop_callback.html&#34;&gt;stop_callback&lt;/a&gt;&lt;/code&gt;は停止状態を共有所有する。最後に破棄されたオブジェクトが停止状態を自動的に解放する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_source.html&#34;&gt;inplace_stop_source&lt;/a&gt;&lt;/code&gt;は停止状態をメンバとして直接所有する。&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_token.md.nolink&#34;&gt;inplace_stop_token&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_callback.md.nolink&#34;&gt;inplace_stop_callback&lt;/a&gt;&lt;/code&gt;は停止状態の所有には関与しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stoppable_token.html&#34;&gt;stoppable_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止トークン型であることを表す (concept)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/unstoppable_token.html&#34;&gt;unstoppable_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止不可能な停止トークン型であることを表す (concept)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;停止トークン&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_token.html&#34;&gt;stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;の停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止状態を共有所有する停止要求インタフェース (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_callback.html&#34;&gt;stop_callback&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;停止要求に応じて呼び出されるコールバック (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/nostopstate.html&#34;&gt;nostopstate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止状態を扱わない&lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;構築用タグ (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/never_stop_token.html&#34;&gt;never_stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止不可能な停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_token.md.nolink&#34;&gt;inplace_stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_source.html&#34;&gt;inplace_stop_source&lt;/a&gt;&lt;/code&gt;の停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_source.html&#34;&gt;inplace_stop_source&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止状態を直接所有する停止要求インタフェース (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_callback.md.nolink&#34;&gt;inplace_stop_callback&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_source.html&#34;&gt;inplace_stop_source&lt;/a&gt;&lt;/code&gt;停止要求に応じて呼び出されるコールバック (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_callback_for_t.html&#34;&gt;stop_callback_for_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;対応するコールバック型を取得 (alias template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0660r10.pdf&#34; target=&#34;_blank&#34;&gt;P0660R10 Stop token and joining thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html&#34; target=&#34;_blank&#34;&gt;P2300R10 &lt;code&gt;std::execution&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inplace_stop_source -- stop_token: inplace_stop_source (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/inplace_stop_source.html"/>
      <id>7c7167bda624129a8db51d8c8bc458684031262b:reference/stop_token/inplace_stop_source.md</id>
      <updated>2025-04-06T22:18:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/inplace_stop_source.md b/reference/stop_token/inplace_stop_source.md
new file mode 100644
index 000000000..c42b38317
--- /dev/null
+++ b/reference/stop_token/inplace_stop_source.md
@@ -0,0 +1,88 @@
+# inplace_stop_source
+* stop_token[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  class inplace_stop_source;
+}
+```
+
+## 概要
+クラス`inplace_stop_source`は、停止状態をメンバとして直接所有し、停止要求を作成するためのインターフェースを提供する。
+
+`inplace_stop_source`は[`stoppable-source`](stoppable-source.md)のモデルである。
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| [`(constructor)`](inplace_stop_source/op_constructor.md.nolink) | コンストラクタ | C++26 |
+| `(destructor)` | デストラクタ | C++26 |
+| `operator=` | 代入演算子 | C++26 |
+| [`get_token`](inplace_stop_source/get_token.md.nolink) | 自身の停止状態を参照する[`inplace_stop_token`](inplace_stop_token.md.nolink)を返す | C++26 |
+| [`stop_requested`](inplace_stop_source/stop_requested.md.nolink) | 停止要求を作成したかどうかを取得する | C++26 |
+| [`request_stop`](inplace_stop_source/request_stop.md.nolink) | 停止要求を作成する | C++26 |
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| [`stop_possible`](inplace_stop_source/stop_possible.md.nolink) | 停止要求を作成可能どうかを取得する | C++26 |
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;stop_token&amp;gt;
+
+int main()
+{
+  std::inplace_stop_source ss;
+  std::inplace_stop_token st = ss.get_token();
+
+  bool invoked = false;
+  std::inplace_stop_callback cb {st, [&amp;amp;] { invoked = true; }};
+
+  assert(st.stop_requested() == false);
+  assert(invoked == false);
+
+  ss.request_stop();
+
+  assert(st.stop_requested() == true);
+  assert(invoked == true);
+}
+```
+* std::inplace_stop_source[color ff0000]
+* std::inplace_stop_token[link inplace_stop_token.md.nolink]
+* std::inplace_stop_callback[link inplace_stop_callback.md.nolink]
+* stop_requested()[link inplace_stop_token/stop_requested.md.nolink]
+* request_stop()[link inplace_stop_source/request_stop.md.nolink]
+* get_token()[link inplace_stop_source/get_token.md.nolink]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`inplace_stop_token`](inplace_stop_token.md.nolink)
+- [`inplace_stop_callback`](inplace_stop_callback.md.nolink)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_source -- stop_token: inplace_stop_source (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_source.html"/>
      <id>7c7167bda624129a8db51d8c8bc458684031262b:reference/stop_token/stop_source.md</id>
      <updated>2025-04-06T22:18:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_source.md b/reference/stop_token/stop_source.md
index d9cedc064..d460639a5 100644
--- a/reference/stop_token/stop_source.md
+++ b/reference/stop_token/stop_source.md
@@ -11,33 +11,30 @@ namespace std {
 ```
 
 ## 概要
-クラス`stop_source`は、停止要求を作成するためのインターフェースを提供する。  
-また、自身と停止状態を共有する[`stop_token`](stop_token.md)クラスのオブジェクトを構築できる。
+クラス`stop_source`は、停止状態を[`stop_token`](stop_token.md)と共有所有し、停止要求を作成するためのインターフェースを提供する。
 
-## 備考
-ある`stop_source`に対して作成した停止要求は、同じ停止状態を共有するほかの`stop_source`や`stop_token`から可視になる。
+`stop_source`は[`stoppable-source`](stoppable-source.md)、[`copyable`](/reference/concepts/copyable.md)、[`equality_comparable`](/reference/concepts/equality_comparable.md)、[`swappable`](/reference/concepts/swappable.md)のモデルである。
 
-一度停止要求を作成すると、それをあとで取り下げることはできない。また、それ以降に作成した停止要求は効果を持たない。
 
 ## メンバ関数
 
 | 名前 | 説明 | 対応バージョン |
-|-------------------------------------------------|--------------------------------------------------------------------|-------|
+|------|------|-------|
 | [`(constructor)`](stop_source/op_constructor.md) | コンストラクタ | C++20 |
 | [`(destructor)`](stop_source/op_destructor.md)   | デストラクタ | C++20 |
 | [`operator=`](stop_source/op_assign.md)          | 代入演算子 | C++20 |
 | [`swap`](stop_source/swap.md)                    | 別の`stop_source`と交換する | C++20 |
-| [`get_token`](stop_source/get_token.md)          | 自身と停止状態を共有する[`stop_token`](stop_token.md)を構築して返す | C++20 |
+| [`get_token`](stop_source/get_token.md)          | 自身と停止状態を共有する[`stop_token`](stop_token.md)を返す | C++20 |
 | [`stop_possible`](stop_source/stop_possible.md)  | 停止要求を作成可能どうかを取得する | C++20 |
 | [`stop_requested`](stop_source/stop_requested.md)| 停止要求を作成したかどうかを取得する | C++20 |
 | [`request_stop`](stop_source/request_stop.md)    | 停止要求を作成する | C++20 |
 
 ## 非メンバ関数
 | 名前 | 説明 | 対応バージョン |
-|---------------------------------|---------------------------------------|-------|
-| [`operator==`](stop_source/op_equal.md)         | 等値演算子 | C++20 |
-| [`operator!=`](stop_source/op_not_equal.md)     | 非等値演算子 | C++20 |
-| [`swap`](stop_source/swap_free.md) | 2つの`stop_source`オブジェクトを入れ替える | C++11 |
+|------|------|-------|
+| [`operator==`](stop_source/op_equal.md)     | 等値演算子 | C++20 |
+| [`operator!=`](stop_source/op_not_equal.md) | 非等値演算子 | C++20 |
+| [`swap`](stop_source/swap_free.md) | 2つの`stop_source`オブジェクトを入れ替える | C++20 |
 
 
 ## 例
@@ -73,14 +70,23 @@ int main()
 ```
 ```
 
+
 ## バージョン
 ### 言語
 - C++20
 
-
 ### 処理系
 - [Clang](/implementation.md#clang): ??
 - [GCC](/implementation.md#gcc): ??
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 関連項目
+- [`stop_token`](stop_token.md)
+- [`stop_callback`](stop_callback.md)
+
+
+## 参照
+- [P0660R10 Stop token and joining thread](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0660r10.pdf)
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoppable-source -- stop_token: inplace_stop_source (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stoppable-source.html"/>
      <id>7c7167bda624129a8db51d8c8bc458684031262b:reference/stop_token/stoppable-source.md</id>
      <updated>2025-04-06T22:18:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stoppable-source.md b/reference/stop_token/stoppable-source.md
new file mode 100644
index 000000000..be53731f0
--- /dev/null
+++ b/reference/stop_token/stoppable-source.md
@@ -0,0 +1,62 @@
+# stoppable-source
+* stop_token[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+mplate&amp;lt;class Source&amp;gt;
+concept stoppable-source =
+  requires (Source&amp;amp; src, const Source csrc) {
+    { csrc.get_token() } -&amp;gt; stoppable_token;
+    { csrc.stop_possible() } noexcept -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+    { csrc.stop_requested() } noexcept -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+    { src.request_stop() } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+  };
+```
+* stoppable_token[link stoppable_token.md]
+
+## 概要
+`stoppable-source`は、型`Source`が次のインタフェースを持つことを表す説明専用のコンセプトである。
+
+- [停止トークン](stoppable_token.md)を取得する(`get_token`)
+- 停止可能か否かを問い合わせる(`stop_possible`)
+- 停止要求が行われたか否かを問い合わせる(`stop_requested`)
+- 停止要求を行う(`request_stop`)
+
+`stoppable-source`のモデルとなる型は、最初に停止要求が行われた時に呼び出される停止コールバックの登録リストを管理する。
+
+
+## モデル
+`stoppable-source`のモデルである型のオブジェクトは次を満たすこと。
+
+- 最大で1つの関連付けられた停止状態を持つ。
+- オブジェクト`s`が停止状態を持たない(disengaged)とき、`s.stop_possible()`と`s.stop_requested()`は`false`となる。
+- オブジェクト`t`が停止状態を持たないとき、`t.get_token()`は停止状態を持たない[停止トークン](stoppable_token.md)を返す。そうでなければ、`t`の停止状態に関連付けられた停止トークンを返す。
+- `request_stop`, `stop_requested`, `stop_possible`メンバ関数の呼び出しはデータ競合を引き起こさない。
+- `true`を返す`request_stop`呼び出しは、`stopppable_token`または`stoppable-source`オブジェクトにおける`true`を返す`stop_requested`呼び出しに対して同期する。
+- コールバックの登録は、そのコールバック呼び出しに対して同期する。
+- `stoppable-source`が停止状態を持たないとき、`request_stop`は効果をもたず`false`を返す。そうでなければ、関連づけられた停止状態に対して停止要求操作を実行する。
+- 停止要求操作は停止状態が停止要求を受信済みか否かを判定し、未受信であれば停止要求を行う。この判定はアトミックに行われる。
+- 停止要求が行われたとき、停止状態に登録されているコールバックが同期的に実行される。コールバック呼び出しが例外で終了した場合、[`terminate`](/reference/exception/terminate.md)が呼び出される。
+- 停止要求が行われたとき`request_stop`は`true`を返す。そうでなければ`false`を返す。
+- `request_stop`呼び出し後は、`stop_possible`が`false`を返すか、`stop_requested`が`true`を返す。
+
+
+## 備考
+- 停止状態に登録されたコールバック呼び出しの実行順序に制約は課されない。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoppable_token -- stop_token: inplace_stop_source (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stoppable_token.html"/>
      <id>7c7167bda624129a8db51d8c8bc458684031262b:reference/stop_token/stoppable_token.md</id>
      <updated>2025-04-06T22:18:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stoppable_token.md b/reference/stop_token/stoppable_token.md
index 1ff936a63..60ff81652 100644
--- a/reference/stop_token/stoppable_token.md
+++ b/reference/stop_token/stoppable_token.md
@@ -46,14 +46,15 @@ concept stoppable_token =
 
 ## モデル
 
-説明用の変数`t`, `u`を、同一の停止状態を参照する別々な`Token`型ブジェクトとする。
+説明用の変数`t`, `u`を、同一の停止状態を参照する別々な`Token`型オブジェクトとする。
 型`Token`が以下を満たす場合に限って、型`Token`は`stoppable_token`のモデルである。
 
 - `SP`を`t.stop_possible()`が`false`となる評価としたとき、`SP`より後に発生する`u.stop_possible()`や`u.stop_requested()`の評価は`false`であること。
 - `SR`を`t.stop_requested()`が`true`となる評価としたとき、`SR`より後に発生する`u.stop_possible()`や`u.stop_requested()`の評価は`true`であること。
 - `stoppable-callback-for&amp;lt;CallbackFn, Token, Initialize&amp;gt;`を満たす任意の型`CallbackFn`および型`Initialize`が、`stoppable-callback-for&amp;lt;CallbackFn, Token, Initializer&amp;gt;`のモデルであること。
 - `t`が停止状態を持たない(disengaged)とき、`t.stop_possible()`や`t.stop_requested()`の評価が`false`であること。
-- `t`と`u`が同一の停止状態を参照するか共に停止状態を持たない(disengaged)とき`t == u`が`true`であり、それ以外のときは`false`であること。
+- `t`と`u`が同一の停止状態を参照するか共に停止状態を持たないとき`t == u`が`true`であり、それ以外のときは`false`であること。
+- `request_stop`, `stop_requested`, `stop_possible`メンバ関数の呼び出しはデータ競合を引き起こさない。
 
 
 ここで、説明専用コンセプト`stoppable-callback-for`を以下のように定義する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- update istreambuf_iterator constructor</title>
      <link href="https://cpprefjp.github.io/reference/iterator/istreambuf_iterator/op_constructor.html"/>
      <id>aa6976390f6b99836bccb8df2a5db12a510fe8b1:reference/iterator/istreambuf_iterator/op_constructor.md</id>
      <updated>2025-04-06T13:27:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/istreambuf_iterator/op_constructor.md b/reference/iterator/istreambuf_iterator/op_constructor.md
index 2bbdf5059..9c481c9cf 100644
--- a/reference/iterator/istreambuf_iterator/op_constructor.md
+++ b/reference/iterator/istreambuf_iterator/op_constructor.md
@@ -5,18 +5,31 @@
 * function[meta id-type]
 
 ```cpp
-constexpr istreambuf_iterator() noexcept;
-istreambuf_iterator(const istreambuf_iterator&amp;amp;) noexcept = default;
-istreambuf_iterator(istream_type&amp;amp; s) noexcept;
-istreambuf_iterator(streambuf_type* s) noexcept;
-istreambuf_iterator(const proxy&amp;amp; p) noexcept;
+istreambuf_iterator() throw();            // (1) C++03
+constexpr istreambuf_iterator() noexcept; // (1) C++11
+
+constexpr istreambuf_iterator(default_sentinel_t) noexcept; // (2) C++11
+
+istreambuf_iterator(const istreambuf_iterator&amp;amp;) noexcept = default; // (3) C++11
+
+istreambuf_iterator(istream_type&amp;amp; s) throw();  // (4) C++03
+istreambuf_iterator(istream_type&amp;amp; s) noexcept; // (4) C++11
+
+istreambuf_iterator(streambuf_type* s) throw();  // (5) C++03
+istreambuf_iterator(streambuf_type* s) noexcept; // (5) C++11
+
+istreambuf_iterator(const proxy&amp;amp; p) throw();  // (6) C++03
+istreambuf_iterator(const proxy&amp;amp; p) noexcept; // (6) C++11
 ```
+* default_sentinel_t[link /reference/iterator/default_sentinel_t.md]
 
 ## istreambuf_iteratorオブジェクトの構築
-- `istreambuf_iterator()`&amp;lt;br/&amp;gt;デフォルトコンストラクタメンバ変数として保持する`streambuf`オブジェクトへのポインタをヌル初期化する。
-- `istreambuf_iterator(istreamtype&amp;amp; s) noexcept`&amp;lt;br/&amp;gt;`s.rdbuf()`をメンバ変数として保持する。
-- `istreambuf_iterator(streambuf_type* s) noexcept`&amp;lt;br/&amp;gt;`s`をメンバ変数として保持する
-- `istreambuf_iterator(const proxy&amp;amp; p) noexcept`&amp;lt;br/&amp;gt;後置`operator++()`が返すであろうproxyオブジェクトを受け取り、そのオブジェクトが指す`streambuf`オブジェクトへのポインタをメンバ変数として保持する。
+- (1) : デフォルトコンストラクタ。メンバ変数として保持する`streambuf`オブジェクトへのポインタをヌル初期化する。
+- (2) : [`default_sentinel`](/reference/iterator/default_sentinel_t.md)を受け取り、(1)と同等の構築をより明示的に行う。
+- (3) : コピーコンストラクタ。
+- (4) : `s.rdbuf()`をメンバ変数として保持する。
+- (5) : `s`をメンバ変数として保持する。
+- (6) : 後置`operator++()`が返すであろうproxyオブジェクトを受け取り、そのオブジェクトが指す`streambuf`オブジェクトへのポインタをメンバ変数として保持する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice -- Merge pull request #1434 from Gumichocopengin8/fix/unnecessary-move-in-list-splice</title>
      <link href="https://cpprefjp.github.io/reference/list/list/splice.html"/>
      <id>b4e98464dc2a30bb30b29c9738ab145142729df0:reference/list/list/splice.md</id>
      <updated>2025-04-06T11:25:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/splice.md b/reference/list/list/splice.md
index a04fcd507..1ef73e11b 100644
--- a/reference/list/list/splice.md
+++ b/reference/list/list/splice.md
@@ -74,7 +74,6 @@ void splice(const_iterator position, list&amp;amp;&amp;amp; x,
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;list&amp;gt;
-#include &amp;lt;utility&amp;gt; // move
 
 template &amp;lt;class T&amp;gt;
 void print(const std::list&amp;lt;T&amp;gt;&amp;amp; ls)
@@ -90,7 +89,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys));
+    xs.splice(xs.begin(), ys);
 
     print(xs);
   }
@@ -99,7 +98,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys), ys.begin());
+    xs.splice(xs.begin(), ys, ys.begin());
 
     print(xs);
   }
@@ -108,7 +107,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys), ys.begin(), std::next(ys.begin(), 2));
+    xs.splice(xs.begin(), ys, ys.begin(), std::next(ys.begin(), 2));
 
     print(xs);
   }
@@ -117,7 +116,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {1, 2, 3};
     std::list&amp;lt;int&amp;gt; ys = {4, 5, 6};
 
-    xs.splice(xs.end(), std::move(ys));
+    xs.splice(xs.end(), ys);
 
     print(xs);
   }
@@ -125,7 +124,6 @@ int main()
 ```
 * splice[color ff0000]
 * begin()[link begin.md]
-* std::move[link /reference/utility/move.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice -- fix: remove unnecessary `std::move` in splice of `std::list`</title>
      <link href="https://cpprefjp.github.io/reference/list/list/splice.html"/>
      <id>3fb56b866798869aa88bf8b556f86df3d628ae5d:reference/list/list/splice.md</id>
      <updated>2025-04-05T07:35:03-07:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/splice.md b/reference/list/list/splice.md
index a04fcd507..1ef73e11b 100644
--- a/reference/list/list/splice.md
+++ b/reference/list/list/splice.md
@@ -74,7 +74,6 @@ void splice(const_iterator position, list&amp;amp;&amp;amp; x,
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;list&amp;gt;
-#include &amp;lt;utility&amp;gt; // move
 
 template &amp;lt;class T&amp;gt;
 void print(const std::list&amp;lt;T&amp;gt;&amp;amp; ls)
@@ -90,7 +89,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys));
+    xs.splice(xs.begin(), ys);
 
     print(xs);
   }
@@ -99,7 +98,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys), ys.begin());
+    xs.splice(xs.begin(), ys, ys.begin());
 
     print(xs);
   }
@@ -108,7 +107,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {4, 5, 6};
     std::list&amp;lt;int&amp;gt; ys = {1, 2, 3};
 
-    xs.splice(xs.begin(), std::move(ys), ys.begin(), std::next(ys.begin(), 2));
+    xs.splice(xs.begin(), ys, ys.begin(), std::next(ys.begin(), 2));
 
     print(xs);
   }
@@ -117,7 +116,7 @@ int main()
     std::list&amp;lt;int&amp;gt; xs = {1, 2, 3};
     std::list&amp;lt;int&amp;gt; ys = {4, 5, 6};
 
-    xs.splice(xs.end(), std::move(ys));
+    xs.splice(xs.end(), ys);
 
     print(xs);
   }
@@ -125,7 +124,6 @@ int main()
 ```
 * splice[color ff0000]
 * begin()[link begin.md]
-* std::move[link /reference/utility/move.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Keita Nonaka</name>
        <email>iKonnyaku40@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- fix statement position</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/erase.html"/>
      <id>ba2b7c94d13ed76e045f28c4a6c8d87373ba7923:reference/vector/vector/erase.md</id>
      <updated>2025-04-05T17:55:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/erase.md b/reference/vector/vector/erase.md
index 30b9ce33d..6d4fe195c 100644
--- a/reference/vector/vector/erase.md
+++ b/reference/vector/vector/erase.md
@@ -32,11 +32,11 @@ constexpr iterator erase(const_iterator first,
 
 
 ## 戻り値
-削除された要素の次の要素を指すイテレータを返す。そのような要素が存在しない場合は、[`end()`](end.md)を返す。さらに、削除された要素以降の要素の数と同じ回数の`T`のムーブ代入演算子が呼ばれる。
+削除された要素の次の要素を指すイテレータを返す。そのような要素が存在しない場合は、[`end()`](end.md)を返す。
 
 
 ## 計算量
-削除される要素の数と同じ回数の`T`のデストラクタが実行される。
+削除される要素の数と同じ回数の`T`のデストラクタが実行される。さらに、削除された要素以降の要素の数と同じ回数の`T`のムーブ代入演算子が呼ばれる。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-07-10T16:13:00.914933</updated>
  <id>6f47f1d5-2e2f-4e3f-82cd-c253b69a3e10</id>

  
    <entry>
      <title>is_move_constructible (C++11) -- is_move_constructible : C++14のDR2196に対応し、参照型に対する振る舞いを明確化</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_move_constructible.html"/>
      <id>b0931645826a65543c407d869298f864ff3f9629:reference/type_traits/is_move_constructible.md</id>
      <updated>2015-07-10 16:12:41 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;is_move_constructible (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_move_constructible;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がムーブ構築可能か調べる&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_move_constructible&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;がムーブ構築可能であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。 &lt;/p&gt;
&lt;p&gt;以下の条件が&lt;code&gt;true&lt;/code&gt;である場合に、ムーブ構築可能であると見なされる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11 : &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;::value == true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : 参照可能な型&lt;code&gt;T&lt;/code&gt;に対しては、&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;::value == true&lt;/code&gt;と同じ結果となり、それ以外は&lt;code&gt;false&lt;/code&gt;と見なされる。&lt;ul&gt;
&lt;li&gt;参照可能な型とは、以下のいずれかの条件に合致する型である：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_object.html&#34;&gt;オブジェクト型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CV修飾されていない、もしくは参照修飾されていない関数型&lt;/li&gt;
&lt;li&gt;参照修飾されている型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; s {
  s(s&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブコンストラクタは = delete されている。&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// そのためムーブコンストラクトできない。&lt;/span&gt;
};

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == true, int is move constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value_type == bool&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;true_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;type == true_type&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;is_move_constructible&amp;lt;int&amp;gt;() == true&#34;&lt;/span&gt;);

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == false, s is not move constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value_type == bool&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;false_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;type == false_type&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;is_move_constructible&amp;lt;s&amp;gt;() == false&#34;&lt;/span&gt;);

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;double is move constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;const int is move constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;void* is move constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int&amp;amp; is move constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int&amp;amp;&amp;amp; is move constructible&#34;&lt;/span&gt;);

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int[1] is not move constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int[] is not move constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;void is not move constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_move_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int () is not move constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(){}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2196&#34; target=&#34;_blank&#34;&gt;LWG Issue 2196. Specification of &lt;code&gt;is_*[copy/move]_[constructible/assignable]&lt;/code&gt; unclear for non-referencable types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11では、この型特性が参照型に対してどのような振る舞いになるのか不明確であったため、C++14で明確化された。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_copy_constructible (C++11) -- コード修飾の漏れを修正</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_copy_constructible.html"/>
      <id>6eec53deb21ffabaac741f8505a720637c123ba9:reference/type_traits/is_copy_constructible.md</id>
      <updated>2015-07-10 16:11:25 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;is_copy_constructible (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_copy_constructible;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がコピー構築可能か調べる&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_copy_constructible&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;がコピー構築可能であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;/p&gt;
&lt;p&gt;以下の条件が&lt;code&gt;true&lt;/code&gt;である場合に、コピー構築可能であると見なされる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11 : &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, const T&amp;amp;&amp;gt;::value == true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : 参照可能な型&lt;code&gt;T&lt;/code&gt;に対しては、&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, const T&amp;amp;&amp;gt;::value == true&lt;/code&gt;と同じ結果となり、それ以外は&lt;code&gt;false&lt;/code&gt;と見なされる。&lt;ul&gt;
&lt;li&gt;参照可能な型とは、以下のいずれかの条件に合致する型である：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_object.html&#34;&gt;オブジェクト型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CV修飾されていない、もしくは参照修飾されていない関数型&lt;/li&gt;
&lt;li&gt;参照修飾されている型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; s {
  s(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; s&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピーコンストラクタは = delete されている。&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// そのためコピーコンストラクトできない。&lt;/span&gt;
};

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == true, int is copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value_type == bool&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;true_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;type == true_type&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;is_copy_constructible&amp;lt;int&amp;gt;() == true&#34;&lt;/span&gt;);

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == false, s is not copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value_type == bool&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;false_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;type == false_type&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;is_copy_constructible&amp;lt;s&amp;gt;() == false&#34;&lt;/span&gt;);

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;double is copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;const int is copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;void* is copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int&amp;amp; is copy constructible&#34;&lt;/span&gt;);

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int[1] is not copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int[] is not copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;void is not copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int&amp;amp;&amp;amp; is not copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int () is not copy constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(){}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2196&#34; target=&#34;_blank&#34;&gt;LWG Issue 2196. Specification of &lt;code&gt;is_*[copy/move]_[constructible/assignable]&lt;/code&gt; unclear for non-referencable types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11では、この型特性が参照型に対してどのような振る舞いになるのか不明確であったため、C++14で明確化された。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_copy_constructible (C++11) -- is_copy_constructible : C++14のDR2196に対応し、参照型に対する振る舞いを明確化</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_copy_constructible.html"/>
      <id>2a2d37a3e17c0fadcfe862171c936f9e0c996385:reference/type_traits/is_copy_constructible.md</id>
      <updated>2015-07-10 14:39:54 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;is_copy_constructible (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_copy_constructible;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がコピー構築可能か調べる&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_copy_constructible&lt;/code&gt;は、型Tがコピー構築可能であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;/p&gt;
&lt;p&gt;以下の条件が&lt;code&gt;true&lt;/code&gt;である場合に、コピー構築可能であると見なされる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++11 : &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, const T&amp;amp;&amp;gt;::value == true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : 参照可能な型&lt;code&gt;T&lt;/code&gt;に対しては、&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_constructible.html&#34;&gt;&lt;code&gt;is_constructible&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T, const T&amp;amp;&amp;gt;::value == true&lt;/code&gt;と同じ結果となり、それ以外は&lt;code&gt;false&lt;/code&gt;と見なされる。&lt;ul&gt;
&lt;li&gt;参照可能な型とは、以下のいずれかの条件に合致する型である：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_object.html&#34;&gt;オブジェクト型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CV修飾されていない、もしくは参照修飾されていない関数型&lt;/li&gt;
&lt;li&gt;参照修飾されている型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; s {
  s(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; s&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピーコンストラクタは = delete されている。&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// そのためコピーコンストラクトできない。&lt;/span&gt;
};

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == true, int is copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value_type == bool&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;true_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;type == true_type&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;is_copy_constructible&amp;lt;int&amp;gt;() == true&#34;&lt;/span&gt;);

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == false, s is not copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value_type == bool&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;false_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;type == false_type&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;is_copy_constructible&amp;lt;s&amp;gt;() == false&#34;&lt;/span&gt;);

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;double is copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;const int is copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;void* is copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int&amp;amp; is copy constructible&#34;&lt;/span&gt;);

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int[1] is not copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[]&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int[] is not copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;void is not copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int&amp;amp;&amp;amp; is not copy constructible&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_copy_constructible&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; ()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int () is not copy constructible&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(){}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2196&#34; target=&#34;_blank&#34;&gt;LWG Issue 2196. Specification of &lt;code&gt;is_*[copy/move]_[constructible/assignable]&lt;/code&gt; unclear for non-referencable types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11では、この型特性が参照型に対してどのような振る舞いになるのか不明確であったため、C++14で明確化された。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice_after (C++11) -- forward_list::splice_after : ポインタ、参照、イテレータの有効性についての説明を追加。</title>
      <link href="http://cpprefjp.github.io/reference/forward_list/splice_after.html"/>
      <id>85bc8d2d62f87d7f2e53aaaeb419353e6d17b2ba:reference/forward_list/splice_after.md</id>
      <updated>2015-07-09 16:49:24 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class forward_list&#34;&gt;forward_list::&lt;/span&gt;splice_after (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x,
                  const_iterator i);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x,
                  const_iterator i);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x,
                  const_iterator first, const_iterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x,
                  const_iterator first, const_iterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;他のコンテナから要素を移動する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第1パラメータ&lt;code&gt;position&lt;/code&gt;が、&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/before_begin.html&#34;&gt;&lt;code&gt;before_begin()&lt;/code&gt;&lt;/a&gt;もしくは&lt;code&gt;[&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;,&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;]の範囲の間接参照可能なイテレータであること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;が、&lt;code&gt;x&lt;/code&gt;のイテレータであること。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator()&lt;/code&gt;&lt;/a&gt;であること。(C++14)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに&lt;code&gt;x&lt;/code&gt;の全ての要素をコピーする&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに&lt;code&gt;x&lt;/code&gt;の全ての要素を移動する&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに、&lt;code&gt;x&lt;/code&gt;の要素のうち&lt;code&gt;i&lt;/code&gt;の次の要素をコピーする&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに、&lt;code&gt;x&lt;/code&gt;の要素のうち&lt;code&gt;i&lt;/code&gt;の次の要素を移動する&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに、&lt;code&gt;x&lt;/code&gt;の要素のうち&lt;code&gt;(first, last)&lt;/code&gt;の範囲をコピーする&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに、&lt;code&gt;x&lt;/code&gt;の要素のうち&lt;code&gt;(first, last)&lt;/code&gt;の範囲を移動する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 投げない&lt;/li&gt;
&lt;li&gt;(2) : 投げない&lt;/li&gt;
&lt;li&gt;(3) : 投げない&lt;/li&gt;
&lt;li&gt;(4) : 投げない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : &lt;code&gt;x&lt;/code&gt;の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;(3), (4) : 定数時間&lt;/li&gt;
&lt;li&gt;(5), (6) : &lt;code&gt;(first, last)&lt;/code&gt;の要素数に対して線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : この関数を呼び出したあとも、&lt;code&gt;x&lt;/code&gt;の各要素へのポインタ、参照、イテレータは有効である。ただし、そのポインタと参照は、&lt;code&gt;x&lt;/code&gt;ではなく&lt;code&gt;*this&lt;/code&gt;の要素となる。&lt;/li&gt;
&lt;li&gt;(3), (4) : この関数を呼び出したあとも、&lt;code&gt;*++i&lt;/code&gt;へのポインタ、参照、イテレータは有効である。ただし、そのポインタと参照は、&lt;code&gt;x&lt;/code&gt;ではなく&lt;code&gt;*this&lt;/code&gt;の要素となる。&lt;/li&gt;
&lt;li&gt;(5), (6) : この関数を呼び出したあとも、&lt;code&gt;(first, last)&lt;/code&gt;の各要素へのポインタ、参照、イテレータは有効である。ただし、そのポインタと参照は、&lt;code&gt;x&lt;/code&gt;ではなく&lt;code&gt;*this&lt;/code&gt;の要素となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;forward_list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// move&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; ls)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ls) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ysの全ての要素をxsに移動する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; xs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ys &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    xs.&lt;span style=&#34;color:#ff0000&#34;&gt;splice_after&lt;/span&gt;(xs.begin(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(ys));

    print(xs);
  }
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ysのうち、3だけを移動する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; xs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ys &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    xs.&lt;span style=&#34;color:#ff0000&#34;&gt;splice_after&lt;/span&gt;(xs.begin(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(ys), ys.begin());

    print(xs);
  }
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ysのうち、2と3だけを移動する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; xs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ys &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    xs.&lt;span style=&#34;color:#ff0000&#34;&gt;splice_after&lt;/span&gt;(xs.begin(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(ys), ys.before_begin(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(ys.begin(), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));

    print(xs);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 2 3 4 5 6 
1 3 5 6 
1 2 3 5 6 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0(右辺値参照バージョンのみ実装されている)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2045&#34; target=&#34;_blank&#34;&gt;LWG Issue 2045. &lt;code&gt;forward_list::merge&lt;/code&gt; and &lt;code&gt;forward_list::splice_after&lt;/code&gt; with unequal allocators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2222&#34; target=&#34;_blank&#34;&gt;LWG Issue 2222. Inconsistency in description of &lt;code&gt;forward_list::splice_after&lt;/code&gt; single-element overload&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)と(4)のオーバーロードについて、有効性が継続される対象が、&lt;code&gt;*i&lt;/code&gt;となっていたが、&lt;code&gt;*++i&lt;/code&gt;の間違いであったため、C++14で修正された。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice_after (C++11) -- forward_list::splice_after : C++14のDR2222に対応し、ポインタと参照の有効性についての備考を追加</title>
      <link href="http://cpprefjp.github.io/reference/forward_list/splice_after.html"/>
      <id>1f0dc42c181100aecbd5a3474fe620bbf9374896:reference/forward_list/splice_after.md</id>
      <updated>2015-07-09 16:42:50 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class forward_list&#34;&gt;forward_list::&lt;/span&gt;splice_after (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x,
                  const_iterator i);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x,
                  const_iterator i);                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x,
                  const_iterator first, const_iterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;splice_after&lt;/span&gt;(const_iterator position, forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x,
                  const_iterator first, const_iterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;他のコンテナから要素を移動する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第1パラメータ&lt;code&gt;position&lt;/code&gt;が、&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/before_begin.html&#34;&gt;&lt;code&gt;before_begin()&lt;/code&gt;&lt;/a&gt;もしくは&lt;code&gt;[&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/begin.html&#34;&gt;&lt;code&gt;begin()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;,&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;]の範囲の間接参照可能なイテレータであること。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;が、&lt;code&gt;x&lt;/code&gt;のイテレータであること。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;== x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/forward_list/get_allocator.html&#34;&gt;&lt;code&gt;get_allocator()&lt;/code&gt;&lt;/a&gt;であること。(C++14)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに&lt;code&gt;x&lt;/code&gt;の全ての要素をコピーする&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに&lt;code&gt;x&lt;/code&gt;の全ての要素を移動する&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに、&lt;code&gt;x&lt;/code&gt;の要素のうち&lt;code&gt;i&lt;/code&gt;の次の要素をコピーする&lt;/li&gt;
&lt;li&gt;(4) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに、&lt;code&gt;x&lt;/code&gt;の要素のうち&lt;code&gt;i&lt;/code&gt;の次の要素を移動する&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに、&lt;code&gt;x&lt;/code&gt;の要素のうち&lt;code&gt;(first, last)&lt;/code&gt;の範囲をコピーする&lt;/li&gt;
&lt;li&gt;(6) : &lt;code&gt;position&lt;/code&gt;の次の要素の後ろに、&lt;code&gt;x&lt;/code&gt;の要素のうち&lt;code&gt;(first, last)&lt;/code&gt;の範囲を移動する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 投げない&lt;/li&gt;
&lt;li&gt;(2) : 投げない&lt;/li&gt;
&lt;li&gt;(3) : 投げない&lt;/li&gt;
&lt;li&gt;(4) : 投げない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) : &lt;code&gt;x&lt;/code&gt;の要素数に対して線形時間&lt;/li&gt;
&lt;li&gt;(3), (4) : 定数時間&lt;/li&gt;
&lt;li&gt;(5), (6) : &lt;code&gt;(first, last)&lt;/code&gt;の要素数に対して線形時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(3), (4) : この関数を呼び出したあとも、&lt;code&gt;*++i&lt;/code&gt;へのポインタ、参照、イテレータは有効である。ただし、そのポインタと参照は、&lt;code&gt;x&lt;/code&gt;ではなく&lt;code&gt;*this&lt;/code&gt;の要素となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;forward_list&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// move&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; print(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; ls)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ls) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39; &#39;&lt;/span&gt;; }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ysの全ての要素をxsに移動する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; xs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ys &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    xs.&lt;span style=&#34;color:#ff0000&#34;&gt;splice_after&lt;/span&gt;(xs.begin(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(ys));

    print(xs);
  }
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ysのうち、3だけを移動する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; xs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ys &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    xs.&lt;span style=&#34;color:#ff0000&#34;&gt;splice_after&lt;/span&gt;(xs.begin(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(ys), ys.begin());

    print(xs);
  }
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ysのうち、2と3だけを移動する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; xs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;};
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;forward_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ys &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;};

    xs.&lt;span style=&#34;color:#ff0000&#34;&gt;splice_after&lt;/span&gt;(xs.begin(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(ys), ys.before_begin(), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;next(ys.begin(), &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));

    print(xs);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1 2 3 4 5 6 
1 3 5 6 
1 2 3 5 6 
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0(右辺値参照バージョンのみ実装されている)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2045&#34; target=&#34;_blank&#34;&gt;LWG Issue 2045. &lt;code&gt;forward_list::merge&lt;/code&gt; and &lt;code&gt;forward_list::splice_after&lt;/code&gt; with unequal allocators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2222&#34; target=&#34;_blank&#34;&gt;LWG Issue 2222. Inconsistency in description of &lt;code&gt;forward_list::splice_after&lt;/code&gt; single-element overload&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;(3)と(4)のオーバーロードについて、有効性が継続される対象が、&lt;code&gt;*i&lt;/code&gt;となっていたが、&lt;code&gt;*++i&lt;/code&gt;の間違いであったため、C++14で修正された。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
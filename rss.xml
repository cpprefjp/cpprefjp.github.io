<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-15T02:41:20.650689</updated>
  <id>c4c8e3ac-7cd8-4a20-b0c4-e1613f1ea9f7</id>

  
    <entry>
      <title>counting_semaphore -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore.md b/reference/semaphore/counting_semaphore.md
index ed495076b..bf671cc63 100644
--- a/reference/semaphore/counting_semaphore.md
+++ b/reference/semaphore/counting_semaphore.md
@@ -16,12 +16,12 @@ namespace std {
 
 カウンティングセマフォ（または単にセマフォ）は他の同期プリミティブを実装するための部品として広く用いられ、セマフォと条件変数のいずれも適用可能なケースでは[`condition_variable`](/reference/condition_variable/condition_variable.md)よりも効率的である。
 
-セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`から最大値[`max()`](counting_semaphore/max.md)までの値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
+セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`から[`max()`](counting_semaphore/max.md)までの値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
 
 - カウンタの最大値はテンプレートパラメータ`least_max_value`にて設定する。省略時は処理系がサポートする最大値が設定される。
 - カウンタの初期値は[コンストラクタ](counting_semaphore/op_constructor.md)でセマフォ構築時に指定する。
-- [`release()`](counting_semaphore/release.md.nolink)メンバ関数呼び出しによりカウンタ値の加算と通知処理、つまり利用可能な共有リソースの増加を表現する。（歴史的にはオランダ語由来の&amp;#34;V操作&amp;#34;と呼ばれる。英語では&amp;#34;up&amp;#34;／&amp;#34;signal&amp;#34;／&amp;#34;post&amp;#34;とも呼ばれる。）
-- [`acquire()`](counting_semaphore/acquire.md.nolink)メンバ関数呼び出しにより待機処理とカウンタ値の減算、つまり利用可能な共有リソースの減少を表現する。（同様に&amp;#34;P操作&amp;#34;や&amp;#34;down&amp;#34;／&amp;#34;wait&amp;#34;／&amp;#34;pend&amp;#34;とも呼ばれる。）
+- [`release()`](counting_semaphore/release.md)メンバ関数呼び出しによりカウンタ値の加算と通知処理、つまり利用可能な共有リソースの増加を表現する。（歴史的にはオランダ語由来の&amp;#34;V操作&amp;#34;と呼ばれる。英語では&amp;#34;up&amp;#34;／&amp;#34;signal&amp;#34;／&amp;#34;post&amp;#34;とも呼ばれる。）
+- [`acquire()`](counting_semaphore/acquire.md)メンバ関数呼び出しにより待機処理とカウンタ値の減算、つまり利用可能な共有リソースの減少を表現する。（同様に&amp;#34;P操作&amp;#34;や&amp;#34;down&amp;#34;／&amp;#34;wait&amp;#34;／&amp;#34;pend&amp;#34;とも呼ばれる。）
 
 カウンティングセマフォの最大値を`1`としたものはバイナリセマフォと呼ばれ、ヘッダ[`&amp;lt;semaphore&amp;gt;`](/reference/semaphore.md)ではエイリアス型`binary_semaphore`として定義される。
 バイナリセマフォはミューテックス（[`mutex`](/reference/mutex/mutex.md)など）と同様に共有リソースの排他制御を実現する同期プリミティブだが、ミューテックスとは異なりスレッドがロックを所有(own)するという概念が存在しない。
@@ -36,14 +36,14 @@ namespace std {
 ## メンバ関数
 ### 構築・破棄
 
-| 名前            | 説明           | 対応バージョン |
-|-----------------|----------------|----------------|
+| 名前             | 説明            | 対応バージョン |
+|-----------------|----------------|------------|
 | [`(constructor)`](counting_semaphore/op_constructor.md) | コンストラクタ | C++20 |
 | `(destructor)` | デストラクタ | C++20 |
 | `operator=(const counting_semaphore&amp;amp;) = delete;` | 代入演算子 | C++20 |
-| [`release`](counting_semaphore/release.md.nolink) | カウンタ値を加算し、待機中スレッドをブロック解除する | C++20 |
-| [`acquire`](counting_semaphore/acquire.md.nolink) | カウンタ値が正数になるまで待機し、カウンタ値を1つ減算する | C++20 |
-| [`try_acquire`](counting_semaphore/try_acquire.md.nolink) | カウンタ値の1減算を試みる | C++20 |
+| [`release`](counting_semaphore/release.md) | カウンタ値を加算し、待機中スレッドをブロック解除する | C++20 |
+| [`acquire`](counting_semaphore/acquire.md) | カウンタ値が`0`より大きくなるまで待機し、カウンタ値を1つ減算する | C++20 |
+| [`try_acquire`](counting_semaphore/try_acquire.md) | カウンタ値の1減算を試みる | C++20 |
 | [`try_acquire_for`](counting_semaphore/try_acquire_for.md.nolink) | 相対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
 | [`try_acquire_until`](counting_semaphore/try_acquire_until.md.nolink) | 絶対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
 
@@ -109,7 +109,6 @@ int main()
 ```
 * std::counting_semaphore[color ff0000]
 
-
 ### 出力
 ```
 100
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acquire -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/acquire.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore/acquire.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/acquire.md b/reference/semaphore/counting_semaphore/acquire.md
new file mode 100644
index 000000000..e48d55d23
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/acquire.md
@@ -0,0 +1,83 @@
+# acquire
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void acquire();
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`より大きくなるまで待機し、カウンタ値を`1`つ減算してから制御を戻す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+次のステップを繰り返す。
+- [`try_acquire`](try_acquire.md)を評価し、結果が`true`ならば関数呼び出し元へ制御を戻す。
+- `counter`が`0`より大きくなるまで、`*this`上で関数呼び出しスレッドをブロッキングする。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+
+
+## 備考
+「効果」欄では`acquire`メンバ関数の振る舞いを手続き的に説明しているが、実際の処理系においてはオペレーティングシステムが提供する効率的なセマフォ操作関数が利用されると期待される。
+
+- POSIXセマフォでは[`sem_wait`関数](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/sem_wait.3.html)が提供される。
+- Windowsセマフォでは[`WaitForSingleObject`関数](https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitforsingleobject)ファミリが提供される。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    sem.acquire();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* acquire()[color ff0000]
+* release()[link release.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/max.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore/max.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/max.md b/reference/semaphore/counting_semaphore/max.md
index d0c5de4bd..038e89e9c 100644
--- a/reference/semaphore/counting_semaphore/max.md
+++ b/reference/semaphore/counting_semaphore/max.md
@@ -25,20 +25,24 @@ static constexpr ptrdiff_t max() noexcept;
 
 ## 例
 ```cpp example
-#include &amp;lt;semaphore&amp;gt;
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
 
 int main()
 {
   using Semaphore = std::counting_semaphore&amp;lt;10&amp;gt;;
   std::cout &amp;lt;&amp;lt; Semaphore::max() &amp;lt;&amp;lt; std::endl;
+
+  // 処理系定義のデフォルト値
+  std::cout &amp;lt;&amp;lt; std::counting_semaphore&amp;lt;&amp;gt;::max() &amp;lt;&amp;lt; std::endl;
 }
 ```
-* max[color ff0000]
+* max()[color ff0000]
 
 ### 出力例
 ```
 10
+2147483647
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/op_constructor.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore/op_constructor.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/op_constructor.md b/reference/semaphore/counting_semaphore/op_constructor.md
index 87bd3dee0..d96c05fe9 100644
--- a/reference/semaphore/counting_semaphore/op_constructor.md
+++ b/reference/semaphore/counting_semaphore/op_constructor.md
@@ -36,6 +36,7 @@ std::counting_semaphore&amp;lt;1&amp;gt; mtx{1};
 
 int main() {}
 ```
+* std::counting_semaphore[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>release -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/release.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore/release.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/release.md b/reference/semaphore/counting_semaphore/release.md
new file mode 100644
index 000000000..764e2b955
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/release.md
@@ -0,0 +1,79 @@
+# release
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void release(ptrdiff_t update = 1);
+```
+
+## 概要
+カウンティングセマフォのカウンタ値に加算し、待機中スレッドのブロック解除を行う。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 事前条件
+`update &amp;gt;= 0` かつ `update &amp;lt;=` [`max()`](max.md) `- counter`
+
+
+## 効果
+アトミックに`counter += update`を実行し、`counter`が値`0`より大きくなるまで待機中のスレッド群をブロック解除する。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    sem.acquire();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* release()[color ff0000]
+* acquire()[link acquire.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_acquire -- counting_semaphore: release, acquire, try_acquire (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/try_acquire.html"/>
      <id>0e2b1b9345f9fa28997b6b0325e2ccd73d56bdf3:reference/semaphore/counting_semaphore/try_acquire.md</id>
      <updated>2020-06-15T11:36:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/try_acquire.md b/reference/semaphore/counting_semaphore/try_acquire.md
new file mode 100644
index 000000000..fc00778c0
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/try_acquire.md
@@ -0,0 +1,81 @@
+# try_acquire
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+bool try_acquire() noexcept;
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`の場合は何もせず`fales`を返し、そうでなければカウンタ値を`1`つ減算して`true`を返す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+`counter &amp;gt; 0`の場合は、呼び出しスレッドをブロッキングすることなく、アトミックに`counter -= 1`を実行する。
+`counter`が減算されなかった場合は、副作用は発生せず`try_acquire`関数は即座に呼び出し元へ戻る。
+
+処理系には、`counter &amp;gt; 0`であっても`counter`の減算に失敗することが許容される。
+ただし、セマフォに対する操作が競合していない状況下において、`try_acquire`が一貫して`false`を返すような実装は許容されない。
+（Spurious Failure が生じることは滅多にないが、これによりアトミック変数を用いた Swap-and-Compare ベースの興味深い実装が許容される。）
+
+
+## 戻り値
+`counter`が減算された場合は`true`を返し、そうでなければ`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    while (!sem.try_acquire()) {
+      std::this_thread::yield();
+      // ここではtry_acquire()動作例示のためビジーループを行うが、
+      // セマフォ待機が目的であればacquire()利用が適切である。
+    }
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* try_acquire()[color ff0000]
+* acquire()[link acquire.md]
+* release()[link release.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- counting_semaphore: コンストラクタ事前条件誤りを修正</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/op_constructor.html"/>
      <id>36a06b6835141fc35592fefe3c9229735c91d237:reference/semaphore/counting_semaphore/op_constructor.md</id>
      <updated>2020-06-14T15:52:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/op_constructor.md b/reference/semaphore/counting_semaphore/op_constructor.md
index 66d992759..87bd3dee0 100644
--- a/reference/semaphore/counting_semaphore/op_constructor.md
+++ b/reference/semaphore/counting_semaphore/op_constructor.md
@@ -16,7 +16,7 @@ counting_semaphore(const counting_semaphore&amp;amp;) = delete;   // (2)
 
 
 ## 事前条件
-`desired &amp;gt;= 0` かつ `desired &amp;lt; `[`max()`](max.md)
+`desired &amp;gt;= 0` かつ `desired &amp;lt;=` [`max()`](max.md)
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>semaphore -- counting_semaphore: コンストラクタ, max (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore.html"/>
      <id>a0fb45701a81aef7e558cf80acf63e7832dd447e:reference/semaphore.md</id>
      <updated>2020-06-14T15:38:13+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;semaphore&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;semaphore&amp;gt;&lt;/code&gt;ヘッダは、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%9E%E3%83%95%E3%82%A9&#34; target=&#34;_blank&#34;&gt;セマフォ&lt;/a&gt;に関するクラスを定義する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html&#34;&gt;counting_semaphore&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;カウンティングセマフォ (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;binary_semaphore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バイナリセマフォ &lt;code&gt;counting_semaphore&amp;lt;1&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0514r4.pdf&#34; target=&#34;_blank&#34;&gt;P0514R4 Efficient concurrent waiting for C++20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1135r6.html&#34; target=&#34;_blank&#34;&gt;P1135R6 The C++20 Synchronization Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_semaphore -- counting_semaphore: コンストラクタ, max (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html"/>
      <id>a0fb45701a81aef7e558cf80acf63e7832dd447e:reference/semaphore/counting_semaphore.md</id>
      <updated>2020-06-14T15:38:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore.md b/reference/semaphore/counting_semaphore.md
index 6249ca1f2..ed495076b 100644
--- a/reference/semaphore/counting_semaphore.md
+++ b/reference/semaphore/counting_semaphore.md
@@ -12,21 +12,21 @@ namespace std {
 ```
 
 ## 概要
-`counting_semaphore`クラスは、スレッド間で使用する共有リソースへの並行アクセスを制約する軽量な同期プリミティブである。
+`counting_semaphore`クラスは、スレッド間で使用する共有リソースへの並行アクセスを制約する、軽量な同期プリミティブである。
 
 カウンティングセマフォ（または単にセマフォ）は他の同期プリミティブを実装するための部品として広く用いられ、セマフォと条件変数のいずれも適用可能なケースでは[`condition_variable`](/reference/condition_variable/condition_variable.md)よりも効率的である。
 
-カウンティングセマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`から最大値[`max()`](counting_semaphore/max.md.nolink)までの値をとり、この値がカウンティングセマフォで管理する共有リソースの個数と解釈される。
+セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`から最大値[`max()`](counting_semaphore/max.md)までの値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
 
-- カウンタの最大値はテンプレートパラメータ`least_max_value`にて設定する。
-- カウンタの初期値は[コンストラクタ](counting_semaphore/op_constructor.md.nolink)でウンティングセマフォ構築時に指定する。
-- [`release()`](counting_semaphore/release.md.nolink)メンバ関数呼び出しによりカウンタ値の加算と通知処理、つまり利用可能な共有リソースの増加を表現する（歴史的にはオランダ語由来の&amp;#34;V操作&amp;#34;と呼ばれる。英語では&amp;#34;up&amp;#34;／&amp;#34;signal&amp;#34;／&amp;#34;post&amp;#34;とも呼ばれる。）。
-- [`acquire()`](counting_semaphore/acquire.md.nolink)メンバ関数呼び出しにより待機処理とカウンタ値の減算、つまり利用可能な共有リソースの減少を表現する（同様に&amp;#34;P操作&amp;#34;や&amp;#34;down&amp;#34;／&amp;#34;wait&amp;#34;／&amp;#34;pend&amp;#34;）。
+- カウンタの最大値はテンプレートパラメータ`least_max_value`にて設定する。省略時は処理系がサポートする最大値が設定される。
+- カウンタの初期値は[コンストラクタ](counting_semaphore/op_constructor.md)でセマフォ構築時に指定する。
+- [`release()`](counting_semaphore/release.md.nolink)メンバ関数呼び出しによりカウンタ値の加算と通知処理、つまり利用可能な共有リソースの増加を表現する。（歴史的にはオランダ語由来の&amp;#34;V操作&amp;#34;と呼ばれる。英語では&amp;#34;up&amp;#34;／&amp;#34;signal&amp;#34;／&amp;#34;post&amp;#34;とも呼ばれる。）
+- [`acquire()`](counting_semaphore/acquire.md.nolink)メンバ関数呼び出しにより待機処理とカウンタ値の減算、つまり利用可能な共有リソースの減少を表現する。（同様に&amp;#34;P操作&amp;#34;や&amp;#34;down&amp;#34;／&amp;#34;wait&amp;#34;／&amp;#34;pend&amp;#34;とも呼ばれる。）
 
-カウンティングセマフォの最大値を`1`としたものはバイナリセマフォと呼ばれ、ヘッダ`&amp;lt;semaphore&amp;gt;`ではエイリアス型`binary_semaphore`として定義される。
+カウンティングセマフォの最大値を`1`としたものはバイナリセマフォと呼ばれ、ヘッダ[`&amp;lt;semaphore&amp;gt;`](/reference/semaphore.md)ではエイリアス型`binary_semaphore`として定義される。
 バイナリセマフォはミューテックス（[`mutex`](/reference/mutex/mutex.md)など）と同様に共有リソースの排他制御を実現する同期プリミティブだが、ミューテックスとは異なりスレッドがロックを所有(own)するという概念が存在しない。
 このためバイナリセマフォでは、あるスレッド上でカウンタ値を減少（1→0; `lock`相当）させ、別のスレッド上でカウンタ値を増加（0→1; `unlock`相当）させることも可能となる。
-（注：バイナリセマフォとミューテックスとの差異を説明しただけであり、このような使い方を推奨するものではない。）
+（注：ここではミューテックスとの違いを説明しており、バイナリセマフォのこのような使い方を推奨するものではない。）
 
 
 ## 適格要件
@@ -38,7 +38,7 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`(constructor)`](counting_semaphore/op_constructor.md.nolink) | コンストラクタ | C++20 |
+| [`(constructor)`](counting_semaphore/op_constructor.md) | コンストラクタ | C++20 |
 | `(destructor)` | デストラクタ | C++20 |
 | `operator=(const counting_semaphore&amp;amp;) = delete;` | 代入演算子 | C++20 |
 | [`release`](counting_semaphore/release.md.nolink) | カウンタ値を加算し、待機中スレッドをブロック解除する | C++20 |
@@ -49,9 +49,9 @@ namespace std {
 
 ## 静的メンバ関数
 
-| 名前            | 説明           | 対応バージョン |
-|-----------------|----------------|----------------|
-| [`max`](counting_semaphore/max.md.nolink) | カウンタの最大値 | C++20 |
+| 名前             | 説明            | 対応バージョン |
+|-----------------|----------------|----------|
+| [`max`](counting_semaphore/max.md) | カウンタの最大値 | C++20 |
 
 
 ## 例
@@ -65,13 +65,16 @@ int main()
 {
   // アイテム在庫
   std::queue&amp;lt;int&amp;gt; stock;
+
   // 在庫管理カウンティングセマフォ（初期値=0／最大値=3）
   std::counting_semaphore&amp;lt;3&amp;gt; token{0};
   // 在庫アクセス保護バイナリセマフォ（初期値=1／最大値=1）
   std::counting_semaphore&amp;lt;1&amp;gt; guard{1};
+  // 説明のためテンプレートパラメータleast_max_valueを明示指定しているが、
+  // 両者ともstd::counting_semaphore&amp;lt;&amp;gt;と省略しても正しく動作する。
 
   // 生産者スレッド
-  std::jthread producer([&amp;amp;]{
+  std::thread producer([&amp;amp;]{
     for (int i = 1; i &amp;lt;= 3; i++) {
       // 新しいアイテムを生産
       int item = i * 100;
@@ -85,7 +88,7 @@ int main()
   });
 
   // 消費者スレッド
-  std::jthread consumer([&amp;amp;]{
+  std::thread consumer([&amp;amp;]{
     for (int i = 1; i &amp;lt;= 3; i++) {
       // 在庫生産されるまで待機し、在庫管理カウントを-1する
       token.acquire();
@@ -99,11 +102,13 @@ int main()
     }
   });
 
-  return 0;  // 暗黙に両スレッド完了を待機
+  producer.join();
+  consumer.join();
+  return 0;
 }
 ```
-* counting_semaphore[color ff0000]
-* std::jthread[link /reference/thread/jthread.md]
+* std::counting_semaphore[color ff0000]
+
 
 ### 出力
 ```
@@ -118,7 +123,7 @@ int main()
 - C++20
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
+- [Clang](/implementation.md#clang): 11.0
 - [GCC](/implementation.md#gcc): ??
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max -- counting_semaphore: コンストラクタ, max (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/max.html"/>
      <id>a0fb45701a81aef7e558cf80acf63e7832dd447e:reference/semaphore/counting_semaphore/max.md</id>
      <updated>2020-06-14T15:38:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/max.md b/reference/semaphore/counting_semaphore/max.md
new file mode 100644
index 000000000..d0c5de4bd
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/max.md
@@ -0,0 +1,53 @@
+# max
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr ptrdiff_t max() noexcept;
+```
+
+## 概要
+カウンティングセマフォが取り扱えるカウンタの最大値
+
+
+## 戻り値
+カウンタの最大値を返す。
+
+カウンタの最大値はテンプレートパラメータ`least_max_value`と等しいか、それ以上の値となる。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  using Semaphore = std::counting_semaphore&amp;lt;10&amp;gt;;
+  std::cout &amp;lt;&amp;lt; Semaphore::max() &amp;lt;&amp;lt; std::endl;
+}
+```
+* max[color ff0000]
+
+### 出力例
+```
+10
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- counting_semaphore: コンストラクタ, max (#683)</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/op_constructor.html"/>
      <id>a0fb45701a81aef7e558cf80acf63e7832dd447e:reference/semaphore/counting_semaphore/op_constructor.md</id>
      <updated>2020-06-14T15:38:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/op_constructor.md b/reference/semaphore/counting_semaphore/op_constructor.md
new file mode 100644
index 000000000..66d992759
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/op_constructor.md
@@ -0,0 +1,53 @@
+# コンストラクタ
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr explicit counting_semaphore(ptrdiff_t desired); // (1)
+counting_semaphore(const counting_semaphore&amp;amp;) = delete;   // (2)
+```
+
+## counting_semaphoreオブジェクトの構築
+- (1) : カウンタ初期値を`desired`として、`counting_semaphore`オブジェクトの初期化を行う。
+- (2) : コピーコンストラクタ。コピー不可。
+
+
+## 事前条件
+`desired &amp;gt;= 0` かつ `desired &amp;lt; `[`max()`](max.md)
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;semaphore&amp;gt;
+
+// カウンタ 初期値0／最大値10 のセマフォを定義
+std::counting_semaphore&amp;lt;10&amp;gt; sem{0};
+
+// カウンタ 初期値1／最大値1 の(バイナリ)セマフォを定義
+// このセマフォはミューテックス相当の排他制御に用いられる
+std::counting_semaphore&amp;lt;1&amp;gt; mtx{1};
+
+int main() {}
+```
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_semaphore -- counting_semaphore : リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html"/>
      <id>3c2a4194589d735cb7987010905cc1f343f64d14:reference/semaphore/counting_semaphore.md</id>
      <updated>2020-06-14T01:32:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore.md b/reference/semaphore/counting_semaphore.md
index bfd421ab0..6249ca1f2 100644
--- a/reference/semaphore/counting_semaphore.md
+++ b/reference/semaphore/counting_semaphore.md
@@ -125,7 +125,7 @@ int main()
 
 
 ## 関連項目
-- [`&amp;lt;condition_variable&amp;gt;`](/reference/condition_variable/condition_variable.md)
+- [`&amp;lt;condition_variable&amp;gt;`](/reference/condition_variable.md)
 - [`&amp;lt;mutex&amp;gt;`](/reference/mutex.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-24T14:40:30.099308</updated>
  <id>a15c0938-e5c1-43b3-abb8-274cf757be78</id>

  
    <entry>
      <title>setup_givens_rotation -- linalg : setup_givens_rotationの例を追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/setup_givens_rotation.html"/>
      <id>e5940e41345204a0f24b8a9663ae1e3ef2ef281a:reference/linalg/setup_givens_rotation.md</id>
      <updated>2024-07-24T11:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/setup_givens_rotation.md b/reference/linalg/setup_givens_rotation.md
index f91e11574..5bf834416 100644
--- a/reference/linalg/setup_givens_rotation.md
+++ b/reference/linalg/setup_givens_rotation.md
@@ -64,9 +64,51 @@ $$
 
 
 ## 例
+**[注意] 処理系にあるコンパイラで確認していないため、間違っているかもしれません。**
+
+```cpp example
+#include &amp;lt;cmath&amp;gt;
+#include &amp;lt;complex&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;linalg&amp;gt;
+
+template &amp;lt;class T&amp;gt;
+void print(const std::linalg::setup_givens_rotation_result&amp;lt;T&amp;gt;&amp;amp; result) {
+  std::cout &amp;lt;&amp;lt; &amp;#34;c: &amp;#34; &amp;lt;&amp;lt; result.c &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;
+            &amp;lt;&amp;lt; &amp;#34;s: &amp;#34; &amp;lt;&amp;lt; result.s &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;
+            &amp;lt;&amp;lt; &amp;#34;r: &amp;#34; &amp;lt;&amp;lt; result.r &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+
+int main()
+{
+  // (1)
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)\n&amp;#34;;
+  auto result1 = std::linalg::setup_givens_rotation(1.0, std::sqrt(3.0));
+  print(result1);
+
+  // (2)
+  std::cout &amp;lt;&amp;lt; &amp;#34;(2)\n&amp;#34;;
+  auto result2 = std::linalg::setup_givens_rotation(std::complex&amp;lt;double&amp;gt;(1.0, 0), std::complex&amp;lt;double&amp;gt;(0, std::sqrt(3.0)));
+  print(result2);
+
+  return 0;
+}
+```
+* std::linalg::setup_givens_rotation[link /reference/linalg/setup_givens_rotation.md]
+* std::linalg::setup_givens_rotation_result[link /reference/linalg/setup_givens_rotation_result.md]
 
 
 ### 出力
+```
+(1)
+c: 0.5
+s: -0.866025
+r: 2.0
+(2)
+c: 0.5
+s: (0,-0.866025)
+r: (2,0)
+```
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setup_givens_rotation_result -- linalg : setup_givens_rotationの例を追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/setup_givens_rotation_result.html"/>
      <id>e5940e41345204a0f24b8a9663ae1e3ef2ef281a:reference/linalg/setup_givens_rotation_result.md</id>
      <updated>2024-07-24T11:56:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/setup_givens_rotation_result.md b/reference/linalg/setup_givens_rotation_result.md
index 5cd720420..9ed2ff37a 100644
--- a/reference/linalg/setup_givens_rotation_result.md
+++ b/reference/linalg/setup_givens_rotation_result.md
@@ -33,9 +33,7 @@ namespace std::linalg {
 
 
 ## 例
-
-
-### 出力
+[`setup_givens_rotation`](setup_givens_rotation.md)に記載。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>utility -- Merge pull request #1303 from cpprefjp/fix-headline</title>
      <link href="https://cpprefjp.github.io/reference/utility.html"/>
      <id>ee9d0fd5477a983ff81a46f635c2ad97b41d87c1:reference/utility.md</id>
      <updated>2024-07-23T21:27:48+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;utility&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;utility&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;ヘッダでは、その他のライブラリの至る所で使用される、幾つかの基本的な関数やクラステンプレートを定義する。&lt;/p&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;演算子定義&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/rel_ops.html&#34;&gt;rel_ops&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関係演算子(namespace)&lt;/td&gt;
&lt;td&gt;C++20から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;値の入れ替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/swap.html&#34;&gt;swap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二つのオブジェクトの値を交換する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/exchange.html&#34;&gt;exchange&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値を書き換え、書き換え前の値を返す(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;転送と移動&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数テンプレートの引数を転送する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/forward_like.html&#34;&gt;forward_like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第一テンプレート引数の&lt;code&gt;const&lt;/code&gt;性と参照修飾で引数を転送する(function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/move.html&#34;&gt;move&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺値を右辺値にキャストする(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/move_if_noexcept.html&#34;&gt;move_if_noexcept&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外を投げないオブジェクトをムーブする(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の修飾&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/as_const.html&#34;&gt;as_const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺値参照を&lt;code&gt;const&lt;/code&gt;左辺値参照にする (function template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の値&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/declval.html&#34;&gt;declval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された型の値を得る(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数比較&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_equal.html&#34;&gt;cmp_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_not_equal.html&#34;&gt;cmp_not_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_less.html&#34;&gt;cmp_less&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_less_equal.html&#34;&gt;cmp_less_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下かを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_greater.html&#34;&gt;cmp_greater&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_greater_equal.html&#34;&gt;cmp_greater_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上かを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_range.html&#34;&gt;in_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値が型のとりうる範囲内か判定する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;列挙型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/to_underlying.html&#34;&gt;to_underlying&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列挙値を基底型に変換する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;到達しない表明&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/unreachable.html&#34;&gt;unreachable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コードパス不到達を表明する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;組&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;異なる型の二つの値の組(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_pair.html&#34;&gt;make_pair&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;を構築するヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/piecewise_construct_t.html&#34;&gt;piecewise_construct_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;や&lt;code&gt;tuple&lt;/code&gt;の要素型のコンストラクタ引数を直接受け取って構築するためのタグ型(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/piecewise_construct_t.html&#34;&gt;piecewise_construct&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;や&lt;code&gt;tuple&lt;/code&gt;の要素型のコンストラクタ引数を直接受け取って構築するためのタグ値(constant variable)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;型の先行宣言(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;直接構築&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_t.html&#34;&gt;in_place_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_t.html&#34;&gt;in_place&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_type_t.html&#34;&gt;in_place_type_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_type_t.html&#34;&gt;in_place_type&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_index_t.html&#34;&gt;in_place_index_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定位置にある要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_index_t.html&#34;&gt;in_place_index&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定位置にある要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非型引数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/nontype_t.html&#34;&gt;nontype_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非型引数を表現するためのタグ型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/nontype_t.html&#34;&gt;nontype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非型引数を表現するためのタグ値 (variable template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンパイル時の整数シーケンス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/integer_sequence.html&#34;&gt;integer_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の整数型のシーケンス(class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_integer_sequence.html&#34;&gt;make_integer_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を指定して、0から始まる整数シーケンスを生成する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/index_sequence.html&#34;&gt;index_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;size_t&lt;/code&gt;型の整数シーケンス(class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_index_sequence.html&#34;&gt;make_index_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を指定して、0から始まる&lt;code&gt;size_t&lt;/code&gt;型整数シーケンスを生成する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/index_sequence_for.html&#34;&gt;index_sequence_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型のシーケンスを、0から始まる&lt;code&gt;size_t&lt;/code&gt;型整数シーケンスに変換する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html&#34; target=&#34;_blank&#34;&gt;P2051R0 C++ Standard Library Issues to be moved in Prague&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>KASUYA Rei</name>
        <email>reikasuya727@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>utility -- 見出しを修正（&#34;列挙型&#34; -&gt; &#34;到達しない表明&#34;）</title>
      <link href="https://cpprefjp.github.io/reference/utility.html"/>
      <id>99f2abbc344b84293e5102a5329c4be01dd0f16f:reference/utility.md</id>
      <updated>2024-07-23T21:25:47+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;utility&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;utility&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;utility&amp;gt;&lt;/code&gt;ヘッダでは、その他のライブラリの至る所で使用される、幾つかの基本的な関数やクラステンプレートを定義する。&lt;/p&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++11)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;演算子定義&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/rel_ops.html&#34;&gt;rel_ops&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関係演算子(namespace)&lt;/td&gt;
&lt;td&gt;C++20から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;値の入れ替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/swap.html&#34;&gt;swap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二つのオブジェクトの値を交換する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/exchange.html&#34;&gt;exchange&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値を書き換え、書き換え前の値を返す(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;転送と移動&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/forward.html&#34;&gt;forward&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数テンプレートの引数を転送する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/forward_like.html&#34;&gt;forward_like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第一テンプレート引数の&lt;code&gt;const&lt;/code&gt;性と参照修飾で引数を転送する(function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/move.html&#34;&gt;move&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺値を右辺値にキャストする(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/move_if_noexcept.html&#34;&gt;move_if_noexcept&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外を投げないオブジェクトをムーブする(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の修飾&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/as_const.html&#34;&gt;as_const&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺値参照を&lt;code&gt;const&lt;/code&gt;左辺値参照にする (function template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;型の値&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/declval.html&#34;&gt;declval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された型の値を得る(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数比較&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_equal.html&#34;&gt;cmp_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_not_equal.html&#34;&gt;cmp_not_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_less.html&#34;&gt;cmp_less&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より小さいかを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_less_equal.html&#34;&gt;cmp_less_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以下かを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_greater.html&#34;&gt;cmp_greater&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺より大きいかを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/cmp_greater_equal.html&#34;&gt;cmp_greater_equal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左辺が右辺以上かを比較 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_range.html&#34;&gt;in_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値が型のとりうる範囲内か判定する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;列挙型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/to_underlying.html&#34;&gt;to_underlying&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列挙値を基底型に変換する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;到達しない表明&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/unreachable.html&#34;&gt;unreachable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コードパス不到達を表明する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;組&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;異なる型の二つの値の組(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_pair.html&#34;&gt;make_pair&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;を構築するヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/piecewise_construct_t.html&#34;&gt;piecewise_construct_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;や&lt;code&gt;tuple&lt;/code&gt;の要素型のコンストラクタ引数を直接受け取って構築するためのタグ型(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/piecewise_construct_t.html&#34;&gt;piecewise_construct&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;や&lt;code&gt;tuple&lt;/code&gt;の要素型のコンストラクタ引数を直接受け取って構築するためのタグ値(constant variable)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;型の先行宣言(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;直接構築&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_t.html&#34;&gt;in_place_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_t.html&#34;&gt;in_place&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_type_t.html&#34;&gt;in_place_type_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_type_t.html&#34;&gt;in_place_type&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_index_t.html&#34;&gt;in_place_index_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定位置にある要素型のコンストラクタ引数を直接受け取って構築するためのタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/in_place_index_t.html&#34;&gt;in_place_index&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定位置にある要素型のコンストラクタ引数を直接受け取って構築するためのタグ値 (constant variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非型引数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/nontype_t.html&#34;&gt;nontype_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非型引数を表現するためのタグ型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/nontype_t.html&#34;&gt;nontype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非型引数を表現するためのタグ値 (variable template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンパイル時の整数シーケンス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/integer_sequence.html&#34;&gt;integer_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の整数型のシーケンス(class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_integer_sequence.html&#34;&gt;make_integer_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を指定して、0から始まる整数シーケンスを生成する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/index_sequence.html&#34;&gt;index_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;size_t&lt;/code&gt;型の整数シーケンス(class template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/make_index_sequence.html&#34;&gt;make_index_sequence&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素数を指定して、0から始まる&lt;code&gt;size_t&lt;/code&gt;型整数シーケンスを生成する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;utility/index_sequence_for.html&#34;&gt;index_sequence_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型のシーケンスを、0から始まる&lt;code&gt;size_t&lt;/code&gt;型整数シーケンスに変換する(type-alias)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html&#34; target=&#34;_blank&#34;&gt;P2051R0 C++ Standard Library Issues to be moved in Prague&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>KASUYA Rei</name>
        <email>reikasuya727@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right_padded -- mdspan/layout_right_padded: remove forbid chars</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded.html"/>
      <id>246e875d357074593e6245bb9e05e8c4b23b3c97:reference/mdspan/layout_right_padded.md</id>
      <updated>2024-07-23T19:57:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded.md b/reference/mdspan/layout_right_padded.md
index 9b5af7ef0..d411b07d5 100644
--- a/reference/mdspan/layout_right_padded.md
+++ b/reference/mdspan/layout_right_padded.md
@@ -20,7 +20,7 @@ namespace std {
 ## 概要
 `layout_right_padded`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、パディングあり行優先(row major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
 
-全要素が隣接配置される[`layout_right`](layout_right.md)とは異なり、`layout_right_padded`では最右次元の隣次元（第R-2次元）ストライド幅`stride(`[`extents_type​::​rank()`](extents/rank.md) `- 2)`が最右次元の要素数`extent(extents_type​::​rank() - 1)`よりも大きい、つまり第R-2次元においてパディングが挿入される可能性がある。
+全要素が隣接配置される[`layout_right`](layout_right.md)とは異なり、`layout_right_padded`では最右次元の隣次元（第R-2次元）ストライド幅`stride(`[`extents_type::rank()`](extents/rank.md) `- 2)`が最右次元の要素数`extent(extents_type::rank() - 1)`よりも大きい、つまり第R-2次元においてパディングが挿入される可能性がある。
 
 `layout_right_padded`の特殊化は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan: layout_{left,right}_padded概要 P2645R5</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>da93e928b05e188ead8309f5aecb6d2835ffaa1b:reference/mdspan.md</id>
      <updated>2024-07-23T19:54:09+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/extents.html&#34;&gt;dims&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_left.html&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(Fortran/Matlabスタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_right.html&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(C/C++スタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_stride.html&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストライド幅指定レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_left_padded.html&#34;&gt;layout_left_padded&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;パディングあり列優先レイアウトマッピングポリシー (class templte)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/layout_right_padded.html&#34;&gt;layout_right_padded&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;パディングあり行優先レイアウトマッピングポリシー (class templte)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列部分ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/strided_slice.html&#34;&gt;strided_slice&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元のストライド指定要素取り出しを指示する集成体クラステンプレート (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/full_extent_t.html&#34;&gt;full_extent_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/full_extent_t.html&#34;&gt;full_extent&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定次元の全要素取り出しを指示するタグ値 (variable)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan_mapping_result.html&#34;&gt;submdspan_mapping_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューのレイアウトマッピング情報 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan_extents.html&#34;&gt;submdspan_extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューの多次元配列サイズを計算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;mdspan/submdspan.html&#34;&gt;submdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列部分ビューを取得する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++26 &lt;code&gt;&lt;a href=&#34;linalg.html&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2630r4.html&#34; target=&#34;_blank&#34;&gt;P2630R4 Submdspan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2642r5.html&#34; target=&#34;_blank&#34;&gt;P2642R5 Padded mdspan layouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMapping -- mdspan: layout_{left,right}_padded概要 P2645R5</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>da93e928b05e188ead8309f5aecb6d2835ffaa1b:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-07-23T19:54:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
index 4fde61d7e..fbc2c425f 100644
--- a/reference/mdspan/LayoutMapping.md
+++ b/reference/mdspan/LayoutMapping.md
@@ -93,6 +93,8 @@ LayoutMappingを満たす型`M`は
 - [`layout_left::mapping&amp;lt;E&amp;gt;`](layout_left/mapping.md)
 - [`layout_right::mapping&amp;lt;E&amp;gt;`](layout_right/mapping.md)
 - [`layout_stride::mapping&amp;lt;E&amp;gt;`](layout_stride/mapping.md)
+- [`layout_left_padded&amp;lt;PV&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_left_padded/mapping.md.nolink)
+- [`layout_right_padded&amp;lt;PV&amp;gt;::mapping&amp;lt;E&amp;gt;`](layout_right_padded/mapping.md.nolink)
 - [`layout_blas_packed&amp;lt;T,SO&amp;gt;::mapping&amp;lt;E&amp;gt;`](/reference/linalg/layout_blas_packed/mapping.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMappingPolicy -- mdspan: layout_{left,right}_padded概要 P2645R5</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMappingPolicy.html"/>
      <id>da93e928b05e188ead8309f5aecb6d2835ffaa1b:reference/mdspan/LayoutMappingPolicy.md</id>
      <updated>2024-07-23T19:54:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMappingPolicy.md b/reference/mdspan/LayoutMappingPolicy.md
index 08ec23b8b..52161f276 100644
--- a/reference/mdspan/LayoutMappingPolicy.md
+++ b/reference/mdspan/LayoutMappingPolicy.md
@@ -40,6 +40,8 @@ LayoutMappingPolicyを満たす型`MP`は
 - [`layout_left`](layout_left.md)
 - [`layout_right`](layout_right.md)
 - [`layout_stride`](layout_stride.md)
+- [`layout_left_padded&amp;lt;PV&amp;gt;`](layout_left_padded.md)
+- [`layout_right_padded&amp;lt;PV&amp;gt;`](layout_right_padded.md)
 - [`linalg::layout_blas_packed&amp;lt;T,SO&amp;gt;`](/reference/linalg/layout_blas_packed.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left_padded -- mdspan: layout_{left,right}_padded概要 P2645R5</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded.html"/>
      <id>da93e928b05e188ead8309f5aecb6d2835ffaa1b:reference/mdspan/layout_left_padded.md</id>
      <updated>2024-07-23T19:54:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded.md b/reference/mdspan/layout_left_padded.md
new file mode 100644
index 000000000..32d916a80
--- /dev/null
+++ b/reference/mdspan/layout_left_padded.md
@@ -0,0 +1,86 @@
+# layout_left_padded
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;size_t PaddingValue = dynamic_extent&amp;gt;
+  struct layout_left_padded {
+    template&amp;lt;class Extents&amp;gt;
+    class mapping;
+  };
+}
+```
+* dynamic_extent[link /reference/span/dynamic_extent.md]
+* Extents[link extents.md]
+* mapping[link layout_left_padded/mapping.md.nolink]
+
+## 概要
+`layout_left_padded`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、パディングあり列優先(column major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
+
+全要素が隣接配置される[`layout_left`](layout_left.md)とは異なり、`layout_left_padded`では最左次元の隣次元（第1次元）ストライド幅`stride(1)`が最左次元の要素数`extent(0)`よりも大きい、つまり第1次元においてパディングが挿入される可能性がある。
+
+`layout_left_padded`の特殊化は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`mapping`](layout_left_padded/mapping.md.nolink) | レイアウトマッピング | C++26 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 0, 0, 3, 4, 0, 0, 5, 6, 0, 0};
+  // 1 3 5
+  // 2 4 6
+  // - - -
+  // - - -
+
+  // 要素数2x3の2次元配列／列優先レイアウト／アライメント4
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;
+  std::mdspan&amp;lt;double, Ext2x3, std::layout_left_padded&amp;lt;4&amp;gt;&amp;gt; mat{arr};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::print(&amp;#34;{}{}&amp;#34;, (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;), mat[i, j]);
+    }
+    std::println();
+  }
+}
+```
+* std::layout_left_padded[color ff0000]
+* extent[link mdspan/extent.md]
+
+### 出力
+```
+1 3 5
+2 4 6
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_left`](layout_left.md)
+
+
+## 参照
+- [P2642R5 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2642r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right_padded -- mdspan: layout_{left,right}_padded概要 P2645R5</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded.html"/>
      <id>da93e928b05e188ead8309f5aecb6d2835ffaa1b:reference/mdspan/layout_right_padded.md</id>
      <updated>2024-07-23T19:54:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded.md b/reference/mdspan/layout_right_padded.md
new file mode 100644
index 000000000..9b5af7ef0
--- /dev/null
+++ b/reference/mdspan/layout_right_padded.md
@@ -0,0 +1,84 @@
+# layout_right_padded
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;size_t PaddingValue = dynamic_extent&amp;gt;
+  struct layout_right_padded {
+    template&amp;lt;class Extents&amp;gt;
+    class mapping;
+  };
+}
+```
+* dynamic_extent[link /reference/span/dynamic_extent.md]
+* Extents[link extents.md]
+* mapping[link layout_right_padded/mapping.md.nolink]
+
+## 概要
+`layout_right_padded`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、パディングあり行優先(row major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
+
+全要素が隣接配置される[`layout_right`](layout_right.md)とは異なり、`layout_right_padded`では最右次元の隣次元（第R-2次元）ストライド幅`stride(`[`extents_type​::​rank()`](extents/rank.md) `- 2)`が最右次元の要素数`extent(extents_type​::​rank() - 1)`よりも大きい、つまり第R-2次元においてパディングが挿入される可能性がある。
+
+`layout_right_padded`の特殊化は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`mapping`](layout_right_padded/mapping.md.nolink) | レイアウトマッピング | C++26 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 3, 0, 4, 5, 6, 0};
+  // 1 2 3 -
+  // 4 5 6 -
+
+  // 要素数2x3の2次元配列／行優先レイアウト／アライメント4
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;
+  std::mdspan&amp;lt;double, Ext2x3, std::layout_right_padded&amp;lt;4&amp;gt;&amp;gt; mat{arr};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::print(&amp;#34;{}{}&amp;#34;, (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;), mat[i, j]);
+    }
+    std::println();
+  }
+}
+```
+* std::layout_right_padded[color ff0000]
+* extent[link mdspan/extent.md]
+
+### 出力
+```
+1 2 3
+4 5 6
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_right`](layout_right.md)
+
+
+## 参照
+- [P2642R5 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2642r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
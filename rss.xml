<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-08-19T14:36:57.895393</updated>
  <id>b6d177e4-2df9-49fb-afb3-76fe8e4c3161</id>

  
    <entry>
      <title>operator== -- type_info/op_equal: C++23 P1328R1対応</title>
      <link href="https://cpprefjp.github.io/reference/typeinfo/type_info/op_equal.html"/>
      <id>bf6764f89e0d087317747b21541b2d66f53ba69a:reference/typeinfo/type_info/op_equal.md</id>
      <updated>2021-08-19T18:43:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/typeinfo/type_info/op_equal.md b/reference/typeinfo/type_info/op_equal.md
index f2a89af11..38265f67b 100644
--- a/reference/typeinfo/type_info/op_equal.md
+++ b/reference/typeinfo/type_info/op_equal.md
@@ -5,7 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-bool operator==(const type_info&amp;amp; rhs) const noexcept;
+bool operator==(const type_info&amp;amp; rhs) const noexcept;            // C++20まで
+constexpr bool operator==(const type_info&amp;amp; rhs) const noexcept;  // C++23から
 ```
 
 ## 概要
@@ -41,5 +42,4 @@ same type? true
 ```
 
 ## 参照
-
-
+- [P1328R1 Making `std::type_info::operator==` `constexpr`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1328r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- basic_string::operator= : C++23の付け忘れっぽいので追加</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_assign.html"/>
      <id>af5c283f737f45de1fce29b17106705c07e470b7:reference/string/basic_string/op_assign.md</id>
      <updated>2021-08-19T14:00:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_assign.md b/reference/string/basic_string/op_assign.md
index dabefbe8a..284a236d0 100644
--- a/reference/string/basic_string/op_assign.md
+++ b/reference/string/basic_string/op_assign.md
@@ -18,7 +18,7 @@ basic_string&amp;amp; operator=(initializer_list&amp;lt;charT&amp;gt; il);               // (5) C++11
 template&amp;lt;class T&amp;gt;
 basic_string&amp;amp; operator=(const T&amp;amp; t);                               // (6) C++17
 
-basic_string&amp;amp; operator=(nullptr_t) = delete;                       // (7)
+basic_string&amp;amp; operator=(nullptr_t) = delete;                       // (7) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- basic_string: C++23 P2166R1対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_assign.html"/>
      <id>7230b34ef0071b07123f44363e811917ef0752de:reference/string/basic_string/op_assign.md</id>
      <updated>2021-08-19T11:32:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_assign.md b/reference/string/basic_string/op_assign.md
index 1a450eee7..dabefbe8a 100644
--- a/reference/string/basic_string/op_assign.md
+++ b/reference/string/basic_string/op_assign.md
@@ -17,6 +17,8 @@ basic_string&amp;amp; operator=(initializer_list&amp;lt;charT&amp;gt; il);               // (5) C++11
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
 basic_string&amp;amp; operator=(const T&amp;amp; t);                               // (6) C++17
+
+basic_string&amp;amp; operator=(nullptr_t) = delete;                       // (7)
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -114,3 +116,5 @@ hello
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(6)の引数型を`const T&amp;amp;`に変更
+- [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
+    - C++23での、`nullptr_t`をとる代入演算子のdelete宣言追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_string: C++23 P2166R1対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>7230b34ef0071b07123f44363e811917ef0752de:reference/string/basic_string/op_constructor.md</id>
      <updated>2021-08-19T11:32:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_constructor.md b/reference/string/basic_string/op_constructor.md
index 946cf5d09..5924f6f2a 100644
--- a/reference/string/basic_string/op_constructor.md
+++ b/reference/string/basic_string/op_constructor.md
@@ -61,6 +61,8 @@ template&amp;lt;class T&amp;gt;
                       size_type pos,
                       size_type n,
                       const Allocator&amp;amp; a = Allocator());        // (15) C++17
+
+basic_string(nullptr_t) = delete;                               // (16) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -198,3 +200,5 @@ s14 : Hello
     - `string_view`から範囲を指定して構築する(15)を追加
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(14)の引数型を`const T&amp;amp;`に変更
+- [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
+    - C++23での、`nullptr_t`をとるコンストラクタのdelete宣言追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_string_view/op_constructor: delete forbid. chars</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_constructor.html"/>
      <id>b8b84a1084420747236896d9fe605be9ce1fde76:reference/string_view/basic_string_view/op_constructor.md</id>
      <updated>2021-08-19T11:03:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_constructor.md b/reference/string_view/basic_string_view/op_constructor.md
index d83c63abd..82545efff 100644
--- a/reference/string_view/basic_string_view/op_constructor.md
+++ b/reference/string_view/basic_string_view/op_constructor.md
@@ -38,11 +38,11 @@ constexpr basic_string_view(R&amp;amp;&amp;amp; r);                            // (7) C++23
     - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`iter_value_t`](/reference/iterator/iter_value_t.md)`&amp;lt;It&amp;gt;, charT&amp;gt;`が`true`であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;End, size_type&amp;gt;`が`false`であること
 - (7) :
-    - `R`はコンセプト[`ranges::contiguous_range`](/reference/ranges/contiguous_range.md.nolink)および[`ranges​::​sized_range`](/reference/ranges/sized_range.md.nolink)のモデルであること
+    - `R`はコンセプト[`ranges::contiguous_range`](/reference/ranges/contiguous_range.md.nolink)および[`ranges::sized_range`](/reference/ranges/sized_range.md.nolink)のモデルであること
     - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`ranges::range_value_t`](/reference/ranges/range_value_t.md.nolink)`&amp;lt;R&amp;gt;, charT&amp;gt;`が`true`であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;R, const charT*&amp;gt;`が`false`であること
-    - `d`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;R&amp;gt;`型の左辺値としたとき、`d.operator ​::​std​::​basic_string_view&amp;lt;charT, traits&amp;gt;()`が妥当な式ではないこと
-    - もし`R::​traits_type`が妥当な型の場合、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;R&amp;gt;::type_traits, traits&amp;gt;`が`true`であること
+    - `d`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;R&amp;gt;`型の左辺値としたとき、`d.operator ::std::basic_string_view&amp;lt;charT, traits&amp;gt;()`が妥当な式ではないこと
+    - もし`R::traits_type`が妥当な型の場合、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;R&amp;gt;::type_traits, traits&amp;gt;`が`true`であること
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-01-05T14:12:32.493882</updated>
  <id>739e72b9-4712-448b-8fd9-09f5b608c994</id>

  
    <entry>
      <title>imag -- complex: s/所得/取得/</title>
      <link href="http://cpprefjp.github.io/reference/complex/complex/imag.html"/>
      <id>657fa538f64c239a67b84880c32abed98af7fbe3:reference/complex/complex/imag.md</id>
      <updated>2015-01-05 14:10:33 +0900</updated>
      
        <content type="html">&lt;h1&gt;imag&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;T imag() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11 まで&lt;/span&gt;

constexpr T imag() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;imag&lt;/span&gt;(T val);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;複素数の虚部を取得、あるいは、設定する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) -&lt;/li&gt;
&lt;li&gt;(2) 虚部に &lt;code&gt;val&lt;/code&gt; を設定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) 虚部&lt;/li&gt;
&lt;li&gt;(2) -&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;虚部の取得は、同名の非メンバ関数 &lt;a href=&#34;http://cpprefjp.github.io/reference/complex/imag.html&#34;&gt;&lt;code&gt;imag&lt;/code&gt;&lt;/a&gt; も存在する。&lt;/li&gt;
&lt;li&gt;虚部の取得は、C++14 から &lt;code&gt;constexpr&lt;/code&gt; 関数になっている。&lt;/li&gt;
&lt;li&gt;虚部の設定は、C++11 から追加された。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;complex&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;complex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;imag&lt;/span&gt; part = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;span style=&#34;color:#ff0000&#34;&gt;imag&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  c.&lt;span style=&#34;color:#ff0000&#34;&gt;imag&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;4.0&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;imag&lt;/span&gt; part = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;span style=&#34;color:#ff0000&#34;&gt;imag&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1,2), imag part = 2
(1,4), imag part = 4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/complex/real.html&#34;&gt;&lt;code&gt;real&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実部を取得、あるいは、設定する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/real.html&#34;&gt;&lt;code&gt;real&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実部を取得する。（非メンバ関数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/imag.html&#34;&gt;&lt;code&gt;imag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;虚部を取得する。（非メンバ関数）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>real -- complex: s/所得/取得/</title>
      <link href="http://cpprefjp.github.io/reference/complex/complex/real.html"/>
      <id>657fa538f64c239a67b84880c32abed98af7fbe3:reference/complex/complex/real.md</id>
      <updated>2015-01-05 14:10:33 +0900</updated>
      
        <content type="html">&lt;h1&gt;real&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;T real() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11 まで&lt;/span&gt;

constexpr T real() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++14 から&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;real&lt;/span&gt;(T val);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;複素数の実部を取得、あるいは、設定する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) -&lt;/li&gt;
&lt;li&gt;(2) 実部に &lt;code&gt;val&lt;/code&gt; を設定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) 実部&lt;/li&gt;
&lt;li&gt;(2) -&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;実部の取得は、同名の非メンバ関数 &lt;a href=&#34;http://cpprefjp.github.io/reference/complex/real.html&#34;&gt;&lt;code&gt;real&lt;/code&gt;&lt;/a&gt; も存在する。&lt;/li&gt;
&lt;li&gt;実部の取得は、C++14 から &lt;code&gt;constexpr&lt;/code&gt; 関数になっている。&lt;/li&gt;
&lt;li&gt;実部の設定は、C++11 から追加された。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;complex&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;complex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;real&lt;/span&gt; part = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;span style=&#34;color:#ff0000&#34;&gt;real&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  c.&lt;span style=&#34;color:#ff0000&#34;&gt;real&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;4.0&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &lt;span style=&#34;color:#ff0000&#34;&gt;real&lt;/span&gt; part = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;span style=&#34;color:#ff0000&#34;&gt;real&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;(1,2), real part = 1
(4,2), real part = 4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/complex/imag.html&#34;&gt;&lt;code&gt;imag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;虚部を取得、あるいは、設定する。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/real.html&#34;&gt;&lt;code&gt;real&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実部を取得する。（非メンバ関数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/imag.html&#34;&gt;&lt;code&gt;imag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;虚部を取得する。（非メンバ関数）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>article -- リンクミスを修正(#243)</title>
      <link href="http://cpprefjp.github.io/article.html"/>
      <id>040aeb4548beb3f83d1d433a06e2b0b8ccbbe5dd:article.md</id>
      <updated>2015-01-05 13:56:54 +0900</updated>
      
        <content type="html">&lt;h1&gt;article&lt;/h1&gt;
&lt;h2&gt;コア言語&lt;/h2&gt;
&lt;p&gt;現在、このカテゴリに関する記事はない。&lt;/p&gt;
&lt;h2&gt;ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/article/lib/how_to_use_cv.html&#34;&gt;条件変数の利用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/article/lib/dont_use_noexcept.html&#34;&gt;標準ライブラリにおける、関数にnoexceptを付けない条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/article/lib/at_thread_exit.html&#34;&gt;&lt;code&gt;_at_thread_exit&lt;/code&gt;系の関数が存在している理由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;プラットフォーム&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/article/platform/locales.html&#34;&gt;Microsoft Visual C++で使用できるロケール文字列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;方針&lt;/h2&gt;
&lt;p&gt;article階層にある記事は、以下の方針のもとに執筆しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;言語、ライブラリ、その他ツール等のアップデートへの追従について、責任を負わない&lt;ul&gt;
&lt;li&gt;バージョン固有の記事に対しては、執筆時のバージョンを記載すること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;プラットフォームカテゴリには、標準外のツールについて記載してもかまわない(Visual C++、GCB、Emscriptenなど)&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>article -- articleを整理し、カテゴリを分けた。(#243)</title>
      <link href="http://cpprefjp.github.io/article.html"/>
      <id>89594e8b9e47e51c65541d97bd3d11852a7ed85a:article.md</id>
      <updated>2015-01-05 13:56:19 +0900</updated>
      
        <content type="html">&lt;h1&gt;article&lt;/h1&gt;
&lt;h2&gt;コア言語&lt;/h2&gt;
&lt;p&gt;現在、このカテゴリに関する記事はない。&lt;/p&gt;
&lt;h2&gt;ライブラリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/article/how_to_use_cv.html&#34;&gt;条件変数の利用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/article/lib/dont_use_noexcept.html&#34;&gt;標準ライブラリにおける、関数にnoexceptを付けない条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/article/lib/at_thread_exit.html&#34;&gt;&lt;code&gt;_at_thread_exit&lt;/code&gt;系の関数が存在している理由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;プラットフォーム&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/article/platform/locales.html&#34;&gt;Microsoft Visual C++で使用できるロケール文字列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;方針&lt;/h2&gt;
&lt;p&gt;article階層にある記事は、以下の方針のもとに執筆しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;言語、ライブラリ、その他ツール等のアップデートへの追従について、責任を負わない&lt;ul&gt;
&lt;li&gt;バージョン固有の記事に対しては、執筆時のバージョンを記載すること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;プラットフォームカテゴリには、標準外のツールについて記載してもかまわない(Visual C++、GCB、Emscriptenなど)&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at_thread_exit.md -- articleを整理し、カテゴリを分けた。(#243)</title>
      <link href="http://cpprefjp.github.io/article/at_thread_exit.html"/>
      <id>89594e8b9e47e51c65541d97bd3d11852a7ed85a:article/at_thread_exit.md</id>
      <updated>2015-01-05 13:56:19 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/article/at_thread_exit.md b/article/at_thread_exit.md
deleted file mode 100644
index 6fcf238..0000000
--- a/article/at_thread_exit.md
+++ /dev/null
@@ -1,144 +0,0 @@
-#_at_thread_exit系の関数が存在している理由
-
-[`&amp;lt;future&amp;gt;`](/reference/future.md) や [`&amp;lt;condition_variable&amp;gt;`](/reference/condition_variable.md) には、`*_at_thread_exit` という名前の関数が定義されている。
-
-```cpp
-namespace std {
-  void notify_all_at_thread_exit(condition_variable&amp;amp; cond, unique_lock&amp;lt;mutex&amp;gt; lk);
-
-  template &amp;lt;class R&amp;gt;
-  class promise {
-  public:
-    ...
-    void set_value_at_thread_exit(const R&amp;amp; r);
-    void set_exception_at_thread_exit(exception_ptr p);
-  };
-
-  template &amp;lt;class R, class... ArgTypes&amp;gt;
-  class packaged_task&amp;lt;R(ArgTypes...)&amp;gt; {
-  public:
-    ...
-    void make_ready_at_thread_exit(ArgTypes... args);
-  };
-}
-```
-* notify_all_at_thread_exit[link /reference/condition_variable/condition_variable/notify_all_at_thread_exit.md]
-* condition_variable[link /reference/condition_variable/condition_variable.md]
-* unique_lock[link /reference/mutex/unique_lock.md]
-* mutex[link /reference/mutex/mutex.md]
-* promise[link /reference/future/promise.md]
-* set_value_at_thread_exit[link /reference/future/promise/set_value_at_thread_exit.md]
-* set_exception_at_thread_exit[link /reference/future/promise/set_exception_at_thread_exit.md]
-* exception_ptr[link /reference/exception/exception_ptr.md]
-* packaged_task[link /reference/future/packaged_task.md]
-* make_ready_at_thread_exit[link /reference/future/packaged_task/make_ready_at_thread_exit.md]
-
-これらの関数は、スレッドローカル記憶域が破棄された後に通知を行なったり、状態を変更する。 
-
-また、[`thread`](/reference/thread/thread.md)`::`[`detach`](/reference/thread/thread/detach.md)`()` されたスレッド上で、
-スレッドローカル記憶域との同期を取る唯一の方法でもある。
-
-デタッチされたスレッドにおいて、スレッドローカル記憶域にあるオブジェクトがいつ破棄されるかという規定は無い。
-そのため、未定義動作を含まずにこれらのオブジェクトを破棄するのは難しい。 
-
-例えば、以下のようなケースで問題になる。
-
-```cpp
-#include &amp;lt;type_traits&amp;gt;
-#include &amp;lt;future&amp;gt;
-#include &amp;lt;thread&amp;gt;
-#include &amp;lt;iostream&amp;gt;
-
-template&amp;lt;class F&amp;gt;
-std::future&amp;lt;typename std::result_of&amp;lt;F()&amp;gt;::type&amp;gt; spawn_task(F f) {
-  typedef typename std::result_of&amp;lt;F()&amp;gt;::type result_type;
-  std::packaged_task&amp;lt;result_type ()&amp;gt; task(std::move(f));
-  std::future&amp;lt;result_type&amp;gt; future(task.get_future());
-  std::thread th(std::move(task));
-  th.detach();
-  return future;
-}
-
-
-struct Hoge {
-  ~Hoge() { std::cout &amp;lt;&amp;lt; &amp;#34;Hoge destructor&amp;#34; &amp;lt;&amp;lt; std::endl; }
-};
-
-int f() {
-  thread_local Hoge h;
-  return 42;
-}
-
-int main() {
-  std::future&amp;lt;int&amp;gt; res(spawn_task(f));
-  std::cout &amp;lt;&amp;lt; res.get() &amp;lt;&amp;lt; std::endl;
-}
-```
-
-出力:
-```
-42Hoge destructor
-
-```
-
-`spawn_task` は、渡された任意の処理を別スレッドで行なう一般的な関数である。関数内部でスレッドを作り、デタッチを行なっている。 
-
-出力は、`main()` 関数での出力と、`Hoge` デストラクタでの出力が混在している。これはスレッドローカル記憶域と `future` オブジェクトが正しく同期されていないからである。そのため、これ以外の出力も起こり得る。
-
-これは `*_at_thread_exit` 系の関数を利用することで修正できる。
-
-```cpp
-#include &amp;lt;type_traits&amp;gt;
-#include &amp;lt;future&amp;gt;
-#include &amp;lt;thread&amp;gt;
-#include &amp;lt;iostream&amp;gt;
-
-struct task_executor
-{
-  template &amp;lt;class R&amp;gt;
-  void operator()( std::packaged_task&amp;lt;R&amp;gt; task )
-  {
-    task.make_ready_at_thread_exit(); // operator() を呼び出す代わりに make_ready_at_thread_exit() を呼び出す。
-  }
-};
-
-template&amp;lt;class F&amp;gt;
-std::future&amp;lt;typename std::result_of&amp;lt;F()&amp;gt;::type&amp;gt; spawn_task(F f) {
-  typedef typename std::result_of&amp;lt;F()&amp;gt;::type result_type;
-  std::packaged_task&amp;lt;result_type ()&amp;gt; task(std::move(f));
-  std::future&amp;lt;result_type&amp;gt; future(task.get_future());
-  std::thread th(task_executor{}, std::move(task));
-  th.detach();
-  return future;
-}
-
-
-struct Hoge {
-  ~Hoge() { std::cout &amp;lt;&amp;lt; &amp;#34;Hoge destructor&amp;#34; &amp;lt;&amp;lt; std::endl; }
-};
-
-int f() {
-  thread_local Hoge h;
-  return 42;
-}
-
-int main() {
-  std::future&amp;lt;int&amp;gt; res(spawn_task(f));
-  std::cout &amp;lt;&amp;lt; res.get() &amp;lt;&amp;lt; std::endl;
-}
-```
-* make_ready_at_thread_exit[color ff0000]
-
-出力:
-```
-Hoge destructor
-42
-```
-
-このプログラムの出力は、必ずこの通りになる。つまり、確実にスレッドローカル記憶域のオブジェクトが破棄された後に `res.get()` の結果が出力される。
-
-
-##参考
-- [futureとpromiseのあれこれ（理論編） - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20120131/p1)
-- [N3070 - Handling Detached Threads and thread_local Variables](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3070.html)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dont_use_noexcept.md -- articleを整理し、カテゴリを分けた。(#243)</title>
      <link href="http://cpprefjp.github.io/article/dont_use_noexcept.html"/>
      <id>89594e8b9e47e51c65541d97bd3d11852a7ed85a:article/dont_use_noexcept.md</id>
      <updated>2015-01-05 13:56:19 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/article/dont_use_noexcept.md b/article/dont_use_noexcept.md
deleted file mode 100644
index efa4151..0000000
--- a/article/dont_use_noexcept.md
+++ /dev/null
@@ -1,21 +0,0 @@
-#標準ライブラリにおける、関数にnoexceptを付けない条件
-
-C++11から、`throw`キーワードを使用した関数の例外指示が非推奨になり、例外を投げないことを明示する`noexcept`キーワードが追加された。
-
-標準ライブラリも`noexcept`に対応しているが、仕様上、自然言語で「Throws: Nothing.(例外を投げない)」と書いてあって、`noexcept`が付いていないものがいくつか存在する。
-
-
-たとえば、[`std::mutex`](/reference/mutex/mutex.md)クラスの[`unlock()`](/reference/mutex/mutex/unlock.md)メンバ関数には、`noexcept`が付いていない。
-
-これについては、「[N3279 - Conservative use of noexcept in the library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3279.pdf)」のペーパーで論じられている。簡単に言えば、`noexcept`を付けない条件は以下のようになる：
-
-
-関数に事前条件が設定されている場合(`unlock()`の場合は、すでにアンロックされていないこと)、事前条件の不一致を報告するために、実装が例外を投げる場合がある。そういう関数に対しては、`noexcept`は付いていない。
-
-
-例外があることを前提としていない、C言語の互換ライブラリには、`noexcept`が付いている場合がある。たとえば、[`atomic_exchange()`](/reference/atomic/atomic_exchange.md)のような、[アトミックライブラリ](/reference/atomic.md)の関数などには、`noexcept`が付いている。
-
-
-##参照元
-この記事は、「[標準ライブラリにおける、関数にnoexceptを付けない条件 - Faith and Brave - C++で遊ぼう](http://d.hatena.ne.jp/faith_and_brave/20130620/1371715296)」のブログエントリから転載し、修正を行っている。
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>how_to_use_cv.md -- articleを整理し、カテゴリを分けた。(#243)</title>
      <link href="http://cpprefjp.github.io/article/how_to_use_cv.html"/>
      <id>89594e8b9e47e51c65541d97bd3d11852a7ed85a:article/how_to_use_cv.md</id>
      <updated>2015-01-05 13:56:19 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/article/how_to_use_cv.md b/article/how_to_use_cv.md
deleted file mode 100644
index 2469d41..0000000
--- a/article/how_to_use_cv.md
+++ /dev/null
@@ -1,171 +0,0 @@
-# 条件変数の利用方法
-標準ヘッダ[`&amp;lt;condition_variable&amp;gt;`](/reference/condition_variable.md)で提供される、条件変数(condition variable)の利用方法について説明する。
-
-簡単のため、条件変数[`condition_variable`](/reference/condition_variable/condition_variable.md)とロック[`unique_lock`](/reference/mutex/unique_lock.md)`&amp;lt;`[`mutex`](/reference/mutex/mutex.md)`&amp;gt;`の組に対してのみ説明を行う。
-[`condition_variable_any`](/reference/condition_variable/condition_variable_any.md)クラスは、任意のロック型と組み合わせ可能なことを除き、その利用方法は`condition_variable`と同じである。
-
-
-## 利用の目的
-条件変数オブジェクトのみを単体で利用するのではなく、必ずミューテックス（排他制御）オブジェクトと、同ミューテックスで保護されるデータ状態を表す変数群（以下、&amp;#34;ステート&amp;#34;と呼ぶ）という3つの組で利用すること。
-条件変数オブジェクトとは、複数スレッドがこの共有&amp;#34;ステート&amp;#34;を更新／参照する場合に、&amp;#34;ステート&amp;#34;の更新を他スレッドに通知／&amp;#34;ステート&amp;#34;が指定条件を満たすまで待機する処理を、効率的に記述するための同期機構である。
-
-理論的には条件変数を利用しなくても、ミューテックス保護＋&amp;#34;ステート&amp;#34;参照をループする処理でも条件待機は実現できる。
-ただし、このような実装（ポーリング方式）では参照側スレッドが常に動作し続けるため、一般的には計算機リソース浪費による実行効率の著しい低下をもたらす。
-（対象処理系や特殊ユースケースでは、ポーリング方式の方が望ましい状況も否定しない。）
-
-
-## 利用パターン
-下記コードでは典型的な利用パターンを示す。なお、通知処理と待機処理は異なるスレッド上で並行実行されるものとする。
-
-```cpp
-#include &amp;lt;mutex&amp;gt;
-#include &amp;lt;condition_variable&amp;gt;
-
-// &amp;#34;ステート&amp;#34;変数＋ミューテックスmtx＋条件変数cv
-int state;  // 注: 変数型やその個数は目的による
-std::mutex mtx;
-std::condition_variable cv;
-```
-
-```cpp
-// 共有&amp;#34;ステート&amp;#34;変数の更新と通知
-{
-  std::lock_guard&amp;lt;std::mutex&amp;gt; lk(mtx);
-  // &amp;#34;ステート&amp;#34;変数の更新処理
-  cv.notify_all();
-}
-```
-
-```cpp
-// 指定条件を満たすまで待機
-{
-  std::unique_lock&amp;lt;std::mutex&amp;gt; lk(mtx);
-  cv.wait(lk, [&amp;amp;]{
-    return /* &amp;#34;ステート&amp;#34;変数を参照し、指定条件を満たす場合はtrueを返す */;
-  });
-  // &amp;#34;ステート&amp;#34;変数を参照した処理
-}
-```
-
-通知処理の実装では、通知関数として[`notify_all()`](/reference/condition_variable/condition_variable/notify_all.md)を利用している。
-通知関数としてはもう1種類[`notify_one()`](/reference/condition_variable/condition_variable/notify_one.md)が提供されるが、`notify_one()`で論理的に十分であると判断できないならば、まずは`notify_all()`利用を推奨する。
-（`notify_all()`が待機中の全スレッドに通知を行うのに対し、`notify_one()`は待機中の任意の1スレッドにのみ通知を行うため、後者は実行時オーバーヘッドの観点で有利である。
-一方、待機処理における指定条件によっては、`notify_one()`利用ではライブロック(live lock)に陥るケースも存在する。
-なお、`nofity_all()`の動作セマンティクスは`notify_one()`を完全に包含するため、`notify_one()`で正しく動作する並行処理は`notify_all()`利用でも正しく動作する。）
-
-待機処理の実装では、第2引数に述語をとる[`wait()`](/reference/condition_variable/condition_variable/wait.md)を利用することで、条件変数のSpurious Wakeupと呼ばれる現象を考慮しなくとも正しい処理を記述できる。
-`wait()`メンバ関数はロック型のみを引数にとる1引数オーバーロードも提供するが、特殊なケースを除いて上記の2引数オーバーロード利用を推奨する。
-待機関数によるブロッキング期間以外では、そのスレッド自身がロック`lk`保持中であると保証されるため、述語処理（前掲実装ではラムダ式）や`wait()`呼出より後に&amp;#34;ステート&amp;#34;変数へと安全にアクセスできる。
-
-
-## 条件変数と状態
-条件変数オブジェクトはスレッド間通知／待機機能を提供するだけであり、オブジェクトそれ自身は永続的な状態管理を行わない。
-このため条件変数オブジェクトに対する通知関数`notify_one()`/`notify_all()`は、その通知時点で同オブジェクトの待機関数`wait()`/`wait_for()`/`wait_until()`にてブロックされているスレッド群にしか影響しない。
-
-この条件変数オブジェクトの動作は、概念的には「待機／実行可能スレッドのキュー」と解釈する事ができる。
-待機関数`wait()`系は呼出スレッドをブロック状態へ遷移してから待機キューに追加する動作、通知関数`notify_one()`は待機キューからいずれか1つ／`notify_all()`は待機キュー内の全スレッドを実行可能キューへ移動させる動作に相当する。
-待機関数`wait()`でブロック中のスレッドは、自スレッドを実行可能キュー内でみつけたら、実行状態へ遷移したのち待機関数の呼出元に制御を戻す。
-
-下記コードでは条件変数を誤用した例を示す。なお、通知処理と待機処理は異なるスレッド上で並行実行されるものとする。
-
-```cpp
-// 条件変数を誤用した同期処理
-std::mutex mtx;
-std::condition_varialbe cv;
-```
-
-```cpp
-// 誤った通知処理
-{
-  std::lock_guard&amp;lt;std::mutex&amp;gt; lk(mtx);
-  // 共有データの更新
-  cv.notify_all();
-}
-```
-
-```cpp
-// 誤った待機処理
-{
-  std::unique_lock&amp;lt;std::mutex&amp;gt; lk(mtx);
-  cv.wait(lk);
-  // 共有データの参照利用
-}
-```
-
-上記の誤用例では、プログラマの意図と反するであろう次の実行結果が生じる。
-このプログラムでは非決定的な動作となるため、偶然に期待通り動作したかのように見えるケースもある。
-
-* 通知関数の呼び出し後に待機関数が呼び出された場合、待機処理スレッドはブロッキングされる。（ライブロック状態）
-* 待機関数が先に呼び出された場合、待機処理スレッドはブロッキングされる。その後、通知処理スレッドによる通知関数の呼び出しよりも前に、待機処理スレッドのブロックが解除されて待機関数から制御が戻ってくる可能性がある。（Suprious Wakeupの未考慮）
-
-この不具合を修正するには、過去に通知が行われた事実を永続化する変数（&amp;#34;ステート&amp;#34;変数）を導入すれば良い。
-
-```cpp
-// 条件変数による正しい同期処理
-bool notify = false;
-std::mutex mtx;
-std::condition_varialbe cv;
-```
-
-```cpp
-// 修正した通知処理
-{
-  std::lock_guard&amp;lt;std::mutex&amp;gt; lk(mtx);
-  // 共有データの更新
-  notify = true;
-  cv.notify_all();
-}
-```
-
-```cpp
-// 修正した待機処理
-{
-  std::unique_lock&amp;lt;std::mutex&amp;gt; lk(mtx);
-  cv.wait(lk, [&amp;amp;]{ return notify; });
-  // 共有データの参照利用
-}
-```
-
-
-## ミューテックスと複数の条件変数
-1つのミューテックスで保護される共有&amp;#34;ステート&amp;#34;変数に対して、複数個の条件変数オブジェクトを関連付ける事ができる。
-逆に1つの条件変数オブジェクトに対して、複数個のミューテックス（と共有&amp;#34;ステート&amp;#34;のグループ）を関連付ける事は出来ない。
-
-下記に、一般的なProducer-Consumerパターンで利用される境界付きキュー(bounded queue)の簡易実装例を示す。1つのミューテックス`guard_`にて`*this`オブジェクト自身を保護し、2つの条件変数オブジェクト`not_empty_`, `not_full_`を関連付ける。この`bounded_queue`クラスは、スレッド間同期を実現するモニタ(monitor)として機能する。
-
-```cpp
-#include &amp;lt;utility&amp;gt;
-#include &amp;lt;queue&amp;gt;
-#include &amp;lt;mutex&amp;gt;
-#include &amp;lt;condition_variable&amp;gt;
-
-template&amp;lt;typename T, size_t N&amp;gt;
-class bounded_queue {
-  std::queue&amp;lt;T&amp;gt; queue_;
-  std::mutex guard_;
-  std::condition_variable not_empty_;
-  std::condition_variable not_full_;
-public:
-  // 値の挿入
-  void push(T val) {
-    std::unique_lock&amp;lt;std::mutex&amp;gt; lk(guard_);
-    not_full_.wait(lk, [this]{
-      return queue_.size() &amp;lt; N;
-    });
-    queue_.push(std::move(val));
-    not_empty_.notify_all();
-  }
-  // 値の取り出し
-  T pop() {
-    std::unique_lock&amp;lt;std::mutex&amp;gt; lk(guard_);
-    not_empty_.wait(lk, [this]{
-      return !queue_.empty();
-    });
-    T ret = std::move(queue_.front());
-    queue_.pop();
-    not_full_.notify_all();
-    return ret;
-  }
-};
-```
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>_at_thread_exit系の関数が存在している理由 -- articleを整理し、カテゴリを分けた。(#243)</title>
      <link href="http://cpprefjp.github.io/article/lib/at_thread_exit.html"/>
      <id>89594e8b9e47e51c65541d97bd3d11852a7ed85a:article/lib/at_thread_exit.md</id>
      <updated>2015-01-05 13:56:19 +0900</updated>
      
        <content type="html">&lt;h1&gt;_at_thread_exit系の関数が存在している理由&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future.html&#34;&gt;&lt;code&gt;&amp;lt;future&amp;gt;&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable.html&#34;&gt;&lt;code&gt;&amp;lt;condition_variable&amp;gt;&lt;/code&gt;&lt;/a&gt; には、&lt;code&gt;*_at_thread_exit&lt;/code&gt; という名前の関数が定義されている。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/notify_all_at_thread_exit.html&#34;&gt;notify_all_at_thread_exit&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable.html&#34;&gt;condition_variable&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; cond, &lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock.html&#34;&gt;unique_lock&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;mutex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/promise.html&#34;&gt;promise&lt;/a&gt;&lt;/span&gt; {
  &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    ...
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/future/promise/set_value_at_thread_exit.html&#34;&gt;set_value_at_thread_exit&lt;/a&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; R&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; r);
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/promise/set_exception_at_thread_exit.html&#34;&gt;set_exception_at_thread_exit&lt;/a&gt;&lt;/span&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/exception_ptr.html&#34;&gt;exception_ptr&lt;/a&gt; p);
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;, class... ArgTypes&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/future/packaged_task.html&#34;&gt;packaged_task&lt;/a&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;R(ArgTypes...)&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
    ...
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/future/packaged_task/make_ready_at_thread_exit.html&#34;&gt;make_ready_at_thread_exit&lt;/a&gt;(ArgTypes... args);
  };
}
&lt;/pre&gt;&lt;/div&gt;

これらの関数は、スレッドローカル記憶域が破棄された後に通知を行なったり、状態を変更する。 &lt;/p&gt;
&lt;p&gt;また、&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread.html&#34;&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/a&gt;&lt;code&gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/detach.html&#34;&gt;&lt;code&gt;detach&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; されたスレッド上で、
スレッドローカル記憶域との同期を取る唯一の方法でもある。&lt;/p&gt;
&lt;p&gt;デタッチされたスレッドにおいて、スレッドローカル記憶域にあるオブジェクトがいつ破棄されるかという規定は無い。
そのため、未定義動作を含まずにこれらのオブジェクトを破棄するのは難しい。 &lt;/p&gt;
&lt;p&gt;例えば、以下のようなケースで問題になる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;future&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;result_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; spawn_task(F f) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;result_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type result_type;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;result_type ()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(f));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;result_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; future(task.get_future());
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; th(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(task));
  th.detach();
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; future;
}


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Hoge {
  &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;Hoge() { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hoge destructor&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;() {
  thread_local Hoge h;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; res(spawn_task(f));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; res.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;42Hoge destructor
&lt;/code&gt;&lt;/pre&gt;
&lt;code&gt;spawn_task&lt;/code&gt; は、渡された任意の処理を別スレッドで行なう一般的な関数である。関数内部でスレッドを作り、デタッチを行なっている。 &lt;/p&gt;
&lt;p&gt;出力は、&lt;code&gt;main()&lt;/code&gt; 関数での出力と、&lt;code&gt;Hoge&lt;/code&gt; デストラクタでの出力が混在している。これはスレッドローカル記憶域と &lt;code&gt;future&lt;/code&gt; オブジェクトが正しく同期されていないからである。そのため、これ以外の出力も起こり得る。&lt;/p&gt;
&lt;p&gt;これは &lt;code&gt;*_at_thread_exit&lt;/code&gt; 系の関数を利用することで修正できる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;future&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; task_executor
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;()( std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task )
  {
    task.&lt;span style=&#34;color:#ff0000&#34;&gt;make_ready_at_thread_exit&lt;/span&gt;(); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// operator() を呼び出す代わりに &lt;span style=&#34;color:#ff0000&#34;&gt;make_ready_at_thread_exit&lt;/span&gt;() を呼び出す。&lt;/span&gt;
  }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;result_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; spawn_task(F f) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;result_of&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;F()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type result_type;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;result_type ()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(f));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;result_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; future(task.get_future());
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; th(task_executor{}, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(task));
  th.detach();
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; future;
}


&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; Hoge {
  &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;Hoge() { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;Hoge destructor&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl; }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;() {
  thread_local Hoge h;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; res(spawn_task(f));
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; res.get() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;

出力:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;Hoge destructor
42
&lt;/code&gt;&lt;/pre&gt;
このプログラムの出力は、必ずこの通りになる。つまり、確実にスレッドローカル記憶域のオブジェクトが破棄された後に &lt;code&gt;res.get()&lt;/code&gt; の結果が出力される。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yohhoy/20120131/p1&#34; target=&#34;_blank&#34;&gt;futureとpromiseのあれこれ（理論編） - yohhoyの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3070.html&#34; target=&#34;_blank&#34;&gt;N3070 - Handling Detached Threads and thread_local Variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>標準ライブラリにおける、関数にnoexceptを付けない条件 -- articleを整理し、カテゴリを分けた。(#243)</title>
      <link href="http://cpprefjp.github.io/article/lib/dont_use_noexcept.html"/>
      <id>89594e8b9e47e51c65541d97bd3d11852a7ed85a:article/lib/dont_use_noexcept.md</id>
      <updated>2015-01-05 13:56:19 +0900</updated>
      
        <content type="html">&lt;h1&gt;標準ライブラリにおける、関数にnoexceptを付けない条件&lt;/h1&gt;
&lt;p&gt;C++11から、&lt;code&gt;throw&lt;/code&gt;キーワードを使用した関数の例外指示が非推奨になり、例外を投げないことを明示する&lt;code&gt;noexcept&lt;/code&gt;キーワードが追加された。&lt;/p&gt;
&lt;p&gt;標準ライブラリも&lt;code&gt;noexcept&lt;/code&gt;に対応しているが、仕様上、自然言語で「Throws: Nothing.(例外を投げない)」と書いてあって、&lt;code&gt;noexcept&lt;/code&gt;が付いていないものがいくつか存在する。&lt;/p&gt;
&lt;p&gt;たとえば、&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;&lt;code&gt;std::mutex&lt;/code&gt;&lt;/a&gt;クラスの&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex/unlock.html&#34;&gt;&lt;code&gt;unlock()&lt;/code&gt;&lt;/a&gt;メンバ関数には、&lt;code&gt;noexcept&lt;/code&gt;が付いていない。&lt;/p&gt;
&lt;p&gt;これについては、「&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3279.pdf&#34; target=&#34;_blank&#34;&gt;N3279 - Conservative use of noexcept in the library&lt;/a&gt;」のペーパーで論じられている。簡単に言えば、&lt;code&gt;noexcept&lt;/code&gt;を付けない条件は以下のようになる：&lt;/p&gt;
&lt;p&gt;関数に事前条件が設定されている場合(&lt;code&gt;unlock()&lt;/code&gt;の場合は、すでにアンロックされていないこと)、事前条件の不一致を報告するために、実装が例外を投げる場合がある。そういう関数に対しては、&lt;code&gt;noexcept&lt;/code&gt;は付いていない。&lt;/p&gt;
&lt;p&gt;例外があることを前提としていない、C言語の互換ライブラリには、&lt;code&gt;noexcept&lt;/code&gt;が付いている場合がある。たとえば、&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic/atomic_exchange.html&#34;&gt;&lt;code&gt;atomic_exchange()&lt;/code&gt;&lt;/a&gt;のような、&lt;a href=&#34;http://cpprefjp.github.io/reference/atomic.html&#34;&gt;アトミックライブラリ&lt;/a&gt;の関数などには、&lt;code&gt;noexcept&lt;/code&gt;が付いている。&lt;/p&gt;
&lt;h2&gt;参照元&lt;/h2&gt;
&lt;p&gt;この記事は、「&lt;a href=&#34;http://d.hatena.ne.jp/faith_and_brave/20130620/1371715296&#34; target=&#34;_blank&#34;&gt;標準ライブラリにおける、関数にnoexceptを付けない条件 - Faith and Brave - C++で遊ぼう&lt;/a&gt;」のブログエントリから転載し、修正を行っている。&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>条件変数の利用方法 -- articleを整理し、カテゴリを分けた。(#243)</title>
      <link href="http://cpprefjp.github.io/article/lib/how_to_use_cv.html"/>
      <id>89594e8b9e47e51c65541d97bd3d11852a7ed85a:article/lib/how_to_use_cv.md</id>
      <updated>2015-01-05 13:56:19 +0900</updated>
      
        <content type="html">&lt;h1&gt;条件変数の利用方法&lt;/h1&gt;
&lt;p&gt;標準ヘッダ&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable.html&#34;&gt;&lt;code&gt;&amp;lt;condition_variable&amp;gt;&lt;/code&gt;&lt;/a&gt;で提供される、条件変数(condition variable)の利用方法について説明する。&lt;/p&gt;
&lt;p&gt;簡単のため、条件変数&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable.html&#34;&gt;&lt;code&gt;condition_variable&lt;/code&gt;&lt;/a&gt;とロック&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock.html&#34;&gt;&lt;code&gt;unique_lock&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;&lt;code&gt;mutex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;の組に対してのみ説明を行う。
&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable_any.html&#34;&gt;&lt;code&gt;condition_variable_any&lt;/code&gt;&lt;/a&gt;クラスは、任意のロック型と組み合わせ可能なことを除き、その利用方法は&lt;code&gt;condition_variable&lt;/code&gt;と同じである。&lt;/p&gt;
&lt;h2&gt;利用の目的&lt;/h2&gt;
&lt;p&gt;条件変数オブジェクトのみを単体で利用するのではなく、必ずミューテックス（排他制御）オブジェクトと、同ミューテックスで保護されるデータ状態を表す変数群（以下、&#34;ステート&#34;と呼ぶ）という3つの組で利用すること。
条件変数オブジェクトとは、複数スレッドがこの共有&#34;ステート&#34;を更新／参照する場合に、&#34;ステート&#34;の更新を他スレッドに通知／&#34;ステート&#34;が指定条件を満たすまで待機する処理を、効率的に記述するための同期機構である。&lt;/p&gt;
&lt;p&gt;理論的には条件変数を利用しなくても、ミューテックス保護＋&#34;ステート&#34;参照をループする処理でも条件待機は実現できる。
ただし、このような実装（ポーリング方式）では参照側スレッドが常に動作し続けるため、一般的には計算機リソース浪費による実行効率の著しい低下をもたらす。
（対象処理系や特殊ユースケースでは、ポーリング方式の方が望ましい状況も否定しない。）&lt;/p&gt;
&lt;h2&gt;利用パターン&lt;/h2&gt;
&lt;p&gt;下記コードでは典型的な利用パターンを示す。なお、通知処理と待機処理は異なるスレッド上で並行実行されるものとする。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;condition_variable&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#34;ステート&#34;変数＋ミューテックスmtx＋条件変数cv&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; state;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 注: 変数型やその個数は目的による&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex mtx;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;condition_variable cv;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有&#34;ステート&#34;変数の更新と通知&lt;/span&gt;
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#34;ステート&#34;変数の更新処理&lt;/span&gt;
  cv.notify_all();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 指定条件を満たすまで待機&lt;/span&gt;
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx);
  cv.wait(lk, [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;]{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/* &#34;ステート&#34;変数を参照し、指定条件を満たす場合はtrueを返す */&lt;/span&gt;;
  });
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &#34;ステート&#34;変数を参照した処理&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

通知処理の実装では、通知関数として&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/notify_all.html&#34;&gt;&lt;code&gt;notify_all()&lt;/code&gt;&lt;/a&gt;を利用している。
通知関数としてはもう1種類&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/notify_one.html&#34;&gt;&lt;code&gt;notify_one()&lt;/code&gt;&lt;/a&gt;が提供されるが、&lt;code&gt;notify_one()&lt;/code&gt;で論理的に十分であると判断できないならば、まずは&lt;code&gt;notify_all()&lt;/code&gt;利用を推奨する。
（&lt;code&gt;notify_all()&lt;/code&gt;が待機中の全スレッドに通知を行うのに対し、&lt;code&gt;notify_one()&lt;/code&gt;は待機中の任意の1スレッドにのみ通知を行うため、後者は実行時オーバーヘッドの観点で有利である。
一方、待機処理における指定条件によっては、&lt;code&gt;notify_one()&lt;/code&gt;利用ではライブロック(live lock)に陥るケースも存在する。
なお、&lt;code&gt;nofity_all()&lt;/code&gt;の動作セマンティクスは&lt;code&gt;notify_one()&lt;/code&gt;を完全に包含するため、&lt;code&gt;notify_one()&lt;/code&gt;で正しく動作する並行処理は&lt;code&gt;notify_all()&lt;/code&gt;利用でも正しく動作する。）&lt;/p&gt;
&lt;p&gt;待機処理の実装では、第2引数に述語をとる&lt;a href=&#34;http://cpprefjp.github.io/reference/condition_variable/condition_variable/wait.html&#34;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt;を利用することで、条件変数のSpurious Wakeupと呼ばれる現象を考慮しなくとも正しい処理を記述できる。
&lt;code&gt;wait()&lt;/code&gt;メンバ関数はロック型のみを引数にとる1引数オーバーロードも提供するが、特殊なケースを除いて上記の2引数オーバーロード利用を推奨する。
待機関数によるブロッキング期間以外では、そのスレッド自身がロック&lt;code&gt;lk&lt;/code&gt;保持中であると保証されるため、述語処理（前掲実装ではラムダ式）や&lt;code&gt;wait()&lt;/code&gt;呼出より後に&#34;ステート&#34;変数へと安全にアクセスできる。&lt;/p&gt;
&lt;h2&gt;条件変数と状態&lt;/h2&gt;
&lt;p&gt;条件変数オブジェクトはスレッド間通知／待機機能を提供するだけであり、オブジェクトそれ自身は永続的な状態管理を行わない。
このため条件変数オブジェクトに対する通知関数&lt;code&gt;notify_one()&lt;/code&gt;/&lt;code&gt;notify_all()&lt;/code&gt;は、その通知時点で同オブジェクトの待機関数&lt;code&gt;wait()&lt;/code&gt;/&lt;code&gt;wait_for()&lt;/code&gt;/&lt;code&gt;wait_until()&lt;/code&gt;にてブロックされているスレッド群にしか影響しない。&lt;/p&gt;
&lt;p&gt;この条件変数オブジェクトの動作は、概念的には「待機／実行可能スレッドのキュー」と解釈する事ができる。
待機関数&lt;code&gt;wait()&lt;/code&gt;系は呼出スレッドをブロック状態へ遷移してから待機キューに追加する動作、通知関数&lt;code&gt;notify_one()&lt;/code&gt;は待機キューからいずれか1つ／&lt;code&gt;notify_all()&lt;/code&gt;は待機キュー内の全スレッドを実行可能キューへ移動させる動作に相当する。
待機関数&lt;code&gt;wait()&lt;/code&gt;でブロック中のスレッドは、自スレッドを実行可能キュー内でみつけたら、実行状態へ遷移したのち待機関数の呼出元に制御を戻す。&lt;/p&gt;
&lt;p&gt;下記コードでは条件変数を誤用した例を示す。なお、通知処理と待機処理は異なるスレッド上で並行実行されるものとする。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 条件変数を誤用した同期処理&lt;/span&gt;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex mtx;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;condition_varialbe cv;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 誤った通知処理&lt;/span&gt;
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有データの更新&lt;/span&gt;
  cv.notify_all();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 誤った待機処理&lt;/span&gt;
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx);
  cv.wait(lk);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有データの参照利用&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

上記の誤用例では、プログラマの意図と反するであろう次の実行結果が生じる。
このプログラムでは非決定的な動作となるため、偶然に期待通り動作したかのように見えるケースもある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通知関数の呼び出し後に待機関数が呼び出された場合、待機処理スレッドはブロッキングされる。（ライブロック状態）&lt;/li&gt;
&lt;li&gt;待機関数が先に呼び出された場合、待機処理スレッドはブロッキングされる。その後、通知処理スレッドによる通知関数の呼び出しよりも前に、待機処理スレッドのブロックが解除されて待機関数から制御が戻ってくる可能性がある。（Suprious Wakeupの未考慮）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この不具合を修正するには、過去に通知が行われた事実を永続化する変数（&#34;ステート&#34;変数）を導入すれば良い。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 条件変数による正しい同期処理&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; notify &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex mtx;
std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;condition_varialbe cv;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 修正した通知処理&lt;/span&gt;
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx);
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有データの更新&lt;/span&gt;
  notify &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;;
  cv.notify_all();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 修正した待機処理&lt;/span&gt;
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx);
  cv.wait(lk, [&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;]{ &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; notify; });
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有データの参照利用&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;ミューテックスと複数の条件変数&lt;/h2&gt;
&lt;p&gt;1つのミューテックスで保護される共有&#34;ステート&#34;変数に対して、複数個の条件変数オブジェクトを関連付ける事ができる。
逆に1つの条件変数オブジェクトに対して、複数個のミューテックス（と共有&#34;ステート&#34;のグループ）を関連付ける事は出来ない。&lt;/p&gt;
&lt;p&gt;下記に、一般的なProducer-Consumerパターンで利用される境界付きキュー(bounded queue)の簡易実装例を示す。1つのミューテックス&lt;code&gt;guard_&lt;/code&gt;にて&lt;code&gt;*this&lt;/code&gt;オブジェクト自身を保護し、2つの条件変数オブジェクト&lt;code&gt;not_empty_&lt;/code&gt;, &lt;code&gt;not_full_&lt;/code&gt;を関連付ける。この&lt;code&gt;bounded_queue&lt;/code&gt;クラスは、スレッド間同期を実現するモニタ(monitor)として機能する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;utility&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;queue&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;condition_variable&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T, &lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; N&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;bounded_queue&lt;/span&gt; {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;queue&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; queue_;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex guard_;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;condition_variable not_empty_;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;condition_variable not_full_;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 値の挿入&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;push&lt;/span&gt;(T val) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(guard_);
    not_full_.wait(lk, [&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;]{
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; queue_.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; N;
    });
    queue_.push(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(val));
    not_empty_.notify_all();
  }
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 値の取り出し&lt;/span&gt;
  T &lt;span style=&#34;color: #0000FF&#34;&gt;pop&lt;/span&gt;() {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(guard_);
    not_empty_.wait(lk, [&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;]{
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;queue_.empty();
    });
    T ret &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(queue_.front());
    queue_.pop();
    not_full_.notify_all();
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; ret;
  }
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>msvc-locales.md -- articleを整理し、カテゴリを分けた。(#243)</title>
      <link href="http://cpprefjp.github.io/article/msvc-locales.html"/>
      <id>89594e8b9e47e51c65541d97bd3d11852a7ed85a:article/msvc-locales.md</id>
      <updated>2015-01-05 13:56:19 +0900</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/article/msvc-locales.md b/article/msvc-locales.md
deleted file mode 100644
index f89fb22..0000000
--- a/article/msvc-locales.md
+++ /dev/null
@@ -1,201 +0,0 @@
-#Microsoft Visual C++で使用できるロケール文字列
-この記事では、Microsoft Visual C++で使用できるロケール文字列の一覧をまとめる。ここでいうロケール文字列とは、`setlocale()`関数、`_wsetlocale()`関数、`std::locale`コンストラクタで指定する文字列である。 
-
-MSDNライブラリの[setlocale、_wsetlocale](http://msdn.microsoft.com/ja-jp/library/x99tb11d%28v=vs.100%29.aspx)では、以下の形式の文字列が指定できると記述されている。`[]`で囲っている部分は省略可能であることを意味する。
-
-- `&amp;#34;lang[_country_region[.code_page]]&amp;#34;`
-- `&amp;#34;.code_page&amp;#34;`
-- `&amp;#34;&amp;#34;`
-- `NULL`
-
-`lang`（言語）、`contory_region`（地域）、`code_page`（コードページ）の3要素として指定できる項目を明確にすることが本記事の目的である。
-
-（以下、制作中につき、構成が変化する可能性があります）
-
-
-##Windows 8 / Visual C++ 2012 Update 1 無印
-
-| 3文字表記（言語`_`地域） | 長い表記（言語`_`地域）                      |
-|--------------------------|----------------------------------------------|
-| `AFK_ZAF`                | `Afrikaans_South Africa`                     |
-| `AMH_ETH`                | `Amharic_Ethiopia`                           |
-| `ARA_SAU`                | `Arabic_Saudi Arabia`                        |
-| `ASM_IND`                | `Assamese_India`                             |
-| `AZC_AZE`                | `Azerbaijani (Cyrillic)_Azerbaijan`          |
-| `AZE_AZE`                | `Azerbaijani_Azerbaijan`                     |
-| `AZE_AZE`                | `Azerbaijani (Latin)_Azerbaijan`             |
-| `BAS_RUS`                | `Bashkir_Russia`                             |
-| `BEL_BLR`                | `Belarusian_Belarus`                         |
-| `BGR_BGR`                | `Bulgarian_Bulgaria`                         |
-| `BNG_IND`                | `Bangla_India`                               |
-| `BOB_CHN`                | `Tibetan_China`                              |
-| `BRE_FRA`                | `Breton_France`                              |
-| `BSB_BIH`                | `Bosnian (Latin)_Bosnia and Herzegovina`     |
-| `BSB_BIH`                | `Bosnian_Bosnia and Herzegovina`             |
-| `BSC_BIH`                | `Bosnian (Cyrillic)_Bosnia and Herzegovina`  |
-| `CAT_ESP`                | `Catalan_Spain`                              |
-| `CHS_CHN`                | `Chinese (Simplified)_China`                 |
-| `CHS_CHN`                | `Chinese_China`                              |
-| `CHT_HKG`                | `Chinese (Traditional)_Hong Kong SAR`        |
-| `COS_FRA`                | `Corsican_France`                            |
-| `CRE_USA`                | `Cherokee_United States`                     |
-| `CRE_USA`                | `Cherokee_United States`                     |
-| `CSY_CZE`                | `Czech_Czech Republic`                       |
-| `CYM_GBR`                | `Welsh_United Kingdom`                       |
-| `DAN_DNK`                | `Danish_Denmark`                             |
-| `DEU_DEU`                | `German_Germany`                             |
-| `DIV_MDV`                | `Divehi_Maldives`                            |
-| `DSB_GER`                | `Lower Sorbian_Germany`                      |
-| `ELL_GRC`                | `Greek_Greece`                               |
-| `ENU_USA`                | `English_United States`                      |
-| `ESP_ESP`                | `Spanish_Spain`                              |
-| `ETI_EST`                | `Estonian_Estonia`                           |
-| `EUQ_ESP`                | `Basque_Spain`                               |
-| `FAR_IRN`                | `Persian_Iran`                               |
-| `FIN_FIN`                | `Finnish_Finland`                            |
-| `FOS_FRO`                | `Faroese_Faroe Islands`                      |
-| `FPO_PHL`                | `Filipino_Philippines`                       |
-| `FRA_FRA`                | `French_France`                              |
-| `FUL_SEN`                | `Fulah_Senegal`                              |
-| `FUL_SEN`                | `Fulah_Senegal`                              |
-| `FYN_NLD`                | `Frisian_Netherlands`                        |
-| `GLA_GBR`                | `Scottish Gaelic_United Kingdom`             |
-| `GLC_ESP`                | `Galician_Spain`                             |
-| `GSW_FRA`                | `Alsatian_France`                            |
-| `GUJ_IND`                | `Gujarati_India`                             |
-| `HAU_NGA`                | `Hausa_Nigeria`                              |
-| `HAU_NGA`                | `Hausa (Latin)_Nigeria`                      |
-| `HAW_USA`                | `Hawaiian_United States`                     |
-| `HEB_ISR`                | `Hebrew_Israel`                              |
-| `HIN_IND`                | `Hindi_India`                                |
-| `HRV_HRV`                | `Croatian_Croatia`                           |
-| `HSB_GER`                | `Upper Sorbian_Germany`                      |
-| `HUN_HUN`                | `Hungarian_Hungary`                          |
-| `HYE_ARM`                | `Armenian_Armenia`                           |
-| `IBO_NGA`                | `Igbo_Nigeria`                               |
-| `III_CHN`                | `Yi_China`                                   |
-| `IND_IDN`                | `Indonesian_Indonesia`                       |
-| `IRE_IRL`                | `Irish_Ireland`                              |
-| `ISL_ISL`                | `Icelandic_Iceland`                          |
-| `ITA_ITA`                | `Italian_Italy`                              |
-| `IUK_CAN`                | `Inuktitut_Canada`                           |
-| `IUK_CAN`                | `Inuktitut (Latin)_Canada`                   |
-| `IUS_CAN`                | `Inuktitut (Syllabics)_Canada`               |
-| `IVL_IVC`                | `Invariant Language_Invariant Country`       |
-| `JPN_JPN`                | `Japanese_Japan`                             |
-| `KAL_GRL`                | `Greenlandic_Greenland`                      |
-| `KAT_GEO`                | `Georgian_Georgia`                           |
-| `KDI_IND`                | `Kannada_India`                              |
-| `KHM_KHM`                | `Khmer_Cambodia`                             |
-| `KIN_RWA`                | `Kinyarwanda_Rwanda`                         |
-| `KKZ_KAZ`                | `Kazakh_Kazakhstan`                          |
-| `KNK_IND`                | `Konkani_India`                              |
-| `KOR_KOR`                | `Korean_Korea`                               |
-| `KUR_IRQ`                | `Central Kurdish_Iraq`                       |
-| `KUR_IRQ`                | `Central Kurdish_Iraq`                       |
-| `KYR_KGZ`                | `Kyrgyz_Kyrgyzstan`                          |
-| `LAO_LAO`                | `Lao_Lao PDR`                                |
-| `LBX_LUX`                | `Luxembourgish_Luxembourg`                   |
-| `LTH_LTU`                | `Lithuanian_Lithuania`                       |
-| `LVI_LVA`                | `Latvian_Latvia`                             |
-| `MAR_IND`                | `Marathi_India`                              |
-| `MKI_MKD`                | `Macedonian (Former Yugoslav Republic of Macedonia)_Macedonia (Former Yugoslav Republic of Macedonia)` |
-| `MLT_MLT`                | `Maltese_Malta`                              |
-| `MNG_CHN`                | `Mongolian (Traditional Mongolian)_China`    |
-| `MNN_MNG`                | `Mongolian (Cyrillic)_Mongolia`              |
-| `MON_MNG`                | `Mongolian_Mongolia`                         |
-| `MPD_CHL`                | `Mapudungun_Chile`                           |
-| `MRI_NZL`                | `Maori_New Zealand`                          |
-| `MSL_MYS`                | `Malay_Malaysia`                             |
-| `MWK_CAN`                | `Mohawk_Canada`                              |
-| `MYM_IND`                | `Malayalam_India`                            |
-| `NEP_NEP`                | `Nepali_Nepal`                               |
-| `NLD_NLD`                | `Dutch_Netherlands`                          |
-| `NON_NOR`                | `Norwegian (Nynorsk)_Norway`                 |
-| `NOR_NOR`                | `Norwegian_Norway`                           |
-| `NOR_NOR`                | `Norwegian (Bokmal)_Norway`                  |
-| `NSO_ZAF`                | `Sesotho sa Leboa_South Africa`              |
-| `OCI_FRA`                | `Occitan_France`                             |
-| `ORI_IND`                | `Odia_India`                                 |
-| `PAN_IND`                | `Punjabi_India`                              |
-| `PAN_PAK`                | `Punjabi_Pakistan`                           |
-| `PAS_AFG`                | `Pashto_Afghanistan`                         |
-| `PLK_POL`                | `Polish_Poland`                              |
-| `PRS_AFG`                | `Dari_Afghanistan`                           |
-| `PTB_BRA`                | `Portuguese_Brazil`                          |
-| `QUB_BOL`                | `Quechua_Bolivia`                            |
-| `QUT_GTM`                | `K&amp;#39;iche&amp;#39;_Guatemala`                          |
-| `RMC_CHE`                | `Romansh_Switzerland`                        |
-| `ROM_ROM`                | `Romanian_Romania`                           |
-| `RUS_RUS`                | `Russian_Russia`                             |
-| `SAH_RUS`                | `Sakha_Russia`                               |
-| `SAN_IND`                | `Sanskrit_India`                             |
-| `SIN_LKA`                | `Sinhala_Sri Lanka`                          |
-| `SIN_PAK`                | `Sindhi_Pakistan`                            |
-| `SKY_SVK`                | `Slovak_Slovakia`                            |
-| `SLV_SVN`                | `Slovenian_Slovenia`                         |
-| `SMB_SWE`                | `Sami (Southern)_Sweden`                     |
-| `SME_NOR`                | `Sami (Northern)_Norway`                     |
-| `SMK_SWE`                | `Sami (Lule)_Sweden`                         |
-| `SMN_FIN`                | `Sami (Inari)_Finland`                       |
-| `SMS_FIN`                | `Sami (Skolt)_Finland`                       |
-| `SQI_ALB`                | `Albanian_Albania`                           |
-| `SRB_SRB`                | `Serbian_Serbia`                             |
-| `SRM_SRB`                | `Serbian (Latin)_Serbia`                     |
-| `SRO_SRB`                | `Serbian (Cyrillic)_Serbia`                  |
-| `SVE_SWE`                | `Swedish_Sweden`                             |
-| `SWK_KEN`                | `Kiswahili_Kenya`                            |
-| `SYR_SYR`                | `Syriac_Syria`                               |
-| `TAJ_TAJ`                | `Tajik_Tajikistan`                           |
-| `TAJ_TAJ`                | `Tajik (Cyrillic)_Tajikistan`                |
-| `TAM_IND`                | `Tamil_India`                                |
-| `TEL_IND`                | `Telugu_India`                               |
-| `THA_THA`                | `Thai_Thailand`                              |
-| `TIR_ERI`                | `Tigrinya_Eritrea`                           |
-| `TRK_TUR`                | `Turkish_Turkey`                             |
-| `TSN_ZAF`                | `Setswana_South Africa`                      |
-| `TTT_RUS`                | `Tatar_Russia`                               |
-| `TUK_TKM`                | `Turkmen_Turkmenistan`                       |
-| `TZM_DZA`                | `Tamazight_Algeria`                          |
-| `TZM_DZA`                | `Central Atlas Tamazight (Latin)_Algeria`    |
-| `TZM_MAR`                | `Central Atlas Tamazight (Tifinagh)_Morocco` |
-| `UIG_CHN`                | `Uyghur_China`                               |
-| `UKR_UKR`                | `Ukrainian_Ukraine`                          |
-| `URD_PAK`                | `Urdu_Pakistan`                              |
-| `UZB_UZB`                | `Uzbek_Uzbekistan`                           |
-| `UZB_UZB`                | `Uzbek (Cyrillic)_Uzbekistan`                |
-| `UZB_UZB`                | `Uzbek (Latin)_Uzbekistan`                   |
-| `VIT_VNM`                | `Vietnamese_Vietnam`                         |
-| `WOL_SEN`                | `Wolof_Senegal`                              |
-| `XHO_ZAF`                | `isiXhosa_South Africa`                      |
-| `YOR_NGA`                | `Yoruba_Nigeria`                             |
-| `ZUL_ZAF`                | `isiZulu_South Africa`                       |
-
-使用したプログラム
-
-```cpp
-#include &amp;lt;array&amp;gt;
-#include &amp;lt;codecvt&amp;gt;
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;windows.h&amp;gt;
-
-int main()
-{
-  std::locale utf8(std::locale::classic(), new std::codecvt_utf8_utf16&amp;lt;WCHAR, 0x10ffff, std::codecvt_mode::generate_header&amp;gt;());
-  std::wcout.imbue(utf8);
-    ::EnumSystemLocalesEx([](LPWSTR localeName, DWORD /*flags*/, LPARAM lParam) {
-        std::array&amp;lt;WCHAR, 4&amp;gt; language;
-        ::GetLocaleInfoEx(localeName, LOCALE_SABBREVLANGNAME, language.data(), language.size());
-        std::array&amp;lt;WCHAR, 4&amp;gt; country;
-        ::GetLocaleInfoEx(localeName, LOCALE_SABBREVCTRYNAME, country.data(), country.size());
-        std::array&amp;lt;WCHAR, 64&amp;gt; languageFull;
-        ::GetLocaleInfoEx(localeName, LOCALE_SENGLISHLANGUAGENAME, languageFull.data(), languageFull.size());
-        std::array&amp;lt;WCHAR, 64&amp;gt; countryFull;
-        ::GetLocaleInfoEx(localeName, LOCALE_SENGLISHCOUNTRYNAME, countryFull.data(), countryFull.size());
-
-        std::wcout &amp;lt;&amp;lt; language.data() &amp;lt;&amp;lt; L&amp;#39;_&amp;#39; &amp;lt;&amp;lt; country.data() &amp;lt;&amp;lt; L&amp;#39;\t&amp;#39; &amp;lt;&amp;lt; languageFull.data() &amp;lt;&amp;lt; L&amp;#39;_&amp;#39; &amp;lt;&amp;lt; countryFull.data() &amp;lt;&amp;lt; std::endl;
-        return TRUE;
-    }, LOCALE_NEUTRALDATA, 0, nullptr);
-}
-```
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Microsoft Visual C++で使用できるロケール文字列 -- articleを整理し、カテゴリを分けた。(#243)</title>
      <link href="http://cpprefjp.github.io/article/platform/locales.html"/>
      <id>89594e8b9e47e51c65541d97bd3d11852a7ed85a:article/platform/locales.md</id>
      <updated>2015-01-05 13:56:19 +0900</updated>
      
        <content type="html">&lt;h1&gt;Microsoft Visual C++で使用できるロケール文字列&lt;/h1&gt;
&lt;p&gt;この記事では、Microsoft Visual C++で使用できるロケール文字列の一覧をまとめる。ここでいうロケール文字列とは、&lt;code&gt;setlocale()&lt;/code&gt;関数、&lt;code&gt;_wsetlocale()&lt;/code&gt;関数、&lt;code&gt;std::locale&lt;/code&gt;コンストラクタで指定する文字列である。 &lt;/p&gt;
&lt;p&gt;MSDNライブラリの&lt;a href=&#34;http://msdn.microsoft.com/ja-jp/library/x99tb11d%28v=vs.100%29.aspx&#34; target=&#34;_blank&#34;&gt;setlocale、_wsetlocale&lt;/a&gt;では、以下の形式の文字列が指定できると記述されている。&lt;code&gt;[]&lt;/code&gt;で囲っている部分は省略可能であることを意味する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#34;lang[_country_region[.code_page]]&#34;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#34;.code_page&#34;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;lang&lt;/code&gt;（言語）、&lt;code&gt;contory_region&lt;/code&gt;（地域）、&lt;code&gt;code_page&lt;/code&gt;（コードページ）の3要素として指定できる項目を明確にすることが本記事の目的である。&lt;/p&gt;
&lt;p&gt;（以下、制作中につき、構成が変化する可能性があります）&lt;/p&gt;
&lt;h2&gt;Windows 8 / Visual C++ 2012 Update 1 無印&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;3文字表記（言語&lt;code&gt;_&lt;/code&gt;地域）&lt;/th&gt;
&lt;th&gt;長い表記（言語&lt;code&gt;_&lt;/code&gt;地域）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;AFK_ZAF&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Afrikaans_South Africa&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;AMH_ETH&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Amharic_Ethiopia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ARA_SAU&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Arabic_Saudi Arabia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ASM_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Assamese_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;AZC_AZE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Azerbaijani (Cyrillic)_Azerbaijan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;AZE_AZE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Azerbaijani_Azerbaijan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;AZE_AZE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Azerbaijani (Latin)_Azerbaijan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BAS_RUS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Bashkir_Russia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BEL_BLR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Belarusian_Belarus&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BGR_BGR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Bulgarian_Bulgaria&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BNG_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Bangla_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BOB_CHN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tibetan_China&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BRE_FRA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Breton_France&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BSB_BIH&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Bosnian (Latin)_Bosnia and Herzegovina&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BSB_BIH&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Bosnian_Bosnia and Herzegovina&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BSC_BIH&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Bosnian (Cyrillic)_Bosnia and Herzegovina&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CAT_ESP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Catalan_Spain&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CHS_CHN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Chinese (Simplified)_China&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CHS_CHN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Chinese_China&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CHT_HKG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Chinese (Traditional)_Hong Kong SAR&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;COS_FRA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Corsican_France&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CRE_USA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Cherokee_United States&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CRE_USA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Cherokee_United States&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CSY_CZE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Czech_Czech Republic&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CYM_GBR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Welsh_United Kingdom&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DAN_DNK&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Danish_Denmark&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DEU_DEU&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;German_Germany&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DIV_MDV&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Divehi_Maldives&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DSB_GER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Lower Sorbian_Germany&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ELL_GRC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Greek_Greece&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ENU_USA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;English_United States&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ESP_ESP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Spanish_Spain&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ETI_EST&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Estonian_Estonia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EUQ_ESP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Basque_Spain&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FAR_IRN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Persian_Iran&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FIN_FIN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Finnish_Finland&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FOS_FRO&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Faroese_Faroe Islands&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FPO_PHL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Filipino_Philippines&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FRA_FRA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;French_France&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FUL_SEN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Fulah_Senegal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FUL_SEN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Fulah_Senegal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FYN_NLD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Frisian_Netherlands&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GLA_GBR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Scottish Gaelic_United Kingdom&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GLC_ESP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Galician_Spain&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GSW_FRA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Alsatian_France&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GUJ_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Gujarati_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HAU_NGA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hausa_Nigeria&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HAU_NGA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hausa (Latin)_Nigeria&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HAW_USA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hawaiian_United States&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HEB_ISR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hebrew_Israel&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HIN_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hindi_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HRV_HRV&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Croatian_Croatia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HSB_GER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Upper Sorbian_Germany&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HUN_HUN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hungarian_Hungary&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;HYE_ARM&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Armenian_Armenia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IBO_NGA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Igbo_Nigeria&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;III_CHN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Yi_China&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IND_IDN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Indonesian_Indonesia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IRE_IRL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Irish_Ireland&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ISL_ISL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Icelandic_Iceland&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ITA_ITA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Italian_Italy&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IUK_CAN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Inuktitut_Canada&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IUK_CAN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Inuktitut (Latin)_Canada&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IUS_CAN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Inuktitut (Syllabics)_Canada&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IVL_IVC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Invariant Language_Invariant Country&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;JPN_JPN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Japanese_Japan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KAL_GRL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Greenlandic_Greenland&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KAT_GEO&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Georgian_Georgia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KDI_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Kannada_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KHM_KHM&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Khmer_Cambodia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KIN_RWA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Kinyarwanda_Rwanda&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KKZ_KAZ&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Kazakh_Kazakhstan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KNK_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Konkani_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KOR_KOR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Korean_Korea&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KUR_IRQ&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Central Kurdish_Iraq&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KUR_IRQ&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Central Kurdish_Iraq&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KYR_KGZ&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Kyrgyz_Kyrgyzstan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LAO_LAO&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Lao_Lao PDR&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LBX_LUX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Luxembourgish_Luxembourg&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LTH_LTU&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Lithuanian_Lithuania&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LVI_LVA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Latvian_Latvia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MAR_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Marathi_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MKI_MKD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Macedonian (Former Yugoslav Republic of Macedonia)_Macedonia (Former Yugoslav Republic of Macedonia)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MLT_MLT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Maltese_Malta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MNG_CHN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mongolian (Traditional Mongolian)_China&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MNN_MNG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mongolian (Cyrillic)_Mongolia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MON_MNG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mongolian_Mongolia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MPD_CHL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mapudungun_Chile&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MRI_NZL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Maori_New Zealand&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MSL_MYS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Malay_Malaysia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MWK_CAN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mohawk_Canada&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MYM_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Malayalam_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NEP_NEP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Nepali_Nepal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NLD_NLD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Dutch_Netherlands&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NON_NOR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Norwegian (Nynorsk)_Norway&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NOR_NOR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Norwegian_Norway&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NOR_NOR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Norwegian (Bokmal)_Norway&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NSO_ZAF&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sesotho sa Leboa_South Africa&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;OCI_FRA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Occitan_France&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ORI_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Odia_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PAN_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Punjabi_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PAN_PAK&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Punjabi_Pakistan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PAS_AFG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Pashto_Afghanistan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PLK_POL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Polish_Poland&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PRS_AFG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Dari_Afghanistan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PTB_BRA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Portuguese_Brazil&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;QUB_BOL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Quechua_Bolivia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;QUT_GTM&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;K&#39;iche&#39;_Guatemala&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RMC_CHE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Romansh_Switzerland&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ROM_ROM&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Romanian_Romania&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RUS_RUS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Russian_Russia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SAH_RUS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sakha_Russia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SAN_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sanskrit_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SIN_LKA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sinhala_Sri Lanka&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SIN_PAK&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sindhi_Pakistan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SKY_SVK&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Slovak_Slovakia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SLV_SVN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Slovenian_Slovenia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SMB_SWE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sami (Southern)_Sweden&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SME_NOR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sami (Northern)_Norway&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SMK_SWE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sami (Lule)_Sweden&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SMN_FIN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sami (Inari)_Finland&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SMS_FIN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sami (Skolt)_Finland&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SQI_ALB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Albanian_Albania&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SRB_SRB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Serbian_Serbia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SRM_SRB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Serbian (Latin)_Serbia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SRO_SRB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Serbian (Cyrillic)_Serbia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SVE_SWE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Swedish_Sweden&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SWK_KEN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Kiswahili_Kenya&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SYR_SYR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Syriac_Syria&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TAJ_TAJ&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tajik_Tajikistan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TAJ_TAJ&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tajik (Cyrillic)_Tajikistan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TAM_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tamil_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TEL_IND&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Telugu_India&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;THA_THA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Thai_Thailand&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TIR_ERI&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tigrinya_Eritrea&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TRK_TUR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Turkish_Turkey&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TSN_ZAF&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Setswana_South Africa&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TTT_RUS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tatar_Russia&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TUK_TKM&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Turkmen_Turkmenistan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TZM_DZA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tamazight_Algeria&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TZM_DZA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Central Atlas Tamazight (Latin)_Algeria&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TZM_MAR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Central Atlas Tamazight (Tifinagh)_Morocco&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UIG_CHN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Uyghur_China&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UKR_UKR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ukrainian_Ukraine&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;URD_PAK&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Urdu_Pakistan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UZB_UZB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Uzbek_Uzbekistan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UZB_UZB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Uzbek (Cyrillic)_Uzbekistan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UZB_UZB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Uzbek (Latin)_Uzbekistan&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;VIT_VNM&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Vietnamese_Vietnam&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WOL_SEN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Wolof_Senegal&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;XHO_ZAF&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;isiXhosa_South Africa&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;YOR_NGA&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Yoruba_Nigeria&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZUL_ZAF&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;isiZulu_South Africa&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用したプログラム&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;array&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;codecvt&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;windows.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;locale utf8(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;locale&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;classic(), &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;codecvt_utf8_utf16&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;WCHAR, &lt;span style=&#34;color: #666666&#34;&gt;0x10ffff&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;codecvt_mode&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generate_header&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;());
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wcout.imbue(utf8);
    &lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;EnumSystemLocalesEx([](LPWSTR localeName, DWORD &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/*flags*/&lt;/span&gt;, LPARAM lParam) {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;WCHAR, &lt;span style=&#34;color: #666666&#34;&gt;4&amp;gt;&lt;/span&gt; language;
        &lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;GetLocaleInfoEx(localeName, LOCALE_SABBREVLANGNAME, language.data(), language.size());
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;WCHAR, &lt;span style=&#34;color: #666666&#34;&gt;4&amp;gt;&lt;/span&gt; country;
        &lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;GetLocaleInfoEx(localeName, LOCALE_SABBREVCTRYNAME, country.data(), country.size());
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;WCHAR, &lt;span style=&#34;color: #666666&#34;&gt;64&amp;gt;&lt;/span&gt; languageFull;
        &lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;GetLocaleInfoEx(localeName, LOCALE_SENGLISHLANGUAGENAME, languageFull.data(), languageFull.size());
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;WCHAR, &lt;span style=&#34;color: #666666&#34;&gt;64&amp;gt;&lt;/span&gt; countryFull;
        &lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;GetLocaleInfoEx(localeName, LOCALE_SENGLISHCOUNTRYNAME, countryFull.data(), countryFull.size());

        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wcout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; language.data() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#39;_&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; country.data() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#39;\t&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; languageFull.data() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#39;_&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; countryFull.data() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; TRUE;
    }, LOCALE_NEUTRALDATA, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, nullptr);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend (C++11) -- match_results: cend を追加(#228)</title>
      <link href="http://cpprefjp.github.io/reference/regex/match_results/cend.html"/>
      <id>1214fedaccc62d2e520075d29cb52db7f075fd16:reference/regex/match_results/cend.md</id>
      <updated>2015-01-05 09:51:15 +0900</updated>
      
        <content type="html">&lt;h1&gt;cend (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;const_iterator cend() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt; 内の全てのサブマッチを列挙するため、最後のサブマッチの次を指すイテレータを返す。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;最後のサブマッチの次を指すイテレータ&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本メンバ関数で返されるイテレータは、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; で返されるイテレータと型も含め完全に同一である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; abc 0123 defgh &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+) (&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+) (&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+)&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;cmatch&lt;/a&gt; m;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, m, re)) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.begin(), end &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.end(); it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/str.html&#34;&gt;str&lt;/a&gt;() = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/str.html&#34;&gt;str&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, &#34;&lt;/span&gt;
        &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;range = [&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;), &#34;&lt;/span&gt;
        &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;matched = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;matched &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;str() = &#39;abc 0123 defgh&#39;, range = [1, 15), matched = true
str() = &#39;abc&#39;, range = [1, 4), matched = true
str() = &#39;0123&#39;, range = [5, 9), matched = true
str() = &#39;defgh&#39;, range = [10, 15), matched = true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end (C++11) -- match_results: end を追加(#228)</title>
      <link href="http://cpprefjp.github.io/reference/regex/match_results/end.html"/>
      <id>51bd48554cfa16dd68041dea8ee771e836828c8d:reference/regex/match_results/end.md</id>
      <updated>2015-01-05 09:50:46 +0900</updated>
      
        <content type="html">&lt;h1&gt;end (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;const_iterator end() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt; 内の全てのサブマッチを列挙するため、最後のサブマッチの次を指すイテレータを返す。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;最後のサブマッチの次を指すイテレータ&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本メンバ関数で返されるイテレータも、読み取り専用イテレータ（&lt;code&gt;const_iterator&lt;/code&gt;）である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; s[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; abc 0123 defgh &#34;&lt;/span&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex.html&#34;&gt;regex&lt;/a&gt; re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+) (&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+) (&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;w+)&#34;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;cmatch&lt;/a&gt; m;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;regex_search&lt;/a&gt;(s, m, re)) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/begin.html&#34;&gt;begin&lt;/a&gt;(), &lt;span style=&#34;color:#ff0000&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;end&lt;/span&gt;(); it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;end&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/str.html&#34;&gt;str&lt;/a&gt;() = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/str.html&#34;&gt;str&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;, &#34;&lt;/span&gt;
        &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;range = [&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;), &#34;&lt;/span&gt;
        &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;matched = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;boolalpha &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;matched &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;not match&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;str() = &#39;abc 0123 defgh&#39;, range = [1, 15), matched = true
str() = &#39;abc&#39;, range = [1, 4), matched = true
str() = &#39;0123&#39;, range = [5, 9), matched = true
str() = &#39;defgh&#39;, range = [10, 15), matched = true
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
</feed>
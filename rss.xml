<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-07-24T08:53:51.667614</updated>
  <id>4314e202-c64c-4832-b715-613c90d789da</id>

  
    <entry>
      <title>コンパイラの実装状況 -- Merge pull request #788 from h-sao/msvc-update16.6</title>
      <link href="https://cpprefjp.github.io/implementation-status.html"/>
      <id>9b198a27ca7ddfdbcb0848363bec5c870b507699:implementation-status.md</id>
      <updated>2020-07-24T17:49:50+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;コンパイラの実装状況&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;このページでは、C++のバージョンごとの言語機能を、どのコンパイラがどのバージョンからサポートしているかをまとめる。&lt;/p&gt;
&lt;p&gt;ライブラリ機能については、本サイトのリファレンスで各機能を参照してもらいたい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp11&#34;&gt;C++11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp14&#34;&gt;C++14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp17&#34;&gt;C++17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp20&#34;&gt;C++20&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp11&#34; id=&#34;cpp11&#34;&gt;C++11言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alignas.html&#34;&gt;alignas&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;2003あるいはそれ以前からある&lt;code&gt;__declspec(align(x))&lt;/code&gt;構文で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alignof.html&#34;&gt;alignof&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント取得&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;2003あるいはそれ以前よりある&lt;code&gt;__alignof&lt;/code&gt;で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/auto.html&#34;&gt;auto&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型推論&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の型を取得&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;2010 (partial)&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C99互換のプリプロセッサ&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/variadic_macros.html&#34;&gt;可変引数マクロ&lt;/a&gt;、&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/pragma_operator.html&#34;&gt;Pragma演算子&lt;/a&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/func.html&#34;&gt;__func__&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2005 (partial): 可変引数のみ &lt;code&gt;_Pragma&lt;/code&gt;の代わりに&lt;code&gt;__pragma&lt;/code&gt;が存在する。&lt;br /&gt; 2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数式&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015 (partial)&lt;br /&gt; 2015 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html&#34;&gt;関数の&lt;code&gt;default/delete&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;自動定義される特殊関数の制御&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2013: ムーブコンストラクタ・ムーブ代入演算子の&lt;code&gt;default&lt;/code&gt;は不可&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html&#34;&gt;移譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタから他のコンストラクタに処理を移譲する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/explicit_conversion_operator.html&#34;&gt;明示的な型変換演算子のオーバーロード&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;明示的な型変換が行われる場合にのみ呼び出される演算子をオーバーロードできるようにする&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/extend_friend_targets.html&#34;&gt;&lt;code&gt;friend&lt;/code&gt;宣言できる対象を拡張&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータや型の別名を&lt;code&gt;friend&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial) &lt;br /&gt; 12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/extern_template.html&#34;&gt;extern template&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートのインスタンス化抑止&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのコンストラクタを継承する&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクトをその場に書く&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010 (partial)&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/local_and_unnamed_type_as_template_arguments.html&#34;&gt;ローカル型と無名型を、テンプレート引数として使用することを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ローカルおよび無名として定義したクラスや列挙型を、テンプレート引数として渡せるようにする&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/long_long_type.html&#34;&gt;&lt;code&gt;long long&lt;/code&gt;型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;64ビット以上の大きさを持つ整数型&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html&#34;&gt;インライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ネストした名前空間に、透過的にアクセスする&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-16とUTF-32の文字型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1 (Windows: partial) &lt;br /&gt; 12.1 (GNU/Linux, macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt; 2010より組み込み型ではなく型の別名として存在する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html&#34;&gt;UTF-8文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;の文字列をUTF-8エンコーディングするプレフィックス&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.1 (Windows: partial) &lt;br /&gt; 12.1 (GNU/Linux, macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルにRプレフィックスを付けることで、エスケープシーケンスを無視する&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リテラルのサフィックスをユーザー定義する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/trailing_return_types.html&#34;&gt;戻り値の型を後置する関数宣言構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;以下のような形式での関数宣言&lt;br /&gt; &lt;code&gt;auto f(arg_types...) -&amp;gt; return_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/nullptr.html&#34;&gt;nullptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタを表すポインタリテラル&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/right_angle_brackets.html&#34;&gt;テンプレートの右山カッコ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;basic_string&amp;lt;char&amp;gt;&amp;gt;&lt;/code&gt;のように、&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;をスペースを空けずに記述可能にする&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照・ムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;右辺値によるオーバーロード、およびそれによるリソースの所有権移動&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.6&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010 (partial) ムーブコンストラクタと代入演算子の暗黙定義に対応していない。&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に条件式が真であることを表明する&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/scoped_enum.html#extended-unscoped-enum&#34;&gt;&lt;code&gt;enum&lt;/code&gt;の先行宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/scoped_enum.html&#34;&gt;スコープを持つ列挙型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;強い型付けとスコープを持つ列挙型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートによって型の別名を定義する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/unrestricted_unions.html&#34;&gt;共用体の制限解除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体のメンバ変数として、クラスオブジェクトを持つ&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0(Linux系OSおよびMacのみ。Windowsは非対応)&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の数のテンプレートパラメータを受け取れるようにする&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列やコンテナといった範囲を表すオブジェクトを、簡潔に走査する&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/override_final.html&#34;&gt;&lt;code&gt;override&lt;/code&gt;と&lt;code&gt;final&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数のオーバーライド指定、および派生クラスでのオーバーロードを禁止する指定&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2005 (partial): &lt;code&gt;override&lt;/code&gt;のみ。&lt;code&gt;final&lt;/code&gt;の代わりにsealedが存在する。ただし両者ともデストラクタには指定できない。&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/attributes.html&#34;&gt;属性構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[attr]]&lt;/code&gt;構文による、クラス、関数、変数の属性指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html&#34;&gt;メンバ関数の左辺値／右辺値修飾&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトが左辺値／右辺値の場合のみ呼び出し可能であることの指定&lt;/td&gt;
&lt;td&gt;4.8.1&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数の初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ変数を、宣言と同時に初期値指定する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;波括弧による初期化をユーザー定義する。&lt;code&gt;vector&amp;lt;int&amp;gt; v = {1, 2, 3};&lt;/code&gt;など。&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/uniform_initialization.html&#34;&gt;一様初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ呼び出しを波カッコで行う。 &lt;code&gt;T x { a, b, c };&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/noexcept.html&#34;&gt;noexcept&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の例外指定、例外を投げる可能性のある式かbool値を返す演算子&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/sfinae_expressions.html&#34;&gt;任意の式によるSFINAE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の式が有効かどうかで、その関数をオーバーロード解決に含めるかどうかを決定する&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2015 Update 1 (partial)&lt;br /&gt; 2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html&#34;&gt;スレッドローカルストレージ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;スレッドごとに異なる静的記憶域に保持される変数&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;/td&gt;
&lt;td&gt;2010&lt;br /&gt; &lt;code&gt;__declspec(thread)&lt;/code&gt;属性での部分サポート&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/static_initialization_thread_safely.html&#34;&gt;ブロックスコープを持つ&lt;code&gt;static&lt;/code&gt;変数初期化のスレッドセーフ化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数ローカルで定義した&lt;code&gt;static&lt;/code&gt;変数の初期化を、スレッドセーフにする&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.0 (Lnux/macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++11実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体的な対応状況： &lt;a href=&#34;https://wiki.apache.org/stdcxx/C++0xCompilerSupport&#34; target=&#34;_blank&#34;&gt;C++0xCompilerSupport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC： &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx11&#34; target=&#34;_blank&#34;&gt;C++11 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++ : &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2011&#34; target=&#34;_blank&#34;&gt;C++ 2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang： &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98 and C++11 Support in Clang&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://clang.llvm.org/cxx_dr_status.html&#34; target=&#34;_blank&#34;&gt;C++ Defect Report Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC : &lt;a href=&#34;https://software.intel.com/en-us/articles/c0x-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++11 Features Supported by Intel® C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp14&#34; id=&#34;cpp14&#34;&gt;C++14言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/binary_literals.html&#34;&gt;2進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2進数を表す&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;プレフィックスを付けた数値リテラルの記述を可能とする&lt;/td&gt;
&lt;td&gt;4.3(GNU)&lt;br /&gt; 4.9&lt;/td&gt;
&lt;td&gt;3.2&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値型を&lt;code&gt;auto&lt;/code&gt;にすることで、&lt;code&gt;return&lt;/code&gt;文から戻り値の型を推論させる&lt;/td&gt;
&lt;td&gt;4.8(partial)&lt;br /&gt;4.9&lt;/td&gt;
&lt;td&gt;3.3(partial)&lt;br /&gt; 3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/initialize_capture.html&#34;&gt;ラムダ式の初期化キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャに代入構文を導入し、一つの変数に複数のキャプチャ方法を指定可能にする&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/generic_lambdas.html&#34;&gt;ジェネリックラムダ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のパラメータを&lt;code&gt;auto&lt;/code&gt;にすることで、ジェネリックな関数呼び出し演算子を持つ関数オブジェクトを生成する&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/variable_templates.html&#34;&gt;変数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数定義時のテンプレート指定を可能にする。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;文、&lt;code&gt;switch&lt;/code&gt;文による条件分岐の許可。&lt;br /&gt;&lt;code&gt;for&lt;/code&gt;文、&lt;code&gt;while&lt;/code&gt;文、&lt;code&gt;do-while&lt;/code&gt;文によるループの許可。&lt;br /&gt;&lt;code&gt;void&lt;/code&gt;戻り値型の許可&lt;br /&gt;初期化を伴う変数宣言の許可。&lt;br /&gt;変数書き換えの許可。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.3(partial) &lt;br /&gt; 3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/brace_elision_in_array_temporary_initialization.html&#34;&gt;宣言時のメンバ初期化を持つ型の集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様初期化と初期化子リストを組み合わせた際、二重に波カッコが必要となっていた仕様を緩和し、波カッコを省略できるようにする&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html&#34;&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非推奨の機能であることを示す属性。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;br /&gt; (Linux/Mac OS)&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;それ以前は&lt;code&gt;__declspec(deprecated)&lt;/code&gt;で代替可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/digit_separators.html&#34;&gt;数値リテラルの桁区切り文字&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シングルクォーテーションで数値リテラルを桁区切りする。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/sized_deallocation.html&#34;&gt;サイズ付きデアロケーション&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;サイズをとる&lt;code&gt;delete&lt;/code&gt;演算子のオーバーロードを許可する。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++14実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx14&#34; target=&#34;_blank&#34;&gt;C++14 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++: &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2014&#34; target=&#34;_blank&#34;&gt;C++ 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98, C++11, and C++14 Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++: &lt;a href=&#34;http://libcxx.llvm.org/cxx1y_status.html&#34; target=&#34;_blank&#34;&gt;libc++ C++1Y Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://software.intel.com/en-us/articles/c14-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++14 Features Supported by Intel C++ Compiler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://software.intel.com/en-us/forums/topic/549502&#34; target=&#34;_blank&#34;&gt;Intel (R) Parallel Studio XE 2016 Beta program has begun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp17&#34; id=&#34;cpp17&#34;&gt;C++17言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html&#34;&gt;メッセージなしの&lt;code&gt;static_assert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトの表明メッセージを使用する&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/removing_trigraphs.html&#34;&gt;トライグラフを削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/allow_typename_in_a_template_template_parameter.html&#34;&gt;テンプレートテンプレートパラメータに&lt;code&gt;typename&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;class&lt;/code&gt;キーワードしか使用できなかった部分に、&lt;code&gt;typename&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.html&#34;&gt;単一要素初期化子リストを&lt;code&gt;auto&lt;/code&gt;で受け取った場合の型を変更&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;だったのを&lt;code&gt;T&lt;/code&gt;に変更&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックに対する2項演算の集積処理&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html&#34;&gt;UTF-8文字リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルだけでなく、文字リテラルにもUTF-8指定できるようにする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace A::B {}&lt;/code&gt;のように、入れ子の名前空間を簡単に定義できるようにする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/attributes_for_namespaces_and_enumerators.html&#34;&gt;名前空間と列挙子に属性の付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;名前空間の定義と、列挙型の各要素の定義に、属性を付けられるようにする&lt;/td&gt;
&lt;td&gt;名前空間は4.0&lt;br /&gt;列挙子は6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.html&#34;&gt;全ての非型テンプレート引数の定数式評価を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポインタの定数式評価として、配列からポインタへの変換や、関数から関数ポインタへの変換などを許可&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_use_of_the_register_keyword.html&#34;&gt;非推奨だった&lt;code&gt;register&lt;/code&gt;キーワードを削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html&#34;&gt;非推奨だった&lt;code&gt;bool&lt;/code&gt;型オブジェクトに対するインクリメントの仕様を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/has_include.html&#34;&gt;プリプロセッサでの条件式&lt;code&gt;__has_include&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対象のインクルードファイルが存在するかをプリプロセス時に判定する&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0136r1.html&#34; target=&#34;_blank&#34;&gt;継承コンストラクタの新仕様&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルト引数を引き継ぐようにした&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;case&lt;/code&gt;節で&lt;code&gt;break&lt;/code&gt;や&lt;code&gt;return&lt;/code&gt;を書かなかった場合に、それが意図したフォールスルーであることをコンパイラに伝える属性&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならないことをユーザーに伝える属性&lt;/td&gt;
&lt;td&gt;4.8からは&lt;code&gt;[[gnu::warn_unused_result]]&lt;/code&gt;を使用すること&lt;br /&gt; 7からサポート&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用しない可能性がある変数であることをコンパイラに伝える属性&lt;/td&gt;
&lt;td&gt;4.8からは&lt;code&gt;[[gnu::unused]]&lt;/code&gt;を使用すること&lt;br /&gt; 7からサポート&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0017r1.html&#34; target=&#34;_blank&#34;&gt;基底クラスのメンバ変数を集成体初期化するための波カッコを省略できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのメンバを集成体初期化するために、&lt;code&gt;derived d {{42}};&lt;/code&gt;の代わりに&lt;code&gt;derived d {42};&lt;/code&gt;と書けるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/constexpr_lambda.html&#34;&gt;ラムダ式を&lt;code&gt;constexpr&lt;/code&gt;として使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式の関数オブジェクトが定数式の文脈で使用された場合に、それがコンパイル時に評価されるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/generalizing_the_range-based_for_loop.html&#34;&gt;範囲for文のための&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;関数が、異なる型を返すことを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;が異なるイテレータ型を返せるようにすることで、終端イテレータを定義しやすくする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html&#34;&gt;ラムダ式での&lt;code&gt;*this&lt;/code&gt;のコピーキャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャリストに&lt;code&gt;*this&lt;/code&gt;を指定することで、&lt;code&gt;*this&lt;/code&gt;をコピーキャプチャする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/construction_enum_class_values.html&#34;&gt;&lt;code&gt;enum class&lt;/code&gt;変数の初期値として整数を指定する際の規則を調整&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャストを使用することなく整数を初期値として使用し、&lt;code&gt;E e{0};&lt;/code&gt;のような初期化を許可&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;1.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/hexadecimal_floating_literals.html&#34;&gt;浮動小数点数の16進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hexfloat&lt;/code&gt;マニピュレータや&lt;code&gt;printf()&lt;/code&gt;の16進数出力に合わせて、浮動小数点数のリテラルも16進数表記できるようにする&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html&#34;&gt;属性の名前空間指定に繰り返しをなくす&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[using CC: opt(1), debug]]&lt;/code&gt;のように属性の名前空間宣言をまとめて行う&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator new&lt;/code&gt;と&lt;code&gt;operator delete&lt;/code&gt;でアライメント値を取得できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html&#34;&gt;クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタの引数からクラスのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/declaring_non-type_template_arguments_with_auto.html&#34;&gt;非型テンプレート引数の&lt;code&gt;auto&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;typename T, T x&amp;gt;&lt;/code&gt;という冗長なコードを&lt;code&gt;template &amp;lt;auto x&amp;gt;&lt;/code&gt;のようにして受けられるようにし、&lt;br /&gt; &lt;code&gt;X&amp;lt;3&amp;gt;; X&amp;lt;true&amp;gt;; X&amp;lt;&#39;a&#39;&amp;gt;&lt;/code&gt;のように定数を簡潔に渡せるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html&#34;&gt;値のコピー省略を保証&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一時オブジェクトをコピーする際に、単純な値を持つクラスであればコピーが省略されることを保証する&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/expression_evaluation_order.html&#34;&gt;厳密な式の評価順&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;式の項が評価される順序を厳密に規定する。&lt;br /&gt; &lt;code&gt;b = a;&lt;/code&gt;の式が右から順番(a, bの順)に評価される&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html&#34;&gt;不明な属性を無視する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実装が知らない名前空間の属性は無視する&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/if_constexpr.html&#34;&gt;constexpr if文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(cond)&lt;/code&gt;とすることで、そのif文はコンパイル時に処理される&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0296r2.html&#34; target=&#34;_blank&#34;&gt;処理の進行保証&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;並行処理に関して「処理の進行」を明確に定義&lt;br /&gt; (TODO:言葉の定義だけなので実装状況ページからは取り除く)&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/inline_variables.html&#34;&gt;インライン変数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インライン指定を関数だけでなく変数にも指定できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0391r0.html&#34; target=&#34;_blank&#34;&gt;templated entityという用語を導入&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;(TODO:言葉の定義だけなので実装状況ページからは取り除く)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/structured_bindings.html&#34;&gt;構造化束縛&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;タプルやユーザー定義型を分解して受け取れるようにする&lt;br /&gt; &lt;code&gt;tuple&amp;lt;int, string&amp;gt; f();&lt;/code&gt; &lt;br /&gt; &lt;code&gt;const auto [a, b] = f(); // aはintの値、bはstringの値&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/selection_statements_with_initializer.html&#34;&gt;if文とswitch文の条件式と初期化を分離&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if (init; condition)&lt;/code&gt;のように初期化と条件式を分けて記述できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/replacement_of_class_objects_containing_reference_members.html&#34;&gt;参照メンバをもつクラスの置き換え&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照型メンバや&lt;code&gt;const&lt;/code&gt;データメンバを含むクラスについてこれまで結果は未定義とされていた配置&lt;code&gt;new&lt;/code&gt;によるオブジェクトの置き換えを条件付きで可能とする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_exception_specifications.html&#34;&gt;非推奨だった例外仕様を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;noexcept&lt;/code&gt;が入ったことによって非推奨になった&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様を削除&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/pack_expansions_in_using.html&#34;&gt;using宣言でのパック展開&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックの型を基底クラスとして指定した場合に、&lt;code&gt;using&lt;/code&gt;宣言に基底クラスのパラメータパックを指定できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0512r0.pdf&#34; target=&#34;_blank&#34;&gt;クラステンプレート引数の推論仕様を調整&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0490r0.html&#34; target=&#34;_blank&#34;&gt;Committee Draftに対するNational Body Commentへの対応&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0522r0.html&#34; target=&#34;_blank&#34;&gt;テンプレートテンプレート引数のマッチングにおいて、互換性のあるテンプレートを除外&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4 (partial)&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++17実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx17&#34; target=&#34;_blank&#34;&gt;C++17 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++ Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++ : &lt;a href=&#34;http://libcxx.llvm.org/cxx1z_status.html&#34; target=&#34;_blank&#34;&gt;libc++ C++1z Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://software.intel.com/en-us/articles/c17-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++17 Features Supported by Intel C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp20&#34; id=&#34;cpp20&#34;&gt;C++20言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html&#34;&gt;ビットフィールドのメンバ変数初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドメンバ変数のデフォルト値を設定する構文を追加する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html&#34;&gt;ラムダ式のキャプチャとして&lt;code&gt;[=, this]&lt;/code&gt;を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトコピーキャプチャと&lt;code&gt;this&lt;/code&gt;ポインタのコピーキャプチャを両方指定できるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html&#34;&gt;&lt;code&gt;[=]&lt;/code&gt;による&lt;code&gt;this&lt;/code&gt;の暗黙のキャプチャを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コピーのデフォルトキャプチャでは、&lt;code&gt;this&lt;/code&gt;ポインタをキャプチャされなくする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックラムダでテンプレートパラメータを定義できるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html&#34;&gt;&lt;code&gt;const&lt;/code&gt;修飾されたメンバポインタの制限を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.*&lt;/code&gt;演算子での左辺値の&lt;code&gt;const&lt;/code&gt;メンバ関数呼び出しを許可する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/va_opt.html&#34;&gt;可変引数が空でない場合のトークン置換&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの置換で可変引数が空の場合に余計なカンマが付いてしまう問題に対処&lt;/td&gt;
&lt;td&gt;8 (partial, &lt;code&gt;#__VA_OPT__&lt;/code&gt;による文字列化が未サポート)&lt;/td&gt;
&lt;td&gt;6.0&lt;br /&gt; 9.0 (&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1042r1.html&#34; target=&#34;_blank&#34;&gt;p1042&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0329r4.pdf&#34; target=&#34;_blank&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0734r0.pdf&#34; target=&#34;_blank&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータに対する制約を行う&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html&#34;&gt;初期化式をともなう範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲for文スコープで使用する変数の初期化のための構文を追加&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0588r1.html&#34; target=&#34;_blank&#34;&gt;暗黙のラムダキャプチャを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0846r0.html&#34; target=&#34;_blank&#34;&gt;関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0641r2.html&#34; target=&#34;_blank&#34;&gt;デフォルトのコピーコンストラクタと非&lt;code&gt;const&lt;/code&gt;なコンストラクタが衝突する問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;partial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0859r0.html&#34; target=&#34;_blank&#34;&gt;評価されない文脈で&lt;code&gt;constexpr&lt;/code&gt;関数が定数式評価されることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0515r3.pdf&#34; target=&#34;_blank&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0857r0.html&#34; target=&#34;_blank&#34;&gt;ラムダ式の制約&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0692r1.html&#34; target=&#34;_blank&#34;&gt;特殊化のアクセスチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0624r2.pdf&#34; target=&#34;_blank&#34;&gt;状態を持たないラムダ式を、デフォルト構築可能、代入可能とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;PODを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0315r4.pdf&#34; target=&#34;_blank&#34;&gt;評価されない文脈でのラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0840r2.html&#34; target=&#34;_blank&#34;&gt;空オブジェクトを言語サポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[no_unique_address]]&lt;/code&gt;属性を導入し、空の型のオブジェクトをほかのオブジェクトと共有する最適化を許可する&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html&#34;&gt;範囲for文がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;メンバ関数のどちらかが見つからなかった場合に非メンバ関数の&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html&#34;&gt;friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構造化束縛の仕様として公開メンバ変数のみを取り出せるようになっていたが、friend指定された関数からは非公開メンバ変数にもアクセスできるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html&#34;&gt;構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非テンプレートの&lt;code&gt;get()&lt;/code&gt;メンバ関数が見つかった場合は、非メンバ関数の&lt;code&gt;get()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html&#34; target=&#34;_blank&#34;&gt;型の文脈で&lt;code&gt;typename&lt;/code&gt;の省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型しか現れない文脈では、依存名を解決するための&lt;code&gt;typename&lt;/code&gt;キーワードを省略できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0780r2.html&#34; target=&#34;_blank&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[...args = std::move(args)]&lt;/code&gt;のようなキャプチャを許可&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0479r5.html&#34; target=&#34;_blank&#34;&gt;当たる確率が高い分岐と、当たる確率が低い分岐をコンパイラに伝える属性を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイラが分岐予測するためのヒントとする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0905r1.html&#34; target=&#34;_blank&#34;&gt;宇宙船演算子に対称性をもたせる&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;=&amp;gt; b&lt;/code&gt;が妥当であれば&lt;code&gt;b &amp;lt;=&amp;gt; a&lt;/code&gt;も妥当とする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0929r2.html&#34; target=&#34;_blank&#34;&gt;抽象型のチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の宣言段階では、パラメータおよび戻り値型が抽象型かどうかをチェックしないようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0732r2.pdf&#34; target=&#34;_blank&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::strong_equality&lt;/code&gt;に変換可能な非メンバ関数&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;をもつ型を、非型テンプレートパラメータとして使用できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0722r1.html&#34; target=&#34;_blank&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラスの&lt;code&gt;delete&lt;/code&gt;演算子が呼び出される前にデストラクタが呼ばれないようにするオプションを追加&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;仮想関数に&lt;code&gt;constexpr&lt;/code&gt;を付けられない制限を解除&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1327r1.html&#34; target=&#34;_blank&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式での動的多態を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1002r1.pdf&#34; target=&#34;_blank&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でtry-catchブロックを書けるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1073r3.html&#34; target=&#34;_blank&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;consteval&lt;/code&gt;キーワードを追加し、常に定数式評価されるよう指定できるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1330r0.pdf&#34; target=&#34;_blank&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体メンバの書き換えを定数式内で行えるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1008r1.pdf&#34; target=&#34;_blank&#34;&gt;ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタが&lt;code&gt;delete&lt;/code&gt;宣言されているクラスを、集成体初期化によってコンストラクタ呼び出しを回避して構築できてしまっていた技法を禁止&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html&#34; target=&#34;_blank&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;事前条件、事後条件、表明を宣言する新たな属性構文を追加&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html&#34; target=&#34;_blank&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;explicit(true)&lt;/code&gt;のように&lt;code&gt;explicit&lt;/code&gt;に真理値パラメータを指定できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html&#34;&gt;符号付き整数型が2の補数表現であることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;符号付き整数型のビット表現を2の補数に規定する&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r6.html&#34; target=&#34;_blank&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-8エンコードされた文字かどうかでオーバーロード・特殊化をできるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7 (&lt;code&gt;-fchar8_t&lt;/code&gt;オプションが必要)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1094r2.html&#34; target=&#34;_blank&#34;&gt;入れ子名前空間定義でのインライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace ns1::inline ns2::ns3 {}&lt;/code&gt;のように、入れ子名前空間を定義する式にインライン名前空間の指定を含められるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html&#34;&gt;構造化束縛を拡張して通常の変数宣言のように使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;記憶域指定子として&lt;code&gt;static&lt;/code&gt;と&lt;code&gt;thread_local&lt;/code&gt;の指定を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.md.nolink&#34;&gt;構造化束縛したビットフィールドの参照キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドを含む構造化束縛をした場合にラムダ式で参照キャプチャできない規定を緩和し、ビットフィールドを直接参照キャプチャ、もしくはデフォルト参照キャプチャして使用しなければ適格とする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T x{1, 2, 3};&lt;/code&gt;と同様に&lt;code&gt;T x(1, 2, 3);&lt;/code&gt;でも集成体初期化できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.md.nolink&#34;&gt;&lt;code&gt;new&lt;/code&gt;式での配列要素数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;double* p = new double[]{1,2,3};&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.md.nolink&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルを、文字コードUTF-16/32に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;、&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;の定義に関係なく、&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;のリテラルをUTF-16/32文字コードに規定する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヘッダファイル・ソースファイル、インクルードに変わる仕組みとしてモジュールを導入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8.0 partial (&lt;code&gt;-fmodules&lt;/code&gt;, &lt;code&gt;-fmodules-ts&lt;/code&gt;が必要)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;partial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数実行を中断・再開する仕組みとしてコルーチンを導入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md.nolink&#34;&gt;添字演算子内でのカンマ演算子の使用を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ar[i, j]&lt;/code&gt;を非推奨化。&lt;code&gt;ar[(i, j)]&lt;/code&gt;はOK&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md.nolink&#34;&gt;constexprの文脈での自明なデフォルト初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でのデフォルト初期化を許可し、未初期化値を読むことのみ禁止する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.md.nolink&#34;&gt;特殊メンバ関数の条件付き自明定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;制約によって自明な特殊メンバ関数と非自明な特殊メンバ関数をオーバーロードできるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/nodiscard_should_have_a_reason.md.nolink&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性に理由となる文字列を付加できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならない理由を関数宣言に持たせ、警告メッセージに役立てる&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;using enum EnumType;&lt;/code&gt;もしくは&lt;code&gt;using EnumType::enumerator&lt;/code&gt;とすることで、列挙値のスコープ指定を省略できるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/class_template_argument_deduction_for_aggregates.md.nolink&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラステンプレートのテンプレート引数推論はコンストラクタ引数から推論されるが、集成体初期化からも推論できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md.nolink&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない場合にconstexpr関数にasm定義を含めることを許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md.nolink&#34;&gt;要素数不明の配列への変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数が判明している配列から、要素数が不明の配列への変換を許可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/constinit.md.nolink&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;初期化のみコンパイル時におわらせたい場合に使用する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.md.nolink&#34;&gt;ほとんどの&lt;code&gt;volatile&lt;/code&gt;を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;volatile&lt;/code&gt;の有用な機能のみを残し、効果が疑わしい、または壊れている機能を非推奨化する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/class_template_argument_deduction_for_alias_templates.md.nolink&#34;&gt;エイリアステンプレートに対するクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エイリアステンプレートからクラステンプレートのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/more_constexpr_containers.md.nolink&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;記憶域をもつメモリアロケータの存在を考慮することで、可変サイズをもつコンテナをコンパイル時に使用できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++20実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx2a&#34; target=&#34;_blank&#34;&gt;C++20 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++ Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++: &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2020&#34; target=&#34;_blank&#34;&gt;C++ 2020 Implementation Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++: &lt;a href=&#34;http://libcxx.llvm.org/cxx2a_status.html&#34; target=&#34;_blank&#34;&gt;libc++ C++2a Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/STL/wiki/Changelog&#34; target=&#34;_blank&#34;&gt;次リリース情報 - Visual Studio 2019 change log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイラの実装状況 -- update msvc 16.6 info</title>
      <link href="https://cpprefjp.github.io/implementation-status.html"/>
      <id>0525dde80dbc4048488da6b0d5caed5282a643f0:implementation-status.md</id>
      <updated>2020-07-24T15:27:05+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;コンパイラの実装状況&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;このページでは、C++のバージョンごとの言語機能を、どのコンパイラがどのバージョンからサポートしているかをまとめる。&lt;/p&gt;
&lt;p&gt;ライブラリ機能については、本サイトのリファレンスで各機能を参照してもらいたい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp11&#34;&gt;C++11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp14&#34;&gt;C++14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp17&#34;&gt;C++17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp20&#34;&gt;C++20&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp11&#34; id=&#34;cpp11&#34;&gt;C++11言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alignas.html&#34;&gt;alignas&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;2003あるいはそれ以前からある&lt;code&gt;__declspec(align(x))&lt;/code&gt;構文で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alignof.html&#34;&gt;alignof&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント取得&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;2003あるいはそれ以前よりある&lt;code&gt;__alignof&lt;/code&gt;で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/auto.html&#34;&gt;auto&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型推論&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の型を取得&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;2010 (partial)&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C99互換のプリプロセッサ&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/variadic_macros.html&#34;&gt;可変引数マクロ&lt;/a&gt;、&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/pragma_operator.html&#34;&gt;Pragma演算子&lt;/a&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/func.html&#34;&gt;__func__&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2005 (partial): 可変引数のみ &lt;code&gt;_Pragma&lt;/code&gt;の代わりに&lt;code&gt;__pragma&lt;/code&gt;が存在する。&lt;br /&gt; 2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数式&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015 (partial)&lt;br /&gt; 2015 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html&#34;&gt;関数の&lt;code&gt;default/delete&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;自動定義される特殊関数の制御&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2013: ムーブコンストラクタ・ムーブ代入演算子の&lt;code&gt;default&lt;/code&gt;は不可&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html&#34;&gt;移譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタから他のコンストラクタに処理を移譲する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/explicit_conversion_operator.html&#34;&gt;明示的な型変換演算子のオーバーロード&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;明示的な型変換が行われる場合にのみ呼び出される演算子をオーバーロードできるようにする&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/extend_friend_targets.html&#34;&gt;&lt;code&gt;friend&lt;/code&gt;宣言できる対象を拡張&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータや型の別名を&lt;code&gt;friend&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial) &lt;br /&gt; 12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/extern_template.html&#34;&gt;extern template&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートのインスタンス化抑止&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのコンストラクタを継承する&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクトをその場に書く&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010 (partial)&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/local_and_unnamed_type_as_template_arguments.html&#34;&gt;ローカル型と無名型を、テンプレート引数として使用することを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ローカルおよび無名として定義したクラスや列挙型を、テンプレート引数として渡せるようにする&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/long_long_type.html&#34;&gt;&lt;code&gt;long long&lt;/code&gt;型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;64ビット以上の大きさを持つ整数型&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html&#34;&gt;インライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ネストした名前空間に、透過的にアクセスする&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-16とUTF-32の文字型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1 (Windows: partial) &lt;br /&gt; 12.1 (GNU/Linux, macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt; 2010より組み込み型ではなく型の別名として存在する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html&#34;&gt;UTF-8文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;の文字列をUTF-8エンコーディングするプレフィックス&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.1 (Windows: partial) &lt;br /&gt; 12.1 (GNU/Linux, macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルにRプレフィックスを付けることで、エスケープシーケンスを無視する&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リテラルのサフィックスをユーザー定義する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/trailing_return_types.html&#34;&gt;戻り値の型を後置する関数宣言構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;以下のような形式での関数宣言&lt;br /&gt; &lt;code&gt;auto f(arg_types...) -&amp;gt; return_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/nullptr.html&#34;&gt;nullptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタを表すポインタリテラル&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/right_angle_brackets.html&#34;&gt;テンプレートの右山カッコ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;basic_string&amp;lt;char&amp;gt;&amp;gt;&lt;/code&gt;のように、&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;をスペースを空けずに記述可能にする&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照・ムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;右辺値によるオーバーロード、およびそれによるリソースの所有権移動&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.6&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010 (partial) ムーブコンストラクタと代入演算子の暗黙定義に対応していない。&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に条件式が真であることを表明する&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/scoped_enum.html#extended-unscoped-enum&#34;&gt;&lt;code&gt;enum&lt;/code&gt;の先行宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/scoped_enum.html&#34;&gt;スコープを持つ列挙型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;強い型付けとスコープを持つ列挙型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートによって型の別名を定義する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/unrestricted_unions.html&#34;&gt;共用体の制限解除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体のメンバ変数として、クラスオブジェクトを持つ&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0(Linux系OSおよびMacのみ。Windowsは非対応)&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の数のテンプレートパラメータを受け取れるようにする&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列やコンテナといった範囲を表すオブジェクトを、簡潔に走査する&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/override_final.html&#34;&gt;&lt;code&gt;override&lt;/code&gt;と&lt;code&gt;final&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数のオーバーライド指定、および派生クラスでのオーバーロードを禁止する指定&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2005 (partial): &lt;code&gt;override&lt;/code&gt;のみ。&lt;code&gt;final&lt;/code&gt;の代わりにsealedが存在する。ただし両者ともデストラクタには指定できない。&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/attributes.html&#34;&gt;属性構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[attr]]&lt;/code&gt;構文による、クラス、関数、変数の属性指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html&#34;&gt;メンバ関数の左辺値／右辺値修飾&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトが左辺値／右辺値の場合のみ呼び出し可能であることの指定&lt;/td&gt;
&lt;td&gt;4.8.1&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数の初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ変数を、宣言と同時に初期値指定する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;波括弧による初期化をユーザー定義する。&lt;code&gt;vector&amp;lt;int&amp;gt; v = {1, 2, 3};&lt;/code&gt;など。&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/uniform_initialization.html&#34;&gt;一様初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ呼び出しを波カッコで行う。 &lt;code&gt;T x { a, b, c };&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/noexcept.html&#34;&gt;noexcept&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の例外指定、例外を投げる可能性のある式かbool値を返す演算子&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/sfinae_expressions.html&#34;&gt;任意の式によるSFINAE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の式が有効かどうかで、その関数をオーバーロード解決に含めるかどうかを決定する&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2015 Update 1 (partial)&lt;br /&gt; 2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html&#34;&gt;スレッドローカルストレージ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;スレッドごとに異なる静的記憶域に保持される変数&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;/td&gt;
&lt;td&gt;2010&lt;br /&gt; &lt;code&gt;__declspec(thread)&lt;/code&gt;属性での部分サポート&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/static_initialization_thread_safely.html&#34;&gt;ブロックスコープを持つ&lt;code&gt;static&lt;/code&gt;変数初期化のスレッドセーフ化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数ローカルで定義した&lt;code&gt;static&lt;/code&gt;変数の初期化を、スレッドセーフにする&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.0 (Lnux/macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++11実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体的な対応状況： &lt;a href=&#34;https://wiki.apache.org/stdcxx/C++0xCompilerSupport&#34; target=&#34;_blank&#34;&gt;C++0xCompilerSupport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC： &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx11&#34; target=&#34;_blank&#34;&gt;C++11 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++ : &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2011&#34; target=&#34;_blank&#34;&gt;C++ 2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang： &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98 and C++11 Support in Clang&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://clang.llvm.org/cxx_dr_status.html&#34; target=&#34;_blank&#34;&gt;C++ Defect Report Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC : &lt;a href=&#34;https://software.intel.com/en-us/articles/c0x-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++11 Features Supported by Intel® C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp14&#34; id=&#34;cpp14&#34;&gt;C++14言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/binary_literals.html&#34;&gt;2進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2進数を表す&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;プレフィックスを付けた数値リテラルの記述を可能とする&lt;/td&gt;
&lt;td&gt;4.3(GNU)&lt;br /&gt; 4.9&lt;/td&gt;
&lt;td&gt;3.2&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値型を&lt;code&gt;auto&lt;/code&gt;にすることで、&lt;code&gt;return&lt;/code&gt;文から戻り値の型を推論させる&lt;/td&gt;
&lt;td&gt;4.8(partial)&lt;br /&gt;4.9&lt;/td&gt;
&lt;td&gt;3.3(partial)&lt;br /&gt; 3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/initialize_capture.html&#34;&gt;ラムダ式の初期化キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャに代入構文を導入し、一つの変数に複数のキャプチャ方法を指定可能にする&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/generic_lambdas.html&#34;&gt;ジェネリックラムダ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のパラメータを&lt;code&gt;auto&lt;/code&gt;にすることで、ジェネリックな関数呼び出し演算子を持つ関数オブジェクトを生成する&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/variable_templates.html&#34;&gt;変数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数定義時のテンプレート指定を可能にする。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;文、&lt;code&gt;switch&lt;/code&gt;文による条件分岐の許可。&lt;br /&gt;&lt;code&gt;for&lt;/code&gt;文、&lt;code&gt;while&lt;/code&gt;文、&lt;code&gt;do-while&lt;/code&gt;文によるループの許可。&lt;br /&gt;&lt;code&gt;void&lt;/code&gt;戻り値型の許可&lt;br /&gt;初期化を伴う変数宣言の許可。&lt;br /&gt;変数書き換えの許可。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.3(partial) &lt;br /&gt; 3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/brace_elision_in_array_temporary_initialization.html&#34;&gt;宣言時のメンバ初期化を持つ型の集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様初期化と初期化子リストを組み合わせた際、二重に波カッコが必要となっていた仕様を緩和し、波カッコを省略できるようにする&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html&#34;&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非推奨の機能であることを示す属性。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;br /&gt; (Linux/Mac OS)&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;それ以前は&lt;code&gt;__declspec(deprecated)&lt;/code&gt;で代替可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/digit_separators.html&#34;&gt;数値リテラルの桁区切り文字&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シングルクォーテーションで数値リテラルを桁区切りする。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/sized_deallocation.html&#34;&gt;サイズ付きデアロケーション&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;サイズをとる&lt;code&gt;delete&lt;/code&gt;演算子のオーバーロードを許可する。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++14実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx14&#34; target=&#34;_blank&#34;&gt;C++14 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++: &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2014&#34; target=&#34;_blank&#34;&gt;C++ 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98, C++11, and C++14 Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++: &lt;a href=&#34;http://libcxx.llvm.org/cxx1y_status.html&#34; target=&#34;_blank&#34;&gt;libc++ C++1Y Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://software.intel.com/en-us/articles/c14-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++14 Features Supported by Intel C++ Compiler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://software.intel.com/en-us/forums/topic/549502&#34; target=&#34;_blank&#34;&gt;Intel (R) Parallel Studio XE 2016 Beta program has begun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp17&#34; id=&#34;cpp17&#34;&gt;C++17言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html&#34;&gt;メッセージなしの&lt;code&gt;static_assert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトの表明メッセージを使用する&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/removing_trigraphs.html&#34;&gt;トライグラフを削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/allow_typename_in_a_template_template_parameter.html&#34;&gt;テンプレートテンプレートパラメータに&lt;code&gt;typename&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;class&lt;/code&gt;キーワードしか使用できなかった部分に、&lt;code&gt;typename&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.html&#34;&gt;単一要素初期化子リストを&lt;code&gt;auto&lt;/code&gt;で受け取った場合の型を変更&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;だったのを&lt;code&gt;T&lt;/code&gt;に変更&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックに対する2項演算の集積処理&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html&#34;&gt;UTF-8文字リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルだけでなく、文字リテラルにもUTF-8指定できるようにする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace A::B {}&lt;/code&gt;のように、入れ子の名前空間を簡単に定義できるようにする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/attributes_for_namespaces_and_enumerators.html&#34;&gt;名前空間と列挙子に属性の付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;名前空間の定義と、列挙型の各要素の定義に、属性を付けられるようにする&lt;/td&gt;
&lt;td&gt;名前空間は4.0&lt;br /&gt;列挙子は6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.html&#34;&gt;全ての非型テンプレート引数の定数式評価を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポインタの定数式評価として、配列からポインタへの変換や、関数から関数ポインタへの変換などを許可&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_use_of_the_register_keyword.html&#34;&gt;非推奨だった&lt;code&gt;register&lt;/code&gt;キーワードを削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html&#34;&gt;非推奨だった&lt;code&gt;bool&lt;/code&gt;型オブジェクトに対するインクリメントの仕様を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/has_include.html&#34;&gt;プリプロセッサでの条件式&lt;code&gt;__has_include&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対象のインクルードファイルが存在するかをプリプロセス時に判定する&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0136r1.html&#34; target=&#34;_blank&#34;&gt;継承コンストラクタの新仕様&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルト引数を引き継ぐようにした&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;case&lt;/code&gt;節で&lt;code&gt;break&lt;/code&gt;や&lt;code&gt;return&lt;/code&gt;を書かなかった場合に、それが意図したフォールスルーであることをコンパイラに伝える属性&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならないことをユーザーに伝える属性&lt;/td&gt;
&lt;td&gt;4.8からは&lt;code&gt;[[gnu::warn_unused_result]]&lt;/code&gt;を使用すること&lt;br /&gt; 7からサポート&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用しない可能性がある変数であることをコンパイラに伝える属性&lt;/td&gt;
&lt;td&gt;4.8からは&lt;code&gt;[[gnu::unused]]&lt;/code&gt;を使用すること&lt;br /&gt; 7からサポート&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0017r1.html&#34; target=&#34;_blank&#34;&gt;基底クラスのメンバ変数を集成体初期化するための波カッコを省略できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのメンバを集成体初期化するために、&lt;code&gt;derived d {{42}};&lt;/code&gt;の代わりに&lt;code&gt;derived d {42};&lt;/code&gt;と書けるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/constexpr_lambda.html&#34;&gt;ラムダ式を&lt;code&gt;constexpr&lt;/code&gt;として使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式の関数オブジェクトが定数式の文脈で使用された場合に、それがコンパイル時に評価されるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/generalizing_the_range-based_for_loop.html&#34;&gt;範囲for文のための&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;関数が、異なる型を返すことを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;が異なるイテレータ型を返せるようにすることで、終端イテレータを定義しやすくする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html&#34;&gt;ラムダ式での&lt;code&gt;*this&lt;/code&gt;のコピーキャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャリストに&lt;code&gt;*this&lt;/code&gt;を指定することで、&lt;code&gt;*this&lt;/code&gt;をコピーキャプチャする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/construction_enum_class_values.html&#34;&gt;&lt;code&gt;enum class&lt;/code&gt;変数の初期値として整数を指定する際の規則を調整&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャストを使用することなく整数を初期値として使用し、&lt;code&gt;E e{0};&lt;/code&gt;のような初期化を許可&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;1.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/hexadecimal_floating_literals.html&#34;&gt;浮動小数点数の16進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hexfloat&lt;/code&gt;マニピュレータや&lt;code&gt;printf()&lt;/code&gt;の16進数出力に合わせて、浮動小数点数のリテラルも16進数表記できるようにする&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html&#34;&gt;属性の名前空間指定に繰り返しをなくす&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[using CC: opt(1), debug]]&lt;/code&gt;のように属性の名前空間宣言をまとめて行う&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator new&lt;/code&gt;と&lt;code&gt;operator delete&lt;/code&gt;でアライメント値を取得できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html&#34;&gt;クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタの引数からクラスのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/declaring_non-type_template_arguments_with_auto.html&#34;&gt;非型テンプレート引数の&lt;code&gt;auto&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;typename T, T x&amp;gt;&lt;/code&gt;という冗長なコードを&lt;code&gt;template &amp;lt;auto x&amp;gt;&lt;/code&gt;のようにして受けられるようにし、&lt;br /&gt; &lt;code&gt;X&amp;lt;3&amp;gt;; X&amp;lt;true&amp;gt;; X&amp;lt;&#39;a&#39;&amp;gt;&lt;/code&gt;のように定数を簡潔に渡せるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html&#34;&gt;値のコピー省略を保証&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一時オブジェクトをコピーする際に、単純な値を持つクラスであればコピーが省略されることを保証する&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/expression_evaluation_order.html&#34;&gt;厳密な式の評価順&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;式の項が評価される順序を厳密に規定する。&lt;br /&gt; &lt;code&gt;b = a;&lt;/code&gt;の式が右から順番(a, bの順)に評価される&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html&#34;&gt;不明な属性を無視する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実装が知らない名前空間の属性は無視する&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/if_constexpr.html&#34;&gt;constexpr if文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(cond)&lt;/code&gt;とすることで、そのif文はコンパイル時に処理される&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0296r2.html&#34; target=&#34;_blank&#34;&gt;処理の進行保証&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;並行処理に関して「処理の進行」を明確に定義&lt;br /&gt; (TODO:言葉の定義だけなので実装状況ページからは取り除く)&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/inline_variables.html&#34;&gt;インライン変数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インライン指定を関数だけでなく変数にも指定できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0391r0.html&#34; target=&#34;_blank&#34;&gt;templated entityという用語を導入&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;(TODO:言葉の定義だけなので実装状況ページからは取り除く)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/structured_bindings.html&#34;&gt;構造化束縛&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;タプルやユーザー定義型を分解して受け取れるようにする&lt;br /&gt; &lt;code&gt;tuple&amp;lt;int, string&amp;gt; f();&lt;/code&gt; &lt;br /&gt; &lt;code&gt;const auto [a, b] = f(); // aはintの値、bはstringの値&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/selection_statements_with_initializer.html&#34;&gt;if文とswitch文の条件式と初期化を分離&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if (init; condition)&lt;/code&gt;のように初期化と条件式を分けて記述できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/replacement_of_class_objects_containing_reference_members.html&#34;&gt;参照メンバをもつクラスの置き換え&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照型メンバや&lt;code&gt;const&lt;/code&gt;データメンバを含むクラスについてこれまで結果は未定義とされていた配置&lt;code&gt;new&lt;/code&gt;によるオブジェクトの置き換えを条件付きで可能とする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_exception_specifications.html&#34;&gt;非推奨だった例外仕様を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;noexcept&lt;/code&gt;が入ったことによって非推奨になった&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様を削除&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/pack_expansions_in_using.html&#34;&gt;using宣言でのパック展開&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックの型を基底クラスとして指定した場合に、&lt;code&gt;using&lt;/code&gt;宣言に基底クラスのパラメータパックを指定できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0512r0.pdf&#34; target=&#34;_blank&#34;&gt;クラステンプレート引数の推論仕様を調整&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0490r0.html&#34; target=&#34;_blank&#34;&gt;Committee Draftに対するNational Body Commentへの対応&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0522r0.html&#34; target=&#34;_blank&#34;&gt;テンプレートテンプレート引数のマッチングにおいて、互換性のあるテンプレートを除外&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4 (partial)&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++17実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx17&#34; target=&#34;_blank&#34;&gt;C++17 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++ Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++ : &lt;a href=&#34;http://libcxx.llvm.org/cxx1z_status.html&#34; target=&#34;_blank&#34;&gt;libc++ C++1z Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://software.intel.com/en-us/articles/c17-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++17 Features Supported by Intel C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp20&#34; id=&#34;cpp20&#34;&gt;C++20言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html&#34;&gt;ビットフィールドのメンバ変数初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドメンバ変数のデフォルト値を設定する構文を追加する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html&#34;&gt;ラムダ式のキャプチャとして&lt;code&gt;[=, this]&lt;/code&gt;を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトコピーキャプチャと&lt;code&gt;this&lt;/code&gt;ポインタのコピーキャプチャを両方指定できるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html&#34;&gt;&lt;code&gt;[=]&lt;/code&gt;による&lt;code&gt;this&lt;/code&gt;の暗黙のキャプチャを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コピーのデフォルトキャプチャでは、&lt;code&gt;this&lt;/code&gt;ポインタをキャプチャされなくする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックラムダでテンプレートパラメータを定義できるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html&#34;&gt;&lt;code&gt;const&lt;/code&gt;修飾されたメンバポインタの制限を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.*&lt;/code&gt;演算子での左辺値の&lt;code&gt;const&lt;/code&gt;メンバ関数呼び出しを許可する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/va_opt.html&#34;&gt;可変引数が空でない場合のトークン置換&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの置換で可変引数が空の場合に余計なカンマが付いてしまう問題に対処&lt;/td&gt;
&lt;td&gt;8 (partial, &lt;code&gt;#__VA_OPT__&lt;/code&gt;による文字列化が未サポート)&lt;/td&gt;
&lt;td&gt;6.0&lt;br /&gt; 9.0 (&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1042r1.html&#34; target=&#34;_blank&#34;&gt;p1042&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0329r4.pdf&#34; target=&#34;_blank&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0734r0.pdf&#34; target=&#34;_blank&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータに対する制約を行う&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html&#34;&gt;初期化式をともなう範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲for文スコープで使用する変数の初期化のための構文を追加&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0588r1.html&#34; target=&#34;_blank&#34;&gt;暗黙のラムダキャプチャを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0846r0.html&#34; target=&#34;_blank&#34;&gt;関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0641r2.html&#34; target=&#34;_blank&#34;&gt;デフォルトのコピーコンストラクタと非&lt;code&gt;const&lt;/code&gt;なコンストラクタが衝突する問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;partial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0859r0.html&#34; target=&#34;_blank&#34;&gt;評価されない文脈で&lt;code&gt;constexpr&lt;/code&gt;関数が定数式評価されることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0515r3.pdf&#34; target=&#34;_blank&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0857r0.html&#34; target=&#34;_blank&#34;&gt;ラムダ式の制約&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0692r1.html&#34; target=&#34;_blank&#34;&gt;特殊化のアクセスチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0624r2.pdf&#34; target=&#34;_blank&#34;&gt;状態を持たないラムダ式を、デフォルト構築可能、代入可能とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;PODを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0315r4.pdf&#34; target=&#34;_blank&#34;&gt;評価されない文脈でのラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0840r2.html&#34; target=&#34;_blank&#34;&gt;空オブジェクトを言語サポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[no_unique_address]]&lt;/code&gt;属性を導入し、空の型のオブジェクトをほかのオブジェクトと共有する最適化を許可する&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html&#34;&gt;範囲for文がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;メンバ関数のどちらかが見つからなかった場合に非メンバ関数の&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html&#34;&gt;friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構造化束縛の仕様として公開メンバ変数のみを取り出せるようになっていたが、friend指定された関数からは非公開メンバ変数にもアクセスできるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html&#34;&gt;構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非テンプレートの&lt;code&gt;get()&lt;/code&gt;メンバ関数が見つかった場合は、非メンバ関数の&lt;code&gt;get()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html&#34; target=&#34;_blank&#34;&gt;型の文脈で&lt;code&gt;typename&lt;/code&gt;の省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型しか現れない文脈では、依存名を解決するための&lt;code&gt;typename&lt;/code&gt;キーワードを省略できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0780r2.html&#34; target=&#34;_blank&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[...args = std::move(args)]&lt;/code&gt;のようなキャプチャを許可&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0479r5.html&#34; target=&#34;_blank&#34;&gt;当たる確率が高い分岐と、当たる確率が低い分岐をコンパイラに伝える属性を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイラが分岐予測するためのヒントとする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0905r1.html&#34; target=&#34;_blank&#34;&gt;宇宙船演算子に対称性をもたせる&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;=&amp;gt; b&lt;/code&gt;が妥当であれば&lt;code&gt;b &amp;lt;=&amp;gt; a&lt;/code&gt;も妥当とする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0929r2.html&#34; target=&#34;_blank&#34;&gt;抽象型のチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の宣言段階では、パラメータおよび戻り値型が抽象型かどうかをチェックしないようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0732r2.pdf&#34; target=&#34;_blank&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::strong_equality&lt;/code&gt;に変換可能な非メンバ関数&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;をもつ型を、非型テンプレートパラメータとして使用できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0722r1.html&#34; target=&#34;_blank&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラスの&lt;code&gt;delete&lt;/code&gt;演算子が呼び出される前にデストラクタが呼ばれないようにするオプションを追加&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;仮想関数に&lt;code&gt;constexpr&lt;/code&gt;を付けられない制限を解除&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1327r1.html&#34; target=&#34;_blank&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式での動的多態を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1002r1.pdf&#34; target=&#34;_blank&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でtry-catchブロックを書けるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1073r3.html&#34; target=&#34;_blank&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;consteval&lt;/code&gt;キーワードを追加し、常に定数式評価されるよう指定できるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1330r0.pdf&#34; target=&#34;_blank&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体メンバの書き換えを定数式内で行えるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1008r1.pdf&#34; target=&#34;_blank&#34;&gt;ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタが&lt;code&gt;delete&lt;/code&gt;宣言されているクラスを、集成体初期化によってコンストラクタ呼び出しを回避して構築できてしまっていた技法を禁止&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html&#34; target=&#34;_blank&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;事前条件、事後条件、表明を宣言する新たな属性構文を追加&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html&#34; target=&#34;_blank&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;explicit(true)&lt;/code&gt;のように&lt;code&gt;explicit&lt;/code&gt;に真理値パラメータを指定できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html&#34;&gt;符号付き整数型が2の補数表現であることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;符号付き整数型のビット表現を2の補数に規定する&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r6.html&#34; target=&#34;_blank&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-8エンコードされた文字かどうかでオーバーロード・特殊化をできるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7 (&lt;code&gt;-fchar8_t&lt;/code&gt;オプションが必要)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1094r2.html&#34; target=&#34;_blank&#34;&gt;入れ子名前空間定義でのインライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace ns1::inline ns2::ns3 {}&lt;/code&gt;のように、入れ子名前空間を定義する式にインライン名前空間の指定を含められるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html&#34;&gt;構造化束縛を拡張して通常の変数宣言のように使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;記憶域指定子として&lt;code&gt;static&lt;/code&gt;と&lt;code&gt;thread_local&lt;/code&gt;の指定を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.md.nolink&#34;&gt;構造化束縛したビットフィールドの参照キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドを含む構造化束縛をした場合にラムダ式で参照キャプチャできない規定を緩和し、ビットフィールドを直接参照キャプチャ、もしくはデフォルト参照キャプチャして使用しなければ適格とする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T x{1, 2, 3};&lt;/code&gt;と同様に&lt;code&gt;T x(1, 2, 3);&lt;/code&gt;でも集成体初期化できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.md.nolink&#34;&gt;&lt;code&gt;new&lt;/code&gt;式での配列要素数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;double* p = new double[]{1,2,3};&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.md.nolink&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルを、文字コードUTF-16/32に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;、&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;の定義に関係なく、&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;のリテラルをUTF-16/32文字コードに規定する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヘッダファイル・ソースファイル、インクルードに変わる仕組みとしてモジュールを導入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8.0 partial (&lt;code&gt;-fmodules&lt;/code&gt;, &lt;code&gt;-fmodules-ts&lt;/code&gt;が必要)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;partial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数実行を中断・再開する仕組みとしてコルーチンを導入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md.nolink&#34;&gt;添字演算子内でのカンマ演算子の使用を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ar[i, j]&lt;/code&gt;を非推奨化。&lt;code&gt;ar[(i, j)]&lt;/code&gt;はOK&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md.nolink&#34;&gt;constexprの文脈での自明なデフォルト初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でのデフォルト初期化を許可し、未初期化値を読むことのみ禁止する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.md.nolink&#34;&gt;特殊メンバ関数の条件付き自明定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;制約によって自明な特殊メンバ関数と非自明な特殊メンバ関数をオーバーロードできるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/nodiscard_should_have_a_reason.md.nolink&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性に理由となる文字列を付加できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならない理由を関数宣言に持たせ、警告メッセージに役立てる&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;using enum EnumType;&lt;/code&gt;もしくは&lt;code&gt;using EnumType::enumerator&lt;/code&gt;とすることで、列挙値のスコープ指定を省略できるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/class_template_argument_deduction_for_aggregates.md.nolink&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラステンプレートのテンプレート引数推論はコンストラクタ引数から推論されるが、集成体初期化からも推論できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md.nolink&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない場合にconstexpr関数にasm定義を含めることを許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md.nolink&#34;&gt;要素数不明の配列への変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数が判明している配列から、要素数が不明の配列への変換を許可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/constinit.md.nolink&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;初期化のみコンパイル時におわらせたい場合に使用する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.md.nolink&#34;&gt;ほとんどの&lt;code&gt;volatile&lt;/code&gt;を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;volatile&lt;/code&gt;の有用な機能のみを残し、効果が疑わしい、または壊れている機能を非推奨化する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/class_template_argument_deduction_for_alias_templates.md.nolink&#34;&gt;エイリアステンプレートに対するクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エイリアステンプレートからクラステンプレートのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/more_constexpr_containers.md.nolink&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;記憶域をもつメモリアロケータの存在を考慮することで、可変サイズをもつコンテナをコンパイル時に使用できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++20実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx2a&#34; target=&#34;_blank&#34;&gt;C++20 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++ Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++: &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2020&#34; target=&#34;_blank&#34;&gt;C++ 2020 Implementation Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++: &lt;a href=&#34;http://libcxx.llvm.org/cxx2a_status.html&#34; target=&#34;_blank&#34;&gt;libc++ C++2a Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/STL/wiki/Changelog&#34; target=&#34;_blank&#34;&gt;次リリース情報 - Visual Studio 2019 change log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/editors_doc/cpo_template_page.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:editors_doc/cpo_template_page.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/editors_doc/cpo_template_page.md b/editors_doc/cpo_template_page.md
new file mode 100644
index 000000000..748bc7c96
--- /dev/null
+++ b/editors_doc/cpo_template_page.md
@@ -0,0 +1,111 @@
+# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+
+([cpprefjpを編集するには](start_editing.md) および [cpprefjp特有の拡張構文](specialized.md) を先に読んで下さい。)
+
+(
+  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
+  その際拡張構文である`example`タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
+)
+
+* header_name[meta header]
+* cpo[meta id-type]
+* std[meta namespace]
+* cpp20[meta cpp]
+
+&amp;lt;!-- `[meta header]`は、所属ヘッダを表すメタ情報 --&amp;gt;
+&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, concept, macro, namespace。全てがのオーバーロードが関数テンプレートならfunction templateを使用し、そうでなければfunctionを使用する --&amp;gt;
+&amp;lt;!-- `[meta namespace]`は、所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは`::` --&amp;gt;
+&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;
+&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;
+
+```cpp
+namespace std {
+  inline namespace /*unspecified*/ {
+
+    inline constexpr /*unspecified*/ cponame = /*unspecified*/;
+  }
+}
+```
+
+## 概要
+(ここには、カスタマイゼーションポイントオブジェクトの概要を記述します。必須事項です。)
+
+(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)
+
+
+## 効果
+(ここには、カスタマイゼーションポイントオブジェクトの内部で行われる効果:effect を記述します。)
+
+
+## 戻り値
+(ここには、カスタマイゼーションポイントオブジェクトの戻り値を記述します。戻り値の型が`void`の場合は、「なし」と記述してください。)
+
+
+## 例外
+(ここには、例外送出の有無、例外送出の条件と送出される例外、例外を抄出しない条件、例外送出後の変数・オブジェクトの状態 (例外安全性) などを記述します。`noexcept`なら「投げない」を記述します。規格上とくに明記がなければ、項目を削除してください。)
+
+
+## 定数式に評価される条件
+(`constexpr`評価される条件を記述します。)
+
+
+## カスタマイゼーションポイント
+(ここには、カスタマイゼーションポイントオブジェクトにアダプトする方法を記述します。)
+
+
+## 備考
+(ここには、カスタマイゼーションポイントオブジェクトを説明するにあたっての、補足事項を記述します。とくになければ、項目を削除してください。)
+
+
+## 例
+```cpp example
+// (ここには、カスタマイゼーションポイントオブジェクトを解説するための、サンプルコードを記述します。)
+// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)
+
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  int variable = 0;
+  std::cout &amp;lt;&amp;lt; variable &amp;lt;&amp;lt; std::endl;
+}
+```
+* variable[color ff0000]
+
+(コードブロック中の識別子に、文字色を付ける例です。)
+
+### 出力
+```
+0
+```
+
+(ここには、サンプルコードの実行結果を記述します。何も出力がない場合は、項目を削除せず、空の出力にしてください。)  
+(実行結果が処理系・実行環境によって異なる場合は、項目名を「出力例」に変更し、可能であればその理由も併記してください。)
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): 10.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+(ここには、その機能が存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)
+(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)
+(確認のテストできないときは、??を記述してください。)
+
+### 備考
+(処理系ごとに存在するバグや注意事項を記述します。とくにない場合は、項目を削除してください。)
+
+
+## 関連項目
+(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+
+## 参照
+(ここには、そのカスタマイゼーションポイントオブジェクトを理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/editors_doc/named_requirement_template_page.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:editors_doc/named_requirement_template_page.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/editors_doc/named_requirement_template_page.md b/editors_doc/named_requirement_template_page.md
new file mode 100644
index 000000000..7b45cbfeb
--- /dev/null
+++ b/editors_doc/named_requirement_template_page.md
@@ -0,0 +1,78 @@
+# page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)
+
+([cpprefjpを編集するには](start_editing.md) および [cpprefjp特有の拡張構文](specialized.md) を先に読んで下さい。)
+
+(
+  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
+  その際拡張構文である`example`タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
+)
+
+* named requirement[meta id-type]
+* cpp17[meta cpp]
+
+&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。named requirementを指定してください --&amp;gt;
+&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;
+&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;
+&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;
+&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;
+&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;
+
+## 概要
+(ここには、名前付き要件の概要を記述します。必須事項です。)
+
+(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)
+
+`Requirement`は、型がxxであることを表す要件である。
+
+
+## 要件
+(ここには、名前付き要件で要求される内容を記述します)
+
+## 備考
+(ここには、名前付き要件を説明するにあたっての、補足事項を記述します。とくになければ、項目を削除してください。)
+
+## `Requirement`に該当する型
+(ここには、名前付き要件に該当する型を列挙します。とくに必要がないと判断した場合、項目を削除してください。)
+
+* xx型
+* yy型
+
+## 例
+```cpp example
+// (ここには、名前付き要件を解説するための、サンプルコードを記述します。)
+// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)
+
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+}
+```
+
+### 出力
+```
+```
+
+(ここには、サンプルコードの実行結果を記述します。何も出力がない場合は、項目を削除せず、空の出力にしてください。)  
+(実行結果が処理系・実行環境によって異なる場合は、項目名を「出力例」に変更し、可能であればその理由も併記してください。)
+
+## バージョン
+### 言語
+- C++17
+
+## 関連項目
+(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
+## 参照
+(ここには、その名前付き要件を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp特有の拡張構文 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/editors_doc/specialized.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:editors_doc/specialized.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/editors_doc/specialized.md b/editors_doc/specialized.md
index 1d7c809cf..da2eeeae5 100644
--- a/editors_doc/specialized.md
+++ b/editors_doc/specialized.md
@@ -176,9 +176,9 @@ Warning: [editors_doc/specialized.md] href &amp;#34;/reference/foobar.md (/reference/foo
 
 ````
 ```cpp
-#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;std_header&amp;gt;
 ```
-* &amp;lt;iostream&amp;gt;[link /reference/iostream.md.nolink]
+* &amp;lt;std_header&amp;gt;[link /reference/std_header.md.nolink]
 ````
 
 このように`link`のURLの最後に `.nolink` を指定すると、リンク先が存在しなかった場合には、以下の様なメッセージが **標準出力に** 出力されます。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイラの実装状況 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/implementation-status.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:implementation-status.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;コンパイラの実装状況&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;このページでは、C++のバージョンごとの言語機能を、どのコンパイラがどのバージョンからサポートしているかをまとめる。&lt;/p&gt;
&lt;p&gt;ライブラリ機能については、本サイトのリファレンスで各機能を参照してもらいたい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp11&#34;&gt;C++11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp14&#34;&gt;C++14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp17&#34;&gt;C++17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp20&#34;&gt;C++20&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp11&#34; id=&#34;cpp11&#34;&gt;C++11言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alignas.html&#34;&gt;alignas&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;2003あるいはそれ以前からある&lt;code&gt;__declspec(align(x))&lt;/code&gt;構文で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alignof.html&#34;&gt;alignof&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント取得&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;2003あるいはそれ以前よりある&lt;code&gt;__alignof&lt;/code&gt;で代替可能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/auto.html&#34;&gt;auto&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型推論&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/decltype.html&#34;&gt;decltype&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の型を取得&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;2010 (partial)&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C99互換のプリプロセッサ&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/variadic_macros.html&#34;&gt;可変引数マクロ&lt;/a&gt;、&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/pragma_operator.html&#34;&gt;Pragma演算子&lt;/a&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/func.html&#34;&gt;__func__&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2005 (partial): 可変引数のみ &lt;code&gt;_Pragma&lt;/code&gt;の代わりに&lt;code&gt;__pragma&lt;/code&gt;が存在する。&lt;br /&gt; 2019 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/constexpr.html&#34;&gt;constexpr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定数式&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015 (partial)&lt;br /&gt; 2015 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html&#34;&gt;関数の&lt;code&gt;default/delete&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;自動定義される特殊関数の制御&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2013: ムーブコンストラクタ・ムーブ代入演算子の&lt;code&gt;default&lt;/code&gt;は不可&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html&#34;&gt;移譲コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタから他のコンストラクタに処理を移譲する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/explicit_conversion_operator.html&#34;&gt;明示的な型変換演算子のオーバーロード&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;明示的な型変換が行われる場合にのみ呼び出される演算子をオーバーロードできるようにする&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/extend_friend_targets.html&#34;&gt;&lt;code&gt;friend&lt;/code&gt;宣言できる対象を拡張&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータや型の別名を&lt;code&gt;friend&lt;/code&gt;宣言&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial) &lt;br /&gt; 12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/extern_template.html&#34;&gt;extern template&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートのインスタンス化抑止&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/inheriting_constructors.html&#34;&gt;継承コンストラクタ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのコンストラクタを継承する&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/lambda_expressions.html&#34;&gt;ラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクトをその場に書く&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010 (partial)&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/local_and_unnamed_type_as_template_arguments.html&#34;&gt;ローカル型と無名型を、テンプレート引数として使用することを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ローカルおよび無名として定義したクラスや列挙型を、テンプレート引数として渡せるようにする&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/long_long_type.html&#34;&gt;&lt;code&gt;long long&lt;/code&gt;型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;64ビット以上の大きさを持つ整数型&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/inline_namespaces.html&#34;&gt;インライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ネストした名前空間に、透過的にアクセスする&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/char16_32.html&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-16とUTF-32の文字型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1 (Windows: partial) &lt;br /&gt; 12.1 (GNU/Linux, macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt; 2010より組み込み型ではなく型の別名として存在する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html&#34;&gt;UTF-8文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;の文字列をUTF-8エンコーディングするプレフィックス&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.1 (Windows: partial) &lt;br /&gt; 12.1 (GNU/Linux, macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/raw_string_literals.html&#34;&gt;生文字列リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルにRプレフィックスを付けることで、エスケープシーケンスを無視する&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/user_defined_literals.html&#34;&gt;ユーザー定義リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リテラルのサフィックスをユーザー定義する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/trailing_return_types.html&#34;&gt;戻り値の型を後置する関数宣言構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;以下のような形式での関数宣言&lt;br /&gt; &lt;code&gt;auto f(arg_types...) -&amp;gt; return_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/nullptr.html&#34;&gt;nullptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌルポインタを表すポインタリテラル&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/right_angle_brackets.html&#34;&gt;テンプレートの右山カッコ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;basic_string&amp;lt;char&amp;gt;&amp;gt;&lt;/code&gt;のように、&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;をスペースを空けずに記述可能にする&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html&#34;&gt;右辺値参照・ムーブセマンティクス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;右辺値によるオーバーロード、およびそれによるリソースの所有権移動&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.6&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2010 (partial) ムーブコンストラクタと代入演算子の暗黙定義に対応していない。&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/static_assert.html&#34;&gt;コンパイル時アサート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に条件式が真であることを表明する&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/scoped_enum.html#extended-unscoped-enum&#34;&gt;&lt;code&gt;enum&lt;/code&gt;の先行宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/scoped_enum.html&#34;&gt;スコープを持つ列挙型&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;強い型付けとスコープを持つ列挙型&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/alias_templates.html&#34;&gt;エイリアステンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートによって型の別名を定義する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/unrestricted_unions.html&#34;&gt;共用体の制限解除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体のメンバ変数として、クラスオブジェクトを持つ&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0(Linux系OSおよびMacのみ。Windowsは非対応)&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/variadic_templates.html&#34;&gt;可変引数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;任意の数のテンプレートパラメータを受け取れるようにする&lt;/td&gt;
&lt;td&gt;4.3 (partial)&lt;br /&gt; 4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/range_based_for.html&#34;&gt;範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;配列やコンテナといった範囲を表すオブジェクトを、簡潔に走査する&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/override_final.html&#34;&gt;&lt;code&gt;override&lt;/code&gt;と&lt;code&gt;final&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数のオーバーライド指定、および派生クラスでのオーバーロードを禁止する指定&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2005 (partial): &lt;code&gt;override&lt;/code&gt;のみ。&lt;code&gt;final&lt;/code&gt;の代わりにsealedが存在する。ただし両者ともデストラクタには指定できない。&lt;br /&gt; 2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/attributes.html&#34;&gt;属性構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[attr]]&lt;/code&gt;構文による、クラス、関数、変数の属性指定&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;12.1&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/ref_qualifier_for_this.html&#34;&gt;メンバ関数の左辺値／右辺値修飾&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;オブジェクトが左辺値／右辺値の場合のみ呼び出し可能であることの指定&lt;/td&gt;
&lt;td&gt;4.8.1&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/non_static_data_member_initializers.html&#34;&gt;非静的メンバ変数の初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ変数を、宣言と同時に初期値指定する&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/initializer_lists.html&#34;&gt;初期化子リスト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;波括弧による初期化をユーザー定義する。&lt;code&gt;vector&amp;lt;int&amp;gt; v = {1, 2, 3};&lt;/code&gt;など。&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/uniform_initialization.html&#34;&gt;一様初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ呼び出しを波カッコで行う。 &lt;code&gt;T x { a, b, c };&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/noexcept.html&#34;&gt;noexcept&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の例外指定、例外を投げる可能性のある式かbool値を返す演算子&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;13.0(partial)&lt;br /&gt;14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/sfinae_expressions.html&#34;&gt;任意の式によるSFINAE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の式が有効かどうかで、その関数をオーバーロード解決に含めるかどうかを決定する&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;2015 Update 1 (partial)&lt;br /&gt; 2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html&#34;&gt;スレッドローカルストレージ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;スレッドごとに異なる静的記憶域に保持される変数&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;11.1 (partial)&lt;/td&gt;
&lt;td&gt;2010&lt;br /&gt; &lt;code&gt;__declspec(thread)&lt;/code&gt;属性での部分サポート&lt;br /&gt; 2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11/static_initialization_thread_safely.html&#34;&gt;ブロックスコープを持つ&lt;code&gt;static&lt;/code&gt;変数初期化のスレッドセーフ化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数ローカルで定義した&lt;code&gt;static&lt;/code&gt;変数の初期化を、スレッドセーフにする&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;2.9&lt;/td&gt;
&lt;td&gt;11.0 (Lnux/macOS)&lt;br /&gt; 14.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++11実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体的な対応状況： &lt;a href=&#34;https://wiki.apache.org/stdcxx/C++0xCompilerSupport&#34; target=&#34;_blank&#34;&gt;C++0xCompilerSupport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC： &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx11&#34; target=&#34;_blank&#34;&gt;C++11 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++ : &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2011&#34; target=&#34;_blank&#34;&gt;C++ 2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang： &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98 and C++11 Support in Clang&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://clang.llvm.org/cxx_dr_status.html&#34; target=&#34;_blank&#34;&gt;C++ Defect Report Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC : &lt;a href=&#34;https://software.intel.com/en-us/articles/c0x-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++11 Features Supported by Intel® C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp14&#34; id=&#34;cpp14&#34;&gt;C++14言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/binary_literals.html&#34;&gt;2進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2進数を表す&lt;code&gt;0b&lt;/code&gt; or &lt;code&gt;0B&lt;/code&gt;プレフィックスを付けた数値リテラルの記述を可能とする&lt;/td&gt;
&lt;td&gt;4.3(GNU)&lt;br /&gt; 4.9&lt;/td&gt;
&lt;td&gt;3.2&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/return_type_deduction_for_normal_functions.html&#34;&gt;通常関数の戻り値型推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値型を&lt;code&gt;auto&lt;/code&gt;にすることで、&lt;code&gt;return&lt;/code&gt;文から戻り値の型を推論させる&lt;/td&gt;
&lt;td&gt;4.8(partial)&lt;br /&gt;4.9&lt;/td&gt;
&lt;td&gt;3.3(partial)&lt;br /&gt; 3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/initialize_capture.html&#34;&gt;ラムダ式の初期化キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャに代入構文を導入し、一つの変数に複数のキャプチャ方法を指定可能にする&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/generic_lambdas.html&#34;&gt;ジェネリックラムダ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のパラメータを&lt;code&gt;auto&lt;/code&gt;にすることで、ジェネリックな関数呼び出し演算子を持つ関数オブジェクトを生成する&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/variable_templates.html&#34;&gt;変数テンプレート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数定義時のテンプレート指定を可能にする。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;の制限緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;文、&lt;code&gt;switch&lt;/code&gt;文による条件分岐の許可。&lt;br /&gt;&lt;code&gt;for&lt;/code&gt;文、&lt;code&gt;while&lt;/code&gt;文、&lt;code&gt;do-while&lt;/code&gt;文によるループの許可。&lt;br /&gt;&lt;code&gt;void&lt;/code&gt;戻り値型の許可&lt;br /&gt;初期化を伴う変数宣言の許可。&lt;br /&gt;変数書き換えの許可。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.3(partial) &lt;br /&gt; 3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/brace_elision_in_array_temporary_initialization.html&#34;&gt;宣言時のメンバ初期化を持つ型の集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様初期化と初期化子リストを組み合わせた際、二重に波カッコが必要となっていた仕様を緩和し、波カッコを省略できるようにする&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/deprecated_attr.html&#34;&gt;&lt;code&gt;[[deprecated]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非推奨の機能であることを示す属性。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;15.0&lt;br /&gt; (Linux/Mac OS)&lt;/td&gt;
&lt;td&gt;2015&lt;br /&gt;それ以前は&lt;code&gt;__declspec(deprecated)&lt;/code&gt;で代替可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/digit_separators.html&#34;&gt;数値リテラルの桁区切り文字&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シングルクォーテーションで数値リテラルを桁区切りする。&lt;/td&gt;
&lt;td&gt;4.9&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14/sized_deallocation.html&#34;&gt;サイズ付きデアロケーション&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;サイズをとる&lt;code&gt;delete&lt;/code&gt;演算子のオーバーロードを許可する。&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.4&lt;/td&gt;
&lt;td&gt;16.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++14実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx14&#34; target=&#34;_blank&#34;&gt;C++14 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++: &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2014&#34; target=&#34;_blank&#34;&gt;C++ 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++98, C++11, and C++14 Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++: &lt;a href=&#34;http://libcxx.llvm.org/cxx1y_status.html&#34; target=&#34;_blank&#34;&gt;libc++ C++1Y Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://software.intel.com/en-us/articles/c14-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++14 Features Supported by Intel C++ Compiler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://software.intel.com/en-us/forums/topic/549502&#34; target=&#34;_blank&#34;&gt;Intel (R) Parallel Studio XE 2016 Beta program has begun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp17&#34; id=&#34;cpp17&#34;&gt;C++17言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/extending_static_assert.html&#34;&gt;メッセージなしの&lt;code&gt;static_assert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトの表明メッセージを使用する&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/removing_trigraphs.html&#34;&gt;トライグラフを削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/allow_typename_in_a_template_template_parameter.html&#34;&gt;テンプレートテンプレートパラメータに&lt;code&gt;typename&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;class&lt;/code&gt;キーワードしか使用できなかった部分に、&lt;code&gt;typename&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/new_rules_for_auto_deduction_from_braced-init-list.html&#34;&gt;単一要素初期化子リストを&lt;code&gt;auto&lt;/code&gt;で受け取った場合の型を変更&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;initializer_list&amp;lt;T&amp;gt;&lt;/code&gt;だったのを&lt;code&gt;T&lt;/code&gt;に変更&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/folding_expressions.html&#34;&gt;畳み込み式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックに対する2項演算の集積処理&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html&#34;&gt;UTF-8文字リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルだけでなく、文字リテラルにもUTF-8指定できるようにする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nested_namespace.html&#34;&gt;入れ子名前空間の定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace A::B {}&lt;/code&gt;のように、入れ子の名前空間を簡単に定義できるようにする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/attributes_for_namespaces_and_enumerators.html&#34;&gt;名前空間と列挙子に属性の付加を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;名前空間の定義と、列挙型の各要素の定義に、属性を付けられるようにする&lt;/td&gt;
&lt;td&gt;名前空間は4.0&lt;br /&gt;列挙子は6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;17.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/allow_constant_evaluation_for_all_non-type_template_arguments.html&#34;&gt;全ての非型テンプレート引数の定数式評価を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポインタの定数式評価として、配列からポインタへの変換や、関数から関数ポインタへの変換などを許可&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_use_of_the_register_keyword.html&#34;&gt;非推奨だった&lt;code&gt;register&lt;/code&gt;キーワードを削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html&#34;&gt;非推奨だった&lt;code&gt;bool&lt;/code&gt;型オブジェクトに対するインクリメントの仕様を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/exception_spec_be_part_of_the_type_system.html&#34;&gt;例外仕様を型システムの一部にする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/has_include.html&#34;&gt;プリプロセッサでの条件式&lt;code&gt;__has_include&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対象のインクルードファイルが存在するかをプリプロセス時に判定する&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0136r1.html&#34; target=&#34;_blank&#34;&gt;継承コンストラクタの新仕様&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルト引数を引き継ぐようにした&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/fallthrough.html&#34;&gt;&lt;code&gt;[[fallthrough]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;case&lt;/code&gt;節で&lt;code&gt;break&lt;/code&gt;や&lt;code&gt;return&lt;/code&gt;を書かなかった場合に、それが意図したフォールスルーであることをコンパイラに伝える属性&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/nodiscard.html&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならないことをユーザーに伝える属性&lt;/td&gt;
&lt;td&gt;4.8からは&lt;code&gt;[[gnu::warn_unused_result]]&lt;/code&gt;を使用すること&lt;br /&gt; 7からサポート&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/maybe_unused.html&#34;&gt;&lt;code&gt;[[maybe_unused]]&lt;/code&gt;属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用しない可能性がある変数であることをコンパイラに伝える属性&lt;/td&gt;
&lt;td&gt;4.8からは&lt;code&gt;[[gnu::unused]]&lt;/code&gt;を使用すること&lt;br /&gt; 7からサポート&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0017r1.html&#34; target=&#34;_blank&#34;&gt;基底クラスのメンバ変数を集成体初期化するための波カッコを省略できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;基底クラスのメンバを集成体初期化するために、&lt;code&gt;derived d {{42}};&lt;/code&gt;の代わりに&lt;code&gt;derived d {42};&lt;/code&gt;と書けるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/constexpr_lambda.html&#34;&gt;ラムダ式を&lt;code&gt;constexpr&lt;/code&gt;として使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式の関数オブジェクトが定数式の文脈で使用された場合に、それがコンパイル時に評価されるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/generalizing_the_range-based_for_loop.html&#34;&gt;範囲for文のための&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;関数が、異なる型を返すことを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;と&lt;code&gt;end()&lt;/code&gt;が異なるイテレータ型を返せるようにすることで、終端イテレータを定義しやすくする&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html&#34;&gt;ラムダ式での&lt;code&gt;*this&lt;/code&gt;のコピーキャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャリストに&lt;code&gt;*this&lt;/code&gt;を指定することで、&lt;code&gt;*this&lt;/code&gt;をコピーキャプチャする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/construction_enum_class_values.html&#34;&gt;&lt;code&gt;enum class&lt;/code&gt;変数の初期値として整数を指定する際の規則を調整&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャストを使用することなく整数を初期値として使用し、&lt;code&gt;E e{0};&lt;/code&gt;のような初期化を許可&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;1.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/hexadecimal_floating_literals.html&#34;&gt;浮動小数点数の16進数リテラル&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hexfloat&lt;/code&gt;マニピュレータや&lt;code&gt;printf()&lt;/code&gt;の16進数出力に合わせて、浮動小数点数のリテラルも16進数表記できるようにする&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/using_attribute_namespaces.html&#34;&gt;属性の名前空間指定に繰り返しをなくす&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[using CC: opt(1), debug]]&lt;/code&gt;のように属性の名前空間宣言をまとめて行う&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/dynamic_memory_allocation_for_over-aligned_data.html&#34;&gt;アライメント指定されたデータの動的メモリ確保&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator new&lt;/code&gt;と&lt;code&gt;operator delete&lt;/code&gt;でアライメント値を取得できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html&#34;&gt;クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタの引数からクラスのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/declaring_non-type_template_arguments_with_auto.html&#34;&gt;非型テンプレート引数の&lt;code&gt;auto&lt;/code&gt;宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;template &amp;lt;typename T, T x&amp;gt;&lt;/code&gt;という冗長なコードを&lt;code&gt;template &amp;lt;auto x&amp;gt;&lt;/code&gt;のようにして受けられるようにし、&lt;br /&gt; &lt;code&gt;X&amp;lt;3&amp;gt;; X&amp;lt;true&amp;gt;; X&amp;lt;&#39;a&#39;&amp;gt;&lt;/code&gt;のように定数を簡潔に渡せるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html&#34;&gt;値のコピー省略を保証&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一時オブジェクトをコピーする際に、単純な値を持つクラスであればコピーが省略されることを保証する&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/expression_evaluation_order.html&#34;&gt;厳密な式の評価順&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;式の項が評価される順序を厳密に規定する。&lt;br /&gt; &lt;code&gt;b = a;&lt;/code&gt;の式が右から順番(a, bの順)に評価される&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/non_standard_attributes.html&#34;&gt;不明な属性を無視する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実装が知らない名前空間の属性は無視する&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/if_constexpr.html&#34;&gt;constexpr if文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(cond)&lt;/code&gt;とすることで、そのif文はコンパイル時に処理される&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0296r2.html&#34; target=&#34;_blank&#34;&gt;処理の進行保証&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;並行処理に関して「処理の進行」を明確に定義&lt;br /&gt; (TODO:言葉の定義だけなので実装状況ページからは取り除く)&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/inline_variables.html&#34;&gt;インライン変数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インライン指定を関数だけでなく変数にも指定できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;19.0&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0391r0.html&#34; target=&#34;_blank&#34;&gt;templated entityという用語を導入&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;(TODO:言葉の定義だけなので実装状況ページからは取り除く)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/structured_bindings.html&#34;&gt;構造化束縛&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;タプルやユーザー定義型を分解して受け取れるようにする&lt;br /&gt; &lt;code&gt;tuple&amp;lt;int, string&amp;gt; f();&lt;/code&gt; &lt;br /&gt; &lt;code&gt;const auto [a, b] = f(); // aはintの値、bはstringの値&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/selection_statements_with_initializer.html&#34;&gt;if文とswitch文の条件式と初期化を分離&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if (init; condition)&lt;/code&gt;のように初期化と条件式を分けて記述できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;18.0&lt;/td&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/replacement_of_class_objects_containing_reference_members.html&#34;&gt;参照メンバをもつクラスの置き換え&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照型メンバや&lt;code&gt;const&lt;/code&gt;データメンバを含むクラスについてこれまで結果は未定義とされていた配置&lt;code&gt;new&lt;/code&gt;によるオブジェクトの置き換えを条件付きで可能とする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/remove_deprecated_exception_specifications.html&#34;&gt;非推奨だった例外仕様を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;noexcept&lt;/code&gt;が入ったことによって非推奨になった&lt;code&gt;throw&lt;/code&gt;キーワードによる例外仕様を削除&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17/pack_expansions_in_using.html&#34;&gt;using宣言でのパック展開&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;パラメータパックの型を基底クラスとして指定した場合に、&lt;code&gt;using&lt;/code&gt;宣言に基底クラスのパラメータパックを指定できるようにする&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0512r0.pdf&#34; target=&#34;_blank&#34;&gt;クラステンプレート引数の推論仕様を調整&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0490r0.html&#34; target=&#34;_blank&#34;&gt;Committee Draftに対するNational Body Commentへの対応&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0522r0.html&#34; target=&#34;_blank&#34;&gt;テンプレートテンプレート引数のマッチングにおいて、互換性のあるテンプレートを除外&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4 (partial)&lt;/td&gt;
&lt;td&gt;19.1&lt;/td&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++17実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx17&#34; target=&#34;_blank&#34;&gt;C++17 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++ Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++ : &lt;a href=&#34;http://libcxx.llvm.org/cxx1z_status.html&#34; target=&#34;_blank&#34;&gt;libc++ C++1z Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2018/05/07/announcing-msvc-conforms-to-the-c-standard/&#34; target=&#34;_blank&#34;&gt;Announcing: MSVC Conforms to the C++ Standard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ICC: &lt;a href=&#34;https://software.intel.com/en-us/articles/c17-features-supported-by-intel-c-compiler&#34; target=&#34;_blank&#34;&gt;C++17 Features Supported by Intel C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html#cpp20&#34; id=&#34;cpp20&#34;&gt;C++20言語機能の実装状況&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;MSVC&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html&#34;&gt;ビットフィールドのメンバ変数初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドメンバ変数のデフォルト値を設定する構文を追加する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html&#34;&gt;ラムダ式のキャプチャとして&lt;code&gt;[=, this]&lt;/code&gt;を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトコピーキャプチャと&lt;code&gt;this&lt;/code&gt;ポインタのコピーキャプチャを両方指定できるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html&#34;&gt;&lt;code&gt;[=]&lt;/code&gt;による&lt;code&gt;this&lt;/code&gt;の暗黙のキャプチャを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コピーのデフォルトキャプチャでは、&lt;code&gt;this&lt;/code&gt;ポインタをキャプチャされなくする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックラムダでテンプレートパラメータを定義できるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html&#34;&gt;&lt;code&gt;const&lt;/code&gt;修飾されたメンバポインタの制限を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.*&lt;/code&gt;演算子での左辺値の&lt;code&gt;const&lt;/code&gt;メンバ関数呼び出しを許可する&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/va_opt.html&#34;&gt;可変引数が空でない場合のトークン置換&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの置換で可変引数が空の場合に余計なカンマが付いてしまう問題に対処&lt;/td&gt;
&lt;td&gt;8 (partial, &lt;code&gt;#__VA_OPT__&lt;/code&gt;による文字列化が未サポート)&lt;/td&gt;
&lt;td&gt;6.0&lt;br /&gt; 9.0 (&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1042r1.html&#34; target=&#34;_blank&#34;&gt;p1042&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0329r4.pdf&#34; target=&#34;_blank&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0734r0.pdf&#34; target=&#34;_blank&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータに対する制約を行う&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html&#34;&gt;初期化式をともなう範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲for文スコープで使用する変数の初期化のための構文を追加&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0588r1.html&#34; target=&#34;_blank&#34;&gt;暗黙のラムダキャプチャを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0846r0.html&#34; target=&#34;_blank&#34;&gt;関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0641r2.html&#34; target=&#34;_blank&#34;&gt;デフォルトのコピーコンストラクタと非&lt;code&gt;const&lt;/code&gt;なコンストラクタが衝突する問題を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0859r0.html&#34; target=&#34;_blank&#34;&gt;評価されない文脈で&lt;code&gt;constexpr&lt;/code&gt;関数が定数式評価されることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0515r3.pdf&#34; target=&#34;_blank&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0857r0.html&#34; target=&#34;_blank&#34;&gt;ラムダ式の制約&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0692r1.html&#34; target=&#34;_blank&#34;&gt;特殊化のアクセスチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0624r2.pdf&#34; target=&#34;_blank&#34;&gt;状態を持たないラムダ式を、デフォルト構築可能、代入可能とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;PODを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0315r4.pdf&#34; target=&#34;_blank&#34;&gt;評価されない文脈でのラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0840r2.html&#34; target=&#34;_blank&#34;&gt;空オブジェクトを言語サポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[no_unique_address]]&lt;/code&gt;属性を導入し、空の型のオブジェクトをほかのオブジェクトと共有する最適化を許可する&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html&#34;&gt;範囲for文がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;メンバ関数のどちらかが見つからなかった場合に非メンバ関数の&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html&#34;&gt;friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構造化束縛の仕様として公開メンバ変数のみを取り出せるようになっていたが、friend指定された関数からは非公開メンバ変数にもアクセスできるようにする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html&#34;&gt;構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非テンプレートの&lt;code&gt;get()&lt;/code&gt;メンバ関数が見つかった場合は、非メンバ関数の&lt;code&gt;get()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html&#34; target=&#34;_blank&#34;&gt;型の文脈で&lt;code&gt;typename&lt;/code&gt;の省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型しか現れない文脈では、依存名を解決するための&lt;code&gt;typename&lt;/code&gt;キーワードを省略できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0780r2.html&#34; target=&#34;_blank&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[...args = std::move(args)]&lt;/code&gt;のようなキャプチャを許可&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0479r5.html&#34; target=&#34;_blank&#34;&gt;当たる確率が高い分岐と、当たる確率が低い分岐をコンパイラに伝える属性を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイラが分岐予測するためのヒントとする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0905r1.html&#34; target=&#34;_blank&#34;&gt;宇宙船演算子に対称性をもたせる&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;=&amp;gt; b&lt;/code&gt;が妥当であれば&lt;code&gt;b &amp;lt;=&amp;gt; a&lt;/code&gt;も妥当とする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0929r2.html&#34; target=&#34;_blank&#34;&gt;抽象型のチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の宣言段階では、パラメータおよび戻り値型が抽象型かどうかをチェックしないようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0732r2.pdf&#34; target=&#34;_blank&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::strong_equality&lt;/code&gt;に変換可能な非メンバ関数&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;をもつ型を、非型テンプレートパラメータとして使用できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0722r1.html&#34; target=&#34;_blank&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラスの&lt;code&gt;delete&lt;/code&gt;演算子が呼び出される前にデストラクタが呼ばれないようにするオプションを追加&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;仮想関数に&lt;code&gt;constexpr&lt;/code&gt;を付けられない制限を解除&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1327r1.html&#34; target=&#34;_blank&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式での動的多態を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1002r1.pdf&#34; target=&#34;_blank&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でtry-catchブロックを書けるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1073r3.html&#34; target=&#34;_blank&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;consteval&lt;/code&gt;キーワードを追加し、常に定数式評価されるよう指定できるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1330r0.pdf&#34; target=&#34;_blank&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体メンバの書き換えを定数式内で行えるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1008r1.pdf&#34; target=&#34;_blank&#34;&gt;ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタが&lt;code&gt;delete&lt;/code&gt;宣言されているクラスを、集成体初期化によってコンストラクタ呼び出しを回避して構築できてしまっていた技法を禁止&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html&#34; target=&#34;_blank&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;事前条件、事後条件、表明を宣言する新たな属性構文を追加&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html&#34; target=&#34;_blank&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;explicit(true)&lt;/code&gt;のように&lt;code&gt;explicit&lt;/code&gt;に真理値パラメータを指定できるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html&#34;&gt;符号付き整数型が2の補数表現であることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;符号付き整数型のビット表現を2の補数に規定する&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r6.html&#34; target=&#34;_blank&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-8エンコードされた文字かどうかでオーバーロード・特殊化をできるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7 (&lt;code&gt;-fchar8_t&lt;/code&gt;オプションが必要)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1094r2.html&#34; target=&#34;_blank&#34;&gt;入れ子名前空間定義でのインライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace ns1::inline ns2::ns3 {}&lt;/code&gt;のように、入れ子名前空間を定義する式にインライン名前空間の指定を含められるようにする&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html&#34;&gt;構造化束縛を拡張して通常の変数宣言のように使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;記憶域指定子として&lt;code&gt;static&lt;/code&gt;と&lt;code&gt;thread_local&lt;/code&gt;の指定を許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.md.nolink&#34;&gt;構造化束縛したビットフィールドの参照キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドを含む構造化束縛をした場合にラムダ式で参照キャプチャできない規定を緩和し、ビットフィールドを直接参照キャプチャ、もしくはデフォルト参照キャプチャして使用しなければ適格とする&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T x{1, 2, 3};&lt;/code&gt;と同様に&lt;code&gt;T x(1, 2, 3);&lt;/code&gt;でも集成体初期化できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.md.nolink&#34;&gt;&lt;code&gt;new&lt;/code&gt;式での配列要素数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;double* p = new double[]{1,2,3};&lt;/code&gt;を許可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.md.nolink&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルを、文字コードUTF-16/32に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;、&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;の定義に関係なく、&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;のリテラルをUTF-16/32文字コードに規定する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヘッダファイル・ソースファイル、インクルードに変わる仕組みとしてモジュールを導入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8.0 partial (&lt;code&gt;-fmodules&lt;/code&gt;, &lt;code&gt;-fmodules-ts&lt;/code&gt;が必要)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;partial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数実行を中断・再開する仕組みとしてコルーチンを導入する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8.0 (partial)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md.nolink&#34;&gt;添字演算子内でのカンマ演算子の使用を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ar[i, j]&lt;/code&gt;を非推奨化。&lt;code&gt;ar[(i, j)]&lt;/code&gt;はOK&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md.nolink&#34;&gt;constexprの文脈での自明なデフォルト初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でのデフォルト初期化を許可し、未初期化値を読むことのみ禁止する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.md.nolink&#34;&gt;特殊メンバ関数の条件付き自明定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;制約によって自明な特殊メンバ関数と非自明な特殊メンバ関数をオーバーロードできるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/nodiscard_should_have_a_reason.md.nolink&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性に理由となる文字列を付加できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならない理由を関数宣言に持たせ、警告メッセージに役立てる&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;using enum EnumType;&lt;/code&gt;もしくは&lt;code&gt;using EnumType::enumerator&lt;/code&gt;とすることで、列挙値のスコープ指定を省略できるようにする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/class_template_argument_deduction_for_aggregates.md.nolink&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラステンプレートのテンプレート引数推論はコンストラクタ引数から推論されるが、集成体初期化からも推論できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md.nolink&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない場合にconstexpr関数にasm定義を含めることを許可&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md.nolink&#34;&gt;要素数不明の配列への変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数が判明している配列から、要素数が不明の配列への変換を許可&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/constinit.md.nolink&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;初期化のみコンパイル時におわらせたい場合に使用する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.md.nolink&#34;&gt;ほとんどの&lt;code&gt;volatile&lt;/code&gt;を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;volatile&lt;/code&gt;の有用な機能のみを残し、効果が疑わしい、または壊れている機能を非推奨化する&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/class_template_argument_deduction_for_alias_templates.md.nolink&#34;&gt;エイリアステンプレートに対するクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エイリアステンプレートからクラステンプレートのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/cpp20/more_constexpr_containers.md.nolink&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;記憶域をもつメモリアロケータの存在を考慮することで、可変サイズをもつコンテナをコンパイル時に使用できるようにする&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各処理系のC++20実装状況ページ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC: &lt;a href=&#34;https://gcc.gnu.org/projects/cxx-status.html#cxx2a&#34; target=&#34;_blank&#34;&gt;C++20 Support in GCC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clang: &lt;a href=&#34;http://clang.llvm.org/cxx_status.html&#34; target=&#34;_blank&#34;&gt;C++ Support in Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libstdc++: &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2020&#34; target=&#34;_blank&#34;&gt;C++ 2020 Implementation Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;libc++: &lt;a href=&#34;http://libcxx.llvm.org/cxx2a_status.html&#34; target=&#34;_blank&#34;&gt;libc++ C++2a Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ (MSVC):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/cpp/visual-cpp-language-conformance&#34; target=&#34;_blank&#34;&gt;Visual C++ 言語への準拠&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/STL/wiki/Changelog&#34; target=&#34;_blank&#34;&gt;次リリース情報 - Visual Studio 2019 change log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>処理系 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/implementation.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:implementation.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;処理系&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GNU Compiler Collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;Intel C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Microsoft Visual C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;本サイトにおける処理系バージョンに記載&lt;/h2&gt;
&lt;p&gt;本サイトのリファレンスページでは、「処理系」の項目にバージョン番号を記載している。これは、処理系がその機能をサポート開始した厳密なバージョンではなく、リファレンス執筆者が動作確認できたバージョンである。&lt;/p&gt;
&lt;p&gt;古くからサポートされている機能だが、古い処理系を入手することが難しい場合などがあるため、本サイトではこのようなルールになっている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34; id=&#34;clang&#34;&gt;Clang&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは Clang と呼ぶ。「クラン(グ)」と読む。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://clang.llvm.org/&#34; target=&#34;_blank&#34;&gt;&#34;clang&#34; C Language Family Frontend for LLVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;clang&lt;/li&gt;
&lt;li&gt;clang++&lt;/li&gt;
&lt;li&gt;Apple LLVMコンパイラ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-std=c++11&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clang 3.2から3.4までは、&lt;code&gt;-std=c++1y&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1y&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 3.5以降は、&lt;code&gt;-std=c++14&lt;/code&gt;オプションを使用する(以前までのオプションも使用できる)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++14&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 6.0以降は、C++14がデフォルトとなる。デフォルトバージョンのコンパイルオプションは&lt;code&gt;-std=gnu++14&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clang 3.5から4.0までは、&lt;code&gt;-std=c++1z&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1z&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 5.0以降は、&lt;code&gt;-std=c++17&lt;/code&gt;オプションを使用する(以前までのオプションも使用できる)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++17&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++20の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clang 6.0以降は、&lt;code&gt;-std=c++2a&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34; id=&#34;gcc&#34;&gt;GNU Compiler Collection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは GCC と呼ぶ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34; target=&#34;_blank&#34;&gt;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mingw.org/&#34; target=&#34;_blank&#34;&gt;MinGW | Minimalist GNU for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.equation.com/servlet/equation.cmd?fa=fortran&#34; target=&#34;_blank&#34;&gt;Fortran, C, C++ for Windows&lt;/a&gt; (MinGW バイナリ)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;gcc&lt;/li&gt;
&lt;li&gt;g++&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.3から4.6までは、&lt;code&gt;-std=c++0x&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++0x&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 4.7以降は、&lt;code&gt;-std=c++11&lt;/code&gt;オプションを使用する (旧オプションは非推奨)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++11&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.8から4.9までは、&lt;code&gt;-std=c++1y&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1y&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 5.1以降は、&lt;code&gt;-std=c++14&lt;/code&gt;オプションを使用する (旧オプションは非推奨)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++14&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 6.1以降は、C++14がデフォルトとなる。デフォルトバージョンのコンパイルオプションは&lt;code&gt;-std=gnu++14&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 6.1以降は、&lt;code&gt;-std=c++1z&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1z&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 7.1以降は、&lt;code&gt;-std=c++17&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++17&lt;/code&gt;オプションもある (旧オプションは非推奨)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 11.1以降は、C++17がデフォルトとなる。デフォルトバージョンのコンパイルオプションは&lt;code&gt;-std=gnu++17&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++20の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 8.1以降は、&lt;code&gt;-std=c++2a&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++2a&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 10.1以降は、&lt;code&gt;-std=c++20&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++20&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34; id=&#34;icc&#34;&gt;Intel C++ Compiler&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは ICC と呼ぶ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xlsoft.com/jp/products/intel/compilers/ccl/index.html?tab=0&#34; target=&#34;_blank&#34;&gt;XLsoft エクセルソフト : インテル C++ Composer XE Linux 版/インテル C++ コンパイラー XE Linux 版 製品紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xlsoft.com/jp/products/intel/compilers/ccl/index.html?tab=0&#34; target=&#34;_blank&#34;&gt;XLsoft エクセルソフト : インテル C++ Composer XE Mac OS 版/インテル C++ コンパイラー XE Mac OS 版 製品紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xlsoft.com/jp/products/intel/compilers/ccw/index.html?tab=0&#34; target=&#34;_blank&#34;&gt;XLsoft エクセルソフト : インテル C++ Composer XE Windows 版/インテル C++ コンパイラー XE Windows 版 製品紹介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ICC&lt;/li&gt;
&lt;li&gt;ICL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windowsでは&lt;code&gt;/Qstd:c++11&lt;/code&gt;、Linux/macOSでは&lt;code&gt;-std=c++11&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ICC 16.0からは、Windowsでは&lt;code&gt;/Qstd:c++14&lt;/code&gt;オプション、Linux/macOSでは&lt;code&gt;-std=c++14&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ICC 17.0からは、Windowsでは&lt;code&gt;/Qstd:c++17&lt;/code&gt;オプション、Linux/macOSでは&lt;code&gt;-std=c++17&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34; id=&#34;visual_cpp&#34;&gt;Microsoft Visual C++&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは Visual C++ と呼ぶ。Visual Studio 2012 以降、Visual C++は独立した製品名ではなくなり製品Visual Studioのみに含まれるようになったが、当サイトでは製品に含まれているコンポーネント名としてのVisual C++を採用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/ja-jp/visual-studio-homepage-vs.aspx&#34; target=&#34;_blank&#34;&gt;Visual Studio - Microsoft Developer Tools&lt;/a&gt;: Visual C++を含む統合開発環境。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/ja/downloads/&#34; target=&#34;_blank&#34;&gt;Build Tools for Visual Studio&lt;/a&gt;: コマンドラインのみからコンパイルするために必要な環境を構築するもの。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VC&lt;/li&gt;
&lt;li&gt;VC++&lt;/li&gt;
&lt;li&gt;MSVC&lt;/li&gt;
&lt;li&gt;cl&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp_ver&#34; id=&#34;visual_cpp_ver&#34;&gt;バージョンの表記&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下に当サイトにおけるバージョン表記と、製品・バージョン等の対応を示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表記&lt;/th&gt;
&lt;th&gt;製品名 [Visual Studio バージョン] &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-1&#34; id=&#34;note_ref-t1-1&#34;&gt;†1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;VC++ バージョン &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-2&#34; id=&#34;note_ref-t1-2&#34;&gt;†2&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;_MSC_VER&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;_MSC_FULL_VER&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.6.2&lt;/td&gt;
&lt;td&gt;14.26&lt;/td&gt;
&lt;td&gt;1926&lt;/td&gt;
&lt;td&gt;192628806&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.5.1&lt;/td&gt;
&lt;td&gt;14.25&lt;/td&gt;
&lt;td&gt;1925&lt;/td&gt;
&lt;td&gt;192528611&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.4.0&lt;/td&gt;
&lt;td&gt;14.24&lt;/td&gt;
&lt;td&gt;1924&lt;/td&gt;
&lt;td&gt;192428314&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.3.2&lt;/td&gt;
&lt;td&gt;14.23&lt;/td&gt;
&lt;td&gt;1923&lt;/td&gt;
&lt;td&gt;192328105&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.2.3&lt;/td&gt;
&lt;td&gt;14.22&lt;/td&gt;
&lt;td&gt;1922&lt;/td&gt;
&lt;td&gt;192227905&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.1.2&lt;/td&gt;
&lt;td&gt;14.21&lt;/td&gt;
&lt;td&gt;1921&lt;/td&gt;
&lt;td&gt;192127702&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.0.0&lt;/td&gt;
&lt;td&gt;14.20&lt;/td&gt;
&lt;td&gt;1920&lt;/td&gt;
&lt;td&gt;192027508&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.11&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;191627030&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.7&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;191627027&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.5&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;191627026&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.4&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;191627025&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.1&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;191627023&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.0&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 8&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.8.0&lt;/td&gt;
&lt;td&gt;14.15&lt;/td&gt;
&lt;td&gt;1915&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.7.5&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;1914&lt;/td&gt;
&lt;td&gt;191426433&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.7.3&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;1914&lt;/td&gt;
&lt;td&gt;191426430&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.7.2&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;1914&lt;/td&gt;
&lt;td&gt;191426429&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.7.1&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;1914&lt;/td&gt;
&lt;td&gt;191426428&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.7&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326132&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.6&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326131&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.4&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326129&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.3&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326129&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.2&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.1&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.0&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.7&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225835&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.6&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225835&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.4&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225834&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.3&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225834&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.2&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225831&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.4.5&lt;/td&gt;
&lt;td&gt;14.11&lt;/td&gt;
&lt;td&gt;1911&lt;/td&gt;
&lt;td&gt;191125547&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.4.4&lt;/td&gt;
&lt;td&gt;14.11&lt;/td&gt;
&lt;td&gt;1911&lt;/td&gt;
&lt;td&gt;191125542&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.3.3&lt;/td&gt;
&lt;td&gt;14.11&lt;/td&gt;
&lt;td&gt;1911&lt;/td&gt;
&lt;td&gt;191125507&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 2 &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-3&#34; id=&#34;note_ref-t1-3-a&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.2&lt;/td&gt;
&lt;td&gt;14.10&lt;/td&gt;
&lt;td&gt;1910&lt;/td&gt;
&lt;td&gt;191025017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 1 &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-3&#34; id=&#34;note_ref-t1-3-b&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.1&lt;/td&gt;
&lt;td&gt;14.10&lt;/td&gt;
&lt;td&gt;1910&lt;/td&gt;
&lt;td&gt;191025017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.0&lt;/td&gt;
&lt;td&gt;14.10 &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-4&#34; id=&#34;note_ref-t1-4&#34;&gt;†4&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;1910&lt;/td&gt;
&lt;td&gt;191025017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2015 Update 3 [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190024210&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2015 Update 2 [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190023918&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015 Update 1&lt;/td&gt;
&lt;td&gt;Visual Studio 2015 Update 1 [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190023506&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;Visual Studio 2015          [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190023026&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 5 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180040629&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 4 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180031101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 3 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180030723&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 2 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180030501&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 1 &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note-t1-3&#34; id=&#34;note_ref-t1-3-c&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 1 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180021005&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;Visual Studio 2013          [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180021005&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 4 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170061030&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 3 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170060610&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 2 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170060315&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 1&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 1 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170051106&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;td&gt;Visual Studio 2012          [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170050727&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2010 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio 2010 SP1      [10.0]&lt;br /&gt;Visual C++ 2010 SP1     [10.0]&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;td&gt;160040219&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;td&gt;Visual Studio 2010          [10.0]&lt;br /&gt;Visual C++ 2010         [10.0]&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;td&gt;160030319&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2008 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio 2008 SP1      [9.0] &lt;br /&gt;Visual C++ 2008 SP1     [9.0]&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;150030729&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2008&lt;/td&gt;
&lt;td&gt;Visual Studio 2008          [9.0] &lt;br /&gt;Visual C++ 2008         [9.0]&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;150021022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2005 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio 2005 SP1      [8.0] &lt;br /&gt;Visual C++ 2005 SP1     [8.0]&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;td&gt;140050727&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;td&gt;Visual Studio 2005          [8.0] &lt;br /&gt;Visual C++ 2005         [8.0]&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;td&gt;140050320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows Server 2003 SP1 DDK (for AMD64)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;td&gt;140040310&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2003 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio .NET 2003 SP1 [7.1]&lt;br /&gt;Visual C++ .NET 2003 SP1 [7.1]&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13106030&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows Server 2003 SP1 DDK&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13104035&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;td&gt;Visual Studio .NET 2003     [7.1]&lt;br /&gt;Visual C++ .NET 2003     [7.1]&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13103077&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio Toolkit 2003  [7.1]&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13103052&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows Server 2003 DDK&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13102179&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2002&lt;/td&gt;
&lt;td&gt;Visual Studio .NET 2002     [7.0]&lt;br /&gt;Visual C++ .NET 2002     [7.0]&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;td&gt;13009466&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows XP SP1 DDK&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;td&gt;13009176&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.0 SP6&lt;/td&gt;
&lt;td&gt;Visual Studio 6.0 SP6&lt;br /&gt;Visual C++ 6.0 SP6&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;1200&lt;/td&gt;
&lt;td&gt;12008804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.0 SP5&lt;/td&gt;
&lt;td&gt;Visual Studio 6.0 SP5&lt;br /&gt;Visual C++ 6.0 SP5&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;1200&lt;/td&gt;
&lt;td&gt;12008804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 97 [5.0]&lt;br /&gt;Visual C++ 5.0&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 4.2&lt;/td&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;1020&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 4.1&lt;/td&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;td&gt;1010&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 4.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 2.0&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Microsoft C/C++ 7.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Microsoft C 6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-1&#34; id=&#34;note-t1-1&#34;&gt;^&lt;/a&gt;&lt;/strong&gt; 製品名の列にはVisual C++コンパイラを含む実際に入手する製品の名称を示す。製品のエディション (Express/Standard/Professional/Enterprise/Community 他) は省略する。Visual Studioの製品バージョンは、製品名に現れていないときは &lt;code&gt;[ ～ ]&lt;/code&gt; 内に記す。製品バージョンは、2017以降、メインメニューの [ヘルプ]-[Microsoft Visual Studio のバージョン情報] から確認できるものを指す。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-2&#34; id=&#34;note-t1-2&#34;&gt;^&lt;/a&gt;&lt;/strong&gt; VC++バージョンの列にはVisual C++ツールセットのバージョンを記述する。この表では特にVisual C++を入れた時に既定で選択されるツールセットのみについて扱う。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;note-t1-3&#34;&gt;^&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-3-a&#34;&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-3-b&#34;&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-3-c&#34;&gt;&lt;strong&gt;c&lt;/strong&gt;&lt;/a&gt;&lt;/sup&gt; IDEのみ修正され、コンパイラ、ヘッダー、ライブラリ等は変更されなかった。&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2017/08/11/c17-features-and-stl-fixes-in-vs-2017-15-3/&#34; target=&#34;_blank&#34;&gt;C++17 Features And STL Fixes In VS 2017 15.3 | Visual C++ Team Blog&lt;/a&gt; - &#34;&lt;em&gt;After VS 2017 RTM, the 15.1 and 15.2 updates improved the IDE. The 15.3 update improves both the IDE and the toolset.&lt;/em&gt;&#34;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/en-us/help/2911573/description-of-visual-studio-2013-update-1&#34; target=&#34;_blank&#34;&gt;Description of Visual Studio 2013 Update 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#note_ref-t1-4&#34; id=&#34;note-t1-4&#34;&gt;^&lt;/a&gt;&lt;/strong&gt; 2017は2015とバイナリ互換が保たれているためメジャーバージョンアップは行われなかった。その結果、製品バージョンとVisual C++バージョンが一致しなくなった。
  &lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2017/03/07/binary-compatibility-and-pain-free-upgrade-why-moving-to-visual-studio-2017-is-almost-too-easy/&#34; target=&#34;_blank&#34;&gt;Binary Compatibility and Pain-free Upgrade: Why Moving to Visual Studio 2017 is almost “too easy”&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015以降、Visual Studioの既定のインストールではVisual C++は入らなくなった。Visual StudioのインストーラでVisual C++コンポーネントを選択する必要がある。
  &lt;a href=&#34;https://docs.microsoft.com/ja-JP/previous-versions/60k1461a(v=vs.140)?redirectedfrom=MSDN&#34; target=&#34;_blank&#34;&gt;Visual Studio 2015 の Visual C++&lt;/a&gt; の [警告] を参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;2017 Update 5からside-by-sideがサポートされ、一つの製品内で同時に複数のVisual C++ツールセットを選択できるようになった。
  &lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2017/11/15/side-by-side-minor-version-msvc-toolsets-in-visual-studio-2017/&#34; target=&#34;_blank&#34;&gt;Side-by-side minor version MSVC toolsets in Visual Studio 2017 | Visual C++ Team Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11は常に有効である&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++14は常に有効である&lt;/li&gt;
&lt;li&gt;2015 Update 3から&lt;code&gt;/std:c++14&lt;/code&gt;オプションが導入されたが既定値でありC++14を無効化する機能は提供されていない。&lt;code&gt;_MSVC_LANG&lt;/code&gt;マクロの値は&lt;code&gt;201402&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2015 Update 2以前に実装された機能については、互換性の観点から常に有効である&lt;/li&gt;
&lt;li&gt;2015 Update 3以降に実装された機能については、&lt;code&gt;/std:c++17&lt;/code&gt;オプションを使用する。&lt;code&gt;_MSVC_LANG&lt;/code&gt;マクロの値は&lt;code&gt;201703&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;最新バージョンの言語機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2015 Update 3以降は&lt;code&gt;/std:c++latest&lt;/code&gt;オプションを使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/build/reference/std-specify-language-standard-version&#34; target=&#34;_blank&#34;&gt;-std (Specify Language Standard Version) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros&#34; target=&#34;_blank&#34;&gt;Predefined Macros | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2016/06/07/standards-version-switches-in-the-compiler/&#34; target=&#34;_blank&#34;&gt;Standards version switches in the compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:index.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjp - C++日本語リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;最新C++バージョンのリファレンスを提供していきます。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190112041213/http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;本サイトは、サイトの改善のためにGoogleアナリティクスを使用しています。本サイトをご利用中のブラウザは、Googleに特定の情報を自動的に送信します。本サイトは、この分析のためにCookieを使用します。利用者は、本サイトを利用することで、この目的においてCookieを使用することを許可したものとみなします。&lt;/p&gt;
&lt;p&gt;Googleによるデータ使用の詳細は、以下のURLで確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/ja/policies/privacy/partners/&#34; target=&#34;_blank&#34;&gt;https://www.google.com/intl/ja/policies/privacy/partners/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのアイコン・ロゴ画像は、&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 (CC BY-NC-ND 4.0)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;高解像度画像データ： &lt;a href=&#34;https://github.com/cpprefjp/image/tree/master/cpprefjp/icon&#34; target=&#34;_blank&#34;&gt;cpprefjp/image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++国際標準規格 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/international-standard.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:international-standard.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++国際標準規格&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#summary&#34; id=&#34;summary&#34;&gt;概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++ の標準規格の実例として ISO/IEC による&lt;strong&gt;国際標準規格&lt;/strong&gt; (international standard) がある。
最新の国際標準規格は「ISO/IEC 14882:2017 Programming Languages -- C++」(通称 C++17) である。
C++ の標準規格は、他にも各国の規格化団体によって国際標準規格に等価なものが定められている。
日本では日本工業標準調査会 (JISC) により「JIS X 3014:2003 プログラム言語C++」が定められているが古い (C++03 相当)。
ここでは特に国際標準規格について取り扱う。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#list-of-iso-cpp&#34; id=&#34;list-of-iso-cpp&#34;&gt;国際標準規格の一覧&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;通称&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-1&#34; id=&#34;note_ref-t1-1&#34;&gt;†1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;参照する規格案&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-2&#34; id=&#34;note_ref-t1-2&#34;&gt;†2&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;規格案・原案&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23.html&#34;&gt;C++23&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2023 (予定)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;--&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4861&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;--&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20.html&#34;&gt;C++20&lt;/a&gt; (C++2a)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2020 (予定)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4861&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-3&#34; id=&#34;note_ref-t1-3&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;(&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;)/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4861/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4860 N4849 N4842 N4835 N4830&lt;br /&gt;N4820 N4810 N4800 N4791 &lt;del&gt;N4788&lt;/del&gt;&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-4&#34; id=&#34;note_ref-t1-4&#34;&gt;†4&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;N4778 N4762 N4750 N4741 N4727&lt;br /&gt;N4713 N4700 N4687&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;--&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17.html&#34;&gt;C++17&lt;/a&gt; (C++1z)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4659(&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4659/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4660 N4659 N4640 N4618 N4606&lt;br /&gt;N4594 N4582 N4567 N4527 N4431&lt;br /&gt;N4296&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201703L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14.html&#34;&gt;C++14&lt;/a&gt; (C++1y)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2014&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4140(&lt;a href=&#34;https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4140/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4141 N4140 N3937 N3936 N3797&lt;br /&gt;N3691 N3690 N3485 N3376 N3337&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201402L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11.html&#34;&gt;C++11&lt;/a&gt; (C++0x)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N3337&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-5&#34; id=&#34;note_ref-t1-5&#34;&gt;†5&lt;/a&gt;&lt;/sup&gt;(&lt;a href=&#34;https://wg21.link/std11&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n3337/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N3291 N3290 N3242 N3225 N3126&lt;br /&gt;N3090 N3035 N3000 N2960 N2914&lt;br /&gt;N2857 N2798 N2723 N2691 N2606&lt;br /&gt;N2588 N2521 N2461 N2369 N2315&lt;br /&gt;N2284 N2134 N2009 N1905 N1804&lt;br /&gt;N1733 N1655&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201103L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C++03&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2003&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N1577&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N1577 ?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;199711L&lt;/code&gt;&lt;br /&gt;(C++98 と同じ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C++98&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:1998&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;199711L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-1&#34; id=&#34;note-t1-1&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; 括弧内は策定時・標準化前に一時的に用いられた通称&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-2&#34; id=&#34;note-t1-2&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; 最終国際規格案はPDFやHTMLなどの形で一般公開されていないため、それにほぼ同一の内容の規格案を参照する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-3&#34; id=&#34;note-t1-3&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N4861 は、C++20 DISであるN4860に対するデザインレベルの差とC++17との相互参照がない以外の差はないため、事実上 N4861 が C++20 を参照する時に用いられる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-4&#34; id=&#34;note-t1-4&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N4788 は政治的事情により撤回された (参照 N4792)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-5&#34; id=&#34;note-t1-5&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N3337 は、C++11規格に対する編集レベルの修正のみが適用された仕様案であるため、事実上 N3337 が C++11 を参照する時に用いられる。C++11規格からN3337への変更点は、&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3338.html&#34; target=&#34;_blank&#34;&gt;N3338&lt;/a&gt;を参照。&lt;br /&gt;
(それより前の公開されているC++11向け仕様案であるN3242からC++11規格に対しては、機能的な変更がいくつかあるため、C++11規格として参照するには適さない)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最新のDraftのHTML版は以下で公開されている。&lt;br /&gt;
&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/&#34; target=&#34;_blank&#34;&gt;Draft C++ Standard: Contents&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;標準規格の文章はtexで書かれており、そのソースコードは以下で2011年8月16日以降のものについて(つまりN3291より後、N3337より前)公開されている。&lt;br /&gt;
&lt;a href=&#34;https://github.com/cplusplus/draft&#34; target=&#34;_blank&#34;&gt;cplusplus/draft: C++ standards drafts&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#iso-cpp-committee&#34; id=&#34;iso-cpp-committee&#34;&gt;用語: 国際標準規格を定める組織&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C++標準化委員会&lt;/strong&gt; (C++ Standards Committee): C++ の国際標準規格を策定する団体。
  組織としての位置づけはISO/IEC JTC1/SC22/WG21になる。
  &lt;strong&gt;国際標準化機構&lt;/strong&gt; (ISO; international organization for standardization) および&lt;strong&gt;国際電気標準会議&lt;/strong&gt; (IEC; International Electronics Commission) はそれぞれ様々な規格の標準化団体である。
  &lt;strong&gt;第一合同技術委員会&lt;/strong&gt; (JTC1; Joint Technical Committee 1) は ISO/IEC の下で情報技術の標準化を行う団体である。
  下部組織の SC22 はプログラム言語の標準化を行う&lt;strong&gt;副委員会&lt;/strong&gt; (SC; subcommittee) である。
  C++標準化委員会は WG21 という&lt;strong&gt;作業グループ&lt;/strong&gt; (WG; working group) である。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CWG&lt;/strong&gt; (Core working group): C++標準化委員会の内、コア言語機能の策定を行う作業グループ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LWG&lt;/strong&gt; (Library working group): C++標準化委員会の内、標準ライブラリ機能の策定を行う作業グループ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NB&lt;/strong&gt; (national body) または&lt;strong&gt;MB/NC&lt;/strong&gt; (member body/national committee): C++標準化委員会の正会員つまり各国から派遣される団体のこと。本来は member body は ISO での名称で、national committee は IEC での名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#iso-cpp-documents&#34; id=&#34;iso-cpp-documents&#34;&gt;用語: 国際標準規格の文書&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提案&lt;/strong&gt; (proposal): 標準規格の変更についての提案文書&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;問題&lt;/strong&gt; (issue): C++標準規格の問題や課題のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠陥&lt;/strong&gt; (defect): C++標準規格に含まれるいわば &#34;バグ&#34; のこと&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DR&lt;/strong&gt; (defect report, defect resolution): 委員会で承認された欠陥の報告または欠陥の修正のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NAD&lt;/strong&gt; (not a defect): 委員会により標準規格の欠陥ではないとされた問題のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DRWP&lt;/strong&gt;: 最新の規格原案に取り込み済みの DR のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WD&lt;/strong&gt; (working draft): 作業原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CD&lt;/strong&gt; (committee draft): 委員会原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FCD&lt;/strong&gt; (final committee draft): 最終委員会原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DIS&lt;/strong&gt; (draft international standard): 国際規格案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FDIS&lt;/strong&gt; (final draft international standard): 最終国際規格案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IS&lt;/strong&gt; (international standard): 国際規格&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TR&lt;/strong&gt; (technical report): 技術報告書。用例: TR1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TS&lt;/strong&gt; (technical specifications): 技術仕様書。用例: Concepts TS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;標準規格&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/68564.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2017 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/64029.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2014 - Information technology -- Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/50372.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2011 - Information technology -- Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/38110.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2003 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/25845.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:1998 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://webdesk.jsa.or.jp/books/W11M0090/index/?bunsyo_id=JIS%20X%203014:2003&#34; target=&#34;_blank&#34;&gt;JIS X 3014:2003 プログラム言語Ｃ＋＋／Information Technology -- Programming languages -- C++ 日本規格協会 JSA Webdesk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.cppreference.com/w/cpp/experimental&#34; target=&#34;_blank&#34;&gt;Experimental C++ Features - cppreference.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/29115656/which-draft-is-closest-to-the-c14-standard&#34; target=&#34;_blank&#34;&gt;c++ - Which draft is closest to the C++14 standard? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/81656/where-do-i-find-the-current-c-or-c-standard-documents&#34; target=&#34;_blank&#34;&gt;Where do I find the current C or C++ standard documents? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/11053960/how-are-the-cplusplus-directive-defined-in-various-compilers&#34; target=&#34;_blank&#34;&gt;c++ - How are the __cplusplus directive defined in various compilers? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee - ISOCPP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%9B%BD%E9%9A%9B%E6%A8%99%E6%BA%96%E5%8C%96%E6%A9%9F%E6%A7%8B&#34; target=&#34;_blank&#34;&gt;国際標準化機構 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%9B%BD%E9%9A%9B%E9%9B%BB%E6%B0%97%E6%A8%99%E6%BA%96%E4%BC%9A%E8%AD%B0&#34; target=&#34;_blank&#34;&gt;国際電気標準会議 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/ISO/IEC_JTC_1&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC 1 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/ISO/IEC_JTC_1/SC_22&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC 1/SC 22 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>属性構文 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/attributes.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp11/attributes.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/attributes.md b/lang/cpp11/attributes.md
index e060c678b..a268b81cb 100644
--- a/lang/cpp11/attributes.md
+++ b/lang/cpp11/attributes.md
@@ -52,7 +52,7 @@ int main()
 
 
 ### &amp;lt;a id=&amp;#34;carries_dependency&amp;#34; href=&amp;#34;#carries_dependency&amp;#34;&amp;gt;`[[carries_dependency]]`属性&amp;lt;/a&amp;gt;
-`[[carries_dependency]]`は、並行プログラミングのアトミック操作において、値に依存した順序付け [`memory_order_consume`](/reference/atomic/memory_order.md)を、関数をまたいで伝搬することを明示するための属性である。
+`[[carries_dependency]]`は、並行プログラミングのアトミック操作において、値に依存した順序付け [`memory_order_consume`](/reference/atomic/memory_order.md)を、関数をまたいで伝播することを明示するための属性である。
 
 以下は、[`memory_order_consume`](/reference/atomic/memory_order.md)を使用した順序付けの例である：
 
@@ -70,10 +70,10 @@ if (r1) {
 * x.load[link /reference/atomic/atomic/load.md]
 * memory_order_consume[link /reference/atomic/memory_order.md]
 
-ここでは、`r1`に関連する操作が全て同一関数内で行われているが、一部の操作が別の関数になっていると、別の関数になった操作に値の依存があるかどうか・依存として扱ってよいのかどうかがコンパイラに判断できない可能性がある。そのような状況で、関数のパラメータおよび戻り値のそれぞれが値の依存性を伝搬させることを明示するために`[[carries_dependency]]`属性を使用する。
+ここでは、`r1`に関連する操作が全て同一関数内で行われているが、一部の操作が別の関数になっていると、別の関数になった操作に値の依存があるかどうか・依存として扱ってよいのかどうかがコンパイラに判断できない可能性がある。そのような状況で、関数のパラメータおよび戻り値のそれぞれが値の依存性を伝播させることを明示するために`[[carries_dependency]]`属性を使用する。
 
 
-#### 関数の戻り値で値の依存性を伝搬させる
+#### 関数の戻り値で値の依存性を伝播させる
 関数の戻り値に対して値の依存性を持たせる場合、関数に対して`[[carries_dependency]]`属性を付加する。
 
 ```cpp
@@ -94,7 +94,7 @@ if (r1) {
 * memory_order_consume[link /reference/atomic/memory_order.md]
 
 
-#### 関数のパラメータで値の依存性を伝搬させる
+#### 関数のパラメータで値の依存性を伝播させる
 関数のパラメータに対して値の依存性を持たせる場合、各パラメータ名のうしろに`[[carries_dependency]]`属性を付加する。
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>char16_tとchar32_t -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/char16_32.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp11/char16_32.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/char16_32.md b/lang/cpp11/char16_32.md
index b90b22c70..70fbf7195 100644
--- a/lang/cpp11/char16_32.md
+++ b/lang/cpp11/char16_32.md
@@ -130,7 +130,7 @@ int main()
 - [`wstring_convert`](/reference/locale/wstring_convert.md)
 - [C++11 UTF-8文字列リテラル](utf8_string_literals.md)
 - [C++20 UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
-
+- [ostream `operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream_free.md)
 
 ## 参照
 - [WG14 N1040 Extensions for the programming language C to support new character data types](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1040.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>移譲コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/delegating_constructors.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp11/delegating_constructors.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/delegating_constructors.md b/lang/cpp11/delegating_constructors.md
index 11f904a9e..1f6aa6494 100644
--- a/lang/cpp11/delegating_constructors.md
+++ b/lang/cpp11/delegating_constructors.md
@@ -22,10 +22,10 @@ public:
 
 ## 仕様
 - コンストラクタのメンバ初期化子(mem-initializer-list)は、他のコンストラクタに処理の移譲ができる
+    - このとき、メンバ初期化子の要素は1つでなければならない(他のコンストラクタ以外の要素を持ってはならない)
 - 移譲コンストラクタによる直接的・間接的な再帰は許可しない。再帰が検出された場合、プログラムは不適格となる
 - 移譲先のコンストラクタから例外が送出された場合、移譲先のコンストラクタの関数tryブロックのcatch節が呼び出され、そこから暗黙に再送出が行われ、移譲元の関数tryブロックのcatch節も呼び出される。
 
-
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字列リテラル -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp11/utf8_string_literals.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/utf8_string_literals.md b/lang/cpp11/utf8_string_literals.md
index 51ea16936..bf640e9cb 100644
--- a/lang/cpp11/utf8_string_literals.md
+++ b/lang/cpp11/utf8_string_literals.md
@@ -15,6 +15,7 @@ char t[] = u8&amp;#34;\U00020BB7野家&amp;#34;; // 𠮷野家
 
 `u8`プレフィックスを指定しない場合は、実装定義のマルチバイト文字コードにエンコードされる。その実装定義の文字コードは、ASCII文字コードと互換があることは保証されない。そのため、UTF-8のASCII互換部分が、実装定義の文字コードと互換があることも、保証されない。
 
+C++20ではUTF-8文字リテラルの型が[`const char[N]`ではなく`const char8_t[N]`になる](/lang/cpp20/char8_t.md)
 
 ## 仕様
 - 文字列リテラルに`u8`プレフィックスを付けることで、UTF-8にエンコードされた`char`型の配列に初期化される。
@@ -65,7 +66,7 @@ int main()
 - [C++11 `char16_t`と`char32_t`](char16_32.md)
 - [C++17 UTF-8文字リテラル](/lang/cpp17/utf8_character_literals.md)
 - [C++20 UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
-
+- [ostream `operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream_free.md)
 
 ## 参照
 - [N2159 UTF-8 String Literals](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2159.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++17 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp17.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp17.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17.md b/lang/cpp17.md
index 001b7d0db..d72dcc2f8 100644
--- a/lang/cpp17.md
+++ b/lang/cpp17.md
@@ -181,7 +181,7 @@ C++17以降、言語の策定にship train modelというリリース体制が
     - 値を変換しながら部分和を求める関数として、[`transform_inclusive_scan()`](/reference/numeric/transform_inclusive_scan.md)と[`transform_exclusive_scan()`](/reference/numeric/transform_exclusive_scan.md)を追加
 - 値を範囲内に収める[`clamp()`](/reference/algorithm/clamp.md)関数を追加
 - `bool`を返す関数オブジェクトの結果を反転させる[`not_fn()`](/reference/functional/not_fn.md)関数を追加
-- [*INVOKE*](/reference/concepts/Invoke.md)コンセプトに従った関数呼び出しをする[`invoke()`](/reference/functional/invoke.md)関数を追加
+- [*INVOKE*](/reference/concepts/Invoke.md)要件に従った関数呼び出しをする[`invoke()`](/reference/functional/invoke.md)関数を追加
 - [`reference_wrapper`](/reference/functional/reference_wrapper.md)がTriviallyCopyableであることを保証
 - オブジェクトを`const`にする[`as_const()`](/reference/utility/as_const.md)関数を追加
 - 未初期化メモリのアルゴリズムと、デストラクタ呼び出しの関数として、以下の関数を追加： [`destroy_at()`](/reference/memory/destroy_at.md), [`destroy()`](/reference/memory/destroy.md), [`destroy_n()`](/reference/memory/destroy_n.md), [`uninitialized_move()`](/reference/memory/uninitialized_move.md), [`uninitialized_move_n()`](/reference/memory/uninitialized_move_n.md), [`uninitialized_value_construct()`](/reference/memory/uninitialized_value_construct.md), [`uninitialized_value_construct_n()`](/reference/memory/uninitialized_value_construct_n.md), [`uninitialized_default_construct()`](/reference/memory/uninitialized_default_construct.md), [`uninitialized_default_construct_n()`](/reference/memory/uninitialized_default_construct_n.md)
@@ -264,7 +264,7 @@ C++17以降、言語の策定にship train modelというリリース体制が
 
 ### 乱数
 - ランダムサンプリングアルゴリズムとして、[`sample()`](/reference/algorithm/sample.md)を追加
-- 乱数用語を変更。乱数生成器のコンセプトに 「URNG (Uniform Random Number Generator, 一様乱数生成器)」という用語を使用していたが、一般的なURNGの用語とは異なり、C++の乱数生成器は一度の呼び出しで、(32ビットを超えるような) より多くのビットを単一の符号なし整数にパックして返すという動作が許可されている。動作の誤解を避けるために、「URBG (Uniform Random Bit Generator)」という用語に変更する
+- 乱数用語を変更。乱数生成器の要件に 「URNG (Uniform Random Number Generator, 一様乱数生成器)」という用語を使用していたが、一般的なURNGの用語とは異なり、C++の乱数生成器は一度の呼び出しで、(32ビットを超えるような) より多くのビットを単一の符号なし整数にパックして返すという動作が許可されている。動作の誤解を避けるために、「URBG (Uniform Random Bit Generator)」という用語に変更する
 
 
 ### エラーハンドリング
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>畳み込み式 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/folding_expressions.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp17/folding_expressions.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/folding_expressions.md b/lang/cpp17/folding_expressions.md
index 509d4b756..ba37f5a0f 100644
--- a/lang/cpp17/folding_expressions.md
+++ b/lang/cpp17/folding_expressions.md
@@ -243,3 +243,4 @@ auto res =  (std::string(args) + ...);
 * [N4295 Folding expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html)
 * [N4358 Unary Folds and Empty Parameter Packs](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4358.pdf)
 * [P0036 Unary Folds and Empty Parameter Packs (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0036r0.pdf)
+* [Nifty Fold Expression Tricks - foonathan::blog()](https://foonathan.net/2020/05/fold-tricks/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8文字リテラル -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp17/utf8_character_literals.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/utf8_character_literals.md b/lang/cpp17/utf8_character_literals.md
index 6aede84e1..7c93dac3e 100644
--- a/lang/cpp17/utf8_character_literals.md
+++ b/lang/cpp17/utf8_character_literals.md
@@ -9,6 +9,7 @@ char s[] = u8&amp;#34;あいうえお&amp;#34;; // OK : C++11以降
 char c = u8&amp;#39;A&amp;#39;; // OK : C++17以降
 ```
 
+C++20ではUTF-8文字リテラルの型が[`char`ではなく`char8_t`になる](/lang/cpp20/char8_t.md)
 
 ## 仕様
 - `u8`プレフィックスが付いた文字リテラルは、`char`文字型の、UTF-8文字リテラルとなる
@@ -20,6 +21,8 @@ char c = u8&amp;#39;A&amp;#39;; // OK : C++17以降
 ## 関連項目
 - [C++11 UTF-8文字列リテラル](/lang/cpp11/utf8_string_literals.md)
 - [C++11 `char16_t`と`char32_t`](/lang/cpp11/char16_32.md)
+- [C++20 UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
+- [ostream `operator&amp;lt;&amp;lt;`](/reference/ostream/basic_ostream/op_ostream_free.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++20 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++20&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20とは、2020年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++2aと呼ばれることがあった。「202a年にリリースされる」という伏せ字として「a」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;クラス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;三方比較演算子によって比較演算子の自動生成を行うようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html&#34;&gt;ビットフィールドのメンバ変数初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドメンバ変数のデフォルト値を設定する構文を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/explicit_bool.html&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;explicit(true)&lt;/code&gt;のように&lt;code&gt;explicit&lt;/code&gt;に真理値パラメータを指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html&#34;&gt;&lt;code&gt;const&lt;/code&gt;修飾されたメンバポインタの制限を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.*&lt;/code&gt;演算子での左辺値の&lt;code&gt;const&lt;/code&gt;メンバ関数呼び出しを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;デフォルトのコピーコンストラクタと非&lt;code&gt;const&lt;/code&gt;なコンストラクタが衝突する問題を修正&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;特殊化のアクセスチェック&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html&#34;&gt;空オブジェクトに対する最適化を支援する属性&lt;code&gt;[[no_unique_address]]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[no_unique_address]]&lt;/code&gt;属性を導入し、空の型のオブジェクトをほかのオブジェクトと共有する最適化を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html&#34;&gt;friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構造化束縛の仕様として公開メンバ変数のみを取り出せるようになっていたが、friend指定された関数からは非公開メンバ変数にもアクセスできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html&#34;&gt;構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非テンプレートの&lt;code&gt;get()&lt;/code&gt;メンバ関数が見つかった場合は、非メンバ関数の&lt;code&gt;get()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/checking_for_abstract_class_types.md.nolink&#34;&gt;抽象型のチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の宣言段階では、パラメータおよび戻り値型が抽象型かどうかをチェックしないようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md.nolink&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラスの&lt;code&gt;delete&lt;/code&gt;演算子が呼び出される前にデストラクタが呼ばれないようにするオプションを追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.md.nolink&#34;&gt;特殊メンバ関数の条件付き自明定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;制約によって自明な特殊メンバ関数と非自明な特殊メンバ関数をオーバーロードできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;列挙型&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;using enum EnumType;&lt;/code&gt;もしくは&lt;code&gt;using EnumType::enumerator&lt;/code&gt;とすることで、列挙値のスコープ指定を省略できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/designated_initialization.html&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;波カッコによる集成体初期化でメンバ名を指定して初期化できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html&#34;&gt;構造化束縛を拡張して通常の変数宣言のように使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;記憶域指定子として&lt;code&gt;static&lt;/code&gt;と&lt;code&gt;thread_local&lt;/code&gt;の指定を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T x{1, 2, 3};&lt;/code&gt;と同様に&lt;code&gt;T x(1, 2, 3);&lt;/code&gt;でも集成体初期化できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.md.nolink&#34;&gt;&lt;code&gt;new&lt;/code&gt;式での配列要素数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;double* p = new double[]{1,2,3};&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md.nolink&#34;&gt;要素数不明の配列への変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数が判明している配列から、要素数が不明の配列への変換を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.md.nolink&#34;&gt;ほとんどの&lt;code&gt;volatile&lt;/code&gt;を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;volatile&lt;/code&gt;の有用な機能のみを残し、効果が疑わしい、または壊れている機能を非推奨化する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;整数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html&#34;&gt;符号付き整数型が2の補数表現であることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;符号付き整数型のビット表現を2の補数に規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/char8_t.html&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-8エンコードされた文字かどうかでオーバーロード・特殊化をできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.md.nolink&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルを、文字コードUTF-16/32に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;、&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;の定義に関係なく、&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;のリテラルをUTF-16/32文字コードに規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/nodiscard_should_have_a_reason.md.nolink&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性に理由となる文字列を付加できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならない理由を関数宣言に持たせ、警告メッセージに役立てる&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;制御構文&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html&#34;&gt;初期化式をともなう範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲for文スコープで使用する変数の初期化のための構文を追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html&#34;&gt;範囲for文がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;メンバ関数のどちらかが見つからなかった場合に非メンバ関数の&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html&#34;&gt;確率が高い分岐と低い分岐を伝える属性 &lt;code&gt;[[likely]]&lt;/code&gt;, &lt;code&gt;[[unlikely]]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;条件分岐の最適化ヒントを与える属性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/concepts.html&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータに対する制約を行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/function_templates_with_auto_parameters.html&#34;&gt;autoパラメータによる関数テンプレートの簡易定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックラムダと同様、関数パラメータをの型を&lt;code&gt;auto&lt;/code&gt;にすることで簡易的に関数テンプレートを定義できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/down_with_typename.html&#34;&gt;型の文脈で&lt;code&gt;typename&lt;/code&gt;の省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型しか現れない文脈では、依存名を解決するための&lt;code&gt;typename&lt;/code&gt;キーワードを省略できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.md.nolink&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::strong_equality&lt;/code&gt;に変換可能な非メンバ関数&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;をもつ型を、非型テンプレートパラメータとして使用できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_aggregates.md.nolink&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラステンプレートのテンプレート引数推論はコンストラクタ引数から推論されるが、集成体初期化からも推論できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_alias_templates.md.nolink&#34;&gt;エイリアステンプレートに対するクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エイリアステンプレートからクラステンプレートのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;評価されない文脈で&lt;code&gt;constexpr&lt;/code&gt;関数が定数式評価されることを規定&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;仮想関数に&lt;code&gt;constexpr&lt;/code&gt;を付けられない制限を解除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md.nolink&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式での動的多態を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/try-catch_blocks_in_constexpr_functions.md.nolink&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内での例外の捕捉を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/immediate_functions.md.nolink&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;consteval&lt;/code&gt;キーワードを追加し、常に定数式評価されるよう指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md.nolink&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体メンバの書き換えを定数式内で行えるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md.nolink&#34;&gt;constexprの文脈での自明なデフォルト初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でのデフォルト初期化を許可し、未初期化値を読むことのみ禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md.nolink&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない場合にconstexpr関数にasm定義を含めることを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/constinit.md.nolink&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;初期化のみコンパイル時におわらせたい場合に使用する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/more_constexpr_containers.md.nolink&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;記憶域をもつメモリアロケータの存在を考慮することで、可変サイズをもつコンテナをコンパイル時に使用できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ラムダ式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックラムダでテンプレートパラメータを定義できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html&#34;&gt;ラムダ式のキャプチャとして&lt;code&gt;[=, this]&lt;/code&gt;を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトコピーキャプチャと&lt;code&gt;this&lt;/code&gt;ポインタのコピーキャプチャを両方指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html&#34;&gt;&lt;code&gt;[=]&lt;/code&gt;による&lt;code&gt;this&lt;/code&gt;の暗黙のキャプチャを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コピーのデフォルトキャプチャでは、&lt;code&gt;this&lt;/code&gt;ポインタをキャプチャされなくする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ラムダ式の制約&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;暗黙のラムダキャプチャを簡略化&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html&#34;&gt;状態を持たないラムダ式を、デフォルト構築可能、代入可能とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャしていないラムダ式をデフォルト構築・代入可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html&#34;&gt;評価されない文脈でのラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;評価されない文脈でもラムダ式を書くことができるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.html&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[...args = std::move(args)]&lt;/code&gt;のようなキャプチャを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.md.nolink&#34;&gt;構造化束縛したビットフィールドの参照キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドを含む構造化束縛をした場合にラムダ式で参照キャプチャできない規定を緩和し、ビットフィールドを直接参照キャプチャ、もしくはデフォルト参照キャプチャして使用しなければ適格とする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;名前空間&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/nested_inline_mamespaces.md.nolink&#34;&gt;入れ子名前空間定義でのインライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace ns1::inline ns2::ns3 {}&lt;/code&gt;のように、入れ子名前空間を定義する式にインライン名前空間の指定を含められるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;モジュール化&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヘッダファイル・ソースファイル、インクルードに変わる仕組みとしてモジュールを導入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;並行・並列処理&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数実行を中断・再開する仕組みとしてコルーチンを導入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;プリプロセッサ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/va_opt.html&#34;&gt;可変引数が空でない場合のトークン置換&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの置換で可変引数が空の場合に余計なカンマが付いてしまう問題に対処&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PODを非推奨化&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html&#34;&gt;&lt;code&gt;[=]&lt;/code&gt;による&lt;code&gt;this&lt;/code&gt;の暗黙のキャプチャを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コピーのデフォルトキャプチャでは、&lt;code&gt;this&lt;/code&gt;ポインタをキャプチャされなくする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md.nolink&#34;&gt;添字演算子内でのカンマ演算子の使用を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ar[i, j]&lt;/code&gt;を非推奨化。&lt;code&gt;ar[(i, j)]&lt;/code&gt;はOK&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;throw()&lt;/code&gt;による例外送出しない指定を削除&lt;/td&gt;
&lt;td&gt;代わりに&lt;code&gt;noexcept&lt;/code&gt;を使用すること&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md.nolink&#34;&gt;ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタが&lt;code&gt;delete&lt;/code&gt;宣言されているクラスを、集成体初期化によってコンストラクタ呼び出しを回避して構築できてしまっていた技法を禁止&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/update_the_reference_to_the_unicode_standard.md.nolink&#34;&gt;Unicode標準への参照を更新&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準C++からISO/IEC 10646への参照を更新し、古い固定バージョンへの参照をやめる&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;バージョン情報ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加。ここでは、実装依存の情報 (バージョンやリリース日付など) が標準ライブラリの実装によって定義される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;ライブラリに、カレンダーとタイムゾーンの機能を拡張&lt;/li&gt;
&lt;li&gt;任意のシーケンスの部分シーケンスを参照するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;文字列フォーマットライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;出力ストリームを同期するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;三方比較ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;数値ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加。数学定数が定義される&lt;/li&gt;
&lt;li&gt;ビット操作ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;Strict Aliasing規則に抵触しないビットレベルの再解釈キャストである&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_cast.html&#34;&gt;std::bit_cast()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;2の乗数関係の関数として、整数値が2の累乗かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/has_single_bit.html&#34;&gt;std::has_single_bit()&lt;/a&gt;&lt;/code&gt;関数、整数値を2の累乗値に切り上げる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_ceil.html&#34;&gt;std::bit_ceil()&lt;/a&gt;&lt;/code&gt;関数、整数値を2の累乗値に切り下げる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_floor.html&#34;&gt;std::bit_floor()&lt;/a&gt;&lt;/code&gt;関数、2を底とした整数値の対数を求めて1を足す&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_width.html&#34;&gt;std::bit_width()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;循環ビットシフトを行う&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/rotl.html&#34;&gt;std::rotl()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/rotr.html&#34;&gt;std::rotr()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;連続した0もしくは1のビットを数える&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countl_zero.html&#34;&gt;std::countl_zero()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countl_one.html&#34;&gt;std::countl_one()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countr_zero.html&#34;&gt;std::countr_zero()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countr_one.html&#34;&gt;std::countr_one()&lt;/a&gt;&lt;/code&gt;、および立っているビットを数える&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/popcount.html&#34;&gt;std::popcount()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;エンディアンを表す列挙型として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/endian.html&#34;&gt;std::endian&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;型制約のための要件ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;言語機能であるコルーチンを制御するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スレッドの実行を停止させるメカニズムとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加し、停止に対応したスレッドクラスとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/jthread.html&#34;&gt;std::jthread&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;軽量な同期プリミティブであるセマフォのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スレッド調整メカニズムとして、ラッチライブラリの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;、バリアライブラリの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;イテレータの組ではなく、コンテナや配列、部分的なコンテナなどを扱う範囲ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.md.nolink&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;既存のイテレータの組を扱うアルゴリズムは、&lt;code&gt;std::ranges&lt;/code&gt;名前空間に範囲版アルゴリズムが追加される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ソースコードの位置を取得するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;取り決め&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;名前空間以下の関数テンプレートをユーザーが特殊化することを禁止する (参照 : &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0551r3.pdf&#34; target=&#34;_blank&#34;&gt;P0551R3&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;連想コンテナに、要素がコンテナに含まれているかを判定する&lt;code&gt;contains()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;順序付き連想コンテナと同様に、非順序連想コンテナの検索処理で、一時オブジェクトが生成されるコストを抑える拡張を追加。ハッシュ計算を行う関数オブジェクトに&lt;code&gt;transparent_key_equal&lt;/code&gt;が定義されていれば、透過的な検索が使用できる。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;std::hash&lt;/a&gt;&lt;/code&gt;クラスのページを参照&lt;/li&gt;
&lt;li&gt;各コンテナの非メンバ関数として、要素を削除する&lt;code&gt;std::erase()&lt;/code&gt;関数と&lt;code&gt;std::erase_if()&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/forward_list/forward_list.html&#34;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/list/list.html&#34;&gt;std::list&lt;/a&gt;&lt;/code&gt;のメンバ関数&lt;code&gt;remove()&lt;/code&gt;、&lt;code&gt;remove_if()&lt;/code&gt;、&lt;code&gt;unique()&lt;/code&gt;の戻り値型を、&lt;code&gt;void&lt;/code&gt;から&lt;code&gt;Container::size_type&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;クラスの比較演算子、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array/fill.html&#34;&gt;fill()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array/swap.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array/swap_free.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;非メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加。このクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;li&gt;組み込み配列を&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;に変換する関数として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/to_array.html&#34;&gt;std::to_array()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;に、符号付き整数としてコンテナの要素数を取得する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ssize.html&#34;&gt;std::ssize()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;、および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/vector/vector.html&#34;&gt;std::vector&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;の多くの関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、要素位置をシフトする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/shift_left.html&#34;&gt;std::shift_left()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/shift_right.html&#34;&gt;std::shift_right()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に三方比較による辞書順比較アルゴリズム&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/lexicographical_compare_three_way.html&#34;&gt;std::lexicographical_compare_three_way()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;数値とポインタの中点を求める関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/midpoint.html&#34;&gt;std::midpoint()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;浮動小数点数を線形補間する関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/lerp.html&#34;&gt;std::lerp()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;の数値計算アルゴリズムをムーブに対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;の数値計算アルゴリズムに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_insert_iterator.html&#34;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_insert_iterator.html&#34;&gt;std::front_insert_iterator&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/insert_iterator.html&#34;&gt;std::insert_iterator&lt;/a&gt;&lt;/code&gt;クラスのコンストラクタ、代入演算子、間接参照演算子、インクリメント演算子、および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_inserter.html&#34;&gt;std::back_inserter()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_inserter.html&#34;&gt;std::front_inserter()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/inserter.html&#34;&gt;std::inserter()&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;constexpr&lt;/code&gt;を追加。これらのクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;型を&lt;code&gt;T&amp;amp;&lt;/code&gt;型に展開する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/unwrap_reference.html&#34;&gt;std::unwrap_reference&lt;/a&gt;&lt;/code&gt;型特性、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;std::decay&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;型の展開をする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/unwrap_ref_decay.html&#34;&gt;std::unwrap_ref_decay&lt;/a&gt;&lt;/code&gt;型特性を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/ref.html&#34;&gt;std::ref()&lt;/a&gt;&lt;/code&gt;関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/cref.html&#34;&gt;std::cref()&lt;/a&gt;&lt;/code&gt;関数のテンプレートパラメータ&lt;code&gt;T&lt;/code&gt;型に不完全型を指定することを許可&lt;/li&gt;
&lt;li&gt;メンバ関数の部分適用をかんたんにするために、プレースホルダーの指定なく引数を先頭から順に束縛する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt;の各操作、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.html&#34;&gt;std::not_fn()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;std::bind()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/mem_fn.html&#34;&gt;std::mem_fn()&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;li&gt;コンセプトの導入にともない、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に、受け取った値をそのまま返す関数オブジェクト&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/identity.html&#34;&gt;std::identity&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;クラスに、先頭の部分文字列を判定する&lt;code&gt;starts_with()&lt;/code&gt;メンバ関数、末尾の部分文字列を判定する&lt;code&gt;ends_with()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/reserve.html&#34;&gt;reserve()&lt;/a&gt;&lt;/code&gt;メンバ関数の、メモリの縮小機能を削除し、伸長のみとする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;std::char_traits&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits/move.html&#34;&gt;move()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits/copy.html&#34;&gt;copy()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits/assign.html&#34;&gt;assign()&lt;/a&gt;&lt;/code&gt;静的メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行・並列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag.html&#34;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt;クラスのデフォルトコンストラクタが、値初期化するよう動作変更。これまではC言語との互換性のために未初期化となっていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;に対する特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスの浮動小数点数型に対する特殊化を追加&lt;/li&gt;
&lt;li&gt;アトミッククラスに対するブロッキング同期の機能として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/wait.html&#34;&gt;wait()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/notify_one.html&#34;&gt;notify_one()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/notify_all.html&#34;&gt;notify_all()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ロックフリーであることが保証されたアトミック整数型の別名として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;atomic_signed_lock_free&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;atomic_unsigned_lock_free&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/memory_order.html&#34;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;の列挙子にスコープをもたせた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag.html&#34;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;bool&lt;/code&gt;値を読み込むメンバ関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag/test.html&#34;&gt;test()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;非アトミックなオブジェクトにアトミック操作を適用するためのクラス&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_ref.html&#34;&gt;std::atomic_ref&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ベクトル化の実行ポリシーとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/execution/execution/execution_policy.html&#34;&gt;std::execution::unsequenced_policy&lt;/a&gt;&lt;/code&gt;型と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/execution/execution/execution_policy.html&#34;&gt;std::execution::unseq&lt;/a&gt;&lt;/code&gt;タグを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;同期ストリームの追加にともなって、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;に、同期ストリーム関係の出力マニピュレータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/istream/basic_istream/op_istream_free.html&#34;&gt;operator&amp;gt;&amp;gt;&lt;/a&gt;(basic_istream&amp;amp;, CharT*)&lt;/code&gt;を&lt;code&gt;operator&amp;gt;&amp;gt;(basic_istream&amp;amp;, CharT (&amp;amp;)[N])&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html&#34;&gt;operator&amp;lt;&amp;lt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;wchar_t&lt;/code&gt; (&lt;code&gt;char&lt;/code&gt;版のみ)、&lt;code&gt;char8_t&lt;/code&gt;、&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;のdelete宣言を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/istream_iterator.html&#34;&gt;std::istream_iterator&lt;/a&gt;&lt;/code&gt;について、要件の書き方を整理し、振る舞いをより明確化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::basic_stringbuf&lt;/code&gt;、&lt;code&gt;std::basic_istringstream&lt;/code&gt;、&lt;code&gt;std::basic_ostringstream&lt;/code&gt;クラスに、アロケータを伝播させるためのインタフェースを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_shared.html&#34;&gt;std::make_shared()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocate_shared.html&#34;&gt;std::allocate_shared()&lt;/a&gt;&lt;/code&gt;を配列に対応&lt;/li&gt;
&lt;li&gt;スマートポインタをデフォルト初期化で構築するヘルパ関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_unique_for_overwrite.html&#34;&gt;std::make_unique_for_overwrite()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_shared_for_overwrite.html&#34;&gt;std::make_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocate_shared_for_overwrite.html&#34;&gt;std::allocate_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ポインタを生ポインタに変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/to_address.html&#34;&gt;std::to_address()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_traits.html&#34;&gt;std::pointer_traits&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_traits/pointer_to.html&#34;&gt;pointer_to()&lt;/a&gt;&lt;/code&gt;関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Nバイトアライメントされたポインタであることをコンパイラに伝える&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/assume_aligned.html&#34;&gt;std::assume_aligned()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、uses allocator構築をサポートするユーティリティ関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uses_allocator_construction_args.html&#34;&gt;std::uses_allocator_construction_args()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_obj_using_allocator.html&#34;&gt;std::make_obj_using_allocator()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_construct_using_allocator.html&#34;&gt;std::uninitialized_construct_using_allocator()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator.html&#34;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt;に、以下の変更を追加：&lt;ul&gt;
&lt;li&gt;クラステンプレートのデフォルトテンプレート引数を&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;&lt;/code&gt;型とした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void*&lt;/code&gt;のバイト列をメモリ確保する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_bytes.html&#34;&gt;allocate_bytes()&lt;/a&gt;&lt;/code&gt;、解放する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/deallocate_bytes.html&#34;&gt;deallocate_bytes()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;指定した型のメモリを確保する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_object.html&#34;&gt;allocate_object()&lt;/a&gt;&lt;/code&gt;、解放する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/deallocate_object.html&#34;&gt;deallocate_object()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;指定した型のメモリ確保と構築をする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/new_object.html&#34;&gt;new_object()&lt;/a&gt;&lt;/code&gt;、破棄と解放をする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/delete_object.html&#34;&gt;delete_object()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/swap.html&#34;&gt;std::swap()&lt;/a&gt;&lt;/code&gt;関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/exchange.html&#34;&gt;std::exchange()&lt;/a&gt;&lt;/code&gt;関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/code&gt;クラスを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;クラスの&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/op_constructor.html&#34;&gt;コンストラクタ&lt;/a&gt;、&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/op_assign.html&#34;&gt;代入演算子&lt;/a&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/swap.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/swap_free.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;非メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加。このクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;クラスの&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/op_constructor.html&#34;&gt;コンストラクタ&lt;/a&gt;、&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/op_assign.html&#34;&gt;代入演算子&lt;/a&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/swap.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/swap_free.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;非メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加。このクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファイルシステム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/create_directory.html&#34;&gt;std::filesystem::create_directory()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/create_directories.html&#34;&gt;std::filesystem::create_directories()&lt;/a&gt;&lt;/code&gt;の仕様が直感的ではなく、すでにディレクトリが存在している場合にエラーとなっていた。C++20ではその状況ではエラーにならないようにする (エラーではなく&lt;code&gt;false&lt;/code&gt;が返る)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、constexpr関数が定数式評価されたかを判定する特殊な関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、型のCV修飾と参照を除去する型特性クラスとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_cvref.html&#34;&gt;std::remove_cvref&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、受け取った型をそのまま返す&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/type_identity.html&#34;&gt;std::type_identity&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、例外送出せずに暗黙の型変換が可能かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_convertible.html&#34;&gt;std::is_nothrow_convertible&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、要素数が判明している配列型かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_bounded_array.html&#34;&gt;std::is_bounded_array&lt;/a&gt;&lt;/code&gt;、要素数が不明な配列型かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_unbounded_array.html&#34;&gt;std::is_unbounded_array&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、レイアウト互換性、ポインタ変換可能性を判定する以下の型特性を追加：&lt;ul&gt;
&lt;li&gt;2つの型にレイアウト互換があるかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_layout_compatible.md.nolink&#34;&gt;std::is_layout_compatible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;基底クラスと派生クラスの間でポインタ変換可能かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pointer_interconvertible_base_of.md.nolink&#34;&gt;std::is_pointer_interconvertible_base_of&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;メンバポインタがクラスのポインタに変換可能かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pointer_interconvertible_with_class.md.nolink&#34;&gt;is_pointer_interconvertible_with_class()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2つの互換レイアウトをもつメンバポインタが共通位置にあるかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_corresponding_member.md.nolink&#34;&gt;std::is_corresponding_member()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一貫比較非機能によって比較演算子の定義が容易になったため、不要になった演算子の簡潔定義機能である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/rel_ops.html&#34;&gt;std::rel_ops&lt;/a&gt;&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/reserve.html&#34;&gt;reserve()&lt;/a&gt;&lt;/code&gt;メンバ関数が、メモリの縮小をしなくなったため、デフォルト引数&lt;code&gt;0&lt;/code&gt;を非推奨可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag.html&#34;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt;クラスのデフォルトコンストラクタが値初期化するようになったため、不要になった以下のアトミックオブジェクトの初期化機能を非推奨化：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_init.html&#34;&gt;std::atomic_init()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_var_init.html&#34;&gt;ATOMIC_VAR_INIT&lt;/a&gt;&lt;/code&gt;マクロ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag_init.html&#34;&gt;ATOMIC_FLAG_INIT&lt;/a&gt;&lt;/code&gt;マクロ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/code&gt;クラスが導入されたことでC++17から非推奨化されていた、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;/code&gt;の以下のメンバを削除：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difference_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pointer&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_pointer&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reference&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_reference&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rebind&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/address.html&#34;&gt;address()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/allocate.html&#34;&gt;allocate()&lt;/a&gt;&lt;/code&gt;メンバ関数の&lt;code&gt;hint&lt;/code&gt;パラメータ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/max_size.html&#34;&gt;max_size()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/construct.html&#34;&gt;construct()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/destroy.html&#34;&gt;destroy()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/code&gt;クラスが導入されたことでC++17から非推奨化されていた、要素型を再束縛するための&lt;code&gt;allocator&amp;lt;void&amp;gt;&lt;/code&gt;特殊化を非推奨化&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていた、&lt;code&gt;constexpr&lt;/code&gt;で扱える型の分類である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_literal_type.html&#34;&gt;is_literal_type&lt;/a&gt;&lt;/code&gt;型特性を削除&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていた、一時的なメモリ確保のための&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/get_temporary_buffer.html&#34;&gt;std::get_temporary_buffer()&lt;/a&gt;&lt;/code&gt;関数と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/return_temporary_buffer.html&#34;&gt;std::return_temporary_buffer()&lt;/a&gt;&lt;/code&gt;関数を削除&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/raw_storage_iterator.html&#34;&gt;raw_storage_iterator&lt;/a&gt;&lt;/code&gt;クラスを削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.html&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;の追加にともない、C++17から非推奨化されていた以下の機能を削除：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;not1()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;not2()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;unary_negate&lt;/a&gt;&lt;/code&gt;クラス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;binary_nagate&lt;/a&gt;&lt;/code&gt;クラス&lt;/li&gt;
&lt;li&gt;標準関数オブジェクトの&lt;code&gt;result_type&lt;/code&gt;、&lt;code&gt;argument_type&lt;/code&gt;、&lt;code&gt;first_argument_type&lt;/code&gt;、&lt;code&gt;second_argument_type&lt;/code&gt;型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++17から非推奨化されていた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/unique.html&#34;&gt;unique()&lt;/a&gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/invoke_result.html&#34;&gt;invoke_result&lt;/a&gt;&lt;/code&gt;の追加にともない、C++17から非推奨化されていた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;C++17での&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/uncaught_exceptions.html&#34;&gt;uncaught_exceptions()&lt;/a&gt;&lt;/code&gt;の追加にともない、非推奨化していた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/uncaught_exception.html&#34;&gt;uncaught_exception()&lt;/a&gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていたC互換ライブラリ&lt;code&gt;&amp;lt;ccomplex&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ctgmath&amp;gt;&lt;/code&gt;を削除。また、C++ではなにも定義されないC互換ライブラリ&lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2131r0.html&#34; target=&#34;_blank&#34;&gt;P2131R0 Changes between C++17 and C++20 DIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>丸カッコの値リストからの集成体初期化を許可 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
new file mode 100644
index 000000000..29079e510
--- /dev/null
+++ b/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.md
@@ -0,0 +1,118 @@
+# 丸カッコの値リストからの集成体初期化を許可
+
+* cpp20[meta cpp]
+
+## 概要
+
+C++20では、波カッコと同様に丸カッコでも集成体初期化できる。
+
+```cpp
+struct A {
+  int x,y;
+};
+
+A a(1, 2);
+int n[](1, 2, 3, 4, 5);
+```
+
+ただし、今まで丸カッコでは書くことのなかった以下のような構文はサポートされない。
+
+```cpp
+A a = (1, 2);
+int n[] = (1, 2, 3, 4, 5);
+A aa[]((1, 2), (3, 4), (5, 6));
+```
+
+## 仕様
+
+丸カッコによる集成体初期化は単に波カッコによる初期化に置き換わるわけではなく、意味論もコンストラクタ呼び出しに近くなっている。
+
+* 波カッコによる初期化ではアップキャストになる場合を除いて型の暗黙変換ができないが、丸カッコによる初期化ではできる。
+* 波カッコによる初期化では縮小変換ができないが、丸カッコによる初期化ではできる。
+* 参照型のメンバへ一時オブジェクトをバインドするとき、波カッコによる初期化では寿命が延長されるが、丸カッコによる初期化では延長されない。
+
+ただし、各要素の評価準は左から右に評価される。この点は波カッコと同じになっている。
+
+```cpp
+// P0960R3より引用
+struct A {
+  int a;
+  int&amp;amp;&amp;amp; r;
+};
+
+int f();
+int n = 10;
+
+A a1{1, f()};               // OK, 寿命が延長される
+A a2(1, f());               // well-formedだがダングリング参照
+A a3{1.0, 1};               // エラー: 縮小変換はできない
+A a4(1.0, 1);               // well-formedだがダングリング参照
+A a5(1.0, std::move(n));    // OK
+```
+* P0960R3[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0960r3.html]
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  struct A {
+    int x,y;
+  };
+
+  A a(1, 2);
+  int n[](1, 2, 3, 4, 5);
+  std::cout &amp;lt;&amp;lt; a.x &amp;lt;&amp;lt; &amp;#39;,&amp;#39; &amp;lt;&amp;lt; a.y &amp;lt;&amp;lt; std::endl;
+  for (int x : n) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+1,2
+1
+2
+3
+4
+5
+```
+
+## この機能が必要になった背景・経緯
+
+[一様初期化](/lang/cpp11/uniform_initialization.md)によって波カッコは集成体初期化にもコンストラクタ呼び出しにも使えるようになった。一方、丸カッコで集成体初期化をすることはできなかったので、波カッコと丸カッコでできることが異なってしまっていた。
+
+当初は誰もが波カッコで初期化をするようになるから問題がないと考えられていたが、実際にはそうはならず、丸カッコで初期化するためだけにコンストラクターを書くことが続いていた。
+
+丸カッコで集成体初期化を可能にすることで両者の差はより少なくなり、コンストラクタを書かなければいけない場面もより少なくなる。
+集成体初期化なのかコンストラクタ呼び出しなのかを意識せずに済むよう、丸カッコによる集成体初期化は丸カッコによるコンストラクタ呼び出しに近い意味論になっている。
+
+## 検討されたほかの選択肢
+
+以下のような案もあったが採用されなかった。
+
+1. 丸カッコによる集成体初期化を単純に波カッコに置き換えて解釈する
+2. コンストラクタ呼び出しと全く同じ意味論にする(コンストラクタを自動生成して呼び出す)
+
+丸カッコを単純に波カッコに置き換えて解釈すると、コンストラクタ呼び出しと同じ構文にもかかわらず意味論が異なり、混乱を招くという問題があった。
+
+コンストラクタを自動生成する案では、次のようなコンストラクタを生成することが考えられた。
+
+```cpp
+explicit A(T1&amp;amp;&amp;amp; t1, … , Tk&amp;amp;&amp;amp; tk);
+explicit A(T1 t1, … , Tk tk);
+```
+
+しかし、前者は参照型でないメンバーを左辺値で初期化することができない(関数テンプレートではないことに注意)。
+後者はムーブが必要になってしまうという問題があった。
+
+## 関連項目
+
+- [一様初期化](/lang/cpp11/uniform_initialization.md)
+
+## 参照
+
+- [P0960R3 Allow initializing aggregates from a parenthesized list of values](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0960r3.html)
+- [C++ Core Guidelines ES.23: Prefer the {}-initializer syntax](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es23-prefer-the--initializer-syntax) 常に波カッコで初期化することを推奨している。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>UTF-8エンコーディングされた文字の型として`char8_t`を追加 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/char8_t.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20/char8_t.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/char8_t.md b/lang/cpp20/char8_t.md
index 1b590f54a..781a7f315 100644
--- a/lang/cpp20/char8_t.md
+++ b/lang/cpp20/char8_t.md
@@ -27,7 +27,12 @@ UTF-8でエンコードされた文字を格納することを想定した型と
 
 ## 備考
 
-[機能テストマクロ](../../lang/cpp17/feature_test_macros.md)は`__cpp_char8_t`で、値は`201803`。
+[機能テストマクロ](../../lang/cpp20/feature_test_macros.md.nolink)は以下の通り。
+
+| マクロ名            | 値       |
+|---------------------|----------|
+| `__cpp_char8_t`     | `201811` |
+| `__cpp_lib_char8_t` | `201811` |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一貫比較 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20/consistent_comparison.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/consistent_comparison.md b/lang/cpp20/consistent_comparison.md
index d291c10ce..1dab324d4 100644
--- a/lang/cpp20/consistent_comparison.md
+++ b/lang/cpp20/consistent_comparison.md
@@ -88,7 +88,7 @@ bool is_equal = comp == 0.0;
 三方比較演算子の戻り値型は`int`などの整数型ではなく、比較カテゴリ型と呼ばれる専用の型である。  
 これは、比較対象となる型の満たしている同値や順序の関係についてを専用の型によって表明し、コンセプト等の機構によってその性質に応じた適切な処理へのディスパッチを行うことを出来るようにするためである（例えば、以下で述べる比較カテゴリ型によって導出する演算子を変化させるのに利用されている）。
 
-以下の5つの比較カテゴリ型が提供される。
+以下の3つの比較カテゴリ型が提供される。
 
 |比較カテゴリ型|対応する数学的な関係|導出される演算子|
 |:---|:---:|:---:|
@@ -108,7 +108,7 @@ bool is_equal = comp == 0.0;
 各比較カテゴリ型はその条件の強いものから弱いものへの暗黙変換が定義される。この方向は各カテゴリに対応する数学的な関係の包含関係によって定義されている。  
 
 ![]( https://raw.githubusercontent.com/cpprefjp/image/master/lang/cpp20/consistent_comparison_01.png)  
-図1 比較カテゴリ間の変換関係（[P0515R3](http://wg21.link/p0515)より引用）
+図1 比較カテゴリ間の変換関係（[P0515R3](http://wg21.link/p0515)より引用； 最終的なC++20仕様では`weak_equality`/`strong_equality`は[削除されている](http://wg21.link/p1959)）
 
 
 これはつまり、各比較カテゴリ間の順序関係を示している。この順序は半順序となる。
@@ -298,16 +298,28 @@ bool eq2 = a == category::C;  //ok
 
 ```cpp
 struct C {
-  //有効な&amp;lt;=&amp;gt;のdefault宣言（3つのうちいずれか）
+  //有効な&amp;lt;=&amp;gt;のdefault宣言例
   auto operator&amp;lt;=&amp;gt;(const C&amp;amp;) const = default;
   friend auto operator&amp;lt;=&amp;gt;(const C&amp;amp;, const C&amp;amp;) = default;
   friend auto operator&amp;lt;=&amp;gt;(C, C) = default;
 
-  //有効な==のdefault宣言（3つのうちいずれか）
+  //有効な==のdefault宣言例
   bool operator==(const C&amp;amp;) const = default;
   friend bool operator==(const C&amp;amp;, const C&amp;amp;) = default;
   friend bool operator==(C, C) = default;
+
+  //クラス外で定義することもできる
+  auto operator&amp;lt;=&amp;gt;(const C&amp;amp;) const;
+  bool operator== (const C&amp;amp;) const;
+  friend auto operator&amp;lt;=&amp;gt;(const C&amp;amp;, const C&amp;amp;);
+  friend bool operator== (const C&amp;amp;, const C&amp;amp;);
 };
+
+//クラス外定義は別の翻訳単位にあってもok
+auto C::operator&amp;lt;=&amp;gt;(const C&amp;amp;) const = default;
+bool C::operator== (const C&amp;amp;) const = default;
+inline auto operator&amp;lt;=&amp;gt;(const C&amp;amp;, const C&amp;amp;) = default;
+inline bool operator== (const C&amp;amp;, const C&amp;amp;) = default;
 ```
 
 `&amp;lt;=&amp;gt;`をdefault宣言した場合、対応する`==`が暗黙的にdefault宣言される。そのアクセス指定は同一であり、`friend`であるかも`&amp;lt;=&amp;gt;`に従う。  
@@ -783,6 +795,8 @@ struct has_vector {
         - 不要になった`_equality`な比較カテゴリ型の削除
     10. [P1946R0 Allow defaulting comparisons by value](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1946r0.html)
         - `&amp;lt;=&amp;gt; ==`の`friend`な`default`宣言の調整
+    11. [P2085R0 Consistent defaulted comparisons](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2085r0.html)
+        - `&amp;lt;=&amp;gt; ==`の`default`宣言をクラス外でも行えるようにする
 - 以前に検討されていた提案文書
     - [N3950 Defaulted comparison operators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3950.html)
     - [N4114 Defaulted comparison operators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4114.htm)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20/coroutines.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
new file mode 100644
index 000000000..5d0279af8
--- /dev/null
+++ b/lang/cpp20/coroutines.md
@@ -0,0 +1,625 @@
+# コルーチン
+* cpp20[meta cpp]
+
+## 概要
+処理途中でのサスペンド(中断)／レジューム(再開)をサポートする一般化された関数として、[コルーチン](https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3)が導入される。
+
+C++20時点では、コルーチン動作に関する言語仕様と新キーワード`co_return`, `co_await`, `co_yield`による新しい構文、コルーチンライブラリ実装者向けの低レベルライブラリ[`&amp;lt;coroutine&amp;gt;`](/reference/coroutine.md)のみが規定される。
+
+```cpp
+// コルーチンiotaを定義
+generator iota(int end)
+{
+  for (int n = 0; n &amp;lt; end; ++n) {
+    co_yield n;
+  }
+}
+
+// コルーチンの呼び出し
+auto g = iota(10);
+for (int v: g) {
+  std::cout &amp;lt;&amp;lt; v;
+}
+
+// &amp;#34;generator&amp;#34;はライブラリが提供するべきクラス。
+// 動作可能なサンプルコード全体は後述例を参照のこと。
+```
+* co_yield[color ff0000]
+
+一般的なアプリケーション実装者からの利用を想定した、ジェネレータや非同期タスク・非同期I/Oといったハイレベルなコルーチンライブラリは、C++23以降での導入にむけて検討されている。
+
+### 特徴
+C++コルーチンの特徴は次の通り：
+
+- 関数からコルーチンへの拡張: 従来からある関数(function)の呼出し(call)と復帰(return)に加えて、コルーチン(coroutine)では中断(suspend)と再開(resume)動作をサポートする。また中断状態のまま再開不要となったコルーチンに対しては、リソースリークを防ぐため明示的に破棄(destroy)を行える。
+- 多数の __カスタマイズポイント__: コルーチンライブラリ実装者向けに、コルーチン動作の制御を可能とするカスタマイズポイントを規定する。後述するPromise、Awaitable、Awaiterなど。
+- 軽量な __スタックレス(Stackless)コルーチン__: コルーチンの中断は実行中コルーチンのレキシカル・スコープ内でのみで許可され、コルーチンが呼び出した関数内では中断操作を行えない。（C++コルーチンの定義上、`co_await`や`co_yield`を用いて中断処理を記述すると、関数ではなくコルーチンとみなされる。）
+- コルーチン毎の __動的メモリ確保__: コルーチン実引数の保持や進行状況を管理するため、動的メモリ確保が行われる可能性がある。ただし一定の条件を満たす場合には、[C++コンパイラ最適化により動的メモリ確保は省略される](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0981r0.html)と期待できる。
+- __非対称(Asymmetric)・対称(Symmetric)コルーチン__: 中断処理によりコルーチン再開元へ制御を戻す非対称コルーチンのほか、明示的に別コルーチンの再開に制御を移す対称コルーチンをサポートする。待機動作をカスタマイズするAwaiterオブジェクト`await_suspend`にて制御する。
+- __[スレッド(thread)](/reference/thread/thread.md)との直交__: あるスレッド上で実行されるコルーチンを中断し、その後に別スレッドから同コルーチンを再開させることもできる。ただし[スレッドローカルストレージ](/lang/cpp11/thread_local_storage.md)と組合せには注意が必要。
+
+### 動作概略
+C++コルーチン動作理解の助けとなるよう、ここでは細部を省略した説明を行う。
+コルーチン実行の基本動作は、それぞれ下記ように説明される：
+
+- 呼出し: 通常の関数と同様に、括弧(`()`)を用いた関数呼び出し構文を用いる。コルーチンに対応するユーザ定義Promiseオブジェクトが自動的に生成されるため、そこからコルーチンハンドルを取得する。
+- 中断: コルーチン本体にて`co_yield`式または`co_await`式を記述する。中断されたコルーチンから呼出元へは、コルーチンハンドルを内包するコルーチン戻り値型オブジェクトを返す。
+- 再開: コルーチン中断により返された戻り値型オブジェクトを介して、コルーチンハンドルの再開関数[`resume`](/reference/coroutine/coroutine_handle/resume.md)を呼び出す。
+- 復帰: コルーチン本体にて`co_return`文を記述、またはコルーチン本体終端まで到達する。全てのローカル変数とPromiseオブジェクトは破棄される。
+
+この4種類の基本動作に対して、次のカスタマイズポイントが提供される。括弧内はコルーチンライブラリが実装すべきカスタマイズポイント名：
+
+- コルーチン呼出し直後の動作: 初期サスペンドポイント(`initial_suspend`)にて、コルーチン本体の開始前に中断して戻り値型オブジェクトを返すか、そのままコルーチン本体を実行継続するかを制御する。
+- コルーチン復帰直前の動作: 最終サスペンドポイント(`final_suspend`)にて、コルーチンを最後に中断して戻り値型オブジェクトを返すか、そのままコルーチンに関するリソースを破棄するかを制御する。前者を選択した場合、リソースリークを防ぐためコルーチンハンドルの破棄関数[`destroy`](/reference/coroutine/coroutine_handle/destroy.md)呼出しが必要となる。
+- 値を伴うコルーチン中断: `co_yield`式により、コルーチンを中断すると同時に呼出元へ値を返す(`yield_value`)。
+- 値を伴うコルーチン復帰: `co_return`文により、呼出元へ値を返す(`return_value`)。
+- コルーチン中断／再開制御: `co_await`式により、コルーチン中断と再開に関する振る舞いを詳細に制御する(`await_transform`, `operator co_await`)。
+    - コルーチン中断の条件: `co_await`式に対して、コルーチンを中断するか否かを判断する(`await_ready`)。
+    - コルーチン中断直前の動作: `co_await`式に対して、コルーチンを中断する直前の動作を制御する(`await_suspend`)。
+    - コルーチン再開直後の動作: `co_await`式に対して、コルーチンが再開された直後の動作を制御する(`await_resume`)。
+
+プログラマが記述するコルーチンは、コンパイル時にソースコード変換が行われると解釈できる。
+（従来のC++仕様範囲ではコルーチン動作を正確に表現できないため、下記はあくまでも疑似的なコードとなる）：
+
+```cpp
+// プログラマが記述するコルーチン
+generator iota(int end)
+{
+  for (int n = 0; n &amp;lt; end; ++n) {
+    co_yield n;
+  }
+}
+
+// C++コンパイラにより展開されたコード
+generator iota(int end)
+{
+  // コルーチンに対応するPromiseオブジェクトを初期化
+  generator::promise_type promise;
+
+  // 戻り値型オブジェクトの初期化
+  generator result = promise.get_return_object();
+  // コルーチンハンドルをget_return_object内で取得し、resultメンバで保持する。
+  // 生成したresultオブジェクトは、初回のコルーチン中断時に呼出元へ返される。
+
+  // 本例では全て co_await std::suspend_always{} 相当のため、
+  // 以降のco_await式(★箇所)においてコルーチンは中断／再開される。
+
+  // 初期サスペンドポイント
+  co_await promise.initial_suspend(); //★
+
+  // コルーチン本体部
+  {
+    for (int n = 0; n &amp;lt; end; ++n) {
+      // co_yield式は下記co_await式に展開される
+      co_await promise.yield_value(n); //★
+    }
+  }
+  promise.return_void();
+
+  // 最終サスペンドポイント
+  co_await promise.final_suspend(); //★
+
+  // 本例では最終サスペンドポイントでコルーチンを中断するため、ここには制御が到達しない。
+  // 呼出側で戻り値オブジェクトを破棄すると、デストラクタ経由で本コルーチンは破棄される。
+}
+```
+* co_yield[color ff0000]
+* co_await[color ff0000]
+* std::suspend_always{}[link /reference/coroutine/suspend_always.md]
+
+
+## 仕様
+### コルーチン定義
+C++におけるコルーチンは、関数の一種として定義される。
+
+関数本体に新キーワード`co_await`(Await式), `co_yield`(Yield式), `co_return`のいずれかが含まれるとき、その関数はコルーチンとなる。
+つまり、戻り値型や引数リストなどのシグニチャからコルーチン／関数を区別することはできない。
+コルーチンの引数宣言リストはC言語由来の可変引数リスト(`...`)を含んではならないが、[可変引数テンプレートのパラメータパック(`...`)](/lang/cpp11/variadic_templates.md)は利用できる。
+
+```cpp
+task&amp;lt;int&amp;gt; f();
+
+task&amp;lt;void&amp;gt; g1() {
+  int i = co_await f();
+  std::cout &amp;lt;&amp;lt; &amp;#34;f() =&amp;gt; &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+}
+
+template &amp;lt;typename... Args&amp;gt;
+task&amp;lt;void&amp;gt; g2(Args&amp;amp;&amp;amp;...) { // OK, &amp;#34;...&amp;#34;はパック展開
+  int i = co_await f();
+  std::cout &amp;lt;&amp;lt; &amp;#34;f() =&amp;gt; &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+}
+
+task&amp;lt;void&amp;gt; g3(int a, ...) { // エラー: 可変引数リストは許可されない
+  int i = co_await f();
+  std::cout &amp;lt;&amp;lt; &amp;#34;f() =&amp;gt; &amp;#34; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
+}
+```
+* co_await[color ff0000]
+
+プログラムエントリポイントの`main`関数、`constexpr`関数、戻り値型をプレースホルダ(`auto`)で宣言された関数、クラス型のコンストラクタとデストラクタは、コルーチンとして定義できない。
+
+### Promise型とコルーチン動作仕様
+コルーチンのPromise型は、コルーチンの戻り値型`R`と引数リスト`P1`, `P2`, ..., `Pn`から決定されるクラス型である。
+
+- デフォルト動作では`R::protmise_type`がPromise型となる。
+- ユーザプログラム中で[`std::coroutine_traits`](/reference/coroutine/coroutine_traits.md)トレイトを特殊化した場合は、`coroutine_traits&amp;lt;R, P1, P2, ..., Pn&amp;gt;::protmise_type`がPromise型となる。
+- コルーチンがクラスの非静的メンバの場合、`P1`は暗黙のオブジェクトパラメータ(`*this`の型)となる。
+
+コルーチンは、その本体 _function-body_ が下記の通り置き換えられたかのように動作する：
+
+```cpp
+{
+  promise-type promise promise-constructor-arguments ;
+  try {
+    co_await promise.initial_suspend() ;
+    function-body
+  } catch ( ... ) {
+    if (! initial-await-resume-called )
+      throw ;
+    promise.unhandled_exception() ;
+  }
+final-suspend :
+  co_await promise.final_suspend() ;
+}
+```
+* promise-type[italic]
+* promise-constructor-arguments[italic]
+* promise[italic]
+* function-body[italic]
+* initial-await-resume-called[italic]
+* final-suspend[italic]
+
+- `initial_suspend`呼び出しを含むAwait式は、初期サスペンドポイントとなる。
+- `final_suspend`呼び出しを含むAwait式は、最終サスペンドポイントとなる。
+- _initial-await-resume-called_ は`false`で初期化され、初期サスペンドポイントの式 _await-resume_ が評価される直前に`true`が設定される。
+- _promise-type_ はPromise型を表す。
+- 説明用の変数名 _promise_ は、コルーチンのPromiseオブジェクトを表す。
+- ラベル _final-suspend_ は説明のためにのみ定義される。
+- _promise-constructor-arguments_ は次の通りに決定される:
+    - 引数リスト`Pi`の左辺値を`pi`とする。コルーチンが非静的メンバの場合、`p1`は`*this`を表し`p(i+1)`はi番目の関数パラメータを表す。
+    - 左辺値`p1`...`pn`の実引数リストを用いて、Promiseコンストラクタ呼び出しのオーバーロード解決を試みる。
+    - 適合するコンストラクタが見つかった場合は、_promise-constructor-arguments_ は `(p1, ..., pn)` となる。見つからなかった場合、_promise-constructor-arguments_ は空のリストとなる。
+
+Promise型のスコープにおいて、非修飾な`return_void`および`return_value`の探索が行われる。両方が見つかった場合、プログラムは不適格となる。
+
+コルーチン呼び出しのglvalue結果またはprvalue結果オブジェクトを初期化するために、式 _promise_`.get_return_object()`が使われる。
+`get_return_object`呼び出しは高々1回であり、`initial_suspend`呼び出しよりも前に順序付けられる。
+
+中断状態にあるコルーチンは、そのコルーチンを指すコルーチンハンドルの再開メンバ関数呼び出しによって、継続実行を再開できる。
+再開メンバ関数を呼び出した関数は、再開元(resumer)と呼ばれる。
+中断状態にないコルーチンに対する再開メンバ関数呼び出しは、未定義の動作をもたらす。
+
+処理系はコルーチンのために追加のメモリ領域を確保する必要があるかもしれない。
+このメモリ領域はコルーチン・ステートとして知られ、非配列版のメモリ確保関数(`operator new`)によって確保される。
+メモリ確保関数はPromise型のスコープで名前探索が行われる。
+名前探索に失敗した場合は、グローバルスコープで探索が行われる。
+名前探索がPromise型のスコープで確保関数を見つけた場合は、実引数リストを用いて関数呼び出しのオーバーロード解決が行われる。
+第1引数は`std::size_t`型であり、要求メモリサイズの合計値となる。続く実引数は左辺値`p1`...`pn`となる。
+適合する関数が見つからなかった場合、`std::size_t`型の要求メモリサイズ合計値のみで再度オーバーロード解決が行われる。
+
+Promise型のスコープにおいて、非修飾な`get_return_object_on_allocation_failure`の探索が行われる。
+何らかの宣言が見つかった場合、グローバルな`::operator new(size_t nothrow_t)`形式の確保関数が選択され、メモリ領域確保に失敗すると、コルーチン・ステート用メモリ領域取得のための確保関数呼び出し結果は`nullptr`を返すと想定される。
+このケースにおける確保関数は、例外を投げないnoexcept指定されるべきである。
+メモリ確保関数が`nullptr`を返した場合、コルーチンはその呼び出し元に制御を戻し、戻り値は`T::get_return_object_on_allocation_failure()`呼び出しにより取得する。
+ここで`T`はPromise型を表す。
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;coroutine&amp;gt;
+
+// メモリ確保が必要となったときは::operator new(size_t, nothrow_t)が使われる
+struct generator {
+  struct promise_type;
+  using handle = std::coroutine_handle&amp;lt;promise_type&amp;gt;;
+  struct promise_type {
+    int current_value;
+    static auto get_return_object_on_allocation_failure() { return generator{nullptr}; }
+    auto get_return_object() { return generator{handle::from_promise(*this)}; }
+    auto initial_suspend() { return std::suspend_always{}; }
+    auto final_suspend() { return std::suspend_always{}; }
+    void unhandled_exception() { std::terminate(); }
+    void return_void() {}
+    auto yield_value(int value) {
+      current_value = value;
+      return std::suspend_always{};
+    }
+  };
+  bool move_next() { return coro ? (coro.resume(), !coro.done()) : false; }
+  int current_value() { return coro.promise().current_value; }
+  generator(generator const&amp;amp;) = delete;
+  generator(generator &amp;amp;&amp;amp; rhs) : coro(rhs.coro) { rhs.coro = nullptr; }
+  ~generator() { if (coro) coro.destroy(); }
+private:
+  generator(handle h) : coro(h) {}
+  handle coro;
+};
+
+generator f() { co_yield 1; co_yield 2; }
+
+int main() {
+  auto g = f();
+  while (g.move_next()) std::cout &amp;lt;&amp;lt; g.current_value() &amp;lt;&amp;lt; std::endl;
+}
+```
+* co_yield[color ff0000]
+* std::coroutine_handle&amp;lt;promise_type&amp;gt;[link /reference/coroutine/coroutine_handle.md]
+* from_promise[link /reference/coroutine/coroutine_handle/from_promise.md]
+* resume()[link /reference/coroutine/coroutine_handle/resume.md]
+* done()[link /reference/coroutine/coroutine_handle/done.md]
+* promise()[link /reference/coroutine/coroutine_handle/promise.md]
+* destroy()[link /reference/coroutine/coroutine_handle/destroy.md]
+* suspend_always[link /reference/coroutine/suspend_always.md]
+* std::terminate[link /reference/exception/terminate.md]
+
+コルーチンの終端まで制御が到達、またはコルーチンを指すコルーチンハンドルの[`destroy`](/reference/coroutine/coroutine_handle/destroy.md)メンバ関数が呼び出されると、コルーチン・ステートは破棄される。
+
+メモリ解放関数はPromise型のスコープで名前探索が行われる。
+名前探索に失敗した場合は、グローバルスコープで探索が行われる。
+解放関数の探索が、ポインタパラメータのみの通常の解放関数と、ポインタとサイズをパラメータにとる通常の解放関数の両方を見つける場合、2個のパラメータをとる解放関数が選択される。
+そうでなければ、1個のパラメータをとる解放関数が選択される。
+通常の解放関数が見つからなければ、プログラムは不適格となる。
+選択された解放関数の呼び出しでは、その第1実引数に解放すべきメモリブロックのアドレスが渡される。
+解放関数のパラメータに`std::size_t`が使われる場合、その実引数としてメモリブロックのサイズが渡される。
+
+コルーチンが呼び出されるとき、パラメータ初期化が行われたのち、各コルーチンパラメータのコピーが作成される。
+型cv `T`をもつパラメータにおいて、そのコピーはパラメータを参照する`T`型のxvalueで直接初期化された自動記憶域期間をもつcv `T`型の変数となる。
+各パラメータのコピーの初期化と破棄は、呼び出されたコルーチンのコンテキストで行われる。
+パラメータのコピーの初期化は、コルーチンPromiseコンストラクタの呼び出しより前に順序付けられ、それぞれは互いに非決定順で順序付けられる。
+パラメータのコピーの生存期間は、パラメータPromiseオブジェクトの終了直後で終了する。
+（コルーチンが参照渡しのパラメータを持つ場合、そのパラメータにより参照されるエンティティ生存期間終了後のコルーチン再開は未定義動作を引き起こしやすい。）
+
+式 _promise_`.unhandled_exception()`の評価が例外で終了した場合、コルーチンは最終サスペンドポイントで中断したとみなされる。
+
+式 `co_await ` _promise_`.final_suspend()` は例外送出してはならない。
+
+### Await式
+`co_await`式は、そのオペランド式で表される計算の完了を待機しているあいだ、コルーチン評価をサスペンド(中断)するために用いる。
+
+```cpp
+co_await cast-expression
+```
+* cast-expression[italic]
+
+Await式は、コルーチン本体複合文の内側（かつハンドラの外側）の潜在的に評価される式(potentially-evaluated expression)でのみ、出現してよい。
+宣言文やfor構文の宣言を伴う初期化部では、その初期化子の中でのみAwait式が出現してよい。
+デフォルト引数ではAwait式を用いることはできない。
+Await式は、静的記憶域もしくは[スレッドローカル](/lang/cpp11/thread_local_storage.md)なブロックスコープ変数の初期化に出現してはならない。
+関数内でAwait式を置けるコンテキストを、関数の中断コンテキストと呼ぶ。
+
+Await式の評価では、次のような補助的な型、式、オブジェクトを用いる：
+
+- _p_ を同Await式を含むコルーチンのPrimiseオブジェクトの左辺値名とし、`P`を同オブジェクトの型とする。
+- _a_ (Awaitable) を下記のように定義する：
+    - Await式がYield式または初期サスペンドポイントまたは最終サスペンドポイントにより暗黙に生成された場合、_a_ をその _cast-expression_ とする。
+    - `P`のスコープで非修飾な`await_transform`の探索により一つ以上の名前がみつかった場合は、 _a_ を _p_`.await_transform(` _cast-expression_ `)`とする。
+    - それ以外では _a_ を _cast-expression_ とする。
+- _o_ (Awaiter) を下記のように定義する。_o_ がprvalueの場合は[Temporary materialization conversion](https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html)が行われる：
+    - 実引数 _a_ に対して適用可能な`operator co_await`関数を列挙し、_o_ をオーバーロード解決により選択された関数呼び出しとする。
+    - 適合する関数が見つからない場合、_o_ を _a_ とする。
+    - オーバーロード解決が曖昧な場合、プログラムは不適格となる。
+- _e_ を、_o_ の評価結果を参照する左辺値とする。
+- _h_ を、同Await式を含むコルーチンを参照する[`std::coroutine_handle&amp;lt;P&amp;gt;`](/reference/coroutine/coroutine_handle.md)型のオブジェクトとする。
+- _await-ready_ を、`bool`に変換されうる式 _e_`.await_ready()`とする。
+- _await-suspend_ を、式 _e_`.await_suspend(` _h_ `)`とする。この式（の結果）は`void`であるか、`bool`または任意の型`Z`に対する[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)型のprvalueであるべき。
+- _await-resume_ を、式 _e_`.await_resume()`とする。
+
+Await式は式 _await-resume_ と同じ型、同じ値カテゴリを持つ。
+
+Await式は式 _o_ と式 _await-resume_ を評価し、続いて：
+
+- _await-ready_ の結果が`false`の場合、コルーチンは中断状態とみなされる。その後に：
+    - _await-suspend_ の型が[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)の場合、_await-suspend_[`.resume()`](/reference/coroutine/coroutine_handle/resume.md)が評価される。
+    - そうではなく _await-suspend_ の型が`bool`の場合、_await-suspend_ が評価され、その結果が`false`であればコルーチンは再開する。
+    - それ以外の場合、_await-suspend_ が評価される。
+- _await-suspend_ の評価が例外で終了した場合、例外が捕捉されてコルーチンが再開し、その例外は即座に再スローされる。そうでなければ、スコープ終了をともなわずに現在のコルーチンの呼出元もしくは再開元へ制御フローを戻す。
+- _await-ready_ の結果が`true`またはコルーチンが再開した場合、_await-resume_ の評価結果がAwait式の結果となる。
+
+```cpp
+template &amp;lt;typename T&amp;gt;
+struct my_future {
+  /* ... */
+  bool await_ready();
+  void await_suspend(std::coroutine_handle&amp;lt;&amp;gt;);
+  T await_resume();
+};
+
+template &amp;lt;class Rep, class Period&amp;gt;
+auto operator co_await(std::chrono::duration&amp;lt;Rep, Period&amp;gt; d) {
+  struct awaiter {
+    std::chrono::system_clock::duration duration;
+    /* ... */
+    awaiter(std::chrono::system_clock::duration d) : duration(d) {}
+    bool await_ready() const { return duration.count() &amp;lt;= 0; }
+    void await_resume() {}
+    void await_suspend(std::coroutine_handle&amp;lt;&amp;gt; h) { /* ... */ }
+  };
+  return awaiter{d};
+}
+
+using namespace std::chrono;
+
+my_future&amp;lt;int&amp;gt; h();
+
+my_future&amp;lt;void&amp;gt; g() {
+  std::cout &amp;lt;&amp;lt; &amp;#34;just about go to sleep...\n&amp;#34;;
+  co_await 10ms;
+  std::cout &amp;lt;&amp;lt; &amp;#34;resumed\n&amp;#34;;
+  co_await h();
+}
+
+auto f(int x = co_await h()); // エラー: await式は関数中断コンテキストの外
+int a[] = { co_await h() };   // エラー: await式は関数中断コンテキストの外
+```
+* co_await[color ff0000]
+* std::coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
+
+### Yield式
+`co_yield`式は、コルーチンから値を生成(yield)するときに用いる。
+その動作はAwait式にて書き換え可能であり、コルーチン利用者向けのシンタックスシュガーとも解釈できる。
+
+```cpp
+co_yield assignment-expression
+co_yield braced-init-list
+```
+* assignment-expression[italic]
+* braced-init-list[italic]
+
+Yield式は関数の中断コンテキストにのみ出現してよい。
+_e_ をYield式のオペランド、_p_ を同式を含むコルーチンのPromiseオブジェクトのlvalue名としたとき、Yield式は式`co_await` _p_`.yield_value(` _e_ `)`と等価である。
+
+```cpp
+template &amp;lt;typename T&amp;gt;
+struct my_generator {
+  struct promise_type {
+    T current_value;
+    /* ... */
+    auto yield_value(T v) {
+      current_value = std::move(v);
+      return std::suspend_always{};
+    }
+  };
+  struct iterator { /* ... */ };
+  iterator begin();
+  iterator end();
+};
+
+my_generator&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; g1() {
+  for (int i = i; i &amp;lt; 10; ++i) co_yield {i,i};
+}
+my_generator&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; g2() {
+  for (int i = i; i &amp;lt; 10; ++i) co_yield make_pair(i,i);
+}
+
+auto f(int x = co_yield 5); // エラー: yield式は関数中断コンテキストの外
+int a[] = { co_yield 1 };   // エラー: yield式は関数中断コンテキストの外
+
+int main() {
+  auto r1 = g1();
+  auto r2 = g2();
+  assert(std::equal(r1.begin(), r1.end(), r2.begin(), r2.end()));
+}
+```
+* co_yield[color ff0000]
+* std::suspend_always[link /reference/coroutine/suspend_always.md]
+* std::move[link /reference/utility/move.md]
+* pair[link /reference/utility/pair.md]
+* make_pair[link /reference/utility/make_pair.md]
+* std::equal[link /reference/algorithm/equal.md]
+
+## co_return文
+`co_return`文は、コルーチンを終了し呼出元へ制御を戻すために用いる。
+`co_yield`／`co_await`いずれも含まないコルーチンを定義する場合にも利用できる。
+
+```cpp
+co_return expr-or-braced-init-list opt ;
+```
+* expr-or-braced-init-list[italic]
+* opt[italic]
+
+`co_return`文または中断により、コルーチンは呼出元もしくは再開元に制御を戻す。
+コルーチンは通常の`return`文を含んではならない。
+
+`co_return`文の _expr-or-braced-init-list_ はオペランドと呼ばれる。
+_p_ をコルーチンPromiseオブジェクトのlvalue名とすると、`co_return`文は次と等価である：
+
+```cpp
+{ S; goto final-suspend ; }
+```
+* S[italic]
+* final-suspend[italic]
+
+ここで _final-suspend_ はコルーチン動作説明用の最終サスペンドポイントラベル名であり、_S_ は次の通り定義される：
+
+- オペランドが _braced-init-list_ または非`void`型の式の場合、_S_ を _p_`.return_value(` _expr-or-braced-init-list_ `)`とする。式 _S_ は `void`型のpvalueであるべき。
+- そうでなければ、_S_ を複合文 `{` _expression_ _opt_ `;` _p_`.return_void(); }`とする。式 _p_`.return_void()`は`void`型のpvalueであるべき。
+
+_p_`.return_void()`が有効な式のとき、コルーチン本体の終端到達はオペランド無し`co_return`と等価である。
+そうでなければ、コルーチン本体の終端到達は未定義の動作を引き起こす。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+// コルーチン利用ライブラリ: ジェネレータ型
+struct generator {
+  // ジェネレータに関連付けられるPromise型
+  struct promise_type {
+    // co_yield式で指定されるint値を保持する変数
+    int value_;
+
+    auto get_return_object()
+    {
+      // コルーチンに紐づくPromiseオブジェクト(*this)から
+      // ジェネレータ型のコルーチン戻り値オブジェクトを生成
+      return generator{*this};
+    };
+    auto initial_suspend()
+    {
+      // コルーチン本体処理の開始前に無条件サスペンド
+      return std::suspend_always{};
+    }
+    auto final_suspend()
+    {
+      // コルーチン本体処理の終了後に無条件サスペンド
+      return std::suspend_always{};
+    }
+    auto yield_value(int v)
+    {
+      // co_yield式で渡される値を保持し、コルーチンを無条件サスペンド
+      value_ = v;
+      return std::suspend_always{};
+    }
+    void return_void() {}
+    void unhandled_exception() { std::terminate(); }
+  };
+  // ジェネレータに関連付けられるコルーチンハンドル型
+  using coro_handle = std::coroutine_handle&amp;lt;promise_type&amp;gt;;
+
+  // 範囲for構文サポート用イテレータ型
+  struct iterator {
+    // 対象のコルーチンハンドル
+    coro_handle coro_;
+    // 対象コルーチン本体処理が終了したかを表すフラグ
+    bool done_;
+
+    iterator&amp;amp; operator++()
+    {
+      // yield_value()で中断したコルーチンを再開する
+      coro_.resume();
+      // (co_yield式評価もしくはコルーチン本体処理の終了により制御が戻ってくる)
+      done_ = coro_.done();
+      return *this;
+    }
+    bool operator!=(const iterator&amp;amp; rhs) const
+    {
+      return done_ != rhs.done_;
+    }
+    int operator*() const
+    {
+      // Promiseオブジェクトが保持している値を返す
+      return coro_.promise().value_;
+    }
+  };
+
+  ~generator()
+  {
+    if (coro_)
+      coro_.destroy();
+  }
+
+  generator(generator const&amp;amp;) = delete;
+  generator(generator&amp;amp;&amp;amp; rhs) 
+    : coro_(std::exchange(rhs.coro_, nullptr)) {}
+
+  // 範囲for構文サポート用のメンバ関数
+  iterator begin()
+  {
+    // initial_suspend()で中断したコルーチンを再開する
+    coro_.resume();
+    // (初回co_yield式評価により制御が戻ってくる)
+    return {coro_, coro_.done()};
+  }
+  iterator end()
+  {
+    // 終端位置を表現する番兵イテレータ
+    return {{}, true};
+  }
+
+private:
+  // Promiseオブジェクト経由でコルーチンハンドルを取得する
+  explicit generator(promise_type&amp;amp; p)
+    : coro_(coro_handle::from_promise(p)) {}
+
+  coro_handle coro_;
+};
+
+
+// ユーザ定義コルーチン
+generator iota(int end)
+{
+  // コルーチンに対応したPromise型 generator::promise_typeの
+  // Promiseオブジェクト(p)が生成される。
+
+  for (int n = 0; n &amp;lt; end; ++n) {
+    // 下式は co_await p.yield_value(n) と等価
+    co_yield n;
+  }
+  // コルーチン本体の終端到達により p.return_void() 呼び出し
+}
+
+int main()
+{
+  // コルーチンを呼び出し、整数生成ジェネレータを取得する。
+  auto g = iota(10);
+  // このタイミングではまだコルーチン本体は実行されない。
+
+  // 範囲for構文を用いてコルーチン本体を実行する。
+  // ここではコルーチンiotaの値生成ループ処理ステップと、
+  // main関数の表示ループ処理ステップが交互に実行される。
+  for (int v: g) {
+    std::cout &amp;lt;&amp;lt; v;
+  }
+}
+```
+* co_yield[color ff0000]
+* std::exchange[link /reference/utility/exchange.md]
+* std::terminate()[link /reference/exception/terminate.md]
+* std::coroutine_handle[link /reference/coroutine/coroutine_handle.md]
+* std::suspend_always[link /reference/coroutine/suspend_always.md]
+* destroy()[link /reference/coroutine/coroutine_handle/destroy.md]
+* resume()[link /reference/coroutine/coroutine_handle/resume.md]
+* done()[link /reference/coroutine/coroutine_handle/done.md]
+* from_promise[link /reference/coroutine/coroutine_handle/from_promise.md]
+* promise()[link /reference/coroutine/coroutine_handle/promise.md]
+
+### 出力
+```
+0123456789
+```
+
+
+## この機能が必要になった背景・経緯
+
+多くのプログラミング言語で対応されており広い実績のあるコルーチン機能を、C++言語でも使えるよう[2013年頃](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3708.pdf)から検討が始まっている。
+
+2017年には [ISO/IEC TS 22277 C++ Extensions for Coroutines](https://www.iso.org/standard/73008.html)（通称&amp;#34;Coroutines TS&amp;#34;） として正式発効され、いくつかの追加の仕様修正をへてC++20言語仕様本体への統合が決定された。
+
+C++言語仕様へのコルーチン導入によって、ジェネレータの協調的マルチタスクのサポート、ファイルやネットワークなど非同期I/Oライブラリとの統合が期待されている。
+
+
+## 検討されたほかの選択肢
+
+C++20コルーチンはスタックレスコルーチンとして導入されたが、スタックフル(Stackful)コルーチン＝ファイバー(Fiber)の導入検討も長らく行われてきた。
+スタックフルコルーチンは将来のC++仕様導入に向けて引き続き検討されている。
+（本ページ執筆時点では[提案文書P0876R10](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0876r10.pdf)が最新）
+
+C++20コルーチンでは、コルーチン・ステートのために動的メモリ確保が行われる可能性がある。
+一定条件を満たせばコンパイラ最適化によって動的メモリ確保が省略されるとしているが、言語仕様として動的メモリ確保を避ける仕様も検討された（通称&amp;#34;Core Coroutines&amp;#34;)。
+最終的には既に実績のあるCoroutinesTS（発案者の名前にちなみ&amp;#34;Gor-routines&amp;#34;と呼ばれた）ベースのコルーチン仕様が採用されることになった。
+
+C++20コルーチンに関するキーワードは、いずれも接頭辞`co_`が付与されている。
+何度かの改名提案（[P0071R0](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0071r0.html)、[P1485R1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1485r1.html)）も提出されたが、いずれも否決されてC++20仕様に落ち着いた。
+
+
+## 関連項目
+- [`&amp;lt;coroutine&amp;gt;`](/reference/coroutine.md)
+
+
+## 参照
+- [N4680 C++ Extensions for Coroutines(Coroutines TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4680.pdf)
+- [P0911R1 Rebase the Coroutines TS onto the C++17 Standard](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0911r1.html)
+- [P0913R1 Add symmetric coroutine control transfer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0913r1.html)
+- [P0914R1 Add parameter preview to coroutine promise constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0914r1.html)
+- [P0664R4 C++ Coroutine TS Issues](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0664r4.html)
+- [P0912R5 Merge Coroutines TS into C++20 working draft](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0912r5.html)
+
+- [Coroutine Theory](https://lewissbaker.github.io/2017/09/25/coroutine-theory)
+- [C++ Coroutines: Understanding operator co_await](https://lewissbaker.github.io/2017/11/17/understanding-operator-co-await)
+- [C++ Coroutines: Understanding the promise type](https://lewissbaker.github.io/2018/09/05/understanding-the-promise-type)
+- [C++ Coroutines: Understanding Symmetric Transfer](https://lewissbaker.github.io/2020/05/11/understanding_symmetric_transfer)
+- [C++ co_awaiting coroutines](https://blog.panicsoftware.com/co_awaiting-coroutines/)
+- [20分くらいでわかった気分になれるC++20コルーチン](https://www.slideshare.net/yohhoy/20c20)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>状態を持たないラムダ式を、デフォルト構築可能、代入可能とする -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
new file mode 100644
index 000000000..54c60d3ce
--- /dev/null
+++ b/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md
@@ -0,0 +1,162 @@
+# 状態を持たないラムダ式を、デフォルト構築可能、代入可能とする
+* cpp20[meta cpp]
+
+## 概要
+
+C++17まではラムダ式の生成するクロージャ型に定義される特殊メンバ関数はコピー/ムーブコンストラクタとデストラクタのみだったが、C++20からは状態を持たない、すなわちキャプチャをしていないラムダ式の場合にのみそのクロージャ型はデフォルトコンストラクタと代入演算子を持つようになる。
+
+```cpp
+auto l = [](){ return 20;};
+using lambda_t = decltype(l);
+
+lambda_t l2{};  // ok、デフォルト構築
+
+l2 = l;             // ok、コピー代入
+l2 = std::move(l);  // ok、ムーブ代入
+
+
+auto lc = [n = 1](){ return n;};
+using clambda_t = decltype(lc);
+
+clambda_t lc2{};    // ng、デフォルトコンストラクタはdeleteされている
+clambda_t lc3{lc};  // ok、コピー構築
+
+// 共にng、コピー代入演算子はdeleteされている
+lc3 = lc;
+lc3 = std::move(lc);
+```
+
+## 仕様
+
+ラムダ式がキャプチャをしていない場合、そのクロージャ型にはデフォルトコンストラクタとコピー/ムーブ代入演算子が`default`指定で定義される。
+
+ラムダ式がキャプチャをしている場合、そのクロージャ型のデフォルトコンストラクタとコピー代入演算子は`delete`指定で定義される（ムーブ代入演算子は宣言されない）。
+
+```cpp
+// キャプチャをしていないラムダ式のクロージャ型は次のようなメンバを持つ
+struct closure {
+  closure() = default;  // C++20から
+  closure(const closure&amp;amp;) = default;
+  closure(closure&amp;amp;&amp;amp;) = default;
+
+  closure&amp;amp; operator=(const closure&amp;amp;) = default; // C++20から
+  closure&amp;amp; operator=(closure&amp;amp;&amp;amp;) = default;      // C++20から
+
+  auto operator()(params...) const;
+};
+
+// キャプチャをしているラムダ式のクロージャ型は次のようなメンバを持つ
+struct closure {
+  closure() = delete;
+  closure(const closure&amp;amp;) = default;
+  closure(closure&amp;amp;&amp;amp;) = default;
+
+  closure&amp;amp; operator=(const closure&amp;amp;) = delete;
+
+  auto operator()(params...) const;
+
+  // コピーキャプチャした変数に対応するメンバ変数
+  T1 c1;
+  T2 c2;
+  ...
+};
+```
+
+## 例
+
+以下の例では、「[評価されない文脈でのラムダ式](./wording_for_lambdas_in_unevaluated_contexts.md)」による仕様を同時に用いている。
+
+### 連想コンテナの比較をカスタマイズする
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;set&amp;gt;
+
+int main()
+{
+  std::set&amp;lt;int, decltype([](auto lhs, auto rhs){ return lhs &amp;gt; rhs;})&amp;gt; set{};
+  set.insert({1, 2, 4, 3, 0, 10, 9, 7, 5, 6, 8, 1, 5, 10});
+  
+  for (auto n : set) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+
+### 出力
+```
+10
+9
+8
+7
+6
+5
+4
+3
+2
+1
+0
+```
+
+### `std::unique_ptr`にカスタムデリータを設定する
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;memory&amp;gt;
+
+using handle_t = void*;
+
+void close_handle(handle_t*) {
+  std::cout &amp;lt;&amp;lt; &amp;#34;The handle was closed&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+handle_t get_handle() {
+  static int n{};
+  return &amp;amp;n;
+}
+
+int main()
+{
+  handle_t h = get_handle();
+  std::unique_ptr&amp;lt;handle_t, decltype([](auto h) {close_handle(h);})&amp;gt; handle{&amp;amp;h};
+}
+```
+
+### 出力
+```
+The handle was closed
+```
+
+## この機能が必要になった背景・経緯
+
+これまでは、上記の例のように動作をカスタムする関数オブジェクトをテンプレートパラメータで受け取る設計のクラスをカスタマイズするためにラムダ式を用いる場合、そのラムダ式のクロージャオブジェクトをコンストラクタに引き渡す必要があった。
+
+```cpp
+// ラムダ式を一度変数に受けてから、コンストラクタに渡す
+auto greater = [](auto lhs, auto rhs){ return lhs &amp;gt; rhs;};
+std::set&amp;lt;int, decltype(greater)&amp;gt; set{greater};
+
+auto custom_deleater = [](auto h) {close_handle(h);};
+std::unique_ptr&amp;lt;handle_t, decltype(custom_deleater)&amp;gt; handle{&amp;amp;h, custom_deleater};
+```
+
+これらのクラスは渡された関数オブジェクトの型がデフォルト構築可能であれば内部でデフォルト構築して初期化を行うため、本来はこのようにコンストラクタから渡す必要はない。しかし、C++17までのラムダ式はデフォルトコンストラクタが常に`delete`されていたためそれができなかった。
+
+また、そのように構築したオブジェクトを代入しようとする場合、ラムダ式のクロージャ型の代入演算子が常に`delete`されていたためできなかった。
+
+```cpp
+auto greater = [](auto lhs, auto rhs){ return lhs &amp;gt; rhs;};
+std::set&amp;lt;int, decltype(greater)&amp;gt; set1{greater}, set2{greater};
+
+set1 = set2;  // C++17まではコンパイルエラー
+```
+
+ラムダ式は関数オブジェクトを生成する糖衣構文であるが、これらのことは対応する関数オブジェクトを直接書いた場合と一貫しておらず不便であるため、状態を持たないラムダ式に限ってデフォルト構築と代入が可能になるように変更された。
+
+C++20では同時に[評価されない文脈にラムダ式を書くことができるようになった](./wording_for_lambdas_in_unevaluated_contexts.md)ため、この様な場合にラムダ式のクロージャ型を直接取得し渡すことができ、余計なコードをほとんど削減することができるようになる。
+
+## 関連項目
+- [評価されない文脈でのラムダ式](./wording_for_lambdas_in_unevaluated_contexts.md)
+
+## 参照
+- [P0624R2 Default constructible and assignable stateless lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0624r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>指示付き初期化 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/designated_initialization.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20/designated_initialization.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/designated_initialization.md b/lang/cpp20/designated_initialization.md
new file mode 100644
index 000000000..806e1a3ca
--- /dev/null
+++ b/lang/cpp20/designated_initialization.md
@@ -0,0 +1,110 @@
+# 指示付き初期化
+
+* cpp20[meta cpp]
+
+## 概要
+C++20では、波カッコによる集成体初期化においてメンバ名を指定して初期化が行える。
+
+```cpp
+struct Point3D { int x; int y; int z = 0; };
+struct Rect { Point3D p1; Point3D p2; };
+
+// 以下の例では、変数名と初期化子リストの間に=を書いても良い
+
+Point3D p1 {1, 2, 3};                // (1) OK これは通常の集成体初期化
+Point3D p2 {.x = 1, .y = 2, .z = 3}; // (2) OK (1)と同じ
+Point3D p3 {.x{1}, .y{2}, .z{3}};    // (3) OK (1)と同じ
+Point3D p4 {.x{1}};                  // (4) OK {.x{1}, .y{}, .z = 0}と同じ
+Point3D p5 {.z{3}};                  // (5) OK {.x{}, .y{}, .z{3}}と同じ
+Point3D p6 {.z = 3, .y = 2, .x = 1}; // (6) エラー: メンバの宣言順通りに並べなければならない
+
+Rect r1 { .p1{.x = 1, .y = 2, .z = 3} };     // OK
+Rect r1 { .p1.x = 1, .p1.y = 2, .p1.z = 3 }; // エラー
+```
+
+* この`.x`、`.y` などを**指示子**(designator)という
+* `.x = 1`や`.y{2}`などを**指示付き初期化子**(designated initializer)という
+* `{.x = 1, .y = 2, .z = 3}`などを**指示付き初期化子リスト**(designated initializer list)という
+
+## 仕様
+
+* 指示子は非静的データメンバの宣言順通りに並べなければならない
+* 指示子は省略できる
+    * 省略すると、デフォルトメンバ初期化子または`{}`で初期化する
+* 暗黙の縮小変換はできない
+* 通常の初期化子とは混在できない
+* 指示付き初期化は`.a.x`のようにはネストできない
+    * 別の波カッコによる集成体初期化がネストしている場合は問題ない
+* 共用体に対する指示子は(最大で)1つであること
+    * 共用体を指示付き初期化するときは、指示子は1つでなければならない
+    * 無名共用体をメンバに持つ型を指示付き初期化するときは、その無名共用体のメンバに対応する指示子は最大で1つでなければならない
+* [丸カッコによる集成体初期化](allow_initializing_aggregates_from_a_parenthesized_list_of_values.md)では、指示付き初期化はできない
+
+構文的には、指示付き初期化子リスト、初期化子リスト、空リストを含めて波カッコによる初期化である。指示付き初期化子リストも他と同様に`return`文や実引数などに書くことができる。
+
+このことを活用すると、いわゆる名前付き引数のような書き方もできる。ただし、指示子が並び替えできないので少々不便である。
+
+一方、メンバ名とその宣言順をコンパイル時にチェックできるという利点もある。通常の初期化子リストでは、型が同じメンバ同士を入れ替えてもエラーとはならない。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+struct Point3D { int x; int y; int z = 0; };
+
+std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream&amp;amp; os, const Point3D&amp;amp; p){
+  return os &amp;lt;&amp;lt; &amp;#39;(&amp;#39; &amp;lt;&amp;lt; p.x &amp;lt;&amp;lt; &amp;#39;,&amp;#39; &amp;lt;&amp;lt; p.y &amp;lt;&amp;lt; &amp;#39;,&amp;#39; &amp;lt;&amp;lt; p.z &amp;lt;&amp;lt; &amp;#39;)&amp;#39;;
+}
+
+int main()
+{
+  Point3D p1 {1, 2, 3};
+  Point3D p2 {.x = 1, .y = 2, .z = 3};
+  Point3D p3 {.x{1}, .y{2}, .z{3}};
+  Point3D p4 {.x{1}};
+  Point3D p5 {.z{3}};
+  std::cout &amp;lt;&amp;lt; p1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; p2 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; p3 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; p4 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; p5 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+
+### 出力
+```
+(1,2,3)
+(1,2,3)
+(1,2,3)
+(1,0,0)
+(0,0,3)
+```
+
+## この機能が必要になった背景・経緯
+
+最初にC99で指示付き初期化が導入され、C++にも取り込まれることになった。
+
+ただし、次の機能はCでは有効だがC++には取り込まれていないなど、完全に互換性があるわけではない。
+
+* 指示子の自由な並び替え(メンバの宣言順と一致しない順序)  
+  初期化子リストの要素は記述順に評価されるが、一方でC++ではデータメンバは宣言順に初期化しなければならないため。
+* 配列の指示付き初期化  
+  ラムダ式のキャプチャと競合するため。
+* 指示付き初期化のネスト  
+  使用頻度が低いため。
+* 指示子と通常の初期化子の混在
+
+```cpp
+// P0329R4から引用
+struct A { int x, y; };
+struct B { struct A a; };
+struct A a = {.y = 1, .x = 2}; // Cでは有効、C++20では無効
+int arr[3] = {[1] = 5};        // Cでは有効、C++20では無効
+struct B b = {.a.x = 0};       // Cでは有効、C++20では無効
+struct A a = {.x = 1, 2};      // Cでは有効、C++20では無効
+```
+* P0329R4[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0329r4.pdf]
+
+## 参照
+
+* [P0329R4 Designated initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0329r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>型の文脈でtypenameの省略を許可 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/down_with_typename.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20/down_with_typename.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/down_with_typename.md b/lang/cpp20/down_with_typename.md
new file mode 100644
index 000000000..05985e67a
--- /dev/null
+++ b/lang/cpp20/down_with_typename.md
@@ -0,0 +1,85 @@
+# 型の文脈でtypenameの省略を許可
+
+* cpp20[meta cpp]
+
+## 概要
+
+型しか現れない文脈では、依存名を解決するための`typename`キーワードを省略できるようにする。
+
+## 仕様
+
+修飾名は、以下の条件を満たすときに型名とみなされる。
+
+* 型しか現れない文脈にある
+    * new演算子に指定する型名
+    * [エイリアス宣言またはエイリアステンプレート宣言](/lang/cpp11/alias_templates.md)に現れる型名
+    * [後置の戻り値型](/lang/cpp11/trailing_return_types.md)
+    * テンプレート型引数のデフォルト引数
+    * `static_cast`、`const_cast`、`reinterpret_cast`、`dynamic_cast`の型名
+* 以下の宣言における型指定子である
+    * 名前空間スコープの単純宣言(≒変数宣言または構造化束縛宣言)または関数定義
+    * メンバ宣言
+    * メンバ宣言の中の引数宣言(デフォルト引数に現れる場合を除く)
+    * 識別子が修飾名である関数または関数テンプレートの引数宣言(デフォルト引数に現れる場合を除く)
+    * [ラムダ式](/lang/cpp11/lambda_expressions.md)または[requires式](consepts.md)の引数宣言(デフォルト引数に現れる場合を除く)
+    * 非型テンプレートパラメーターの宣言
+
+```cpp
+// P0634R3より引用
+template&amp;lt;class T&amp;gt; T::R f();     // OK, グローバルスコープにおける関数の戻り値
+template&amp;lt;class T&amp;gt; void f(T::R); // Ill-formed, void型の変数テンプレートの宣言
+
+template&amp;lt;class T&amp;gt; struct S {
+  // クラススコープ
+  using Ptr = PtrTraits&amp;lt;T&amp;gt;::Ptr; // OK, エイリアス宣言
+  T::R f(T::P p) {               // OK, メンバ宣言、およびメンバ宣言における仮引数宣言
+    return static_cast&amp;lt;T::R&amp;gt;(p); // OK, static_castの型名
+  }
+  auto g() -&amp;gt; S&amp;lt;T*&amp;gt;::Ptr;        // OK, 後置戻り値型
+};
+
+template&amp;lt;typename T&amp;gt; void f() {
+  // ブロックスコープ
+  void (*pf)(T::X); // T::Xで初期化されるvoid*型の変数pf
+  void g(T::X);     // エラー: void型の変数宣言
+}
+```
+- P0634R3[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html]
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template&amp;lt;typename T&amp;gt;
+auto Begin(const T&amp;amp; t) -&amp;gt; T::const_iterator {
+  return t.begin();
+}
+
+int main()
+{
+  std::vector v = {1, 2, 3, 4, 5};
+  std::cout &amp;lt;&amp;lt; *Begin(v) &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+1
+```
+
+## この機能が必要になった背景・経緯
+
+以前から基底クラスの指定では`typename`を省略することができた。
+
+```cpp
+template&amp;lt;class T&amp;gt;
+struct Derived: T::Base // typename不要
+{};
+```
+
+しかし、他にも型しか現れない文脈は存在するので、それらでも`typename`を省略できるようになった。
+
+## 参照
+
+- [P0634R3 Down with `typename`!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>空オブジェクトに対する最適化を支援する属性[[no_unique_address]] -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20/language_support_for_empty_objects.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/language_support_for_empty_objects.md b/lang/cpp20/language_support_for_empty_objects.md
new file mode 100644
index 000000000..2a491ae9c
--- /dev/null
+++ b/lang/cpp20/language_support_for_empty_objects.md
@@ -0,0 +1,127 @@
+# 空オブジェクトに対する最適化を支援する属性[[no_unique_address]]
+
+* cpp20[meta cpp]
+
+## 概要
+
+C++20では、空オブジェクトに対する最適化を支援する属性`[[no_unique_address]]`が追加された。
+
+`[[no_unique_address]]`属性は、非静的データメンバに対して指定し、そのメンバがユニークなアドレスを持つ必要がないことを表明する。処理系は、そのようなメンバを別のメンバや基底クラスのサブオブジェクトと同じアドレスに配置することで、クラスを小さくすることができる。
+
+```cpp
+class Empty{};
+class A
+{
+  [[no_unique_address]] Empty e; // eはユニークなアドレスを持つ必要がない (cと同じアドレスになる可能性がある)
+  char c;
+};
+```
+
+## 仕様
+
+基底クラスのサブオブジェクトおよび`[[no_unique_address]]`属性の付いたメンバは、潜在的に重なるサブオブジェクト(potentially-overlapping subobject)であり、同じアドレスに配置される可能性がある。
+
+* `[[no_unique_address]]`属性の付いた同じ型または同じ型のサブオブジェクトを持つ非静的データメンバが複数ある場合、それらに共通するサブオブジェクトは互いに異なるアドレスに配置される。
+
+* `[[no_unique_address]]`属性を指定しても、実際に空オブジェクトでない場合は効果がない。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+class Empty {};
+
+struct A
+{
+  Empty e;
+  char c;
+};
+
+struct B
+{
+  [[no_unique_address]] Empty e;
+  char c;
+};
+
+bool is_same_addr(void* x, void* y){
+    return x == y;
+}
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; sizeof(A) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; sizeof(B) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  A a;
+  B b;
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+  std::cout &amp;lt;&amp;lt; is_same_addr(&amp;amp;a.e, &amp;amp;a.c) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; is_same_addr(&amp;amp;b.e, &amp;amp;b.c) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  return 0;
+}
+```
+
+### 出力例
+```
+2
+1
+false
+true
+```
+
+## この機能が必要になった背景・経緯
+
+ジェネリックなコードでは、空の型がよく使われる。
+
+* 例えば、非静的データメンバを持たない関数オブジェクトなど
+
+しかし、空の型であっても、ユニークなアドレスを割り当てるために大きさが0にはならない。
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+class Empty {};
+
+class A
+{
+  Empty e1;
+  char c;
+};
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; sizeof(Empty) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; // 1
+  std::cout &amp;lt;&amp;lt; sizeof(A) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;     // 2
+  return 0;
+}
+```
+
+一方で、空の型と別の型が派生クラスの関係にある場合は、空の型の大きさを0とする最適化が許されている。これをEmpty Base Optimization(EBO)という。
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+class Empty {};
+
+class B: Empty
+{
+  char c;
+};
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; sizeof(B) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; // 1
+  return 0;
+}
+```
+
+しかし、EBOを働かせるために派生クラスを作ると、基底クラスのメンバ名が派生クラスのスコープに漏れたり、コードが難解になったりする問題があった。
+
+`[[no_unique_address]]`を使うことで、基底クラスのサブオブジェクトだけでなくデータメンバのサイズも0にできるので、EBOのために設計を変える必要がなくなる。
+
+
+## 関連項目
+- [C++11 属性構文](/lang/cpp11/attributes.md)
+- [`is_empty`](/reference/type_traits/is_empty.md)
+
+## 参照
+- [P0840R2 Language support for empty objects](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0840r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]] -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20/likely_and_unlikely_attributes.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/likely_and_unlikely_attributes.md b/lang/cpp20/likely_and_unlikely_attributes.md
new file mode 100644
index 000000000..55f5df3f2
--- /dev/null
+++ b/lang/cpp20/likely_and_unlikely_attributes.md
@@ -0,0 +1,71 @@
+# 確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]]
+* cpp20[meta cpp]
+
+## 概要
+if文やswitch文といった分岐制御構文において、条件分岐先のうちどれが実行される可能性が高いかという情報を、C++コンパイラへ最適化ヒントとして与える属性である。
+これらの属性を適切に用いると、C++コンパイラはより高速に動作するプログラムを生成する可能性がある。
+
+`[[likely]]`, `[[unlikely]]`属性はあくまでヒント情報にすぎないため、C++コンパイラはこれらを完全に無視するかもしれない。
+また実際にどの程度の効果がえられるかは、C++コンパイラの最適化性能、動作環境のCPUアーキテクチャなどに依存する。
+
+
+## 仕様
+`[[likely]]`, `[[unlikely]]`属性は、ラベル または 文 に対して指定できる。
+ある要素に対して`[[likely]]`と`[[unlikely]]`を同時指定してはならない。
+
+
+## 例
+```cpp
+bool process()
+{
+  if (!do_preprocess()) [[unlikely]] {
+    // （めったに失敗しないが）サブ処理に失敗したらfalseを返す
+    return false;
+  }
+
+  // 何らかのメイン処理
+
+  if (!do_postprocess()) [[unlikely]] {
+    // （めったに失敗しないが）サブ処理に失敗したらfalseを返す
+    return false;
+  }
+
+  // 正常終了はtrueを返す
+  return true;
+}
+```
+* unlikely[color ff0000]
+
+```cpp
+std::string fizzbuzz(int n)
+{
+  using namespace std::string_literals;
+  switch (n % 15) {
+  case 3: case 6: case 9: case 12:
+    return &amp;#34;Fizz&amp;#34;s;
+  case 5: case 10:
+    return &amp;#34;Buzz&amp;#34;s;
+  case 0:
+    return &amp;#34;FizzBuzz&amp;#34;s;
+  [[likely]] default:
+    return std::format(&amp;#34;{}&amp;#34;, n);
+  }
+}
+// 上記例のlikely属性利用は適切ではない可能性もあり、
+// swtich文ラベルへ属性指定構文例示として解釈すること。
+// 入力nがランダムと仮定すると 8/15=53.3% の分岐確率となり、
+// この程度の偏りに対して最適化効果が得られるかは未知数である。
+```
+* likely[color ff0000]
+
+
+## この機能が必要になった背景・経緯
+GCCやClangなど一部C++コンパイラでは独自拡張として同等機能を提供しており、Linuxカーネルや大規模OSSによる広い利用実績があったため、C++標準の属性として採用された。
+
+
+## 参照
+- [How do the likely/unlikely macros in the Linux kernel work and what is their benefit? - Stack Overflow](https://stackoverflow.com/questions/109710/)
+- [GCC __builtin_expect組み込み関数](https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html)
+- [Clang __builtin_expect組み込み関数](https://llvm.org/docs/BranchWeightMetadata.html)
+- [P0479R2 Attributes for Likely and Unlikely Statements (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0479r2.html)
+- [P0479R5 Proposed wording for likely and unlikely attributes (Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0479r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スコープ付き列挙型のusing宣言 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/using_enum.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20/using_enum.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/using_enum.md b/lang/cpp20/using_enum.md
new file mode 100644
index 000000000..80badcc20
--- /dev/null
+++ b/lang/cpp20/using_enum.md
@@ -0,0 +1,119 @@
+# スコープ付き列挙型のusing宣言
+
+* cpp20[meta cpp]
+
+## 概要
+
+名前空間のように、`using enum EnumType;`もしくは`using EnumType::enumerator`とすることで、列挙値のスコープ指定を省略できる。
+
+## 仕様
+
+以下のusing enum宣言を導入する。
+```
+using enum EnumType;
+```
+
+using enum宣言はトップレベル、ブロック内、クラスメンバの宣言として書くことができる。
+
+using enum宣言した列挙型の列挙値は、そのスコープにおいて、スコープ指定を省略して列挙値の名前のみで参照できる。
+
+```cpp
+// P1099R5より引用
+enum class rgba_color_channel { red, green, blue, alpha};
+
+std::string_view to_string(rgba_color_channel channel) {
+  switch (my_channel) {
+    using enum rgba_color_channel;
+    case red:   return &amp;#34;red&amp;#34;;
+    case green: return &amp;#34;green&amp;#34;;
+    case blue:  return &amp;#34;blue&amp;#34;;
+    case alpha: return &amp;#34;alpha&amp;#34;;
+  }
+}
+```
+* P1099R5[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1099r5.html]
+
+また、using宣言で列挙値を指定できるようになる。このときは、指定した列挙値だけがスコープ指定を省略できるようになる。
+
+対象とする列挙型はスコープを持つ列挙型でなくても構わない。
+
+```cpp example
+namespace ns {
+  class foo {
+    enum bar {
+      A,
+      B,
+      C
+    };
+  };
+}
+
+using enum ns::foo::bar;
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+enum class Enum1 {
+  Value1
+};
+
+struct Enum2 {
+  enum Enum {
+    Value2
+  };
+};
+
+enum class Enum3 {
+  Value3,
+  Value4
+};
+
+struct Type {
+  using enum Enum3;
+};
+
+constexpr int Value1 = 1;
+
+int main() {
+  using enum Enum1;
+  using enum Enum2::Enum;
+  using Enum3::Value3;
+  std::cout &amp;lt;&amp;lt; Value1 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; ::Value1 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; Value2 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; Value3 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; Enum3::Value4 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; Type::Value4 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; Type().Value4 &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+0
+10
+0
+0
+1
+1
+1
+```
+
+## この機能が必要になった背景・経緯
+
+C言語形式の列挙型を改善するために[スコープを持つ列挙型](/lang/cpp11/scoped_enum.md)が導入されたが、スコープを持っているために列挙値を参照するときに必ずスコープ解決演算子を使う必要があり、冗長に感じられる場合もあった。
+
+そこで、列挙型のスコープを名前空間と同じようなものと捉えて、using宣言によって省略できるようにした。
+
+これにより、C言語形式の列挙型をスコープを持つ列挙型へ置き換えるというリファクタリングをする際、(整数との暗黙変換を別とすれば)ソースコードレベルの互換性を保って置き換えることができるようにもなった。
+
+## 関連項目
+
+- [スコープを持つ列挙型](/lang/cpp11/scoped_enum.md)
+
+## 参照
+
+- [P1099R5 Using Enum](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1099r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈でのラムダ式 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
new file mode 100644
index 000000000..1429ec81f
--- /dev/null
+++ b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
@@ -0,0 +1,140 @@
+# 評価されない文脈でのラムダ式
+* cpp20[meta cpp]
+
+## 概要
+
+C++17まではラムダ式が評価されない文脈に現れることはできなかったが、C++20からは評価されない文脈にラムダ式を書くことができるようになる。
+
+C++20における評価されない文脈とは、`decltype, sizeof, noexcept, typeid`の引数及び、`concept`の定義内、`requires`節内の6箇所である。これらの文脈に現れている式は通常実行されることはない。そして、これらの場所でラムダ式を直接書くことができるようになる。
+
+```cpp
+// conceptの定義内
+template&amp;lt;typename T&amp;gt;
+concept C = requires {
+  []{};
+};
+
+// requires節の中
+template&amp;lt;typename T&amp;gt;
+void f() requires(requires{ []{}; });
+
+// decltypeのオペランド
+using lambda_t = decltype([]{});
+
+// noexcept式のオペランド
+void g() noexcept(noexcept([]{}));
+
+// sizeofのオペランド
+auto s = sizeof([]{});
+
+// typeidのオペランド
+auto&amp;amp; t = typeid([]{});
+```
+
+ただし、評価されない文脈でもラムダ式を書くことができるようになっただけで、実行できるようになったわけではない。ラムダの後に`()`をおいて呼び出しまで書くこともできるが、その場合にも実行はされずその戻り値の型が囲む構文の処理対象となる。
+
+```cpp
+auto s1 = sizeof([]{ return 0;});   // 1
+auto s2 = sizeof([]{ return 0;}()); // 4
+```
+
+## 仕様
+
+1. ラムダ式によって生成されるクロージャの型はリンケージを持たない
+    - `typedef/using`によってリンケージを持つ名前を付ける事もできない
+2. 関数テンプレートのシグネチャに含まれるラムダ式は、宣言が異なれば同一とはみなされない
+    - つまり、ラムダ式は関数テンプレートのシグネチャに含まれない
+    - 異なる翻訳単位の定義を参照するため、あるいは同一翻訳単位での再宣言において、そのシグネチャにラムダ式が含まれる場合、それら2つ（以上）の宣言は同一のものとはみなされない
+3. エイリアステンプレートに現れているラムダ式は、その特殊化毎に固有のクロージャ型を持つ
+4. 関数テンプレートの宣言に含まれるラムダ式の本体内でコンパイルエラーが起きた場合、SFINAEしない
+5. 非型テンプレートパラメータにラムダ式が現れている場合でも、そのクロージャ型は宣言毎に固有の型を持つ
+6. 評価されない文脈であっても、ラムダ式の本体内で使用されている変数は暗黙的にキャプチャされる
+    - 評価されない文脈で現れているラムダ式の本体内は評価されない文脈ではない
+7. 関数の本体の外側で、その関数の引数をキャプチャする事はできない
+8. `concpet`の定義内及び`requires`節の内部に現れているラムダ式本体のエラーはコンパイルエラーとなる
+
+```cpp
+// 1 クロージャ型にリンケージを付加できない（これらのCはリンケージを持たない）
+typedef decltype([]{}) C; 
+using C = decltype([]{});
+
+// 2. この2つのf()は異なる宣言、呼び出そうとするとオーバーロード解決できずコンパイルエラー
+template &amp;lt;int N&amp;gt;
+void f(const char (*s)[([]{ return N; })()]) { }
+template &amp;lt;int N&amp;gt;
+void f(const char (*s)[([]{ return N; })()]) { }
+
+// 3. 例えば、A&amp;lt;int&amp;gt;とA&amp;lt;char&amp;gt; は異なるクロージャ型を示す
+template &amp;lt;class T&amp;gt;
+using A = decltype([] { });
+
+// 4. 次の2つのようなケースはコンパイルエラーとなる
+template &amp;lt;class T&amp;gt;
+auto f(T) -&amp;gt; decltype([]() { T::invalid; } ());
+void f(...);
+f(0); // error!
+
+template &amp;lt;class T, std::size_t = sizeof([]() { T::invalid; })&amp;gt;
+void g(T);
+void g(...);
+g(0); // error!
+
+// 5. ODR違反により未定義動作
+/// foo.h
+template &amp;lt;auto&amp;gt; struct foo { };
+extern foo&amp;lt;+[]() {}&amp;gt; x;
+inline foo&amp;lt;+[]() {}&amp;gt; y;
+
+/// tu1.cpp
+#include &amp;#34;foo.h&amp;#34;
+
+/// tu2.cpp
+#include &amp;#34;foo.h&amp;#34;
+
+// 6. ラムダ式の内部は評価されない文脈ではないので、暗黙キャプチャは評価される
+void f(int i) {
+  auto lambda = [=]{ return i; }; // ok
+  static_assert(1 &amp;lt; sizeof([=]{ return i; })); // ok
+}
+
+// 7. 関数の本体内でのみ、その引数をキャプチャできる
+auto f(int i) -&amp;gt; decltype([=](auto g) { return g(i); })
+{ }
+
+// 8. ラムダ式の本体内のエラーはハードエラー
+template&amp;lt;typename T&amp;gt;
+concept C = requires {
+  []() { typename T::invalid foo; };
+};
+
+template&amp;lt;typename T&amp;gt;
+void f() requires requires {
+  []() { typename T::invalid foo; };
+};
+
+C&amp;lt;int&amp;gt;; // error!
+f(0);   // error!
+```
+
+## 例
+
+「[状態を持たないラムダ式を、デフォルト構築可能、代入可能とする](/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md)」のサンプルコードを参照。
+
+## この機能が必要になった背景・経緯
+
+C++17までは、ラムダ式をSFINAEの文脈で用いて擬似的なコンセプトのような振る舞いをさせないために評価されない文脈においてラムダ式を書く事が禁止されていた（この制限は、ラムダ式がそれぞれ一意の型を持つため、それらを識別するためのマングリング方法を実装する負担をコンパイラ実装者に負わせないようにするために課されている）。
+
+しかし、それだけでは不十分で非型テンプレートパラメータを巧妙に用いた迂回方法があったため、C++14に対する欠陥報告（[CWG Issue 1607](https://wg21.cmeerw.net/cwg/issue1607)）としてラムダ式がエンティティ（主にテンプレート）のシグネチャに現れるのが禁止された。
+
+この変更に伴う文言によってラムダ式を用いてSFINAEする事は完全に禁止され、評価されない文脈においてラムダ式の使用を制限する必要がなくなったため、C++20においてその制限を緩和することになった。
+
+ただし、ラムダ式が外部リンケージを持つエンティティのシグネチャに現れる事は相変わらず禁止されている。ラムダ式を用いてSFINAEするなど、そのような事がしたい場合には[コンセプト](./concepts.md)を用いる事でより容易に目的を達成できる。
+
+## 関連項目
+- [状態を持たないラムダ式を、デフォルト構築可能、代入可能とする](/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md)
+
+## 参照
+- [P0315R0 Wording for lambdas in unevaluated contexts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0315r0.pdf)
+- [P0315R4 Wording for lambdas in unevaluated contexts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0315r4.pdf)
+- [CWG Issue.1607 Lambdas in template parameters](https://wg21.cmeerw.net/cwg/issue1607)
+- [C++標準化委員会の文書: P0310R--P0319R0 - 本の虫](https://ezoeryou.github.io/blog/article/2016-07-27-cpp-P0310R0-P0319R0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++23 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/lang/cpp23.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:lang/cpp23.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++23&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23とは、2023年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/contract-based_programming.html&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;事前条件、事後条件、表明を宣言する新たな属性構文を追加&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;契約違反のハンドリングをするためのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/contract.html&#34;&gt;&amp;lt;contract&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_hash.md.nolink&#34;&gt;std::owner_hash&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_equal.md.nolink&#34;&gt;std::owner_equal&lt;/a&gt;&lt;/code&gt;が追加され、非順序連想コンテナのキーとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;を使用できるようになった&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、第1テンプレート引数についている型修飾を第2テンプレート引数の型に付加する型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_const.md.nolink&#34;&gt;std::copy_const&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_volatile.md.nolink&#34;&gt;std::copy_volatile&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_cv.md.nolink&#34;&gt;std::copy_cv&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_reference.md.nolink&#34;&gt;std::copy_reference&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_extent.md.nolink&#34;&gt;std::copy_extent&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_all_extents.md.nolink&#34;&gt;std::copy_all_extents&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_pointer.md.nolink&#34;&gt;std::copy_pointer&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_all_pointers.md.nolink&#34;&gt;std::copy_all_pointers&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_cvref.md.nolink&#34;&gt;std::copy_cvref&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、第1テンプレート引数についている型修飾を外す型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_all_pointers.md.nolink&#34;&gt;std::remove_all_pointers&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::algined_storage&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;を非推奨化。これらの機能は未定義動作を引き起こし、間違った保証が行われ、よくないAPI設計が行われていたため、非推奨となる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::algined_storage&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(T) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[sizeof(T)];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(Ts...) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/max.html&#34;&gt;std::max&lt;/a&gt;({sizeof(Ts)...})];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リファレンス -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#language-support&#34;&gt;言語サポートライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#concepts&#34;&gt;コンセプトライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#diagnostics&#34;&gt;診断ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#general-utils&#34;&gt;汎用的なユーティリティライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#strings&#34;&gt;文字列ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#localization&#34;&gt;ローカライズライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#container&#34;&gt;コンテナライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#iterator&#34;&gt;イテレータライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#ranges&amp;quot;&#34;&gt;レンジライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#algorithm&#34;&gt;アルゴリズムライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#numerics&#34;&gt;数値ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#io&#34;&gt;入出力ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#regular-expressions&#34;&gt;正規表現ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#atomic-operations&#34;&gt;アトミック操作ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#thread-support&#34;&gt;スレッドサポートライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#clib-facilities&#34;&gt;C言語互換ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#language-support-library&#34; id=&#34;language-support&#34;&gt;言語サポートライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装プロパティ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装依存のバージョン情報&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;動的メモリ管理&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo.html&#34;&gt;&amp;lt;typeinfo&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型情報&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソースコード上の位置&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/contract.html&#34;&gt;&amp;lt;contract&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反のハンドリング&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception.html&#34;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外ハンドリング&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初期化子リスト&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比較演算&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コルーチン&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#concepts&#34; id=&#34;concepts&#34;&gt;コンセプトライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;言語関係のコンセプト&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#diagnostics&#34; id=&#34;diagnostics&#34;&gt;診断ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&amp;lt;stdexcept&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外クラス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムエラーサポート&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#general-utils&#34; id=&#34;general-utils&#34;&gt;汎用的なユーティリティライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーティリティコンポーネント&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bitset.html&#34;&gt;&amp;lt;bitset&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットの固定サイズシーケンス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時有理数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タプル&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意で値を持たせられるオブジェクト&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant.html&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;候補の型を切り替えながら保持できる記憶域型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/any.html&#34;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;あらゆる型の値を保持できる記憶域型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型特性&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スコープ付きアロケータ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource.html&#34;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多相アロケータ&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間ユーティリティ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeindex.html&#34;&gt;&amp;lt;typeindex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型のインデックス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実行ポリシー&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;高速な文字列 ⇔ 数値変換&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列フォーマット&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#strings&#34; id=&#34;strings&#34;&gt;文字列ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列クラスと、文字特性&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所有権を持たず文字列を参照する文字列クラス&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#localization&#34; id=&#34;localization&#34;&gt;ローカライズライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/locale.html&#34;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/codecvt.html&#34;&gt;&amp;lt;codecvt&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コード変換ファセット&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++17から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#container&#34; id=&#34;container&#34;&gt;コンテナライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;両端キュー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単方向リスト&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向リスト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/queue.html&#34;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;FIFOキュー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stack.html&#34;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LIFOスタック&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ベクタ配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;連想配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;集合&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序連想配列&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序集合&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;部分シーケンスの参照&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#iterator&#34; id=&#34;iterator&#34;&gt;イテレータライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの定義&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#ranges&#34; id=&#34;ranges&#34;&gt;レンジライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.md.nolink&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;レンジアルゴリズム&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#algorithm&#34; id=&#34;algorithm&#34;&gt;アルゴリズムライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#numerics&#34; id=&#34;numerics&#34;&gt;数値ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複素数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット操作&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乱数生成&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/valarray.html&#34;&gt;&amp;lt;valarray&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値の配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一般的な数値操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#io&#34; id=&#34;io&#34;&gt;入出力ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先行宣言&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iostream.html&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準&lt;code&gt;iostream&lt;/code&gt;オブジェクト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios.html&#34;&gt;&amp;lt;ios&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iostream&lt;/code&gt;基底クラス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/streambuf.html&#34;&gt;&amp;lt;streambuf&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームバッファ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/istream.html&#34;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iomanip.html&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットとマニピュレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/sstream.html&#34;&gt;&amp;lt;sstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream.html&#34;&gt;&amp;lt;fstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルシステム&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同期化出力ストリームラッパー&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#regular-expressions&#34; id=&#34;regular-expressions&#34;&gt;正規表現ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/regex.html&#34;&gt;&amp;lt;regex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#atomic-operations&#34; id=&#34;atomic-operations&#34;&gt;アトミック操作ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アトミックアクセスのためのコンポーネント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#thread-support&#34; id=&#34;thread-support&#34;&gt;スレッドサポートライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止状態&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッド&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mutex.html&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ミューテックス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;共有ミューテックス&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/condition_variable.html&#34;&gt;&amp;lt;condition_variable&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件変数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;セマフォ&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ラッチ同期&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バリア同期&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/future.html&#34;&gt;&amp;lt;future&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Future&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#clib-facilities&#34; id=&#34;clib-facilities&#34;&gt;C言語互換ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cassert.html&#34;&gt;&amp;lt;cassert&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサート&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ccomplex&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複素数&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字種別の判定と変換&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;エラー番号&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cfenv.html&#34;&gt;&amp;lt;cfenv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点環境へのアクセス&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cfloat.html&#34;&gt;&amp;lt;cfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点数の定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cinttypes&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;固定精度整数のための書式指定マクロ&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;に対する別名&lt;code&gt;and&lt;/code&gt;のような、各種演算子に対するマクロを定義する。&lt;br /&gt; ただしC++ではこれらの別名はキーワードとして定義されるため、このヘッダでは何も定義されない。&lt;/td&gt;
&lt;td&gt;C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/climits.html&#34;&gt;&amp;lt;climits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整数型の最小値、最大値を表すマクロ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;clocale&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学関数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;csetjmp&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ジャンプ処理&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;csignal&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シグナル&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント操作のマクロ&lt;/td&gt;
&lt;td&gt;C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdarg&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;真理値型の定義&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef.html&#34;&gt;&amp;lt;cstddef&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基本的な型、値、マクロの定義&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint.html&#34;&gt;&amp;lt;cstdint&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大きさが規定されている整数型&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdio.html&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーティリティ関数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstring&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ctgmath&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックな数学関数&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ctime.html&#34;&gt;&amp;lt;ctime&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付・時間&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cuchar&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユニコード文字型&lt;/td&gt;
&lt;td&gt;C++11 (C11)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cwchar&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cwctype&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字の種別と判定&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/algorithm.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 4ea9e2407..48ecfd9c5 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -161,7 +161,7 @@ return distance(a, b);
   これにより、例えばソートされていない整数列 `[5, 1, 25, 13, 17]` に対しても `10` をキーとして [`lower_bound()`](algorithm/lower_bound.md) を用いることにより `10` より小さい範囲の境界を取り出すことが可能になっている。しかし `15` をキーとすることは不正である。  
   ただ、 C++03 の要件に合わない（特にソートされていない範囲に対する）二分探索を行いたい場合は、同じく C++11 で追加された [`partition_point()`](algorithm/partition_point.md) の使用も検討したほうがよい。  
 
-順序関係を扱う関数の説明において、この節では安定性 (stability) のようなコンセプトを説明するために同値性 (equivalence) の概念を頻繁に使う。  
+順序関係を扱う関数の説明において、この節では安定性 (stability) のような考え方を説明するために同値性 (equivalence) の概念を頻繁に使う。
 この節で参照する同値性は必ずしも `operator==` ではなく、[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)によって示される同値関係である。つまりそれは、２つの要素 `a` と `b` は `!(a &amp;lt; b) &amp;amp;&amp;amp; !(b &amp;lt; a)` の時かつその時に限り同値とみなされるということである。  
 
 
@@ -193,7 +193,7 @@ return distance(a, b);
 | 名前 | 説明 | 対応バージョン |
 |---------------------------------------------|----------------------------------------------------------------|-------|
 | [`lower_bound`](algorithm/lower_bound.md) | 指定された要素以上の値が現れる最初の位置のイテレータを取得する | |
-| [`upper_bound`](algorithm/upper_bound.md) | 指定された要素より大きい値が現れる最も後ろの位置のイテレータを取得する | |
+| [`upper_bound`](algorithm/upper_bound.md) | 指定された要素より大きい値が現れる最初の位置のイテレータを取得する | |
 | [`equal_range`](algorithm/equal_range.md) | `lower_bound`と`upper_bound`の結果を組で取得する | |
 | [`binary_search`](algorithm/binary_search.md) | 二分探索法による検索を行う | |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>next_permutation -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/next_permutation.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/algorithm/next_permutation.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/next_permutation.md b/reference/algorithm/next_permutation.md
index bb283a12a..0f1ebaac2 100644
--- a/reference/algorithm/next_permutation.md
+++ b/reference/algorithm/next_permutation.md
@@ -26,7 +26,7 @@ namespace std {
 ```
 
 ## 概要
-次の順列を生成する。
+与えられた時点の`[first, last)`の範囲を起点の順列として、辞書順によるその次の順列を生成する。
 
 
 ## 要件
@@ -37,6 +37,9 @@ namespace std {
 `[first, last)`の範囲を次の順列に変換する。
 `operator&amp;lt;`または`comp`によって辞書順に並んでいる全ての順列の集合があると仮定すると、次の順列が発見される。
 
+順列の辞書順とは、同じ長さ`N`の順列`a, b`があった時、その最上位の項から見た時に`ai != bi`となる最初の`i`番目の項について、`ai &amp;lt; bi`（もしくは`comp(ai, bi) == true`）となる時に`a &amp;lt; b`とするように定めた順序のことである。例えばこれは、各項（`ai, bi`）が`0 ~ 9`の数であるとすれば、それらをそのまま並べて構成した数の通常の大小関係に等しい。
+
+辞書順による次の順列とは、現在の順列（`[first, last)`）よりも（上記の意味の順序で）大きい順列のうち取り得る最小のもののことである。
 
 ## 戻り値
 次の順列が存在する場合は`true`を返し、そうでなければ`false`を返す。
@@ -47,8 +50,8 @@ namespace std {
 
 
 ## 備考
-全ての順列を取得したい場合は、この関数に最初に与える範囲が、昇順にソート済みになっていること。
-
+全ての順列を取得したい場合は、この関数に最初に与える範囲が、昇順にソート済みになっていること。  
+順列の長さを`N`（`N = last - first`）とすれば、そのような順列は`N!`個存在する。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/atomic/atomic.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic.md b/reference/atomic/atomic.md
index 64899f620..d1e0baed2 100644
--- a/reference/atomic/atomic.md
+++ b/reference/atomic/atomic.md
@@ -301,3 +301,4 @@ int main()
 - [P0020R6 Floating Point Atomic](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0020r6.html)
 - [LWG Issue 3045. `atomic` doesn&amp;#39;t have `value_type` or `difference_type`](https://wg21.cmeerw.net/lwg/issue3045)
 - [LWG Issue 3012. `atomic` is unimplementable for non-`is_trivially_copy_constructible` `T`](https://wg21.cmeerw.net/lwg/issue3012)
+- [Correctly implementing a spinlock in C++](https://rigtorp.se/spinlock/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_flag_wait_explicit -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag_wait_explicit.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/atomic/atomic_flag_wait_explicit.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag_wait_explicit.md b/reference/atomic/atomic_flag_wait_explicit.md
index 6b4d8988f..c97c3c193 100644
--- a/reference/atomic/atomic_flag_wait_explicit.md
+++ b/reference/atomic/atomic_flag_wait_explicit.md
@@ -91,7 +91,7 @@ int main()
 * std::atomic_flag_wait_explicit[color ff0000]
 * std::atomic_flag_test_and_set_explicit[link atomic_flag_test_and_set.md]
 * std::atomic_flag_clear_explicit[link atomic_flag_clear.md]
-* std::atomic_flag_notify_one_explicit[link notify_one.md]
+* std::atomic_flag_notify_one[link /reference/atomic/atomic_flag_notify_one.md]
 * ATOMIC_FLAG_INIT[link /reference/atomic/atomic_flag_init.md]
 * std::memory_order[link /reference/atomic/memory_order.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_ref -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/atomic/atomic_ref.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref.md b/reference/atomic/atomic_ref.md
index d3d193382..c9359034f 100644
--- a/reference/atomic/atomic_ref.md
+++ b/reference/atomic/atomic_ref.md
@@ -160,7 +160,7 @@ int main()
 ```
 * std::atomic_ref[color ff0000]
 * x.exchange[link atomic_ref/exchange.md]
-* x.store[link atomic_ref[store.md]
+* store[link atomic_ref/store.md]
 * consumer_thread.join()[link /reference/thread/thread/join.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>barrier -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/barrier.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/barrier.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;barrier&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;barrier&amp;gt;&lt;/code&gt;ヘッダは、バリア同期機構に関するクラスを定義する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/barrier/barrier.html&#34;&gt;barrier&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バリア同期機構&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 11.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0666r2.pdf&#34; target=&#34;_blank&#34;&gt;P0666R2 Revised Latches and Barriers for C++20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1135r6.html&#34; target=&#34;_blank&#34;&gt;P1135R6 The C++20 Synchronization Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>barrier -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/barrier/barrier.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier.md b/reference/barrier/barrier.md
new file mode 100644
index 000000000..17eaedc95
--- /dev/null
+++ b/reference/barrier/barrier.md
@@ -0,0 +1,167 @@
+# barrier
+* barrier[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class CompletionFunction = see below&amp;gt;
+  class barrier;
+}
+```
+
+## 概要
+`barrier`クラスは、複数スレッドにより並行実行される反復的なタスク制御に便利な、スレッド調整機構（同期プリミティブ）である。
+[バリア](https://en.wikipedia.org/wiki/Barrier_(computer_science))の存続期間はバリアフェーズの列からなり、各フェーズでは予定スレッド数がバリアに到達するまで先行到達スレッドの実行をブロックできる。
+複数スレッドがバリアオブジェクト上で待ち合わせ（合流）を行うさまから、ランデブーポイント(Rendezvous Point)とも呼ばれる。
+
+バリア同期を用いると[Fork-Joinモデル](https://en.wikipedia.org/wiki/Fork%E2%80%93join_model)に基づくタスク並行構造を容易に実装できる。
+
+- [コンストラクタ](barrier/op_constructor.md)にてバリア同期に参加するスレッド数を設定する。
+- [`arrive_and_wait()`](barrier/arrive_and_wait.md)により自スレッドの現行フェーズ完了を通知し、他スレッド群の現行フェーズ完了を待機する。バリア同期参加中のスレッドが合流し終えると、各スレッドのブロックが解除されて次フェーズを開始する。
+- [`arrive_and_drop()`](barrier/arrive_and_drop.md)により自スレッドの現行フェーズ完了を通知し、次フェーズからはバリア同期に参加しない（参加スレッド数を1つ減らす）。バリア同期参加中のスレッドが合流し終えると、自スレッド以外のブロックが解除されて次フェーズを開始する。
+
+バリアオブジェクトは複数スレッド間の合流制御を繰り返して行えるが、1回のみの制御で十分ならばラッチ[`latch`](/reference/latch/latch.md)も利用候補となりえる。
+
+### 詳細説明
+説明のため、ここではバリアオブジェクトが保持する`CompletionFunction`型のデータメンバを`completion`と表記する。
+同データメンバ`completion`は、[コンストラクタ](barrier/op_constructor.md)にて設定される。
+
+各バリアフェーズ(barrier phase)は下記のステップで構成される：
+
+- [`arrive()`](barrier/arrive.md)または[`arrive_and_drop`](barrier/arrive_and_drop.md)呼び出しによって、予定カウントを減算する。
+- 予定カウントが`0`に到達したら、完了ステップを実行する。テンプレートパラメータ`CompletionFunction`のデフォルト値に対する特殊化では、完了ステップは予定カウントを`0`とした[`arrive()`](barrier/arrive.md)または[`arrive_and_drop`](barrier/arrive_and_drop.md)呼び出しの一部として実行される。それ以外の特殊化では、完了ステップはそのフェーズ内でバリア到達したスレッドのいずれか1つの上で実行される。
+- 完了ステップが終了したのち、予定カウントをコンストラクタ実引数`expected`でリセットし、[`arrive_and_drop`](barrier/arrive_and_drop.md)呼び出しの場合は調整を行って、次のフェーズを開始する。
+
+各フェーズは、フェーズ同期ポイント(phase synchronization point)を定義する。
+フェーズ内でバリアに到達したスレッドは、[`wait()`](barrier/wait.md)呼び出しによりフェーズ同期ポイント上でブロックされ、フェーズ完了ステップが実行されるまでブロック状態は継続する。
+
+フェーズ完了ステップ(phase completion step)は各フェーズ終了時に実行され、下記の効果を持つ：
+
+- 完了関数を呼び出す。`completion()`と等価。
+- フェーズ同期ポイント上でブロックされている全スレッドのブロックを解除する。
+
+完了ステップの終了は、完了ステップによりブロック解除される全ての関数呼び出しからの復帰よりも、確実に前に発生(strongly happens before)する。
+テンプレートパラメータ`CompletionFunction`のデフォルト値以外の特殊化においては、完了ステップの進行中にバリアオブジェクトの[`wait()`](barrier/wait.md)を除くメンバ関数が呼び出されると、その動作は未定義となる。
+
+テンプレートパラメータ`CompletionFunction`のデフォルト値は、追加で Cpp17DefaultConstructible 要件を満たす未規定の型であり、式`completion()`は何の副作用も生じない。
+つまりテンプレートパラメータを省略した`barrier&amp;lt;&amp;gt;`オブジェクトでは、各フェーズ完了時に追加的な処理を行わない。
+
+`barrier::arrival_token`は、Cpp17MoveConstructible 要件および Cpp17MoveAssignable 要件および Cpp17Destructible 要件を満たす未規定の型。
+つまり、コピー不可／ムーブのみ可能な型。
+
+
+## 適格要件
+テンプレートパラメータ`CompletionFunction`は Cpp17MoveConstructible 要件および Cpp17Destructible 要件を満たしていること。
+[`is_nothrow_invocable_v`](/reference/type_traits/is_nothrow_invocable.md)`&amp;lt;CompletionFunction&amp;amp;&amp;gt; == true`
+
+
+## メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`(constructor)`](barrier/op_constructor.md) | コンストラクタ | C++20 |
+| `(destructor)`  | デストラクタ   | C++20 |
+| `operator=(const barrier&amp;amp;) = delete;` | 代入演算子 | C++20 |
+| [`arrive`](barrier/arrive.md) | 到達通知 | C++20 |
+| [`wait`](barrier/wait.md) | 待機処理 | C++20 |
+| [`arrive_and_wait`](barrier/arrive_and_wait.md) | 到達通知と待機処理 | C++20 |
+| [`arrive_and_drop`](barrier/arrive_and_drop.md) | 到達通知後に離脱 | C++20 |
+
+## 静的メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`max`](barrier/max.md) | 処理系がサポートする予定カウントの最大値 | C++20 |
+
+## メンバ型
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|-------|
+| `arrival_token` | 到達トークン型 | C++20 |
+
+
+## 例
+```cpp example
+#include &amp;lt;barrier&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+constexpr int NWORKERS = 2;  // ワーカ数
+constexpr int NPHASES  = 3;  // フェーズ数
+
+std::mutex cout_mtx;  // 行単位cout出力用ミューテックス
+
+// このプログラムでは (NWORKERS+1)*NPHASES = 9個のタスクを実行する。
+// 同じフェーズに属するタスクは複数のスレッド上で同時並行に実行される一方、
+// バリアにより異なるフェーズに属するタスクが同時実行されないことを保証する。
+// ここでは周期的なFork-Joinモデルのタスク並行実行が行われる。
+int main()
+{
+  // バリア同期: 初期カウント値=ワーカ数+1(メインスレッド)
+  std::barrier&amp;lt;&amp;gt; sync{NWORKERS+1};
+
+  // ワーカスレッド群をFire-and-Forget起動
+  for (int id = 1; id &amp;lt;= NWORKERS; id++) {
+    std::thread([&amp;amp;,id]{
+      for (int phase = 1; phase &amp;lt;= NPHASES; phase++) {
+        { // ワーカスレッドのフェーズタスクを実行
+          std::lock_guard lk{cout_mtx};
+          std::cout &amp;lt;&amp;lt; &amp;#34;Worker#&amp;#34; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; phase &amp;lt;&amp;lt; std::endl;
+        }
+
+        // 合流ポイント: メインスレッド＋他ワーカスレッドと同期
+        sync.arrive_and_wait();
+      }
+    }).detach();
+  }
+
+  // メインスレッド処理
+  for (int phase = 1; phase &amp;lt;= NPHASES; phase++) {
+    { // メインスレッドのフェーズタスクを実行
+      std::lock_guard lk{cout_mtx};
+      std::cout &amp;lt;&amp;lt; &amp;#34;Main     &amp;#34; &amp;lt;&amp;lt; phase &amp;lt;&amp;lt; std::endl;
+    }
+
+    // 合流ポイント: 全ワーカスレッドと同期
+    sync.arrive_and_wait();
+  }
+}
+```
+* std::barrier[color ff0000]
+* arrive_and_wait()[link barrier/arrive_and_wait.md]
+
+### 出力例
+```
+Worker#1 1
+Main     1
+Worker#2 1
+Main     2
+Worker#2 2
+Worker#1 2
+Worker#1 3
+Worker#2 3
+Main     3
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`&amp;lt;latch&amp;gt;`](/reference/latch.md)
+
+
+## 参照
+- [Boost.Threadライブラリ, Barriers](https://www.boost.org/doc/libs/1_73_0/doc/html/thread/synchronization.html#thread.synchronization.barriers)
+- [Java標準ライブラリ, java.util.concurrent.CyclicBarrier](https://docs.oracle.com/javase/jp/6/api/java/util/concurrent/CyclicBarrier.html)
+- [C#標準ライブラリ, System.Threading.Barrier](https://docs.microsoft.com/en-us/dotnet/api/system.threading.barrier)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arrive -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/arrive.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/barrier/barrier/arrive.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/arrive.md b/reference/barrier/barrier/arrive.md
new file mode 100644
index 000000000..c31a99f17
--- /dev/null
+++ b/reference/barrier/barrier/arrive.md
@@ -0,0 +1,122 @@
+# arrive
+* barrier[meta header]
+* std[meta namespace]
+* barrier[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+[[nodiscard]] arrival_token arrive(ptrdiff_t update = 1);
+```
+* ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
+
+## 概要
+バリアのフェーズ同期ポイントへの到達通知を行い、待機処理用の到達トークンを発行する。
+設定されていれば、次フェーズへの移行前に完了関数を呼び出す。
+
+
+## 事前条件
+`updte &amp;gt; 0` かつ `update` が現行バリアフェーズの予定カウントに等しいかそれより小さいこと。
+
+
+## 効果
+現行フェーズのフェーズ同期ポイントに関連付けされた`arrival_token`型オブジェクトを構築する。
+その後に、予定カウントを`update`だけ減算する。
+
+
+## 戻り値
+構築された`arrival_token`オブジェクトを返す。
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 備考
+このメンバ関数呼び出しは、現行フェーズの完了ステップを開始する可能性がある。
+
+
+## 例
+```cpp example
+#include &amp;lt;barrier&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+// (ダミーの)タスク処理関数
+void do_task(const char* msg)
+{
+  static std::mutex cout_mtx;
+
+  std::this_thread::sleep_for(std::chrono::seconds(1));
+  {
+    std::lock_guard lk{cout_mtx};
+    std::cout &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; std::endl;
+  }
+}
+
+int main()
+{
+  std::barrier&amp;lt;&amp;gt; sync{2};
+
+  // ワーカスレッド起動
+  std::thread t([&amp;amp;]{
+    do_task(&amp;#34;sub:  phase-1&amp;#34;);
+
+    // 自スレッドはブロックせずに第2フェーズに移行し、
+    // 第1フェーズ同期ポイント待機用トークンを発行する。
+    auto token = sync.arrive();
+    do_task(&amp;#34;sub:  phase-2(a)&amp;#34;);
+
+    // 第1のフェーズ同期ポイントで待機する。
+    sync.wait(std::move(token));
+    do_task(&amp;#34;sub:  phase-2(b)&amp;#34;);
+  });
+
+  // メインスレッド処理
+  {
+    do_task(&amp;#34;main: phase-1(a)&amp;#34;);
+    do_task(&amp;#34;main: phase-1(b)&amp;#34;);
+    sync.arrive_and_wait();
+    do_task(&amp;#34;main: phase-2&amp;#34;);
+  }
+
+  t.join();
+}
+```
+* arrive[color ff0000]
+* wait[link wait.md]
+* arrive_and_wait[link arrive_and_wait.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力例
+```
+main: phase-1(a)
+sub:  phase-1
+main: phase-1(b)
+sub:  phase-2(a)
+sub:  phase-2(b)
+main: phase-2
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`wait()`](wait.md)
+- [`arrive_and_wait()`](arrive_and_wait.md)
+- [`arrive_and_drop()`](arrive_and_drop.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arrive_and_drop -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/arrive_and_drop.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/barrier/barrier/arrive_and_drop.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/arrive_and_drop.md b/reference/barrier/barrier/arrive_and_drop.md
new file mode 100644
index 000000000..e765080a8
--- /dev/null
+++ b/reference/barrier/barrier/arrive_and_drop.md
@@ -0,0 +1,122 @@
+# arrive_and_drop
+* barrier[meta header]
+* std[meta namespace]
+* barrier[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void arrive_and_drop();
+```
+
+## 概要
+バリアのフェーズ同期ポイントへの到達通知を行い、自スレッドは次フェーズ以降のバリア同期から離脱する。
+設定されていれば、次フェーズへの移行前に完了関数を呼び出す。
+
+
+## 事前条件
+現行バリアフェーズの予定カウントが、`0`より大きいこと。
+
+
+## 効果
+全ての後続フェーズの初期予定カウントを`1`だけ減算する。
+その後に、現行フェーズの予定カウントを`1`だけ減算する。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+
+
+## 備考
+このメンバ関数呼び出しは、現行フェーズの完了ステップを開始する可能性がある。
+
+
+## 例
+```cpp example
+#include &amp;lt;barrier&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+// (ダミーの)タスク処理関数
+void do_task(const char* msg)
+{
+  static std::mutex cout_mtx;
+
+  std::this_thread::sleep_for(std::chrono::seconds(1));
+  {
+    std::lock_guard lk{cout_mtx};
+    std::cout &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; std::endl;
+  }
+}
+
+int main()
+{
+  std::barrier&amp;lt;&amp;gt; sync{3};
+
+  // ワーカスレッド#1起動
+  std::thread t1([&amp;amp;]{
+    do_task(&amp;#34;sub1: phase-1&amp;#34;);
+    sync.arrive_and_drop();
+    // フェーズ#2以降は離脱
+  });
+
+  // ワーカスレッド#2起動
+  std::thread t2([&amp;amp;]{
+    do_task(&amp;#34;sub2: phase-1&amp;#34;);
+    sync.arrive_and_wait();
+    do_task(&amp;#34;sub2: phase-2&amp;#34;);
+    sync.arrive_and_drop();
+    // フェーズ#3以降は離脱
+  });
+
+  // メインスレッド処理
+  {
+    do_task(&amp;#34;main: phase-1&amp;#34;);
+    sync.arrive_and_wait();
+    do_task(&amp;#34;main: phase-2&amp;#34;);
+    sync.arrive_and_wait();
+    do_task(&amp;#34;main: phase-3&amp;#34;);
+    sync.arrive_and_wait();
+  }
+
+  t1.join();
+  t2.join();
+}
+```
+* arrive_and_drop[color ff0000]
+* arrive_and_wait[link arrive_and_wait.md]
+
+### 出力例
+```
+sub2: phase-1
+main: phase-1
+sub1: phase-1
+sub2: phase-2
+main: phase-2
+main: phase-3
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`arrive()`](arrive.md)
+- [`arrive_and_wait()`](arrive_and_wait.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arrive_and_wait -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/arrive_and_wait.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/barrier/barrier/arrive_and_wait.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/arrive_and_wait.md b/reference/barrier/barrier/arrive_and_wait.md
new file mode 100644
index 000000000..da0306bde
--- /dev/null
+++ b/reference/barrier/barrier/arrive_and_wait.md
@@ -0,0 +1,104 @@
+# arrive_and_wait
+* barrier[meta header]
+* std[meta namespace]
+* barrier[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void arrive_and_wait();
+```
+
+## 概要
+バリアのフェーズ同期ポイント上での待ち合わせ（到達通知と待機処理）を行う。
+設定されていれば、次フェーズへの移行前に完了関数を呼び出す。
+
+
+## 効果
+[`wait`](wait.md)`(`[`arrive()`](arrive.md)`)` と等価。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+
+
+## 例
+```cpp example
+#include &amp;lt;barrier&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+// (ダミーの)タスク処理関数
+void do_task(const char* msg)
+{
+  static std::mutex cout_mtx;
+
+  std::this_thread::sleep_for(std::chrono::seconds(1));
+  {
+    std::lock_guard lk{cout_mtx};
+    std::cout &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; std::endl;
+  }
+}
+
+int main()
+{
+  std::barrier&amp;lt;&amp;gt; sync{2};
+
+  // ワーカスレッド起動
+  std::thread t1([&amp;amp;]{
+    do_task(&amp;#34;sub:  phase-1&amp;#34;);
+    sync.arrive_and_wait();
+    do_task(&amp;#34;sub:  phase-2&amp;#34;);
+    sync.arrive_and_wait();
+    do_task(&amp;#34;sub:  phase-3&amp;#34;);
+  });
+
+  // メインスレッド処理
+  {
+    do_task(&amp;#34;main: phase-1&amp;#34;);
+    sync.arrive_and_wait();
+    do_task(&amp;#34;main: phase-2&amp;#34;);
+    sync.arrive_and_wait();
+    do_task(&amp;#34;main: phase-3&amp;#34;);
+  }
+
+  t.join();
+}
+```
+* arrive_and_wait[color ff0000]
+
+### 出力例
+```
+sub:  phase-1
+main: phase-1
+main: phase-2
+sub:  phase-2
+sub:  phase-3
+main: phase-3
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`arrive()`](arrive.md)
+- [`wait()`](wait.md)
+- [`arrive_and_drop()`](arrive_and_drop.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/max.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/barrier/barrier/max.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/max.md b/reference/barrier/barrier/max.md
new file mode 100644
index 000000000..cf958d6f0
--- /dev/null
+++ b/reference/barrier/barrier/max.md
@@ -0,0 +1,51 @@
+# max
+* barrier[meta header]
+* std[meta namespace]
+* barrier[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr ptrdiff_t max() noexcept;
+```
+* ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
+
+## 概要
+処理系がサポートする予定カウントの最大値
+
+
+## 戻り値
+処理系がサポートする予定カウントの最大値を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;barrier&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; std::barrier&amp;lt;&amp;gt;::max() &amp;lt;&amp;lt; std::endl;
+}
+```
+* max()[color ff0000]
+
+### 出力例
+```
+9223372036854775807
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/op_constructor.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/barrier/barrier/op_constructor.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/op_constructor.md b/reference/barrier/barrier/op_constructor.md
new file mode 100644
index 000000000..577a2320b
--- /dev/null
+++ b/reference/barrier/barrier/op_constructor.md
@@ -0,0 +1,109 @@
+# コンストラクタ
+* barrier[meta header]
+* std[meta namespace]
+* barrier[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr explicit
+barrier(ptrdiff_t expected,
+        CompletionFunction f = CompletionFunction()); // (1)
+
+barrier(const barrier&amp;amp;) = delete;                     // (2)
+```
+* ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
+
+## barrierオブジェクトの構築
+- (1) : `barrier`オブジェクトの初期化を行う。
+- (2) : コピーコンストラクタ。コピー不可。
+
+説明のため、ここではバリアオブジェクトが保持する`CompletionFunction`型のデータメンバを`completion`と表記する。
+
+
+## 事前条件
+`expected &amp;gt;= 0` かつ `expected &amp;lt;=` [`max()`](max.md)
+
+
+## 効果
+各バリアフェーズの初期予定カウントと、初回フェーズにおける現行予定カウントの両方に`expected`を設定する。
+`completion`を[`std::move`](/reference/utility/move.md)`(f)`で初期化する。
+初回フェーズを開始する。
+
+
+## 例外
+`CompletionFunction`型のムーブコンストラクタが投げた例外
+
+
+## 備考
+`expected`を`0`として初期化したバリアオブジェクトでは、破棄以外の操作を行えない。
+
+
+## 例
+```cpp example
+#include &amp;lt;barrier&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;mutex&amp;gt;
+
+// 行単位cout出力用ロックを返す（対応コンパイラ登場までの暫定措置）
+// C++20で追加されたstd::osyncstreamの方が好ましい。
+//   std::osyncstream(std::cout) &amp;lt;&amp;lt; ...;
+auto lk() {
+  static std::mutex cout_mtx;
+  return std::unique_lock{cout_mtx};
+}
+
+int main() {
+  // （完了関数なし）バリアを定義
+  std::barrier&amp;lt;&amp;gt; sync1{2};
+
+  // 完了関数付きのバリアを定義
+  std::barrier sync2{2, []{
+    // 完了関数はバリアに関与するいずれか一つのスレッド上でのみ実行されること保証される
+    std::cout &amp;lt;&amp;lt; &amp;#34;finished @&amp;#34; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; std::endl;
+  }};
+
+  // 並行実行されるタスクを定義
+  auto task = [&amp;amp;]{
+    lk(), std::cout &amp;lt;&amp;lt; &amp;#34;phase-1  @&amp;#34; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; std::endl;
+    sync2.arrive_and_wait();
+    lk(), std::cout &amp;lt;&amp;lt; &amp;#34;phase-2  @&amp;#34; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; std::endl;
+    sync2.arrive_and_wait();
+    lk(), std::cout &amp;lt;&amp;lt; &amp;#34;phase-3  @&amp;#34; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; std::endl;
+    sync1.arrive_and_wait();
+  };
+
+  // タスクを2並行実行
+  std::thread t{task};
+  task();
+  t.join();
+}
+```
+* std::barrier[color ff0000]
+* arrive_and_wait()[link arrive_and_wait.md]
+* std::osyncstream[link /reference/syncstream/basic_osyncstream.md]
+* std::this_thread::get_id()[link /reference/thread/this_thread/get_id.md]
+
+### 出力例
+```
+phase-1  @140171090683648
+phase-1  @140171067340544
+finished @140171067340544
+phase-2  @140171067340544
+phase-2  @140171090683648
+finished @140171090683648
+phase-3  @140171090683648
+phase-3  @140171067340544
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier/wait.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/barrier/barrier/wait.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier/wait.md b/reference/barrier/barrier/wait.md
new file mode 100644
index 000000000..8971a60dd
--- /dev/null
+++ b/reference/barrier/barrier/wait.md
@@ -0,0 +1,114 @@
+# wait
+* barrier[meta header]
+* std[meta namespace]
+* barrier[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void wait(arrival_token&amp;amp;&amp;amp; arrival) const;
+```
+
+## 概要
+バリアのフェーズ同期ポイント上での待機処理のみ行う。
+
+
+## 事前条件
+`arrival`が、現行フェーズまたは同じバリアオブジェクトの直前フェーズのフェーズ同期ポイントに関連付けされていること。
+
+
+## 効果
+[`std::move`](/reference/utility/move.md)`(arrival)`に関連付けされた同期ポイントにおいて、該当同期ポイントのフェーズにおけるフェーズ完了ステップが実行されるまで、呼び出しスレッドをブロックする。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;barrier&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+// (ダミーの)タスク処理関数
+void do_task(const char* msg)
+{
+  static std::mutex cout_mtx;
+
+  std::this_thread::sleep_for(std::chrono::seconds(1));
+  {
+    std::lock_guard lk{cout_mtx};
+    std::cout &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; std::endl;
+  }
+}
+
+int main()
+{
+  std::barrier&amp;lt;&amp;gt; sync{2};
+
+  // ワーカスレッド起動
+  std::thread t([&amp;amp;]{
+    do_task(&amp;#34;sub:  phase-1&amp;#34;);
+
+    // 自スレッドはブロックせずに第2フェーズに移行し、
+    // 第1フェーズ同期ポイント待機用トークンを発行する。
+    auto token = sync.arrive();
+    do_task(&amp;#34;sub:  phase-2(a)&amp;#34;);
+
+    // 第1のフェーズ同期ポイントで待機する。
+    sync.wait(std::move(token));
+    do_task(&amp;#34;sub:  phase-2(b)&amp;#34;);
+  });
+
+  // メインスレッド処理
+  {
+    do_task(&amp;#34;main: phase-1(a)&amp;#34;);
+    do_task(&amp;#34;main: phase-1(b)&amp;#34;);
+    sync.arrive_and_wait();
+    do_task(&amp;#34;main: phase-2&amp;#34;);
+  }
+
+  t.join();
+}
+```
+* wait[color ff0000]
+* arrive[link wait.md]
+* arrive_and_wait[link arrive_and_wait.md]
+* std::move[link /reference/utility/move.md]
+
+### 出力例
+```
+main: phase-1(a)
+sub:  phase-1
+main: phase-1(b)
+sub:  phase-2(a)
+sub:  phase-2(b)
+main: phase-2
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`arrive()`](arrive.md)
+- [`arrive_and_wait()`](arrive_and_wait.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bit -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/bit.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/bit.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;bit&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;bit&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;bit&amp;gt;&lt;/code&gt;ヘッダでは、ビット操作のための機能を定義する。&lt;/p&gt;
&lt;h2&gt;変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_cast.html&#34;&gt;bit_cast&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットレベルの再解釈キャスト (functional template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;2の累乗整数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/has_single_bit.html&#34;&gt;has_single_bit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整数値が2の累乗かを判定する (functional template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_ceil.html&#34;&gt;bit_ceil&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整数値を2の累乗値に切り上げる (functional template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_floor.html&#34;&gt;bit_floor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整数値を2の累乗値に切り下げる (functional template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_width.html&#34;&gt;bit_width&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2を底とした整数値の対数を求めて1を足す (functional template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;循環ビットシフト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/rotl.html&#34;&gt;rotl&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左循環ビットシフト (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/rotr.html&#34;&gt;rotr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右循環ビットシフト (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ビットカウント&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countl_zero.html&#34;&gt;countl_zero&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左から連続した0のビットを数える (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countl_one.html&#34;&gt;countl_one&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左から連続した1のビットを数える (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countr_zero.html&#34;&gt;countr_zero&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右から連続した0のビットを数える (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countr_one.html&#34;&gt;countr_one&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右から連続した1のビットを数える (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/popcount.html&#34;&gt;popcount&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;立っているビットを数える (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;エンディアン&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/endian.html&#34;&gt;endian&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バイトの並び順を表す列挙型 (enum)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bit_ceil -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/bit/bit_ceil.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/bit/bit_ceil.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bit/bit_ceil.md b/reference/bit/bit_ceil.md
new file mode 100644
index 000000000..899e90f81
--- /dev/null
+++ b/reference/bit/bit_ceil.md
@@ -0,0 +1,116 @@
+# bit_ceil
+* bit[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class T&amp;gt;
+  constexpr T bit_ceil(T x);
+}
+```
+
+## 概要
+整数値を2の累乗値に切り上げる。
+
+
+## テンプレートパラメータ制約
+- 型`T`が符号なし整数型であること
+
+
+## 事前条件
+- `x`以上となる最小の2の累乗値を`N`として、
+- 型`T`において値`N`が表現できること
+
+## 戻り値
+`N`を返す
+
+
+## 例外
+投げない
+
+
+## 定数式に評価される条件
+- 事前条件を満たすこと
+
+
+## 備考
+- 値`x`を累乗値に切り上げた値が型`T`の範囲内で表現できない場合、未定義動作となり、定数式にはならない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;bit&amp;gt;
+
+void convert_to_pow2(unsigned int x)
+{
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;\t : &amp;#34; &amp;lt;&amp;lt; std::bit_ceil(x) &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;127\t : &amp;#34; &amp;lt;&amp;lt; std::bit_ceil(127u) &amp;lt;&amp;lt; std::endl;
+
+  for (unsigned int i = 0u; i &amp;lt;= 32u; ++i) {
+    convert_to_pow2(i);
+  }
+}
+```
+* std::bit_ceil[color ff0000]
+
+### 出力
+```
+127	 : 128
+0	 : 1
+1	 : 1
+2	 : 2
+3	 : 4
+4	 : 4
+5	 : 8
+6	 : 8
+7	 : 8
+8	 : 8
+9	 : 16
+10	 : 16
+11	 : 16
+12	 : 16
+13	 : 16
+14	 : 16
+15	 : 16
+16	 : 16
+17	 : 32
+18	 : 32
+19	 : 32
+20	 : 32
+21	 : 32
+22	 : 32
+23	 : 32
+24	 : 32
+25	 : 32
+26	 : 32
+27	 : 32
+28	 : 32
+29	 : 32
+30	 : 32
+31	 : 32
+32	 : 32
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 9.0
+- [GCC](/implementation.md#gcc): 9.1
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0556R3 Integral power-of-2 operations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0556r3.html)
+- [P1355R2 Exposing a narrow contract for `ceil2`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1355r2.html)
+- [P1956R1 On the names of low-level bit manipulation functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1956r1.pdf)
+-- `std::ceil2`から`std::bit_ceil`に名称変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bit_floor -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/bit/bit_floor.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/bit/bit_floor.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bit/bit_floor.md b/reference/bit/bit_floor.md
new file mode 100644
index 000000000..9e019804c
--- /dev/null
+++ b/reference/bit/bit_floor.md
@@ -0,0 +1,105 @@
+# bit_floor
+* bit[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class T&amp;gt;
+  constexpr T bit_floor(T x) noexcept;
+}
+```
+
+## 概要
+整数値を2の累乗値に切り下げる。
+
+
+## テンプレートパラメータ制約
+- 型`T`が符号なし整数型であること
+
+
+## 戻り値
+`x == 0`である場合、`0`を返す。そうでない場合、[`has_single_bit`](has_single_bit.md)`(y) == true`および`y  &amp;lt;= x`となるような最大の`y`を求めて返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;bit&amp;gt;
+
+void convert_to_pow2(unsigned int x)
+{
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;\t : &amp;#34; &amp;lt;&amp;lt; std::bit_floor(x) &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;129\t : &amp;#34; &amp;lt;&amp;lt; std::bit_floor(129u) &amp;lt;&amp;lt; std::endl;
+
+  for (unsigned int i = 0u; i &amp;lt;= 34u; ++i) {
+    convert_to_pow2(i);
+  }
+}
+```
+* std::bit_floor[color ff0000]
+
+### 出力
+```
+129	 : 128
+0	 : 0
+1	 : 1
+2	 : 2
+3	 : 2
+4	 : 4
+5	 : 4
+6	 : 4
+7	 : 4
+8	 : 8
+9	 : 8
+10	 : 8
+11	 : 8
+12	 : 8
+13	 : 8
+14	 : 8
+15	 : 8
+16	 : 16
+17	 : 16
+18	 : 16
+19	 : 16
+20	 : 16
+21	 : 16
+22	 : 16
+23	 : 16
+24	 : 16
+25	 : 16
+26	 : 16
+27	 : 16
+28	 : 16
+29	 : 16
+30	 : 16
+31	 : 16
+32	 : 32
+33	 : 32
+34	 : 32
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 9.1
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0556R3 Integral power-of-2 operations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0556r3.html)
+- [P1956R1 On the names of low-level bit manipulation functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1956r1.pdf)
+-- `std::floor2`から`std::bit_floor`に名称変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bit_width -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/bit/bit_width.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/bit/bit_width.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bit/bit_width.md b/reference/bit/bit_width.md
new file mode 100644
index 000000000..c3ae4a819
--- /dev/null
+++ b/reference/bit/bit_width.md
@@ -0,0 +1,90 @@
+# bit_width
+* bit[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class T&amp;gt;
+  constexpr T bit_width(T x) noexcept;
+}
+```
+
+## 概要
+2を底とした整数値の対数を求めて1を足す。
+
+1を足す理由は、対数を求められない`0`を引数として許容することで`noexcept`とし、かつ`x == 1`である場合と区別するためである。
+
+
+## テンプレートパラメータ制約
+- 型`T`が符号なし整数型であること
+
+
+## 戻り値
+`x == 0`である場合、`0`を返す。そうでない場合、2を底として`x`の対数を求めて、それに1を足した値を返す。その際、小数点以下の値は破棄される。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;bit&amp;gt;
+
+void convert_to_log2(unsigned int x)
+{
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;\t : &amp;#34; &amp;lt;&amp;lt; std::bit_width(x) &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;129\t : &amp;#34; &amp;lt;&amp;lt; std::bit_width(129u) &amp;lt;&amp;lt; std::endl;
+  convert_to_log2(127u);
+  convert_to_log2(1u);
+  convert_to_log2(0u);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;---&amp;#34; &amp;lt;&amp;lt; std::endl;
+  for (unsigned int i = 1024u; i &amp;gt;= 2u; i /= 2) {
+    convert_to_log2(i);
+  }
+}
+```
+* std::bit_width[color ff0000]
+
+### 出力
+```
+129	 : 8
+127	 : 7
+1	 : 1
+0	 : 0
+---
+1024	 : 11
+512	 : 10
+256	 : 9
+128	 : 8
+64	 : 7
+32	 : 6
+16	 : 5
+8	 : 4
+4	 : 3
+2	 : 2
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 9.1
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0556R3 Integral power-of-2 operations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0556r3.html)
+- [P1956R1 On the names of low-level bit manipulation functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1956r1.pdf)
+-- `std::log2p1`から`std::bit_width`に名称変更。変更前の関数名`log2p1`の`p1`は、1を足す (plus one) ことを示していた。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>has_single_bit -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/bit/has_single_bit.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/bit/has_single_bit.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bit/has_single_bit.md b/reference/bit/has_single_bit.md
new file mode 100644
index 000000000..430bdf776
--- /dev/null
+++ b/reference/bit/has_single_bit.md
@@ -0,0 +1,95 @@
+# has_single_bit
+* bit[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class T&amp;gt;
+  constexpr bool has_single_bit(T x) noexcept;
+}
+```
+
+## 概要
+整数値が2の累乗かを判定する。
+
+
+## テンプレートパラメータ制約
+- 型`T`が符号なし整数型であること
+
+
+## 戻り値
+`x`が2の累乗値であれば`true`、そうでなければ`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;bit&amp;gt;
+
+void check_pow2(unsigned int x)
+{
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;\t : &amp;#34; &amp;lt;&amp;lt; std::has_single_bit(x) &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  if (std::has_single_bit(128u)) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;128 is power of 2&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  check_pow2(0u);
+  check_pow2(3u);
+  check_pow2(0xffu);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;---&amp;#34; &amp;lt;&amp;lt; std::endl;
+
+  check_pow2(1u);
+  for (unsigned int i = 2u; i &amp;lt;= 1024u; i *= 2) {
+    check_pow2(i);
+  }
+}
+```
+* std::has_single_bit[color ff0000]
+
+### 出力
+```
+128 is power of 2
+0	 : false
+3	 : false
+255	 : false
+---
+1	 : true
+2	 : true
+4	 : true
+8	 : true
+16	 : true
+32	 : true
+64	 : true
+128	 : true
+256	 : true
+512	 : true
+1024	 : true
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang):
+- [GCC](/implementation.md#gcc): 9.1
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0556R3 Integral power-of-2 operations](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0556r3.html)
+- [P1956R1 On the names of low-level bit manipulation functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1956r1.pdf)
+-- `std::ispow2`から`std::has_single_bit`に名称変更
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>chrono -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;chrono&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt;ヘッダは、時間に関するユーティリティとして機能する関数・クラスを提供する。このヘッダに含まれる関数・クラスは、&lt;code&gt;std::chrono&lt;/code&gt;名前空間で定義される。&lt;/p&gt;
&lt;p&gt;このライブラリは、タイムアウト、操作間隔、スケジューリングといった短期間の操作を主な用途として想定している。そのためカレンダー機能としては遥かな過去・未来を扱えるようにはなっていない。&lt;/p&gt;
&lt;h2&gt;時間を表す型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;duration&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間の間隔(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;time_point&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間軸上の一点(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/treat_as_floating_point.html&#34;&gt;treat_as_floating_point&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;duration&lt;/code&gt;内部表現の型が浮動小数点型かを判定するためのトレイト(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration_values.html&#34;&gt;duration_values&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;duration&lt;/code&gt;内部表現の特別な値を取得するためのトレイト(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;時間の単位を表す型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration_aliases.html&#34;&gt;nanoseconds&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ナノ秒を表現するためのdurationの別名(type-alias)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration_aliases.html&#34;&gt;microseconds&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マイクロ秒を表現するためのdurationの別名(type-alias)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration_aliases.html&#34;&gt;milliseconds&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ミリ秒を表現するためのdurationの別名(type-alias)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration_aliases.html&#34;&gt;seconds&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒を表現するためのdurationの別名(type-alias)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration_aliases.html&#34;&gt;minutes&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分を表現するためのdurationの別名(type-alias)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration_aliases.html&#34;&gt;hours&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時を表現するためのdurationの別名(type-alias)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration_aliases.html&#34;&gt;days&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日を表現するためのdurationの別名(type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration_aliases.html&#34;&gt;weeks&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;週を表現するためのdurationの別名(type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration_aliases.html&#34;&gt;years&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年を表現するためのdurationの別名(type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration_aliases.html&#34;&gt;months&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月を表現するためのdurationの別名(type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;時計型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/is_clock.html&#34;&gt;is_clock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;クロック型かを判定する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/system_clock.html&#34;&gt;system_clock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システム時間のクロック(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/steady_clock.html&#34;&gt;steady_clock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間が逆行しないクロック(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/high_resolution_clock.html&#34;&gt;high_resolution_clock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;高分解能クロック(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/utc_clock.html&#34;&gt;utc_clock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTC時間 (協定世界時) のクロック (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/tai_clock.html&#34;&gt;tai_clock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;TAI時間 (国際原子時) のクロック (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/gps_clock.html&#34;&gt;gps_clock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;GPS時間のクロック (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/file_clock.html&#34;&gt;file_clock&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイル時間を作るために使用されるクロック (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;システム時間用の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/sys_time.html&#34;&gt;sys_time&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システム時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/sys_time.html&#34;&gt;sys_seconds&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒単位でシステム時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/sys_time.html&#34;&gt;sys_days&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日単位でシステム時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ローカル時間用の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/local_time.html&#34;&gt;local_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ローカル時間を表す擬似的なクロック (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/local_time.html&#34;&gt;local_time&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ローカル時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/local_time.html&#34;&gt;local_seconds&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒単位でローカル時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/local_time.html&#34;&gt;local_days&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日単位でローカル時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;UTC時間用の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/utc_time.html&#34;&gt;utc_time&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTC時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/utc_time.html&#34;&gt;utc_seconds&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒単位でUTC時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;TAI時間用の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/tai_time.html&#34;&gt;tai_time&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;TAI時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/tai_time.html&#34;&gt;tai_seconds&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒単位でTAI時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;GPS時間用の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/gps_time.html&#34;&gt;gps_time&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;GPS時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/gps_time.html&#34;&gt;gps_seconds&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒単位でGPS時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ファイル時間用の機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/file_time.html&#34;&gt;file_time&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイル時間の一点を指すtime_pointの別名 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;時計時間の変換&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/clock_time_conversion.html&#34;&gt;clock_time_conversion&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時計間の変換方法を組み合わせごとに定義するためのクラス (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/clock_cast.html&#34;&gt;clock_cast&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ほかの時計時間のtime_pointに変換する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;うるう秒の情報&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/leap_second_info.html&#34;&gt;leap_second_info&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;うるう秒の情報を扱うクラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/get_leap_second_info.html&#34;&gt;get_leap_second_info&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した日時までに挿入されたうるう秒の回数を取得する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;カレンダー型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/last_spec.html&#34;&gt;last_spec&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月の最終日、週の最終日など、文脈に応じた「最後」を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/day.html&#34;&gt;day&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未規定の月の指定した日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month.html&#34;&gt;month&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月単体の値を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year.html&#34;&gt;year&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;カレンダーの年を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday.html&#34;&gt;weekday&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;週の日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_indexed.html&#34;&gt;weekday_indexed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N回目の指定した曜日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_last.html&#34;&gt;weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未規定の月の最後の指定した曜日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_day.html&#34;&gt;month_day&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月と日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_day_last.md.nolink&#34;&gt;month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した月の最終日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_weekday.md.nolink&#34;&gt;month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月の指定したN番目の曜日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_weekday_last.md.nolink&#34;&gt;month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月の最後の指定した曜日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month.md.nolink&#34;&gt;year_month&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年と月を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_day.html&#34;&gt;year_month_day&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年、月、日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_day_last.md.nolink&#34;&gt;year_month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年、月、月の最終日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_weekday.md.nolink&#34;&gt;year_month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年、月、N回目の指定した曜日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_weekday_last.md.nolink&#34;&gt;year_month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;年、月、月の最後の指定した曜日を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;1日内の時間情報&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_of_day.md.nolink&#34;&gt;time_of_day&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1日内の時間情報を取得するクラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/hh_mm_ss.md.nolink&#34;&gt;hh_mm_ss&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時、分、秒を表すクラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/is_am.md.nolink&#34;&gt;is_am&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間が午前かを判定する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/is_pm.md.nolink&#34;&gt;is_pm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間が午後かを判定する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/make12.md.nolink&#34;&gt;make12&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[1h, 12h]&lt;/code&gt;の時間範囲に変換する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/make24.md.nolink&#34;&gt;make24&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間を午前&lt;code&gt;[0h, 11h]&lt;/code&gt;か午後&lt;code&gt;[12h, 23h]&lt;/code&gt;の範囲に変換する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;タイムゾーン&lt;/h2&gt;
&lt;h3&gt;タイムゾーンのデータベース&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/tzdb.html&#34;&gt;tzdb&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タイムゾーンのデータベース型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/get_tzdb.html&#34;&gt;get_tzdb&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タイムゾーンデータベースを取得する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/tzdb_list.html&#34;&gt;tzdb_list&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タイムゾーンデータベースのリスト (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/get_tzdb_list.html&#34;&gt;get_tzdb_list&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タイムゾーンデータベースのリストを取得する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/locate_zone.html&#34;&gt;locate_zone&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した名前のタイムゾーンを取得する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/current_zone.html&#34;&gt;current_zone&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;現在のタイムゾーンを取得する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;リモートタイムゾーンデータベースのサポート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/reload_tzdb.html&#34;&gt;reload_tzdb&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;リモートタイムゾーンデータベースを再読み込みする (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/remote_version.html&#34;&gt;remote_version&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;リモートタイムゾーンデータベースの最新バージョン番号を取得する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;例外クラス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/nonexistent_local_time.html&#34;&gt;nonexistent_local_time&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;存在しないローカル時間をシステム時間に変換しようとした (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/ambiguous_local_time.html&#34;&gt;ambiguous_local_time&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ローカル時間があいまい (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;タイムゾーン&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/sys_info.html&#34;&gt;sys_info&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システム時間用のタイムゾーン情報 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/local_info.html&#34;&gt;local_info&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ローカル時間用のタイムゾーン情報 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/choose.html&#34;&gt;choose&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タイムゾーンを変換する際に、早い時間側と遅い時間側どちらに丸めるかの種類 (enum)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_zone.html&#34;&gt;time_zone&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タイムゾーンの変換を扱うクラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/zoned_traits.html&#34;&gt;zoned_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タイムゾーン取得のカスタマイズ用中間インタフェース (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/zoned_time.html&#34;&gt;zoned_time&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タイムゾーンを考慮した時間軸上の一点を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/zoned_time.html&#34;&gt;zoned_seconds&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;秒単位でタイムゾーンを考慮した時間軸上の一点を表す型 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;うるう秒サポート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/leap_second.html&#34;&gt;leap_second&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;うるう秒が挿入された日時を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;リンク&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_zone_link.html&#34;&gt;time_zone_link&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タイムゾーンの代替名を管理する型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;文字列フォーマット&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/local-time-format-t.html&#34;&gt;local-time-format-t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ローカル時間を文字列フォーマットするために必要な情報をまとめた説明用の型 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/local_time_format.html&#34;&gt;local_time_format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ローカル時間の文字列フォーマット用オブジェクトを生成する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列フォーマット&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;文字列解析&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/parse.html&#34;&gt;parse&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日時文字列を解析する入力マニピュレータ (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;カレンダー定数&lt;/h2&gt;
&lt;h3&gt;最後&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/last_spec.html&#34;&gt;last&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月の最終日、週の最終日など、文脈に応じた「最後」を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;曜日&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_constants.html&#34;&gt;Sunday&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日曜日を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_constants.html&#34;&gt;Monday&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;月曜日を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_constants.html&#34;&gt;Tuesday&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;火曜日を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_constants.html&#34;&gt;Wednesday&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;水曜日を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_constants.html&#34;&gt;Thursday&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;木曜日を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_constants.html&#34;&gt;Friday&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;金曜日を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_constants.html&#34;&gt;Saturday&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;土曜日を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;月&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;January&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;February&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;March&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;April&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;May&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;5月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;June&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;6月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;July&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;August&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;8月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;September&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;9月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;October&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;10月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;November&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;11月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_constants.html&#34;&gt;December&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;12月を表す定数 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2661.htm&#34; target=&#34;_blank&#34;&gt;N2661 A Foundation to Sleep On&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0216r0.html&#34; target=&#34;_blank&#34;&gt;P0216R0 C++ Standard Proposal — A Time-Zone Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0355r7.html&#34; target=&#34;_blank&#34;&gt;P0355R7 Extending &lt;code&gt;&amp;lt;chrono&amp;gt;&lt;/code&gt; to Calendars and Time Zones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clock_cast -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/clock_cast.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/clock_cast.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/clock_cast.md b/reference/chrono/clock_cast.md
index 1f34be1a4..b54df361d 100644
--- a/reference/chrono/clock_cast.md
+++ b/reference/chrono/clock_cast.md
@@ -20,9 +20,9 @@ namespace std::chrono {
 例として、以下のような変換ができる：
 
 - [`system_clock`](system_clock.md)の[`time_point`](time_point.md)から、[`utc_clock`](utc_clock.md)の[`time_point`](time_point.md)へ変換、およびその逆の変換
-- [`tai_clock`](tai_clock.md)または[`gps_clock`](gps_clock.md.nolink)の[`time_point`](time_point.md)から、[`utc_clock`](utc_clock.md)の[`time_point`](time_point.md)へ変換、およびその逆の変換
-- [`system_clock`](system_clock.md)の[`time_point`](time_point.md)から、[`tai_clock`](tai_clock.md)または[`gps_clock`](gps_clock.md.nolink)の[`time_point`](time_point.md)への変換、およびその逆の変換
-    - この組み合わせは[`clock_time_conversion`](clock_time_conversion.md)の特殊化では定義されないが、この関数では、[`utc_clock`](utc_clock.md)を介した、[`system_clock`](system_clock.md)と、[`tai_clock`](tai_clock.md)または[`gps_clock`](gps_clock.md.nolink)の変換がサポートされる
+- [`tai_clock`](tai_clock.md)または[`gps_clock`](gps_clock.md)の[`time_point`](time_point.md)から、[`utc_clock`](utc_clock.md)の[`time_point`](time_point.md)へ変換、およびその逆の変換
+- [`system_clock`](system_clock.md)の[`time_point`](time_point.md)から、[`tai_clock`](tai_clock.md)または[`gps_clock`](gps_clock.md)の[`time_point`](time_point.md)への変換、およびその逆の変換
+    - この組み合わせは[`clock_time_conversion`](clock_time_conversion.md)の特殊化では定義されないが、この関数では、[`utc_clock`](utc_clock.md)を介した、[`system_clock`](system_clock.md)と、[`tai_clock`](tai_clock.md)または[`gps_clock`](gps_clock.md)の変換がサポートされる
 
 
 ## テンプレートパラメータ制約
@@ -79,15 +79,49 @@ clock_time_conversion&amp;lt;DestClock, system_clock&amp;gt;{}(
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;chrono&amp;gt;
 
-namespace chrono = std::chrono;
+using namespace std::chrono;
 
 int main()
 {
+  // system_clockからutc_clockへの変換
+  {
+    utc_time ut = clock_cast&amp;lt;utc_clock&amp;gt;(system_clock::now());
+    std::cout &amp;lt;&amp;lt; ut &amp;lt;&amp;lt; std::endl;
+  }
+
+  // utc_clockからsystem_clockへの変換
+  {
+    sys_time st = clock_cast&amp;lt;system_clock&amp;gt;(utc_clock::now());
+    std::cout &amp;lt;&amp;lt; st &amp;lt;&amp;lt; std::endl;
+  }
+
+  // system_clockから (utc_clockを介して) tai_clockへ変換
+  {
+    tai_time tt = clock_cast&amp;lt;tai_clock&amp;gt;(system_clock::now());
+    std::cout &amp;lt;&amp;lt; tt &amp;lt;&amp;lt; std::endl;
+  }
+
+  // tai_clockから (utc_clockを介して) system_clockへ変換
+  {
+    sys_time st = clock_cast&amp;lt;system_clock&amp;gt;(tai_clock::now());
+    std::cout &amp;lt;&amp;lt; st &amp;lt;&amp;lt; std::endl;
+  }
 }
 ```
+* clock_cast[color ff0000]
+* system_clock[link system_clock.md]
+* utc_clock[link utc_clock.md]
+* tai_clock[link tai_clock.md]
+* utc_time[link utc_time.md]
+* sys_time[link sys_time.md]
+* tai_time[link tai_time.md]
 
 ### 出力例
 ```
+2019-10-24 11:15:10 UTC
+2019-10-24 11:15:10
+2019-10-24 11:15:37 TAI
+2019-10-24 11:15:10
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clock_time_conversion -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/clock_time_conversion.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/clock_time_conversion.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/clock_time_conversion.md b/reference/chrono/clock_time_conversion.md
index 3436c63b1..884eea202 100644
--- a/reference/chrono/clock_time_conversion.md
+++ b/reference/chrono/clock_time_conversion.md
@@ -157,25 +157,58 @@ namespace std::chrono {
 
 ## 備考
 - [`system_clock`](system_clock.md)と[`utc_clock`](utc_clock.md)の間の変換は、[`utc_clock`](utc_clock.md)クラスの機能を使用して変換する
-- [`tai_clock`](tai_clock.md)、[`gps_clock`](gps_clock.md.nolink)と[`utc_clock`](utc_clock.md)の間の変換は、[`tai_clock`](tai_clock.md)と[`gps_clock`](gps_clock.md.nolink)の機能を使用して変換する
-- [`tai_clock`](tai_clock.md)、[`gps_clock`](gps_clock.md.nolink)と[`system_clock`](system_clock.md)の直接の変換は定義されないため、[`utc_clock`](utc_clock.md)を介して変換することはできないが、[`clock_cast()`](clock_cast.md)関数ではそのような変換がサポートされる
+- [`tai_clock`](tai_clock.md)、[`gps_clock`](gps_clock.md)と[`utc_clock`](utc_clock.md)の間の変換は、[`tai_clock`](tai_clock.md)と[`gps_clock`](gps_clock.md)の機能を使用して変換する
+- [`tai_clock`](tai_clock.md)、[`gps_clock`](gps_clock.md)と[`system_clock`](system_clock.md)の直接の変換は定義されないため、[`utc_clock`](utc_clock.md)を介して変換することはできないが、[`clock_cast()`](clock_cast.md)関数ではそのような変換がサポートされる
 
 
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;chrono&amp;gt;
-#include &amp;lt;ctime&amp;gt;
 
 using namespace std::chrono;
 
 int main()
 {
+  // system_clockからutc_clockへの変換
+  {
+    utc_time ut = clock_time_conversion&amp;lt;utc_clock, system_clock&amp;gt;{}(system_clock::now());
+    std::cout &amp;lt;&amp;lt; ut &amp;lt;&amp;lt; std::endl;
+  }
+
+  // system_clockからutc_clockへの変換
+  {
+    sys_time st = clock_time_conversion&amp;lt;system_clock, utc_clock&amp;gt;{}(utc_clock::now());
+    std::cout &amp;lt;&amp;lt; st &amp;lt;&amp;lt; std::endl;
+  }
+
+  // utc_clockからtai_clockへの変換
+  {
+    tai_time tt = clock_time_conversion&amp;lt;tai_clock, utc_clock&amp;gt;{}(utc_clock::now());
+    std::cout &amp;lt;&amp;lt; tt &amp;lt;&amp;lt; std::endl;
+  }
+
+  // tai_clockからutc_clockへの変換
+  {
+    utc_time ut = clock_time_conversion&amp;lt;utc_clock, tai_clock&amp;gt;{}(tai_clock::now());
+    std::cout &amp;lt;&amp;lt; ut &amp;lt;&amp;lt; std::endl;
+  }
 }
 ```
+* clock_time_conversion[color ff0000]
+* system_clock[link system_clock.md]
+* utc_clock[link utc_clock.md]
+* tai_clock[link tai_clock.md]
+* utc_time[link utc_time.md]
+* sys_time[link sys_time.md]
+* tai_time[link tai_time.md]
 
 ### 出力例
 ```
+2019-10-24 11:15:10 UTC
+2019-10-24 11:15:10
+2019-10-24 11:15:37 TAI
+2019-10-24 11:15:10 UTC
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>day -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/day.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/day.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/day.md b/reference/chrono/day.md
index 388bb88a4..785f8e9cf 100644
--- a/reference/chrono/day.md
+++ b/reference/chrono/day.md
@@ -102,6 +102,13 @@ namespace std::chrono {
 | [`d`](day/op_d.md) | 日リテラル | C++20 |
 
 
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](day/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -125,7 +132,7 @@ int main() {
 ```
 * chrono::day[color ff0000]
 * 1d[link day/op_d.md]
-* month_day[link month_day.md.nolink]
+* month_day[link month_day.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/day/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/day/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/day/formatter.md b/reference/chrono/day/formatter.md
new file mode 100644
index 000000000..c864b580a
--- /dev/null
+++ b/reference/chrono/day/formatter.md
@@ -0,0 +1,55 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::day, charT&amp;gt;;
+}
+```
+
+## 概要
+`day`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::day{3}) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%d}&amp;#34;, chrono::day{3}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%e}&amp;#34;, chrono::day{3}) &amp;lt;&amp;lt; std::endl;
+}
+```
+- std::format[link /reference/chrono/format.md]
+
+### 出力
+```
+03
+03
+ 3
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_stream -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/day/from_stream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/day/from_stream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/day/from_stream.md b/reference/chrono/day/from_stream.md
index 5a2397bff..2661692f6 100644
--- a/reference/chrono/day/from_stream.md
+++ b/reference/chrono/day/from_stream.md
@@ -31,10 +31,6 @@ namespace std::chrono {
 `is`を返す
 
 
-## 備考
-- この解析においては、日のフォーマットは、デフォルトで2桁ゼロ埋めの日を意味する`%d`が使用される。1日を表すために`01`および`1`のどちらでも入力できる。1桁の場合の、先頭のゼロは必須ではない。ゼロ埋めの桁数を指定する`%Nd`も指定できる
-
-
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
@@ -80,4 +76,4 @@ int main()
 
 
 ## 関連項目
-- [`local_time_format()`](/reference/chrono/local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator/ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/day/op_append.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/day/op_append.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/day/op_append.md b/reference/chrono/day/op_append.md
index f928f4d90..5dfd5f08c 100644
--- a/reference/chrono/day/op_append.md
+++ b/reference/chrono/day/op_append.md
@@ -14,7 +14,7 @@ namespace std::chrono {
 }
 ```
 * month[link /reference/chrono/month.md]
-* month_day[link /reference/chrono/month_day.md.nolink]
+* month_day[link /reference/chrono/month_day.md]
 
 ## 概要
 カレンダー要素同士をつなぎ合わせる。
@@ -52,9 +52,9 @@ int main()
 ```
 * chrono::March[link /reference/chrono/month_constants.md]
 * 1d[link /reference/chrono/day/op_d.md]
-* chrono::month_day[link /reference/chrono/month_day.md.nolink]
-* md1.month()[link /reference/chrono/month_day/month.md.nolink]
-* md1.day()[link /reference/chrono/month_day/day.md.nolink]
+* chrono::month_day[link /reference/chrono/month_day.md]
+* md1.month()[link /reference/chrono/month_day/month.md]
+* md1.day()[link /reference/chrono/month_day/day.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dリテラル -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/day/op_d.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/day/op_d.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/day/op_d.md b/reference/chrono/day/op_d.md
index 3832d8a7b..58f0870e9 100644
--- a/reference/chrono/day/op_d.md
+++ b/reference/chrono/day/op_d.md
@@ -54,7 +54,7 @@ int main()
 ```
 * 3d[color ff0000]
 * 1d[color ff0000]
-* chrono::month_day[link /reference/chrono/month_day.md.nolink]
+* chrono::month_day[link /reference/chrono/month_day.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/day/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/day/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/day/op_ostream.md b/reference/chrono/day/op_ostream.md
index c6c87c0d9..d01d2d9fe 100644
--- a/reference/chrono/day/op_ostream.md
+++ b/reference/chrono/day/op_ostream.md
@@ -63,4 +63,4 @@ int main()
 
 
 ## 関連項目
-- [`local_time_format()`](/reference/chrono/local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>duration -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/duration.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration.md b/reference/chrono/duration.md
index 9a72ae0ba..f0c6d3d45 100644
--- a/reference/chrono/duration.md
+++ b/reference/chrono/duration.md
@@ -127,9 +127,8 @@ namespace chrono {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator&amp;lt;&amp;lt;`](duration/op_ostream.md.nolink) | ストリームへの出力 | C++20 |
-| [`to_stream`](duration/to_stream.md.nolink) | フォーマットを指定してストリームへ出力 | C++20 |
-| [`from_stream`](duration/from_stream.md.nolink) | フォーマットを指定してストリームから入力 | C++20 |
+| [`operator&amp;lt;&amp;lt;`](duration/op_ostream.md) | ストリームへの出力 | C++20 |
+| [`from_stream`](duration/from_stream.md) | フォーマットを指定してストリームから入力 | C++20 |
 
 
 ### リテラル
@@ -144,11 +143,13 @@ namespace chrono {
 | [`h`](duration/op_h.md)     | 時リテラル         | C++14 |
 
 
-### common_type特殊化
+## 特殊化
 
 | 名前  | 説明               | 対応バージョン |
 |-------|--------------------|----------------|
-| [`common_type`](common_type.md)   | 異なる`duration`間の共通の型を求める | C++11 |
+| [`common_type`](common_type.md) | 異なる`duration`間の共通の型を求める | C++11 |
+| [`formatter`](duration/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化。文字列フォーマットの許可 | C++20 |
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/duration/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/formatter.md b/reference/chrono/duration/formatter.md
new file mode 100644
index 000000000..59e2ac80d
--- /dev/null
+++ b/reference/chrono/duration/formatter.md
@@ -0,0 +1,86 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Rep, class Period, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::duration&amp;lt;Rep, Period&amp;gt;, charT&amp;gt;;
+}
+```
+
+## 概要
+`duration`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+| フォーマットフラグ | 説明 |
+|--------------------|------|
+| `%q` | `duration`単位ごとのサフィックス。`duration`の`operator&amp;lt;&amp;lt;`で出力されるサフィックスと等価 |
+| `%Q` | `duration`の数値。`.count()`で取得した値 |
+| `%S` | 2桁0埋めの秒 |
+| `%M` | 2桁0埋めの分 |
+| `%H` | 24時間時計での2桁0埋めの時 |
+| `%I` | 12時間時計での2桁0埋めの時 |
+| `%p` | 12時間時計でのロケール依存の午前・午後の表現 |
+
+## 備考
+- `Rep`が浮動小数点数である場合のみ、フォーマットとして浮動小数点数の精度を指定でき、そうでない場合に指定すると[`std::format_error`](/reference/format/format_error.md)例外が送出される
+- `duration`に対するフォーマットは深夜0時からの経過時間として扱われ、一日内の時間として出力される (例として`&amp;#34;%H&amp;#34;`, `&amp;#34;%I&amp;#34;`, `&amp;#34;%p&amp;#34;`など)
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // デフォルトフォーマットは、operator&amp;lt;&amp;lt;で出力されるものと同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::seconds{3}) &amp;lt;&amp;lt; std::endl;
+
+  // 単位ごとのサフィックス
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%q}&amp;#34;, chrono::seconds{3}) &amp;lt;&amp;lt; std::endl;
+
+  // duration::count()で取得した値
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Q}&amp;#34;, chrono::seconds{3}) &amp;lt;&amp;lt; std::endl;
+
+  // フォーマットフラグを使用した場合、サフィックスは出力されない
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;seconds : {:%S}&amp;#34;, chrono::seconds{3}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;minutes : {:%M}&amp;#34;, chrono::minutes{3}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;24-hours : {:%H}&amp;#34;, chrono::hours{15}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;12-hours : {:%I}&amp;#34;, chrono::hours{15}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;AM/PM : {:%p %I:00}&amp;#34;, chrono::hours{15}) &amp;lt;&amp;lt; std::endl;
+}
+```
+- std::format[link /reference/chrono/format.md]
+
+### 出力
+```
+3s
+s
+3
+seconds : 03
+minutes : 03
+24-hours : 15
+12-hours : 03
+AM/PM : PM 03:00
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_stream -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/from_stream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/duration/from_stream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/from_stream.md b/reference/chrono/duration/from_stream.md
new file mode 100644
index 000000000..507db49f2
--- /dev/null
+++ b/reference/chrono/duration/from_stream.md
@@ -0,0 +1,93 @@
+# from_stream
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits,
+            class Rep, class Period, class Alloc = std::allocator&amp;lt;charT&amp;gt;&amp;gt;
+  basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    from_stream(std::basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp; is,
+                const charT* fmt,
+                duration&amp;lt;Rep, Period&amp;gt;&amp;amp; d,
+                std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;* abbrev = nullptr,
+                minutes* offset = nullptr);;  // (1) C++20
+}
+```
+
+## 概要
+フォーマット指定して入力ストリームから`duration`オブジェクトに入力する。
+
+
+## 効果
+- パラメータ`fmt`で指定されたフォーマットフラグを使用して、入力を解析し、`tp`に代入する
+- いずれのフラグも`duration`に影響しないものである場合、`d`には値ゼロが代入される
+- タイムゾーンフォーマット`&amp;#34;%Z&amp;#34;`が指定され、解析が成功した場合、パラメータ`abbrev`が非ヌルである場合に`*abbrev`にタイムゾーン名が代入される
+- タイムゾーンとしてUTC時間からのオフセット時間 (日本なら`&amp;#34;+0900&amp;#34;`) を意味するフォーマット`&amp;#34;%z&amp;#34;`が指定され、解析が成功した場合、パラメータ`offset`が非ヌルである場合に`*offset`にその値が代入される
+
+
+## 戻り値
+```cpp
+return is;
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  {
+    std::stringstream ss;
+    ss &amp;lt;&amp;lt; &amp;#34;3&amp;#34;;
+
+    chrono::seconds sec{0};
+    chrono::from_stream(ss, &amp;#34;%S&amp;#34;, sec);
+
+    std::cout &amp;lt;&amp;lt; sec &amp;lt;&amp;lt; std::endl;
+  }
+  {
+    std::stringstream ss;
+    ss &amp;lt;&amp;lt; &amp;#34;+0900 JST&amp;#34;;
+
+    chrono::seconds sec{3};
+    std::string abbrev;
+    chrono::minutes offset{0};
+    chrono::from_stream(ss, &amp;#34;%S&amp;#34;, sec, &amp;amp;abbrev, &amp;amp;offset);
+
+    std::cout &amp;lt;&amp;lt; sec &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; abbrev &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; chrono::floor&amp;lt;chrono::hours&amp;gt;(offset) &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* chrono::from_stream[color ff0000]
+* chrono::floor[link floor.md]
+
+### 出力
+```
+3s
+0s
+JST
+9h
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/duration/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_ostream.md b/reference/chrono/duration/op_ostream.md
new file mode 100644
index 000000000..33bb6e472
--- /dev/null
+++ b/reference/chrono/duration/op_ostream.md
@@ -0,0 +1,110 @@
+# operator&amp;lt;&amp;lt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits, class Rep, class Period&amp;gt;
+  basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os,
+               const duration&amp;lt;Rep, Period&amp;gt;&amp;amp; d);  // (1) C++20
+}
+```
+
+## 概要
+`duration`オブジェクトを出力ストリームに出力する。
+
+
+## 適格要件
+- `Rep`は、整数変換ランクが`short`以上の整数型か、浮動小数点数型であること
+- `charT`は`char`か`wchar_t`であること
+
+
+## 効果
+- `charT`が`char`の場合は[`to_string()`](/reference/string/to_string.md)、`wchar_t`の場合は[`to_wstring()`](/reference/string/to_wstring.md)を使用して[`d.count()`](count.md)から[`basic_string`](/reference/string/basic_string.md)`&amp;lt;charT, traits&amp;gt;`を構築し、以下で述べるサフィックスを追加して`os`に出力する：
+
+| `Period::type`単位型 | サフィックス |
+|----------------------|--------------|
+| [`atto`](/reference/ratio/si_prefix.md)       | `&amp;#34;as&amp;#34;` |
+| [`femto`](/reference/ratio/si_prefix.md)      | `&amp;#34;fs&amp;#34;` |
+| [`pico`](/reference/ratio/si_prefix.md)       | `&amp;#34;ps&amp;#34;` |
+| [`nano`](/reference/ratio/si_prefix.md)       | `&amp;#34;ns&amp;#34;` |
+| [`micro`](/reference/ratio/si_prefix.md)      | `&amp;#34;µs&amp;#34;` (`&amp;#34;\u00b5\u0073&amp;#34;`) |
+| [`milli`](/reference/ratio/si_prefix.md)      | `&amp;#34;ms&amp;#34;` |
+| [`centi`](/reference/ratio/si_prefix.md)      | `&amp;#34;cs&amp;#34;` |
+| [`deci`](/reference/ratio/si_prefix.md)       | `&amp;#34;ds&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;1&amp;gt;`     | `&amp;#34;s&amp;#34;` |
+| [`deca`](/reference/ratio/si_prefix.md)       | `&amp;#34;das&amp;#34;` |
+| [`hecto`](/reference/ratio/si_prefix.md)      | `&amp;#34;hs&amp;#34;` |
+| [`kilo`](/reference/ratio/si_prefix.md)       | `&amp;#34;ks&amp;#34;` |
+| [`mega`](/reference/ratio/si_prefix.md)       | `&amp;#34;Ms&amp;#34;` |
+| [`giga`](/reference/ratio/si_prefix.md)       | `&amp;#34;Gs&amp;#34;` |
+| [`tera`](/reference/ratio/si_prefix.md)       | `&amp;#34;Ts&amp;#34;` |
+| [`peta`](/reference/ratio/si_prefix.md)       | `&amp;#34;Ps&amp;#34;` |
+| [`exa`](/reference/ratio/si_prefix.md)        | `&amp;#34;Es&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;60&amp;gt;`    | `&amp;#34;min&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;3600&amp;gt;`  | `&amp;#34;h&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;86400&amp;gt;` | `&amp;#34;d&amp;#34;` |
+
+値`num`を`Period::type::num`、値`den`を`Period::type::den`をゼロ埋めなしの10進数で文字列化したものであるとして、
+
+- `Period::type::den == 1`である場合、サフィックス`&amp;#34;[num]s&amp;#34;`
+- いずれにもあてはまらない場合、サフィックスは`&amp;#34;[num/den]s&amp;#34;`
+
+マイクロ秒として`&amp;#34;µs&amp;#34;`が表現できないエンコーディングの場合、代わりに`&amp;#34;us&amp;#34;`が使用される。
+
+
+## 戻り値
+```cpp
+return os;
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;nano sec : &amp;#34; &amp;lt;&amp;lt; chrono::nanoseconds{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;milli sec : &amp;#34; &amp;lt;&amp;lt; chrono::milliseconds{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;seconds : &amp;#34; &amp;lt;&amp;lt; chrono::seconds{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;minutes : &amp;#34; &amp;lt;&amp;lt; chrono::minutes{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;hours : &amp;#34; &amp;lt;&amp;lt; chrono::hours{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;days : &amp;#34; &amp;lt;&amp;lt; chrono::days{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;weeks : &amp;#34; &amp;lt;&amp;lt; chrono::weeks{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;1/3 seconds : &amp;#34; &amp;lt;&amp;lt; chrono::duration&amp;lt;int, std::ratio&amp;lt;1, 3&amp;gt;&amp;gt;{3} &amp;lt;&amp;lt; std::endl;
+
+  using float_seconds = chrono::duration&amp;lt;float, std::ratio&amp;lt;1&amp;gt;&amp;gt;;
+  std::cout &amp;lt;&amp;lt; &amp;#34;float sec : &amp;#34; &amp;lt;&amp;lt; float_seconds{1.23f} &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::weeks[link /reference/chrono/duration_aliases.md]
+* std::ratio[link /reference/ratio/ratio.md]
+
+### 出力
+```
+nano sec : 3ns
+milli sec : 3ms
+seconds : 3s
+minutes : 3min
+hours : 3h
+days : 3d
+weeks : 3[604800]s
+1/3 seconds : 3[1/3]s
+float sec : 1.23s
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>file_clock -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/file_clock.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/file_clock.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/file_clock.md b/reference/chrono/file_clock.md
new file mode 100644
index 000000000..f008c83ca
--- /dev/null
+++ b/reference/chrono/file_clock.md
@@ -0,0 +1,105 @@
+# file_clock
+* chrono[meta header]
+* std::chrono[meta namespace]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  using file_clock = see below;
+}
+```
+
+## 概要
+`file_clock`は、ファイル時間を作るために使用されるクロックである。この時刻系は[`&amp;lt;filesystem&amp;gt;`](/reference/filesystem.md)ライブラリにおいてファイル作成日時やファイル更新日時を表現する[`file_time_type`](/reference/filesystem/file_time_type.md)のために定義される。
+
+このクロックは、TrivialClock要件を満たすクロック型の別名として定義される。別名の元となるクロックは、`std::chrono`や`std::filesystem`とは異なる名前空間で定義される可能性がある。
+
+この型がもつ`now()`静的メンバ関数は、`noexcept(true)`である。
+
+
+## メンバ関数
+`file_clock`は、以下の2つ組の静的メンバ関数のいずれかを提供する：
+
+```cpp
+// utc_clockに相当するクラスの別名として定義される場合
+template&amp;lt;class Duration&amp;gt;
+static sys_time&amp;lt;see below&amp;gt;
+  to_sys(const file_time&amp;lt;Duration&amp;gt;&amp;amp;);
+
+template&amp;lt;class Duration&amp;gt;
+static file_time&amp;lt;see below&amp;gt;
+  from_sys(const sys_time&amp;lt;Duration&amp;gt;&amp;amp;);
+```
+* utc_clock[link utc_clock.md]
+* sys_time[link sys_time.md]
+* file_time[link file_time.md]
+
+もしくは
+
+```cpp
+// tai_clock, gps_clockに相当するクラスの別名として定義される場合
+template&amp;lt;class Duration&amp;gt;
+static utc_time&amp;lt;see below&amp;gt;
+  to_utc(const file_time&amp;lt;Duration&amp;gt;&amp;amp;);
+
+template&amp;lt;class Duration&amp;gt;
+static file_time&amp;lt;see below&amp;gt;
+  from_utc(const utc_time&amp;lt;Duration&amp;gt;&amp;amp;);
+```
+* tai_clock[link tai_clock.md]
+* gps_clock[link gps_clock.md]
+* utc_time[link utc_time.md]
+* file_time[link file_time.md]
+
+これらの戻り値となる[`time_point`](time_point.md)の`Duration`は、入力の[`time_point`](time_point.md)から計算される。
+
+
+### エポック
+未規定
+
+
+### うるう秒の扱い
+未規定
+
+
+## 例
+```cpp example
+#include &amp;lt;fstream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;filesystem&amp;gt;
+
+namespace chrono = std::chrono;
+namespace fs = std::filesystem;
+
+int main()
+{
+  std::ofstream{&amp;#34;regular.txt&amp;#34;};
+
+  // ファイルの最終更新日時を変更する
+  fs::file_time_type tp = chrono::file_clock::now();
+  fs::last_write_time(&amp;#34;regular.txt&amp;#34;, tp);
+}
+```
+* chrono::file_clock[color ff0000]
+* fs::file_time_type[link /reference/filesystem/file_time_type.md]
+* fs::last_write_time[link /reference/filesystem/last_write_time.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 参照
+- [`file_clock` breaks ABI for C++17 implementations](https://wg21.cmeerw.net/lwg/issue3145)
+    - `file_clock`は当初、独立したクラスとして定義することを予定していたが、C++17のファイルシステムライブラリで定義される[`file_time_type`](/reference/filesystem/file_time_type.md)のABI互換性を破壊してしまうことがわかったため、実装定義されるクロックの別名として`file_clock`が定義されることになった
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>file_time -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/file_time.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/file_time.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/file_time.md b/reference/chrono/file_time.md
new file mode 100644
index 000000000..373ed845e
--- /dev/null
+++ b/reference/chrono/file_time.md
@@ -0,0 +1,218 @@
+# file_time
+* chrono[meta header]
+* std::chrono[meta namespace]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class Duration&amp;gt;
+  using file_time = time_point&amp;lt;file_clock, Duration&amp;gt;;    // (1) C++20
+
+  template &amp;lt;class charT, class traits, class Duration&amp;gt;
+  std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os,
+               const file_time&amp;lt;Duration&amp;gt;&amp;amp; tp);           // (2) C++20
+
+  template &amp;lt;class charT, class traits, class Duration, class Alloc = std::allocator&amp;lt;charT&amp;gt;&amp;gt;
+  std::basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    from_stream(std::basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp; is,
+                const charT* fmt,
+                file_time&amp;lt;Duration&amp;gt;&amp;amp; tp,
+                std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;* abbrev = nullptr,
+                minutes* offset = nullptr);              // (3) C++20
+}
+
+namespace std {
+  template &amp;lt;class Duration, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::file_time&amp;lt;Duration&amp;gt;, charT&amp;gt;;  // (4) C++20
+}
+```
+* time_point[link time_point.md]
+* file_clock[link file_clock.md]
+
+## 概要
+ファイル時間の一点を指す[`time_point`](time_point.md)に対する別名。
+
+この時間点はUTCタイムゾーンの時間を指す。
+
+- (1) : [`file_clock`](file_clock.md)の[`time_point`](time_point.md)に対する別名。時間間隔を表す型はパラメータ化されている
+- (2) : 時間点に含まれる日付と時間を出力ストリームに出力する
+- (3) : フォーマット指定して入力ストリームから日付・時間を時間点オブジェクトに入力する
+- (4) : `file_time`型に対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化
+
+
+## 効果
+便宜上のリテラルキャスト`STATICALLY-WIDEN`を導入する。`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;...&amp;#34;)`は、`charT`が`char`である場合は`&amp;#34;...&amp;#34;`、`charT`が`wchar_t`である場合は`L&amp;#34;...&amp;#34;`を意味する。
+
+- (2) : 以下と等価：
+    ```cpp
+    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%F %T}&amp;#34;), tp);
+    ```
+    * format[link format.md]
+
+- (3) :
+    - パラメータ`fmt`で指定されたフォーマットフラグを使用して、入力を解析し、`tp`に代入する
+    - 有効な日付・時間の解析に失敗した場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出され、パラメータ`tp`は変更されない
+    - タイムゾーンフォーマット`&amp;#34;%Z&amp;#34;`が指定され、解析が成功した場合、パラメータ`abbrev`が非ヌルである場合に`*abbrev`にタイムゾーン名が代入される
+    - タイムゾーンとしてUTC時間からのオフセット時間 (日本なら`&amp;#34;+0900&amp;#34;`) を意味するフォーマット`&amp;#34;%z&amp;#34;`が指定され、解析が成功した場合、パラメータ`offset`が非ヌルである場合に`*offset`にその値が代入される
+    - さらに、`tp`に日付・時間が代入される前に、解析されたオフセットがタイムスタンプから引かれる
+    - `is`を返す
+
+
+## 備考
+- (1) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`file_clock::time_point`がもつ時間間隔の単位は未規定 (実装定義) であるため、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
+- (4) :
+    - `%Z` (タイムゾーンの略称) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;UTC&amp;#34;)`で置き換えられる
+    - `%z`もしくはその改良コマンドが指定された場合、`0`[`min`](duration/op_min.md)が使用される
+    - この日付と時間のフォーマットは、`file_time&amp;lt;Duration&amp;gt;`型変数`t`を[`clock_cast`](clock_cast.md)`&amp;lt;`[`system_clock`](system_clock.md)`&amp;gt;(t)`で変換した[`sys_time`](sys_time.md)、もしくは[`clock_cast`](clock_cast.md)`&amp;lt;`[`utc_clock`](utc_clock.md)`&amp;gt;(t)`で変換した[`utc_time`](utc_time.md)をフォーマットした場合と等価である
+
+
+## 例
+### 基本的な使い方
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;fstream&amp;gt;
+#include &amp;lt;filesystem&amp;gt;
+#include &amp;lt;fstream&amp;gt;
+
+namespace chrono = std::chrono;
+namespace fs = std::filesystem;
+
+int main()
+{
+  std::ofstream{&amp;#34;regular.txt&amp;#34;};
+
+  // ファイルの最終更新日時を取得して出力
+  fs::file_time_type tp = fs::last_write_time(&amp;#34;regulat.txt&amp;#34;);
+  std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+}
+```
+* fs::file_time_type[link /reference/filesystem/file_time_type.md]
+* fs::last_write_time[link /reference/filesystem/last_write_time.md]
+
+#### 出力例
+```
+2019-10-24 11:15:10 UTC
+```
+
+### 入力の例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;filesystem&amp;gt;
+
+namespace chrono = std::chrono;
+namespace fs = std::filesystem;
+
+int main()
+{
+  // タイムゾーンとオフセットを含まない入力
+  {
+    std::stringstream ss;
+    ss &amp;lt;&amp;lt; &amp;#34;2019-10-24 20:15:10&amp;#34;;
+
+    fs::file_time_type tp;
+    chrono::from_stream(ss, &amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;, tp);
+
+    if (ss) {
+      std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+    }
+    else {
+      std::cout &amp;lt;&amp;lt; &amp;#34;解析失敗&amp;#34; &amp;lt;&amp;lt; std::endl;
+    }
+  }
+
+  // タイムゾーンとオフセットを含む入力
+  {
+    std::stringstream ss;
+    ss &amp;lt;&amp;lt; &amp;#34;2019-10-24 20:15:10 UTC+0900&amp;#34;;
+
+    fs::file_time_type tp;
+    std::string abbrev;
+    chrono::minutes offset{0};
+    chrono::from_stream(ss, &amp;#34;%Y-%m-%d %H:%M:%S %Z%z&amp;#34;, tp, &amp;amp;abbrev, &amp;amp;offset);
+
+    std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; abbrev &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; offset.count() &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* chrono::from_stream[color ff0000]
+* offset.count()[link duration/count.md]
+
+#### 出力例
+```
+2019-10-24 11:15:10 UTC
+2019-10-24 11:15:10 UTC
+UTC
+540
+```
+
+### 文字列フォーマットの例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+#include &amp;lt;filesystem&amp;gt;
+#include &amp;lt;fstream&amp;gt;
+
+namespace chrono = std::chrono;
+namespace fs = std::filesystem;
+
+int main()
+{
+  std::ofstream{&amp;#34;regular.txt&amp;#34;};
+
+  // ファイルの最終更新日時を取得して出力
+  fs::file_time_type tp = fs::last_write_time(&amp;#34;regulat.txt&amp;#34;);
+
+  // デフォルトフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+
+  // 「年月日 時分秒」のフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {0:%Y/%m/%d %H:%M:%S}&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+
+  // 日付だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : %Y年%m月%d日&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5 : %F&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+
+  // 時間だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6 : %H時%M分%S秒&amp;#34;, lt) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7 : %T&amp;#34;, tp) &amp;lt;&amp;lt; std::endl;
+}
+```
+* fs::file_time_type[link /reference/filesystem/file_time_type.md]
+* fs::last_write_time[link /reference/filesystem/last_write_time.md]
+* std::format[link format.md]
+
+#### 出力例
+```
+1 : 2019-12-20 10:05:00 UTC
+2 : 2019年12月20日 10時05分05秒
+3 : 2019/12/20 10:05:05
+4 : 2019年12月20日
+5 : 2019-12-20
+6 : 10時05分05秒
+7 : 10:05:05
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (出力フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/format.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
new file mode 100644
index 000000000..178048ea7
--- /dev/null
+++ b/reference/chrono/format.md
@@ -0,0 +1,104 @@
+# format
+* chrono[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  // 追加宣言なし
+}
+```
+
+## 概要
+chronoライブラリのクラスオブジェクトに対する文字列フォーマット。
+
+ここでは宣言はとくにないが、[`std::format()`](/reference/format/format.md)に対してchronoライブラリの各クラスオブジェクトを出力できるよう[`std::formatter`](/reference/format/formatter.md)クラスが各クラスで特殊化されている。
+
+
+### chronoライブラリでのフォーマットフラグ
+
+[`std::format()`](/reference/format/format.md)関数の通常の指定では、置換フィールド`{}`内に基数、精度、0埋め指定、アライメントなどを指定する。
+
+chronoライブラリではこれに加え、たとえばデフォルトでは年・月・日を出力する[`year_month_day`](year_month_day.md)クラスに対して「`&amp;#34;年/月&amp;#34;`」というフォーマットで出力するよう`&amp;#34;{%Y/%m}&amp;#34;`のように指定することでデフォルトとは異なる出力をさせることができる。
+
+| フォーマットフラグ | 説明 | 例 |
+|--------------------|------|----|
+| `%a` | ロケール依存の曜日の略称。&amp;lt;br/&amp;gt; 値に有効な曜日が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Fri&amp;#34;`, `&amp;#34;金&amp;#34;` |
+| `%A` | ロケール依存の曜日の完全名。&amp;lt;br/&amp;gt; 値に有効な曜日が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Friday&amp;#34;`, `&amp;#34;金曜日&amp;#34;` |
+| `%b` | ロケール依存の月の略称。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Apr&amp;#34;`, `&amp;#34;4月&amp;#34;` |
+| `%B` | ロケール依存の月の完全名。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;April&amp;#34;`, `&amp;#34;4月&amp;#34;` |
+| `%c` | ロケール依存の日付・時間の表現。改良コマンド`%Ec`を指定すると、異なる表現を出力する | `&amp;#34;Fri Apr 24 17:14:44 2020&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;2020年04月24日 17時14分44秒&amp;#34;`&amp;lt;br/&amp;gt; `%Ec`では`&amp;#34;令和02年04月24日 17時14分44秒&amp;#34;` |
+| `%C` | 100で切り下げ除算した年 (世紀)。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%EC`を指定すると、ロケール依存の世紀の異なる表現を出力する | `&amp;#34;21&amp;#34;`&amp;lt;br/&amp;gt; `%EC`では`&amp;#34;令和&amp;#34;` (元号) |
+| `%d` | 10進数での月の日。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%Od`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;24&amp;#34;` |
+| `%D` | `%m/%d/%y`と等価 | `&amp;#34;04/24/20&amp;#34;` |
+| `%e` | 10進数での月の日。結果が10進数で1桁の場合、先頭にスペースがつく。改良コマンド`%Oe`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34; 1&amp;#34;` |
+| `%F` | `%Y-%m-%d`と等価 | `&amp;#34;2020-04-24&amp;#34;` |
+| `%g` | ISOの週ベースのうしろ2桁10進数の年。結果が1桁の場合、先頭に`0`がつく | `&amp;#34;20&amp;#34;` |
+| `%G` | ISOの週ベースの10進数の年。結果が4桁未満の場合、4桁になるよう左が`0`で埋められる | `&amp;#34;2020&amp;#34;` |
+| `%h` | `%b`と等価 | `&amp;#34;Jan&amp;#34;`, `&amp;#34;4月&amp;#34;` |
+| `%H` | 24時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OH`を指定知ると、ロケール依存の異なる表現を出力する | `&amp;#34;17&amp;#34;` |
+| `%I` | 12時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OI`を指定知ると、ロケール依存の異なる表現を出力する | `&amp;#34;05&amp;#34;` |
+| `%j` | 10進数での年の日。1月1日は`001`が出力される。結果が3桁未満の場合、3桁になるよう左が`0`で埋められる | `&amp;#34;115&amp;#34;` |
+| `%m` | 10進数での月。1月は`01`が出力される。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%Om`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;04&amp;#34;` |
+| `%M` | 10進数での分。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OM`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;14&amp;#34;` |
+| `%n` | 改行文字 | |
+| `%p` | 12時間時計でのロケール依存の午前・午後の表現 | `&amp;#34;PM&amp;#34;`, `&amp;#34;午後&amp;#34;` |
+| `%q` | [`duration`](duration.md)単位ごとのサフィックス。[`duration`](duration.md)の[`operator&amp;lt;&amp;lt;`](duration/op_ostream.md)で出力されるサフィックスと等価 | `&amp;#34;s&amp;#34;` |
+| `%Q` | [`duration`](duration.md)の数値。[`.count()`](duration/count.md)で取得した値 | `&amp;#34;44&amp;#34;` |
+| `%r` | 12時間時計でのロケール依存の時間 | `&amp;#34;05:14:44 PM&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;午後05時14分44秒&amp;#34;` |
+| `%R` | `%H:%M`と等価 | `&amp;#34;17:14&amp;#34;` |
+| `%S` | 10進数での秒。10秒未満の場合、先頭に`0`がつく。入力が秒の精度と正確に一致しない場合、浮動小数点フォーマットで出力される。10進数の浮動小数点数で小数点以下18桁以内で表現できない場合、マイクロ秒で出力される。改良コマンド`%OS`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;44&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;44.123&amp;#34;` |
+| `%t` | 水平タブ文字 | |
+| `%T` | `%H:%M:%S`と等価 | `&amp;#34;17:14:44.123&amp;#34;` |
+| `%u` | 10進数での月曜を1とするISO曜日番号 (1-7)。改良コマンド`%Ou`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;5&amp;#34;` |
+| `%U` | 10進数での年の週番号。年の最初の日曜日が最初の曜日であるとして`01`、同年のそれより前の日は`00`となる。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OU`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;16&amp;#34;` |
+| `%V` | 10進数でのISO週ベースの週番号。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OV`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;17&amp;#34;` |
+| `%w` | 10進数での日曜を0とする曜日番号 (0-6)。改良コマンド`%Ow`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;5&amp;#34;` |
+| `%W` | 10進数での年の週番号。年の最初の月曜日が最初の曜日であるとして`01`、同年のそれより前の日は`00`となる。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OW`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;16&amp;#34;` |
+| `%x` | ロケール依存の日付表現。改良コマンド`%Ex`を指定すると、ロケール依存の異なる表現が出力される | `&amp;#34;04/24/20&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;2020年04月24日&amp;#34;`&amp;lt;br/&amp;gt; `%Ex`では`&amp;#34;令和02年04月24日&amp;#34;` |
+| `%X` | ロケール依存の時間表現。改良コマンド`%EX`を指定すると、ロケール依存の異なる表現が出力される | `&amp;#34;17:14:44&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;17時14分44秒&amp;#34;` |
+| `%y` | 10進数での年のうしろ2桁。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%Oy`を指定すると、ロケール依存の異なる表現を出力する。改良コマンド`%Ey`を指定すると、`%EC`からのオフセットとしてロケール依存の異なる表現を出力する。 | `&amp;#34;20&amp;#34;`&amp;lt;br/&amp;gt; `%Ey`では`&amp;#34;02&amp;#34;` |
+| `%Y` | 10進数での年。結果が4桁未満の場合、4桁になるよう左が`0`で埋められる。改良コマンド`%EY`を指定すると、ロケール依存の異なる表現の完全な年を出力する | `&amp;#34;2020&amp;#34;`&amp;lt;br/&amp;gt; `%EY`では`&amp;#34;令和02年&amp;#34;` |
+| `%z` | ISO 8601フォーマットでのUTCからのオフセット。例として`-0430`はUTCから4時間30分遅れていることを表す。オフセットがゼロの場合は`+0000`が使用される。改良コマンド`%Ez`と`%Oz`を指定すると、時と分の間にコロン (`:`) が挿入される。オフセット情報が利用可能でない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;+0900&amp;#34;`&amp;lt;br/&amp;gt;`%Ez`では`&amp;#34;+09:00&amp;#34;` |
+| `%Z` | タイムゾーンの略称。タイムゾーンの略称が利用可能でない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;JST&amp;#34;` |
+| `%%` | 文字`%` | `&amp;#34;%&amp;#34;` |
+
+
+### chronoライブラリの各クラスのデフォルトフォーマット
+
+
+
+## 戻り値
+
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;format&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+}
+```
+
+### 出力例
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 参照
+- [P1361R2 Integration of chrono with text formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1361r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gps_clock -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/gps_clock.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/gps_clock.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/gps_clock.md b/reference/chrono/gps_clock.md
new file mode 100644
index 000000000..f667d6ef4
--- /dev/null
+++ b/reference/chrono/gps_clock.md
@@ -0,0 +1,89 @@
+# gps_clock
+* chrono[meta header]
+* std::chrono[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  class gps_clock;
+}
+```
+
+## 概要
+`gps_clock`は、GPS時間 (GPST) を表現するためのクロックである。この時刻系は、カーナビや携帯端末などで使用される。
+
+このクラスの[`now()`](gps_clock/now.md)静的メンバ関数は、標準では`noexcept(false)`である。実装が`noexcept(true)`である保証をしない限り、このクラスはTrivialClock要件を満たさない。
+
+
+### エポック
+クロックごとの初期時間 (内部的にカウンタがあれば値ゼロ) をエポックと呼ぶ。
+
+`gps_clock`のエポックは、1980年1月16日 (この年の最初の日曜日) 0時0分0秒である。
+
+
+### うるう秒の扱い
+このクロックではうるう秒は挿入されず、うるう秒の数だけ時間が進む。そのため、UTCにうるう秒が挿入されるたびに、UTCはGPSよりも1秒ずつ遅れていく。
+
+GPS時間とTAI時間は19秒ずれていて、このずれは時間が経過しても変わらない。GPS時間のエポックが[`1958y`](year/op_y.md)`/`[`January`](month_constants.md)`/1`、TAI時間のエポックが[`1980y`](year/op_y.md)`/`[`January`](month_constants.md)`/`[`Sunday`](weekday_constants.md)`[1]`であるが、1958年から1970年までのオフセットが10秒と、1970年から1980年までに挿入されたうるう秒が9秒あるためだ。
+
+
+## メンバ関数
+### 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`now`](gps_clock/now.md)           | 現在日時を取得する           | C++20 |
+| [`to_utc`](gps_clock/to_utc.md)     | GPS時間からUTC時間へ変換する | C++20 |
+| [`from_utc`](gps_clock/from_utc.md) | UTC時間からGPS時間へ変換する | C++20 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|--------------|--------------------------------|-------|
+| `rep`        | 時間間隔の内部表現となる符号付き算術型。具体的な型は未規定    | C++20 |
+| `period`     | 時間の周期を表す`ratio`型 [`ratio`](/reference/ratio/ratio.md)`&amp;lt;unspecified, unspecified&amp;gt;` | C++20 |
+| `duration`   | 時間間隔の型 [`duration`](duration.md)`&amp;lt;rep, period&amp;gt;`         | C++20 |
+| `time_point` | 時間の一点を指す型 [`time_point`](time_point.md)`&amp;lt;utc_clock&amp;gt;` | C++20 |
+
+
+## メンバ定数
+
+| 名前 | 説明 | 対応バージョン |
+|-------------|--------------------------------------------------------|-------|
+| `static constexpr bool is_steady` | 逆行しないクロックかどうかを表す`bool`値。値は未規定。 | C++20 |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::gps_clock::time_point tp = chrono::gps_clock::now();
+  std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+}
+```
+* now()[link gps_clock/now.md]
+
+### 出力例
+```
+2019-10-24 11:15:37 GPS
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 参照
+- [全地球測位システム GPS - 暦Wiki](https://eco.mtk.nao.ac.jp/koyomi/wiki/GPS.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_utc -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/gps_clock/from_utc.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/gps_clock/from_utc.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/gps_clock/from_utc.md b/reference/chrono/gps_clock/from_utc.md
new file mode 100644
index 000000000..e9d804319
--- /dev/null
+++ b/reference/chrono/gps_clock/from_utc.md
@@ -0,0 +1,92 @@
+# from_utc
+* chrono[meta header]
+* std::chrono[meta namespace]
+* gps_clock[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template &amp;lt;class Duration&amp;gt;
+static gps_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;
+  from_utc(const utc_time&amp;lt;Duration&amp;gt;&amp;amp;) noexcept;
+```
+* gps_time[link /reference/chrono/gps_time.md]
+* utc_time[link /reference/chrono/utc_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
+
+## 概要
+UTC時間からGPS時間に変換する。
+
+
+## 戻り値
+```cpp
+return gps_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;{t.time_since_epoch()} - 315964809s;
+```
+* gps_time[link /reference/chrono/gps_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
+* t.time_since_epoch()[link /reference/chrono/time_point/time_since_epoch.md]
+* 315964809s[link /reference/chrono/duration/op_s.md]
+
+ここで`315964809`は、システム時間のエポック1970年1月1日とGPS時間のエポック1980年1月6日 (この年の最初の日曜日) との差である秒数に、その間に挿入されたうるう秒である9秒を加算した秒数である。
+
+```cpp
+315964809s == sys_days{1980y/January/Sunday[1]} - sys_days{1970y/January/1} + 9s
+```
+* 315964809s[link /reference/chrono/duration/op_s.md]
+* 9s[link /reference/chrono/duration/op_s.md]
+* sys_days[link /reference/chrono/sys_time.md]
+* 1970y[link /reference/chrono/year/op_y.md]
+* 1980y[link /reference/chrono/year/op_y.md]
+* January[link /reference/chrono/month_constants.md]
+* Sunday[link /reference/chrono/weekday_constants.md]
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  // ここでは日単位のシステム時間を、utc_clockを経由して、日単位のGPS時間に変換している。
+  // 秒単位の時間を渡せば、秒単位のGPS時間が返る
+  auto st = chrono::sys_days{2019y/10/24};
+  auto ut = chrono::utc_clock::from_sys(st);
+  auto tt = chrono::gps_clock::from_utc(ut); // 日単位のGPS時間が返る
+
+  // うるう秒
+  chrono::leap_second_info info = chrono::get_leap_second_info(ut);
+
+  std::cout &amp;lt;&amp;lt; st &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; ut &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; tt &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; info.elapsed.count() &amp;lt;&amp;lt; std::endl;
+}
+```
+* from_utc[color ff0000]
+* 2019y[link /reference/chrono/year/op_y.md]
+* chrono::sys_days[link /reference/chrono/sys_time.md]
+* chrono::utc_clock[link /reference/chrono/utc_clock.md]
+* from_sys[link /reference/chrono/utc_clock/from_sys.md]
+* chrono::get_leap_second_info[link /reference/chrono/get_leap_second_info.md]
+* chrono::leap_second_info[link /reference/chrono/leap_second_info.md]
+* count()[link /reference/chrono/duration/count.md]
+
+### 出力
+```
+2019-10-24 00:00:00
+2019-10-24 00:00:00 UTC
+2019-10-24 00:00:27 GPS
+27
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>now -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/gps_clock/now.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/gps_clock/now.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/gps_clock/now.md b/reference/chrono/gps_clock/now.md
new file mode 100644
index 000000000..6553bcf5c
--- /dev/null
+++ b/reference/chrono/gps_clock/now.md
@@ -0,0 +1,51 @@
+# now
+* chrono[meta header]
+* std::chrono[meta namespace]
+* gps_clock[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static time_point now();
+```
+* time_point[link /reference/chrono/time_point.md]
+
+## 概要
+現在日時を取得する。
+
+
+## 戻り値
+[`from_utc`](from_utc.md)`(`[`utc_clock`](/reference/chrono/utc_clock.md)`::`[`now()`](/reference/chrono/utc_clock/now.md)`)`もしくはより精度が高いGPS時間としての現在日時を返す。
+
+
+## 備考
+このクラスの`now()`静的メンバ関数は、標準では`noexcept(false)`である。実装が`noexcept(true)`である保証をしない限り、このクラスはTrivialClock要件を満たさない。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::gps_clock::time_point tp = chrono::gps_clock::now();
+  std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力例
+```
+2019-10-24 11:15:37 GPS
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_utc -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/gps_clock/to_utc.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/gps_clock/to_utc.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/gps_clock/to_utc.md b/reference/chrono/gps_clock/to_utc.md
new file mode 100644
index 000000000..aa33ab94e
--- /dev/null
+++ b/reference/chrono/gps_clock/to_utc.md
@@ -0,0 +1,88 @@
+# to_utc
+* chrono[meta header]
+* std::chrono[meta namespace]
+* gps_clock[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template &amp;lt;class Duration&amp;gt;
+static utc_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;
+  to_utc(const gps_time&amp;lt;Duration&amp;gt;&amp;amp; t) noexcept;
+```
+* gps_time[link /reference/chrono/gps_time.md]
+* utc_time[link /reference/chrono/utc_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
+
+## 概要
+GPS時間からUTC時間に変換する。
+
+
+## 戻り値
+```cpp
+return utc_time&amp;lt;common_type_t&amp;lt;Duration, seconds&amp;gt;&amp;gt;{t.time_since_epoch()} + 315964809s;
+```
+* utc_time[link /reference/chrono/utc_time.md]
+* common_type_t[link /reference/chrono/common_type.md]
+* t.time_since_epoch()[link /reference/chrono/time_point/time_since_epoch.md]
+* 315964809s[link /reference/chrono/duration/op_s.md]
+
+ここで`315964809`は、システム時間のエポック1970年1月1日とGPS時間のエポック1980年1月6日 (この年の最初の日曜日) との差である秒数に、その間に挿入されたうるう秒である9秒を加算した秒数である。
+
+```cpp
+315964809s == sys_days{1980y/January/Sunday[1]} - sys_days{1970y/January/1} + 9s
+```
+* 315964809s[link /reference/chrono/duration/op_s.md]
+* 9s[link /reference/chrono/duration/op_s.md]
+* sys_days[link /reference/chrono/sys_time.md]
+* 1970y[link /reference/chrono/year/op_y.md]
+* 1980y[link /reference/chrono/year/op_y.md]
+* January[link /reference/chrono/month_constants.md]
+* Sunday[link /reference/chrono/weekday_constants.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  auto tt = chrono::clock_cast&amp;lt;chrono::gps_clock&amp;gt;(chrono::sys_days{2019y/10/24});
+  auto ut = chrono::gps_clock::to_utc(tt);
+
+  // うるう秒
+  chrono::leap_second_info info = chrono::get_leap_second_info(ut);
+
+  std::cout &amp;lt;&amp;lt; tt &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; ut &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; info.elapsed.count() &amp;lt;&amp;lt; std::endl;
+}
+```
+* to_utc[color ff0000]
+* chrono::clock_cast[link /reference/chrono/clock_cast.md]
+* chrono::sys_days[link /reference/chrono/sys_time.md]
+* 2019y[link /reference/chrono/year/op_y.md]
+* chrono::get_leap_second_info[link /reference/chrono/get_leap_second_info.md]
+* chrono::leap_second_info[link /reference/chrono/leap_second_info.md]
+* count()[link /reference/chrono/duration/count.md]
+
+
+### 出力
+```
+2019-10-24 00:00:27 GPS
+2019-10-24 00:00:00 UTC
+27
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gps_time -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/gps_time.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/gps_time.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/gps_time.md b/reference/chrono/gps_time.md
new file mode 100644
index 000000000..a6ced9619
--- /dev/null
+++ b/reference/chrono/gps_time.md
@@ -0,0 +1,219 @@
+# gps_time
+* chrono[meta header]
+* std::chrono[meta namespace]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class Duration&amp;gt;
+  using gps_time = time_point&amp;lt;gps_clock, Duration&amp;gt;;    // (1) C++20
+
+  using gps_seconds = gps_time&amp;lt;seconds&amp;gt;;               // (2) C++20
+
+  template &amp;lt;class charT, class traits, class Duration&amp;gt;
+  std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os,
+               const gps_time&amp;lt;Duration&amp;gt;&amp;amp; tp);          // (3) C++20
+
+  template &amp;lt;class charT, class traits, class Duration, class Alloc = std::allocator&amp;lt;charT&amp;gt;&amp;gt;
+  std::basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    from_stream(std::basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp; is,
+                const charT* fmt,
+                gps_time&amp;lt;Duration&amp;gt;&amp;amp; tp,
+                std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;* abbrev = nullptr,
+                minutes* offset = nullptr);            // (4) C++20
+}
+
+namespace std {
+  template &amp;lt;class Duration, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::gps_time&amp;lt;Duration&amp;gt;, charT&amp;gt;; // (5) C++20
+}
+```
+* time_point[link time_point.md]
+* gps_clock[link gps_clock.md]
+
+## 概要
+GPS時間の一点を指す[`time_point`](time_point.md)に対する別名。
+
+- (1) : [`gps_clock`](gps_clock.md)の[`time_point`](time_point.md)に対する別名。時間間隔を表す型はパラメータ化されている
+- (2) : 秒単位でGPS時間の一点を指す[`time_point`](time_point.md)に対する別名
+- (3) : 時間点に含まれる日付と時間を出力ストリームに出力する
+- (4) : フォーマット指定して入力ストリームから日付・時間を時間点オブジェクトに入力する
+- (5) : `gps_time`型に対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化
+
+
+## 効果
+便宜上のリテラルキャスト`STATICALLY-WIDEN`を導入する。`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;...&amp;#34;)`は、`charT`が`char`である場合は`&amp;#34;...&amp;#34;`、`charT`が`wchar_t`である場合は`L&amp;#34;...&amp;#34;`を意味する。
+
+- (3) : 以下と等価：
+    ```cpp
+    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%F %T}&amp;#34;), tp);
+    ```
+    * format[link format.md]
+
+- (4) :
+    - パラメータ`fmt`で指定されたフォーマットフラグを使用して、入力を解析し、`tp`に代入する
+    - 有効な日付・時間の解析に失敗した場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出され、パラメータ`tp`は変更されない
+    - タイムゾーンフォーマット`&amp;#34;%Z&amp;#34;`が指定され、解析が成功した場合、パラメータ`abbrev`が非ヌルである場合に`*abbrev`にタイムゾーン名が代入される
+    - オフセット時間を意味するフォーマット`&amp;#34;%z&amp;#34;`が指定され、解析が成功した場合、パラメータ`offset`が非ヌルである場合に`*offset`にその値が代入される
+    - さらに、`tp`に日付・時間が代入される前に、解析されたオフセットがタイムスタンプから引かれる
+    - `is`を返す
+
+
+## 備考
+- (1) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`gps_clock::time_point`がもつ時間間隔の単位は未規定 (実装定義) であるため、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
+- (5) :
+    - `%Z` (タイムゾーンの略称) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;GPS&amp;#34;)`で置き換えられる
+    - `%z`もしくはその改良コマンドが指定された場合、`0`[`min`](duration/op_min.md)が使用される
+    - この日付と時間のフォーマットは、`gps_time&amp;lt;Duration&amp;gt;`型変数`tp`を以下のように変換した[`sys_time`](sys_time.md)をフォーマットした場合と等価：
+        ```cpp
+        sys_time&amp;lt;Duration&amp;gt;{tp.time_since_epoch()} + (sys_days{1980y/January/Sunday[1]} - sys_days{1970y/January/1})
+        ```
+        * sys_time[link sys_time.md]
+        * tp.time_since_epoch()[link time_point/time_since_epoch.md]
+        * sys_days[link sys_time.md]
+        * 1980y[link year/op_y.md]
+        * 1970y[link year/op_y.md]
+        * January[link month_constants.md]
+        * Sunday[link weekday_constants.md]
+
+
+## 例
+### 基本的な使い方
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // 未規定の時間間隔単位をもつ時間点
+  chrono::gps_clock::time_point tp = chrono::gps_clock::now();
+
+  // 秒単位の時間点 (日付と時間が出力される)
+  chrono::gps_seconds sec_p = chrono::floor&amp;lt;chrono::seconds&amp;gt;(tp);
+  std::cout &amp;lt;&amp;lt; sec_p &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::gps_seconds[color ff0000]
+* chrono::gps_clock[link gps_clock.md]
+* now()[link gps_clock/now.md]
+* chrono::floor[link time_point/floor.md]
+
+#### 出力例
+```
+2019-10-24 11:15:27 GPS
+```
+
+### 入力の例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // タイムゾーンとオフセットを含まない入力
+  {
+    std::stringstream ss;
+    ss &amp;lt;&amp;lt; &amp;#34;2019-10-24 20:15:27&amp;#34;;
+
+    chrono::gps_seconds tp;
+    chrono::from_stream(ss, &amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;, tp);
+
+    if (ss) {
+      std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+    }
+    else {
+      std::cout &amp;lt;&amp;lt; &amp;#34;解析失敗&amp;#34; &amp;lt;&amp;lt; std::endl;
+    }
+  }
+
+  // タイムゾーンを含む入力
+  {
+    std::stringstream ss;
+    ss &amp;lt;&amp;lt; &amp;#34;2019-10-24 20:15:10 GPS&amp;#34;;
+
+    chrono::gps_seconds tp;
+    std::string abbrev;
+    chrono::from_stream(ss, &amp;#34;%Y-%m-%d %H:%M:%S %Z%z&amp;#34;, tp, &amp;amp;abbrev);
+
+    std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; abbrev &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* chrono::from_stream[color ff0000]
+* offset.count()[link duration/count.md]
+
+#### 出力例
+```
+2019-10-24 11:15:27 GPS
+2019-10-24 11:15:27 GPS
+GPS
+```
+
+### 文字列フォーマットの例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::gps_clock::time_point now = chrono::gps_clock::now();
+  chrono::gps_seconds now_sec = chrono::floor&amp;lt;chrono::seconds&amp;gt;(tp);
+
+  // デフォルトフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 「年月日 時分秒」のフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの略称付き
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {0:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : %Y年%m月%d日&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5 : %F&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 時間だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6 : %H時%M分%S秒&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7 : %T&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::gps_clock[link gps_clock.md]
+* now()[link gps_clock/now.md]
+* chrono::floor[link time_point/floor.md]
+* std::format[link format.md]
+
+#### 出力例
+```
+1 : 2019-12-20 10:05:05 GPS
+2 : 2019年12月20日 10時05分05秒
+3 : 2019/12/20 10:05:05 GPS
+4 : 2019年12月20日
+5 : 2019-12-20
+6 : 10時05分05秒
+7 : 10:05:05
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (出力フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_clock -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/is_clock.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/is_clock.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/is_clock.md b/reference/chrono/is_clock.md
new file mode 100644
index 000000000..97aeae1fc
--- /dev/null
+++ b/reference/chrono/is_clock.md
@@ -0,0 +1,69 @@
+# is_clock
+* chrono[meta header]
+* std::chrono[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class T&amp;gt;
+  struct is_clock;                                       // (1) C++20
+
+  template &amp;lt;class T&amp;gt;
+  inline constexpr bool is_clock_v = is_clock&amp;lt;T&amp;gt;::value; // (2) C++20
+}
+```
+
+## 概要
+`is_clock`は、クロック型かを判定する型特性である。
+
+型`T`がClock要件を満たす場合は[`true_type`](/reference/type_traits/true_type.md)から派生し、そうでなければ[`false_type`](/reference/type_traits/false_type.md)から派生する。
+
+Clock要件を満たすには、以下が必要である：
+
+- 修飾された型`T`が、`T::period`、`T::duration`、`T::time_point`メンバ型を持っていること
+- 式`T::is_steady`が評価されないオペランドで使用された場合に妥当であること
+- 式`T::now()`が評価されないオペランドで使用された場合に妥当であること
+
+`is_clock`の特殊化を追加した場合のプログラムの動作は未定義である。
+
+
+## 例
+```cpp example
+#include &amp;lt;chrono&amp;gt;
+
+using namespace std::chrono;
+
+int main()
+{
+  static_assert(is_clock_v&amp;lt;system_clock&amp;gt;);
+  static_assert(is_clock_v&amp;lt;steady_clock&amp;gt;);
+  static_assert(is_clock_v&amp;lt;high_resolution_clock&amp;gt;);
+  static_assert(is_clock_v&amp;lt;utc_clock&amp;gt;);
+  static_assert(is_clock_v&amp;lt;tai_clock&amp;gt;);
+  static_assert(is_clock_v&amp;lt;gps_clock&amp;gt;);
+  static_assert(is_clock_v&amp;lt;file_clock&amp;gt;);
+}
+```
+* is_clock_v[color ff0000]
+* system_clock[link system_clock.md]
+* steady_clock[link steady_clock.md]
+* high_resolution_clock[link high_resolution_clock.md]
+* utc_clock[link utc_clock.md]
+* tai_clock[link tai_clock.md]
+* gps_clock[link gps_clock.md]
+* file_clock[link file_clock.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>local-time-format-t -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/local-time-format-t.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/local-time-format-t.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/local-time-format-t.md b/reference/chrono/local-time-format-t.md
new file mode 100644
index 000000000..b78aa6769
--- /dev/null
+++ b/reference/chrono/local-time-format-t.md
@@ -0,0 +1,89 @@
+# local-time-format-t
+* chrono[meta header]
+* std::chrono[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class Duration&amp;gt;
+  struct local-time-format-t {
+    local_time&amp;lt;Duration&amp;gt; time;
+    const string* abbrev;
+    const seconds* offset_sec;
+  };
+}
+```
+* local_time[link local_time.md]
+* string[link /reference/string/basic_string.md]
+
+## 概要
+`local-time-format-t`は、ローカル時間を文字列フォーマットするために必要な情報をまとめた説明用の型である。
+
+ローカル時間をタイムゾーン付きで文字列フォーマットするには、時間点オブジェクトだけでなくタイムゾーンの情報が追加で必要になる。そのため、[`zoned_time`](zoned_time.md)クラスや、タイムゾーン情報をつけた[`local_time`](local_time.md)オブジェクトを文字列フォーマット対応するために、標準ライブラリの実装内部でこのようなクラスが用意される。
+
+このクラスとメンバ変数は説明用のものであるため、実際にそのような具体的なクラス、具体的なメンバ変数が存在することを期待したプログラムを書くことはできない。
+
+
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](local-time-format-t/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  auto now = chrono::system_clock::now();
+  chrono::sys_seconds now_sec = chrono::floor&amp;lt;chrono::seconds&amp;gt;(now); // 秒単位
+
+  chrono::zoned_time zt{&amp;#34;Asia/Tokyo&amp;#34;, now_sec};
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, zt) &amp;lt;&amp;lt; std::endl;
+
+  auto lt = zt.get_local_time();
+  chrono::sys_info si = zt.get_info();
+  {
+    auto ltf = chrono::local_time_format(lt, &amp;amp;si.abbrev);
+    std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, ltf) &amp;lt;&amp;lt; std::endl;
+  }
+  {
+    auto ltf = chrono::local_time_format(lt, &amp;#34;JST&amp;#34;, &amp;amp;si.abbrev, &amp;amp;si.offset);
+    std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y/%m/%d %H:%M:%S %Z%z}&amp;#34;, ltf) &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* chrono::system_clock[link system_clock.md]
+* now()[link system_clock/now.md]
+* chrono::floor[link /reference/chrono/time_point/floor.md]
+* chrono::sys_seconds[link /reference/chrono/sys_time.md]
+* std::format[link format.md]
+* chrono::zoned_time[link zoned_time.md]
+* zt.get_local_time()[link zoned_time/get_local_time.md]
+* zt.get_info()[link zoned_time/get_info.md]
+* chrono::sys_info[link sys_info.md]
+* chrono::local_time_format[link local_time_format.md]
+
+### 出力例
+```
+2019/12/20 19:05:05 JST
+2019/12/20 19:05:05 JST
+2019/12/20 19:05:05 JST+0900
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/local-time-format-t/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/local-time-format-t/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/local-time-format-t/formatter.md b/reference/chrono/local-time-format-t/formatter.md
new file mode 100644
index 000000000..406a437f5
--- /dev/null
+++ b/reference/chrono/local-time-format-t/formatter.md
@@ -0,0 +1,78 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Duration, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::local-time-format-t&amp;lt;Duration&amp;gt;, charT&amp;gt;;
+}
+```
+
+## 概要
+`local-time-format-t`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+
+`formatter::format()`関数に渡される`local-time-format-t&amp;lt;Duration&amp;gt;`型の変数`f`があるとして、
+
+- `%Z` (タイムゾーンの略称) が指定された場合、`f.abbrev`がヌルポインタでなければ`*f.abbrev`で置き換えられる。`%Z`が指定されて`f.abbrev`がヌルポインタだった場合、[`std::format_error`](/reference/format/format_error.md)例外が送出される
+- `%z`もしくはその改良コマンドが指定された場合、`f.offset_sec`がヌルポインタでなければ`*f.offset_sec`がフォーマットされる。`%z`もしくはその改良コマンドが指定されて`f.offset_sec`がヌルポインタだった場合、[`std::format_error`](/reference/format/format_error.md)例外が送出される
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  auto now = chrono::system_clock::now();
+  chrono::sys_seconds now_sec = chrono::floor&amp;lt;chrono::seconds&amp;gt;(now); // 秒単位
+
+  chrono::zoned_time zt{&amp;#34;Asia/Tokyo&amp;#34;, now_sec};
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, zt) &amp;lt;&amp;lt; std::endl;
+
+  auto lt = zt.get_local_time();
+  chrono::sys_info si = zt.get_info();
+  {
+    auto ltf = chrono::local_time_format(lt, &amp;amp;si.abbrev);
+    std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, ltf) &amp;lt;&amp;lt; std::endl;
+  }
+  {
+    auto ltf = chrono::local_time_format(lt, &amp;#34;JST&amp;#34;, &amp;amp;si.abbrev, &amp;amp;si.offset);
+    std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y/%m/%d %H:%M:%S %Z%z}&amp;#34;, ltf) &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* chrono::system_clock[link /reference/chrono/system_clock.md]
+* now()[link /reference/chrono/system_clock/now.md]
+* chrono::floor[link /reference/chrono/time_point/floor.md]
+* chrono::sys_seconds[link /reference/chrono/sys_time.md]
+* std::format[link /reference/chrono/format.md]
+* chrono::zoned_time[link /reference/chrono/zoned_time.md]
+* zt.get_local_time()[link /reference/chrono/zoned_time/get_local_time.md]
+* zt.get_info()[link /reference/chrono/zoned_time/get_info.md]
+* chrono::sys_info[link /reference/chrono/sys_info.md]
+* chrono::local_time_format[link /reference/chrono/local_time_format.md]
+
+### 出力例
+```
+2019/12/20 19:05:05 JST
+2019/12/20 19:05:05 JST
+2019/12/20 19:05:05 JST+0900
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>local_info -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/local_info.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/local_info.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/local_info.md b/reference/chrono/local_info.md
index eaa231bfe..cb15880db 100644
--- a/reference/chrono/local_info.md
+++ b/reference/chrono/local_info.md
@@ -13,11 +13,7 @@ namespace std::chrono {
     int result;
     sys_info first;
     sys_info second;
-  };                    // (1) C++20
-
-  template &amp;lt;class charT, class traits&amp;gt;
-  std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
-    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os, const local_info&amp;amp; li); // (2)
+  };
 }
 ```
 * sys_info[link sys_info.md]
@@ -27,9 +23,22 @@ namespace std::chrono {
 
 このクラスの情報は、[`local_time`](local_time.md)から[`sys_time`](sys_time.md)に変換する際に使用される。
 
-- (1) : ローカル時間に関するタイムゾーン情報のクラス
-- (2) : 出力ストリームへの出力
+- [`local_time`](local_time.md)から[`sys_time`](sys_time.md)への変換が一意に決まる場合、`result == unique`となり、`first`が正しい[`sys_info`](sys_info.md)で埋められ、`second`はゼロ初期化される
+    - 存在しないローカル時間が生じる場合、`result == nonexistent`となり、`first`は直前のローカル時間の終端値の値で埋められ、`second`は直後のローカル時間の開始値で埋められる
+    - あいまいなローカル時間が生じる場合、`result == ambiguous`となり、`first`は直後のローカル時間の終端値で埋められ、`second`は直前のローカル時間の開始値で埋められる
+
+## 備考
+- `nonexistent`および`ambiguous`は、サマータイムを採用しているタイムゾーンで生じる可能性がある
+    - 存在しないローカル時間の例として、タイムゾーン`&amp;#34;America/New_York&amp;#34;`のローカル時刻 2016-03-13 02:30:00 は以下の隙間に位置するため存在しえない：
+        - 2016-03-13 02:00:00 EST
+        - 2016-03-13 03:00:00 EDT
+        - 2016-03-13 07:00:00 UTC
+    - あいまいなローカル時間の例として、タイムゾーン`&amp;#34;America/New_York&amp;#34;`のローカル時刻 2016-11-06 01:30:00 は、以下のいずれかとなり、一意に決まらない：
+        - 2016-11-06 05:30:00 UTC
+        - 2016-11-06 06:30:00 UTC
+
 
+## メンバ変数
 
 | 変数 | 説明 |
 |------|------|
@@ -40,28 +49,18 @@ namespace std::chrono {
 | `second`      | 変換に使用される第2候補のタイムゾーン情報 |
 
 
-## 効果
-- (1) :
-    - [`local_time`](local_time.md)から[`sys_time`](sys_time.md)への変換が一意に決まる場合、`result == unique`となり、`first`が正しい[`sys_info`](sys_info.md)で埋められ、`second`はゼロ初期化される
-    - 存在しないローカル時間が生じる場合、`result == nonexistent`となり、`first`は直前のローカル時間の終端値の値で埋められ、`second`は直後のローカル時間の開始値で埋められる
-    - あいまいなローカル時間が生じる場合、`result == ambiguous`となり、`first`は直後のローカル時間の終端値で埋められ、`second`は直前のローカル時間の開始値で埋められる
-- (2) :
-    - `li`を未規定のフォーマットで`os`に出力する
+## 非メンバ関数
 
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator&amp;lt;&amp;lt;`](local_info/op_ostream.md) | 出力ストリームへの出力 | C++20 |
 
-## 戻り値
-- (2) : `return os;`
 
+## 文字列フォーマット
 
-## 備考
-- `nonexistent`および`ambiguous`は、サマータイムを採用しているタイムゾーンで生じる可能性がある
-    - 存在しないローカル時間の例として、タイムゾーン`&amp;#34;America/New_York&amp;#34;`のローカル時刻 2016-03-13 02:30:00 は以下の隙間に位置するため存在しえない：
-        - 2016-03-13 02:00:00 EST
-        - 2016-03-13 03:00:00 EDT
-        - 2016-03-13 07:00:00 UTC
-    - あいまいなローカル時間の例として、タイムゾーン`&amp;#34;America/New_York&amp;#34;`のローカル時刻 2016-11-06 01:30:00 は、以下のいずれかとなり、一意に決まらない：
-        - 2016-11-06 05:30:00 UTC
-        - 2016-11-06 06:30:00 UTC
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](local_info/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
 
 
 ## 例
@@ -78,16 +77,13 @@ int main()
 
   // 日本のタイムゾーン
   const chrono::time_zone* tz = chrono::locate_zone(&amp;#34;Asia/Tokyo&amp;#34;);
-  chrono::local_info li = tz-&amp;gt;get_info(now);
+  chrono::local_info li = tz-&amp;gt;get_info(local_now);
 
   std::cout &amp;lt;&amp;lt; li.result &amp;lt;&amp;lt; std::endl;
 
   chrono::sys_info si = li.first;
   std::cout &amp;lt;&amp;lt; chrono::floor&amp;lt;chrono::hours&amp;gt;(si.offset).count() &amp;lt;&amp;lt; &amp;#34; hours&amp;#34; &amp;lt;&amp;lt; std::endl; // UTCタイムゾーンからの差分時間
   std::cout &amp;lt;&amp;lt; si.abbrev &amp;lt;&amp;lt; std::endl; // タイムゾーンの略称
-
-  std::cout &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; li &amp;lt;&amp;lt; std::endl; // タイムゾーン情報全体を出力
 }
 ```
 * chrono::local_info[color ff0000]
@@ -102,12 +98,13 @@ int main()
 * chrono::floor[link time_point/floor.md]
 * count()[link /reference/chrono/duration/count.md]
 
-### 出力例
+### 出力
 ```
+0
+9 hours
+JST
 ```
 
-(未検証)
-
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/local_info/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/local_info/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/local_info/formatter.md b/reference/chrono/local_info/formatter.md
new file mode 100644
index 000000000..36302317f
--- /dev/null
+++ b/reference/chrono/local_info/formatter.md
@@ -0,0 +1,73 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::local_info, charT&amp;gt;;
+}
+```
+
+## 概要
+`local_info`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+| フォーマットフラグ | 説明 |
+|--------------------|------|
+| `%z`  | ISO 8601フォーマットでのUTCからのオフセット (日本だと`&amp;#34;+0900&amp;#34;`) |
+| `%Ez` | オフセットの時と分の間にコロン (:) が挿入される (日本だと`&amp;#34;+09:00&amp;#34;`) |
+| `%Oz` | `%Ez`と等価 |
+| `%Z`  | タイムゾーンの略称 (日本だと`&amp;#34;JST&amp;#34;`) |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  auto now = chrono::system_clock::now();
+  chrono::local_time local_now{now.time_since_epoch()};
+
+  // 日本のタイムゾーン
+  const chrono::time_zone* tz = chrono::locate_zone(&amp;#34;Asia/Tokyo&amp;#34;);
+  chrono::local_info li = tz-&amp;gt;get_info(local_now);
+
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ (フォーマット未規定)
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, li) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%z}&amp;#34;, li) &amp;lt;&amp;lt; std::endl; // オフセット時間
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Z}&amp;#34;, li) &amp;lt;&amp;lt; std::endl; // タイムゾーンの略称
+}
+```
+* chrono::system_clock[link /reference/chrono/system_clock.md]
+* now()[link /reference/chrono/system_clock/now.md]
+* chrono::time_zone[link /reference/chrono/time_zone.md]
+* chrono::locate_zone[link /reference/chrono/locate_zone.md]
+* chrono::local_time[link /reference/chrono/local_time.md]
+* time_since_epoch()[link /reference/chrono/time_point/time_since_epoch.md]
+* std::format[link /reference/chrono/format.md]
+
+### 出力例
+```
+(未検証の行)
++0900
+JST
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/local_info/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/local_info/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/local_info/op_ostream.md b/reference/chrono/local_info/op_ostream.md
new file mode 100644
index 000000000..3f04422df
--- /dev/null
+++ b/reference/chrono/local_info/op_ostream.md
@@ -0,0 +1,69 @@
+# operator&amp;lt;&amp;lt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits&amp;gt;
+  std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os, const local_info&amp;amp; li); // (2) C++20
+}
+```
+
+## 概要
+`local_info`オブジェクトを出力ストリームに出力する。
+
+
+## 効果
+`li`を未規定のフォーマットで`os`に出力する
+
+
+## 戻り値
+```cpp
+return os;
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  auto now = chrono::system_clock::now();
+  chrono::local_time local_now{now.time_since_epoch()};
+
+  // 日本のタイムゾーン
+  const chrono::time_zone* tz = chrono::locate_zone(&amp;#34;Asia/Tokyo&amp;#34;);
+  chrono::local_info li = tz-&amp;gt;get_info(local_now);
+
+  std::cout &amp;lt;&amp;lt; li &amp;lt;&amp;lt; std::endl; // タイムゾーン情報全体を出力
+}
+```
+* chrono::time_zone[link /reference/chrono/time_zone.md]
+* tz-&amp;gt;get_info[link /reference/chrono/time_zone/get_info.md]
+* chrono::locate_zone[link /reference/chrono/locate_zone.md]
+* chrono::system_clock[link /reference/chrono/system_clock.md]
+* now()[link /reference/chrono/system_clock/now.md]
+* chrono::local_time[link /reference/chrono/local_time.md]
+* time_since_epoch()[link /reference/chrono/time_point/time_since_epoch.md]
+
+### 出力例
+```
+```
+
+(未検証)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>local_time -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/local_time.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/local_time.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/local_time.md b/reference/chrono/local_time.md
index 88a1f8867..5f4f1eeff 100644
--- a/reference/chrono/local_time.md
+++ b/reference/chrono/local_time.md
@@ -27,6 +27,11 @@ namespace std::chrono {
                 std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;* abbrev = nullptr,
                 minutes* offset = nullptr);            // (6) C++20
 }
+
+namespace std {
+  template &amp;lt;class Duration, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::local_time&amp;lt;Duration&amp;gt;, charT&amp;gt;; // (7) C++20
+}
 ```
 * time_point[link time_point.md]
 
@@ -43,6 +48,7 @@ namespace std::chrono {
 - (4) : 日単位でローカル時間の一点を指す[`time_point`](time_point.md)に対する別名
 - (5) : 時間点に含まれる日付と時間を出力ストリームに出力する
 - (6) : フォーマット指定して入力ストリームから日付・時間を時間点オブジェクトに入力する
+- (7) : `local_time`型に対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化
 
 
 ## 効果
@@ -66,6 +72,7 @@ namespace std::chrono {
 - (2) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`local_time`がもつ時間間隔の単位は未規定 (実装定義) であり、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
 - [`year`](year.md)クラスの制限により、年の値としては`[-32767, 32767]`の範囲までしか入出力できないことに注意 (その範囲外は未規定の値となる)
 - (5) : 出力ストリームの演算子は、ローカルのタイムゾーンへの変換を行わない。そのため、システム時間から変換したローカル時間をそのまま出力すると、デフォルトではUTCタイムゾーンの日時が出力される。日本のタイムゾーンで出力したい場合は、[`zoned_time`](zoned_time.md)クラスを介して出力するか、9時間を加算して出力すること
+- (7) : `%Z` (タイムゾーンの略称), `%z` (UTCタイムゾーンからのオフセット時間) もしくはその改良コマンドが指定された場合、[`std::format_error`](/reference/format/format_error.md)例外が送出される
 
 
 ## 例
@@ -163,6 +170,65 @@ int main()
 2019-10-24 20:15:10
 ```
 
+### 文字列フォーマットの例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // システム時間はUTCタイムゾーンをもつ
+  auto now = chrono::system_clock::now();
+  chrono::sys_seconds now_sec = chrono::floor&amp;lt;chrono::seconds&amp;gt;(now); // 秒単位
+
+  chrono::zoned_seconds zt{&amp;#34;Asia/Tokyo&amp;#34;, now_sec};
+  chrono::local_seconds lt = zt.get_local_time();
+
+  // デフォルトフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, lt) &amp;lt;&amp;lt; std::endl;
+
+  // 「年月日 時分秒」のフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, lt) &amp;lt;&amp;lt; std::endl;
+
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {0:%Y/%m/%d %H:%M:%S}&amp;#34;, lt) &amp;lt;&amp;lt; std::endl;
+
+  // 日付だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : %Y年%m月%d日&amp;#34;, lt) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5 : %F&amp;#34;, lt) &amp;lt;&amp;lt; std::endl;
+
+  // 時間だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6 : %H時%M分%S秒&amp;#34;, lt) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7 : %T&amp;#34;, lt) &amp;lt;&amp;lt; std::endl;
+
+  // 12時間時計で出力
+  // (%pでロケール固有の「午前」「午後」を出力するには、日本のロケールを指定する必要がある)
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;),
+                           &amp;#34;8 : %Y年%m月%d日 %p %I時%M分%S秒&amp;#34;,
+                           lt) &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::system_clock[link system_clock.md]
+* now()[link system_clock/now.md]
+* chrono::zoned_seconds[link zoned_time.md]
+* std::format[link format.md]
+* std::locale[link /reference/locale/locale.md]
+
+#### 出力例
+```
+1 : 2019-12-20 19:05:05 JST
+2 : 2019年12月20日 19時05分05秒
+3 : 2019/12/20 19:05:05
+4 : 2019年12月20日
+5 : 2019-12-20
+6 : 19時05分05秒
+7 : 19:05:05
+8 : 2019年12月20日 午後 07時05分05秒
+```
+
 ## バージョン
 ### 言語
 - C++20
@@ -174,4 +240,5 @@ int main()
 
 
 ## 関連項目
-- [`local_time_format()`](local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`std::format()`](/reference/chrono/format.md) (出力フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>local_time_format -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/local_time_format.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/local_time_format.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/local_time_format.md b/reference/chrono/local_time_format.md
new file mode 100644
index 000000000..85077a91b
--- /dev/null
+++ b/reference/chrono/local_time_format.md
@@ -0,0 +1,82 @@
+# local_time_format
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class Duration&amp;gt;
+  local-time-format-t&amp;lt;Duration&amp;gt;
+    local_time_format(local_time&amp;lt;Duration&amp;gt; time, const string* abbrev = nullptr,
+                      const seconds* offset_sec = nullptr);
+}
+```
+* local-time-format-t[link local-time-format-t.md]
+* local_time[link local_time.md]
+* string[link /reference/string/basic_string.md]
+
+## 概要
+ローカル時間の文字列フォーマット用オブジェクトを生成する。
+
+この関数は、ローカル時間をタイムゾーン付きでフォーマット出力したい場合に使用する。
+
+
+## 戻り値
+```cpp
+return {time, abbrev, offset_sec};
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  auto now = chrono::system_clock::now();
+
+  chrono::zoned_time zt{&amp;#34;Asia/Tokyo&amp;#34;, now};
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, zt) &amp;lt;&amp;lt; std::endl;
+
+  auto lt = zt.get_local_time();
+  chrono::sys_info si = zt.get_info();
+  {
+    auto ltf = chrono::local_time_format(lt, &amp;amp;si.abbrev);
+    std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, ltf) &amp;lt;&amp;lt; std::endl;
+  }
+  {
+    auto ltf = chrono::local_time_format(lt, &amp;#34;JST&amp;#34;, &amp;amp;si.abbrev, &amp;amp;si.offset);
+    std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y/%m/%d %H:%M:%S %Z%z}&amp;#34;, ltf) &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* chrono::local_time_format[color ff0000]
+* chrono::system_clock[link system_clock.md]
+* now()[link system_clock/now.md]
+* std::format[link format.md]
+* chrono::zoned_time[link zoned_time.md]
+* zt.get_local_time()[link zoned_time/get_local_time.md]
+* zt.get_info()[link zoned_time/get_info.md]
+* chrono::sys_info[link sys_info.md]
+* chrono::local_time_format[link local_time_format.md]
+
+### 出力例
+```
+2019/12/20 19:05:05 JST
+2019/12/20 19:05:05 JST
+2019/12/20 19:05:05 JST+0900
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>month -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month.md b/reference/chrono/month.md
index 970a8e533..6f779fcf9 100644
--- a/reference/chrono/month.md
+++ b/reference/chrono/month.md
@@ -94,6 +94,13 @@ namespace std::chrono {
 | [`from_stream`](month/from_stream.md) | フォーマット指定して入力ストリームから入力する | C++20 |
 
 
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](month/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month/formatter.md b/reference/chrono/month/formatter.md
new file mode 100644
index 000000000..93e39f537
--- /dev/null
+++ b/reference/chrono/month/formatter.md
@@ -0,0 +1,74 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::month, charT&amp;gt;;
+}
+```
+
+## 概要
+`month`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+| フォーマットフラグ | 説明 |
+|--------------------|------|
+| `%b` | ロケール依存の月の略称 |
+| `%B` | ロケール依存の月の完全名 |
+| `%h` | `%b`と等価 |
+| `%m` | 10進数での月。2桁0埋め |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%b}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl; // 略称
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%B}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl; // 完全名
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%m}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl; // 完全名
+
+  // ロケール依存の出力
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%b}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%B}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::format[link /reference/chrono/format.md]
+* chrono::April[link /reference/chrono/month_constants.md]
+* std::locale[link /reference/locale/locale.md]
+
+### 出力
+```
+Apr
+Apr
+April
+04
+4月
+4月
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_stream -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month/from_stream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month/from_stream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month/from_stream.md b/reference/chrono/month/from_stream.md
index 654e01e4e..285d41cda 100644
--- a/reference/chrono/month/from_stream.md
+++ b/reference/chrono/month/from_stream.md
@@ -31,10 +31,6 @@ namespace std::chrono {
 `is`を返す
 
 
-## 備考
-- この解析においては、月のフォーマットは、ロケール規定の完全もしくは短縮された月名を意味する`%b`が使用される。そのため、デフォルトのCロケールにおいては、1月を入力するために`&amp;#34;January`&amp;#34; (完全名) と`&amp;#34;Jan&amp;#34;` (短縮名)の2通りが使用でき、ほかの月も同様である
-
-
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
@@ -81,4 +77,4 @@ int main()
 
 
 ## 関連項目
-- [`local_time_format()`](/reference/chrono/local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator/ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month/op_append.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month/op_append.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month/op_append.md b/reference/chrono/month/op_append.md
index c4aa5a188..050c987c4 100644
--- a/reference/chrono/month/op_append.md
+++ b/reference/chrono/month/op_append.md
@@ -30,11 +30,11 @@ namespace std::chrono {
 }
 ```
 * day[link /reference/chrono/day.md]
-* month_day[link /reference/chrono/month_day.md.nolink]
+* month_day[link /reference/chrono/month_day.md]
 * last_spec[link /reference/chrono/last_spec.md]
 * month_day_last[link /reference/chrono/month_day_last.md.nolink]
-* weekday_indexed[link /reference/chrono/weekday_indexed.md.nolink]
-* weekday_last[link /reference/chrono/weekday_last.md.nolink]
+* weekday_indexed[link /reference/chrono/weekday_indexed.md
+* weekday_last[link /reference/chrono/weekday_last.md]
 * month_weekday_last[link /reference/chrono/month_weekday_last.md.nolink]
 
 ## 概要
@@ -110,9 +110,9 @@ int main()
 * chrono::March[link /reference/chrono/month_constants.md]
 * chrono::February[link /reference/chrono/month_constants.md]
 * 1d[link /reference/chrono/day/op_d.md]
-* chrono::month_day[link /reference/chrono/month_day.md.nolink]
-* md1.month()[link /reference/chrono/month_day/month.md.nolink]
-* md1.day()[link /reference/chrono/month_day/day.md.nolink]
+* chrono::month_day[link /reference/chrono/month_day.md]
+* md1.month()[link /reference/chrono/month_day/month.md]
+* md1.day()[link /reference/chrono/month_day/day.md]
 * chrono::last[link /reference/chrono/last_spec.md]
 * chrono::month_day_last[link /reference/chrono/month_day_last.md.nolink]
 * mdl1.month()[link /reference/chrono/month_day_last/month.md.nolink]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month/op_ostream.md b/reference/chrono/month/op_ostream.md
index b601453e2..b1c57b645 100644
--- a/reference/chrono/month/op_ostream.md
+++ b/reference/chrono/month/op_ostream.md
@@ -118,4 +118,4 @@ Dec
 
 
 ## 関連項目
-- [`local_time_format()`](/reference/chrono/local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>month_day -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month_day.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day.md b/reference/chrono/month_day.md
new file mode 100644
index 000000000..0ae7efec5
--- /dev/null
+++ b/reference/chrono/month_day.md
@@ -0,0 +1,129 @@
+# month_day
+* chrono[meta header]
+* std::chrono[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  class month_day;
+}
+```
+
+## 概要
+`month_day`は、未規定の年の、月と日を表すカレンダー表現のためクラスである。
+
+このクラスは等値比較および大小比較ができ、[EqualityComparable](/reference/concepts/equality_comparable.md)およびLessThanComparableの要件を満たす。
+
+このクラスは、[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)で、かつ[スタンダードレイアウト型](/reference/type_traits/is_standard_layout.md)である。
+
+
+## メンバ関数
+### 構築／コピー／破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](month_day/op_constructor.md) | コンストラクタ | C++20 |
+| `month_day&amp;amp; operator=(const month_day&amp;amp;) = default;`&amp;lt;br/&amp;gt; `month_day&amp;amp; operator=(month_day&amp;amp;&amp;amp;) = default;` | 代入演算子 | C++20 |
+
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`month`](month_day/month.md) | 月要素を取得する | C++20 |
+| [`day`](month_day/day.md)     | 日要素を取得する | C++20 |
+
+
+### 検証
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`ok`](month_day/ok.md) | 値が範囲に収まっているか判定する | C++20 |
+
+
+## 非メンバ関数
+### カレンダー構文演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator/`](month_day/op_append.md) | カレンダー要素同士をつなぎ合わせる | C++20 |
+
+
+### 比較演算
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](month_day/op_equal.md) | 等値比較を行う | C++20 |
+| `bool operator!=(const month_day&amp;amp;, const month_day&amp;amp;) noexcept;` | 非等値比較を行う (`==`により使用可能) | C++20 |
+| [`operator&amp;lt;=&amp;gt;`](month_day/op_compare_3way.md) | 三方比較を行う | C++20 |
+| `bool operator&amp;lt;(const month_day&amp;amp;, const month_day&amp;amp;) noexcept;` | 左辺が右辺より小さいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;lt;=(const month_day&amp;amp;, const month_day&amp;amp;) noexcept;` | 左辺が右辺以下を判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;(const month_day&amp;amp;, const month_day&amp;amp;) noexcept;` | 左辺が右辺より大きいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;=(const month_day&amp;amp;, const month_day&amp;amp;) noexcept;` | 左辺が右辺以上を判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+
+
+### 入出力
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator&amp;lt;&amp;lt;`](month_day/op_ostream.md)   | 出力ストリームに出力する | C++20 |
+| [`from_stream`](month_day/from_stream.md) | フォーマット指定して入力ストリームから入力する | C++20 |
+
+
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](month_day/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  // すべて3月1日を表す
+  chrono::month_day date1 = 1d/3;
+  chrono::month_day date2 = chrono::March/1;
+  chrono::month_day date3 = 3/1d;
+
+  // 各カレンダー要素のコンストラクタはexplicitなので、
+  // 指定順は月、日で決まっているが、int値は指定できない
+  chrono::month_day date4{chrono::March, 1d};
+  chrono::month_day date5{chrono::month{3}, chrono::day{1}};
+
+  std::cout &amp;lt;&amp;lt; date1 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; date2 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; date3 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; date4 &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; date5 &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::March[link month_constants.md]
+* 1d[link day/op_d.md]
+* chrono::month[link month.md]
+* chrono::day[link day.md]
+
+### 出力
+```
+Mar/01
+Mar/01
+Mar/01
+Mar/01
+Mar/01
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0 (入出力ストリームなし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>day -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/day.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month_day/day.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/day.md b/reference/chrono/month_day/day.md
new file mode 100644
index 000000000..1aacd805b
--- /dev/null
+++ b/reference/chrono/month_day/day.md
@@ -0,0 +1,53 @@
+# day
+* chrono[meta header]
+* std::chrono[meta namespace]
+* month_day[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr chrono::day day() const noexcept; // (1) C++20
+```
+* chrono::day[link /reference/chrono/day.md]
+
+## 概要
+日要素を取得する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している日オブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  chrono::month_day md = chrono::March/1;
+
+  chrono::day d = md.day();
+  assert(d == 1d);
+}
+```
+* date.day()[color ff0000]
+* chrono::day[link /reference/chrono/day.md]
+* chrono::March[link /reference/chrono/month_constants.md]
+* 1d[link /reference/chrono/day/op_d.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month_day/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/formatter.md b/reference/chrono/month_day/formatter.md
new file mode 100644
index 000000000..9a48808f5
--- /dev/null
+++ b/reference/chrono/month_day/formatter.md
@@ -0,0 +1,66 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::month_day, charT&amp;gt;;
+}
+```
+
+## 概要
+`month_day`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、[`day`](/reference/chrono/day/formatter.md)と[`month`](/reference/chrono/month/formatter.md)で利用可能なフォーマットフラグを使用できる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main() {
+  chrono::month_day date = chrono::March/1;
+
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%B/%d}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {:%m/%d}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : {:%m月%d日}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+
+  // ロケール依存の出力
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;5 : {:%b}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::format[link /reference/chrono/format.md]
+* std::locale[link /reference/locale/locale.md]
+* chrono::March[link /reference/chrono/month_constants.md]
+
+### 出力
+```
+1 : Mar/01
+2 : March/01
+3 : 03/01
+4 : 03月01日
+5 : 3月
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_stream -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/from_stream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month_day/from_stream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/from_stream.md b/reference/chrono/month_day/from_stream.md
new file mode 100644
index 000000000..71122e8c2
--- /dev/null
+++ b/reference/chrono/month_day/from_stream.md
@@ -0,0 +1,80 @@
+# from_stream
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits, class Alloc = std::allocator&amp;lt;charT&amp;gt;&amp;gt;
+  std::basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    from_stream(std::basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp; is,
+                const charT* fmt,
+                month_day&amp;amp; md,
+                basic_string&amp;lt;charT, traits, Alloc&amp;gt;* abbrev = nullptr,
+                minutes* offset = nullptr);   // (1) C++20
+}
+```
+
+## 概要
+フォーマット指定して入力ストリームから`month_day`オブジェクトに入力する。
+
+
+## 効果
+- パラメータ`fmt`で指定されたフォーマットフラグを使用して、入力を解析し、`md`に代入する
+- 有効な年の解析に失敗した場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出され、パラメータ`md`は変更されない
+- タイムゾーンフォーマット`&amp;#34;%Z&amp;#34;`が指定され、解析が成功した場合、パラメータ`abbrev`が非ヌルである場合に`*abbrev`にタイムゾーン名が代入される
+- タイムゾーンとしてUTC時間からのオフセット時間 (日本なら`&amp;#34;+0900&amp;#34;`) を意味するフォーマット`&amp;#34;%z&amp;#34;`が指定され、解析が成功した場合、パラメータ`offset`が非ヌルである場合に`*offset`にその値が代入される
+
+
+## 戻り値
+`is`を返す
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  {
+    std::stringstream ss;
+    ss &amp;lt;&amp;lt; &amp;#34;Mar/1&amp;#34;; // &amp;#34;Mar/01&amp;#34;や&amp;#34;March/1&amp;#34;でもOK
+
+    chrono::month_day md;
+    chrono::from_stream(ss, md, &amp;#34;%b/%d&amp;#34;);
+    assert(md == chrono::March/1);
+  }
+  {
+    std::stringstream ss;
+    ss &amp;lt;&amp;lt; &amp;#34;3月1日&amp;#34;;
+
+    chrono::month_day md;
+    chrono::from_stream(ss, md, &amp;#34;%m月%d日&amp;#34;);
+    assert(md == chrono::March/1);
+  }
+}
+```
+* chrono::from_stream[color ff0000]
+* chrono::March[link /reference/chrono/month_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>month -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/month.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month_day/month.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/month.md b/reference/chrono/month_day/month.md
new file mode 100644
index 000000000..f206568d9
--- /dev/null
+++ b/reference/chrono/month_day/month.md
@@ -0,0 +1,51 @@
+# month
+* chrono[meta header]
+* std::chrono[meta namespace]
+* month_day[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr chrono::month month() const noexcept; // (1) C++20
+```
+* chrono::month[link /reference/chrono/month.md]
+
+## 概要
+月要素を取得する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している月オブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::month_day md = chrono::March/1;
+
+  chrono::month m = md.month();
+  assert(m == chrono::March);
+}
+```
+* md.month()[color ff0000]
+* chrono::month[link /reference/chrono/month.md]
+* chrono::March[link /reference/chrono/month_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ok -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/ok.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month_day/ok.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/ok.md b/reference/chrono/month_day/ok.md
new file mode 100644
index 000000000..d70ea525e
--- /dev/null
+++ b/reference/chrono/month_day/ok.md
@@ -0,0 +1,58 @@
+# ok
+* chrono[meta header]
+* std::chrono[meta namespace]
+* month_day[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr bool ok() const noexcept; // (1) C++20
+```
+
+## 概要
+`month_day`オブジェクトの値が有効な月日の範囲内かを判定する。
+
+
+## 戻り値
+以下の全ての条件を満たす場合にこの関数は`true`を返し、そうでなければ`false`を返す：
+
+- [`month()`](month.md)`.`[`ok()`](/reference/chrono/month/ok.md) `== true`であること
+- [`day()`](day.md)が返す値が、[`1d`](/reference/chrono/day/op_d.md)以上かつ[`month()`](month.md)の月の日数以下であること
+    - [`month()`](month.md) `==` [`February`](/reference/chrono/month_constants.md)である場合、日数は29であるとみなされる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  assert((chrono::March/1).ok()  == true);
+  assert((chrono::March/31).ok() == true);
+  assert((chrono::March/0).ok()  == false);
+  assert((chrono::April/31).ok() == false);
+
+  assert((chrono::February/28).ok() == true);
+  assert((chrono::February/29).ok() == true);
+}
+```
+* ok()[color ff0000]
+* chrono::March[link /reference/chrono/month_constants.md]
+* chrono::April[link /reference/chrono/month_constants.md]
+* chrono::February[link /reference/chrono/month_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator/ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/op_append.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month_day/op_append.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/op_append.md b/reference/chrono/month_day/op_append.md
new file mode 100644
index 000000000..827124e71
--- /dev/null
+++ b/reference/chrono/month_day/op_append.md
@@ -0,0 +1,77 @@
+# operator/
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr year_month_day
+    operator/(const month_day&amp;amp; md, const year&amp;amp; y) noexcept; // (1) C++20
+
+  constexpr year_month_day
+    operator/(const month_day&amp;amp; md, int y) noexcept;         // (2) C++20
+}
+```
+* month_day[link /reference/chrono/month_day.md]
+* year[link /reference/chrono/year.md]
+* year_month_day[link /reference/chrono/year_month_day.md]
+
+## 概要
+カレンダー要素同士をつなぎ合わせる。
+
+- (1) : `month_day`型と[`year`](/reference/chrono/year.md)型をつなぎ、年月日の情報をもつ型にまとめる
+- (2) : `month_day`型と`int`型での年の値をつなぎ、年月日の情報をもつ型にまとめる
+
+
+## 戻り値
+- (1) : `return y / md;`
+- (2) : `return` [`year`](/reference/chrono/year.md)`{y} / md;`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  chrono::month_day md = chrono::March/1;
+
+  // 2020年3月1日
+  chrono::year_month_day ymd1 = md / 2020y;
+  chrono::year_month_day ymd2 = md / 2020;
+
+  assert(ymd1.year() == 2020y);
+  assert(ymd1.month() == chrono::March);
+  assert(ymd1.day() == 1d);
+  assert(ymd1 == ymd2);
+}
+```
+* chrono::March[link /reference/chrono/month_constants.md]
+* 2020y[link /reference/chrono/year/op_y.md]
+* 1d[link /reference/chrono/day/op_d.md]
+* chrono::month_day[link /reference/chrono/month_day.md]
+* ymd1.year()[link /reference/chrono/year_month_day/year.md]
+* ymd1.month()[link /reference/chrono/year_month_day/month.md]
+* ymd1.day()[link /reference/chrono/year_month_day/day.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/op_compare_3way.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month_day/op_compare_3way.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/op_compare_3way.md b/reference/chrono/month_day/op_compare_3way.md
new file mode 100644
index 000000000..79f94a6a9
--- /dev/null
+++ b/reference/chrono/month_day/op_compare_3way.md
@@ -0,0 +1,67 @@
+# operator&amp;lt;=&amp;gt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr strong_ordering operator&amp;lt;=&amp;gt;(const month_day&amp;amp; x, const month_day&amp;amp; y) noexcept; // (1) C++20
+}
+```
+
+## 概要
+`month_day`同士の三方比較を行う。
+
+
+## 戻り値
+- (1) : 以下と等価：
+
+```cpp
+if (auto c = x.month() &amp;lt;=&amp;gt; y.month(); c != 0) return c;
+return x.day() &amp;lt;=&amp;gt; y.day();
+```
+* month()[link month.md]
+* day()[link day.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、`operator&amp;lt;`、`operator&amp;lt;=`、`operator&amp;gt;`、`operator&amp;gt;=`が使用可能になる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  assert((chrono::March/1 &amp;lt;=&amp;gt; chrono::March/1) == 0);
+
+  assert(chrono::March/1 &amp;lt; chrono::March/2);
+  assert(chrono::March/1 &amp;lt;= chrono::March/2);
+
+  assert(chrono::March/2 &amp;gt; chrono::March/1);
+  assert(chrono::March/2 &amp;gt;= chrono::March/1);
+}
+```
+* chrono::March[link /reference/chrono/month_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (10.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/op_constructor.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month_day/op_constructor.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/op_constructor.md b/reference/chrono/month_day/op_constructor.md
new file mode 100644
index 000000000..c26fa86f0
--- /dev/null
+++ b/reference/chrono/month_day/op_constructor.md
@@ -0,0 +1,70 @@
+# コンストラクタ
+* chrono[meta header]
+* std::chrono[meta namespace]
+* month_day[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+month_day() = default;                              // (1) C++20
+constexpr month_day(const chrono::month&amp;amp; m,
+                    const chrono::day&amp;amp; d) noexcept; // (2) C++20
+
+month_day(const month_day&amp;amp;) = default;              // (3) C++20
+month_day(month_day&amp;amp;&amp;amp;) = default;                   // (4) C++20
+```
+* chrono::month[link /reference/chrono/month.md]
+* chrono::day[link /reference/chrono/day.md]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : 月、日の値をそれぞれ指定して構築する
+- (3) : コピーコンストラクタ
+- (4) : ムーブコンストラクタ
+
+
+## 効果
+- (1) :
+    - デフォルト初期化では、月、日の値がそれぞれ符号なし整数の未初期化値となり、値初期化では値0となる
+- (2) :
+    - `m`と`d`をメンバ変数として保持する
+
+
+## 例外
+投げない
+
+
+### 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  // 月、日のカレンダー要素を順に指定して構築
+  chrono::month_day md1{chrono::March, 1d};
+  chrono::month_day md2{chrono::month{3}, chrono::day{1}};
+  assert(md1 == chrono::March/1);
+  assert(md2 == chrono::March/1);
+}
+```
+* chrono::March[link /reference/chrono/month_constants.md]
+* 1d[link /reference/chrono/day/op_d.md]
+* chrono::month[link /reference/chrono/month.md]
+* chrono::day[link /reference/chrono/day.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/op_equal.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month_day/op_equal.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/op_equal.md b/reference/chrono/month_day/op_equal.md
new file mode 100644
index 000000000..220123f70
--- /dev/null
+++ b/reference/chrono/month_day/op_equal.md
@@ -0,0 +1,61 @@
+# operator==
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr bool operator==(const month_day&amp;amp; x, const month_day&amp;amp; y) noexcept; // (1) C++20
+}
+```
+
+## 概要
+`month_day`同士の等値比較を行う。
+
+
+## 戻り値
+- (1) :
+
+```cpp
+return x.month() == y.month() &amp;amp;&amp;amp; x.day() == y.day();
+```
+* month()[link month.md]
+* day()[link day.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、`operator!=`が使用可能になる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  assert(chrono::March/1 == chrono::March/1);
+  assert(chrono::March/1 != chrono::March/2);
+}
+```
+* chrono::March[link /reference/chrono/month_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/month_day/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day/op_ostream.md b/reference/chrono/month_day/op_ostream.md
new file mode 100644
index 000000000..18e3e8006
--- /dev/null
+++ b/reference/chrono/month_day/op_ostream.md
@@ -0,0 +1,61 @@
+# operator&amp;lt;&amp;lt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits&amp;gt;
+  std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os, const month_day&amp;amp; md); // (1) C++20
+}
+```
+
+## 概要
+`month_day`オブジェクトを出力ストリームに出力する。
+
+
+## 戻り値
+便宜上のリテラルキャスト`STATICALLY-WIDEN`を導入する。`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;...&amp;#34;)`は、`charT`が`char`である場合は`&amp;#34;...&amp;#34;`、`charT`が`wchar_t`である場合は`L&amp;#34;...&amp;#34;`を意味する。
+
+- (1) : 以下と等価：
+    ```cpp
+    return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}/{}&amp;#34;), md.month(), md.day()) :
+    ```
+    * format[link /reference/format/format.md]
+    * md.month()[link month.md]
+    * md.day()[link day.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; chrono::March/1 &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::March[link /reference/chrono/month_constants.md]
+
+### 出力
+```
+Mar/01
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parse -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/parse.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/parse.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/parse.md b/reference/chrono/parse.md
new file mode 100644
index 000000000..d53c58215
--- /dev/null
+++ b/reference/chrono/parse.md
@@ -0,0 +1,181 @@
+# parse
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits, class Alloc, class Parsable&amp;gt;
+  unspecified
+    parse(const std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;&amp;amp; fmt,
+          Parsable&amp;amp; tp);                                      // (1) C++20
+
+  template &amp;lt;class charT, class traits, class Alloc, class Parsable&amp;gt;
+  unspecified
+    parse(const std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;&amp;amp; fmt,
+          Parsable&amp;amp; tp,
+          std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;&amp;amp; abbrev);   // (2) C++20
+
+  template &amp;lt;class charT, class traits, class Alloc, class Parsable&amp;gt;
+  unspecified
+    parse(const std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;&amp;amp; fmt,
+          Parsable&amp;amp; tp,
+          minutes&amp;amp; offset);                                   // (3) C++20
+
+  template &amp;lt;class charT, class traits, class Alloc, class Parsable&amp;gt;
+  unspecified
+    parse(const std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;&amp;amp; fmt,
+          Parsable&amp;amp; tp,
+          std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;&amp;amp; abbrev,
+          minutes&amp;amp; offset);                                   // (4) C++20
+}
+```
+* unspecified[italic]
+
+## 概要
+日時文字列を解析する入力マニピュレータ。
+
+- (1) タイムゾーン関係の入力を受け取らない単純な解析を行う
+- (2) chronoオブジェクトと、タイムゾーンの略称を解析する
+- (3) chronoオブジェクトと、UTCタイムゾーンからのオフセット時間を解析する
+- (4) chronoオブジェクトと、タイムゾーンの略称、UTCタイムゾーンからのオフセット時間を解析する
+
+`fmt`パラメータに指定できるフォーマットフラグは、以下である。`N`として10進整数を指定できる場合があり、それを指定することでより多くの文字数を読み込める。
+
+| フォーマットフラグ | 説明 | 例 |
+|--------------------|------|----|
+| `%a` | ロケール依存の曜日の完全名もしくは略称 (大文字・小文字を区別しない) | `&amp;#34;Sun&amp;#34;`&amp;lt;br/&amp;gt; 日本のロケールでは`&amp;#34;日&amp;#34;` |
+| `%A` | `%a`と等価 | |
+| `%b` | ロケール依存の月の完全名もしくは略称 (大文字・小文字を区別しない) | `&amp;#34;Apr&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;April&amp;#34;`&amp;lt;br/&amp;gt; 日本のロケールでは`&amp;#34;4月&amp;#34;` |
+| `%B` | `%b`と等価 | |
+| `%c` | ロケール依存の日付・時間の表現。改良コマンド`%Ec`を指定すると、異なる表現になる | `&amp;#34;Fri Apr 24 17:14:44 2020&amp;#34;`&amp;lt;br/&amp;gt; 日本のロケールでは`&amp;#34;2020年04月24日 17時14分44秒&amp;#34;`&amp;lt;br/&amp;gt; `%Ec`では`&amp;#34;令和02年04月24日 17時14分44秒&amp;#34;` |
+| `%C` | 世紀の10進数番号。改良コマンド`%NC` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%EC`と`%OC`はロケール依存の異なる表現になる | `&amp;#34;21&amp;#34;`&amp;lt;br/&amp;gt; `%EC`では元号`&amp;#34;令和&amp;#34;` |
+| `%d` | 10進数の月の日。改良コマンド`%Nd` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%Od`はロケール依存の異なる表現になる | `&amp;#34;4&amp;#34;` |
+| `%D` | `%m/%d/%y`と等価 | `&amp;#34;04/01/2020&amp;#34;` |
+| `%e` | `%d`と等価で、`%d`と同様の改良コマンドが使用できる | |
+| `%F` | `%Y-%m-%d`と等価。`%NF` (Nは10進整数) を指定した場合、幅は`%Y`にのみ適用される | `&amp;#34;2020-04-24&amp;#34;` |
+| `%g` | ISOの週ベースのうしろ2桁10進数の年。改良コマンド`%Ng` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。 | `&amp;#34;20&amp;#34;` |
+| `%G` | ISOの週ベースの10進数の年。改良コマンド`%NG` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは4。先頭の0は許可されるが要求はされない。 | `&amp;#34;2020&amp;#34;` |
+| `%h` | `%b`と等価 | |
+| `%H` | 24時間時計での10進数の時。改良コマンド`%NH` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%OH`はロケール依存の異なる表現になる | `&amp;#34;17&amp;#34;` |
+| `%I` | 12時間時計での10進数の時。改良コマンド`%NI` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%OI`はロケール依存の異なる表現になる | `&amp;#34;05&amp;#34;` |
+| `%j` | 10進数での年の日。1月1日は`001`。改良コマンド`%Nj` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは3。先頭の0は許可されるが要求はされない。 | `&amp;#34;115&amp;#34;` |
+| `%m` | 10進数での月。1月は`01`。改良コマンド`%Nm` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%Om`はロケール依存の異なる表現になる | `&amp;#34;04&amp;#34;` |
+| `%M` | 10進数での分。改良コマンド`%NM` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%OM`はロケール依存の異なる表現になる | `&amp;#34;14&amp;#34;` |
+| `%n` | ひとつのホワイトスペース文字にマッチする。 | |
+| `%p` | 12時間時計でのロケール依存の午前・午後の表現 | `&amp;#34;PM&amp;#34;`, `&amp;#34;午後&amp;#34;` |
+| `%r` | 12時間時計でのロケール依存の時間 | `&amp;#34;05:14:44 PM&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;午後05時14分44秒&amp;#34;` |
+| `%R` | `%H:%M`と等価 | `&amp;#34;17:14&amp;#34;` |
+| `%S` | 10進数での秒。改良コマンド`%NS` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nが指定されず秒に変換可能な精度である場合、デフォルトは2。秒に変可能な精度でない場合は、デフォルトの幅は入力の10進精度によって決まり、フィールドは固定フォーマットの`long double`として解釈される。小数点はロケールによって決まる。先頭の0は許可されるが要求はされない。改良コマンド`%OS`はロケール依存の異なる表現になる。 | `&amp;#34;44&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;44.123&amp;#34;` |
+| `%t` | ゼロ個もしくはひとつのホワイトスペース文字にマッチする | |
+| `%T` | `%H:%M:%S`と等価 | `&amp;#34;17:14:44.123&amp;#34;` |
+| `%u` | 10進数での月曜を1とするISO曜日番号 (1-7)。改良コマンド`%Nu` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは1。先頭の0は許可されるが要求はされない。改良コマンド`%Ou`はロケール依存の異なる表現になる | `&amp;#34;5&amp;#34;` |
+| `%U` | 10進数での年の週番号。年の最初の日曜日が最初の曜日であるとして`01`、同年のそれより前の日は`00`となる。改良コマンド`%NU` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。 | `&amp;#34;16&amp;#34;` |
+| `%V` | 10進数でのISO週ベースの週番号。改良コマンド`%NV` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。 | `&amp;#34;17&amp;#34;` |
+| `%w` | 10進数での日曜を0とする曜日番号 (0-6)。改良コマンド`%Nw (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは1。先頭の0は許可されるが要求はされない。改良コマンド`%Ow`はロケール依存の異なる表現になる | `&amp;#34;5&amp;#34;` |
+| `%W` | 10進数での年の週番号。年の最初の月曜日が最初の曜日であるとして`01`、同年のそれより前の日は`00`となる。改良コマンド`%NW` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%OW`を指定はロケール依存の異なる表現になる | `&amp;#34;16&amp;#34;` |
+| `%x` | ロケール依存の日付表現。改良コマンド`%Ex`はロケール依存の異なる表現になる| `&amp;#34;04/24/20&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;2020年04月24日&amp;#34;`&amp;lt;br/&amp;gt; `%Ex`では`&amp;#34;令和02年04月24日&amp;#34;` |
+| `%X` | ロケール依存の時間表現。改良コマンド`%EX`はロケール依存の異なる表現になる | `&amp;#34;17:14:44&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;17時14分44秒&amp;#34;` |
+| `%y` | 10進数での年のうしろ2桁。世紀が (`%C`などで) 指定されない場合、範囲`[69, 99]`は1969年から1999年を参照し、範囲`[00, 68]`は2000年から2068年を参照する。改良コマンド`%Ny` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%Ey`または`%Oy`はロケール依存の異なる表現になる。 | `&amp;#34;20&amp;#34;`&amp;lt;br/&amp;gt; `%Ey`では (元号ベースの下2桁年) `&amp;#34;02&amp;#34;` |
+| `%Y` | 10進数での年。改良コマンド`%NY` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは4。先頭の0は許可されるが要求はされない。改良コマンド`%EY`はロケール依存の異なる表現になる | `&amp;#34;2020&amp;#34;`&amp;lt;br/&amp;gt; `%EY`では`&amp;#34;令和02年&amp;#34;` |
+| `%z` | `[+|-]hh[mm]`フォーマットでのUTCタイムゾーンからのオフセット時間 (`[ ]`カッコ内は省略可能)。例として`-0430`はUTCから4時間30分遅れていることを表す。 改良コマンド`%Ez`と`%Oz`は、時と分の間にコロン (`:`) が要求され、時の先頭のゼロは省略できる`[+|-]h[h][:mm]`フォーマットとなる。 | `&amp;#34;+0900&amp;#34;`&amp;lt;br/&amp;gt;`%Ez`では`&amp;#34;9&amp;#34;` |
+| `%Z` | タイムゾーンの略称。単一の単語を解析する。この単語に含めることができるのは、基本文字集合の英数字または`&amp;#39;_&amp;#39;`, `&amp;#39;/&amp;#39;`, `&amp;#39;-&amp;#39;`, `&amp;#39;+&amp;#39;`の文字のみ。 | `&amp;#34;JST&amp;#34;` |
+| `%%` | 文字`%`を抽出する | `&amp;#34;%&amp;#34;` |
+
+
+## テンプレートパラメータ制約
+- (1) : `from_stream(`[`declval`](/reference/utility/declval.md)`&amp;lt;basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp;&amp;gt;(), fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp)`が妥当な式であること
+- (2) : `from_stream(`[`declval`](/reference/utility/declval.md)`&amp;lt;basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp;&amp;gt;(), fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp,` [`addressof`](/reference/memory/addressof.md)`(abbrev))`が妥当な式であること
+- (3) : 式`from_stream(`[`declval`](/reference/utility/declval.md)`&amp;lt;basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp;&amp;gt;(), fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp,` [`declval`](/reference/utility/declval.md)`&amp;lt;`[`basic_string`](/reference/string/basic_string.md)`&amp;lt;charT, traits, Alloc&amp;gt;*&amp;gt;(), &amp;amp;offset)`が評価されないオペランドとして扱われた場合に妥当な式であること
+- (4) : `from_stream(`[`declval`](/reference/utility/declval.md)`&amp;lt;basic_istream&amp;lt;charT, traits&amp;gt;&amp;amp;&amp;gt;(), fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp,` [`addressof`](/reference/memory/addressof.md)`(abbrev), &amp;amp;offset)`が妥当な式であること
+
+
+## 効果
+- (1) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp)`を呼び出す
+- (2) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp,` [`addressof`](/reference/memory/addressof.md)`(abbrev))`を呼び出す
+- (3) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp, static_cast&amp;lt;`[`basic_string`](/reference/string/basic_string.md)`&amp;lt;charT, traits, Alloc&amp;gt;*&amp;gt;(nullptr), &amp;amp;offset)`を呼び出す
+- (4) : このマニピュレータは、[`basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;charT, traits&amp;gt;`型オブジェクト`is`に対して`from_stream(is, fmt.`[`c_str()`](/reference/string/basic_string/c_str.md)`, tp,` [`addressof`](/reference/memory/addressof.md)`(abbrev), &amp;amp;offset)`を呼び出す
+
+以下、オーバーロード全体について、
+
+- これらの関数をADL (引数依存の名前探索、argument dependent lookup) で呼び出すために、`from_stream`を修飾せずに呼び出している
+- これらの関数は書式化されていない入力関数として動作するが ([`std::boolalpha`](/reference/ios/boolalpha.md), [`std::quoted`](/reference/iomanip/quoted.md)などの影響を受けない)、後続で呼び出された[`std::basic_istream`](/reference/istream/basic_istream.md)`&amp;lt;&amp;gt;::`[`gcount()`](/reference/istream/basic_istream/gcount.md)の戻り値に未規定の影響がある
+- 概要欄に示したフォーマットフラグに含まれておらず、スペースを除くフォーマット文字列のすべての文字は、ストリームから変更されずに解析される
+- スペース文字は、入力ストリーム内の「ゼロ個以上のスペース文字」と合致する
+- 解析する`tp`の型が、フォーマットフラグの情報を表現できない場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出される
+    - 例として、[`duration`](duration.md)は[`weekday`](weekday.md)を表現できない
+    - ただし、フォーマットフラグが時刻を表すものである場合 (`&amp;#34;%H&amp;#34;`, `&amp;#34;%I&amp;#34;`, `&amp;#34;%p&amp;#34;`など)、[`duration`](duration.md)の特殊化は、その日の深夜0時からの経過時間だと見なして読み込む
+- フォーマット文字列で指定されたいずれの解析にも失敗した場合、もしくは完全な`duration`、時間点、カレンダーデータ構造を指定するために十分な情報が解析されなかった場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出される
+
+
+## 戻り値
+未規定
+
+
+## 例
+```cpp example
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // タイムゾーン情報を含まない日時の解析
+  {
+    std::stringstream ss;
+    ss &amp;lt;&amp;lt; &amp;#34;2019-10-24 20:15:10&amp;#34;;
+
+    chrono::sys_seconds tp;
+    ss &amp;gt;&amp;gt; chrono::parse(&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;, tp);
+
+    if (ss) {
+      std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+    }
+    else {
+      std::cout &amp;lt;&amp;lt; &amp;#34;解析失敗&amp;#34; &amp;lt;&amp;lt; std::endl;
+    }
+  }
+
+  // タイムゾーン情報を含む日時の解析
+  {
+    std::stringstream ss;
+    ss &amp;lt;&amp;lt; &amp;#34;2019-10-24 20:15:10 JST+0900&amp;#34;;
+
+    chrono::sys_seconds tp;
+    std::string abbrev;
+    chrono::minutes offset;
+    ss &amp;gt;&amp;gt; chrono::parse(&amp;#34;%Y-%m-%d %H:%M:%S %Z%z&amp;#34;, tp, abbrev, offset);
+
+    if (ss) {
+      std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+      std::cout &amp;lt;&amp;lt; abbrev &amp;lt;&amp;lt; std::endl;
+      std::cout &amp;lt;&amp;lt; chrono::floor&amp;lt;chrono::hours&amp;gt;(offset) &amp;lt;&amp;lt; std::endl;
+    }
+    else {
+      std::cout &amp;lt;&amp;lt; &amp;#34;解析失敗&amp;#34; &amp;lt;&amp;lt; std::endl;
+    }
+  }
+}
+```
+* chrono::parse[color ff0000]
+* chrono::sys_seconds[link sys_time.md]
+* chrono::floor[link duration/floor.md]
+
+### 出力
+```
+2019-10-24 20:15:10
+2019-10-24 11:15:10
+JST
+9h
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sys_info -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/sys_info.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/sys_info.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/sys_info.md b/reference/chrono/sys_info.md
index 82d82c7e0..6d02ff8fc 100644
--- a/reference/chrono/sys_info.md
+++ b/reference/chrono/sys_info.md
@@ -12,11 +12,7 @@ namespace std::chrono {
     seconds offset;
     minutes save;
     string abbrev;
-  };                    // (1) C++20
-
-  template &amp;lt;class charT, class traits&amp;gt;
-  std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
-    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os, const sys_info&amp;amp; si); // (2)
+  };
 }
 ```
 * sys_seconds[link sys_time.md]
@@ -27,9 +23,8 @@ namespace std::chrono {
 
 このクラスの情報は、[`sys_time`](sys_time.md)から[`local_time`](local_time.md)に変換する際に使用される。
 
-- (1) : システム時間に関するタイムゾーン情報のクラス
-- (2) : 出力ストリームへの出力
 
+## メンバ変数
 
 | 変数 | 説明 |
 |------|------|
@@ -39,12 +34,18 @@ namespace std::chrono {
 | `abbrev` | 関連する[`time_zone`](time_zone.md)および[`time_point`](time_point.md)に使用される現在の「略称 (abbreviation)」を意味する。略称はタイムゾーンごとに一意に定まるわけではないため、略称からタイムゾーンおよびUTCタイムゾーンからのオフセット時間を確実にマッピングすることはできない |
 
 
-## 効果
-- (2) : `si`を未規定のフォーマットで`os`に出力する
+## 非メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator&amp;lt;&amp;lt;`](sys_info/op_ostream.md) | 出力ストリームへの出力 | C++20 |
+
 
+## 文字列フォーマット
 
-## 戻り値
-- (2) : `return os;`
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](sys_info/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
 
 
 ## 例
@@ -63,9 +64,6 @@ int main()
   chrono::sys_info si = tz-&amp;gt;get_info(now);
   std::cout &amp;lt;&amp;lt; chrono::floor&amp;lt;chrono::hours&amp;gt;(si.offset).count() &amp;lt;&amp;lt; &amp;#34; hours&amp;#34; &amp;lt;&amp;lt; std::endl; // UTCタイムゾーンからの差分時間
   std::cout &amp;lt;&amp;lt; si.abbrev &amp;lt;&amp;lt; std::endl; // タイムゾーンの略称
-
-  std::cout &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; si &amp;lt;&amp;lt; std::endl; // タイムゾーン情報全体を出力
 }
 ```
 * chrono::sys_info[color ff0000]
@@ -77,12 +75,12 @@ int main()
 * chrono::floor[link time_point/floor.md]
 * count()[link /reference/chrono/duration/count.md]
 
-### 出力例
+### 出力
 ```
+9 hours
+JST
 ```
 
-(未検証)
-
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/sys_info/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/sys_info/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/sys_info/formatter.md b/reference/chrono/sys_info/formatter.md
new file mode 100644
index 000000000..4af196033
--- /dev/null
+++ b/reference/chrono/sys_info/formatter.md
@@ -0,0 +1,70 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::sys_info, charT&amp;gt;;
+}
+```
+
+## 概要
+`sys_info`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+| フォーマットフラグ | 説明 |
+|--------------------|------|
+| `%z`  | ISO 8601フォーマットでのUTCからのオフセット (日本だと`&amp;#34;+0900&amp;#34;`) |
+| `%Ez` | オフセットの時と分の間にコロン (:) が挿入される (日本だと`&amp;#34;+09:00&amp;#34;`) |
+| `%Oz` | `%Ez`と等価 |
+| `%Z`  | タイムゾーンの略称 (日本だと`&amp;#34;JST&amp;#34;`) |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  auto now = chrono::system_clock::now();
+
+  // 日本のタイムゾーン
+  const chrono::time_zone* tz = chrono::locate_zone(&amp;#34;Asia/Tokyo&amp;#34;);
+  chrono::sys_info si = tz-&amp;gt;get_info(now);
+
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ (フォーマット未規定)
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, si) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%z}&amp;#34;, si) &amp;lt;&amp;lt; std::endl; // オフセット時間
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Z}&amp;#34;, si) &amp;lt;&amp;lt; std::endl; // タイムゾーンの略称
+}
+```
+* chrono::system_clock[link /reference/chrono/system_clock.md]
+* now()[link /reference/chrono/system_clock/now.md]
+* chrono::time_zone[link /reference/chrono/time_zone.md]
+* chrono::locate_zone[link /reference/chrono/locate_zone.md]
+* std::format[link /reference/chrono/format.md]
+
+### 出力例
+```
+(未検証の行)
++0900
+JST
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/sys_info/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/sys_info/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/sys_info/op_ostream.md b/reference/chrono/sys_info/op_ostream.md
new file mode 100644
index 000000000..95eb23dca
--- /dev/null
+++ b/reference/chrono/sys_info/op_ostream.md
@@ -0,0 +1,66 @@
+# operator&amp;lt;&amp;lt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits&amp;gt;
+  std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os, const sys_info&amp;amp; si); // (1) C++20
+}
+```
+
+## 概要
+`sys_info`オブジェクトを出力ストリームに出力する。
+
+
+## 効果
+`si`を未規定のフォーマットで`os`に出力する
+
+
+## 戻り値
+```cpp
+return os;
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  auto now = chrono::system_clock::now();
+
+  // 日本のタイムゾーン
+  const chrono::time_zone* tz = chrono::locate_zone(&amp;#34;Asia/Tokyo&amp;#34;);
+  chrono::sys_info si = tz-&amp;gt;get_info(now);
+
+  std::cout &amp;lt;&amp;lt; si &amp;lt;&amp;lt; std::endl; // タイムゾーン情報全体を出力
+}
+```
+* chrono::time_zone[link /reference/chrono/time_zone.md]
+* tz-&amp;gt;get_info[link /reference/chrono/time_zone/get_info.md]
+* chrono::locate_zone[link /reference/chrono/locate_zone.md]
+* chrono::system_clock[link /reference/chrono/system_clock.md]
+* now()[link /reference/chrono/system_clock/now.md]
+
+### 出力例
+```
+```
+
+(未検証)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sys_time -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/sys_time.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/sys_time.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/sys_time.md b/reference/chrono/sys_time.md
index d8f2b7368..edaa5b672 100644
--- a/reference/chrono/sys_time.md
+++ b/reference/chrono/sys_time.md
@@ -30,6 +30,11 @@ namespace std::chrono {
                 std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;* abbrev = nullptr,
                 minutes* offset = nullptr);            // (6) C++20
 }
+
+namespace std {
+  template &amp;lt;class Duration, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::sys_time&amp;lt;Duration&amp;gt;, charT&amp;gt;; // (7) C++20
+}
 ```
 * time_point[link time_point.md]
 * system_clock[link system_clock.md]
@@ -43,6 +48,7 @@ namespace std::chrono {
 - (4) : 時間点に含まれる日付と時間を出力ストリームに出力する
 - (5) : 時間点に含まれる日付を出力ストリームに出力する
 - (6) : フォーマット指定して入力ストリームから日付・時間を時間点オブジェクトに入力する
+- (7) : `sys_time`型に対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化
 
 
 ## テンプレートパラメータ制約
@@ -84,6 +90,9 @@ namespace std::chrono {
 - (1) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`system_clock::time_point`がもつ時間間隔の単位は未規定 (実装定義) であり、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
 - [`year`](year.md)クラスの制限により、年の値としては`[-32767, 32767]`の範囲までしか入出力できないことに注意 (その範囲外は未規定の値となる)
 - (4), (5) : 出力ストリームの演算子は、ローカルのタイムゾーンへの変換を行わない。そのため、システム時間をそのまま出力すると、デフォルトではUTCタイムゾーンの日時が出力される。日本のタイムゾーンで出力したい場合は、[`zoned_time`](zoned_time.md)クラスを介して出力するか、9時間を加算して出力すること
+- (7) :
+    - `%Z` (タイムゾーンの略称) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;UTC&amp;#34;)`で置き換えられる
+    - `%z`もしくはその改良コマンドが指定された場合、`0`[`min`](duration/op_min.md)が使用される
 
 
 ## 例
@@ -174,7 +183,7 @@ int main()
   // タイムゾーンとオフセットを含む入力
   {
     std::stringstream ss;
-    ss &amp;lt;&amp;lt; &amp;#34;2019-10-24 20:15:10 UTC+0900&amp;#34;;
+    ss &amp;lt;&amp;lt; &amp;#34;2019-10-24 20:15:10 JST+0900&amp;#34;;
 
     chrono::sys_seconds tp;
     std::string abbrev;
@@ -194,10 +203,57 @@ int main()
 ```
 2019-10-24 20:15:10
 2019-10-24 11:15:10
-UTC
+JST
 540
 ```
 
+### 文字列フォーマットの例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::system_clock::time_point now = chrono::system_clock::now();
+  chrono::sys_seconds now_sec = chrono::floor&amp;lt;chrono::seconds&amp;gt;(tp);
+
+  // デフォルトフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 「年月日 時分秒」のフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの略称付き
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {0:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : %Y年%m月%d日&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5 : %F&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 時間だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6 : %H時%M分%S秒&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7 : %T&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::system_clock[link system_clock.md]
+* now()[link system_clock/now.md]
+* chrono::floor[link time_point/floor.md]
+* std::format[link format.md]
+
+#### 出力例
+```
+1 : 2019-12-20 10:05:05 UTC
+2 : 2019年12月20日 10時05分05秒
+3 : 2019/12/20 10:05:05 UTC
+4 : 2019年12月20日
+5 : 2019-12-20
+6 : 10時05分05秒
+7 : 10:05:05
+```
+
 ## バージョン
 ### 言語
 - C++20
@@ -209,4 +265,5 @@ UTC
 
 
 ## 関連項目
-- [`local_time_format()`](local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`std::format()`](/reference/chrono/format.md) (出力フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tai_clock -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/tai_clock.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/tai_clock.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/tai_clock.md b/reference/chrono/tai_clock.md
index 1abddb629..a43ee4a42 100644
--- a/reference/chrono/tai_clock.md
+++ b/reference/chrono/tai_clock.md
@@ -16,7 +16,7 @@ namespace std::chrono {
 このクロックは、UTCよりも10秒進んでいる。そのため、1958-01-01 00:00:00 TAIと1957-12-31 23:59:50 UTCは等価である。
 
 
-他のクロッククラスとは違い、このクラスの[`now()`](tai_clock/now.md)静的メンバ関数は、標準では`noexcept(false)`である。実装が`noexcept(true)`である保証をしない限り、このクラスはTrivialClock要件を満たさない。
+このクラスの[`now()`](tai_clock/now.md)静的メンバ関数は、標準では`noexcept(false)`である。実装が`noexcept(true)`である保証をしない限り、このクラスはTrivialClock要件を満たさない。
 
 
 ### エポック
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_utc -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/tai_clock/from_utc.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/tai_clock/from_utc.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/tai_clock/from_utc.md b/reference/chrono/tai_clock/from_utc.md
index ada6a6924..bb19c999d 100644
--- a/reference/chrono/tai_clock/from_utc.md
+++ b/reference/chrono/tai_clock/from_utc.md
@@ -1,7 +1,7 @@
 # from_utc
 * chrono[meta header]
 * std::chrono[meta namespace]
-* utc_clock[meta class]
+* tai_clock[meta class]
 * function[meta id-type]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>now -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/tai_clock/now.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/tai_clock/now.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/tai_clock/now.md b/reference/chrono/tai_clock/now.md
index e2781431d..b909948ea 100644
--- a/reference/chrono/tai_clock/now.md
+++ b/reference/chrono/tai_clock/now.md
@@ -19,7 +19,7 @@ static time_point now();
 
 
 ## 備考
-他のクロッククラスとは違い、このクラスの`now()`静的メンバ関数は、標準では`noexcept(false)`である。実装が`noexcept(true)`である保証をしない限り、このクラスはTrivialClock要件を満たさない。
+このクラスの`now()`静的メンバ関数は、標準では`noexcept(false)`である。実装が`noexcept(true)`である保証をしない限り、このクラスはTrivialClock要件を満たさない。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_utc -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/tai_clock/to_utc.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/tai_clock/to_utc.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/tai_clock/to_utc.md b/reference/chrono/tai_clock/to_utc.md
index 0fff9f23c..419a9704c 100644
--- a/reference/chrono/tai_clock/to_utc.md
+++ b/reference/chrono/tai_clock/to_utc.md
@@ -1,7 +1,7 @@
 # to_utc
 * chrono[meta header]
 * std::chrono[meta namespace]
-* utc_clock[meta class]
+* tai_clock[meta class]
 * function[meta id-type]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tai_time -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/tai_time.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/tai_time.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/tai_time.md b/reference/chrono/tai_time.md
index 44c7cf8c6..1babdb290 100644
--- a/reference/chrono/tai_time.md
+++ b/reference/chrono/tai_time.md
@@ -6,7 +6,7 @@
 
 ```cpp
 namespace std::chrono {
-  template&amp;lt;class Duration&amp;gt;
+  template &amp;lt;class Duration&amp;gt;
   using tai_time = time_point&amp;lt;tai_clock, Duration&amp;gt;;    // (1) C++20
 
   using tai_seconds = tai_time&amp;lt;seconds&amp;gt;;               // (2) C++20
@@ -24,6 +24,11 @@ namespace std::chrono {
                 std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;* abbrev = nullptr,
                 minutes* offset = nullptr);            // (4) C++20
 }
+
+namespace std {
+  template &amp;lt;class Duration, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::tai_time&amp;lt;Duration&amp;gt;, charT&amp;gt;; // (5) C++20
+}
 ```
 * time_point[link time_point.md]
 * tai_clock[link tai_clock.md]
@@ -35,6 +40,7 @@ TAI時間の一点を指す[`time_point`](time_point.md)に対する別名。
 - (2) : 秒単位でTAI時間の一点を指す[`time_point`](time_point.md)に対する別名
 - (3) : 時間点に含まれる日付と時間を出力ストリームに出力する
 - (4) : フォーマット指定して入力ストリームから日付・時間を時間点オブジェクトに入力する
+- (5) : `tai_time`型に対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化
 
 
 ## 効果
@@ -44,9 +50,7 @@ TAI時間の一点を指す[`time_point`](time_point.md)に対する別名。
     ```cpp
     return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%F %T}&amp;#34;), tp);
     ```
-    * format[link /reference/format/format.md]
-
-    - フォーマットの詳細は[`local_time_format()`](local_time_format.md.nolink)を参照
+    * format[link format.md]
 
 - (4) :
     - パラメータ`fmt`で指定されたフォーマットフラグを使用して、入力を解析し、`tp`に代入する
@@ -59,6 +63,19 @@ TAI時間の一点を指す[`time_point`](time_point.md)に対する別名。
 
 ## 備考
 - (1) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`tai_clock::time_point`がもつ時間間隔の単位は未規定 (実装定義) であるため、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
+- (5) :
+    - `%Z` (タイムゾーンの略称) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;TAI&amp;#34;)`で置き換えられる
+    - `%z`もしくはその改良コマンドが指定された場合、`0`[`min`](duration/op_min.md)が使用される
+    - この日付と時間のフォーマットは、`gps_time&amp;lt;Duration&amp;gt;`型変数`tp`を以下のように変換した[`sys_time`](sys_time.md)をフォーマットした場合と等価：
+        ```cpp
+        sys_time&amp;lt;Duration&amp;gt;{tp.time_since_epoch()} + (sys_days{1970y/January/1} - sys_days{1958y/January/1})
+        ```
+        * sys_time[link sys_time.md]
+        * tp.time_since_epoch()[link time_point/time_since_epoch.md]
+        * sys_days[link sys_time.md]
+        * 1970y[link year/op_y.md]
+        * 1958y[link year/op_y.md]
+        * January[link month_constants.md]
 
 
 ## 例
@@ -139,6 +156,53 @@ int main()
 TAI
 ```
 
+### 文字列フォーマットの例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::tai_clock::time_point now = chrono::tai_clock::now();
+  chrono::tai_seconds now_sec = chrono::floor&amp;lt;chrono::seconds&amp;gt;(tp);
+
+  // デフォルトフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 「年月日 時分秒」のフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの略称付き
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {0:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : %Y年%m月%d日&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5 : %F&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 時間だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6 : %H時%M分%S秒&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7 : %T&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::tai_clock[link tai_clock.md]
+* now()[link tai_clock/now.md]
+* chrono::floor[link time_point/floor.md]
+* std::format[link format.md]
+
+#### 出力例
+```
+1 : 2019-12-20 10:05:05 TAI
+2 : 2019年12月20日 10時05分05秒
+3 : 2019/12/20 10:05:05 TAI
+4 : 2019年12月20日
+5 : 2019-12-20
+6 : 10時05分05秒
+7 : 10:05:05
+```
+
 ## バージョン
 ### 言語
 - C++20
@@ -150,4 +214,5 @@ TAI
 
 
 ## 関連項目
-- [`local_time_format()`](local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`std::format()`](/reference/chrono/format.md) (出力フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>treat_as_floating_point -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/treat_as_floating_point.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/treat_as_floating_point.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/treat_as_floating_point.md b/reference/chrono/treat_as_floating_point.md
index 87f2c1329..f2182f942 100644
--- a/reference/chrono/treat_as_floating_point.md
+++ b/reference/chrono/treat_as_floating_point.md
@@ -19,7 +19,7 @@ namespace chrono {
 * is_floating_point[link /reference/type_traits/is_floating_point.md]
 
 ## 概要
-`treat_as_floating_point`は、テンプレートパラメータ`Rep`が浮動小数点型かを判定するトレイトである。
+`treat_as_floating_point`は、テンプレートパラメータ`Rep`が浮動小数点型かを判定する型特性である。
 
 [`duration`](/reference/chrono/duration.md)クラスにおいて、他の[`duration`](/reference/chrono/duration.md)の型から変換可能な型かどうかを判定するために使用される。`treat_as_floating_point&amp;lt;Rep&amp;gt;::value == true`の場合に、変換可能である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>utc_clock -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/utc_clock.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/utc_clock.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/utc_clock.md b/reference/chrono/utc_clock.md
index 0117d31f0..a5e6215f1 100644
--- a/reference/chrono/utc_clock.md
+++ b/reference/chrono/utc_clock.md
@@ -13,7 +13,7 @@ namespace std::chrono {
 ## 概要
 `utc_clock`は、UTC時間 (協定世界時、Coordinated Universal Time) を表現するためのクロックである。
 
-他のクロッククラスとは違い、このクラスの[`now()`](utc_clock/now.md)静的メンバ関数は、標準では`noexcept(false)`である。実装が`noexcept(true)`である保証をしない限り、このクラスはTrivialClock要件を満たさない。
+このクラスの[`now()`](utc_clock/now.md)静的メンバ関数は、標準では`noexcept(false)`である。実装が`noexcept(true)`である保証をしない限り、このクラスはTrivialClock要件を満たさない。
 
 
 ### エポック
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>now -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/utc_clock/now.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/utc_clock/now.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/utc_clock/now.md b/reference/chrono/utc_clock/now.md
index c616899c4..e4162f9d4 100644
--- a/reference/chrono/utc_clock/now.md
+++ b/reference/chrono/utc_clock/now.md
@@ -19,7 +19,7 @@ static time_point now();
 
 
 ## 備考
-他のクロッククラスとは違い、このクラスの`now()`静的メンバ関数は、標準では`noexcept(false)`である。実装が`noexcept(true)`である保証をしない限り、このクラスはTrivialClock要件を満たさない。
+このクラスの`now()`静的メンバ関数は、標準では`noexcept(false)`である。実装が`noexcept(true)`である保証をしない限り、このクラスはTrivialClock要件を満たさない。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>utc_time -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/utc_time.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/utc_time.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/utc_time.md b/reference/chrono/utc_time.md
index 544e7bfb0..6846ca961 100644
--- a/reference/chrono/utc_time.md
+++ b/reference/chrono/utc_time.md
@@ -24,6 +24,11 @@ namespace std::chrono {
                 std::basic_string&amp;lt;charT, traits, Alloc&amp;gt;* abbrev = nullptr,
                 minutes* offset = nullptr);            // (4) C++20
 }
+
+namespace std {
+  template &amp;lt;class Duration, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::utc_time&amp;lt;Duration&amp;gt;, charT&amp;gt;; // (5) C++20
+}
 ```
 * time_point[link time_point.md]
 * utc_clock[link utc_clock.md]
@@ -35,6 +40,7 @@ UTC時間の一点を指す[`time_point`](time_point.md)に対する別名。
 - (2) : 秒単位でUTC時間の一点を指す[`time_point`](time_point.md)に対する別名
 - (3) : 時間点に含まれる日付と時間を出力ストリームに出力する
 - (4) : フォーマット指定して入力ストリームから日付・時間を時間点オブジェクトに入力する
+- (5) : `utc_time`型に対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化
 
 
 ## 効果
@@ -44,9 +50,7 @@ UTC時間の一点を指す[`time_point`](time_point.md)に対する別名。
     ```cpp
     return os &amp;lt;&amp;lt; format(STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{:%F %T}&amp;#34;), tp);
     ```
-    * format[link /reference/format/format.md]
-
-    - フォーマットの詳細は[`local_time_format()`](local_time_format.md.nolink)を参照
+    * format[link format.md]
 
 - (4) :
     - パラメータ`fmt`で指定されたフォーマットフラグを使用して、入力を解析し、`tp`に代入する
@@ -59,6 +63,10 @@ UTC時間の一点を指す[`time_point`](time_point.md)に対する別名。
 
 ## 備考
 - (1) : このバージョンは、関数テンプレートで任意の時間間隔単位の`time_point`を受け取るために使用できる。`utc_clock::time_point`がもつ時間間隔の単位は未規定 (実装定義) であるため、特定の単位に決めることができないため、時間間隔の型のみをパラメータ化して関数テンプレートで受け取ると便利である
+- (5) :
+    - `%Z` (タイムゾーンの略称) が指定された場合、`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;UTC&amp;#34;)`で置き換えられる
+    - `%z`もしくはその改良コマンドが指定された場合、`0`[`min`](duration/op_min.md)が使用される
+    - 引数がうるう秒が挿入された時間を表す場合、秒フィールドは`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;60&amp;#34;)`でフォーマットされる
 
 
 ## 例
@@ -142,6 +150,53 @@ UTC
 540
 ```
 
+### 文字列フォーマットの例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::utc_clock::time_point now = chrono::utc_clock::now();
+  chrono::utc_seconds now_sec = chrono::floor&amp;lt;chrono::seconds&amp;gt;(tp);
+
+  // デフォルトフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 「年月日 時分秒」のフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り、タイムゾーンの略称付き
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {0:%Y/%m/%d %H:%M:%S %Z}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : %Y年%m月%d日&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5 : %F&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 時間だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6 : %H時%M分%S秒&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7 : %T&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::utc_clock[link utc_clock.md]
+* now()[link utc_clock/now.md]
+* chrono::floor[link time_point/floor.md]
+* std::format[link format.md]
+
+#### 出力例
+```
+1 : 2019-12-20 10:05:05 UTC
+2 : 2019年12月20日 10時05分05秒
+3 : 2019/12/20 10:05:05 UTC
+4 : 2019年12月20日
+5 : 2019-12-20
+6 : 10時05分05秒
+7 : 10:05:05
+```
+
 ## バージョン
 ### 言語
 - C++20
@@ -153,4 +208,5 @@ UTC
 
 
 ## 関連項目
-- [`local_time_format()`](local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`std::format()`](/reference/chrono/format.md) (出力フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday.md b/reference/chrono/weekday.md
index 1efa73146..aa1a891e0 100644
--- a/reference/chrono/weekday.md
+++ b/reference/chrono/weekday.md
@@ -86,6 +86,13 @@ namespace std::chrono {
 | [`from_stream`](weekday/from_stream.md) | フォーマット指定して入力ストリームから入力する | C++20 |
 
 
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](weekday/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday/formatter.md b/reference/chrono/weekday/formatter.md
new file mode 100644
index 000000000..e2baddef0
--- /dev/null
+++ b/reference/chrono/weekday/formatter.md
@@ -0,0 +1,73 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::weekday, charT&amp;gt;;
+}
+```
+
+## 概要
+`weekday`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+| フォーマットフラグ | 説明 |
+|--------------------|------|
+| `%a` | ロケール依存の曜日の略称 |
+| `%A` | ロケール依存の曜日の完全名 |
+| `%u` | 10進数での月曜を1とするISO曜日番号 (1-7) |
+| `%Ou` | ロケール依存の`%u`の異なる表現 |
+| `%w` | 10進数での日曜を0とするISO曜日番号 (0-6) |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::Sunday) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%a}&amp;#34;, chrono::Sunday) &amp;lt;&amp;lt; std::endl; // 略称
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%A}&amp;#34;, chrono::Sunday) &amp;lt;&amp;lt; std::endl; // 完全名
+
+  // ロケール依存の出力
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%a}&amp;#34;, chrono::Sunday) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%A}&amp;#34;, chrono::Sunday) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::format[link /reference/chrono/format.md]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* std::locale[link /reference/locale/locale.md]
+
+### 出力
+```
+Sun
+Sun
+Sunday
+日
+日曜日
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_stream -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday/from_stream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday/from_stream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday/from_stream.md b/reference/chrono/weekday/from_stream.md
index d1206c9bc..65232c5f8 100644
--- a/reference/chrono/weekday/from_stream.md
+++ b/reference/chrono/weekday/from_stream.md
@@ -31,10 +31,6 @@ namespace std::chrono {
 `is`を返す
 
 
-## 備考
-- この解析においては、曜日のフォーマットは、ロケール規定の完全もしくは短縮された曜日名を意味する`%a`が使用される。そのため、デフォルトのCロケールにおいては、日曜日を入力するために`&amp;#34;Sunday`&amp;#34; (完全名) と`&amp;#34;Sun&amp;#34;` (短縮名)の2通りが使用でき、ほかの曜日も同様である
-
-
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
@@ -81,4 +77,4 @@ int main()
 
 
 ## 関連項目
-- [`local_time_format()`](/reference/chrono/local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday/op_at.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday/op_at.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday/op_at.md b/reference/chrono/weekday/op_at.md
index 8909705eb..a22e9dbf6 100644
--- a/reference/chrono/weekday/op_at.md
+++ b/reference/chrono/weekday/op_at.md
@@ -12,8 +12,8 @@ constexpr weekday_indexed
 constexpr weekday_last
   operator[](last_spec) const noexcept;          // (2) C++20
 ```
-* weekday_indexed[link /reference/chrono/weekday_indexed.md.nolink]
-* weekday_last[link /reference/chrono/weekday_last.md.nolink]
+* weekday_indexed[link /reference/chrono/weekday_indexed.md]
+* weekday_last[link /reference/chrono/weekday_last.md]
 * last_spec[link /reference/chrono/last_spec.md]
 
 ## 概要
@@ -25,7 +25,7 @@ constexpr weekday_last
 
 ## 戻り値
 - (1) : `{*this, index}`
-- (2) : [`weekday_last`](/reference/chrono/weekday_last.md.nolink)`{*this}`
+- (2) : [`weekday_last`](/reference/chrono/weekday_last.md)`{*this}`
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday/op_ostream.md b/reference/chrono/weekday/op_ostream.md
index b90263dcf..2893fa338 100644
--- a/reference/chrono/weekday/op_ostream.md
+++ b/reference/chrono/weekday/op_ostream.md
@@ -98,4 +98,4 @@ Sat
 
 
 ## 関連項目
-- [`local_time_format()`](/reference/chrono/local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday_indexed -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_indexed.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed.md b/reference/chrono/weekday_indexed.md
new file mode 100644
index 000000000..ae9f591c3
--- /dev/null
+++ b/reference/chrono/weekday_indexed.md
@@ -0,0 +1,110 @@
+# weekday_indexed
+* chrono[meta header]
+* std::chrono[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  class weekday_indexed;
+}
+```
+
+## 概要
+`weekday_indexed`は、月内でのN回目の指定した曜日を表すクラスである。
+
+Nの妥当な範囲は`[1, 5]`である。0ベースではないことに注意。
+
+このクラスは等値比較ができ、[EqualityComparable](/reference/concepts/equality_comparable.md)の要件を満たす。しかし大小比較はできず、LessThanComparable要件は満たさない。
+
+このクラスは、[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)で、かつ[スタンダードレイアウト型](/reference/type_traits/is_standard_layout.md)である。
+
+
+## メンバ関数
+### 構築／コピー／破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](weekday_indexed/op_constructor.md) | コンストラクタ | C++20 |
+| `weekday_indexed&amp;amp; operator=(const weekday_indexed&amp;amp;) = default;`&amp;lt;br/&amp;gt; `weekday_indexed&amp;amp; operator=(weekday_indexed&amp;amp;&amp;amp;) = default;` | 代入演算子 | C++20 |
+
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`weekday`](weekday_indexed/weekday.md) | 曜日を取得する | C++20 |
+| [`index`](weekday_indexed/index.md) | インデックスを取得する | C++20 |
+| [`ok`](weekday_indexed/ok.md) | 値が範囲に収まっているか判定する | C++20 |
+
+
+## 非メンバ関数
+### 比較演算
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](weekday_indexed/op_equal.md) | 等値比較を行う | C++20 |
+| `bool operator!=(const weekday_indexed&amp;amp;, const weekday_indexed&amp;amp;) noexcept;` | 非等値比較を行う (`==`により使用可能) | C++20 |
+
+
+### 入出力
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator&amp;lt;&amp;lt;`](weekday_indexed/op_ostream.md) | 出力ストリームに出力する | C++20 |
+
+
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](weekday_indexed/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main() {
+  // 未規定の年月の、最初の日曜日
+  auto wi1 = chrono::Sunday[1];
+  chrono::weekday_indexed wi2{chrono::Sunday, 1};
+  assert(wi1.weekday() == chrono::Sunday);
+  assert(wi1.index() == 1);
+  assert(wi1 == wi2);
+
+  // 2020年4月の最初の日曜日を取得する
+  chrono::year_month_weekday ymw = 2020y/4/chrono::Sunday[1];
+  chrono::sys_days sd{ymw};
+  chrono::year_month_day date{sd};
+  std::cout &amp;lt;&amp;lt; date &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::weekday_indexed[color ff0000]
+* chrono::Sunday[link weekday_constants.md]
+* 2020y[link year/op_y.md]
+* wi1.weekday()[link weekday_indexed/weekday.md]
+* wi1.index()[link weekday_indexed/index.md]
+* chrono::year_month_weekday[link year_month_weekday.md.nolink]
+* chrono::sys_days[link sys_time.md]
+* chrono::year_month_day[link year_month_day.md]
+
+### 出力
+```
+2020-04-05
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0 (入出力ストリームなし)
+- [GCC](/implementation.md#gcc): (10.1時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_indexed/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/formatter.md b/reference/chrono/weekday_indexed/formatter.md
new file mode 100644
index 000000000..ebf23af1a
--- /dev/null
+++ b/reference/chrono/weekday_indexed/formatter.md
@@ -0,0 +1,75 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::weekday_indexed, charT&amp;gt;;
+}
+```
+
+## 概要
+`weekday_indexed`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+| フォーマットフラグ | 説明 |
+|--------------------|------|
+| `%a` | ロケール依存の曜日の略称 |
+| `%A` | ロケール依存の曜日の完全名 |
+| `%u` | 10進数での月曜を1とするISO曜日番号 (1-7) |
+| `%Ou` | ロケール依存の`%u`の異なる表現 |
+| `%w` | 10進数での日曜を0とするISO曜日番号 (0-6) |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%a}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl; // 曜日の略称
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%A}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl; // 曜日の完全名
+
+  // ロケール依存の出力
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%a}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%A}&amp;#34;, chrono::Sunday[1]) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::format[link /reference/chrono/format.md]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* std::locale[link /reference/locale/locale.md]
+
+### 出力
+```
+Sun[1]
+Sun
+Sunday
+日[1]
+日
+日曜日
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/index.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_indexed/index.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/index.md b/reference/chrono/weekday_indexed/index.md
new file mode 100644
index 000000000..576708e1b
--- /dev/null
+++ b/reference/chrono/weekday_indexed/index.md
@@ -0,0 +1,50 @@
+# weekday
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_indexed[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr unsigned int index() const noexcept; // (1) C++20
+```
+
+## 概要
+インデックスを取得する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している曜日のインデックスを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::weekday_indexed wi = chrono::Sunday[1];
+  unsigned int index = wi.index();
+
+  assert(index == 1);
+}
+```
+* index()[color ff0000]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ok -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/ok.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_indexed/ok.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/ok.md b/reference/chrono/weekday_indexed/ok.md
new file mode 100644
index 000000000..5e73b871a
--- /dev/null
+++ b/reference/chrono/weekday_indexed/ok.md
@@ -0,0 +1,59 @@
+# ok
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_indexed[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr bool ok() const noexcept; // (1) C++20
+```
+
+## 概要
+`weekday_indexed`オブジェクトが保持する曜日とインデックスが妥当な範囲内にあるかを判定する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している曜日を表す値`wd_`、およびインデックス値`index_`があるとして、以下を返す：
+
+```cpp
+return wd_.ok() &amp;amp;&amp;amp; 1 &amp;lt;= index_ &amp;amp;&amp;amp; index_ &amp;lt;= 5;
+```
+* wd_.ok()[link /reference/chrono/weekday/ok.md]
+
+## 備考
+- この関数は、値の妥当性を検証するのではなく、カレンダー範囲の値をもっているかの判定をする
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  assert(chrono::Sunday[1].ok());
+  assert(!chrono::Sunday[0].ok());
+  assert(!chrono::Sunday[6].ok());
+  assert(!(chrono::weekday_indexed{chrono::weekday{8}, 1}).ok());
+}
+```
+* ok()[color ff0000]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* chrono::weekday[link /reference/chrono/weekday.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/op_constructor.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_indexed/op_constructor.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/op_constructor.md b/reference/chrono/weekday_indexed/op_constructor.md
new file mode 100644
index 000000000..95472dda1
--- /dev/null
+++ b/reference/chrono/weekday_indexed/op_constructor.md
@@ -0,0 +1,65 @@
+# コンストラクタ
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_indexed[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+weekday_indexed() = default;                            // (1) C++20
+constexpr weekday_indexed(const chrono::weekday&amp;amp; wd,
+                          unsigned int index) noexcept; // (2) C++20
+
+weekday_indexed(const weekday_indexed&amp;amp;) = default;      // (3) C++20
+weekday_indexed(weekday_indexed&amp;amp;&amp;amp;) = default;           // (4) C++20
+```
+* weekday[link /reference/chrono/weekday.md]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : 曜日とインデックスを指定して`weekday_indexed`オブジェクトを構築する
+- (3) : コピーコンストラクタ
+- (4) : ムーブコンストラクタ
+
+
+## 効果
+- (1) :
+    - デフォルト初期化では曜日とインデックスは符号なし整数の未初期化値となり、値初期化では値0となる
+- (2) :
+    - `wd`と`index`をメンバ変数として保持する
+    - `!wd.`[`ok()`](/reference/chrono/weekday/ok.md)もしくは`index`の値範囲が`[0, 7]`に含まれなければ、それぞれの保持される値は未規定
+
+
+## 例外
+投げない
+
+
+### 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main() {
+  chrono::weekday_indexed wi{chrono::Sunday, 1};
+  assert(wi.weekday() == chrono::Sunday);
+  assert(wi.index() == 1);
+}
+```
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* wi.weekday()[link weekday.md]
+* wi.index()[link index.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/op_equal.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_indexed/op_equal.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/op_equal.md b/reference/chrono/weekday_indexed/op_equal.md
new file mode 100644
index 000000000..168cc8c15
--- /dev/null
+++ b/reference/chrono/weekday_indexed/op_equal.md
@@ -0,0 +1,63 @@
+# operator==
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr bool operator==(const weekday_indexed&amp;amp; x, const weekday_indexed&amp;amp; y) noexcept; // (1) C++20
+}
+```
+
+## 概要
+`weekday_indexed`同士の等値比較を行う。
+
+
+## 戻り値
+- (1) :
+
+```cpp
+return x.weekday() == y.weekday() &amp;amp;&amp;amp; x.index() == y.index();
+```
+* weekday()[link weekday.md]
+* index()[link index.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、`operator!=`が使用可能になる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  assert(chrono::Sunday[1] == chrono::Sunday[1]);
+  assert(chrono::Sunday[1] != chrono::Sunday[2]);
+  assert(chrono::Sunday[1] != chrono::Monday[1]);
+}
+```
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* chrono::Monday[link /reference/chrono/weekday_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_indexed/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/op_ostream.md b/reference/chrono/weekday_indexed/op_ostream.md
new file mode 100644
index 000000000..734ef2c0b
--- /dev/null
+++ b/reference/chrono/weekday_indexed/op_ostream.md
@@ -0,0 +1,66 @@
+# operator&amp;lt;&amp;lt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits&amp;gt;
+  std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os, const weekday_indexed&amp;amp; wdi); // (1) C++20
+}
+```
+
+## 概要
+`weekday_indexed`オブジェクトを出力ストリームに出力する。
+
+
+## 戻り値
+便宜上のリテラルキャスト`STATICALLY-WIDEN`を導入する。`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;...&amp;#34;)`は、`charT`が`char`である場合は`&amp;#34;...&amp;#34;`、`charT`が`wchar_t`である場合は`L&amp;#34;...&amp;#34;`を意味する。
+
+- (1) : 以下と等価：
+    ```cpp
+    auto i = wdi.index();
+    return os &amp;lt;&amp;lt; (i &amp;gt;= 1 &amp;amp;&amp;amp; i &amp;lt;= 5 ?
+      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}[{}]&amp;#34;), wdi.weekday(), i) :
+      format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}[{} is not a valid index]&amp;#34;),
+             wdi.weekday(), i));
+    ```
+    * wdi.index()[link index.md]
+    * format[link /reference/chrono/format.md]
+    * wdi.weekday()[link weekday.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; chrono::Sunday[1] &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+
+### 出力
+```
+Sun[1]
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_indexed/weekday.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_indexed/weekday.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_indexed/weekday.md b/reference/chrono/weekday_indexed/weekday.md
new file mode 100644
index 000000000..6c27d639a
--- /dev/null
+++ b/reference/chrono/weekday_indexed/weekday.md
@@ -0,0 +1,52 @@
+# weekday
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_indexed[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr chrono::weekday weekday() const noexcept; // (1) C++20
+```
+* chrono::weekday[link /reference/chrono/weekday.md]
+
+## 概要
+曜日を取得する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している[`weekday`](/reference/chrono/weekday.md)型オブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::weekday_indexed wi = chrono::Sunday[1];
+  chrono::weekday w = wi.weekday();
+
+  assert(w == chrono::Sunday);
+}
+```
+* weekday()[color ff0000]
+* chrono::weekday[link /reference/chrono/weekday.md]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday_last -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_last.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_last.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_last.md b/reference/chrono/weekday_last.md
new file mode 100644
index 000000000..84e865b01
--- /dev/null
+++ b/reference/chrono/weekday_last.md
@@ -0,0 +1,106 @@
+# weekday_last
+* chrono[meta header]
+* std::chrono[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  class weekday_last;
+}
+```
+
+## 概要
+`weekday_last`は、月内での指定した最終曜日を表すクラスである。
+
+このクラスは等値比較ができ、[EqualityComparable](/reference/concepts/equality_comparable.md)の要件を満たす。しかし大小比較はできず、LessThanComparable要件は満たさない。
+
+このクラスは、[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)で、かつ[スタンダードレイアウト型](/reference/type_traits/is_standard_layout.md)である。
+
+
+## メンバ関数
+### 構築／コピー／破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](weekday_last/op_constructor.md) | コンストラクタ | C++20 |
+| `weekday_last&amp;amp; operator=(const weekday_last&amp;amp;) = default;`&amp;lt;br/&amp;gt; `weekday_last&amp;amp; operator=(weekday_last&amp;amp;&amp;amp;) = default;` | 代入演算子 | C++20 |
+
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`weekday`](weekday_last/weekday.md) | 曜日を取得する | C++20 |
+| [`ok`](weekday_last/ok.md) | 値が範囲に収まっているか判定する | C++20 |
+
+
+## 非メンバ関数
+### 比較演算
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](weekday_last/op_equal.md) | 等値比較を行う | C++20 |
+| `bool operator!=(const weekday_last&amp;amp;, const weekday_last&amp;amp;) noexcept;` | 非等値比較を行う (`==`により使用可能) | C++20 |
+
+
+### 入出力
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator&amp;lt;&amp;lt;`](weekday_last/op_ostream.md) | 出力ストリームに出力する | C++20 |
+
+
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](weekday_last/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main() {
+  // 未規定の年月の、最後の日曜日
+  auto wl1 = chrono::Sunday[chrono::last];
+  chrono::weekday_last wl2{chrono::Sunday};
+  assert(wl1.weekday() == chrono::Sunday);
+  assert(wl1 == wl2);
+
+  // 2020年4月の最後の日曜日を取得する
+  chrono::year_month_weekday_last ymwl = 2020y/4/chrono::Sunday[chrono::last];
+  chrono::sys_days sd{ymwl};
+  chrono::year_month_day date{sd};
+  std::cout &amp;lt;&amp;lt; date &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::weekday_last[color ff0000]
+* chrono::Sunday[link weekday_constants.md]
+* chrono::last[link last_spec.md]
+* 2020y[link year/op_y.md]
+* wl1.weekday()[link weekday_indexed/weekday.md]
+* chrono::year_month_weekday_last[link year_month_weekday_last.md.nolink]
+* chrono::sys_days[link sys_time.md]
+* chrono::year_month_day[link year_month_day.md]
+
+### 出力
+```
+2020-04-26
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0 (入出力ストリームなし)
+- [GCC](/implementation.md#gcc): (10.1時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_last/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_last/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_last/formatter.md b/reference/chrono/weekday_last/formatter.md
new file mode 100644
index 000000000..b5b722ecd
--- /dev/null
+++ b/reference/chrono/weekday_last/formatter.md
@@ -0,0 +1,77 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::weekday_last, charT&amp;gt;;
+}
+```
+
+## 概要
+`weekday_last`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+| フォーマットフラグ | 説明 |
+|--------------------|------|
+| `%a` | ロケール依存の曜日の略称 |
+| `%A` | ロケール依存の曜日の完全名 |
+| `%u` | 10進数での月曜を1とするISO曜日番号 (1-7) |
+| `%Ou` | ロケール依存の`%u`の異なる表現 |
+| `%w` | 10進数での日曜を0とするISO曜日番号 (0-6) |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::weekday_last wl = chrono::Sunday[chrono::last];
+
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, wl) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%a}&amp;#34;, wl) &amp;lt;&amp;lt; std::endl; // 曜日の略称
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%A}&amp;#34;, wl) &amp;lt;&amp;lt; std::endl; // 曜日の完全名
+
+  // ロケール依存の出力
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{}&amp;#34;, wl) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%a}&amp;#34;, wl) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%A}&amp;#34;, wl) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::format[link /reference/chrono/format.md]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* std::locale[link /reference/locale/locale.md]
+
+### 出力
+```
+Sun[last]
+Sun
+Sunday
+日[last]
+日
+日曜日
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ok -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_last/ok.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_last/ok.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_last/ok.md b/reference/chrono/weekday_last/ok.md
new file mode 100644
index 000000000..11800a94a
--- /dev/null
+++ b/reference/chrono/weekday_last/ok.md
@@ -0,0 +1,55 @@
+# ok
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_last[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr bool ok() const noexcept; // (1) C++20
+```
+
+## 概要
+`weekday_last`オブジェクトが保持する曜日が妥当な範囲内にあるかを判定する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している曜日を表す値`wd_`があるとして、以下を返す：
+
+```cpp
+return wd_.ok();
+```
+* wd_.ok()[link /reference/chrono/weekday/ok.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  assert(chrono::Sunday[chrono::last].ok());
+  assert(!(chrono::weekday_last{chrono::weekday{8}}).ok());
+}
+```
+* ok()[color ff0000]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* chrono::weekday[link /reference/chrono/weekday.md]
+* chrono::last[link /reference/chrono/last_spec.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_last/op_constructor.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_last/op_constructor.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_last/op_constructor.md b/reference/chrono/weekday_last/op_constructor.md
new file mode 100644
index 000000000..4a667ee18
--- /dev/null
+++ b/reference/chrono/weekday_last/op_constructor.md
@@ -0,0 +1,60 @@
+# コンストラクタ
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_last[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+weekday_last() = default;                    // (1) C++20
+constexpr explicit weekday_last(
+  const chrono::weekday&amp;amp; wd) noexcept;       // (2) C++20
+
+weekday_last(const weekday_last&amp;amp;) = default; // (3) C++20
+weekday_last(weekday_last&amp;amp;&amp;amp;) = default;      // (4) C++20
+```
+* weekday[link /reference/chrono/weekday.md]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : 曜日を指定して`weekday_last`オブジェクトを構築する
+- (3) : コピーコンストラクタ
+- (4) : ムーブコンストラクタ
+
+
+## 効果
+- (1) : デフォルト初期化では曜日の未初期化値となり、値初期化では値0 (日曜日) となる
+- (2) : `wd`をメンバ変数として保持する
+
+
+## 例外
+投げない
+
+
+### 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main() {
+  chrono::weekday_last wl{chrono::Sunday};
+  assert(wl.weekday() == chrono::Sunday);
+}
+```
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* wl.weekday()[link weekday.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_last/op_equal.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_last/op_equal.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_last/op_equal.md b/reference/chrono/weekday_last/op_equal.md
new file mode 100644
index 000000000..67378d9f6
--- /dev/null
+++ b/reference/chrono/weekday_last/op_equal.md
@@ -0,0 +1,62 @@
+# operator==
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr bool operator==(const weekday_last&amp;amp; x, const weekday_last&amp;amp; y) noexcept; // (1) C++20
+}
+```
+
+## 概要
+`weekday_last`同士の等値比較を行う。
+
+
+## 戻り値
+- (1) :
+
+```cpp
+return x.weekday() == y.weekday();
+```
+* weekday()[link weekday.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、`operator!=`が使用可能になる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  assert(chrono::Sunday[chrono::last] == chrono::Sunday[chrono::last]);
+  assert(chrono::Sunday[chrono::last] != chrono::Monday[chrono::last]);
+}
+```
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* chrono::Monday[link /reference/chrono/weekday_constants.md]
+* chrono::last[link /reference/chrono/last_spec.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_last/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_last/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_last/op_ostream.md b/reference/chrono/weekday_last/op_ostream.md
new file mode 100644
index 000000000..476b87364
--- /dev/null
+++ b/reference/chrono/weekday_last/op_ostream.md
@@ -0,0 +1,62 @@
+# operator&amp;lt;&amp;lt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits&amp;gt;
+  std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(std::basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os, const weekday_last&amp;amp; wdl); // (1) C++20
+}
+```
+
+## 概要
+`weekday_last`オブジェクトを出力ストリームに出力する。
+
+
+## 戻り値
+便宜上のリテラルキャスト`STATICALLY-WIDEN`を導入する。`STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;...&amp;#34;)`は、`charT`が`char`である場合は`&amp;#34;...&amp;#34;`、`charT`が`wchar_t`である場合は`L&amp;#34;...&amp;#34;`を意味する。
+
+- (1) : 以下と等価：
+    ```cpp
+    return os &amp;lt;&amp;lt; format(os.getloc(), STATICALLY-WIDEN&amp;lt;charT&amp;gt;(&amp;#34;{}[last]&amp;#34;), wdl.weekday());
+    ```
+    * format[link /reference/chrono/format.md]
+    * wdl.weekday()[link weekday.md]
+    * os.getloc()[link /reference/ios/ios_base/getloc.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; chrono::Sunday[chrono::last] &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* chrono::last[link /reference/chrono/last_spec.md]
+
+### 出力
+```
+Sun[last]
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weekday -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/weekday_last/weekday.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/weekday_last/weekday.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/weekday_last/weekday.md b/reference/chrono/weekday_last/weekday.md
new file mode 100644
index 000000000..216b87776
--- /dev/null
+++ b/reference/chrono/weekday_last/weekday.md
@@ -0,0 +1,53 @@
+# weekday
+* chrono[meta header]
+* std::chrono[meta namespace]
+* weekday_last[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr chrono::weekday weekday() const noexcept; // (1) C++20
+```
+* chrono::weekday[link /reference/chrono/weekday.md]
+
+## 概要
+曜日を取得する。
+
+
+## 戻り値
+コンストラクタで設定されて保持している[`weekday`](/reference/chrono/weekday.md)型オブジェクトを返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  chrono::weekday_last wl = chrono::Sunday[chrono::last];
+  chrono::weekday w = wl.weekday();
+
+  assert(w == chrono::Sunday);
+}
+```
+* weekday()[color ff0000]
+* chrono::weekday[link /reference/chrono/weekday.md]
+* chrono::Sunday[link /reference/chrono/weekday_constants.md]
+* chrono::last[link /reference/chrono/last_spec.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 8.0
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>year -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/year.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year.md b/reference/chrono/year.md
index af4bef89a..0dde7e599 100644
--- a/reference/chrono/year.md
+++ b/reference/chrono/year.md
@@ -119,6 +119,13 @@ namespace std::chrono {
 | [`y`](year/op_y.md) | 年リテラル | C++20 |
 
 
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](year/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/year/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year/formatter.md b/reference/chrono/year/formatter.md
new file mode 100644
index 000000000..585cda9f5
--- /dev/null
+++ b/reference/chrono/year/formatter.md
@@ -0,0 +1,76 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::year, charT&amp;gt;;
+}
+```
+
+## 概要
+`year`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+| フォーマットフラグ | 説明 |
+|--------------------|------|
+| `%C`  | 100で切り下げ除算した2桁0埋め10進数の年 (世紀) |
+| `$EC` | ロケール依存の世紀の異なる表現 (日本だと元号 `&amp;#34;令和&amp;#34;`) |
+| `%g`  | ISOの週ベースのうしろ2桁0埋め10進数の年 |
+| `%G`  | ISOの週ベースの4桁0埋め10進数の年 |
+| `%y`  | うしろ2桁0埋め10進数の年 |
+| `%Ey` | ロケール依存の世紀からのオフセット年 (日本だと元号ベースで`&amp;#34;02年&amp;#34;`) |
+| `%Y`  | 4桁0埋め10進数の年 |
+| `%EY` | ロケール依存の完全な年 (日本だと元号含めて`&amp;#34;令和02年&amp;#34;`) |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::year{2020}) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%Y}&amp;#34;, chrono::year{2020}) &amp;lt;&amp;lt; std::endl; // 4桁の年
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%y}&amp;#34;, chrono::year{2020}) &amp;lt;&amp;lt; std::endl; // うしろ2桁の年
+
+  // ロケール依存の出力
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%EC}&amp;#34;, chrono::year{2020}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%Ey}&amp;#34;, chrono::year{2020}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;{:%EY}&amp;#34;, chrono::year{2020}) &amp;lt;&amp;lt; std::endl;
+}
+```
+- std::format[link /reference/chrono/format.md]
+
+### 出力
+```
+2020
+2020
+20
+令和
+02年
+令和02年
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_stream -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year/from_stream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/year/from_stream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year/from_stream.md b/reference/chrono/year/from_stream.md
index 4578d3d5f..98ffed589 100644
--- a/reference/chrono/year/from_stream.md
+++ b/reference/chrono/year/from_stream.md
@@ -31,10 +31,6 @@ namespace std::chrono {
 `is`を返す
 
 
-## 備考
-- この解析においては、日のフォーマットは、デフォルトで4桁ゼロ埋めの日を意味する`%Y`が使用される。3桁の年として123年を表すために`0123`および`123`のどちらでも入力できる。4桁の未満の場合、ゼロ埋めは必須ではない。ゼロ埋めの桁数を指定する`%NY`も指定できる
-
-
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
@@ -80,4 +76,4 @@ int main()
 
 
 ## 関連項目
-- [`local_time_format()`](/reference/chrono/local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/year/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year/op_ostream.md b/reference/chrono/year/op_ostream.md
index 4d49d4fe3..ae3a9a27f 100644
--- a/reference/chrono/year/op_ostream.md
+++ b/reference/chrono/year/op_ostream.md
@@ -61,4 +61,4 @@ int main()
 
 
 ## 関連項目
-- [`local_time_format()`](/reference/chrono/local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>year_month_day -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year_month_day.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/year_month_day.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year_month_day.md b/reference/chrono/year_month_day.md
index f22bf93f5..89c9eef9f 100644
--- a/reference/chrono/year_month_day.md
+++ b/reference/chrono/year_month_day.md
@@ -91,6 +91,13 @@ namespace std::chrono {
 | [`from_stream`](year_month_day/from_stream.md) | フォーマット指定して入力ストリームから入力する | C++20 |
 
 
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](year_month_day/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
 ## 例
 ### 基本的な使い方 (C++20)
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year_month_day/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/year_month_day/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year_month_day/formatter.md b/reference/chrono/year_month_day/formatter.md
new file mode 100644
index 000000000..9b3b22343
--- /dev/null
+++ b/reference/chrono/year_month_day/formatter.md
@@ -0,0 +1,81 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::year_month_day, charT&amp;gt;;
+}
+```
+
+## 概要
+`year_month_day`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマットフラグとしては、以下を使用できる：
+
+| フォーマットフラグ | 説明 |
+|--------------------|------|
+| `%D` | `%m/%d/%y`と等価 |
+| `%F` | `%Y-%m-%d`と等価 |
+| `%j` | 年の日 (1月1日を`001`とした経過日) |
+| `%x` | ロケール依存の日付表現 |
+| `%Ex` | `%x`の異なる表現 |
+
+その他、[`day`](/reference/chrono/day/formatter.md)、[`month`](/reference/chrono/month/formatter.md)、[`year`](/reference/chrono/year/formatter.md)で利用可能なフォーマットフラグを使用できる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main() {
+  chrono::year_month_day date = 2020y/3/1;
+
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {:%D}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {:%F}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : {:%x}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5 : {:%Y年%m月%d日}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+
+  // ロケール依存の出力
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;6 : {:%x}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;7 : {:%Ex}&amp;#34;, date) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::format[link /reference/chrono/format.md]
+* std::locale[link /reference/locale/locale.md]
+* 2020y[link /reference/chrono/year/op_y.md]
+
+### 出力
+```
+1 : 2020-03-01
+2 : Mar/01/2020
+3 : 2020-03-01
+4 : 03/01/20
+5 : 2020年03月01日
+6 : 2020年03月01日
+7 : 令和02年03月01日
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_stream -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year_month_day/from_stream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/year_month_day/from_stream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year_month_day/from_stream.md b/reference/chrono/year_month_day/from_stream.md
index 662984ce8..0e33d88aa 100644
--- a/reference/chrono/year_month_day/from_stream.md
+++ b/reference/chrono/year_month_day/from_stream.md
@@ -31,10 +31,6 @@ namespace std::chrono {
 `is`を返す
 
 
-## 備考
-- この解析においては、`year_month_day`のフォーマットは、デフォルトで`&amp;#34;%F&amp;#34;`が使用される。これは`&amp;#34;%Y-%m-%d&amp;#34;`と等価であり、ハイフン区切りで年、月、日を整数値として解析する
-
-
 ## 例
 ```cpp example
 #include &amp;lt;cassert&amp;gt;
@@ -59,7 +55,7 @@ int main()
     ss &amp;lt;&amp;lt; &amp;#34;2020-03-01&amp;#34;;
 
     chrono::year_month_day ymd;
-    chrono::from_stream(ss, ymd, &amp;#34;%04F&amp;#34;); // 年の桁数を指定する
+    chrono::from_stream(ss, ymd, &amp;#34;%4F&amp;#34;); // 年の桁数を指定する
     assert(ymd == 2020y/3/1);
   }
 }
@@ -82,4 +78,4 @@ int main()
 
 
 ## 関連項目
-- [`local_time_format()`](/reference/chrono/local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`parse()`](/reference/chrono/parse.md) (入力フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/year_month_day/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/year_month_day/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/year_month_day/op_ostream.md b/reference/chrono/year_month_day/op_ostream.md
index 90110c7cd..63e9ba520 100644
--- a/reference/chrono/year_month_day/op_ostream.md
+++ b/reference/chrono/year_month_day/op_ostream.md
@@ -29,7 +29,7 @@ namespace std::chrono {
 
 
 ## 備考
-- フォーマット指定子`&amp;#34;%F&amp;#34;`は`&amp;#34;%Y-%m-%d&amp;#34;`と等価であり、4桁ゼロ埋め整数値の年、2桁ゼロ埋め整数値の月、2桁ゼロ埋め整数値の日が、ハイフン区切りで出力される
+- フォーマットフラグ`&amp;#34;%F&amp;#34;`は`&amp;#34;%Y-%m-%d&amp;#34;`と等価であり、4桁ゼロ埋め整数値の年、2桁ゼロ埋め整数値の月、2桁ゼロ埋め整数値の日が、ハイフン区切りで出力される
 
 
 ## 例
@@ -62,4 +62,4 @@ int main()
 
 
 ## 関連項目
-- [`local_time_format()`](/reference/chrono/local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zoned_time -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/zoned_time.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/zoned_time.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/zoned_time.md b/reference/chrono/zoned_time.md
index 1c4162efc..03d356f4a 100644
--- a/reference/chrono/zoned_time.md
+++ b/reference/chrono/zoned_time.md
@@ -76,11 +76,19 @@ namespace std::chrono {
 ## 推論補助
 
 | 名前 | 説明 | 対応バージョン |
-|---------------------------------------------|------------------------------------|-------|
+|------|------|----------------|
 | [`(deduction_guide)`](zoned_time/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20 |
 
 
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](zoned_time/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;chrono&amp;gt;
@@ -91,39 +99,106 @@ int main()
 {
   // システム時間はUTCタイムゾーンをもつ
   auto now = chrono::system_clock::now();
+  chrono::sys_seconds now_sec = chrono::floor&amp;lt;chrono::seconds&amp;gt;(now); // 秒単位
 
   // タイムゾーン情報なしで日時を出力する
   // (ローカルタイムゾーンへの変換はしてくれないので、デフォルトではUTCタイムゾーンで出力される)
-  std::cout &amp;lt;&amp;lt; now &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;1 : &amp;#34; &amp;lt;&amp;lt; now &amp;lt;&amp;lt; std::endl;
 
   // タイムゾーン付きで日時を出力する
-  std::cout &amp;lt;&amp;lt; chrono::zoned_time{now} &amp;lt;&amp;lt; std::endl;               // デフォルトタイムゾーン (UTC)
-  std::cout &amp;lt;&amp;lt; chrono::zoned_time{&amp;#34;Asia/Tokyo&amp;#34;, now} &amp;lt;&amp;lt; std::endl; // 日本 (UTC + 9時間)
-  std::cout &amp;lt;&amp;lt; chrono::zoned_time{&amp;#34;UTC&amp;#34;, now} &amp;lt;&amp;lt; std::endl;        // UTC
+  std::cout &amp;lt;&amp;lt; &amp;#34;2 : &amp;#34; &amp;lt;&amp;lt; chrono::zoned_time{now} &amp;lt;&amp;lt; std::endl;                   // デフォルトタイムゾーン (UTC)
+  std::cout &amp;lt;&amp;lt; &amp;#34;3 : &amp;#34; &amp;lt;&amp;lt; chrono::zoned_time{&amp;#34;Asia/Tokyo&amp;#34;, now} &amp;lt;&amp;lt; std::endl;     // 日本 (UTC + 9時間)
+  std::cout &amp;lt;&amp;lt; &amp;#34;4 : &amp;#34; &amp;lt;&amp;lt; chrono::zoned_time{&amp;#34;UTC&amp;#34;, now} &amp;lt;&amp;lt; std::endl;            // UTC
+  std::cout &amp;lt;&amp;lt; &amp;#34;5 : &amp;#34; &amp;lt;&amp;lt; chrono::zoned_time{&amp;#34;Asia/Tokyo&amp;#34;, now_sec} &amp;lt;&amp;lt; std::endl; // 日本 (秒単位)
 
   // コンピュータに設定されているタイムゾーンで、日時を出力する
-  std::cout &amp;lt;&amp;lt; chrono::zoned_time{chrono::current_zone(), now} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;6 : &amp;#34; &amp;lt;&amp;lt; chrono::zoned_time{chrono::current_zone(), now} &amp;lt;&amp;lt; std::endl;
 
   // UTCタイムゾーンのシステム時間を、日本のローカル時間に変換
   chrono::local_time lt = chrono::zoned_time{&amp;#34;Asia/Tokyo&amp;#34;, now}.get_local_time();
-  std::cout &amp;lt;&amp;lt; lt &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;7 : &amp;#34;lt &amp;lt;&amp;lt; std::endl;
 }
 ```
 * chrono::zoned_time[color ff0000]
 * chrono::system_clock[link system_clock.md]
 * now()[link system_clock/now.md]
+* chrono::sys_seconds[link sys_time.md]
+* chrono::floor[link time_point/floor.md]
 * chrono::current_zone()[link current_zone.md]
 * chrono::local_time[link local_time.md]
 * get_local_time[link zoned_time/get_local_time.md]
 
-### 出力例
+#### 出力例
+```
+1 : 2019-12-20 10:05:05
+2 : 2019-12-20 10:05:05.330140 UTC
+3 : 2019-12-20 19:05:05.330140 JST
+4 : 2019-12-20 10:05:05.330140 UTC
+5 : 2019-12-20 19:05:05 JST
+6 : 2019-12-20 19:05:05.330140 JST
+7 : 2019-12-20 19:05:05
+```
+
+### 文字列フォーマットの例
+```cpp
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // システム時間はUTCタイムゾーンをもつ
+  auto now = chrono::system_clock::now();
+  chrono::sys_seconds now_sec = chrono::floor&amp;lt;chrono::seconds&amp;gt;(now); // 秒単位
+
+  chrono::zoned_time zt{&amp;#34;Asia/Tokyo&amp;#34;, now};
+  chrono::zoned_seconds zt_sec{&amp;#34;Asia/Tokyo&amp;#34;, now_sec};
+
+  // デフォルトフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, zt) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {}&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 「年月日 時分秒」のフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : {0:%Y/%m/%d %H:%M:%S}&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5 : %Y年%m月%d日&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6 : %F&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 時間だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7 : %H時%M分%S秒&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;8 : %T&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 12時間時計で出力
+  // (%pでロケール固有の「午前」「午後」を出力するには、日本のロケールを指定する必要がある)
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;9 : %Y年%m月%d日 %p %I時%M分%S秒&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::zoned_time[color ff0000]
+* chrono::zoned_seconds[color ff0000]
+* chrono::system_clock[link system_clock.md]
+* now()[link system_clock/now.md]
+* chrono::sys_seconds[link sys_time.md]
+* chrono::floor[link time_point/floor.md]
+* std::format[link format.md]
+* std::locale[link /reference/locale/locale.md]
+
+#### 出力例
 ```
-2019-12-20 10:05:05
-2019-12-20 10:05:05.330140 UTC
-2019-12-20 19:05:05.330140 JST
-2019-12-20 10:05:05.330140 UTC
-2019-12-20 19:05:05.330140 JST
-2019-12-20 19:05:05
+1 : 2019-12-20 19:05:05.330140 JST
+2 : 2019-12-20 19:05:05 JST
+3 : 2019年12月20日 19時05分05秒
+4 : 2019/12/20 19:05:05
+5 : 2019年12月20日
+6 : 2019-12-20
+7 : 19時05分05秒
+8 : 19:05:05
+9 : 2019年12月20日 午後 07時05分05秒
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/zoned_time/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/zoned_time/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/zoned_time/formatter.md b/reference/chrono/zoned_time/formatter.md
new file mode 100644
index 000000000..79f51cad6
--- /dev/null
+++ b/reference/chrono/zoned_time/formatter.md
@@ -0,0 +1,95 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Duration, class TimeZonePtr, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::zoned_time&amp;lt;Duration, TimeZonePtr&amp;gt;, charT&amp;gt;
+    : formatter&amp;lt;chrono::local-time-format-t&amp;lt;Duration&amp;gt;, charT&amp;gt;;
+}
+```
+* chrono::local-time-format-t[link /reference/chrono/local-time-format-t.md]
+
+## 概要
+`zoned_time`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`format`](formatter/format.md) | 文字列フォーマット | C++20 |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // システム時間はUTCタイムゾーンをもつ
+  auto now = chrono::system_clock::now();
+  chrono::sys_seconds now_sec = chrono::floor&amp;lt;chrono::seconds&amp;gt;(now); // 秒単位
+
+  chrono::zoned_time zt{&amp;#34;Asia/Tokyo&amp;#34;, now};
+  chrono::zoned_seconds zt_sec{&amp;#34;Asia/Tokyo&amp;#34;, now_sec};
+
+  // デフォルトフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;1 : {}&amp;#34;, zt) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2 : {}&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 「年月日 時分秒」のフォーマット
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3 : {:%Y年%m月%d日 %H時%M分%S秒}&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付を / (スラッシュ) 区切り、時間を : (コロン) 区切り
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4 : {0:%Y/%m/%d %H:%M:%S}&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 日付だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5 : %Y年%m月%d日&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6 : %F&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 時間だけ出力
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7 : %H時%M分%S秒&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;8 : %T&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+
+  // 12時間時計で出力
+  // (%pでロケール固有の「午前」「午後」を出力するには、日本のロケールを指定する必要がある)
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;9 : %Y年%m月%d日 %p %I時%M分%S秒&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+}
+```
+* chrono::system_clock[link /reference/chrono/system_clock.md]
+* now()[link /reference/chrono/system_clock/now.md]
+* chrono::sys_seconds[link /reference/chrono/sys_time.md]
+* chrono::floor[link /reference/chrono/time_point/floor.md]
+* std::format[link /reference/chrono/format.md]
+* std::locale[link /reference/locale/locale.md]
+
+### 出力例
+```
+1 : 2019-12-20 19:05:05.330140 JST
+2 : 2019-12-20 19:05:05 JST
+3 : 2019年12月20日 19時05分05秒
+4 : 2019/12/20 19:05:05
+5 : 2019年12月20日
+6 : 2019-12-20
+7 : 19時05分05秒
+8 : 19:05:05
+9 : 2019年12月20日 午後 07時05分05秒
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/zoned_time/formatter/format.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/zoned_time/formatter/format.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/zoned_time/formatter/format.md b/reference/chrono/zoned_time/formatter/format.md
new file mode 100644
index 000000000..1cad74713
--- /dev/null
+++ b/reference/chrono/zoned_time/formatter/format.md
@@ -0,0 +1,47 @@
+# format
+* chrono[meta header]
+* std[meta namespace]
+* formatter[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template &amp;lt;class FormatContext&amp;gt;
+typename FormatContext::iterator
+format(const chrono::zoned_time&amp;lt;Duration, TimeZonePtr&amp;gt;&amp;amp; tp,
+       FormatContext&amp;amp; ctx);                                 // (1) C++20
+```
+
+## 概要
+`zoned_time`クラスオブジェクトを文字列フォーマットする。
+
+
+## 効果
+以下と等価：
+
+```cpp
+sys_info info = tp.get_info();
+chrono::local-time-format-t&amp;lt;Duration&amp;gt; x {
+  tp.get_local_time(),
+  &amp;amp;info.abbrev,
+  &amp;amp;info.offset
+};
+
+return formatter&amp;lt;chrono::local-time-format-t&amp;lt;Duration&amp;gt;, charT&amp;gt;::format(
+    x,
+    ctx
+);
+```
+* sys_info[link /reference/chrono/sys_info.md]
+* chrono::local-time-format-t[link /reference/chrono/local-time-format-t.md]
+* tp.get_info()[link /reference/chrono/zoned_time/get_info.md]
+* tp.get_local_time()[link /reference/chrono/zoned_time/get_local_time.md]
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/chrono/zoned_time/op_ostream.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/chrono/zoned_time/op_ostream.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/zoned_time/op_ostream.md b/reference/chrono/zoned_time/op_ostream.md
index 64ff62be1..3ebca5d43 100644
--- a/reference/chrono/zoned_time/op_ostream.md
+++ b/reference/chrono/zoned_time/op_ostream.md
@@ -24,7 +24,7 @@ namespace std::chrono {
 
 - `&amp;#34;%F&amp;#34;`は`&amp;#34;%Y-%m-%d&amp;#34;` (4桁ゼロ埋めの年-2桁ゼロ埋めの月-2桁ゼロ埋めの日) と等価
 - `&amp;#34;%T&amp;#34;`は`&amp;#34;%H:%M:%S&amp;#34;` (2桁ゼロ埋めの時:2桁ゼロ埋めの分:2桁ゼロ埋めの秒と小数点以下の時間) と等価
-- `&amp;#34;%Z&amp;#34;`はタイムゾーンの省略名 (日本は`&amp;#34;JST&amp;#34;`、UTCは`&amp;#34;UTC&amp;#34;`)
+- `&amp;#34;%Z&amp;#34;`はタイムゾーンの略称 (日本は`&amp;#34;JST&amp;#34;`、UTCは`&amp;#34;UTC&amp;#34;`)
 
 
 ## 戻り値
@@ -77,4 +77,4 @@ int main()
 
 
 ## 関連項目
-- [`local_time_format()`](/reference/chrono/local_time_format.md.nolink) (フォーマットの詳細)
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmath -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/cmath.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/cmath.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath.md b/reference/cmath.md
index 83ce21597..9bfc4a6cd 100644
--- a/reference/cmath.md
+++ b/reference/cmath.md
@@ -117,7 +117,7 @@ C++03 までの場合、[`errno`](cerrno/errno.md) でしか通知されない
 - [`errno`](cerrno/errno.md) によってエラーが通知される場合、[`EDOM`](cerrno.md)（定義域エラー、Error DOMain）が設定される。  
 - 浮動小数点例外によってエラーが通知される場合、[`FE_INVALID`](cfenv/fe_invalid.md)（無効演算浮動小数点例外）が設定される。  
 
-定義域エラーが発生した場合、関数の戻り値は処理系定義であるが、戻り値の型が quiet NaN（quiet Not a Number：静かな非数）を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_quiet_NaN`](limits/numeric_limits/has_quiet_nan.md)`()` が真）の場合、一般的には quiet NaN が返る。
+定義域エラーが発生した場合、関数の戻り値は処理系定義であるが、戻り値の型が quiet NaN（quiet Not a Number：静かな非数）を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_quiet_NaN`](limits/numeric_limits/has_quiet_nan.md) が真）の場合、一般的には quiet NaN が返る。
 
 ### 極エラー（pole error）
 引数の値が有限値である場合に、関数の当該値に対する数学的な極限値が無限大であることを示すエラー。（例：[`log`](cmath/log.md)`(0.0)` や、[`atanh`](cmath/atanh.md)`(1.0)` 等）  
@@ -131,7 +131,7 @@ C++03 までの場合、[`errno`](cerrno/errno.md) でしか通知されない
 - 浮動小数点例外によってエラーが通知される場合、[`FE_DIVBYZERO`](cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が設定される（注：「ゼロ除算浮動小数点例外」は誤記では無い）。
 
 極エラーが発生した場合、関数の戻り値は処理系定義であるが、戻り値の型が浮動小数点数の場合、一般的には [`HUGE_VAL`](cmath/huge_val.md)（`double`）、[`HUGE_VALF`](cmath/huge_valf.md)（`float` 、C++11 以降のみ）、[`HUGE_VALL`](cmath/huge_vall.md)（`long double`、C++11 以降のみ）に正しい符号を付加した値が返る。
-また、戻り値の型が無限大を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_infinity`](limits/numeric_limits/has_infinity.md)`()` が真）の場合、一般的には無限大（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`infinity`](limits/numeric_limits/infinity.md)`()`）が返る。
+また、戻り値の型が無限大を表現可能（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`has_infinity`](limits/numeric_limits/has_infinity.md) が真）の場合、一般的には無限大（[`std::numeric_limits`](limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`infinity`](limits/numeric_limits/infinity.md)`()`）が返る。
 なお、マクロ [`INFINITY`](cmath/infinity.md) も、定義されている場合には無限大を表すものではあるが、`float` 型であることに注意。
 
 ### オーバーフローエラー（overflow error）
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/cmath/abs.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/cmath/abs.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/abs.md b/reference/cmath/abs.md
index 537818fe0..4f35a45bf 100644
--- a/reference/cmath/abs.md
+++ b/reference/cmath/abs.md
@@ -6,15 +6,15 @@
 
 ```cpp
 namespace std {
-  float abs(float x);
-  double abs(double x);
-  long double abs(long double x);
+  float abs(float x);             // (1)
+  double abs(double x);           // (2)
+  long double abs(long double x); // (3)
 
-  double abs(Integral x);     // C++11 から C++14 まで
+  double abs(Integral x);     // (4) C++11 から C++14 まで
 
-  int abs(int x);             // C++17 から
-  long abs(long int x);       // C++17 から
-  long long abs(long long x); // C++17 から
+  int abs(int x);             // (5) C++17 から
+  long abs(long int x);       // (6) C++17 から
+  long long abs(long long x); // (7) C++17 から
 }
 ```
 * Integral[italic]
@@ -26,12 +26,12 @@ namespace std {
 ## 戻り値
 引数 `x` の絶対値を返す。
 
-`x` が `±∞` だった場合 `+∞` を返す。
+- (1),(2),(3) : `x` が `±∞` だった場合 `+∞` を返す。
 
 
 ## 備考
 - $$ f(x) = | x | $$
-- 任意の整数型に対するオーバーロードが C++11 で追加されたが、ある種の問題を引き起こすことから、今後削除される可能性がある。[Validity and return type of std::abs(0u) is unclear](http://wg21.cmeerw.net/lwg/issue2192) 参照。
+- 任意の整数型に対するオーバーロード(4)は C++11 で追加されたが、[一部の符号なし整数型に対して問題を引き起こす](http://wg21.cmeerw.net/lwg/issue2192)ことから C++17 で削除され、符号付き整数型に対するオーバーロード(5),(6),(7)が追加された。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cos -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cos.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/cmath/cos.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cos.md b/reference/cmath/cos.md
index a68a98214..2f8306873 100644
--- a/reference/cmath/cos.md
+++ b/reference/cmath/cos.md
@@ -105,3 +105,7 @@ int main()
 以下のマクローリン級数を適当な次数で打ち切ることで近似的に求めることができる。
 
 $$ \cos x = \sum_{n = 0}^{\infty} \frac{(-1)^n}{(2n)!} x^{2n} \quad \mathrm{for~all} \; x $$
+
+
+## 関連項目
+- [`std::numbers::pi`](/reference/numbers/pi.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sin -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sin.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/cmath/sin.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sin.md b/reference/cmath/sin.md
index 86bc99357..e26f6e35b 100644
--- a/reference/cmath/sin.md
+++ b/reference/cmath/sin.md
@@ -105,3 +105,7 @@ int main()
 以下のマクローリン級数を適当な次数で打ち切ることで近似的に求めることができる。
 
 $$ \sin x = \sum_{n = 0}^{\infty} \frac{(-1)^n}{(2n + 1)!} x^{2n + 1} \quad \mathrm{for~all} \; x $$
+
+
+## 関連項目
+- [`std::numbers::pi`](/reference/numbers/pi.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partial_order -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/compare/partial_order.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/compare/partial_order.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/partial_order.md b/reference/compare/partial_order.md
index 13bceb76d..d591f65e0 100644
--- a/reference/compare/partial_order.md
+++ b/reference/compare/partial_order.md
@@ -1,7 +1,7 @@
 # partial_order
 
 * compare[meta header]
-* function[meta id-type]
+* cpo[meta id-type]
 * std[meta namespace]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>strong_order -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/compare/strong_order.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/compare/strong_order.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/strong_order.md b/reference/compare/strong_order.md
index c347c730e..8124707eb 100644
--- a/reference/compare/strong_order.md
+++ b/reference/compare/strong_order.md
@@ -1,7 +1,7 @@
 # strong_order
 
 * compare[meta header]
-* function[meta id-type]
+* cpo[meta id-type]
 * std[meta namespace]
 * cpp20[meta cpp]
 
@@ -53,7 +53,7 @@ namespace std {
 
 1. --
 2. 呼び出される`strong_order(a, b)`およびその戻り値の`strong_ordering`への変換が定数評価可能であるかに従う。
-3. 常に定数評価可能
+3. 引数`a, b`が定数（式）ならば、常に定数評価可能
 4. 呼び出される`a &amp;lt;=&amp;gt; b`およびその戻り値の`strong_ordering`への変換が定数評価可能であるかに従う。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>three_way_comparable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/compare/three_way_comparable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/compare/three_way_comparable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/three_way_comparable.md b/reference/compare/three_way_comparable.md
index c2f4e16e9..a4e0a7455 100644
--- a/reference/compare/three_way_comparable.md
+++ b/reference/compare/three_way_comparable.md
@@ -28,23 +28,23 @@ namespace std {
 template&amp;lt;class T, class Cat&amp;gt;
 concept compares-as = same_as&amp;lt;common_comparison_category_t&amp;lt;T, Cat&amp;gt;, Cat&amp;gt;;
 
-//順序付けの4種×2方向の比較演算子が使用可能であり、戻り値型がbooleanコンセプトを満たす
+//順序付けの4種×2方向の比較演算子が使用可能であり、戻り値型がboolean-testableコンセプトを満たす
 template&amp;lt;class T, class U&amp;gt;
 concept partially-ordered-with =
   requires(const remove_reference_t&amp;lt;T&amp;gt;&amp;amp; t, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp; u) {
-    { t &amp;lt;  u } -&amp;gt; boolean;
-    { t &amp;gt;  u } -&amp;gt; boolean;
-    { t &amp;lt;= u } -&amp;gt; boolean;
-    { t &amp;gt;= u } -&amp;gt; boolean;
-    { u &amp;lt;  t } -&amp;gt; boolean;
-    { u &amp;gt;  t } -&amp;gt; boolean;
-    { u &amp;lt;= t } -&amp;gt; boolean;
-    { u &amp;gt;= t } -&amp;gt; boolean;
+    { t &amp;lt;  u } -&amp;gt; boolean-testable;
+    { t &amp;gt;  u } -&amp;gt; boolean-testable;
+    { t &amp;lt;= u } -&amp;gt; boolean-testable;
+    { t &amp;gt;= u } -&amp;gt; boolean-testable;
+    { u &amp;lt;  t } -&amp;gt; boolean-testable;
+    { u &amp;gt;  t } -&amp;gt; boolean-testable;
+    { u &amp;lt;= t } -&amp;gt; boolean-testable;
+    { u &amp;gt;= t } -&amp;gt; boolean-testable;
   };
 ```
 * common_comparison_category_t[link /reference/compare/common_comparison_category.md]
 * remove_reference_t[link /reference/type_traits/remove_reference.md]
-* boolean[link /reference/concepts/boolean.md]
+* boolean-testable[link /reference/concepts/boolean-testable.md]
 
 - (1) : 以下のように定義される。
 
@@ -67,13 +67,13 @@ concept three_way_comparable =
 ```cpp
 template&amp;lt;class T, class U, class Cat = partial_ordering&amp;gt;
 concept three_way_comparable_with =
-  weakly-equality-comparable-with&amp;lt;T, U&amp;gt; &amp;amp;&amp;amp;
-  partially-ordered-with&amp;lt;T, U&amp;gt; &amp;amp;&amp;amp;
   three_way_comparable&amp;lt;T, Cat&amp;gt; &amp;amp;&amp;amp;
   three_way_comparable&amp;lt;U, Cat&amp;gt; &amp;amp;&amp;amp;
   common_reference_with&amp;lt;const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
   three_way_comparable&amp;lt;
     common_reference_t&amp;lt;const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt;, Cat&amp;gt; &amp;amp;&amp;amp;
+  weakly-equality-comparable-with&amp;lt;T, U&amp;gt; &amp;amp;&amp;amp;
+  partially-ordered-with&amp;lt;T, U&amp;gt; &amp;amp;&amp;amp;
   requires(const remove_reference_t&amp;lt;T&amp;gt;&amp;amp; t, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp; u) {
     { t &amp;lt;=&amp;gt; u } -&amp;gt; compares-as&amp;lt;Cat&amp;gt;;
     { u &amp;lt;=&amp;gt; t } -&amp;gt; compares-as&amp;lt;Cat&amp;gt;;
@@ -113,7 +113,7 @@ concept three_way_comparable_with =
         - `T, U`は`totally_orderd_with`のモデルである
 
 - `partially-ordered-with` : `const remove_reference_t&amp;lt;T&amp;gt;, const remove_reference_t&amp;lt;U&amp;gt;`の左辺値`t, u`について次の条件を満たす場合に限って、型`T, U, Cat`は`partially-ordered-with`のモデルである
-    - `t &amp;lt; u, t &amp;lt;= u, t &amp;gt; u, t &amp;gt;= u, u &amp;lt; t, u &amp;lt;= t, u &amp;gt; t, u &amp;gt;= t`が全て同じ定義域を持つ
+    - `t &amp;lt; u, t &amp;lt;= u, t &amp;gt; u, t &amp;gt;= u, u &amp;lt; t, u &amp;lt;= t, u &amp;gt; t, u &amp;gt;= t`が全て同じ[定義域](/reference/concepts.md)を持つ
     - `bool(t &amp;lt; u) == bool(u &amp;gt; t)`が`true`であること
     - `bool(u &amp;lt; t) == bool(t &amp;gt; u)`が`true`であること
     - `bool(t &amp;lt;= u) == bool(u &amp;gt;= t)`が`true`であること
@@ -270,3 +270,5 @@ int main() {
 
 - [P0768R1 Library support for the spaceship (comparison) operator](http://wg21.link/p0768)
 - [P1614R2 The Mothership has Landed (Adding &amp;lt;=&amp;gt; to the Library)](http://wg21.link/p1614)
+- [LWG Issue 3360. `three_way_comparable_with` is inconsistent with similar concepts](https://wg21.cmeerw.net/lwg/issue3360)
+- [P1964R2 Wording for `boolean-testable`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1964r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weak_order -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/compare/weak_order.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/compare/weak_order.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/weak_order.md b/reference/compare/weak_order.md
index 9f7f0edf0..4a7987932 100644
--- a/reference/compare/weak_order.md
+++ b/reference/compare/weak_order.md
@@ -1,7 +1,7 @@
 # weak_order
 
 * compare[meta header]
-* function[meta id-type]
+* cpo[meta id-type]
 * std[meta namespace]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>concepts -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts.md b/reference/concepts.md
index 57c279b5a..9f1477569 100644
--- a/reference/concepts.md
+++ b/reference/concepts.md
@@ -6,9 +6,11 @@
 
 `&amp;lt;concepts&amp;gt;`ヘッダでは基礎的なコンセプトの実装を提供する。これらのコンセプトは標準ライブラリでも使用される。
 
-## 等しさの保持（*equality preservation*）
+## 暗黙の意味論的な制約
 
-ある式への等しい入力によって等しい出力が得られる時、その式は __等しさを保持__ している。この入力とは具体的な値ではなくその式の入力となり得る引数（オペランド）の集合であり、出力とはその式の結果およびその式によって変更された全ての引数（オペランド）のこと。
+### 等しさの保持（*equality preservation*）
+
+ある式への等しい入力によって等しい出力が得られる時、その式は __等しさを保持__ している。入力とはその式に与えられた全ての引数（オペランド）であり、出力とはその式の結果およびその式によって変更された全ての引数のこと。
 
 また、必ずしも入力の個別の値が全てその式にとって有効である必要はない。例えば、整数に対する`a / b`という式は等しさを保持するが、`b = 0`の時この式は有効ではない。しかし、このことは式`a / b`が等しさを保持することを妨げない。  
 式への入力のうちこのような有効ではない値を除いたものをその式の __定義域（*domain*）__ と呼ぶ。
@@ -36,6 +38,8 @@ concept C2 = requires(const T a) {
 };
 ```
 
+これによって各制約式では、型パラメータがCV修飾されない非配列のオブジェクト型であると仮定することで、それぞれの引数の値カテゴリとCV修飾を確定することができる。
+
 ### 暗黙的な式のバリエーション（*implicit expression variations*）
 
 `requires`式において定数左辺値としてローカルパラメータを宣言する場合、それぞれの制約式にはそのパラメータを受け取る位置に非定数左辺値や（定数）右辺値を受け入れる暗黙的な式のバリエーションが要求される。ただし、このような暗黙的な式のバリエーション（のいずれか）が異なる意味論を持ち、明示的に記述される場合を除く。
@@ -84,7 +88,6 @@ concept C =
 | [`integral`](concepts/integral.md) | 整数型 | C++20 |
 | [`signed_integral`](concepts/signed_integral.md) | 符号付き整数型 | C++20 |
 | [`unsigned_integral`](concepts/unsigned_integral.md) | 符号なし整数型 | C++20 |
-| [`boolean`](concepts/boolean.md) | 真理値型 | C++20 |
 | [`floating_point`](concepts/floating_point.md) | 浮動小数点数型 | C++20 |
 
 
@@ -140,6 +143,11 @@ concept C =
 |------|------|----------------|
 | [`ranges::swap`](concepts/swap.md) | 任意の2つのオブジェクトを入れ替える | C++20 |
 
+## 説明専用コンセプト
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`boolean-testable`](concepts/boolean-testable.md) | 真理値型 | C++20 |
 
 
 ## そのうちどこかに移動するページ
@@ -164,3 +172,5 @@ concept C =
 - [C++標準コンセプトの名前付けガイドライン - yohhoyの日記](https://yohhoy.hatenadiary.jp/entry/20190826/p1)
 - [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
 - [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
+- [P2101R0 “Models” subsumes “satisfies” (Wording for US298 and US300)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2101r0.html)
+- [P2102R0 Make “implicit expression variations” more explicit (Wording for US185)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2102r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>boolean-testable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/boolean-testable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/boolean-testable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/boolean-testable.md b/reference/concepts/boolean-testable.md
new file mode 100644
index 000000000..db8d120f9
--- /dev/null
+++ b/reference/concepts/boolean-testable.md
@@ -0,0 +1,123 @@
+# boolean-testable
+* concepts[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  concept boolean-testable = /*see below*/; // 説明専用コンセプト
+}
+```
+
+## 概要
+
+`boolean-testable`は、任意の型`T`を`bool`として扱う事ができることを表すコンセプトである。
+
+このコンセプトはほかのコンセプトの定義および説明に使用される説明専用のものであり、実際に使用可能ではない。
+
+## 要件
+
+まず、説明専用の`boolean-testable-impl`コンセプトを以下の様に定義する。
+
+```cpp
+template&amp;lt;class T&amp;gt;
+concept boolean-testable-impl = convertible_to&amp;lt;T, bool&amp;gt;;
+```
+* convertible_to[link /reference/concepts/convertible_to.md]
+
+これを用いて、`boolean-testable`は以下の様に定義される。
+
+```cpp
+template&amp;lt;class T&amp;gt;
+concept boolean-testable =
+  boolean-testable-impl&amp;lt;T&amp;gt; &amp;amp;&amp;amp; requires (T&amp;amp;&amp;amp; t) {
+    { !std::forward&amp;lt;T&amp;gt;(t) } -&amp;gt; boolean-testable-impl;
+  };
+```
+
+## モデル
+
+- `decltype((e))`が`T`となる式`e`について、次の条件を満たす場合に限って型`T`は`boolean-testable-impl`のモデルである。
+    - 次のどちらかを満たす
+        - `remove_cvref_t&amp;lt;T&amp;gt;`はクラス型ではない
+        - `operator||, operator&amp;amp;&amp;amp;`を`remove_cvref_t&amp;lt;T&amp;gt;`のクラススコープで名前解決したかの様に探索した結果、候補関数は見つからない
+    - `operator||, operator&amp;amp;&amp;amp;`のADLによる探索では不適格な宣言は見つからない
+        - `T`のADL探索範囲に`T`が左右どちらのオペランドになったとしても、受け入れ可能にオーバーロードされた`operator||, operator&amp;amp;&amp;amp;`演算子は存在しない
+
+2番目の条件の不適格な宣言が見つからないとは、`boolean-testable-impl`のモデルとなる型`T1, T2`については、`declval&amp;lt;T1&amp;gt;() &amp;amp;&amp;amp; declval&amp;lt;T2&amp;gt;()`および`declval&amp;lt;T1&amp;gt;() || declval&amp;lt;T2&amp;gt;()`の`operator||, operator&amp;amp;&amp;amp;`は確実に組み込みの演算子が使用される、と言う事を要求している。
+
+- `decltype((e))`が`T`となる式`e`について、次の条件を満たす場合に限って型`T`は`boolean-testable`のモデルである。
+    - `bool(e) == !bool(!e)`
+
+## 備考
+
+`boolean-testable`コンセプトのモデルとなる型には、`bool`, [`std::true_type`](/reference/type_traits/true_type.md), `int*`等ポインタ型、[`std::bitset&amp;lt;N&amp;gt;::reference`](https://cpprefjp.github.io/reference/bitset/bitset/reference.html)等がある。
+
+## booleanコンセプト
+
+`boolean-testable`コンセプトは当初、真理値型を表す説明専用ではない`boolean`コンセプトとして以下の様に定義されていた。
+
+```cpp
+namespace std {
+  template&amp;lt;class B&amp;gt;
+  concept boolean =
+    movable&amp;lt;remove_cvref_t&amp;lt;B&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    requires(const remove_reference_t&amp;lt;B&amp;gt;&amp;amp; b1,
+             const remove_reference_t&amp;lt;B&amp;gt;&amp;amp; b2, const bool a) {
+      { b1 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
+      { !b1 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
+      { b1 &amp;amp;&amp;amp; b2 } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+      { b1 &amp;amp;&amp;amp;  a } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+      {  a &amp;amp;&amp;amp; b2 } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+      { b1 || b2 } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+      { b1 ||  a } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+      {  a || b2 } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+      { b1 == b2 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
+      { b1 ==  a } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
+      {  a == b2 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
+      { b1 != b2 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
+      { b1 !=  a } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
+      {  a != b2 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
+    };
+}
+```
+* movable[link /reference/concepts/movable.md]
+* same_as[link /reference/concepts/same_as.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* remove_cvref_t[link /reference/type_traits/remove_cvref.md]
+* remove_reference_t[link /reference/type_traits/remove_reference.md]
+
+
+この`boolean`コンセプトは14個の制約式によって定義されている。これらは真理値式をなるべく正しく表現するために議論の経過と共に追加されていったものだが、これによって以下の様な問題が発生していた。
+
+- ある型が`boolean`コンセプトを満たしているのかがわかりにくい
+    - 特に、演算子オーバーロードされていると追いかけるのは非常に困難になる
+- 制約式の数が多すぎるため、少し使用しただけでコンパイル時間を増大させる
+    - 例えば当初の[`totally_ordered_with`](/reference/concepts/totally_ordered.md)は直接的に8個、間接的に50個の`boolean`コンセプトのチェックを要求する。`totally_ordered_with`1度の使用あたり`boolean`のチェックだけで最悪812個の制約式のチェックを行う事になる。
+- この`boolean`を正しく使用するためには、本来必要ない箇所で明示的な`bool`への変換を行う必要がある。しかし、どこで必要になってどこなら必要ないのかが非常に分かりづらい。
+
+これらの問題（共通するのは、制約式が多すぎると言う問題）によって、`boolean`コンセプトは検証するのも使用するのも教育するのも困難なものになってしまったため、削除される事となった。  
+ただ、`boolean`コンセプトは標準ライブラリのその他のコンセプトの定義のために使用されていたため、「標準ライブラリが必要とするときに（暗黙的に）`bool`型への変換が可能」と言う最低限の性質を表明し、なおかつ説明専用の`boolean-testable`コンセプトへと置換された。
+
+上記定義の`boolean`コンセプトはポインタ型等`bool`に変換可能なだけの型では満たす事はできなかったが、`boolean-testable`コンセプトでは`bool`に変換可能なだけの型でも満たす事ができる。
+
+## バージョン
+### 言語
+- C++20
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
+- [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
+- [LWG Issue 3208. Boolean&amp;#39;s expression requirements are ordered inconsistently](https://wg21.cmeerw.net/lwg/issue3208)
+- [P1934R0 `boolean` Considered Harmful](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1934r0.pdf)
+    - `boolean`コンセプトが標準ライブラリのコンセプトとして不適格である理由について
+- [P1964R0 Wording for `boolean-testable`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1964r0.html)
+- [P1964R2 Wording for `boolean-testable`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1964r2.html)
+    - `boolean-testable`コンセプトについて
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>boolean.md -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/boolean.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/boolean.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/boolean.md b/reference/concepts/boolean.md
deleted file mode 100644
index 4c6f00cf1..000000000
--- a/reference/concepts/boolean.md
+++ /dev/null
@@ -1,123 +0,0 @@
-# boolean
-* concepts[meta header]
-* std[meta namespace]
-* concept[meta id-type]
-* cpp20[meta cpp]
-
-```cpp
-namespace std {
-  template&amp;lt;class B&amp;gt;
-  concept boolean =
-    movable&amp;lt;remove_cvref_t&amp;lt;B&amp;gt;&amp;gt; &amp;amp;&amp;amp;
-    requires(const remove_reference_t&amp;lt;B&amp;gt;&amp;amp; b1,
-             const remove_reference_t&amp;lt;B&amp;gt;&amp;amp; b2, const bool a) {
-      { b1 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
-      { !b1 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
-      { b1 &amp;amp;&amp;amp; b2 } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
-      { b1 &amp;amp;&amp;amp;  a } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
-      {  a &amp;amp;&amp;amp; b2 } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
-      { b1 || b2 } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
-      { b1 ||  a } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
-      {  a || b2 } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
-      { b1 == b2 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
-      { b1 ==  a } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
-      {  a == b2 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
-      { b1 != b2 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
-      { b1 !=  a } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
-      {  a != b2 } -&amp;gt; convertible_to&amp;lt;bool&amp;gt;;
-    };
-}
-```
-* movable[link /reference/concepts/movable.md.nolink]
-* same_as[link /reference/concepts/same_as.md]
-* convertible_to[link /reference/concepts/convertible_to.md]
-* remove_cvref_t[link /reference/type_traits/remove_cvref.md]
-* remove_reference_t[link /reference/type_traits/remove_reference.md]
-
-## 概要
-
-`boolean`は、任意の型`B`が真理値を表す型として使用可能であることを表すコンセプトである。
-
-## モデル
-
-`const remove_reference_t&amp;lt;B&amp;gt;`型の左辺値`b1, b2`について以下の条件を満たす場合に限って、型`B`は`boolean`のモデルである。
-
-- `bool(b1) == !bool(!b1)`
-- `(b1 &amp;amp;&amp;amp; b2)`, `(b1 &amp;amp;&amp;amp; bool(b2))`及び`(bool(b1) &amp;amp;&amp;amp; b2)`は`(bool(b1) &amp;amp;&amp;amp; bool(b2))`と等値であり、短絡評価されるかも同一である
-- `(b1 || b2)`, `(b1 || bool(b2))`及び`(bool(b1) || b2)`は`(bool(b1) || bool(b2))`と等値であり、短絡評価されるかも同一である
-- `bool(b1 == b2)`, `bool(b1 == bool(b2))`及び`bool(bool(b1) == b2)`は`(bool(b1) == bool(b2))`と等値である
-- `bool(b1 != b2)`, `bool(b1 != bool(b2))`及び`bool(bool(b1) != b2)`は`(bool(b1) != bool(b2))`と等値である
-
-## 備考
-
-`bool`, [`std::true_type`](/reference/type_traits/true_type.md), [`std::bitset&amp;lt;N&amp;gt;::reference`](https://cpprefjp.github.io/reference/bitset/bitset/reference.html)等の型は真理値型として`boolean`コンセプトのモデルであるが、ポインタ型やスマートポインタ等の明示的に`bool`へ変換できるだけの型は真理値型ではなく`boolean`コンセプトのモデルとならない。
-
-## 例
-```cpp example
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;concepts&amp;gt;
-#include &amp;lt;memory&amp;gt;
-#include &amp;lt;type_traits&amp;gt;
-#include &amp;lt;bitset&amp;gt;
-#include &amp;lt;optional&amp;gt;
-
-template&amp;lt;std::boolean T&amp;gt;
-void f(const char* name) {
-  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is boolean&amp;#34; &amp;lt;&amp;lt; std::endl;
-}
-
-template&amp;lt;typename T&amp;gt;
-void f(const char* name) {
-  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is not boolean&amp;#34; &amp;lt;&amp;lt; std::endl;
-}
-
-
-int main() {
-  f&amp;lt;bool&amp;gt;(&amp;#34;bool&amp;#34;);
-  f&amp;lt;int&amp;gt;(&amp;#34;int&amp;#34;);
-  f&amp;lt;std::size_t&amp;gt;(&amp;#34;std::size_t&amp;#34;);
-  f&amp;lt;std::true_type&amp;gt;(&amp;#34;std::true_type&amp;#34;);
-  f&amp;lt;std::false_type&amp;gt;(&amp;#34;std::false_type&amp;#34;);
-  f&amp;lt;std::bitset&amp;lt;8&amp;gt;::reference&amp;gt;(&amp;#34;std::bitset&amp;lt;8&amp;gt;::reference&amp;#34;);
-  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
-  f&amp;lt;int*&amp;gt;(&amp;#34;int*&amp;#34;);
-  f&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt;(&amp;#34;std::unique_ptr&amp;lt;int&amp;gt;&amp;#34;);
-  f&amp;lt;std::shared_ptr&amp;lt;int&amp;gt;&amp;gt;(&amp;#34;std::shared_ptr&amp;lt;int&amp;gt;&amp;#34;);
-  f&amp;lt;std::optional&amp;lt;int&amp;gt;&amp;gt;(&amp;#34;std::optional&amp;lt;int&amp;gt;&amp;#34;);
-}
-
-```
-* std::boolean[color ff0000]
-
-### 出力
-```
-bool is boolean
-int is boolean
-std::size_t is boolean
-std::true_type is boolean
-std::false_type is boolean
-std::bitset&amp;lt;8&amp;gt;::reference is boolean
-
-int* is not boolean
-std::unique_ptr&amp;lt;int&amp;gt; is not boolean
-std::shared_ptr&amp;lt;int&amp;gt; is not boolean
-std::optional&amp;lt;int&amp;gt; is not boolean
-```
-
-## バージョン
-### 言語
-- C++20
-
-### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): 10.1
-- [Visual C++](/implementation.md#visual_cpp): 2019 Update 3
-
-## 関連項目
-
-- [C++20 コンセプト](/lang/cpp20/concepts.md)
-
-## 参照
-
-- [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
-- [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_reference_with -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/common_reference_with.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/common_reference_with.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/common_reference_with.md b/reference/concepts/common_reference_with.md
index 320e09a72..54445f7f4 100644
--- a/reference/concepts/common_reference_with.md
+++ b/reference/concepts/common_reference_with.md
@@ -97,3 +97,4 @@ T, U share a common reference type
 
 - [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
 - [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
+- [LWG Issue 3154. `Common` and `CommonReference` have a common defect](https://wg21.cmeerw.net/lwg/issue3154)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_with -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/common_with.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/common_with.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/common_with.md b/reference/concepts/common_with.md
index ae7bdd4e6..7c24628cf 100644
--- a/reference/concepts/common_with.md
+++ b/reference/concepts/common_with.md
@@ -102,3 +102,5 @@ T, U share a common type
 
 - [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
 - [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
+- [LWG Issue 3153. `Common` and `common_type` have too little in common](https://wg21.cmeerw.net/lwg/issue3153)
+- [LWG Issue 3154. `Common` and `CommonReference` have a common defect](https://wg21.cmeerw.net/lwg/issue3154)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>convertible_to -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/convertible_to.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/convertible_to.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/convertible_to.md b/reference/concepts/convertible_to.md
index 5175bf7e7..b3c040a08 100644
--- a/reference/concepts/convertible_to.md
+++ b/reference/concepts/convertible_to.md
@@ -9,11 +9,12 @@ namespace std {
   template&amp;lt;class From, class To&amp;gt;
   concept convertible_to =
     is_convertible_v&amp;lt;From, To&amp;gt; &amp;amp;&amp;amp;
-    requires(From (&amp;amp;f)()) {
+    requires(add_rvalue_reference_t&amp;lt;From&amp;gt; (&amp;amp;f)()) {
       static_cast&amp;lt;To&amp;gt;(f());
     };
 }
 ```
+* add_rvalue_reference_t[link /reference/type_traits/add_rvalue_reference.md]
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 
 ## 概要
@@ -24,24 +25,24 @@ namespace std {
 
 ## モデル
 
-まず、説明のための関数`test(), f()`を以下のように定義、宣言する。
+`FromR = add_rvalue_reference_t&amp;lt;From&amp;gt;`として、説明のための関数`test(), f()`を以下のように定義、宣言する。
 
 ```cpp
-To test(From (&amp;amp;func)()) {
+To test(FromR (&amp;amp;func)()) {
   return func();
 }
 
-From f();
+FromR f();
 ```
 
-この`test()`関数、型`From, To`及び、[等しさを保持](/reference/concepts.md)し`From`型を返す引数なしの関数`f`について、以下の条件を満たす場合に限って型`From, To`は`convertible_to`のモデルである。
+この`test()`関数、型`FromR, To`及び、[等しさを保持](/reference/concepts.md)し`FromR`型を返す引数なしの関数`f`について、以下の条件を満たす場合に限って型`From, To`は`convertible_to`のモデルである。
 
 - 次のどちらかを満たす
     - `To`は[オブジェクト型](/reference/type_traits/is_object.md)でもオブジェクトへの参照型でもない
     - `static_cast&amp;lt;To&amp;gt;(f())`と`test(f)`は等しい
 - 次のいずれかを満たす
-    - `From`はオブジェクトへの参照型ではない
-    - `From`が非`const`右辺値参照型の場合、`f()`の呼び出しによって参照されるオブジェクトの状態は、上記の式の実行の後でも有効だが未規定となる
+    - `FromR`はオブジェクトへの参照型ではない
+    - `FromR`が非`const`右辺値参照型の場合、`f()`の呼び出しによって参照されるオブジェクトの状態は、上記の式の実行の後でも有効だが未規定となる
         - 標準ライブラリの型のオブジェクトは特に指定がない場合、ムーブされた後の状態は有効だが未規定となる
     - `f()`の呼び出しによって参照されるオブジェクトは上記の式の実行によって変更されない
 
@@ -139,3 +140,4 @@ true
 
 - [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
 - [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
+- [LWG Issue 3194. `ConvertibleTo` prose does not match code](https://wg21.cmeerw.net/lwg/issue3194)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_constructible -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/copy_constructible.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/copy_constructible.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/copy_constructible.md b/reference/concepts/copy_constructible.md
index 02738cb50..a30d3c2f4 100644
--- a/reference/concepts/copy_constructible.md
+++ b/reference/concepts/copy_constructible.md
@@ -95,3 +95,4 @@ C is copy constructible
 
 - [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
 - [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
+- [LWG Issue 3141. `CopyConstructible` doesn&amp;#39;t preserve source values](https://wg21.cmeerw.net/lwg/issue3141)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copyable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/copyable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/copyable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/copyable.md b/reference/concepts/copyable.md
index 862b7cd61..2d6aa4e4a 100644
--- a/reference/concepts/copyable.md
+++ b/reference/concepts/copyable.md
@@ -7,9 +7,12 @@
 ```cpp
 namespace std {
   template&amp;lt;class T&amp;gt;
-  concept copyable = copy_constructible&amp;lt;T&amp;gt; &amp;amp;&amp;amp;
-                     movable&amp;lt;T&amp;gt; &amp;amp;&amp;amp;
-                     assignable_from&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;;
+  concept copyable =
+    copy_constructible&amp;lt;T&amp;gt; &amp;amp;&amp;amp;
+    movable&amp;lt;T&amp;gt; &amp;amp;&amp;amp;
+    assignable_from&amp;lt;T&amp;amp;, T&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    assignable_from&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    assignable_from&amp;lt;T&amp;amp;, const T&amp;gt;;
 }
 ```
 * assignable_from[link /reference/concepts/assignable_from.md]
@@ -101,3 +104,4 @@ not_copyable2 is not copyable
 
 - [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
 - [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
+- [P2102R0 Make “implicit expression variations” more explicit (Wording for US185)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2102r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equality_comparable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/equality_comparable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/equality_comparable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/equality_comparable.md b/reference/concepts/equality_comparable.md
index de53e5faf..fa14fd6e3 100644
--- a/reference/concepts/equality_comparable.md
+++ b/reference/concepts/equality_comparable.md
@@ -6,7 +6,7 @@
 
 ```cpp
 namespace std {
-  template&amp;lt;class T, class U&amp;gt;
+  template&amp;lt;class T&amp;gt;
   concept equality_comparable = /*see below*/;      // (1)
 
   template&amp;lt;class T, class U&amp;gt;
@@ -28,19 +28,19 @@ template&amp;lt;class T, class U&amp;gt;
 concept weakly-equality-comparable-with =
   requires(const remove_reference_t&amp;lt;T&amp;gt;&amp;amp; t,
            const remove_reference_t&amp;lt;U&amp;gt;&amp;amp; u) {
-    { t == u } -&amp;gt; boolean;
-    { t != u } -&amp;gt; boolean;
-    { u == t } -&amp;gt; boolean;
-    { u != t } -&amp;gt; boolean;
+    { t == u } -&amp;gt; boolean-testable;
+    { t != u } -&amp;gt; boolean-testable;
+    { u == t } -&amp;gt; boolean-testable;
+    { u != t } -&amp;gt; boolean-testable;
   };
 ```
 * remove_reference_t[link /reference/type_traits/remove_reference.md]
-* boolean[link /reference/concepts/boolean.md]
+* boolean-testable[link /reference/concepts/boolean-testable.md]
 
 - (1) : 以下のように定義される
 
 ```cpp
-template&amp;lt;class T, class U&amp;gt;
+template&amp;lt;class T&amp;gt;
 concept equality_comparable = weakly-equality-comparable-with&amp;lt;T, T&amp;gt;;
 ```
 
@@ -77,7 +77,7 @@ concept equality_comparable_with =
 
 ## 備考
 
-定義内の`a == b`等の各制約式に[等しさを保持](/reference/concepts.md)する事が要求されていることによって、これらコンセプトを満たす`== !=`演算子は推移的かつ対称的である事を表し、要求している。
+定義内の`t == u`等の各制約式に[等しさを保持](/reference/concepts.md)する事が要求されていることによって、これらコンセプトを満たす`== !=`演算子は推移的かつ対称的である事を表し、要求している。
 
 - 推移律 : `a == b`かつ`b == c`ならば`a == c`
 - 対称律 : `a == b`ならば`b == a`
@@ -250,4 +250,4 @@ S2 is not equality comparable with int
 
 - [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
 - [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
-- [同値関係 - wikipedia](https://ja.wikipedia.org/wiki/同値関係)
\ No newline at end of file
+- [同値関係 - wikipedia](https://ja.wikipedia.org/wiki/同値関係)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>invocable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/invocable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/invocable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/invocable.md b/reference/concepts/invocable.md
index 1d58f1181..6da8359d9 100644
--- a/reference/concepts/invocable.md
+++ b/reference/concepts/invocable.md
@@ -151,7 +151,7 @@ int main() {
   f&amp;lt;not_invocable, int&amp;gt;(&amp;#34;not_invocable(int)&amp;#34;);
 }
 ```
-* std::invocable[color ff0000]
+* std::regular_invocable[color ff0000]
 
 
 #### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>predicate -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/predicate.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/predicate.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/predicate.md b/reference/concepts/predicate.md
index 27c9d8bc3..ff2c272b5 100644
--- a/reference/concepts/predicate.md
+++ b/reference/concepts/predicate.md
@@ -12,7 +12,7 @@ namespace std {
 }
 ```
 * regular_invocable[link /reference/concepts/invocable.md]
-* boolean-testable[link /reference/concepts/boolean.md]
+* boolean-testable[link /reference/concepts/boolean-testable.md]
 * invoke_result_t[link /reference/type_traits/invoke_result.md]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>relation -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/relation.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/relation.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/relation.md b/reference/concepts/relation.md
index 8def5a9a9..12affba43 100644
--- a/reference/concepts/relation.md
+++ b/reference/concepts/relation.md
@@ -13,7 +13,7 @@ namespace std {
 }
 ```
 * regular_invocable[link /reference/concepts/invocable.md]
-* boolean-testable[link /reference/concepts/boolean.md]
+* boolean-testable[link /reference/concepts/boolean-testable.md]
 * invoke_result_t[link /reference/type_traits/invoke_result.md]
 
 ## 概要
@@ -107,4 +107,5 @@ not_relation_s1s2 is not relation between S1 and S2
 
 - [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
 - [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
+- [P1248R1 Remove `CommonReference` requirement from `StrictWeakOrdering` (a.k.a Fixing Relations)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1248r1.html)
 - [二項関係 - wikipedia](https://ja.wikipedia.org/wiki/二項関係)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>semiregular -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/semiregular.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/semiregular.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/semiregular.md b/reference/concepts/semiregular.md
index b9ae3b12b..1608437f6 100644
--- a/reference/concepts/semiregular.md
+++ b/reference/concepts/semiregular.md
@@ -7,11 +7,11 @@
 ```cpp
 namespace std {
   template&amp;lt;class T&amp;gt;
-  concept semiregular = copyable&amp;lt;T&amp;gt; &amp;amp;&amp;amp; default_constructible&amp;lt;T&amp;gt;;
+  concept semiregular = copyable&amp;lt;T&amp;gt; &amp;amp;&amp;amp; default_initializable&amp;lt;T&amp;gt;;
 }
 ```
 * copyable[link /reference/concepts/copyable.md]
-* default_constructible[link /reference/concepts/default_constructible.md]
+* default_initializable[link /reference/concepts/default_initializable.md]
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/swap.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/swap.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/swap.md b/reference/concepts/swap.md
index 7a2898e0f..19089e36b 100644
--- a/reference/concepts/swap.md
+++ b/reference/concepts/swap.md
@@ -1,7 +1,7 @@
 # swap
 
 * concepts[meta header]
-* function[meta id-type]
+* cpo[meta id-type]
 * std::ranges[meta namespace]
 * cpp20[meta cpp]
 
@@ -68,7 +68,7 @@ namespace std::ranges {
 
 上記「効果」節1のケースでは、ユーザー定義の`swap()`を定義しておくことによって実行される交換操作をカスタマイズすることができる。
 
-1. `a, b`のどちらかの型と同じ名前空間もしくはその型の定義内で`friend`関数として、`a, b`の型のペアについて呼び出し可能な`swap()`を定義しておく
+1. `a, b`ののどちらかの型と同じ名前空間で、もしくはその型の定義内で`friend`関数として、`a, b`の型のペアについて呼び出し可能な`swap()`を定義しておく
 2. その要素型について、1にアダプトしておく
 3. --
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swappable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/swappable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/swappable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/swappable.md b/reference/concepts/swappable.md
index 9125ea80f..236c0c4be 100644
--- a/reference/concepts/swappable.md
+++ b/reference/concepts/swappable.md
@@ -11,7 +11,7 @@ namespace std {
 
   template&amp;lt;class T, class U&amp;gt;
   concept swappable_with =
-    common_reference_with&amp;lt;const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    common_reference_with&amp;lt;T, U&amp;gt; &amp;amp;&amp;amp;
     requires(T&amp;amp;&amp;amp; t, U&amp;amp;&amp;amp; u) {
       ranges::swap(std::forward&amp;lt;T&amp;gt;(t), std::forward&amp;lt;T&amp;gt;(t));
       ranges::swap(std::forward&amp;lt;U&amp;gt;(u), std::forward&amp;lt;U&amp;gt;(u));
@@ -216,4 +216,5 @@ NS::S2 is not swappable with NS::S1
 ## 参照
 - [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
 - [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
+- [LWG Issue 3175. The `CommonReference` requirement of concept `SwappableWith` is not satisfied in the example](https://wg21.cmeerw.net/lwg/issue3175)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>totally_ordered -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/concepts/totally_ordered.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/concepts/totally_ordered.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/totally_ordered.md b/reference/concepts/totally_ordered.md
index b5ff463a7..ce7eb1bbe 100644
--- a/reference/concepts/totally_ordered.md
+++ b/reference/concepts/totally_ordered.md
@@ -9,42 +9,26 @@ namespace std {
   template&amp;lt;class T, class U&amp;gt;
   concept totally_ordered =
     equality_comparable&amp;lt;T&amp;gt; &amp;amp;&amp;amp;
-    requires(const remove_reference_t&amp;lt;T&amp;gt;&amp;amp; a,
-             const remove_reference_t&amp;lt;T&amp;gt;&amp;amp; b) {
-      { a &amp;lt;  b } -&amp;gt; boolean;
-      { a &amp;gt;  b } -&amp;gt; boolean;
-      { a &amp;lt;= b } -&amp;gt; boolean;
-      { a &amp;gt;= b } -&amp;gt; boolean;
-    };
+    partially-ordered-with&amp;lt;T, T&amp;gt;;
 
   template&amp;lt;class T, class U&amp;gt;
   concept totally_ordered_with =
     totally_ordered&amp;lt;T&amp;gt; &amp;amp;&amp;amp; totally_ordered&amp;lt;U&amp;gt; &amp;amp;&amp;amp;
-    common_reference_with&amp;lt;const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    equality_comparable_with&amp;lt;T, U&amp;gt; &amp;amp;&amp;amp;
     totally_ordered&amp;lt;
       common_reference_t&amp;lt;
         const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;,
         const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt;&amp;gt; &amp;amp;&amp;amp;
-    equality_comparable_with&amp;lt;T, U&amp;gt; &amp;amp;&amp;amp;
-    requires(const remove_reference_t&amp;lt;T&amp;gt;&amp;amp; t,
-             const remove_reference_t&amp;lt;U&amp;gt;&amp;amp; u) {
-      { t &amp;lt;  u } -&amp;gt; boolean;
-      { t &amp;gt;  u } -&amp;gt; boolean;
-      { t &amp;lt;= u } -&amp;gt; boolean;
-      { t &amp;gt;= u } -&amp;gt; boolean;
-      { u &amp;lt;  t } -&amp;gt; boolean;
-      { u &amp;gt;  t } -&amp;gt; boolean;
-      { u &amp;lt;= t } -&amp;gt; boolean;
-      { u &amp;gt;= t } -&amp;gt; boolean;
-    };
+    partially-ordered-with&amp;lt;T, U&amp;gt;;
 }
 ```
-* boolean[link /reference/concepts/boolean.md]
+* boolean[link /reference/concepts/boolean-testable.md]
 * common_reference_with[link /reference/concepts/common_reference_with.md]
 * common_reference_t[link /reference/type_traits/common_reference.md]
 * equality_comparable[link /reference/concepts/equality_comparable.md]
 * equality_comparable_with[link /reference/concepts/equality_comparable.md]
 * remove_reference_t[link /reference/type_traits/remove_reference.md]
+* partially-ordered-with[link /reference/compare/three_way_comparable.md]
 
 ## 概要
 `totally_ordered`及び`totally_ordered_with`は、指定された型`T`もしくは`T, U`の間で`&amp;lt; &amp;lt;= &amp;gt; &amp;gt;=`の演算子による比較が可能であり、その順序付けが全順序の要件を満たしている事を表すコンセプトである。
@@ -241,3 +225,6 @@ S2 is not totally ordered with int
 
 - [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
 - [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
+- [LWG Issue 3329. `totally_ordered_with` both directly and indirectly requires `common_reference_with`](https://wg21.cmeerw.net/lwg/issue3329)
+- [LWG Issue 3331. Define `totally_ordered/_with` in terms of `partially-ordered-with`](https://wg21.cmeerw.net/lwg/issue3331)
+  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/condition_variable/condition_variable/wait_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/condition_variable/condition_variable/wait_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/condition_variable/condition_variable/wait_until.md b/reference/condition_variable/condition_variable/wait_until.md
index 8736566b9..8a666cd71 100644
--- a/reference/condition_variable/condition_variable/wait_until.md
+++ b/reference/condition_variable/condition_variable/wait_until.md
@@ -37,6 +37,10 @@ bool wait_until(unique_lock&amp;lt;mutex&amp;gt;&amp;amp; lock,
 - `*this`の`condition_variable`オブジェクトが他スレッドで待機していないか、もしくは並行に待機している全てのスレッドで`lock`パラメータが同じミューテックスオブジェクトを参照していること
 
 
+## テンプレートパラメータ制約
+- [`chrono::is_clock_v`](/reference/chrono/is_clock.md)`&amp;lt;Clock&amp;gt;`が`true`であること (C++20)
+
+
 ## 効果
 - (1) :
     1. アトミックに`lock.`[`unlock()`](/reference/mutex/unique_lock/unlock.md)する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/condition_variable/condition_variable_any/wait_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/condition_variable/condition_variable_any/wait_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/condition_variable/condition_variable_any/wait_until.md b/reference/condition_variable/condition_variable_any/wait_until.md
index 44655db91..9f8c00f85 100644
--- a/reference/condition_variable/condition_variable_any/wait_until.md
+++ b/reference/condition_variable/condition_variable_any/wait_until.md
@@ -28,6 +28,10 @@ bool wait_until(Lock&amp;amp; lock,
 述語を指定する場合、述語呼び出しが`true`になるまで待機を続行する。
 
 
+## テンプレートパラメータ制約
+- [`chrono::is_clock_v`](/reference/chrono/is_clock.md)`&amp;lt;Clock&amp;gt;`が`true`であること (C++20)
+
+
 ## 効果
 - (1) :
     - アトミックに`lock.[unlock()](/reference/mutex/unique_lock/unlock.md)`する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;coroutine&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;coroutine&amp;gt;&lt;/code&gt;ヘッダでは、&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;の制御に関する機能を提供する。&lt;/p&gt;
&lt;h2&gt;コルーチントレイト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html&#34;&gt;coroutine_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Promise型導出トレイト(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コルーチンハンドル&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html&#34;&gt;coroutine_handle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コルーチンハンドル(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;何もしないコルーチン&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html&#34;&gt;noop_coroutine_promise&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンPromise型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html&#34;&gt;noop_coroutine_handle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンのハンドル(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html&#34;&gt;noop_coroutine&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンのハンドルを取得(function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;トリビアルAwaitable型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/suspend_never.html&#34;&gt;suspend_never&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に中断しないAwaitable型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/suspend_always.html&#34;&gt;suspend_always&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に中断するAwaitable型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 11.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;C++20 コルーチン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_handle -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_handle.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle.md b/reference/coroutine/coroutine_handle.md
new file mode 100644
index 000000000..6fb15d096
--- /dev/null
+++ b/reference/coroutine/coroutine_handle.md
@@ -0,0 +1,190 @@
+# coroutine_handle
+* coroutine[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Promise = void&amp;gt;
+  struct coroutine_handle;
+
+  template&amp;lt;&amp;gt;
+  struct coroutine_handle&amp;lt;void&amp;gt; {
+    // (メンバ宣言は省略)
+  };
+
+  template&amp;lt;class Promise&amp;gt;
+  struct coroutine_handle : coroutine_handle&amp;lt;&amp;gt; {
+    // (メンバ宣言は省略)
+  };
+}
+```
+* hash[link /reference/functional/hash.md]
+
+## 概要
+コルーチンに対応するコルーチンハンドル。
+テンプレートパラメータ`Promise`には、コルーチンのPromise型を指定する。
+
+コルーチンハンドルはアプリケーションコードからの直接アクセスを想定した機能ではなく、コルーチンライブラリ提供クラス内部に隠蔽される構造が一般的である。
+例: 後述サンプルコードでは`task`クラス内に隠蔽されており、コルーチン`f`や関数`main`から間接的に利用される。
+
+`coroutine_handle&amp;lt;void&amp;gt;`または単に`coroutine_handle&amp;lt;&amp;gt;`は、Promise型について型消去(Type-erased)されたコルーチンハンドルとして取り扱える。
+コルーチンのPromise型を明示した`coroutine_handle&amp;lt;Promise&amp;gt;`は型消去された`coroutine_handle&amp;lt;&amp;gt;`から公開派生されており、前者から後者への暗黙変換を行うことが可能となっている。
+
+C++コルーチンとC API（コールバック関数へのポインタと`void*`をとる関数）との組合せ利用を可能とするため、`coroutine_handle`とポインタ型`void*`との相互変換がサポートされる。
+
+ユーザプログラムが`coroutine_handle`の明示特殊化または部分特殊化を宣言した場合、その動作は未定義とされる。
+
+
+## メンバ関数
+### 構築・リセット
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`(constructor)`](coroutine_handle/op_constructor.md) | コンストラクタ | C++20 |
+| [`operator=`](coroutine_handle/op_assign.md) | 代入演算子 | C++20 |
+
+### エクスポート
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`address`](coroutine_handle/address.md) | コルーチンハンドルに対応するアドレス値 | C++20 |
+
+### 観測
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`operator bool`](coroutine_handle/op_bool.md) | 有効なコルーチンか確認 | C++20 |
+| [`done`](coroutine_handle/done.md) | 最終サスペンドポイントで中断状態にあるか確認 | C++20 |
+
+### 再開
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`operator()`](coroutine_handle/resume.md) | 中断状態にあるコルーチンを再開 | C++20 |
+| [`resume`](coroutine_handle/resume.md)     | 中断状態にあるコルーチンを再開 | C++20 |
+| [`destroy`](coroutine_handle/destroy.md)   | 中断状態にあるコルーチンを破棄 | C++20 |
+
+### Promiseアクセス
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`promise`](coroutine_handle/promise.md) | Promiseオブジェクトの参照 | C++20 |
+
+
+## 静的メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`from_promise`](coroutine_handle/from_promise.md) | Promiseオブジェクトから対応するコルーチンハンドルへ変換 | C++20 |
+| [`from_address`](coroutine_handle/from_address.md) | アドレス値から対応するコルーチンハンドルへ変換 | C++20 |
+
+
+## 非メンバ関数
+### ハッシュサポート
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `template&amp;lt;class T&amp;gt; struct hash` | 先行宣言(class template) | C++20 |
+| `template&amp;lt;class P&amp;gt; struct hash&amp;lt;coroutine_handle&amp;lt;P&amp;gt;&amp;gt;` | `hash`の`coroutine_handle&amp;lt;P&amp;gt;`に対する特殊化 | C++20 |
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|-----|-----|-----|
+| `bool operator==(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 等値比較 | C++20 |
+| `bool operator!=(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 非等値比較 (`==`により使用可能) | C++20 |
+| `strong_ordering operator&amp;lt;=&amp;gt;(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 三方比較 | C++20 |
+| `bool operator&amp;lt;(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);`  | 左辺が右辺より小さいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;lt;=(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 左辺が右辺以下を判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);`  | 左辺が右辺より大きいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;=(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 左辺が右辺以上かを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+
+`coroutine_handle`同士の比較は、[`address`](coroutine_handle/address.md)が返すアドレス値を用いて比較演算が行われる。
+
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct task {
+  struct promise_type {
+    int value_;
+    auto get_return_object() { return task{*this}; }
+    auto initial_suspend() { return std::suspend_never{}; }
+    auto final_suspend() { return std::suspend_always{}; }
+    void return_value(int x) { value_ = x; }
+    void unhandled_exception() { std::terminate(); }
+  };
+
+  ~task()
+  {
+    if (coro_)
+      coro_.destroy();
+  }
+
+  task(task const&amp;amp;) = delete;
+  task(task&amp;amp;&amp;amp; rhs)
+    : coro_(std::exchange(rhs.coro_, nullptr)) {}
+
+  int get()
+  {
+    if (!coro_.done()) {
+      coro_.resume();
+    }
+    return coro_.promise().value_;
+  }
+
+private:
+  explicit task(promise_type&amp;amp; p)
+    : coro_(std::coroutine_handle&amp;lt;promise_type&amp;gt;::from_promise(p)) {}
+
+  std::coroutine_handle&amp;lt;promise_type&amp;gt; coro_;
+};
+
+task f()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;coroutine&amp;#34; &amp;lt;&amp;lt; std::endl;
+  co_return 42;
+}
+
+int main()
+{
+  auto c = f();
+  std::cout &amp;lt;&amp;lt; &amp;#34;main&amp;#34; &amp;lt;&amp;lt; std::endl;
+  int r = c.get();
+  std::cout &amp;lt;&amp;lt; &amp;#34;result=&amp;#34; &amp;lt;&amp;lt; r &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::coroutine_handle&amp;lt;promise_type&amp;gt;[color ff0000]
+* std::suspend_never[link suspend_never.md]
+* std::suspend_always[link suspend_always.md]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
+* std::exchange[link /reference/utility/exchange.md]
+
+### 出力
+```
+coroutine
+main
+result=42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>address -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/address.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_handle/address.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/address.md b/reference/coroutine/coroutine_handle/address.md
new file mode 100644
index 000000000..d51dba102
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/address.md
@@ -0,0 +1,54 @@
+# address
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr void* address() const noexcept;
+```
+
+## 概要
+コルーチンハンドルに対応するアドレス値を返す。
+
+
+## 戻り値
+コルーチンハンドルに対応するアドレス値。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;coroutine&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  assert(h.address() == nullptr);
+}
+```
+* address()[color ff0000]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`from_address`](from_address.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>destroy -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/destroy.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_handle/destroy.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/destroy.md b/reference/coroutine/coroutine_handle/destroy.md
new file mode 100644
index 000000000..7db1ac968
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/destroy.md
@@ -0,0 +1,45 @@
+# destroy
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void destroy() const;
+```
+
+## 概要
+中断状態にあるコルーチンを明示的に破棄する。
+
+
+## 事前条件
+`*this`が中断状態のコルーチンを指すこと。
+
+
+## 効果
+コルーチンを破棄する。
+
+
+## 備考
+最終サスペンドポイントにてコルーチンを中断していなければ、該当コルーチンは暗黙に破棄される。
+
+[`std::thread`](/reference/thread/thread.md)や[`std::jthread`](/reference/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを破棄する場合、その振る舞いは処理系定義とされる。
+
+
+## 例
+### 出力
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`done`](done.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>done -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/done.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_handle/done.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/done.md b/reference/coroutine/coroutine_handle/done.md
new file mode 100644
index 000000000..c283ef14f
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/done.md
@@ -0,0 +1,38 @@
+# done
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+bool done() const;
+```
+
+## 概要
+最終サスペンドポイントで中断状態にあること、つまりコルーチン本体の終端到達済みか確認する。
+
+
+## 事前条件
+`*this`が中断状態のコルーチンを指すこと。
+
+
+## 戻り値
+コルーチンが最終サスペンドポイントで中断状態にあれば`true`を返す。
+それ以外の箇所で中断状態にあれば`false`を返す。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`resume`](resume.md)
+- [`destroy`](destroy.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_address -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/from_address.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_handle/from_address.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/from_address.md b/reference/coroutine/coroutine_handle/from_address.md
new file mode 100644
index 000000000..bc5826886
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/from_address.md
@@ -0,0 +1,44 @@
+# from_address
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr coroutine_handle&amp;lt;&amp;gt;
+coroutine_handle&amp;lt;&amp;gt;::from_address(void* addr);        // (1)
+
+static constexpr coroutine_handle&amp;lt;Promise&amp;gt;
+coroutine_handle&amp;lt;Promise&amp;gt;::from_address(void* addr); // (2)
+```
+
+## 概要
+アドレス値から対応するコルーチンハンドルを取得する。
+
+
+## 事前条件
+`addr`は[`address()`](address.md)呼び出しで得られたアドレス値であること。
+
+
+## 戻り値
+コルーチンを参照するコルーチンハンドル。
+
+
+## 事後条件
+`from_address(`[`address()`](address.md)`) == *this`
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`address`](address.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_promise -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/from_promise.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_handle/from_promise.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/from_promise.md b/reference/coroutine/coroutine_handle/from_promise.md
new file mode 100644
index 000000000..33429e41a
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/from_promise.md
@@ -0,0 +1,40 @@
+# from_promise
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static coroutine_handle from_promise(Promise&amp;amp; p);
+```
+
+## 概要
+Promiseオブジェクトから対応するコルーチンハンドルを取得する。
+
+
+## 事前条件
+`p`はコルーチンのPromiseオブジェクトへの参照。
+
+
+## 戻り値
+コルーチンを参照するコルーチンハンドル(`h`)。
+
+
+## 事後条件
+[`addressof`](/reference/memory/addressof.md)`(h.`[`promise()`](promise.md)`) ==` [`addressof`](/reference/memory/addressof.md)`(p)`
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`promise`](promise.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>代入演算子 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/op_assign.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_handle/op_assign.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/op_assign.md b/reference/coroutine/coroutine_handle/op_assign.md
new file mode 100644
index 000000000..81c76e7e0
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/op_assign.md
@@ -0,0 +1,59 @@
+# 代入演算子
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+coroutine_handle&amp;amp; operator=(nullptr_t) noexcept;
+```
+
+## 概要
+コルーチンハンドルをリセットし、有効なコルーチンを指さない状態にする。
+
+
+## 戻り値
+`*this`
+
+
+## 事後条件
+[`address()`](address.md) `== nullptr`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;coroutine&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  h = nullptr;
+  assert(h.address() == nullptr);
+}
+```
+* = nullptr[color ff0000]
+* address()[link address.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/op_bool.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_handle/op_bool.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/op_bool.md b/reference/coroutine/coroutine_handle/op_bool.md
new file mode 100644
index 000000000..2dc9da05a
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/op_bool.md
@@ -0,0 +1,58 @@
+# operator bool
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr explicit operator bool() const noexcept;
+```
+
+## 概要
+コルーチンハンドルが有効なコルーチンを指すかを確認する。
+
+
+## 戻り値
+[`address()`](address.md) `!= nullptr`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  if (h) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;vaild coroutine&amp;#34; &amp;lt;&amp;lt; std::endl;
+  } else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;empty coroutine&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* if (h)[color ff0000]
+
+### 出力
+```
+empty coroutine
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/op_constructor.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_handle/op_constructor.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/op_constructor.md b/reference/coroutine/coroutine_handle/op_constructor.md
new file mode 100644
index 000000000..445a9e9ea
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/op_constructor.md
@@ -0,0 +1,59 @@
+# コンストラクタ
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr coroutine_handle() noexcept;           // (1)
+constexpr coroutine_handle(nullptr_t) noexcept;  // (2)
+```
+
+## 概要
+有効なコルーチンを指さないコルーチンハンドルを構築する。
+
+実際のコルーチンを指す`coroutine_handle`は、静的メンバ関数[`from_promise`](from_promise.md)／[`from_address`](from_address.md)を利用する。
+
+
+## 事後条件
+[`address()`](address.md) `== nullptr`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;coroutine&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  assert(h.address() == nullptr);
+}
+```
+* std::coroutine_handle[color ff0000]
+* address()[link address.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`from_promise`](from_promise.md)
+- [`from_address`](from_address.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>promise -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/promise.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_handle/promise.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/promise.md b/reference/coroutine/coroutine_handle/promise.md
new file mode 100644
index 000000000..eb97ba9a2
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/promise.md
@@ -0,0 +1,36 @@
+# promise
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+Promise&amp;amp; promise() const;
+```
+
+## 概要
+コルーチンのPromiseオブジェクトへの参照を返す。
+
+
+## 事前条件
+`*this`が有効なコルーチンを指すこと。
+
+
+## 戻り値
+コルーチンのPromiseオブジェクトへの参照。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [from_promise](from_promise.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resume -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/resume.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_handle/resume.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/resume.md b/reference/coroutine/coroutine_handle/resume.md
new file mode 100644
index 000000000..82de03d2f
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/resume.md
@@ -0,0 +1,41 @@
+# resume
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void operator()() const;
+void resume() const;
+```
+
+## 概要
+中断状態にあるコルーチンの実行を再開する。
+
+
+## 事前条件
+`*this`が中断状態のコルーチンを指し、かつ最終サスペンドポイントで中断状態にないこと。
+
+
+## 効果
+コルーチンの実行を再開する。
+
+
+## 備考
+[`std::thread`](/reference/thread/thread.md)や[`std::jthread`](/reference/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを再開する場合、その振る舞いは処理系定義とされる。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`done`](done.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_traits -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/coroutine_traits.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_traits.md b/reference/coroutine/coroutine_traits.md
new file mode 100644
index 000000000..dcb32b485
--- /dev/null
+++ b/reference/coroutine/coroutine_traits.md
@@ -0,0 +1,128 @@
+# coroutine_traits
+* coroutine[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class R, class... ArgTypes&amp;gt;
+  struct coroutine_traits;
+}
+```
+
+## 概要
+コルーチンのPromise型を指定するためのトレイト。
+
+- `ArgTypes`が型のパラメータパックかつ非修飾の`R::promise_type`が有効な型を表すとき、`coroutine_traits&amp;lt;R,ArgTypes...&amp;gt;`は下記の公開アクセスメンバを持つ。
+```cpp
+using promise_type = typename R::promise_type;
+```
+
+- それ以外では、`coroutine_traits&amp;lt;R,ArgTypes...&amp;gt;`はメンバを持たない。
+
+このクラステンプレートをプログラム定義型で特殊化する場合、`promise_type`は公開アクセスのネスト型とする必要がある。
+
+
+## メンバ型
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `promise_type` | コルーチンのPromise型 | C++20 |
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct task;
+
+struct task_promise {
+  task get_return_object();
+  auto initial_suspend() { return std::suspend_never{}; }
+  auto final_suspend() { return std::suspend_always{}; }
+  auto yield_value(int) { return std::suspend_always{}; }
+  void return_void() {}
+  void unhandled_exception() { std::terminate(); }
+};
+
+struct task {
+  using coro_handle = std::coroutine_handle&amp;lt;task_promise&amp;gt;;
+  explicit task(task_promise&amp;amp; p)
+    : coro_(coro_handle::from_promise(p)) {}
+  task(task const&amp;amp;) = delete;
+  task(task&amp;amp;&amp;amp; rhs)
+    : coro_(std::exchange(rhs.coro_, nullptr)) {}
+  ~task()
+  {
+    if (coro_)
+      coro_.destroy();
+  }
+
+  void next()
+  {
+    if (!coro_.done())
+      coro_.resume();
+  }
+
+private:
+  coro_handle coro_;
+};
+
+task task_promise::get_return_object()
+{
+  return task{*this};
+}
+
+// 戻り値taskの関数をコルーチンにアダプトする
+template &amp;lt;typename... ArgTypes&amp;gt;
+struct std::coroutine_traits&amp;lt;task, ArgTypes...&amp;gt; {
+  using promise_type = task_promise;
+};
+
+task coro()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;coro#1&amp;#34; &amp;lt;&amp;lt; std::endl;
+  co_yield {};
+  std::cout &amp;lt;&amp;lt; &amp;#34;coro#2&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  auto t = coro();
+  std::cout &amp;lt;&amp;lt; &amp;#34;main#1&amp;#34; &amp;lt;&amp;lt; std::endl;
+  t.next();
+  std::cout &amp;lt;&amp;lt; &amp;#34;main#2&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::coroutine_traits[color ff0000]
+* std::suspend_never[link suspend_never.md]
+* std::suspend_always[link suspend_always.md]
+* std::coroutine_handle[link coroutine_handle.md]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* std::exchange[link /reference/utility/exchange.md]
+
+### 出力
+```
+coro#1
+main#1
+coro#2
+main#2
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/noop_coroutine.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine.md b/reference/coroutine/noop_coroutine.md
new file mode 100644
index 000000000..22c6b7bff
--- /dev/null
+++ b/reference/coroutine/noop_coroutine.md
@@ -0,0 +1,157 @@
+# noop_coroutine
+* coroutine[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+noop_coroutine_handle noop_coroutine() noexcept;
+```
+* noop_coroutine_handle[link noop_coroutine_handle.md]
+
+## 概要
+中断／再開時に何もしないコルーチンへのハンドルを取得する。
+
+「何もしないコルーチン」は、非対称コルーチン動作と対称コルーチン動作を実行時に制御するケースで利用される。
+
+
+## 戻り値
+中断／再開時に何もしないコルーチンへのハンドル
+
+
+## 例外
+投げない
+
+
+## 備考
+`noop_coroutine()`が返したハンドルと、別の`noop_coroutine()`呼び出しで返されたハンドルとの等値性は規定されない。
+（両者は等しいかもしれないし、等しくないかもしれない。）
+
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct task {
+  struct promise_type {
+    std::coroutine_handle&amp;lt;&amp;gt; next_;
+    auto get_return_object() { return task{*this}; }
+    auto initial_suspend() { return std::suspend_always{}; }
+    auto final_suspend() { return std::suspend_always{}; }
+    auto yield_value(bool cont)
+    {
+      struct awaiter {
+        std::coroutine_handle&amp;lt;&amp;gt; next_;
+        bool await_ready() { return false; }
+        auto await_suspend(std::coroutine_handle&amp;lt;&amp;gt;) { return next_; }
+        void await_resume() {}
+      };
+      // 継続条件condを満たす場合は次コルーチンnext_に制御を移し、
+      // そうでない場合は再開元に制御を戻すAwaiterオブジェクトを返す。
+      return awaiter{cont ? next_ : std::noop_coroutine()};
+    }
+    void return_void() {}
+    void unhandled_exception() { std::terminate(); }
+  };
+
+  using coro_handle = std::coroutine_handle&amp;lt;promise_type&amp;gt;;
+
+  ~task()
+  {
+    if (coro_)
+      coro_.destroy();
+  }
+
+  task(task const&amp;amp;) = delete;
+  task(task&amp;amp;&amp;amp; rhs)
+    : coro_(std::exchange(rhs.coro_, nullptr)) {}
+
+  void set_next(task&amp;amp; t)
+  {
+    coro_.promise().next_ = t.coro_;
+  }
+
+  void start()
+  {
+    if (!coro_.done())
+      coro_.resume();
+  }
+
+private:
+  explicit task(promise_type&amp;amp; p)
+    : coro_(coro_handle::from_promise(p)) {}
+
+  coro_handle coro_;
+};
+
+task coro(int id)
+{
+  int n = id * 10;
+  for (;;) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;coro#&amp;#34; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
+    // 継続条件(0 &amp;lt; n)を満たす間はco_yield式により
+    // 自コルーチンを中断して次のコルーチンを再開する。
+    co_yield (0 &amp;lt; n);
+    n /= 2;
+  }
+}
+
+int main()
+{
+  // コルーチン3個の巡回グラフ(c1→c2→c3→c1...)を構成する
+  auto c1 = coro(1);
+  auto c2 = coro(2);
+  auto c3 = coro(3);
+  c1.set_next(c2);
+  c2.set_next(c3);
+  c3.set_next(c1);
+
+  // コルーチン動作を開始
+  c1.start();
+}
+```
+* std::noop_coroutine()[color ff0000]
+* std::suspend_always[link suspend_always.md]
+* std::coroutine_handle[link coroutine_handle.md]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
+* std::exchange[link /reference/utility/exchange.md]
+
+### 出力
+```
+coro#1 10
+coro#2 20
+coro#3 30
+coro#1 5
+coro#2 10
+coro#3 15
+coro#1 2
+coro#2 5
+coro#3 7
+coro#1 1
+coro#2 2
+coro#3 3
+coro#1 0
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+
+
+## 参照
+- [P0913R1 Add symmetric coroutine control transfer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0913r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine_handle -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/noop_coroutine_handle.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine_handle.md b/reference/coroutine/noop_coroutine_handle.md
new file mode 100644
index 000000000..d09c8b664
--- /dev/null
+++ b/reference/coroutine/noop_coroutine_handle.md
@@ -0,0 +1,89 @@
+# noop_coroutine_handle
+* coroutine[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  struct noop_coroutine_promise {};
+
+  template&amp;lt;&amp;gt;
+  struct coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt; : coroutine_handle&amp;lt;&amp;gt;
+  {
+    constexpr explicit operator bool() const noexcept;
+    constexpr bool done() const noexcept;
+
+    constexpr void operator()() const noexcept;
+    constexpr void resume() const noexcept;
+    constexpr void destroy() const noexcept;
+
+    noop_coroutine_promise&amp;amp; promise() const noexcept;
+
+    constexpr void* address() const noexcept;
+
+  private:
+    coroutine_handle(unspecified);
+  };
+
+  using noop_coroutine_handle = coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt;;
+}
+```
+* coroutine_handle&amp;lt;&amp;gt;[link coroutine_handle.md]
+* coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt;[link coroutine_handle.md]
+* unspecified[italic]
+
+
+## 概要
+中断／再開時に何もしないコルーチンへのハンドル。
+
+「何もしないコルーチン」は、非対称コルーチン動作と対称コルーチン動作を実行時に制御するケースで利用される。
+
+
+## メンバ関数
+### 観測
+
+| 名前            | 説明          | 対応バージョン |
+|-----------------|---------------|----------------|
+| `operator bool` | `true`を返す  | C++20 |
+| `done`          | `false`を返す | C++20 |
+
+### 再開
+
+| 名前         | 説明       | 対応バージョン |
+|--------------|------------|----------------|
+| `operator()` | 何もしない | C++20 |
+| `resume`     | 何もしない | C++20 |
+| `destroy`    | 何もしない | C++20 |
+
+### Promiseアクセス
+
+| 名前      | 説明           | 対応バージョン |
+|-----------|----------------|----------------|
+| `promise` | Promiseオブジェクトへの参照を返す | C++20 |
+
+### アドレス
+
+| 名前      | 説明           | 対応バージョン |
+|-----------|----------------|----------------|
+| `address` | コルーチンハンドルに対応するアドレス値を返す | C++20 |
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`coroutine_handle`](coroutine_handle.md)
+- [`noop_coroutine`](noop_coroutine.md)
+
+
+## 参照
+- [P0913R1 Add symmetric coroutine control transfer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0913r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_always -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_always.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/suspend_always.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_always.md b/reference/coroutine/suspend_always.md
new file mode 100644
index 000000000..7b266c7f0
--- /dev/null
+++ b/reference/coroutine/suspend_always.md
@@ -0,0 +1,122 @@
+# suspend_always
+* coroutine[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  struct suspend_always {
+    constexpr bool await_ready() const noexcept { return false; }
+    constexpr void await_suspend(coroutine_handle&amp;lt;&amp;gt;) const noexcept {}
+    constexpr void await_resume() const noexcept {}
+  };
+}
+```
+* coroutine_handle&amp;lt;&amp;gt;[link coroutine_handle.md]
+
+## 概要
+コルーチンを中断させる、トリビアルAwaitable型。
+
+
+## メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `await_ready`   | コルーチンを常に中断する     | C++20 |
+| `await_suspend` | コルーチン中断時に何もしない | C++20 |
+| `await_resume`  | コルーチン再開時に何もしない | C++20 |
+
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct task {
+  struct promise_type {
+    int value_;
+    auto get_return_object() { return task{*this}; }
+    auto initial_suspend()
+    {
+      return std::suspend_always{};
+    }
+    auto final_suspend()
+    {
+      return std::suspend_always{};
+    }
+    void return_value(int x) { value_ = x; }
+    void unhandled_exception() { std::terminate(); }
+  };
+
+  using coro_handle = std::coroutine_handle&amp;lt;promise_type&amp;gt;;
+
+  ~task()
+  {
+    if (coro_)
+      coro_.destroy();
+  }
+
+  task(task const&amp;amp;) = delete;
+  task(task&amp;amp;&amp;amp; rhs)
+    : coro_(std::exchange(rhs.coro_, nullptr)) {}
+
+  int get()
+  {
+    if (!coro_.done()) {
+      coro_.resume();
+    }
+    return coro_.promise().value_;
+  }
+
+private:
+  explicit task(promise_type&amp;amp; p)
+    : coro_(coro_handle::from_promise(p)) {}
+
+  coro_handle coro_;
+};
+
+task f()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;coroutine&amp;#34; &amp;lt;&amp;lt; std::endl;
+  co_return 42;
+}
+
+int main()
+{
+  auto c = f();
+  std::cout &amp;lt;&amp;lt; &amp;#34;main&amp;#34; &amp;lt;&amp;lt; std::endl;
+  int r = c.get();
+  std::cout &amp;lt;&amp;lt; &amp;#34;result=&amp;#34; &amp;lt;&amp;lt; r &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::suspend_always[color ff0000]
+* std::coroutine_handle[link coroutine_handle.md]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
+* std::exchange[link /reference/utility/exchange.md]
+
+### 出力
+```
+main
+coroutine
+result=42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`suspend_never`](suspend_never.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_never -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_never.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/coroutine/suspend_never.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_never.md b/reference/coroutine/suspend_never.md
new file mode 100644
index 000000000..b2345392d
--- /dev/null
+++ b/reference/coroutine/suspend_never.md
@@ -0,0 +1,123 @@
+# suspend_never
+* coroutine[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  struct suspend_never {
+    constexpr bool await_ready() const noexcept { return true; }
+    constexpr void await_suspend(coroutine_handle&amp;lt;&amp;gt;) const noexcept {}
+    constexpr void await_resume() const noexcept {}
+  };
+}
+```
+* coroutine_handle&amp;lt;&amp;gt;[link coroutine_handle.md]
+
+## 概要
+コルーチンを中断させない、トリビアルAwaitable型。
+
+
+## メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `await_ready`   | コルーチンを常に中断しない   | C++20 |
+| `await_suspend` | コルーチン中断時に何もしない | C++20 |
+| `await_resume`  | コルーチン再開時に何もしない | C++20 |
+
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct task {
+  struct promise_type {
+    int value_;
+    auto get_return_object() { return task{*this}; }
+    auto initial_suspend()
+    {
+      return std::suspend_never{};
+    }
+    auto final_suspend()
+    {
+      return std::suspend_always{};
+    }
+    void return_value(int x) { value_ = x; }
+    void unhandled_exception() { std::terminate(); }
+  };
+
+  using coro_handle = std::coroutine_handle&amp;lt;promise_type&amp;gt;;
+
+  ~task()
+  {
+    if (coro_)
+      coro_.destroy();
+  }
+
+  task(task const&amp;amp;) = delete;
+  task(task&amp;amp;&amp;amp; rhs)
+    : coro_(std::exchange(rhs.coro_, nullptr)) {}
+
+  int get()
+  {
+    if (!coro_.done()) {
+      coro_.resume();
+    }
+    return coro_.promise().value_;
+  }
+
+private:
+  explicit task(promise_type&amp;amp; p)
+    : coro_(coro_handle::from_promise(p)) {}
+
+  coro_handle coro_;
+};
+
+task f()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;coroutine&amp;#34; &amp;lt;&amp;lt; std::endl;
+  co_return 42;
+}
+
+int main()
+{
+  auto c = f();
+  std::cout &amp;lt;&amp;lt; &amp;#34;main&amp;#34; &amp;lt;&amp;lt; std::endl;
+  int r = c.get();
+  std::cout &amp;lt;&amp;lt; &amp;#34;result=&amp;#34; &amp;lt;&amp;lt; r &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::suspend_never[color ff0000]
+* std::suspend_always[link suspend_always.md]
+* std::coroutine_handle[link coroutine_handle.md]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
+* std::exchange[link /reference/utility/exchange.md]
+
+### 出力
+```
+coroutine
+main
+result=42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`suspend_always`](suspend_always.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>byte -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/cstddef/byte.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/cstddef/byte.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstddef/byte.md b/reference/cstddef/byte.md
index 4d7c86576..4e72e22c9 100644
--- a/reference/cstddef/byte.md
+++ b/reference/cstddef/byte.md
@@ -88,7 +88,7 @@ int main()
 ### 処理系
 - [Clang](/implementation.md#clang): 5.0
 - [GCC](/implementation.md#gcc): 7.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2017 Update 3(`_HAS_STD_BYTE`を`0`に定義することで無効化できる)
 
 
 ## 関連項目
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/copy.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/filesystem/copy.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/copy.md b/reference/filesystem/copy.md
index ef2cb3881..0475ee7fe 100644
--- a/reference/filesystem/copy.md
+++ b/reference/filesystem/copy.md
@@ -69,6 +69,7 @@ namespace std::filesystem {
         - `(options &amp;amp; copy_options::create_hard_links) != copy_options::none`であれば、コピー元ファイルのハードリンクを、コピー先に作成する
         - コピー先がディレクトリである場合、[`copy_file`](copy_file.md)`(from, to/`[`from.filename()`](path/filename.md)`, options)`を実行する
         - いずれの条件にも合致しない場合は、[`copy_file`](copy_file.md)`(from, to, options)`を実行する
+    - コピー元がディレクトリであり、`(options &amp;amp; copy_options::create_symlinks) != copy_options::none`である場合、[`make_error_code`](/reference/system_error/make_error_code.md)`(`[`errc::is_a_directory`](/reference/system_error/errc.md)`)`と等値な[`error_code`](/reference/system_error/error_code.md)オブジェクトをエラーとして報告する
     - コピー元がディレクトリであり、`((options &amp;amp; copy_options::recursive) != copy_options::none || options == copy_options::none)`である場合、
         - コピー先にディレクトリが存在しない場合は、[`create_directory`](create_directory.md)`(to, from)`を実行する
         - その後、コピー元ディレクトリの全ての要素を、以下のようにコピーする (`in-recursive-copy`は、[`copy_options`](copy_options.md)には含まれないビットマスク要素)：
@@ -191,3 +192,6 @@ int main()
 
 ## 参照
 - [LWG Issue 3015. `copy_options::unspecified` underspecified](https://wg21.cmeerw.net/lwg/issue3015)
+- [LWG Issue 2682. `filesystem::copy()` won&amp;#39;t create a symlink to a directory](https://wg21.cmeerw.net/lwg/issue2682)
+    - C++17策定同時の仕様では、`copy(&amp;#34;/&amp;#34;, &amp;#34;root&amp;#34;, copy_options::create_symlinks);`のような状況 (コピー元がディレクトリで、`create_symlinks`オプション付き) でコピー先ディレクトリにシンボリックリンクが作られない問題があった。GNUの`cp -s`コマンドでは「ディレクトリ`&amp;#34;/&amp;#34;`の処理は省略された」と表示されてエラー終了する。この問題に対する仕様変更ではその動作に合わせて、コピー元がディレクトリで`create_symlinks`オプションが指定された場合、エラーを報告するようになった
+    - この問題は2016年4月に報告された。仕様としてはC++20に含まれるが、過去に遡ってC++17のコンパイラでもこの仕様に対応している可能性がある
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>file_time_type -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/file_time_type.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/filesystem/file_time_type.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/file_time_type.md b/reference/filesystem/file_time_type.md
index 439481ed4..257a03fec 100644
--- a/reference/filesystem/file_time_type.md
+++ b/reference/filesystem/file_time_type.md
@@ -6,10 +6,12 @@
 
 ```cpp
 namespace std::filesystem {
-  using file_time_type = chrono::time_point&amp;lt;実装定義のクロック型&amp;gt;;
+  using file_time_type = chrono::time_point&amp;lt;実装定義のクロック型&amp;gt;; // (1) C++17
+  using file_time_type = chrono::time_point&amp;lt;chrono::file_clock&amp;gt;;   // (1) C++20
 }
 ```
 * chrono::time_point[link /reference/chrono/time_point.md]
+* chrono::file_clock[link /reference/chrono/file_clock.md]
 
 ## 概要
 ファイル情報で使用する時間の型。
@@ -17,7 +19,12 @@ namespace std::filesystem {
 時間の分解能はOS依存。
 
 
+## 備考
+- C++17とC++20では標準ライブラリの実装によって、この型を[`std::time_t`](/reference/ctime/time_t.md)型に変換する方法が異なる場合がある
+
+
 ## 例
+### C++17での使用例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;fstream&amp;gt;
@@ -59,12 +66,63 @@ int main()
 * tp.time_since_epoch()[link /reference/chrono/time_point/time_since_epoch.md]
 * sec.count()[link /reference/chrono/duration/count.md]
 
-### 出力例
+#### 出力例
 ```
 file time : Fri Jun 15 14:19:03 2018
 dir time : Fri Jun 15 14:19:03 2018
 ```
 
+### C++20での使用例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;fstream&amp;gt;
+#include &amp;lt;filesystem&amp;gt;
+#include &amp;lt;ctime&amp;gt;
+#include &amp;lt;iomanip&amp;gt;
+
+namespace fs = std::filesystem;
+
+void print_datetime(const char* name, fs::file_time_type tp)
+{
+  namespace chrono = std::chrono;
+  chrono::sys_time st = chrono::file_clock::to_sys(tp);
+
+  std::time_t t = chrono::system_clock::to_time_t(st);
+  const tm* lt = std::localtime(&amp;amp;t);
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; : &amp;#34; &amp;lt;&amp;lt; std::put_time(lt, &amp;#34;%c&amp;#34;) &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  std::ofstream{&amp;#34;regular.txt&amp;#34;};
+  fs::create_directory(&amp;#34;dir&amp;#34;);
+
+  // ファイル・ディレクトリの最終更新日時を取得
+  fs::file_time_type file_time = fs::last_write_time(&amp;#34;regular.txt&amp;#34;);
+  fs::file_time_type dir_time = fs::last_write_time(&amp;#34;dir&amp;#34;);
+
+  print_datetime(&amp;#34;file time&amp;#34;, file_time);
+  print_datetime(&amp;#34;dir time&amp;#34;, dir_time);
+
+  // ファイルの最終更新日時として、現在日時を設定
+  fs::last_write_time(&amp;#34;regular.txt&amp;#34;, fs::file_time_type::clock::now());
+}
+```
+* fs::last_write_time[color ff0000]
+* fs::file_time_type[link file_time_type.md]
+* fs::create_directory[link create_directory.md]
+* chrono::sys_time[link /reference/chrono/sys_time.md]
+* chrono::file_clock[link /reference/chrono/file_clock.md]
+* chrono::system_clock[link /reference/chrono/system_clock.md]
+* to_time_t[link /reference/chrono/system_clock/to_time_t.md]
+
+#### 出力例
+```
+file time : Wed Jul 15 23:08:06 2020
+dir time : Wed Jul 15 23:08:06 2020
+```
+
+
 ## バージョン
 ### 言語
 - C++17
@@ -77,3 +135,5 @@ dir time : Fri Jun 15 14:19:03 2018
 
 ## 関連項目
 - [`last_write_time`](last_write_time.md)
+- [P0355R7 Extending `&amp;lt;chrono&amp;gt;` to Calendars and Time Zones](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0355r7.html)
+- [`file_clock` breaks ABI for C++17 implementations](https://wg21.cmeerw.net/lwg/issue3145)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>path -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/path.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/filesystem/path.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/path.md b/reference/filesystem/path.md
index 27e27ca86..115b3428e 100644
--- a/reference/filesystem/path.md
+++ b/reference/filesystem/path.md
@@ -64,7 +64,7 @@ namespace std::filesystem {
 | [`wstring`](path/wstring.md) | システムのワイド文字コードとしてパス文字列を取得する | C++17 |
 | [`u8string`](path/u8string.md) | UTF-8エンコードとしてパス文字列を取得する | C++17 |
 | [`u16string`](path/u16string.md) | UTF-16エンコードでパス文字列を取得する | C++17 |
-| [`u32string`](path/u32string.md) | UTF-32エンコードでパス文字列を首都する | C++17 |
+| [`u32string`](path/u32string.md) | UTF-32エンコードでパス文字列を取得する | C++17 |
 
 ### システム非依存のパスフォーマット
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/path/op_assign.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/filesystem/path/op_assign.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/path/op_assign.md b/reference/filesystem/path/op_assign.md
index 6f0630ead..36034c2a6 100644
--- a/reference/filesystem/path/op_assign.md
+++ b/reference/filesystem/path/op_assign.md
@@ -23,11 +23,10 @@ path&amp;amp; operator=(const Source&amp;amp; source); // (4)
 
 ## 要件
 - (4) : `Source`型は、以下の要件を満たすこと
-    - 文字型`char`、`wchar_t`、`char8_t`、`char16_t`、`char32_t`を`EcharT`として、
-    - [`std::basic_string`](/reference/string/basic_string.md)`&amp;lt;EcharT, traits, Allocator&amp;gt;`
-    - [`std::basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;EcharT, traits&amp;gt;`
-    - `ECharT`型を要素とする文字配列と、文字配列へのポインタ
-    - これらの要件を満たさない場合、この関数はオーバーロード解決の候補から除外される
+    - 文字型`char`、`wchar_t`、`char8_t`、`char16_t`、`char32_t`を`EcharT`として、`Source`が以下のいずれかでなければ、この関数はオーバーロード解決の候補から除外される
+        - [`std::basic_string`](/reference/string/basic_string.md)`&amp;lt;EcharT, traits, Allocator&amp;gt;`
+        - [`std::basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;EcharT, traits&amp;gt;`
+        - `ECharT`型を要素とする文字配列と、文字配列へのポインタ
     - `source`はヌルポインタであってはならない
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>u8path -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/u8path.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/filesystem/u8path.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/u8path.md b/reference/filesystem/u8path.md
index 233f23e54..7f1b63ede 100644
--- a/reference/filesystem/u8path.md
+++ b/reference/filesystem/u8path.md
@@ -22,8 +22,8 @@ namespace std::filesystem {
 ## 概要
 UTF-8エンコードされた文字列からパスオブジェクトを構築する。
 
-- (1) : UTF-8エンコードされた`char`配列、[`std::string`](/reference/string/basic_string.md)、[`std::string_view`](/reference/string_view/basic_string_view.md)オブジェクトからパスオブジェクトを構築する
-- (2) : UTF-8エンコードされた`char`要素の範囲から、パスオブジェクトを構築する
+- (1) : UTF-8エンコードされた`char`(C++20以降は`char8_t`も)配列、[`std::string`](/reference/string/basic_string.md)、[`std::string_view`](/reference/string_view/basic_string_view.md)オブジェクトからパスオブジェクトを構築する
+- (2) : UTF-8エンコードされた`char`(C++20以降は`char8_t`も)要素の範囲から、パスオブジェクトを構築する
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/format/format.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 683569592..9d435e4ab 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -6,17 +6,19 @@
 * cpp20[meta cpp]
 
 ```cpp
-template&amp;lt;class... Args&amp;gt;
-string format(string_view fmt, const Args&amp;amp;... args); // (1)
+namespace std {
+  template&amp;lt;class... Args&amp;gt;
+  string format(string_view fmt, const Args&amp;amp;... args);                      // (1)
 
-template&amp;lt;class... Args&amp;gt;
-wstring format(wstring_view fmt, const Args&amp;amp;... args); // (2)
+  template&amp;lt;class... Args&amp;gt;
+  wstring format(wstring_view fmt, const Args&amp;amp;... args);                    // (2)
 
-template&amp;lt;class... Args&amp;gt;
-string format(const locale&amp;amp; loc, string_view fmt, const Args&amp;amp;... args); // (3)
+  template&amp;lt;class... Args&amp;gt;
+  string format(const locale&amp;amp; loc, string_view fmt, const Args&amp;amp;... args);   // (3)
 
-template&amp;lt;class... Args&amp;gt;
-wstring format(const locale&amp;amp; loc, wstring_view fmt, const Args&amp;amp;... args); // (4)
+  template&amp;lt;class... Args&amp;gt;
+  wstring format(const locale&amp;amp; loc, wstring_view fmt, const Args&amp;amp;... args); // (4)
+}
 ```
 * string[link /reference/string/basic_string.md]
 * wstring[link /reference/string/basic_string.md]
@@ -77,7 +79,7 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // format_error
 * `sign` : 符号
     * `+` : 正の数でも符号を表示する
     * `-` : 負の数の場合のみ符号を表示する(デフォルト)
-    * ` ` : 正の数にはスペースを表示する
+    * スペース : 正の数にはスペースを表示する
 * `#` : 代替表現(`0x`など形式がわかる表記)を使う
 * `0` : 符号を考慮して0で埋める (`fill`を`0`、`align`を`=`にした場合と同じ)
 * `width` : 幅 (省略時は値に応じて幅が決まり、アライメントは機能しない)
@@ -174,6 +176,9 @@ format(&amp;#34;{0:} {0:+} {0:-} {0: }&amp;#34;, -1);  // &amp;#34;-1 -1 -1 -1&amp;#34;
 format(&amp;#34;{0:} {0:+} {0:-} {0: }&amp;#34;, inf); // &amp;#34;inf +inf inf  inf&amp;#34;
 format(&amp;#34;{0:} {0:+} {0:-} {0: }&amp;#34;, nan); // &amp;#34;nan +nan nan  nan&amp;#34;
 ```
+* numeric_limits[link /reference/limits/numeric_limits.md]
+* infinity()[link /reference/limits/numeric_limits/infinity.md]
+* quiet_NaN()[link /reference/limits/numeric_limits/quiet_nan.md]
 
 ```cpp
 format(&amp;#34;{}&amp;#34;, 42);                      // &amp;#34;42&amp;#34;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/format/formatter.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 0a4716c16..337690122 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -7,7 +7,7 @@
 
 ```cpp
 namespace std {
-  template&amp;lt;class T, class U&amp;gt;
+  template&amp;lt;class T, class U = char&amp;gt;
   struct formatter;
 }
 ```
@@ -15,30 +15,30 @@ namespace std {
 ## 概要
 フォーマット引数の個々の型に対応する書式文字列の解析と値のフォーマットを担うクラス。
 
-`charT`を`char`または`wchar_t`とすると、標準で次の特殊化が有効である。
+`charT`を`char`または`wchar_t`とすると、標準で以下の特殊化が利用できる。
 
-1. 以下のもの。
-```cpp
-template&amp;lt;&amp;gt; struct formatter&amp;lt;charT, charT&amp;gt;;
+- 1 以下のもの。
+    ```cpp
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;charT, charT&amp;gt;;
 
-template&amp;lt;&amp;gt; struct formatter&amp;lt;char, wchar_t&amp;gt;;
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;char, wchar_t&amp;gt;;
 
-template&amp;lt;&amp;gt; struct formatter&amp;lt;charT*, charT&amp;gt;;
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;charT*, charT&amp;gt;;
 
-template&amp;lt;&amp;gt; struct formatter&amp;lt;const charT*, charT&amp;gt;;
+    template&amp;lt;&amp;gt; struct formatter&amp;lt;const charT*, charT&amp;gt;;
 
-template&amp;lt;size_t N&amp;gt; struct formatter&amp;lt;const charT[N], charT&amp;gt;;
+    template&amp;lt;size_t N&amp;gt; struct formatter&amp;lt;const charT[N], charT&amp;gt;;
 
-template&amp;lt;class traits, class Allocator&amp;gt;
-struct formatter&amp;lt;basic_string&amp;lt;charT, traits, Allocator&amp;gt;, charT&amp;gt;;
+    template&amp;lt;class traits, class Allocator&amp;gt;
+    struct formatter&amp;lt;basic_string&amp;lt;charT, traits, Allocator&amp;gt;, charT&amp;gt;;
 
-template&amp;lt;class traits&amp;gt;
-struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
-```
-* basic_string[link /reference/string/basic_string.md]
-* basic_string_view[link /reference/string_view/basic_string_view.md]
+    template&amp;lt;class traits&amp;gt;
+    struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
+    ```
+    * basic_string[link /reference/string/basic_string.md]
+    * basic_string_view[link /reference/string_view/basic_string_view.md]
 
-2. 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
+- 2 第1テンプレート引数が`nullptr_t`, `void*`, `const void*`, `bool`, すべてのCV修飾されない標準の整数型, 拡張整数型, 浮動小数点数型であり、第2テンプレート引数が`charT`であるもの。
 
 さらに、ユーザーが`formatter`を特殊化した場合、それも有効である。
 
@@ -54,7 +54,7 @@ struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
 
 * `F`は`Cpp17DefaultConstructible`、`Cpp17CopyConstructible`、`Cpp17CopyAssignable`、`Cpp17Destructible`であること (注: ここはC++20の策定までにコンセプトで書き換えられるかもしれない)
 
-さらに、
+さらに、以下の条件を満たすこと
 
 1. 式 `f.parse(pc)` が有効であり、
     * 戻り値の型が`PC::iterator`である
@@ -69,7 +69,7 @@ struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
     * 出力は`t`、グローバルロケール、最後に呼び出された`f.parse(pc)`の`[pc.begin(), pc.end())`の範囲以外に依存しない
     * `u`を変更しない
 
-ただし、
+条件内の各要素を、以下のように定義する
 
 * 文字の型を`charT`
 * 出力イテレーターの型を`Out`
@@ -84,8 +84,6 @@ struct formatter&amp;lt;basic_string_view&amp;lt;charT, traits&amp;gt;, charT&amp;gt;;
 * `pc.begin()`は書式文字列中の対応する置換フィールドのオプションの先頭を指す
 * オプションが空なら、`pc.begin() == pc.end()`または`*pc.begin() == &amp;#39;}&amp;#39;`である
 
-とする。
-
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_after -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/emplace_after.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/forward_list/forward_list/emplace_after.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/emplace_after.md b/reference/forward_list/forward_list/emplace_after.md
index 426ea3c3b..67b376ee2 100644
--- a/reference/forward_list/forward_list/emplace_after.md
+++ b/reference/forward_list/forward_list/emplace_after.md
@@ -19,7 +19,7 @@ iterator emplace_after(const_iterator position, Args&amp;amp;&amp;amp;... args);
 
 
 ## 要件
-第1パラメータ`position`が、[`before_begin()`](before_begin.md)もしくは`[`[`begin()`](begin.md)`,` [`end()`](end.md)`]`の範囲の間接参照可能なイテレータであること。
+第1パラメータ`position`が、[`before_begin()`](before_begin.md)もしくは`[`[`begin()`](begin.md)`,` [`end()`](end.md)`)`の範囲の間接参照可能なイテレータであること。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_after -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/insert_after.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/forward_list/forward_list/insert_after.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/insert_after.md b/reference/forward_list/forward_list/insert_after.md
index c67381c48..043969cbd 100644
--- a/reference/forward_list/forward_list/insert_after.md
+++ b/reference/forward_list/forward_list/insert_after.md
@@ -33,17 +33,21 @@ iterator insert_after(const_iterator position,
 
 
 ## 要件
-- 第1パラメータ`position`が、[`before_begin()`](/reference/forward_list/forward_list/before_begin.md)もしくは`[`[`begin()`](begin.md)`,` [`end()`](/reference/forward_list/forward_list/end.md)`]`の範囲の間接参照可能なイテレータであること。
+- 第1パラメータ`position`が、[`before_begin()`](/reference/forward_list/forward_list/before_begin.md)もしくは`[`[`begin()`](begin.md)`,` [`end()`](/reference/forward_list/forward_list/end.md)`)`の範囲の間接参照可能なイテレータであること。
 - `first`、`last`は`*this`のイテレータではないこと。
 
 
 ## 戻り値
-挿入された要素を指すイテレータ
 
+- (1), (2) : 挿入された要素を指すイテレータ
+- (3), (4), (5) : 最後に挿入された要素を指すイテレータ、挿入されなかった時は`position`
 
 ## 計算量
-定数時間
 
+- (1), (2) : 定数時間
+- (3) : `n`に対して線形時間
+- (4) : `std::distance(first, last)`に対して線形時間
+- (5) : `il.size()`に対して線形時間
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resize -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/resize.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/forward_list/forward_list/resize.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/resize.md b/reference/forward_list/forward_list/resize.md
index 68c0a54a8..5f3b1af0b 100644
--- a/reference/forward_list/forward_list/resize.md
+++ b/reference/forward_list/forward_list/resize.md
@@ -6,8 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-void resize(size_type sz);
-void resize(size_type sz, const value_type&amp;amp; c);
+void resize(size_type sz);                        // (1)
+void resize(size_type sz, const value_type&amp;amp; c);   // (2)
 ```
 
 ## 概要
@@ -15,7 +15,10 @@ void resize(size_type sz, const value_type&amp;amp; c);
 
 
 ## テンプレートパラメータ制約
-- 型`T`がデフォルト構築可能であり、`*this`に対してコピー挿入可能であること
+- (1) 
+    - C++14まで : 型`T`がデフォルト構築可能であること
+    - C++17から : 型`T`が`*this`に対してデフォルト挿入可能であること
+- (2) : 型`T`が`*this`に対してコピー挿入可能であること
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>functional -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/functional.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/functional.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional.md b/reference/functional.md
index 6e2a12ff2..5dc8cd46f 100644
--- a/reference/functional.md
+++ b/reference/functional.md
@@ -163,7 +163,7 @@ struct doubler {
 | `bind2nd` | 第2引数を部分適用する関数オブジェクト(function template) | C++11から非推奨&amp;lt;br/&amp;gt; C++17で削除 |
 
 
-## コンセプト
+## 名前付き要件
 
 | 名前 | 説明 | 対応バージョン |
 |---------------------------------------------|--------------------------|-------|
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>boyer_moore_horspool_searcher -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/functional/boyer_moore_horspool_searcher.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/functional/boyer_moore_horspool_searcher.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/boyer_moore_horspool_searcher.md b/reference/functional/boyer_moore_horspool_searcher.md
index 7d053d0d3..1556ef201 100644
--- a/reference/functional/boyer_moore_horspool_searcher.md
+++ b/reference/functional/boyer_moore_horspool_searcher.md
@@ -27,7 +27,7 @@ namespace std {
 
 
 ## 要件
-- `RandomAccessIterator1`が指す値型は、[デフォルト構築可能](/reference/concepts/default_constructible.md)、[コピー構築可能](/reference/concepts/copy_constructible.md)、[コピー代入可能](/reference/type_traits/is_copy_assignable.md)の要件を満たすこと
+- `RandomAccessIterator1`が指す値型は、[デフォルト構築可能](/reference/concepts/default_initializable.md)、[コピー構築可能](/reference/concepts/copy_constructible.md)、[コピー代入可能](/reference/type_traits/is_copy_assignable.md)の要件を満たすこと
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>boyer_moore_searcher -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/functional/boyer_moore_searcher.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/functional/boyer_moore_searcher.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/boyer_moore_searcher.md b/reference/functional/boyer_moore_searcher.md
index ceeedd5c2..3fcd8a4af 100644
--- a/reference/functional/boyer_moore_searcher.md
+++ b/reference/functional/boyer_moore_searcher.md
@@ -27,7 +27,7 @@ namespace std {
 
 
 ## 要件
-- `RandomAccessIterator1`が指す値型は、[デフォルト構築可能](/reference/concepts/default_constructible.md)、[コピー構築可能](/reference/concepts/copy_constructible.md)、[コピー代入可能](/reference/type_traits/is_copy_assignable.md)の要件を満たすこと
+- `RandomAccessIterator1`が指す値型は、[デフォルト構築可能](/reference/concepts/default_initializable.md)、[コピー構築可能](/reference/concepts/copy_constructible.md)、[コピー代入可能](/reference/type_traits/is_copy_assignable.md)の要件を満たすこと
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_searcher -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/functional/default_searcher.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/functional/default_searcher.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/default_searcher.md b/reference/functional/default_searcher.md
index 6de31198c..1757d3e37 100644
--- a/reference/functional/default_searcher.md
+++ b/reference/functional/default_searcher.md
@@ -13,7 +13,7 @@ namespace std {
 * equal_to[link equal_to.md]
 
 ## 概要
-`std::default_searcher`は、[`std::search()`](/reference/algorithm/search.md)のデフォルトの検索法で、シーケンス (text) からサブシーケンス (pattern) を検索する関数オブジェクトである。このクラスは、検索器 (searcher) を指定する`[`std::search()`](/reference/algorithm/search.md)のインタフェースに、デフォルトの検索方法を指定するために定義されている。
+`std::default_searcher`は、[`std::search()`](/reference/algorithm/search.md)のデフォルトの検索法で、シーケンス (text) からサブシーケンス (pattern) を検索する関数オブジェクトである。このクラスは、検索器 (searcher) を指定する[`std::search()`](/reference/algorithm/search.md)のインタフェースに、デフォルトの検索方法を指定するために定義されている。
 
 このクラスは、コンストラクタおよびクラステンプレートのテンプレート引数で、検索対象となるサブシーケンス (pattern) を登録し、関数呼び出し演算子で全体のシーケンス (text) を指定して検索を実行する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>identity -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/functional/identity.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/functional/identity.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/identity.md b/reference/functional/identity.md
index 6433181f6..d30aecd8c 100644
--- a/reference/functional/identity.md
+++ b/reference/functional/identity.md
@@ -35,7 +35,7 @@ namespace std {
 
 | 名前                   | 説明                                                                                                                                                       | 対応バージョン |
 |------------------------|--------------------------------|----------------|
-| `is_transparent`       | `operator()` が関数テンプレートである事を示すタグ型。&amp;lt;br/&amp;gt;実装依存の型であるがあくまでタグ型であり、型そのものには意味はない。（`T` が `void` の場合のみ） | C++20          |
+| `is_transparent`       | `operator()` が関数テンプレートである事を示すタグ型。&amp;lt;br/&amp;gt;実装依存の型であるがあくまでタグ型であり、型そのものには意味はない。| C++20          |
 
 ## 備考
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>invoke -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/functional/invoke.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/functional/invoke.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/invoke.md b/reference/functional/invoke.md
index e34684237..5a4806653 100644
--- a/reference/functional/invoke.md
+++ b/reference/functional/invoke.md
@@ -19,19 +19,19 @@ namespace std {
 * is_nothrow_invocable_v[link /reference/type_traits/is_nothrow_invocable.md]
 
 ## 概要
-関数呼び出し可能なオブジェクト`f`とその引数`args...`の組み合わせで[*INVOKE*](/reference/concepts/Invoke.md)コンセプトに従った関数呼び出しを行う。
+関数呼び出し可能なオブジェクト`f`とその引数`args...`の組み合わせで[*INVOKE*](/reference/concepts/Invoke.md)要件に従った関数呼び出しを行う。
 
-[*INVOKE*](/reference/concepts/Invoke.md)コンセプトとはC++における関数呼び出しという性質を抽象化しまとめた概念（コンセプト）であり、この関数はその実体化、すなわち関数呼び出しという操作を統一したものである。
+[*INVOKE*](/reference/concepts/Invoke.md)要件とはC++における関数呼び出しという性質を抽象化しまとめた概念であり、`invoke`はその実体化、すなわち関数呼び出しという操作を統一したものである。
 
 ## 要件
-型`F`および`Args`の組み合わせで[*INVOKE*](/reference/concepts/Invoke.md)コンセプトに従った関数呼び出しが可能であり、オーバーロード解決の結果が曖昧にならないこと。そうでない場合はコンパイルエラーとなる。
+型`F`および`Args...`の組み合わせで[*INVOKE*](/reference/concepts/Invoke.md)要件に従った関数呼び出しが可能であり、オーバーロード解決の結果が曖昧にならないこと。そうでない場合はコンパイルエラーとなる。
 
 ## 引数
 - `f` -- [*Callable*](/reference/concepts/Callable.md) オブジェクト（関数ポインタ/参照・関数オブジェクト・メンバポインタ）
 - `args...` -- `f`に与える引数列。`f`がメンバポインタである場合は対応するクラスのオブジェクト（もしくはその[reference_wrapper](reference_wrapper.md)）が`args...`の先頭になければならない
 
 ## 戻り値
-`f`と`args...`により[*INVOKE*](/reference/concepts/Invoke.md)コンセプトに従った関数呼び出しを行い、その結果を戻り値として返す。
+`f`と`args...`により[*INVOKE*](/reference/concepts/Invoke.md)要件に従った関数呼び出しを行い、その結果を戻り値として返す。
 
 ## 例外
 `f`の`args...`による関数呼び出しに際して例外を投げない（[`is_nothrow_invocable_v&amp;lt;F, Args...&amp;gt;`](/reference/type_traits/is_nothrow_invocable.md) ` == true`）ならば、この関数も例外を投げない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>async -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/future/async.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/future/async.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/async.md b/reference/future/async.md
index a68752c6a..50f3d223f 100644
--- a/reference/future/async.md
+++ b/reference/future/async.md
@@ -25,6 +25,7 @@ namespace std {
   [[nodiscard]] future&amp;lt;invoke_result_t&amp;lt;decay_t&amp;lt;F&amp;gt;, decay_t&amp;lt;Args&amp;gt;...&amp;gt;&amp;gt;
     async(F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args);                // (1) C++20
 
+
   template &amp;lt;class F, class... Args&amp;gt;
   future&amp;lt;typename result_of&amp;lt;F(Args...)&amp;gt;::type&amp;gt;
     async(launch policy, F&amp;amp;&amp;amp; f, Args&amp;amp;&amp;amp;... args); // (2) C++11
@@ -70,11 +71,11 @@ namespace std {
 
 各実行ポリシーの振る舞いは以下のようになる：
 
-- `policy &amp;amp; launch::async`が`0`じゃない場合、新たなスレッドで関数オブジェクト`f`に`args...`を渡して実行する
+- `policy &amp;amp; launch::async`が`0`でない場合、新たなスレッドで関数オブジェクト`f`に`args...`を渡して実行する
     - ( [`INVOKE`](/reference/concepts/Invoke.md)`(DECAY_COPY(std::`[`forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)), DECAY_COPY(std::`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args))...)` )
     - 関数オブジェクト`f`の戻り値が、この関数の戻り値である[`future`](future.md)オブジェクトとの共有状態に書き込まれる。
     - 関数オブジェクト`f`の内部で例外が投げられた場合は、共有状態に投げられた例外が設定される。
-- `policy &amp;amp; launch::deferred`が`0`じゃない場合、関数オブジェクト`f`をその場では実行せず、遅延状態にする
+- `policy &amp;amp; launch::deferred`が`0`でない場合、関数オブジェクト`f`をその場では実行せず、遅延状態にする
     - (`DECAY_COPY(std::`[`forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f))`と`DECAY_COPY(std::`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args))...`を[`future`](future.md)オブジェクトとの共有状態に格納する)。
     - この関数の戻り値である[`future`](future.md)オブジェクトの[`get()`](future/get.md)もしくは[`wait()`](future/wait.md)が呼び出されるタイミングで、関数オブジェクト`f`に`args...`を渡して実行する。
 - 有効な実行ポリシーが指定されていない場合(整数値を`launch`型にキャストするような状況)、その動作は未定義(C++14)。
@@ -92,7 +93,7 @@ namespace std {
 
 ### 戻り値
 
-[`launch::async`](launch.md)を指定してこの関数を呼び出した場合のみ、戻り値の`future`オブジェクトはそのデストラクタにおいて、指定された関数の終了を待機する。
+[`launch::async`](launch.md)を指定してこの関数を呼び出した場合のみ、戻り値の`future`オブジェクトはそのデストラクタにおいて、指定された関数の終了を待機する（おそらく、[`wait()`](future/wait.md)を呼ぶ）。
 
 すなわち、[`launch::async`](launch.md)を指定した場合には戻り値を何かしらの形で受けておかないとこの関数は同期的に実行されているかのように振舞う。また、戻り値を何かしらの形で受けた場合でもそのスコープを抜ける際に指定された関数の終了を待機する。この挙動はクラスのメンバ変数に保存する等、外部スコープに持ち出したとしても変わらない。
 
@@ -118,10 +119,10 @@ std::async(std::launch::async, []{ g(); }); //g()の呼び出しは必ずf()の
 MSVCにおける`launch::async`指定した際のこの関数の実装は、Windowsの提供するスレッドプールのスレッドを用いて処理を実行するため、新しいスレッドを起動せず、処理スレッドは終了されない。
 
 このため、スレッドローカルストレージを利用している場合、あるスレッドにおける同じ処理の1回目の呼び出しではスレッドローカルストレージ内のオブジェクトは破棄されず、2回目以降の呼び出しではスレッドローカルストレージ内オブジェクトの初期化処理は実行されない。  
-また、どのスレッドが呼ばれるかはおそらくランダムであるため、違うスレッドローカルストレージにある同じ名前のオブジェクトを利用していることになり可能性もある。  
+また、どのスレッドが呼ばれるかはおそらくランダムであるため、違うスレッドローカルストレージにある同じ名前のオブジェクトを利用していることになる可能性もある。  
 Windows環境においてMSVC実装の本関数とスレッドローカルストレージを合わせて利用する場合は注意が必要である。
 
-なおC++標準規格ではC++11以降一貫して、`launch::async`を指定して本関数を呼び出した場合は新しいスレッドを起動する、という様に記述されているため、MSVCのこの実装は規格違反となる。
+なおC++標準規格ではC++11以降一貫して、「`launch::async`を指定して本関数を呼び出した場合は新しいスレッドを起動する」という様に記述されているため、MSVCのこの実装は規格違反となる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/future/future/wait_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/future/future/wait_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/future/wait_until.md b/reference/future/future/wait_until.md
index 126f75f57..43ef88fcb 100644
--- a/reference/future/future/wait_until.md
+++ b/reference/future/future/wait_until.md
@@ -16,6 +16,10 @@ future_status wait_until(const chrono::time_point&amp;lt;Clock, Duration&amp;gt;&amp;amp; abs_time) co
 絶対時間でタイムアウトを指定して、処理が完了するまで待機する
 
 
+## テンプレートパラメータ制約
+- [`chrono::is_clock_v`](/reference/chrono/is_clock.md)`&amp;lt;Clock&amp;gt;`が`true`であること (C++20)
+
+
 ## 効果
 共有状態が遅延状態([`future_status::deferred`](../future_status.md))の場合、この関数は何もしない。そうでない場合、`abs_time`で指定された絶対時間の期限まで、共有状態が準備状態([`future_status::ready`](../future_status.md))になるのを待機する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/future/shared_future/wait_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/future/shared_future/wait_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/shared_future/wait_until.md b/reference/future/shared_future/wait_until.md
index c4c337463..752959d3b 100644
--- a/reference/future/shared_future/wait_until.md
+++ b/reference/future/shared_future/wait_until.md
@@ -16,6 +16,10 @@ future_status wait_until(const chrono::time_point&amp;lt;Clock, Duration&amp;gt;&amp;amp; abs_time) co
 絶対時間でタイムアウトを指定して、処理が完了するまで待機する
 
 
+## テンプレートパラメータ制約
+- [`chrono::is_clock_v`](/reference/chrono/is_clock.md)`&amp;lt;Clock&amp;gt;`が`true`であること (C++20)
+
+
 ## 効果
 共有状態が遅延状態([`future_status::deferred`](../future_status.md))の場合、この関数は何もしない。そうでない場合、`abs_time`で指定された絶対時間の期限まで、共有状態が準備状態([`future_status::ready`](../future_status.md))になるのを待機する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cout -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iostream/cout.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iostream/cout.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iostream/cout.md b/reference/iostream/cout.md
index 5f9d0b9e8..5d8b1e527 100644
--- a/reference/iostream/cout.md
+++ b/reference/iostream/cout.md
@@ -64,15 +64,11 @@ int main()
 
 のようにして設定しないと何も表示されない。
 
-`std::locale(&amp;#34;&amp;#34;)`とすると本来はOSに設定されたロケールが設定されるはずが、MinGWやLinux環境で実行すると、&amp;#34;C&amp;#34;ロケールになってしまう問題がある。
-
-また、上記プログラムで`std::locale(&amp;#34;ja&amp;#34;)`の行のコメントアウトを外してを実行すると、以下のようなエラーが出力されてしまう。
+`std::locale(&amp;#34;&amp;#34;)`とすると本来はOSに設定されたロケールが設定されるはずが、MinGW環境でコンパイルし実行すると、以下のようなエラーが出力されてしまう。
 
 ```
 terminate called after throwing an instance of &amp;#39;std::runtime_error&amp;#39;
   what():  locale::facet::_S_create_c_locale name not valid
-
-Aborted
 ```
 
 一方、以下のようなコードなら求める結果が得られる処理系もある。
@@ -95,14 +91,16 @@ int main()
 
 このように求める結果を得るためのlocaleの設定は処理系によって大きく異なる。
 
-#### 端末のロケールなど
+#### 端末のロケールやフォントなど
 
-`wcout`自体はUnicodeを扱うが、結局`stdout`に出力するので、その標準出力を受け取って表示する端末のロケールやフォントなどの設定も考える必要がある。
+`wcout`を使ったとしても、結局`stdout`に出力するので、その標準出力を受け取って表示する端末のロケールやフォントなどの設定も考える必要がある。
 
 ##### Windows
-WindowsではコマンドプロンプトのデフォルトのロケールがUTF-8(65001)ではない事が多い(日本語利用者なら932になっている事が多い)ため、そのロケールで対応していないUnicodeコードポイントは当然変換できないので文字化けする。
+Windowsでは`wchar_t`型といえばUTF-16でエンコードされた文字を指す。もし標準出力を受け取って表示するコンソールのロケールがUTF-8(65001)であるならばUTF-16からUTF-8への変換は一対一対応するため変換段階において問題は起きない。
+
+しかしながらデフォルトのロケールがUTF-8(65001)ではない事が多い(日本語利用者なら932になっている事が多い)ため、そのロケールで対応していないUnicodeコードポイントは当然変換できないので文字化けする。`chcp 65001`などでUTF-8にすることができる。
 
-またWindows10 1709より前では、`chcp 65001`などでUTF-8にしたときのフォントの指定に制約があり、実質日本語を表示することは不可能だった。
+こうしてUTF-8としてコンソールが文字列を受け取ったとしてもそれを正しく表示できるとは限らない。まずフォントが表示したい文字をすべて含んでいなければならない。またそうしたフォントを使えるようになっていなければならない。Windows10 1709より前では、ロケールをUTF-8にしたときのフォントの指定に制約があり、実質日本語を表示することは不可能だった。次に、🍣🍺のような色のついた絵文字を表示するためには、フォントの対応に加えて、それをDirectWriteなどを用いて描画されることが前提となる。例えばコマンドプロンプトはGDIで描画するため原理上不可能である。Microsoftが開発している[Windows Terminal](https://github.com/microsoft/terminal)ではこうした描画側の問題を克服しようとしている。
 
 ## 出典
 
@@ -114,3 +112,4 @@ WindowsではコマンドプロンプトのデフォルトのロケールがUTF-
 - [標準出力に書き込む | 株式会社きじねこ](http://www.kijineko.co.jp/tech/cppsamples/stdout.html)
 - [c++で日本語の処理（ロケール周り） 7/8追記 - nullnull7の日記](http://nullnull.hatenablog.com/entry/20120629/1340935277)
 - [std::locale constructor modifies global locale via &amp;#34;setlocale()&amp;#34; | Microsoft Connect](http://web.archive.org/web/20100328154628/http://connect.microsoft.com:80/VisualStudio/feedback/details/492128/std-locale-constructor-modifies-global-locale-via-setlocale)
+- [ASCII.jp：Windows 10に“まとも”に使えるコンソール「WindowsTerminal」が登場する (2/2)](https://ascii.jp/elem/000/001/868/1868623/2/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;iterator&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;ヘッダでは、イテレータに関する機能群を提供する。
イテレータは日本語では反復子とも呼ばれ、配列やコンテナのような範囲を横断する手段として使用できる。&lt;/p&gt;
&lt;p&gt;C++標準ライブラリのイテレータは、以下のように階層的に定義される。
この階層はC++言語機能の継承と同じように見なせる。たとえば、入力イテレータと前方向イテレータはis a関係が成り立っており、前方向イテレータは入力イテレータと見なすことができる。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.github.com/cpprefjp/image/master/reference/iterator/iterators.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;C++20以降の標準ライブラリでは、任意のイテレータに対して可能な操作によって上記5つに隣接イテレータ（&lt;em&gt;contiguous iterator&lt;/em&gt;）を加えた6つのイテレータカテゴリを定義する。それぞれ次のイテレータコンセプトが対応する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入力イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_iterator.md.nolink&#34;&gt;input_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;出力イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/output_iterator.md.nolink&#34;&gt;output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前方向イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/forward_iterator.md.nolink&#34;&gt;forward_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;双方向イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/bidirectional_iterator.md.nolink&#34;&gt;bidirectional_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ランダムアクセスイテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/random_access_iterator.md.nolink&#34;&gt;random_access_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;隣接イテレータ : &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/contiguous_iterator.md.nolink&#34;&gt;contiguous_iterator&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このヘッダでは、以下の標準ヘッダをインクルードする：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt; (C++20)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;イテレータの情報&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;iterator_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータに関する型情報(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator.html&#34;&gt;iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを定義するための基底クラス(class template)&lt;/td&gt;
&lt;td&gt;C++17から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_difference_t.html&#34;&gt;iter_difference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;difference_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_value_t.html&#34;&gt;iter_value_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;value_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_reference_t.html&#34;&gt;iter_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;reference_type&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_rvalue_reference_t.html&#34;&gt;iter_rvalue_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの指す要素の右辺値参照型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_common_reference_t.html&#34;&gt;iter_common_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの&lt;code&gt;value_type&lt;/code&gt;と&lt;code&gt;reference_type&lt;/code&gt;の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/common_reference.html&#34;&gt;common_reference&lt;/a&gt;&lt;/code&gt;を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_result_t.html&#34;&gt;indirect_result_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数呼び出し可能な型&lt;code&gt;F&lt;/code&gt;を複数のイテレータ&lt;code&gt;Is...&lt;/code&gt;によって呼び出した時の戻り値型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/projected.html&#34;&gt;projected&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ&lt;code&gt;I&lt;/code&gt;の&lt;code&gt;Proj&lt;/code&gt;による射影操作の結果を表すことのできる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_readable.html&#34;&gt;indirectly_readable&lt;/a&gt;&lt;/code&gt;なクラス (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/incrementable_traits.html&#34;&gt;incrementable_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iter_difference_t&lt;/code&gt;にアダプトするためのカスタマイゼーションポイント (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_readable_traits.html&#34;&gt;indirectly_readable_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iter_value_t&lt;/code&gt;にアダプトするためのカスタマイゼーションポイント (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;input_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;output_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;forward_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;bidirectional_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;random_access_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iterator_tag.html&#34;&gt;contiguous_iterator_tag&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接イテレータを表すタグ(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータの進行と距離&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/advance.html&#34;&gt;advance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/distance.html&#34;&gt;distance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ間の距離を求める(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/next.html&#34;&gt;next&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回前方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/prev.html&#34;&gt;prev&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt;回後方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/range_advance.md.nolink&#34;&gt;ranges::advance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを進める(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/range_distance.md.nolink&#34;&gt;ranges::distance&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ間の距離を求める(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/range_next.md.nolink&#34;&gt;ranges::next&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/range_prev.md.nolink&#34;&gt;ranges::prev&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後方に進めたイテレータを返す(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;逆順イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/reverse_iterator.html&#34;&gt;reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆方向に進むイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/make_reverse_iterator.html&#34;&gt;make_reverse_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;挿入イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_insert_iterator.html&#34;&gt;back_insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;末尾に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_inserter.html&#34;&gt;back_inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;back_insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_insert_iterator.html&#34;&gt;front_insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_inserter.html&#34;&gt;front_inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;front_insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/insert_iterator.html&#34;&gt;insert_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の位置に要素を挿入する出力イテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/inserter.html&#34;&gt;inserter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;insert_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素を移動するイテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/move_iterator.html&#34;&gt;move_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照時にムーブするイテレータアダプタ(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/make_move_iterator.html&#34;&gt;make_move_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;move_iterator&lt;/code&gt;オブジェクトを作るヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/move_sentinel.md.nolink&#34;&gt;move_sentinel&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;move_iterator&lt;/code&gt;の終端を表す番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ストリームイテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/istream_iterator.html&#34;&gt;istream_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ostream_iterator.html&#34;&gt;ostream_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/istreambuf_iterator.html&#34;&gt;istreambuf_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ostreambuf_iterator.html&#34;&gt;ostreambuf_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリームバッファイテレータ(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;その他のイテレータアダプタ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/common_iterator.md.nolink&#34;&gt;common_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータ型と番兵型が異なる場合に型を共通化するためのラッパーイテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/counted_iterator.md.nolink&#34;&gt;counted_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;予め指定された&lt;code&gt;N&lt;/code&gt;個の要素だけをイテレートするラッパーイテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;番兵型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/default_sentinel_t.md.nolink&#34;&gt;default_sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の範囲の終端を表すことのできるデフォルトの番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/unreachable_sentinel_t.md.nolink&#34;&gt;unreachable_sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;別の方法で終端が指定される範囲の仮想的な終端を表す番兵型(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;先頭イテレータと末尾イテレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;begin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;end&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指すイテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/cbegin.html&#34;&gt;cbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/cend.html&#34;&gt;cend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指す読み取り専用イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/rbegin.html&#34;&gt;rbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/rend.html&#34;&gt;rend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/crbegin.html&#34;&gt;crbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す読み取り専用逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/crend.html&#34;&gt;crend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す読み取り専用逆イテレータを取得する(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コンテナアクセス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/size.html&#34;&gt;size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素数を取得する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ssize.html&#34;&gt;ssize&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素数を、符号付き整数型で取得する (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/empty.html&#34;&gt;empty&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナが空かどうかを判定する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/data.html&#34;&gt;data&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテナの要素配列へのポインタを取得する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;カスタマイゼーションポイントオブジェクト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_move.md.nolink&#34;&gt;ranges::iter_move&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの指す要素をムーブする (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/iter_swap.md.nolink&#34;&gt;ranges::iter_swap&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータの指す要素を&lt;em&gt;swap&lt;/em&gt;する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;説明専用コンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;with-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型&lt;code&gt;T&lt;/code&gt;に参照を付加する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;can-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;with-reference&lt;/code&gt;可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;dereferenceable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単純な間接参照が可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/is_integer_like.html&#34;&gt;is-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号付整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/is_integer_like.html&#34;&gt;is-signed-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なし整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;イテレータコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_readable.html&#34;&gt;indirectly_readable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照によって読み取り可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_writable.html&#34;&gt;indirectly_writable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;間接参照によって書き込み可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/weakly_incrementable.html&#34;&gt;weakly_incrementable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前置/後置インクリメント可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/incrementable.html&#34;&gt;incrementable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;weakly_incrementable&lt;/code&gt;かつ&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/regular.html&#34;&gt;正則&lt;/a&gt; (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_or_output_iterator.html&#34;&gt;input_or_output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基礎的なイテレータコンセプト (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sentinel_for.html&#34;&gt;sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同じ範囲についてのイテレータと番兵 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sized_sentinel_for.html&#34;&gt;sized_sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;距離を定義可能なイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/disable_sized_sentinel_for.html&#34;&gt;disable_sized_sentinel_for&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sentinel_for&amp;lt;S, I&amp;gt;&lt;/code&gt;について、&lt;code&gt;sized_sentinel_for&lt;/code&gt;を不適合にする (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/input_iterator.md.nolink&#34;&gt;input_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/output_iterator.md.nolink&#34;&gt;output_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/forward_iterator.md.nolink&#34;&gt;forward_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前方向イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/bidirectional_iterator.md.nolink&#34;&gt;bidirectional_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/random_access_iterator.md.nolink&#34;&gt;random_access_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/contiguous_iterator.md.nolink&#34;&gt;contiguous_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接イテレータ (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;間接呼び出しコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_unary_invocable.md.nolink&#34;&gt;indirectly_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型によって呼び出し可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_regular_unary_invocable.md.nolink&#34;&gt;indirectly_regular_unary_invocable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正則な&lt;code&gt;indirectly_unary_invocable&lt;/code&gt; (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_unary_predicate.md.nolink&#34;&gt;indirect_unary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型についての単項述語 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_binary_predicate.md.nolink&#34;&gt;indirect_binary_predicate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型についての二項述語 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_equivalence_relation.md.nolink&#34;&gt;indirect_equivalence_relation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型についての同値関係 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirect_strict_weak_order.md.nolink&#34;&gt;indirect_strict_weak_order&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの要素型についての狭義の弱順序 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;一般的なアルゴリズムコンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_movable.md.nolink&#34;&gt;indirectly_movable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ要素をムーブ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_movable_storable.md.nolink&#34;&gt;indirectly_movable_storable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ中間オブジェクトを介して要素をムーブ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_copyable.md.nolink&#34;&gt;indirectly_copyable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ要素をコピー可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_copyable_storable.md.nolink&#34;&gt;indirectly_copyable_storable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;片方のイテレータからもう片方のイテレータへ中間オブジェクトを介して要素をコピー可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_swappable.md.nolink&#34;&gt;indirectly_swappable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータ間で要素を交換可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/indirectly_comparable.md.nolink&#34;&gt;indirectly_comparable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのイテレータ間で要素を比較可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/permutable.md.nolink&#34;&gt;permutable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して要素を並べ替え可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/mergeable.md.nolink&#34;&gt;mergeable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して範囲をマージ可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/sortable.md.nolink&#34;&gt;sortable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを介して範囲をソート可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf&#34; target=&#34;_blank&#34;&gt;P0896R4 The One Ranges Proposal (was Merging the Ranges TS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dereferenceable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/dereferenceable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/dereferenceable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/dereferenceable.md b/reference/iterator/dereferenceable.md
new file mode 100644
index 000000000..a2a73b4c8
--- /dev/null
+++ b/reference/iterator/dereferenceable.md
@@ -0,0 +1,35 @@
+# dereferenceable
+* iterator[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  // 参照修飾を付加する
+  template&amp;lt;class T&amp;gt;
+  using with-reference = T&amp;amp;;
+
+  // 参照修飾可能（例えばvoidはこれを満たさない）
+  template&amp;lt;class T&amp;gt;
+  concept can-reference = requires { 
+    typename with-reference&amp;lt;T&amp;gt;;
+  };
+
+  // 間接参照可能であり、何らかの結果を返す
+  template&amp;lt;class T&amp;gt;
+  concept dereferenceable = requires(T&amp;amp; t) {
+    { *t } -&amp;gt; can-reference;  // 等しさを保持することを要求しない
+  };
+}
+```
+
+## 概要
+
+これらの説明専用エンティティは、任意の型が`operator*`による間接参照が可能であり、何かしらの結果を返すことを表すための最低限のコンセプトとそのためのエイリアステンプレートである。
+
+これらのものは`&amp;lt;iterator&amp;gt;`ヘッダ内の他のクラスやコンセプトの定義および説明に使用されるものであり、実際に使用可能ではない。
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disable_sized_sentinel_for -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/disable_sized_sentinel_for.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/disable_sized_sentinel_for.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/disable_sized_sentinel_for.md b/reference/iterator/disable_sized_sentinel_for.md
new file mode 100644
index 000000000..56a3b6d7f
--- /dev/null
+++ b/reference/iterator/disable_sized_sentinel_for.md
@@ -0,0 +1,55 @@
+# disable_sized_sentinel_for
+* iterator[meta header]
+* std[meta namespace]
+* variable[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class S, class I&amp;gt;
+  inline constexpr bool disable_sized_sentinel_for = false;
+
+  // reverse_iteratorに対する特殊化
+  template&amp;lt;class Iterator1, class Iterator2&amp;gt;
+    requires (!sized_sentinel_for&amp;lt;Iterator1, Iterator2&amp;gt;)
+  inline constexpr bool disable_sized_sentinel_for&amp;lt;reverse_iterator&amp;lt;Iterator1&amp;gt;,
+                                                   reverse_iterator&amp;lt;Iterator2&amp;gt;&amp;gt; = true;
+}
+```
+* sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
+* reverse_iterator[link /reference/iterator/reverse_iterator.md]
+
+## 概要
+
+`disable_sized_sentinel_for`は、任意のイテレータ型`I`とその番兵型`S`について[`sized_sentinel_for`](sized_sentinel_for.md)を無効化するカスタマイゼーションポイントである。
+
+イテレータ型`I, S`が`sized_sentinel_for`を満たすがそのモデルとならない（意味論的な要件まで満足することができない）ようなイテレータをライブラリで使用するためのopt-outメカニズムとして提供されている。
+
+## 要件
+
+`I, S`がプログラム定義型である場合に、非配列型かつオブジェクト型である`I, S`に対して特殊化が許可される。  
+そのような特殊化は定数式で使用可能であり、`const bool`型を持つ必要がある。
+
+## 例
+
+[`sized_sentinel_for`](sized_sentinel_for.md)のサンプルコードを参照。
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P1871R0 Should concepts be enabled or disabled?](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1871r0.html)
+- [P1871R1 Concept traits should be named after concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1871r1.html)
+- [microsoft/STL P1871R1 disable_sized_sentinel_for #607 - Github](https://github.com/microsoft/STL/pull/607/files#r392700693)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>incrementable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/incrementable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/incrementable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/incrementable.md b/reference/iterator/incrementable.md
new file mode 100644
index 000000000..7014666de
--- /dev/null
+++ b/reference/iterator/incrementable.md
@@ -0,0 +1,117 @@
+# incrementable
+* iterator[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class I&amp;gt;
+  concept incrementable =
+    regular&amp;lt;I&amp;gt; &amp;amp;&amp;amp;
+    weakly_incrementable&amp;lt;I&amp;gt; &amp;amp;&amp;amp;
+    requires(I i) {
+      { i++ } -&amp;gt; same_as&amp;lt;I&amp;gt;;
+    };
+}
+```
+* regular[link /reference/concepts/regular.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* same_as[link /reference/concepts/same_as.md]
+
+## 概要
+
+`incrementable`は、イテレータ型`I`が前置/後置インクリメント演算子（`operator++`）によってインクリメント可能であり、コピー/ムーブ構築/代入とデフォルト構築、等値比較が可能であることを表すコンセプトである。
+
+## 要件
+
+このコンセプトによって要求されるインクリメント操作は全て[等しさを保持](/reference/concepts.md)しなければならない。これは、[`weakly_incrementable`](/reference/iterator/weakly_incrementable.md)の注釈よりも優先される。
+
+## モデル
+
+型`I`のオブジェクト`a, b`について次の条件を満たす場合に限って、型`I`は`incrementable`のモデルである。
+
+- `bool(a == b)`が`true`ならば、`bool(a++ == b)`
+- `bool(a == b)`が`true`ならば、`bool(((void)a++, a) == ++b)`
+
+`a == b`という要件は`++a == ++b`が等しいことを意味しており、これらの要件はイテレータにマルチパス保証を要求するものである。すなわち、あるイテレート範囲を複数のイテレータから同時に同じ順序で走査することができることを要求する。`incrementable`なイテレータはその操作によってイテレータが参照しているシーケンスの状態が変化してはならない。多くの一般的なイテレータがこの要件を満たしている。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template&amp;lt;std::incrementable I&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is incrementable&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename I&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is not incrementable&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+
+struct sample_incrementable {
+  friend auto operator++(sample_incrementable&amp;amp;) -&amp;gt; sample_incrementable&amp;amp;;
+  friend auto operator++(sample_incrementable&amp;amp;, int) -&amp;gt; sample_incrementable; // prvalueを返す必要がある
+
+  friend bool operator==(const sample_incrementable&amp;amp;, const sample_incrementable&amp;amp;) = default;
+
+  using difference_type = int;
+};
+
+struct sample_weak_incrementable {
+  friend auto operator++(sample_weak_incrementable&amp;amp;) -&amp;gt; sample_weak_incrementable&amp;amp;;
+  friend auto operator++(sample_weak_incrementable&amp;amp;, int) -&amp;gt; sample_weak_incrementable&amp;amp;;  
+
+  using difference_type = int;
+};
+
+
+int main() {
+  f&amp;lt;int*&amp;gt;(&amp;#34;int*&amp;#34;);
+  f&amp;lt;const int*&amp;gt;(&amp;#34;const int*&amp;#34;);
+  f&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;(&amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;);
+  f&amp;lt;sample_incrementable&amp;gt;(&amp;#34;sample_incrementable&amp;#34;);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;int* const&amp;gt;(&amp;#34;int* const&amp;#34;);
+  f&amp;lt;std::ostream_iterator&amp;lt;double&amp;gt;&amp;gt;(&amp;#34;std::ostream_iterator&amp;lt;double&amp;gt;&amp;#34;);
+  f&amp;lt;sample_weak_incrementable&amp;gt;(&amp;#34;sample_weak_incrementable&amp;#34;);
+}
+```
+* std::incrementable[color ff0000]
+
+### 出力
+```
+int* is incrementable
+const int* is incrementable
+std::vector&amp;lt;int&amp;gt;::iterator is incrementable
+sample_incrementable is incrementable
+
+int* const is not incrementable
+std::ostream_iterator&amp;lt;double&amp;gt; is not incrementable
+sample_weak_incrementable is not incrementable
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>incrementable_traits -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/incrementable_traits.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/incrementable_traits.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/incrementable_traits.md b/reference/iterator/incrementable_traits.md
new file mode 100644
index 000000000..218489d22
--- /dev/null
+++ b/reference/iterator/incrementable_traits.md
@@ -0,0 +1,135 @@
+# incrementable_traits
+* iterator[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+
+  // プライマリテンプレート
+  template&amp;lt;class&amp;gt;
+  struct incrementable_traits {};
+
+  // ポインタ型についての特殊化
+  template&amp;lt;class T&amp;gt;
+    requires is_object_v&amp;lt;T&amp;gt;
+  struct incrementable_traits&amp;lt;T*&amp;gt; {
+    using difference_type = ptrdiff_t;
+  };
+
+  // constを外すための特殊化
+  template&amp;lt;class I&amp;gt;
+  struct incrementable_traits&amp;lt;const I&amp;gt;
+    : incrementable_traits&amp;lt;I&amp;gt; { };
+
+  // difference_typeを定義している型についての特殊化
+  template&amp;lt;class T&amp;gt;
+    requires requires { typename T::difference_type; }
+  struct incrementable_traits&amp;lt;T&amp;gt; {
+    using difference_type = typename T::difference_type;
+  };
+
+  // difference_typeを定義していないが、差分を取ることができる型についての特殊化
+  template&amp;lt;class T&amp;gt;
+    requires (!requires { typename T::difference_type; } &amp;amp;&amp;amp;
+              requires(const T&amp;amp; a, const T&amp;amp; b) { { a - b } -&amp;gt; integral; })
+  struct incrementable_traits&amp;lt;T&amp;gt; {
+    using difference_type = make_signed_t&amp;lt;decltype(declval&amp;lt;T&amp;gt;() - declval&amp;lt;T&amp;gt;())&amp;gt;;
+  };
+}
+```
+* is_object_v[link /reference/type_traits/is_object.md]
+* integral[link /reference/concepts/integral.md]
+* make_signed_t[link /reference/type_traits/make_signed.md]
+* declval[link /reference/utility/declval.md]
+
+## 概要
+
+任意のイテレータ型からそのイテレータ間の差分（距離）を表す型（`difference_type`）を取得する、あるいは[`iter_difference_t`](iter_difference_t.md)で取得できるようにするためにアダプトする。
+
+## 効果
+
+上記定義のいずれかの形式、あるいはそれ以外の明示的特殊化を通して得られるイテレータの差分型を、メンバ型`::difference_type`として定義する。
+
+## 特殊化
+
+このクラスは任意のプログラム定義型について特殊化することが許可されている。
+
+また、標準ライブラリ内のいくつかのクラスに対して予め特殊化が用意されている。
+
+- [`projected`](projected.md)
+- [`common_iterator`](common_iterator.md.nolink)
+- [`counted_iterator`](counted_iterator.md.nolink)
+
+## 備考
+
+イテレータの差分型を求める場合はこのクラスの代わりに[`iter_difference_t`](iter_value_t.md)を使用することを推奨する（より汎用的であるため）。その場合、このクラスは自作のイテレータ型を`iter_difference_t`にアダプトするために使用できる。
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct sample_iterator {
+  int n[3] = {1, 2, 3};
+  int index = 0;
+  
+  int&amp;amp; operator*() { return n[index]; }
+
+  friend auto operator++(sample_iterator&amp;amp; self) -&amp;gt; sample_iterator&amp;amp; {
+    if (self.index &amp;lt; 3) ++self.index;
+    return self;
+  }
+  
+  friend bool operator==(const sample_iterator&amp;amp; rhs, std::default_sentinel_t) {
+    return 3 &amp;lt; rhs.index;
+  }
+};
+
+
+struct have_difference : sample_iterator {
+  using difference_type = unsigned short;
+};
+
+struct can_difference : sample_iterator {
+  friend auto operator-(const can_difference&amp;amp; lhs, const can_difference&amp;amp; rhs) -&amp;gt; char {
+    return lhs.index - rhs.index;
+  }
+};
+
+int main() {
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using pointer = double*;
+
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;pointer&amp;gt;::difference_type         , std::ptrdiff_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;const pointer&amp;gt;::difference_type   , std::ptrdiff_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;vec_iterator&amp;gt;::difference_type    , std::ptrdiff_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;::difference_type, std::ptrdiff_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;have_difference&amp;gt;::difference_type , unsigned short&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::incrementable_traits&amp;lt;can_difference&amp;gt;::difference_type  , signed char&amp;gt;); // この結果は処理系によって異なる可能性がある
+}
+```
+* std::incrementable_traits[color ff0000]
+* same_as[link /reference/concepts/same_as.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`iter_difference_t`](iter_difference_t.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirect_result_t -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirect_result_t.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/indirect_result_t.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirect_result_t.md b/reference/iterator/indirect_result_t.md
new file mode 100644
index 000000000..5f6238a9e
--- /dev/null
+++ b/reference/iterator/indirect_result_t.md
@@ -0,0 +1,61 @@
+# indirect_result_t
+* iterator[meta header]
+* std[meta namespace]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class F, class... Is&amp;gt;
+    requires (indirectly_readable&amp;lt;Is&amp;gt; &amp;amp;&amp;amp; ...) &amp;amp;&amp;amp;
+             invocable&amp;lt;F, iter_reference_t&amp;lt;Is&amp;gt;...&amp;gt;
+  using indirect_result_t = invoke_result_t&amp;lt;F, iter_reference_t&amp;lt;Is&amp;gt;...&amp;gt;;
+}
+```
+* indirectly_readable[link /reference/iterator/indirectly_readable.md]
+* invocable[link /reference/concepts/invocable.md]
+* iter_reference_t[link /reference/iterator/iter_reference_t.md]
+* invoke_result_t[link /reference/type_traits/invoke_result.md]
+
+## 概要
+
+関数呼び出し可能な型`F`に間接参照可能な型（主にイテレータ型）`Is...`の指す要素を渡して呼び出した時の戻り値型を取得する。
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main() {  
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using pointer = double*;
+
+  using lambda1 = decltype([](int) -&amp;gt; std::size_t { return 0;});
+  using lambda2 = decltype([](double) -&amp;gt; int { return 0;});
+  using lambda3 = decltype([](int, int, double, double) -&amp;gt; std::string { return &amp;#34;&amp;#34;;});
+
+  static_assert(std::same_as&amp;lt;std::indirect_result_t&amp;lt;lambda1, vec_iterator&amp;gt;, std::size_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirect_result_t&amp;lt;lambda2, pointer&amp;gt;     , int&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirect_result_t&amp;lt;lambda3, vec_iterator, const vec_iterator, pointer, const pointer&amp;gt;, std::string&amp;gt;);
+}
+```
+* std::indirect_result_t[color ff0000]
+* same_as[link /reference/concepts/same_as.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirectly_readable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_readable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/indirectly_readable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_readable.md b/reference/iterator/indirectly_readable.md
new file mode 100644
index 000000000..7cbb630f6
--- /dev/null
+++ b/reference/iterator/indirectly_readable.md
@@ -0,0 +1,113 @@
+# indirectly_readable
+* iterator[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class In&amp;gt;
+  concept indirectly_readable = /*see below*/;
+}
+```
+
+## 概要
+
+`indirectly_readable`は、任意の型`In`が間接参照演算子（`operator*`）によって値を読み取り（入力）可能であることを表すコンセプトである。
+
+イテレータ型に限らず、ポインタ型、スマートポインタ型などがこのコンセプトのモデルとなることができる。
+
+## 要件
+
+まず、説明専用コンセプト`indirectly-readable-impl`を以下のように定義する。
+
+```cpp
+template&amp;lt;class In&amp;gt;
+concept indirectly-readable-impl =
+  requires(const In in) {
+    typename iter_value_t&amp;lt;In&amp;gt;;
+    typename iter_reference_t&amp;lt;In&amp;gt;;
+    typename iter_rvalue_reference_t&amp;lt;In&amp;gt;;
+    { *in } -&amp;gt; same_as&amp;lt;iter_reference_t&amp;lt;In&amp;gt;&amp;gt;;
+    { ranges::iter_move(in) } -&amp;gt; same_as&amp;lt;iter_rvalue_reference_t&amp;lt;In&amp;gt;&amp;gt;;
+  } &amp;amp;&amp;amp;
+  common_reference_with&amp;lt;iter_reference_t&amp;lt;In&amp;gt;&amp;amp;&amp;amp;, iter_value_t&amp;lt;In&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+  common_reference_with&amp;lt;iter_reference_t&amp;lt;In&amp;gt;&amp;amp;&amp;amp;, iter_rvalue_reference_t&amp;lt;In&amp;gt;&amp;amp;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+  common_reference_with&amp;lt;iter_rvalue_reference_t&amp;lt;In&amp;gt;&amp;amp;&amp;amp;, const iter_value_t&amp;lt;In&amp;gt;&amp;amp;&amp;gt;;
+```
+* iter_value_t[link /reference/iterator/iter_value_t.md]
+* iter_reference_t[link /reference/iterator/iter_reference_t.md]
+* iter_rvalue_reference_t[link /reference/iterator/iter_rvalue_reference_t.md]
+* iter_move[link /reference/iterator/iter_move.md.nolink]
+* common_reference_with[link /reference/concepts/common_reference_with.md]
+
+`indirectly_readable`は以下のように定義される。
+
+```cpp
+template&amp;lt;class In&amp;gt;
+concept indirectly_readable =
+  indirectly-readable-impl&amp;lt;remove_cvref_t&amp;lt;In&amp;gt;&amp;gt;;
+```
+
+## モデル
+
+型`I`のオブジェクト`i`について、`*i`が[等しさを保持](/reference/concepts.md)する場合に限って型`I`は`indirectly_readable`のモデルである。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;optional&amp;gt;
+
+template&amp;lt;typename T&amp;gt;
+requires std::indirectly_readable&amp;lt;T&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is indirectly readable&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename T&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is not indirectly readable&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+
+int main() {
+  f&amp;lt;int*&amp;gt;(&amp;#34;int*&amp;#34;);
+  f&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt;(&amp;#34;std::unique_ptr&amp;lt;int&amp;gt;&amp;#34;);
+  f&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;(&amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;);
+  f&amp;lt;std::istream_iterator&amp;lt;double&amp;gt;&amp;gt;(&amp;#34;std::istream_iterator&amp;lt;double&amp;gt;&amp;#34;);
+  
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;std::optional&amp;lt;int&amp;gt;&amp;gt;(&amp;#34;std::optional&amp;lt;int&amp;gt;&amp;#34;);
+}
+```
+* std::indirectly_readable[color ff0000]
+
+### 出力
+```
+int* is indirectly readable
+std::unique_ptr&amp;lt;int&amp;gt; is indirectly readable
+std::vector&amp;lt;int&amp;gt;::iterator is indirectly readable
+std::istream_iterator&amp;lt;double&amp;gt; is indirectly readable
+
+std::optional&amp;lt;int&amp;gt; is not indirectly readable
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirectly_readable_traits -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_readable_traits.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/indirectly_readable_traits.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_readable_traits.md b/reference/iterator/indirectly_readable_traits.md
new file mode 100644
index 000000000..ae11a46cc
--- /dev/null
+++ b/reference/iterator/indirectly_readable_traits.md
@@ -0,0 +1,141 @@
+# indirectly_readable_traits
+* iterator[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+
+  // 素の型を取得する、説明専用type-traits
+  template&amp;lt;class&amp;gt;
+  struct cond-value-type { };
+
+  template&amp;lt;class T&amp;gt;
+    requires is_object_v&amp;lt;T&amp;gt;
+  struct cond-value-type&amp;lt;T&amp;gt; {
+    using value_type = remove_cv_t&amp;lt;T&amp;gt;;
+  };
+
+
+  // プライマリテンプレート
+  template&amp;lt;class&amp;gt;
+  struct indirectly_readable_traits { };
+
+  // ポインタ型についての特殊化
+  template&amp;lt;class T&amp;gt;
+  struct indirectly_readable_traits&amp;lt;T*&amp;gt;
+    : cond-value-type&amp;lt;T&amp;gt; { };
+
+  // 配列型についての特殊化
+  template&amp;lt;class I&amp;gt;
+    requires is_array_v&amp;lt;I&amp;gt;
+  struct indirectly_readable_traits&amp;lt;I&amp;gt; {
+    using value_type = remove_cv_t&amp;lt;remove_extent_t&amp;lt;I&amp;gt;&amp;gt;;
+  };
+
+  // constを外すための特殊化
+  template&amp;lt;class I&amp;gt;
+  struct indirectly_readable_traits&amp;lt;const I&amp;gt;
+    : indirectly_readable_traits&amp;lt;I&amp;gt; { };
+
+  // value_typeを定義している型についての特殊化
+  template&amp;lt;class T&amp;gt;
+    requires requires { typename T::value_type; }
+  struct indirectly_readable_traits&amp;lt;T&amp;gt;
+    : cond-value-type&amp;lt;typename T::value_type&amp;gt; { };
+
+  // element_typeを定義している型についての特殊化
+  template&amp;lt;class T&amp;gt;
+    requires requires { typename T::element_type; }
+  struct indirectly_readable_traits&amp;lt;T&amp;gt;
+    : cond-value-type&amp;lt;typename T::element_type&amp;gt; { };
+}
+```
+* is_object_v[link /reference/type_traits/is_object.md]
+* remove_cv_t[link /reference/type_traits/remove_cv.md]
+* is_array_v[link /reference/type_traits/is_array.md]
+* remove_extent_t[link /reference/type_traits/remove_extent.md]
+
+## 概要
+
+任意のイテレータ型からそのイテレータの要素型（`value_type`）を取得する、あるいは[`iter_value_t`](iter_difference_t.md)で取得できるようにするためにアダプトする。
+
+## 効果
+
+上記定義のいずれかの形式、あるいはそれ以外の明示的特殊化を通して得られるイテレータの要素型を、メンバ型`::value_type`として定義する。
+
+## 特殊化
+
+このクラスは任意のプログラム定義型について特殊化することが許可されている。
+
+## 備考
+
+イテレータの要素型を求める場合はこのクラスの代わりに[`iter_value_t`](iter_value_t.md)を使用することを推奨する（より汎用的であるため）。その場合、このクラスは自作のイテレータ型を`iter_value_t`にアダプトするために使用できる。
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+struct sample_iterator {
+  int n[3] = {1, 2, 3};
+  int index = 0;
+  
+  int&amp;amp; operator*() { return n[index]; }
+
+  friend auto operator++(sample_iterator&amp;amp; self) -&amp;gt; sample_iterator&amp;amp; {
+    if (self.index &amp;lt; 3) ++self.index;
+    return self;
+  }
+  
+  friend bool operator==(const sample_iterator&amp;amp; rhs, std::default_sentinel_t) {
+    return 3 &amp;lt; rhs.index;
+  }
+};
+
+
+struct have_value : sample_iterator {
+  using value_type = int;
+};
+
+struct have_element : sample_iterator {
+  using element_type = int;
+};
+
+int main() {
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using pointer = double*;
+
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;pointer&amp;gt;::value_type         , double&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;short[3]&amp;gt;::value_type        , short&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;const pointer&amp;gt;::value_type   , double&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;vec_iterator&amp;gt;::value_type    , int&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;::value_type, int&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;have_value&amp;gt;::value_type      , int&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::indirectly_readable_traits&amp;lt;have_element&amp;gt;::value_type    , int&amp;gt;);
+}
+```
+* std::indirectly_readable_traits[color ff0000]
+* same_as[link /reference/concepts/same_as.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`iter_value_t`](iter_value_t.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirectly_writable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_writable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/indirectly_writable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_writable.md b/reference/iterator/indirectly_writable.md
new file mode 100644
index 000000000..2cd6e95fe
--- /dev/null
+++ b/reference/iterator/indirectly_writable.md
@@ -0,0 +1,128 @@
+# indirectly_writable
+* iterator[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Out, class T&amp;gt;
+  concept indirectly_writable = 
+    requires(Out&amp;amp;&amp;amp; o, T&amp;amp;&amp;amp; t) {
+      *o = std::forward&amp;lt;T&amp;gt;(t);
+      *std::forward&amp;lt;Out&amp;gt;(o) = std::forward&amp;lt;T&amp;gt;(t);
+      const_cast&amp;lt;const iter_reference_t&amp;lt;Out&amp;gt;&amp;amp;&amp;amp;&amp;gt;(*o) = std::forward&amp;lt;T&amp;gt;(t);
+      const_cast&amp;lt;const iter_reference_t&amp;lt;Out&amp;gt;&amp;amp;&amp;amp;&amp;gt;(*std::forward&amp;lt;Out&amp;gt;(o)) = std::forward&amp;lt;T&amp;gt;(t);
+    };
+}
+```
+* forward[link /reference/utility/forward.md]
+* iter_reference_t[link /reference/iterator/iter_reference_t.md]
+
+## 概要
+
+`indirectly_writable`は、任意の型`Out`が間接参照演算子（`operator*`）によって型`T`の値を書き込み（出力）可能であることを表すコンセプトである。
+
+イテレータ型に限らず、ポインタ型、スマートポインタ型などがこのコンセプトのモデルとなることができる。
+
+## 要件
+
+このコンセプトを構成する4つの制約式は全て、[等しさを保持](/reference/concepts.md)することを要求しない。
+
+`const_cast`を用いる制約式は、右辺値の代入は可能だが`const`な右辺値の代入ができないような*prvalue*の非プロキシイテレータを弾くために存在している。これによって、間接参照が`std::string`（*pravlue*）を返すようなイテレータ型は`indirectly_writable`のモデルとならない。
+
+## モデル
+
+`decltype((E)) == T`となるような式`E`及び[`dereferenceable`](dereferenceable.md)な型`Out`のオブジェクト`o`について次の条件を満たす場合に限って、型`Out, T`は`indirectly_writable`のモデルである。
+
+- `Out, T`が次の制約式のモデルとなる場合、式`E`を上記（定義内）式のいずれかの形で出力した後で、`*o`は元の`E`の値と等値（*equal*）になる。
+    - ただし、そのような出力の後で`o`が間接参照可能である必要はない。
+```cpp
+indirectly_readable&amp;lt;Out&amp;gt; &amp;amp;&amp;amp; same_as&amp;lt;iter_value_t&amp;lt;Out&amp;gt;, decay_t&amp;lt;T&amp;gt;&amp;gt;
+```
+* indirectly_readable[link indirectly_readablemd]
+* same_as[link /reference/concepts/same_as.md]
+* iter_value_t[link /reference/iterator/iter_value_t.md]
+* decay_t[link /reference/type_traits/decay.md]
+
+`E`の値カテゴリが*xvalue*の場合、上記式による出力後`E`のオブジェクトは有効だが未規定な状態となる
+
+## 備考
+
+`indirectly_writable`のモデルとなる`Out`の`operator*`は出力（上記式による代入文の左辺に来ること）だけが唯一有効な使用法であり、[`indirectly_readable`](indirectly_readable.md)である必要はない。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;optional&amp;gt;
+
+template&amp;lt;typename Out, typename T&amp;gt;
+requires std::indirectly_writable&amp;lt;Out, T&amp;gt;
+void f(const char* out, const char* t) {
+  std::cout &amp;lt;&amp;lt; out &amp;lt;&amp;lt; &amp;#34; is indirectly writable &amp;#34; &amp;lt;&amp;lt; t &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename Out, typename T&amp;gt;
+void f(const char* out, const char* t) {
+  std::cout &amp;lt;&amp;lt; out &amp;lt;&amp;lt; &amp;#34; is not indirectly writable &amp;#34; &amp;lt;&amp;lt; t &amp;lt;&amp;lt; std::endl;
+}
+
+
+struct writable {
+  int&amp;amp; operator*();
+};
+
+struct not_writable {
+  //prvalueを返す、出力不可能
+  int operator*();
+};
+
+
+int main() {
+  f&amp;lt;int*, int&amp;gt;(&amp;#34;int*&amp;#34;, &amp;#34;int&amp;#34;);
+  f&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;, int&amp;amp;&amp;gt;(&amp;#34;std::unique_ptr&amp;lt;int&amp;gt;&amp;#34;, &amp;#34;int&amp;amp;&amp;#34;);
+  f&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator, int&amp;amp;&amp;amp;&amp;gt;(&amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;, &amp;#34;int&amp;amp;&amp;amp;&amp;#34;);
+  f&amp;lt;std::ostream_iterator&amp;lt;double&amp;gt;, double&amp;gt;(&amp;#34;std::ostream_iterator&amp;lt;double&amp;gt;&amp;#34;, &amp;#34;double&amp;#34;);
+  f&amp;lt;writable, int&amp;gt;(&amp;#34;writable&amp;#34;, &amp;#34;int&amp;#34;);
+  
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;std::vector&amp;lt;bool&amp;gt;::iterator, bool&amp;gt;(&amp;#34;std::vector&amp;lt;bool&amp;gt;::iterator&amp;#34;, &amp;#34;bool&amp;#34;);
+  f&amp;lt;std::optional&amp;lt;int&amp;gt;, int&amp;gt;(&amp;#34;std::optional&amp;lt;int&amp;gt;&amp;#34;, &amp;#34;int&amp;#34;);
+  f&amp;lt;not_writable, int&amp;gt;(&amp;#34;not_writable&amp;#34;, &amp;#34;int&amp;#34;);
+}
+```
+* std::indirectly_writable[color ff0000]
+
+### 出力
+```
+int* is indirectly writable int
+std::unique_ptr&amp;lt;int&amp;gt; is indirectly writable int&amp;amp;
+std::vector&amp;lt;int&amp;gt;::iterator is indirectly writable int&amp;amp;&amp;amp;
+std::ostream_iterator&amp;lt;double&amp;gt; is indirectly writable double
+writable is indirectly writable int
+
+std::vector&amp;lt;bool&amp;gt;::iterator is not indirectly writable bool
+std::optional&amp;lt;int&amp;gt; is not indirectly writable int
+not_writable is not indirectly writable int
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>input_or_output_iterator -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/input_or_output_iterator.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/input_or_output_iterator.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/input_or_output_iterator.md b/reference/iterator/input_or_output_iterator.md
new file mode 100644
index 000000000..10d223d62
--- /dev/null
+++ b/reference/iterator/input_or_output_iterator.md
@@ -0,0 +1,108 @@
+# input_or_output_iterator
+* iterator[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class I&amp;gt;
+  concept input_or_output_iterator =
+    requires(I i) {
+      { *i } -&amp;gt; can-reference;
+    } &amp;amp;&amp;amp;
+    weakly_incrementable&amp;lt;I&amp;gt;;
+}
+```
+* can-reference[link /reference/iterator/dereferenceable.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+
+## 概要
+
+`input_or_output_iterator`は、イテレータ型`I`が[`weakly_incrementable`](weakly_incrementable.md)であり、間接参照が何らかの結果を返すことを表すコンセプトである。
+
+`input_or_output_iterator`はイテレータコンセプトの基礎となるコンセプトであり、イテレータに対する最小の要件である。全てのイテレータは本コンセプトのモデルとならなければならない。
+
+## 備考
+
+名前に`input_or_output`とあるがこれはイテレータ分類としてのそれらの共通部分のような意味であり、このコンセプトはイテレータを介した入出力やイテレータのコピー、イテレータの比較についてを何ら制約しない。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template&amp;lt;std::input_or_output_iterator I&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is input_or_output_iterator&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename I&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is not input_or_output_iterator&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+
+struct sample_input_or_output_iterator {
+  friend auto operator++(sample_input_or_output_iterator&amp;amp;) -&amp;gt; sample_input_or_output_iterator&amp;amp;;
+  friend auto operator++(sample_input_or_output_iterator&amp;amp;, int) -&amp;gt; sample_input_or_output_iterator;
+
+  friend auto operator*(sample_input_or_output_iterator&amp;amp;) -&amp;gt; int;
+
+  using difference_type = int;
+};
+
+struct sample_weak_incrementable {
+  friend auto operator++(sample_weak_incrementable&amp;amp;) -&amp;gt; sample_weak_incrementable&amp;amp;;
+  friend auto operator++(sample_weak_incrementable&amp;amp;, int) -&amp;gt; sample_weak_incrementable&amp;amp;;  
+
+  using difference_type = int;
+};
+
+
+int main() {
+  f&amp;lt;int*&amp;gt;(&amp;#34;int*&amp;#34;);
+  f&amp;lt;const int*&amp;gt;(&amp;#34;const int*&amp;#34;);
+  f&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;(&amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;);
+  f&amp;lt;std::ostream_iterator&amp;lt;double&amp;gt;&amp;gt;(&amp;#34;std::ostream_iterator&amp;lt;double&amp;gt;&amp;#34;);
+  f&amp;lt;sample_input_or_output_iterator&amp;gt;(&amp;#34;sample_input_or_output_iterator&amp;#34;);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;int* const&amp;gt;(&amp;#34;int* const&amp;#34;);
+  f&amp;lt;sample_weak_incrementable&amp;gt;(&amp;#34;sample_weak_incrementable&amp;#34;);
+}
+```
+* std::input_or_output_iterator[color ff0000]
+
+### 出力
+```
+int* is input_or_output_iterator
+const int* is input_or_output_iterator
+std::vector&amp;lt;int&amp;gt;::iterator is input_or_output_iterator
+std::ostream_iterator&amp;lt;double&amp;gt; is input_or_output_iterator
+sample_input_or_output_iterator is input_or_output_iterator
+
+int* const is not input_or_output_iterator
+sample_weak_incrementable is not input_or_output_iterator
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is-integer-like -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/is_integer_like.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/is_integer_like.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/is_integer_like.md b/reference/iterator/is_integer_like.md
new file mode 100644
index 000000000..7099dcf45
--- /dev/null
+++ b/reference/iterator/is_integer_like.md
@@ -0,0 +1,68 @@
+# is-integer-like
+* iterator[meta header]
+* std[meta namespace]
+* variable[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  inline constexpr bool is-integer-like = /*see below*/;
+
+  template&amp;lt;class T&amp;gt;
+  inline constexpr bool is-signed-integer-like = /*see below*/;
+}
+```
+
+## 概要
+
+これらの説明専用の変数テンプレートは、任意の型`T`が符号付/なし整数型そのものあるいはそれと同様に扱える型である場合に`true`を示すものである。
+
+これは標準ライブラリ内において、イテレータの差分型（`difference_type`）として実装定義の整数型の使用を許可するためにコンセプトの文脈で使用される。
+
+## 効果
+
+`is-integer-like&amp;lt;T&amp;gt;`は`T`が[`integral`](/reference/concepts/integral.md)のモデルとなるか*integer-class*である時に`true`を示す。  
+`is-signed-integer-like&amp;lt;T&amp;gt;`は`T`が[`signed_integral`](/reference/concepts/signed_integral.md)のモデルとなるか*signed-integer-class*である時に`true`を示す。
+
+## (signed-)integer-class型
+
+*integer-class*型は組み込みの整数型と同じように動作する実装定義のクラス型である。
+
+*integer-class*型の表現可能な範囲はそれが定義する値の連続集合であり、`0`と`1`を必ず含んでいなければならない。この時、その範囲に負の数が含まれていればその型は*signed-integer-class*型であり、それ以外のものは*unsigned-integer-class*型である。
+
+### 要件
+
+`I`をある*integer-class*型、`B`を少なくとも`I`と同じ範囲の値を表現可能で同じ幅を持つ別の*integer-class*型とする。  
+`I`の値`a, b`、`a, b`それぞれと同じ値を表現する`B`の値`x, y`と任意の整数型の値`c`について次のことが成り立つ。
+
+- 式`@x`が適格である全ての単項演算子`@`について`@a`もまた適格であり、共に同じ値、効果、値カテゴリを持つ。`@x`が`bool`型を示す場合`@a`もまた`bool`型を示すが。`@x`が`B`を示す場合は`@a`は`I`を示す。
+- 式`c @= x`が適格である全ての（複合）代入演算子`@=`について`c @= a`もまた適格であり、共に同じ値、効果を持つ。式`c @= a`の結果は`c`を参照する*lvalue*となる。
+- 式`x @ y`が適格である全ての二項演算子`@`について`a @ b`もまた適格であり、結果の値を`I`が表現できる場合は共に同じ値、効果、値カテゴリを持つ。`x @ y`が`bool`型を示す場合`a @ b`もまた`bool`型を示すが。`x @ y`が`B`を示す場合は`a @ b`は`I`を示す。
+- *integer-class*型の値は任意の整数型に明示的に変換でき、任意の整数型の値は*integer-class*型に暗黙的にも明示的にも変換できる。それらの変換は例外を送出しない。
+- *integer-class*型の式`E`は`bool(E != I(0))`のように文脈的に`bool`に変換できる。
+- *integer-class*型は[`regular`](/reference/concepts/regular.md)及び[`totally_ordered`](/reference/concepts/totally_ordered.md)のモデルとなる。
+- 値初期化された*integer-class*型の値は`0`になる。
+
+*integer-class*型`I`について[`numeric_limits&amp;lt;I&amp;gt;`](/reference/limits/numeric_limits.md)の特殊化は次のような値を示す。
+
+- `numeric_limits&amp;lt;I&amp;gt;::is_specialized == true`
+- [`numeric_limits&amp;lt;I&amp;gt;::is_signed`](/reference/limits/numeric_limits/is_signed.md)` == true`
+    - `I`が*signed-integer-class*型の場合のみ
+- [`numeric_limits&amp;lt;I&amp;gt;::digits`](/reference/limits/numeric_limits/digits.md)は`I`の幅と等しい
+- [`numeric_limits&amp;lt;I&amp;gt;::digits10`](/reference/limits/numeric_limits/digits10.md)は`static_cast&amp;lt;int&amp;gt;(digits * log10(2))`と等しい
+- [`numeric_limits&amp;lt;I&amp;gt;::min()`](/reference/limits/numeric_limits/min.md)と[`numeric_limits&amp;lt;I&amp;gt;::max()`](/reference/limits/numeric_limits/max.md)はそれぞれ、`I`の表現可能な値の最小値と最大値を返す。[`numeric_limits&amp;lt;I&amp;gt;::lowest()`](/reference/limits/numeric_limits/lowest.md)は`numeric_limits&amp;lt;I&amp;gt;::max()`を返す。
+
+
+## バージョン
+### 言語
+- C++20
+
+## 関連項目
+
+- [`weakly_incrementable`](weakly_incrementable.md)
+- [`iota_view`](/reference/ranges/iota_view.md.nolink)
+
+## 参照
+
+- [P1522R1 Iterator Difference Type and Integer Overflow](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1522r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_common_reference_t -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_common_reference_t.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/iter_common_reference_t.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_common_reference_t.md b/reference/iterator/iter_common_reference_t.md
new file mode 100644
index 000000000..cf9dc1061
--- /dev/null
+++ b/reference/iterator/iter_common_reference_t.md
@@ -0,0 +1,58 @@
+# iter_common_reference_t
+* iterator[meta header]
+* std[meta namespace]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;indirectly_readable I&amp;gt;
+  using iter_common_reference_t = common_reference_t&amp;lt;iter_reference_t&amp;lt;I&amp;gt;, iter_value_t&amp;lt;I&amp;gt;&amp;amp;&amp;gt;;
+}
+```
+* indirectly_readable[link /reference/iterator/indirectly_readable.md]
+* common_reference_t[link /reference/type_traits/common_reference.md]
+* iter_reference_t[link /reference/iterator/iter_reference_t.md]
+* iter_value_t[link /reference/iterator/iter_value_t.md]
+
+## 概要
+
+任意のイテレータ型`I`から、そのイテレータの参照型（`reference`）と要素型（`value_type`）の間の共通の参照型（[`common_reference`](/reference/type_traits/common_reference.md)）を取得する。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using pointer = double*;
+
+  static_assert(std::same_as&amp;lt;std::iter_common_reference_t&amp;lt;vec_iterator&amp;gt;, int&amp;amp;&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_common_reference_t&amp;lt;pointer&amp;gt;     , double&amp;amp;&amp;gt;);
+}
+```
+* std::iter_common_reference_t[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`iterator_traits`](iterator_traits.md)
+- [`common_reference`](/reference/type_traits/common_reference.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_difference_t -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_difference_t.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/iter_difference_t.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_difference_t.md b/reference/iterator/iter_difference_t.md
new file mode 100644
index 000000000..520f1e012
--- /dev/null
+++ b/reference/iterator/iter_difference_t.md
@@ -0,0 +1,66 @@
+# iter_difference_t
+* iterator[meta header]
+* std[meta namespace]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class I&amp;gt;
+  using iter_difference_t = /*see below*/;
+}
+```
+* remove_cvref_t[link /reference/type_traits/remove_cvref.md]
+
+## 概要
+
+任意のイテレータ型`I`から、そのイテレータ間の差分（距離）を表す型（`difference_type`）を取得する。
+
+## 効果
+
+`RI = remove_cvref_t&amp;lt;I&amp;gt;`とすると、次のどちらか
+
+- [`incrementable_traits`](incrementable_traits.md)`&amp;lt;RI&amp;gt;::difference_type`
+    - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;`がプライマリテンプレートの特殊化となる場合
+- [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;::difference_type`
+    - その他の場合
+
+## 備考
+
+プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`incrementable_traits`](incrementable_traits.md)を特殊化する。
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using pointer = double*;
+
+  static_assert(std::same_as&amp;lt;std::iter_difference_t&amp;lt;vec_iterator&amp;gt;, std::ptrdiff_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_difference_t&amp;lt;pointer&amp;gt;     , std::ptrdiff_t&amp;gt;);
+}
+```
+* std::iter_difference_t[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`iterator_traits`](iterator_traits.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_reference_t -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_reference_t.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/iter_reference_t.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_reference_t.md b/reference/iterator/iter_reference_t.md
new file mode 100644
index 000000000..48adf9cdd
--- /dev/null
+++ b/reference/iterator/iter_reference_t.md
@@ -0,0 +1,55 @@
+# iter_reference_t
+* iterator[meta header]
+* std[meta namespace]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;dereferenceable I&amp;gt;
+  using iter_reference_t = decltype(*declval&amp;lt;I&amp;amp;&amp;gt;());
+}
+```
+* dereferenceable[link /reference/iterator/dereferenceable.md]
+* declval[link /reference/utility/declval.md]
+
+## 概要
+
+任意のイテレータ型`I`から、そのイテレータの要素への参照型（`reference`）を取得する。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using pointer = double*;
+
+  static_assert(std::same_as&amp;lt;std::iter_reference_t&amp;lt;vec_iterator&amp;gt;, int&amp;amp;&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_reference_t&amp;lt;pointer&amp;gt;     , double&amp;amp;&amp;gt;);
+}
+```
+* std::iter_reference_t[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`iterator_traits`](iterator_traits.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_rvalue_reference_t -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_rvalue_reference_t.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/iter_rvalue_reference_t.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_rvalue_reference_t.md b/reference/iterator/iter_rvalue_reference_t.md
new file mode 100644
index 000000000..9821b1c64
--- /dev/null
+++ b/reference/iterator/iter_rvalue_reference_t.md
@@ -0,0 +1,60 @@
+# iter_rvalue_reference_t
+* iterator[meta header]
+* std[meta namespace]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;dereferenceable I&amp;gt;
+    requires requires(I&amp;amp; i) {
+      { ranges::iter_move(i) } -&amp;gt; can-reference;
+    }
+  using iter_rvalue_reference_t = decltype(ranges::iter_move(declval&amp;lt;I&amp;amp;&amp;gt;()));
+}
+```
+* dereferenceable[link /reference/iterator/dereferenceable.md]
+* can-reference[link /reference/iterator/dereferenceable.md]
+* iter_move[link /reference/iterator/iter_move.md.nolink]
+* declval[link /reference/utility/declval.md]
+
+## 概要
+
+任意のイテレータ型`I`から、そのイテレータの要素への右辺値参照型を取得する。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using pointer = double*;
+
+  static_assert(std::same_as&amp;lt;std::iter_rvalue_reference_t&amp;lt;vec_iterator&amp;gt;, int&amp;amp;&amp;amp;&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_rvalue_reference_t&amp;lt;pointer&amp;gt;     , double&amp;amp;&amp;amp;&amp;gt;);
+}
+```
+* std::iter_rvalue_reference_t[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`iterator_traits`](iterator_traits.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_value_t -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_value_t.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/iter_value_t.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_value_t.md b/reference/iterator/iter_value_t.md
new file mode 100644
index 000000000..3e077d691
--- /dev/null
+++ b/reference/iterator/iter_value_t.md
@@ -0,0 +1,65 @@
+# iter_value_t
+* iterator[meta header]
+* std[meta namespace]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class I&amp;gt;
+  using iter_value_t = /*see below*/;
+}
+```
+
+## 概要
+
+任意のイテレータ型`I`から、そのイテレータの要素型（`value_type`）を取得する。
+
+## 効果
+
+`RI = remove_cvref_t&amp;lt;I&amp;gt;`とすると、次のどちらか
+
+- [`indirectly_readable_traits`](indirectly_readable_traits.md)`&amp;lt;RI&amp;gt;::value_type`
+    - [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;`がプライマリテンプレートの特殊化となる場合
+- [`iterator_traits`](iterator_traits.md)`&amp;lt;RI&amp;gt;::value_type`
+    - その他の場合
+
+## 備考
+
+プログラム定義型（ユーザー定義の任意のイテレータ型）でこの結果をカスタマイズするには、[`indirectly_readable_traits`](indirectly_readable_traits.md)を特殊化する。
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using pointer = double*;
+
+  static_assert(std::same_as&amp;lt;std::iter_value_t&amp;lt;vec_iterator&amp;gt;, int&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_value_t&amp;lt;pointer&amp;gt;     , double&amp;gt;);
+}
+```
+* std::iter_value_t[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`iterator_traits`](iterator_traits.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator tag -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iterator_tag.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/iterator_tag.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iterator_tag.md b/reference/iterator/iterator_tag.md
index 06a959c29..c85562401 100644
--- a/reference/iterator/iterator_tag.md
+++ b/reference/iterator/iterator_tag.md
@@ -10,19 +10,21 @@ namespace std {
   struct forward_iterator_tag : public input_iterator_tag { };
   struct bidirectional_iterator_tag : public forward_iterator_tag { };
   struct random_access_iterator_tag : public bidirectional_iterator_tag { };
+  struct contiguous_iterator_tag: public random_access_iterator_tag { };  // C++20から
 }
 ```
 
 ## 概要
 `&amp;lt;iterator&amp;gt;`ヘッダでは、イテレータを分類するためのタグ(空クラス)を定義している。
 
-| 型                           | 説明 |
-|------------------------------|----------------|
-| `input_iterator_tag`         | 入力イテレータ |
-| `output_iterator_tag`        | 出力イテレータ |
-| `forward_iterator_tag`       | 前方イテレータ |
-| `bidirectional_iterator_tag` | 双方向イテレータ |
-| `random_access_iterator_tag` | ランダムアクセスイテレータ |
+| 型                           | 説明 | 対応バージョン |
+|------------------------------|----------------|-------|
+| `input_iterator_tag`         | 入力イテレータ ||
+| `output_iterator_tag`        | 出力イテレータ ||
+| `forward_iterator_tag`       | 前方イテレータ ||
+| `bidirectional_iterator_tag` | 双方向イテレータ ||
+| `random_access_iterator_tag` | ランダムアクセスイテレータ ||
+| `contiguous_iterator_tag` | 隣接イテレータ | C++20 |
 
 イテレータの関係性の定義に従い、これらのクラスは継承関係を持っている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>projected -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/projected.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/projected.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/projected.md b/reference/iterator/projected.md
new file mode 100644
index 000000000..a90d53917
--- /dev/null
+++ b/reference/iterator/projected.md
@@ -0,0 +1,98 @@
+# projected
+* iterator[meta header]
+* std[meta namespace]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+
+  template&amp;lt;indirectly_readable I, indirectly_regular_unary_invocable&amp;lt;I&amp;gt; Proj&amp;gt;
+  struct projected {
+    using value_type = remove_cvref_t&amp;lt;indirect_result_t&amp;lt;Proj&amp;amp;, I&amp;gt;&amp;gt;;
+
+    indirect_result_t&amp;lt;Proj&amp;amp;, I&amp;gt; operator*() const;	// 宣言のみ
+  };
+
+
+  // incrementable_traitsにアダプトする
+  template&amp;lt;weakly_incrementable I, class Proj&amp;gt;
+  struct incrementable_traits&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; {
+    using difference_type = iter_difference_t&amp;lt;I&amp;gt;;
+  };
+}
+```
+* indirectly_readable[link /reference/iterator/indirectly_readable.md]
+* indirectly_regular_unary_invocable[link /reference/iterator/indirectly_regular_unary_invocable.md.nolink]
+* remove_cvref_t[link /reference/type_traits/remove_cvref.md]
+* indirect_result_t[link /reference/iterator/indirect_result_t.md]
+* incrementable_traits[link /reference/iterator/incrementable_traits.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+
+## 概要
+
+間接参照可能な型`I`に任意の射影操作`Proj`を適用した結果を表す[`indirectly_readable`](/reference/iterator/indirectly_readable.md)のモデルとなる型を生成する。
+
+これは射影操作を受け取るコンセプトやアルゴリズムを制約するために使用するものであり、評価される文脈で使用可能ではない。主に、射影操作の結果に対してイテレータ関連のコンセプトを適用する場合に使用する。
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using vec_iterator = std::vector&amp;lt;int&amp;gt;::iterator;
+  using vecitr_proj = std::projected&amp;lt;vec_iterator, std::identity&amp;gt;;
+
+  static_assert(std::indirectly_readable&amp;lt;vecitr_proj&amp;gt;);
+  static_assert(std::same_as&amp;lt;vecitr_proj::value_type                  , int&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_difference_t&amp;lt;vecitr_proj&amp;gt;      , std::ptrdiff_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_value_t&amp;lt;vecitr_proj&amp;gt;           , int&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_reference_t&amp;lt;vecitr_proj&amp;gt;       , int&amp;amp;&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_rvalue_reference_t&amp;lt;vecitr_proj&amp;gt;, int&amp;amp;&amp;amp;&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_common_reference_t&amp;lt;vecitr_proj&amp;gt;, int&amp;amp;&amp;gt;);
+
+  //別の射影でプロジェクション
+  using vecitr_proj2 = std::projected&amp;lt;vec_iterator, decltype([](int) -&amp;gt; double { return 0.0;})&amp;gt;;
+
+  static_assert(std::indirectly_readable&amp;lt;vecitr_proj2&amp;gt;);
+  static_assert(std::same_as&amp;lt;vecitr_proj2::value_type                  , double&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_difference_t&amp;lt;vecitr_proj2&amp;gt;      , std::ptrdiff_t&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_value_t&amp;lt;vecitr_proj2&amp;gt;           , double&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_reference_t&amp;lt;vecitr_proj2&amp;gt;       , double&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_rvalue_reference_t&amp;lt;vecitr_proj2&amp;gt;, double&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::iter_common_reference_t&amp;lt;vecitr_proj2&amp;gt;, double&amp;gt;);
+}
+```
+* std::projected[color ff0000]
+* identity[link /reference/functional/identity.md]
+* same_as[link /reference/concepts/same_as.md]
+* indirectly_readable[link /reference/iterator/indirectly_readable.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* iter_value_t[link /reference/iterator/iter_value_t.md]
+* iter_reference_t[link /reference/iterator/iter_reference_t.md]
+* iter_rvalue_reference_t[link /reference/iterator/iter_rvalue_reference_t.md]
+* iter_common_reference_t[link /reference/iterator/iter_common_reference_t.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [`indirectly_comparable`](iterator/indirectly_comparable.md.nolink)
+- [`mergeable`](iterator/mergeable.md.nolink)
+- [`sortable`](iterator/sortable.md.nolink)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sentinel_for -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/sentinel_for.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/sentinel_for.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/sentinel_for.md b/reference/iterator/sentinel_for.md
new file mode 100644
index 000000000..a1ab3fc8e
--- /dev/null
+++ b/reference/iterator/sentinel_for.md
@@ -0,0 +1,109 @@
+# sentinel_for
+* iterator[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class S, class I&amp;gt;
+  concept sentinel_for =
+    semiregular&amp;lt;S&amp;gt; &amp;amp;&amp;amp;
+    input_or_output_iterator&amp;lt;I&amp;gt; &amp;amp;&amp;amp;
+    weakly-equality-comparable-with&amp;lt;S, I&amp;gt;;
+}
+```
+* semiregular[link /reference/concepts/semiregular.md]
+* input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* weakly-equality-comparable-with[link /reference/concepts/equality_comparable.md]
+
+## 概要
+
+`sentinel_for`は、任意の[`semiregular`](/reference/concepts/semiregular.md)な型`S`がイテレータ型`I`の番兵（*sentinel*）型である事を表すコンセプトである。
+
+番兵型とは、イテレータ範囲`[begin, end)`においての`end`を表す型の事である。これは通常`begin`の型と同じになるが、等値比較可能でありさえすれば別の型であっても構わない。
+
+## モデル
+
+型`I, S`の値`i, s`とそれによって示される範囲`[i, s)`について次の条件を満たす場合に限って、型`I, S`は`sentinel_for`のモデルである。
+
+- `i == s`が適格である（未定義動作にならない）
+- `bool(i != s) == true`の（`i`が範囲終端に到達していない）時、`i`は間接参照可能であり`[++i, s)`も範囲を示す
+
+ここでの`==`の[定義域](/reference/concepts.md)は静的ではなく、実行時に変化しうる。`[i, s)`が範囲を示している時に`i == oi`となるような別のイテレータ`oi`をインクリメント（`++oi`）した後で、範囲`[i, s)`が有効であり続ける必要はない。
+
+## 例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template&amp;lt;typename I, std::sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+void f(const char* namei, const char* names) {
+  std::cout &amp;lt;&amp;lt; names &amp;lt;&amp;lt; &amp;#34; is sentinel for &amp;#34; &amp;lt;&amp;lt; namei &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename I, typename S&amp;gt;
+void f(const char* namei, const char* names) {
+  std::cout &amp;lt;&amp;lt; names &amp;lt;&amp;lt; &amp;#34; is not sentinel for &amp;#34; &amp;lt;&amp;lt; namei &amp;lt;&amp;lt; std::endl;
+}
+
+
+struct sample_sentinel{};
+
+struct sample_input_or_output_iterator {
+  friend auto operator++(sample_input_or_output_iterator&amp;amp;) -&amp;gt; sample_input_or_output_iterator&amp;amp;;
+  friend auto operator++(sample_input_or_output_iterator&amp;amp;, int) -&amp;gt; sample_input_or_output_iterator;
+
+  friend auto operator*(sample_input_or_output_iterator&amp;amp;) -&amp;gt; int;
+
+  friend bool operator==(const sample_input_or_output_iterator&amp;amp;, sample_sentinel);
+
+  using difference_type = int;
+};
+
+
+int main() {
+  f&amp;lt;int*, int*&amp;gt;(&amp;#34;int*&amp;#34;, &amp;#34;int*&amp;#34;);
+  f&amp;lt;const int*, int*&amp;gt;(&amp;#34;const int*&amp;#34;, &amp;#34;int*&amp;#34;);
+  f&amp;lt;int*, const int*&amp;gt;(&amp;#34;int*&amp;#34;, &amp;#34;int* const&amp;#34;);
+  f&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator, std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;(&amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;, &amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;);
+  f&amp;lt;sample_input_or_output_iterator, sample_sentinel&amp;gt;(&amp;#34;sample_input_or_output_iterator&amp;#34;, &amp;#34;sample_sentinel&amp;#34;);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator, int*&amp;gt;(&amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;, &amp;#34;int*&amp;#34;);
+  f&amp;lt;double*, int*&amp;gt;(&amp;#34;double*&amp;#34;, &amp;#34;int*&amp;#34;);
+}
+```
+* std::sentinel_for[color ff0000]
+
+### 出力
+```
+int* is sentinel for int*
+int* is sentinel for const int*
+int* const is sentinel for int*
+std::vector&amp;lt;int&amp;gt;::iterator is sentinel for std::vector&amp;lt;int&amp;gt;::iterator
+sample_sentinel is sentinel for sample_input_or_output_iterator
+
+int* is not sentinel for std::vector&amp;lt;int&amp;gt;::iterator
+int* is not sentinel for double*
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sized_sentinel_for -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/sized_sentinel_for.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/sized_sentinel_for.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/sized_sentinel_for.md b/reference/iterator/sized_sentinel_for.md
new file mode 100644
index 000000000..4f7a5e25b
--- /dev/null
+++ b/reference/iterator/sized_sentinel_for.md
@@ -0,0 +1,129 @@
+# sized_sentinel_for
+* iterator[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class S, class I&amp;gt;
+  concept sized_sentinel_for =
+    sentinel_for&amp;lt;S, I&amp;gt; &amp;amp;&amp;amp;
+    !disable_sized_sentinel_for&amp;lt;remove_cv_t&amp;lt;S&amp;gt;, remove_cv_t&amp;lt;I&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    requires(const I&amp;amp; i, const S&amp;amp; s) {
+      { s - i } -&amp;gt; same_as&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt;;
+      { i - s } -&amp;gt; same_as&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt;;
+    };
+}
+```
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* disable_sized_sentinel_for[link disable_sized_sentinel_for.md]
+* remove_cvref_t[link /reference/type_traits/remove_cvref.md]
+* same_as[link /reference/concepts/same_as.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+
+## 概要
+
+`sized_sentinel_for`は、任意のイテレータ型`I`とその番兵型`S`の間で`operator-`によって定数時間で距離が求められる事を表すコンセプトである。
+
+## モデル
+
+型`I, S`の値`i, s`とそれによって示される範囲`[i, s)`、`bool(i == s) == true`となるために必要な`++i`の最小の適用回数を`N`とする。それら`i, s, N`について次の条件を満たす場合に限って、型`I, S`は`sized_sentinel_for`のモデルである。
+
+- `N`が`iter_difference_t&amp;lt;I&amp;gt;`で表現可能な場合、`s - i`は適格であり`N`と等値となる
+- `-N`が`iter_difference_t&amp;lt;I&amp;gt;`で表現可能な場合、`i - s`は適格であり`-N`と等値となる
+
+## 備考
+
+イテレータ型`I, S`が本コンセプトを構文的には満たしているが意味論的な制約まで満たすことができない（モデルとならない）場合に、`sized_sentinel_for&amp;lt;S, I&amp;gt; == false`とするためには[`disable_sized_sentinel_for`](disable_sized_sentinel_for.md)を`true`となるように特殊化する。
+
+## 例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template&amp;lt;typename I, std::sized_sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+void f(const char* namei, const char* names) {
+  std::cout &amp;lt;&amp;lt; names &amp;lt;&amp;lt; &amp;#34; is sized sentinel for &amp;#34; &amp;lt;&amp;lt; namei &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename I, typename S&amp;gt;
+void f(const char* namei, const char* names) {
+  std::cout &amp;lt;&amp;lt; names &amp;lt;&amp;lt; &amp;#34; is not sized sentinel for &amp;#34; &amp;lt;&amp;lt; namei &amp;lt;&amp;lt; std::endl;
+}
+
+
+struct sample_sentinel{};
+
+struct sample_sized_iterator {
+  friend auto operator++(sample_sized_iterator&amp;amp;) -&amp;gt; sample_sized_iterator&amp;amp;;
+  friend auto operator++(sample_sized_iterator&amp;amp;, int) -&amp;gt; sample_sized_iterator;
+
+  friend auto operator*(sample_sized_iterator&amp;amp;) -&amp;gt; int;
+
+  friend bool operator==(const sample_sized_iterator&amp;amp;, sample_sentinel);
+
+  // input_or_output_iteratorに加えて、この2つを定義すればsized_sentinel_forとなる
+  friend auto operator-(const sample_sized_iterator&amp;amp;, sample_sentinel) -&amp;gt; int;
+  friend auto operator-(sample_sentinel, const sample_sized_iterator&amp;amp;) -&amp;gt; int;
+  
+
+  // std::default_sentinel_tは使用可能にしておく
+  friend bool operator==(const sample_sized_iterator&amp;amp;, std::default_sentinel_t);
+  friend auto operator-(const sample_sized_iterator&amp;amp;, std::default_sentinel_t) -&amp;gt; int;
+  friend auto operator-(std::default_sentinel_t, const sample_sized_iterator&amp;amp;) -&amp;gt; int;
+
+  using difference_type = int;
+};
+
+// disable_sized_sentinel_forをtrueで特殊化することでsized_sentinel_forを不適合にする
+template&amp;lt;&amp;gt;
+inline constexpr bool std::disable_sized_sentinel_for&amp;lt;sample_sentinel, sample_sized_iterator&amp;gt; = true;
+
+
+int main() {
+  f&amp;lt;int*, int*&amp;gt;(&amp;#34;int*&amp;#34;, &amp;#34;int*&amp;#34;);
+  f&amp;lt;const int*, int*&amp;gt;(&amp;#34;const int*&amp;#34;, &amp;#34;int*&amp;#34;);
+  f&amp;lt;int*, const int*&amp;gt;(&amp;#34;int*&amp;#34;, &amp;#34;int* const&amp;#34;);
+  f&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator, std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;(&amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;, &amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;);
+  f&amp;lt;sample_sized_iterator, std::default_sentinel_t&amp;gt;(&amp;#34;sample_sized_iterator&amp;#34;, &amp;#34;std::default_sentinel&amp;#34;);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator, int*&amp;gt;(&amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;, &amp;#34;int*&amp;#34;);
+  f&amp;lt;double*, int*&amp;gt;(&amp;#34;double*&amp;#34;, &amp;#34;int*&amp;#34;);
+  f&amp;lt;sample_sized_iterator, sample_sentinel&amp;gt;(&amp;#34;sample_sized_iterator&amp;#34;, &amp;#34;sample_sentinel&amp;#34;);
+}
+```
+* std::sized_sentinel_for[color ff0000]
+
+### 出力
+```
+int* is sized sentinel for int*
+int* is sized sentinel for const int*
+int* const is sized sentinel for int*
+std::vector&amp;lt;int&amp;gt;::iterator is sized sentinel for std::vector&amp;lt;int&amp;gt;::iterator
+std::default_sentinel is sized sentinel for sample_sized_iterator
+
+int* is not sized sentinel for std::vector&amp;lt;int&amp;gt;::iterator
+int* is not sized sentinel for double*
+sample_sentinel is not sized sentinel for sample_sized_iterator
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weakly_incrementable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/iterator/weakly_incrementable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/iterator/weakly_incrementable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/weakly_incrementable.md b/reference/iterator/weakly_incrementable.md
new file mode 100644
index 000000000..710ffc4ff
--- /dev/null
+++ b/reference/iterator/weakly_incrementable.md
@@ -0,0 +1,126 @@
+# weakly_incrementable
+* iterator[meta header]
+* std[meta namespace]
+* concept[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class I&amp;gt;
+  concept weakly_incrementable =
+    default_initializable&amp;lt;I&amp;gt; &amp;amp;&amp;amp; movable&amp;lt;I&amp;gt; &amp;amp;&amp;amp;
+    requires(I i) {
+      typename iter_difference_t&amp;lt;I&amp;gt;;
+      requires is-signed-integer-like&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt;;
+      { ++i } -&amp;gt; same_as&amp;lt;I&amp;amp;&amp;gt;;   // 等しさを保持することを要求しない
+      i++;                      // 等しさを保持することを要求しない
+    };
+}
+```
+* default_initializable[link /reference/concepts/default_initializable.md]
+* movable[link /reference/concepts/movable.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* is-signed-integer-like[link /reference/iterator/is_integer_like.md]
+* same_as[link /reference/concepts/same_as.md]
+
+## 概要
+
+`weakly_incrementable`は、イテレータ型`I`が前置/後置インクリメント演算子（`operator++`）によってインクリメント可能であることを表すコンセプトである。
+
+そのようなインクリメント操作には[等しさを保持](/reference/concepts.md)することは要求されず、型`I`は等値比較可能（[`equality_comparable`](/reference/concepts/equality_comparable.md)）である必要もない。
+
+## モデル
+
+型`I`のオブジェクト`i`について次の条件を満たす場合に限って、型`I`は`weakly_incrementable`のモデルである。
+
+- `++i`と`i++`は同じ[定義域](/reference/concepts.md)を持つ
+- `i`がインクリメント可能ならば、`++i`と`i++`は`i`を次の要素へ進める
+- `i`がインクリメント可能ならば、`addressof(++i)`と`addressof(i)`は等値となる
+
+「`i`がインクリメント可能」というのは、`i`が前置/後置両方のインクリメント式（`++`）の[定義域](/reference/concepts.md)にある場合を言う。すなわち、一般的なイテレータ範囲の`end`などインクリメントが出来ない、あるいは未定義動作となるような状態に`i`が無い場合を指定している。
+
+## 備考
+
+このコンセプトはイテレータにマルチパス保証を要求しない。例えばイテレータ`a, b`がある時、`a == b`であっても`++a == ++b`となるとは限らない。すなわち、`weakly_incrementable`なイテレータはその操作によってイテレータが参照しているシーケンスの状態が変更されることを許可する。そのようなイテレータには例えば[`istream_iterator`](/reference/iterator/istream_iterator.md)がある。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template&amp;lt;std::weakly_incrementable I&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is weakly incrementable&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+template&amp;lt;typename I&amp;gt;
+void f(const char* name) {
+  std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34; is not weakly incrementable&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+
+struct sample_weak_incrementable {
+  friend auto operator++(sample_weak_incrementable&amp;amp;) -&amp;gt; sample_weak_incrementable&amp;amp;;
+  friend auto operator++(sample_weak_incrementable&amp;amp;, int) -&amp;gt; sample_weak_incrementable&amp;amp;;  
+
+  // これも必要
+  using difference_type = int;
+};
+
+struct sample_not_weak_incrementable {
+  // 前置++しか用意しない
+  friend auto operator++(sample_weak_incrementable&amp;amp;) -&amp;gt; sample_weak_incrementable&amp;amp;;
+
+  using difference_type = int;
+};
+
+
+int main() {
+  f&amp;lt;int*&amp;gt;(&amp;#34;int*&amp;#34;);
+  f&amp;lt;const int*&amp;gt;(&amp;#34;const int*&amp;#34;);
+  f&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;(&amp;#34;std::vector&amp;lt;int&amp;gt;::iterator&amp;#34;);
+  f&amp;lt;std::ostream_iterator&amp;lt;double&amp;gt;&amp;gt;(&amp;#34;std::ostream_iterator&amp;lt;double&amp;gt;&amp;#34;);
+  f&amp;lt;sample_weak_incrementable&amp;gt;(&amp;#34;sample_weak_incrementable&amp;#34;);
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  f&amp;lt;int* const&amp;gt;(&amp;#34;int* const&amp;#34;);
+  f&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt;(&amp;#34;std::unique_ptr&amp;lt;int&amp;gt;&amp;#34;);
+  f&amp;lt;sample_not_weak_incrementable&amp;gt;(&amp;#34;sample_not_weak_incrementable&amp;#34;);
+}
+```
+* std::weakly_incrementable[color ff0000]
+
+### 出力
+```
+int* is weakly incrementable
+const int* is weakly incrementable
+std::vector&amp;lt;int&amp;gt;::iterator is weakly incrementable
+std::ostream_iterator&amp;lt;double&amp;gt; is weakly incrementable
+sample_incrementable is weakly incrementable
+
+int* const is not weakly incrementable
+std::unique_ptr&amp;lt;int&amp;gt; is not weakly incrementable
+sample_not_incrementable is not weakly incrementable
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 6
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+
+## 参照
+
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P1522R1 Iterator Difference Type and Integer Overflow](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1522r1.pdf)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>latch -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/latch.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/latch.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;latch&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;latch&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;latch&amp;gt;&lt;/code&gt;ヘッダは、ラッチ同期機構に関するクラスを定義する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/latch/latch.html&#34;&gt;latch&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ラッチ同期機構&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 11.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0666r2.pdf&#34; target=&#34;_blank&#34;&gt;P0666R2 Revised Latches and Barriers for C++20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1135r6.html&#34; target=&#34;_blank&#34;&gt;P1135R6 The C++20 Synchronization Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>latch -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/latch/latch.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/latch/latch.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/latch/latch.md b/reference/latch/latch.md
new file mode 100644
index 000000000..68854e07c
--- /dev/null
+++ b/reference/latch/latch.md
@@ -0,0 +1,140 @@
+# latch
+* latch[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  class latch;
+}
+```
+
+## 概要
+`latch`クラスは、ラッチ通過/到達スレッドが期待する個数になるまで複数スレッドの進行をブロックする、スレッド調整機構（同期プリミティブ）である。
+
+ラッチは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`以上かつ初期値以下の値をとり、このカウンタ値がラッチ未到達のスレッド個数と解釈される。
+その動作仕様からカウントダウン・ラッチと呼ばれることもある。
+
+- [コンストラクタ](latch/op_constructor.md)にてカウンタ値を設定する。
+- [`count_down()`](latch/count_down.md)によりカウンタ値の減算と通知を行う。（ラッチ通過）
+- [`wait()`](latch/wait.md)によりカウンタ値が`0`になるまで呼び出しスレッドをブロックする。（ラッチ待機）
+- [`arrive_and_wait()`](latch/arrive_and_wait.md)は`count_down()`＋`wait()`に相当する。（ラッチ到達 兼 待機）
+
+ラッチオブジェクトは1回だけ使用でき、カウンタ値が`0`に到達したオブジェクトの再利用はできない。
+複数スレッド間同期を繰り返しとる場合はバリア[`barrier`](/reference/barrier/barrier.md)を利用する。
+
+ラッチ`latch`はカウンタ値`0`を待機するが、類似機構のセマフォ[`counting_semaphore`](/reference/semaphore/counting_semaphore.md)はカウンタ値が`0`より大きいことを待機するという違いがある。
+
+
+## メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`(constructor)`](latch/op_constructor.md) | コンストラクタ | C++20 |
+| `(destructor)`  | デストラクタ   | C++20 |
+| `operator=(const latch&amp;amp;) = delete;`     | 代入演算子     | C++20 |
+| [`count_down`](latch/count_down.md) | 通過通知           | C++20 |
+| [`try_wait`](latch/try_wait.md) | カウンタ値が`0`か否かを確認 | C++20 |
+| [`wait`](latch/wait.md) | 待機処理           | C++20 |
+| [`arrive_and_wait`](latch/arrive_and_wait.md) | 到達通知と待機処理 | C++20 |
+
+
+## 静的メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`max`](latch/max.md) | 処理系でサポートされるカウンタ最大値 | C++20 |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;latch&amp;gt;
+#include &amp;lt;mutex&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+constexpr int NWORKER = 3;  // ワーカ数
+
+std::mutex cout_mtx;  // 行単位cout出力用ミューテックス
+
+int main()
+{
+  // 1回だけ初期化される共有データ
+  int shared_data = 0;
+
+  // 初期化済みを表すラッチ: 初期カウント値=1
+  std::latch initalized{1};
+  // タスク完了を表すラッチ: 初期カウント値=ワーカ数+1(メインスレッド)
+  std::latch completed{NWORKER+1};
+
+  // ワーカスレッド群をFire-and-Forget起動
+  for (int id = 1; id &amp;lt;= NWORKER; id++) {
+    std::thread([&amp;amp;,id]{
+      // 共有データの初期化完了を待機
+      initalized.wait();
+      // メインスレッド上でのshared_data代入完了は保証されており、
+      // 以降はshared_data読出のみであればデータ競合発生しない。
+      int local_data = shared_data;
+
+      { // ワーカスレッドのタスクを実行
+        std::lock_guard lk{cout_mtx};
+        std::cout &amp;lt;&amp;lt; &amp;#34;Worker#&amp;#34; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &amp;#34;:&amp;#34; &amp;lt;&amp;lt; local_data &amp;lt;&amp;lt; std::endl;
+      }
+
+      // タスク完了を通知
+      completed.count_down();
+      // ワーカスレッドはブロックされずそのまま終了する
+    }).detach();
+  }
+
+  // 共有データを初期化
+  shared_data = 42;
+
+  // 共有データ初期化完了をワーカスレッド群へ通知
+  initalized.count_down();
+  // メインスレッドはブロックされず後続行を実行する
+
+  { // メインスレッドのタスクを実行
+    std::lock_guard lk{cout_mtx};
+    std::cout &amp;lt;&amp;lt; &amp;#34;Main:&amp;#34; &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  }
+
+  // メインスレッドのタスク完了通知 兼 全ワーカスレッドのタスク完了待機
+  completed.arrive_and_wait();
+}
+```
+* std::latch[color ff0000]
+* count_down()[link latch/count_down.md]
+* wait()[link latch/wait.md]
+* arrive_and_wait()[link latch/arrive_and_wait.md]
+
+### 出力例
+```
+Worker#1:42
+Worker#2:42
+Main:42
+Worker#3:42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`&amp;lt;semaphore&amp;gt;`](/reference/semaphore.md)
+- [`&amp;lt;barrier&amp;gt;`](/reference/barrier.md)
+
+
+## 参照
+- [Boost.Threadライブラリ, Latches](https://www.boost.org/doc/libs/1_73_0/doc/html/thread/synchronization.html#thread.synchronization.latches)
+- [Java標準ライブラリ, java.util.concurrent.CountDownLatch](https://docs.oracle.com/javase/jp/6/api/java/util/concurrent/CountDownLatch.html)
+- [C#標準ライブラリ, System.Threading.CountdownEvent](https://docs.microsoft.com/en-us/dotnet/api/system.threading.countdownevent)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arrive_and_wait -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/latch/latch/arrive_and_wait.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/latch/latch/arrive_and_wait.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/latch/latch/arrive_and_wait.md b/reference/latch/latch/arrive_and_wait.md
new file mode 100644
index 000000000..4d0aed8f9
--- /dev/null
+++ b/reference/latch/latch/arrive_and_wait.md
@@ -0,0 +1,94 @@
+# arrive_and_wait
+* latch[meta header]
+* std[meta namespace]
+* latch[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void arrive_and_wait(ptrdiff_t update = 1);
+```
+* ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
+
+## 概要
+ラッチのカウンタ値を`update`だけ減算し、呼び出しスレッド自身もカウンタ値が`0`になるまで待機する。
+
+
+## 効果
+次の処理と等価：
+
+```cpp
+count_down(update);
+wait();
+```
+* count_down(update)[link count_down.md]
+* wait()[link wait.md]
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;latch&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+// メインスレッドとサブスレッドは&amp;#34;同期ポイント&amp;#34;で互いの進行を待ち合わせる。
+// これによりメインスレッドでxに書込んだ値はサブスレッド側で安全に読出せ、
+// サブスレッドでyに書込んだ値はメインスレッド側で安全に読出せることが保証される。
+// この&amp;#34;同期ポイント&amp;#34;はランデブーポイント(Rendezvous Point)とも呼ばれる。
+int main()
+{
+  int x = 0, y = 0;
+
+  // 同期ポイントを表すラッチ: 初期カウント値=2
+  std::latch sync{2};
+
+  // サブスレッドを起動
+  std::thread t([&amp;amp;]{
+    y = 200;
+    sync.arrive_and_wait();  // 同期ポイント
+    assert(x == 100);
+  });
+
+  // メインスレッド処理
+  {
+    x = 100;
+    sync.arrive_and_wait();  // 同期ポイント
+    assert(y == 200);
+  }
+
+  t.join();
+}
+```
+* arrive_and_wait()[color ff0000]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`count_down()`](count_down.md)
+- [`wait()`](wait.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count_down -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/latch/latch/count_down.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/latch/latch/count_down.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/latch/latch/count_down.md b/reference/latch/latch/count_down.md
new file mode 100644
index 000000000..924d445da
--- /dev/null
+++ b/reference/latch/latch/count_down.md
@@ -0,0 +1,86 @@
+# count_down
+* latch[meta header]
+* std[meta namespace]
+* latch[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void count_down(ptrdiff_t update = 1);
+```
+* ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
+
+## 概要
+ラッチのカウンタ値を`update`だけ減算し、カウンタ値が`0`になれば待機中スレッドのブロック解除を行う。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 事前条件
+`update &amp;gt;= 0` かつ `update &amp;lt;= counter`
+
+
+## 効果
+アトミックに`counter -= update`を実行する。
+`counter`が`0`と等しければ、`*this`上で待機中の全スレッドをブロック解除する。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;latch&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::latch stored{1};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    stored.wait();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  stored.count_down();
+
+  t.join();
+}
+```
+* count_down()[color ff0000]
+* wait()[link wait.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`wait()`](wait.md)
+- [`arrive_and_wait()`](arrive_and_wait.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/latch/latch/max.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/latch/latch/max.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/latch/latch/max.md b/reference/latch/latch/max.md
new file mode 100644
index 000000000..8900be04b
--- /dev/null
+++ b/reference/latch/latch/max.md
@@ -0,0 +1,51 @@
+# max
+* latch[meta header]
+* std[meta namespace]
+* latch[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr ptrdiff_t max() noexcept;
+```
+* ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
+
+## 概要
+処理系がサポートするカウンタ最大値
+
+
+## 戻り値
+処理系がサポートするカウンタの最大値を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;latch&amp;gt;
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; std::latch::max() &amp;lt;&amp;lt; std::endl;
+}
+```
+* max()[color ff0000]
+
+### 出力例
+```
+9223372036854775807
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/latch/latch/op_constructor.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/latch/latch/op_constructor.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/latch/latch/op_constructor.md b/reference/latch/latch/op_constructor.md
new file mode 100644
index 000000000..d666ef662
--- /dev/null
+++ b/reference/latch/latch/op_constructor.md
@@ -0,0 +1,50 @@
+# コンストラクタ
+* latch[meta header]
+* std[meta namespace]
+* latch[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr explicit latch(ptrdiff_t expected); // (1)
+latch(const latch&amp;amp;) = delete;                 // (2)
+```
+
+## latchオブジェクトの構築
+- (1) : カウンタ値を`expected`として、`latch`オブジェクトの初期化を行う。
+- (2) : コピーコンストラクタ。コピー不可。
+
+
+## 事前条件
+`expected &amp;gt;= 0` かつ `expected &amp;lt;=` [`max()`](max.md)
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;latch&amp;gt;
+
+// カウンタ値1のラッチを定義
+std::latch latch{1};
+
+int main() {}
+```
+* std::latch[color ff0000]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_wait -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/latch/latch/try_wait.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/latch/latch/try_wait.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/latch/latch/try_wait.md b/reference/latch/latch/try_wait.md
new file mode 100644
index 000000000..f6eedba48
--- /dev/null
+++ b/reference/latch/latch/try_wait.md
@@ -0,0 +1,77 @@
+# try_wait
+* latch[meta header]
+* std[meta namespace]
+* latch[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+bool try_wait() const noexcept;
+```
+
+## 概要
+ラッチのカウンタ値が`0`か否かを確認する。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 戻り値
+非常に低い確率で`false`を返す。そうでなければ、`counter == 0`の評価結果を返す。
+
+
+## 例外
+投げない
+
+
+## 備考
+C++ライブラリ仕様は、処理系の Spurious Failure を許容する。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;latch&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::latch stored{1};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    while (!stored.try_wait()) {
+      std::this_thread::yield();
+      // ここでは try_wait 動作例示のためビジーループを行うが、
+      // 単純な待機が目的であれば wait() 利用が適切である。
+    }
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  stored.count_down();
+
+  t.join();
+}
+```
+* try_wait()[color ff0000]
+* wait()[link wait.md]
+* count_down()[link count_down.md]
+* std::this_thread::yield()[link /reference/thread/this_thread/yield.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/latch/latch/wait.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/latch/latch/wait.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/latch/latch/wait.md b/reference/latch/latch/wait.md
new file mode 100644
index 000000000..7d2a90824
--- /dev/null
+++ b/reference/latch/latch/wait.md
@@ -0,0 +1,81 @@
+# wait
+* latch[meta header]
+* std[meta namespace]
+* latch[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void wait() const;
+```
+
+## 概要
+ラッチのカウンタ値が`0`になるまで待機する。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+`counter`が`0`に等しければ即座に制御を戻す。
+そうでなければ、`counter`を`0`に減算する[`count_down`](count_down.md)呼び出しが行われるまで、`*this`上で呼び出しスレッドをブロックする。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;latch&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::latch stored{1};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    stored.wait();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  stored.count_down();
+
+  t.join();
+}
+```
+* wait()[color ff0000]
+* count_down()[link count_down.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`count_down()`](count_down.md)
+- [`arrive_and_wait()`](arrive_and_wait.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_modulo -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/is_modulo.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/limits/numeric_limits/is_modulo.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/is_modulo.md b/reference/limits/numeric_limits/is_modulo.md
index 7d91a38b8..ade0cf909 100644
--- a/reference/limits/numeric_limits/is_modulo.md
+++ b/reference/limits/numeric_limits/is_modulo.md
@@ -26,8 +26,8 @@ static constexpr bool is_modulo;
 ## 備考
 - C++03の「ほとんどのマシンでは符号付き整数型は`true`になる」という仕様は、符号あり整数型の未定義動作としてのオーバーフロー動作を正しいものとして扱ってしまっていた。これは間違いであった。C++17では、符号あり整数型は標準では`false`とし、実装がオーバーフロー時に値を折り返す場合に`true`と定義されるように修正された
 - コンパイルオプション
-    - GCCとClangでは、`-fwrapv`オプションをつけることで、符号付き整数型を2の補数表現として折り返すよう動作を規定する
-    - Visual C++では、`d2UndefIntOverflow`オプションをつけることで、符号付き整数型のオーバーフローを利用するコードの最適化を無効化し、値を折り返す動作になる
+    - GCCとClangでは、`-fwrapv`オプションをつけることで、符号付き整数型を2の補数表現として折り返すよう動作を規定するが、`is_modulo`は`false`となる
+    - Visual C++では、`d2UndefIntOverflow`オプションをつけることで、符号付き整数型のオーバーフローを利用するコードの最適化を無効化し、値を折り返す動作になるが、`is_modulo`は`false`となる
 
 
 ## 例
@@ -65,3 +65,4 @@ char : false
 - [LWG Issue 612. `numeric_limits::is_modulo` insufficiently defined](https://wg21.cmeerw.net/lwg/issue612)
     - C++11で、定義がより明確になった
 - [LWG 2422. `std::numeric_limits&amp;lt;T&amp;gt;::is_modulo` description: &amp;#34;most machines&amp;#34; errata](https://wg21.cmeerw.net/lwg/issue2422)
+- [[LLVMbugs] [Bug 20158] New: `std::numeric_limits&amp;lt;signed T&amp;gt;::is_modulo` set even without `-fwrapv`](http://lists.llvm.org/pipermail/llvm-bugs/2014-June/034843.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/map/map/contains.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/map/map/contains.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/contains.md b/reference/map/map/contains.md
index 84aa8176c..a102feb73 100644
--- a/reference/map/map/contains.md
+++ b/reference/map/map/contains.md
@@ -68,7 +68,7 @@ contain
 ### 処理系
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1
 
 ## 参照
 - [P0458R2 Checking for Existence of an Element in Associative Containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0458r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/contains.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/map/multimap/contains.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/contains.md b/reference/map/multimap/contains.md
index 3649f2b4f..63c7c7495 100644
--- a/reference/map/multimap/contains.md
+++ b/reference/map/multimap/contains.md
@@ -68,7 +68,7 @@ contain
 ### 処理系
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1
 
 ## 参照
 - [P0458R2 Checking for Existence of an Element in Associative Containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0458r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>memory -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;memory&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;memory&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;memory&amp;gt;&lt;/code&gt;ヘッダでは、メモリアロケータ、未初期化領域に関する関数群、スマートポインタ、ガベージコレクションを作るためのユーティリティ関数といった、メモリを扱うための機能を定義する。&lt;/p&gt;
&lt;h2&gt;メモリアロケータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリアロケータの標準実装(class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータクラスへの間接的なアクセス(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_arg_t.html&#34;&gt;allocator_arg_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータを引数として渡す際の、オーバーロード解決のためのタグ(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_arg_t.html&#34;&gt;allocator_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータを引数として渡す際の、オーバーロード解決のためのタグ(constant value)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uses_allocator.html&#34;&gt;uses_allocator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型&lt;code&gt;T&lt;/code&gt;がアロケータを使用するか調べる&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uses_allocator_construction_args.html&#34;&gt;uses_allocator_construction_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;uses-allocator 構築のためのコンストラクタ引数を &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;tuple&lt;/a&gt;&lt;/code&gt; 型にして返す&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_obj_using_allocator.html&#34;&gt;make_obj_using_allocator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;uses-allocator 構築する&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_construct_using_allocator.html&#34;&gt;uninitialized_construct_using_allocator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された領域に uses-allocator 構築する&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;未初期化領域に対する操作&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_default_construct.html&#34;&gt;uninitialized_default_construct&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域の範囲の各要素をデフォルト構築する(function template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_default_construct_n.html&#34;&gt;uninitialized_default_construct_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域の範囲のうち、先頭&lt;code&gt;N&lt;/code&gt;個の要素をデフォルト構築する(function template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_value_construct.html&#34;&gt;uninitialized_value_construct&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域の範囲の各要素配置を値構築する(function template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_value_construct_n.html&#34;&gt;uninitialized_value_construct_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域の範囲のうち、先頭&lt;code&gt;N&lt;/code&gt;個の要素を値構築する(function template)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_copy.html&#34;&gt;uninitialized_copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域の範囲を配置&lt;code&gt;new&lt;/code&gt;で初期化してコピー出力する(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_copy_n.html&#34;&gt;uninitialized_copy_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域の範囲のうち、先頭&lt;code&gt;N&lt;/code&gt;個の要素を配置&lt;code&gt;new&lt;/code&gt;で初期化してコピー出力する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_move.html&#34;&gt;uninitialized_move&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域の範囲を配置&lt;code&gt;new&lt;/code&gt;で初期化してムーブ出力する(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_move_n.html&#34;&gt;uninitialized_move_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域の範囲のうち、先頭&lt;code&gt;N&lt;/code&gt;個の要素を配置&lt;code&gt;new&lt;/code&gt;で初期化してムーブ出力する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_fill.html&#34;&gt;uninitialized_fill&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域の範囲を、指定された値で配置&lt;code&gt;new&lt;/code&gt;する(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_fill_n.html&#34;&gt;uninitialized_fill_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域の範囲のうち、先頭&lt;code&gt;N&lt;/code&gt;個の要素を指定された値で配置&lt;code&gt;new&lt;/code&gt;する(function template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/destroy_at.html&#34;&gt;destroy_at&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタを呼び出す&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/destroy.html&#34;&gt;destroy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の各要素に対してデストラクタを呼び出す&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/destroy_n.html&#34;&gt;destroy_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲のうち、先頭&lt;code&gt;N&lt;/code&gt;個の要素に対してデストラクタを呼び出す&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/raw_storage_iterator.html&#34;&gt;raw_storage_iterator&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;未初期化領域に書き込むための出力イテレータ(class template)&lt;/td&gt;
&lt;td&gt;C++17から非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/get_temporary_buffer.html&#34;&gt;get_temporary_buffer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;短期的なメモリ領域を確保する(function template)&lt;/td&gt;
&lt;td&gt;C++17から非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/return_temporary_buffer.html&#34;&gt;return_temporary_buffer&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;get_temporary_buffer()&lt;/code&gt;で確保された領域を解放する(function)&lt;/td&gt;
&lt;td&gt;C++17から非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;スマートポインタ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;共有方式スマートポインタ(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_shared.html&#34;&gt;make_shared&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築するヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_shared_for_overwrite.html&#34;&gt;make_shared_for_overwrite&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&lt;/code&gt;を構築するヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocate_shared.html&#34;&gt;allocate_shared&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータを指定して&lt;code&gt;shared_ptr&lt;/code&gt;を構築するヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocate_shared_for_overwrite.html&#34;&gt;allocate_shared_for_overwrite&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アロケータを指定して&lt;code&gt;shared_ptr&lt;/code&gt;を構築するヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/enable_shared_from_this.html&#34;&gt;enable_shared_from_this&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;this&lt;/code&gt;を指す&lt;code&gt;shared_ptr&lt;/code&gt;を可能にする(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;weak_ptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&lt;/code&gt;のインスタンス監視(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/bad_weak_ptr.html&#34;&gt;bad_weak_ptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;weak_ptr&lt;/code&gt;から投げられる例外クラス(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_less.html&#34;&gt;owner_less&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所有権ベースの小なり比較(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;unique_ptr&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;専有方式スマートポインタ(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_unique.html&#34;&gt;make_unique&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unique_ptr&lt;/code&gt;を構築するヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_unique_for_overwrite.html&#34;&gt;make_unique_for_overwrite&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unique_ptr&lt;/code&gt;を構築するヘルパ関数(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/default_delete.html&#34;&gt;default_delete&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unique_ptr&lt;/code&gt;のデフォルトの削除子(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto_ptr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;古い専有方式スマートポインタ(class template)&lt;/td&gt;
&lt;td&gt;C++11から非推奨&lt;br /&gt; C++17で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;スマートポインタのアトミック操作&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;template&amp;lt;class T&amp;gt; struct atomic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;atomic&lt;/code&gt;クラスの先行宣言 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/atomic.html&#34;&gt;template&amp;lt;class T&amp;gt; struct atomic&amp;lt;shared_ptr&amp;lt;T&amp;gt;&amp;gt;;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;atomic&lt;/code&gt;クラスの&lt;code&gt;shared_ptr&lt;/code&gt;に対する特殊化 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/atomic.html&#34;&gt;template&amp;lt;class T&amp;gt; struct atomic&amp;lt;weak_ptr&amp;lt;T&amp;gt;&amp;gt;;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;atomic&lt;/code&gt;クラスの&lt;code&gt;weak_ptr&lt;/code&gt;に対する特殊化 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_is_lock_free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&lt;/code&gt;に対するアトミック操作がロックフリーに振る舞うことができるかを調べる (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++20で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_load&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&lt;/code&gt;の値をアトミックに読み込む (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++20で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_load_explicit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリオーダーを指定して、&lt;code&gt;shared_ptr&lt;/code&gt;の値をアトミックに読み込む (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++20で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_store&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&lt;/code&gt;値をアトミックに書き込む (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++20で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_store_explicit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリオーダーを指定して、&lt;code&gt;shared_ptr&lt;/code&gt;の値をアトミックに書き込む (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++20で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_exchange&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&lt;/code&gt;の値をアトミックに入れ替える (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++20で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_exchange_explicit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリオーダーを指定して、&lt;code&gt;shared_ptr&lt;/code&gt;の値をアトミックに入れ替える (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++20で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_compare_exchange_weak&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;弱い比較で&lt;code&gt;shared_ptr&lt;/code&gt;の値の入れ替えをアトミックに行う (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++20で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_compare_exchange_strong&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;強い比較で&lt;code&gt;shared_ptr&lt;/code&gt;の値の入れ替えをアトミックに行う (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++20で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_compare_exchange_weak_explicit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;弱い比較でメモリオーダーを指定して、&lt;code&gt;shared_ptr&lt;/code&gt;の値の入れ替えをアトミックに行う (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++20で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atomic_compare_exchange_strong_explicit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;強い比較でメモリオーダーを指定して、&lt;code&gt;shared_ptr&lt;/code&gt;の値の入れ替えをアトミックに行う (function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++20で非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ガベージコレクション支援&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_safety.html&#34;&gt;pointer_safety&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ポインタ安全性について実装/挙動を示す列挙型(enum class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/get_pointer_safety.html&#34;&gt;get_pointer_safety&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;処理系の、ポインタ安全性についての実装/挙動を取得する(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_reachable.html&#34;&gt;declare_reachable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ポインタが到達可能であることを宣言する(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_reachable.html&#34;&gt;undeclare_reachable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ポインタが到達可能であるという宣言を削除する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_no_pointers.html&#34;&gt;declare_no_pointers&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された範囲のポインタが、追跡可能ではないことを宣言する(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_no_pointers.html&#34;&gt;undeclare_no_pointers&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;declare_no_pointers&lt;/code&gt;で宣言された範囲を無効化する(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ポインタのユーティリティ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_traits.html&#34;&gt;pointer_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ポインタの型特性(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/to_address.html&#34;&gt;to_address&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ポインタと見なせるオブジェクトからアドレスを取得する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/addressof.html&#34;&gt;addressof&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変数のアドレスを必ず取得する(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/align.html&#34;&gt;align&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント調整された領域を得る(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/assume_aligned.html&#34;&gt;assume_aligned&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイラへアライメントのヒントを与える(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4190.htm&#34; target=&#34;_blank&#34;&gt;N4190 Removing &lt;code&gt;auto_ptr&lt;/code&gt;, &lt;code&gt;random_shuffle()&lt;/code&gt;, And Old &lt;code&gt;&amp;lt;functional&amp;gt;&lt;/code&gt; Stuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html&#34; target=&#34;_blank&#34;&gt;P0718R2 Revising &lt;code&gt;atomic_shared_ptr&lt;/code&gt; for C++20&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_shared -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocate_shared.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/allocate_shared.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocate_shared.md b/reference/memory/allocate_shared.md
index 661237364..b29d325c7 100644
--- a/reference/memory/allocate_shared.md
+++ b/reference/memory/allocate_shared.md
@@ -129,8 +129,8 @@ int main() {
 
 ## 関連項目
 - [`std::make_shared()`](make_shared.md)
-- [`std::make_shared_default_init()`](make_shared_default_init.md)
-- [`std::allocate_shared_default_init()`](allocate_shared_default_init.md)
+- [`std::make_shared_for_overwrite()`](make_shared_for_overwrite.md)
+- [`std::allocate_shared_for_overwrite()`](allocate_shared_for_overwrite.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_shared_for_overwrite -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocate_shared_for_overwrite.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/allocate_shared_for_overwrite.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocate_shared_for_overwrite.md b/reference/memory/allocate_shared_for_overwrite.md
new file mode 100644
index 000000000..9bce28633
--- /dev/null
+++ b/reference/memory/allocate_shared_for_overwrite.md
@@ -0,0 +1,100 @@
+# allocate_shared_for_overwrite
+* memory[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T, class A&amp;gt;
+  shared_ptr&amp;lt;T&amp;gt; allocate_shared_for_overwrite(const A&amp;amp; a);           // (1)
+
+  template&amp;lt;class T, class A&amp;gt;
+  shared_ptr&amp;lt;T&amp;gt; allocate_shared_for_overwrite(const A&amp;amp; a, size_t N); // (2)
+}
+```
+* shared_ptr[link shared_ptr.md]
+
+## 概要
+デフォルトの初期値を持つ`T`型のオブジェクト、またはその配列への[`shared_ptr`](shared_ptr.md)を構築し、返却する。
+
+
+## 要件
+テンプレートパラメータ`A`は`Cpp17Allocator`の要件を満たす。
+
+
+## 効果
+型`T`のオブジェクトにメモリを割り当てる（`T`が`U[]`の場合は`U[N]`。`N`はそれぞれのオーバーロードで指定された引数から決定される）。メモリは、引数`a`のコピー(参照カウンタと型`T`の本体を連続メモリ領域に配置するためには`T`のサイズより大きい領域をアロケートする必要があるために`allocator_traits&amp;lt;Alloc&amp;gt;::rebind_alloc&amp;lt;value_type&amp;gt;`を用いて再束縛されたもの)を使用して割り当てられる。
+
+オブジェクトは、デフォルト初期化される。
+
+例外がスローされた場合、関数は効果がない。
+
+配列型`U`のオブジェクトが（同じ型の）`u`の初期値を持つように指定されている場合、これは、オブジェクトの各配列要素が初期値として`u`からの対応する要素を持つことを意味すると解釈される。
+
+配列タイプのオブジェクトがデフォルトの初期値を持つように指定されている場合、これはオブジェクトの各配列要素がデフォルトの初期値を持つことを意味すると解釈される。
+
+配列要素は、アドレスの昇順で初期化される。
+
+戻り値によって管理されるオブジェクトの`lifetime`が終了するか、配列要素の初期化が例外をスローすると、初期化された要素は元の構造の逆の順序で破棄される。
+
+- (1) : このオーバーロードが選択されるとき、`T`は、不明な境界の配列ではない。`T`型のオブジェクトへの`shared_ptr`を返す。
+- (2) : このオーバーロードが選択されるとき、`T`は、不明な境界の配列である。型`U[N]`のオブジェクトへの`shared_ptr`を返す。ここで、`U`は[`remove_extent_t&amp;lt;T&amp;gt;`](/reference/type_traits/remove_extent.md)である。
+
+## 戻り値
+新しく構築されたオブジェクトのアドレスを格納および所有する[`shared_ptr`](shared_ptr.md)インスタンス。
+
+
+## 事後条件
+`r.get() != 0 &amp;amp;&amp;amp; r.use_count() == 1`, ここで、`r` は戻り値である。
+
+
+## 例外
+`bad_alloc`、または`allocate`またはオブジェクトの初期化からスローされた例外。
+
+
+## 備考
+同様の効果を持つ関数に、[`make_shared_for_overwrite()`](make_shared_for_overwrite.md)があるが、
+この関数はメモリの確保にユーザー定義のアロケータを使用したい場合などに用いることができる。
+
+
+## 例
+```cpp example
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::allocator&amp;lt;int&amp;gt; alloc;
+  std::shared_ptr&amp;lt;int&amp;gt; sp = std::allocate_shared_for_overwrite&amp;lt;int&amp;gt;(alloc);
+  if (sp) {
+    std::cout &amp;lt;&amp;lt; *sp &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::allocate_shared_for_overwrite[color ff0000]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 10.0.0 現在未対応
+- [GCC](/implementation.md#gcc): 10.0.0 現在未対応
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::make_shared()`](make_shared.md)
+- [`std::make_shared_for_overwrite()`](make_shared_for_overwrite.md)
+- [`std::allocate_shared()`](allocate_shared.md)
+
+
+## 参照
+- [P1020R1 Smart pointer creation with default initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1020r1.html)
+- [P1973R1 Rename &amp;#34;_default_init&amp;#34; Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1973r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocator -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/allocator.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator.md b/reference/memory/allocator.md
index da96c6715..12acf9aef 100644
--- a/reference/memory/allocator.md
+++ b/reference/memory/allocator.md
@@ -55,7 +55,7 @@ C++11から：
 | 名前 | 説明 | 対応バージョン |
 |-------------------|----------------------------------------------|-------|
 | `value_type`      | 要素の型 `T`                                 | |
-| `propagate_on_container_move_assignment` | コンテナのムーブ代入時に、アロケータの状態を伝搬するか。 [`true_type`](/reference/type_traits/true_type.md) | C++14 |
+| `propagate_on_container_move_assignment` | コンテナのムーブ代入時に、アロケータの状態を伝播するか。 [`true_type`](/reference/type_traits/true_type.md) | C++14 |
 | `size_type`       | 要素数を表す符号なし整数型 `size_t`          | C++17から非推奨&amp;lt;br/&amp;gt; C++20で削除 |
 | `difference_type` | ポインタの差を表す符号付き整数型 `ptrdiff_t` | C++17から非推奨&amp;lt;br/&amp;gt; C++20で削除 |
 | `pointer`         | 要素のポインタ型 `T*`                        | C++17から非推奨&amp;lt;br/&amp;gt; C++20で削除 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocator_traits -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator_traits.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/allocator_traits.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator_traits.md b/reference/memory/allocator_traits.md
index 7b3bc0e05..83101640f 100644
--- a/reference/memory/allocator_traits.md
+++ b/reference/memory/allocator_traits.md
@@ -45,9 +45,9 @@ namespace std {
 | `const_void_pointer`    | 読み取り専用の`void`のポインタ型。&amp;lt;br/&amp;gt; `Alloc`がメンバ型`const_void_pointer`を持っていればそれを使用し、そうでなければ[`pointer_traits`](pointer_traits.md)`&amp;lt;pointer&amp;gt;::rebind&amp;lt;const void&amp;gt;`を使用する。 | C++11 |
 | `difference_type` | ポインタの差を表す符号付き整数型。&amp;lt;br/&amp;gt; `Alloc`がメンバ型`difference_type`を持っていればそれを使用し、そうでなければ[`pointer_traits`](pointer_traits.md)`&amp;lt;pointer&amp;gt;::difference_type`を使用する。 | C++11 |
 | `size_type`       | 要素数を表す符号なし整数型。&amp;lt;br/&amp;gt; `Alloc`がメンバ型`size_type`を持っていればそれを使用し、そうでなければ[`make_unsigned`](/reference/type_traits/make_unsigned.md)`&amp;lt;difference_type&amp;gt;::type`を使用する。 | C++11 |
-| `propagate_on_container_copy_assignment` | コンテナのコピー代入時に、アロケータオブジェクトをコピー(伝搬)するか否か。&amp;lt;br/&amp;gt;`Alloc`がメンバ型`propagate_on_container_copy_assignment`を持っていればそれを使用し、そうでなければ[`false_type`](/reference/type_traits/false_type.md)を使用する。 | C++11 |
-| `propagate_on_container_move_assignment` | コンテナのムーブ代入時に、アロケータオブジェクトをコピー(伝搬)するか否か。&amp;lt;br/&amp;gt;`Alloc`がメンバ型`propagate_on_container_move_assignment`を持っていればそれを使用し、そうでなければ[`false_type`](/reference/type_traits/false_type.md)を使用する。 | C++11 |
-| `propagate_on_container_swap` | コンテナの交換時に、アロケータオブジェクトをコピー(伝搬)するか否か。&amp;lt;br/&amp;gt;`Alloc`がメンバ型`propagate_on_container_swap`を持っていればそれを使用し、そうでなければ[`false_type`](/reference/type_traits/false_type.md)を使用する。 | C++11 |
+| `propagate_on_container_copy_assignment` | コンテナのコピー代入時に、アロケータオブジェクトをコピー(伝播)するか否か。&amp;lt;br/&amp;gt;`Alloc`がメンバ型`propagate_on_container_copy_assignment`を持っていればそれを使用し、そうでなければ[`false_type`](/reference/type_traits/false_type.md)を使用する。 | C++11 |
+| `propagate_on_container_move_assignment` | コンテナのムーブ代入時に、アロケータオブジェクトをコピー(伝播)するか否か。&amp;lt;br/&amp;gt;`Alloc`がメンバ型`propagate_on_container_move_assignment`を持っていればそれを使用し、そうでなければ[`false_type`](/reference/type_traits/false_type.md)を使用する。 | C++11 |
+| `propagate_on_container_swap` | コンテナの交換時に、アロケータオブジェクトをコピー(伝播)するか否か。&amp;lt;br/&amp;gt;`Alloc`がメンバ型`propagate_on_container_swap`を持っていればそれを使用し、そうでなければ[`false_type`](/reference/type_traits/false_type.md)を使用する。 | C++11 |
 | `is_always_equal` | `Alloc::is_always_equal`が存在する場合は`Alloc::is_always_equal`。それ以外の場合は`is_empty&amp;lt;Alloc&amp;gt;::type`。 | C++17 |
 | `rebind_alloc&amp;lt;U&amp;gt;` | 型`U`を確保するようにアロケータ型を再束縛する。&amp;lt;br/&amp;gt; `Alloc::rebind&amp;lt;U&amp;gt;::other`が有効ならそれを使用し、そうでなければ`Alloc&amp;lt;U, Args`&amp;gt;を使用する。`Alloc`がクラステンプレートでない場合、`rebind_alloc`の使用は不適格となる。 | C++11 |
 | `rebind_traits&amp;lt;U&amp;gt;` | 再束縛した型`U`に対する`allocator_traits`。`allocator_traits&amp;lt;rebind_alloc&amp;lt;U&amp;gt;&amp;gt;` | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>select_on_container_copy_construction -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator_traits/select_on_container_copy_construction.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/allocator_traits/select_on_container_copy_construction.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator_traits/select_on_container_copy_construction.md b/reference/memory/allocator_traits/select_on_container_copy_construction.md
index 59a93ba59..9ab9e36e7 100644
--- a/reference/memory/allocator_traits/select_on_container_copy_construction.md
+++ b/reference/memory/allocator_traits/select_on_container_copy_construction.md
@@ -67,7 +67,7 @@ public:
   MyVector(const MyVector&amp;amp; other)
     : MyVector(
         other,
-        std::allocator_traits&amp;lt;Alloc&amp;gt;::select_on_container_copy_construction(alloc_)) {}
+        std::allocator_traits&amp;lt;Alloc&amp;gt;::select_on_container_copy_construction(other.alloc_)) {}
 
   ~MyVector()
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enable_shared_from_this -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/enable_shared_from_this.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/enable_shared_from_this.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/enable_shared_from_this.md b/reference/memory/enable_shared_from_this.md
index 587119a1f..bec49a50c 100644
--- a/reference/memory/enable_shared_from_this.md
+++ b/reference/memory/enable_shared_from_this.md
@@ -12,7 +12,7 @@ namespace std {
 ```
 
 ## 概要
-`enable_shared_from_this`は、[`shared_ptr`](/reference/memory/shared_ptr.md)で関しているオブジェクトの`this`ポインタを、[`shared_ptr`](/reference/memory/shared_ptr.md)として扱うことを可能にするためのクラスである。
+`enable_shared_from_this`は、[`shared_ptr`](/reference/memory/shared_ptr.md)で管理しているオブジェクトの`this`ポインタを、[`shared_ptr`](/reference/memory/shared_ptr.md)として扱うことを可能にするためのクラスである。
 
 `this`ポインタを単純に`shared_ptr&amp;lt;T&amp;gt;(this)`としてしまうと、参照カウントが増えず、`delete`が2重に呼ばれてしまいバグを引き起こすことになるため、そうならないようにこのクラスを使用して`this`を扱う。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shared_from_this -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/enable_shared_from_this/shared_from_this.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/enable_shared_from_this/shared_from_this.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/enable_shared_from_this/shared_from_this.md b/reference/memory/enable_shared_from_this/shared_from_this.md
index a1a1fd58f..ef7121902 100644
--- a/reference/memory/enable_shared_from_this/shared_from_this.md
+++ b/reference/memory/enable_shared_from_this/shared_from_this.md
@@ -15,29 +15,30 @@ shared_ptr&amp;lt;const T&amp;gt; shared_from_this() const;
 `this`ポインタを`shared_ptr`に変換する。
 
 
-## 要件（C++11）
+## 要件（C++14まで）
 `*this`のインスタンスが[`shared_ptr`](/reference/memory/shared_ptr.md)オブジェクトとして共有されていること。
 
 
 ## 戻り値
 
-### C++11
+### C++14まで
 `this`ポインタを、`enable_shared_from_this`の派生クラス型`T`の[`shared_ptr`](/reference/memory/shared_ptr.md)オブジェクトとして構築して返す。  
 要件を満たしていない場合は未定義動作となる。
 
-### C++17
+### C++17から
 保持する`this`を指すポインタを`weak_this`（`weak_ptr&amp;lt;T&amp;gt;`）とすると、以下と等価。
 
-`return shared_ptr&amp;lt;T&amp;gt;(weak_this);`
+```cpp
+return shared_ptr&amp;lt;T&amp;gt;(weak_this);
+```
 
-## 例外（C++17）
+## 例外（C++17から）
 この関数を呼び出した時点で、`*this`のインスタンスが[`shared_ptr`](/reference/memory/shared_ptr.md)オブジェクトとして共有されていない場合、例外（おそらく[`bad_weak_ptr`](/reference/memory/bad_weak_ptr.md)）を投げる。
 
 この動作が望ましくない場合は、代わりに[`weak_from_this()`](/reference/memory/enable_shared_from_this/weak_from_this.md)`.lock()`を用いることができる。この場合、例外を投げる代わりに空の`shared_ptr`オブジェクトを返す。
 
 ## 備考
-`enable_shared_from_this&amp;lt;T&amp;gt;`の派生クラス型`T`のコンストラクタ内ではまだ`enable_shared_from_this`の保持する`this`を指すポインタが設定されていないので、本関数によって`this`を指す`shared_ptr`を取得することはできない。
-
+`enable_shared_from_this&amp;lt;T&amp;gt;`の派生クラス型`T`のコンストラクタ内ではまだ`enable_shared_from_this`の保持する`this`を指すポインタが設定されていないので、（`T`のコンストラクタ内では）本関数によって`this`を指す`shared_ptr`を取得することはできない。  
 その場合、C++14までならば未定義動作となり、C++17以降は例外を送出する。
 
 ## 例
@@ -78,4 +79,4 @@ int main()
 
 ## 参照
 - [P0033R0 Re-enabling `shared_from_this`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0033r0.html)
-- [P0033R1 Re-enabling `shared_from_this` (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0033r1.html)
\ No newline at end of file
+- [P0033R1 Re-enabling `shared_from_this` (revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0033r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_shared -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_shared.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/make_shared.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_shared.md b/reference/memory/make_shared.md
index ab2b75b4e..db2d2115e 100644
--- a/reference/memory/make_shared.md
+++ b/reference/memory/make_shared.md
@@ -112,8 +112,8 @@ int main() {
 
 ## 関連項目
 - [`std::allocate_shared()`](allocate_shared.md)
-- [`std::make_shared_default_init()`](make_shared_default_init.md)
-- [`std::allocate_shared_default_init()`](allocate_shared_default_init.md)
+- [`std::make_shared_for_overwrite()`](make_shared_for_overwrite.md)
+- [`std::allocate_shared_for_overwrite()`](allocate_shared_for_overwrite.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_shared_for_overwrite -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_shared_for_overwrite.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/make_shared_for_overwrite.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_shared_for_overwrite.md b/reference/memory/make_shared_for_overwrite.md
new file mode 100644
index 000000000..b69fca099
--- /dev/null
+++ b/reference/memory/make_shared_for_overwrite.md
@@ -0,0 +1,98 @@
+# make_shared_for_overwrite
+* memory[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt;
+  shared_ptr&amp;lt;T&amp;gt; make_shared_for_overwrite();         // (1)
+
+  template&amp;lt;class T&amp;gt;
+  shared_ptr&amp;lt;T&amp;gt; make_shared_for_overwrite(size_t N); // (2)
+}
+```
+* shared_ptr[link shared_ptr.md]
+
+## 概要
+デフォルトの初期値を持つ`T`型のオブジェクト、またはその配列への[`shared_ptr`](shared_ptr.md)を構築し、返却する。
+
+
+## 効果
+型`T`のオブジェクトにメモリを割り当てる（`T`が`U[]`の場合は`U[N]`。`N`はそれぞれのオーバーロードで指定された引数から決定される）。
+
+オブジェクトは、デフォルト初期化される。
+
+例外がスローされた場合、関数は効果がない。
+
+配列型`U`のオブジェクトが（同じ型の）`u`の初期値を持つように指定されている場合、これは、オブジェクトの各配列要素が初期値として`u`からの対応する要素を持つことを意味すると解釈される。
+
+配列タイプのオブジェクトがデフォルトの初期値を持つように指定されている場合、これはオブジェクトの各配列要素がデフォルトの初期値を持つことを意味すると解釈される。
+
+配列要素は、アドレスの昇順で初期化される。
+
+非配列型`U`の（サブ）オブジェクトがこの関数によって初期化されるときは、式`::new(pv) U`によって初期化される。ここで、`pv`は型 `void *`を持ち、型`U`のオブジェクトを保持するための適切なストレージを指す。
+
+戻り値によって管理されるオブジェクトの`lifetime`が終了するか、配列要素の初期化が例外をスローすると、初期化された要素は元の構造の逆の順序で破棄される。
+
+- (1) : このオーバーロードが選択されるとき、`T`は、不明な境界の配列ではない。`T`型のオブジェクトへの`shared_ptr`を返す。
+- (2) : このオーバーロードが選択されるとき、`T`は、不明な境界の配列である。型`U[N]`のオブジェクトへの`shared_ptr`を返す。ここで、`U`は[`remove_extent_t&amp;lt;T&amp;gt;`](/reference/type_traits/remove_extent.md)である。
+
+## 戻り値
+新しく構築されたオブジェクトのアドレスを格納および所有する[`shared_ptr`](shared_ptr.md)インスタンス。
+
+
+## 事後条件
+`r.get() != 0 &amp;amp;&amp;amp; r.use_count() == 1`, ここで、`r` は戻り値である。
+
+
+## 例外
+`bad_alloc`、または`allocate`またはオブジェクトの初期化からスローされた例外。
+
+
+## 備考
+メモリの確保にユーザー定義のアロケータを使用したい場合には、 [`allocate_shared_for_overwrite()`](allocate_shared_for_overwrite.md) を使用する。
+
+
+## 例
+```cpp example
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::shared_ptr&amp;lt;int&amp;gt; sp = std::make_shared_for_overwrite&amp;lt;int&amp;gt;();
+  if (sp) {
+    std::cout &amp;lt;&amp;lt; *sp &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::make_shared_for_overwrite[color ff0000]
+
+
+### 出力
+```
+0
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 10.0.0 現在未対応
+- [GCC](/implementation.md#gcc): 10.0.0 現在未対応
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+
+## 関連項目
+- [`std::make_shared()`](make_shared.md)
+- [`std::allocate_shared()`](allocate_shared.md)
+- [`std::allocate_shared_for_overwrite()`](allocate_shared_for_overwrite.md)
+
+
+## 参照
+- [P1020R1 Smart pointer creation with default initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1020r1.html)
+- [P1973R1 Rename &amp;#34;_default_init&amp;#34; Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1973r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_unique_for_overwrite -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_unique_for_overwrite.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/make_unique_for_overwrite.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_unique_for_overwrite.md b/reference/memory/make_unique_for_overwrite.md
new file mode 100644
index 000000000..b14120e7c
--- /dev/null
+++ b/reference/memory/make_unique_for_overwrite.md
@@ -0,0 +1,67 @@
+# make_unique_for_overwrite
+* memory[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T&amp;gt; unique_ptr&amp;lt;T&amp;gt; make_unique_for_overwrite();                                // (1)
+
+  template&amp;lt;class T&amp;gt; unique_ptr&amp;lt;T&amp;gt; make_unique_for_overwrite(size_t n);                        // (2)
+
+  template&amp;lt;class T, class... Args&amp;gt; unspecified make_unique_for_overwrite(Args&amp;amp;&amp;amp;...) = delete; // (3)
+}
+```
+* unique_ptr[link unique_ptr.md]
+* unspecified[italic]
+
+## 概要
+`unique_ptr`オブジェクトを構築する。その際、型`T`のオブジェクトはデフォルト構築される。
+
+- (1) : `T`が配列型でないときに選択される。
+- (2) : `T`が不明な境界の配列のときに選択される。
+- (3) : 許可されていないオーバーロードとして宣言される。`T`は既知の境界の配列型である。
+
+
+## 戻り値
+- (1) : `unique_ptr&amp;lt;T&amp;gt;(new T())`
+- (2) : `unique_ptr&amp;lt;T&amp;gt;(new` [`remove_extent_t`](/reference/type_traits/remove_extent.md)`&amp;lt;T&amp;gt;[n]())`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+int main()
+{
+  std::unique_ptr&amp;lt;std::pair&amp;lt;int, int&amp;gt;&amp;gt; p1 = std::make_unique_for_overwrite&amp;lt;std::pair&amp;lt;int, int&amp;gt;&amp;gt;();
+  std::cout &amp;lt;&amp;lt; p1-&amp;gt;first &amp;lt;&amp;lt; &amp;#39;:&amp;#39; &amp;lt;&amp;lt; p1-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::make_unique_for_overwrite[color ff0000]
+
+### 出力
+```
+0:0
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 10.0.0 現在未対応
+- [GCC](/implementation.md#gcc): 10.0.0 現在未対応
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::make_unique()`](make_unique.md)
+
+
+## 参照
+- [P1020R1 Smart pointer creation with default initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1020r1.html)
+- [P1973R1 Rename &amp;#34;_default_init&amp;#34; Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1973r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unique -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/shared_ptr/unique.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/shared_ptr/unique.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/shared_ptr/unique.md b/reference/memory/shared_ptr/unique.md
index 682022606..3cb4ef22c 100644
--- a/reference/memory/shared_ptr/unique.md
+++ b/reference/memory/shared_ptr/unique.md
@@ -14,7 +14,7 @@ bool unique() const noexcept;
 この関数は、C++17から非推奨となり、C++20で削除された。代わりに[`use_count()`](use_count.md)関数を使用すること。
 
 ## 概要
-有効なリソースを所有しているかを判定する。
+同じ所有権を共有する他のユーザーが存在しないかを判定する。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uses_allocator -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory/uses_allocator.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory/uses_allocator.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uses_allocator.md b/reference/memory/uses_allocator.md
index 1733788f9..b312c6123 100644
--- a/reference/memory/uses_allocator.md
+++ b/reference/memory/uses_allocator.md
@@ -51,7 +51,7 @@ namespace std {
 - 本型トレイツは、主にスコープアロケータモデルを採用するアロケータで使用されることを意図している。  
 	標準ライブラリでは、[`scoped_allocator_adaptor`](/reference/scoped_allocator/scoped_allocator_adaptor.md)、[`polymorphic_allocator`](../memory_resource/polymorphic_allocator.md) クラステンプレートで使用されている。
 - 標準ライブラリで提供されるいくつかの型は本型トレイツの特殊化を提供している。（[`tuple`](../tuple/tuple.md)、[`promise`](../future/promise.md)、各種コンテナアダプタ等）  
-- [`pair`](../utility/pair.md) は [`tuple`](../tuple/tuple.md) と同列の機能と考えられるが、本型トレイツの特殊化を提供していない。このため、標準ライブラリで提供されるスコープアロケータモデルを採用したアロケータでは C++17 までは独自に [`pair`](../utility/pair.md) の各要素に対して uses-allocator 構築を適用している（ただし、ネストした [`pair`](/reference/utility/pair.md) の要素に対してはアロケータは伝搬されない）。  
+- [`pair`](../utility/pair.md) は [`tuple`](../tuple/tuple.md) と同列の機能と考えられるが、本型トレイツの特殊化を提供していない。このため、標準ライブラリで提供されるスコープアロケータモデルを採用したアロケータでは C++17 までは独自に [`pair`](../utility/pair.md) の各要素に対して uses-allocator 構築を適用している（ただし、ネストした [`pair`](/reference/utility/pair.md) の要素に対してはアロケータは伝播されない）。  
 	スコープアロケータモデルを採用したアロケータを自作する場合には、同様の対応を行う方が良いだろう。  
 	なお、C++20 で [`pair`](../utility/pair.md) に対する特殊対応を含めた uses-allocator 構築サポートのためのユーティリティ関数が追加されたため、以前に比べて容易に uses-allocator 構築への対応が可能となった。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_bytes -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_bytes.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory_resource/polymorphic_allocator/allocate_bytes.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/allocate_bytes.md b/reference/memory_resource/polymorphic_allocator/allocate_bytes.md
index 7fb3675c8..bf4efb658 100644
--- a/reference/memory_resource/polymorphic_allocator/allocate_bytes.md
+++ b/reference/memory_resource/polymorphic_allocator/allocate_bytes.md
@@ -6,7 +6,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-void* allocate_bytes(size_t nbytes, size_t alignment = alignof(max_align_t));
+[[nodiscard]] void* allocate_bytes(size_t nbytes, size_t alignment = alignof(max_align_t));
 ```
 * max_align_t[link /reference/cstddef/max_align_t.md]
 
@@ -113,3 +113,4 @@ address : 0x1c38150
 
 ## 参照
 - [P0339R6 polymorphic_allocator&amp;lt;&amp;gt; as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf) 
+- [LWG Issue 3304. Allocate functions of `std::polymorphic_allocator` should require `[[nodiscard]]`](https://wg21.cmeerw.net/lwg/issue3304)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_object -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_object.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory_resource/polymorphic_allocator/allocate_object.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/allocate_object.md b/reference/memory_resource/polymorphic_allocator/allocate_object.md
index 0008b1f7e..5963ca989 100644
--- a/reference/memory_resource/polymorphic_allocator/allocate_object.md
+++ b/reference/memory_resource/polymorphic_allocator/allocate_object.md
@@ -7,7 +7,7 @@
 
 ```cpp
 template &amp;lt;class T&amp;gt;
-T* allocate_object(size_t n = 1);
+[[nodiscard]] T* allocate_object(size_t n = 1);
 ```
 
 ## 概要
@@ -105,3 +105,4 @@ int main() {
 
 ## 参照
 - [P0339R6 polymorphic_allocator&amp;lt;&amp;gt; as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf) 
+- [LWG Issue 3304. Allocate functions of `std::polymorphic_allocator` should require `[[nodiscard]]`](https://wg21.cmeerw.net/lwg/issue3304)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>construct -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/construct.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory_resource/polymorphic_allocator/construct.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/construct.md b/reference/memory_resource/polymorphic_allocator/construct.md
index bd2dacf0e..7610c3225 100644
--- a/reference/memory_resource/polymorphic_allocator/construct.md
+++ b/reference/memory_resource/polymorphic_allocator/construct.md
@@ -213,7 +213,7 @@ int main()
 
     std::cout &amp;lt;&amp;lt; p-&amp;gt;first &amp;lt;&amp;lt; std::endl;
     std::cout &amp;lt;&amp;lt; p-&amp;gt;second &amp;lt;&amp;lt; std::endl;
-    //アロケータが伝搬している
+    //アロケータが伝播している
     std::cout &amp;lt;&amp;lt; (p-&amp;gt;second.get_allocator() == alloc) &amp;lt;&amp;lt; std::endl;
   }
 
@@ -227,7 +227,7 @@ int main()
 
     std::cout &amp;lt;&amp;lt; p-&amp;gt;first &amp;lt;&amp;lt; std::endl;
     std::cout &amp;lt;&amp;lt; p-&amp;gt;second &amp;lt;&amp;lt; std::endl;
-    //アロケータが伝搬している
+    //アロケータが伝播している
     std::cout &amp;lt;&amp;lt; (p-&amp;gt;second.get_allocator() == alloc) &amp;lt;&amp;lt; std::endl;
   }
 
@@ -241,7 +241,7 @@ int main()
 
     std::cout &amp;lt;&amp;lt; p-&amp;gt;first &amp;lt;&amp;lt; std::endl;
     std::cout &amp;lt;&amp;lt; p-&amp;gt;second &amp;lt;&amp;lt; std::endl;
-    //アロケータが伝搬している
+    //アロケータが伝播している
     std::cout &amp;lt;&amp;lt; (p-&amp;gt;second.get_allocator() == alloc) &amp;lt;&amp;lt; std::endl;
   }
 
@@ -256,7 +256,7 @@ int main()
 
     std::cout &amp;lt;&amp;lt; p-&amp;gt;first &amp;lt;&amp;lt; std::endl;
     std::cout &amp;lt;&amp;lt; p-&amp;gt;second &amp;lt;&amp;lt; std::endl;
-    //アロケータが伝搬している
+    //アロケータが伝播している
     std::cout &amp;lt;&amp;lt; (p-&amp;gt;second.get_allocator() == alloc) &amp;lt;&amp;lt; std::endl;
   }
 
@@ -270,7 +270,7 @@ int main()
 
     std::cout &amp;lt;&amp;lt; p-&amp;gt;first &amp;lt;&amp;lt; std::endl;
     std::cout &amp;lt;&amp;lt; p-&amp;gt;second &amp;lt;&amp;lt; std::endl;
-    //アロケータが伝搬している
+    //アロケータが伝播している
     std::cout &amp;lt;&amp;lt; (p-&amp;gt;second.get_allocator() == alloc) &amp;lt;&amp;lt; std::endl;
   }
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>new_object -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/new_object.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/memory_resource/polymorphic_allocator/new_object.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/new_object.md b/reference/memory_resource/polymorphic_allocator/new_object.md
index df7bf560c..be6cc0df5 100644
--- a/reference/memory_resource/polymorphic_allocator/new_object.md
+++ b/reference/memory_resource/polymorphic_allocator/new_object.md
@@ -7,7 +7,7 @@
 
 ```cpp
 template &amp;lt;class T, class... CtorArgs&amp;gt;
-T* new_object(CtorArgs&amp;amp;&amp;amp;... ctor_args);
+[[nodiscard]] T* new_object(CtorArgs&amp;amp;&amp;amp;... ctor_args);
 ```
 * pair[link /reference/utility/pair.md]
 * tuple[link /reference/tuple/tuple.md]
@@ -100,3 +100,4 @@ address : 0x1a2b960
 
 ## 参照
 - [P0339R6 polymorphic_allocator&amp;lt;&amp;gt; as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf) 
+- [LWG Issue 3304. Allocate functions of `std::polymorphic_allocator` should require `[[nodiscard]]`](https://wg21.cmeerw.net/lwg/issue3304)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lock_guard -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mutex/lock_guard.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/mutex/lock_guard.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mutex/lock_guard.md b/reference/mutex/lock_guard.md
index 5a4c043db..d53611b78 100644
--- a/reference/mutex/lock_guard.md
+++ b/reference/mutex/lock_guard.md
@@ -14,7 +14,7 @@ namespace std {
 ## 概要
 `lock_guard`は、ミューテックスの`lock()`/`unlock()`処理をコンストラクタとデストラクタで確実に実行するためのクラスである。このクラスは通常、メンバ変数もしくはグローバル変数としてもつミューテックスオブジェクトに対し、ブロックスコープの先頭で`lock()`を呼び出し、同ブロックスコープを抜ける際に`unlock()`を確実に呼び出すために使用される。この手法は、[Scoped Locking Pattern](http://www.cs.wustl.edu/~schmidt/PDF/ScopedLocking.pdf)として知られている。
 
-テンプレートパラメータ`Mutex`は、`lock()`/`unlock()`メンバ関数を持つあらゆるミューテックスクラスを扱うためのものである。ミューテックス型をパラメータ化するScoped Locking手法は、[Strategized Locking Pattern](http://wiki.hsr.ch/PnProg/files/StrategizedLocking.pdf)として知られている。
+テンプレートパラメータ`Mutex`は、`lock()`/`unlock()`メンバ関数を持つあらゆるミューテックスクラスを扱うためのものである。ミューテックス型をパラメータ化するScoped Locking手法は、[Strategized Locking Pattern](https://wiki.hsr.ch/PnProg/files/StrategizedLocking.pdf)として知られている。
 
 `lock_guard`は、非常にシンプルな機能「コンストラクタでロックを取得/ロック済みミューテックスを受け取る」「デストラクタでロックを手放す」しか提供しないが、使用メモリや実行時処理に関するオーバーヘッドは小さい（ほぼゼロ）。一方で、より高度なミューテックスのロック操作が必要な場合は[`unique_lock`](/reference/mutex/unique_lock.md)を利用する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_lock_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mutex/recursive_timed_mutex/try_lock_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/mutex/recursive_timed_mutex/try_lock_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mutex/recursive_timed_mutex/try_lock_until.md b/reference/mutex/recursive_timed_mutex/try_lock_until.md
index d681bd14b..16f292eb8 100644
--- a/reference/mutex/recursive_timed_mutex/try_lock_until.md
+++ b/reference/mutex/recursive_timed_mutex/try_lock_until.md
@@ -14,6 +14,11 @@ bool try_lock_until(const chrono::time_point&amp;lt;Clock, Duration&amp;gt;&amp;amp; abs_time);
 ## 概要
 タイムアウトする絶対時間を指定してロックの取得を試みる
 
+
+## テンプレートパラメータ制約
+- [`chrono::is_clock_v`](/reference/chrono/is_clock.md)`&amp;lt;Clock&amp;gt;`が`true`であること (C++20)
+
+
 ## 効果
 `abs_time`パラメータで指定された絶対時間に到達するまで、ミューテックスの所有権取得を試みる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_lock_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mutex/timed_mutex/try_lock_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/mutex/timed_mutex/try_lock_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mutex/timed_mutex/try_lock_until.md b/reference/mutex/timed_mutex/try_lock_until.md
index fc94a7b04..bab9805d8 100644
--- a/reference/mutex/timed_mutex/try_lock_until.md
+++ b/reference/mutex/timed_mutex/try_lock_until.md
@@ -19,6 +19,10 @@ bool try_lock_until(const chrono::time_point&amp;lt;Clock, Duration&amp;gt;&amp;amp; abs_time);
 この関数を呼び出したスレッドが、ミューテックスの所有権を保持していないこと。
 
 
+## テンプレートパラメータ制約
+- [`chrono::is_clock_v`](/reference/chrono/is_clock.md)`&amp;lt;Clock&amp;gt;`が`true`であること (C++20)
+
+
 ## 効果
 `abs_time`パラメータで指定された絶対時間に到達するまで、ミューテックスの所有権取得を試みる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unique_lock -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mutex/unique_lock.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/mutex/unique_lock.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mutex/unique_lock.md b/reference/mutex/unique_lock.md
index f7353b05a..73b746d47 100644
--- a/reference/mutex/unique_lock.md
+++ b/reference/mutex/unique_lock.md
@@ -16,7 +16,7 @@ namespace std {
 
 このクラスは通常、メンバ変数もしくはグローバル変数としてもつミューテックスオブジェクトに対し、関数内の先頭で`lock()`、関数を抜ける際に`unlock()`を確実に呼び出すために使用される。この手法は、[Scoped Locking Pattern](http://www.cs.wustl.edu/~schmidt/PDF/ScopedLocking.pdf)として知られている。
 
-テンプレートパラメータ`Mutex`は、`lock()`／`unlock()`メンバ関数を持つあらゆるミューテックスクラスを扱うためのものである。ミューテックス型をパラメータ化するScoped Locking手法は、[Strategized Locking Pattern](http://wiki.hsr.ch/PnProg/files/StrategizedLocking.pdf)として知られている。
+テンプレートパラメータ`Mutex`は、`lock()`／`unlock()`メンバ関数を持つあらゆるミューテックスクラスを扱うためのものである。ミューテックス型をパラメータ化するScoped Locking手法は、[Strategized Locking Pattern](https://wiki.hsr.ch/PnProg/files/StrategizedLocking.pdf)として知られている。
 
 シンプルな機能しか提供しない[`lock_guard`](lock_guard.md)クラスとの違いとして、以下の拡張機能を持つ：
 
@@ -26,7 +26,7 @@ namespace std {
 - 任意のタイミングで所有ミューテックスのロック操作を呼び出せる
 
 
-また条件変数std::[`condition_variable`](/reference/condition_variable/condition_variable.md)オブジェクトと組み合わせて利用できるのは、`std::unique_lock&amp;lt;std::`[`mutex`](mutex.md)`&amp;gt;`型のオブジェクトに限定されている。
+また条件変数`std::`[`condition_variable`](/reference/condition_variable/condition_variable.md)オブジェクトと組み合わせて利用できるのは、`std::unique_lock&amp;lt;std::`[`mutex`](mutex.md)`&amp;gt;`型のオブジェクトに限定されている。
 
 ## メンバ関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_lock_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/mutex/unique_lock/try_lock_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/mutex/unique_lock/try_lock_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mutex/unique_lock/try_lock_until.md b/reference/mutex/unique_lock/try_lock_until.md
index 779b11d2e..82d319734 100644
--- a/reference/mutex/unique_lock/try_lock_until.md
+++ b/reference/mutex/unique_lock/try_lock_until.md
@@ -15,8 +15,9 @@ bool try_lock_until(const chrono::time_point&amp;lt;Clock, Duration&amp;gt;&amp;amp; abs_time);
 タイムアウトする絶対時間を指定してロックの取得を試みる
 
 
-## 要件
-`Mutex`型が、`try_lock_until()`メンバ関数をサポートするミューテックス型であること
+## テンプレートパラメータ制約
+- `Mutex`型が、`try_lock_until()`メンバ関数をサポートするミューテックス型であること
+- [`chrono::is_clock_v`](/reference/chrono/is_clock.md)`&amp;lt;Clock&amp;gt;`が`true`であること (C++20)
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>e -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/e.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/e.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/e.md b/reference/numbers/e.md
index 5426dacda..e622ce856 100644
--- a/reference/numbers/e.md
+++ b/reference/numbers/e.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T e_v = unspecified;    // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>egamma -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/egamma.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/egamma.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/egamma.md b/reference/numbers/egamma.md
index 454675759..637ee50ee 100644
--- a/reference/numbers/egamma.md
+++ b/reference/numbers/egamma.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T egamma_v = unspecified;         // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inv_pi -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/inv_pi.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/inv_pi.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/inv_pi.md b/reference/numbers/inv_pi.md
index 82d498033..deca18da9 100644
--- a/reference/numbers/inv_pi.md
+++ b/reference/numbers/inv_pi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T inv_pi_v = unspecified;         // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inv_sqrt3 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/inv_sqrt3.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/inv_sqrt3.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/inv_sqrt3.md b/reference/numbers/inv_sqrt3.md
index 43f21b4c3..a480ed450 100644
--- a/reference/numbers/inv_sqrt3.md
+++ b/reference/numbers/inv_sqrt3.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T inv_sqrt3_v = unspecified;            // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inv_sqrtpi -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/inv_sqrtpi.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/inv_sqrtpi.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/inv_sqrtpi.md b/reference/numbers/inv_sqrtpi.md
index 2e79d6980..608522cec 100644
--- a/reference/numbers/inv_sqrtpi.md
+++ b/reference/numbers/inv_sqrtpi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T inv_sqrtpi_v = unspecified;             // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ln10 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/ln10.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/ln10.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/ln10.md b/reference/numbers/ln10.md
index 1595c0d21..eedebb9ec 100644
--- a/reference/numbers/ln10.md
+++ b/reference/numbers/ln10.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T ln10_v = unspecified;      // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ln2 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/ln2.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/ln2.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/ln2.md b/reference/numbers/ln2.md
index a55e513c7..2f7d3aedd 100644
--- a/reference/numbers/ln2.md
+++ b/reference/numbers/ln2.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T ln2_v = unspecified;      // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log10e -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/log10e.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/log10e.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/log10e.md b/reference/numbers/log10e.md
index 8fdec6eaf..52b94f1d4 100644
--- a/reference/numbers/log10e.md
+++ b/reference/numbers/log10e.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T log10e_v = unspecified;         // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log2e -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/log2e.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/log2e.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/log2e.md b/reference/numbers/log2e.md
index f44a53b3b..2de00153c 100644
--- a/reference/numbers/log2e.md
+++ b/reference/numbers/log2e.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T log2e_v = unspecified;        // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>phi -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/phi.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/phi.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/phi.md b/reference/numbers/phi.md
index 1ccd1f0d6..b9c34a54d 100644
--- a/reference/numbers/phi.md
+++ b/reference/numbers/phi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T phi_v = unspecified;      // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pi -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/pi.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/pi.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/pi.md b/reference/numbers/pi.md
index b7645061f..7d8bab157 100644
--- a/reference/numbers/pi.md
+++ b/reference/numbers/pi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T pi_v = unspecified;     // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt2 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/sqrt2.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/sqrt2.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/sqrt2.md b/reference/numbers/sqrt2.md
index 7b9ffec5a..cdd55ca99 100644
--- a/reference/numbers/sqrt2.md
+++ b/reference/numbers/sqrt2.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T sqrt2_v = unspecified;        // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt3 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numbers/sqrt3.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numbers/sqrt3.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/sqrt3.md b/reference/numbers/sqrt3.md
index b21512793..71de3ecfb 100644
--- a/reference/numbers/sqrt3.md
+++ b/reference/numbers/sqrt3.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T sqrt3_v = unspecified;        // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gcd -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numeric/gcd.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numeric/gcd.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/gcd.md b/reference/numeric/gcd.md
index 3c5a57b70..5c979c673 100644
--- a/reference/numeric/gcd.md
+++ b/reference/numeric/gcd.md
@@ -25,7 +25,7 @@ namespace std {
 
 
 ## 戻り値
-* `m` および `n` が 0 の場合 0 を返す
+* `m` と `n` が共に 0 の場合 0 を返す
 * それ以外の場合引数 `|m|` と `|n|` の最大公約数を返す
 
 
@@ -34,38 +34,95 @@ namespace std {
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;limits&amp;gt;
+#include &amp;lt;cassert&amp;gt;
 #include &amp;lt;numeric&amp;gt;
-#include &amp;lt;type_traits&amp;gt;
 
 int main() {
+  assert(std::gcd(12, 42) == 6);
+  assert(std::gcd(42, 12) == 6);
+
+  // コンパイル時に最大公約数を求めることもできる
   static_assert(std::gcd(0, 0) == 0);
   static_assert(std::gcd(3u, -7l) == 1);
+}
+```
+* std::gcd[color ff0000]
 
-  // 符号付き整数の場合戻り値が負になることがある
-  using T = int32_t;
+#### 出力
+```
+```
+
+### 負の最大公約数
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;numeric&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
+#include &amp;lt;limits&amp;gt;
+
+int main() {
+  // 符号付き整数の場合、戻り値が負になることがある
+  using T = std::int32_t;
   constexpr auto m = std::numeric_limits&amp;lt;T&amp;gt;::min();
   const auto gs = std::gcd&amp;lt;T, T&amp;gt;(m, m);  // -m が int32_t で表せないと m &amp;lt; 0 になる
   std::cout &amp;lt;&amp;lt; &amp;#34;gcd&amp;lt;int32_t, int32_t&amp;gt;(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;)   &amp;#34; &amp;lt;&amp;lt; gs &amp;lt;&amp;lt; std::endl;
 
-  // 符号なし整数にすれば戻り値は正
-  using U = std::make_unsigned&amp;lt;T&amp;gt;::type;  // uint32_t
+  // 符号なし整数にすれば戻り値は正になる
+  using U = std::uint32_t;
   const auto gu = std::gcd&amp;lt;U, U&amp;gt;(m, m);
   std::cout &amp;lt;&amp;lt; &amp;#34;gcd&amp;lt;uint32_t, uint32_t&amp;gt;(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;) &amp;#34; &amp;lt;&amp;lt; gu &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::gcd[color ff0000]
 * min[link /reference/limits/numeric_limits/min.md]
-* std::make_unsigned[link /reference/type_traits/make_unsigned.md]
+* std::int32_t[link /reference/cstdint/int32_t.md]
+* std::uint32_t[link /reference/cstdint/uint32_t.md]
 
-### 出力例
+#### 出力例
 ```
 gcd&amp;lt;int32_t, int32_t&amp;gt;(-2147483648, -2147483648)   -2147483648
 gcd&amp;lt;uint32_t, uint32_t&amp;gt;(-2147483648, -2147483648) 2147483648
 ```
 
+### 3つ以上の値に対する最大公約数を求める
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;numeric&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+// 可変引数で最大公約数を求める関数
+template &amp;lt;class T&amp;gt;
+T vgcd(T m, T n) {
+  return std::gcd(m, n);
+}
+
+template &amp;lt;class T, class... Args&amp;gt;
+T vgcd(T a, Args... args) {
+  return vgcd(a, vgcd(args...));
+}
+
+int main() {
+  // 2つずつ最大公約数を求める
+  assert(std::gcd(std::gcd(12, 42), 72) == 6);
+
+  // リスト全体の最大公約数を求める
+  std::vector&amp;lt;int&amp;gt; v = {12, 42, 72};
+  int r = std::accumulate(v.begin(), v.end(), 0, [](int m, int n) {
+    return std::gcd(m, n);
+  });
+  assert(r == 6);
+
+  // 可変引数で最大公約数を求める
+  assert(vgcd(12, 42, 72) == 6);
+}
+```
+* std::gcd[color ff0000]
+* std::accumulate[link accumulate.md]
+
+#### 出力
+```
+```
 
 ## バージョン
 ### 言語
@@ -79,12 +136,12 @@ gcd&amp;lt;uint32_t, uint32_t&amp;gt;(-2147483648, -2147483648) 2147483648
 
 ### 備考
 #### Clang (libc++)
-要件 2 を満たすかどうかチェックしないが、戻り値を `constexpr` 指定するとオーバーフロー時にコンパイルエラーとなることがある。
-要件 2 を満たさない場合、オーバーフローにより戻り値が負になることがある。
+- 要件 2 を満たすかどうかチェックしないが、戻り値を `constexpr` 指定するとオーバーフロー時にコンパイルエラーとなることがある。
+- 要件 2 を満たさない場合、オーバーフローにより戻り値が負になることがある。
 
 #### GCC (libstdc++)
-要件 2 を満たすかどうかチェックしないが、戻り値を `constexpr` 指定するとオーバーフロー時にコンパイルエラーとなることがある。
-要件 2 を満たさない場合、オーバーフローにより戻り値が負になることがある。
+- 要件 2 を満たすかどうかチェックしないが、戻り値を `constexpr` 指定するとオーバーフロー時にコンパイルエラーとなることがある。
+- 要件 2 を満たさない場合、オーバーフローにより戻り値が負になることがある。
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lcm -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/numeric/lcm.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/numeric/lcm.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/lcm.md b/reference/numeric/lcm.md
index 010ffd9c2..9f016c24b 100644
--- a/reference/numeric/lcm.md
+++ b/reference/numeric/lcm.md
@@ -35,33 +35,102 @@ namespace std {
 投げない。
 
 
+## 備考
+- この関数は、公式通りに `abs(m * n) / gcd(m, n)` として実装すると、`m * n`の箇所でオーバーフローしやすい。実装によっては、式を改良することでオーバーフローしにくいようになっている場合がある
+    - GCC (libstdc++), Clang (libc++), Visual C++ : オーバーフローしにくい改良版の式として`abs(m) / gcd(m, n) * abs(n)`という実装が使用されている
+
+
 ## 例
+### 基本的な使い方
 ```cpp example
-#include &amp;lt;cmath&amp;gt;
-#include &amp;lt;iostream&amp;gt;
-#include &amp;lt;limits&amp;gt;
+#include &amp;lt;cassert&amp;gt;
 #include &amp;lt;numeric&amp;gt;
 
 int main() {
+  assert(std::lcm(3, 4) == 12);
+  assert(std::lcm(4, 3) == 12);
+
+  // コンパイル時に最小公倍数を求めることもできる
   static_assert(std::lcm(0, 1) == 0);
   static_assert(std::lcm(4u, -6l) == 12);
+}
+```
+* std::lcm[color ff0000]
+
+#### 出力
+```
+```
+
+### オーバーフローしやすい状況の例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
+#include &amp;lt;numeric&amp;gt;
+
+int main() {
+  std::uint16_t m = 20000;
+  std::uint16_t n = 40000;
+
+  // 標準std::lcm()の動作は実装定義
+  std::cout &amp;lt;&amp;lt; &amp;#34;std::lcm(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;)     &amp;#34; &amp;lt;&amp;lt; std::lcm(m, n) &amp;lt;&amp;lt; std::endl;
 
-  // オーバーフローする例
-  auto m = std::numeric_limits&amp;lt;uint32_t&amp;gt;::max();
-  auto n = m - 1;
-  std::cout &amp;lt;&amp;lt; &amp;#34;lcm(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;)      &amp;#34; &amp;lt;&amp;lt; std::lcm(m, n) &amp;lt;&amp;lt; std::endl;
-  auto g = std::gcd(m, n);  // 1
-  std::cout &amp;lt;&amp;lt; &amp;#34;true lcm(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;) &amp;#34; &amp;lt;&amp;lt; std::fabs(m) * std::fabs(n / g) &amp;lt;&amp;lt; std::endl;
+  // 公式通りのオーバーフローしやすい最小公倍数の実装
+  volatile std::uint16_t t = m * n; // 最適化回避のための変数
+  std::cout &amp;lt;&amp;lt; &amp;#34;formal lcm(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;)   &amp;#34; &amp;lt;&amp;lt; (t / std::gcd(m, n)) &amp;lt;&amp;lt; std::endl;
+
+  // オーバーフローしにくいよう公式を改良した実装
+  auto g = std::gcd(m, n);
+  std::cout &amp;lt;&amp;lt; &amp;#34;improved lcm(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;) &amp;#34; &amp;lt;&amp;lt; m * (n / g) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::lcm[color ff0000]
-* max[link /reference/limits/numeric_limits/max.md]
-* std::fabs[link /reference/cmath/fabs.md]
+* std::uint16_t[link /reference/cstdint/uint16_t.md]
+* std::gcd[link gcd.md]
 
-### 出力例
+#### 出力例
+```
+std::lcm(20000, 40000)     40000
+formal lcm(20000, 40000)   0
+improved lcm(20000, 40000) 40000
+```
+
+### 3つ以上の値に対する最小公倍数を求める
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;numeric&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+// 可変引数で最小公倍数を求める関数
+template &amp;lt;class T&amp;gt;
+T vlcm(T m, T n) {
+  return std::lcm(m, n);
+}
+
+template &amp;lt;class T, class... Args&amp;gt;
+T vlcm(T a, Args... args) {
+  return vlcm(a, vlcm(args...));
+}
+
+int main() {
+  // 2つずつ最小公倍数を求める
+  assert(std::lcm(std::lcm(3, 4), 6) == 12);
+
+  // リスト全体の最小公倍数を求める
+  std::vector&amp;lt;int&amp;gt; v = {3, 4, 6};
+  int r = std::accumulate(v.begin(), v.end(), 1, [](int m, int n) {
+    return std::lcm(m, n);
+  });
+  assert(r == 12);
+
+  // 可変引数で最小公倍数を求める
+  assert(vlcm(3, 4, 6) == 12);
+}
+```
+* std::lcm[color ff0000]
+* std::accumulate[link accumulate.md]
+
+#### 出力
 ```
-lcm(4294967295, 4294967294)      2
-true lcm(4294967295, 4294967294) 1.84467e+19
 ```
 
 
@@ -77,16 +146,14 @@ true lcm(4294967295, 4294967294) 1.84467e+19
 
 ### 備考
 #### Clang (libc++)
-要件 2 を満たすかどうかチェックしない。
-
-[`_LIBCPP_DEBUG`](http://releases.llvm.org/5.0.0/projects/libcxx/docs/DesignDocs/DebugMode.html#using-debug-mode) マクロが
-`0` 以上の場合、要件 3 を満たさなければ [`abort`](/reference/cstdlib/abort.md) する。
-ただし 4 系では [`&amp;lt;limits&amp;gt;`](/reference/limits.md) を `&amp;lt;numeric&amp;gt;` より先に include しなければならない。
-それ以外の場合（デフォルト）、オーバーフローにより戻り値が不正になることがある。
+- 要件 2 を満たすかどうかチェックしない。
+- [`_LIBCPP_DEBUG`](http://releases.llvm.org/5.0.0/projects/libcxx/docs/DesignDocs/DebugMode.html#using-debug-mode) マクロが`0` 以上の場合、要件 3 を満たさなければ [`abort`](/reference/cstdlib/abort.md) する。
+    - ただしバージョン 4 系では [`&amp;lt;limits&amp;gt;`](/reference/limits.md) を `&amp;lt;numeric&amp;gt;` より先に include しなければならない。
+    - それ以外の場合（デフォルト）、オーバーフローにより戻り値が不正になることがある。
 
 #### GCC (libstdc++)
-要件 2, 3 を満たすかどうかチェックしない。
-要件 3 を満たさない場合、オーバーフローにより戻り値が不正になることがある。
+- 要件 2, 3 を満たすかどうかチェックしない。
+- 要件 3 を満たさない場合、オーバーフローにより戻り値が不正になることがある。
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; (非メンバ関数) -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/ostream/basic_ostream/op_ostream_free.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/basic_ostream/op_ostream_free.md b/reference/ostream/basic_ostream/op_ostream_free.md
index 8496abc73..593a3cbf2 100644
--- a/reference/ostream/basic_ostream/op_ostream_free.md
+++ b/reference/ostream/basic_ostream/op_ostream_free.md
@@ -96,7 +96,7 @@ namespace std {
 なお、(14) の形式（`os` の文字型（`char_type`）が `char` 以外で `s` が `const char*`）の時は、`s` の各文字 `c` を直接出力するのではなく、`os.`[`widen`](../../ios/basic_ios/widen.md)`(c)` を出力する。  
 出力後、幅指定は `0` にリセットされる。
 
-### (18)～(24) 文字列の書式化出力
+### (18)～(24) 文字列の書式化出力 (C++20)
 
 これらの関数は削除されている
 
@@ -212,6 +212,25 @@ cpprefjp
 ## 実装例
 TBD
 
+## C++20で追加された`delete`指定オーバーロードについて
+
+[`char8_t`型の追加](/lang/cpp20/char8_t.md)に伴って、次に示すようなコードに破壊的変更が生じてしまった。
+
+```cpp
+#include &amp;lt;iostream&amp;gt;
+int main()
+{
+    std::cout &amp;lt;&amp;lt; u8&amp;#39;x&amp;#39;;    // C++17までは x と表示された。C++20では120と表示される
+    std::cout &amp;lt;&amp;lt; u8&amp;#34;text&amp;#34;; // C++20までは text と表示された。C++20では文字列先頭へのポインタが表示される
+}
+```
+
+これは`char8_t`/`char16_t`/`char32_t`に対するostreamの`operator&amp;lt;&amp;lt;`が提供されないため、他のオーバーロードが選ばれるためにこのような直感に反する挙動が発生する。
+
+そこで(6)～(12)、(18)～(24)のように`delete`指定された`operator&amp;lt;&amp;lt;`を追加することで不適格にし、このような直感的ではない挙動を避ける。
+
+[機能テストマクロ](/lang/cpp20/feature_test_macros.md.nolink)は`__cpp_lib_char8_t`で、値は`201907`。
+
 ## バージョン
 ### 言語
 - C++98
@@ -221,39 +240,53 @@ TBD
 
 ## 関連項目
 
-- このほかの`&amp;lt;&amp;lt;`演算子関数
-    - [`bool`値・数値・ポインタ、ストリームバッファ、マニピュレータに対するもの](op_ostream.md)
-	- [`std::sub_match`に関するもの](../../regex/sub_match/op_ostream.md)
-	- [`std::error_code`に関するもの](../../system_error/error_code/op_ostream.md)
-	- [`std::complex`に関するもの](../../complex/complex/op_ostream.md)
-	- [`std::bitset`に関するもの](../../bitset/bitset/op_ostream.md)
-	- [`std::basic_string`に関するもの](../../string/basic_string/op_ostream.md)
-	- [`std::shared_ptr`に関するもの](../../memory/shared_ptr/op_ostream.md)
-	- [`std::shuffle_order_engine`に関するもの](../../random/shuffle_order_engine/op_ostream.md)
-	- [`std::gamma_distribution`に関するもの](../../random/gamma_distribution/op_ostream.md)
-	- [`std::geometric_distribution`に関するもの](../../random/geometric_distribution/op_ostream.md)
-	- [`std::extreme_value_distribution`に関するもの](../../random/extreme_value_distribution/op_ostream.md)
-	- [`std::fisher_f_distribution`に関するもの](../../random/fisher_f_distribution/op_ostream.md)
-	- [`std::mersenne_twister_engine`に関するもの](../../random/mersenne_twister_engine/op_ostream.md)
-	- [`std::chi_squared_distribution`に関するもの](../../random/chi_squared_distribution/op_ostream.md)
-	- [`std::exponential_distribution`に関するもの](../../random/exponential_distribution/op_ostream.md)
-	- [`std::discrete_distribution`に関するもの](../../random/discrete_distribution/op_ostream.md)
-	- [`std::subtract_with_carry_engine`に関するもの](../../random/subtract_with_carry_engine/op_ostream.md)
-	- [`std::piecewise_constant_distribution`に関するもの](../../random/piecewise_constant_distribution/op_ostream.md)
-	- [`std::poisson_distribution`に関するもの](../../random/poisson_distribution/op_ostream.md)
-	- [`std::student_t_distribution`に関するもの](../../random/student_t_distribution/op_ostream.md)
-	- [`std::bernoulli_distribution`に関するもの](../../random/bernoulli_distribution/op_ostream.md)
-	- [`std::weibull_distribution`に関するもの](../../random/weibull_distribution/op_ostream.md)
-	- [`std::binomial_distribution`に関するもの](../../random/binomial_distribution/op_ostream.md)
-	- [`std::piecewise_linear_distribution`に関するもの](../../random/piecewise_linear_distribution/op_ostream.md)
-	- [`std::uniform_real_distribution`に関するもの](../../random/uniform_real_distribution/op_ostream.md)
-	- [`std::negative_binomial_distribution`に関するもの](../../random/negative_binomial_distribution/op_ostream.md)
-	- [`std::discard_block_engine`に関するもの](../../random/discard_block_engine/op_ostream.md)
-	- [`std::normal_distribution`に関するもの](../../random/normal_distribution/op_ostream.md)
-	- [`std::cauchy_distribution`に関するもの](../../random/cauchy_distribution/op_ostream.md)
-	- [`std::lognormal_distribution`に関するもの](../../random/lognormal_distribution/op_ostream.md)
-	- [`std::linear_congruential_engine`に関するもの](../../random/linear_congruential_engine/op_ostream.md)
-	- [`std::uniform_int_distribution`に関するもの](../../random/uniform_int_distribution/op_ostream.md)
-	- [`std::independent_bits_engine`に関するもの](../../random/independent_bits_engine/op_ostream.md)
-- 出力対象の型
-    - [`basic_streambuf`](../../streambuf/basic_streambuf.md)
+### このほかの`&amp;lt;&amp;lt;`演算子関数
+
+- [`bool`値・数値・ポインタ、ストリームバッファ、マニピュレータに対するもの](op_ostream.md)
+- [`std::sub_match`に関するもの](../../regex/sub_match/op_ostream.md)
+- [`std::error_code`に関するもの](../../system_error/error_code/op_ostream.md)
+- [`std::complex`に関するもの](../../complex/complex/op_ostream.md)
+- [`std::bitset`に関するもの](../../bitset/bitset/op_ostream.md)
+- [`std::basic_string`に関するもの](../../string/basic_string/op_ostream.md)
+- [`std::shared_ptr`に関するもの](../../memory/shared_ptr/op_ostream.md)
+- [`std::shuffle_order_engine`に関するもの](../../random/shuffle_order_engine/op_ostream.md)
+- [`std::gamma_distribution`に関するもの](../../random/gamma_distribution/op_ostream.md)
+- [`std::geometric_distribution`に関するもの](../../random/geometric_distribution/op_ostream.md)
+- [`std::extreme_value_distribution`に関するもの](../../random/extreme_value_distribution/op_ostream.md)
+- [`std::fisher_f_distribution`に関するもの](../../random/fisher_f_distribution/op_ostream.md)
+- [`std::mersenne_twister_engine`に関するもの](../../random/mersenne_twister_engine/op_ostream.md)
+- [`std::chi_squared_distribution`に関するもの](../../random/chi_squared_distribution/op_ostream.md)
+- [`std::exponential_distribution`に関するもの](../../random/exponential_distribution/op_ostream.md)
+- [`std::discrete_distribution`に関するもの](../../random/discrete_distribution/op_ostream.md)
+- [`std::subtract_with_carry_engine`に関するもの](../../random/subtract_with_carry_engine/op_ostream.md)
+- [`std::piecewise_constant_distribution`に関するもの](../../random/piecewise_constant_distribution/op_ostream.md)
+- [`std::poisson_distribution`に関するもの](../../random/poisson_distribution/op_ostream.md)
+- [`std::student_t_distribution`に関するもの](../../random/student_t_distribution/op_ostream.md)
+- [`std::bernoulli_distribution`に関するもの](../../random/bernoulli_distribution/op_ostream.md)
+- [`std::weibull_distribution`に関するもの](../../random/weibull_distribution/op_ostream.md)
+- [`std::binomial_distribution`に関するもの](../../random/binomial_distribution/op_ostream.md)
+- [`std::piecewise_linear_distribution`に関するもの](../../random/piecewise_linear_distribution/op_ostream.md)
+- [`std::uniform_real_distribution`に関するもの](../../random/uniform_real_distribution/op_ostream.md)
+- [`std::negative_binomial_distribution`に関するもの](../../random/negative_binomial_distribution/op_ostream.md)
+- [`std::discard_block_engine`に関するもの](../../random/discard_block_engine/op_ostream.md)
+- [`std::normal_distribution`に関するもの](../../random/normal_distribution/op_ostream.md)
+- [`std::cauchy_distribution`に関するもの](../../random/cauchy_distribution/op_ostream.md)
+- [`std::lognormal_distribution`に関するもの](../../random/lognormal_distribution/op_ostream.md)
+- [`std::linear_congruential_engine`に関するもの](../../random/linear_congruential_engine/op_ostream.md)
+- [`std::uniform_int_distribution`に関するもの](../../random/uniform_int_distribution/op_ostream.md)
+- [`std::independent_bits_engine`に関するもの](../../random/independent_bits_engine/op_ostream.md)
+
+### 出力対象の型
+
+- [`basic_streambuf`](../../streambuf/basic_streambuf.md)
+
+### C++20での変更関連
+
+- [UTF-8エンコーディングされた文字の型として`char8_t`を追加](/lang/cpp20/char8_t.md)
+- [char16_tとchar32_t](/lang/cpp11/char16_32.md)
+- [UTF-8文字列リテラル](/lang/cpp11/utf8_string_literals.md)
+- [UTF-8文字リテラル](/lang/cpp17/utf8_character_literals.md)
+
+## 参照
+
+[P1423R3: char8_t backward compatibility remediation](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1423r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/random.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/random.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random.md b/reference/random.md
index 577424c09..1a09db031 100644
--- a/reference/random.md
+++ b/reference/random.md
@@ -236,7 +236,7 @@ int main()
 
 ## 参照
 ### 分布アルゴリズム
-* [さまざまな確率分布 (probability distributions)](http://www.biwako.shiga-u.ac.jp/sensei/mnaka/ut/statdist.html)
+* [さまざまな確率分布 (probability distributions)](https://web.archive.org/web/20190523080819/https://www.biwako.shiga-u.ac.jp/sensei/mnaka/ut/statdist.html)
 * [確率変数－種々の分布の特徴](https://sites.google.com/site/techdmba/distribution)
 
 ### 乱数ライブラリの使い方
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minstd_rand -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/random/minstd_rand.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/random/minstd_rand.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/minstd_rand.md b/reference/random/minstd_rand.md
index a0ba2a8ed..718600f0d 100644
--- a/reference/random/minstd_rand.md
+++ b/reference/random/minstd_rand.md
@@ -113,6 +113,6 @@ int main()
 
 ## 参照
 - [Lehmer random number generator - Wikipedia](https://en.wikipedia.org/wiki/Lehmer_random_number_generator)
-- [MINSTD - Classical LSGs](http://random.mat.sbg.ac.at/results/karl/server/node4.html#SECTION00042000000000000000)
+- [MINSTD - Classical LSGs](https://web.archive.org/web/20181030204012/http://random.mat.sbg.ac.at/results/karl/server/node4.html#SECTION00042000000000000000)
 - &amp;#34;Random Number Generators: Good ones are hard to find&amp;#34;, Stephen K. Park and Keith W. Miller, Communications of the ACM, Vol. 31, No. 10, October 1988, pp. 1192-1201
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minstd_rand0 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/random/minstd_rand0.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/random/minstd_rand0.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/minstd_rand0.md b/reference/random/minstd_rand0.md
index 9aa0419ba..2809d0d34 100644
--- a/reference/random/minstd_rand0.md
+++ b/reference/random/minstd_rand0.md
@@ -116,6 +116,6 @@ int main()
 ## 参照
 - [Lehmer random number generator - Wikipedia](https://en.wikipedia.org/wiki/Lehmer_random_number_generator)
 - [Stephen K. Park and Keith W. Miller (1988). &amp;#34;Random Number Generators: Good Ones Are Hard To Find&amp;#34;. Communications of the ACM 31 (10): 1192–1201. doi:10.1145/63039.63042.](http://www.firstpr.com.au/dsp/rand31/p1192-park.pdf)
-- [MINSTD - Classical LSGs](http://random.mat.sbg.ac.at/results/karl/server/node4.html#SECTION00042000000000000000)
+- [MINSTD - Classical LSGs](https://web.archive.org/web/20181030204012/http://random.mat.sbg.ac.at/results/karl/server/node4.html#SECTION00042000000000000000)
 - A pseudo-random number generator for the System/360, P.A. Lewis, A.S. Goodman, J.M. Miller, IBM Systems Journal, Vol. 8, No. 2, 1969, pp. 136-146
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux24 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/random/ranlux24.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/random/ranlux24.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/ranlux24.md b/reference/random/ranlux24.md
index 65b66634d..b91570544 100644
--- a/reference/random/ranlux24.md
+++ b/reference/random/ranlux24.md
@@ -102,5 +102,5 @@ int main()
 ## 参照
 - [N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html)
 - [Ranlux - Random number generator](http://luscher.web.cern.ch/luscher/ranlux/)
-- [Uniform Random Numbers of Guaranteed Quality](http://cmd.inp.nsk.su/old/cmd2/manuals/cernlib/shortwrups/node244.html)
+- [Uniform Random Numbers of Guaranteed Quality](https://web.archive.org/web/20190922154624/http://cmd.inp.nsk.su/old/cmd2/manuals/cernlib/shortwrups/node244.html)
 - [M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, *ACM Trans. Model. Comput. Simul.* **17**, 15 (2007)](https://doi.org/10.1145/1276927.1276928)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux48 -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/random/ranlux48.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/random/ranlux48.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/ranlux48.md b/reference/random/ranlux48.md
index 0a2a8fa74..476903f37 100644
--- a/reference/random/ranlux48.md
+++ b/reference/random/ranlux48.md
@@ -102,5 +102,5 @@ int main()
 ## 参照
 - [N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html)
 - [Ranlux - Random number generator](http://luscher.web.cern.ch/luscher/ranlux/)
-- [Uniform Random Numbers of Guaranteed Quality](http://cmd.inp.nsk.su/old/cmd2/manuals/cernlib/shortwrups/node244.html)
+- [Uniform Random Numbers of Guaranteed Quality](https://web.archive.org/web/20190922154624/http://cmd.inp.nsk.su/old/cmd2/manuals/cernlib/shortwrups/node244.html)
 - [M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, *ACM Trans. Model. Comput. Simul.* **17**, 15 (2007)](https://doi.org/10.1145/1276927.1276928)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uniform_random_bit_generator -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_random_bit_generator.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/random/uniform_random_bit_generator.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_random_bit_generator.md b/reference/random/uniform_random_bit_generator.md
index 1fad92140..31ce03450 100644
--- a/reference/random/uniform_random_bit_generator.md
+++ b/reference/random/uniform_random_bit_generator.md
@@ -62,7 +62,7 @@ int main() {
   f&amp;lt;std::exponential_distribution&amp;lt;&amp;gt;&amp;gt;(&amp;#34;std::exponential_distribution&amp;lt;&amp;gt;&amp;#34;);
 }
 ```
-* std::predicate[color ff0000]
+* std::uniform_random_bit_generator[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scoped_allocator_adaptor -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/scoped_allocator/scoped_allocator_adaptor.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/scoped_allocator/scoped_allocator_adaptor.md b/reference/scoped_allocator/scoped_allocator_adaptor.md
index f152fb0f2..30efb5292 100644
--- a/reference/scoped_allocator/scoped_allocator_adaptor.md
+++ b/reference/scoped_allocator/scoped_allocator_adaptor.md
@@ -24,11 +24,11 @@ namespace std {
 
 ![](https://raw.github.com/cpprefjp/image/master/reference/scoped_allocator/scoped_allocator_adaptor/ScopedAllocatorModel_02.png)
 
-図2 コンテナとその要素で、アロケータオブジェクトの状態を伝搬させる(例1)
+図2 コンテナとその要素で、アロケータオブジェクトの状態を伝播させる(例1)
 
 ![](https://raw.github.com/cpprefjp/image/master/reference/scoped_allocator/scoped_allocator_adaptor/ScopedAllocatorModel_03.png)
 
-図3 全ての要素にアロケータオブジェクトの状態を伝搬させる(例2)
+図3 全ての要素にアロケータオブジェクトの状態を伝播させる(例2)
 
 
 
@@ -99,7 +99,7 @@ namespace std {
 | [`(deduction_guide)`](scoped_allocator_adaptor/op_deduction_guide.md) | クラステンプレートの推論補助 | C++17 |
 
 
-## 例1 コンテナとその要素で、アロケータオブジェクトの状態を伝搬させる
+## 例1 コンテナとその要素で、アロケータオブジェクトの状態を伝播させる
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;vector&amp;gt;
@@ -176,7 +176,7 @@ int main()
 5
 ```
 
-## 例2 全ての要素にアロケータオブジェクトの状態を伝搬させる
+## 例2 全ての要素にアロケータオブジェクトの状態を伝播させる
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;vector&amp;gt;
@@ -242,7 +242,7 @@ int main()
   std::cout &amp;lt;&amp;lt; &amp;#34;container allocator : &amp;#34; &amp;lt;&amp;lt; v.get_allocator().getState() &amp;lt;&amp;lt; std::endl;
 
   // 要素に使用されるアロケータの状態を確認
-  // 全ての要素に、アロケータの状態が伝搬される
+  // 全ての要素に、アロケータの状態が伝播される
   for (const forward_list&amp;amp; x : v) {
     std::cout &amp;lt;&amp;lt; &amp;#34;element allocator : &amp;#34; &amp;lt;&amp;lt; x.get_allocator().getState() &amp;lt;&amp;lt; std::endl;
   }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>construct -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/scoped_allocator/scoped_allocator_adaptor/construct.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/scoped_allocator/scoped_allocator_adaptor/construct.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/scoped_allocator/scoped_allocator_adaptor/construct.md b/reference/scoped_allocator/scoped_allocator_adaptor/construct.md
index 539f4dd38..837bbee42 100644
--- a/reference/scoped_allocator/scoped_allocator_adaptor/construct.md
+++ b/reference/scoped_allocator/scoped_allocator_adaptor/construct.md
@@ -137,7 +137,7 @@ void construct_propagate_alloc()
   const std::size_t n = 1;
   string* p = alloc.allocate(n);
 
-  // (1) 以下のコンストラクタを呼び出し、アロケータオブジェクトを伝搬させる
+  // (1) 以下のコンストラクタを呼び出し、アロケータオブジェクトを伝播させる
   // basic_string(const char*, Allocator)
   alloc.construct(p, &amp;#34;hello&amp;#34;);
 
@@ -157,7 +157,7 @@ void construct_pair()
 
   // (2)
   // pairの各要素に対して以下のコンストラクタを呼び出し、
-  // アロケータオブジェクトを伝搬させる。
+  // アロケータオブジェクトを伝播させる。
   // basic_string(const char*, Allocator)
   std::pair&amp;lt;string, string&amp;gt;* pair_p = p;
   alloc.construct(p, std::piecewise_construct,
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>semaphore -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/semaphore.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/semaphore.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;semaphore&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;semaphore&amp;gt;&lt;/code&gt;ヘッダは、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%9E%E3%83%95%E3%82%A9&#34; target=&#34;_blank&#34;&gt;セマフォ&lt;/a&gt;に関するクラスを定義する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html&#34;&gt;counting_semaphore&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;カウンティングセマフォ (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html&#34;&gt;binary_semaphore&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バイナリセマフォ &lt;code&gt;counting_semaphore&amp;lt;1&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0514r4.pdf&#34; target=&#34;_blank&#34;&gt;P0514R4 Efficient concurrent waiting for C++20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1135r6.html&#34; target=&#34;_blank&#34;&gt;P1135R6 The C++20 Synchronization Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counting_semaphore -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/semaphore/counting_semaphore.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore.md b/reference/semaphore/counting_semaphore.md
new file mode 100644
index 000000000..ffc5544a2
--- /dev/null
+++ b/reference/semaphore/counting_semaphore.md
@@ -0,0 +1,148 @@
+# counting_semaphore
+* semaphore[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;ptrdiff_t least_max_value = implementation-defined&amp;gt;
+  class counting_semaphore;
+
+  using binary_semaphore = counting_semaphore&amp;lt;1&amp;gt;;
+}
+```
+* ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
+
+## 概要
+`counting_semaphore`クラスは、スレッド間で使用する共有リソースへの並行アクセスを制約する、軽量な同期プリミティブである。
+
+カウンティングセマフォ（または単にセマフォ）は他の同期プリミティブを実装するための部品として広く用いられ、セマフォと条件変数のいずれも適用可能なケースでは[`condition_variable`](/reference/condition_variable/condition_variable.md)よりも効率的である。
+
+セマフォは1つのカウンタで状態管理される同期プリミティブとみなせる。カウンタは`0`以上かつ[`max()`](counting_semaphore/max.md)以下の値をとり、このカウンタ値がセマフォで管理する共有リソースの個数と解釈される。
+
+- カウンタの最大値はテンプレートパラメータ`least_max_value`にて設定する。省略時は処理系がサポートする最大値が設定される。
+- カウンタの初期値は[コンストラクタ](counting_semaphore/op_constructor.md)でセマフォ構築時に指定する。
+- [`release()`](counting_semaphore/release.md)メンバ関数呼び出しによりカウンタ値の加算と通知処理、つまり利用可能な共有リソースの増加を表現する。（歴史的にはオランダ語由来の&amp;#34;V操作&amp;#34;と呼ばれる。英語では&amp;#34;up&amp;#34;／&amp;#34;signal&amp;#34;／&amp;#34;post&amp;#34;とも呼ばれる。）
+- [`acquire()`](counting_semaphore/acquire.md)メンバ関数呼び出しにより待機処理とカウンタ値の減算、つまり利用可能な共有リソースの減少を表現する。（同様に&amp;#34;P操作&amp;#34;や&amp;#34;down&amp;#34;／&amp;#34;wait&amp;#34;／&amp;#34;pend&amp;#34;とも呼ばれる。）
+
+カウンティングセマフォの最大値を`1`としたものはバイナリセマフォと呼ばれ、ヘッダ[`&amp;lt;semaphore&amp;gt;`](/reference/semaphore.md)ではエイリアス型`binary_semaphore`として定義される。
+バイナリセマフォはミューテックス（[`mutex`](/reference/mutex/mutex.md)など）と同様に共有リソースの排他制御を実現する同期プリミティブだが、ミューテックスとは異なりスレッドがロックを所有(own)するという概念が存在しない。
+このためバイナリセマフォでは、あるスレッド上でカウンタ値を減少（1→0; `lock`相当）させ、別のスレッド上でカウンタ値を増加（0→1; `unlock`相当）させてもよい。
+
+
+## 適格要件
+テンプレートパラメータ`least_max_value`には非負の数値を指定する。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前             | 説明            | 対応バージョン |
+|-----------------|----------------|------------|
+| [`(constructor)`](counting_semaphore/op_constructor.md) | コンストラクタ | C++20 |
+| `(destructor)` | デストラクタ | C++20 |
+| `operator=(const counting_semaphore&amp;amp;) = delete;` | 代入演算子 | C++20 |
+| [`release`](counting_semaphore/release.md) | カウンタ値を加算し、待機中スレッドをブロック解除する | C++20 |
+| [`acquire`](counting_semaphore/acquire.md) | カウンタ値が`0`より大きくなるまで待機し、カウンタ値を1つ減算する | C++20 |
+| [`try_acquire`](counting_semaphore/try_acquire.md) | カウンタ値の1減算を試みる | C++20 |
+| [`try_acquire_for`](counting_semaphore/try_acquire_for.md) | 相対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
+| [`try_acquire_until`](counting_semaphore/try_acquire_until.md) | 絶対時間のタイムアウトを指定して、カウンタ値の1減算を試みる | C++20 |
+
+## 静的メンバ関数
+
+| 名前             | 説明            | 対応バージョン |
+|-----------------|----------------|----------|
+| [`max`](counting_semaphore/max.md) | カウンタの最大値 | C++20 |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;queue&amp;gt;
+
+int main()
+{
+  // アイテム在庫
+  std::queue&amp;lt;int&amp;gt; stock;
+
+  // 在庫管理カウンティングセマフォ（初期値=0／最大値=3）
+  std::counting_semaphore&amp;lt;3&amp;gt; token{0};
+  // 在庫アクセス保護バイナリセマフォ（初期値=1／最大値=1）
+  std::counting_semaphore&amp;lt;1&amp;gt; guard{1};
+  // 説明のためテンプレートパラメータleast_max_valueを明示指定しているが、
+  // 両者ともstd::counting_semaphore&amp;lt;&amp;gt;と省略しても正しく動作する。
+
+  // 生産者スレッド
+  std::thread producer([&amp;amp;]{
+    for (int i = 1; i &amp;lt;= 3; i++) {
+      // 新しいアイテムを生産
+      int item = i * 100;
+      // アイテム在庫へ追加
+      guard.acquire();
+      stock.push(item);
+      guard.release();
+      // 在庫管理カウントを+1する
+      token.release();
+    }
+  });
+
+  // 消費者スレッド
+  std::thread consumer([&amp;amp;]{
+    for (int i = 1; i &amp;lt;= 3; i++) {
+      // 在庫生産されるまで待機し、在庫管理カウントを-1する
+      token.acquire();
+      // アイテム在庫から取出
+      guard.acquire();
+      int item = stock.front();
+      stock.pop();
+      guard.release();
+      // アイテムを消費
+      std::cout &amp;lt;&amp;lt; item &amp;lt;&amp;lt; std::endl;
+    }
+  });
+
+  producer.join();
+  consumer.join();
+  return 0;
+}
+```
+* std::counting_semaphore[color ff0000]
+* release()[link counting_semaphore/release.md]
+* acquire()[link counting_semaphore/acquire.md]
+* std::queue[link /reference/queue/queue.md]
+* stock.push[link /reference/queue/queue/push.md]
+* stock.pop()[link /reference/queue/queue/pop.md]
+* join()[link /reference/thread/thread/join.md]
+
+### 出力
+```
+100
+200
+300
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`&amp;lt;condition_variable&amp;gt;`](/reference/condition_variable.md)
+- [`&amp;lt;mutex&amp;gt;`](/reference/mutex.md)
+
+
+## 参照
+- [semop, semtimedop - System V セマフォの操作](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/semop.2.html)
+- [sem_overview - POSIX セマフォの概要](https://linuxjm.osdn.jp/html/LDP_man-pages/man7/sem_overview.7.html)
+- [Windows, Semaphore Objects](https://docs.microsoft.com/en-us/windows/win32/sync/semaphore-objects)
+- [macOS/iOS, Dispatch Semaphore](https://developer.apple.com/documentation/dispatch/dispatch_semaphore)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acquire -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/acquire.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/semaphore/counting_semaphore/acquire.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/acquire.md b/reference/semaphore/counting_semaphore/acquire.md
new file mode 100644
index 000000000..b29a40b35
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/acquire.md
@@ -0,0 +1,84 @@
+# acquire
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void acquire();
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`より大きくなるまで待機し、カウンタ値を`1`だけ減算してから制御を戻す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+次のステップを繰り返す：
+
+- [`try_acquire`](try_acquire.md)を評価し、結果が`true`ならば関数呼び出し元へ制御を戻す。
+- `counter`が`0`より大きくなるまで、`*this`上で関数呼び出しスレッドをブロッキングする。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+
+
+## 備考
+「効果」欄では`acquire`メンバ関数の振る舞いを手続き的に説明しているが、実際の処理系においてはオペレーティングシステムが提供する効率的なセマフォ操作関数が利用されると期待される。
+
+- POSIXセマフォでは[`sem_wait`関数](https://linuxjm.osdn.jp/html/LDP_man-pages/man3/sem_wait.3.html)が提供される。
+- Windowsセマフォでは[`WaitForSingleObject`関数](https://docs.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitforsingleobject)ファミリが提供される。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    sem.acquire();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* acquire()[color ff0000]
+* release()[link release.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/max.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/semaphore/counting_semaphore/max.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/max.md b/reference/semaphore/counting_semaphore/max.md
new file mode 100644
index 000000000..92de926d7
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/max.md
@@ -0,0 +1,58 @@
+# max
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr ptrdiff_t max() noexcept;
+```
+* ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
+
+## 概要
+カウンティングセマフォが取り扱えるカウンタの最大値
+
+
+## 戻り値
+カウンタの最大値を返す。
+
+カウンタの最大値はテンプレートパラメータ`least_max_value`と等しいか、それ以上の値となる。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+
+int main()
+{
+  using Semaphore = std::counting_semaphore&amp;lt;10&amp;gt;;
+  std::cout &amp;lt;&amp;lt; Semaphore::max() &amp;lt;&amp;lt; std::endl;
+
+  // 処理系定義のデフォルト値
+  std::cout &amp;lt;&amp;lt; std::counting_semaphore&amp;lt;&amp;gt;::max() &amp;lt;&amp;lt; std::endl;
+}
+```
+* max()[color ff0000]
+
+### 出力例
+```
+10
+2147483647
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/op_constructor.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/semaphore/counting_semaphore/op_constructor.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/op_constructor.md b/reference/semaphore/counting_semaphore/op_constructor.md
new file mode 100644
index 000000000..d96c05fe9
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/op_constructor.md
@@ -0,0 +1,54 @@
+# コンストラクタ
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr explicit counting_semaphore(ptrdiff_t desired); // (1)
+counting_semaphore(const counting_semaphore&amp;amp;) = delete;   // (2)
+```
+
+## counting_semaphoreオブジェクトの構築
+- (1) : カウンタ初期値を`desired`として、`counting_semaphore`オブジェクトの初期化を行う。
+- (2) : コピーコンストラクタ。コピー不可。
+
+
+## 事前条件
+`desired &amp;gt;= 0` かつ `desired &amp;lt;=` [`max()`](max.md)
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;semaphore&amp;gt;
+
+// カウンタ 初期値0／最大値10 のセマフォを定義
+std::counting_semaphore&amp;lt;10&amp;gt; sem{0};
+
+// カウンタ 初期値1／最大値1 の(バイナリ)セマフォを定義
+// このセマフォはミューテックス相当の排他制御に用いられる
+std::counting_semaphore&amp;lt;1&amp;gt; mtx{1};
+
+int main() {}
+```
+* std::counting_semaphore[color ff0000]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>release -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/release.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/semaphore/counting_semaphore/release.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/release.md b/reference/semaphore/counting_semaphore/release.md
new file mode 100644
index 000000000..7a84a72a4
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/release.md
@@ -0,0 +1,80 @@
+# release
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void release(ptrdiff_t update = 1);
+```
+* ptrdiff_t[link /reference/cstddef/ptrdiff_t.md]
+
+## 概要
+カウンティングセマフォのカウンタ値に`update`を加算し、待機中スレッドのブロック解除を行う。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 事前条件
+`update &amp;gt;= 0` かつ `update &amp;lt;=` [`max()`](max.md) `- counter`
+
+
+## 効果
+アトミックに`counter += update`を実行し、`counter`が値`0`より大きくなるまで待機中のスレッド群をブロック解除する。
+
+
+## 戻り値
+なし
+
+
+## 例外
+この関数は、以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    sem.acquire();
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* release()[color ff0000]
+* acquire()[link acquire.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_acquire -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/try_acquire.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/semaphore/counting_semaphore/try_acquire.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/try_acquire.md b/reference/semaphore/counting_semaphore/try_acquire.md
new file mode 100644
index 000000000..19adfa460
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/try_acquire.md
@@ -0,0 +1,82 @@
+# try_acquire
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+bool try_acquire() noexcept;
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`の場合は何もせず`false`を返し、そうでなければカウンタ値を1つ減算して`true`を返す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+`counter &amp;gt; 0`の場合は、呼び出しスレッドをブロッキングすることなく、アトミックに`counter -= 1`を実行する。
+`counter`が減算されなかった場合は、副作用は発生せず`try_acquire`関数は即座に呼び出し元へ戻る。
+
+処理系には、`counter &amp;gt; 0`であっても`counter`の減算に失敗することが許容される。
+ただし、セマフォに対する操作が競合していない状況下において、`try_acquire`が一貫して`false`を返すような実装は許容されない。
+（Spurious Failure が生じることは滅多にないが、これによりアトミック変数を用いる単純な Compare-and-Exchange ベースの興味深い実装が許容される。）
+
+
+## 戻り値
+`counter`が減算された場合は`true`を返し、そうでなければ`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    while (!sem.try_acquire()) {
+      std::this_thread::yield();
+      // ここでは try_acquire 動作例示のためビジーループを行うが、
+      // セマフォ待機が目的であれば acquire() 利用が適切である。
+    }
+    std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* try_acquire()[color ff0000]
+* acquire()[link acquire.md]
+* release()[link release.md]
+* std::this_thread::yield()[link /reference/thread/this_thread/yield.md]
+
+### 出力
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_acquire_for -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/try_acquire_for.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/semaphore/counting_semaphore/try_acquire_for.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/try_acquire_for.md b/reference/semaphore/counting_semaphore/try_acquire_for.md
new file mode 100644
index 000000000..1bf0c43fe
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/try_acquire_for.md
@@ -0,0 +1,85 @@
+# try_acquire_for
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template&amp;lt;class Rep, class Period&amp;gt;
+  bool try_acquire_for(const chrono::duration&amp;lt;Rep, Period&amp;gt;&amp;amp; rel_time);
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`より大きくなるまで待機し、カウンタ値を1つ減算してから`true`を返す。
+相対時間で指定されるタイムアウトが発生した場合は`false`を返す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+次のステップを繰り返す：
+
+- [`try_acquire`](try_acquire.md)を評価し、その結果が`true`ならば`true`を返す。
+- `counter`が`0`より大きくなる、または指定された相対時間が経過するまで、`*this`上で関数呼び出しスレッドをブロッキングする。タイムアウトが発生した場合は`false`を返す。
+
+
+## 戻り値
+カウンタ値を減算できた場合は`true`を返す。タイムアウトが発生した場合は`false`を返す。
+
+
+## 例外
+この関数はタイムアウト関連の例外オブジェクト、もしくは以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    constexpr auto duration = std::chrono::seconds{5};
+    if (sem.try_acquire_for(duration)) {
+      std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+    } else {
+      std::cout &amp;lt;&amp;lt; &amp;#34;(timed out)&amp;#34; &amp;lt;&amp;lt; std::endl;
+    }
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* try_acquire_for[color ff0000]
+* release()[link release.md]
+
+### 出力例
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_acquire_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/semaphore/counting_semaphore/try_acquire_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/semaphore/counting_semaphore/try_acquire_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/semaphore/counting_semaphore/try_acquire_until.md b/reference/semaphore/counting_semaphore/try_acquire_until.md
new file mode 100644
index 000000000..ba4586532
--- /dev/null
+++ b/reference/semaphore/counting_semaphore/try_acquire_until.md
@@ -0,0 +1,88 @@
+# try_acquire_until
+* semaphore[meta header]
+* std[meta namespace]
+* counting_semaphore[meta class]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template&amp;lt;class Clock, class Duration&amp;gt;
+  bool try_acquire_until(const chrono::time_point&amp;lt;Clock, Duration&amp;gt;&amp;amp; abs_time);
+```
+
+## 概要
+カウンティングセマフォのカウンタ値が`0`より大きくなるまで待機し、カウンタ値を1つ減算してから`true`を返す。
+絶対時間で指定されるタイムアウトが発生した場合は`false`を返す。
+
+説明のため、ここではカウンタ値を`counter`と表記する。
+
+
+## 効果
+次のステップを繰り返す：
+
+- [`try_acquire`](try_acquire.md)を評価し、その結果が`true`ならば`true`を返す。
+- `counter`が`0`より大きくなる、または指定された絶対時間を過ぎるまで、`*this`上で関数呼び出しスレッドをブロッキングする。タイムアウトが発生した場合は`false`を返す。
+
+
+## 戻り値
+カウンタ値を減算できた場合は`true`を返す。タイムアウトが発生した場合は`false`を返す。
+
+
+## 例外
+この関数はタイムアウト関連の例外オブジェクト、もしくは以下のerror conditionを持つ[`system_error`](/reference/system_error/system_error.md)例外オブジェクトを送出する可能性がある：
+
+- [`resource_unavailable_try_again`](/reference/system_error/errc.md) : 操作対象のネイティブハンドル型が無効
+- [`operation_not_permitted`](/reference/system_error/errc.md) : スレッドにこの操作を行う権限がない
+- [`invalid_argument`](/reference/system_error/errc.md) : 実引数が無効
+
+
+## 例
+```cpp example
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;semaphore&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+using Clock = std::chrono::system_clock;
+
+int main()
+{
+  int shared_data = 0;
+  std::counting_semaphore sem{0};
+
+  std::thread t([&amp;amp;]{
+    // 通知を待機し、共有データから読取り
+    const auto tp = Clock::now() + std::chrono::seconds{5};
+    if (sem.try_acquire_until(tp)) {
+      std::cout &amp;lt;&amp;lt; shared_data &amp;lt;&amp;lt; std::endl;
+    } else {
+      std::cout &amp;lt;&amp;lt; &amp;#34;(timed out)&amp;#34; &amp;lt;&amp;lt; std::endl;
+    }
+  });
+
+  // 共有データへ書込み、通知を行う
+  shared_data = 42;
+  sem.release();
+
+  t.join();
+}
+```
+* try_acquire_until[color ff0000]
+* release()[link release.md]
+* std::chrono::system_clock[link /reference/chrono/system_clock.md]
+
+### 出力例
+```
+42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 11.0
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/contains.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/set/multiset/contains.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/contains.md b/reference/set/multiset/contains.md
index 7e58b340e..80612edcd 100644
--- a/reference/set/multiset/contains.md
+++ b/reference/set/multiset/contains.md
@@ -64,7 +64,7 @@ contain
 ### 処理系
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1
 
 ## 参照
 - [P0458R2 Checking for Existence of an Element in Associative Containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0458r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>merge -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/merge.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/set/multiset/merge.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/merge.md b/reference/set/multiset/merge.md
index d9214ad05..89d70b14d 100644
--- a/reference/set/multiset/merge.md
+++ b/reference/set/multiset/merge.md
@@ -36,7 +36,7 @@ template&amp;lt;class C2&amp;gt;
 
 
 ## 備考
-`source` の転送された要素へのポインタおよび参照は、それらと同じ要素を参照するが、`*this` のメンバとして参照する。また、転送された要素を参照する反復子は、引き続きその要素を参照するが、転送後は `source` ではなく `*this` への反復子として動作する。
+`source` の転送された要素へのポインタおよび参照は、それらと同じ要素を参照するが、`*this` のメンバとして参照する。また、転送された要素を参照するイテレータは、引き続きその要素を参照するが、転送後は `source` ではなく `*this` へのイテレータとして動作する。
 
 
 ## 例外 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/set/set/contains.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/set/set/contains.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/contains.md b/reference/set/set/contains.md
index e70804d6d..6100e511e 100644
--- a/reference/set/set/contains.md
+++ b/reference/set/set/contains.md
@@ -64,7 +64,7 @@ contain
 ### 処理系
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1
 
 ## 参照
 - [P0458R2 Checking for Existence of an Element in Associative Containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0458r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shared_lock -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/shared_mutex/shared_lock.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/shared_mutex/shared_lock.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/shared_mutex/shared_lock.md b/reference/shared_mutex/shared_lock.md
index 9d45ab993..f08328930 100644
--- a/reference/shared_mutex/shared_lock.md
+++ b/reference/shared_mutex/shared_lock.md
@@ -21,7 +21,7 @@ namespace std {
 
 このクラスは、メンバ変数で保持しているミューテックスオブジェクトを、メンバ関数のスコープでロック取得し、手放すというようにして使用する。この手法は、[Scoped Locking Pattern](http://www.cs.wustl.edu/~schmidt/PDF/ScopedLocking.pdf)として知られている。
 
-テンプレートパラメータ`Mutex`は、`lock_shared()`／`unlock_shared()`メンバ関数を持つあらゆるミューテックスクラスを扱うためのものである。ミューテックス型をパラメータ化するScoped Locking手法は、[Strategized Locking Pattern](http://wiki.hsr.ch/PnProg/files/StrategizedLocking.pdf)として知られている。
+テンプレートパラメータ`Mutex`は、`lock_shared()`／`unlock_shared()`メンバ関数を持つあらゆるミューテックスクラスを扱うためのものである。ミューテックス型をパラメータ化するScoped Locking手法は、[Strategized Locking Pattern](https://wiki.hsr.ch/PnProg/files/StrategizedLocking.pdf)として知られている。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_lock_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/shared_mutex/shared_lock/try_lock_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/shared_mutex/shared_lock/try_lock_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/shared_mutex/shared_lock/try_lock_until.md b/reference/shared_mutex/shared_lock/try_lock_until.md
index c28767c9c..15fc43a46 100644
--- a/reference/shared_mutex/shared_lock/try_lock_until.md
+++ b/reference/shared_mutex/shared_lock/try_lock_until.md
@@ -15,6 +15,10 @@ bool try_lock_until(const chrono::time_point&amp;lt;Clock, Duration&amp;gt;&amp;amp; abs_time);
 タイムアウトする絶対時間を指定して共有ロックの取得を試みる
 
 
+## テンプレートパラメータ制約
+- [`chrono::is_clock_v`](/reference/chrono/is_clock.md)`&amp;lt;Clock&amp;gt;`が`true`であること (C++20)
+
+
 ## 効果
 ```cpp
 pm-&amp;gt;try_lock_until_shared(abs_time);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_lock_shared_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/try_lock_shared_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/shared_mutex/shared_timed_mutex/try_lock_shared_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/shared_mutex/shared_timed_mutex/try_lock_shared_until.md b/reference/shared_mutex/shared_timed_mutex/try_lock_shared_until.md
index 0dede3bb3..254f3fa17 100644
--- a/reference/shared_mutex/shared_timed_mutex/try_lock_shared_until.md
+++ b/reference/shared_mutex/shared_timed_mutex/try_lock_shared_until.md
@@ -19,6 +19,10 @@ bool try_lock_shared_until(const chrono::time_point&amp;lt;Clock, Duration&amp;gt;&amp;amp; abs_time);
 この関数を呼び出したスレッドが、ミューテックスの排他所有権と共有所有権のいずれもを保持していないこと。
 
 
+## テンプレートパラメータ制約
+- [`chrono::is_clock_v`](/reference/chrono/is_clock.md)`&amp;lt;Clock&amp;gt;`が`true`であること (C++20)
+
+
 ## 効果
 `abs_time`パラメータで指定された絶対時間に到達するまで、ミューテックスの共有所有権の取得を試みる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_lock_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/try_lock_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/shared_mutex/shared_timed_mutex/try_lock_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/shared_mutex/shared_timed_mutex/try_lock_until.md b/reference/shared_mutex/shared_timed_mutex/try_lock_until.md
index cd70394a1..e186a92d9 100644
--- a/reference/shared_mutex/shared_timed_mutex/try_lock_until.md
+++ b/reference/shared_mutex/shared_timed_mutex/try_lock_until.md
@@ -19,6 +19,10 @@ bool try_lock_until(const chrono::time_point&amp;lt;Clock, Duration&amp;gt;&amp;amp; abs_time);
 この関数を呼び出したスレッドが、ミューテックスの排他所有権と共有所有権のいずれもを保持していないこと。
 
 
+## テンプレートパラメータ制約
+- [`chrono::is_clock_v`](/reference/chrono/is_clock.md)`&amp;lt;Clock&amp;gt;`が`true`であること (C++20)
+
+
 ## 効果
 `abs_time`パラメータで指定された絶対時間に到達するまで、ミューテックスの排他所有権の取得を試みる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/append.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string/basic_string/append.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/append.md b/reference/string/basic_string/append.md
index 84dc55898..749f03b51 100644
--- a/reference/string/basic_string/append.md
+++ b/reference/string/basic_string/append.md
@@ -94,7 +94,7 @@ basic_string&amp;amp; append(const T&amp;amp; t,
   return append(sv.substr(pos, n));
   ```
   * basic_string_view[link /reference/string_view/basic_string_view.md]
-  * substr[link /reference/string_view/basic_string_view/append.md]
+  * substr[link /reference/string_view/basic_string_view/substr.md]
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/assign.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string/basic_string/assign.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/assign.md b/reference/string/basic_string/assign.md
index 7f3cdf1ac..6db2861d7 100644
--- a/reference/string/basic_string/assign.md
+++ b/reference/string/basic_string/assign.md
@@ -87,7 +87,7 @@ basic_string&amp;amp; assign(const T&amp;amp; t,
   return assign(sv.substr(pos, n));
   ```
   * basic_string_view[link /reference/string_view/basic_string_view.md]
-  * substr[link /reference/string_view/basic_string_view/append.md]
+  * substr[link /reference/string_view/basic_string_view/substr.md]
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>compare -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/compare.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string/basic_string/compare.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/compare.md b/reference/string/basic_string/compare.md
index 237c1c2be..9e38cd5a4 100644
--- a/reference/string/basic_string/compare.md
+++ b/reference/string/basic_string/compare.md
@@ -73,7 +73,7 @@ int compare(size_type pos1,
   return s.substr(pos1, n1).compare(sv.substr(pos2, n2));
   ```
   * basic_string_view[link /reference/string_view/basic_string_view.md]
-  * substr[link /reference/string_view/basic_string_view/append.md]
+  * substr[link /reference/string_view/basic_string_view/substr.md]
   * compare[link /reference/string_view/basic_string_view/compare.md]
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/insert.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string/basic_string/insert.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/insert.md b/reference/string/basic_string/insert.md
index 1e5ed4928..a6cd2da63 100644
--- a/reference/string/basic_string/insert.md
+++ b/reference/string/basic_string/insert.md
@@ -87,7 +87,7 @@ basic_string&amp;amp; insert(size_type pos1,
   return insert(pos1, sv.substr(pos2, n));
   ```
   * basic_string_view[link /reference/string_view/basic_string_view.md]
-  * substr[link /reference/string_view/basic_string_view/append.md]
+  * substr[link /reference/string_view/basic_string_view/substr.md]
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string/basic_string/op_plus.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus.md b/reference/string/basic_string/op_plus.md
index a26f079e3..da8d2c48b 100644
--- a/reference/string/basic_string/op_plus.md
+++ b/reference/string/basic_string/op_plus.md
@@ -46,23 +46,23 @@ basic_string&amp;lt;charT, traits, Allocator&amp;gt;
 
 template &amp;lt;class charT, class traits, class Allocator&amp;gt;
 basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs,
-            const charT* lhs);                                  // (9)
+  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+            const charT* rhs);                                  // (9)
 
 template &amp;lt;class charT, class traits, class Allocator&amp;gt;
 basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs,
-            const charT* lhs);                                  // (10) C++11 から
+  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+            const charT* rhs);                                  // (10) C++11 から
 
 template &amp;lt;class charT, class traits, class Allocator&amp;gt;
 basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs,
-            charT lhs);                                         // (11)
+  operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+            charT rhs);                                         // (11)
 
 template &amp;lt;class charT, class traits, class Allocator&amp;gt;
 basic_string&amp;lt;charT, traits, Allocator&amp;gt;
-  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs,
-            charT lhs);                                         // (12) C++11 から
+  operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+            charT rhs);                                         // (12) C++11 から
 ```
 
 ## 概要
@@ -70,6 +70,9 @@ basic_string&amp;lt;charT, traits, Allocator&amp;gt;
 
 
 ## 戻り値
+
+### C++17まで
+
 - (1) [`basic_string`](op_constructor.md)`&amp;lt;charT, traits, Allocator&amp;gt;(lhs).`[`append`](append.md)`(rhs)`
 
 - (2) `std::`[`move`](/reference/utility/move.md)`(lhs.`[`append`](append.md)`(rhs))`
@@ -95,10 +98,102 @@ basic_string&amp;lt;charT, traits, Allocator&amp;gt;
 
 - (12) `std::`[`move`](/reference/utility/move.md)`(lhs.`[`append`](append.md)`(1, rhs))`
 
+### C++20から
+
+- (1)(9) : 以下と等価
+  ```cpp
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt; r = lhs;
+  r.append(rhs);
+  return r;
+  ```
+  * append[link append.md]
+
+- (2)(10) : 以下と等価
+  ```cpp
+  lhs.append(rhs);
+  return std::move(lhs);
+  ```
+  * append[link append.md]
+
+- (3)(6) : 以下と等価
+  ```cpp
+  rhs.insert(0, lhs);
+  return std::move(rhs);
+  ```
+  * insert[link insert.md]
+
+- (4) : 呼び出しの後でも`lhs`と`rhs`は有効だが未規定な状態のままであることを除いて、以下と等価
+  ```cpp
+  lhs.append(rhs);
+  return std::move(lhs);
+  ```
+  * append[link append.md]
+
+- (5) : 以下と等価
+  ```cpp
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt; r = rhs;
+  r.insert(0, lhs);
+  return r;
+  ```
+  * insert[link insert.md]
+
+- (7) : 以下と等価
+  ```cpp
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt; r = rhs;
+  r.insert(r.begin(), lhs);
+  return r;
+  ```
+  * insert[link insert.md]
+  * begin[link begin.md]
+
+- (8) : 以下と等価
+  ```cpp
+  rhs.insert(rhs.begin(), lhs);
+  return std::move(rhs);
+  ```
+  * insert[link insert.md]
+  * begin[link begin.md]
+
+- (11) : 以下と等価
+  ```cpp
+  basic_string&amp;lt;charT, traits, Allocator&amp;gt; r = lhs;
+  r.push_back(rhs);
+  return r;
+  ```
+  * push_back[link push_back.md]
+
+- (12) : 以下と等価
+  ```cpp
+  lhs.push_back(rhs);
+  return std::move(lhs);
+  ```
+  * push_back[link push_back.md]
+
 
 ## 備考
 (5)、(6) の形式の `lhs`、および、(9)、(10) の形式の `rhs` の文字列長算出のために `traits::length()` が使用される
 
+## アロケータの伝播
+
+C++20からこの演算子による文字列連結時にアロケータがどのように伝播するかが変更された。C++17までの仕様及び各実装とC++20からの各オーバーロード利用時の結果オブジェクトへのアロケータ供給元は次のようになる。なお、SOCCCは[`select_on_container_copy_construction`](/reference/memory/allocator_traits/select_on_container_copy_construction.md)の略。
+
+|オーバーロード|C++17まで|GCC|clang|MSVC|C++20から|
+|----|----|----|----|----|----|
+|(1) : `lhs + rhs`|`lhs`からのSOCCC|`lhs`からのSOCCC|`lhs`|新規にデフォルト構築|`lhs`からのSOCCC|
+|(2) : `std::move(lhs) + rhs`|`lhs`|`lhs`|`lhs`|`lhs`|`lhs`|
+|(3) : `lhs + std::move(rhs)`|`rhs`|`rhs`|`rhs`|`rhs`|`rhs`|
+|(4) : `std::move(lhs) + std::move(rhs)`|`lhs`または`rhs`|`lhs`|`lhs`|`lhs`|`lhs`|
+|(5) : `&amp;#34;lhs&amp;#34; + rhs`|新規にデフォルト構築|新規にデフォルト構築|`rhs`|新規にデフォルト構築|`lhs`からのSOCCC|
+|(6) : `&amp;#34;lhs&amp;#34; + std::move(rhs)`|`rhs`|`rhs`|`rhs`|`rhs`|`rhs`|
+|(7) : `&amp;#39;l&amp;#39; + rhs`|新規にデフォルト構築|新規にデフォルト構築|`rhs`|新規にデフォルト構築|`lhs`からのSOCCC|
+|(8) : `&amp;#39;l&amp;#39; + std::move(rhs)`|`rhs`|`rhs`|`rhs`|`rhs`|`rhs`|
+|(9) : `lhs + &amp;#34;rhs&amp;#34;`|新規にデフォルト構築|`lhs`からのSOCCC|`lhs`|新規にデフォルト構築|`lhs`からのSOCCC|
+|(10) : `std::move(lhs) + &amp;#34;rhs&amp;#34;`|`lhs`|`lhs`|`lhs`|`lhs`|`lhs`|
+|(11) : `lhs + &amp;#39;r&amp;#39;`|新規にデフォルト構築|`lhs`からのSOCCC|`lhs`|新規にデフォルト構築|`lhs`からのSOCCC|
+|(12) : `std::move(lhs) + &amp;#39;r&amp;#39;`|`lhs`|`lhs`|`lhs`|`lhs`|`lhs`|
+
+
+表にあるように、C++17までの仕様に完全に準拠している実装は無かった上に各実装によって伝播仕様がバラバラだったため、この変更によって影響を受けるコードはほぼ無いと思われる。
 
 ## 例
 ```cpp example
@@ -129,3 +224,6 @@ Hello, world!
 | [`append`](append.md)       | 文字／文字列を追加する |
 | [`push_back`](push_back.md) | 文字を追加する         |
 | [`insert`](insert.md)       | 文字／文字列を挿入する |
+
+## 参照
+- [P1165R1 Make stateful allocator propagation more consistent for operator+(basic_string)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1165r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string/basic_string/replace.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/replace.md b/reference/string/basic_string/replace.md
index c7c8aaf67..ec25752e6 100644
--- a/reference/string/basic_string/replace.md
+++ b/reference/string/basic_string/replace.md
@@ -111,13 +111,14 @@ basic_string&amp;amp; replace(const_iterator i1,
   return replace(pos1, n1, sv.data(), sv.size());
   ```
   * basic_string_view[link /reference/string_view/basic_string_view.md]
+
 - (13) : 以下と等価。
   ```cpp
   basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
   return replace(pos1, n1, sv.substr(pos2, n2));
   ```
   * basic_string_view[link /reference/string_view/basic_string_view.md]
-  * substr[link /reference/string_view/basic_string_view/append.md]
+  * substr[link /reference/string_view/basic_string_view/substr.md]
 
 - (14) : 以下と等価。
   ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stof -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string/stof.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string/stof.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stof.md b/reference/string/stof.md
index 4572c43c7..70de447f1 100644
--- a/reference/string/stof.md
+++ b/reference/string/stof.md
@@ -16,7 +16,7 @@ namespace std {
 
 
 ## 効果
-パラメータ`str`が`string`型であれば`std::strtod(str.c_str(), &amp;amp;end)`、`wstring`であれば`std::wcstof(str.c_str(), &amp;amp;end)`を呼び出して、その戻り値を返す。
+パラメータ`str`が`string`型であれば`std::strtof(str.c_str(), &amp;amp;end)`、`wstring`であれば`std::wcstof(str.c_str(), &amp;amp;end)`を呼び出して、その戻り値を返す。
 
 パラメータ`idx`が非`nullptr`の場合、変換に使用されなかった要素のインデックス（`end - str.c_str()`）が格納される。
 
@@ -28,7 +28,7 @@ namespace std {
 ## 例外
 - 数値への変換が行われなかった場合、[`std::invalid_argument`](/reference/stdexcept.md)が送出される。
 - 以下の条件に合致した場合、[`std::out_of_range`](/reference/stdexcept.md)が送出される。
-    - `std::strtoull()`関数が[`errno`](/reference/cerrno/errno.md)変数に[`ERANGE`](/reference/cerrno.md)を設定した場合
+    - `std::strtof()`関数が[`errno`](/reference/cerrno/errno.md)変数に[`ERANGE`](/reference/cerrno.md)を設定した場合
     - 結果が範囲外の値になった場合 (C++14)
 
 
@@ -40,7 +40,7 @@ namespace std {
 ### グローバルロケールの影響
 この関数は、`setlocale()`関数により挙動が変化する。
 
-- `strtod()`関数での文字列先頭の空白を読み飛ばす処理に、`&amp;lt;cctype&amp;gt;`の`isspace()`関数が使用される。
+- `strtof()`関数での文字列先頭の空白を読み飛ばす処理に、`&amp;lt;cctype&amp;gt;`の`isspace()`関数が使用される。
 - 小数点記号は`LC_NUMERIC`で指定されたものが使用される。
 
 
@@ -122,7 +122,7 @@ float stof(const std::string&amp;amp; str, std::size_t* idx = nullptr) {
   const char* p = str.c_str();
   char* end;
   errno = 0;
-  double x = std::strtod(p, &amp;amp;end);
+  double x = std::strtof(p, &amp;amp;end);
   if (p == end) {
     throw std::invalid_argument(&amp;#34;stof&amp;#34;);
   }
@@ -173,7 +173,7 @@ float stof(const std::wstring&amp;amp; str, std::size_t* idx = nullptr) {
 ## 関連リンク
 ### C標準ライブラリに由来する関数
 - `atof`: `stold`は`atof`を`std::string`および`std::wsting`に対応させ、戻り値の型を`float`に変更したものと見なせる。
-- `strtod`, `wcstof`: `stof`は`strtod`および`wcstof`をそれぞれ`std::string`と`std::wsting`に対応させたものと見なせる。
+- `strtof`, `wcstof`: `stof`は`strtof`および`wcstof`をそれぞれ`std::string`と`std::wsting`に対応させたものと見なせる。
 
 ### ファミリー
 - [`stoi`](stoi.md): 戻り値の型が`int`となったもの。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stold -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string/stold.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string/stold.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stold.md b/reference/string/stold.md
index daf3b39ca..73df518c8 100644
--- a/reference/string/stold.md
+++ b/reference/string/stold.md
@@ -16,7 +16,7 @@ namespace std {
 
 
 ## 効果
-パラメータ`str`が`string`型であれば`std::strtod(str.c_str(), &amp;amp;end)`、`wstring`型であれば`std::wcstold(str.c_str(), &amp;amp;end)`を呼び出して、その戻り値を返す。
+パラメータ`str`が`string`型であれば`std::strtold(str.c_str(), &amp;amp;end)`、`wstring`型であれば`std::wcstold(str.c_str(), &amp;amp;end)`を呼び出して、その戻り値を返す。
 
 `idx`が非`nullptr`の場合、変換に使用されなかった要素のインデックス（`end - str.c_str()`）が格納される。
 
@@ -28,7 +28,7 @@ namespace std {
 ## 例外
 - 数値への変換が行われなかった場合、`std::invalid_argument`が送出される。
 - 以下の条件に合致した場合、[`std::out_of_range`](/reference/stdexcept.md)が送出される。
-    - `std::strtoull()`関数が[`errno`](/reference/cerrno/errno.md)変数に[`ERANGE`](/reference/cerrno.md)を設定した場合
+    - `std::strtold()`関数が[`errno`](/reference/cerrno/errno.md)変数に[`ERANGE`](/reference/cerrno.md)を設定した場合
     - 結果が範囲外の値になった場合 (C++14)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoll -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string/stoll.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string/stoll.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stoll.md b/reference/string/stoll.md
index b1616fb20..8d0012f11 100644
--- a/reference/string/stoll.md
+++ b/reference/string/stoll.md
@@ -50,7 +50,7 @@ namespace std {
 ### グローバルロケールの影響
 この関数は、`setlocale()`関数により挙動が変化する。
 
-`strtol()`関数での文字列先頭の空白を読み飛ばす処理に、`&amp;lt;cctype&amp;gt;`の`isspace()`関数が使用されるためである。
+`strtoll()`関数での文字列先頭の空白を読み飛ばす処理に、`&amp;lt;cctype&amp;gt;`の`isspace()`関数が使用されるためである。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoul -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string/stoul.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string/stoul.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/stoul.md b/reference/string/stoul.md
index 655a6fbec..b54110797 100644
--- a/reference/string/stoul.md
+++ b/reference/string/stoul.md
@@ -50,7 +50,7 @@ namespace std {
 ### グローバルロケールの影響
 この関数は、`setlocale()`関数により挙動が変化する。
 
-`strtol()`関数での文字列先頭の空白を読み飛ばす処理に、`&amp;lt;cctype&amp;gt;`の`isspace()`関数が使用されるためである。
+`strtoul()`関数での文字列先頭の空白を読み飛ばす処理に、`&amp;lt;cctype&amp;gt;`の`isspace()`関数が使用されるためである。
 
 
 ## 例
@@ -238,7 +238,7 @@ unsigned long stoul(const std::wstring&amp;amp; str, std::size_t* idx = nullptr, unsigne
 ## 関連リンク
 ### C標準ライブラリに由来する関数
 - `atol`: `stoul`は`atol`を`std::string`および`std::wsting`に対応させ、戻り値の型を`unsigned long`に変更したものと見なせる。
-- `strtoul`, `wcstoul`: `stoul`は`wcstoull`および`wcstoul`をそれぞれ`std::string`と`std::wsting`に対応させたものと見なせる。
+- `strtoul`, `wcstoul`: `stoul`は`strtoul`および`wcstoul`をそれぞれ`std::string`と`std::wsting`に対応させたものと見なせる。
 
 ### ファミリー
 - [`stoi`](stoi.md): 戻り値の型が`int`となったもの。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_not_of -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/find_last_not_of.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string_view/basic_string_view/find_last_not_of.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/find_last_not_of.md b/reference/string_view/basic_string_view/find_last_not_of.md
index bca4c0c79..abb43beed 100644
--- a/reference/string_view/basic_string_view/find_last_not_of.md
+++ b/reference/string_view/basic_string_view/find_last_not_of.md
@@ -20,10 +20,10 @@ constexpr size_type find_last_not_of(const CharT* s,
 ## 概要
 指定された文字列中のいずれかの文字にも一致しない最後の場所を検索する。
 
-- (1) : 指定した位置`pos`から、文字列`sv`内のいずれかの文字にも一致しない最後の位置を検索する
-- (2) : 指定した位置`pos`から、文字`c`に一致しない最後の位置を検索する
-- (3) : 指定した位置`pos`から、文字列`s`の先頭`n`文字のいずれかの文字にも一致しない最後の位置を検索する
-- (4) : 指定した位置`pos`から、文字列`s`内のいずれかの文字にも一致しない最後の位置を検索する
+- (1) : 指定した位置`pos`より前で、文字列`sv`内のいずれかの文字にも一致しない最後の位置を検索する
+- (2) : 指定した位置`pos`より前で、文字`c`に一致しない最後の位置を検索する
+- (3) : 指定した位置`pos`より前で、文字列`s`の先頭`n`文字のいずれかの文字にも一致しない最後の位置を検索する
+- (4) : 指定した位置`pos`より前で、文字列`s`内のいずれかの文字にも一致しない最後の位置を検索する
 
 
 ## 戻り値
@@ -39,8 +39,8 @@ constexpr size_type find_last_not_of(const CharT* s,
 
 ## 備考
 - 文字列の一致は、文字列の各文字について `traits_type::eq()` を用いて検査される。  
-    例えば、(1) の形式の場合、以下のような条件を満たす最小の `xpos` を求める。
-    * `pos &amp;lt;= xpos` かつ `xpos + sv.size() &amp;lt;= size()`
+    例えば、(1) の形式の場合、以下のような条件を満たす最大の `xpos` を求める。
+    * `xpos &amp;lt;= pos` かつ `xpos + sv.size() &amp;lt;= size()`
     * `0 &amp;lt;= I` かつ `I &amp;lt; sv.size()` を満たす全ての `I` について、`traits_type::eq(at(xpos + I), sv.at(I))`
 - (4) の形式の場合、`s` の文字列長は `traits_type::length(s)` で求められる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_of -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/find_last_of.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string_view/basic_string_view/find_last_of.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/find_last_of.md b/reference/string_view/basic_string_view/find_last_of.md
index b91b18d43..d6580a267 100644
--- a/reference/string_view/basic_string_view/find_last_of.md
+++ b/reference/string_view/basic_string_view/find_last_of.md
@@ -15,10 +15,10 @@ constexpr size_type find_last_of(const CharT* s, size_type pos = npos) const;
 ## 概要
 指定された文字列中のいずれかの文字が出現する最後の場所を検索する。
 
-- (1) : 指定した位置`pos`から、文字列`sv`内のいずれかの文字が最後に現れる位置を検索する
-- (2) : 指定した位置`pos`から、文字`c`が最後に現れる位置を検索する
-- (3) : 指定した位置`pos`から、文字列`s`の先頭`n`文字のいずれかの文字が最後に現れる位置を検索する
-- (4) : 指定した位置`pos`から、文字列`s`内のいずれかの文字が最後に現れる位置を検索する
+- (1) : 指定した位置`pos`より前で、文字列`sv`内のいずれかの文字が最後に現れる位置を検索する
+- (2) : 指定した位置`pos`より前で、文字`c`が最後に現れる位置を検索する
+- (3) : 指定した位置`pos`より前で、文字列`s`の先頭`n`文字のいずれかの文字が最後に現れる位置を検索する
+- (4) : 指定した位置`pos`より前で、文字列`s`内のいずれかの文字が最後に現れる位置を検索する
 
 
 ## 戻り値
@@ -34,8 +34,8 @@ constexpr size_type find_last_of(const CharT* s, size_type pos = npos) const;
 
 ## 備考
 - 文字列の一致は、文字列の各文字について `traits_type::eq()` を用いて検査される。  
-    例えば、(1) の形式の場合、以下のような条件を満たす最小の `xpos` を求める。
-    * `pos &amp;lt;= xpos` かつ `xpos + sv.size() &amp;lt;= size()`
+    例えば、(1) の形式の場合、以下のような条件を満たす最大の `xpos` を求める。
+    * `xpos &amp;lt;= pos` かつ `xpos + sv.size() &amp;lt;= size()`
     * `0 &amp;lt;= I` かつ `I &amp;lt; sv.size()` を満たす全ての `I` について、`traits_type::eq(at(xpos + I), sv.at(I))`
 - (4) の形式の場合、`s` の文字列長は `traits_type::length(s)` で求められる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rfind -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/rfind.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/string_view/basic_string_view/rfind.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/rfind.md b/reference/string_view/basic_string_view/rfind.md
index 864e9b1bd..c15827767 100644
--- a/reference/string_view/basic_string_view/rfind.md
+++ b/reference/string_view/basic_string_view/rfind.md
@@ -15,10 +15,10 @@ constexpr size_type rfind(const CharT* s, size_type pos = npos) const;
 ## 概要
 最後に現れる指定文字列を検索する。
 
-- (1) : 指定した位置`pos`から、`*this`に含まれる部分文字列`sv`が最後に現れる位置を検索する
-- (2) : 指定した位置`pos`から、`*this`に含まれる文字`c`が最後に現れる位置を検索する
-- (3) : 指定した位置`pos`から、`*this`に含まれる部分文字列`s`の先頭`n`文字が最後に現れる位置を検索する
-- (4) : 指定した位置`pos`から、`*this`に含まれる部分文字列`s`が最後に現れる位置を検索する
+- (1) : 指定した位置`pos`より前で、`*this`に含まれる部分文字列`sv`が最後に現れる位置を検索する
+- (2) : 指定した位置`pos`より前で、`*this`に含まれる文字`c`が最後に現れる位置を検索する
+- (3) : 指定した位置`pos`より前で、`*this`に含まれる部分文字列`s`の先頭`n`文字が最後に現れる位置を検索する
+- (4) : 指定した位置`pos`より前で、`*this`に含まれる部分文字列`s`が最後に現れる位置を検索する
 
 
 ## 戻り値
@@ -35,8 +35,8 @@ constexpr size_type rfind(const CharT* s, size_type pos = npos) const;
 ## 備考
 - `pos` は比較対象となる最後の文字位置では無いことに注意。（例を参照）
 - 文字列の一致は、文字列の各文字について `traits_type::eq()` を用いて検査される。  
-	例えば、(1) の形式の場合、以下のような条件を満たす最小の `xpos` を求める。
-	* `pos &amp;lt;= xpos` かつ `xpos + sv.size() &amp;lt;= size()`
+	例えば、(1) の形式の場合、以下のような条件を満たす最大の `xpos` を求める。
+	* `xpos &amp;lt;= pos` かつ `xpos + sv.size() &amp;lt;= size()`
 	* `0 &amp;lt;= I` かつ `I &amp;lt; sv.size()` を満たす全ての `I` について、`traits_type::eq(at(xpos + I), sv.at(I))`
 - (4) の形式の場合、`s` の文字列長は `traits_type::length(s)` で求められる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>thread -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/thread.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/thread.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;thread&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;thread&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt;ヘッダはマルチスレッド制御に関するクラス・関数を定義する。&lt;br /&gt;
スレッドサポートはC++11にて導入された。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/thread.html&#34;&gt;thread&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッド クラス(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;thread::id&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッド識別子 クラス(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/this_thread.html&#34;&gt;this_thread&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;現スレッドの制御機能を提供する名前空間 (namespace)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/jthread.html&#34;&gt;jthread&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止要求を扱ったり、自動で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/jthread/join.md.nolink&#34;&gt;join&lt;/a&gt;&lt;/code&gt;する機能を持つスレッド クラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 4.6.3, 4.7.0
     GCC／pthread環境でスレッドサポートを有効化するには -pthread オプション指定が必要。（GCC 4.7.0で確認）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2012, 2013, 2015&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.decadent.org.uk/pipermail/cpp-threads/&#34; target=&#34;_blank&#34;&gt;The cpp-threads Archives&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11の策定時に、C++標準の言語とライブラリに並行プログラミングの提案を行うため使用されていたメーリングリストのアーカイブです。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>jthread -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/thread/jthread.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread.md b/reference/thread/jthread.md
new file mode 100644
index 000000000..92d54a113
--- /dev/null
+++ b/reference/thread/jthread.md
@@ -0,0 +1,111 @@
+# jthread
+* thread[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  class jthread;
+}
+```
+
+## 概要
+クラス`jthread`は、[`thread`](thread.md)と同じく、新しい実行のスレッド(thread of execution)（以下、単にスレッドとする）の作成／待機／その他操作を行う機構を提供する。このクラスはさらに、実行しているスレッドに対する停止要求を扱う機能や、自動で[`join`](jthread/join.md.nolink)操作を行う機能を提供する。
+
+## `thread`クラスとの違い
+
+- 停止要求のサポート: `jthread`は自身と関連付けられたスレッドに対する停止要求を扱う仕組みを提供する。このために[`&amp;lt;stop_token&amp;gt;`](/reference/stop_token/stop_token.md)ヘッダに定義されたクラスを利用する。
+- 自動join機能: `jthread`はデストラクタやムーブ代入演算子が呼び出されたとき、もし自身に関連付けられたスレッドが存在する場合は、スレッドの停止要求を作成し、その後[`join()`](jthread/join.md.nolink)を呼び出してスレッドの終了を待機する。そのため`thread`クラスと異なり、[`joinable()`](jthread/joinable.md.nolink) `==` `true` であってもデストラクタやムーブ代入演算子を呼び出し可能であり、[`std::terminate()`](/reference/exception/terminate.md)は呼び出されない。
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|----------------------------------------------|--------------------------------------------------------------------|-------|
+| [`(constructor)`](jthread/op_constructor.md.nolink)        | コンストラクタ | C++20 |
+| [`(destructor)`](jthread/op_destructor.md.nolink)        | デストラクタ | C++20 |
+| [`operator=`](jthread/op_assign.md.nolink)         | 代入演算子 | C++20 |
+| [`swap`](jthread/swap.md.nolink)                   | 別の`jthread`と交換する | C++20 |
+| [`joinable`](jthread/joinable.md.nolink)           | スレッドに関連付けられているか否かを取得する | C++20 |
+| [`join`](jthread/join.md.nolink)                   | スレッドが終了するまで待機する | C++20 |
+| [`detach`](jthread/detach.md.nolink)               | スレッドの管理を手放す | C++20 |
+| [`get_id`](jthread/get_id.md.nolink)               | 関連付けられているスレッドのスレッド識別子を取得する | C++20 |
+| [`native_handle`](jthread/native_handle.md.nolink) | スレッドに関連付けられたネイティブハンドルを取得する［処理系定義］ | C++20 |
+| [`get_stop_source`](jthread/get_stop_source.md.nolink) | 停止要求を作成するための[`stop_source`](/reference/stop_token/stop_source.md)オブジェクトを取得する | C++20 |
+| [`get_stop_token`](jthread/get_stop_token.md.nolink) | 停止状態を問い合わせるための[`stop_token`](/reference/stop_token/stop_token.md)オブジェクトを取得する | C++20 |
+| [`request_stop`](jthread/request_stop.md.nolink) | スレッドに対する停止要求を作成する | C++20 |
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------------------------------------------|----------------------------------------------------|-------|
+| [`hardware_concurrency`](jthread/hardware_concurrency.md.nolink) | 処理系によりサポートされるスレッド並行数を取得する | C++20 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------------------------|----------------------------------------------|-------|
+| [`id`](jthread/id.md.nolink) | スレッド識別子 (type-alias) | C++20 |
+| `native_handle_type`   | ネイティブハンドル型 (type-alias)［処理系定義］ | C++20 |
+
+
+## 非メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|---------------------------------|---------------------------------------|-------|
+| [`swap`](jthread/swap_free.md.nolink) | 2つの`jthread`オブジェクトを入れ替える | C++20 |
+
+
+## 備考
+- 型`native_handle_type`およびメンバ関数`native_handle`について、同メンバの存在有無およびその意味は処理系定義となる。
+- 型`id`および型`native_handle_type`は、`thread`クラスで定義しているものと同じものを使用する。
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;thread&amp;gt;
+
+int main()
+{
+  int x = 0, y = 0;
+
+  std::jthread t([&amp;amp;](std::stop_token st) { x++; });
+
+  // スレッドに対する停止要求の作成に合わせて呼び出される
+  // コールバックを定義する。
+  std::stop_callback sc { t.get_stop_token(), [&amp;amp;] { y++; }};
+
+  assert(y == 0);
+
+  // 明示的にjoin()を呼び出さずにtを上書きする。
+  // このとき、ムーブ代入演算子の呼び出しの中で、
+  // 自動で停止要求の作成とjoin()の呼び出しが行われる。
+  t = std::jthread{};
+
+  assert(x == 1 &amp;amp;&amp;amp; y == 1);
+
+  return 0;
+}
+```
+* std::jthread[link jthread.md]
+* std::stop_token[link /reference/stop_token/stop_token.md]
+* std::stop_callback[link /reference/stop_token/stop_callback.md]
+* get_stop_token()[link jthread/get_stop_token.md.nolink]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+
+## 参照
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sleep_until -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/sleep_until.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/thread/this_thread/sleep_until.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/sleep_until.md b/reference/thread/this_thread/sleep_until.md
index 832ef42a4..4fd2cf73a 100644
--- a/reference/thread/this_thread/sleep_until.md
+++ b/reference/thread/this_thread/sleep_until.md
@@ -18,6 +18,10 @@ namespace this_thread {
 指定した絶対時刻を過ぎるまで現スレッドをブロックする。
 
 
+## テンプレートパラメータ制約
+- [`chrono::is_clock_v`](/reference/chrono/is_clock.md)`&amp;lt;Clock&amp;gt;`が`true`であること (C++20)
+
+
 ## 効果
 引数 `abs_time`で指定した絶対時間を経過するまで現在のスレッド、すなわちこの関数を呼び出したスレッド自身をブロックする。指定した絶対時間 **以上** の時刻になると、現スレッドのブロックが解除されて後続処理の実行が開始される。なお、タイマーの精度は処理系依存。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_from_tuple -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/tuple/make_from_tuple.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/tuple/make_from_tuple.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/make_from_tuple.md b/reference/tuple/make_from_tuple.md
index 4d425654d..c8bb8ed53 100644
--- a/reference/tuple/make_from_tuple.md
+++ b/reference/tuple/make_from_tuple.md
@@ -25,7 +25,7 @@ tuple-likeな型とは主に[`std::tuple`](../tuple.md)の事であるが、[`st
 より詳細には、[`std::get`](/reference/array/array/get.md)（インデックス指定）と[`std::tuple_size`](/reference/array/array/tuple_size.md)が適用可能な型である。
 
 ## 戻り値
-`Tuple`に含まれる型の値をその順番通りに型`T`のコンストラクタに[`std::forward`](`/reference/utility/forward.md`)して構築された`T`のオブジェクト。
+`Tuple`に含まれる型の値をその順番通りに型`T`のコンストラクタに[`std::forward`](/reference/utility/forward.md)して構築された`T`のオブジェクト。
 
 ## 例外
 `Tuple`に含まれる型の値を受け取る`T`のコンストラクタが例外を送出する可能性がある場合は、この関数も例外を送出しうる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>aligned_storage -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/aligned_storage.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/type_traits/aligned_storage.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/aligned_storage.md b/reference/type_traits/aligned_storage.md
index 550a7c960..8a8ed6135 100644
--- a/reference/type_traits/aligned_storage.md
+++ b/reference/type_traits/aligned_storage.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * class template[meta id-type]
 * cpp11[meta cpp]
+* cpp23deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -10,15 +11,18 @@ namespace std {
             std::size_t Align = default-alignment&amp;gt;
   struct aligned_storage {
     using type = …;
-  };
+  };                                                                   // (1) C++11
 
   template &amp;lt;std::size_t Len,
             std::size_t Align = default-alignment&amp;gt;
-  using aligned_storage_t = typename aligned_storage&amp;lt;Len,Align&amp;gt;::type; // C++14
+  using aligned_storage_t = typename aligned_storage&amp;lt;Len,Align&amp;gt;::type; // (2) C++14
 }
 ```
 * default-alignment[italic]
 
+この機能はC++23で非推奨となった。代わりに`alignas(T)` [`std::byte`](/reference/cstddef/byte.md)`[sizeof(T)];`を使用することを推奨する。
+
+
 ## 概要
 アライメント調整された領域を作る。
 
@@ -34,6 +38,40 @@ namespace std {
 `Align`のデフォルト値は、`Len`よりも大きくない、最も厳格なアライメント要件を持つ、C++の何らかのオブジェクト型のアラインメント値。
 
 
+## 非推奨の詳細 (C++23)
+この機能は、いくつかの点で高いレベルの有害になりえる：
+
+- この機能を呼び出すことで未定義動作を引き起こす (この型はストレージを提供するわけではない)
+- 保証が正しくない (標準では、型が少なくとも要求された以上の大きさであることのみを要件としているだけで、上限サイズを要求できない)
+- APIが多くの理由で間違っている。そのためにこのAPIを使うために繰り返し同じ事前作業が必要になる。API設計が間違っている理由は以下：
+    - `::type`の値にアクセスするために`reinterpret_cast`が必要となってしまう。これによって`constexpr`で使用できず、未定義動作を引き起こせてしまう
+    - C++14で導入された`aligned_storage_t`ではなく誤って`aligned_storage`を使用してしまい、その違いに気づきにくい (`aligned_storage`は`::type`を指定しなければならない)
+    - 少なくともNバイト以上という指定はできるが、実際のサイズ (上限サイズ) を指定できないため、必要以上のメモリが使用される可能性がある
+
+これらの問題は[`aligned_union`](aligned_union.md)も同様だが、とくに`aligned_storage`では以下のような問題がある：
+
+- テンプレートパラメータとして型をとらず、サイズをとってしまっている
+    - この機能は非常に稀な状況を除いて、`Align`パラメータは`Len`パラメータに対して決まった指定の仕方をする。第1テンプレート引数として`sizeof(T)`を指定するのであれば、第2テンプレート引数には`alignof(T)`を指定しなければならない。`typename aligned_storage&amp;lt;sizeof(T), alignof(T)&amp;gt;::type`
+- 第2テンプレートパラメータにデフォルト引数が設定されている
+    - このテンプレートパラメータは本来必要ないだけでなく、デフォルト引数が付けられてしまっている。コンパイラが`aligned_storage_t&amp;lt;sizeof(T)&amp;gt;`という使い方をやめさせる方法はない。第2テンプレートパラメータは実装定義のデフォルト値をもつが、`T`に対して十分な場合とそうでない場合がある。そのため、暗黙に不正確になることを許可してしまっている
+
+Facebookの`folly::aligned_storage_for_t`はこれらの問題を解決している。
+
+この機能を以下のように置き換えることを推奨する：
+
+```diff
+template &amp;lt;typename T&amp;gt;
+class MyContainer {
+  // [...]
+private:
+- std::aligned_storage_t&amp;lt;sizeof(T), alignof(T)&amp;gt; t_buff;
++ alignas(T) std::byte t_buff[sizeof(T)];
+  // [...]
+};
+```
+* std::byte[link /reference/cstddef/byte.md]
+
+
 ## 例
 ### スタック領域を使用するコンテナ実装の例 (C++11)
 ```cpp example
@@ -168,4 +206,6 @@ int main()
 ## 参照
 - [N3546 TransformationTraits Redux](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3546.pdf)
 - [N3655 TransformationTraits Redux, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3655.pdf)
-
+    - C++14で`aligned_storage_t`が定義された
+- [P1413R2 Deprecate `std::aligned_storage` and `std::aligned_union`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1413r2.pdf)
+    - C++23でこの機能が非推奨となった
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>aligned_union -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/aligned_union.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/type_traits/aligned_union.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/aligned_union.md b/reference/type_traits/aligned_union.md
index c8f94ee03..59f375ee6 100644
--- a/reference/type_traits/aligned_union.md
+++ b/reference/type_traits/aligned_union.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * class template[meta id-type]
 * cpp11[meta cpp]
+* cpp23deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -11,13 +12,16 @@ namespace std {
   struct aligned_union {
     using type = …;
     static constexpr std::size_t alignment_value = …;
-  };
+  };                                                                  // (1) C++11
 
   template &amp;lt;std::size_t Len, class... Types&amp;gt;
-  using aligned_union_t = typename aligned_union&amp;lt;Len,Types...&amp;gt;::type; // C++14
+  using aligned_union_t = typename aligned_union&amp;lt;Len,Types...&amp;gt;::type; // (2) C++14
 }
 ```
 
+この機能はC++23で非推奨となった。代わりに`alignas(Ts...)` [`std::byte`](/reference/cstddef/byte.md)`[`[`std::max`](/reference/algorithm/max.md)`({sizeof(Ts)...})];`を使用することを推奨する。
+
+
 ## 概要
 アライメント調整された共用体領域を作る。
 
@@ -32,6 +36,41 @@ namespace std {
 
 また、`Types...`全ての厳格なアライメント値を、[`std::size_t`](/reference/cstddef/size_t.md)型の静的メンバ定数`alignment_value`として定義する。
 
+
+## 非推奨の詳細 (C++23)
+この機能は、いくつかの点で高いレベルの有害になりえる：
+
+- この機能を呼び出すことで未定義動作を引き起こす (この型はストレージを提供するわけではない)
+- 保証が正しくない (標準では、型が少なくとも要求された以上の大きさであることのみを要件としているだけで、上限サイズを要求できない)
+- APIが多くの理由で間違っている。そのためにこのAPIを使うために繰り返し同じ事前作業が必要になる。API設計が間違っている理由は以下：
+    - `::type`の値にアクセスするために`reinterpret_cast`が必要となってしまう。これによって`constexpr`で使用できず、未定義動作を引き起こせてしまう
+    - C++14で導入された`aligned_union_t`ではなく誤って`aligned_union`を使用してしまい、その違いに気づきにくい (`aligned_union`は`::type`を指定しなければならない)
+    - 少なくともNバイト以上という指定はできるが、実際のサイズ (上限サイズ) を指定できないため、必要以上のメモリが使用される可能性がある
+
+これらの問題は[`aligned_storage`](aligned_storage.md)も同様である。`aligned_union`固有の問題はそれほどひどくないが、それでも望ましくない以下のような問題がある：
+
+- 第1テンプレートパラメータが無意味
+    - この機能は、可変個のすべての型のサイズとアライメントを推論し、それらの最大値を実際のストレージとして使用する。先頭のテンプレートパラメータはストレージの最小サイズである。すべての型がそれより小さい場合でも、ストレージは第1テンプレートパラメータより小さくならない
+    - 最小サイズを必要とすることはめずらしいことであり、ほとんどの場合は`aligned_union_t&amp;lt;0、Ts...&amp;gt;`のように使用する。この引数`0`は機能に精通していなければ理解しにくい
+- サイズとアライメントの推論が[`aligned_storage`](aligned_storage.md)と一貫していない
+    - 一貫した仕様であるならば、`aligned_union_t&amp;lt;0、T&amp;gt;`のような型をひとつだけ指定する用途につながるが、現在の仕様は何を意図していたのか不明である
+
+この機能を以下のように置き換えることを推奨する：
+
+```diff
+template &amp;lt;typename... Ts&amp;gt;
+class MyContainer {
+  // [...]
+private:
+- std::aligned_union_t&amp;lt;0, Ts...&amp;gt; t_buff;
++ alignas(Ts...) std::byte t_buff[std::max({sizeof(Ts)...})];
+  // [...]
+};
+```
+* std::byte[link /reference/cstddef/byte.md]
+* std::max[link /reference/algorithm/max.md]
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -83,4 +122,7 @@ hello
 - [N1877 Adding Alignment Support to the C++ Programming Language](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1877.pdf)
 - [N3546 TransformationTraits Redux](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3546.pdf)
 - [N3655 TransformationTraits Redux, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3655.pdf)
+    - C++14で`aligned_union_t`が定義された
 - [LWG Issue 2979. `aligned_union` should require complete object types](https://wg21.cmeerw.net/lwg/issue2979)
+- [P1413R2 Deprecate `std::aligned_storage` and `std::aligned_union`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1413r2.pdf)
+    - C++23でこの機能が非推奨となった
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>invoke_result -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/invoke_result.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/type_traits/invoke_result.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/invoke_result.md b/reference/type_traits/invoke_result.md
index d7fcc9791..7a0b6ada5 100644
--- a/reference/type_traits/invoke_result.md
+++ b/reference/type_traits/invoke_result.md
@@ -23,7 +23,7 @@ namespace std {
 
 
 ## 効果
-[*INVOKE*](/reference/concepts/Invoke.md)コンセプトに従った呼び出しの結果（戻り値）となる型をメンバ型`type`として定義する。そのような呼び出しが出来ない（ill-formedな）場合、メンバ型`type`は定義されない。
+[*INVOKE*](/reference/concepts/Invoke.md)要件に従った呼び出しの結果（戻り値）となる型をメンバ型`type`として定義する。そのような呼び出しが出来ない（ill-formedな）場合、メンバ型`type`は定義されない。
 
 すなわち、関数呼び出し出来ない型と引数列の組み合わせが渡された場合、SFINAEが働く。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_array -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_array.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/type_traits/is_array.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_array.md b/reference/type_traits/is_array.md
index 9b469eb64..5f6b94aae 100644
--- a/reference/type_traits/is_array.md
+++ b/reference/type_traits/is_array.md
@@ -41,7 +41,7 @@ static_assert(std::is_same&amp;lt;std::is_array&amp;lt;int&amp;gt;::value_type, bool&amp;gt;::value, &amp;#34;value_
 static_assert(std::is_same&amp;lt;std::is_array&amp;lt;int&amp;gt;::type, std::false_type&amp;gt;::value, &amp;#34;type == false_type&amp;#34;);
 static_assert(std::is_array&amp;lt;int&amp;gt;() == false, &amp;#34;is_array&amp;lt;int&amp;gt;() == false&amp;#34;);
 
-static_assert(std::is_array&amp;lt;int[]&amp;gt;::value == true, &amp;#34;int[] double is array&amp;#34;);
+static_assert(std::is_array&amp;lt;int[]&amp;gt;::value == true, &amp;#34;int[] is array&amp;#34;);
 static_assert(std::is_array&amp;lt;int*[2]&amp;gt;::value == true, &amp;#34;int*[2] is array&amp;#34;);
 static_assert(std::is_array&amp;lt;const unsigned[3][4]&amp;gt;::value == true, &amp;#34;const unsigned[3][4] is array&amp;#34;);
 static_assert(std::is_array&amp;lt;volatile long[][5]&amp;gt;::value == true, &amp;#34;volatile long[][5] is array&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_empty -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_empty.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/type_traits/is_empty.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_empty.md b/reference/type_traits/is_empty.md
index a36190f22..321395e79 100644
--- a/reference/type_traits/is_empty.md
+++ b/reference/type_traits/is_empty.md
@@ -31,11 +31,15 @@ namespace std {
 
 - [クラス型](is_class.md)である。
 - [共用型](is_union.md)でない。
-- 長さ0のビットフィールド以外に、非静的データメンバを持たない。
+- 大きさ0のものを除いて、非静的データメンバを持たない。
 - 仮想メンバ関数を持たない。
 - 仮想基底クラスを持たない。
 - 空のクラスでない基底クラスを持たない。
 
+大きさ0のデータメンバには、以下のものがある。
+
+- 長さ0のビットフィールド
+- 型が空のクラスであって、[`[[no_unique_address]]`属性](/lang/cpp20/language_support_for_empty_objects.md)が指定されているメンバ (C++20)
 
 ## 例
 ```cpp example
@@ -78,6 +82,8 @@ int main(){}
 #### 備考
 上の例でコンパイラによってはエラーになる。GCC 4.3.4, 4.5.3, Visual C++ 2010 は `integral_constant` が `operator bool()` を持っていないためエラーになる。
 
+## 関連項目
+- [`[[no_unique_address]]`属性](/lang/cpp20/language_support_for_empty_objects.md)
 
 ## 参照
 - [LWG Issue 2015. Incorrect pre-conditions for some type traits](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2015)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_invocable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_invocable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/type_traits/is_invocable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_invocable.md b/reference/type_traits/is_invocable.md
index f6a03757e..fec8f8729 100644
--- a/reference/type_traits/is_invocable.md
+++ b/reference/type_traits/is_invocable.md
@@ -23,7 +23,7 @@ namespace std {
 
 
 ## 効果
-型`F`に対して引数`ArgsTypes...`による[*INVOKE*](/reference/concepts/Invoke.md)コンセプトに従った呼び出しが可能であれば[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
+型`F`に対して引数`ArgsTypes...`による[*INVOKE*](/reference/concepts/Invoke.md)要件に従った呼び出しが可能であれば[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 結果が`true`となる場合、以下のような呼び出しが可能であるということと等価である：
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_invocable_r -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_invocable_r.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/type_traits/is_invocable_r.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_invocable_r.md b/reference/type_traits/is_invocable_r.md
index fce88da0d..c207f4fcb 100644
--- a/reference/type_traits/is_invocable_r.md
+++ b/reference/type_traits/is_invocable_r.md
@@ -23,7 +23,7 @@ namespace std {
 
 
 ## 効果
-型`F`に対して引数`ArgsTypes...`による[*INVOKE*](/reference/concepts/Invoke.md)コンセプトに従った呼び出しが可能であり、その結果となる戻り値の型が`R`に変換可能であれば[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
+型`F`に対して引数`ArgsTypes...`による[*INVOKE*](/reference/concepts/Invoke.md)要件に従った呼び出しが可能であり、その結果となる戻り値の型が`R`に変換可能であれば[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 結果は以下と等価である：
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_nothrow_invocable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_nothrow_invocable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/type_traits/is_nothrow_invocable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_nothrow_invocable.md b/reference/type_traits/is_nothrow_invocable.md
index d653065b3..956266de9 100644
--- a/reference/type_traits/is_nothrow_invocable.md
+++ b/reference/type_traits/is_nothrow_invocable.md
@@ -24,7 +24,7 @@ namespace std {
 
 
 ## 効果
-型`F`に対して引数`ArgsTypes...`による[*INVOKE*](/reference/concepts/Invoke.md)コンセプトに従った呼び出しが可能であり、いかなる例外も投げない場合[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
+型`F`に対して引数`ArgsTypes...`による[*INVOKE*](/reference/concepts/Invoke.md)要件に従った呼び出しが可能であり、いかなる例外も投げない場合[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_nothrow_invocable_r -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_nothrow_invocable_r.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/type_traits/is_nothrow_invocable_r.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_nothrow_invocable_r.md b/reference/type_traits/is_nothrow_invocable_r.md
index 41d03abc3..765cf26eb 100644
--- a/reference/type_traits/is_nothrow_invocable_r.md
+++ b/reference/type_traits/is_nothrow_invocable_r.md
@@ -24,7 +24,7 @@ namespace std {
 
 
 ## 効果
-型`F`に対して引数`ArgsTypes...`による[*INVOKE*](/reference/concepts/Invoke.md)コンセプトに従った呼び出しが可能であり、その結果となる戻り値の型が`R`に変換可能かつ、その呼び出し及び変換に際していかなる例外も投げない場合[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
+型`F`に対して引数`ArgsTypes...`による[*INVOKE*](/reference/concepts/Invoke.md)要件に従った呼び出しが可能であり、その結果となる戻り値の型が`R`に変換可能かつ、その呼び出し及び変換に際していかなる例外も投げない場合[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_pod -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_pod.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/type_traits/is_pod.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_pod.md b/reference/type_traits/is_pod.md
index 84a2db377..c7ae6b1c2 100644
--- a/reference/type_traits/is_pod.md
+++ b/reference/type_traits/is_pod.md
@@ -3,6 +3,7 @@
 * std[meta namespace]
 * class template[meta id-type]
 * cpp11[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 namespace std {
@@ -14,6 +15,8 @@ namespace std {
 }
 ```
 
+このトレイトはC++20で非推奨になった。同時にPODという概念自体が非推奨になった。
+
 ## 概要
 型`T`がPOD型 (Plain Old Data) か調べる。POD型は、トリビアル型、かつスタンダードレイアウト型、およびそのcv修飾を含む。
 
@@ -29,6 +32,12 @@ namespace std {
 ## 備考
 &amp;#34;Plain Old Data&amp;#34;という名称はつまり、C言語の構造体や共用体と互換性を持つためである。
 
+## 非推奨の詳細 (C++20)
+
+C++11でPODをトリビアルとスタンダードレイアウトという２つの概念に分離した。  
+そして実用上必要だったのはトリビアル型ではなく[トリビアルコピー可能](is_trivially_copyable.md)型、もしくは[スタンダードレイアウト](is_standard_layout.md)型であった。  
+結果として、トリビアル型かつスタンダードレイアウト型というあまりに強すぎる制約を課すPODというのは、もはや定義だけされて使われていないものとなっていた。
+したがって、規格書の文面でPODという用語に依存している部分は他の説明に書き換え、非推奨にすることとした。
 
 ## 例
 ```cpp example
@@ -80,3 +89,6 @@ int main(){}
 - [LWG Issue 2015. Incorrect pre-conditions for some type traits](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2015)
     - C++11では要件が「型`T`は完全型であるか、`const`/`volatile`修飾された(あるいはされていない)`void`か、要素数不明の配列型でなければならない。」だったが、これは間違いであるため、C++14で「型[`remove_all_extents`](remove_all_extents.md)`&amp;lt;T&amp;gt;::type`は、完全型か、`const`/`volatile`修飾された(あるいはされていない)`void`でなければならない。」に変更された。
 - [P0006R0 Adopt Type Traits Variable Templates from Library Fundamentals TS for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0006r0.html)
+- [CGW issue 2323. Expunge POD](https://wg21.cmeerw.net/cwg/issue2323)
+- [P0488R0 WG21 Working Paper, NB Comments, ISO/IEC CD 14882 #US 101](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0488r0.pdf#US101)
+- [P0767R1: Deprecate POD](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_copyable -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_trivially_copyable.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/type_traits/is_trivially_copyable.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_trivially_copyable.md b/reference/type_traits/is_trivially_copyable.md
index 28ab18210..7cb491a8c 100644
--- a/reference/type_traits/is_trivially_copyable.md
+++ b/reference/type_traits/is_trivially_copyable.md
@@ -24,9 +24,101 @@ namespace std {
 
 
 ## 効果
+
 `is_trivially_copyable`は、`T`がトリビアルコピー可能な型であるならば[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
-「トリビアルコピー可能な型」とは、「`std::memcpy()`可能な型である」と言い換えることもできる。これに分類される型は、以下の全ての条件を満たす必要がある：
+「トリビアルコピー可能な型」とは、「`std::memcpy()`可能な型である」と言い換えることもできる。
+
+トリビアルコピー可能な型の定義はこれまで2回変更されている。[CWG issue 1734](https://wg21.cmeerw.net/cwg/issue1734)による変更と、C++20での変更の2つだ。  
+CWG issue 1734は2013年8月9日に報告されている。つまりC++14に対応した処理系はこれに対応している可能性があり、すくなくともC++17時点で規格書に修正が取り込まれている。
+
+### 前提となる用語
+
+`user-provided`な関数とは、`= default`/`= delete`指定されていない、ユーザーによって宣言された関数である。
+
+### C++20
+
+#### 資格のある特殊メンバ関数
+
+資格のある特殊メンバ関数とは、特殊メンバ関数のうち、次の条件を満たすものを言う。
+
+- `= delete`指定されていない
+- 制約されている場合、それを満たしている
+- 同じ種類の特殊メンバ関数の中でもっとも強く制約されている
+
+同じ種類の特殊メンバ関数とは簡単に言うと、制約を除いて同一の宣言となる特殊メンバ関数のことである。
+
+制約の詳細については[コンセプト](/lang/cpp20/concepts.md)にある解説を参照のこと。
+
+例えば下の例を見てほしい。`optional`クラスは2つのコピーコンストラクタを持っている(#1と#2)。  
+これらは最初の引数の型が等しいので、2つの同じ種類のコピーコンストラクタを持っているといえる。  
+これらはいずれも`= delete`指定されていない。
+
+`T=std::unique_ptr&amp;lt;int&amp;gt;`の場合、#1と#2はどちらも制約を満たさないので資格のあるコピーコンストラクタを持たない。  
+`T=std::string`の場合、#2のみ制約を満たすので#2だけが資格のあるコピーコンストラクタである。  
+`T=int`の場合、#1と#2はどちらも制約を満たすが、#1のほうが#2より強く制約されているので、#1だけが資格のあるコピーコンストラクタである。
+
+```cpp example
+#include &amp;lt;type_traits&amp;gt;
+template &amp;lt;typename T&amp;gt;
+concept trivially_copy_constructible = std::is_trivially_copy_constructible_v&amp;lt;T&amp;gt;;
+template &amp;lt;typename T&amp;gt;
+struct optional {
+    // #1
+    optional(optional const&amp;amp;)
+        requires trivially_copy_constructible&amp;lt;T&amp;gt; &amp;amp;&amp;amp; std::copy_constructible&amp;lt;T&amp;gt;
+        = default;
+    // #2
+    optional(optional const&amp;amp; rhs)
+            requires copy_constructible&amp;lt;T&amp;gt;;
+};
+```
+* std::is_trivially_copy_constructible_v[link /reference/type_traits/is_trivially_copy_constructible.md]
+* std::copy_constructible[link /reference/concepts/copy_constructible.md]
+
+#### トリビアルコピー可能な型
+
+トリビアルコピー可能な型とは、次の条件を満たすものをいう。
+
+1. 少なくとも１つの資格のあるコピー/ムーブ コンストラクタ/代入演算子がある
+2. 資格のあるコピー/ムーブ コンストラクタ/代入演算子それぞれはtrivialである
+3. trivialで`= delete`指定されていないデストラクタを持つ
+
+これをもうすこし具体的に解釈する。
+
+まずそのクラス自体に対して次の条件を満たす必要がある。
+
+- デストラクタはvirtualではない
+- デストラクタは`= delete`指定されていない
+- デストラクタと全ての**資格のある**コピー/ムーブ コンストラクタ/代入演算子は`user-provided`ではない
+- virtual関数を持たず、virtual基本クラスも持たない
+- 少なくとも１つの**資格のある**コピー/ムーブ コンストラクタ/代入演算子がある
+
+対象となるクラスの非静的メンバ変数及び全ての基底クラスもトリビアルコピー可能でなければならない
+
+### C++17もしくは[CWG issue 1734](https://wg21.cmeerw.net/cwg/issue1734)が適用された処理系
+
+トリビアルコピー可能な型とは、次の条件を満たすものをいう。
+
+- 全てのコピー/ムーブ コンストラクタ/代入演算子はtrivialもしくは`= delete`指定されている
+- コピー/ムーブ コンストラクタ/代入演算子のうち少なくとも1つは`= delete`指定されていない
+- trivialで`= delete`指定されていないデストラクタを持つ
+
+これをもうすこし具体的に解釈する。
+
+まずそのクラス自体に対して次の条件を満たす必要がある。
+
+- デストラクタはvirtualではない
+- デストラクタは`= delete`指定されていない
+- デストラクタと全てのコピー/ムーブ コンストラクタ/代入演算子は`user-provided`ではない
+- virtual関数を持たず、virtual基本クラスも持たない
+- コピー/ムーブ コンストラクタ/代入演算子のうち少なくとも1つは`= delete`指定されていない
+
+対象となるクラスの非静的メンバ変数及び全ての基底クラスもトリビアルコピー可能でなければならない
+
+### [CWG issue 1734](https://wg21.cmeerw.net/cwg/issue1734)が適用されていないC++14以前の処理系
+
+トリビアルコピー可能な型とは、次の条件を満たすものをいう。
 
 - 非トリビアルなコピーコンストラクタを持っていないこと
 - 非トリビアルなムーブコンストラクタを持っていないこと
@@ -34,13 +126,24 @@ namespace std {
 - 非トリビアルなムーブ代入演算子を持っていないこと
 - トリビアルなデストラクタを持っていること
 
-トリビアル(trivial)な特殊関数(コンストラクタ、代入演算子、デストラクタ)とは、「ユーザー定義されない特殊関数」のことを意味する。
+これをもうすこし具体的に解釈する。
+
+まずそのクラス自体に対して次の条件を満たす必要がある。
+
+- デストラクタはvirtualではない
+- デストラクタと全てのコピー/ムーブ コンストラクタ/代入演算子は`user-provided`ではない
+- virtual関数を持たず、virtual基本クラスも持たない
 
+対象となるクラスの非静的メンバ変数及び全ての基底クラスもトリビアルコピー可能でなければならない
+
+しかし、デストラクタが削除されていてもトリビアルコピー可能となる問題があった。
 
 ## 例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
-
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;string&amp;gt;
 struct C1 {
   // 非トリビアルな特殊関数を持っていない
 
@@ -49,21 +152,68 @@ struct C1 {
 };
 
 struct C2 {
-  // 非トリビアルな特殊関数(デストラクタ)を持っている
+  // デストラクタはuser-provided
   ~C2() {}
 };
 
+struct TrivialDestructor {
+  // デストラクタはdefault指定されており、user-providedではない
+  ~TrivialDestructor() = default;
+};
+
+struct DeletedDestructor {
+  // デストラクタはdeleteされている
+  ~DeletedDestructor() = delete;
+};
+#ifdef __cpp_concepts
+template &amp;lt;typename T&amp;gt;
+concept trivially_copy_constructible = std::is_trivially_copy_constructible_v&amp;lt;T&amp;gt;;
+template &amp;lt;typename T&amp;gt;
+struct optional {
+  alignas(T) std::byte value[sizeof(T)];
+  bool engaged;
+  // #1: default指定されており、user-providedではない
+  optional(optional const&amp;amp;)
+      requires trivially_copy_constructible&amp;lt;T&amp;gt; &amp;amp;&amp;amp; std::copy_constructible&amp;lt;T&amp;gt;
+      = default;
+
+  // #2: user-providedなコピーコンストラクタ
+  optional(optional const&amp;amp; rhs)
+          requires std::copy_constructible&amp;lt;T&amp;gt;
+      : engaged(rhs.engaged)
+  {
+      if (engaged) {
+          new (value) T(rhs.value);
+      }
+  }
+};
+#endif
 // 組み込み型は全てトリビアルコピー可能
 static_assert(std::is_trivially_copyable&amp;lt;int&amp;gt;::value == true, &amp;#34;int is trivially copyable&amp;#34;);
 static_assert(std::is_trivially_copyable&amp;lt;int*&amp;gt;::value == true, &amp;#34;int* is trivially copyable&amp;#34;);
 
-// ユーザー定義型は、ユーザー定義の特殊関数を持っていなければトリビアルコピー可能
+// ユーザー定義型
 static_assert(std::is_trivially_copyable&amp;lt;C1&amp;gt;::value == true, &amp;#34;C1 is trivially copyable&amp;#34;);
 static_assert(std::is_trivially_copyable&amp;lt;C2&amp;gt;::value == false, &amp;#34;C2 isn&amp;#39;t trivially copyable&amp;#34;);
-
+static_assert(std::is_trivially_copyable&amp;lt;TrivialDestructor&amp;gt;::value == true, &amp;#34;TrivialDestructor is trivially copyable&amp;#34;);
+
+// CWG issue 1734が適用された環境ではトリビアルコピー可能ではない
+static_assert(std::is_trivially_copyable&amp;lt;DeletedDestructor&amp;gt;::value == false, &amp;#34;DeletedDestructor isn&amp;#39;t trivially copyable&amp;#34;);
+
+#ifdef __cpp_concepts
+// #1も#2も資格のあるコピーコンストラクタではなく、他に資格のあるコピー/ムーブ コンストラクタ/代入演算子がないためトリビアルコピー可能ではない
+static_assert(std::is_trivially_copyable&amp;lt;optional&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt;&amp;gt;::value == false, &amp;#34;std::unique_ptr&amp;lt;int&amp;gt; isn&amp;#39;t trivially copyable&amp;#34;);
+// #2が資格のあるコピーコンストラクタであるが、user-proviedであるためトリビアルコピー可能ではない
+static_assert(std::is_trivially_copyable&amp;lt;optional&amp;lt;std::string&amp;gt;&amp;gt;::value == false, &amp;#34;optional&amp;lt;std::string&amp;gt; isn&amp;#39;t trivially copyable&amp;#34;);
+// #1が資格のあるコピーコンストラクタであるのでトリビアルコピー可能
+static_assert(std::is_trivially_copyable&amp;lt;optional&amp;lt;int&amp;gt;&amp;gt;::value == true, &amp;#34;optional&amp;lt;int&amp;gt; is trivially copyable&amp;#34;);
+#endif
 int main() {}
 ```
 * std::is_trivially_copyable[color ff0000]
+* std::is_trivially_copy_constructible_v[link /reference/type_traits/is_trivially_copy_constructible.md]
+* std::copy_constructible[link /reference/concepts/copy_constructible.md]
+* std::byte[link /reference/cstddef/byte.md]
 
 ### 出力
 ```
@@ -84,3 +234,5 @@ int main() {}
 - [LWG Issue 2015. Incorrect pre-conditions for some type traits](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2015)
     - C++11では要件が「型`T`は完全型であるか、`const`/`volatile`修飾された(あるいはされていない)`void`か、要素数不明の配列型でなければならない。」だったが、これは間違いであるため、C++14で「型[`remove_all_extents`](remove_all_extents.md)`&amp;lt;T&amp;gt;::type`は、完全型か、`const`/`volatile`修飾された(あるいはされていない)`void`でなければならない。」に変更された。
 - [P0006R0 Adopt Type Traits Variable Templates from Library Fundamentals TS for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0006r0.html)
+- [CWG issue 1734. Nontrivial deleted copy functions](https://wg21.cmeerw.net/cwg/issue1734)
+- [P0848R3 Conditionally Trivial Special Member Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0848r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/contains.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/unordered_map/unordered_map/contains.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/contains.md b/reference/unordered_map/unordered_map/contains.md
index a072baa51..4802fec04 100644
--- a/reference/unordered_map/unordered_map/contains.md
+++ b/reference/unordered_map/unordered_map/contains.md
@@ -77,7 +77,7 @@ contain
 ### 処理系
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1
 
 ## 参照
 - [P0458R2 Checking for Existence of an Element in Associative Containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0458r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/contains.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/unordered_map/unordered_multimap/contains.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/contains.md b/reference/unordered_map/unordered_multimap/contains.md
index 5388ac0a8..8cf492dd5 100644
--- a/reference/unordered_map/unordered_multimap/contains.md
+++ b/reference/unordered_map/unordered_multimap/contains.md
@@ -76,7 +76,7 @@ contain
 ### 処理系
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1
 
 ## 参照
 - [P0458R2 Checking for Existence of an Element in Associative Containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0458r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/contains.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/unordered_set/unordered_multiset/contains.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/contains.md b/reference/unordered_set/unordered_multiset/contains.md
index 7787b1f26..8e3ff9cda 100644
--- a/reference/unordered_set/unordered_multiset/contains.md
+++ b/reference/unordered_set/unordered_multiset/contains.md
@@ -72,7 +72,7 @@ contain
 ### 処理系
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1
 
 ## 参照
 - [P0458R2 Checking for Existence of an Element in Associative Containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0458r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/contains.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/unordered_set/unordered_set/contains.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/contains.md b/reference/unordered_set/unordered_set/contains.md
index ea6b5fdfe..f588f375a 100644
--- a/reference/unordered_set/unordered_set/contains.md
+++ b/reference/unordered_set/unordered_set/contains.md
@@ -72,7 +72,7 @@ contain
 ### 処理系
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 1
 
 ## 参照
 - [P0458R2 Checking for Existence of an Element in Associative Containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0458r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>index_sequence -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/reference/utility/index_sequence.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:reference/utility/index_sequence.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/index_sequence.md b/reference/utility/index_sequence.md
index 28a4a9a45..13e4bfab4 100644
--- a/reference/utility/index_sequence.md
+++ b/reference/utility/index_sequence.md
@@ -26,9 +26,8 @@ void g(std::size_t a, std::size_t b, std::size_t c)
   std::cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
 }
 
-template &amp;lt;class T, T... Seq&amp;gt;
-void f(std::integer_sequence&amp;lt;T, Seq...&amp;gt;) // g++のバグに対する回避策
-                                         // 本来はindex_sequenceで受け取れるはず
+template &amp;lt;std::size_t... Seq&amp;gt;
+void f(std::index_sequence&amp;lt;Seq...&amp;gt;)
 {
   // 定数のシーケンス{0, 1, 2}を取り出して、関数g()の引数として転送
   g(Seq...);
@@ -58,7 +57,7 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2015
 
 ### 備考
-- GCC 4.9.2で、`std::index_sequence`を関数のパラメータとして受け取るとコンパイルエラーになる問題がある([Bug 65790](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65790))
+- GCC 4.9.2で、`std::index_sequence`を関数のパラメータとして受け取るとコンパイルエラーになる問題があった([Bug 65790](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65790))。GCC 5.2.0で修正された。
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>外部ライブラリ -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/third_party_library.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:third_party_library.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;外部ライブラリ&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;C++での開発に使用できる有用なライブラリを以下に例示する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;Boost C++ Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++の準標準と呼ばれているライブラリ。C++標準化委員会のメンバも多く関わっており、Boostに含まれるライブラリの中から次期標準ライブラリとして採用されたものも多数ある。Intel(Boost.Polygon), Adobe(Boost.GIL)も開発に関わっている。スレッド、ネットワーク、ファイルシステム、構文解析器、正規表現、グラフ、線形代数、分散処理、区間計算、計算幾何、多倍長整数など、現在ではだいたい揃ってる。&lt;br /&gt;
ライセンス：Boost Software License 1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://opencv.jp/&#34; target=&#34;_blank&#34;&gt;OpenCV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クロスプラットフォームな画像処理、画像認識のためのC++の高水準なクラスライブラリが提供されている。Boostとも連携しやすい。最近ではCUDAなどにも対応している。&lt;br /&gt;
ライセンス：BSD License&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/&#34; target=&#34;_blank&#34;&gt;Qt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クロスプラットフォームなGUIライブラリ。最近ではStackOverflowでも「C++でGUIライブラリと言えば？」と質問が上がると9割は「Qt」という答えが返ってくる。&lt;br /&gt;
ライセンス：LGPL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://glm.g-truc.net/&#34; target=&#34;_blank&#34;&gt;GLM(OpenGL Mathematics)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3Dグラフィクスのためのヘッダオンリーライブラリ。OpenGLの生のAPIを使うよりこちらの方が扱いやすい。&lt;br /&gt;
ライセンス：MIT License&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mongodb.com/&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;データベースライブラリ。&lt;br /&gt;
ライセンス：Creative Commons, CC BY-NC-SA 3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/msgpack/msgpack-c&#34; target=&#34;_blank&#34;&gt;MessagePack implementation for C and C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通信などで使用できるデータの圧縮形式、シリアライズ／デシリアライズ、通信のライブラリ。&lt;br /&gt;
ライセンス：Boost Software License, Version 1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/herumi/xbyak/blob/master/readme.txt&#34; target=&#34;_blank&#34;&gt;Xbyak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;x86(IA32), x64(AMD64, x86-64)のマシン語命令を実行時に生成するC++のクラスライブラリ。&lt;br /&gt;
ライセンス：修正BSDライセンス&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mpir.org/&#34; target=&#34;_blank&#34;&gt;MPIR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;巨大な数を扱うためのライブラリ。GMPより分岐したものであり，Visual C++で容易に使えるようになっていることが特徴である。boost::multiprecisionと組み合わせて使用できる。&lt;br /&gt;
ライセンス：LGPL Version 3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/googletest&#34; target=&#34;_blank&#34;&gt;Google Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++コードの自動テストを行うフレームワーク。&lt;br /&gt;
ライセンス：BSD Version 2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fmtlib/fmt&#34; target=&#34;_blank&#34;&gt;fmtlib&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文字列フォーマットのライブラリ。&lt;br /&gt;
ライセンス：BSD&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- Merge remote-tracking branch &#39;upstream/master&#39;</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>079393874d16f46183f1f83959a6b982b25c72e8:working_style.md</id>
      <updated>2020-07-24T15:07:49+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;スタイル&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトで作業を行う上でのスタイルです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「である」調&lt;/li&gt;
&lt;li&gt;句読点は「、」「。」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型修飾のスタイル：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A) const T &amp;amp;v&lt;/li&gt;
&lt;li&gt;B) const T&amp;amp; v&lt;/li&gt;
&lt;li&gt;C) const T &amp;amp; v&lt;/li&gt;
&lt;li&gt;D) T const &amp;amp;v&lt;/li&gt;
&lt;li&gt;E) T const&amp;amp; v&lt;/li&gt;
&lt;li&gt;F) T const &amp;amp; v&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトでは、Bのスタイルで型修飾を行います。&lt;/p&gt;
&lt;h2&gt;バージョンの表記&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;p&gt;C++11以降対応については対応バージョンを明記します。バージョン表記が省略されている場合、C++03、C++98対応であることを表します。&lt;/p&gt;
&lt;h4&gt;例&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;C++17&lt;/li&gt;
&lt;li&gt;C++14&lt;/li&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;li&gt;C++03&lt;/li&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;p&gt;開発環境の表記がない場合は、C++98対応のあらゆる環境で使用できるものとします。 
処理系の記載は、作業者が確認できたものを記載します。&lt;/p&gt;
&lt;h4&gt;例&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Clang: 2.1, 2.8&lt;/li&gt;
&lt;li&gt;GCC: 4.3.4, 4.4.3, 4.4.4, 4.5.2&lt;/li&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V11.1.0.0&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1, 12.0&lt;/li&gt;
&lt;li&gt;PathScale: 3.2&lt;/li&gt;
&lt;li&gt;QCC&lt;/li&gt;
&lt;li&gt;Visual C++: 2003, 2008, 2010&lt;/li&gt;
&lt;li&gt;pgCC: 11.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それと、訳語表を随時更新していってください。&lt;/p&gt;
&lt;h3&gt;訳語表&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;日本語&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abstract class&lt;/td&gt;
&lt;td&gt;抽象クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aggregate&lt;/td&gt;
&lt;td&gt;集成体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alignment&lt;/td&gt;
&lt;td&gt;アライメント (表示位置ではなくメモリの文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apply, application&lt;/td&gt;
&lt;td&gt;適用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arithmetic type&lt;/td&gt;
&lt;td&gt;算術型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;associative container(s)&lt;/td&gt;
&lt;td&gt;連想コンテナ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base class&lt;/td&gt;
&lt;td&gt;基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bidirectional iterator&lt;/td&gt;
&lt;td&gt;双方向イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bucket&lt;/td&gt;
&lt;td&gt;バケット&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complexity&lt;/td&gt;
&lt;td&gt;計算量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compound type&lt;/td&gt;
&lt;td&gt;複合型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const iterator&lt;/td&gt;
&lt;td&gt;読み取り専用イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const reverse iterator&lt;/td&gt;
&lt;td&gt;読み取り専用逆イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;covariant&lt;/td&gt;
&lt;td&gt;共変的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dereference&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dereferenceable&lt;/td&gt;
&lt;td&gt;間接参照可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;derived class&lt;/td&gt;
&lt;td&gt;派生クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;direct base class&lt;/td&gt;
&lt;td&gt;直接基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;effects&lt;/td&gt;
&lt;td&gt;効果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;emplace&lt;/td&gt;
&lt;td&gt;直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;empty&lt;/td&gt;
&lt;td&gt;空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equal&lt;/td&gt;
&lt;td&gt;等値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equivalence class&lt;/td&gt;
&lt;td&gt;同値分類 (数学的文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equivalence relation&lt;/td&gt;
&lt;td&gt;同値関係 (数学的文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equivalent&lt;/td&gt;
&lt;td&gt;同値 (数学的文脈)、等価 (その他文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forward iterator&lt;/td&gt;
&lt;td&gt;前方向イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fundamental type&lt;/td&gt;
&lt;td&gt;単純型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ill-formed&lt;/td&gt;
&lt;td&gt;不適格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;implementation-defined&lt;/td&gt;
&lt;td&gt;処理系定義&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indirect base class&lt;/td&gt;
&lt;td&gt;間接基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inherited&lt;/td&gt;
&lt;td&gt;継承&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input iterator&lt;/td&gt;
&lt;td&gt;入力イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iterator&lt;/td&gt;
&lt;td&gt;イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;literal type&lt;/td&gt;
&lt;td&gt;リテラル型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load factor&lt;/td&gt;
&lt;td&gt;負荷率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lvalue reference&lt;/td&gt;
&lt;td&gt;左辺値参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max load factor&lt;/td&gt;
&lt;td&gt;最大負荷率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;member&lt;/td&gt;
&lt;td&gt;メンバ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;move&lt;/td&gt;
&lt;td&gt;(std::move 的な意味で)ムーブ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;move assignment&lt;/td&gt;
&lt;td&gt;ムーブ代入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;move constructor&lt;/td&gt;
&lt;td&gt;ムーブコンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mutable iterator&lt;/td&gt;
&lt;td&gt;可変イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;non-virtual base class&lt;/td&gt;
&lt;td&gt;非仮想基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;note&lt;/td&gt;
&lt;td&gt;注&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;output iterator&lt;/td&gt;
&lt;td&gt;出力イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overload&lt;/td&gt;
&lt;td&gt;オーバーロード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;partial ordering&lt;/td&gt;
&lt;td&gt;半順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;partition&lt;/td&gt;
&lt;td&gt;区分化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pointer&lt;/td&gt;
&lt;td&gt;ポインタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;polymorphic&lt;/td&gt;
&lt;td&gt;多相的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;power of N&lt;/td&gt;
&lt;td&gt;Nの累乗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;predicate&lt;/td&gt;
&lt;td&gt;述語&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;propagation, propagate&lt;/td&gt;
&lt;td&gt;伝播&lt;br /&gt; (伝搬は誤用が広まったものなので使わない)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pure virtual function&lt;/td&gt;
&lt;td&gt;純粋仮想関数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;random access iterator&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;range&lt;/td&gt;
&lt;td&gt;範囲&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remarks&lt;/td&gt;
&lt;td&gt;備考&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requires&lt;/td&gt;
&lt;td&gt;要件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;returns&lt;/td&gt;
&lt;td&gt;戻り値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reverse iterator&lt;/td&gt;
&lt;td&gt;逆イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rvalue reference&lt;/td&gt;
&lt;td&gt;右辺値参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sequence container(s)&lt;/td&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signed&lt;/td&gt;
&lt;td&gt;符号付き&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop request&lt;/td&gt;
&lt;td&gt;停止要求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop state&lt;/td&gt;
&lt;td&gt;停止状態&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spurious Failure&lt;/td&gt;
&lt;td&gt;見かけ上の失敗&lt;br /&gt; &lt;a href=&#34;https://togetter.com/li/430770&#34; target=&#34;_blank&#34;&gt;https://togetter.com/li/430770&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strict weak ordering&lt;/td&gt;
&lt;td&gt;狭義の弱順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strong ordering&lt;/td&gt;
&lt;td&gt;全順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;synchronization&lt;/td&gt;
&lt;td&gt;同期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;total ordering relationalship&lt;/td&gt;
&lt;td&gt;全順序関係&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trailing return type&lt;/td&gt;
&lt;td&gt;後置戻り値型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trait&lt;/td&gt;
&lt;td&gt;トレイト&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trivial&lt;/td&gt;
&lt;td&gt;自明 (逆は非自明)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;underlying type&lt;/td&gt;
&lt;td&gt;基底型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unordered associative container(s)&lt;/td&gt;
&lt;td&gt;非順序連想コンテナ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unspecified&lt;/td&gt;
&lt;td&gt;未規定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;virtual base class&lt;/td&gt;
&lt;td&gt;仮想基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;weak ordering&lt;/td&gt;
&lt;td&gt;弱順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;well-formed&lt;/td&gt;
&lt;td&gt;適格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eligible&lt;/td&gt;
&lt;td&gt;資格のある&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++20 -- &#34;型の文脈でtypenameの省略を許可&#34; の解説を追加 #727</title>
      <link href="https://cpprefjp.github.io/lang/cpp20.html"/>
      <id>4e2168a46a22c8fe72f3a4d1252758068b88cb7e:lang/cpp20.md</id>
      <updated>2020-07-23T02:34:46+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++20&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20とは、2020年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中はC++2aと呼ばれることがあった。「202a年にリリースされる」という伏せ字として「a」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;クラス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/consistent_comparison.html&#34;&gt;一貫比較&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;三方比較演算子によって比較演算子の自動生成を行うようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/default_member_initializers_for_bit_fields.html&#34;&gt;ビットフィールドのメンバ変数初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドメンバ変数のデフォルト値を設定する構文を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/explicit_bool.html&#34;&gt;関数を条件付きで&lt;code&gt;explicit&lt;/code&gt;にする構文を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;explicit(true)&lt;/code&gt;のように&lt;code&gt;explicit&lt;/code&gt;に真理値パラメータを指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/fixing_const_qualified_pointers_to_members.html&#34;&gt;&lt;code&gt;const&lt;/code&gt;修飾されたメンバポインタの制限を修正&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.*&lt;/code&gt;演算子での左辺値の&lt;code&gt;const&lt;/code&gt;メンバ関数呼び出しを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;デフォルトのコピーコンストラクタと非&lt;code&gt;const&lt;/code&gt;なコンストラクタが衝突する問題を修正&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;特殊化のアクセスチェック&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/language_support_for_empty_objects.html&#34;&gt;空オブジェクトに対する最適化を支援する属性&lt;code&gt;[[no_unique_address]]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[no_unique_address]]&lt;/code&gt;属性を導入し、空の型のオブジェクトをほかのオブジェクトと共有する最適化を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_structured_bindings_to_accessible_members.html&#34;&gt;friend指定された関数内から構造化束縛を使用して非公開メンバ変数にアクセスすることを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構造化束縛の仕様として公開メンバ変数のみを取り出せるようになっていたが、friend指定された関数からは非公開メンバ変数にもアクセスできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_structured_bindings_customization_point_finding_rules.html&#34;&gt;構造化束縛がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非テンプレートの&lt;code&gt;get()&lt;/code&gt;メンバ関数が見つかった場合は、非メンバ関数の&lt;code&gt;get()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/checking_for_abstract_class_types.md.nolink&#34;&gt;抽象型のチェック&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の宣言段階では、パラメータおよび戻り値型が抽象型かどうかをチェックしないようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/efficient_sized_delete_for_variable_sized_classes.md.nolink&#34;&gt;可変長データを扱うクラスの効率的な&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラスの&lt;code&gt;delete&lt;/code&gt;演算子が呼び出される前にデストラクタが呼ばれないようにするオプションを追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.md.nolink&#34;&gt;特殊メンバ関数の条件付き自明定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;制約によって自明な特殊メンバ関数と非自明な特殊メンバ関数をオーバーロードできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;列挙型&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/using_enum.html&#34;&gt;スコープ付き列挙型のusing宣言&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;using enum EnumType;&lt;/code&gt;もしくは&lt;code&gt;using EnumType::enumerator&lt;/code&gt;とすることで、列挙値のスコープ指定を省略できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/designated_initialization.html&#34;&gt;指示付き初期化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;波カッコによる集成体初期化でメンバ名を指定して初期化できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/extending_structured_bindings_to_be_more_like_variable_declarations.html&#34;&gt;構造化束縛を拡張して通常の変数宣言のように使用できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;記憶域指定子として&lt;code&gt;static&lt;/code&gt;と&lt;code&gt;thread_local&lt;/code&gt;の指定を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_initializing_aggregates_from_a_parenthesized_list_of_values.html&#34;&gt;丸カッコの値リストからの集成体初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T x{1, 2, 3};&lt;/code&gt;と同様に&lt;code&gt;T x(1, 2, 3);&lt;/code&gt;でも集成体初期化できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/array_size_deduction_in_new-expressions.md.nolink&#34;&gt;&lt;code&gt;new&lt;/code&gt;式での配列要素数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;double* p = new double[]{1,2,3};&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permit_conversions_to_arrays_of_unknown_bound.md.nolink&#34;&gt;要素数不明の配列への変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数が判明している配列から、要素数が不明の配列への変換を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.md.nolink&#34;&gt;ほとんどの&lt;code&gt;volatile&lt;/code&gt;を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;volatile&lt;/code&gt;の有用な機能のみを残し、効果が疑わしい、または壊れている機能を非推奨化する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;整数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/signed_integers_are_twos_complement.html&#34;&gt;符号付き整数型が2の補数表現であることを規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;符号付き整数型のビット表現を2の補数に規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/char8_t.html&#34;&gt;UTF-8エンコーディングされた文字の型として&lt;code&gt;char8_t&lt;/code&gt;を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;UTF-8エンコードされた文字かどうかでオーバーロード・特殊化をできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/make_char16t_char32t_string_literals_be_utf16_32.md.nolink&#34;&gt;&lt;code&gt;char16_t&lt;/code&gt;と&lt;code&gt;char32_t&lt;/code&gt;の文字・文字列リテラルを、文字コードUTF-16/32に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__STDC_UTF_16__&lt;/code&gt;、&lt;code&gt;__STDC_UTF_32__&lt;/code&gt;の定義に関係なく、&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;のリテラルをUTF-16/32文字コードに規定する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/nodiscard_should_have_a_reason.md.nolink&#34;&gt;&lt;code&gt;[[nodiscard]]&lt;/code&gt;属性に理由となる文字列を付加できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数の戻り値を無視してはならない理由を関数宣言に持たせ、警告メッセージに役立てる&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;制御構文&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/range-based_for_statements_with_initializer.html&#34;&gt;初期化式をともなう範囲for文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;範囲for文スコープで使用する変数の初期化のための構文を追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/relaxing_the_range_for_loop_customization_point_finding_rules.html&#34;&gt;範囲for文がカスタマイゼーションポイントを見つけるルールを緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;メンバ関数のどちらかが見つからなかった場合に非メンバ関数の&lt;code&gt;begin()&lt;/code&gt;/&lt;code&gt;end()&lt;/code&gt;を探しにいく&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html&#34;&gt;確率が高い分岐と低い分岐を伝える属性 &lt;code&gt;[[likely]]&lt;/code&gt;, &lt;code&gt;[[unlikely]]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;条件分岐の最適化ヒントを与える属性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/concepts.html&#34;&gt;コンセプト&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータに対する制約を行う&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/function_templates_with_auto_parameters.html&#34;&gt;autoパラメータによる関数テンプレートの簡易定義&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックラムダと同様、関数パラメータをの型を&lt;code&gt;auto&lt;/code&gt;にすることで簡易的に関数テンプレートを定義できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/down_with_typename.html&#34;&gt;型の文脈で&lt;code&gt;typename&lt;/code&gt;の省略を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型しか現れない文脈では、依存名を解決するための&lt;code&gt;typename&lt;/code&gt;キーワードを省略できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_types_in_non-type_template_parameters.md.nolink&#34;&gt;非型テンプレートパラメータとしてクラス型を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::strong_equality&lt;/code&gt;に変換可能な非メンバ関数&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;をもつ型を、非型テンプレートパラメータとして使用できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_aggregates.md.nolink&#34;&gt;集成体クラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;クラステンプレートのテンプレート引数推論はコンストラクタ引数から推論されるが、集成体初期化からも推論できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/class_template_argument_deduction_for_alias_templates.md.nolink&#34;&gt;エイリアステンプレートに対するクラステンプレートのテンプレート引数推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エイリアステンプレートからクラステンプレートのテンプレート引数を推論できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;評価されない文脈で&lt;code&gt;constexpr&lt;/code&gt;関数が定数式評価されることを規定&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_virtual_function_calls_in_constant_expressions.html&#34;&gt;定数式からの仮想関数の呼び出しを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;仮想関数に&lt;code&gt;constexpr&lt;/code&gt;を付けられない制限を解除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allowing_dynamic_cast_polymorphic_typeid_in_constant_expressions.md.nolink&#34;&gt;定数式での&lt;code&gt;dynamic_cast&lt;/code&gt;、多態的な&lt;code&gt;typeid&lt;/code&gt;を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式での動的多態を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/try-catch_blocks_in_constexpr_functions.md.nolink&#34;&gt;constexpr関数内でのtry-catchブロックを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内での例外の捕捉を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/immediate_functions.md.nolink&#34;&gt;即時関数&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;consteval&lt;/code&gt;キーワードを追加し、常に定数式評価されるよう指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md.nolink&#34;&gt;定数式内での共用体のアクティブメンバの変更を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共用体メンバの書き換えを定数式内で行えるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/permitting_trivial_default_initialization_in_constexpr_contexts.md.nolink&#34;&gt;constexprの文脈での自明なデフォルト初期化を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;constexpr関数内でのデフォルト初期化を許可し、未初期化値を読むことのみ禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/enabling_constexpr_intrinsics_by_permitting_unevaluated_inline-assembly_in_constexpr_functions.md.nolink&#34;&gt;constexpr関数内で未評価のインラインアセンブリを許可することによる組み込み関数のconstexpr有効化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時に評価されない場合にconstexpr関数にasm定義を含めることを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/constinit.md.nolink&#34;&gt;コンパイル時初期化を強制する&lt;code&gt;constinit&lt;/code&gt;キーワードを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;初期化のみコンパイル時におわらせたい場合に使用する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/more_constexpr_containers.md.nolink&#34;&gt;可変サイズをもつコンテナの&lt;code&gt;constexpr&lt;/code&gt;化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;記憶域をもつメモリアロケータの存在を考慮することで、可変サイズをもつコンテナをコンパイル時に使用できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ラムダ式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/familiar_template_syntax_for_generic_lambdas.html&#34;&gt;ジェネリックラムダのテンプレート構文&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックラムダでテンプレートパラメータを定義できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_lambda_capture_equal_this.html&#34;&gt;ラムダ式のキャプチャとして&lt;code&gt;[=, this]&lt;/code&gt;を許可する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デフォルトコピーキャプチャと&lt;code&gt;this&lt;/code&gt;ポインタのコピーキャプチャを両方指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html&#34;&gt;&lt;code&gt;[=]&lt;/code&gt;による&lt;code&gt;this&lt;/code&gt;の暗黙のキャプチャを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コピーのデフォルトキャプチャでは、&lt;code&gt;this&lt;/code&gt;ポインタをキャプチャされなくする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ラムダ式の制約&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;暗黙のラムダキャプチャを簡略化&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.html&#34;&gt;状態を持たないラムダ式を、デフォルト構築可能、代入可能とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャしていないラムダ式をデフォルト構築・代入可能にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html&#34;&gt;評価されない文脈でのラムダ式&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;評価されない文脈でもラムダ式を書くことができるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/allow_pack_expansion_in_lambda_init_capture.html&#34;&gt;ラムダ式の初期化キャプチャでのパック展開を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[...args = std::move(args)]&lt;/code&gt;のようなキャプチャを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/reference_capture_of_structured_bindings.md.nolink&#34;&gt;構造化束縛したビットフィールドの参照キャプチャ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ビットフィールドを含む構造化束縛をした場合にラムダ式で参照キャプチャできない規定を緩和し、ビットフィールドを直接参照キャプチャ、もしくはデフォルト参照キャプチャして使用しなければ適格とする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;名前空間&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/nested_inline_mamespaces.md.nolink&#34;&gt;入れ子名前空間定義でのインライン名前空間&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;namespace ns1::inline ns2::ns3 {}&lt;/code&gt;のように、入れ子名前空間を定義する式にインライン名前空間の指定を含められるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;モジュール化&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/modules.html&#34;&gt;モジュール&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ヘッダファイル・ソースファイル、インクルードに変わる仕組みとしてモジュールを導入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;並行・並列処理&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;関数実行を中断・再開する仕組みとしてコルーチンを導入する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;プリプロセッサ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/va_opt.html&#34;&gt;可変引数が空でない場合のトークン置換&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの置換で可変引数が空の場合に余計なカンマが付いてしまう問題に対処&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PODを非推奨化&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_implicit_capture_of_this_via_defcopy.html&#34;&gt;&lt;code&gt;[=]&lt;/code&gt;による&lt;code&gt;this&lt;/code&gt;の暗黙のキャプチャを非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コピーのデフォルトキャプチャでは、&lt;code&gt;this&lt;/code&gt;ポインタをキャプチャされなくする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/deprecate_uses_of_the_comma_operator_in_subscripting_expressions.md.nolink&#34;&gt;添字演算子内でのカンマ演算子の使用を非推奨化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ar[i, j]&lt;/code&gt;を非推奨化。&lt;code&gt;ar[(i, j)]&lt;/code&gt;はOK&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;throw()&lt;/code&gt;による例外送出しない指定を削除&lt;/td&gt;
&lt;td&gt;代わりに&lt;code&gt;noexcept&lt;/code&gt;を使用すること&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/prohibit_aggregates_with_user-declared_constructors.md.nolink&#34;&gt;ユーザー宣言したコンストラクタを持つクラスの集成体初期化を禁止&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタが&lt;code&gt;delete&lt;/code&gt;宣言されているクラスを、集成体初期化によってコンストラクタ呼び出しを回避して構築できてしまっていた技法を禁止&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/update_the_reference_to_the_unicode_standard.md.nolink&#34;&gt;Unicode標準への参照を更新&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;標準C++からISO/IEC 10646への参照を更新し、古い固定バージョンへの参照をやめる&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;バージョン情報ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加。ここでは、実装依存の情報 (バージョンやリリース日付など) が標準ライブラリの実装によって定義される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;ライブラリに、カレンダーとタイムゾーンの機能を拡張&lt;/li&gt;
&lt;li&gt;任意のシーケンスの部分シーケンスを参照するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;文字列フォーマットライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;出力ストリームを同期するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;三方比較ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;数値ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加。数学定数が定義される&lt;/li&gt;
&lt;li&gt;ビット操作ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;Strict Aliasing規則に抵触しないビットレベルの再解釈キャストである&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_cast.html&#34;&gt;std::bit_cast()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;2の乗数関係の関数として、整数値が2の累乗かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/has_single_bit.html&#34;&gt;std::has_single_bit()&lt;/a&gt;&lt;/code&gt;関数、整数値を2の累乗値に切り上げる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_ceil.html&#34;&gt;std::bit_ceil()&lt;/a&gt;&lt;/code&gt;関数、整数値を2の累乗値に切り下げる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_floor.html&#34;&gt;std::bit_floor()&lt;/a&gt;&lt;/code&gt;関数、2を底とした整数値の対数を求めて1を足す&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/bit_width.html&#34;&gt;std::bit_width()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;循環ビットシフトを行う&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/rotl.html&#34;&gt;std::rotl()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/rotr.html&#34;&gt;std::rotr()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;連続した0もしくは1のビットを数える&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countl_zero.html&#34;&gt;std::countl_zero()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countl_one.html&#34;&gt;std::countl_one()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countr_zero.html&#34;&gt;std::countr_zero()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/countr_one.html&#34;&gt;std::countr_one()&lt;/a&gt;&lt;/code&gt;、および立っているビットを数える&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/popcount.html&#34;&gt;std::popcount()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;エンディアンを表す列挙型として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/endian.html&#34;&gt;std::endian&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;型制約のための要件ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;言語機能であるコルーチンを制御するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スレッドの実行を停止させるメカニズムとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加し、停止に対応したスレッドクラスとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread/jthread.html&#34;&gt;std::jthread&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;軽量な同期プリミティブであるセマフォのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スレッド調整メカニズムとして、ラッチライブラリの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;、バリアライブラリの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;イテレータの組ではなく、コンテナや配列、部分的なコンテナなどを扱う範囲ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.md.nolink&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;既存のイテレータの組を扱うアルゴリズムは、&lt;code&gt;std::ranges&lt;/code&gt;名前空間に範囲版アルゴリズムが追加される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ソースコードの位置を取得するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;取り決め&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;名前空間以下の関数テンプレートをユーザーが特殊化することを禁止する (参照 : &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0551r3.pdf&#34; target=&#34;_blank&#34;&gt;P0551R3&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;連想コンテナに、要素がコンテナに含まれているかを判定する&lt;code&gt;contains()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;順序付き連想コンテナと同様に、非順序連想コンテナの検索処理で、一時オブジェクトが生成されるコストを抑える拡張を追加。ハッシュ計算を行う関数オブジェクトに&lt;code&gt;transparent_key_equal&lt;/code&gt;が定義されていれば、透過的な検索が使用できる。&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;std::hash&lt;/a&gt;&lt;/code&gt;クラスのページを参照&lt;/li&gt;
&lt;li&gt;各コンテナの非メンバ関数として、要素を削除する&lt;code&gt;std::erase()&lt;/code&gt;関数と&lt;code&gt;std::erase_if()&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/forward_list/forward_list.html&#34;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/list/list.html&#34;&gt;std::list&lt;/a&gt;&lt;/code&gt;のメンバ関数&lt;code&gt;remove()&lt;/code&gt;、&lt;code&gt;remove_if()&lt;/code&gt;、&lt;code&gt;unique()&lt;/code&gt;の戻り値型を、&lt;code&gt;void&lt;/code&gt;から&lt;code&gt;Container::size_type&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;クラスの比較演算子、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array/fill.html&#34;&gt;fill()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array/swap.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array/swap_free.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;非メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加。このクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;li&gt;組み込み配列を&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;に変換する関数として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/to_array.html&#34;&gt;std::to_array()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;に、符号付き整数としてコンテナの要素数を取得する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/ssize.html&#34;&gt;std::ssize()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;、および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/vector/vector.html&#34;&gt;std::vector&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;の多くの関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、要素位置をシフトする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/shift_left.html&#34;&gt;std::shift_left()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/shift_right.html&#34;&gt;std::shift_right()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に三方比較による辞書順比較アルゴリズム&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/lexicographical_compare_three_way.html&#34;&gt;std::lexicographical_compare_three_way()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;数値とポインタの中点を求める関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/midpoint.html&#34;&gt;std::midpoint()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;浮動小数点数を線形補間する関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/lerp.html&#34;&gt;std::lerp()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;の数値計算アルゴリズムをムーブに対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;の数値計算アルゴリズムに&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;イテレータ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_insert_iterator.html&#34;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_insert_iterator.html&#34;&gt;std::front_insert_iterator&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/insert_iterator.html&#34;&gt;std::insert_iterator&lt;/a&gt;&lt;/code&gt;クラスのコンストラクタ、代入演算子、間接参照演算子、インクリメント演算子、および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/back_inserter.html&#34;&gt;std::back_inserter()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/front_inserter.html&#34;&gt;std::front_inserter()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/inserter.html&#34;&gt;std::inserter()&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;constexpr&lt;/code&gt;を追加。これらのクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;型を&lt;code&gt;T&amp;amp;&lt;/code&gt;型に展開する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/unwrap_reference.html&#34;&gt;std::unwrap_reference&lt;/a&gt;&lt;/code&gt;型特性、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;std::decay&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;型の展開をする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/unwrap_ref_decay.html&#34;&gt;std::unwrap_ref_decay&lt;/a&gt;&lt;/code&gt;型特性を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt;クラス、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/ref.html&#34;&gt;std::ref()&lt;/a&gt;&lt;/code&gt;関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/cref.html&#34;&gt;std::cref()&lt;/a&gt;&lt;/code&gt;関数のテンプレートパラメータ&lt;code&gt;T&lt;/code&gt;型に不完全型を指定することを許可&lt;/li&gt;
&lt;li&gt;メンバ関数の部分適用をかんたんにするために、プレースホルダーの指定なく引数を先頭から順に束縛する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/reference_wrapper.html&#34;&gt;std::reference_wrapper&lt;/a&gt;&lt;/code&gt;の各操作、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.html&#34;&gt;std::not_fn()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind.html&#34;&gt;std::bind()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/mem_fn.html&#34;&gt;std::mem_fn()&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;li&gt;コンセプトの導入にともない、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に、受け取った値をそのまま返す関数オブジェクト&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/identity.html&#34;&gt;std::identity&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;クラスに、先頭の部分文字列を判定する&lt;code&gt;starts_with()&lt;/code&gt;メンバ関数、末尾の部分文字列を判定する&lt;code&gt;ends_with()&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/reserve.html&#34;&gt;reserve()&lt;/a&gt;&lt;/code&gt;メンバ関数の、メモリの縮小機能を削除し、伸長のみとする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;std::char_traits&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits/move.html&#34;&gt;move()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits/copy.html&#34;&gt;copy()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/char_traits/assign.html&#34;&gt;assign()&lt;/a&gt;&lt;/code&gt;静的メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行・並列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag.html&#34;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt;クラスのデフォルトコンストラクタが、値初期化するよう動作変更。これまではC言語との互換性のために未初期化となっていた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;に対する特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスの浮動小数点数型に対する特殊化を追加&lt;/li&gt;
&lt;li&gt;アトミッククラスに対するブロッキング同期の機能として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/wait.html&#34;&gt;wait()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/notify_one.html&#34;&gt;notify_one()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/notify_all.html&#34;&gt;notify_all()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ロックフリーであることが保証されたアトミック整数型の別名として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;atomic_signed_lock_free&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;atomic_unsigned_lock_free&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/memory_order.html&#34;&gt;std::memory_order&lt;/a&gt;&lt;/code&gt;の列挙子にスコープをもたせた&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag.html&#34;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;bool&lt;/code&gt;値を読み込むメンバ関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag/test.html&#34;&gt;test()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;非アトミックなオブジェクトにアトミック操作を適用するためのクラス&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_ref.html&#34;&gt;std::atomic_ref&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ベクトル化の実行ポリシーとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/execution/execution/execution_policy.html&#34;&gt;std::execution::unsequenced_policy&lt;/a&gt;&lt;/code&gt;型と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/execution/execution/execution_policy.html&#34;&gt;std::execution::unseq&lt;/a&gt;&lt;/code&gt;タグを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;同期ストリームの追加にともなって、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;に、同期ストリーム関係の出力マニピュレータを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/istream/basic_istream/op_istream_free.html&#34;&gt;operator&amp;gt;&amp;gt;&lt;/a&gt;(basic_istream&amp;amp;, CharT*)&lt;/code&gt;を&lt;code&gt;operator&amp;gt;&amp;gt;(basic_istream&amp;amp;, CharT (&amp;amp;)[N])&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html&#34;&gt;operator&amp;lt;&amp;lt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;wchar_t&lt;/code&gt; (&lt;code&gt;char&lt;/code&gt;版のみ)、&lt;code&gt;char8_t&lt;/code&gt;、&lt;code&gt;char16_t&lt;/code&gt;、&lt;code&gt;char32_t&lt;/code&gt;のdelete宣言を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/istream_iterator.html&#34;&gt;std::istream_iterator&lt;/a&gt;&lt;/code&gt;について、要件の書き方を整理し、振る舞いをより明確化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::basic_stringbuf&lt;/code&gt;、&lt;code&gt;std::basic_istringstream&lt;/code&gt;、&lt;code&gt;std::basic_ostringstream&lt;/code&gt;クラスに、アロケータを伝播させるためのインタフェースを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_shared.html&#34;&gt;std::make_shared()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocate_shared.html&#34;&gt;std::allocate_shared()&lt;/a&gt;&lt;/code&gt;を配列に対応&lt;/li&gt;
&lt;li&gt;スマートポインタをデフォルト初期化で構築するヘルパ関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_unique_for_overwrite.html&#34;&gt;std::make_unique_for_overwrite()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_shared_for_overwrite.html&#34;&gt;std::make_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocate_shared_for_overwrite.html&#34;&gt;std::allocate_shared_for_overwrite()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ポインタを生ポインタに変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/to_address.html&#34;&gt;std::to_address()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_traits.html&#34;&gt;std::pointer_traits&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_traits/pointer_to.html&#34;&gt;pointer_to()&lt;/a&gt;&lt;/code&gt;関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Nバイトアライメントされたポインタであることをコンパイラに伝える&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/assume_aligned.html&#34;&gt;std::assume_aligned()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、uses allocator構築をサポートするユーティリティ関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uses_allocator_construction_args.html&#34;&gt;std::uses_allocator_construction_args()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/make_obj_using_allocator.html&#34;&gt;std::make_obj_using_allocator()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/uninitialized_construct_using_allocator.html&#34;&gt;std::uninitialized_construct_using_allocator()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator.html&#34;&gt;std::pmr::polymorphic_allocator&lt;/a&gt;&lt;/code&gt;に、以下の変更を追加：&lt;ul&gt;
&lt;li&gt;クラステンプレートのデフォルトテンプレート引数を&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;&lt;/code&gt;型とした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void*&lt;/code&gt;のバイト列をメモリ確保する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_bytes.html&#34;&gt;allocate_bytes()&lt;/a&gt;&lt;/code&gt;、解放する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/deallocate_bytes.html&#34;&gt;deallocate_bytes()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;指定した型のメモリを確保する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_object.html&#34;&gt;allocate_object()&lt;/a&gt;&lt;/code&gt;、解放する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/deallocate_object.html&#34;&gt;deallocate_object()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;指定した型のメモリ確保と構築をする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/new_object.html&#34;&gt;new_object()&lt;/a&gt;&lt;/code&gt;、破棄と解放をする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/delete_object.html&#34;&gt;delete_object()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/swap.html&#34;&gt;std::swap()&lt;/a&gt;&lt;/code&gt;関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/exchange.html&#34;&gt;std::exchange()&lt;/a&gt;&lt;/code&gt;関数に&lt;code&gt;constexpr&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/code&gt;クラスを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;クラスの&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/op_constructor.html&#34;&gt;コンストラクタ&lt;/a&gt;、&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/op_assign.html&#34;&gt;代入演算子&lt;/a&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/swap.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair/swap_free.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;非メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加。このクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;クラスの&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/op_constructor.html&#34;&gt;コンストラクタ&lt;/a&gt;、&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/op_assign.html&#34;&gt;代入演算子&lt;/a&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/swap.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;メンバ関数、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple/swap_free.html&#34;&gt;swap()&lt;/a&gt;&lt;/code&gt;非メンバ関数に&lt;code&gt;constexpr&lt;/code&gt;を追加。このクラスのメンバ関数はすべて&lt;code&gt;constexpr&lt;/code&gt;に対応した&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファイルシステム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/create_directory.html&#34;&gt;std::filesystem::create_directory()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem/create_directories.html&#34;&gt;std::filesystem::create_directories()&lt;/a&gt;&lt;/code&gt;の仕様が直感的ではなく、すでにディレクトリが存在している場合にエラーとなっていた。C++20ではその状況ではエラーにならないようにする (エラーではなく&lt;code&gt;false&lt;/code&gt;が返る)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、constexpr関数が定数式評価されたかを判定する特殊な関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_constant_evaluated.html&#34;&gt;std::is_constant_evaluated()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、型のCV修飾と参照を除去する型特性クラスとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_cvref.html&#34;&gt;std::remove_cvref&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、受け取った型をそのまま返す&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/type_identity.html&#34;&gt;std::type_identity&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、例外送出せずに暗黙の型変換が可能かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_convertible.html&#34;&gt;std::is_nothrow_convertible&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、要素数が判明している配列型かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_bounded_array.html&#34;&gt;std::is_bounded_array&lt;/a&gt;&lt;/code&gt;、要素数が不明な配列型かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_unbounded_array.html&#34;&gt;std::is_unbounded_array&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、レイアウト互換性、ポインタ変換可能性を判定する以下の型特性を追加：&lt;ul&gt;
&lt;li&gt;2つの型にレイアウト互換があるかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_layout_compatible.md.nolink&#34;&gt;std::is_layout_compatible&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;基底クラスと派生クラスの間でポインタ変換可能かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pointer_interconvertible_base_of.md.nolink&#34;&gt;std::is_pointer_interconvertible_base_of&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;メンバポインタがクラスのポインタに変換可能かを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pointer_interconvertible_with_class.md.nolink&#34;&gt;is_pointer_interconvertible_with_class()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2つの互換レイアウトをもつメンバポインタが共通位置にあるかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_corresponding_member.md.nolink&#34;&gt;std::is_corresponding_member()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一貫比較非機能によって比較演算子の定義が容易になったため、不要になった演算子の簡潔定義機能である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/rel_ops.html&#34;&gt;std::rel_ops&lt;/a&gt;&lt;/code&gt;を非推奨化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/reserve.html&#34;&gt;reserve()&lt;/a&gt;&lt;/code&gt;メンバ関数が、メモリの縮小をしなくなったため、デフォルト引数&lt;code&gt;0&lt;/code&gt;を非推奨可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag.html&#34;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt;クラスのデフォルトコンストラクタが値初期化するようになったため、不要になった以下のアトミックオブジェクトの初期化機能を非推奨化：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_init.html&#34;&gt;std::atomic_init()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_var_init.html&#34;&gt;ATOMIC_VAR_INIT&lt;/a&gt;&lt;/code&gt;マクロ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_flag_init.html&#34;&gt;ATOMIC_FLAG_INIT&lt;/a&gt;&lt;/code&gt;マクロ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/code&gt;クラスが導入されたことでC++17から非推奨化されていた、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;allocator&lt;/a&gt;&lt;/code&gt;の以下のメンバを削除：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;difference_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pointer&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_pointer&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reference&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_reference&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rebind&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/address.html&#34;&gt;address()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/allocate.html&#34;&gt;allocate()&lt;/a&gt;&lt;/code&gt;メンバ関数の&lt;code&gt;hint&lt;/code&gt;パラメータ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/max_size.html&#34;&gt;max_size()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/construct.html&#34;&gt;construct()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/destroy.html&#34;&gt;destroy()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++11で&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator_traits.html&#34;&gt;allocator_traits&lt;/a&gt;&lt;/code&gt;クラスが導入されたことでC++17から非推奨化されていた、要素型を再束縛するための&lt;code&gt;allocator&amp;lt;void&amp;gt;&lt;/code&gt;特殊化を非推奨化&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていた、&lt;code&gt;constexpr&lt;/code&gt;で扱える型の分類である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_literal_type.html&#34;&gt;is_literal_type&lt;/a&gt;&lt;/code&gt;型特性を削除&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていた、一時的なメモリ確保のための&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/get_temporary_buffer.html&#34;&gt;std::get_temporary_buffer()&lt;/a&gt;&lt;/code&gt;関数と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/return_temporary_buffer.html&#34;&gt;std::return_temporary_buffer()&lt;/a&gt;&lt;/code&gt;関数を削除&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/raw_storage_iterator.html&#34;&gt;raw_storage_iterator&lt;/a&gt;&lt;/code&gt;クラスを削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.html&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;の追加にともない、C++17から非推奨化されていた以下の機能を削除：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;not1()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;not2()&lt;/a&gt;&lt;/code&gt;関数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;unary_negate&lt;/a&gt;&lt;/code&gt;クラス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/negators.html&#34;&gt;binary_nagate&lt;/a&gt;&lt;/code&gt;クラス&lt;/li&gt;
&lt;li&gt;標準関数オブジェクトの&lt;code&gt;result_type&lt;/code&gt;、&lt;code&gt;argument_type&lt;/code&gt;、&lt;code&gt;first_argument_type&lt;/code&gt;、&lt;code&gt;second_argument_type&lt;/code&gt;型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++17から非推奨化されていた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;shared_ptr&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr/unique.html&#34;&gt;unique()&lt;/a&gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/invoke_result.html&#34;&gt;invoke_result&lt;/a&gt;&lt;/code&gt;の追加にともない、C++17から非推奨化されていた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/result_of.html&#34;&gt;result_of&lt;/a&gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;C++17での&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/uncaught_exceptions.html&#34;&gt;uncaught_exceptions()&lt;/a&gt;&lt;/code&gt;の追加にともない、非推奨化していた&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception/uncaught_exception.html&#34;&gt;uncaught_exception()&lt;/a&gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;C++17で非推奨化されていたC互換ライブラリ&lt;code&gt;&amp;lt;ccomplex&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ctgmath&amp;gt;&lt;/code&gt;を削除。また、C++ではなにも定義されないC互換ライブラリ&lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2131r0.html&#34; target=&#34;_blank&#34;&gt;P2131R0 Changes between C++17 and C++20 DIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>MATSUMURA Tetsuro</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>型の文脈でtypenameの省略を許可 -- &#34;型の文脈でtypenameの省略を許可&#34; の解説を追加 #727</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/down_with_typename.html"/>
      <id>4e2168a46a22c8fe72f3a4d1252758068b88cb7e:lang/cpp20/down_with_typename.md</id>
      <updated>2020-07-23T02:34:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/down_with_typename.md b/lang/cpp20/down_with_typename.md
new file mode 100644
index 000000000..05985e67a
--- /dev/null
+++ b/lang/cpp20/down_with_typename.md
@@ -0,0 +1,85 @@
+# 型の文脈でtypenameの省略を許可
+
+* cpp20[meta cpp]
+
+## 概要
+
+型しか現れない文脈では、依存名を解決するための`typename`キーワードを省略できるようにする。
+
+## 仕様
+
+修飾名は、以下の条件を満たすときに型名とみなされる。
+
+* 型しか現れない文脈にある
+    * new演算子に指定する型名
+    * [エイリアス宣言またはエイリアステンプレート宣言](/lang/cpp11/alias_templates.md)に現れる型名
+    * [後置の戻り値型](/lang/cpp11/trailing_return_types.md)
+    * テンプレート型引数のデフォルト引数
+    * `static_cast`、`const_cast`、`reinterpret_cast`、`dynamic_cast`の型名
+* 以下の宣言における型指定子である
+    * 名前空間スコープの単純宣言(≒変数宣言または構造化束縛宣言)または関数定義
+    * メンバ宣言
+    * メンバ宣言の中の引数宣言(デフォルト引数に現れる場合を除く)
+    * 識別子が修飾名である関数または関数テンプレートの引数宣言(デフォルト引数に現れる場合を除く)
+    * [ラムダ式](/lang/cpp11/lambda_expressions.md)または[requires式](consepts.md)の引数宣言(デフォルト引数に現れる場合を除く)
+    * 非型テンプレートパラメーターの宣言
+
+```cpp
+// P0634R3より引用
+template&amp;lt;class T&amp;gt; T::R f();     // OK, グローバルスコープにおける関数の戻り値
+template&amp;lt;class T&amp;gt; void f(T::R); // Ill-formed, void型の変数テンプレートの宣言
+
+template&amp;lt;class T&amp;gt; struct S {
+  // クラススコープ
+  using Ptr = PtrTraits&amp;lt;T&amp;gt;::Ptr; // OK, エイリアス宣言
+  T::R f(T::P p) {               // OK, メンバ宣言、およびメンバ宣言における仮引数宣言
+    return static_cast&amp;lt;T::R&amp;gt;(p); // OK, static_castの型名
+  }
+  auto g() -&amp;gt; S&amp;lt;T*&amp;gt;::Ptr;        // OK, 後置戻り値型
+};
+
+template&amp;lt;typename T&amp;gt; void f() {
+  // ブロックスコープ
+  void (*pf)(T::X); // T::Xで初期化されるvoid*型の変数pf
+  void g(T::X);     // エラー: void型の変数宣言
+}
+```
+- P0634R3[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html]
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template&amp;lt;typename T&amp;gt;
+auto Begin(const T&amp;amp; t) -&amp;gt; T::const_iterator {
+  return t.begin();
+}
+
+int main()
+{
+  std::vector v = {1, 2, 3, 4, 5};
+  std::cout &amp;lt;&amp;lt; *Begin(v) &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+1
+```
+
+## この機能が必要になった背景・経緯
+
+以前から基底クラスの指定では`typename`を省略することができた。
+
+```cpp
+template&amp;lt;class T&amp;gt;
+struct Derived: T::Base // typename不要
+{};
+```
+
+しかし、他にも型しか現れない文脈は存在するので、それらでも`typename`を省略できるようになった。
+
+## 参照
+
+- [P0634R3 Down with `typename`!](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0634r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>MATSUMURA Tetsuro</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy -- fs::copy : C++20仕様に修正</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/copy.html"/>
      <id>fdfd530a64fb5ea3b2ec4eb2e808477b9a571f61:reference/filesystem/copy.md</id>
      <updated>2020-07-21T16:12:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/copy.md b/reference/filesystem/copy.md
index ef2cb3881..0475ee7fe 100644
--- a/reference/filesystem/copy.md
+++ b/reference/filesystem/copy.md
@@ -69,6 +69,7 @@ namespace std::filesystem {
         - `(options &amp;amp; copy_options::create_hard_links) != copy_options::none`であれば、コピー元ファイルのハードリンクを、コピー先に作成する
         - コピー先がディレクトリである場合、[`copy_file`](copy_file.md)`(from, to/`[`from.filename()`](path/filename.md)`, options)`を実行する
         - いずれの条件にも合致しない場合は、[`copy_file`](copy_file.md)`(from, to, options)`を実行する
+    - コピー元がディレクトリであり、`(options &amp;amp; copy_options::create_symlinks) != copy_options::none`である場合、[`make_error_code`](/reference/system_error/make_error_code.md)`(`[`errc::is_a_directory`](/reference/system_error/errc.md)`)`と等値な[`error_code`](/reference/system_error/error_code.md)オブジェクトをエラーとして報告する
     - コピー元がディレクトリであり、`((options &amp;amp; copy_options::recursive) != copy_options::none || options == copy_options::none)`である場合、
         - コピー先にディレクトリが存在しない場合は、[`create_directory`](create_directory.md)`(to, from)`を実行する
         - その後、コピー元ディレクトリの全ての要素を、以下のようにコピーする (`in-recursive-copy`は、[`copy_options`](copy_options.md)には含まれないビットマスク要素)：
@@ -191,3 +192,6 @@ int main()
 
 ## 参照
 - [LWG Issue 3015. `copy_options::unspecified` underspecified](https://wg21.cmeerw.net/lwg/issue3015)
+- [LWG Issue 2682. `filesystem::copy()` won&amp;#39;t create a symlink to a directory](https://wg21.cmeerw.net/lwg/issue2682)
+    - C++17策定同時の仕様では、`copy(&amp;#34;/&amp;#34;, &amp;#34;root&amp;#34;, copy_options::create_symlinks);`のような状況 (コピー元がディレクトリで、`create_symlinks`オプション付き) でコピー先ディレクトリにシンボリックリンクが作られない問題があった。GNUの`cp -s`コマンドでは「ディレクトリ`&amp;#34;/&amp;#34;`の処理は省略された」と表示されてエラー終了する。この問題に対する仕様変更ではその動作に合わせて、コピー元がディレクトリで`create_symlinks`オプションが指定された場合、エラーを報告するようになった
+    - この問題は2016年4月に報告された。仕様としてはC++20に含まれるが、過去に遡ってC++17のコンパイラでもこの仕様に対応している可能性がある
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
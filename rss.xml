<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-03T15:12:03.299780</updated>
  <id>2d4d5c1b-589e-4d19-afe4-e9c104bbe367</id>

  
    <entry>
      <title>as_awaitable -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/as_awaitable.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/as_awaitable.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/as_awaitable.md b/reference/execution/execution/as_awaitable.md
index fa406534a..9b758ed05 100644
--- a/reference/execution/execution/as_awaitable.md
+++ b/reference/execution/execution/as_awaitable.md
@@ -218,3 +218,4 @@ value-type await_resume();
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic-operation -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/basic-operation.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/basic-operation.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/basic-operation.md b/reference/execution/execution/basic-operation.md
index d6b41da85..ff9838484 100644
--- a/reference/execution/execution/basic-operation.md
+++ b/reference/execution/execution/basic-operation.md
@@ -151,3 +151,4 @@ using indices-for = remove_reference_t&amp;lt;Sndr&amp;gt;::indices-for;  // exposition only
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>connect -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/connect.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/connect.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/connect.md b/reference/execution/execution/connect.md
index 346172278..1ca3d497b 100644
--- a/reference/execution/execution/connect.md
+++ b/reference/execution/execution/connect.md
@@ -125,7 +125,7 @@ completion_signatures&amp;lt;
 * set_stopped_t[link set_stopped.md]
 * exception_ptr[link /reference/exception/exception_ptr.md]
 
-説明用の関数テンプレート`suspend-complete`とコルーチン`suspend-awaitable`を下記の通り定義する。
+説明用の関数テンプレート`suspend-complete`とコルーチン`connect-awaitable`を下記の通り定義する。
 
 ```cpp
 namespace std::execution {
@@ -237,3 +237,4 @@ int main()
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_value -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_value.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/let_value.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_value.md b/reference/execution/execution/let_value.md
index effdb9a9d..126b5d1e8 100644
--- a/reference/execution/execution/let_value.md
+++ b/reference/execution/execution/let_value.md
@@ -403,3 +403,4 @@ catch 0
 ## 参照
 - [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule_from -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule_from.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/schedule_from.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule_from.md b/reference/execution/execution/schedule_from.md
index 43464855e..7ca0c2e01 100644
--- a/reference/execution/execution/schedule_from.md
+++ b/reference/execution/execution/schedule_from.md
@@ -212,3 +212,4 @@ Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、
 ## 参照
 - [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/scheduler.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 0a456b15a..9cb7b25f2 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -133,3 +133,4 @@ int main()
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>when_all -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/when_all.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/when_all.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/when_all.md b/reference/execution/execution/when_all.md
index 31cff92e1..b94f58fd7 100644
--- a/reference/execution/execution/when_all.md
+++ b/reference/execution/execution/when_all.md
@@ -482,3 +482,4 @@ error=-2
 ## 参照
 - [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>write-env -- execution: 影響箇所へP3396R1参照追記 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/write-env.html"/>
      <id>30c85314c8ce33811bd787a30fbb96a001c8931e:reference/execution/execution/write-env.md</id>
      <updated>2025-06-04T00:06:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/write-env.md b/reference/execution/execution/write-env.md
index 8b97ac73c..3bfda3d39 100644
--- a/reference/execution/execution/write-env.md
+++ b/reference/execution/execution/write-env.md
@@ -57,3 +57,4 @@ struct impls-for&amp;lt;write-env-t&amp;gt; : default-impls {
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
+- [P3396R1 std::execution wording fixes](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3396r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>call-result-t -- functional: 実行制御ライブラリへの内部リンク付与 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/functional/call-result-t.html"/>
      <id>d512d567fb5228d3abb008e160cfdbe8be1fb7d0:reference/functional/call-result-t.md</id>
      <updated>2025-06-03T23:55:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/call-result-t.md b/reference/functional/call-result-t.md
index 687b8eda2..bccac0051 100644
--- a/reference/functional/call-result-t.md
+++ b/reference/functional/call-result-t.md
@@ -14,7 +14,7 @@ using call-result-t = decltype(declval&amp;lt;Fn&amp;gt;()(declval&amp;lt;Args&amp;gt;()...));  // expositio
 
 
 ## 備考
-説明専用のエイリアステンプレート`call-result-t`は、実行制御ライブラリの仕様定義のため導入された。
+説明専用のエイリアステンプレート`call-result-t`は、[実行制御ライブラリ](/reference/execution/execution.md)の仕様定義のため導入された。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>callable -- functional: 実行制御ライブラリへの内部リンク付与 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/functional/callable.html"/>
      <id>d512d567fb5228d3abb008e160cfdbe8be1fb7d0:reference/functional/callable.md</id>
      <updated>2025-06-03T23:55:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/callable.md b/reference/functional/callable.md
index da1ac1b63..29ca46abb 100644
--- a/reference/functional/callable.md
+++ b/reference/functional/callable.md
@@ -17,7 +17,7 @@ concept callable =  // exposition only
 
 
 ## 備考
-説明専用のコンセプト`callable`は、実行制御ライブラリの仕様定義のため導入された。
+説明専用のコンセプト`callable`は、[実行制御ライブラリ](/reference/execution/execution.md)の仕様定義のため導入された。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>decayed-typeof -- functional: 実行制御ライブラリへの内部リンク付与 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/functional/decayed-typeof.html"/>
      <id>d512d567fb5228d3abb008e160cfdbe8be1fb7d0:reference/functional/decayed-typeof.md</id>
      <updated>2025-06-03T23:55:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/decayed-typeof.md b/reference/functional/decayed-typeof.md
index f7d9e6cc5..6c243dc42 100644
--- a/reference/functional/decayed-typeof.md
+++ b/reference/functional/decayed-typeof.md
@@ -14,7 +14,7 @@ using decayed-typeof = decltype(auto(Tag));  // exposition only
 
 
 ## 備考
-説明専用のエイリアステンプレート`decayed-typeof`は、実行制御ライブラリの仕様定義のため導入された。
+説明専用のエイリアステンプレート`decayed-typeof`は、[実行制御ライブラリ](/reference/execution/execution.md)の仕様定義のため導入された。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nothrow-callable -- functional: 実行制御ライブラリへの内部リンク付与 (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/functional/nothrow-callable.html"/>
      <id>d512d567fb5228d3abb008e160cfdbe8be1fb7d0:reference/functional/nothrow-callable.md</id>
      <updated>2025-06-03T23:55:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/nothrow-callable.md b/reference/functional/nothrow-callable.md
index d82448883..836c61e12 100644
--- a/reference/functional/nothrow-callable.md
+++ b/reference/functional/nothrow-callable.md
@@ -19,7 +19,7 @@ concept nothrow-callable =   // exposition only
 
 
 ## 備考
-説明専用のコンセプト`nothrow-callable`は、実行制御ライブラリの仕様定義のため導入された。
+説明専用のコンセプト`nothrow-callable`は、[実行制御ライブラリ](/reference/execution/execution.md)の仕様定義のため導入された。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 2b8269b57..352d5fec1 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -119,8 +119,8 @@ namespace std::execution {
 | [`execution::upon_error`](execution/upon_error.md) | エラー完了時の継続処理をアタッチ (customization point object) | C++26 |
 | [`execution::upon_stopped`](execution/upon_stopped.md) | 停止完了時の継続処理をアタッチ (customization point object) | C++26 |
 | [`execution::let_value`](execution/let_value.md) | 値完了結果から入れ子の非同期操作へ変換 (customization point object) | C++26 |
-| [`execution::let_error`](execution/let_error.md.nolink) | エラー完了結果から入れ子の非同期操作へ変換 (customization point object) | C++26 |
-| [`execution::let_stopped`](execution/let_stopped.md.nolink) | 停止完了を入れ子の非同期操作へ変換 (customization point object) | C++26 |
+| [`execution::let_error`](execution/let_error.md) | エラー完了結果から入れ子の非同期操作へ変換 (customization point object) | C++26 |
+| [`execution::let_stopped`](execution/let_stopped.md) | 停止完了を入れ子の非同期操作へ変換 (customization point object) | C++26 |
 | [`execution::bulk`](execution/bulk.md) | インデクス空間上で指定関数を反復実行 (customization point object) | C++26 |
 | [`execution::split`](execution/split.md) | 入力Senderの値を複製回送信可能とする (customization point object) | C++26 |
 | [`execution::when_all`](execution/when_all.md) | 全ての入力Sender完了を待機 (customization point object) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_error -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_error.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution/let_error.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_error.md b/reference/execution/execution/let_error.md
new file mode 100644
index 000000000..696142e47
--- /dev/null
+++ b/reference/execution/execution/let_error.md
@@ -0,0 +1,84 @@
+# let_error
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct let_error_t { unspecified };
+  inline constexpr let_error_t let_error{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`let_error`は、新しいSenderを返す関数呼び出し可能なオブジェクトに引き渡すことで、入力[Sender](sender.md)の[エラー完了](set_error.md)結果から入れ子の非同期操作へと変換するSenderアダプタである。
+
+`let_error`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
+
+Senderアルゴリズム`let_error`の仕様は、[`let_value`](let_value.md)ページを参照のこと。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  { // 関数呼び出し
+    ex::sender auto snd0 = ex::just_error(21);
+    ex::sender auto snd1 = ex::let_error(
+      snd0,
+      [](int n) -&amp;gt; ex::sender auto {
+        return ex::just(n * 2);
+      });
+    auto [val] = std::this_thread::sync_wait(snd1).value();
+    std::println(&amp;#34;{}&amp;#34;, val);
+  }
+
+  { // パイプライン記法
+    ex::sender auto sndr = ex::just_error(21)
+      | ex::let_error(
+          [](int n) -&amp;gt; ex::sender auto {
+            return ex::just(n * 2);
+          });
+    auto [val] = std::this_thread::sync_wait(sndr).value();
+    std::println(&amp;#34;{}&amp;#34;, val);
+  }
+}
+```
+* ex::let_error[color ff0000]
+* ex::sender[link sender.md]
+* ex::just[link just.md]
+* ex::just_error[link just_error.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* value()[link /reference/optional/optional/value.md]
+
+### 出力
+```
+42
+42
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::let_value`](let_value.md)
+- [`execution::let_stopped`](let_stopped.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_stopped -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_stopped.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution/let_stopped.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_stopped.md b/reference/execution/execution/let_stopped.md
new file mode 100644
index 000000000..6710af764
--- /dev/null
+++ b/reference/execution/execution/let_stopped.md
@@ -0,0 +1,84 @@
+# let_stopped
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct let_stopped_t { unspecified };
+  inline constexpr let_stopped_t let_stopped{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`let_stopped`は、新しいSenderを返す関数呼び出し可能なオブジェクトに引き渡すことで、入力[Sender](sender.md)の[停止完了](set_stopped.md)結果から入れ子の非同期操作へと変換するSenderアダプタである。
+
+`let_stopped`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
+
+Senderアルゴリズム`let_stopped`の仕様は、[`let_value`](let_value.md)ページを参照のこと。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  { // 関数呼び出し
+    ex::sender auto snd0 = ex::just_stopped();
+    ex::sender auto snd1 = ex::let_stopped(
+      snd0,
+      []() -&amp;gt; ex::sender auto {
+        return ex::just(42);
+      });
+    auto [val] = std::this_thread::sync_wait(snd1).value();
+    std::println(&amp;#34;{}&amp;#34;, val);
+  }
+
+  { // パイプライン記法
+    ex::sender auto sndr = ex::just_stopped()
+      | ex::let_stopped(
+          []() -&amp;gt; ex::sender auto {
+            return ex::just(42);
+          });
+    auto [val] = std::this_thread::sync_wait(sndr).value();
+    std::println(&amp;#34;{}&amp;#34;, val);
+  }
+}
+```
+* ex::let_stopped[color ff0000]
+* ex::sender[link sender.md]
+* ex::just[link just.md]
+* ex::just_stopped[link just_stopped.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* value()[link /reference/optional/optional/value.md]
+
+### 出力
+```
+42
+42
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::let_value`](let_value.md)
+- [`execution::let_error`](let_error.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_value -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_value.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution/let_value.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_value.md b/reference/execution/execution/let_value.md
index a8ef9f842..effdb9a9d 100644
--- a/reference/execution/execution/let_value.md
+++ b/reference/execution/execution/let_value.md
@@ -17,27 +17,35 @@ namespace std::execution {
 
 `let_value`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
 
+本ページにてSenderアルゴリズム`let_value`／[`let_error`](let_error.md)／[`let_stopped`](let_stopped.md)の動作仕様を包括的に説明するため、以降のセクションにおいては、`let-cpo`, `set-cpo`をそれぞれ下記の通りとする。
+
+| `let-cpo` | `set-cpo` |
+|----|----|
+| `let_value` | [`set_value`](set_value.md) |
+| [`let_error`](let_error.md) | [`set_error`](set_error.md) |
+| [`let_stopped`](let_stopped.md) | [`set_stopped`](set_stopped.md) |
+
 
 ## 効果
-説明用の式`sndr`と`f`に対して、`decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは`decltype((f))`が[`movable-value`](../movable-value.md)を満たさないとき、呼び出し式`let_value(sndr, f)`は不適格となる。
+説明用の式`sndr`と`f`に対して、`decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは`decltype((f))`が[`movable-value`](../movable-value.md)を満たさないとき、呼び出し式`let-cpo(sndr, f)`は不適格となる。
 
-そうでなければ、呼び出し式`let_value(sndr, f)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+そうでなければ、呼び出し式`let-cpo(sndr, f)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
 
 ```cpp
-transform_sender(get-domain-early(sndr), make-sender(let_value, f, sndr))
+transform_sender(get-domain-early(sndr), make-sender(let-cpo, f, sndr))
 ```
 * transform_sender[link transform_sender.md]
 * get-domain-early[link get-domain-early.md]
 * make-sender[link make-sender.md]
 
 
-### Senderアルゴリズムタグ `let_value`
+### Senderアルゴリズムタグ `let-cpo`
 Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
 
 ```cpp
 namespace std::execution {
   template&amp;lt;&amp;gt;
-  struct impls-for&amp;lt;decayed-typeof&amp;lt;let_value&amp;gt;&amp;gt; : default-impls {
+  struct impls-for&amp;lt;decayed-typeof&amp;lt;let-cpo&amp;gt;&amp;gt; : default-impls {
     static constexpr auto get-state = see below;
     static constexpr auto complete = see below;
   };
@@ -46,9 +54,10 @@ namespace std::execution {
 * impls-for[link impls-for.md]
 * default-impls[link impls-for.md]
 * decayed-typeof[link /reference/functional/decayed-typeof.md]
+* let-cpo[italic]
 * see below[italic]
 
-`impls-for&amp;lt;decayed-typeof&amp;lt;let_value&amp;gt;&amp;gt;::get-state`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+`impls-for&amp;lt;decayed-typeof&amp;lt;let-cpo&amp;gt;&amp;gt;::get-state`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
 
 - `args_variant_t` : 入力Sender`sndr`の完了シグネチャ集合から求まる送信値リスト型情報(`variant&amp;lt;monostate, tuple&amp;lt;...&amp;gt;, ...&amp;gt;`)
 - `ops2_variant_t` : `f`が返すSenderに対応する非同期操作型情報(`variant&amp;lt;monostate, {OperationState型}, ...&amp;gt;`)
@@ -78,7 +87,7 @@ namespace std::execution {
 * decay_t[link /reference/type_traits/decay.md]
 * see below[italic]
 
-- 説明用のパック`Sigs`を[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;`[`child-type`](child-type.md)`&amp;lt;Sndr&amp;gt;,` [`env_of_t`](env_of_t.md)`&amp;lt;Rcvr&amp;gt;&amp;gt;`による[`completion_signatures`](completion_signatures.md)特殊化のテンプレートパラメータとし、パック`LetSigs`を`Sigs`に含まれる型のうち戻り値型が[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;`[`set_value`](set_value.md)`&amp;gt;`に等しいものと定義する。説明用のエイリアステンプレート`as-tuple&amp;lt;Tag(Args...)&amp;gt;`を[`decayed-tuple`](decayed-tuple.md)`&amp;lt;Args...&amp;gt;`と定義する。型`args_variant_t`は下記定義において重複削除した型となる。
+- 説明用のパック`Sigs`を[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;`[`child-type`](child-type.md)`&amp;lt;Sndr&amp;gt;,` [`env_of_t`](env_of_t.md)`&amp;lt;Rcvr&amp;gt;&amp;gt;`による[`completion_signatures`](completion_signatures.md)特殊化のテンプレートパラメータとし、パック`LetSigs`を`Sigs`に含まれる型のうち戻り値型が[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;set-cpo&amp;gt;`に等しいものと定義する。説明用のエイリアステンプレート`as-tuple&amp;lt;Tag(Args...)&amp;gt;`を[`decayed-tuple`](decayed-tuple.md)`&amp;lt;Args...&amp;gt;`と定義する。型`args_variant_t`は下記定義において重複削除した型となる。
 
     ```cpp
     variant&amp;lt;monostate, as-tuple&amp;lt;LetSigs&amp;gt;...&amp;gt;
@@ -97,35 +106,35 @@ namespace std::execution {
 
 - 型`args_variant_t`および`ops2_variant_t`が適格なときに限って、上記ラムダ式のrequires節が満たされる。
 
-`impls-for&amp;lt;decayed-typeof&amp;lt;let_value&amp;gt;&amp;gt;::complete`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
+`impls-for&amp;lt;decayed-typeof&amp;lt;let-cpo&amp;gt;&amp;gt;::complete`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
 
-- [値完了](set_value.md)の場合、`let_value`Sender構築時の引数`f`に対して`f(args...)`を呼び出し、戻り値[Sender](sender.md)から入れ子非同期操作を開始する。同Senderの完了結果を接続先[Receiver](receiver.md)へ転送する。
+- 完了関数`set-cpo`の場合、Sender構築時の引数`f`に対して`f(args...)`を呼び出し、戻り値[Sender](sender.md)から入れ子非同期操作を開始する。同Senderの完了結果を接続先[Receiver](receiver.md)へ転送する。
 - それ以外の完了操作の場合、接続先[Receiver](receiver.md)の同種完了関数へ転送する。
 
 ```cpp
 []&amp;lt;class Tag, class... Args&amp;gt;
   (auto, auto&amp;amp; state, auto&amp;amp; rcvr, Tag, Args&amp;amp;&amp;amp;... args) noexcept -&amp;gt; void {
-    if constexpr (same_as&amp;lt;Tag, decayed-typeof&amp;lt;set_value&amp;gt;&amp;gt;) {
+    if constexpr (same_as&amp;lt;Tag, decayed-typeof&amp;lt;set-cpo&amp;gt;&amp;gt;) {
       TRY-EVAL(rcvr, let-bind(state, rcvr, std::forward&amp;lt;Args&amp;gt;(args)...));
     } else {
       Tag()(std::move(rcvr), std::forward&amp;lt;Args&amp;gt;(args)...);
     }
   }
 ```
-* set_value[link set_value.md]
 * decayed-typeof[link /reference/functional/decayed-typeof.md]
 * TRY-EVAL[link set_value.md]
 * std::move[link /reference/utility/move.md]
+* set-cpo[italic]
 
-説明用の式`sndr`と`env`に対して、型`Sndr`を`decltype((sndr))`とする。[`sender-for`](sender-for.md)`&amp;lt;Sndr,` [`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;let_value&amp;gt;&amp;gt; == false`のとき、式`let_value.transform_env(sndr, env)`は不適格となる。
+説明用の式`sndr`と`env`に対して、型`Sndr`を`decltype((sndr))`とする。[`sender-for`](sender-for.md)`&amp;lt;Sndr,` [`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;let-cpo&amp;gt;&amp;gt; == false`のとき、式`let-cpo.transform_env(sndr, env)`は不適格となる。
 
-そうでなければ、式`let_value.transform_env(sndr, env)`は[`JOIN-ENV`](../queryable.md)`(let-env(sndr),` [`FWD-ENV`](../forwarding_query.md)`(env))`と等価。
+そうでなければ、式`let-cpo.transform_env(sndr, env)`は[`JOIN-ENV`](../queryable.md)`(let-env(sndr),` [`FWD-ENV`](../forwarding_query.md)`(env))`と等価。
 
 
 ## 説明専用エンティティ
 説明用の式`sndr`を用いて、`let-env(sndr)`を下記リストのうち最初に適格となる式と定義する。
 
-- [`SCHED-ENV`](schedule.md)`(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;`[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;`[`set_value`](set_value.md)`&amp;gt;&amp;gt;(`[`get_env`](get_env.md)`(sndr)))`
+- [`SCHED-ENV`](schedule.md)`(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;`[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;set-cpo&amp;gt;&amp;gt;(`[`get_env`](get_env.md)`(sndr)))`
 - [`MAKE-ENV`](../queryable.md)`(`[`get_domain`](get_domain.md)`,` [`get_domain`](get_domain.md)`(`[`get_env`](get_env.md)`(sndr)))`
 - `(void(sndr),` [`env&amp;lt;&amp;gt;{}`](env.md)`)`
 
@@ -210,11 +219,11 @@ namespace std::execution {
 Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
 [デフォルト実行ドメイン](default_domain.md)では無変換。
 
-説明用の式`out_sndr`を`let_value(sndr, f)`の戻り値[Sender](sender.md)とし、式`rcvr`を式[`connect`](connect.md)`(out_sndr, rcvr)`が適格となる[Receiver](receiver.md)とする。式[`connect`](connect.md)`(out_sndr, rcvr)`は[開始(start)](start.md)時に下記を満たす非同期操作を生成しない場合、動作は未定義となる。
+説明用の式`out_sndr`を`let-cpo(sndr, f)`の戻り値[Sender](sender.md)とし、式`rcvr`を式[`connect`](connect.md)`(out_sndr, rcvr)`が適格となる[Receiver](receiver.md)とする。式[`connect`](connect.md)`(out_sndr, rcvr)`は[開始(start)](start.md)時に下記を満たす非同期操作を生成しない場合、動作は未定義となる。
 
-- 入力[Sender](sender.md)`sndr`の完了結果で[`set_value`](set_value.md)が呼ばれるとき、`f`を呼び出すこと。
+- 入力[Sender](sender.md)`sndr`の完了結果で`set-cpo`が呼ばれるとき、`f`を呼び出すこと。
 - 非同期操作の完了は、`f`が返すSenderの完了に依存すること。
-- `sndr`により送信された他完了操作を伝搬すること。
+- `sndr`により送信された他の完了操作を伝搬すること。
 
 
 ## 例
@@ -387,8 +396,8 @@ catch 0
 
 
 ## 関連項目
-- [`execution::let_error`](let_error.md.nolink)
-- [`execution::let_stopped`](let_stopped.md.nolink)
+- [`execution::let_error`](let_error.md)
+- [`execution::let_stopped`](let_stopped.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stopped_as_error -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/stopped_as_error.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution/stopped_as_error.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/stopped_as_error.md b/reference/execution/execution/stopped_as_error.md
index 678417fc2..92c680eee 100644
--- a/reference/execution/execution/stopped_as_error.md
+++ b/reference/execution/execution/stopped_as_error.md
@@ -45,7 +45,7 @@ return let_stopped(
       return just_error(std::move(err));
     });
 ```
-* let_stopped[link let_stopped.md.nolink]
+* let_stopped[link let_stopped.md]
 * just_error[link just_error.md]
 * is_nothrow_move_constructible_v[link /reference/type_traits/is_nothrow_move_constructible.md]
 * std::move[link /reference/utility/move.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stopped_as_optional -- execution: let_error,let_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/stopped_as_optional.html"/>
      <id>01410683b0f418c9a07af00cd1f4ff03a37a0b72:reference/execution/execution/stopped_as_optional.md</id>
      <updated>2025-06-03T23:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/stopped_as_optional.md b/reference/execution/execution/stopped_as_optional.md
index 7cbab481f..fab6ba572 100644
--- a/reference/execution/execution/stopped_as_optional.md
+++ b/reference/execution/execution/stopped_as_optional.md
@@ -45,7 +45,7 @@ return let_stopped(
     []() noexcept { return just(optional&amp;lt;V&amp;gt;()); });
 ```
 * single-sender-value-type[link single-sender-value-type.md]
-* let_stopped[link let_stopped.md.nolink]
+* let_stopped[link let_stopped.md]
 * then[link then.md]
 * just[link just.md]
 * is_nothrow_constructible_v[link /reference/type_traits/is_nothrow_constructible.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: upon_error,upon_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>aa4f065f193c94d10572df14e16978c139589627:reference/execution/execution.md</id>
      <updated>2025-06-03T18:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 01255f417..2b8269b57 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -116,8 +116,8 @@ namespace std::execution {
 | [`execution::on`](execution/on.md) | 指定Senderのみ別Scheduler上で実行する (customization point object) | C++26 |
 | [`execution::schedule_from`](execution/schedule_from.md) | Sender完了に依存する作業をスケジュール (customization point object) | C++26 |
 | [`execution::then`](execution/then.md) | 値完了時の継続処理をアタッチ (customization point object) | C++26 |
-| [`execution::upon_error`](execution/upon_error.md.nolink) | エラー完了時の継続処理をアタッチ (customization point object) | C++26 |
-| [`execution::upon_stopped`](execution/upon_stopped.md.nolink) | 停止完了時の継続処理をアタッチ (customization point object) | C++26 |
+| [`execution::upon_error`](execution/upon_error.md) | エラー完了時の継続処理をアタッチ (customization point object) | C++26 |
+| [`execution::upon_stopped`](execution/upon_stopped.md) | 停止完了時の継続処理をアタッチ (customization point object) | C++26 |
 | [`execution::let_value`](execution/let_value.md) | 値完了結果から入れ子の非同期操作へ変換 (customization point object) | C++26 |
 | [`execution::let_error`](execution/let_error.md.nolink) | エラー完了結果から入れ子の非同期操作へ変換 (customization point object) | C++26 |
 | [`execution::let_stopped`](execution/let_stopped.md.nolink) | 停止完了を入れ子の非同期操作へ変換 (customization point object) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>then -- execution: upon_error,upon_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/then.html"/>
      <id>aa4f065f193c94d10572df14e16978c139589627:reference/execution/execution/then.md</id>
      <updated>2025-06-03T18:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/then.md b/reference/execution/execution/then.md
index 27187eda4..3ec21dcda 100644
--- a/reference/execution/execution/then.md
+++ b/reference/execution/execution/then.md
@@ -123,8 +123,8 @@ C++
 
 
 ## 関連項目
-- [`execution::upon_error`](upon_error.md.nolink)
-- [`execution::upon_stopped`](upon_stopped.md.nolink)
+- [`execution::upon_error`](upon_error.md)
+- [`execution::upon_stopped`](upon_stopped.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upon_error -- execution: upon_error,upon_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/upon_error.html"/>
      <id>aa4f065f193c94d10572df14e16978c139589627:reference/execution/execution/upon_error.md</id>
      <updated>2025-06-03T18:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/upon_error.md b/reference/execution/execution/upon_error.md
new file mode 100644
index 000000000..0dce0ce7e
--- /dev/null
+++ b/reference/execution/execution/upon_error.md
@@ -0,0 +1,131 @@
+# upon_error
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct upon_error_t { unspecified };
+  inline constexpr upon_error_t upon_error{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`upon_error`は、入力[Sender](sender.md)の[エラー完了操作](set_error.md)の継続として関数呼び出しをアタッチし、戻り値データを[正常完了](set_value.md)として送信するSenderアダプタである。
+
+`upon_error`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
+
+
+## 効果
+説明用の式`sndr`と`f`に対して、`decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは`decltype((f))`が[`movable-value`](../movable-value.md)を満たさないとき、呼び出し式`upon_error(sndr, f)`は不適格となる。
+
+そうでなければ、呼び出し式`upon_error(sndr, f)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+transform_sender(get-domain-early(sndr), make-sender(upon_error, f, sndr))
+```
+* transform_sender[link transform_sender.md]
+* get-domain-early[link get-domain-early.md]
+* make-sender[link make-sender.md]
+
+
+### Senderアルゴリズムタグ `upon_error`
+Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
+
+```cpp
+namespace std::execution {
+  template&amp;lt;&amp;gt;
+  struct impls-for&amp;lt;decayed-typeof&amp;lt;upon_error&amp;gt;&amp;gt; : default-impls {
+    static constexpr auto complete =
+      []&amp;lt;class Tag, class... Args&amp;gt;
+        (auto, auto&amp;amp; fn, auto&amp;amp; rcvr, Tag, Args&amp;amp;&amp;amp;... args) noexcept -&amp;gt; void {
+          if constexpr (same_as&amp;lt;Tag, decayed-typeof&amp;lt;set_error&amp;gt;&amp;gt;) {
+            TRY-SET-VALUE(rcvr,
+                          invoke(std::move(fn), std::forward&amp;lt;Args&amp;gt;(args)...));
+          } else {
+            Tag()(std::move(rcvr), std::forward&amp;lt;Args&amp;gt;(args)...);
+          }
+        };
+  };
+}
+```
+* decayed-typeof[link /reference/functional/decayed-typeof.md]
+* impls-for[link impls-for.md]
+* default-impls[link impls-for.md]
+* set_error[link set_error.md]
+* TRY-SET-VALUE[link set_value.md]
+* invoke[link /reference/functional/invoke.md]
+* std::move[link /reference/utility/move.md]
+
+
+## カスタマイゼーションポイント
+Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
+
+戻り値の[Sender](sender.md)`out_sndr`が下記を満たさない場合、呼び出し式`upon_error(sndr, f)`の動作は未定義となる。
+
+- `upon_error`に対する`sndr`のエラー結果データで`f`またはそのコピーを呼び出し、`out_sndr`の値完了として`f`の結果値を用いること。
+- 他の完了操作では変更なしに転送すること。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  { // 関数呼び出し
+    ex::sender auto snd0 = ex::just_error(42);
+    ex::sender auto snd1 = ex::upon_error(snd0, [](int err) {
+      return err;
+    });
+    auto [v] = std::this_thread::sync_wait(snd1).value();
+    std::println(&amp;#34;{}&amp;#34;, v);
+  }
+
+  { // パイプライン記法
+    ex::sender auto sndr = ex::just_error(42)
+      | ex::upon_error([](int err) {
+          return err;
+        });
+    auto [v] = std::this_thread::sync_wait(sndr).value();
+    std::println(&amp;#34;{}&amp;#34;, v);
+  }
+}
+```
+* ex::upon_error[color ff0000]
+* ex::sender[link sender.md]
+* ex::just_error[link just.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* value()[link /reference/optional/optional/value.md]
+
+### 出力
+```
+42
+42
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::then`](then.md)
+- [`execution::upon_stopped`](upon_stopped.md)
+
+
+## 参照
+- [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upon_stopped -- execution: upon_error,upon_stopped (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/upon_stopped.html"/>
      <id>aa4f065f193c94d10572df14e16978c139589627:reference/execution/execution/upon_stopped.md</id>
      <updated>2025-06-03T18:13:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/upon_stopped.md b/reference/execution/execution/upon_stopped.md
new file mode 100644
index 000000000..dc0698ae6
--- /dev/null
+++ b/reference/execution/execution/upon_stopped.md
@@ -0,0 +1,131 @@
+# upon_stopped
+* execution[meta header]
+* cpo[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  struct upon_stopped_t { unspecified };
+  inline constexpr upon_stopped_t upon_stopped{};
+}
+```
+* unspecified[italic]
+
+## 概要
+`upon_stopped`は、入力[Sender](sender.md)の[停止完了操作](set_stopped.md)の継続として関数呼び出しをアタッチし、戻り値データを[正常完了](set_value.md)として送信するSenderアダプタである。
+
+`upon_stopped`は[パイプ可能Senderアダプタオブジェクト](sender_adaptor_closure.md)であり、パイプライン記法をサポートする。
+
+
+## 効果
+説明用の式`sndr`と`f`に対して、`decltype((sndr))`が[`sender`](sender.md)を満たさない、もしくは`decltype((f))`が[`movable-value`](../movable-value.md)を満たさないとき、呼び出し式`upon_stopped(sndr, f)`は不適格となる。
+
+そうでなければ、呼び出し式`upon_stopped(sndr, f)`は`sndr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+transform_sender(get-domain-early(sndr), make-sender(upon_stopped, f, sndr))
+```
+* transform_sender[link transform_sender.md]
+* get-domain-early[link get-domain-early.md]
+* make-sender[link make-sender.md]
+
+
+### Senderアルゴリズムタグ `upon_error`
+Senderアルゴリズム動作説明用のクラステンプレート[`impls-for`](impls-for.md)に対して、下記の特殊化が定義される。
+
+```cpp
+namespace std::execution {
+  template&amp;lt;&amp;gt;
+  struct impls-for&amp;lt;decayed-typeof&amp;lt;upon_stopped&amp;gt;&amp;gt; : default-impls {
+    static constexpr auto complete =
+      []&amp;lt;class Tag, class... Args&amp;gt;
+        (auto, auto&amp;amp; fn, auto&amp;amp; rcvr, Tag, Args&amp;amp;&amp;amp;... args) noexcept -&amp;gt; void {
+          if constexpr (same_as&amp;lt;Tag, decayed-typeof&amp;lt;set_stopped&amp;gt;&amp;gt;) {
+            TRY-SET-VALUE(rcvr,
+                          invoke(std::move(fn), std::forward&amp;lt;Args&amp;gt;(args)...));
+          } else {
+            Tag()(std::move(rcvr), std::forward&amp;lt;Args&amp;gt;(args)...);
+          }
+        };
+  };
+}
+```
+* decayed-typeof[link /reference/functional/decayed-typeof.md]
+* impls-for[link impls-for.md]
+* default-impls[link impls-for.md]
+* set_stopped[link set_stopped.md]
+* TRY-SET-VALUE[link set_value.md]
+* invoke[link /reference/functional/invoke.md]
+* std::move[link /reference/utility/move.md]
+
+
+## カスタマイゼーションポイント
+Senderアルゴリズム構築時および[Receiver](receiver.md)接続時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+[デフォルト実行ドメイン](default_domain.md)では無変換。
+
+戻り値の[Sender](sender.md)`out_sndr`が下記を満たさない場合、呼び出し式`upon_stopped(sndr, f)`の動作は未定義となる。
+
+- `upon_stopped`に対する`sndr`の停止結果データで`f`またはそのコピーを呼び出し、`out_sndr`の値完了として`f`の結果値を用いること。
+- 他の完了操作では変更なしに転送すること。
+
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  { // 関数呼び出し
+    ex::sender auto snd0 = ex::just_stopped();
+    ex::sender auto snd1 = ex::upon_stopped(snd0, []() {
+      return 42;
+    });
+    auto [v] = std::this_thread::sync_wait(snd1).value();
+    std::println(&amp;#34;{}&amp;#34;, v);
+  }
+
+  { // パイプライン記法
+    ex::sender auto sndr = ex::just_stopped()
+      | ex::upon_stopped([]() {
+          return 42;
+        });
+    auto [v] = std::this_thread::sync_wait(sndr).value();
+    std::println(&amp;#34;{}&amp;#34;, v);
+  }
+}
+```
+* ex::upon_stopped[color ff0000]
+* ex::sender[link sender.md]
+* ex::just_stopped[link just.md]
+* std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
+* value()[link /reference/optional/optional/value.md]
+
+### 出力
+```
+42
+42
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::then`](then.md)
+- [`execution::upon_error`](upon_error.md)
+
+
+## 参照
+- [P2999R3 Sender Algorithm Customization](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2999r3.html)
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get-domain-late -- execution: fix spelling query-or-default (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get-domain-late.html"/>
      <id>4f5dd2acb5473aabe4e3d0b9bdc55c82d6f15649:reference/execution/execution/get-domain-late.md</id>
      <updated>2025-06-03T13:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get-domain-late.md b/reference/execution/execution/get-domain-late.md
index 5d6c3880d..877a17341 100644
--- a/reference/execution/execution/get-domain-late.md
+++ b/reference/execution/execution/get-domain-late.md
@@ -30,10 +30,10 @@ constexpr auto get-domain-late(const Sndr&amp;amp; sndr, const Env&amp;amp; env) noexcept;
     ```cpp
     [] {
       auto [_, sch, _] = sndr;
-      return query-or-default(get_domain, sch, default_domain());
+      return query-with-default(get_domain, sch, default_domain());
     }();
     ```
-    * query-or-default[link query-or-default.md.nolink]
+    * query-with-default[link query-with-default.md]
     * get_domain[link get_domain.md]
     * default_domain()[link default_domain.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>on -- execution: fix spelling query-or-default (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/on.html"/>
      <id>4f5dd2acb5473aabe4e3d0b9bdc55c82d6f15649:reference/execution/execution/on.md</id>
      <updated>2025-06-03T13:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/on.md b/reference/execution/execution/on.md
index 80fd0b3da..22906fc8b 100644
--- a/reference/execution/execution/on.md
+++ b/reference/execution/execution/on.md
@@ -33,11 +33,11 @@ namespace std::execution {
 
 ```cpp
 transform_sender(
-  query-or-default(get_domain, sch, default_domain()),
+  query-with-default(get_domain, sch, default_domain()),
   make-sender(on, sch, sndr))
 ```
 * transform_sender[link transform_sender.md]
-* query-or-default[link query-or-default.md.nolink]
+* query-with-default[link query-with-default.md]
 * get_domain[link get_domain.md]
 * default_domain()[link default_domain.md]
 * make-sender[link make-sender.md]
@@ -153,7 +153,7 @@ struct not-a-sender {
 Senderアルゴリズム構築時に、関連付けられた実行ドメインに対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
 [デフォルト実行ドメイン](default_domain.md)では無変換。
 
-- 呼び出し式`on(sch, sndr)` : [Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](query-or-default.md.nolink)
+- 呼び出し式`on(sch, sndr)` : [Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](query-with-default.md)
 - 呼び出し式`on(sndr, sch, closure)` : [Sender](sender.md)`sndr`に[関連付けられた実行ドメイン](get-domain-early.md)
 
 [Receiver](receiver.md)との[接続(connect)](connect.md)時に、[関連付けられた実行ドメイン](get-domain-late.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule_from -- execution: fix spelling query-or-default (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule_from.html"/>
      <id>4f5dd2acb5473aabe4e3d0b9bdc55c82d6f15649:reference/execution/execution/schedule_from.md</id>
      <updated>2025-06-03T13:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule_from.md b/reference/execution/execution/schedule_from.md
index eec40b797..43464855e 100644
--- a/reference/execution/execution/schedule_from.md
+++ b/reference/execution/execution/schedule_from.md
@@ -25,11 +25,11 @@ namespace std::execution {
 
 ```cpp
 transform_sender(
-  query-or-default(get_domain, sch, default_domain()),
+  query-with-default(get_domain, sch, default_domain()),
   make-sender(schedule_from, sch, sndr))
 ```
 * transform_sender[link transform_sender.md]
-* query-or-default[link query-or-default.md.nolink]
+* query-with-default[link query-with-default.md]
 * get_domain[link get_domain.md]
 * default_domain()[link default_domain.md]
 * make-sender[link make-sender.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>starts_on -- execution: fix spelling query-or-default (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/starts_on.html"/>
      <id>4f5dd2acb5473aabe4e3d0b9bdc55c82d6f15649:reference/execution/execution/starts_on.md</id>
      <updated>2025-06-03T13:48:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/starts_on.md b/reference/execution/execution/starts_on.md
index c82f71db8..6673b2808 100644
--- a/reference/execution/execution/starts_on.md
+++ b/reference/execution/execution/starts_on.md
@@ -23,11 +23,11 @@ namespace std::execution {
 
 ```cpp
 transform_sender(
-  query-or-default(get_domain, sch, default_domain()),
+  query-with-default(get_domain, sch, default_domain()),
   make-sender(starts_on, sch, sndr))
 ```
 * transform_sender[link transform_sender.md]
-* query-or-default[link query-or-default.md.nolink]
+* query-with-default[link query-with-default.md]
 * get_domain[link get_domain.md]
 * default_domain()[link default_domain.md]
 * make-sender[link make-sender.md]
@@ -67,7 +67,7 @@ transform_sender(
 
 
 ## カスタマイゼーションポイント
-Senderアルゴリズム構築時に、[Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](query-or-default.md.nolink)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
+Senderアルゴリズム構築時に、[Scheduler](scheduler.md)`sch`に[関連付けられた実行ドメイン](query-with-default.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
 [デフォルト実行ドメイン](default_domain.md)では無変換。
 
 [Receiver](receiver.md)との[接続(connect)](connect.md)時に、[関連付けられた実行ドメイン](get-domain-late.md)に対して[`execution::transform_sender`](transform_sender.md)経由でSender変換が行われる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
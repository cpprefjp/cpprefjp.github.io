<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-16T13:09:58.574630</updated>
  <id>5f113a7e-80e5-4771-a778-7a2b54ee6962</id>

  
    <entry>
      <title>C++国際標準規格 -- 国際標準規格 : C++23のWorking Draftを更新 #1107</title>
      <link href="https://cpprefjp.github.io/international-standard.html"/>
      <id>8ba4402df9b92a45ccca16558fc3e504d97cff28:international-standard.md</id>
      <updated>2023-01-16T22:05:35+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++国際標準規格&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#summary&#34; id=&#34;summary&#34;&gt;概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++ の標準規格の実例として ISO/IEC による&lt;strong&gt;国際標準規格&lt;/strong&gt; (international standard) がある。
最新の国際標準規格は「ISO/IEC 14882:2020 Programming Languages -- C++」(通称 C++20) である。
C++ の標準規格は、他にも各国の規格化団体によって国際標準規格に等価なものが定められている。
日本では日本工業標準調査会 (JISC) により「JIS X 3014:2003 プログラム言語C++」が定められているが古い (C++03 相当)。
ここでは特に国際標準規格について取り扱う。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#list-of-iso-cpp&#34; id=&#34;list-of-iso-cpp&#34;&gt;国際標準規格の一覧&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;通称&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-1&#34; id=&#34;note_ref-t1-1&#34;&gt;†1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;参照する規格案&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-2&#34; id=&#34;note_ref-t1-2&#34;&gt;†2&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;規格案・原案&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23.html&#34;&gt;C++23&lt;/a&gt; (C++2b)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2023 (予定)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4929(&lt;a href=&#34;http://open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4928.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4928 N4917 N4910 N4901 N4892 N4885 N4878&lt;br /&gt;N4868 N4861&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;--&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20.html&#34;&gt;C++20&lt;/a&gt; (C++2a)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2020&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4861&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-3&#34; id=&#34;note_ref-t1-3&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;(&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4861/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4860 N4849 N4842 N4835 N4830&lt;br /&gt;N4820 N4810 N4800 N4791 &lt;del&gt;N4788&lt;/del&gt;&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-4&#34; id=&#34;note_ref-t1-4&#34;&gt;†4&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;N4778 N4762 N4750 N4741 N4727&lt;br /&gt;N4713 N4700 N4687&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17.html&#34;&gt;C++17&lt;/a&gt; (C++1z)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4659(&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4659/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4660 N4659 N4640 N4618 N4606&lt;br /&gt;N4594 N4582 N4567 N4527 N4431&lt;br /&gt;N4296&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201703L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14.html&#34;&gt;C++14&lt;/a&gt; (C++1y)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2014&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4140(&lt;a href=&#34;https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4140/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4141 N4140 N3937 N3936 N3797&lt;br /&gt;N3691 N3690 N3485 N3376 N3337&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201402L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11.html&#34;&gt;C++11&lt;/a&gt; (C++0x)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N3337&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-5&#34; id=&#34;note_ref-t1-5&#34;&gt;†5&lt;/a&gt;&lt;/sup&gt;(&lt;a href=&#34;https://wg21.link/std11&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n3337/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N3291 N3290 N3242 N3225 N3126&lt;br /&gt;N3090 N3035 N3000 N2960 N2914&lt;br /&gt;N2857 N2798 N2723 N2691 N2606&lt;br /&gt;N2588 N2521 N2461 N2369 N2315&lt;br /&gt;N2284 N2134 N2009 N1905 N1804&lt;br /&gt;N1733 N1655&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201103L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C++03&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2003&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N1577&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N1577 ?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;199711L&lt;/code&gt;&lt;br /&gt;(C++98 と同じ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C++98&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:1998&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;199711L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-1&#34; id=&#34;note-t1-1&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; 括弧内は策定時・標準化前に一時的に用いられた通称&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-2&#34; id=&#34;note-t1-2&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; 最終国際規格案はPDFやHTMLなどの形で一般公開されていないため、それにほぼ同一の内容の規格案を参照する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-3&#34; id=&#34;note-t1-3&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N4861 は、C++20 DISであるN4860に対するデザインレベルの差とC++17との相互参照がない以外の差はないため、事実上 N4861 が C++20 を参照する時に用いられる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-4&#34; id=&#34;note-t1-4&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N4788 は政治的事情により撤回された (参照 N4792)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-5&#34; id=&#34;note-t1-5&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N3337 は、C++11規格に対する編集レベルの修正のみが適用された仕様案であるため、事実上 N3337 が C++11 を参照する時に用いられる。C++11規格からN3337への変更点は、&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3338.html&#34; target=&#34;_blank&#34;&gt;N3338&lt;/a&gt;を参照。&lt;br /&gt;
(それより前の公開されているC++11向け仕様案であるN3242からC++11規格に対しては、機能的な変更がいくつかあるため、C++11規格として参照するには適さない)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最新のDraftのHTML版は以下で公開されている。&lt;br /&gt;
&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/&#34; target=&#34;_blank&#34;&gt;Draft C++ Standard: Contents&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;標準規格の文章はtexで書かれており、そのソースコードは以下で2011年8月16日以降のものについて(つまりN3291より後、N3337より前)公開されている。&lt;br /&gt;
&lt;a href=&#34;https://github.com/cplusplus/draft&#34; target=&#34;_blank&#34;&gt;cplusplus/draft: C++ standards drafts&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#iso-cpp-committee&#34; id=&#34;iso-cpp-committee&#34;&gt;用語: 国際標準規格を定める組織&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C++標準化委員会&lt;/strong&gt; (C++ Standards Committee): C++ の国際標準規格を策定する団体。
  組織としての位置づけはISO/IEC JTC1/SC22/WG21になる。
  &lt;strong&gt;国際標準化機構&lt;/strong&gt; (ISO; international organization for standardization) および&lt;strong&gt;国際電気標準会議&lt;/strong&gt; (IEC; International Electronics Commission) はそれぞれ様々な規格の標準化団体である。
  &lt;strong&gt;第一合同技術委員会&lt;/strong&gt; (JTC1; Joint Technical Committee 1) は ISO/IEC の下で情報技術の標準化を行う団体である。
  下部組織の SC22 はプログラム言語の標準化を行う&lt;strong&gt;副委員会&lt;/strong&gt; (SC; subcommittee) である。
  C++標準化委員会は WG21 という&lt;strong&gt;作業グループ&lt;/strong&gt; (WG; working group) である。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CWG&lt;/strong&gt; (Core working group): C++標準化委員会の内、コア言語機能の策定を行う作業グループ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LWG&lt;/strong&gt; (Library working group): C++標準化委員会の内、標準ライブラリ機能の策定を行う作業グループ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NB&lt;/strong&gt; (national body) または&lt;strong&gt;MB/NC&lt;/strong&gt; (member body/national committee): C++標準化委員会の正会員つまり各国から派遣される団体のこと。本来は member body は ISO での名称で、national committee は IEC での名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#iso-cpp-documents&#34; id=&#34;iso-cpp-documents&#34;&gt;用語: 国際標準規格の文書&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提案文書&lt;/strong&gt; (proposal paper): 標準規格の変更についての提案文書&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;問題&lt;/strong&gt; (issue): C++標準規格の問題や課題のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠陥&lt;/strong&gt; (defect): C++標準規格に含まれるいわば &#34;バグ&#34; のこと&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DR&lt;/strong&gt; (defect report, defect resolution): 委員会で承認された欠陥の報告または欠陥の修正のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NAD&lt;/strong&gt; (not a defect): 委員会により標準規格の欠陥ではないとされた問題のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DRWP&lt;/strong&gt;: 最新の規格原案に取り込み済みの DR のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WD&lt;/strong&gt; (working draft): 作業原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CD&lt;/strong&gt; (committee draft): 委員会原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FCD&lt;/strong&gt; (final committee draft): 最終委員会原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DIS&lt;/strong&gt; (draft international standard): 国際規格案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FDIS&lt;/strong&gt; (final draft international standard): 最終国際規格案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IS&lt;/strong&gt; (international standard): 国際規格&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TR&lt;/strong&gt; (technical report): 技術報告書。用例: TR1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TS&lt;/strong&gt; (technical specifications): 技術仕様書。用例: Concepts TS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;標準規格&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/79358.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2020 - Programming languages — C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/68564.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2017 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/64029.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2014 - Information technology -- Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/50372.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2011 - Information technology -- Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/38110.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2003 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/25845.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:1998 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://webdesk.jsa.or.jp/books/W11M0090/index/?bunsyo_id=JIS%20X%203014:2003&#34; target=&#34;_blank&#34;&gt;JIS X 3014:2003 プログラム言語Ｃ＋＋／Information Technology -- Programming languages -- C++ 日本規格協会 JSA Webdesk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.cppreference.com/w/cpp/experimental&#34; target=&#34;_blank&#34;&gt;Experimental C++ Features - cppreference.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/29115656/which-draft-is-closest-to-the-c14-standard&#34; target=&#34;_blank&#34;&gt;c++ - Which draft is closest to the C++14 standard? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/81656/where-do-i-find-the-current-c-or-c-standard-documents&#34; target=&#34;_blank&#34;&gt;Where do I find the current C or C++ standard documents? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/11053960/how-are-the-cplusplus-directive-defined-in-various-compilers&#34; target=&#34;_blank&#34;&gt;c++ - How are the __cplusplus directive defined in various compilers? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee - ISOCPP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%9B%BD%E9%9A%9B%E6%A8%99%E6%BA%96%E5%8C%96%E6%A9%9F%E6%A7%8B&#34; target=&#34;_blank&#34;&gt;国際標準化機構 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%9B%BD%E9%9A%9B%E9%9B%BB%E6%B0%97%E6%A8%99%E6%BA%96%E4%BC%9A%E8%AD%B0&#34; target=&#34;_blank&#34;&gt;国際電気標準会議 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/ISO/IEC_JTC_1&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC 1 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/ISO/IEC_JTC_1/SC_22&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC 1/SC 22 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formattable -- formattable : 参照を更新</title>
      <link href="https://cpprefjp.github.io/reference/format/formattable.html"/>
      <id>6110d2acd09265649b59d92bce37988f9bb6c491:reference/format/formattable.md</id>
      <updated>2023-01-16T19:44:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formattable.md b/reference/format/formattable.md
index df74f2bbd..b10613e01 100644
--- a/reference/format/formattable.md
+++ b/reference/format/formattable.md
@@ -71,13 +71,6 @@ hello
 - [GCC](/implementation.md#gcc): 13
 - [Visual C++](/implementation.md#visual_cpp): ??
 
-## 関連項目
-
-- [C++20 コンセプト](/lang/cpp20/concepts.md)
-- [`is_copy_constructible`](/reference/type_traits/is_copy_constructible.md)
 
 ## 参照
-
-- [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
-- [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
-- [LWG Issue 3141. `CopyConstructible` doesn&amp;#39;t preserve source values](https://wg21.cmeerw.net/lwg/issue3141)
+- [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++ (将来) -- ヘッダ一覧から&lt;contract&gt;を削除し、将来のC++検討ページへ移動</title>
      <link href="https://cpprefjp.github.io/lang/future.html"/>
      <id>7435b8b5b5c5b7b909bbdecc643632204f3697c8:lang/future.md</id>
      <updated>2023-01-16T19:38:10+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++ (将来)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ここでは、将来のC++で検討されている機能を紹介する。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/future/contract-based_programming.html&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;事前条件、事後条件、表明を宣言する新たな属性構文を追加&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/contract.html&#34;&gt;&amp;lt;contract&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反のハンドリング&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>リファレンス -- ヘッダ一覧から&lt;contract&gt;を削除し、将来のC++検討ページへ移動</title>
      <link href="https://cpprefjp.github.io/reference.html"/>
      <id>7435b8b5b5c5b7b909bbdecc643632204f3697c8:reference.md</id>
      <updated>2023-01-16T19:38:10+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#language-support&#34;&gt;言語サポートライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#concepts&#34;&gt;コンセプトライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#diagnostics&#34;&gt;診断ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#general-utils&#34;&gt;汎用的なユーティリティライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#strings&#34;&gt;文字列ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#localization&#34;&gt;ローカライズライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#container&#34;&gt;コンテナライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#iterator&#34;&gt;イテレータライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#ranges&#34;&gt;レンジライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#algorithm&#34;&gt;アルゴリズムライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#numerics&#34;&gt;数値ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#io&#34;&gt;入出力ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#regular-expressions&#34;&gt;正規表現ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#atomic-operations&#34;&gt;アトミック操作ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#thread-support&#34;&gt;スレッドサポートライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#clib-facilities&#34;&gt;C言語互換ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#exposition-only&#34;&gt;説明専用ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#language-support-library&#34; id=&#34;language-support&#34;&gt;言語サポートライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/limits.html&#34;&gt;&amp;lt;limits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装プロパティ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実装依存のバージョン情報&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new.html&#34;&gt;&amp;lt;new&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;動的メモリ管理&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo.html&#34;&gt;&amp;lt;typeinfo&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型情報&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/source_location.html&#34;&gt;&amp;lt;source_location&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソースコード上の位置&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exception.html&#34;&gt;&amp;lt;exception&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外ハンドリング&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/initializer_list.html&#34;&gt;&amp;lt;initializer_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初期化子リスト&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/compare.html&#34;&gt;&amp;lt;compare&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比較演算&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine.html&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コルーチン&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#concepts&#34; id=&#34;concepts&#34;&gt;コンセプトライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;言語関係のコンセプト&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#diagnostics&#34; id=&#34;diagnostics&#34;&gt;診断ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&amp;lt;stdexcept&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外クラス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error.html&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムエラーサポート&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#general-utils&#34; id=&#34;general-utils&#34;&gt;汎用的なユーティリティライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーティリティコンポーネント&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bitset.html&#34;&gt;&amp;lt;bitset&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットの固定サイズシーケンス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時有理数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タプル&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional.html&#34;&gt;&amp;lt;optional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意で値を持たせられるオブジェクト&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant.html&#34;&gt;&amp;lt;variant&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;候補の型を切り替えながら保持できる記憶域型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/any.html&#34;&gt;&amp;lt;any&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;あらゆる型の値を保持できる記憶域型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/expected.md.nolink&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正常値かエラー値のどちらかを持たせられるオブジェクト&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型特性&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数オブジェクト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/scoped_allocator.html&#34;&gt;&amp;lt;scoped_allocator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スコープ付きアロケータ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory_resource.html&#34;&gt;&amp;lt;memory_resource&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多相アロケータ&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間ユーティリティ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeindex.html&#34;&gt;&amp;lt;typeindex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型のインデックス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/execution.html&#34;&gt;&amp;lt;execution&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;実行ポリシー&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;高速な文字列 ⇔ 数値変換&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format.html&#34;&gt;&amp;lt;format&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列フォーマット&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スタックトレース&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#strings&#34; id=&#34;strings&#34;&gt;文字列ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string.html&#34;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列クラスと、文字特性&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所有権を持たず文字列を参照する文字列クラス&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#localization&#34; id=&#34;localization&#34;&gt;ローカライズライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/locale.html&#34;&gt;&amp;lt;locale&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/codecvt.html&#34;&gt;&amp;lt;codecvt&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コード変換ファセット&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt; C++17から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#container&#34; id=&#34;container&#34;&gt;コンテナライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array.html&#34;&gt;&amp;lt;array&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;配列&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/deque.html&#34;&gt;&amp;lt;deque&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;両端キュー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/forward_list.html&#34;&gt;&amp;lt;forward_list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単方向リスト&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/list.html&#34;&gt;&amp;lt;list&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双方向リスト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/queue.html&#34;&gt;&amp;lt;queue&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;FIFOキュー&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stack.html&#34;&gt;&amp;lt;stack&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LIFOスタック&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/vector.html&#34;&gt;&amp;lt;vector&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ベクタ配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map.html&#34;&gt;&amp;lt;map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順序付き連想配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/set.html&#34;&gt;&amp;lt;set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;順序付き集合&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/flat_map.md.nolink&#34;&gt;&amp;lt;flat_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みキーによる順序付き連想配列&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/flat_set.md.nolink&#34;&gt;&amp;lt;flat_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソート済みキーによる順序付き集合&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map.html&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序連想配列&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set.html&#34;&gt;&amp;lt;unordered_set&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非順序集合&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;部分シーケンスの参照&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan.md.nolink&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#iterator&#34; id=&#34;iterator&#34;&gt;イテレータライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータの定義&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#ranges&#34; id=&#34;ranges&#34;&gt;レンジライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;レンジアルゴリズム&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/generator.html&#34;&gt;&amp;lt;generator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コルーチンによるレンジ生成&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#algorithm&#34; id=&#34;algorithm&#34;&gt;アルゴリズムライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#numerics&#34; id=&#34;numerics&#34;&gt;数値ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複素数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット操作&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乱数生成&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/valarray.html&#34;&gt;&amp;lt;valarray&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値の配列&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一般的な数値操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numbers.html&#34;&gt;&amp;lt;numbers&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#io&#34; id=&#34;io&#34;&gt;入出力ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先行宣言&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iostream.html&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;標準&lt;code&gt;iostream&lt;/code&gt;オブジェクト&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios.html&#34;&gt;&amp;lt;ios&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iostream&lt;/code&gt;基底クラス&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/streambuf.html&#34;&gt;&amp;lt;streambuf&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストリームバッファ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/istream.html&#34;&gt;&amp;lt;istream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream.html&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iomanip.html&#34;&gt;&amp;lt;iomanip&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットとマニピュレータ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/sstream.html&#34;&gt;&amp;lt;sstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列ストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream.html&#34;&gt;&amp;lt;fstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルストリーム&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/filesystem.html&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルシステム&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/syncstream.html&#34;&gt;&amp;lt;syncstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同期化出力ストリームラッパー&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/spanstream.md.nolink&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリバッファの所有権をもたないストリーム&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/print.md.nolink&#34;&gt;&amp;lt;print&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定による出力&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#regular-expressions&#34; id=&#34;regular-expressions&#34;&gt;正規表現ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/regex.html&#34;&gt;&amp;lt;regex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#atomic-operations&#34; id=&#34;atomic-operations&#34;&gt;アトミック操作ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic.html&#34;&gt;&amp;lt;atomic&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アトミックアクセスのためのコンポーネント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アトミック操作のC互換ライブラリ&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#thread-support&#34; id=&#34;thread-support&#34;&gt;スレッドサポートライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stop_token.html&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止状態&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/thread.html&#34;&gt;&amp;lt;thread&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッド&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mutex.html&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ミューテックス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/shared_mutex.html&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;共有ミューテックス&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/condition_variable.html&#34;&gt;&amp;lt;condition_variable&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件変数&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/semaphore.html&#34;&gt;&amp;lt;semaphore&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;セマフォ&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/latch.html&#34;&gt;&amp;lt;latch&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ラッチ同期&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/barrier.html&#34;&gt;&amp;lt;barrier&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バリア同期&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/future.html&#34;&gt;&amp;lt;future&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Future&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#clib-facilities&#34; id=&#34;clib-facilities&#34;&gt;C言語互換ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cassert.html&#34;&gt;&amp;lt;cassert&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサート&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ccomplex&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複素数&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字種別の判定と変換&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cerrno.html&#34;&gt;&amp;lt;cerrno&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;エラー番号&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cfenv.html&#34;&gt;&amp;lt;cfenv&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点環境へのアクセス&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cfloat.html&#34;&gt;&amp;lt;cfloat&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮動小数点数の定数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cinttypes&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;固定精度整数のための書式指定マクロ&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ciso646&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;に対する別名&lt;code&gt;and&lt;/code&gt;のような、各種演算子に対するマクロを定義する。&lt;br /&gt; ただしC++ではこれらの別名はキーワードとして定義されるため、このヘッダでは何も定義されない。&lt;/td&gt;
&lt;td&gt;C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/climits.html&#34;&gt;&amp;lt;climits&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整数型の最小値、最大値を表すマクロ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;clocale&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数学関数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;csetjmp&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ジャンプ処理&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;csignal&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シグナル&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdalign&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アライメント操作のマクロ&lt;/td&gt;
&lt;td&gt;C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdarg&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変引数操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstdbool&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;真理値型の定義&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef.html&#34;&gt;&amp;lt;cstddef&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基本的な型、値、マクロの定義&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdint.html&#34;&gt;&amp;lt;cstdint&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大きさが規定されている整数型&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdio.html&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユーティリティ関数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cstring&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ctgmath&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ジェネリックな数学関数&lt;/td&gt;
&lt;td&gt;C++11 (C99)&lt;br /&gt; C++17で非推奨&lt;br /&gt; C++20で削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ctime.html&#34;&gt;&amp;lt;ctime&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;日付・時間&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cuchar&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ユニコード文字型&lt;/td&gt;
&lt;td&gt;C++11 (C11)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cwchar&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cwctype&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字の種別と判定&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference.html#exposition-only&#34; id=&#34;exposition-only&#34;&gt;説明専用ライブラリ&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exposition-only.html&#34;&gt;exposition-only&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;説明のためのものを集めたページ (実際のライブラリではない)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- &lt;format&gt; : formattableを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format.html"/>
      <id>9769a2621a0cc735b6a3eacbc0ca487bbbaf361d:reference/format.md</id>
      <updated>2023-01-16T19:25:15+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;format&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダでは、書式文字列を使って引数をフォーマットする、いわゆる&lt;code&gt;printf&lt;/code&gt;スタイルのフォーマット関数を提供する。
このフォーマット関数は型安全であり、ユーザー定義型への拡張も可能である。&lt;/p&gt;
&lt;p&gt;書式文字列については&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;を参照。&lt;/p&gt;
&lt;h2&gt;フォーマット関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n.html&#34;&gt;format_to_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、指定した文字数を超えないように出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n_result.html&#34;&gt;format_to_n_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;format_to_n&lt;/code&gt;の結果を表す (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatted_size.html&#34;&gt;formatted_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を保存するのに必要な文字数を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat.html&#34;&gt;vformat&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat_to.html&#34;&gt;vformat_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;フォーマッター&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formattable.html&#34;&gt;formattable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列フォーマット可能 (concept)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatter.html&#34;&gt;formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数の型に対応する書式文字列の解析、値のフォーマットを担う (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;basic_format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列の解析のコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;wformat_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;basic_format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数のフォーマットのコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;wformat_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_arg.html&#34;&gt;basic_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数1つへのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/visit_format_arg.html&#34;&gt;visit_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_arg&lt;/code&gt;オブジェクトが現在保持している型に対応する関数を呼び出す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変長引数から&lt;code&gt;basic_format_arg&lt;/code&gt;の列を構築する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;make_wformat_args&lt;/code&gt;のワイド文字列版 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;basic_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数列へのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_error.html&#34;&gt;format_error&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットの失敗を表す例外クラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/format&#34; target=&#34;_blank&#34;&gt;Working Draft, Standard for Programming Language C++ [format]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html&#34; target=&#34;_blank&#34;&gt;P0645R10 Text Formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formattable -- &lt;format&gt; : formattableを追加 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/formattable.html"/>
      <id>9769a2621a0cc735b6a3eacbc0ca487bbbaf361d:reference/format/formattable.md</id>
      <updated>2023-01-16T19:25:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formattable.md b/reference/format/formattable.md
new file mode 100644
index 000000000..df74f2bbd
--- /dev/null
+++ b/reference/format/formattable.md
@@ -0,0 +1,83 @@
+# formattable
+* format[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  concept fmt-iter-for = output_iterator&amp;lt;const charT&amp;amp;&amp;gt;;
+
+  template &amp;lt;class T, class charT&amp;gt;
+  concept formattable =
+    semiregular&amp;lt;formatter&amp;lt;remove_cvref_t&amp;lt;T&amp;gt;, charT&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    requires(formatter&amp;lt;remove_cvref_t&amp;lt;T&amp;gt;, charT&amp;gt; f,
+             const formatter&amp;lt;remove_cvref_t&amp;lt;T&amp;gt;, charT&amp;gt; cf,
+             T t,
+             basic_format_context&amp;lt;fmt-iter-for&amp;lt;charT&amp;gt;, charT&amp;gt; fc,
+             basic_format_parse_context&amp;lt;charT&amp;gt; pc) {
+      { f.parse(pc) } -&amp;gt; same_as&amp;lt;basic_format_parse_context&amp;lt;charT&amp;gt;::iterator&amp;gt;;
+      { cf.format(t, fc) } -&amp;gt; same_as&amp;lt;fmt-iter-for&amp;lt;charT&amp;gt;&amp;gt;;
+    }
+  };
+}
+```
+* formatter[link formatter.md]
+* semiregular[link /reference/concepts/semiregular.md]
+* remove_cvref_t[link /reference/type_traits/remove_cvref.md]
+* basic_format_context[link basic_format_context.md]
+* basic_format_parse_context[link basic_format_parse_context.md]
+* same_as[link /reference/concepts/same_as.md]
+
+## 概要
+`formattable`は、文字列フォーマット可能であることを表すコンセプトである。
+
+このコンセプトを使用することで、[`formatter`](formatter.md)クラステンプレートが使用したい型で特殊化されているかをチェックできる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;format&amp;gt;
+#include &amp;lt;any&amp;gt;
+
+template &amp;lt;std::formattable&amp;lt;char&amp;gt; T&amp;gt;
+void f(T x) {
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, x) &amp;lt;&amp;lt; std::endl;
+}
+
+int main() {
+  f(3);       // OK
+  f(&amp;#34;hello&amp;#34;); // OK
+//f(std::any{3}); // NG : std::anyはstd::formatterを特殊化していない
+}
+```
+* std::format[link format.md]
+* 
+
+### 出力
+```
+3
+hello
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 関連項目
+
+- [C++20 コンセプト](/lang/cpp20/concepts.md)
+- [`is_copy_constructible`](/reference/type_traits/is_copy_constructible.md)
+
+## 参照
+
+- [P0898R3 Standard Library Concepts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf)
+- [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
+- [LWG Issue 3141. `CopyConstructible` doesn&amp;#39;t preserve source values](https://wg21.cmeerw.net/lwg/issue3141)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_delete -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/default_delete.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/default_delete.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/default_delete.md b/reference/memory/default_delete.md
index b1a0e5c16..9bf2d54ad 100644
--- a/reference/memory/default_delete.md
+++ b/reference/memory/default_delete.md
@@ -26,9 +26,10 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| `constexpr default_delete() noexcept=default;`&amp;lt;br/&amp;gt;`template &amp;lt;class U&amp;gt; default_delete()(default_delete&amp;lt;U&amp;gt; const&amp;amp; other) noexcept;` | コンストラクタ。 変換可能な型からのコピーも可能。 | C++11 |
+| `constexpr default_delete() noexcept = default;` | コンストラクタ。 | C++11 |
+| `template&amp;lt;class U&amp;gt; default_delete()(default_delete&amp;lt;U&amp;gt; const&amp;amp; other) noexcept;` | 変換可能な型からのコピーコンストラクタ。 | C++11&amp;lt;br/&amp;gt;C++23からconstexpr指定 |
 | `~default_delete() = default;` | デストラクタ | C++11 |
-| `void operator()(T* ptr) const;` | 関数呼び出し演算子。渡されたポインタ`ptr`を `delete ptr;`で削除する | C++11 |
+| `void operator()(T* ptr) const;` | 関数呼び出し演算子。渡されたポインタ`ptr`を `delete ptr;`で削除する | C++11&amp;lt;br/&amp;gt;C++23からconstexpr指定 |
 
 
 ## 配列版のメンバ関数
@@ -36,10 +37,10 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `constexpr default_delete() noexcept=default;` | デフォルトコンストラクタ。 | C++11|
-| `template &amp;lt;class U&amp;gt; default_delete()(const default_delete&amp;lt;U[]&amp;gt;&amp;amp;) noexcept;` | 変換可能な型からのコピーコンストラクタ。 | C++17 |
+| `template &amp;lt;class U&amp;gt; default_delete()(const default_delete&amp;lt;U[]&amp;gt;&amp;amp;) noexcept;` | 変換可能な型からのコピーコンストラクタ。 | C++17&amp;lt;br/&amp;gt;C++23からconstexpr指定 |
 | `~default_delete() = default;` | デストラクタ | C++11 |
 | `void operator()(T* ptr) const;`&amp;lt;br/&amp;gt;`template &amp;lt;class U&amp;gt;`&amp;lt;br/&amp;gt;`void operator()(U*) const = delete;` | 関数呼び出し演算子。渡されたポインタ`ptr`を `delete[] ptr;`で削除する | C++11&amp;lt;br/&amp;gt;C++14まで |
-| `template &amp;lt;class U&amp;gt; void operator()(U* ptr) const;`| 関数呼び出し演算子。渡されたポインタ`ptr`を `delete[] ptr;`で削除する。変換可能な型の配列へのポインタも削除可能。 | C++17 |
+| `template &amp;lt;class U&amp;gt; void operator()(U* ptr) const;`| 関数呼び出し演算子。渡されたポインタ`ptr`を `delete[] ptr;`で削除する。変換可能な型の配列へのポインタも削除可能。 | C++17&amp;lt;br/&amp;gt;C++23からconstexpr指定 |
 
 
 ## 例
@@ -83,4 +84,4 @@ int main()
 
 
 ## 参照
-
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_unique -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_unique.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/make_unique.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_unique.md b/reference/memory/make_unique.md
index 1edcdd71d..b15e45c44 100644
--- a/reference/memory/make_unique.md
+++ b/reference/memory/make_unique.md
@@ -7,10 +7,14 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class... Args&amp;gt;
-  unique_ptr&amp;lt;T&amp;gt; make_unique(Args&amp;amp;&amp;amp;... args);   // (1)
+  unique_ptr&amp;lt;T&amp;gt; make_unique(Args&amp;amp;&amp;amp;... args);           // (1) C++14
+  template &amp;lt;class T, class... Args&amp;gt;
+  constexpr unique_ptr&amp;lt;T&amp;gt; make_unique(Args&amp;amp;&amp;amp;... args); // (1) C++23
 
   template &amp;lt;class T&amp;gt;
-  unique_ptr&amp;lt;T&amp;gt; make_unique(size_t n);         // (2)
+  unique_ptr&amp;lt;T&amp;gt; make_unique(size_t n);           // (2) C++14
+  template &amp;lt;class T&amp;gt;
+  constexpr unique_ptr&amp;lt;T&amp;gt; make_unique(size_t n); // (2) C++23
 
   template &amp;lt;class T, class... Args&amp;gt;
   unspecified make_unique(Args&amp;amp;&amp;amp;...) = delete; // (3)
@@ -89,6 +93,8 @@ int main()
 - [N3656 make_unique (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3656.htm)
 - [Why is `make_unique&amp;lt;T[N]&amp;gt;` disallowed? - stackoverflow](https://stackoverflow.com/questions/16596950/why-is-make-uniquetn-disallowed)
     - (3)のオーバーロードの意味について
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
+
 
 ## 関連項目
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_unique_for_overwrite -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_unique_for_overwrite.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/make_unique_for_overwrite.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_unique_for_overwrite.md b/reference/memory/make_unique_for_overwrite.md
index 37ce5f94e..e22c00e00 100644
--- a/reference/memory/make_unique_for_overwrite.md
+++ b/reference/memory/make_unique_for_overwrite.md
@@ -7,10 +7,14 @@
 ```cpp
 namespace std {
   template&amp;lt;class T&amp;gt;
-  unique_ptr&amp;lt;T&amp;gt; make_unique_for_overwrite();                 // (1)
+  unique_ptr&amp;lt;T&amp;gt; make_unique_for_overwrite();                   // (1) C++20
+  template&amp;lt;class T&amp;gt;
+  constexpr unique_ptr&amp;lt;T&amp;gt; make_unique_for_overwrite();         // (1) C++23
 
   template&amp;lt;class T&amp;gt;
-  unique_ptr&amp;lt;T&amp;gt; make_unique_for_overwrite(size_t n);         // (2)
+  unique_ptr&amp;lt;T&amp;gt; make_unique_for_overwrite(size_t n);           // (2) C++20
+  template&amp;lt;class T&amp;gt;
+  constexpr unique_ptr&amp;lt;T&amp;gt; make_unique_for_overwrite(size_t n); // (2) C++23
 
   template&amp;lt;class T, class... Args&amp;gt;
   unspecified make_unique_for_overwrite(Args&amp;amp;&amp;amp;...) = delete; // (3)
@@ -82,3 +86,4 @@ int main()
 - [P1973R1 Rename &amp;#34;_default_init&amp;#34; Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1973r1.pdf)
 - [Why is `make_unique&amp;lt;T[N]&amp;gt;` disallowed? - stackoverflow](https://stackoverflow.com/questions/16596950/why-is-make-uniquetn-disallowed)
     - (3)のオーバーロードの意味について
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/get.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/get.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/get.md b/reference/memory/unique_ptr/get.md
index 2830bc81a..2876ad801 100644
--- a/reference/memory/unique_ptr/get.md
+++ b/reference/memory/unique_ptr/get.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-pointer get() const noexcept;
+pointer get() const noexcept;           // (1) C++11
+constexpr pointer get() const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -51,3 +52,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_deleter -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/get_deleter.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/get_deleter.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/get_deleter.md b/reference/memory/unique_ptr/get_deleter.md
index 4f56d8ac8..73dc0eb67 100644
--- a/reference/memory/unique_ptr/get_deleter.md
+++ b/reference/memory/unique_ptr/get_deleter.md
@@ -6,8 +6,11 @@
 * cpp11[meta cpp]
 
 ```cpp
-deleter_type&amp;amp; get_deleter() noexcept;
-const deleter_type&amp;amp; get_deleter() const noexcept;
+deleter_type&amp;amp; get_deleter() noexcept;           // (1) C++11
+constexpr deleter_type&amp;amp; get_deleter() noexcept; // (1) C++23
+
+const deleter_type&amp;amp; get_deleter() const noexcept;           // (2) C++11
+constexpr const deleter_type&amp;amp; get_deleter() const noexcept; // (2) C++23
 ```
 
 ## 概要
@@ -47,3 +50,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-&gt; -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_arrow.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_arrow.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_arrow.md b/reference/memory/unique_ptr/op_arrow.md
index 12a348a80..dcc984343 100644
--- a/reference/memory/unique_ptr/op_arrow.md
+++ b/reference/memory/unique_ptr/op_arrow.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-pointer operator-&amp;gt;() const noexcept;
+pointer operator-&amp;gt;() const noexcept;           // (1) C++11
+constexpr pointer operator-&amp;gt;() const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -53,3 +54,7 @@ hello
 - [Clang](/implementation.md#clang): 3.0
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_assign.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_assign.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_assign.md b/reference/memory/unique_ptr/op_assign.md
index bbd33568c..78fd8e446 100644
--- a/reference/memory/unique_ptr/op_assign.md
+++ b/reference/memory/unique_ptr/op_assign.md
@@ -6,14 +6,19 @@
 * cpp11[meta cpp]
 
 ```cpp
-unique_ptr&amp;amp; operator=(unique_ptr&amp;amp;&amp;amp; u) noexcept;       // (1) 単一オブジェクト、配列
+unique_ptr&amp;amp; operator=(unique_ptr&amp;amp;&amp;amp; u) noexcept;           // (1) C++11
+constexpr unique_ptr&amp;amp; operator=(unique_ptr&amp;amp;&amp;amp; u) noexcept; // (1) C++23
 
 template &amp;lt;class U, class E&amp;gt;
-unique_ptr&amp;amp; operator=(unique_ptr&amp;lt;U, E&amp;gt;&amp;amp;&amp;amp; u) noexcept; // (2) 単一オブジェクト、配列（C++17）
+unique_ptr&amp;amp; operator=(unique_ptr&amp;lt;U, E&amp;gt;&amp;amp;&amp;amp; u) noexcept;           // (2) C++11 単一オブジェクト版
+                                                                // (2) C++17 配列版
+template &amp;lt;class U, class E&amp;gt;
+constexpr unique_ptr&amp;amp; operator=(unique_ptr&amp;lt;U, E&amp;gt;&amp;amp;&amp;amp; u) noexcept; // (2) C++23
 
-unique_ptr&amp;amp; operator=(nullptr_t) noexcept;            // (3) 単一オブジェクト、配列
+unique_ptr&amp;amp; operator=(nullptr_t) noexcept;            // (3) C++11
+constexpr unique_ptr&amp;amp; operator=(nullptr_t) noexcept;  // (3) C++23
 
-unique_ptr&amp;amp; operator=(const unique_ptr&amp;amp;) = delete;    // (4) 単一オブジェクト、配列
+unique_ptr&amp;amp; operator=(const unique_ptr&amp;amp;) = delete;    // (4) C++11
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
 
@@ -112,3 +117,4 @@ int main()
 - [LWG 2246. `unique_ptr` assignment effects w.r.t. deleter](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2246)
 - [LWG 2228: Missing SFINAE rule in unique_ptr templated assignment](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4366)
     - (2)のSFINAEルール不足の欠陥修正の提案文書
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_at.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_at.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_at.md b/reference/memory/unique_ptr/op_at.md
index 61d3f0fea..319849610 100644
--- a/reference/memory/unique_ptr/op_at.md
+++ b/reference/memory/unique_ptr/op_at.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-T&amp;amp; operator[](std::size_t i) const;
+T&amp;amp; operator[](std::size_t i) const;           // (1) C++11
+constexpr T&amp;amp; operator[](std::size_t i) const; // (1) C++23
 ```
 
 ## 概要
@@ -53,3 +54,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_bool.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_bool.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_bool.md b/reference/memory/unique_ptr/op_bool.md
index 145b8743f..8dd564e71 100644
--- a/reference/memory/unique_ptr/op_bool.md
+++ b/reference/memory/unique_ptr/op_bool.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-explicit operator bool() const noexcept;
+explicit operator bool() const noexcept;           // (1) C++11
+constexpr explicit operator bool() const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -58,4 +59,4 @@ p has resource
 
 ## 参照
 - [N2435 Explicit bool for Smart Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2435.htm)
-
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_compare_3way.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_compare_3way.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_compare_3way.md b/reference/memory/unique_ptr/op_compare_3way.md
index 927572fd1..42125823c 100644
--- a/reference/memory/unique_ptr/op_compare_3way.md
+++ b/reference/memory/unique_ptr/op_compare_3way.md
@@ -16,13 +16,14 @@ namespace std {
   operator&amp;lt;=&amp;gt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; x, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; y); // (1) C++20
 
   template &amp;lt;class T, class D&amp;gt;
-    requires three_way_comparable_with&amp;lt;
-               typename unique_ptr&amp;lt;T, D&amp;gt;::pointer,
-               nullptr_t&amp;gt;
-  compare_three_way_result_t&amp;lt;
-    typename unique_ptr&amp;lt;T, D&amp;gt;::pointer,
-    nullptr_t&amp;gt;
+    requires three_way_comparable_with&amp;lt;typename unique_ptr&amp;lt;T, D&amp;gt;::pointer&amp;gt;
+  compare_three_way_result_t&amp;lt;typename unique_ptr&amp;lt;T, D&amp;gt;::pointer&amp;gt;
   operator&amp;lt;=&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++20
+
+  template &amp;lt;class T, class D&amp;gt;
+    requires three_way_comparable_with&amp;lt;typename unique_ptr&amp;lt;T, D&amp;gt;::pointer&amp;gt;
+  constexpr compare_three_way_result_t&amp;lt;typename unique_ptr&amp;lt;T, D&amp;gt;::pointer&amp;gt;
+  operator&amp;lt;=&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++23
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -34,7 +35,7 @@ namespace std {
 ## テンプレートパラメータ制約
 
 - (1) : 型`unique_ptr&amp;lt;T1, D1&amp;gt;::pointer`と型`unique_ptr&amp;lt;T2, D2&amp;gt;::pointer`が三方比較可能であること
-- (2) : 型`unique_ptr&amp;lt;T, D&amp;gt;::pointer`と型[`nullptr_t`](/reference/cstddef/nullptr_t.md)が三方比較可能であること
+- (2) : 型`unique_ptr&amp;lt;T, D&amp;gt;::pointer`同士が三方比較可能であること
 
 
 ## 戻り値
@@ -47,7 +48,7 @@ namespace std {
 
 - (2) :
     ```cpp
-    return compare_three_way()(x.get(), nullptr);
+    return compare_three_way()(x.get(), static_cast&amp;lt;typename unique_ptr&amp;lt;T, D&amp;gt;::pointer&amp;gt;(nullptr));
     ```
     * compare_three_way[link /reference/compare/compare_three_way.md]
     * get()[link get.md]
@@ -96,3 +97,5 @@ p2 is nullptr
 ## 参照
 - [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
     - C++20での三方比較演算子の追加と、関連する演算子の自動導出
+- [LWG3426 `operator&amp;lt;=&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp;, nullptr_t)` can&amp;#39;t get no satisfaction](https://cplusplus.github.io/LWG/issue3426)
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_constructor.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_constructor.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_constructor.md b/reference/memory/unique_ptr/op_constructor.md
index 8e7f6b4da..6a6820ebf 100644
--- a/reference/memory/unique_ptr/op_constructor.md
+++ b/reference/memory/unique_ptr/op_constructor.md
@@ -8,24 +8,36 @@
 ```cpp
 constexpr unique_ptr() noexcept;             // (1) 単一オブジェクト、配列
 
-explicit unique_ptr(pointer p) noexcept;     // (2) 単一オブジェクト、配列（C++14まで）
+explicit unique_ptr(pointer p) noexcept;           // (2) 単一オブジェクト、配列（C++14まで）
+constexpr explicit unique_ptr(pointer p) noexcept; // (2) 単一オブジェクト C++23
 template&amp;lt;class U&amp;gt;
-explicit unique_ptr(U p) noexcept;           // (2) 配列 C++17
+explicit unique_ptr(U p) noexcept;                 // (2) 配列 C++17
+template&amp;lt;class U&amp;gt;
+constexpr explicit unique_ptr(U p) noexcept;       // (2) 配列 C++23
 
-unique_ptr(pointer p, const D&amp;amp; d1) noexcept; // (3) 単一オブジェクト、配列（C++14まで）
+unique_ptr(pointer p, const D&amp;amp; d1) noexcept;           // (3) 単一オブジェクト、配列（C++14まで）
+constexpr unique_ptr(pointer p, const D&amp;amp; d1) noexcept; // (3) 単一オブジェクト C++23
+template&amp;lt;class U&amp;gt;
+unique_ptr(U p, const D&amp;amp; d1) noexcept;                 // (3) 配列 C++17
 template&amp;lt;class U&amp;gt;
-unique_ptr(U p, const D&amp;amp; d1) noexcept;       // (3) 配列 C++17
+constexpr unique_ptr(U p, const D&amp;amp; d1) noexcept;       // (3) 配列 C++23
 
-unique_ptr(pointer p, D&amp;amp;&amp;amp; d2) noexcept;      // (4) 単一オブジェクト、配列（C++14まで）
+unique_ptr(pointer p, D&amp;amp;&amp;amp; d2) noexcept;           // (4) 単一オブジェクト、配列（C++14まで）
+constexpr unique_ptr(pointer p, D&amp;amp;&amp;amp; d2) noexcept; // (4) 単一オブジェクト C++23
 template&amp;lt;class U&amp;gt;
-unique_ptr(U p, D&amp;amp;&amp;amp; d2) noexcept;            // (4) 配列 C++17
+unique_ptr(U p, D&amp;amp;&amp;amp; d2) noexcept;                 // (4) 配列 C++17
+template&amp;lt;class U&amp;gt;
+constexpr unique_ptr(U p, D&amp;amp;&amp;amp; d2) noexcept;       // (4) 配列 C++23
 
-unique_ptr(unique_ptr&amp;amp;&amp;amp; u) noexcept;         // (5) 単一オブジェクト、配列
+unique_ptr(unique_ptr&amp;amp;&amp;amp; u) noexcept;           // (5) 単一オブジェクト、配列
+constexpr unique_ptr(unique_ptr&amp;amp;&amp;amp; u) noexcept; // (5) 単一オブジェクト、配列 C++23
 
 constexpr unique_ptr(nullptr_t) noexcept;    // (6) 単一オブジェクト、配列
 
 template &amp;lt;class U, class E&amp;gt;
 unique_ptr(unique_ptr&amp;lt;U, E&amp;gt;&amp;amp;&amp;amp; u) noexcept;   // (7) 単一オブジェクト、配列（C++17）
+template &amp;lt;class U, class E&amp;gt;
+constexpr unique_ptr(unique_ptr&amp;lt;U, E&amp;gt;&amp;amp;&amp;amp; u) noexcept; // (7) 単一オブジェクト、配列 C++23
 
 template &amp;lt;class U&amp;gt;
 unique_ptr(auto_ptr&amp;lt;U&amp;gt;&amp;amp;&amp;amp; u) noexcept;        // (8) 単一オブジェクト
@@ -163,3 +175,4 @@ int main()
 - [LWG Issue 2520 : N4089 broke initializing `unique_ptr&amp;lt;T[]&amp;gt;` from a nullptr](https://wg21.cmeerw.net/lwg/issue2520)
 - [LWG Issue 2801. Default-constructibility of `unique_ptr`](https://wg21.cmeerw.net/lwg/issue2948)
 - [LWG Issue 2905. `is_constructible_v&amp;lt;unique_ptr&amp;lt;P, D&amp;gt;, P, D const &amp;amp;&amp;gt;` should be false when D is not copy constructible](https://wg21.cmeerw.net/lwg/issue2905)
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_deref.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_deref.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_deref.md b/reference/memory/unique_ptr/op_deref.md
index 938ea89a4..1bfd37e7c 100644
--- a/reference/memory/unique_ptr/op_deref.md
+++ b/reference/memory/unique_ptr/op_deref.md
@@ -6,9 +6,11 @@
 * cpp11[meta cpp]
 
 ```cpp
-typename add_lvalue_reference&amp;lt;T&amp;gt;::type operator*() const;
+typename add_lvalue_reference&amp;lt;T&amp;gt;::type operator*() const; // (1) C++11
+constexpr add_lvalue_reference_t&amp;lt;T&amp;gt; operator*() const;    // (1) C++23
 ```
 * add_lvalue_reference[link /reference/type_traits/add_lvalue_reference.md]
+* add_lvalue_reference_t[link /reference/type_traits/add_lvalue_reference.md]
 
 ## 概要
 ポインタを間接参照する。
@@ -54,3 +56,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_destructor.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_destructor.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_destructor.md b/reference/memory/unique_ptr/op_destructor.md
index 123e7905b..9626191ac 100644
--- a/reference/memory/unique_ptr/op_destructor.md
+++ b/reference/memory/unique_ptr/op_destructor.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-~unique_ptr();
+~unique_ptr();           // C++11
+constexpr ~unique_ptr(); // C++23
 ```
 
 ## unique_ptrオブジェクトの破棄
@@ -26,3 +27,7 @@
 - [Clang](/implementation.md#clang): 3.0
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_equal.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_equal.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_equal.md b/reference/memory/unique_ptr/op_equal.md
index d2f8a3b2b..b9ede623b 100644
--- a/reference/memory/unique_ptr/op_equal.md
+++ b/reference/memory/unique_ptr/op_equal.md
@@ -8,13 +8,19 @@
 namespace std {
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
   bool operator==(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
+  template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
+  constexpr bool operator==(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++23
 
   template &amp;lt;class T, class D&amp;gt;
   bool operator==(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t) noexcept;            // (2) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator==(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t) noexcept;  // (2) C++23
 
   // (2)により以下のオーバーロードが使用可能 (C++20)
   template &amp;lt;class T, class D&amp;gt;
   bool operator==(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x) noexcept;            // (3) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator==(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x) noexcept;  // (3) C++23
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -78,3 +84,4 @@ p2 is nullptr
 ## 参照
 - [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
     - C++20での三方比較演算子の追加と、関連する演算子の自動導出
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_greater.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_greater.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_greater.md b/reference/memory/unique_ptr/op_greater.md
index 026f17887..151f3dbca 100644
--- a/reference/memory/unique_ptr/op_greater.md
+++ b/reference/memory/unique_ptr/op_greater.md
@@ -7,13 +7,17 @@
 ```cpp
 namespace std {
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
-  bool operator&amp;gt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1)
+  bool operator&amp;gt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2)
+  bool operator&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator&amp;gt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);           // (2) C++23
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;gt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3)
+  bool operator&amp;gt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator&amp;gt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);           // (3) C++23
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -70,3 +74,7 @@ false
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 	- 2012までは`nullptr`バージョンがない。
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_greater_equal.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_greater_equal.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_greater_equal.md b/reference/memory/unique_ptr/op_greater_equal.md
index 0b3588b0c..267ced55d 100644
--- a/reference/memory/unique_ptr/op_greater_equal.md
+++ b/reference/memory/unique_ptr/op_greater_equal.md
@@ -7,13 +7,17 @@
 ```cpp
 namespace std {
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
-  bool operator&amp;gt;=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1)
+  bool operator&amp;gt;=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;gt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2)
+  bool operator&amp;gt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator&amp;gt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);           // (2) C++23
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;gt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3)
+  bool operator&amp;gt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator&amp;gt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);           // (3) C++23
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -70,3 +74,7 @@ false
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 	- 2012までは`nullptr`バージョンがない。
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_less.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_less.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_less.md b/reference/memory/unique_ptr/op_less.md
index 76e2b3943..edf98f2b0 100644
--- a/reference/memory/unique_ptr/op_less.md
+++ b/reference/memory/unique_ptr/op_less.md
@@ -7,13 +7,17 @@
 ```cpp
 namespace std {
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
-  bool operator&amp;lt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1)
+  bool operator&amp;lt;(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;lt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2)
+  bool operator&amp;lt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator&amp;lt;(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);           // (2) C++23
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;lt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3)
+  bool operator&amp;lt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator&amp;lt;(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);           // (3) C++23
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -72,3 +76,7 @@ true
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 	- 2012までは`nullptr`バージョンがない。
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_less_equal.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_less_equal.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_less_equal.md b/reference/memory/unique_ptr/op_less_equal.md
index da0fe43b5..663e8a42d 100644
--- a/reference/memory/unique_ptr/op_less_equal.md
+++ b/reference/memory/unique_ptr/op_less_equal.md
@@ -7,13 +7,17 @@
 ```cpp
 namespace std {
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
-  bool operator&amp;lt;=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1)
+  bool operator&amp;lt;=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;lt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2)
+  bool operator&amp;lt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);                     // (2) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator&amp;lt;=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t);           // (2) C++23
 
   template &amp;lt;class T, class D&amp;gt;
-  bool operator&amp;lt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3)
+  bool operator&amp;lt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);                     // (3) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator&amp;lt;=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x);           // (3) C++23
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -70,3 +74,7 @@ true
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 	- 2012までは`nullptr`バージョンがない。
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_not_equal.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/op_not_equal.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_not_equal.md b/reference/memory/unique_ptr/op_not_equal.md
index d200e0915..698faed96 100644
--- a/reference/memory/unique_ptr/op_not_equal.md
+++ b/reference/memory/unique_ptr/op_not_equal.md
@@ -9,12 +9,18 @@ namespace std {
   // operator==により、以下の演算子が使用可能になる (C++20)
   template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
   bool operator!=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++11
+  template &amp;lt;class T1, class D1, class T2, class D2&amp;gt;
+  constexpr bool operator!=(const unique_ptr&amp;lt;T1, D1&amp;gt;&amp;amp; a, const unique_ptr&amp;lt;T2, D2&amp;gt;&amp;amp; b); // (1) C++23
 
   template &amp;lt;class T, class D&amp;gt;
   bool operator!=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t) noexcept;            // (2) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator!=(const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x, nullptr_t) noexcept;  // (2) C++23
 
   template &amp;lt;class T, class D&amp;gt;
   bool operator!=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x) noexcept;            // (3) C++11
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr bool operator!=(nullptr_t, const unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; x) noexcept;  // (3) C++23
 }
 ```
 * nullptr_t[link /reference/cstddef/nullptr_t.md]
@@ -74,3 +80,4 @@ p3 is not nullptr
 ## 参照
 - [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
     - C++20での三方比較演算子の追加と、関連する演算子の自動導出
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>release -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/release.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/release.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/release.md b/reference/memory/unique_ptr/release.md
index 36ab382f4..074cc13c0 100644
--- a/reference/memory/unique_ptr/release.md
+++ b/reference/memory/unique_ptr/release.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-pointer release() noexcept;
+pointer release() noexcept;           // (1) C++11
+constexpr pointer release() noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -60,3 +61,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/reset.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/reset.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/reset.md b/reference/memory/unique_ptr/reset.md
index a61850b7f..11e85d8f6 100644
--- a/reference/memory/unique_ptr/reset.md
+++ b/reference/memory/unique_ptr/reset.md
@@ -6,14 +6,17 @@
 * cpp11[meta cpp]
 
 ```cpp
-void reset(pointer p = pointer()) noexcept;   // (1)
+void reset(pointer p = pointer()) noexcept;            // (1) C++11
+constexpr void reset(pointer p = pointer()) noexcept;  // (1) C++23
 
 // 配列版のみ
-void reset(nullptr_t p) noexcept;             // (2) C++14まで
-void reset(nullptr_t = nullptr) noexcept;     // (2) C++17
+void reset(nullptr_t p) noexcept;                      // (2) C++11
+void reset(nullptr_t = nullptr) noexcept;              // (2) C++17
+constexpr void reset(nullptr_t = nullptr) noexcept;    // (2) C++23
 
-template &amp;lt;class U&amp;gt; void reset(U) = delete;    // (3) C++14まで
-template &amp;lt;class U&amp;gt; void reset(U p) noexcept;  // (3) C++17
+template &amp;lt;class U&amp;gt; void reset(U) = delete;             // (3) C++11
+template &amp;lt;class U&amp;gt; void reset(U p) noexcept;           // (3) C++17
+template &amp;lt;class U&amp;gt; constexpr void reset(U p) noexcept; // (3) C++23
 ```
 
 ## 概要
@@ -81,3 +84,4 @@ p doesn&amp;#39;t have resource
 ## 参照
 - [LWG Issue 2169. Missing `reset()` requirements in `unique_ptr` specialization](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2169)
 - [N4089 Safe conversions in `unique_ptr&amp;lt;T[]&amp;gt;`, revision 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4089.pdf)
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/swap.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/swap.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/swap.md b/reference/memory/unique_ptr/swap.md
index 737dd6979..3cd9b0f1b 100644
--- a/reference/memory/unique_ptr/swap.md
+++ b/reference/memory/unique_ptr/swap.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-void swap(unique_ptr&amp;amp; x) noexcept;
+void swap(unique_ptr&amp;amp; x) noexcept;           // (1) C++11
+constexpr void swap(unique_ptr&amp;amp; x) noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -64,3 +65,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- unique_ptr: P2273R3 constexpr化(#1071)</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/swap_free.html"/>
      <id>4c86ef0198c0d52a49f7716a658d20ab273c4d41:reference/memory/unique_ptr/swap_free.md</id>
      <updated>2023-01-16T19:01:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/swap_free.md b/reference/memory/unique_ptr/swap_free.md
index f91b89791..8d67c3ff0 100644
--- a/reference/memory/unique_ptr/swap_free.md
+++ b/reference/memory/unique_ptr/swap_free.md
@@ -7,7 +7,10 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class D&amp;gt;
-  void swap(unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; a, unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; b) noexcept;
+  void swap(unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; a, unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; b) noexcept; // (1) C++11
+
+  template &amp;lt;class T, class D&amp;gt;
+  constexpr void swap(unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; a, unique_ptr&amp;lt;T, D&amp;gt;&amp;amp; b) noexcept; // (1) C++23
 }
 ```
 
@@ -62,3 +65,7 @@ int main()
 - [Clang](/implementation.md#clang): 3.0
 - [ICC](/implementation.md#icc): ?
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
+
+
+## 参照
+- [P2273R3 Making `std::unique_ptr` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2273r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
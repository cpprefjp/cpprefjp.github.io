<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-01T14:39:35.507184</updated>
  <id>66ed6ffe-1934-4394-bb00-e215037825ea</id>

  
    <entry>
      <title>expected -- expected/expected: emplace(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>b36c4caa5ecd2acad1c374ef5553814b943de8b6:reference/expected/expected.md</id>
      <updated>2023-02-01T22:19:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index e002aae20..a3ef99bf7 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -40,7 +40,7 @@ namespace std {
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|-------|
 | [`operator=`](expected/op_assign.md) | 代入演算子 | C++23 |
-| [`emplace`](expected/emplace.md.nolink) | 正常値型のコンストラクタ引数から直接構築する | C++23 |
+| [`emplace`](expected/emplace.md) | 正常値型のコンストラクタ引数から直接構築する | C++23 |
 | [`swap`](expected/swap.md.nolink) | 他の`expected`オブジェクトとデータを入れ替える | C++23 |
 
 ### 値の観測
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- expected/expected: emplace(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/emplace.html"/>
      <id>b36c4caa5ecd2acad1c374ef5553814b943de8b6:reference/expected/expected/emplace.md</id>
      <updated>2023-02-01T22:19:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/emplace.md b/reference/expected/expected/emplace.md
new file mode 100644
index 000000000..4f357de71
--- /dev/null
+++ b/reference/expected/expected/emplace.md
@@ -0,0 +1,115 @@
+# emplace
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class... Args&amp;gt;
+constexpr T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args) noexcept;  // (1)
+
+template&amp;lt;class U, class... Args&amp;gt;
+constexpr T&amp;amp; emplace(initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args) noexcept; // (2)
+```
+
+## 概要
+- (1) : 正常値型`T`のコンストラクタ引数として任意個の引数を受け取って、型`T`のオブジェクトを有効値として生成し、保持する。
+- (2) : 正常値型`T`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、型`T`のオブジェクトを有効値として生成し、保持する。
+
+
+## テンプレートパラメータ制約
+- (1) : [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;T, Args...&amp;gt; == true`
+- (2) : [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;T, initializer_list&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
+
+
+## 効果
+- (1) : 次の処理と等価
+    ```cpp
+    if (has_value()) {
+      destroy_at(addressof(val));
+    } else {
+      destroy_at(addressof(unex));
+      has_val = true;
+    }
+    return *construct_at(addressof(val), std::forward&amp;lt;Args&amp;gt;(args)...);
+    ```
+    * has_value[link has_value.md]
+    * addressof[link /reference/memory/addressof.md]
+    * construct_at[link /reference/memory/construct_at.md]
+    * destroy_at[link /reference/memory/destroy_at.md]
+
+- (2) : 次の処理と等価
+    ```cpp
+    if (has_value()) {
+      destroy_at(addressof(val));
+    } else {
+      destroy_at(addressof(unex));
+      has_val = true;
+    }
+    return *construct_at(addressof(val), il, std::forward&amp;lt;Args&amp;gt;(args)...);
+    ```
+    * has_value[link has_value.md]
+    * addressof[link /reference/memory/addressof.md]
+    * construct_at[link /reference/memory/construct_at.md]
+    * destroy_at[link /reference/memory/destroy_at.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;numeric&amp;gt;
+
+// 引数リスト または 初期化子リスト＋引数リスト から例外送出なしに構築可能な型
+struct ComplexType {
+  int result = 0;
+
+  ComplexType(int a, int b) noexcept
+    : result(a + b) {}
+  ComplexType(std::initializer_list&amp;lt;int&amp;gt; list, int init) noexcept
+    : result(std::accumulate(list.begin(), list.end(), init)) {}
+};
+
+int main()
+{
+  // (1)
+  {
+    std::expected&amp;lt;ComplexType, int&amp;gt; x = std::unexpected{0};
+    x.emplace(1, 2);
+    assert(x.has_value());
+    assert(x.value().result == 3);
+  }
+
+  // (2)
+  {
+    std::expected&amp;lt;ComplexType, int&amp;gt; x = std::unexpected{0};
+    x.emplace({1, 2, 3, 4}, 5);
+    assert(x.has_value());
+    assert(x.value().result == 15);
+  }
+}
+```
+* emplace[color ff0000]
+* has_value()[link has_value.md]
+* value()[link value.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>time_t -- time_t: 多くの実装で符号付き</title>
      <link href="https://cpprefjp.github.io/reference/ctime/time_t.html"/>
      <id>05c1f4f83c8d0036ead5237667fb68c2c8217b4d:reference/ctime/time_t.md</id>
      <updated>2023-02-01T16:12:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ctime/time_t.md b/reference/ctime/time_t.md
index 9e4d14d63..bcaf6ab18 100644
--- a/reference/ctime/time_t.md
+++ b/reference/ctime/time_t.md
@@ -19,7 +19,7 @@ namespace std {
 
 
 ## 備考
-- 値の範囲が実装定義であるため、策定当時の標準ライブラリ実装では32ビット符号なし整数型の別名として定義されていた。しかし32ビットでは秒単位で扱った場合に、西暦2038年1月19日にオーバーフローしてしまうことが判明した。そのため、現在多くの実装では64ビット符号なし整数型の別名として定義される。64ビットで秒単位の場合は西暦3000億年まで扱えるため、オーバーフローの問題は気にしなくてよいだろう
+- 値の範囲が実装定義であるため、策定当時の標準ライブラリ実装では32ビット符号付き整数型の別名として定義されていた。しかし32ビットでは秒単位で扱った場合に、西暦2038年1月19日にオーバーフローしてしまうことが判明した。そのため、現在多くの実装では64ビット符号付き整数型の別名として定義される。64ビットで秒単位の場合は西暦3000億年まで扱えるため、オーバーフローの問題は気にしなくてよいだろう
 - Cの規格として、`time_t`はreal typeであると定義される。Cでのreal typeは、整数型と浮動小数点型の総称である
     - C++にそのような型の分類はない
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>はじめてのコントリビュート -- start_editing : GitHub Actionsの各タスクについての説明を記載</title>
      <link href="https://cpprefjp.github.io/start_editing.html"/>
      <id>524b25681551c84589da6a080fda499b38a859aa:start_editing.md</id>
      <updated>2023-02-01T11:02:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing.md b/start_editing.md
index b25bab757..963c862fb 100644
--- a/start_editing.md
+++ b/start_editing.md
@@ -24,15 +24,36 @@ cpprefjp/site へ push すると、すぐに反映されます。
 日次の変換中にコミットした変更は、日次の変換がおわったあと (だいたい1時間30分〜2時間くらい) に自動で変換・反映されます。
 
 
-### 変換エラーの検出
+### 自動デプロイ、自動テスト
+本リポジトリでは、GitHub Actionsを使用して、自動デプロイと自動テストを行っています。
+
+#### 自動デプロイ
+buildアクションで、MarkdownからHTMLへの変換と、GitHub Pagesへのデプロイを行っています。
+
 変換時になんらかのエラーが発生した場合には、GitHub Actionsが失敗します。その場合、手元で修正して再度git pushを行うことになります
 
-変換エラーではなく、GitHub Pagesリポジトリへのgit pushに失敗した場合 (buildアクションの実行中に新たなコミットがgit pushされた場合など) には、そのbuildアクションに対してRe-run jobを実行し、再度変換を行ってください
+変換エラーではなく、GitHub Pagesリポジトリへのgit pushに失敗した場合 (buildアクションの実行中に新たなコミットがgit pushされた場合など) には、そのbuildアクションに対してRe-run jobを実行し、再度変換を行ってください。
+
+
+#### 自動テスト
+- 禁止文字の検出 (detect forbidden charactersアクション)
+    - 説明は[detect_forbidden_characters.yml](https://github.com/cpprefjp/site/blob/master/.github/workflows/detect_forbidden_characters.yml)のコメントを参照
+- 内部リンクの誤り検出 (inner link checkアクション)
+    - サイト内のリンクが存在しない、または存在しているのに.nolinkを指定している場合にエラーが発生する
+    - [GitHub Actionsの実行ログ](https://github.com/cpprefjp/site/actions/workflows/inner_link_check.yml)で、どのページのどのリンクが不正かがわかるので、それを修正すること
+- 外部リンク切れを検出 (outer link checkアクション)
+    - 日本時間で日曜日の23:30に実行される
+    - 外部リンクのページにアクセスできない (ページが消滅したか、一時的にアクセスできない、などの理由) 場合にエラーとなる
+    - エラーが発生した場合は、本リポジトリにissueが発行される
+    - ページが消滅した場合は、代替となるものがあれば差し替え、なければInternet Archiveに変更する
+    - 一時的にアクセスできない場合は、時間を置いてアクセスできるようになったらissueを閉じる
+    - 海外からのアクセス (GitHub Actions) を拒否しているページもあるため、そのようなページは個別にチェックから外す ([link_check.py](https://github.com/cpprefjp/site/blob/master/.github/workflows/script/link_check.py)の`IGNORE_LIST`に追加する)
+
 
 ### 自動反映ツール
 自動反映ツールも、GitHub上で開発が進められています。
 
-* [site_generator](https://github.com/cpprefjp/site_generator)
+- [site_generator](https://github.com/cpprefjp/site_generator)
 
 機能要望やpull request等がありましたら、こちらにお願いします。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- ゼロ幅スペース除去</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/op_assign.html"/>
      <id>653081e759e041f845ec7efa22dad18ab81635ca:reference/tuple/tuple/op_assign.md</id>
      <updated>2023-02-01T10:15:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/op_assign.md b/reference/tuple/tuple/op_assign.md
index 23b54f8aa..46582ddf2 100644
--- a/reference/tuple/tuple/op_assign.md
+++ b/reference/tuple/tuple/op_assign.md
@@ -96,11 +96,11 @@ constexpr const tuple&amp;amp; operator=(UTuple&amp;amp;&amp;amp;) const;        // (14) C++23
 - (13) : 要素数が同じかつ、次を全て満たすこと
     - C++23 : [`different-from`](/reference/ranges/different-from.md)`&amp;lt;UTuple, tuple&amp;gt;`
     - C++23 : [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;UTuple&amp;gt;`が[`ranges::subrange`](/reference/ranges/subrange.md)の特殊化でないこと
-    - C++23 : 全ての`i`について、[`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;Ti&amp;amp;, decltype(get&amp;lt;i&amp;gt;(`[`std​::​forward`](/reference/utility/forward.md)`&amp;lt;UTuple&amp;gt;(u)))&amp;gt;`
+    - C++23 : 全ての`i`について、[`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;Ti&amp;amp;, decltype(get&amp;lt;i&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;UTuple&amp;gt;(u)))&amp;gt;`
 - (14) : 要素数が同じかつ、次をすべて満たすこと
     - C++23 : [`different-from`](/reference/ranges/different-from.md)`&amp;lt;UTuple, tuple&amp;gt;`
     - C++23 : [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;UTuple&amp;gt;`が[`ranges::subrange`](/reference/ranges/subrange.md)の特殊化でないこと
-    - C++23 : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;const Ti&amp;amp;, decltype(get&amp;lt;i&amp;gt;(`[`std​::​forward`](/reference/utility/forward.md)`&amp;lt;UTuple&amp;gt;(u)))&amp;gt;`
+    - C++23 : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;const Ti&amp;amp;, decltype(get&amp;lt;i&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;UTuple&amp;gt;(u)))&amp;gt;`
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tomolatoon</name>
        <email>tomo2000tomo170@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- ゼロ幅スペース除去</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/op_constructor.html"/>
      <id>653081e759e041f845ec7efa22dad18ab81635ca:reference/tuple/tuple/op_constructor.md</id>
      <updated>2023-02-01T10:15:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/op_constructor.md b/reference/tuple/tuple/op_constructor.md
index 2bf4e9eeb..cc7f01e03 100644
--- a/reference/tuple/tuple/op_constructor.md
+++ b/reference/tuple/tuple/op_constructor.md
@@ -304,7 +304,7 @@ explicit(see below) constexpr
     - C++23 : [`different-from`](/reference/ranges/different-from.md)`&amp;lt;UTuple, tuple&amp;gt;`であること
     - C++23 : [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;UTuple&amp;gt;`が[`ranges::subrange`](/reference/ranges/subrange.md)の特殊化でないこと
     - C++23 : `sizeof...(Types) ==` [`tuple_size_v`](../tuple_size.md)`&amp;lt;`[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;UTuple&amp;gt;&amp;gt;`であること
-    - C++23 : `(`[`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;Types, decltype(get&amp;lt;I&amp;gt;(`[`std​::​forward`](/reference/utility/forward.md)`&amp;lt;UTuple&amp;gt;(u)))&amp;gt; &amp;amp;&amp;amp; ...) == true`であること
+    - C++23 : `(`[`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;Types, decltype(get&amp;lt;I&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;UTuple&amp;gt;(u)))&amp;gt; &amp;amp;&amp;amp; ...) == true`であること
     - C++23 : `sizeof...(Types) != 1`であるか、または`Types...`を`T`に展開したとして[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;UTuple, T&amp;gt; == false &amp;amp;&amp;amp;` [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, UTuple&amp;gt; == false`であること
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tomolatoon</name>
        <email>tomo2000tomo170@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- ゼロ幅スペース除去</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_assign.html"/>
      <id>653081e759e041f845ec7efa22dad18ab81635ca:reference/utility/pair/op_assign.md</id>
      <updated>2023-02-01T10:15:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_assign.md b/reference/utility/pair/op_assign.md
index 9c1e43341..3e48d1d6c 100644
--- a/reference/utility/pair/op_assign.md
+++ b/reference/utility/pair/op_assign.md
@@ -66,13 +66,13 @@ template&amp;lt;pair-like P&amp;gt;
 - (9) : 次を全て満たすこと
     - C++23 : [`different-from`](/reference/ranges/different-from.md)`&amp;lt;P, pair&amp;gt;`
     - C++23 : [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;P&amp;gt;`が[`ranges::subrange`](/reference/ranges/subrange.md)の特殊化でないこと
-    - C++23 : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;T1&amp;amp;, decltype(get&amp;lt;0&amp;gt;(`[`std​::​forward`](/reference/utility/forward.md)`&amp;lt;P&amp;gt;(p)))&amp;gt;`
-    - C++23 : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;T2&amp;amp;, decltype(get&amp;lt;1&amp;gt;(`[`std​::​forward`](/reference/utility/forward.md)`&amp;lt;P&amp;gt;(p)))&amp;gt;`
+    - C++23 : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;T1&amp;amp;, decltype(get&amp;lt;0&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;P&amp;gt;(p)))&amp;gt;`
+    - C++23 : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;T2&amp;amp;, decltype(get&amp;lt;1&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;P&amp;gt;(p)))&amp;gt;`
 - (10) : 次を全て満たすこと
     - C++23 : [`different-from`](/reference/ranges/different-from.md)`&amp;lt;P, pair&amp;gt;`
     - C++23 : [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;P&amp;gt;`が[`ranges::subrange`](/reference/ranges/subrange.md)の特殊化でないこと
-    - C++23 : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;const T1&amp;amp;, decltype(get&amp;lt;0&amp;gt;(`[`std​::​forward`](/reference/utility/forward.md)`&amp;lt;P&amp;gt;(p)))&amp;gt;`
-    - C++23 : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;const T2&amp;amp;, decltype(get&amp;lt;1&amp;gt;(`[`std​::​forward`](/reference/utility/forward.md)`&amp;lt;P&amp;gt;(p)))&amp;gt;`
+    - C++23 : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;const T1&amp;amp;, decltype(get&amp;lt;0&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;P&amp;gt;(p)))&amp;gt;`
+    - C++23 : [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;const T2&amp;amp;, decltype(get&amp;lt;1&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;P&amp;gt;(p)))&amp;gt;`
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tomolatoon</name>
        <email>tomo2000tomo170@gmail.com</email>
      </author>
    </entry>
  
</feed>
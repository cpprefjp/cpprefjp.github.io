<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-11-14T07:36:27.026435</updated>
  <id>e0d92e6c-d833-475a-87f6-2effa2c07ae5</id>

  
    <entry>
      <title>atomic -- atomic : 浮動小数点数型特殊化のdifference_typeの説明修正</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic.html"/>
      <id>b85012664dffc16050adfcd2aacad99e71fabe91:reference/atomic/atomic.md</id>
      <updated>2022-11-14T16:31:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic.md b/reference/atomic/atomic.md
index d1e0baed2..01dc3dc4a 100644
--- a/reference/atomic/atomic.md
+++ b/reference/atomic/atomic.md
@@ -176,7 +176,7 @@ namespace std {
 ### atomic&amp;amp;lt;floating-point&amp;amp;gt;専用メンバ型
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| `difference_type` | 2つの値の差を表す整数型`value_type` | C++20 |
+| `difference_type` | 2つの値の差を表す型`value_type` | C++20 |
 
 
 ### atomic&amp;amp;lt;T*&amp;amp;gt;専用メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>テンプレート再帰回数の制限緩和 -- GCCドキュメントのリンク変更に対応 (close #1007)</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/recursive_template_limit.html"/>
      <id>cc84abdd7edabfe56b9b9fcc3eb6b7b3a42bb3b4:lang/cpp11/recursive_template_limit.md</id>
      <updated>2022-11-14T13:36:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/recursive_template_limit.md b/lang/cpp11/recursive_template_limit.md
index f0a2f21c6..b5d1b8cf2 100644
--- a/lang/cpp11/recursive_template_limit.md
+++ b/lang/cpp11/recursive_template_limit.md
@@ -59,5 +59,5 @@ int main()
 - [Variadic Templates for C++0x](http://www.jot.fm/issues/issue_2008_02/article2/)
     - テンプレートの再帰によって、コンパイル時間がどれくらい延びるかのレポートがある記事
 - [C++ Language Features/Controlling implementation limits - Clang Compiler User’s Manual](http://clang.llvm.org/docs/UsersManual.html#cmdoption-ftemplate-depth)
-- [3.5 Options Controlling C++ Dialect - GCC Command Options](https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Dialect-Options.html)
+- [3.5 Options Controlling C++ Dialect - GCC Command Options](https://gcc.gnu.org/onlinedocs/gcc/gcc-command-options/options-controlling-c%2B%2B-dialect.html)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>確率が高い分岐と低い分岐を伝える属性 [[likely]], [[unlikely]] -- GCCドキュメントのリンク変更に対応 (close #1007)</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/likely_and_unlikely_attributes.html"/>
      <id>cc84abdd7edabfe56b9b9fcc3eb6b7b3a42bb3b4:lang/cpp20/likely_and_unlikely_attributes.md</id>
      <updated>2022-11-14T13:36:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/likely_and_unlikely_attributes.md b/lang/cpp20/likely_and_unlikely_attributes.md
index 55f5df3f2..718f5ab25 100644
--- a/lang/cpp20/likely_and_unlikely_attributes.md
+++ b/lang/cpp20/likely_and_unlikely_attributes.md
@@ -65,7 +65,7 @@ GCCやClangなど一部C++コンパイラでは独自拡張として同等機能
 
 ## 参照
 - [How do the likely/unlikely macros in the Linux kernel work and what is their benefit? - Stack Overflow](https://stackoverflow.com/questions/109710/)
-- [GCC __builtin_expect組み込み関数](https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html)
+- [GCC __builtin_expect組み込み関数](https://gcc.gnu.org/onlinedocs/gcc/extensions-to-the-c-language-family/other-built-in-functions-provided-by-gcc.html)
 - [Clang __builtin_expect組み込み関数](https://llvm.org/docs/BranchWeightMetadata.html)
 - [P0479R2 Attributes for Likely and Unlikely Statements (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0479r2.html)
 - [P0479R5 Proposed wording for likely and unlikely attributes (Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0479r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- fix standard numbers in std::reference_wrapper functions</title>
      <link href="https://cpprefjp.github.io/reference/functional/reference_wrapper/get.html"/>
      <id>1e19ed004abda4416d60ecc63bf8e56bc4a0ddfa:reference/functional/reference_wrapper/get.md</id>
      <updated>2022-11-12T16:43:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/reference_wrapper/get.md b/reference/functional/reference_wrapper/get.md
index afc2aa9fd..dfd38cb43 100644
--- a/reference/functional/reference_wrapper/get.md
+++ b/reference/functional/reference_wrapper/get.md
@@ -8,7 +8,7 @@
 ```cpp
 T&amp;amp; get() const noexcept;            //C++11
 
-constexpr T&amp;amp; get() const noexcept;  //C++17
+constexpr T&amp;amp; get() const noexcept;  //C++20
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- fix standard numbers in std::reference_wrapper functions</title>
      <link href="https://cpprefjp.github.io/reference/functional/reference_wrapper/op_call.html"/>
      <id>1e19ed004abda4416d60ecc63bf8e56bc4a0ddfa:reference/functional/reference_wrapper/op_call.md</id>
      <updated>2022-11-12T16:43:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/reference_wrapper/op_call.md b/reference/functional/reference_wrapper/op_call.md
index f83c18c78..d7d0c014d 100644
--- a/reference/functional/reference_wrapper/op_call.md
+++ b/reference/functional/reference_wrapper/op_call.md
@@ -7,10 +7,13 @@
 
 ```cpp
 template &amp;lt;class... ArgTypes&amp;gt;
-typename result_of&amp;lt;T&amp;amp;(ArgTypes&amp;amp;&amp;amp;...)&amp;gt;::type operator ()(ArgTypes&amp;amp;&amp;amp;... args) const;            //C++11
+typename result_of&amp;lt;T&amp;amp;(ArgTypes&amp;amp;&amp;amp;...)&amp;gt;::type operator ()(ArgTypes&amp;amp;&amp;amp;... args) const; //C++11
 
 template &amp;lt;class... ArgTypes&amp;gt;
-constexpr typename result_of&amp;lt;T&amp;amp;(ArgTypes&amp;amp;&amp;amp;...)&amp;gt;::type operator ()(ArgTypes&amp;amp;&amp;amp;... args) const;  //C++20
+invoke_result_t&amp;lt;T&amp;amp;, ArgTypes...&amp;gt; operator ()(ArgTypes&amp;amp;&amp;amp;... args) const;            //C++17
+
+template &amp;lt;class... ArgTypes&amp;gt;
+constexpr invoke_result_t&amp;lt;T&amp;amp;, ArgTypes...&amp;gt; operator ()(ArgTypes&amp;amp;&amp;amp;... args) const;  //C++20
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/format.html"/>
      <id>98d42b9bceb4c8399ed0de6d4aeb4f737c8862b6:reference/format.md</id>
      <updated>2022-11-12T16:29:58+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;format&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;ヘッダでは、書式文字列を使って引数をフォーマットする、いわゆる&lt;code&gt;printf&lt;/code&gt;スタイルのフォーマット関数を提供する。
このフォーマット関数は型安全であり、ユーザー定義型への拡張も可能である。&lt;/p&gt;
&lt;p&gt;書式文字列については&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;を参照。&lt;/p&gt;
&lt;h2&gt;フォーマット関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n.html&#34;&gt;format_to_n&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットし、指定した文字数を超えないように出力イテレータに出力する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to_n_result.html&#34;&gt;format_to_n_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;format_to_n&lt;/code&gt;の結果を表す (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatted_size.html&#34;&gt;formatted_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列を使って引数をフォーマットした文字列を保存するのに必要な文字数を返す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat.html&#34;&gt;vformat&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;format&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/vformat_to.html&#34;&gt;vformat_to&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_to.html&#34;&gt;format_to&lt;/a&gt;&lt;/code&gt;の非テンプレート版 (function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;フォーマッター&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatter.html&#34;&gt;formatter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数の型に対応する書式文字列の解析、値のフォーマットを担う (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;basic_format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式文字列の解析のコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;format_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_parse_context.html&#34;&gt;wformat_parse_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_parse_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;basic_format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数のフォーマットのコンテキスト (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;format_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_context.html&#34;&gt;wformat_context&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_context&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;引数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_arg.html&#34;&gt;basic_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数1つへのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/visit_format_arg.html&#34;&gt;visit_format_arg&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_arg&lt;/code&gt;オブジェクトが現在保持している型に対応する関数を呼び出す (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可変長引数から&lt;code&gt;basic_format_arg&lt;/code&gt;の列を構築する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/make_format_args.html&#34;&gt;make_wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;make_wformat_args&lt;/code&gt;のワイド文字列版 (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;basic_format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数列へのアクセスを提供する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;format_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のマルチバイト文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/basic_format_args.html&#34;&gt;wformat_args&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_format_args&lt;/code&gt;のワイド文字列版 (type-alias)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format_error.html&#34;&gt;format_error&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;フォーマットの失敗を表す例外クラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/format&#34; target=&#34;_blank&#34;&gt;Working Draft, Standard for Programming Language C++ [format]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html&#34; target=&#34;_blank&#34;&gt;P0645R10 Text Formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_format_context -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_context.html"/>
      <id>98d42b9bceb4c8399ed0de6d4aeb4f737c8862b6:reference/format/basic_format_context.md</id>
      <updated>2022-11-12T16:29:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_context.md b/reference/format/basic_format_context.md
index 0ef2e0287..00c619c43 100644
--- a/reference/format/basic_format_context.md
+++ b/reference/format/basic_format_context.md
@@ -20,8 +20,8 @@ namespace std {
 実際に渡されたフォーマット引数を含む、フォーマット実行中の状態を保持するクラス。
 
 * (1): テンプレートの定義
-* (2): マルチバイト文字列版の特殊化 (出力イテレーターの型は未規定)
-* (3): ワイド文字列版の特殊化 (出力イテレーターの型は未規定)
+* (2): マルチバイト文字列版の特殊化 (出力イテレータの型は未規定)
+* (3): ワイド文字列版の特殊化 (出力イテレータの型は未規定)
 
 ## テンプレートパラメータ制約
 
@@ -32,15 +32,15 @@ namespace std {
 | 名前                                 | 説明                                             | 対応バージョン |
 |--------------------------------------|--------------------------------------------------|----------------|
 | [`arg`](basic_format_context/arg.md) | フォーマット引数を得る                           | C++20          |
-| `out`                                | 出力イテレーターを得る                           | C++20          |
-| `advance_to`                         | 出力イテレーターを指定したイテレーターに設定する | C++20          |
+| `out`                                | 出力イテレータを得る                           | C++20          |
+| `advance_to`                         | 出力イテレータを指定したイテレータに設定する | C++20          |
 | `locale`                             | ロケールを得る                                | C++20          |
 
 ## メンバ型
 
 | 名前             | 説明                                               | 対応バージョン |
 |------------------|----------------------------------------------------|----------------|
-| `iterator`       | 出力イテレーター(`Out`と等しい) (type-alias)       | C++20          |
+| `iterator`       | 出力イテレータ(`Out`と等しい) (type-alias)       | C++20          |
 | `char_type`      | 文字の型(`charT`と等しい) (type-alias)             | C++20          |
 | `formatter_type` | 型`T`に対応するフォーマッターの型 (alias-template) | C++20          |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_format_parse_context -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_parse_context.html"/>
      <id>98d42b9bceb4c8399ed0de6d4aeb4f737c8862b6:reference/format/basic_format_parse_context.md</id>
      <updated>2022-11-12T16:29:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_parse_context.md b/reference/format/basic_format_parse_context.md
index dc64ab33d..2d0db6d8a 100644
--- a/reference/format/basic_format_parse_context.md
+++ b/reference/format/basic_format_parse_context.md
@@ -28,9 +28,9 @@ namespace std {
 | 名前            | 説明                                               | 対応バージョン |
 |-----------------|----------------------------------------------------|----------------|
 | `(constructor)` | コンストラクタ                                     | C++20          |
-| `begin`         | 書式文字列の先頭のイテレーターを得る               | C++20          |
-| `end`           | 書式文字列の末尾のイテレーターを得る               | C++20          |
-| `advance_to`    | 先頭のイテレーターを指定したイテレーターに設定する | C++20          |
+| `begin`         | 書式文字列の先頭のイテレータを得る               | C++20          |
+| `end`           | 書式文字列の末尾のイテレータを得る               | C++20          |
+| `advance_to`    | 先頭のイテレータを指定したイテレータに設定する | C++20          |
 | `next_arg_id`   | フォーマット引数の番号を次に進める                 | C++20          |
 | `check_arg_id`  | フォーマット引数の番号指定が有効か確かめる         | C++20          |
 
@@ -39,8 +39,8 @@ namespace std {
 | 名前             | 説明                                                                                          | 対応バージョン |
 |------------------|-----------------------------------------------------------------------------------------------|----------------|
 | `char_type`      | 文字の型(`charT`と等しい) (type-alias)                                                        | C++20          |
-| `const_iterator` | 書式文字列のイテレーターの型(`basic_string_view&amp;lt;charT&amp;gt;::const_iterator`と等しい) (type-alias) | C++20          |
-| `iterator`       | 書式文字列のイテレーターの型(`basic_string_view&amp;lt;charT&amp;gt;::iterator`と等しい) (type-alias)       | C++20          |
+| `const_iterator` | 書式文字列のイテレータの型(`basic_string_view&amp;lt;charT&amp;gt;::const_iterator`と等しい) (type-alias) | C++20          |
+| `iterator`       | 書式文字列のイテレータの型(`basic_string_view&amp;lt;charT&amp;gt;::iterator`と等しい) (type-alias)       | C++20          |
 
 ## 実装例
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to.html"/>
      <id>98d42b9bceb4c8399ed0de6d4aeb4f737c8862b6:reference/format/format_to.md</id>
      <updated>2022-11-12T16:29:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to.md b/reference/format/format_to.md
index 46ea809c4..ddc5e3616 100644
--- a/reference/format/format_to.md
+++ b/reference/format/format_to.md
@@ -26,7 +26,7 @@ namespace std {
 
 ## 概要
 
-書式文字列`fmt`に従ったフォーマットで`args...`の文字列表現を出力イテレーター`out`に出力する。
+書式文字列`fmt`に従ったフォーマットで`args...`の文字列表現を出力イテレータ`out`に出力する。
 
 * (1): マルチバイト文字列版
 * (2): ワイド文字列版
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to_n -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to_n.html"/>
      <id>98d42b9bceb4c8399ed0de6d4aeb4f737c8862b6:reference/format/format_to_n.md</id>
      <updated>2022-11-12T16:29:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to_n.md b/reference/format/format_to_n.md
index 7ba92f7d9..1bf745c88 100644
--- a/reference/format/format_to_n.md
+++ b/reference/format/format_to_n.md
@@ -27,7 +27,7 @@ namespace std {
 
 ## 概要
 
-書式文字列`fmt`に従ったフォーマットで`args...`の文字列表現を、最大で`n`文字だけ出力イテレーター`out`に出力する。
+書式文字列`fmt`に従ったフォーマットで`args...`の文字列表現を、最大で`n`文字だけ出力イテレータ`out`に出力する。
 
 * (1): マルチバイト文字列版
 * (2): ワイド文字列版
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>98d42b9bceb4c8399ed0de6d4aeb4f737c8862b6:reference/format/formatter.md</id>
      <updated>2022-11-12T16:29:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index dac02dfee..b32d4e61d 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -58,21 +58,21 @@ namespace std {
 
 1. 式 `f.parse(pc)` が有効であり、
     * 戻り値の型が`PC::iterator`である
-    * `[pc.begin(), pc.end())`の範囲を解析して`format_error`を投げるか、解析が終わった位置を指すイテレーターを返す
+    * `[pc.begin(), pc.end())`の範囲を解析して`format_error`を投げるか、解析が終わった位置を指すイテレータを返す
 2. 式 `f.format(t, fc)` が有効であり、
     * 戻り値の型が`FC::iterator`である
-    * フォーマット結果を`fc.out()`へ出力し、出力後のイテレーターを返す
+    * フォーマット結果を`fc.out()`へ出力し、出力後のイテレータを返す
     * 出力は`t`、`fc.locale()`、最後に呼び出された`f.parse(pc)`の`[pc.begin(), pc.end())`の範囲以外に依存しない
 3. 式 `f.format(u, fc)` が有効であり、
     * 戻り値が`FC::iterator`である
-    * フォーマット結果を`fc.out()`へ出力し、出力後のイテレーターを返す
+    * フォーマット結果を`fc.out()`へ出力し、出力後のイテレータを返す
     * 出力は`u`、`fc.locale()`、最後に呼び出された`f.parse(pc)`の`[pc.begin(), pc.end())`の範囲以外に依存しない
     * `u`を変更しない
 
 条件内の各要素を、以下のように定義する
 
 * 文字の型を`charT`
-* 出力イテレーターの型を`Out`
+* 出力イテレータの型を`Out`
 * フォーマット引数の型を`T`
 * `f`を`F`のオブジェクト
 * `u`を`T`のlvalue
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat_to -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat_to.html"/>
      <id>98d42b9bceb4c8399ed0de6d4aeb4f737c8862b6:reference/format/vformat_to.md</id>
      <updated>2022-11-12T16:29:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat_to.md b/reference/format/vformat_to.md
index c87eb9f3c..d7d696d9a 100644
--- a/reference/format/vformat_to.md
+++ b/reference/format/vformat_to.md
@@ -28,7 +28,7 @@ namespace std {
 
 ## 概要
 
-書式文字列`fmt`に従ったフォーマットで`args`の文字列表現を出力イテレーター`out`に出力する。
+書式文字列`fmt`に従ったフォーマットで`args`の文字列表現を出力イテレータ`out`に出力する。
 
 * (1): マルチバイト文字列版
 * (2): ワイド文字列版
@@ -54,7 +54,7 @@ namespace std {
 
 ## 効果
 
-書式文字列`fmt`に従ったフォーマットで`args`の文字列表現を出力イテレーター`out`の`[out, out + N)`の範囲に出力する。ロケール`loc`が指定された場合は、ロケール依存のフォーマットにおいて使用される。
+書式文字列`fmt`に従ったフォーマットで`args`の文字列表現を出力イテレータ`out`の`[out, out + N)`の範囲に出力する。ロケール`loc`が指定された場合は、ロケール依存のフォーマットにおいて使用される。
 (ただし、`N`=`formatted_size(fmt, args...)` または `formatted_size(loc, fmt, args...)`)
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/assign.html"/>
      <id>98d42b9bceb4c8399ed0de6d4aeb4f737c8862b6:reference/vector/vector/assign.md</id>
      <updated>2022-11-12T16:29:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/assign.md b/reference/vector/vector/assign.md
index d06e8e5e3..a4457cbd4 100644
--- a/reference/vector/vector/assign.md
+++ b/reference/vector/vector/assign.md
@@ -27,7 +27,7 @@ constexpr void assign(initializer_list&amp;lt;T&amp;gt;); // (3) C++20
 
 
 ## 要件
-- (1) : 型`T`は`*first`から`X`に対してEmplaceConstructibleでなければならない。イテレーターがForward iterators の要件を満たさない場合、型`T`は`X`に対してMoveInsertableでなければならない。`[first, last)`の範囲のそれぞれのイテレーターは１回だけ間接参照される。`first`, `last`は自身のイテレーターであってはならない。
+- (1) : 型`T`は`*first`から`X`に対してEmplaceConstructibleでなければならない。イテレータがForward iterators の要件を満たさない場合、型`T`は`X`に対してMoveInsertableでなければならない。`[first, last)`の範囲のそれぞれのイテレータは１回だけ間接参照される。`first`, `last`は自身のイテレータであってはならない。
 - (2) : `u`は`*this`の要素への参照であってはならない。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/insert.html"/>
      <id>98d42b9bceb4c8399ed0de6d4aeb4f737c8862b6:reference/vector/vector/insert.md</id>
      <updated>2022-11-12T16:29:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/insert.md b/reference/vector/vector/insert.md
index 9bc21b7f0..5440514e5 100644
--- a/reference/vector/vector/insert.md
+++ b/reference/vector/vector/insert.md
@@ -63,7 +63,7 @@ constexpr iterator insert(const_iterator position,
 
 
 ## 備考
-- 要素を追加した後の[`size()`](size.md)が要素を追加する前の[`capacity()`](capacity.md)よりも大きい場合は領域の再確保が生じる。領域の再確保が生じなかった場合には挿入位置より前のイテレーターや参照は有効である。
+- 要素を追加した後の[`size()`](size.md)が要素を追加する前の[`capacity()`](capacity.md)よりも大きい場合は領域の再確保が生じる。領域の再確保が生じなかった場合には挿入位置より前のイテレータや参照は有効である。
 - 条件付きで、例外が発生した場合に副作用が発生しない保証がある。
 	- C++03: 要素型`T`のコピーコンストラクタ、代入演算子以外で例外が発生した場合、副作用は発生しない。
 	- C++11: 要素型`T`のコピーコンストラクタ、ムーブコンストラクタ、代入演算子、ムーブ代入演算子、またはInputIteratorの操作以外で例外が発生した場合、副作用は発生しない。（ムーブとInputIteratorの操作について規定が追加された。）
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty.html"/>
      <id>78fb4725ff1ef5e47f1a9dae6d3b35df4e22a422:reference/ranges/empty.md</id>
      <updated>2022-11-12T16:20:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty.md b/reference/ranges/empty.md
index 9a11f9ea2..727f17e39 100644
--- a/reference/ranges/empty.md
+++ b/reference/ranges/empty.md
@@ -30,7 +30,7 @@ Rangeが空のとき`true`、それ以外の時`false`。
 
 ## カスタマイゼーションポイント
 [`ranges::begin`](begin.md)と[`ranges::end`](end.md)、または[`ranges::size`](size.md)をカスタマイズすることで、`ranges::empty`をカスタマイズできる。
-もしくは、メンバー関数`empty`を持たせるなどの方法でカスタマイズできる。
+もしくは、メンバ関数`empty`を持たせるなどの方法でカスタマイズできる。
 
 ## 備考
 `ranges::empty(E)`が有効な式であるとき、その型は`bool`である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/ranges/size.html"/>
      <id>78fb4725ff1ef5e47f1a9dae6d3b35df4e22a422:reference/ranges/size.md</id>
      <updated>2022-11-12T16:20:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/size.md b/reference/ranges/size.md
index def1f0423..f17af9a87 100644
--- a/reference/ranges/size.md
+++ b/reference/ranges/size.md
@@ -30,7 +30,7 @@ Rangeの要素数。
 
 ## カスタマイゼーションポイント
 [`ranges::begin`](begin.md)と[`ranges::end`](end.md)をカスタマイズすることで、`ranges::size`をカスタマイズできる。
-もしくは、メンバー関数`size`を持たせるなどの方法でカスタマイズできる。
+もしくは、メンバ関数`size`を持たせるなどの方法でカスタマイズできる。
 
 ## 備考
 `ranges::size(E)`が有効な式であるとき、その型は整数型(interger-like)。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>derived -- fix Japanese terminology</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/derived.html"/>
      <id>78fb4725ff1ef5e47f1a9dae6d3b35df4e22a422:reference/ranges/view_interface/derived.md</id>
      <updated>2022-11-12T16:20:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/derived.md b/reference/ranges/view_interface/derived.md
index 8e7b0a16a..279907de2 100644
--- a/reference/ranges/view_interface/derived.md
+++ b/reference/ranges/view_interface/derived.md
@@ -17,7 +17,7 @@ constexpr const D&amp;amp; derived() const noexcept {       // exposition only
 * derived[italic]
 
 ## 概要
-派生クラスの参照にダウンキャストする説明用の`private`メンバー関数。
+派生クラスの参照にダウンキャストする説明用の`private`メンバ関数。
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-02-19T14:16:30.812783</updated>
  <id>14e620e4-1f33-4622-8237-f36a507484d2</id>

  
    <entry>
      <title>コンストラクタ (C++11) -- packaged_taskのコンストラクタ : C++14対応として、関数テンプレート版がSFINAEされる条件を追加</title>
      <link href="http://cpprefjp.github.io/reference/future/packaged_task/op_constructor.html"/>
      <id>b9f8b54ff26b3fdf90879d9692a21b62d6e36332:reference/future/packaged_task/op_constructor.md</id>
      <updated>2015-02-19 14:16:14 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;packaged_task() noexcept;                          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; packaged_task(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f);                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; packaged_task(&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/allocator_arg_t.html&#34;&gt;allocator_arg_t&lt;/a&gt;,
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; a, F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

packaged_task(packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++11&lt;/span&gt;
packaged_task(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;

packaged_task(packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rhs) noexcept;       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。&lt;/li&gt;
&lt;li&gt;(2) : 関数オブジェクトを受け取るコンストラクタ。&lt;/li&gt;
&lt;li&gt;(3) : 関数オブジェクトおよびカスタムアロケータを受け取るコンストラクタ。&lt;/li&gt;
&lt;li&gt;(4) : コピーコンストラクタ。コピー不可。&lt;/li&gt;
&lt;li&gt;(5) : ムーブコンストラクタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 共有状態なし、タスクの保持なしでオブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;(2) : 共有状態を初期化し、&lt;code&gt;f&lt;/code&gt;を非同期実行するタスクとして&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)&lt;/code&gt;でメンバ変数に保持する。&lt;/li&gt;
&lt;li&gt;(3) : 共有状態を初期化し、&lt;code&gt;f&lt;/code&gt;を非同期実行するタスクとして&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)&lt;/code&gt;でメンバ変数に保持する。アロケータ&lt;code&gt;a&lt;/code&gt;は、共有状態を構築する際に、その内部構造でメモリ確保が必要な場合に使用される。&lt;/li&gt;
&lt;li&gt;(5) : &lt;code&gt;rhs&lt;/code&gt;の共有状態の所有権、および非同期タスクの関数オブジェクトを&lt;code&gt;*this&lt;/code&gt;に移動する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : &lt;code&gt;F&lt;/code&gt;のコピーコンストラクタもしくはムーブコンストラクタによって送出されうる、あらゆる例外が投げられる可能性がある。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;F&lt;/code&gt;のコピーコンストラクタもしくはムーブコンストラクタによって送出されうる、あらゆる例外が投げられる可能性がある。内部構造のメモリ確保に失敗した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;&lt;code&gt;std::bad_alloc&lt;/code&gt;&lt;/a&gt;が投げられる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(5) : &lt;code&gt;rhs&lt;/code&gt;は共有状態を持たない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2), (3) :&lt;ul&gt;
&lt;li&gt;C++14 : &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;&lt;code&gt;std::decay&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;::type&lt;/code&gt;が&lt;code&gt;std::thread&lt;/code&gt;型である場合、この関数はオーバーロード解決に参加しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;future&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;foo&lt;/span&gt;() { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; }

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルト構築&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有状態とタスクを持たない&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数オブジェクトを受け取って構築&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有状態の初期化、およびタスクを内部に保持する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task(foo);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 関数オブジェクトとアロケータを受け取って構築&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有状態をアロケータを使用して初期化子、タスクを内部に保持する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task {
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator_arg,
        std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(),
        foo
    };
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ムーブ構築&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有状態の所有権とタスクを移動する&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task1(foo);
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;packaged_task&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;()&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; task2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(task1);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// task1は共有状態を持たない&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 11.0 （11.0はアロケータを引数に取るものがコンパイルできない？）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2067&#34; target=&#34;_blank&#34;&gt;LWG Issue 2067. &lt;code&gt;packaged_task&lt;/code&gt; should have deleted copy c&#39;tor with const parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2097&#34; target=&#34;_blank&#34;&gt;LWG Issue 2097. &lt;code&gt;packaged_task&lt;/code&gt; constructors should be constrained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- threadのコンストラクタ : C++14対応として、関数テンプレート版がSFINAEされる条件を記載。</title>
      <link href="http://cpprefjp.github.io/reference/thread/thread/op_constructor.html"/>
      <id>710a76c7759b6b3e9180b196ea1c0983cdf0d0c9:reference/thread/thread/op_constructor.md</id>
      <updated>2015-02-19 14:13:09 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;() noexcept;                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) noexcept;              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。新しいスレッドを生成せず、空の状態にする。&lt;/li&gt;
&lt;li&gt;(2) : 新しいスレッドを生成し、そのスレッド上で引数&lt;code&gt;args...&lt;/code&gt;を渡して、関数オブジェクト&lt;code&gt;f&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;(3) : コピーコンストラクタ。コピー不可。&lt;/li&gt;
&lt;li&gt;(4) : ムーブコンストラクタ。スレッドの所有権を移動する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : 型&lt;code&gt;F&lt;/code&gt;および&lt;code&gt;Args&lt;/code&gt;に含まれるすべての型&lt;code&gt;Ti&lt;/code&gt;はムーブコンストラクト可能な型でなければならない。また、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;が有効な式でなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(2) : 新しいスレッドを生成し、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;を実行する。ただし&lt;code&gt;DECAY_COPY&lt;/code&gt;は同コンストラクタを呼び出したスレッド上にて評価される。また&lt;code&gt;f&lt;/code&gt;のコピーの戻り値は無視される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DECAY_COPY(x)&lt;/code&gt;は &lt;code&gt;template &amp;lt;class T&amp;gt; typename std::decay&amp;lt;T&amp;gt;::type decay_copy(T&amp;amp;&amp;amp; v) { return&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;(v); }&lt;/code&gt; と定義される。おおよそ、&lt;code&gt;x&lt;/code&gt;が配列型なら先頭要素へのポインタ、&lt;code&gt;x&lt;/code&gt;が関数型ならその関数ポインタ、&lt;code&gt;x&lt;/code&gt;がコピーコンストラクト可能な型なら&lt;code&gt;x&lt;/code&gt;からコピーされたオブジェクト、&lt;code&gt;x&lt;/code&gt;がムーブコンストラクト可能な型なら&lt;code&gt;x&lt;/code&gt;からムーブされたオブジェクトとなる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;INVOKE(f, arg...)&lt;/code&gt;は&lt;code&gt;f&lt;/code&gt;が関数オブジェクトならば &lt;code&gt;f(arg...)&lt;/code&gt; 形式の関数呼び出しとなる。詳細は&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;の定義参照。
もし&lt;code&gt;INVOKE(DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;呼び出しからcatchされない例外が送出された場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/terminate.html&#34;&gt;&lt;code&gt;std::terminate()&lt;/code&gt;&lt;/a&gt;が呼び出されてプログラムは異常終了する。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;同期&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始と&lt;strong&gt;同期する&lt;/strong&gt;。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド&lt;code&gt;T1&lt;/code&gt;上での&lt;code&gt;f&lt;/code&gt;のコピーの呼び出し開始」よりも&lt;strong&gt;前に発生する&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;(2) : &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;!=&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/a&gt;。&lt;code&gt;*this&lt;/code&gt;は新しいスレッドと関連付けられる。&lt;/li&gt;
&lt;li&gt;(4) : ムーブ前の&lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; かつ ムーブ後の&lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(2) : 新しいスレッドの作成に失敗した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;例外を投げる。その例外オブジェクトには、以下のエラー状態が設定されうる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;resource_unavailable_try_again&lt;/code&gt; : 新たなスレッドを作るためのリソースが不足している。もしくはシステムやプロセスが規定するスレッド数の上限を超過した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) :&lt;ul&gt;
&lt;li&gt;C++14 : &lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;&lt;code&gt;std::decay&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;::type&lt;/code&gt;が&lt;code&gt;std::thread&lt;/code&gt;型である場合、この関数はオーバーロード解決に参加しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ri, &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sp, &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; up)
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// spはコピーされた値が、upはムーブされた値が渡されてくる&lt;/span&gt;
  v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ri &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;;

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;sp &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;up;
  assert(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この戻り値は無視される&lt;/span&gt;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i2;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sp0 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/make_shared.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_shared&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; up0(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; thd( func, i1,  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ref(i2), sp0, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(up0) );
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
  thd.join();

  assert(i1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i2 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2097&#34; target=&#34;_blank&#34;&gt;LWG Issue 2097. &lt;code&gt;packaged_task&lt;/code&gt; constructors should be constrained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- threadのコンストラクタ： オーバーロードの書き方を、ほかに合わせた</title>
      <link href="http://cpprefjp.github.io/reference/thread/thread/op_constructor.html"/>
      <id>2442395c52b05f53e54936612fd1580580aaf834:reference/thread/thread/op_constructor.md</id>
      <updated>2015-02-19 14:03:05 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;() noexcept;                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;F&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Args&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(F&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; f, Args&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;... args); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;;         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;) noexcept;              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。新しいスレッドを生成せず、空の状態にする。&lt;/li&gt;
&lt;li&gt;(2) : 新しいスレッドを生成し、そのスレッド上で引数&lt;code&gt;args...&lt;/code&gt;を渡して、関数オブジェクト&lt;code&gt;f&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;(3) : コピーコンストラクタ。コピー不可。&lt;/li&gt;
&lt;li&gt;(4) : ムーブコンストラクタ。スレッドの所有権を移動する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : 型&lt;code&gt;F&lt;/code&gt;および&lt;code&gt;Args&lt;/code&gt;に含まれるすべての型&lt;code&gt;Ti&lt;/code&gt;はムーブコンストラクト可能な型でなければならない。また、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;が有効な式でなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(2) : 新しいスレッドを生成し、&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;を実行する。ただし&lt;code&gt;DECAY_COPY&lt;/code&gt;は同コンストラクタを呼び出したスレッド上にて評価される。また&lt;code&gt;f&lt;/code&gt;のコピーの戻り値は無視される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DECAY_COPY(x)&lt;/code&gt;は &lt;code&gt;template &amp;lt;class T&amp;gt; typename std::decay&amp;lt;T&amp;gt;::type decay_copy(T&amp;amp;&amp;amp; v) { return&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;(v); }&lt;/code&gt; と定義される。おおよそ、&lt;code&gt;x&lt;/code&gt;が配列型なら先頭要素へのポインタ、&lt;code&gt;x&lt;/code&gt;が関数型ならその関数ポインタ、&lt;code&gt;x&lt;/code&gt;がコピーコンストラクト可能な型なら&lt;code&gt;x&lt;/code&gt;からコピーされたオブジェクト、&lt;code&gt;x&lt;/code&gt;がムーブコンストラクト可能な型なら&lt;code&gt;x&lt;/code&gt;からムーブされたオブジェクトとなる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;INVOKE(f, arg...)&lt;/code&gt;は&lt;code&gt;f&lt;/code&gt;が関数オブジェクトならば &lt;code&gt;f(arg...)&lt;/code&gt; 形式の関数呼び出しとなる。詳細は&lt;a href=&#34;http://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;&lt;code&gt;INVOKE&lt;/code&gt;&lt;/a&gt;の定義参照。
もし&lt;code&gt;INVOKE(DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;F&amp;gt;(f)), DECAY_COPY(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/utility/forward.html&#34;&gt;&lt;code&gt;std::forward&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Args&amp;gt;(args))...)&lt;/code&gt;呼び出しからcatchされない例外が送出された場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/terminate.html&#34;&gt;&lt;code&gt;std::terminate()&lt;/code&gt;&lt;/a&gt;が呼び出されてプログラムは異常終了する。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;同期&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始と&lt;strong&gt;同期する&lt;/strong&gt;。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド&lt;code&gt;T1&lt;/code&gt;上での&lt;code&gt;f&lt;/code&gt;のコピーの呼び出し開始」よりも&lt;strong&gt;前に発生する&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;(2) : &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;!=&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/a&gt;。&lt;code&gt;*this&lt;/code&gt;は新しいスレッドと関連付けられる。&lt;/li&gt;
&lt;li&gt;(4) : ムーブ前の&lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; かつ ムーブ後の&lt;code&gt;x.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/get_id.html&#34;&gt;&lt;code&gt;get_id()&lt;/code&gt;&lt;/a&gt; &lt;code&gt;==&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/id.html&#34;&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(2) : 新しいスレッドの作成に失敗した場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;例外を投げる。その例外オブジェクトには、以下のエラー状態が設定されうる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;resource_unavailable_try_again&lt;/code&gt; : 新たなスレッドを作るためのリソースが不足している。もしくはシステムやプロセスが規定するスレッド数の上限を超過した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; v, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ri, &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sp, &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; up)
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// spはコピーされた値が、upはムーブされた値が渡されてくる&lt;/span&gt;
  v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ri &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;;

  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;sp &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;up;
  assert(x &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x;  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// この戻り値は無視される&lt;/span&gt;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i2;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sp0 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/make_shared.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;make_shared&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  &lt;a href=&#34;http://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_ptr&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; up0(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;));

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; thd( func, i1,  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ref(i2), sp0, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;move(up0) );
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
  thd.join();

  assert(i1 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i2 &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;42&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.3, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- タイトルを日本語に</title>
      <link href="http://cpprefjp.github.io/index.html"/>
      <id>2bda5748685830f5476d006241a881535d82ceb2:index.md</id>
      <updated>2015-02-17 23:07:02 +0900</updated>
      
        <content type="html">&lt;h1&gt;cpprefjp - C++日本語リファレンス&lt;/h1&gt;
&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;現行バージョンであるC++14(ISO/IEC 14882:2014)に基づいたリファレンスを提供します。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/editors_doc/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;Twitter ハッシュタグ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://twitter.com/#!/search/%23cpprefjp&#34; target=&#34;_blank&#34;&gt;#cpprefjp&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;</content>
      
      <author>
        <name>melpon</name>
        <email>melt@e-ml.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- durationのコンストラクタ： C++14対応として、オーバーフローしないことをSFINAEのルールとして追加した。</title>
      <link href="http://cpprefjp.github.io/reference/chrono/duration/op_constructor.html"/>
      <id>bbd621a9a98aa06124034c3ec6d2822fa2b7a66a:reference/chrono/duration/op_constructor.md</id>
      <updated>2015-02-17 15:39:50 +0900</updated>
      
        <content type="html">&lt;h1&gt;コンストラクタ&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;constexpr duration() &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;default&lt;/span&gt;;                       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Rep2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
constexpr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; duration(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Rep2&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; r);           &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Rep2&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Period2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
constexpr duration(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; duration&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Rep2, Period2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; d); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

duration(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; duration&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;default&lt;/span&gt;;                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。&lt;/li&gt;
&lt;li&gt;(2) : &lt;code&gt;rep&lt;/code&gt;型に変換可能な型の値から&lt;code&gt;duration&lt;/code&gt;を構築する。&lt;/li&gt;
&lt;li&gt;(3) : 他のテンプレートパラメータを持つ&lt;code&gt;duration&lt;/code&gt;から&lt;code&gt;duration&lt;/code&gt;を構築する。&lt;/li&gt;
&lt;li&gt;(4) : コピーコンストラクタ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2) : &lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/treat_as_floating_point.html&#34;&gt;&lt;code&gt;treat_as_floating_point&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;rep&amp;gt;::value == true&lt;/code&gt;もしくは&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/treat_as_floating_point.html&#34;&gt;&lt;code&gt;treat_as_floating_point&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Rep2&amp;gt;::value == false&lt;/code&gt;の場合にオーバーロード解決される。&lt;/li&gt;
&lt;li&gt;(3) : この関数は、以下の条件を満たす場合にオーバーロード解決される。&lt;ul&gt;
&lt;li&gt;C++11 : &lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/treat_as_floating_point.html&#34;&gt;&lt;code&gt;treat_as_floating_point&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;rep&amp;gt;::value == true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++14 : 単位変換の結果としてオーバーフローせず、&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/treat_as_floating_point.html&#34;&gt;&lt;code&gt;treat_as_floating_point&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;rep&amp;gt;::value == true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;もしくは、&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/treat_as_floating_point.html&#34;&gt;&lt;code&gt;treat_as_floating_point&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;rep&amp;gt;::value == false&lt;/code&gt;かつ&lt;a href=&#34;http://cpprefjp.github.io/reference/ratio/ratio_divide.html&#34;&gt;&lt;code&gt;ratio_divide&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;Period2, period&amp;gt;::type::den == 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;これらの要求は、整数ベースの&lt;code&gt;duration&lt;/code&gt;型間での変換の際に、暗黙に切り捨て誤差が起きるのを防ぐ。浮動小数点数型ベースの場合には、精度が下がれば小数点以下の数値になるだけなので問題ない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;例&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;chrono&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;duration;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;milli; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;micro;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  duration&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, milli&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; d1;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルトコンストラクト&lt;/span&gt;

  duration&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, milli&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; d2(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 値を指定して構築(ミリ秒)&lt;/span&gt;
  duration&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, micro&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; d3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; d2;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ミリ秒からマイクロ秒に変換&lt;/span&gt;

  duration&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, micro&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; d4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; d3;   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// コピー&lt;/span&gt;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d2.count() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d3.count() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; d4.count() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
3000
3000
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.4.7&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2094&#34; target=&#34;_blank&#34;&gt;LWG Issue 2094. &lt;code&gt;duration&lt;/code&gt; conversion overflow shouldn&#39;t participate in overload resolution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
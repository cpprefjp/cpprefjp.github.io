<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-08-10T07:14:46.449995</updated>
  <id>3d74643e-b9ff-40a9-9701-a42ce5bcb922</id>

  
    <entry>
      <title>join_view -- join_view : common_rangeとなる条件の追記</title>
      <link href="https://cpprefjp.github.io/reference/ranges/join_view.html"/>
      <id>5ba1413f2dd58d720c5e02db52e4bfd7f2e452b4:reference/ranges/join_view.md</id>
      <updated>2023-08-10T16:10:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/join_view.md b/reference/ranges/join_view.md
index 6e92b54ac..7e109e570 100644
--- a/reference/ranges/join_view.md
+++ b/reference/ranges/join_view.md
@@ -35,7 +35,10 @@ namespace std::ranges {
 
 - (1): 外側・内側のRangeが[`forward_range`](forward_range.md)のとき
 - (2): 外側・内側のRangeが[`bidirectional_range`](bidirectional_range.md)のとき
-- (3): 外側・内側のRangeが[`forward_range`](forward_range.md)かつ[`common_range`](common_range.md)のとき
+- (3): 外側・内側のRangeが[`forward_range`](forward_range.md)かつ[`common_range`](common_range.md)であり
+    - `const`ではない場合、内側のRangeは参照型（*prvalue*ではない）
+
+外側Rangeとは`V`のことであり、内側Rangeとは`range_reference_t&amp;lt;V&amp;gt;`のことである。`const`の場合`V`を`const V`として同様。
 
 ## テンプレートパラメータ制約
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_const_iterator -- basic_const_iterator : iter_move追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>02ed11ec6d51486dd32ddc338107c5e383d474ee:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-08-10T15:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index 74b56deb4..1bae1a1e2 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -72,7 +72,7 @@ namespace std {
 | [`operator+`](basic_const_iterator/op_plus.md)           | イテレータを進める | C++23 |
 | [`operator-`](basic_const_iterator/op_unary_minus.md)     | イテレータを逆に進める | C++23 |
 | [`operator-`](basic_const_iterator/op_minus.md)          | 2つの`basic_const_iterator`の差を求める | C++23 |
-| [`iter_move`](basic_const_iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++23 |
+| [`iter_move`](basic_const_iterator/iter_move.md)     | イテレータの要素の移動 | C++23 |
 
 ## 非メンバ関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_move (非メンバ関数) -- basic_const_iterator : iter_move追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/iter_move.html"/>
      <id>02ed11ec6d51486dd32ddc338107c5e383d474ee:reference/iterator/basic_const_iterator/iter_move.md</id>
      <updated>2023-08-10T15:01:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/iter_move.md b/reference/iterator/basic_const_iterator/iter_move.md
new file mode 100644
index 000000000..022a1fe64
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/iter_move.md
@@ -0,0 +1,85 @@
+# iter_move (非メンバ関数)
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+friend constexpr rvalue-reference iter_move(const basic_const_iterator&amp;amp; i) noexcept(/*see below*/);
+```
+
+## 概要
+
+`basic_const_iterator`である`i`の指す要素をムーブする。
+
+戻り値の`rvalue-reference`は次のように求められる`const`かつ右辺値となる型である
+
+```cpp
+using rvalue-reference = common_reference_t&amp;lt;const iter_value_t&amp;lt;Iterator&amp;gt;&amp;amp;&amp;amp;, iter_rvalue_reference_t&amp;lt;Iterator&amp;gt;&amp;gt;;
+```
+
+## 戻り値
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、次のようになる
+
+```cpp
+return static_cast&amp;lt;rvalue-reference&amp;gt;(ranges::iter_move(i.current_));
+```
+* ranges::iter_move[link /reference/iterator/iter_move.md]
+
+## 例外
+
+`noexcept`指定には次の式が指定される
+
+```cpp
+noexcept(static_cast&amp;lt;rvalue-reference&amp;gt;(ranges::iter_move(i.current_)))
+```
+
+## 備考
+
+この関数は[*Hidden friends*](/article/lib/hidden_friends.md)として定義される。
+
+## 例
+```cpp example
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+
+  // ADLによる呼び出し
+  int n1 = iter_move(cit);
+  std::cout &amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; std::endl;
+  
+  ++cit;
+
+  // ranges::iter_move CPOによる呼び出し
+  int n2 = std::ranges::iter_move(cit);
+  std::cout &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; std::endl;
+}
+```
+* iter_move[color ff0000]
+* ranges::iter_move[link /reference/iterator/iter_move.md]
+
+### 出力
+```
+1
+2
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_const_iterator -- basic_const_iterator : 残りの比較演算子の追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>3f6f9ce56b42ae4ea17dca2ad62f354b38fda974:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-08-09T15:10:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index a6d62a285..74b56deb4 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -32,10 +32,10 @@ namespace std {
 | [`operator[]`](basic_const_iterator/op_at.md)             | 任意の位置にランダムアクセスする | C++23 |
 | [`operator==`](basic_const_iterator/op_equal.md)         | 等値比較 | C++23 |
 | `operator!=`     | 非等値比較 ([`==`](basic_const_iterator/op_equal.md)により使用可能) | C++23 |
-| [`operator&amp;lt;`](basic_const_iterator/op_less.md.nolink)           | 左辺が右辺より小さいかの判定を行う | C++23 |
-| [`operator&amp;lt;=`](basic_const_iterator/op_less_equal.md.nolink)    | 左辺が右辺以下かの判定を行う | C++23 |
-| [`operator&amp;gt;`](basic_const_iterator/op_greater.md.nolink)        | 左辺が右辺より大きいかの判定を行う | C++23 |
-| [`operator&amp;gt;=`](basic_const_iterator/op_greater_equal.md.nolink) | 左辺が右辺以上かの判定を行う | C++23 |
+| [`operator&amp;lt;`](basic_const_iterator/op_less.md)           | 左辺が右辺より小さいかの判定を行う | C++23 |
+| [`operator&amp;lt;=`](basic_const_iterator/op_less_equal.md)    | 左辺が右辺以下かの判定を行う | C++23 |
+| [`operator&amp;gt;`](basic_const_iterator/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | C++23 |
+| [`operator&amp;gt;=`](basic_const_iterator/op_greater_equal.md) | 左辺が右辺以上かの判定を行う | C++23 |
 | [`operator&amp;lt;=&amp;gt;`](basic_const_iterator/op_compare_3way.md)           | 三方比較を行う | C++23 |
 
 
@@ -65,10 +65,10 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
-| [`operator&amp;lt;`](basic_const_iterator/op_less.md.nolink)           | 左辺が右辺より小さいかの判定を行う | C++23 |
-| [`operator&amp;lt;=`](basic_const_iterator/op_less_equal.md.nolink)    | 左辺が右辺以下かの判定を行う | C++23 |
-| [`operator&amp;gt;`](basic_const_iterator/op_greater.md.nolink)        | 左辺が右辺より大きいかの判定を行う | C++23 |
-| [`operator&amp;gt;=`](basic_const_iterator/op_greater_equal.md.nolink) | 左辺が右辺以上かの判定を行う | C++23 |
+| [`operator&amp;lt;`](basic_const_iterator/op_less.md)           | 左辺が右辺より小さいかの判定を行う | C++23 |
+| [`operator&amp;lt;=`](basic_const_iterator/op_less_equal.md)    | 左辺が右辺以下かの判定を行う | C++23 |
+| [`operator&amp;gt;`](basic_const_iterator/op_greater.md)        | 左辺が右辺より大きいかの判定を行う | C++23 |
+| [`operator&amp;gt;=`](basic_const_iterator/op_greater_equal.md) | 左辺が右辺以上かの判定を行う | C++23 |
 | [`operator+`](basic_const_iterator/op_plus.md)           | イテレータを進める | C++23 |
 | [`operator-`](basic_const_iterator/op_unary_minus.md)     | イテレータを逆に進める | C++23 |
 | [`operator-`](basic_const_iterator/op_minus.md)          | 2つの`basic_const_iterator`の差を求める | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- basic_const_iterator : 残りの比較演算子の追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_greater.html"/>
      <id>3f6f9ce56b42ae4ea17dca2ad62f354b38fda974:reference/iterator/basic_const_iterator/op_greater.md</id>
      <updated>2023-08-09T15:10:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_greater.md b/reference/iterator/basic_const_iterator/op_greater.md
new file mode 100644
index 000000000..9feb50dd9
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_greater.md
@@ -0,0 +1,108 @@
+# operator&amp;gt;
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr bool operator&amp;gt;(const basic_const_iterator&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt;;                                        // (1)
+
+template&amp;lt;different-from&amp;lt;basic_const_iterator&amp;gt; I&amp;gt;
+constexpr bool operator&amp;gt;(const I&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; totally_ordered_with&amp;lt;Iterator, I&amp;gt;;   // (2)
+
+template&amp;lt;not-a-const-iterator I&amp;gt;
+friend constexpr bool operator&amp;gt;(const I&amp;amp; x, const basic_const_iterator&amp;amp; y)
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; totally_ordered_with&amp;lt;Iterator, I&amp;gt;;   // (3) 非メンバ関数
+```
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+* totally_ordered_with[link /reference/concepts/totally_ordered.md]
+* different-from[link /reference/ranges/different-from.md]
+
+## 概要
+
+`basic_const_iterator&amp;lt;Iterator&amp;gt;`オブジェクト同士あるいは別のイテレータとの間で、左辺が右辺より大きいかを判定する。
+
+- (1) : 同じ`random_access_iterator`特殊化同士の間の`&amp;gt;`比較
+- (2) : `Iterator`と比較可能な型の値との間の`&amp;gt;`比較
+- (3) : (2)の逆順の演算子
+
+## テンプレートパラメータ制約
+
+`not-a-const-iterator&amp;lt;I&amp;gt;`は`I`が`basic_const_iterator`の特殊化ではない場合に`true`となる説明専用のコンセプトである。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+- (1) : 以下と等価  
+    ```cpp
+    return current_ &amp;gt; y.current_;
+    ```
+
+- (2) : 以下と等価  
+    ```cpp
+    return current_ &amp;gt; y;
+    ```
+
+- (3) : 以下と等価  
+    ```cpp
+    return x &amp;gt; y.current_;
+    ```
+
+## 備考
+
+(3)の関数は[*Hidden friends*](/article/lib/hidden_friends.md)として定義される。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+  auto se = vec.end();
+  std::basic_const_iterator cse = se;
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  // basic_const_iterator同士の比較
+  std::cout &amp;lt;&amp;lt; (cit &amp;gt; cse) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cse &amp;gt; cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cit &amp;gt; cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // 元のイテレータとの比較
+  std::cout &amp;lt;&amp;lt; (cit &amp;gt; se) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (se &amp;gt; cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cit &amp;gt; cit.base()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* &amp;gt;[color ff0000]
+
+### 出力
+```
+false
+true
+false
+false
+true
+false
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- basic_const_iterator : 残りの比較演算子の追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_greater_equal.html"/>
      <id>3f6f9ce56b42ae4ea17dca2ad62f354b38fda974:reference/iterator/basic_const_iterator/op_greater_equal.md</id>
      <updated>2023-08-09T15:10:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_greater_equal.md b/reference/iterator/basic_const_iterator/op_greater_equal.md
new file mode 100644
index 000000000..30d4283c7
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_greater_equal.md
@@ -0,0 +1,108 @@
+# operator&amp;gt;=
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr bool operator&amp;gt;=(const basic_const_iterator&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt;;                                        // (1)
+
+template&amp;lt;different-from&amp;lt;basic_const_iterator&amp;gt; I&amp;gt;
+constexpr bool operator&amp;gt;=(const I&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; totally_ordered_with&amp;lt;Iterator, I&amp;gt;;   // (2)
+
+template&amp;lt;not-a-const-iterator I&amp;gt;
+friend constexpr bool operator&amp;gt;=(const I&amp;amp; x, const basic_const_iterator&amp;amp; y)
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; totally_ordered_with&amp;lt;Iterator, I&amp;gt;;   // (3) 非メンバ関数
+```
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+* totally_ordered_with[link /reference/concepts/totally_ordered.md]
+* different-from[link /reference/ranges/different-from.md]
+
+## 概要
+
+`basic_const_iterator&amp;lt;Iterator&amp;gt;`オブジェクト同士あるいは別のイテレータとの間で、左辺が右辺以上かを判定する。
+
+- (1) : 同じ`random_access_iterator`特殊化同士の間の`&amp;gt;=`比較
+- (2) : `Iterator`と比較可能な型の値との間の`&amp;gt;=`比較
+- (3) : (2)の逆順の演算子
+
+## テンプレートパラメータ制約
+
+`not-a-const-iterator&amp;lt;I&amp;gt;`は`I`が`basic_const_iterator`の特殊化ではない場合に`true`となる説明専用のコンセプトである。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+- (1) : 以下と等価  
+    ```cpp
+    return current_ &amp;gt;= y.current_;
+    ```
+
+- (2) : 以下と等価  
+    ```cpp
+    return current_ &amp;gt;= y;
+    ```
+
+- (3) : 以下と等価  
+    ```cpp
+    return x &amp;gt;= y.current_;
+    ```
+
+## 備考
+
+(3)の関数は[*Hidden friends*](/article/lib/hidden_friends.md)として定義される。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+  auto se = vec.end();
+  std::basic_const_iterator cse = se;
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  // basic_const_iterator同士の比較
+  std::cout &amp;lt;&amp;lt; (cit &amp;gt;= cse) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cse &amp;gt;= cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cit &amp;gt;= cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // 元のイテレータとの比較
+  std::cout &amp;lt;&amp;lt; (cit &amp;gt;= se) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (se &amp;gt;= cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cit &amp;gt;= cit.base()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* &amp;gt;=[color ff0000]
+
+### 出力
+```
+false
+true
+true
+false
+true
+true
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- basic_const_iterator : 残りの比較演算子の追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_less.html"/>
      <id>3f6f9ce56b42ae4ea17dca2ad62f354b38fda974:reference/iterator/basic_const_iterator/op_less.md</id>
      <updated>2023-08-09T15:10:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_less.md b/reference/iterator/basic_const_iterator/op_less.md
new file mode 100644
index 000000000..dcc2b4009
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_less.md
@@ -0,0 +1,108 @@
+# operator&amp;lt;
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr bool operator&amp;lt;(const basic_const_iterator&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt;;                                        // (1)
+
+template&amp;lt;different-from&amp;lt;basic_const_iterator&amp;gt; I&amp;gt;
+constexpr bool operator&amp;lt;(const I&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; totally_ordered_with&amp;lt;Iterator, I&amp;gt;;   // (2)
+
+template&amp;lt;not-a-const-iterator I&amp;gt;
+friend constexpr bool operator&amp;lt;(const I&amp;amp; x, const basic_const_iterator&amp;amp; y)
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; totally_ordered_with&amp;lt;Iterator, I&amp;gt;;   // (3) 非メンバ関数
+```
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+* totally_ordered_with[link /reference/concepts/totally_ordered.md]
+* different-from[link /reference/ranges/different-from.md]
+
+## 概要
+
+`basic_const_iterator&amp;lt;Iterator&amp;gt;`オブジェクト同士あるいは別のイテレータとの間で、左辺が右辺より小さいかを判定する。
+
+- (1) : 同じ`random_access_iterator`特殊化同士の間の`&amp;lt;`比較
+- (2) : `Iterator`と比較可能な型の値との間の`&amp;lt;`比較
+- (3) : (2)の逆順の演算子
+
+## テンプレートパラメータ制約
+
+`not-a-const-iterator&amp;lt;I&amp;gt;`は`I`が`basic_const_iterator`の特殊化ではない場合に`true`となる説明専用のコンセプトである。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+- (1) : 以下と等価  
+    ```cpp
+    return current_ &amp;lt; y.current_;
+    ```
+
+- (2) : 以下と等価  
+    ```cpp
+    return current_ &amp;lt; y;
+    ```
+
+- (3) : 以下と等価  
+    ```cpp
+    return x &amp;lt; y.current_;
+    ```
+
+## 備考
+
+(3)の関数は[*Hidden friends*](/article/lib/hidden_friends.md)として定義される。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+  auto se = vec.end();
+  std::basic_const_iterator cse = se;
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  // basic_const_iterator同士の比較
+  std::cout &amp;lt;&amp;lt; (cit &amp;lt; cse) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cse &amp;lt; cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cit &amp;lt; cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // 元のイテレータとの比較
+  std::cout &amp;lt;&amp;lt; (cit &amp;lt; se) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (se &amp;lt; cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cit &amp;lt; cit.base()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* &amp;lt;[color ff0000]
+
+### 出力
+```
+true
+false
+false
+true
+false
+false
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- basic_const_iterator : 残りの比較演算子の追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_less_equal.html"/>
      <id>3f6f9ce56b42ae4ea17dca2ad62f354b38fda974:reference/iterator/basic_const_iterator/op_less_equal.md</id>
      <updated>2023-08-09T15:10:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_less_equal.md b/reference/iterator/basic_const_iterator/op_less_equal.md
new file mode 100644
index 000000000..2dd0ba407
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_less_equal.md
@@ -0,0 +1,108 @@
+# operator&amp;lt;=
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr bool operator&amp;lt;=(const basic_const_iterator&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt;;                                        // (1)
+
+template&amp;lt;different-from&amp;lt;basic_const_iterator&amp;gt; I&amp;gt;
+constexpr bool operator&amp;lt;=(const I&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; totally_ordered_with&amp;lt;Iterator, I&amp;gt;;   // (2)
+
+template&amp;lt;not-a-const-iterator I&amp;gt;
+friend constexpr bool operator&amp;lt;=(const I&amp;amp; x, const basic_const_iterator&amp;amp; y)
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; totally_ordered_with&amp;lt;Iterator, I&amp;gt;;   // (3) 非メンバ関数
+```
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+* totally_ordered_with[link /reference/concepts/totally_ordered.md]
+* different-from[link /reference/ranges/different-from.md]
+
+## 概要
+
+`basic_const_iterator&amp;lt;Iterator&amp;gt;`オブジェクト同士あるいは別のイテレータとの間で、、左辺が右辺以下かを判定する。
+
+- (1) : 同じ`random_access_iterator`特殊化同士の間の`&amp;lt;=`比較
+- (2) : `Iterator`と比較可能な型の値との間の`&amp;lt;=`比較
+- (3) : (2)の逆順の演算子
+
+## テンプレートパラメータ制約
+
+`not-a-const-iterator&amp;lt;I&amp;gt;`は`I`が`basic_const_iterator`の特殊化ではない場合に`true`となる説明専用のコンセプトである。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+- (1) : 以下と等価  
+    ```cpp
+    return current_ &amp;lt;= y.current_;
+    ```
+
+- (2) : 以下と等価  
+    ```cpp
+    return current_ &amp;lt;= y;
+    ```
+
+- (3) : 以下と等価  
+    ```cpp
+    return x &amp;lt;= y.current_;
+    ```
+
+## 備考
+
+(3)の関数は[*Hidden friends*](/article/lib/hidden_friends.md)として定義される。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+  auto se = vec.end();
+  std::basic_const_iterator cse = se;
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  // basic_const_iterator同士の比較
+  std::cout &amp;lt;&amp;lt; (cit &amp;lt;= cse) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cse &amp;lt;= cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cit &amp;lt;= cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // 元のイテレータとの比較
+  std::cout &amp;lt;&amp;lt; (cit &amp;lt;= se) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (se &amp;lt;= cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cit &amp;lt;= cit.base()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* &amp;lt;=[color ff0000]
+
+### 出力
+```
+true
+false
+true
+true
+false
+true
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_compare_3way.html"/>
      <id>c925d357c6d192dd1edca8e41f620f33c4a336aa:reference/iterator/basic_const_iterator/op_compare_3way.md</id>
      <updated>2023-08-04T15:20:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_compare_3way.md b/reference/iterator/basic_const_iterator/op_compare_3way.md
index 7ab85c95e..e4294b7c8 100644
--- a/reference/iterator/basic_const_iterator/op_compare_3way.md
+++ b/reference/iterator/basic_const_iterator/op_compare_3way.md
@@ -17,7 +17,7 @@ constexpr auto operator&amp;lt;=&amp;gt;(const I&amp;amp; y) const
 * different-from[link /reference/ranges/different-from.md]
 * random_access_iterator[link /reference/iterator/random_access_iterator.md]
 * three_way_comparable[link /reference/compare/three_way_comparable.md]
-* totally_ordered_with[link /reference/concepts/totally_ordered_with.md]
+* totally_ordered_with[link /reference/concepts/totally_ordered.md]
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_const_iterator -- basic_const_iterator : == &lt;=&gt;追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator.html"/>
      <id>09c1ad78bd5be675d94afdc1e49adcaa6ff7ca4d:reference/iterator/basic_const_iterator.md</id>
      <updated>2023-08-04T15:07:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator.md b/reference/iterator/basic_const_iterator.md
index 1a27d9853..a6d62a285 100644
--- a/reference/iterator/basic_const_iterator.md
+++ b/reference/iterator/basic_const_iterator.md
@@ -30,13 +30,13 @@ namespace std {
 | [`operator-=`](basic_const_iterator/op_minus_assign.md)   | イテレータ自身を逆に進める | C++23 |
 | [`operator-`](basic_const_iterator/op_minus.md)          | 2つの`basic_const_iterator`の差を求める | C++23 |
 | [`operator[]`](basic_const_iterator/op_at.md)             | 任意の位置にランダムアクセスする | C++23 |
-| [`operator==`](basic_const_iterator/op_equal.md.nolink)         | 等値比較 | C++23 |
-| [`operator!=`](basic_const_iterator/op_equal.md.nolink)     | 非等値比較 | C++23 |
+| [`operator==`](basic_const_iterator/op_equal.md)         | 等値比較 | C++23 |
+| `operator!=`     | 非等値比較 ([`==`](basic_const_iterator/op_equal.md)により使用可能) | C++23 |
 | [`operator&amp;lt;`](basic_const_iterator/op_less.md.nolink)           | 左辺が右辺より小さいかの判定を行う | C++23 |
 | [`operator&amp;lt;=`](basic_const_iterator/op_less_equal.md.nolink)    | 左辺が右辺以下かの判定を行う | C++23 |
 | [`operator&amp;gt;`](basic_const_iterator/op_greater.md.nolink)        | 左辺が右辺より大きいかの判定を行う | C++23 |
 | [`operator&amp;gt;=`](basic_const_iterator/op_greater_equal.md.nolink) | 左辺が右辺以上かの判定を行う | C++23 |
-| [`operator&amp;lt;=&amp;gt;`](basic_const_iterator/op_compare_3way.md.nolink)           | 三方比較を行う | C++23 |
+| [`operator&amp;lt;=&amp;gt;`](basic_const_iterator/op_compare_3way.md)           | 三方比較を行う | C++23 |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- basic_const_iterator : == &lt;=&gt;追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_compare_3way.html"/>
      <id>09c1ad78bd5be675d94afdc1e49adcaa6ff7ca4d:reference/iterator/basic_const_iterator/op_compare_3way.md</id>
      <updated>2023-08-04T15:07:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_compare_3way.md b/reference/iterator/basic_const_iterator/op_compare_3way.md
new file mode 100644
index 000000000..7ab85c95e
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_compare_3way.md
@@ -0,0 +1,103 @@
+# operator&amp;lt;=&amp;gt;
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto operator&amp;lt;=&amp;gt;(const basic_const_iterator&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; three_way_comparable&amp;lt;Iterator&amp;gt;;          // (1)
+
+template&amp;lt;different-from&amp;lt;basic_const_iterator&amp;gt; I&amp;gt;
+constexpr auto operator&amp;lt;=&amp;gt;(const I&amp;amp; y) const
+  requires random_access_iterator&amp;lt;Iterator&amp;gt; &amp;amp;&amp;amp; totally_ordered_with&amp;lt;Iterator, I&amp;gt; &amp;amp;&amp;amp;
+           three_way_comparable_with&amp;lt;Iterator, I&amp;gt;;                                      // (2)
+```
+* different-from[link /reference/ranges/different-from.md]
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+* three_way_comparable[link /reference/compare/three_way_comparable.md]
+* totally_ordered_with[link /reference/concepts/totally_ordered_with.md]
+
+## 概要
+
+
+`basic_const_iterator&amp;lt;Iterator&amp;gt;`オブジェクトと別のイテレータ（`basic_const_iterator&amp;lt;Iterator&amp;gt;`か`Iterator`、`Iterator`と比較可能なオブジェクト）の三方比較を行う。
+
+- (1) : `basic_const_iterator`同士の比較を行う
+- (2) : ラップしているイテレータ（`Iterator`）と直接比較可能な型との間で比較を行う
+
+## 効果
+
+ラップするイテレータを`current_`というメンバに保持するとして
+
+- (1) : 以下と等価  
+    ```cpp
+    return current_ &amp;lt;=&amp;gt; y.current_;
+    ```
+
+- (2) : 以下と等価  
+    ```cpp
+    return current_ &amp;lt;=&amp;gt; y;
+    ```
+
+## 備考
+
+(2)の演算子により以下の演算子が使用可能になる（制約は同じものが適用される）。
+
+```cpp
+// 逆順
+template&amp;lt;different-from&amp;lt;basic_const_iterator&amp;gt; I&amp;gt;
+friend constexpr auto operator&amp;lt;=&amp;gt;(const I&amp;amp;, const basic_const_iterator&amp;amp;);
+```
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;compare&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+  auto se = vec.end();
+  std::basic_const_iterator cse = se;
+
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  // (1) basic_const_iterator同士の比較
+  std::cout &amp;lt;&amp;lt; std::is_lt(cit &amp;lt;=&amp;gt; cse) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; std::is_lt(cse &amp;lt;=&amp;gt; cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // (2) 元のイテレータとの比較
+  std::cout &amp;lt;&amp;lt; std::is_lt(cit &amp;lt;=&amp;gt; se) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; std::is_lt(se &amp;lt;=&amp;gt; cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* &amp;lt;=&amp;gt;[color ff0000]
+* is_lt[link /reference/compare/named_comparison_functions.md]
+
+### 出力
+
+```
+true
+false
+true
+false
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- basic_const_iterator : == &lt;=&gt;追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_equal.html"/>
      <id>09c1ad78bd5be675d94afdc1e49adcaa6ff7ca4d:reference/iterator/basic_const_iterator/op_equal.md</id>
      <updated>2023-08-04T15:07:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_equal.md b/reference/iterator/basic_const_iterator/op_equal.md
new file mode 100644
index 000000000..d9bfd98ec
--- /dev/null
+++ b/reference/iterator/basic_const_iterator/op_equal.md
@@ -0,0 +1,104 @@
+# operator==
+* iterator[meta header]
+* std[meta namespace]
+* basic_const_iterator[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+constexpr bool operator==(const S&amp;amp; s) const;
+```
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+
+## 概要
+
+`basic_const_iterator&amp;lt;Iterator&amp;gt;`オブジェクトと別のイテレータ（`basic_const_iterator&amp;lt;Iterator&amp;gt;`か`Iterator`のオブジェクト）が同じ要素を指しているかを判定する。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+```cpp
+return current_ == s;
+```
+
+## 戻り値
+
+2つのイテレータが同じ要素を指している場合に`true`を返す。
+
+
+## 備考
+
+この演算子により以下の演算子が使用可能になる。
+
+```cpp
+// !=
+template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+constexpr bool operator!=(const S&amp;amp;) const;
+
+// 逆順
+template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+friend constexpr bool operator==(const S&amp;amp;, const basic_const_iterator&amp;lt;Iterator&amp;gt;&amp;amp;);
+
+template&amp;lt;sentinel_for&amp;lt;Iterator&amp;gt; S&amp;gt;
+friend constexpr bool operator!=(const S&amp;amp;, const basic_const_iterator&amp;lt;Iterator&amp;gt;&amp;amp;);
+```
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector vec = {1, 2, 3, 4, 5};
+
+  std::basic_const_iterator cit = vec.begin();
+  auto se = vec.end();
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  // 元のイテレータとの比較
+  std::cout &amp;lt;&amp;lt; (cit == se) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (se == cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  std::basic_const_iterator cse = se;
+
+  // basic_const_iterator同士の比較
+  std::cout &amp;lt;&amp;lt; (cit == cse) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cse == cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  // !=の導出
+  std::cout &amp;lt;&amp;lt; (cit != se) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (se != cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cit != cse) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; (cse != cit) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* ==[color ff0000]
+
+### 出力
+```
+false
+false
+false
+false
+true
+true
+true
+true
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
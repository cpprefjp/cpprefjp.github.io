<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-06-23T01:07:44.859829</updated>
  <id>ed8219c3-cf11-49bf-b03d-7c84bd7be0b9</id>

  
    <entry>
      <title>common_comparison_category -- common_comparison_category : サンプルコード修正</title>
      <link href="https://cpprefjp.github.io/reference/compare/common_comparison_category.html"/>
      <id>93872494a0eca724e086587646817f6fd1adb574:reference/compare/common_comparison_category.md</id>
      <updated>2022-06-23T10:03:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/common_comparison_category.md b/reference/compare/common_comparison_category.md
index b6cd58227..1dc35ac91 100644
--- a/reference/compare/common_comparison_category.md
+++ b/reference/compare/common_comparison_category.md
@@ -47,7 +47,7 @@ namespace std {
 #include &amp;lt;type_traits&amp;gt;
 
 template&amp;lt;typename T, typename Cat&amp;gt;
-using fallback_comp3way = std::conditional_t&amp;lt;std::three_way_comparable&amp;lt;T&amp;gt;, std::compare_three_way_result_t&amp;lt;T&amp;gt;, Cat&amp;gt;;
+using fallback_comp3way_t = std::conditional_t&amp;lt;std::three_way_comparable&amp;lt;T&amp;gt;, std::compare_three_way_result&amp;lt;T&amp;gt;, std::type_identity&amp;lt;Cat&amp;gt;&amp;gt;::type;
 
 using category = std::weak_ordering;
 
@@ -57,11 +57,11 @@ struct triple {
   T2 t2;
   T3 t3;
 
-  //&amp;lt;=&amp;gt;を使用可能ならそれを、そうでないなら&amp;lt; ==を使ってdefault実装
+  // &amp;lt;=&amp;gt;を使用可能ならそれを、そうでないなら&amp;lt; ==を使ってdefault実装
   auto operator&amp;lt;=&amp;gt;(const triple&amp;amp;) const
-    -&amp;gt; std::common_comparison_category_t&amp;lt;fallback_comp3way&amp;lt;T1, category&amp;gt;, fallback_comp3way&amp;lt;T2, category&amp;gt;, fallback_comp3way&amp;lt;T3, category&amp;gt;&amp;gt;
+    -&amp;gt; std::common_comparison_category_t&amp;lt;fallback_comp3way_t&amp;lt;T1, category&amp;gt;, fallback_comp3way_t&amp;lt;T2, category&amp;gt;, fallback_comp3way_t&amp;lt;T3, category&amp;gt;&amp;gt;
       = default;
-}
+};
 
 struct no_spaceship {
   int n;
@@ -75,8 +75,7 @@ struct no_spaceship {
   }
 };
 
-int main()
-{
+int main() {
   triple&amp;lt;int, double, no_spaceship&amp;gt; t1 = {10, 3.14, {20}}, t2 = {10, 3.14, {30}};
 
   std::cout &amp;lt;&amp;lt; std::boolalpha;
@@ -87,6 +86,7 @@ int main()
 }
 ```
 * common_comparison_category_t[color ff0000]
+* type_identity[link /reference/type_traits/type_identity.md]
 
 ### 出力
 ```
@@ -96,8 +96,6 @@ false
 false
 ```
 
-このコードをコンパイルできるコンパイラがまだないため、結果は予想。
-
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>compare_three_way_result -- compare_three_way_result : シンプル化</title>
      <link href="https://cpprefjp.github.io/reference/compare/compare_three_way_result.html"/>
      <id>9f5298a509928a0beb752759be6fd1f50fa07325:reference/compare/compare_three_way_result.md</id>
      <updated>2022-06-23T01:40:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/compare_three_way_result.md b/reference/compare/compare_three_way_result.md
index 60aac5dd5..8af93a5ed 100644
--- a/reference/compare/compare_three_way_result.md
+++ b/reference/compare/compare_three_way_result.md
@@ -42,25 +42,19 @@ namespace std {
 #include &amp;lt;type_traits&amp;gt;
 
 template&amp;lt;typename T, typename Cat&amp;gt;
-struct fallback_comp3way {
-  using type = Cat;
-};
-
-template&amp;lt;std::three_way_comparable T, typename Cat&amp;gt;
-struct fallback_comp3way&amp;lt;T, Cat&amp;gt; {
-  using type = std::compare_three_way_result_t&amp;lt;T&amp;gt;;
-};
+using fallback_comp3way_t = std::conditional_t&amp;lt;std::three_way_comparable&amp;lt;T&amp;gt;, std::compare_three_way_result&amp;lt;T&amp;gt;, std::type_identity&amp;lt;Cat&amp;gt;&amp;gt;::type;
 
 template&amp;lt;typename T&amp;gt;
 struct wrap {
   T t;
 
-  //&amp;lt;=&amp;gt;を使用可能ならそれを、そうでないなら&amp;lt; ==を使ってdefault実装
+  // &amp;lt;=&amp;gt;を使用可能ならそれを、そうでないなら&amp;lt; ==を使ってdefault実装
   auto operator&amp;lt;=&amp;gt;(const wrap&amp;amp;) const
-    -&amp;gt; fallback_comp3way&amp;lt;T, std::weak_ordering&amp;gt;::type
+    -&amp;gt; fallback_comp3way_t&amp;lt;T, std::weak_ordering&amp;gt;
       = default;
 }
 
+// &amp;lt;=&amp;gt;を定義しない型
 struct no_spaceship {
   int n;
 
@@ -85,6 +79,7 @@ int main()
 }
 ```
 * compare_three_way_result_t[color ff0000]
+* type_identity[link /reference/type_traits/type_identity.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>compare_three_way_result -- compare_three_way_result : サンプルコードを動くように修正</title>
      <link href="https://cpprefjp.github.io/reference/compare/compare_three_way_result.html"/>
      <id>03e07f60c74b80e61a0afc55e016b6c7e2a24d0d:reference/compare/compare_three_way_result.md</id>
      <updated>2022-06-23T01:25:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/compare_three_way_result.md b/reference/compare/compare_three_way_result.md
index fa4895254..60aac5dd5 100644
--- a/reference/compare/compare_three_way_result.md
+++ b/reference/compare/compare_three_way_result.md
@@ -42,7 +42,14 @@ namespace std {
 #include &amp;lt;type_traits&amp;gt;
 
 template&amp;lt;typename T, typename Cat&amp;gt;
-using fallback_comp3way = std::conditional_t&amp;lt;std::three_way_comparable&amp;lt;T&amp;gt;, std::compare_three_way_result_t&amp;lt;T&amp;gt;, Cat&amp;gt;;
+struct fallback_comp3way {
+  using type = Cat;
+};
+
+template&amp;lt;std::three_way_comparable T, typename Cat&amp;gt;
+struct fallback_comp3way&amp;lt;T, Cat&amp;gt; {
+  using type = std::compare_three_way_result_t&amp;lt;T&amp;gt;;
+};
 
 template&amp;lt;typename T&amp;gt;
 struct wrap {
@@ -50,7 +57,7 @@ struct wrap {
 
   //&amp;lt;=&amp;gt;を使用可能ならそれを、そうでないなら&amp;lt; ==を使ってdefault実装
   auto operator&amp;lt;=&amp;gt;(const wrap&amp;amp;) const
-    -&amp;gt; fallback_comp3way&amp;lt;T, std::weak_ordering&amp;gt;
+    -&amp;gt; fallback_comp3way&amp;lt;T, std::weak_ordering&amp;gt;::type
       = default;
 }
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parse -- chrono::parse : %OCはない</title>
      <link href="https://cpprefjp.github.io/reference/chrono/parse.html"/>
      <id>f060ad2384dc2f4acc4bdb48ba90659e38e5ad4e:reference/chrono/parse.md</id>
      <updated>2022-06-22T10:34:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/parse.md b/reference/chrono/parse.md
index f9932d952..9fd056f28 100644
--- a/reference/chrono/parse.md
+++ b/reference/chrono/parse.md
@@ -50,7 +50,7 @@ namespace std::chrono {
 | `%b` | ロケール依存の月の完全名もしくは略称 (大文字・小文字を区別しない) | `&amp;#34;Apr&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;April&amp;#34;`&amp;lt;br/&amp;gt; 日本のロケールでは`&amp;#34;4月&amp;#34;` |
 | `%B` | `%b`と等価 | |
 | `%c` | ロケール依存の日付・時間の表現。改良コマンド`%Ec`を指定すると、異なる表現になる | `&amp;#34;Fri Apr 24 17:14:44 2020&amp;#34;`&amp;lt;br/&amp;gt; 日本のロケールでは`&amp;#34;2020年04月24日 17時14分44秒&amp;#34;`&amp;lt;br/&amp;gt; `%Ec`では`&amp;#34;令和02年04月24日 17時14分44秒&amp;#34;` |
-| `%C` | 世紀の10進数番号。改良コマンド`%NC` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%EC`と`%OC`はロケール依存の異なる表現になる | `&amp;#34;21&amp;#34;`&amp;lt;br/&amp;gt; `%EC`では元号`&amp;#34;令和&amp;#34;` |
+| `%C` | 世紀の10進数番号。改良コマンド`%NC` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%EC`はロケール依存の異なる表現になる | `&amp;#34;21&amp;#34;`&amp;lt;br/&amp;gt; `%EC`では元号`&amp;#34;令和&amp;#34;` |
 | `%d` | 10進数の月の日。改良コマンド`%Nd` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%Od`はロケール依存の異なる表現になる | `&amp;#34;4&amp;#34;` |
 | `%D` | `%m/%d/%y`と等価 | `&amp;#34;04/01/2020&amp;#34;` |
 | `%e` | `%d`と等価で、`%d`と同様の改良コマンドが使用できる | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>local_time -- local_time : from_stream() オフセットの調整は行われない</title>
      <link href="https://cpprefjp.github.io/reference/chrono/local_time.html"/>
      <id>780afec60e404795a7e5e421f32c2950958e2b03:reference/chrono/local_time.md</id>
      <updated>2022-06-21T09:39:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/local_time.md b/reference/chrono/local_time.md
index 5f4f1eeff..05a89e765 100644
--- a/reference/chrono/local_time.md
+++ b/reference/chrono/local_time.md
@@ -64,7 +64,6 @@ namespace std {
     - 有効な日付・時間の解析に失敗した場合、`is.`[`setstate`](/reference/ios/basic_ios/setstate.md)`(`[`ios_base::failbit`](/reference/ios/ios_base/type-iostate.md)`)`が呼び出され、パラメータ`tp`は変更されない
     - タイムゾーンフォーマット`&amp;#34;%Z&amp;#34;`が指定され、解析が成功した場合、パラメータ`abbrev`が非ヌルである場合に`*abbrev`にタイムゾーン名が代入される
     - タイムゾーンとしてUTC時間からのオフセット時間 (日本なら`&amp;#34;+0900&amp;#34;`) を意味するフォーマット`&amp;#34;%z&amp;#34;`が指定され、解析が成功した場合、パラメータ`offset`が非ヌルである場合に`*offset`にその値が代入される
-    - さらに、`tp`に日付・時間が代入される前に、解析されたオフセットがタイムスタンプから引かれる
     - `is`を返す
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-03-06T14:38:20.463214</updated>
  <id>1fa800d3-da54-4361-b6cc-3d1e2bc506f3</id>

  
    <entry>
      <title>zip_transform_view -- Update zip_transform_view.md</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view.html"/>
      <id>00300d60326e748f5393732bfcbed72252dad4e6:reference/ranges/zip_transform_view.md</id>
      <updated>2024-03-06T05:09:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view.md b/reference/ranges/zip_transform_view.md
index 94b04a4d6..93a6dda40 100644
--- a/reference/ranges/zip_transform_view.md
+++ b/reference/ranges/zip_transform_view.md
@@ -84,7 +84,7 @@ int main() {
   std::vector d = {1, 2, 3};
   std::vector p = {1, 10, 100, 1000};
 
-  std::println(&amp;#34;{}&amp;#34;, std::views::zip_transform([](auto x, auto y){ return x * y }, d, p));
+  std::println(&amp;#34;{}&amp;#34;, std::views::zip_transform([](auto x, auto y){ return x * y; }, d, p));
 }
 ```
 * std::views::zip_transform[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- adjacent_transform_view #1063</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>5695a7a4fbd422685400adf98dc7bcf663c0ed56:reference/ranges.md</id>
      <updated>2024-03-06T04:47:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index b1c0d586e..843226127 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -360,8 +360,8 @@ range | adaptor(args...)
 
 | 名前                                                             | 説明                                                                               | 対応バージョン |
 |------------------------------------------------------------------|------------------------------------------------------------------------------------|----------------|
-| [`adjacent_transform_view`](ranges/adjacent_transform_view.md.nolink)   | `adjacent_view`と同様に取り出し、関数を適用した結果のビュー (class template)       | C++23          |
-| [`views::adjacent_transform`](ranges/adjacent_transform_view.md.nolink) | `adjacent_transform_view`を生成する (customization point object)                   | C++23          |
+| [`adjacent_transform_view`](ranges/adjacent_transform_view.md)   | `adjacent_view`と同様に取り出し、関数を適用した結果のビュー (class template)       | C++23          |
+| [`views::adjacent_transform`](ranges/adjacent_transform_view.md) | `adjacent_transform_view`を生成する (customization point object)                   | C++23          |
 
 ### chunk view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_transform_view -- adjacent_transform_view #1063</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view.html"/>
      <id>5695a7a4fbd422685400adf98dc7bcf663c0ed56:reference/ranges/adjacent_transform_view.md</id>
      <updated>2024-03-06T04:47:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view.md b/reference/ranges/adjacent_transform_view.md
new file mode 100644
index 000000000..c122908a3
--- /dev/null
+++ b/reference/ranges/adjacent_transform_view.md
@@ -0,0 +1,111 @@
+# adjacent_transform_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;forward_range V, move_constructible F, size_t N&amp;gt;
+    requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; (N &amp;gt; 0) &amp;amp;&amp;amp; is_object_v&amp;lt;F&amp;gt; &amp;amp;&amp;amp;
+             regular_invocable&amp;lt;F&amp;amp;, REPEAT(range_reference_t&amp;lt;V&amp;gt;, N)...&amp;gt; &amp;amp;&amp;amp;
+             can-reference&amp;lt;invoke_result_t&amp;lt;F&amp;amp;, REPEAT(range_reference_t&amp;lt;V&amp;gt;, N)...&amp;gt;&amp;gt;
+  class adjacent_transform_view : public view_interface&amp;lt;adjacent_transform_view&amp;lt;V, F, N&amp;gt;&amp;gt; { …… }; // (1)
+
+  namespace views {
+    inline constexpr /*unspecified*/ adjacent_transform_view = /*unspecified*/;      // (2)
+  }
+}
+```
+* REPEAT[italic]
+* can-reference[link /reference/iterator/dereferenceable.md]
+
+## 概要
+
+`adjacent_transform_view`は各要素とそれに隣接する要素を指定個数ずつ取り出し、それらを引数として関数を呼び出した結果を要素とする[`view`](view.md)。
+
+`adjacent_transform_view`の要素を1つ取得するごとに、`V` の要素を `N` 個取得する。
+
+`N` が元となるRangeの要素数より大きい場合、この[`view`](view.md)は空である。
+
+- (1): `adjacent_transform_view`のクラス定義
+- (2): `adjacent_transform_view`を生成するカスタマイゼーションポイントオブジェクト
+
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+|          | (1)   | 〇     | 〇    | (1)     | (1)           | (1)           |            | (1)    | ○       | ○   |
+
+- (1): [`adjacent_view`](adjacent_view.md)`&amp;lt;V, N&amp;gt;`に従う
+
+## 効果
+
+- (2): 式 `views::adjacent_transform&amp;lt;N&amp;gt;(E, F)` の効果は以下の通り。
+    - `N` &amp;gt; 0 のとき、`adjacent_transform_view&amp;lt;`[`views::all_t`](all.md)`&amp;lt;decltype((E))&amp;gt;, `[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((F))&amp;gt;, N&amp;gt;(E, F)` と等しい
+    - `N` = 0 のとき、`((void)E, `[`views::zip_transform`](zip_transform_view.md)`(F))` と等しい(ただし`E`と`F`の評価順は不定)
+
+## 備考
+
+`REPEAT(T, N)` をT型のN個のパックとする。
+
+## メンバ関数
+
+| 名前                                             | 説明                             | 対応バージョン |
+|--------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](adjacent_transform_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
+| [`base`](adjacent_transform_view/base.md.nolink)                     | `V`の参照を取得する              | C++23          |
+| [`begin`](adjacent_transform_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](adjacent_transform_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
+| [`size`](adjacent_transform_view/size.md.nolink)                     | 要素数を取得する                 | C++23          |
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](adjacent_transform_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+
+## 例
+```cpp example
+int main() {
+  // 隣接する要素間の差を計算する
+  std::vector v = {9, 2, 5, 3, 6, 7};
+  std::println(&amp;#34;{}&amp;#34;, v | std::views::adjacent_transform_view&amp;lt;2&amp;gt;([](auto x, auto y) { return y - x; }));
+}
+```
+* std::views::adjacent_transform_view[color ff0000]
+
+### 出力
+```
+[-7, 3, -2, 3, 1]
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 関連項目
+- [`adjacent_difference`](/reference/numeric/adjacent_difference.md) 隣接する2つの要素間の差を計算するアルゴリズム関数
+
+## 参照
+- [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_view -- adjacent_transform_view #1063</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view.html"/>
      <id>5695a7a4fbd422685400adf98dc7bcf663c0ed56:reference/ranges/adjacent_view.md</id>
      <updated>2024-03-06T04:47:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view.md b/reference/ranges/adjacent_view.md
index 0a16fc5c2..ce5b5c064 100644
--- a/reference/ranges/adjacent_view.md
+++ b/reference/ranges/adjacent_view.md
@@ -25,7 +25,7 @@ namespace std::ranges {
 `N` が元となるRangeの要素数より大きい場合、この[`view`](view.md)は空である。
 
 - (1): `adjacent_view`のクラス定義
-- (2): `adjacent_view`を生成するカスタマイゼーションポイントオブジェクト(Rangeアダプタオブジェクトではない)
+- (2): `adjacent_view`を生成するカスタマイゼーションポイントオブジェクト
 
 ### Rangeコンセプト
 
@@ -47,10 +47,10 @@ namespace std::ranges {
 | 名前                                                | 説明                             | 対応バージョン |
 |-----------------------------------------------------|----------------------------------|----------------|
 | [`(constructor)`](adjacent_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
-| [`base`](take_view/base.md.nolink)                         | `V`の参照を取得する              | C++23          |
+| [`base`](adjacent_view/base.md.nolink)                     | `V`の参照を取得する              | C++23          |
 | [`begin`](adjacent_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
 | [`end`](adjacent_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](take_view/size.md.nolink)                         | 要素数を取得する                 | C++23          |
+| [`size`](adjacent_view/size.md.nolink)                     | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
@@ -107,7 +107,7 @@ int main() {
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 ## 関連項目
-- [`adjacent_transform_view`](adjacent_transform_view.md.nolink) `adjacent_view` と同じように要素を取得して関数を適用する
+- [`adjacent_transform_view`](adjacent_transform_view.md) `adjacent_view` と同じように要素を取得して関数を適用する
 
 ## 参照
 - [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zip_transform_view -- update zip_transform_view</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view.html"/>
      <id>de6c390dc6f762f352943a4152440d38eb0d1387:reference/ranges/zip_transform_view.md</id>
      <updated>2024-03-06T04:27:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view.md b/reference/ranges/zip_transform_view.md
index dde5504bb..94b04a4d6 100644
--- a/reference/ranges/zip_transform_view.md
+++ b/reference/ranges/zip_transform_view.md
@@ -43,8 +43,7 @@ zipするRangeのサイズが異なっている場合、`zip_transform_view`の
 
 - (2): `F`を部分式、`Es...`を部分式のパックとする。式 `views::zip_transform(F, Es...)` の効果は以下の通り。
     - `Es` が空でないとき、`zip_transform_view(F, Es...)` と等しい
-    - `Es` が空のとき、 `FD` を [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((F))&amp;gt;`として、
-        - `((void)F, auto(`[`views::empty`](empty_view.md)`&amp;lt;`[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;FD&amp;amp;&amp;gt;&amp;gt;&amp;gt;))` と等しい
+    - `Es` が空のとき、 `FD` を [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((F))&amp;gt;`として、`((void)F, auto(`[`views::empty`](empty_view.md)`&amp;lt;`[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;FD&amp;amp;&amp;gt;&amp;gt;&amp;gt;))` と等しい
         - ただし、 [`move_constructible`](/reference/concepts/move_constructible.md)`&amp;lt;FD&amp;gt; &amp;amp;&amp;amp; `[`regular_invocable`](/reference/concepts/invocable.md)`&amp;lt;FD&amp;amp;&amp;gt;` が `false`、または [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;FD&amp;amp;&amp;gt;&amp;gt;` がオブジェクト型でないとき、ill-formed
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zip_transform_view -- update zip_transform_view</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view.html"/>
      <id>5722730c08e127f39077b10f5d70113e8cd30ce2:reference/ranges/zip_transform_view.md</id>
      <updated>2024-03-06T04:20:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view.md b/reference/ranges/zip_transform_view.md
index 4a3a488bc..dde5504bb 100644
--- a/reference/ranges/zip_transform_view.md
+++ b/reference/ranges/zip_transform_view.md
@@ -35,13 +35,9 @@ zipするRangeのサイズが異なっている場合、`zip_transform_view`の
 
 | borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
 |----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
-|          | (1)   | 〇     | 〇    | (2)     | (3)           | (4)           |            | (5)    | ○       | ○   |
+|          | (1)   | 〇     | 〇    | (1)     | (1)           | (1)           |            | (1)    | ○       | ○   |
 
-- (1): zipするすべてのRangeが[`sized_range`](sized_range.md)のとき
-- (2): zipするすべてのRangeが[`forward_range`](forward_range.md)のとき
-- (3): zipするすべてのRangeが[`bidirectional_range`](bidirectional_range.md)のとき
-- (4): zipするすべてのRangeが[`random_access_range`](random_access_range.md)のとき
-- (5): *zip-is-common*のとき
+- (1): [`zip_view`](zip_view.md)`&amp;lt;Views...&amp;gt;`に従う
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- adjacent_view #1063</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>51f60758826827b0f1bf16daedd587d53bf6ce82:reference/ranges.md</id>
      <updated>2024-03-06T04:17:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index fb89a2813..b1c0d586e 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -353,8 +353,8 @@ range | adaptor(args...)
 
 | 名前                                                             | 説明                                                                               | 対応バージョン |
 |------------------------------------------------------------------|------------------------------------------------------------------------------------|----------------|
-| [`adjacent_view`](ranges/adjacent_view.md.nolink)                       | 各要素とそれに隣接する要素を指定個数ずつ取り出した`tuple`のビュー (class template) | C++23          |
-| [`views::adjacent`](ranges/adjacent_view.md.nolink)                     | `adjacent_view`を生成する (customization point object)                             | C++23          |
+| [`adjacent_view`](ranges/adjacent_view.md)                       | 各要素とそれに隣接する要素を指定個数ずつ取り出した`tuple`のビュー (class template) | C++23          |
+| [`views::adjacent`](ranges/adjacent_view.md)                     | `adjacent_view`を生成する (customization point object)                             | C++23          |
 
 ### adjacent transform view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_view -- adjacent_view #1063</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view.html"/>
      <id>51f60758826827b0f1bf16daedd587d53bf6ce82:reference/ranges/adjacent_view.md</id>
      <updated>2024-03-06T04:17:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view.md b/reference/ranges/adjacent_view.md
new file mode 100644
index 000000000..0a16fc5c2
--- /dev/null
+++ b/reference/ranges/adjacent_view.md
@@ -0,0 +1,113 @@
+# adjacent_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;forward_range V, size_t N&amp;gt;
+    requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; (N &amp;gt; 0)
+  class adjacent_view : public view_interface&amp;lt;adjacent_view&amp;lt;V, N&amp;gt;&amp;gt; {…… }; // (1)
+
+  namespace views {
+    inline constexpr /*unspecified*/ adjacent = /*unspecified*/;      // (2)
+  }
+}
+```
+
+## 概要
+
+`adjacent_view`は各要素とそれに隣接する要素を指定個数ずつ取り出した[`tuple`](/reference/tuple/tuple.md)を要素とする[`view`](view.md)。
+
+`adjacent_view`の要素を1つ取得するごとに、`V` の要素を `N` 個取得する。
+
+`N` が元となるRangeの要素数より大きい場合、この[`view`](view.md)は空である。
+
+- (1): `adjacent_view`のクラス定義
+- (2): `adjacent_view`を生成するカスタマイゼーションポイントオブジェクト(Rangeアダプタオブジェクトではない)
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+|          | (1)   | 〇     | 〇    | (1)     | (1)           | (1)           |            | (1)    | ○       | ○   |
+
+- (1): 元となるRangeに従う
+
+## 効果
+
+- (2): 式`views::adjacent&amp;lt;N&amp;gt;(E)`の効果は次の通り
+    - `N` &amp;gt; 0 のとき、`adjacent_view&amp;lt;`[`views::all_t`](all.md)`&amp;lt;decltype((E))&amp;gt;, N&amp;gt;(E)` と等しい
+    - `N` = 0 のとき、`auto((void)E, `[`views::empty`](empty_view.md)`&amp;lt;`[`tuple`](/reference/tuple/tuple.md)`&amp;lt;&amp;gt;&amp;gt;))` と等しい
+
+
+## メンバ関数
+
+| 名前                                                | 説明                             | 対応バージョン |
+|-----------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](adjacent_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
+| [`base`](take_view/base.md.nolink)                         | `V`の参照を取得する              | C++23          |
+| [`begin`](adjacent_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](adjacent_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
+| [`size`](take_view/size.md.nolink)                         | 要素数を取得する                 | C++23          |
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](adjacent_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector v = {1, 2, 3, 4, 5, 6};
+  std::println(&amp;#34;{}&amp;#34;, v | std::views::adjacent&amp;lt;0&amp;gt;);
+  std::println(&amp;#34;{}&amp;#34;, v | std::views::adjacent&amp;lt;1&amp;gt;);
+  std::println(&amp;#34;{}&amp;#34;, v | std::views::adjacent&amp;lt;3&amp;gt;);
+  std::println(&amp;#34;{}&amp;#34;, v | std::views::adjacent&amp;lt;6&amp;gt;);
+  std::println(&amp;#34;{}&amp;#34;, v | std::views::adjacent&amp;lt;7&amp;gt;);
+}
+```
+* std::views::adjacent[color ff0000]
+
+### 出力
+```
+[]
+[(1), (2), (3), (4), (5), (6)]
+[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]
+[(1, 2, 3, 4, 5, 6)]
+[]
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 関連項目
+- [`adjacent_transform_view`](adjacent_transform_view.md.nolink) `adjacent_view` と同じように要素を取得して関数を適用する
+
+## 参照
+- [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
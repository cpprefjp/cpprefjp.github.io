<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-05-11T14:39:15.239543</updated>
  <id>e84177c1-8a60-42ff-9f31-f03f41046ec0</id>

  
    <entry>
      <title>クラステンプレートのテンプレート引数推論 -- Merge pull request #1149 from toru-fukaya/fix-non-deducible-example</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html"/>
      <id>20f209c6c5de14b543ec448588990a208525cdcd:lang/cpp17/type_deduction_for_class_templates.md</id>
      <updated>2023-05-10T15:59:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/type_deduction_for_class_templates.md b/lang/cpp17/type_deduction_for_class_templates.md
index 6f5012924..0d71bf481 100644
--- a/lang/cpp17/type_deduction_for_class_templates.md
+++ b/lang/cpp17/type_deduction_for_class_templates.md
@@ -203,11 +203,17 @@ int main()
 
 ### クラステンプレートの型推論を回避する例
 ```cpp
+// C++20 で追加された std::type_identity と同じことをするクラス
+template &amp;lt;class T&amp;gt;
+struct identity {
+  using type = T;
+};
+
 template &amp;lt;class T&amp;gt;
 struct X {
-  using T_ = T;
+  using T_ = typename identity&amp;lt;T&amp;gt;::type;
 
-  // テンプレートパラメータを直接使用せず、型の別名を付けてから使用する。
+  // テンプレートパラメータを直接使用せず、identityを介して使用する。
   // これによって、テンプレート引数を明示的に指定させられる
   X(T_) {}
 };
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>クラステンプレートのテンプレート引数推論 -- クラステンプレートの型推論を回避する例を修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html"/>
      <id>dd8a50d89d7eaa04ca9511109342e11ff990e1fb:lang/cpp17/type_deduction_for_class_templates.md</id>
      <updated>2023-05-10T15:31:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/type_deduction_for_class_templates.md b/lang/cpp17/type_deduction_for_class_templates.md
index 6f5012924..0d71bf481 100644
--- a/lang/cpp17/type_deduction_for_class_templates.md
+++ b/lang/cpp17/type_deduction_for_class_templates.md
@@ -203,11 +203,17 @@ int main()
 
 ### クラステンプレートの型推論を回避する例
 ```cpp
+// C++20 で追加された std::type_identity と同じことをするクラス
+template &amp;lt;class T&amp;gt;
+struct identity {
+  using type = T;
+};
+
 template &amp;lt;class T&amp;gt;
 struct X {
-  using T_ = T;
+  using T_ = typename identity&amp;lt;T&amp;gt;::type;
 
-  // テンプレートパラメータを直接使用せず、型の別名を付けてから使用する。
+  // テンプレートパラメータを直接使用せず、identityを介して使用する。
   // これによって、テンプレート引数を明示的に指定させられる
   X(T_) {}
 };
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Toru Fukaya</name>
        <email>toru.fukaya@fixstars.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random -- Merge pull request #1147 from sutatoruta/fix/random-typo</title>
      <link href="https://cpprefjp.github.io/reference/random.html"/>
      <id>68dea799756ae6bb8296ad0397b7b3f304b2d8ad:reference/random.md</id>
      <updated>2023-05-10T11:52:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random.md b/reference/random.md
index 3589ec974..15257500b 100644
--- a/reference/random.md
+++ b/reference/random.md
@@ -47,7 +47,7 @@
 
 先に挙げた擬似乱数生成器に対して一般的なパラメータを定義し、使いやすいように用意された擬似乱数生成器の型。
 
-これらの型には、パフォーマンス、オブジェクトのサイズ、周期などのトレードオフがある。ユーザーの目的に合わせて擬似乱数正器の型を選択してほしい。
+これらの型には、パフォーマンス、オブジェクトのサイズ、周期などのトレードオフがある。ユーザーの目的に合わせて擬似乱数生成器の型を選択してほしい。
 
 オブジェクトのサイズをある程度無視・許容できる状況では、多くの分野と用途に、[`mt19937`](random/mt19937.md)を推奨できる。
 
@@ -84,7 +84,7 @@
 
 
 ## 分布生成器
-分布生成器は、乱数生成器のよって生成される値の範囲や分布を調整するクラスである。
+分布生成器は、乱数生成器によって生成される値の範囲や分布を調整するクラスである。
 
 分布生成器は、環境によって異なるアルゴリズムで実装される可能性がある。擬似乱数生成器は環境によらず同じシードを与えれば同じ乱数列が生成されるが、分布生成器を介して乱数生成する場合、環境によって異なる乱数列が生成される場合がある。
 
@@ -160,12 +160,12 @@ int main()
   std::mt19937 engine(seed_gen());
 
   // 一様実数分布
-  // [-1.0, 1.0)の値の範囲で、等確率に実数を生成する
-  std::uniform_real_distribution&amp;lt;&amp;gt; dist1(-1.0, 1.0);
+  // [-1.0f, 1.0f)の値の範囲で、等確率に実数を生成する
+  std::uniform_real_distribution&amp;lt;float&amp;gt; dist1(-1.0f, 1.0f);
 
   // 正規分布
-  // 平均1.0、標準偏差0.5で分布させる
-  std::normal_distribution&amp;lt;&amp;gt; dist2(1.0, 0.5);
+  // 平均1.0f、標準偏差0.5fで分布させる
+  std::normal_distribution&amp;lt;float&amp;gt; dist2(1.0f, 0.5f);
 
   std::ofstream file(&amp;#34;random.tsv&amp;#34;);
   for (size_t i = 0; i &amp;lt; 1000*1000; ++i) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>binomial_distribution -- Merge pull request #1147 from sutatoruta/fix/random-typo</title>
      <link href="https://cpprefjp.github.io/reference/random/binomial_distribution.html"/>
      <id>68dea799756ae6bb8296ad0397b7b3f304b2d8ad:reference/random/binomial_distribution.md</id>
      <updated>2023-05-10T11:52:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/binomial_distribution.md b/reference/random/binomial_distribution.md
index 9bf147b96..716eafc2a 100644
--- a/reference/random/binomial_distribution.md
+++ b/reference/random/binomial_distribution.md
@@ -13,7 +13,7 @@ namespace std {
 
 ## 概要
 `binomial_distribution`は、離散確率分布の一種である二項分布を表すクラスである。  
-成功する確率pの事象をn回施行し、成功した回数を求める。  
+成功する確率pの事象をn回試行し、成功した回数を求める。  
 
 二項分布は、以下のような用途に使用できる：
 
@@ -82,7 +82,7 @@ int main()
   std::random_device seed_gen;
   std::default_random_engine engine(seed_gen());
 
-  // 成功確率0.5の事象を5回施行する
+  // 成功確率0.5の事象を5回試行する
   std::binomial_distribution&amp;lt;&amp;gt; dist(5, 0.5);
 
   // 成功した回数を取得(0以上5以下の値が返される)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- Merge pull request #1147 from sutatoruta/fix/random-typo</title>
      <link href="https://cpprefjp.github.io/reference/random/binomial_distribution/op_call.html"/>
      <id>68dea799756ae6bb8296ad0397b7b3f304b2d8ad:reference/random/binomial_distribution/op_call.md</id>
      <updated>2023-05-10T11:52:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/binomial_distribution/op_call.md b/reference/random/binomial_distribution/op_call.md
index ae6793ca3..96871cdc9 100644
--- a/reference/random/binomial_distribution/op_call.md
+++ b/reference/random/binomial_distribution/op_call.md
@@ -38,7 +38,7 @@ int main()
 
   // (1)
   {
-    // 確率0.5で成功する事象を3回施行する
+    // 確率0.5で成功する事象を3回試行する
     std::binomial_distribution&amp;lt;&amp;gt; dist(3, 0.5);
 
     // 成功回数を取得
@@ -51,7 +51,7 @@ int main()
     using dist_type = std::binomial_distribution&amp;lt;&amp;gt;;
     dist_type dist;
 
-    // 確率0.5で成功する事象を3回施行する
+    // 確率0.5で成功する事象を3回試行する
     dist_type::param_type param(3, 0.5);
 
     // 成功回数を取得
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1147 from sutatoruta/fix/random-typo</title>
      <link href="https://cpprefjp.github.io/reference/random/binomial_distribution/op_constructor.html"/>
      <id>68dea799756ae6bb8296ad0397b7b3f304b2d8ad:reference/random/binomial_distribution/op_constructor.md</id>
      <updated>2023-05-10T11:52:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/binomial_distribution/op_constructor.md b/reference/random/binomial_distribution/op_constructor.md
index 3d02a43d2..c72284bb0 100644
--- a/reference/random/binomial_distribution/op_constructor.md
+++ b/reference/random/binomial_distribution/op_constructor.md
@@ -39,7 +39,7 @@ int main()
 
   // パラメータを個別に指定する
   {
-    // 確率0.5で成功する事象を、3回施行する
+    // 確率0.5で成功する事象を、3回試行する
     std::binomial_distribution&amp;lt;&amp;gt; dist(3, 0.5);
 
     // 成功回数を取得
@@ -51,7 +51,7 @@ int main()
   {
     using dist_type = std::binomial_distribution&amp;lt;&amp;gt;;
 
-    // 確率0.5で成功する事象を、3回施行する
+    // 確率0.5で成功する事象を、3回試行する
     dist_type::param_type param(3, 0.5);
     dist_type dist(param);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>geometric_distribution -- Merge pull request #1147 from sutatoruta/fix/random-typo</title>
      <link href="https://cpprefjp.github.io/reference/random/geometric_distribution.html"/>
      <id>68dea799756ae6bb8296ad0397b7b3f304b2d8ad:reference/random/geometric_distribution.md</id>
      <updated>2023-05-10T11:52:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/geometric_distribution.md b/reference/random/geometric_distribution.md
index 6f9f7b4f2..7350f757a 100644
--- a/reference/random/geometric_distribution.md
+++ b/reference/random/geometric_distribution.md
@@ -13,9 +13,9 @@ namespace std {
 
 ## 概要
 `geometric_distribution`は、離散確率分布の一種である幾何分布を表すクラスである。  
-このクラスは、ベルヌーイ分布([`bernoulli_distribution`](bernoulli_distribution.md))を施行し、初めて成功するまでに何回失敗したかを取得する。これは、[`negative_binomial_distribution`](negative_binomial_distribution.md)`&amp;lt;IntType&amp;gt;(1, p)`と同じである。
+このクラスは、ベルヌーイ分布([`bernoulli_distribution`](bernoulli_distribution.md))を試行し、初めて成功するまでに何回失敗したかを取得する。これは、[`negative_binomial_distribution`](negative_binomial_distribution.md)`&amp;lt;IntType&amp;gt;(1, p)`と同じである。
 
-幾何分布は、無記憶性(memoryless)という性質を持つ。これにより、施行の結果が次の結果(確率)に影響せず、それぞれが独立した結果となる。
+幾何分布は、無記憶性(memoryless)という性質を持つ。これにより、試行の結果が次の結果(確率)に影響せず、それぞれが独立した結果となる。
 
 
 幾何分布は、以下のような用途で使用できる：
@@ -84,7 +84,7 @@ int main()
   std::random_device seed_gen;
   std::default_random_engine engine(seed_gen());
 
-  // 成功確率0.5の事象を、成功するまで施行する
+  // 成功確率0.5の事象を、成功するまで試行する
   std::geometric_distribution&amp;lt;&amp;gt; dist(0.5);
 
   // 成功するまでに、何回失敗したかを取得
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- Merge pull request #1147 from sutatoruta/fix/random-typo</title>
      <link href="https://cpprefjp.github.io/reference/random/geometric_distribution/op_call.html"/>
      <id>68dea799756ae6bb8296ad0397b7b3f304b2d8ad:reference/random/geometric_distribution/op_call.md</id>
      <updated>2023-05-10T11:52:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/geometric_distribution/op_call.md b/reference/random/geometric_distribution/op_call.md
index 2bce05d9d..14229bd5d 100644
--- a/reference/random/geometric_distribution/op_call.md
+++ b/reference/random/geometric_distribution/op_call.md
@@ -38,7 +38,7 @@ int main()
 
   // (1)
   {
-    // 確率0.5で成功する事象を、成功するまで施行する
+    // 確率0.5で成功する事象を、成功するまで試行する
     std::geometric_distribution&amp;lt;&amp;gt; dist(0.5);
 
     // 成功するまでに失敗した回数を取得
@@ -51,7 +51,7 @@ int main()
     using dist_type = std::geometric_distribution&amp;lt;&amp;gt;;
     dist_type dist;
 
-    // 確率0.5で成功する事象を、成功するまで施行する
+    // 確率0.5で成功する事象を、成功するまで試行する
     dist_type::param_type param(0.5);
 
     // 成功するまでに失敗した回数を取得
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1147 from sutatoruta/fix/random-typo</title>
      <link href="https://cpprefjp.github.io/reference/random/geometric_distribution/op_constructor.html"/>
      <id>68dea799756ae6bb8296ad0397b7b3f304b2d8ad:reference/random/geometric_distribution/op_constructor.md</id>
      <updated>2023-05-10T11:52:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/geometric_distribution/op_constructor.md b/reference/random/geometric_distribution/op_constructor.md
index 95c0aadb9..a83eab038 100644
--- a/reference/random/geometric_distribution/op_constructor.md
+++ b/reference/random/geometric_distribution/op_constructor.md
@@ -39,7 +39,7 @@ int main()
 
   // (2) パラメータを個別に指定する
   {
-    // 確率0.5で成功する事象を、成功するまで施行する
+    // 確率0.5で成功する事象を、成功するまで試行する
     std::geometric_distribution&amp;lt;&amp;gt; dist(0.5);
 
     // 成功するまでに失敗した回数を取得
@@ -51,7 +51,7 @@ int main()
   {
     using dist_type = std::geometric_distribution&amp;lt;&amp;gt;;
 
-    // 確率0.5で成功する事象を、成功するまで施行する
+    // 確率0.5で成功する事象を、成功するまで試行する
     dist_type::param_type param(0.5);
     dist_type dist(param);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>negative_binomial_distribution -- Merge pull request #1147 from sutatoruta/fix/random-typo</title>
      <link href="https://cpprefjp.github.io/reference/random/negative_binomial_distribution.html"/>
      <id>68dea799756ae6bb8296ad0397b7b3f304b2d8ad:reference/random/negative_binomial_distribution.md</id>
      <updated>2023-05-10T11:52:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/negative_binomial_distribution.md b/reference/random/negative_binomial_distribution.md
index 3a101174a..0dd417c26 100644
--- a/reference/random/negative_binomial_distribution.md
+++ b/reference/random/negative_binomial_distribution.md
@@ -13,10 +13,10 @@ namespace std {
 
 ## 概要
 `negative_binomial_distribution`は、離散確率分布の一種である、負の二項分布を表すクラスである。  
-二項分布([`binomial_distribution`](binomial_distribution.md)が「確率pで成功する事象をt回施行し、成功回数を取得する」のに対し、負の二項分布は「確率pで成功する事象がk回成功するまでに失敗した回数を取得する」ということを行う。  
+二項分布([`binomial_distribution`](binomial_distribution.md)が「確率pで成功する事象をt回試行し、成功回数を取得する」のに対し、負の二項分布は「確率pで成功する事象がk回成功するまでに失敗した回数を取得する」ということを行う。  
 
 
-負の二項分布は、実装によって「k回成功するまでに施行した回数を取得する」ものと、「k回成功するまでに失敗した回数を取得する」もの、2つのバリエーションが存在する。`std::negative_binomial_distribution`クラスは後者である。
+負の二項分布は、実装によって「k回成功するまでに試行した回数を取得する」ものと、「k回成功するまでに失敗した回数を取得する」もの、2つのバリエーションが存在する。`std::negative_binomial_distribution`クラスは後者である。
 
 
 テンプレートパラメータは、以下を意味する：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>poisson_distribution -- Merge pull request #1147 from sutatoruta/fix/random-typo</title>
      <link href="https://cpprefjp.github.io/reference/random/poisson_distribution.html"/>
      <id>68dea799756ae6bb8296ad0397b7b3f304b2d8ad:reference/random/poisson_distribution.md</id>
      <updated>2023-05-10T11:52:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/poisson_distribution.md b/reference/random/poisson_distribution.md
index 28d78815a..505d9229a 100644
--- a/reference/random/poisson_distribution.md
+++ b/reference/random/poisson_distribution.md
@@ -16,7 +16,7 @@ namespace std {
 `poisson_distribution`は、離散確率分布の一種であるポワソン分布を表すクラスである。  
 以下の確率密度関数に基いて、ランダムな整数を生成する：
 
-$$ p(x \mid \mu) = \frac{e^{-\mu} \mu^i}{i!} $$
+$$ p(x \mid \mu) = \frac{e^{-\mu} \mu^x}{x!} $$
 
 
 この数式においてμ(mu)は、平均値(mean)である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random -- random.mdの説明文とコードの不整合を修正 画像は現在のコードに変更される以前と同じようだったので、コードの方をfloatにしました</title>
      <link href="https://cpprefjp.github.io/reference/random.html"/>
      <id>ae6ac7c9b792b8e3fb6fb2ba9bbeab01648740cb:reference/random.md</id>
      <updated>2023-05-09T12:54:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random.md b/reference/random.md
index e278b82a5..15257500b 100644
--- a/reference/random.md
+++ b/reference/random.md
@@ -160,12 +160,12 @@ int main()
   std::mt19937 engine(seed_gen());
 
   // 一様実数分布
-  // [-1.0, 1.0)の値の範囲で、等確率に実数を生成する
-  std::uniform_real_distribution&amp;lt;&amp;gt; dist1(-1.0, 1.0);
+  // [-1.0f, 1.0f)の値の範囲で、等確率に実数を生成する
+  std::uniform_real_distribution&amp;lt;float&amp;gt; dist1(-1.0f, 1.0f);
 
   // 正規分布
-  // 平均1.0、標準偏差0.5で分布させる
-  std::normal_distribution&amp;lt;&amp;gt; dist2(1.0, 0.5);
+  // 平均1.0f、標準偏差0.5fで分布させる
+  std::normal_distribution&amp;lt;float&amp;gt; dist2(1.0f, 0.5f);
 
   std::ofstream file(&amp;#34;random.tsv&amp;#34;);
   for (size_t i = 0; i &amp;lt; 1000*1000; ++i) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>sutatoruta</name>
        <email>72185056+sutatoruta@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random -- typo修正</title>
      <link href="https://cpprefjp.github.io/reference/random.html"/>
      <id>7580c17863c0ba80bef67d6a2b39119587905da7:reference/random.md</id>
      <updated>2023-05-09T12:47:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random.md b/reference/random.md
index 3589ec974..e278b82a5 100644
--- a/reference/random.md
+++ b/reference/random.md
@@ -47,7 +47,7 @@
 
 先に挙げた擬似乱数生成器に対して一般的なパラメータを定義し、使いやすいように用意された擬似乱数生成器の型。
 
-これらの型には、パフォーマンス、オブジェクトのサイズ、周期などのトレードオフがある。ユーザーの目的に合わせて擬似乱数正器の型を選択してほしい。
+これらの型には、パフォーマンス、オブジェクトのサイズ、周期などのトレードオフがある。ユーザーの目的に合わせて擬似乱数生成器の型を選択してほしい。
 
 オブジェクトのサイズをある程度無視・許容できる状況では、多くの分野と用途に、[`mt19937`](random/mt19937.md)を推奨できる。
 
@@ -84,7 +84,7 @@
 
 
 ## 分布生成器
-分布生成器は、乱数生成器のよって生成される値の範囲や分布を調整するクラスである。
+分布生成器は、乱数生成器によって生成される値の範囲や分布を調整するクラスである。
 
 分布生成器は、環境によって異なるアルゴリズムで実装される可能性がある。擬似乱数生成器は環境によらず同じシードを与えれば同じ乱数列が生成されるが、分布生成器を介して乱数生成する場合、環境によって異なる乱数列が生成される場合がある。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>sutatoruta</name>
        <email>72185056+sutatoruta@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>binomial_distribution -- typo修正</title>
      <link href="https://cpprefjp.github.io/reference/random/binomial_distribution.html"/>
      <id>7580c17863c0ba80bef67d6a2b39119587905da7:reference/random/binomial_distribution.md</id>
      <updated>2023-05-09T12:47:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/binomial_distribution.md b/reference/random/binomial_distribution.md
index 9bf147b96..716eafc2a 100644
--- a/reference/random/binomial_distribution.md
+++ b/reference/random/binomial_distribution.md
@@ -13,7 +13,7 @@ namespace std {
 
 ## 概要
 `binomial_distribution`は、離散確率分布の一種である二項分布を表すクラスである。  
-成功する確率pの事象をn回施行し、成功した回数を求める。  
+成功する確率pの事象をn回試行し、成功した回数を求める。  
 
 二項分布は、以下のような用途に使用できる：
 
@@ -82,7 +82,7 @@ int main()
   std::random_device seed_gen;
   std::default_random_engine engine(seed_gen());
 
-  // 成功確率0.5の事象を5回施行する
+  // 成功確率0.5の事象を5回試行する
   std::binomial_distribution&amp;lt;&amp;gt; dist(5, 0.5);
 
   // 成功した回数を取得(0以上5以下の値が返される)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>sutatoruta</name>
        <email>72185056+sutatoruta@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- typo修正</title>
      <link href="https://cpprefjp.github.io/reference/random/binomial_distribution/op_call.html"/>
      <id>7580c17863c0ba80bef67d6a2b39119587905da7:reference/random/binomial_distribution/op_call.md</id>
      <updated>2023-05-09T12:47:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/binomial_distribution/op_call.md b/reference/random/binomial_distribution/op_call.md
index ae6793ca3..96871cdc9 100644
--- a/reference/random/binomial_distribution/op_call.md
+++ b/reference/random/binomial_distribution/op_call.md
@@ -38,7 +38,7 @@ int main()
 
   // (1)
   {
-    // 確率0.5で成功する事象を3回施行する
+    // 確率0.5で成功する事象を3回試行する
     std::binomial_distribution&amp;lt;&amp;gt; dist(3, 0.5);
 
     // 成功回数を取得
@@ -51,7 +51,7 @@ int main()
     using dist_type = std::binomial_distribution&amp;lt;&amp;gt;;
     dist_type dist;
 
-    // 確率0.5で成功する事象を3回施行する
+    // 確率0.5で成功する事象を3回試行する
     dist_type::param_type param(3, 0.5);
 
     // 成功回数を取得
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>sutatoruta</name>
        <email>72185056+sutatoruta@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- typo修正</title>
      <link href="https://cpprefjp.github.io/reference/random/binomial_distribution/op_constructor.html"/>
      <id>7580c17863c0ba80bef67d6a2b39119587905da7:reference/random/binomial_distribution/op_constructor.md</id>
      <updated>2023-05-09T12:47:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/binomial_distribution/op_constructor.md b/reference/random/binomial_distribution/op_constructor.md
index 3d02a43d2..c72284bb0 100644
--- a/reference/random/binomial_distribution/op_constructor.md
+++ b/reference/random/binomial_distribution/op_constructor.md
@@ -39,7 +39,7 @@ int main()
 
   // パラメータを個別に指定する
   {
-    // 確率0.5で成功する事象を、3回施行する
+    // 確率0.5で成功する事象を、3回試行する
     std::binomial_distribution&amp;lt;&amp;gt; dist(3, 0.5);
 
     // 成功回数を取得
@@ -51,7 +51,7 @@ int main()
   {
     using dist_type = std::binomial_distribution&amp;lt;&amp;gt;;
 
-    // 確率0.5で成功する事象を、3回施行する
+    // 確率0.5で成功する事象を、3回試行する
     dist_type::param_type param(3, 0.5);
     dist_type dist(param);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>sutatoruta</name>
        <email>72185056+sutatoruta@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>geometric_distribution -- typo修正</title>
      <link href="https://cpprefjp.github.io/reference/random/geometric_distribution.html"/>
      <id>7580c17863c0ba80bef67d6a2b39119587905da7:reference/random/geometric_distribution.md</id>
      <updated>2023-05-09T12:47:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/geometric_distribution.md b/reference/random/geometric_distribution.md
index 6f9f7b4f2..7350f757a 100644
--- a/reference/random/geometric_distribution.md
+++ b/reference/random/geometric_distribution.md
@@ -13,9 +13,9 @@ namespace std {
 
 ## 概要
 `geometric_distribution`は、離散確率分布の一種である幾何分布を表すクラスである。  
-このクラスは、ベルヌーイ分布([`bernoulli_distribution`](bernoulli_distribution.md))を施行し、初めて成功するまでに何回失敗したかを取得する。これは、[`negative_binomial_distribution`](negative_binomial_distribution.md)`&amp;lt;IntType&amp;gt;(1, p)`と同じである。
+このクラスは、ベルヌーイ分布([`bernoulli_distribution`](bernoulli_distribution.md))を試行し、初めて成功するまでに何回失敗したかを取得する。これは、[`negative_binomial_distribution`](negative_binomial_distribution.md)`&amp;lt;IntType&amp;gt;(1, p)`と同じである。
 
-幾何分布は、無記憶性(memoryless)という性質を持つ。これにより、施行の結果が次の結果(確率)に影響せず、それぞれが独立した結果となる。
+幾何分布は、無記憶性(memoryless)という性質を持つ。これにより、試行の結果が次の結果(確率)に影響せず、それぞれが独立した結果となる。
 
 
 幾何分布は、以下のような用途で使用できる：
@@ -84,7 +84,7 @@ int main()
   std::random_device seed_gen;
   std::default_random_engine engine(seed_gen());
 
-  // 成功確率0.5の事象を、成功するまで施行する
+  // 成功確率0.5の事象を、成功するまで試行する
   std::geometric_distribution&amp;lt;&amp;gt; dist(0.5);
 
   // 成功するまでに、何回失敗したかを取得
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>sutatoruta</name>
        <email>72185056+sutatoruta@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- typo修正</title>
      <link href="https://cpprefjp.github.io/reference/random/geometric_distribution/op_call.html"/>
      <id>7580c17863c0ba80bef67d6a2b39119587905da7:reference/random/geometric_distribution/op_call.md</id>
      <updated>2023-05-09T12:47:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/geometric_distribution/op_call.md b/reference/random/geometric_distribution/op_call.md
index 2bce05d9d..14229bd5d 100644
--- a/reference/random/geometric_distribution/op_call.md
+++ b/reference/random/geometric_distribution/op_call.md
@@ -38,7 +38,7 @@ int main()
 
   // (1)
   {
-    // 確率0.5で成功する事象を、成功するまで施行する
+    // 確率0.5で成功する事象を、成功するまで試行する
     std::geometric_distribution&amp;lt;&amp;gt; dist(0.5);
 
     // 成功するまでに失敗した回数を取得
@@ -51,7 +51,7 @@ int main()
     using dist_type = std::geometric_distribution&amp;lt;&amp;gt;;
     dist_type dist;
 
-    // 確率0.5で成功する事象を、成功するまで施行する
+    // 確率0.5で成功する事象を、成功するまで試行する
     dist_type::param_type param(0.5);
 
     // 成功するまでに失敗した回数を取得
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>sutatoruta</name>
        <email>72185056+sutatoruta@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- typo修正</title>
      <link href="https://cpprefjp.github.io/reference/random/geometric_distribution/op_constructor.html"/>
      <id>7580c17863c0ba80bef67d6a2b39119587905da7:reference/random/geometric_distribution/op_constructor.md</id>
      <updated>2023-05-09T12:47:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/geometric_distribution/op_constructor.md b/reference/random/geometric_distribution/op_constructor.md
index 95c0aadb9..a83eab038 100644
--- a/reference/random/geometric_distribution/op_constructor.md
+++ b/reference/random/geometric_distribution/op_constructor.md
@@ -39,7 +39,7 @@ int main()
 
   // (2) パラメータを個別に指定する
   {
-    // 確率0.5で成功する事象を、成功するまで施行する
+    // 確率0.5で成功する事象を、成功するまで試行する
     std::geometric_distribution&amp;lt;&amp;gt; dist(0.5);
 
     // 成功するまでに失敗した回数を取得
@@ -51,7 +51,7 @@ int main()
   {
     using dist_type = std::geometric_distribution&amp;lt;&amp;gt;;
 
-    // 確率0.5で成功する事象を、成功するまで施行する
+    // 確率0.5で成功する事象を、成功するまで試行する
     dist_type::param_type param(0.5);
     dist_type dist(param);
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>sutatoruta</name>
        <email>72185056+sutatoruta@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>negative_binomial_distribution -- typo修正</title>
      <link href="https://cpprefjp.github.io/reference/random/negative_binomial_distribution.html"/>
      <id>7580c17863c0ba80bef67d6a2b39119587905da7:reference/random/negative_binomial_distribution.md</id>
      <updated>2023-05-09T12:47:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/negative_binomial_distribution.md b/reference/random/negative_binomial_distribution.md
index 3a101174a..0dd417c26 100644
--- a/reference/random/negative_binomial_distribution.md
+++ b/reference/random/negative_binomial_distribution.md
@@ -13,10 +13,10 @@ namespace std {
 
 ## 概要
 `negative_binomial_distribution`は、離散確率分布の一種である、負の二項分布を表すクラスである。  
-二項分布([`binomial_distribution`](binomial_distribution.md)が「確率pで成功する事象をt回施行し、成功回数を取得する」のに対し、負の二項分布は「確率pで成功する事象がk回成功するまでに失敗した回数を取得する」ということを行う。  
+二項分布([`binomial_distribution`](binomial_distribution.md)が「確率pで成功する事象をt回試行し、成功回数を取得する」のに対し、負の二項分布は「確率pで成功する事象がk回成功するまでに失敗した回数を取得する」ということを行う。  
 
 
-負の二項分布は、実装によって「k回成功するまでに施行した回数を取得する」ものと、「k回成功するまでに失敗した回数を取得する」もの、2つのバリエーションが存在する。`std::negative_binomial_distribution`クラスは後者である。
+負の二項分布は、実装によって「k回成功するまでに試行した回数を取得する」ものと、「k回成功するまでに失敗した回数を取得する」もの、2つのバリエーションが存在する。`std::negative_binomial_distribution`クラスは後者である。
 
 
 テンプレートパラメータは、以下を意味する：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>sutatoruta</name>
        <email>72185056+sutatoruta@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>poisson_distribution -- typo修正</title>
      <link href="https://cpprefjp.github.io/reference/random/poisson_distribution.html"/>
      <id>7580c17863c0ba80bef67d6a2b39119587905da7:reference/random/poisson_distribution.md</id>
      <updated>2023-05-09T12:47:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/poisson_distribution.md b/reference/random/poisson_distribution.md
index 28d78815a..505d9229a 100644
--- a/reference/random/poisson_distribution.md
+++ b/reference/random/poisson_distribution.md
@@ -16,7 +16,7 @@ namespace std {
 `poisson_distribution`は、離散確率分布の一種であるポワソン分布を表すクラスである。  
 以下の確率密度関数に基いて、ランダムな整数を生成する：
 
-$$ p(x \mid \mu) = \frac{e^{-\mu} \mu^i}{i!} $$
+$$ p(x \mid \mu) = \frac{e^{-\mu} \mu^x}{x!} $$
 
 
 この数式においてμ(mu)は、平均値(mean)である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>sutatoruta</name>
        <email>72185056+sutatoruta@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-04T04:17:38.599495</updated>
  <id>3fc2a00d-6e3f-42e3-8717-c40b739b29e8</id>

  
    <entry>
      <title>zip_transform_view -- zip_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view.html"/>
      <id>826d291c1187e36c21aba6dabef4931e97beabde:reference/ranges/zip_transform_view.md</id>
      <updated>2025-06-04T13:13:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view.md b/reference/ranges/zip_transform_view.md
index 314dee467..cad05caf0 100644
--- a/reference/ranges/zip_transform_view.md
+++ b/reference/ranges/zip_transform_view.md
@@ -51,28 +51,28 @@ zipするRangeのサイズが異なっている場合、`zip_transform_view`の
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](zip_transform_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
-| [`begin`](zip_transform_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
-| [`end`](zip_transform_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](zip_transform_view/size.md.nolink)                    | 要素数を取得する                 | C++23          |
+| [`(constructor)`](zip_transform_view/op_constructor.md) | コンストラクタ                   | C++23          |
+| [`begin`](zip_transform_view/begin.md)                  | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](zip_transform_view/end.md)                      | 番兵を取得する                   | C++23          |
+| [`size`](zip_transform_view/size.md)                    | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
 | 名前                                         | 説明                              | 対応バージョン |
 |----------------------------------------------|-----------------------------------|----------------|
-| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
-| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++23          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++23          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++23          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++23          |
 | [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
 | [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++23          |
 
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](zip_transform_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](zip_transform_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23          |
 
 ## 例
 ```cpp example
@@ -85,6 +85,7 @@ int main() {
   std::vector p = {1, 10, 100, 1000};
 
   std::println(&amp;#34;{}&amp;#34;, std::views::zip_transform([](auto x, auto y){ return x * y; }, d, p));
+  std::println(&amp;#34;{}&amp;#34;, std::views::zip_transform([](auto x, auto y){ return std::pair{x, y}; }, d, p));
 }
 ```
 * std::views::zip_transform[color ff0000]
@@ -92,6 +93,7 @@ int main() {
 ### 出力
 ```
 [1, 20, 300]
+[(1, 1), (2, 10), (3, 100)]
 ```
 
 ## バージョン
@@ -99,10 +101,9 @@ int main() {
 - C++23
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6 [mark verified]
 
 ## 関連項目
 - [`transform_view`](transform_view.md) zipする範囲が1つの場合
@@ -110,3 +111,4 @@ int main() {
 
 ## 参照
 - [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
+- [P2321R2 zip](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2321r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- zip_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view/begin.html"/>
      <id>826d291c1187e36c21aba6dabef4931e97beabde:reference/ranges/zip_transform_view/begin.md</id>
      <updated>2025-06-04T13:13:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view/begin.md b/reference/ranges/zip_transform_view/begin.md
new file mode 100644
index 000000000..9b6a92336
--- /dev/null
+++ b/reference/ranges/zip_transform_view/begin.md
@@ -0,0 +1,77 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* zip_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto begin();                        // (1) C++23
+
+constexpr auto begin() const
+  requires range&amp;lt;const InnerView&amp;gt; &amp;amp;&amp;amp;
+           regular_invocable&amp;lt;
+             const F&amp;amp;,
+             range_reference_t&amp;lt;const Views&amp;gt;...
+           &amp;gt;;                                  // (2) C++23
+```
+* range[link ../range.md]
+* regular_invocable[link /reference/concepts/invocable.md]
+* range_reference_t[link ../range_reference_t.md]
+
+## 概要
+
+先頭を指すイテレータを取得する。
+
+## 効果
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(*this, zip_.begin());`
+- (2) : `return iterator&amp;lt;true&amp;gt;(*this, zip_.begin());`
+
+ここで、`iterator`は`zip_transform_view`の内部で定義される説明専用のイテレータクラスであり、`InnerView`は説明専用の[`zip_view`](../zip_view.md)`&amp;lt;Views...&amp;gt;`である。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  std::list&amp;lt;char&amp;gt; l = {&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;};
+  
+  auto f = [](int n, char c) { return std::pair{n * 10, c}; };
+  std::ranges::zip_transform_view ztv(f, v, l);
+  
+  auto it = ztv.begin();
+  
+  // 最初の要素（変換結果）
+  auto [n, c] = *it;
+  std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
+  
+  // 次の要素へ
+  ++it;
+  auto [n2, c2] = *it;
+  std::cout &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c2 &amp;lt;&amp;lt; std::endl;
+}
+```
+* begin[color ff0000]
+
+### 出力
+```
+10, a
+20, b
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6 [mark verified]
+
+## 参照
+- [N4950 26.7.26 Zip transform view](https://timsong-cpp.github.io/cppwp/n4950/range.zip.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- zip_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view/end.html"/>
      <id>826d291c1187e36c21aba6dabef4931e97beabde:reference/ranges/zip_transform_view/end.md</id>
      <updated>2025-06-04T13:13:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view/end.md b/reference/ranges/zip_transform_view/end.md
new file mode 100644
index 000000000..876c0c559
--- /dev/null
+++ b/reference/ranges/zip_transform_view/end.md
@@ -0,0 +1,86 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* zip_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto end();                          // (1) C++23
+
+constexpr auto end() const
+  requires range&amp;lt;const InnerView&amp;gt; &amp;amp;&amp;amp;
+           regular_invocable&amp;lt;
+             const F&amp;amp;,
+             range_reference_t&amp;lt;const Views&amp;gt;...
+           &amp;gt;;                                  // (2) C++23
+```
+* range[link ../range.md]
+* regular_invocable[link /reference/concepts/invocable.md]
+* range_reference_t[link ../range_reference_t.md]
+
+## 概要
+
+番兵を取得する。
+
+## 効果
+
+説明専用コンセプト`zip-is-common`を用いて、
+
+`zip-is-common&amp;lt;Views...&amp;gt;`が`false`の場合：
+
+- (1) : `return sentinel&amp;lt;false&amp;gt;(zip_.end());`
+- (2) : `return sentinel&amp;lt;true&amp;gt;(zip_.end());`
+
+それ以外の場合：
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(*this, zip_.end());`
+- (2) : `return iterator&amp;lt;true&amp;gt;(*this, zip_.end());`
+
+ここで、`iterator`と`sentinel`は`zip_transform_view`の内部で定義される説明専用のクラスであり、`InnerView`は説明専用の[`zip_view`](../zip_view.md)`&amp;lt;Views...&amp;gt;`である。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  std::list&amp;lt;char&amp;gt; l = {&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;};
+  
+  auto f = [](int n, char c) { return std::pair{n * 10, c}; };
+  std::ranges::zip_transform_view ztv(f, v, l);
+  
+  auto begin = ztv.begin();
+  auto end = ztv.end();
+  
+  // 全要素を出力（短い方のRangeのサイズで終わる）
+  for (auto it = begin; it != end; ++it) {
+    auto [n, c] = *it;
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+```
+10, a
+20, b
+30, c
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6 [mark verified]
+
+## 参照
+- [N4950 26.7.26 Zip transform view](https://timsong-cpp.github.io/cppwp/n4950/range.zip.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- zip_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view/op_constructor.html"/>
      <id>826d291c1187e36c21aba6dabef4931e97beabde:reference/ranges/zip_transform_view/op_constructor.md</id>
      <updated>2025-06-04T13:13:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view/op_constructor.md b/reference/ranges/zip_transform_view/op_constructor.md
new file mode 100644
index 000000000..14590deed
--- /dev/null
+++ b/reference/ranges/zip_transform_view/op_constructor.md
@@ -0,0 +1,71 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* zip_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+zip_transform_view() = default;            // (1) C++23
+
+constexpr explicit
+zip_transform_view(F fun, Views... views); // (2) C++23
+```
+
+## 概要
+
+- (1) : デフォルトコンストラクタ
+- (2) : 変換関数と各Rangeを受け取るコンストラクタ
+
+## 効果
+
+- (1) : `fun_`と`zip_`をデフォルト構築する
+- (2) : `fun_`を`std::move(fun)`で初期化し、`zip_`を`std::move(views)...`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  // (1) デフォルトコンストラクタ
+  std::ranges::zip_transform_view&amp;lt;
+    decltype([](int, char) { return 0; }),
+    std::ranges::empty_view&amp;lt;int&amp;gt;,
+    std::ranges::empty_view&amp;lt;char&amp;gt;
+  &amp;gt; ztv1;
+  
+  // (2) 変換関数と各Rangeを受け取るコンストラクタ
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  std::list&amp;lt;char&amp;gt; l = {&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;};
+  
+  auto f = [](int n, char c) { return std::pair{n * 10, c}; };
+  std::ranges::zip_transform_view ztv2(f, v, l);
+  
+  for (auto [n, c] : ztv2) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::zip_transform_view[color ff0000]
+
+### 出力
+```
+10, a
+20, b
+30, c
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6 [mark verified]
+
+## 参照
+- [N4950 26.7.26 Zip transform view](https://timsong-cpp.github.io/cppwp/n4950/range.zip.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- zip_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view/op_deduction_guide.html"/>
      <id>826d291c1187e36c21aba6dabef4931e97beabde:reference/ranges/zip_transform_view/op_deduction_guide.md</id>
      <updated>2025-06-04T13:13:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view/op_deduction_guide.md b/reference/ranges/zip_transform_view/op_deduction_guide.md
new file mode 100644
index 000000000..37c50f56d
--- /dev/null
+++ b/reference/ranges/zip_transform_view/op_deduction_guide.md
@@ -0,0 +1,59 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* zip_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class F, class... Rs&amp;gt;
+  zip_transform_view(F, Rs&amp;amp;&amp;amp;...) -&amp;gt;
+    zip_transform_view&amp;lt;F, views::all_t&amp;lt;Rs&amp;gt;...&amp;gt;;
+}
+```
+
+## 概要
+`zip_transform_view`クラステンプレートの型推論補助。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  std::list&amp;lt;char&amp;gt; l = {&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;};
+  
+  auto f = [](int n, char c) { return std::pair{n * 10, c}; };
+  
+  // zip_transform_viewの型を明示的に指定する必要がない
+  std::ranges::zip_transform_view ztv{f, v, l};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(ztv),
+    std::ranges::zip_transform_view&amp;lt;
+      decltype(f),
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::ref_view&amp;lt;std::list&amp;lt;char&amp;gt;&amp;gt;
+    &amp;gt;
+  &amp;gt;);
+}
+```
+* std::ranges::zip_transform_view[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- zip_transform_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view/size.html"/>
      <id>826d291c1187e36c21aba6dabef4931e97beabde:reference/ranges/zip_transform_view/size.md</id>
      <updated>2025-06-04T13:13:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view/size.md b/reference/ranges/zip_transform_view/size.md
new file mode 100644
index 000000000..e29dbf625
--- /dev/null
+++ b/reference/ranges/zip_transform_view/size.md
@@ -0,0 +1,72 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* zip_transform_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;InnerView&amp;gt;;       // (1) C++23
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const InnerView&amp;gt;; // (2) C++23
+```
+* sized_range[link ../sized_range.md]
+
+## 概要
+
+要素数を取得する。
+
+## 効果
+
+- (1) : `return zip_.size();`
+- (2) : `return zip_.size();`
+
+ここで、`InnerView`は説明専用の[`zip_view`](../zip_view.md)`&amp;lt;Views...&amp;gt;`である。
+
+## 備考
+
+`zip_transform_view`のサイズは、内部で保持する`zip_view`のサイズと同じで、zipする各Rangeのサイズの最小値となる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  std::array&amp;lt;char, 5&amp;gt; a = {&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;};
+  
+  auto f = [](int n, char c) { return std::pair{n * 10, c}; };
+  std::ranges::zip_transform_view ztv(f, v, a);
+  
+  // サイズは小さい方のサイズ（3）になる
+  std::cout &amp;lt;&amp;lt; &amp;#34;size: &amp;#34; &amp;lt;&amp;lt; ztv.size() &amp;lt;&amp;lt; std::endl;
+  
+  // const版も動作する
+  const auto&amp;amp; cztv = ztv;
+  std::cout &amp;lt;&amp;lt; &amp;#34;const size: &amp;#34; &amp;lt;&amp;lt; cztv.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+size: 3
+const size: 3
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 19 [mark verified]
+- [GCC](/implementation.md#gcc): 13 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6 [mark verified]
+
+## 参照
+- [N4950 26.7.26 Zip transform view](https://timsong-cpp.github.io/cppwp/n4950/range.zip.transform)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride_view -- stride_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view.html"/>
      <id>d79c2be843088526c7760943dce41a521fc4980a:reference/ranges/stride_view.md</id>
      <updated>2025-06-04T13:03:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view.md b/reference/ranges/stride_view.md
index 7074702f2..d14de81ec 100644
--- a/reference/ranges/stride_view.md
+++ b/reference/ranges/stride_view.md
@@ -39,30 +39,30 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](stride_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
-| [`base`](stride_view/base.md.nolink)                     | `V`の参照を取得する              | C++23          |
-| [`stride`](stride_view/stride.md.nolink)                 | 1回で移動する要素数を取得する    | C++23          |
-| [`begin`](stride_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
-| [`end`](stride_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](stride_view/size.md.nolink)                       | 要素数を取得する                 | C++23          |
+| [`(constructor)`](stride_view/op_constructor.md) | コンストラクタ                   | C++23          |
+| [`base`](stride_view/base.md)                    | `V`の参照を取得する              | C++23          |
+| [`stride`](stride_view/stride.md)                | 1回で移動する要素数を取得する    | C++23          |
+| [`begin`](stride_view/begin.md)                  | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](stride_view/end.md)                      | 番兵を取得する                   | C++23          |
+| [`size`](stride_view/size.md)                    | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
 | 名前                                         | 説明                              | 対応バージョン |
 |----------------------------------------------|-----------------------------------|----------------|
-| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
-| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++23          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++23          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++23          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++23          |
 | [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
 | [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++23          |
 
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](stride_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](stride_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23          |
 
 ## 例
 ```cpp example
@@ -75,7 +75,7 @@ int main() {
 
   std::println(&amp;#34;{}&amp;#34;, v | std::views::stride(3));
 
-  for (auto&amp;amp;&amp;amp; i : v | std::views::stride(3)) {
+  for (auto&amp;amp; i : v | std::views::stride(3)) {
     i *= 10; // 要素を書き換えても良い
   }
   std::println(&amp;#34;{}&amp;#34;, v);
@@ -96,8 +96,7 @@ int main() {
 ### 処理系
 - [Clang](/implementation.md#clang): 16.0 [mark verified]
 - [GCC](/implementation.md#gcc): 13.2 [mark verified]
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 4 [mark verified]
 
 ## 参照
 - [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- stride_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view/base.html"/>
      <id>d79c2be843088526c7760943dce41a521fc4980a:reference/ranges/stride_view/base.md</id>
      <updated>2025-06-04T13:03:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view/base.md b/reference/ranges/stride_view/base.md
new file mode 100644
index 000000000..39944edfe
--- /dev/null
+++ b/reference/ranges/stride_view/base.md
@@ -0,0 +1,60 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* stride_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp; requires copy_constructible&amp;lt;V&amp;gt;; // (1) C++23
+constexpr V base() &amp;amp;&amp;amp;;                                     // (2) C++23
+```
+
+## 概要
+
+メンバ変数として保持している、元となるRangeを取得する。
+
+## 効果
+
+- (1) : `return base_;`
+- (2) : `return std::move(base_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {0, 1, 2, 3, 4, 5, 6, 7, 8};
+  
+  std::ranges::stride_view sv{v, 3};
+  
+  // (1) const左辺値参照版
+  const auto&amp;amp; base1 = sv.base();
+  std::cout &amp;lt;&amp;lt; &amp;#34;base size: &amp;#34; &amp;lt;&amp;lt; base1.size() &amp;lt;&amp;lt; std::endl;
+  
+  // (2) 右辺値参照版 
+  auto base2 = std::move(sv).base();
+  std::cout &amp;lt;&amp;lt; &amp;#34;moved base size: &amp;#34; &amp;lt;&amp;lt; base2.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* base[color ff0000]
+
+### 出力
+```
+base size: 9
+moved base size: 9
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 4 [mark verified]
+
+## 参照
+- [N4950 26.7.32 Stride view](https://timsong-cpp.github.io/cppwp/n4950/range.stride)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- stride_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view/begin.html"/>
      <id>d79c2be843088526c7760943dce41a521fc4980a:reference/ranges/stride_view/begin.md</id>
      <updated>2025-06-04T13:03:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view/begin.md b/reference/ranges/stride_view/begin.md
new file mode 100644
index 000000000..e3b948c4a
--- /dev/null
+++ b/reference/ranges/stride_view/begin.md
@@ -0,0 +1,61 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* stride_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;); // (1) C++23
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt;; // (2) C++23
+```
+
+## 概要
+
+先頭要素を指すイテレータを取得する。
+
+## 効果
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(this, ranges::begin(base_));`
+- (2) : `return iterator&amp;lt;true&amp;gt;(this, ranges::begin(base_));`
+
+ここで、`iterator`は説明専用のイテレータクラスである。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {0, 1, 2, 3, 4, 5, 6, 7, 8};
+  
+  std::ranges::stride_view sv{v, 3};
+  
+  auto it = sv.begin();
+  
+  // 最初の要素を出力
+  std::println(&amp;#34;first element: {}&amp;#34;, *it);
+}
+```
+* begin[color ff0000]
+
+### 出力
+```
+first element: 0
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 4 [mark verified]
+
+## 参照
+- [N4950 26.7.32 Stride view](https://timsong-cpp.github.io/cppwp/n4950/range.stride)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- stride_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view/end.html"/>
      <id>d79c2be843088526c7760943dce41a521fc4980a:reference/ranges/stride_view/end.md</id>
      <updated>2025-06-04T13:03:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view/end.md b/reference/ranges/stride_view/end.md
new file mode 100644
index 000000000..623737e03
--- /dev/null
+++ b/reference/ranges/stride_view/end.md
@@ -0,0 +1,69 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* stride_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;); // (1) C++23
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt;;    // (2) C++23
+```
+
+## 概要
+
+番兵またはイテレータを取得する。
+
+## 効果
+
+`common_range&amp;lt;V&amp;gt;`の場合：
+- (1) : `return iterator&amp;lt;false&amp;gt;(this, ranges::end(base_));`
+- (2) : `return iterator&amp;lt;true&amp;gt;(this, ranges::end(base_));`
+
+それ以外の場合：
+- (1) : `return default_sentinel;`
+- (2) : `return default_sentinel;`
+
+ここで、`iterator`は説明専用のイテレータクラスである。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {0, 1, 2, 3, 4, 5, 6, 7, 8};
+  
+  std::ranges::stride_view sv{v, 3};
+  
+  // イテレータ範囲で全要素を出力
+  for (auto it = sv.begin(); it != sv.end(); ++it) {
+    std::println(&amp;#34;{}&amp;#34;, *it);
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+```
+0
+3
+6
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 4 [mark verified]
+
+## 参照
+- [N4950 26.7.32 Stride view](https://timsong-cpp.github.io/cppwp/n4950/range.stride)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- stride_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view/op_constructor.html"/>
      <id>d79c2be843088526c7760943dce41a521fc4980a:reference/ranges/stride_view/op_constructor.md</id>
      <updated>2025-06-04T13:03:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view/op_constructor.md b/reference/ranges/stride_view/op_constructor.md
new file mode 100644
index 000000000..1fbc17b89
--- /dev/null
+++ b/reference/ranges/stride_view/op_constructor.md
@@ -0,0 +1,72 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* stride_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+stride_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default;     // (1) C++23
+
+constexpr explicit
+stride_view(V base, range_difference_t&amp;lt;V&amp;gt; stride); // (2) C++23
+```
+
+## 概要
+
+`stride_view`オブジェクトを構築する。
+
+- (1) : デフォルトコンストラクタ。元となるRangeを値初期化する。
+- (2) : 元となるRangeと歩幅を受け取るコンストラクタ。
+
+## 事前条件
+
+- (2) : `stride &amp;gt; 0`
+
+
+## 効果
+
+- (1) : `base_`と`stride_`を値初期化する。
+- (2) : `base_(std::move(base))`、`stride_(stride)`で初期化する。
+
+ここで、`base_`は元となるRangeを保持するメンバ変数、`stride_`は歩幅を保持するメンバ変数である。
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {0, 1, 2, 3, 4, 5, 6, 7, 8};
+  
+  // デフォルトコンストラクタ
+  std::ranges::stride_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt; sv1{};
+  
+  // 元となるRangeと歩幅を指定
+  std::ranges::stride_view sv2{v, 3};
+  
+  std::println(&amp;#34;{}&amp;#34;, sv2);
+}
+```
+* std::ranges::stride_view[color ff0000]
+* std::views::all_t[link ../all.md]
+
+### 出力
+```
+[0, 3, 6]
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 4 [mark verified]
+
+## 参照
+- [N4950 26.7.32 Stride view](https://timsong-cpp.github.io/cppwp/n4950/range.stride)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- stride_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view/op_deduction_guide.html"/>
      <id>d79c2be843088526c7760943dce41a521fc4980a:reference/ranges/stride_view/op_deduction_guide.md</id>
      <updated>2025-06-04T13:03:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view/op_deduction_guide.md b/reference/ranges/stride_view/op_deduction_guide.md
new file mode 100644
index 000000000..8e073b440
--- /dev/null
+++ b/reference/ranges/stride_view/op_deduction_guide.md
@@ -0,0 +1,51 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* stride_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  stride_view(R&amp;amp;&amp;amp;, range_difference_t&amp;lt;R&amp;gt;) -&amp;gt; stride_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+
+## 概要
+`stride_view`クラステンプレートの型推論補助。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {0, 1, 2, 3, 4, 5, 6, 7, 8};
+  
+  // stride_viewの型を明示的に指定する必要がない
+  std::ranges::stride_view sv{v, 3};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(sv),
+    std::ranges::stride_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+* std::ranges::stride_view[color ff0000]
+* std::ranges::ref_view[link ../ref_view.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 4 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- stride_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view/size.html"/>
      <id>d79c2be843088526c7760943dce41a521fc4980a:reference/ranges/stride_view/size.md</id>
      <updated>2025-06-04T13:03:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view/size.md b/reference/ranges/stride_view/size.md
new file mode 100644
index 000000000..0533d0d46
--- /dev/null
+++ b/reference/ranges/stride_view/size.md
@@ -0,0 +1,72 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* stride_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++23
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++23
+```
+
+## 概要
+
+要素数を取得する。
+
+## 効果
+
+以下と等価：
+
+```cpp
+return to-unsigned-like(div-ceil(ranges::distance(base_), stride_));
+```
+* to-unsigned-like[italic]
+* div-ceil[italic]
+
+ここで、`to-unsigned-like`は説明専用の関数であり、整数型を対応する符号なし整数型に変換する。`div-ceil(x, y)`は`x`を`y`で割った切り上げを計算する説明専用の関数である。
+
+## 備考
+
+元のRangeの要素数を歩幅で割った切り上げが要素数となる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {0, 1, 2, 3, 4, 5, 6, 7, 8}; // 9要素
+  
+  // 歩幅3のstride_view
+  std::ranges::stride_view sv1{v, 3};
+  std::cout &amp;lt;&amp;lt; &amp;#34;stride_view(9 elements, stride 3): &amp;#34; &amp;lt;&amp;lt; sv1.size() &amp;lt;&amp;lt; &amp;#34; elements&amp;#34; &amp;lt;&amp;lt; std::endl;
+  
+  // 歩幅4のstride_view
+  std::ranges::stride_view sv2{v, 4};
+  std::cout &amp;lt;&amp;lt; &amp;#34;stride_view(9 elements, stride 4): &amp;#34; &amp;lt;&amp;lt; sv2.size() &amp;lt;&amp;lt; &amp;#34; elements&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+stride_view(9 elements, stride 3): 3 elements
+stride_view(9 elements, stride 4): 3 elements
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 4 [mark verified]
+
+## 参照
+- [N4950 26.7.32 Stride view](https://timsong-cpp.github.io/cppwp/n4950/range.stride)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- stride_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view/stride.html"/>
      <id>d79c2be843088526c7760943dce41a521fc4980a:reference/ranges/stride_view/stride.md</id>
      <updated>2025-06-04T13:03:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view/stride.md b/reference/ranges/stride_view/stride.md
new file mode 100644
index 000000000..ca4b776fb
--- /dev/null
+++ b/reference/ranges/stride_view/stride.md
@@ -0,0 +1,52 @@
+# stride
+* ranges[meta header]
+* std::ranges[meta namespace]
+* stride_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr range_difference_t&amp;lt;V&amp;gt; stride() const noexcept; // (1) C++23
+```
+
+## 概要
+
+メンバ変数として保持している、歩幅を取得する。
+
+## 効果
+
+- (1) : `return stride_;`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {0, 1, 2, 3, 4, 5, 6, 7, 8};
+  
+  std::ranges::stride_view sv{v, 3};
+  
+  // 歩幅を取得
+  std::cout &amp;lt;&amp;lt; &amp;#34;stride: &amp;#34; &amp;lt;&amp;lt; sv.stride() &amp;lt;&amp;lt; std::endl;
+}
+```
+* stride[color ff0000]
+
+### 出力
+```
+stride: 3
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0 [mark verified]
+- [GCC](/implementation.md#gcc): 13.2 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 4 [mark verified]
+
+## 参照
+- [N4950 26.7.32 Stride view](https://timsong-cpp.github.io/cppwp/n4950/range.stride)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>slide_view -- slide_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/slide_view.html"/>
      <id>f69a490e0c673e958cf1c76dc6eae8cf95ccefcc:reference/ranges/slide_view.md</id>
      <updated>2025-06-04T12:57:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/slide_view.md b/reference/ranges/slide_view.md
index 7bcf4998b..7f4871734 100644
--- a/reference/ranges/slide_view.md
+++ b/reference/ranges/slide_view.md
@@ -53,31 +53,31 @@ namespace std::ranges {
 
 ## メンバ関数
 
-| 名前                                                | 説明                             | 対応バージョン |
-|-----------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](slide_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
-| [`base`](slide_view/base.md.nolink)                     | `V`の参照を取得する              | C++23          |
-| [`begin`](slide_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
-| [`end`](slide_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](slide_view/size.md.nolink)                     | 要素数を取得する                 | C++23          |
+| 名前                                             | 説明                             | 対応バージョン |
+|--------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](slide_view/op_constructor.md)  | コンストラクタ                   | C++23          |
+| [`base`](slide_view/base.md)                     | `V`の参照を取得する              | C++23          |
+| [`begin`](slide_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++23          |
+| [`end`](slide_view/end.md)                       | 番兵を取得する                   | C++23          |
+| [`size`](slide_view/size.md)                     | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
 | 名前                                         | 説明                              | 対応バージョン |
 |----------------------------------------------|-----------------------------------|----------------|
-| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
-| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++23          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++23          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++23          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++23          |
 | [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
 | [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++23          |
 
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](slide_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](slide_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23          |
 
 ## 例
 ```cpp example
@@ -87,10 +87,10 @@ namespace std::ranges {
 
 int main() {
   std::vector v = {1, 2, 3, 4, 5, 6};
-  std::println(&amp;#34;{}&amp;#34;, v | std::views::slide&amp;lt;1&amp;gt;);
-  std::println(&amp;#34;{}&amp;#34;, v | std::views::slide&amp;lt;3&amp;gt;);
-  std::println(&amp;#34;{}&amp;#34;, v | std::views::slide&amp;lt;6&amp;gt;);
-  std::println(&amp;#34;{}&amp;#34;, v | std::views::slide&amp;lt;7&amp;gt;);
+  std::println(&amp;#34;{}&amp;#34;, v | std::views::slide(1));
+  std::println(&amp;#34;{}&amp;#34;, v | std::views::slide(3));
+  std::println(&amp;#34;{}&amp;#34;, v | std::views::slide(6));
+  std::println(&amp;#34;{}&amp;#34;, v | std::views::slide(7));
 }
 ```
 * std::views::slide[color ff0000]
@@ -108,10 +108,9 @@ int main() {
 - C++23
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): 14.0 [mark verified]
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 13.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
 
 ## 関連項目
 - [`adjacent_view`](adjacent_view.md): `slide_view` と同じように要素を取得するが、個数をコンパイル時に指定する。内側はRangeではなく[`tuple`](/reference/tuple/tuple.md)となる
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- slide_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/slide_view/base.html"/>
      <id>f69a490e0c673e958cf1c76dc6eae8cf95ccefcc:reference/ranges/slide_view/base.md</id>
      <updated>2025-06-04T12:57:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/slide_view/base.md b/reference/ranges/slide_view/base.md
new file mode 100644
index 000000000..77e0c3002
--- /dev/null
+++ b/reference/ranges/slide_view/base.md
@@ -0,0 +1,62 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* slide_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;; // (1) C++23
+
+constexpr V base() &amp;amp;&amp;amp;;            // (2) C++23
+```
+
+## 概要
+
+メンバ変数として保持している、元となるRangeを取得する。
+
+## 効果
+
+- (1) : `return base_;`
+- (2) : `return std::move(base_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6};
+  
+  std::ranges::slide_view sv{v, 3};
+  
+  // (1) const左辺値参照版
+  const auto&amp;amp; base1 = sv.base();
+  std::cout &amp;lt;&amp;lt; &amp;#34;base size: &amp;#34; &amp;lt;&amp;lt; base1.size() &amp;lt;&amp;lt; std::endl;
+  
+  // (2) 右辺値参照版 
+  auto base2 = std::move(sv).base();
+  std::cout &amp;lt;&amp;lt; &amp;#34;moved base size: &amp;#34; &amp;lt;&amp;lt; base2.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* base[color ff0000]
+
+### 出力
+```
+base size: 6
+moved base size: 6
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 13.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
+
+## 参照
+- [N4950 26.7.31 Slide view](https://timsong-cpp.github.io/cppwp/n4950/range.slide)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- slide_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/slide_view/begin.html"/>
      <id>f69a490e0c673e958cf1c76dc6eae8cf95ccefcc:reference/ranges/slide_view/begin.md</id>
      <updated>2025-06-04T12:57:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/slide_view/begin.md b/reference/ranges/slide_view/begin.md
new file mode 100644
index 000000000..678509228
--- /dev/null
+++ b/reference/ranges/slide_view/begin.md
@@ -0,0 +1,68 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* slide_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!(simple-view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; slide-caches-nothing&amp;lt;const V&amp;gt;)); // (1) C++23
+
+constexpr auto begin() const
+  requires slide-caches-nothing&amp;lt;const V&amp;gt;; // (2) C++23
+```
+* slide-caches-nothing[italic]
+
+## 概要
+
+先頭要素を指すイテレータを取得する。
+
+## 効果
+
+`forward_range&amp;lt;V&amp;gt;`の場合：
+
+- (1), (2) : `return iterator&amp;lt;false&amp;gt;(ranges::begin(base_), ranges::end(base_), n_);`
+
+それ以外の場合：
+
+- (1) : `return iterator&amp;lt;false&amp;gt;(this);`
+- (2) : `return iterator&amp;lt;true&amp;gt;(this);`
+
+ここで、`iterator`は説明専用のイテレータクラスであり、`slide-caches-nothing&amp;lt;V&amp;gt;`は`forward_range&amp;lt;V&amp;gt;`かつ`V`が`random_access_range`または`sized_range`であることを表す説明専用のコンセプトである。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6};
+  
+  std::ranges::slide_view sv{v, 3};
+  
+  auto it = sv.begin();
+  
+  // 最初のスライドを出力
+  std::println(&amp;#34;{}&amp;#34;, *it);
+}
+```
+* begin[color ff0000]
+
+### 出力
+```
+[1, 2, 3]
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 13.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
+
+## 参照
+- [N4950 26.7.31 Slide view](https://timsong-cpp.github.io/cppwp/n4950/range.slide)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- slide_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/slide_view/end.html"/>
      <id>f69a490e0c673e958cf1c76dc6eae8cf95ccefcc:reference/ranges/slide_view/end.md</id>
      <updated>2025-06-04T12:57:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/slide_view/end.md b/reference/ranges/slide_view/end.md
new file mode 100644
index 000000000..dc7dd1c64
--- /dev/null
+++ b/reference/ranges/slide_view/end.md
@@ -0,0 +1,74 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* slide_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!(simple-view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; slide-caches-nothing&amp;lt;const V&amp;gt;)); // (1) C++23
+
+constexpr auto end() const
+  requires slide-caches-nothing&amp;lt;const V&amp;gt;; // (2) C++23
+```
+* slide-caches-nothing[italic]
+
+## 概要
+
+番兵またはイテレータを取得する。
+
+## 効果
+
+`forward_range&amp;lt;V&amp;gt;`の場合：
+
+`common_range&amp;lt;V&amp;gt;`の場合：
+- (1), (2) : `return iterator&amp;lt;Const&amp;gt;(ranges::end(base_) - min(n_ - 1, ranges::distance(base_)), ranges::end(base_), n_);`
+
+それ以外の場合：
+- (1), (2) : `return sentinel&amp;lt;Const&amp;gt;(ranges::end(base_));`
+
+それ以外の場合（`forward_range&amp;lt;V&amp;gt;`でない場合）：
+- (1), (2) : `return default_sentinel;`
+
+ここで、`iterator`と`sentinel`は説明専用のクラスであり、`Const`は各オーバーロードに応じて`false`または`true`となる。`slide-caches-nothing&amp;lt;V&amp;gt;`は`forward_range&amp;lt;V&amp;gt;`かつ`V`が`random_access_range`または`sized_range`であることを表す説明専用のコンセプトである。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6};
+  
+  std::ranges::slide_view sv{v, 3};
+  
+  // イテレータ範囲で全スライドを出力
+  for (auto it = sv.begin(); it != sv.end(); ++it) {
+    std::println(&amp;#34;{}&amp;#34;, *it);
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+```
+[1, 2, 3]
+[2, 3, 4]
+[3, 4, 5]
+[4, 5, 6]
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 13.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
+
+## 参照
+- [N4950 26.7.31 Slide view](https://timsong-cpp.github.io/cppwp/n4950/range.slide)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- slide_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/slide_view/op_constructor.html"/>
      <id>f69a490e0c673e958cf1c76dc6eae8cf95ccefcc:reference/ranges/slide_view/op_constructor.md</id>
      <updated>2025-06-04T12:57:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/slide_view/op_constructor.md b/reference/ranges/slide_view/op_constructor.md
new file mode 100644
index 000000000..b3fcfcae2
--- /dev/null
+++ b/reference/ranges/slide_view/op_constructor.md
@@ -0,0 +1,68 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* slide_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+slide_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default; // (1) C++23
+
+constexpr explicit
+slide_view(V base, range_difference_t&amp;lt;V&amp;gt; n);   // (2) C++23
+```
+
+## 概要
+
+`slide_view`オブジェクトを構築する。
+
+- (1) : デフォルトコンストラクタ。元となるRangeを値初期化する。
+- (2) : 元となるRangeとスライドサイズを受け取るコンストラクタ。
+
+## 効果
+
+- (1) : `base_`と`n_`を値初期化する。
+- (2) : `base_(std::move(base))`、`n_(n)`で初期化する。
+
+ここで、`base_`は元となるRangeを保持するメンバ変数、`n_`はスライドサイズを保持するメンバ変数である。
+
+## 事前条件
+
+- (2) : `n &amp;gt; 0`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6};
+  
+  // デフォルトコンストラクタ
+  std::ranges::slide_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt; sv1{};
+  
+  // 元となるRangeとスライドサイズを指定
+  std::ranges::slide_view sv2{v, 3};
+  
+  std::println(&amp;#34;{}&amp;#34;, sv2);
+}
+```
+
+### 出力
+```
+[[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 13.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
+
+## 参照
+- [N4950 26.7.31 Slide view](https://timsong-cpp.github.io/cppwp/n4950/range.slide)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- slide_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/slide_view/op_deduction_guide.html"/>
      <id>f69a490e0c673e958cf1c76dc6eae8cf95ccefcc:reference/ranges/slide_view/op_deduction_guide.md</id>
      <updated>2025-06-04T12:57:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/slide_view/op_deduction_guide.md b/reference/ranges/slide_view/op_deduction_guide.md
new file mode 100644
index 000000000..05ab050ab
--- /dev/null
+++ b/reference/ranges/slide_view/op_deduction_guide.md
@@ -0,0 +1,49 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* slide_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  slide_view(R&amp;amp;&amp;amp;, range_difference_t&amp;lt;R&amp;gt;) -&amp;gt; slide_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+
+## 概要
+`slide_view`クラステンプレートの型推論補助。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6};
+  
+  // slide_viewの型を明示的に指定する必要がない
+  std::ranges::slide_view sv{v, 3};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(sv),
+    std::ranges::slide_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 13.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- slide_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/slide_view/size.html"/>
      <id>f69a490e0c673e958cf1c76dc6eae8cf95ccefcc:reference/ranges/slide_view/size.md</id>
      <updated>2025-06-04T12:57:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/slide_view/size.md b/reference/ranges/slide_view/size.md
new file mode 100644
index 000000000..9dd4cad86
--- /dev/null
+++ b/reference/ranges/slide_view/size.md
@@ -0,0 +1,78 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* slide_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++23
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++23
+```
+
+## 概要
+
+要素数（スライド数）を取得する。
+
+## 効果
+
+以下と等価：
+
+```cpp
+auto sz = ranges::distance(base_);
+if (sz &amp;lt; n_) return 0;
+return to-unsigned-like(sz - n_ + 1);
+```
+* to-unsigned-like[italic]
+
+ここで、`to-unsigned-like`は説明専用の関数であり、整数型を対応する符号なし整数型に変換する。
+
+## 備考
+
+元のRangeの要素数が`n`より小さい場合は0を返し、そうでなければ`sz - n + 1`を返す。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6};
+  
+  // サイズ3のスライド
+  std::ranges::slide_view sv1{v, 3};
+  std::cout &amp;lt;&amp;lt; &amp;#34;slide_view(6 elements, slide size 3): &amp;#34; &amp;lt;&amp;lt; sv1.size() &amp;lt;&amp;lt; &amp;#34; slides&amp;#34; &amp;lt;&amp;lt; std::endl;
+  
+  // サイズ6のスライド
+  std::ranges::slide_view sv2{v, 6};
+  std::cout &amp;lt;&amp;lt; &amp;#34;slide_view(6 elements, slide size 6): &amp;#34; &amp;lt;&amp;lt; sv2.size() &amp;lt;&amp;lt; &amp;#34; slides&amp;#34; &amp;lt;&amp;lt; std::endl;
+  
+  // サイズ7のスライド（元より大きい）
+  std::ranges::slide_view sv3{v, 7};
+  std::cout &amp;lt;&amp;lt; &amp;#34;slide_view(6 elements, slide size 7): &amp;#34; &amp;lt;&amp;lt; sv3.size() &amp;lt;&amp;lt; &amp;#34; slides&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+slide_view(6 elements, slide size 3): 4 slides
+slide_view(6 elements, slide size 6): 1 slides
+slide_view(6 elements, slide size 7): 0 slides
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 17 [mark verified]
+- [GCC](/implementation.md#gcc): 13.0 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 3 [mark verified]
+
+## 参照
+- [N4950 26.7.31 Slide view](https://timsong-cpp.github.io/cppwp/n4950/range.slide)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reverse_view -- reverse_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view.html"/>
      <id>305a617cb445abc7827bf4aeb43acca8a83b23f3:reference/ranges/reverse_view.md</id>
      <updated>2025-06-04T12:46:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view.md b/reference/ranges/reverse_view.md
index 1d799ae4a..d86c4196a 100644
--- a/reference/ranges/reverse_view.md
+++ b/reference/ranges/reverse_view.md
@@ -51,11 +51,11 @@ namespace std::ranges {
 
 | 名前                                             | 説明                              | 対応バージョン |
 |--------------------------------------------------|-----------------------------------|----------------|
-| [`(constructor)`](reverse_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
-| [`base`](reverse_view/base.md.nolink)                     | `V`の参照を取得する               | C++20          |
-| [`begin`](reverse_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
-| [`end`](reverse_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
-| [`size`](reverse_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
+| [`(constructor)`](reverse_view/op_constructor.md)  | コンストラクタ                    | C++20          |
+| [`base`](reverse_view/base.md)                     | `V`の参照を取得する               | C++20          |
+| [`begin`](reverse_view/begin.md)                   | 先頭を指すイテレータを取得する    | C++20          |
+| [`end`](reverse_view/end.md)                       | 番兵を取得する                    | C++20          |
+| [`size`](reverse_view/size.md)                     | 要素数を取得する                  | C++20          |
 
 `r`を参照先のRangeとする。`size`は、[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
 
@@ -69,14 +69,14 @@ namespace std::ranges {
 | [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
 | [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
 | [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
-| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する             | C++23          |
-| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する      | C++23          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
 
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](reverse_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](reverse_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- reverse_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view/base.html"/>
      <id>305a617cb445abc7827bf4aeb43acca8a83b23f3:reference/ranges/reverse_view/base.md</id>
      <updated>2025-06-04T12:46:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view/base.md b/reference/ranges/reverse_view/base.md
new file mode 100644
index 000000000..8cef2e99f
--- /dev/null
+++ b/reference/ranges/reverse_view/base.md
@@ -0,0 +1,69 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* reverse_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元のviewを取得する。
+
+## 効果
+
+- (1) : `return base_;`
+- (2) : `return std::move(base_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  std::ranges::reverse_view rv(vec);
+  
+  // (1) コピーして取得
+  auto base1 = rv.base();
+  static_assert(std::same_as&amp;lt;decltype(base1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  
+  // (2) ムーブして取得
+  auto base2 = std::move(rv).base();
+  static_assert(std::same_as&amp;lt;decltype(base2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  
+  // 取得したviewを使用（元の順序）
+  for (int n : base1) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* base[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.6.1 Overview](https://timsong-cpp.github.io/cppwp/n4861/range.reverse.view)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- reverse_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view/begin.html"/>
      <id>305a617cb445abc7827bf4aeb43acca8a83b23f3:reference/ranges/reverse_view/begin.md</id>
      <updated>2025-06-04T12:46:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view/begin.md b/reference/ranges/reverse_view/begin.md
new file mode 100644
index 000000000..f6345a87d
--- /dev/null
+++ b/reference/ranges/reverse_view/begin.md
@@ -0,0 +1,77 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* reverse_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr reverse_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; begin(); // (1) C++20
+
+constexpr reverse_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; begin()
+  requires common_range&amp;lt;V&amp;gt;;                        // (2) C++20
+
+constexpr auto begin() const
+  requires common_range&amp;lt;const V&amp;gt;;                  // (3) C++20
+```
+* reverse_iterator[link /reference/iterator/reverse_iterator.md]
+
+## 概要
+
+先頭を指すイテレータを取得する。
+
+## 効果
+
+- (1) : キャッシュが空の場合、`cache_ = make_reverse_iterator(ranges::next(ranges::begin(base_), ranges::end(base_)))`を実行する。そうでなければ`return *cache_;`
+- (2) : `return make_reverse_iterator(ranges::end(base_));`
+- (3) : `return make_reverse_iterator(ranges::end(base_));`
+
+## 備考
+
+- (1)は、[`common_range`](../common_range.md)ではないRangeのために、終端位置をキャッシュして償却定数時間で返す
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  std::ranges::reverse_view rv(vec);
+  
+  auto it = rv.begin();
+  
+  // 逆順に出力
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;      // 5
+  ++it;
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;      // 4
+  
+  // const版
+  const auto&amp;amp; crv = rv;
+  auto cit = crv.begin();
+  std::cout &amp;lt;&amp;lt; *cit &amp;lt;&amp;lt; std::endl;     // 5
+}
+```
+* begin[color ff0000]
+
+### 出力
+```
+5
+4
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.6.1 Overview](https://timsong-cpp.github.io/cppwp/n4861/range.reverse.view)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- reverse_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view/end.html"/>
      <id>305a617cb445abc7827bf4aeb43acca8a83b23f3:reference/ranges/reverse_view/end.md</id>
      <updated>2025-06-04T12:46:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view/end.md b/reference/ranges/reverse_view/end.md
new file mode 100644
index 000000000..28fcdd5bd
--- /dev/null
+++ b/reference/ranges/reverse_view/end.md
@@ -0,0 +1,75 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* reverse_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr reverse_iterator&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; end();  // (1) C++20
+
+constexpr auto end() const
+  requires common_range&amp;lt;const V&amp;gt;;                 // (2) C++20
+```
+* reverse_iterator[link /reference/iterator/reverse_iterator.md]
+
+## 概要
+
+番兵を取得する。
+
+## 効果
+
+- (1) : `return make_reverse_iterator(ranges::begin(base_));`
+- (2) : `return make_reverse_iterator(ranges::begin(base_));`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  std::ranges::reverse_view rv(vec);
+  
+  auto begin = rv.begin();
+  auto end = rv.end();
+  
+  // 逆順に全要素を出力
+  for (auto it = begin; it != end; ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+  
+  // const版
+  const auto&amp;amp; crv = rv;
+  auto cbegin = crv.begin();
+  auto cend = crv.end();
+  for (auto it = cbegin; it != cend; ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+```
+5 4 3 2 1 
+5 4 3 2 1 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.6.1 Overview](https://timsong-cpp.github.io/cppwp/n4861/range.reverse.view)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- reverse_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view/op_constructor.html"/>
      <id>305a617cb445abc7827bf4aeb43acca8a83b23f3:reference/ranges/reverse_view/op_constructor.md</id>
      <updated>2025-06-04T12:46:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view/op_constructor.md b/reference/ranges/reverse_view/op_constructor.md
new file mode 100644
index 000000000..4369454a5
--- /dev/null
+++ b/reference/ranges/reverse_view/op_constructor.md
@@ -0,0 +1,65 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* reverse_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+reverse_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default;  // (1) C++20
+
+constexpr explicit
+reverse_view(V r);                              // (2) C++20
+```
+
+## 概要
+
+- (1) : デフォルトコンストラクタ
+- (2) : 元となるRangeを受け取るコンストラクタ
+
+## 効果
+
+- (1) : `base_`をデフォルト構築する
+- (2) : `base_`を`std::move(r)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  // (1) デフォルトコンストラクタ
+  std::ranges::reverse_view&amp;lt;std::ranges::empty_view&amp;lt;int&amp;gt;&amp;gt; rv1;
+  
+  // (2) 元となるRangeを受け取るコンストラクタ
+  std::ranges::reverse_view rv2(vec);
+  
+  for (int n : rv2) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::reverse_view[color ff0000]
+
+### 出力
+```
+5 4 3 2 1 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.6.1 Overview](https://timsong-cpp.github.io/cppwp/n4861/range.reverse.view)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- reverse_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view/op_deduction_guide.html"/>
      <id>305a617cb445abc7827bf4aeb43acca8a83b23f3:reference/ranges/reverse_view/op_deduction_guide.md</id>
      <updated>2025-06-04T12:46:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view/op_deduction_guide.md b/reference/ranges/reverse_view/op_deduction_guide.md
new file mode 100644
index 000000000..148d0e73e
--- /dev/null
+++ b/reference/ranges/reverse_view/op_deduction_guide.md
@@ -0,0 +1,51 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* reverse_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  reverse_view(R&amp;amp;&amp;amp;) -&amp;gt; reverse_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+
+## 概要
+`reverse_view`クラステンプレートの型推論補助。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  // reverse_viewの型を明示的に指定する必要がない
+  std::ranges::reverse_view rv{vec};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(rv),
+    std::ranges::reverse_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+* std::ranges::reverse_view[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- reverse_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view/size.html"/>
      <id>305a617cb445abc7827bf4aeb43acca8a83b23f3:reference/ranges/reverse_view/size.md</id>
      <updated>2025-06-04T12:46:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view/size.md b/reference/ranges/reverse_view/size.md
new file mode 100644
index 000000000..bc3898237
--- /dev/null
+++ b/reference/ranges/reverse_view/size.md
@@ -0,0 +1,63 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* reverse_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++20
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++20
+```
+
+## 概要
+
+要素数を取得する。
+
+## 効果
+
+- (1) : `return ranges::size(base_);`
+- (2) : `return ranges::size(base_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+  
+  std::ranges::reverse_view rv(vec);
+  
+  // サイズを取得
+  std::cout &amp;lt;&amp;lt; &amp;#34;size: &amp;#34; &amp;lt;&amp;lt; rv.size() &amp;lt;&amp;lt; std::endl;
+  
+  // const版も動作する
+  const auto&amp;amp; crv = rv;
+  std::cout &amp;lt;&amp;lt; &amp;#34;const size: &amp;#34; &amp;lt;&amp;lt; crv.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+size: 5
+const size: 5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.6.1 Overview](https://timsong-cpp.github.io/cppwp/n4861/range.reverse.view)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>owning_view -- owning_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/owning_view.html"/>
      <id>a87893323d914fb156eeab0a648c64e1070586e4:reference/ranges/owning_view.md</id>
      <updated>2025-06-04T12:43:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/owning_view.md b/reference/ranges/owning_view.md
index 4fe88c553..6dbbc0452 100644
--- a/reference/ranges/owning_view.md
+++ b/reference/ranges/owning_view.md
@@ -29,15 +29,15 @@ Rangeの右辺値をムーブして所有する[`view`](view.md)。このクラ
 
 ## メンバ関数
 
-| 名前                                             | 説明                              | 対応バージョン |
-|--------------------------------------------------|-----------------------------------|----------------|
-| [`(constructor)`](owning_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
-| [`base`](owning_view/base.md.nolink)                     | `R`の参照を取得する               | C++20          |
-| [`begin`](owning_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
-| [`end`](owning_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
-| [`empty`](owning_view/empty.md.nolink)                   | Rangeが空かどうかを判定する       | C++20          |
-| [`size`](owning_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
-| [`data`](owning_view/data.md.nolink)                     | Rangeの先頭へのポインタを取得する | C++20          |
+| 名前                                              | 説明                              | 対応バージョン |
+|---------------------------------------------------|-----------------------------------|----------------|
+| [`(constructor)`](owning_view/op_constructor.md)  | コンストラクタ                    | C++20          |
+| [`base`](owning_view/base.md)                     | `R`の参照を取得する               | C++20          |
+| [`begin`](owning_view/begin.md)                   | 先頭を指すイテレータを取得する    | C++20          |
+| [`end`](owning_view/end.md)                       | 番兵を取得する                    | C++20          |
+| [`empty`](owning_view/empty.md)                   | Rangeが空かどうかを判定する       | C++20          |
+| [`size`](owning_view/size.md)                     | 要素数を取得する                  | C++20          |
+| [`data`](owning_view/data.md)                     | Rangeの先頭へのポインタを取得する | C++20          |
 
 `r`を参照先のRangeとする。`empty`、`size`、`data`は、それぞれ[`ranges::empty`](empty.md)`(r)`、[`ranges::size`](size.md)`(r)`、[`ranges::data`](data.md)`(r)`が有効な式であるときに定義される。
 
@@ -49,14 +49,14 @@ Rangeの右辺値をムーブして所有する[`view`](view.md)。このクラ
 | [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
 | [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
 | [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
-| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する             | C++23          |
-| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する      | C++23          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
 
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](owning_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](owning_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- owning_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/owning_view/base.html"/>
      <id>a87893323d914fb156eeab0a648c64e1070586e4:reference/ranges/owning_view/base.md</id>
      <updated>2025-06-04T12:43:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/owning_view/base.md b/reference/ranges/owning_view/base.md
new file mode 100644
index 000000000..f421da1f9
--- /dev/null
+++ b/reference/ranges/owning_view/base.md
@@ -0,0 +1,70 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* owning_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr R&amp;amp; base() &amp;amp; noexcept;               // (1) C++20
+constexpr const R&amp;amp; base() const &amp;amp; noexcept;   // (2) C++20
+constexpr R&amp;amp;&amp;amp; base() &amp;amp;&amp;amp; noexcept;             // (3) C++20
+constexpr const R&amp;amp;&amp;amp; base() const &amp;amp;&amp;amp; noexcept; // (4) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元となるRangeを取得する。
+
+## 効果
+
+- (1) : `return r_;`
+- (2) : `return r_;`
+- (3) : `return std::move(r_);`
+- (4) : `return std::move(r_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  std::ranges::owning_view ov{std::move(v)};
+  
+  // (1) 左辺値参照版
+  auto&amp;amp; base1 = ov.base();
+  std::cout &amp;lt;&amp;lt; &amp;#34;base size: &amp;#34; &amp;lt;&amp;lt; base1.size() &amp;lt;&amp;lt; std::endl;
+  
+  // (2) const左辺値参照版
+  const auto&amp;amp; cov = ov;
+  const auto&amp;amp; base2 = cov.base();
+  std::cout &amp;lt;&amp;lt; &amp;#34;const base size: &amp;#34; &amp;lt;&amp;lt; base2.size() &amp;lt;&amp;lt; std::endl;
+  
+  // (3) 右辺値参照版
+  auto base3 = std::move(ov).base();
+  std::cout &amp;lt;&amp;lt; &amp;#34;moved base size: &amp;#34; &amp;lt;&amp;lt; base3.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* base[color ff0000]
+
+### 出力
+```
+base size: 5
+const base size: 5
+moved base size: 5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4892 24.7.3 All view](https://timsong-cpp.github.io/cppwp/n4892/range.all)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- owning_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/owning_view/begin.html"/>
      <id>a87893323d914fb156eeab0a648c64e1070586e4:reference/ranges/owning_view/begin.md</id>
      <updated>2025-06-04T12:43:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/owning_view/begin.md b/reference/ranges/owning_view/begin.md
new file mode 100644
index 000000000..e98a03906
--- /dev/null
+++ b/reference/ranges/owning_view/begin.md
@@ -0,0 +1,62 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* owning_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator_t&amp;lt;R&amp;gt; begin(); // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const R&amp;gt;;       // (2) C++20
+```
+
+## 概要
+
+先頭要素を指すイテレータを取得する。
+
+## 効果
+
+- (1) : `return ranges::begin(r_);`
+- (2) : `return ranges::begin(r_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  std::ranges::owning_view ov{std::move(v)};
+  
+  auto it = ov.begin();
+  std::cout &amp;lt;&amp;lt; &amp;#34;first element: &amp;#34; &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; std::endl;
+  
+  // const版も使用可能
+  const auto&amp;amp; cov = ov;
+  auto const_it = cov.begin();
+  std::cout &amp;lt;&amp;lt; &amp;#34;const first element: &amp;#34; &amp;lt;&amp;lt; *const_it &amp;lt;&amp;lt; std::endl;
+}
+```
+* begin[color ff0000]
+
+### 出力
+```
+first element: 1
+const first element: 1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4892 24.7.3 All view](https://timsong-cpp.github.io/cppwp/n4892/range.all)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- owning_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/owning_view/data.html"/>
      <id>a87893323d914fb156eeab0a648c64e1070586e4:reference/ranges/owning_view/data.md</id>
      <updated>2025-06-04T12:43:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/owning_view/data.md b/reference/ranges/owning_view/data.md
new file mode 100644
index 000000000..e29ef9c02
--- /dev/null
+++ b/reference/ranges/owning_view/data.md
@@ -0,0 +1,70 @@
+# data
+* ranges[meta header]
+* std::ranges[meta namespace]
+* owning_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto data()
+  requires contiguous_range&amp;lt;R&amp;gt;;       // (1) C++20
+
+constexpr auto data() const
+  requires contiguous_range&amp;lt;const R&amp;gt;; // (2) C++20
+```
+* contiguous_range[link ../contiguous_range.md]
+
+## 概要
+
+Rangeの先頭要素へのポインタを取得する。
+
+## 効果
+
+- (1) : `return ranges::data(r_);`
+- (2) : `return ranges::data(r_);`
+
+## 備考
+
+この関数は、元となるRangeが[`contiguous_range`](../contiguous_range.md)コンセプトを満たす場合のみ定義される。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  std::ranges::owning_view ov{std::move(v)};
+  
+  auto ptr = ov.data();
+  std::cout &amp;lt;&amp;lt; &amp;#34;first element via data(): &amp;#34; &amp;lt;&amp;lt; *ptr &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;second element via data(): &amp;#34; &amp;lt;&amp;lt; *(ptr + 1) &amp;lt;&amp;lt; std::endl;
+  
+  // const版も使用可能
+  const auto&amp;amp; cov = ov;
+  auto const_ptr = cov.data();
+  std::cout &amp;lt;&amp;lt; &amp;#34;const first element via data(): &amp;#34; &amp;lt;&amp;lt; *const_ptr &amp;lt;&amp;lt; std::endl;
+}
+```
+* data[color ff0000]
+
+### 出力
+```
+first element via data(): 1
+second element via data(): 2
+const first element via data(): 1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4892 24.7.3 All view](https://timsong-cpp.github.io/cppwp/n4892/range.all)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- owning_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/owning_view/empty.html"/>
      <id>a87893323d914fb156eeab0a648c64e1070586e4:reference/ranges/owning_view/empty.md</id>
      <updated>2025-06-04T12:43:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/owning_view/empty.md b/reference/ranges/owning_view/empty.md
new file mode 100644
index 000000000..f6064a552
--- /dev/null
+++ b/reference/ranges/owning_view/empty.md
@@ -0,0 +1,64 @@
+# empty
+* ranges[meta header]
+* std::ranges[meta namespace]
+* owning_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr bool empty()
+  requires requires { ranges::empty(r_); }; // (1) C++20
+
+constexpr bool empty() const
+  requires requires { ranges::empty(r_); }; // (2) C++20
+```
+
+## 概要
+
+Rangeが空かどうかを判定する。
+
+## 効果
+
+- (1) : `return ranges::empty(r_);`
+- (2) : `return ranges::empty(r_);`
+
+## 備考
+
+この関数は、元となるRangeに対して[`ranges::empty`](../empty.md)が呼び出せる場合のみ定義される。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  // 空のvector
+  std::ranges::owning_view ov1{std::vector&amp;lt;int&amp;gt;{}};
+  std::cout &amp;lt;&amp;lt; &amp;#34;empty vector: &amp;#34; &amp;lt;&amp;lt; ov1.empty() &amp;lt;&amp;lt; std::endl;
+  
+  // 要素を持つvector
+  std::ranges::owning_view ov2{std::vector&amp;lt;int&amp;gt;{1, 2, 3}};
+  std::cout &amp;lt;&amp;lt; &amp;#34;non-empty vector: &amp;#34; &amp;lt;&amp;lt; ov2.empty() &amp;lt;&amp;lt; std::endl;
+}
+```
+* empty[color ff0000]
+
+### 出力
+```
+empty vector: 1
+non-empty vector: 0
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4892 24.7.3 All view](https://timsong-cpp.github.io/cppwp/n4892/range.all)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- owning_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/owning_view/end.html"/>
      <id>a87893323d914fb156eeab0a648c64e1070586e4:reference/ranges/owning_view/end.md</id>
      <updated>2025-06-04T12:43:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/owning_view/end.md b/reference/ranges/owning_view/end.md
new file mode 100644
index 000000000..285c4b73e
--- /dev/null
+++ b/reference/ranges/owning_view/end.md
@@ -0,0 +1,60 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* owning_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr sentinel_t&amp;lt;R&amp;gt; end(); // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const R&amp;gt;;     // (2) C++20
+```
+
+## 概要
+
+番兵を取得する。
+
+## 効果
+
+- (1) : `return ranges::end(r_);`
+- (2) : `return ranges::end(r_);`
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  std::ranges::owning_view ov{std::move(v)};
+  
+  // イテレータ範囲で全要素を出力
+  for (auto it = ov.begin(); it != ov.end(); ++it) {
+    std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4892 24.7.3 All view](https://timsong-cpp.github.io/cppwp/n4892/range.all)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- owning_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/owning_view/op_constructor.html"/>
      <id>a87893323d914fb156eeab0a648c64e1070586e4:reference/ranges/owning_view/op_constructor.md</id>
      <updated>2025-06-04T12:43:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/owning_view/op_constructor.md b/reference/ranges/owning_view/op_constructor.md
new file mode 100644
index 000000000..096fd83e2
--- /dev/null
+++ b/reference/ranges/owning_view/op_constructor.md
@@ -0,0 +1,85 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* owning_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+owning_view()
+  requires default_initializable&amp;lt;R&amp;gt; = default;   // (1) C++20
+
+constexpr owning_view(R&amp;amp;&amp;amp; t);                    // (2) C++20
+
+owning_view(owning_view&amp;amp;&amp;amp;) = default;            // (3) C++20
+owning_view&amp;amp; operator=(owning_view&amp;amp;&amp;amp;) = default; // (4) C++20
+```
+
+## 概要
+
+`owning_view`オブジェクトを構築する。
+
+- (1) : デフォルトコンストラクタ。元となるRangeを値初期化する。
+- (2) : 元となるRangeの右辺値参照を受け取り、ムーブして所有するコンストラクタ。
+- (3) : ムーブコンストラクタ。
+- (4) : ムーブ代入演算子。
+
+## 効果
+
+- (1) : `r_`を値初期化する。
+- (2) : `r_(std::move(t))`でメンバを初期化する。
+- (3) : 他の`owning_view`オブジェクトからムーブ構築する。
+- (4) : 他の`owning_view`オブジェクトからムーブ代入する。
+
+ここで、`r_`は元となるRangeを保持するメンバ変数である。
+
+## 備考
+
+- `owning_view`はコピー不可である（コピーコンストラクタとコピー代入演算子は削除されている）。
+- 元のRangeオブジェクトを所有するため、元のオブジェクトの寿命に依存しない。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+std::vector&amp;lt;int&amp;gt; get_vector() {
+  return {1, 2, 3, 4, 5};
+}
+
+int main() {
+  // (1) デフォルトコンストラクタ
+  std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; ov1{};
+  
+  // (2) 右辺値参照から構築
+  std::ranges::owning_view ov2{get_vector()};
+  
+  // (3) ムーブコンストラクタ
+  auto ov3 = std::move(ov2);
+  
+  for (int n : ov3) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::owning_view[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4892 24.7.3 All view](https://timsong-cpp.github.io/cppwp/n4892/range.all)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- owning_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/owning_view/op_deduction_guide.html"/>
      <id>a87893323d914fb156eeab0a648c64e1070586e4:reference/ranges/owning_view/op_deduction_guide.md</id>
      <updated>2025-06-04T12:43:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/owning_view/op_deduction_guide.md b/reference/ranges/owning_view/op_deduction_guide.md
new file mode 100644
index 000000000..00d237fc3
--- /dev/null
+++ b/reference/ranges/owning_view/op_deduction_guide.md
@@ -0,0 +1,51 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* owning_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  owning_view(R&amp;amp;&amp;amp;) -&amp;gt; owning_view&amp;lt;R&amp;gt;;
+}
+```
+
+## 概要
+`owning_view`クラステンプレートの型推論補助。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;type_traits&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  
+  // owning_viewの型を明示的に指定する必要がない
+  std::ranges::owning_view ov{std::move(v)};
+  
+  // 推論された型を確認
+  static_assert(std::same_as&amp;lt;
+    decltype(ov),
+    std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+* std::ranges::owning_view[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- owning_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/owning_view/size.html"/>
      <id>a87893323d914fb156eeab0a648c64e1070586e4:reference/ranges/owning_view/size.md</id>
      <updated>2025-06-04T12:43:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/owning_view/size.md b/reference/ranges/owning_view/size.md
new file mode 100644
index 000000000..6620b6186
--- /dev/null
+++ b/reference/ranges/owning_view/size.md
@@ -0,0 +1,65 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* owning_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;R&amp;gt;;       // (1) C++20
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const R&amp;gt;; // (2) C++20
+```
+
+## 概要
+
+要素数を取得する。
+
+## 効果
+
+- (1) : `return ranges::size(r_);`
+- (2) : `return ranges::size(r_);`
+
+## 備考
+
+この関数は、元となるRangeが[`sized_range`](../sized_range.md)コンセプトを満たす場合のみ定義される。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+  std::ranges::owning_view ov{std::move(v)};
+  
+  std::cout &amp;lt;&amp;lt; &amp;#34;size: &amp;#34; &amp;lt;&amp;lt; ov.size() &amp;lt;&amp;lt; std::endl;
+  
+  // const版も使用可能
+  const auto&amp;amp; cov = ov;
+  std::cout &amp;lt;&amp;lt; &amp;#34;const size: &amp;#34; &amp;lt;&amp;lt; cov.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+size: 5
+const size: 5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4892 24.7.3 All view](https://timsong-cpp.github.io/cppwp/n4892/range.all)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
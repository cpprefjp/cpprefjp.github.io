<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-18T02:47:22.543012</updated>
  <id>79757aea-bbb0-45c3-847f-53e9701abe5c</id>

  
    <entry>
      <title>linalg -- linalg : triangular_matrix_matrix_right_solveを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg.html"/>
      <id>ad1f2ed629033c147d39060bbe6c9c9b1ae19055:reference/linalg.md</id>
      <updated>2024-07-18T11:32:33+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダでは、線形代数(linear algebra)に関する基礎的な演算アルゴリズムを提供する。
ベクトルや行列の成分にアクセスするアルゴリズムは、多次元配列ビュー&lt;a href=&#34;mdspan/mdspan.html&#34;&gt; &lt;code&gt;std::mdspan&lt;/code&gt; &lt;/a&gt;を通してその要素にアクセスする。
本ヘッダが提供するエンティティは、すべて名前空間&lt;code&gt;std::linalg&lt;/code&gt;に属する。&lt;/p&gt;
&lt;p&gt;1次元データであるベクトル(vector)や2次元データである行列(matrix)に対して、線形代数分野のデファクトスタンダードとされる BLAS(Basic Linear Algebra Subprograms) 互換のアルゴリズム群、いくつかの LAPACK(Linear Algebra PACKage) 互換のアルゴリズムが提供される。
BLAS互換アルゴリズムは、演算対象データの次元数や計算オーダーに応じて3段階に区分される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Level 1 BLAS : ベクトルーベクトルの演算&lt;/li&gt;
&lt;li&gt;Level 2 BLAS : 行列ーベクトルの演算&lt;/li&gt;
&lt;li&gt;Level 3 BLAS : 行列ー行列の演算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例えば、2個の一般行列の積を求める&lt;code&gt;std::linalg::matrix_product&lt;/code&gt;はLevel 3 BLASルーチン&lt;code&gt;xGEMM&lt;/code&gt;に対応する。
（実際のBLASルーチン名は、浮動小数点数型の単精度&lt;code&gt;S&lt;/code&gt;／倍精度&lt;code&gt;D&lt;/code&gt;とそれぞれの複素数版&lt;code&gt;C&lt;/code&gt;,&lt;code&gt;Z&lt;/code&gt;として、プレフィックス&lt;code&gt;x&lt;/code&gt;部は文字4種類のいずれか。）&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;std::mdspan&lt;/code&gt;と組み合わせて利用する拡張機能が提供される。&lt;/p&gt;
&lt;h2&gt;共通要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダが提供する演算アルゴリズムは、スカラ値およびベクトル／行列の要素型として線形代数値型(linear algebra value types)を取り扱う。&lt;/p&gt;
&lt;p&gt;線形代数値型はBLASが取り扱う&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&amp;lt;float&amp;gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt;をはじめ、&lt;code&gt;&lt;a href=&#34;concepts/semiregular.html&#34;&gt;semiregular&lt;/a&gt;&lt;/code&gt;のモデルであれば良い。
また、線形代数値型の値初期化は加法元（算術型であれば値&lt;code&gt;0&lt;/code&gt;）であること。&lt;/p&gt;
&lt;p&gt;プログラム定義型を利用する場合、演算アルゴリズムはカスタマイゼーションポイントとして&lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;real&lt;/code&gt;, &lt;code&gt;imag&lt;/code&gt;, &lt;code&gt;conj&lt;/code&gt;を非修飾名で呼び出す。&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;std::mdspan&lt;/code&gt;向け機能拡張&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/layout_blas_packed.html&#34;&gt;layout_blas_packed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列要素のBLAS互換パックレイアウトに対応する&lt;a href=&#34;mdspan/LayoutMappingPolicy.html&#34;&gt;レイアウトマッピングポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scaled_accessor.html&#34;&gt;scaled_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;scaled&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/AccessorPolicy.html&#34;&gt;アクセサポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scaled.html&#34;&gt;scaled&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素値をスカラー倍した読み取り専用&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugated_accessor.html&#34;&gt;conjugated_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;conjugated&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/AccessorPolicy.html&#34;&gt;アクセサポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugated.html&#34;&gt;conjugated&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の複素共役ビュー&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/layout_transpose.html&#34;&gt;layout_transpose&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;transposed&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/LayoutMappingPolicy.html&#34;&gt;レイアウトマッピングポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/transposed.html&#34;&gt;transposed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2次元&lt;code&gt;std::mdspan&lt;/code&gt;の行列転置ビューを作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugate_transposed.html&#34;&gt;conjugate_transposed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の複素共役転置ビュー&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLASの要件&lt;/h2&gt;
&lt;p&gt;BLAS 1, 2, 3のアルゴリズムでテンプレートパラメータが特に制約されていない場合、テンプレートパラメータの名前によって以下の制約を満たすとする。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;制約&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ExecutionPolicy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;is_execution_policy&amp;lt;ExecutionPolicy&amp;gt;::value == true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&amp;lt;Real&amp;gt;&lt;/code&gt;が規定できる型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Triangle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;upper_triangle_t&lt;/code&gt;または&lt;code&gt;lower_triangle_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DiagonalStorage&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;implicit_unit_diagonal_t&lt;/code&gt;または&lt;code&gt;explicit_diagonal_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 1アルゴリズム&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::mpspan&lt;/code&gt;をパラメータに持つ、この節の全てのアルゴリズムの計算量は渡された&lt;code&gt;std::mdspan&lt;/code&gt;の&lt;code&gt;extents&lt;/code&gt;の積の最大値、つまりベクトルや行列の要素数の最大値に線形である。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/setup_givens_rotation_result.html&#34;&gt;setup_givens_rotation_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;setup_givens_rotation&lt;/code&gt;の結果型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/setup_givens_rotation.html&#34;&gt;setup_givens_rotation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xLARTG: ギブンス回転をセットアップする (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/apply_givens_rotation.html&#34;&gt;apply_givens_rotation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xROT: ベクトルにギブンス回転を適用する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/swap_elements.html&#34;&gt;swap_elements&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSWAP: 2つのベクトル／行列の要素を交換する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scale.html&#34;&gt;scale&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSCAL: ベクトル／行列の要素にスカラ値を乗算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/copy.html&#34;&gt;copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xCOPY: ベクトル／行列の要素をコピーする (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/add.html&#34;&gt;add&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xAXPY: 2つのベクトル／行列の要素を加算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/dot.html&#34;&gt;dot&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xDOT, xDOTU: 2つのベクトルのドット積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/dotc.html&#34;&gt;dotc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xDOTC: 2つのベクトルの複素共役ドット積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/sum_of_squares_result.html&#34;&gt;sum_of_squares_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector_sum_of_squares&lt;/code&gt;の結果型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_sum_of_squares.html&#34;&gt;vector_sum_of_squares&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xLASSQ: ベクトル要素の平方和を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_two_norm.html&#34;&gt;vector_two_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xNRM2: ベクトルのユークリッドノルム(Euclidean norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_abs_sum.html&#34;&gt;vector_abs_sum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xASUM: ベクトル要素の絶対値和を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_idx_abs_max.html&#34;&gt;vector_idx_abs_max&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xIAMAX: ベクトル要素のうち最大絶対値インデクスを返す (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_frob_norm.html&#34;&gt;matrix_frob_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列のフロベニウスノルム(Frobenius norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_one_norm.html&#34;&gt;matrix_one_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列の1ノルム(One norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_inf_norm.html&#34;&gt;matrix_inf_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列の無限大ノルム(Infinity norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 2アルゴリズム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_vector_product.html&#34;&gt;matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGEMV: 一般行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_vector_product.html&#34;&gt;symmetric_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYMV: 対称行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_vector_product.html&#34;&gt;hermitian_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHEMV: ハミルトニアン行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_vector_product.html&#34;&gt;triangular_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMV: 三角行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_vector_solve.html&#34;&gt;triangular_matrix_vector_solve&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSV: 三角行列を係数とする行列方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_rank_1_update.html&#34;&gt;matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGER, xGERU: 行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_rank_1_update_c.html&#34;&gt;matrix_rank_1_update_c&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGERC: 複素行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_1_update.html&#34;&gt;symmetric_matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR: 対称行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_1_update.html&#34;&gt;hermitian_matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER: ハミルトニアン行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_2_update.html&#34;&gt;symmetric_matrix_rank_2_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR2: 対称行列のRank-2更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_2_update.html&#34;&gt;hermitian_matrix_rank_2_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER2: ハミルトニアン行列のRank-2更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 3アルゴリズム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_product.html&#34;&gt;matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGEMM: 2つの一般行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_product.html&#34;&gt;symmetric_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYMM: 対称行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_product.html&#34;&gt;hermitian_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHEMM: ハミルトニアン行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_product.html&#34;&gt;triangular_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: 三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_left_product.html&#34;&gt;triangular_matrix_left_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: In-placeに三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_right_product.html&#34;&gt;triangular_matrix_right_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: In-placeに三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_k_update.html&#34;&gt;symmetric_matrix_rank_k_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYRK: 対称行列のRank-k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_k_update.html&#34;&gt;hermitian_matrix_rank_k_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHERK: ハミルトニアン行列のRank-k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_2k_update.html&#34;&gt;symmetric_matrix_rank_2k_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR2K: 対称行列のRank-2k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_2k_update.html&#34;&gt;hermitian_matrix_rank_2k_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER2K: ハミルトニアン行列のRank-2k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_matrix_left_solve.html&#34;&gt;triangular_matrix_matrix_left_solve&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSM: 三角行列の連立一次方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_matrix_right_solve.html&#34;&gt;triangular_matrix_matrix_right_solve&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSM: 三角行列の連立一次方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;タグ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダでは、行列の格納順序や三角行列の上下をタグを使って表現している。&lt;/p&gt;
&lt;h3&gt;格納順序&lt;/h3&gt;
&lt;p&gt;行列の格納順序を表すタグ。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/column_major_t.html&#34;&gt;column_major_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(column-major)を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/column_major_t.html&#34;&gt;column_major&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(column-major)を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/row_major_t.html&#34;&gt;row_major_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(row-major)を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/row_major_t.html&#34;&gt;row_major&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(row-major)を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;三角行列&lt;/h3&gt;
&lt;p&gt;上三角行列か下三角行列かを表すタグ。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/upper_triangle_t.html&#34;&gt;upper_triangle_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上三角行列を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/upper_triangle_t.html&#34;&gt;upper_triangle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上三角行列を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/lower_triangle_t.html&#34;&gt;lower_triangle_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下三角行列を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/lower_triangle_t.html&#34;&gt;lower_triangle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下三角行列を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;対角成分&lt;/h3&gt;
&lt;p&gt;行列の全ての対角成分を暗黙に乗法における単位元とみなすかどうかを表すタグ。みなした場合、行列の対角成分にはアクセスせず、値が乗法における単位元であるとして計算する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/implicit_unit_diagonal_t.html&#34;&gt;implicit_unit_diagonal_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分を暗黙に乗法における単位元とみなすタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/implicit_unit_diagonal_t.html&#34;&gt;implicit_unit_diagonal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分を暗黙に乗法における単位元とみなすタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/explicit_diagonal_t.html&#34;&gt;explicit_diagonal_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分にアクセスするタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/explicit_diagonal_t.html&#34;&gt;explicit_diagonal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分にアクセスするタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html&#34; target=&#34;_blank&#34;&gt;P1673R13 A free function linear algebra interface based on the BLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1674r2.html&#34; target=&#34;_blank&#34;&gt;P1674R2: Evolving a Standard C++ Linear Algebra Library from the BLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CppCon/CppCon2023/blob/main/Presentations/stdlinalg_linear_algebra_coming_to_standard_cpp.pdf&#34; target=&#34;_blank&#34;&gt;std::linalg: Linear Algebra Coming to Standard C++&lt;/a&gt;, CppCon 2023&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlib.org/blas/&#34; target=&#34;_blank&#34;&gt;BLAS (Basic Linear Algebra Subprograms)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eel.is/c++draft/complex.numbers&#34; target=&#34;_blank&#34;&gt;Numerics library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_matrix_right_solve -- linalg : triangular_matrix_matrix_right_solveを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_matrix_right_solve.html"/>
      <id>ad1f2ed629033c147d39060bbe6c9c9b1ae19055:reference/linalg/triangular_matrix_matrix_right_solve.md</id>
      <updated>2024-07-18T11:32:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_matrix_right_solve.md b/reference/linalg/triangular_matrix_matrix_right_solve.md
new file mode 100644
index 000000000..561622a28
--- /dev/null
+++ b/reference/linalg/triangular_matrix_matrix_right_solve.md
@@ -0,0 +1,391 @@
+# triangular_matrix_matrix_right_solve
+
+
+* [mathjax enable]
+* linalg[meta header]
+* function template[meta id-type]
+* std::linalg[meta namespace]
+* cpp26[meta cpp]
+
+
+```cpp
+namespace std::linalg {
+  template&amp;lt;in-matrix InMat1,
+           class Triangle,
+           class DiagonalStorage,
+           in-matrix InMat2,
+           out-matrix OutMat,
+           class BinaryDivideOp&amp;gt;
+  void triangular_matrix_matrix_right_solve(
+    InMat1 A,
+    Triangle t,
+    DiagonalStorage d,
+    InMat2 B,
+    OutMat X,
+    BinaryDivideOp divide); // (1)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat1,
+           class Triangle,
+           class DiagonalStorage,
+           in-matrix InMat2,
+           out-matrix OutMat,
+           class BinaryDivideOp&amp;gt;
+  void triangular_matrix_matrix_right_solve(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat1 A,
+    Triangle t,
+    DiagonalStorage d,
+    InMat2 B,
+    OutMat X,
+    BinaryDivideOp divide); // (2)
+
+  template&amp;lt;in-matrix InMat1,
+           class Triangle,
+           class DiagonalStorage,
+           in-matrix InMat2,
+           out-matrix OutMat&amp;gt;
+  void triangular_matrix_matrix_right_solve(
+    InMat1 A,
+    Triangle t,
+    DiagonalStorage d,
+    InMat2 B,
+    OutMat X); // (3)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat1,
+           class Triangle,
+           class DiagonalStorage,
+           in-matrix InMat2,
+           out-matrix OutMat&amp;gt;
+  void triangular_matrix_matrix_right_solve(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat1 A,
+    Triangle t,
+    DiagonalStorage d,
+    InMat2 B,
+    OutMat X); // (4)
+
+  template&amp;lt;in-matrix InMat,
+           class Triangle,
+           class DiagonalStorage,
+           inout-matrix InOutMat,
+           class BinaryDivideOp&amp;gt;
+  void triangular_matrix_matrix_right_solve(
+    InMat A,
+    Triangle t,
+    DiagonalStorage d,
+    InOutMat B,
+    BinaryDivideOp divide); // (5)
+
+  template&amp;lt;class ExecutionPolicy,
+          in-matrix InMat,
+          class Triangle,
+          class DiagonalStorage,
+          inout-matrix InOutMat,
+          class BinaryDivideOp&amp;gt;
+  void triangular_matrix_matrix_right_solve(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat A,
+    Triangle t,
+    DiagonalStorage d,
+    InOutMat B,
+    BinaryDivideOp divide); // (6)
+
+  template&amp;lt;in-matrix InMat,
+           class Triangle,
+           class DiagonalStorage,
+           inout-matrix InOutMat&amp;gt;
+  void triangular_matrix_matrix_right_solve(
+    InMat A,
+    Triangle t,
+    DiagonalStorage d,
+    InOutMat B); // (7)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat,
+           class Triangle,
+           class DiagonalStorage,
+           inout-matrix InOutMat&amp;gt;
+  void triangular_matrix_matrix_right_solve(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat A,
+    Triangle t,
+    DiagonalStorage d,
+    InOutMat B); // (8)
+}
+```
+
+
+## 概要
+三角行列に対して、連立一次方程式を解く。
+引数`t`は対称行列の成分が上三角にあるのか、それとも下三角にあるのかを示す。
+引数`d`には対称行列の対角成分を暗黙に乗法における単位元とみなすかどうかを指定する。
+引数`divide`には値の割り算を指定する。この引数は非可換な掛け算を持つ値型をサポートするためにある。
+
+- (1): 連立一次方程式 $YA = B$ を解き、`Y`を`X`に代入する。もし解が存在しないなら、`X`は有効だが未規定。
+- (2): (1)を指定された実行ポリシーで実行する。
+- (3): 割り算に[`std::divides`](/reference/functional/divides.md)`&amp;lt;void&amp;gt;`を用いて、(1)を行う。
+- (4): (3)を指定された実行ポリシーで実行する。
+- (5): `X`に`B`を使って、in-placeに(1)を行う。
+- (6): (5)を指定された実行ポリシーで実行する。
+- (7): 割り算に[`std::divides`](/reference/functional/divides.md)`&amp;lt;void&amp;gt;`を用いて、(5)を行う。
+- (8): (7)を指定された実行ポリシーで実行する。
+
+
+## 適格要件
+- 共通:
+    + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+    + `DiagonalStorage`は[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
+    + `decltype(A)`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+- (1), (2), (3), (4): [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(X), decltype(A), decltype(B)&amp;gt;()`が`true`
+- (5), (6), (7), (8): [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(B), decltype(A), decltype(B)&amp;gt;()`が`true`
+- (2), (4), (6), (8): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
+
+
+## 事前条件
+- 共通:
+    + `A.extent(0) == A.extent(1)` (つまり`A`が正方行列であること)
+- (1), (2), (3), (4): [`multipliable`](multipliable.md)`(X, A, B)`が`true`
+- (5), (6), (7), (8): [`multipliable`](multipliable.md)`(B, A, B)`が`true`
+
+
+## 効果
+対称行列の成分の位置を示す`t`と対角成分へアクセスするかどうかを示す`d`を考慮して、連立一次方程式の解を求める。
+
+- (1), (2): 連立一次方程式 $AY = B$ を解き、`Y`を`X`に代入する。もし解が存在しないなら、`X`は有効だが未規定。
+- (3): `triangular_matrix_matrix_right_solve(A, t, d, B, X, divides&amp;lt;void&amp;gt;{})`と同じ。
+- (4): `triangular_matrix_matrix_right_solve(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, t, d, B, X, divides&amp;lt;void&amp;gt;{})`と同じ。
+- (5), (6): `X`に`B`を使って、in-placeに(1)を行う。
+- (7): `triangular_matrix_matrix_right_solve(A, t, d, B, divides&amp;lt;void&amp;gt;{})`と同じ。
+- (8): `triangular_matrix_matrix_right_solve(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, t, d, B, divides&amp;lt;void&amp;gt;{})`と同じ。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+$O((\verb|A.extent(0)|)^2 \times \verb|B.extent(0)|)$
+
+
+## 備考
+- 三角行列が左側にあるので、非可換な掛け算の場合の`divide`の望ましい実装は数学では$xy^{-1}$と同等と思われる。ここで`x`は最初の引数で`y`は2番目の引数、$y^{-1}$は`y`の掛け算での逆元である。
+
+
+## 例
+**[注意] 処理系にあるコンパイラで確認していないため、間違っているかもしれません。**
+
+```cpp example
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;linalg&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template &amp;lt;class Matrix&amp;gt;
+void print_mat(const Matrix&amp;amp; A) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    for(int j = 0; j &amp;lt; A.extent(1) - 1; ++j) {
+      std::cout &amp;lt;&amp;lt; A[i, j] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+    }
+    std::cout &amp;lt;&amp;lt; A[i, A.extent(1) - 1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+
+template &amp;lt;class Matrix&amp;gt;
+void init_mat(Matrix&amp;amp; A) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    for(int j = 0; j &amp;lt; A.extent(1); ++j) {
+      A[i, j] = i * A.extent(1) + j;
+    }
+  }
+}
+
+template &amp;lt;class Matrix&amp;gt;
+void init_tria_mat(Matrix&amp;amp; A) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    for(int j = i + 1; j &amp;lt; A.extent(1); ++j) {
+      A[i, j] = i * A.extent(1) + j;
+    }
+  }
+}
+
+int main()
+{
+  constexpr size_t N = 4;
+
+  std::vector&amp;lt;double&amp;gt; A_vec(N * N);
+  std::vector&amp;lt;double&amp;gt; X_vec(N * N);
+  std::vector&amp;lt;double&amp;gt; B_vec(N * N);
+
+  std::mdspan&amp;lt;
+    double,
+    std::extents&amp;lt;size_t, N, N&amp;gt;,
+    std::linalg::layout_blas_packed&amp;lt;
+      std::linalg::upper_triangle_t,
+      std::linalg::row_major_t&amp;gt;
+  &amp;gt; A(A_vec.data());
+  std::mdspan X(X_vec.data(), N, N);
+  std::mdspan B(B_vec.data(), N, N);
+
+  init_tria_mat(A);
+  init_mat(B);
+
+  // (1)
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_right_solve(
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B,
+    X,
+    std::divides&amp;lt;void&amp;gt;{});
+  print_mat(X);
+
+  // (2)
+  std::cout &amp;lt;&amp;lt; &amp;#34;(2)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_right_solve(
+    std::execution::par,
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B,
+    X,
+    std::divides&amp;lt;void&amp;gt;{});
+  print_mat(X);
+
+  // (3)
+  std::cout &amp;lt;&amp;lt; &amp;#34;(3)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_right_solve(
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B,
+    X);
+  print_mat(X);
+
+  // (4)
+  std::cout &amp;lt;&amp;lt; &amp;#34;(4)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_right_solve(
+    std::execution::par,
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B,
+    X);
+  print_mat(X);
+
+  // (5)
+  std::cout &amp;lt;&amp;lt; &amp;#34;(5)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_right_solve(
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B,
+    std::divides&amp;lt;void&amp;gt;{});
+  print_mat(B);
+
+  // (6)
+  init_mat(B);
+  std::cout &amp;lt;&amp;lt; &amp;#34;(6)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_right_solve(
+    std::execution::par,
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B,
+    std::divides&amp;lt;void&amp;gt;{});
+  print_mat(B);
+
+  // (7)
+  init_mat(B);
+  std::cout &amp;lt;&amp;lt; &amp;#34;(7)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_right_solve(
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B);
+  print_mat(B);
+
+  // (8)
+  init_mat(B);
+  std::cout &amp;lt;&amp;lt; &amp;#34;(8)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_right_solve(
+    std::execution::par,
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B);
+  print_mat(B);
+
+  return 0;
+}
+```
+* A.extent[link /reference/mdspan/extents/extent.md]
+* std::mdspan[link /reference/mdspan/mdspan.md]
+* std::extents[link /reference/mdspan/extents.md]
+* std::linalg::layout_blas_packed[link /reference/linalg/layout_blas_packed.md]
+* std::linalg::upper_triangle_t[link /reference/linalg/upper_triangle_t.md]
+* std::linalg::row_major_t[link /reference/linalg/row_major_t.md]
+* std::linalg::upper_triangle[link /reference/linalg/upper_triangle_t.md]
+* std::linalg::implicit_unit_diagonal[link /reference/linalg/implicit_unit_diagonal_t.md]
+* std::execution::par[link /reference/execution/execution/execution_policy.md]
+* std::linalg::triangular_matrix_matrix_right_solve[color ff0000]
+
+
+### 出力
+```
+(1)
+0 1
+2 1
+(2)
+0 1
+2 1
+(3)
+0 1
+2 1
+(4)
+0 1
+2 1
+(5)
+0 1
+2 1
+(6)
+0 1
+2 1
+(7)
+0 1
+2 1
+(8)
+0 1
+2 1
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution`](/reference/execution.md)
+- [`mdspan`](/reference/mdspan.md)
+- [`upper_triangle_t`](upper_triangle_t.md)
+- [`lower_triangle_t`](lower_triangle_t.md)
+- [`implicit_unit_diagonal`](implicit_unit_diagonal_t.md)
+- [`explicit_diagonal`](explicit_diagonal_t.md)
+
+
+## 参照
+- [P1673R13 A free function linear algebra interface based on the BLAS](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html)
+- [LAPACK: trsm](https://netlib.org/lapack/explore-html/d9/de5/group__trsm.html)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_matrix_left_solve -- linalg : 見逃した関数オーバーロードを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_matrix_left_solve.html"/>
      <id>bb6a33fb193cb4e62fb340c597030a8340429682:reference/linalg/triangular_matrix_matrix_left_solve.md</id>
      <updated>2024-07-18T11:03:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_matrix_left_solve.md b/reference/linalg/triangular_matrix_matrix_left_solve.md
index f8c68987a..85e0bd5b7 100644
--- a/reference/linalg/triangular_matrix_matrix_left_solve.md
+++ b/reference/linalg/triangular_matrix_matrix_left_solve.md
@@ -65,6 +65,54 @@ namespace std::linalg {
     DiagonalStorage d,
     InMat2 B,
     OutMat X); // (4)
+
+  template&amp;lt;in-matrix InMat,
+           class Triangle,
+           class DiagonalStorage,
+           inout-matrix InOutMat,
+           class BinaryDivideOp&amp;gt;
+  void triangular_matrix_matrix_left_solve(
+    InMat A,
+    Triangle t,
+    DiagonalStorage d,
+    InOutMat B,
+    BinaryDivideOp divide); // (5)
+
+  template&amp;lt;class ExecutionPolicy,
+          in-matrix InMat,
+          class Triangle,
+          class DiagonalStorage,
+          inout-matrix InOutMat,
+          class BinaryDivideOp&amp;gt;
+  void triangular_matrix_matrix_left_solve(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat A,
+    Triangle t,
+    DiagonalStorage d,
+    InOutMat B,
+    BinaryDivideOp divide); // (6)
+
+  template&amp;lt;in-matrix InMat,
+           class Triangle,
+           class DiagonalStorage,
+           inout-matrix InOutMat&amp;gt;
+  void triangular_matrix_matrix_left_solve(
+    InMat A,
+    Triangle t,
+    DiagonalStorage d,
+    InOutMat B); // (7)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat,
+           class Triangle,
+           class DiagonalStorage,
+           inout-matrix InOutMat&amp;gt;
+  void triangular_matrix_matrix_left_solve(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat A,
+    Triangle t,
+    DiagonalStorage d,
+    InOutMat B); // (8)
 }
 ```
 
@@ -79,21 +127,28 @@ namespace std::linalg {
 - (2): (1)を指定された実行ポリシーで実行する。
 - (3): 割り算に[`std::divides`](/reference/functional/divides.md)`&amp;lt;void&amp;gt;`を用いて、(1)を行う。
 - (4): (3)を指定された実行ポリシーで実行する。
+- (5): `X`に`B`を使って、in-placeに(1)を行う。
+- (6): (5)を指定された実行ポリシーで実行する。
+- (7): 割り算に[`std::divides`](/reference/functional/divides.md)`&amp;lt;void&amp;gt;`を用いて、(5)を行う。
+- (8): (7)を指定された実行ポリシーで実行する。
 
 
 ## 適格要件
 - 共通:
     + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
     + `DiagonalStorage`は[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
-    + `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-    + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(X), decltype(B)&amp;gt;()`が`true`
+    + `decltype(A)`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
     + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
+- (1), (2), (3), (4): [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(X), decltype(B)&amp;gt;()`が`true`
+- (5), (6), (7), (8): [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(B)&amp;gt;()`が`true`
+- (2), (4), (6), (8): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
-- [`multipliable`](multipliable.md)`(A, X, B)`が`true`
-- `A.extent(0) == A.extent(1)` (つまり`A`が正方行列であること)
+- 共通:
+    + `A.extent(0) == A.extent(1)` (つまり`A`が正方行列であること)
+- (1), (2), (3), (4): [`multipliable`](multipliable.md)`(A, X, B)`が`true`
+- (5), (6), (7), (8): [`multipliable`](multipliable.md)`(A, B, B)`が`true`
 
 
 ## 効果
@@ -102,6 +157,9 @@ namespace std::linalg {
 - (1), (2): 連立一次方程式 $AY = B$ を解き、`Y`を`X`に代入する。もし解が存在しないなら、`X`は有効だが未規定。
 - (3): `triangular_matrix_matrix_left_solve(A, t, d, B, X, divides&amp;lt;void&amp;gt;{})`と同じ。
 - (4): `triangular_matrix_matrix_left_solve(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, t, d, B, X, divides&amp;lt;void&amp;gt;{})`と同じ。
+- (5), (6): `X`に`B`を使って、in-placeに(1)を行う。
+- (7): `triangular_matrix_matrix_left_solve(A, t, d, B, divides&amp;lt;void&amp;gt;{})`と同じ。
+- (8): `triangular_matrix_matrix_left_solve(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, t, d, B, divides&amp;lt;void&amp;gt;{})`と同じ。
 
 
 ## 戻り値
@@ -109,7 +167,7 @@ namespace std::linalg {
 
 
 ## 計算量
-$O(\verb|A.extent(0)| \times (\verb|X.extent(0)|)^2)$
+$O((\verb|A.extent(0)|)^2 \times \verb|B.extent(1)|)$
 
 
 ## 備考
@@ -220,6 +278,49 @@ int main()
     X);
   print_mat(X);
 
+  // (5)
+  std::cout &amp;lt;&amp;lt; &amp;#34;(5)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_left_solve(
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B,
+    std::divides&amp;lt;void&amp;gt;{});
+  print_mat(B);
+
+  // (6)
+  init_mat(B);
+  std::cout &amp;lt;&amp;lt; &amp;#34;(6)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_left_solve(
+    std::execution::par,
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B,
+    std::divides&amp;lt;void&amp;gt;{});
+  print_mat(B);
+
+  // (7)
+  init_mat(B);
+  std::cout &amp;lt;&amp;lt; &amp;#34;(7)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_left_solve(
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B);
+  print_mat(B);
+
+  // (8)
+  init_mat(B);
+  std::cout &amp;lt;&amp;lt; &amp;#34;(8)\n&amp;#34;;
+  std::linalg::triangular_matrix_matrix_left_solve(
+    std::execution::par,
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    B);
+  print_mat(B);
+
   return 0;
 }
 ```
@@ -249,6 +350,18 @@ int main()
 (4)
 -2 -2
 2 3
+(5)
+-2 -2
+2 3
+(6)
+-2 -2
+2 3
+(7)
+-2 -2
+2 3
+(8)
+-2 -2
+2 3
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1299 from sukeya/add_custom_deleter_to_example</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_constructor.html"/>
      <id>a83de745dc9be67f48581b8c96da97aeb8663eae:reference/memory/unique_ptr/op_constructor.md</id>
      <updated>2024-07-17T18:15:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_constructor.md b/reference/memory/unique_ptr/op_constructor.md
index a23183cb0..48c6eb1bd 100644
--- a/reference/memory/unique_ptr/op_constructor.md
+++ b/reference/memory/unique_ptr/op_constructor.md
@@ -118,6 +118,20 @@ unique_ptr&amp;lt;T, D&amp;amp;&amp;gt; p(new T(), deleter); // pはdeleterへの参照を保持する
 #include &amp;lt;cassert&amp;gt;
 #include &amp;lt;memory&amp;gt;
 
+using AllocTraits = std::allocator_traits&amp;lt;std::allocator&amp;lt;int&amp;gt;&amp;gt;;
+
+class Deleter {
+ public:
+  explicit Deleter(const std::allocator&amp;lt;int&amp;gt;&amp;amp; alloc) : alloc_(alloc) {}
+
+  void operator()(int* p) {
+    AllocTraits::destroy(alloc_, p);
+    AllocTraits::deallocate(alloc_, p, 1);
+  }
+ private:
+  std::allocator&amp;lt;int&amp;gt; alloc_;
+};
+
 int main()
 {
   // (1) デフォルト構築
@@ -133,6 +147,16 @@ int main()
   std::unique_ptr&amp;lt;int&amp;gt; p3(new int(3), std::default_delete&amp;lt;int&amp;gt;());
   assert(p3);
 
+  // 自作デリータを使った例
+  {
+    std::allocator&amp;lt;int&amp;gt; alloc;
+    int* p = AllocTraits::allocate(alloc, 1);
+    AllocTraits::construct(alloc, p, 4);
+    std::unique_ptr&amp;lt;int, Deleter&amp;gt; p4(p, Deleter(alloc));
+    assert(p4);
+    assert(*p4 == 4);
+  }
+
   // (5) 他のunique_ptrから所有権を譲渡する
   std::unique_ptr&amp;lt;int&amp;gt; p5 = std::move(p3);
   assert(*p5 == 3);
@@ -147,6 +171,12 @@ int main()
   assert(*static_cast&amp;lt;const int*&amp;gt;(p7.get()) == 3);
 }
 ```
+* std::allocator_traits[link /reference/memory/allocator_traits.md]
+* std::allocator[link /reference/memory/allocator.md]
+* destroy[link /reference/memory/allocator_traits/destroy.md]
+* deallocate[link /reference/memory/allocator_traits/deallocate.md]
+* allocate[link /reference/memory/allocator_traits/allocate.md]
+* construct[link /reference/memory/allocator_traits/construct.md]
 * std::default_delete[link /reference/memory/default_delete.md]
 * std::move[link /reference/utility/move.md]
 * get()[link get.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- std::unique_ptrに自作デリータの使用例を追加</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_constructor.html"/>
      <id>37f60c5b903e13d13943cd7667449850714d440e:reference/memory/unique_ptr/op_constructor.md</id>
      <updated>2024-07-17T17:21:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_constructor.md b/reference/memory/unique_ptr/op_constructor.md
index a23183cb0..48c6eb1bd 100644
--- a/reference/memory/unique_ptr/op_constructor.md
+++ b/reference/memory/unique_ptr/op_constructor.md
@@ -118,6 +118,20 @@ unique_ptr&amp;lt;T, D&amp;amp;&amp;gt; p(new T(), deleter); // pはdeleterへの参照を保持する
 #include &amp;lt;cassert&amp;gt;
 #include &amp;lt;memory&amp;gt;
 
+using AllocTraits = std::allocator_traits&amp;lt;std::allocator&amp;lt;int&amp;gt;&amp;gt;;
+
+class Deleter {
+ public:
+  explicit Deleter(const std::allocator&amp;lt;int&amp;gt;&amp;amp; alloc) : alloc_(alloc) {}
+
+  void operator()(int* p) {
+    AllocTraits::destroy(alloc_, p);
+    AllocTraits::deallocate(alloc_, p, 1);
+  }
+ private:
+  std::allocator&amp;lt;int&amp;gt; alloc_;
+};
+
 int main()
 {
   // (1) デフォルト構築
@@ -133,6 +147,16 @@ int main()
   std::unique_ptr&amp;lt;int&amp;gt; p3(new int(3), std::default_delete&amp;lt;int&amp;gt;());
   assert(p3);
 
+  // 自作デリータを使った例
+  {
+    std::allocator&amp;lt;int&amp;gt; alloc;
+    int* p = AllocTraits::allocate(alloc, 1);
+    AllocTraits::construct(alloc, p, 4);
+    std::unique_ptr&amp;lt;int, Deleter&amp;gt; p4(p, Deleter(alloc));
+    assert(p4);
+    assert(*p4 == 4);
+  }
+
   // (5) 他のunique_ptrから所有権を譲渡する
   std::unique_ptr&amp;lt;int&amp;gt; p5 = std::move(p3);
   assert(*p5 == 3);
@@ -147,6 +171,12 @@ int main()
   assert(*static_cast&amp;lt;const int*&amp;gt;(p7.get()) == 3);
 }
 ```
+* std::allocator_traits[link /reference/memory/allocator_traits.md]
+* std::allocator[link /reference/memory/allocator.md]
+* destroy[link /reference/memory/allocator_traits/destroy.md]
+* deallocate[link /reference/memory/allocator_traits/deallocate.md]
+* allocate[link /reference/memory/allocator_traits/allocate.md]
+* construct[link /reference/memory/allocator_traits/construct.md]
 * std::default_delete[link /reference/memory/default_delete.md]
 * std::move[link /reference/utility/move.md]
 * get()[link get.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_matrix_left_solve -- linalg : 例を修正 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_matrix_left_solve.html"/>
      <id>c84c78865ce78853654b463989873ec034c97296:reference/linalg/triangular_matrix_matrix_left_solve.md</id>
      <updated>2024-07-17T14:39:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_matrix_left_solve.md b/reference/linalg/triangular_matrix_matrix_left_solve.md
index 89c1074e8..f8c68987a 100644
--- a/reference/linalg/triangular_matrix_matrix_left_solve.md
+++ b/reference/linalg/triangular_matrix_matrix_left_solve.md
@@ -138,10 +138,10 @@ void print_mat(const Matrix&amp;amp; A) {
 }
 
 template &amp;lt;class Matrix&amp;gt;
-void init_mat(Matrix&amp;amp; A, typename Matrix::value_type geta = 1) {
+void init_mat(Matrix&amp;amp; A) {
   for(int i = 0; i &amp;lt; A.extent(0); ++i) {
     for(int j = 0; j &amp;lt; A.extent(1); ++j) {
-      A[i, j] = i * A.extent(1) + j + geta;
+      A[i, j] = i * A.extent(1) + j;
     }
   }
 }
@@ -173,7 +173,7 @@ int main()
   std::mdspan X(X_vec.data(), N, N);
   std::mdspan B(B_vec.data(), N, N);
 
-  init_mat(A)
+  init_tria_mat(A);
   init_mat(B);
 
   // (1)
@@ -197,7 +197,7 @@ int main()
     B,
     X,
     std::divides&amp;lt;void&amp;gt;{});
-  print(X);
+  print_mat(X);
 
   // (3)
   std::cout &amp;lt;&amp;lt; &amp;#34;(3)\n&amp;#34;;
@@ -207,7 +207,7 @@ int main()
     std::linalg::implicit_unit_diagonal,
     B,
     X);
-  print(X);
+  print_mat(X);
 
   // (4)
   std::cout &amp;lt;&amp;lt; &amp;#34;(4)\n&amp;#34;;
@@ -218,13 +218,12 @@ int main()
     std::linalg::implicit_unit_diagonal,
     B,
     X);
-  print(X);
+  print_mat(X);
 
   return 0;
 }
 ```
 * A.extent[link /reference/mdspan/extents/extent.md]
-* v.extent[link /reference/mdspan/extents/extent.md]
 * std::mdspan[link /reference/mdspan/mdspan.md]
 * std::extents[link /reference/mdspan/extents.md]
 * std::linalg::layout_blas_packed[link /reference/linalg/layout_blas_packed.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-08-31T10:23:33.775233</updated>
  <id>570ce4ce-7e0b-448f-aa8c-22f04fb9a2f8</id>

  
    <entry>
      <title>max -- &lt;sup&gt; タグが正しく表示されるように修正</title>
      <link href="https://cpprefjp.github.io/reference/random/independent_bits_engine/max.html"/>
      <id>98dc272e1b8c7844bf248c5b3487b4ecf4e252c4:reference/random/independent_bits_engine/max.md</id>
      <updated>2025-08-31T19:19:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/independent_bits_engine/max.md b/reference/random/independent_bits_engine/max.md
index 2c77eec01..bb24d5e85 100644
--- a/reference/random/independent_bits_engine/max.md
+++ b/reference/random/independent_bits_engine/max.md
@@ -14,7 +14,7 @@ static constexpr result_type max();
 
 
 ## 戻り値
-最大値である`2`&amp;lt;sup&amp;gt;`w`&amp;lt;/sup&amp;gt;` -1`を返す。
+最大値である&amp;lt;code&amp;gt;2&amp;lt;sup&amp;gt;w&amp;lt;/sup&amp;gt; - 1&amp;lt;/code&amp;gt;を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- 空白が消えないようにバッククォートを &lt;code&gt; に変更</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>1e9038544bfb2bbd89f296904c612cda771d58d4:reference/format/format.md</id>
      <updated>2025-08-31T19:13:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 6b01cd0e8..c3801f9ab 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -241,7 +241,7 @@ Range・シーケンスコンテナに対して使用できる標準のオプシ
 | m    | `std::map`出力向けの書式 | 全体の囲み文字を`[ ]`の代わりに`{ }`とする。要素型にも`m`書式を適用する | C++23 |
 | s    | 文字列として出力 | 要素型が文字型であること。エスケープ処理しない文字列として書式化する | C++23 |
 | ?s   | デバッグ文字列として出力 | 要素型が文字型であること。エスケープした文字列として書式化する | C++23 |
-| (なし) | デフォルト | 囲み文字を`[ ]`、区切り文字を`, `として書式化する | C++23 |
+| (なし) | デフォルト | 囲み文字を`[ ]`、区切り文字を&amp;lt;code&amp;gt;, &amp;lt;/code&amp;gt;として書式化する | C++23 |
 
 - `m`書式は、要素が[`std::pair`](/reference/utility/pair.md)とサイズ2の[`std::tuple`](/reference/tuple/tuple.md)の場合のみ指定できる
 - `?s`書式を指定した場合、`n`オプションと、`range-underlying-spec`は指定できない
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_find -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_adjacent_find.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_adjacent_find.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_adjacent_find.md b/reference/algorithm/ranges_adjacent_find.md
index 4685f276c..e9b81315a 100644
--- a/reference/algorithm/ranges_adjacent_find.md
+++ b/reference/algorithm/ranges_adjacent_find.md
@@ -51,7 +51,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` 内にあるイテレータ i について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *(i + 1))) != false` であるような最初のイテレータを返す。
+`[first,last)` 内にあるイテレータ i について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *(i + 1))) != false` であるような最初のイテレータを返す。
 
 もしそのようなイテレータが見つからなかった場合は `last` を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all_of -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_all_of.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_all_of.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_all_of.md b/reference/algorithm/ranges_all_of.md
index 09cb6a9a9..861c19bff 100644
--- a/reference/algorithm/ranges_all_of.md
+++ b/reference/algorithm/ranges_all_of.md
@@ -37,7 +37,7 @@ namespace std::ranges {
     - `Pred`は`R`のイテレータを`Proj`で射影した値を受け取る[単項述語](/reference/iterator/indirect_unary_predicate.md)である
 
 ## 戻り値
-`[first,last)` あるいは `r` が空であったり、その範囲内の全てのイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `true` である場合は `true` を返し、そうでない場合は `false` を返す。
+`[first,last)` あるいは `r` が空であったり、その範囲内の全てのイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `true` である場合は `true` を返し、そうでない場合は `false` を返す。
 
 ## 計算量
 最大で `last - first` 回 `proj` と `pred` を実行する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>any_of -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_any_of.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_any_of.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_any_of.md b/reference/algorithm/ranges_any_of.md
index 77e2ffd1e..25e3f53fb 100644
--- a/reference/algorithm/ranges_any_of.md
+++ b/reference/algorithm/ranges_any_of.md
@@ -38,7 +38,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` あるいは `r` 内のイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `true` になるような要素があれば`true`を返し、そうでなければ`false`を返す。
+`[first,last)` あるいは `r` 内のイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `true` になるような要素があれば`true`を返し、そうでなければ`false`を返す。
 `[first,last)` あるいは `r` の範囲が空の場合は`false`を返す。
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count_if -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_count_if.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_count_if.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_count_if.md b/reference/algorithm/ranges_count_if.md
index e4881886a..265ff9c5a 100644
--- a/reference/algorithm/ranges_count_if.md
+++ b/reference/algorithm/ranges_count_if.md
@@ -39,7 +39,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` であるイテレータの数を返す
+`[first,last)` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` であるイテレータの数を返す
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ends_with -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_ends_with.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_ends_with.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_ends_with.md b/reference/algorithm/ranges_ends_with.md
index 2f32e02f3..4b15e622c 100644
--- a/reference/algorithm/ranges_ends_with.md
+++ b/reference/algorithm/ranges_ends_with.md
@@ -55,9 +55,9 @@ namespace std::ranges {
 * (1): 
     * `N1 = last1 - first1`, `N2 = last2 - first2` とする。
     * `N1 &amp;lt; N2` のとき、`false`
-    * それ以外のとき、[`ranges::equal`](ranges_equal.md)`(`[`std::move`](/reference/utility/move.md)`(first1) + (N1 - N2), last1, `[`std::move`](/reference/utility/move.md)`(first2), last2, pred, proj1, proj2)`
+    * それ以外のとき、[`ranges::equal`](ranges_equal.md)`(`[`std::move`](/reference/utility/move.md)`(first1) + (N1 - N2), last1,` [`std::move`](/reference/utility/move.md)`(first2), last2, pred, proj1, proj2)`
 * (2): 
-    * `N1 = `[`ranges::distance`](/reference/iterator/ranges_distance.md)`(r1)`, `N2 = `[`ranges::distance`](/reference/iterator/ranges_distance.md)`(r2)` とする。
+    * `N1 =` [`ranges::distance`](/reference/iterator/ranges_distance.md)`(r1)`, `N2 =` [`ranges::distance`](/reference/iterator/ranges_distance.md)`(r2)` とする。
     * `N1 &amp;lt; N2` のとき、`false`
     * それ以外のとき、[`ranges::equal`](ranges_equal.md)`(`[`ranges::drop_view`](/reference/ranges/drop_view.md)`(`[`ranges::ref_view`](/reference/ranges/ref_view.md)`(r1), N1 - N2), r2, pred, proj1, proj2)`
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_equal.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_equal.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_equal.md b/reference/algorithm/ranges_equal.md
index e69f26008..d3a0c6d14 100644
--- a/reference/algorithm/ranges_equal.md
+++ b/reference/algorithm/ranges_equal.md
@@ -49,7 +49,7 @@ namespace std::ranges {
 ## 戻り値
 2つの範囲の長さを定数時間で求められ、もし `last1 - first1 != last2 - first2` であれば、`false` を返す。
 
-そうでない場合、`[first1,last1)` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj1, *i), `[`invoke`](/reference/functional/invoke.md)`(proj2, *(first2 + (i - first1)))) != false` が全てのイテレータ `i` について満たされているのであれば `true` を返す。  
+そうでない場合、`[first1,last1)` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj1, *i),` [`invoke`](/reference/functional/invoke.md)`(proj2, *(first2 + (i - first1)))) != false` が全てのイテレータ `i` について満たされているのであれば `true` を返す。  
 そうでない場合は `false` を返す。
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_equal_range.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_equal_range.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_equal_range.md b/reference/algorithm/ranges_equal_range.md
index 3b0e59e80..d97ab1578 100644
--- a/reference/algorithm/ranges_equal_range.md
+++ b/reference/algorithm/ranges_equal_range.md
@@ -79,7 +79,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`{`[`ranges::lower_bound`](ranges_lower_bound.md)`(first, last, value, comp, proj), `[`ranges::upper_bound`](ranges_upper_bound.md)`(first, last, value, comp, proj)}`
+`{`[`ranges::lower_bound`](ranges_lower_bound.md)`(first, last, value, comp, proj),` [`ranges::upper_bound`](ranges_upper_bound.md)`(first, last, value, comp, proj)}`
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_of -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_first_of.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_find_first_of.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_first_of.md b/reference/algorithm/ranges_find_first_of.md
index cf2c7a805..b385eb8f3 100644
--- a/reference/algorithm/ranges_find_first_of.md
+++ b/reference/algorithm/ranges_find_first_of.md
@@ -47,7 +47,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first1,last1 - (last2 - first2))` 内のイテレータ `i` があるとき、`[first2,last2)` 内のイテレータ `j` について、どれかが [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj1, *i), `[`invoke`](/reference/functional/invoke.md)`(proj2, *j)) == true` であるような最初のイテレータを返す。
+`[first1,last1 - (last2 - first2))` 内のイテレータ `i` があるとき、`[first2,last2)` 内のイテレータ `j` について、どれかが [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj1, *i),` [`invoke`](/reference/functional/invoke.md)`(proj2, *j)) == true` であるような最初のイテレータを返す。
 
 そのようなイテレータが見つからない、もしくは `[first2,last2)` が空である場合は `last1` を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_if -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_if.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_find_if.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_if.md b/reference/algorithm/ranges_find_if.md
index 132209765..e6cf396a7 100644
--- a/reference/algorithm/ranges_find_if.md
+++ b/reference/algorithm/ranges_find_if.md
@@ -35,7 +35,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` である最初のイテレータを返す。そのようなイテレータが見つからなかった場合は `last` を返す。
+`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` である最初のイテレータを返す。そのようなイテレータが見つからなかった場合は `last` を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_if_not -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_if_not.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_find_if_not.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_if_not.md b/reference/algorithm/ranges_find_if_not.md
index e2b25e41c..250693822 100644
--- a/reference/algorithm/ranges_find_if_not.md
+++ b/reference/algorithm/ranges_find_if_not.md
@@ -35,7 +35,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i)) == false` である最初のイテレータを返す。そのようなイテレータが見つからなかった場合は `last` を返す。
+`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i)) == false` である最初のイテレータを返す。そのようなイテレータが見つからなかった場合は `last` を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_if -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_last_if.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_find_last_if.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_last_if.md b/reference/algorithm/ranges_find_last_if.md
index 33aa02e73..3364c92a8 100644
--- a/reference/algorithm/ranges_find_last_if.md
+++ b/reference/algorithm/ranges_find_last_if.md
@@ -34,7 +34,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` である最後のイテレータ `i` を `ranges::subrange&amp;lt;I&amp;gt;{i, last}` として返す。そのようなイテレータが見つからなかった場合は `ranges::subrange&amp;lt;I&amp;gt;{last, last}` を返す。
+`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i)) != false` である最後のイテレータ `i` を `ranges::subrange&amp;lt;I&amp;gt;{i, last}` として返す。そのようなイテレータが見つからなかった場合は `ranges::subrange&amp;lt;I&amp;gt;{last, last}` を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_if_not -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_find_last_if_not.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_find_last_if_not.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_find_last_if_not.md b/reference/algorithm/ranges_find_last_if_not.md
index 1ffbed588..fbbc83a07 100644
--- a/reference/algorithm/ranges_find_last_if_not.md
+++ b/reference/algorithm/ranges_find_last_if_not.md
@@ -34,7 +34,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i)) == false` である最後のイテレータ `i` を `ranges::subrange&amp;lt;I&amp;gt;{i, last}` として返す。そのようなイテレータが見つからなかった場合は `ranges::subrange&amp;lt;I&amp;gt;{last, last}` を返す。
+`[first,last)` あるいは `r` 内のイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i)) == false` である最後のイテレータ `i` を `ranges::subrange&amp;lt;I&amp;gt;{i, last}` として返す。そのようなイテレータが見つからなかった場合は `ranges::subrange&amp;lt;I&amp;gt;{last, last}` を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for_each -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_for_each.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_for_each.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_for_each.md b/reference/algorithm/ranges_for_each.md
index b68d9e5dc..e9a3ef5a9 100644
--- a/reference/algorithm/ranges_for_each.md
+++ b/reference/algorithm/ranges_for_each.md
@@ -48,7 +48,7 @@ namespace std::ranges {
 この他にFunは[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであることが要求される。
 
 ## 効果
-`[first,last)` 内の全てのイテレータ `i` に [`invoke`](/reference/functional/invoke.md)`(f, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` という操作を行う。`first` から順番に処理し、`last - 1` まで行う。
+`[first,last)` 内の全てのイテレータ `i` に [`invoke`](/reference/functional/invoke.md)`(f,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` という操作を行う。`first` から順番に処理し、`last - 1` まで行う。
 
 このアルゴリズムはその他のアルゴリズムと違い、[`invoke`](/reference/functional/invoke.md)`(proj, *i)` が書き換え可能な参照であれば、関数 `f` の内部でその値を書き換えても構わない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for_each_n -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_for_each_n.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_for_each_n.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_for_each_n.md b/reference/algorithm/ranges_for_each_n.md
index d6eb16ba9..92b0e79c7 100644
--- a/reference/algorithm/ranges_for_each_n.md
+++ b/reference/algorithm/ranges_for_each_n.md
@@ -33,7 +33,7 @@ namespace std::ranges {
 `n &amp;gt;= 0`
 
 ## 効果
-イテレータ範囲`[first, first + n)` 内の全てのイテレータ `i` に [`invoke`](/reference/functional/invoke.md)`(f, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` という操作を行う。
+イテレータ範囲`[first, first + n)` 内の全てのイテレータ `i` に [`invoke`](/reference/functional/invoke.md)`(f,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` という操作を行う。
 
 このアルゴリズムはその他のアルゴリズムと違い、[`invoke`](/reference/functional/invoke.md)`(proj, *i)` が書き換え可能な参照であれば、関数 `f` の内部でその値を書き換えても構わない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_max.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_max.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_max.md b/reference/algorithm/ranges_max.md
index 862861ece..32ca3a62f 100644
--- a/reference/algorithm/ranges_max.md
+++ b/reference/algorithm/ranges_max.md
@@ -47,7 +47,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最大と判断された最初の値
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最大と判断された最初の値
 
 ## 備考
 - 等価な要素が 2 つ以上あった場合には、最も左の要素を返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_element -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_max_element.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_max_element.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_max_element.md b/reference/algorithm/ranges_max_element.md
index 9d00ee5d4..eebec0f04 100644
--- a/reference/algorithm/ranges_max_element.md
+++ b/reference/algorithm/ranges_max_element.md
@@ -37,7 +37,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最大と判断された最初の要素を指すイテレータ
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最大と判断された最初の要素を指すイテレータ
 
 ## 計算量
 [`max`](max.md)`((last - first) - 1, 0)`回の比較を行う
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>min -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_min.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_min.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_min.md b/reference/algorithm/ranges_min.md
index 7282981d4..f3ec69f0d 100644
--- a/reference/algorithm/ranges_min.md
+++ b/reference/algorithm/ranges_min.md
@@ -47,7 +47,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最小と判断された最初の値
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最小と判断された最初の値
 
 ## 備考
 - 等価な要素が 2 つ以上あった場合には、最も左の要素を返す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>min_element -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_min_element.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_min_element.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_min_element.md b/reference/algorithm/ranges_min_element.md
index c81c1e676..e7c039f0f 100644
--- a/reference/algorithm/ranges_min_element.md
+++ b/reference/algorithm/ranges_min_element.md
@@ -38,7 +38,7 @@ namespace std::ranges {
 
 
 ## 戻り値
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最小と判断された最初の要素を指すイテレータ
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって最小と判断された最初の要素を指すイテレータ
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_minmax.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_minmax.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_minmax.md b/reference/algorithm/ranges_minmax.md
index 21a8fc127..2f678c217 100644
--- a/reference/algorithm/ranges_minmax.md
+++ b/reference/algorithm/ranges_minmax.md
@@ -56,7 +56,7 @@ minmax_result {
 ```
 * minmax_result[link ranges_min_max_result.md]
 
-それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断された最初の値となる。
+それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断された最初の値となる。
 
 ## 計算量
 - 2値比較バージョンは1操作。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minmax_element -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_minmax_element.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_minmax_element.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_minmax_element.md b/reference/algorithm/ranges_minmax_element.md
index e7e170459..a243db083 100644
--- a/reference/algorithm/ranges_minmax_element.md
+++ b/reference/algorithm/ranges_minmax_element.md
@@ -47,7 +47,7 @@ minmax_element_result {
 ```
 * minmax_element_result[link ranges_min_max_result.md]
 
-それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断し、同じ値の要素が複数ある場合は、最小の要素は最初の要素、最大の要素は最後の要素となる。
+それぞれ、比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって判断し、同じ値の要素が複数ある場合は、最小の要素は最初の要素、最大の要素は最後の要素となる。
 
 ## 計算量
 `n` を範囲の要素数とする場合、[`max`](max.md)`(floor(3(n - 1) / 2), 0)` 回の述語適用を行う。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mismatch -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_mismatch.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_mismatch.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_mismatch.md b/reference/algorithm/ranges_mismatch.md
index f5aedb6f8..e45983580 100644
--- a/reference/algorithm/ranges_mismatch.md
+++ b/reference/algorithm/ranges_mismatch.md
@@ -57,7 +57,7 @@ namespace std::ranges {
 
 - `j`が範囲`[first2, last2)`に含まれており、
 - `!(*i == *j)` もしくは
-- [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj1, *i), `[`invoke`](/reference/functional/invoke.md)`(proj2, *j)) == false` であるような、最初のイテレータのペア [`mismatch_result`](ranges_in_in_result.md)`{ .in1 = i, .in2 = j }` を返す。
+- [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj1, *i),` [`invoke`](/reference/functional/invoke.md)`(proj2, *j)) == false` であるような、最初のイテレータのペア [`mismatch_result`](ranges_in_in_result.md)`{ .in1 = i, .in2 = j }` を返す。
 
 そのようなイテレータが見つからなかった場合は [`mismatch_result`](ranges_in_in_result.md)`{ .in1 = last1, .in2 = first2 + (last1 - first1)}` を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>next_permutation -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_next_permutation.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_next_permutation.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_next_permutation.md b/reference/algorithm/ranges_next_permutation.md
index 0c18b0c5d..5ce95dbe5 100644
--- a/reference/algorithm/ranges_next_permutation.md
+++ b/reference/algorithm/ranges_next_permutation.md
@@ -41,7 +41,7 @@ namespace std::ranges {
 
 ## 効果
 `[first, last)`の範囲を次の順列に変換する。
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって辞書順に並んでいる全ての順列の集合があると仮定すると、次の順列が発見される。
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって辞書順に並んでいる全ての順列の集合があると仮定すると、次の順列が発見される。
 
 順列の辞書順とは、同じ長さ`N`の順列`a, b`があった時、その最上位の項から見た時に`ai != bi`となる最初の`i`番目の項について、`ai &amp;lt; bi`（もしくは`comp(ai, bi) == true`）となる時に`a &amp;lt; b`とするように定めた順序のことである。例えばこれは、各項（`ai, bi`）が`0 ~ 9`の数であるとすれば、それらをそのまま並べて構成した数の通常の大小関係に等しい。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>none_of -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_none_of.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_none_of.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_none_of.md b/reference/algorithm/ranges_none_of.md
index 6521578ba..9d3bc4f7a 100644
--- a/reference/algorithm/ranges_none_of.md
+++ b/reference/algorithm/ranges_none_of.md
@@ -42,7 +42,7 @@ namespace std::ranges {
     - `Pred`は`R`のイテレータを`Proj`で射影した値を受け取る[単項述語](/reference/iterator/indirect_unary_predicate.md)である
 
 ## 戻り値
-`[first,last)` あるいは `r` が空であったり、範囲内の全てのイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `false` である場合は `true` を返し、そうでない場合は `false` を返す。
+`[first,last)` あるいは `r` が空であったり、範囲内の全てのイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `false` である場合は `true` を返し、そうでない場合は `false` を返す。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partial_sort_copy -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_partial_sort_copy.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_partial_sort_copy.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_partial_sort_copy.md b/reference/algorithm/ranges_partial_sort_copy.md
index 538b68a6a..bb5a1dd34 100644
--- a/reference/algorithm/ranges_partial_sort_copy.md
+++ b/reference/algorithm/ranges_partial_sort_copy.md
@@ -58,7 +58,7 @@ namespace std::ranges {
 - (2): Rangeを直接指定する
 
 ## 効果
-`N = `[`min`](/reference/algorithm/min.md)`(last - first, result_last - result_first)` とする。
+`N =` [`min`](/reference/algorithm/min.md)`(last - first, result_last - result_first)` とする。
 
 `[first,last)` にある要素の中から、`N` 個の要素をソート済みの状態で `[result_first,result_first + N)` に配置する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prev_permutation -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_prev_permutation.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_prev_permutation.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_prev_permutation.md b/reference/algorithm/ranges_prev_permutation.md
index 05d947f3a..b22921f44 100644
--- a/reference/algorithm/ranges_prev_permutation.md
+++ b/reference/algorithm/ranges_prev_permutation.md
@@ -41,7 +41,7 @@ namespace std::ranges {
 ## 効果
 `[first, last)`の範囲を前の順列に変換する。
 
-比較 [`invoke`](/reference/functional/invoke.md)`(comp, `[`invoke`](/reference/functional/invoke.md)`(proj, *i), `[`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって辞書順に並んでいる全ての順列の集合があると仮定すると、前の順列が発見される。
+比較 [`invoke`](/reference/functional/invoke.md)`(comp,` [`invoke`](/reference/functional/invoke.md)`(proj, *i),` [`invoke`](/reference/functional/invoke.md)`(proj, *j))` によって辞書順に並んでいる全ての順列の集合があると仮定すると、前の順列が発見される。
 
 ## 戻り値
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove_if -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_remove_if.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_remove_if.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_remove_if.md b/reference/algorithm/ranges_remove_if.md
index 5d3b31601..6ee0da6da 100644
--- a/reference/algorithm/ranges_remove_if.md
+++ b/reference/algorithm/ranges_remove_if.md
@@ -37,7 +37,7 @@ namespace std::ranges {
 
 
 ## 効果
-`[first,last)` 内にあるイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` である要素を取り除き、有効な要素を範囲の前に寄せる。
+`[first,last)` 内にあるイテレータ `i` について、[`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *i))` である要素を取り除き、有効な要素を範囲の前に寄せる。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_search.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_search.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_search.md b/reference/algorithm/ranges_search.md
index 51a1b2d16..4ff7e480e 100644
--- a/reference/algorithm/ranges_search.md
+++ b/reference/algorithm/ranges_search.md
@@ -46,7 +46,7 @@ namespace std::ranges {
 
 ## 戻り値
 - (1) :
-    - `[first1,last1 - (last2 - first2))` 内のイテレータ `i` があるとき、0 以上 `last2 - first2` 未満の整数 `n` について、それぞれ [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj1, *(i + n)), `[`invoke`](/reference/functional/invoke.md)`(proj2, *(first2 + n)))` であるようなサブシーケンスを探し、見つかった最初のサブシーケンスを返す。
+    - `[first1,last1 - (last2 - first2))` 内のイテレータ `i` があるとき、0 以上 `last2 - first2` 未満の整数 `n` について、それぞれ [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj1, *(i + n)),` [`invoke`](/reference/functional/invoke.md)`(proj2, *(first2 + n)))` であるようなサブシーケンスを探し、見つかった最初のサブシーケンスを返す。
     - そのようなイテレータが見つからない場合は `{last1, last1}` を返し、`[first2,last2)` が空である場合には `{first1, first1}` を返す。
 - (2): `first1 = begin(r1)`, `last1 = end(r1)`, `first2 = begin(r2)`, `last2 = end(r2)`の下で(1)と等しい。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>search_n -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_search_n.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_search_n.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_search_n.md b/reference/algorithm/ranges_search_n.md
index 52816a0f5..a14e481c4 100644
--- a/reference/algorithm/ranges_search_n.md
+++ b/reference/algorithm/ranges_search_n.md
@@ -66,7 +66,7 @@ namespace std::ranges {
 - (2): Rangeを直接指定する
 
 ## 戻り値
-`[first,last-count)` 内のイテレータ `i` があるとき、0 以上 `count` 未満の整数 `n` について、それぞれ [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *(i + n)), value)` であるようなサブシーケンスを探し、見つかった最初のサブシーケンスを返す。
+`[first,last-count)` 内のイテレータ `i` があるとき、0 以上 `count` 未満の整数 `n` について、それぞれ [`invoke`](/reference/functional/invoke.md)`(pred,` [`invoke`](/reference/functional/invoke.md)`(proj, *(i + n)), value)` であるようなサブシーケンスを探し、見つかった最初のサブシーケンスを返す。
 
 そのようなイテレータが見つからない場合は `{last, last}` を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>starts_with -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_starts_with.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_starts_with.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_starts_with.md b/reference/algorithm/ranges_starts_with.md
index 3dae90c87..a3e605434 100644
--- a/reference/algorithm/ranges_starts_with.md
+++ b/reference/algorithm/ranges_starts_with.md
@@ -47,7 +47,7 @@ namespace std::ranges {
 
 ## 戻り値
 
-[`ranges::mismatch`](ranges_mismatch.md)`(`[`std::move`](/reference/utility/move.md)`(first1), last1, `[`std::move`](/reference/utility/move.md)`(first2), last2, pred, proj1, proj2).in2 == last2`
+[`ranges::mismatch`](ranges_mismatch.md)`(`[`std::move`](/reference/utility/move.md)`(first1), last1,` [`std::move`](/reference/utility/move.md)`(first2), last2, pred, proj1, proj2).in2 == last2`
 
 ## 計算量
 最大で `min(last1 - first1, last2 - first2)` 回の対応する述語が適用される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap_ranges -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_swap_ranges.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/algorithm/ranges_swap_ranges.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_swap_ranges.md b/reference/algorithm/ranges_swap_ranges.md
index 0b17e98b7..eca99ff9a 100644
--- a/reference/algorithm/ranges_swap_ranges.md
+++ b/reference/algorithm/ranges_swap_ranges.md
@@ -55,7 +55,7 @@ swap_ranges_result {
 ```
 * swap_ranges_result[link ranges_in_in_result.md]
 
-ただし、`M = `[`min`](ranges_min.md)`(last1 - first1, last2 - first2)` とする。
+ただし、`M =` [`min`](ranges_min.md)`(last1 - first1, last2 - first2)` とする。
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fabs -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/fabs.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/cmath/fabs.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/fabs.md b/reference/cmath/fabs.md
index 62bbf60f1..80215e8eb 100644
--- a/reference/cmath/fabs.md
+++ b/reference/cmath/fabs.md
@@ -51,7 +51,7 @@ namespace std {
 
 ## 備考
 - $$ f(x) = | x | $$
-- C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)` != false`）、以下の規定が追加される。
+- C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md) `!= false`）、以下の規定が追加される。
 - `value = ±0` の場合、戻り値は `+0` となる。
 - `value = ±∞` の場合、戻り値は `+∞` となる。
 - 戻り値は正確で、現在の丸め方式には依存しない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>strong_order -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/compare/strong_order.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/compare/strong_order.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/strong_order.md b/reference/compare/strong_order.md
index 686fcd814..83c666685 100644
--- a/reference/compare/strong_order.md
+++ b/reference/compare/strong_order.md
@@ -27,7 +27,7 @@ namespace std {
 2. `std::strong_order`（本関数オブジェクト）の宣言を含まないコンテキストで、[`strong_ordering`](strong_ordering.md)`(strong_order(a, b))`が呼び出し可能ならば`strong_ordering(strong_order(a, b))`
 
 3. [`decay`](/reference/type_traits/decay.md)を通した`a, b`の型`T`が浮動小数点型の場合、`T`の組み込みの比較演算子による順序と一貫する[`strong_ordering`](strong_ordering.md)の値を返す。  
-   さらに、[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)` == true`の場合、その順序はISO/IEC/IEEE 60559の`totalOrder`による全順序と一致する。
+   さらに、[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md) `== true`の場合、その順序はISO/IEC/IEEE 60559の`totalOrder`による全順序と一致する。
 
 4. [`strong_ordering`](strong_ordering.md)`(a &amp;lt;=&amp;gt; b)`が呼び出し可能ならば`strong_ordering(a &amp;lt;=&amp;gt; b)`
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weak_order -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/compare/weak_order.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/compare/weak_order.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/weak_order.md b/reference/compare/weak_order.md
index cc44775a8..8af4f6595 100644
--- a/reference/compare/weak_order.md
+++ b/reference/compare/weak_order.md
@@ -28,7 +28,7 @@ namespace std {
 2. `std::weak_order`（本関数オブジェクト）の宣言を含まないコンテキストで、[`weak_ordering`](weak_ordering.md)`(weak_order(a, b))`が呼び出し可能ならば`weak_ordering(weak_order(a, b))`
 
 3. [`decay`](/reference/type_traits/decay.md)を通した`a, b`の型`T`が浮動小数点型の場合、`T`の組み込みの比較演算子および[`strong_order`](strong_order.md)による順序と一貫する[`weak_ordering`](weak_ordering.md)の値を返す。  
-   さらに、[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)` == true`の場合、追加で以下の同値類の順序に従った順序付けを行う。
+   さらに、[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md) `== true`の場合、追加で以下の同値類の順序に従った順序付けを行う。
 
     1. 全ての`-NaN`
     2. `-Inf`
@@ -87,7 +87,7 @@ namespace std {
 
 ## 備考
 
-[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md)` == true`の場合の浮動小数点数の比較において、各同値類間の順序は以下のようになる。
+[`numeric_limits&amp;lt;T&amp;gt;::is_iec559`](/reference/limits/numeric_limits/is_iec559.md) `== true`の場合の浮動小数点数の比較において、各同値類間の順序は以下のようになる。
 
 {全ての`-NaN`} ` &amp;lt; ` {`-Inf`} ` &amp;lt; ` {負の正規化数} ` &amp;lt; ` {負の非正規化数} ` &amp;lt; ` {`±0.0`} ` &amp;lt; ` {正の非正規化数} ` &amp;lt; ` {正の正規化数} ` &amp;lt; ` {`+Inf`} ` &amp;lt; ` {全ての`+NaN`}
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>INVOKE -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/Invoke.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/concepts/Invoke.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;named requirement&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace &#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;INVOKE&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;C++における関数呼び出しという性質を抽象化しまとめた、仮想操作 &lt;em&gt;INVOKE&lt;/em&gt; を定義する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++17からは、仮想操作 &lt;em&gt;INVOKE&lt;/em&gt; を実体化した&lt;code&gt;&lt;a href=&#34;../functional/invoke.html&#34;&gt;std::invoke&lt;/a&gt;&lt;/code&gt;関数テンプレートが提供される。&lt;/li&gt;
&lt;li&gt;C++23からは、仮想操作 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;&amp;lt;R&amp;gt;&lt;/code&gt; を実体化した&lt;code&gt;&lt;a href=&#34;../functional/invoke_r.html&#34;&gt;std::invoke_r&lt;/a&gt;&lt;/code&gt;関数テンプレートが提供される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;用語定義&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;call-signature&lt;/em&gt; とは、戻り値型に続けて丸カッコの中に0個以上の引数型を並べたものである。 &lt;em&gt;cf.&lt;/em&gt; &lt;code&gt;int ( std::string, int )&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;callable-type&lt;/em&gt; とは、関数呼び出し演算子を適用できる型 ( 関数、関数への参照、関数へのポインタ、&lt;code&gt;operator ()&lt;/code&gt; をオーバーロードした型もしくはそれを(直接または間接的に) &lt;code&gt;public&lt;/code&gt; 継承した型 ) もしくはメンバへのポインタ型を指す。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;callable-object&lt;/em&gt; は、 &lt;em&gt;callable-type&lt;/em&gt; 型のオブジェクトである。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;call-wrapper-type&lt;/em&gt; は、 &lt;em&gt;callable-object&lt;/em&gt; を保持し、自身に対する関数呼び出し操作が行われたとき、保持しているオブジェクトに委譲する。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;call-wrapper&lt;/em&gt; は、 &lt;em&gt;call-wrapper-type&lt;/em&gt; 型のオブジェクトである。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;target-object&lt;/em&gt; とは、 &lt;em&gt;callable-object&lt;/em&gt; に保持されているオブジェクトのことである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;要件（C++14まで）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;仮想操作 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; を次のように定義する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、 &lt;code&gt;t1&lt;/code&gt; が T 型のオブジェクトあるいは &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型への参照であるとき、 &lt;code&gt;(t1.*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、 &lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合、&lt;code&gt;((*t1).*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;t1&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; 型のオブジェクトあるいは &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型への参照であるとき、 &lt;code&gt;t1.*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合、 &lt;code&gt;(*t1).*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;上記の条件のどれにも当てはまらない場合、 &lt;code&gt;f(t1, t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN, R)&lt;/code&gt; を、 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; の実行結果の戻り値が型 &lt;code&gt;R&lt;/code&gt; に暗黙的に変換されること、と定義する。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;call-wrapper&lt;/em&gt; が &lt;em&gt;weak-result-type&lt;/em&gt; を用意している場合、メンバ型 &lt;code&gt;result_type&lt;/code&gt; は&lt;em&gt;target-object&lt;/em&gt; の型 &lt;code&gt;T&lt;/code&gt; に応じて次のように定義される。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; が関数へのポインタ型であるとき、 &lt;code&gt;result_type&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; の戻り値型と等しい。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; がメンバ関数へのポインタ型であるとき、 &lt;code&gt;result_type&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; の戻り値型と等しい。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;result_type&lt;/code&gt; という名前のメンバ型を持つとき、 &lt;code&gt;result_type&lt;/code&gt; は &lt;code&gt;T::result_type&lt;/code&gt; と等しい。&lt;/li&gt;
&lt;li&gt;どの条件にも当てはまらない場合、 &lt;code&gt;result_type&lt;/code&gt; は定義されない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;すべての &lt;em&gt;call-wrapper&lt;/em&gt; は、&lt;em&gt;MoveAssignable&lt;/em&gt; でなければならない。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;要件（C++17）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;仮想操作 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; を次のように定義する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/is_base_of.html&#34;&gt;is_base_of_v&lt;/a&gt;&amp;lt;T, &lt;a href=&#34;../type_traits/decay.html&#34;&gt;decay_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&amp;gt; == true&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型のオブジェクト/参照）であるとき、 &lt;code&gt;(t1.*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/decay.html&#34;&gt;decay_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;の特殊化）であるとき、 &lt;code&gt;(t1.get().*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、 &lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合（例えば、t1が&lt;code&gt;T&lt;/code&gt;のポインタ）、&lt;code&gt;((*t1).*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/is_base_of.html&#34;&gt;is_base_of_v&lt;/a&gt;&amp;lt;T, &lt;a href=&#34;../type_traits/decay.html&#34;&gt;decay_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&amp;gt; == true&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型のオブジェクト/参照）であるとき、 &lt;code&gt;t1.*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/decay.html&#34;&gt;decay_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;の特殊化）であるとき、 &lt;code&gt;t1.get().*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合（例えば、t1が&lt;code&gt;T&lt;/code&gt;のポインタ）、 &lt;code&gt;(*t1).*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;上記の条件のどれにも当てはまらない場合、 &lt;code&gt;f(t1, t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;&amp;lt;R&amp;gt;(f, t1, t2, ..., tN)&lt;/code&gt; を次のように定義する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt;が&lt;code&gt;void&lt;/code&gt;かそのcv修飾の場合は、&lt;code&gt;static_cast&amp;lt;void&amp;gt;(&lt;/code&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN))&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;それ以外の場合は、&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; の実行結果の戻り値が型 &lt;code&gt;R&lt;/code&gt; に暗黙的に変換されること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;すべての &lt;em&gt;call-wrapper&lt;/em&gt; は、&lt;em&gt;MoveConstructible&lt;/em&gt; でなければならない。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;要件（C++20）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;仮想操作 &lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; を次のように定義する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/is_base_of.html&#34;&gt;is_base_of_v&lt;/a&gt;&amp;lt;T, &lt;a href=&#34;../type_traits/remove_cvref.html&#34;&gt;remove_cvref_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&amp;gt; == true&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型のオブジェクト/参照）であるとき、 &lt;code&gt;(t1.*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/remove_cvref.html&#34;&gt;remove_cvref_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;の特殊化）であるとき、 &lt;code&gt;(t1.get().*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバ関数へのポインタであり、 &lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合（例えば、t1が&lt;code&gt;T&lt;/code&gt;のポインタ）、&lt;code&gt;((*t1).*f)(t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/is_base_of.html&#34;&gt;is_base_of_v&lt;/a&gt;&amp;lt;T, &lt;a href=&#34;../type_traits/remove_cvref.html&#34;&gt;remove_cvref_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&amp;gt; == true&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; または &lt;code&gt;T&lt;/code&gt; を継承した型のオブジェクト/参照）であるとき、 &lt;code&gt;t1.*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;&lt;a href=&#34;../type_traits/remove_cvref.html&#34;&gt;remove_cvref_t&lt;/a&gt;&amp;lt;decltype(t1)&amp;gt;&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;（&lt;code&gt;t1&lt;/code&gt;が&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;の特殊化）であるとき、 &lt;code&gt;t1.get().*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N == 1&lt;/code&gt; で、&lt;code&gt;f&lt;/code&gt; が型 &lt;code&gt;T&lt;/code&gt; のメンバオブジェクトへのポインタであり、&lt;code&gt;t1&lt;/code&gt; が上記の条件に当てはまらない場合（例えば、t1が&lt;code&gt;T&lt;/code&gt;のポインタ）、 &lt;code&gt;(*t1).*f&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;li&gt;上記の条件のどれにも当てはまらない場合、 &lt;code&gt;f(t1, t2, ..., tN)&lt;/code&gt; と同じ効果を持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;&amp;lt;R&amp;gt;(f, t1, t2, ..., tN)&lt;/code&gt; を次のように定義する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt;が&lt;code&gt;void&lt;/code&gt;かそのcv修飾の場合は、&lt;code&gt;static_cast&amp;lt;void&amp;gt;(&lt;/code&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN))&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;それ以外の場合は、&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, ..., tN)&lt;/code&gt; の実行結果の戻り値が型 &lt;code&gt;R&lt;/code&gt; に暗黙的に変換されること。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;すべての &lt;em&gt;call-wrapper&lt;/em&gt; は、&lt;em&gt;Cpp17MoveConstructible&lt;/em&gt; かつ &lt;em&gt;Cpp17Destructible&lt;/em&gt; でなければならない。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;要件（C++23差分）&lt;/h2&gt;
&lt;p&gt;C++20 における 2. について、次の文言を項目の最後に追加する。この変更は、&lt;code&gt;R&lt;/code&gt;が参照かつ&lt;em&gt;INVOKE&lt;/em&gt;の実行結果が&lt;code&gt;R&lt;/code&gt;に束縛されることで寿命が延長される場合にダングリング参照が作成されてしまう事例を検出するための要件である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../type_traits/reference_converts_from_temporary.html&#34;&gt;reference_converts_from_temporary_v&lt;/a&gt;&amp;lt;R, decltype(&lt;/code&gt;&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;(f, t1, t2, …, tN))&amp;gt; == true&lt;/code&gt;の場合、&lt;em&gt;INVOKE&lt;/em&gt;&lt;code&gt;&amp;lt;R&amp;gt;(f, t1, t2, …, tN)&lt;/code&gt;は&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/Cryolite/status/216814363221303296&#34; target=&#34;_blank&#34;&gt;第1引数がメンバ関数へのポインタの場合でも非静的メンバデータへのポインタの場合でも，第2引数がクラスオブジェクトへの参照の場合でもポインタの場合でもポインタっぽいものの場合でも，なんか知らんけどそれっぽく上手くいく&lt;/a&gt; ように取り計らった操作のことである。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../functional/function.html&#34;&gt;function&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../functional/reference_wrapper.html&#34;&gt;reference_wrapper&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../functional/bind.html&#34;&gt;bind&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../functional/mem_fn.html&#34;&gt;mem_fn&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../functional/not_fn.html&#34;&gt;not_fn&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../thread/thread.html&#34;&gt;thread&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../future/async.html&#34;&gt;async&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../future/packaged_task.html&#34;&gt;packaged_task&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;../mutex/call_once.html&#34;&gt;call_once&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0777r1.pdf&#34; target=&#34;_blank&#34;&gt;P0777R1 Treating Unnecessary &lt;code&gt;decay&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++20から&lt;code&gt;decay_t&lt;/code&gt;を&lt;code&gt;remove_cvref_t&lt;/code&gt;へ変更。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2136r3.html&#34; target=&#34;_blank&#34;&gt;P2136R3 &lt;code&gt;invoke_r&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assignable_from -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/assignable_from.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/concepts/assignable_from.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/assignable_from.md b/reference/concepts/assignable_from.md
index 571b8fcae..6bb059909 100644
--- a/reference/concepts/assignable_from.md
+++ b/reference/concepts/assignable_from.md
@@ -27,7 +27,7 @@ namespace std {
 
 これらの`lhs, rhs, lcopy, rcopy`について、以下の条件を満たす場合に限って、型`LHS, RHS`は`assignable_from`のモデルである。
 
-- [`addressof`](/reference/memory/addressof.md)`(lhs = rhs) == `[`addressof`](/reference/memory/addressof.md)`(lcopy)`となる
+- [`addressof`](/reference/memory/addressof.md)`(lhs = rhs) ==` [`addressof`](/reference/memory/addressof.md)`(lcopy)`となる
 - `lhs = rhs;`という式の評価の後で以下のことが成り立っている
     - `rhs`が`lcopy`を参照する非`const` *xvalue*でない（ムーブが起こる自己代入ではない）場合
         - `lhs`は`rcopy`と等値である
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_reference_with -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/concepts/common_reference_with.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/concepts/common_reference_with.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/common_reference_with.md b/reference/concepts/common_reference_with.md
index b34c5de45..75da3c5d1 100644
--- a/reference/concepts/common_reference_with.md
+++ b/reference/concepts/common_reference_with.md
@@ -20,7 +20,7 @@ namespace std {
 
 2つの型`T, U`は以下の全ての条件を満たす場合にのみ、共通の参照型を持つ。
 
-- `C = `[`common_reference_t&amp;lt;T, U&amp;gt;`](/reference/type_traits/common_reference.md)が有効な型である
+- `C =` [`common_reference_t&amp;lt;T, U&amp;gt;`](/reference/type_traits/common_reference.md)が有効な型である
 - 型`T, C`は、[`convertible_to&amp;lt;T, C&amp;gt;`](/reference/concepts/convertible_to.md)のモデルである
 - 型`U, C`は、[`convertible_to&amp;lt;U, C&amp;gt;`](/reference/concepts/convertible_to.md)のモデルである
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>read -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/istream/basic_istream/read.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/istream/basic_istream/read.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/istream/basic_istream/read.md b/reference/istream/basic_istream/read.md
index ffd997e0e..54546482c 100644
--- a/reference/istream/basic_istream/read.md
+++ b/reference/istream/basic_istream/read.md
@@ -22,7 +22,7 @@ basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; read(char_type* s, streamsize n);
 1. [`good`](../../ios/basic_ios/good.md)`()`メンバ関数を呼び出して`false`であったら、[`setstate`](../../ios/basic_ios/setstate.md)`(`[`failbit`](../../ios/ios_base/type-iostate.md)`)`を呼び出して終了する。
 1. 以下のいずれかを満たすまで、文字を入力して書き込む。
     - 実引数で指定された`n`文字まで入力した。
-    - EOFに達した。この場合、[`setstate`](../../ios/basic_ios/setstate.md)`(`[`failbit`](../../ios/ios_base/type-iostate.md)` | `[`eofbit`](../../ios/ios_base/type-iostate.md)`)`を呼び出す。
+    - EOFに達した。この場合、[`setstate`](../../ios/basic_ios/setstate.md)`(`[`failbit`](../../ios/ios_base/type-iostate.md) `|` [`eofbit`](../../ios/ios_base/type-iostate.md)`)`を呼び出す。
 
 ## 戻り値
 `*this`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bidirectional_iterator -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/bidirectional_iterator.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/iterator/bidirectional_iterator.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/bidirectional_iterator.md b/reference/iterator/bidirectional_iterator.md
index 02529f8e9..55ab58797 100644
--- a/reference/iterator/bidirectional_iterator.md
+++ b/reference/iterator/bidirectional_iterator.md
@@ -35,7 +35,7 @@ namespace std {
 型`I`の等しい2つのオブジェクト（同じ要素を指すイテレータ）`a, b`について次の条件を満たす場合に限って、型`I`は`bidirectional_iterator`のモデルである。
 
 - `a, b`がデクリメント可能ならば、次の4つの条件を全て満たす
-    - [`addressof`](/reference/memory/addressof.md)`(--a) == `[`addressof`](/reference/memory/addressof.md)`(a)`
+    - [`addressof`](/reference/memory/addressof.md)`(--a) ==` [`addressof`](/reference/memory/addressof.md)`(a)`
     - `bool(a-- == b)`
     - `a--, --b`の評価の後でも、`bool(a == b)`は`true`となる
     - `bool(++(--a) == b)`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_increment.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/iterator/counted_iterator/op_increment.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_increment.md b/reference/iterator/counted_iterator/op_increment.md
index a84ecd032..7d04b481b 100644
--- a/reference/iterator/counted_iterator/op_increment.md
+++ b/reference/iterator/counted_iterator/op_increment.md
@@ -22,7 +22,7 @@ constexpr counted_iterator operator++(int)
 
 ## 事前条件
 
-- (1), (2) : [`count()`](count.md)` &amp;gt; 0`
+- (1), (2) : [`count()`](count.md) `&amp;gt; 0`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is-integer-like -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/is_integer_like.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/iterator/is_integer_like.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/is_integer_like.md b/reference/iterator/is_integer_like.md
index 6e914ca95..4b245bce2 100644
--- a/reference/iterator/is_integer_like.md
+++ b/reference/iterator/is_integer_like.md
@@ -47,7 +47,7 @@ namespace std {
 *integer-class*型`I`について[`numeric_limits&amp;lt;I&amp;gt;`](/reference/limits/numeric_limits.md)の特殊化は次のような値を示す。
 
 - `numeric_limits&amp;lt;I&amp;gt;::is_specialized == true`
-- [`numeric_limits&amp;lt;I&amp;gt;::is_signed`](/reference/limits/numeric_limits/is_signed.md)` == true`
+- [`numeric_limits&amp;lt;I&amp;gt;::is_signed`](/reference/limits/numeric_limits/is_signed.md) `== true`
     - `I`が*signed-integer-class*型の場合のみ
 - [`numeric_limits&amp;lt;I&amp;gt;::digits`](/reference/limits/numeric_limits/digits.md)は`I`の幅と等しい
 - [`numeric_limits&amp;lt;I&amp;gt;::digits10`](/reference/limits/numeric_limits/digits10.md)は`static_cast&amp;lt;int&amp;gt;(digits * log10(2))`と等しい
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>distance -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ranges_distance.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/iterator/ranges_distance.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ranges_distance.md b/reference/iterator/ranges_distance.md
index 2b861dff6..6c23e29c7 100644
--- a/reference/iterator/ranges_distance.md
+++ b/reference/iterator/ranges_distance.md
@@ -38,7 +38,7 @@ namespace std::ranges {
     - それ以外の場合 : `first`から`last`に到達するのに必要なインクリメントの回数を返す。
 - (2) : 次のいずれかによって、範囲の長さを求める。
     - `R`が[`sized_range`](/reference/ranges/sized_range.md)`&amp;lt;R&amp;gt;`のモデルとなる : `return static_cast&amp;lt;`[`range_difference_t`](/reference/ranges/range_difference_t.md)`&amp;lt;R&amp;gt;&amp;gt;(`[`ranges::size`](/reference/ranges/size.md)`(r));`
-    - それ以外の場合 : `return ranges::distance(`[`ranges::begin`](/reference/ranges/begin.md)`(r), `[`ranges::end`](/reference/ranges/end.md)`(r))` （(1)に委譲）
+    - それ以外の場合 : `return ranges::distance(`[`ranges::begin`](/reference/ranges/begin.md)`(r),` [`ranges::end`](/reference/ranges/end.md)`(r))` （(1)に委譲）
 
 ## 戻り値
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>construct -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator_traits/construct.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/memory/allocator_traits/construct.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator_traits/construct.md b/reference/memory/allocator_traits/construct.md
index 4ba9b16bd..10c4ff427 100644
--- a/reference/memory/allocator_traits/construct.md
+++ b/reference/memory/allocator_traits/construct.md
@@ -18,9 +18,9 @@ static constexpr void construct(Alloc&amp;amp; a, T* p, Args&amp;amp;&amp;amp;... args);    // C++20 か
 
 ## 効果
 - C++17 まで
-	`a.construct(p, `[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` という式が有効ならそれを呼び出し、そうでなければデフォルト実装として `::new(static_cast&amp;lt;void*&amp;gt;(p)) T(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` を呼び出す。
+	`a.construct(p,` [`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` という式が有効ならそれを呼び出し、そうでなければデフォルト実装として `::new(static_cast&amp;lt;void*&amp;gt;(p)) T(`[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` を呼び出す。
 - C++20 から
-	`a.construct(p, `[`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` という式が有効ならそれを呼び出し、そうでなければデフォルト実装として [`construct_at`](../construct_at.md)`(p,` [`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`を呼び出す。
+	`a.construct(p,` [`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` という式が有効ならそれを呼び出し、そうでなければデフォルト実装として [`construct_at`](../construct_at.md)`(p,` [`forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`を呼び出す。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_constructor.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/memory/unique_ptr/op_constructor.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_constructor.md b/reference/memory/unique_ptr/op_constructor.md
index 079deb033..edd997a38 100644
--- a/reference/memory/unique_ptr/op_constructor.md
+++ b/reference/memory/unique_ptr/op_constructor.md
@@ -72,9 +72,9 @@ unique_ptr(const unique_ptr&amp;amp;) = delete;      // (9) 単一オブジェクト、
 ### C++17 共通
 
 - (1), (2), (6) : 以下のいずれかの条件を満たす場合、オーバーロード解決に参加しない。
-    - [`is_pointer_v&amp;lt;deleter_type&amp;gt;`](/reference/type_traits/is_pointer.md)` == true`である（デリータがポインタである）
+    - [`is_pointer_v&amp;lt;deleter_type&amp;gt;`](/reference/type_traits/is_pointer.md) `== true`である（デリータがポインタである）
     - [`is_default_constructible_v&amp;lt;deleter_type&amp;gt;`](/reference/type_traits/is_default_constructible.md) `== false`である（デリータがデフォルト構築できない）
-- (3), (4) : [`is_constructible_v&amp;lt;D, decltype(d)&amp;gt;`](/reference/type_traits/is_constructible.md)` == true`の（`d`からコピー/ムーブ構築可能な）場合にのみオーバーロード解決に参加する。
+- (3), (4) : [`is_constructible_v&amp;lt;D, decltype(d)&amp;gt;`](/reference/type_traits/is_constructible.md) `== true`の（`d`からコピー/ムーブ構築可能な）場合にのみオーバーロード解決に参加する。
 - (3), (4), (6) : [クラステンプレートの実引数推定](/lang/cpp17/type_deduction_for_class_templates.md)によってこれらのコンストラクタが選択される場合、コンパイルエラーとなる。
 
 ### C++17 配列版
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mersenne_twister_engine -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/random/mersenne_twister_engine.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/random/mersenne_twister_engine.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/mersenne_twister_engine.md b/reference/random/mersenne_twister_engine.md
index 4f9fb71ad..be41226f4 100644
--- a/reference/random/mersenne_twister_engine.md
+++ b/reference/random/mersenne_twister_engine.md
@@ -51,7 +51,7 @@ namespace std {
 * `s &amp;lt;= w`
 * `t &amp;lt;= w`
 * `l &amp;lt;= w`
-* `w &amp;lt;= `[`std::numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;UIntType&amp;gt;::`[`digits`](/reference/limits/numeric_limits/digits.md)
+* `w &amp;lt;=` [`std::numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;UIntType&amp;gt;::`[`digits`](/reference/limits/numeric_limits/digits.md)
 * `a &amp;lt;= (1u &amp;lt;&amp;lt; w) - 1u`
 * `b &amp;lt;= (1u &amp;lt;&amp;lt; w) - 1u`
 * `c &amp;lt;= (1u &amp;lt;&amp;lt; w) - 1u`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>subtract_with_carry_engine -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/random/subtract_with_carry_engine.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine.md b/reference/random/subtract_with_carry_engine.md
index 5964ca321..4f9d01b15 100644
--- a/reference/random/subtract_with_carry_engine.md
+++ b/reference/random/subtract_with_carry_engine.md
@@ -26,7 +26,7 @@ namespace std {
 テンプレートパラメータの意味は以下の通り:
 
 * `UIntType`: 生成する符号なし整数の型。
-* `w`: ワードサイズ。`0 &amp;lt; w &amp;lt;= `[`std::numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;UIntType&amp;gt;::`[`digits`](/reference/limits/numeric_limits/digits.md) でなければならない。
+* `w`: ワードサイズ。`0 &amp;lt; w &amp;lt;=` [`std::numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;UIntType&amp;gt;::`[`digits`](/reference/limits/numeric_limits/digits.md) でなければならない。
 * `s`: 短いラグ。`0 &amp;lt; s &amp;lt; r` でなければならない。
 * `r`: 長いラグ。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_transform_view -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_transform_view.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/adjacent_transform_view.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_transform_view.md b/reference/ranges/adjacent_transform_view.md
index 96e092134..51d29ffe1 100644
--- a/reference/ranges/adjacent_transform_view.md
+++ b/reference/ranges/adjacent_transform_view.md
@@ -43,8 +43,8 @@ namespace std::ranges {
 ## 効果
 
 - (2): 式 `views::adjacent_transform&amp;lt;N&amp;gt;(E, F)` の効果は以下の通り。
-    - `N` &amp;gt; 0 のとき、`adjacent_transform_view&amp;lt;`[`views::all_t`](all.md)`&amp;lt;decltype((E))&amp;gt;, `[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((F))&amp;gt;, N&amp;gt;(E, F)` と等しい
-    - `N` = 0 のとき、`((void)E, `[`views::zip_transform`](zip_transform_view.md)`(F))` と等しい(ただし`E`と`F`の評価順は不定)
+    - `N` &amp;gt; 0 のとき、`adjacent_transform_view&amp;lt;`[`views::all_t`](all.md)`&amp;lt;decltype((E))&amp;gt;,` [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((F))&amp;gt;, N&amp;gt;(E, F)` と等しい
+    - `N` = 0 のとき、`((void)E,` [`views::zip_transform`](zip_transform_view.md)`(F))` と等しい(ただし`E`と`F`の評価順は不定)
 
 ## 備考
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_view -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/adjacent_view.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view.md b/reference/ranges/adjacent_view.md
index f62fe4691..d9c9591b5 100644
--- a/reference/ranges/adjacent_view.md
+++ b/reference/ranges/adjacent_view.md
@@ -43,7 +43,7 @@ namespace std::ranges {
 
 - (2): 式`views::adjacent&amp;lt;N&amp;gt;(E)`の効果は次の通り
     - `N` &amp;gt; 0 のとき、`adjacent_view&amp;lt;`[`views::all_t`](all.md)`&amp;lt;decltype((E))&amp;gt;, N&amp;gt;(E)` と等しい
-    - `N` = 0 のとき、`auto((void)E, `[`views::empty`](empty_view.md)`&amp;lt;`[`tuple`](/reference/tuple/tuple.md)`&amp;lt;&amp;gt;&amp;gt;))` と等しい
+    - `N` = 0 のとき、`auto((void)E,` [`views::empty`](empty_view.md)`&amp;lt;`[`tuple`](/reference/tuple/tuple.md)`&amp;lt;&amp;gt;&amp;gt;))` と等しい
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_rvalue_view -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_rvalue_view.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/as_rvalue_view.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_rvalue_view.md b/reference/ranges/as_rvalue_view.md
index 5cc35e836..46c94177d 100644
--- a/reference/ranges/as_rvalue_view.md
+++ b/reference/ranges/as_rvalue_view.md
@@ -47,7 +47,7 @@ std::ranges::copy(words | views::as_rvalue, std::back_inserter(new_words));
 ## 効果
 
 - (2): 式`views::as_rvalue(E)`はRangeアダプタオブジェクトを表し、その効果は次の通り
-    - 要素がすでに右辺値参照であれば(`T = decltype((E))`として、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;`[`range_rvalue_reference_t`](range_rvalue_reference_t.md)`&amp;lt;T&amp;gt;, `[`range_reference_t`](range_reference_t.md)`&amp;lt;T&amp;gt;&amp;gt;`)、[`views::all`](all.md)`(E)`と等しい
+    - 要素がすでに右辺値参照であれば(`T = decltype((E))`として、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;`[`range_rvalue_reference_t`](range_rvalue_reference_t.md)`&amp;lt;T&amp;gt;,` [`range_reference_t`](range_reference_t.md)`&amp;lt;T&amp;gt;&amp;gt;`)、[`views::all`](all.md)`(E)`と等しい
     - それ以外のとき、`as_rvalue_view{E}`と等しい
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contiguous_range -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/contiguous_range.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/contiguous_range.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/contiguous_range.md b/reference/ranges/contiguous_range.md
index b19edd5ff..4351bf023 100644
--- a/reference/ranges/contiguous_range.md
+++ b/reference/ranges/contiguous_range.md
@@ -23,7 +23,7 @@ namespace std::ranges {
 
 ## モデル
 `decltype((t))`が`T&amp;amp;`であるような式`t`があるとする。
-`T`が`contiguous_range`のモデルとなるのは、[`to_address`](/reference/memory/to_address.md)`(`[`ranges::begin`](begin.md)`(t)) == `[`ranges::data`](data.md)`(t)`が`true`となる場合である。
+`T`が`contiguous_range`のモデルとなるのは、[`to_address`](/reference/memory/to_address.md)`(`[`ranges::begin`](begin.md)`(t)) ==` [`ranges::data`](data.md)`(t)`が`true`となる場合である。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copyable-box -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/copyable_box.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/copyable_box.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/copyable_box.md b/reference/ranges/copyable_box.md
index f323cf7bb..f75ffd342 100644
--- a/reference/ranges/copyable_box.md
+++ b/reference/ranges/copyable_box.md
@@ -11,7 +11,7 @@
 `copyable-box&amp;lt;T&amp;gt;` は、[`std::optional`](/reference/optional/optional.md)`&amp;lt;T&amp;gt;`とほとんど同じであるものの、以下の差分がある。
 
 ### 差分1
-テンプレートパラメーター制約 [`copy_constructible`](/reference/concepts/copy_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp; `[`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;T&amp;gt;` をもつ。
+テンプレートパラメーター制約 [`copy_constructible`](/reference/concepts/copy_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;T&amp;gt;` をもつ。
 
 ### 差分2
 `T`が[`copyable`](/reference/concepts/copyable.md)のモデルでない場合、コピー代入演算子は以下のように定義される。
@@ -52,7 +52,7 @@ constexpr copyable-box&amp;amp; operator=(copyable-box&amp;amp;&amp;amp; that) noexcept(is_nothrow_move_
 以下のことが推奨される。
 
 - [`copy_constructible`](/reference/concepts/copy_constructible.md)`&amp;lt;T&amp;gt;` なら、`movable-box&amp;lt;T&amp;gt;` は
-`T` が [`copyable`](/reference/concepts/copyable.md)のモデルであるか、[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp; `[`is_nothrow_copy_constructible_v`](/reference/type_traits/is_nothrow_copy_constructible.md)`&amp;lt;T&amp;gt;`を満たす場合のみ値を保持する。
+`T` が [`copyable`](/reference/concepts/copyable.md)のモデルであるか、[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_copy_constructible_v`](/reference/type_traits/is_nothrow_copy_constructible.md)`&amp;lt;T&amp;gt;`を満たす場合のみ値を保持する。
 
 ## 備考
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/counted.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/counted.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/counted.md b/reference/ranges/counted.md
index b4a84f7fe..42d352c9a 100644
--- a/reference/ranges/counted.md
+++ b/reference/ranges/counted.md
@@ -32,7 +32,7 @@ namespace std::ranges::views {
 - [`decltype`](/lang/cpp11/decltype.md)`((F))`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;D&amp;gt;`のモデルでなければ、呼び出しは不適格。
 - `T`が[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)のモデルであれば、[`span`](/reference/span/span.md)`(`[`to_address`](/reference/memory/to_address.md)`(E), static_cast&amp;lt;D&amp;gt;(F))`と等しい。
 - `T`が[`random_access_iterator`](/reference/iterator/random_access_iterator.md)のモデルであれば、[`subrange`](subrange.md)`(E, E + static_cast&amp;lt;D&amp;gt;(F))`と等しい。
-- それ以外のとき、[`subrange`](subrange.md)`(`[`counted_iterator`](/reference/iterator/counted_iterator.md)`(E, F), `[`default_sentinel`](/reference/iterator/default_sentinel_t.md)`)`と等しい。
+- それ以外のとき、[`subrange`](subrange.md)`(`[`counted_iterator`](/reference/iterator/counted_iterator.md)`(E, F),` [`default_sentinel`](/reference/iterator/default_sentinel_t.md)`)`と等しい。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>drop_view -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/drop_view.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view.md b/reference/ranges/drop_view.md
index 3ff0f4ddb..e2187b6d3 100644
--- a/reference/ranges/drop_view.md
+++ b/reference/ranges/drop_view.md
@@ -37,9 +37,9 @@ namespace std::ranges {
 
 - (2): `E`および`F`を式、型`T`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;`、型`D`を[`range_difference_t`](range_difference_t.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;`とする。式`views::drop(E, F)`の効果は以下の通り
     - [`decltype`](/lang/cpp11/decltype.md)`((F))`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;D&amp;gt;`のモデルでなければ、呼び出しは不適格
-    - `T`が[`ranges::empty_view`](empty_view.md)の特殊化であれば、`((void) F, `[`decay-copy`](/reference/exposition-only/decay-copy.md)`(E))`と等しい。ただし、`E`と`F`の評価順序は不定順で序列化(indeterminately sequenced)される
-    - `T`が[`random_access_range`](random_access_range.md)および[`sized_range`](sized_range.md)のモデルであり、かつ次のいずれかの特殊化であるとき、`T(`[`ranges::begin`](begin.md)`(E) + `[`min`](/reference/algorithm/min.md)`&amp;lt;D&amp;gt;(`[`ranges::size`](size.md)`(E), F), `[`ranges::end`](end.md)`(E))`と等しい。ただし、`E`は1度だけ評価される
-        - [`span`](/reference/span/span.md) (ただし、`T::extent == `[`dynamic_extent`](/reference/span/dynamic_extent.md)であること)
+    - `T`が[`ranges::empty_view`](empty_view.md)の特殊化であれば、`((void) F,` [`decay-copy`](/reference/exposition-only/decay-copy.md)`(E))`と等しい。ただし、`E`と`F`の評価順序は不定順で序列化(indeterminately sequenced)される
+    - `T`が[`random_access_range`](random_access_range.md)および[`sized_range`](sized_range.md)のモデルであり、かつ次のいずれかの特殊化であるとき、`T(`[`ranges::begin`](begin.md)`(E) +` [`min`](/reference/algorithm/min.md)`&amp;lt;D&amp;gt;(`[`ranges::size`](size.md)`(E), F),` [`ranges::end`](end.md)`(E))`と等しい。ただし、`E`は1度だけ評価される
+        - [`span`](/reference/span/span.md) (ただし、`T::extent ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)であること)
         - [`basic_string_view`](/reference/string_view/basic_string_view.md)
         - [`ranges::iota_view`](iota_view.md)
         - [`ranges::subrange`](subrange.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>drop_while_view -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_while_view.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/drop_while_view.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_while_view.md b/reference/ranges/drop_while_view.md
index 34652be4f..6c44b9c03 100644
--- a/reference/ranges/drop_while_view.md
+++ b/reference/ranges/drop_while_view.md
@@ -33,7 +33,7 @@ namespace std::ranges {
 - [`view`](view.md)`&amp;lt;V&amp;gt;`
 - [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
 - [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;Pred&amp;gt;`
-- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred, `[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred,` [`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/empty.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty.md b/reference/ranges/empty.md
index 6db3ae67d..795c06473 100644
--- a/reference/ranges/empty.md
+++ b/reference/ranges/empty.md
@@ -21,7 +21,7 @@ Rangeが空かどうかを判定する関数オブジェクト。
 1. `T`が要素数不明の配列型であれば、呼び出しは不適格。
 2. `bool(t.empty())`が有効な式であれば、`bool(t.empty())`と等しい。
 3. [`ranges::size`](size.md)`(t) == 0`が有効な式であれば、`(`[`ranges::size`](size.md)`(t) == 0)`と等しい。
-4. `bool(`[`ranges::begin`](begin.md)`(t) == `[`ranges::end`](end.md)`(t))`が有効な式で、[`ranges::begin`](begin.md)`(t)`の型が[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルであれば、`bool(`[`ranges::begin`](begin.md)`(t) == `[`ranges::end`](end.md)`(t))`と等しい。
+4. `bool(`[`ranges::begin`](begin.md)`(t) ==` [`ranges::end`](end.md)`(t))`が有効な式で、[`ranges::begin`](begin.md)`(t)`の型が[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルであれば、`bool(`[`ranges::begin`](begin.md)`(t) ==` [`ranges::end`](end.md)`(t))`と等しい。
 
 どれにも当てはまらないとき、呼び出しは不適格。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/end.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/end.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/end.md b/reference/ranges/end.md
index 2c53473a1..9aa35f546 100644
--- a/reference/ranges/end.md
+++ b/reference/ranges/end.md
@@ -20,7 +20,7 @@ Rangeから最後尾要素の次を指すイテレータもしくは番兵を取
 このとき、式`ranges::begin(E)`の効果は以下の通り。
 
 1. `E`がrvalueかつ[`enable_borrowed_range`](enable_borrowed_range.md)`&amp;lt;`[`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;T&amp;gt;&amp;gt;`が`false`であれば、呼び出しは不適格。
-2. `T`が配列型であれば、`t + `[`extent_v`](/reference/type_traits/extent.md)`&amp;lt;T&amp;gt;`に等しい(expression‑equivalent)。ただし、要素数不明の配列か、[`remove_all_extents_t`](/reference/type_traits/remove_all_extents.md)`&amp;lt;T&amp;gt;`が不完全型であれば、呼び出しは不適格(診断不要)。
+2. `T`が配列型であれば、`t +` [`extent_v`](/reference/type_traits/extent.md)`&amp;lt;T&amp;gt;`に等しい(expression‑equivalent)。ただし、要素数不明の配列か、[`remove_all_extents_t`](/reference/type_traits/remove_all_extents.md)`&amp;lt;T&amp;gt;`が不完全型であれば、呼び出しは不適格(診断不要)。
 3. [`decay-copy`](/reference/exposition-only/decay-copy.md)`(t.end())`が有効な式でその型が[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;T&amp;gt;&amp;gt;`のモデルであれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(t.end())`と等しい。
 4. `T`がクラス型または列挙体であって、`end`がADLで見つかり、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(end(t))`が有効な式でその型が[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;T&amp;gt;&amp;gt;`のモデルであれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(end(t))`と等しい。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>enumerate_view -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/enumerate_view.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/enumerate_view.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/enumerate_view.md b/reference/ranges/enumerate_view.md
index 98534eaa3..536c9bf83 100644
--- a/reference/ranges/enumerate_view.md
+++ b/reference/ranges/enumerate_view.md
@@ -20,7 +20,7 @@ namespace std::ranges {
 
 `enumerate_view`はインデックスを付ける[`view`](view.md)。
 
-`enumerate_view`の要素は、インデックスと元のRangeの要素からなる[`tuple`](/reference/tuple/tuple.md) ([`tuple`](/reference/tuple/tuple.md)`&amp;lt;`[`range_difference_t`](range_difference_t.md)`&amp;lt;Base&amp;gt;, `[`range_value_t`](range_value_t.md)`&amp;lt;Base&amp;gt;&amp;gt;`)である。
+`enumerate_view`の要素は、インデックスと元のRangeの要素からなる[`tuple`](/reference/tuple/tuple.md) ([`tuple`](/reference/tuple/tuple.md)`&amp;lt;`[`range_difference_t`](range_difference_t.md)`&amp;lt;Base&amp;gt;,` [`range_value_t`](range_value_t.md)`&amp;lt;Base&amp;gt;&amp;gt;`)である。
 
 - (1): `enumerate_view`のクラス定義
 - (2): `enumerate_view`を生成するRangeアダプタオブジェクト
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>filter_view -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/filter_view.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view.md b/reference/ranges/filter_view.md
index 31d7da22f..520a81288 100644
--- a/reference/ranges/filter_view.md
+++ b/reference/ranges/filter_view.md
@@ -44,7 +44,7 @@ namespace std::ranges {
 - [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
 - [`view`](view.md)`&amp;lt;V&amp;gt;`
 - [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;Pred&amp;gt;`
-- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred, `[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred,` [`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/begin.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/filter_view/begin.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/begin.md b/reference/ranges/filter_view/begin.md
index 37761a1b9..d898a7d49 100644
--- a/reference/ranges/filter_view/begin.md
+++ b/reference/ranges/filter_view/begin.md
@@ -20,7 +20,7 @@ constexpr iterator begin();
 
 ## 戻り値
 
-`{*this, `[`ranges::find_if`](/reference/algorithm/ranges_find_if.md)`(base_, `[`ref`](/reference/functional/ref.md)`(*pred_))}`
+`{*this,` [`ranges::find_if`](/reference/algorithm/ranges_find_if.md)`(base_,` [`ref`](/reference/functional/ref.md)`(*pred_))}`
 
 [`range`](../range.md)のモデルとなるためにはこの関数が償却定数時間で実行できなければならないため、値はキャッシュされる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>movable-box -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/movable_box.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/movable_box.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/movable_box.md b/reference/ranges/movable_box.md
index 83d23d18f..40a72fd5a 100644
--- a/reference/ranges/movable_box.md
+++ b/reference/ranges/movable_box.md
@@ -10,7 +10,7 @@
 `movable-box&amp;lt;T&amp;gt;` は、[`std::optional`](/reference/optional/optional.md)`&amp;lt;T&amp;gt;`とほとんど同じであるが、以下の差分をもつ。
 
 ### 差分1
-テンプレートパラメーター制約 [`move_constructible`](/reference/concepts/move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp; `[`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;T&amp;gt;` をもつ。
+テンプレートパラメーター制約 [`move_constructible`](/reference/concepts/move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;T&amp;gt;` をもつ。
 
 ### 差分2
 `T`が[`copyable`](/reference/concepts/copyable.md)のモデルでない場合、コピー代入演算子は以下のように定義される。
@@ -51,7 +51,7 @@ constexpr movable-box&amp;amp; operator=(movable-box&amp;amp;&amp;amp; that) noexcept(is_nothrow_move_co
 以下のことが推奨される。
 
 - [`copy_constructible`](/reference/concepts/copy_constructible.md)`&amp;lt;T&amp;gt;` なら、`movable-box&amp;lt;T&amp;gt;` は
-`T` が [`copyable`](/reference/concepts/copyable.md)のモデルであるか、[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp; `[`is_nothrow_copy_constructible_v`](/reference/type_traits/is_nothrow_copy_constructible.md)`&amp;lt;T&amp;gt;`を満たす場合のみ値を保持する。
+`T` が [`copyable`](/reference/concepts/copyable.md)のモデルであるか、[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_copy_constructible_v`](/reference/type_traits/is_nothrow_copy_constructible.md)`&amp;lt;T&amp;gt;`を満たす場合のみ値を保持する。
 - そうでなければ、`movable-box&amp;lt;T&amp;gt;` は
 `T` が [`movable`](/reference/concepts/movable.md)のモデルであるか、[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt;`を満たす場合のみ値を保持する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reverse_view -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/reverse_view.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/reverse_view.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/reverse_view.md b/reference/ranges/reverse_view.md
index fe830f44a..1245ac080 100644
--- a/reference/ranges/reverse_view.md
+++ b/reference/ranges/reverse_view.md
@@ -37,7 +37,7 @@ namespace std::ranges {
 
 - (2): 式`views::reverse(E)`の効果は次の通り
     - `E`の型が`reverse_view`の特殊化であれば、`E.base()`と等しい (CV修飾されている場合を含む)
-    - イテレータ型`I`、[`subrange_kind`](subrange_kind.md)の値`K`に対し、`E`の型がCV修飾された[`subrange`](subrange.md)`&amp;lt;`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;I&amp;gt;, `[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;I&amp;gt;, K&amp;gt;`であるとする。このとき、`E`は一度しか評価されないとして、
+    - イテレータ型`I`、[`subrange_kind`](subrange_kind.md)の値`K`に対し、`E`の型がCV修飾された[`subrange`](subrange.md)`&amp;lt;`[`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;I&amp;gt;,` [`reverse_iterator`](/reference/iterator/reverse_iterator.md)`&amp;lt;I&amp;gt;, K&amp;gt;`であるとする。このとき、`E`は一度しか評価されないとして、
         - `K`が[`subrange_kind::sized`](subrange_kind.md)であれば、[`subrange`](subrange.md)`&amp;lt;I, I, K&amp;gt;(E.end().base(), E.begin().base(), E.size())`と等しい
         - それ以外のとき、[`subrange`](subrange.md)`&amp;lt;I, I, K&amp;gt;(E.end().base(), E.begin().base())`と等しい
     - それ以外のとき、`reverse_view{E}`と等しい
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/size.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/size.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/size.md b/reference/ranges/size.md
index 48a6eca92..1d051293d 100644
--- a/reference/ranges/size.md
+++ b/reference/ranges/size.md
@@ -21,7 +21,7 @@ Rangeの要素数を取得する関数オブジェクト。
 1. `T`が配列型であれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(`[`extent_v`](/reference/type_traits/extent.md)`&amp;lt;T&amp;gt;)`に等しい(expression‑equivalent)。ただし、要素数不明の配列であれば、呼び出しは不適格。
 2. [`disable_sized_range`](disable_sized_range.md)`&amp;lt;`[`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;T&amp;gt;&amp;gt;`が`false`、かつ[`decay-copy`](/reference/exposition-only/decay-copy.md)`(t.size())`が整数型(integer-like)の有効な式であれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(t.size())`と等しい。
 3. `T`がクラス型または列挙体であって、[`disable_sized_range`](disable_sized_range.md)`&amp;lt;`[`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;T&amp;gt;&amp;gt;`が`false`、かつ`size`がADLで見つかり、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(size(t))`が整数型の有効な式であれば、[`decay-copy`](/reference/exposition-only/decay-copy.md)`(size(t))`と等しい。
-4. `to-unsigned-like(`[`ranges::end`](end.md)`(t) - `[`ranges::begin`](begin.md)`(t))`が有効な式で、[`ranges::begin`](begin.md)の型`I`、[`ranges::end`](end.md)の型`S`が[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`と[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルであれば、`to-unsigned-like(`[`ranges::end`](end.md)`(t) - `[`ranges::begin`](begin.md)`(t))`と等しい。
+4. `to-unsigned-like(`[`ranges::end`](end.md)`(t) -` [`ranges::begin`](begin.md)`(t))`が有効な式で、[`ranges::begin`](begin.md)の型`I`、[`ranges::end`](end.md)の型`S`が[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`&amp;lt;S, I&amp;gt;`と[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルであれば、`to-unsigned-like(`[`ranges::end`](end.md)`(t) -` [`ranges::begin`](begin.md)`(t))`と等しい。
 
 どれにも当てはまらないとき、呼び出しは不適格。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/size.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/subrange/size.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/size.md b/reference/ranges/subrange/size.md
index 16462f72b..21ad53933 100644
--- a/reference/ranges/subrange/size.md
+++ b/reference/ranges/subrange/size.md
@@ -20,7 +20,7 @@ constexpr make-unsigned-like-t&amp;lt;iter_difference_t&amp;lt;I&amp;gt;&amp;gt; size() const
 ## 効果
 
 - [`StoreSize`](op_constructor.md)が真のとき、 `return size_;`
-- それ以外のとき、`return `[`to-unsigned-like`](/reference/type_traits/make_unsigned.md)`(end_ - begin_);`
+- それ以外のとき、`return` [`to-unsigned-like`](/reference/type_traits/make_unsigned.md)`(end_ - begin_);`
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_view -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/take_view.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view.md b/reference/ranges/take_view.md
index 61f41b59c..2a4e3ff22 100644
--- a/reference/ranges/take_view.md
+++ b/reference/ranges/take_view.md
@@ -37,9 +37,9 @@ namespace std::ranges {
 
 - (2): `E`および`F`を式、型`T`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;`、型`D`を[`range_difference_t`](range_difference_t.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;`とする。式`views::take(E, F)`の効果は以下の通り
     - [`decltype`](/lang/cpp11/decltype.md)`((F))`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;D&amp;gt;`のモデルでなければ、呼び出しは不適格
-    - `T`が[`ranges::empty_view`](empty_view.md)の特殊化であれば、`((void) F, `[`decay-copy`](/reference/exposition-only/decay-copy.md)`(E))`と等しい。ただし、`E`と`F`の評価順序は不定順で序列化(indeterminately sequenced)される
-    - `T`が[`random_access_range`](random_access_range.md)および[`sized_range`](sized_range.md)のモデルであり、かつ次のいずれかの特殊化であるとき、`T(`[`ranges::begin`](begin.md)`(E), `[`ranges::begin`](begin.md)`(E) + `[`min`](/reference/algorithm/min.md)`&amp;lt;D&amp;gt;(`[`ranges::size`](size.md)`(E), F))`と等しい。ただし、`E`は1度だけ評価される
-        - [`span`](/reference/span/span.md) (ただし、`T::extent == `[`dynamic_extent`](/reference/span/dynamic_extent.md)であること)
+    - `T`が[`ranges::empty_view`](empty_view.md)の特殊化であれば、`((void) F,` [`decay-copy`](/reference/exposition-only/decay-copy.md)`(E))`と等しい。ただし、`E`と`F`の評価順序は不定順で序列化(indeterminately sequenced)される
+    - `T`が[`random_access_range`](random_access_range.md)および[`sized_range`](sized_range.md)のモデルであり、かつ次のいずれかの特殊化であるとき、`T(`[`ranges::begin`](begin.md)`(E),` [`ranges::begin`](begin.md)`(E) +` [`min`](/reference/algorithm/min.md)`&amp;lt;D&amp;gt;(`[`ranges::size`](size.md)`(E), F))`と等しい。ただし、`E`は1度だけ評価される
+        - [`span`](/reference/span/span.md) (ただし、`T::extent ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)であること)
         - [`basic_string_view`](/reference/string_view/basic_string_view.md)
         - [`ranges::iota_view`](iota_view.md)
         - [`ranges::subrange`](subrange.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_while_view -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/take_while_view.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view.md b/reference/ranges/take_while_view.md
index dabfcd3a5..c12997094 100644
--- a/reference/ranges/take_while_view.md
+++ b/reference/ranges/take_while_view.md
@@ -33,7 +33,7 @@ namespace std::ranges {
 - [`view`](view.md)`&amp;lt;V&amp;gt;`
 - [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
 - [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;Pred&amp;gt;`
-- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred, `[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred,` [`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/to.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to.md b/reference/ranges/to.md
index d6a24d637..a27db847b 100644
--- a/reference/ranges/to.md
+++ b/reference/ranges/to.md
@@ -42,15 +42,15 @@ Rangeの各要素を要素とするコンテナを構築する。
 
 (1) Rangeの各要素を要素とするコンテナCのオブジェクトを以下の通りに構築して返す。
 
-`C`が[`input_range`](input_range.md)ではないか、[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;`[`range_reference_t`](range_reference_t.md)`&amp;lt;R&amp;gt;, `[`range_value_t`](range_value_t.md)`&amp;lt;C&amp;gt;&amp;gt;` である(`R`の要素への参照が`C`の要素に変換できる)場合:
+`C`が[`input_range`](input_range.md)ではないか、[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;`[`range_reference_t`](range_reference_t.md)`&amp;lt;R&amp;gt;,` [`range_value_t`](range_value_t.md)`&amp;lt;C&amp;gt;&amp;gt;` である(`R`の要素への参照が`C`の要素に変換できる)場合:
 
 1. [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C, R, Args...&amp;gt;`である(`C`が`R`と残りの引数で構築できる)場合
-    - `C(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r), `[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
-2. [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C, `[`from_range_t`](from_range_t.md)`, R, Args...&amp;gt;`である(`C`が[`from_range_t`](from_range_t.md)、`R`、残りの引数で構築できる)場合
-    - `C(`[`from_range`](from_range_t.md)`, `[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r), `[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
-3. [`common_range`](common_range.md)`&amp;lt;R&amp;gt;`が`true`で、[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;R&amp;gt;&amp;gt;::iterator_category`が `input_iterator_tag` から派生する有効な型であり、[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C, `[`iterator_t`](iterator_t.md)`&amp;lt;R&amp;gt;, `[`sentinel_t`](sentinel_t.md)`&amp;lt;R&amp;gt;, Args...&amp;gt;`である(`C`が`R`のイテレータおよび番兵と残りの引数で構築できる)場合
-    - `C(`[`ranges::begin(r)`](begin.md)`, `[`ranges::end(r)`](end.md)`, `[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
-4. [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C, Args...&amp;gt;`が`true`で、`container-insertable&amp;lt;C, `[`range_reference_t`](range_reference_t.md)`&amp;lt;R&amp;gt;&amp;gt;`が`true`である場合
+    - `C(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r),` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
+2. [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C,` [`from_range_t`](from_range_t.md)`, R, Args...&amp;gt;`である(`C`が[`from_range_t`](from_range_t.md)、`R`、残りの引数で構築できる)場合
+    - `C(`[`from_range`](from_range_t.md)`,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r),` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
+3. [`common_range`](common_range.md)`&amp;lt;R&amp;gt;`が`true`で、[`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;R&amp;gt;&amp;gt;::iterator_category`が `input_iterator_tag` から派生する有効な型であり、[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C,` [`iterator_t`](iterator_t.md)`&amp;lt;R&amp;gt;,` [`sentinel_t`](sentinel_t.md)`&amp;lt;R&amp;gt;, Args...&amp;gt;`である(`C`が`R`のイテレータおよび番兵と残りの引数で構築できる)場合
+    - `C(`[`ranges::begin(r)`](begin.md)`,` [`ranges::end(r)`](end.md)`,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
+4. [`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;C, Args...&amp;gt;`が`true`で、`container-insertable&amp;lt;C,` [`range_reference_t`](range_reference_t.md)`&amp;lt;R&amp;gt;&amp;gt;`が`true`である場合
     - 以下のコードで初期化する
 
 ```cpp
@@ -95,12 +95,12 @@ struct input-iterator {
 
 また、`DEDUCE_EXPR` を次のように定義する。
 
-1. 有効な式ならば、`C(`[`declval`](/reference/utility/declval.md)`&amp;lt;R&amp;gt;(), `[`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
-2. 有効な式ならば、`C(`[`from_range`](from_range_t.md)`, `[`declval`](/reference/utility/declval.md)`&amp;lt;R&amp;gt;(), `[`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
-3. 有効な式ならば、`C(`[`declval`](/reference/utility/declval.md)`&amp;lt;input-iterator&amp;gt;(), `[`declval`](/reference/utility/declval.md)`&amp;lt;input-iterator&amp;gt;(), `[`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
+1. 有効な式ならば、`C(`[`declval`](/reference/utility/declval.md)`&amp;lt;R&amp;gt;(),` [`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
+2. 有効な式ならば、`C(`[`from_range`](from_range_t.md)`,` [`declval`](/reference/utility/declval.md)`&amp;lt;R&amp;gt;(),` [`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
+3. 有効な式ならば、`C(`[`declval`](/reference/utility/declval.md)`&amp;lt;input-iterator&amp;gt;(),` [`declval`](/reference/utility/declval.md)`&amp;lt;input-iterator&amp;gt;(),` [`declval`](/reference/utility/declval.md)`&amp;lt;Args&amp;gt;()...)`
 4. 1-3が有効でなければ、ill-formed
 
-このとき、戻り値は `to&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`(DEDUCE_EXPR)&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r), `[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
+このとき、戻り値は `to&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`(DEDUCE_EXPR)&amp;gt;(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;R&amp;gt;(r),` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)`
 
 (3), (4): 次の性質をもつ完全転送呼び出しラッパー(*perfect forwarding call wrapper*)であるようなRangeアダプタクロージャオブジェクト`f`を返す。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zip_transform_view -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/zip_transform_view.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view.md b/reference/ranges/zip_transform_view.md
index 6da456b10..c6193d747 100644
--- a/reference/ranges/zip_transform_view.md
+++ b/reference/ranges/zip_transform_view.md
@@ -44,7 +44,7 @@ zipするRangeのサイズが異なっている場合、`zip_transform_view`の
 - (2): `F`を部分式、`Es...`を部分式のパックとする。式 `views::zip_transform(F, Es...)` の効果は以下の通り。
     - `Es` が空でないとき、`zip_transform_view(F, Es...)` と等しい
     - `Es` が空のとき、 `FD` を [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;decltype((F))&amp;gt;`として、`((void)F, auto(`[`views::empty`](empty_view.md)`&amp;lt;`[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;FD&amp;amp;&amp;gt;&amp;gt;&amp;gt;))` と等しい
-        - ただし、 [`move_constructible`](/reference/concepts/move_constructible.md)`&amp;lt;FD&amp;gt; &amp;amp;&amp;amp; `[`regular_invocable`](/reference/concepts/invocable.md)`&amp;lt;FD&amp;amp;&amp;gt;` が `false`、または [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;FD&amp;amp;&amp;gt;&amp;gt;` がオブジェクト型でないとき、ill-formed
+        - ただし、 [`move_constructible`](/reference/concepts/move_constructible.md)`&amp;lt;FD&amp;gt; &amp;amp;&amp;amp;` [`regular_invocable`](/reference/concepts/invocable.md)`&amp;lt;FD&amp;amp;&amp;gt;` が `false`、または [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;FD&amp;amp;&amp;gt;&amp;gt;` がオブジェクト型でないとき、ill-formed
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_view/end.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/ranges/zip_view/end.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_view/end.md b/reference/ranges/zip_view/end.md
index 755dce3b4..d1176b899 100644
--- a/reference/ranges/zip_view/end.md
+++ b/reference/ranges/zip_view/end.md
@@ -30,11 +30,11 @@ constexpr auto end() const
     - `zip-is-common&amp;lt;Views...&amp;gt;`が`false`の場合：
         - `return sentinel&amp;lt;false&amp;gt;(tuple-transform(ranges::end, views_));`
     - `(random_access_range&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...) &amp;amp;&amp;amp; (sized_range&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...)`が`true`の場合：
-        - `return begin() + `[`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;iterator&amp;lt;false&amp;gt;&amp;gt;(size());`
+        - `return begin() +` [`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;iterator&amp;lt;false&amp;gt;&amp;gt;(size());`
     - それ以外の場合：
         - `return iterator&amp;lt;false&amp;gt;(tuple-transform(ranges::end, views_));`
 
-- (2) : `return begin() + `[`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;iterator&amp;lt;true&amp;gt;&amp;gt;(size());`
+- (2) : `return begin() +` [`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;iterator&amp;lt;true&amp;gt;&amp;gt;(size());`
 
 - (3) : 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_avail -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/streambuf/basic_streambuf/in_avail.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/streambuf/basic_streambuf/in_avail.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/streambuf/basic_streambuf/in_avail.md b/reference/streambuf/basic_streambuf/in_avail.md
index 2f028a882..5845ee82c 100644
--- a/reference/streambuf/basic_streambuf/in_avail.md
+++ b/reference/streambuf/basic_streambuf/in_avail.md
@@ -21,7 +21,7 @@ namespace std {
 現在の入力列の読み取り可能な文字数を返す。
 
 ## 戻り値
-- 読み取り可能な文字列が存在する場合、[`egptr()`](egptr.md)` - `[`gptr()`](gptr.md)を返す。
+- 読み取り可能な文字列が存在する場合、[`egptr()`](egptr.md) `-` [`gptr()`](gptr.md)を返す。
 - それ以外の場合、[`showmanyc()`](showmanyc.md)を返す。
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setg -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/streambuf/basic_streambuf/setg.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/streambuf/basic_streambuf/setg.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/streambuf/basic_streambuf/setg.md b/reference/streambuf/basic_streambuf/setg.md
index b6a9189fd..746350477 100644
--- a/reference/streambuf/basic_streambuf/setg.md
+++ b/reference/streambuf/basic_streambuf/setg.md
@@ -20,7 +20,7 @@ namespace std {
 入力部分列の各ポインタを設定する。
 
 ## 事後条件
-`gbeg == `[`eback()`](eback.md) および `gnext == `[`gptr()`](gptr.md) および `gend == `[`egptr()`](egptr.md)。
+`gbeg ==` [`eback()`](eback.md) および `gnext ==` [`gptr()`](gptr.md) および `gend ==` [`egptr()`](egptr.md)。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setp -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/streambuf/basic_streambuf/setp.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/streambuf/basic_streambuf/setp.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/streambuf/basic_streambuf/setp.md b/reference/streambuf/basic_streambuf/setp.md
index 3aac890d3..828f127a4 100644
--- a/reference/streambuf/basic_streambuf/setp.md
+++ b/reference/streambuf/basic_streambuf/setp.md
@@ -20,7 +20,7 @@ namespace std {
 出力部分列の各ポインタを設定する。
 
 ## 事後条件
-`pbeg == `[`pbase()`](pbase.md) および `pbeg == `[`pptr()`](pptr.md) および `pend == `[`epptr()`](epptr.md)。
+`pbeg ==` [`pbase()`](pbase.md) および `pbeg ==` [`pptr()`](pptr.md) および `pend ==` [`epptr()`](epptr.md)。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/append.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/append.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/append.md b/reference/string/basic_string/append.md
index c606fc6be..6f6d09989 100644
--- a/reference/string/basic_string/append.md
+++ b/reference/string/basic_string/append.md
@@ -69,7 +69,7 @@ constexpr basic_string&amp;amp;
 ## テンプレートパラメータ制約
 
 - (8), (9) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
@@ -113,7 +113,7 @@ constexpr basic_string&amp;amp;
     ```
 
 - (9) 対象オブジェクトの末尾に、[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`の指定された範囲の文字列が追加される。
-    * 文字列の長さ `rlen` は、`n` と [`sv.size()`](/reference/string_view/basic_string_view/size.md)` - pos` の小さい方である。  
+    * 文字列の長さ `rlen` は、`n` と [`sv.size()`](/reference/string_view/basic_string_view/size.md) `- pos` の小さい方である。  
 以下と等価。
     ```cpp
     basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append_range -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/append_range.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/append_range.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/append_range.md b/reference/string/basic_string/append_range.md
index 63f3b7979..698ae1e40 100644
--- a/reference/string/basic_string/append_range.md
+++ b/reference/string/basic_string/append_range.md
@@ -15,7 +15,7 @@ Rangeの要素を末尾へ追加する。
 
 
 ## 効果
-[`append`](append.md)`(basic_string(`[`from_range`](../../ranges/from_range_t.md)`, `[`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg), `[`get_allocator()`](get_allocator.md)`));`
+[`append`](append.md)`(basic_string(`[`from_range`](../../ranges/from_range_t.md)`,` [`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg),` [`get_allocator()`](get_allocator.md)`));`
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/assign.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/assign.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/assign.md b/reference/string/basic_string/assign.md
index 5fee95ee2..cc0cc9cfd 100644
--- a/reference/string/basic_string/assign.md
+++ b/reference/string/basic_string/assign.md
@@ -72,7 +72,7 @@ constexpr basic_string&amp;amp;
 ## テンプレートパラメータ制約
 
 - (9), (10) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign_range -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/assign_range.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/assign_range.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/assign_range.md b/reference/string/basic_string/assign_range.md
index 216a6f93a..ed1d54e62 100644
--- a/reference/string/basic_string/assign_range.md
+++ b/reference/string/basic_string/assign_range.md
@@ -15,7 +15,7 @@ Rangeの各要素を再代入する。
 
 
 ## 効果
-`return ` [`assign`](assign.md)`(basic_string(`[`from_range`](../../ranges/from_range_t.md)`, `[`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg), `[`get_allocator()`](get_allocator.md)`));`
+`return ` [`assign`](assign.md)`(basic_string(`[`from_range`](../../ranges/from_range_t.md)`,` [`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg),` [`get_allocator()`](get_allocator.md)`));`
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>compare -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/compare.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/compare.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/compare.md b/reference/string/basic_string/compare.md
index b0b9bc62c..7575e9a86 100644
--- a/reference/string/basic_string/compare.md
+++ b/reference/string/basic_string/compare.md
@@ -102,7 +102,7 @@ constexpr int
 ## テンプレートパラメータ制約
 
 - (7), (8), (9) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/insert.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/insert.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/insert.md b/reference/string/basic_string/insert.md
index bebfa273b..5f5cc82d9 100644
--- a/reference/string/basic_string/insert.md
+++ b/reference/string/basic_string/insert.md
@@ -92,7 +92,7 @@ constexpr basic_string&amp;amp;
 ## テンプレートパラメータ制約
 
 - (10), (11) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/insert_range.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/insert_range.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/insert_range.md b/reference/string/basic_string/insert_range.md
index 6197d501c..934479d33 100644
--- a/reference/string/basic_string/insert_range.md
+++ b/reference/string/basic_string/insert_range.md
@@ -15,7 +15,7 @@ Rangeの各要素を任意の位置に挿入する。
 
 
 ## 効果
-`return ` [`insert`](insert.md)`(pos, basic_string(`[`from_range`](../../ranges/from_range_t.md)`, `[`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg), `[`get_allocator()`](get_allocator.md)`));`
+`return ` [`insert`](insert.md)`(pos, basic_string(`[`from_range`](../../ranges/from_range_t.md)`,` [`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg),` [`get_allocator()`](get_allocator.md)`));`
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_assign.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/op_assign.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_assign.md b/reference/string/basic_string/op_assign.md
index 60b06327e..dab2006d2 100644
--- a/reference/string/basic_string/op_assign.md
+++ b/reference/string/basic_string/op_assign.md
@@ -52,7 +52,7 @@ basic_string&amp;amp; operator=(nullptr_t) = delete;                       // (7) C++23
 ## テンプレートパラメータ制約
 
 - (6) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/op_constructor.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_constructor.md b/reference/string/basic_string/op_constructor.md
index b0a95566d..56a126b7d 100644
--- a/reference/string/basic_string/op_constructor.md
+++ b/reference/string/basic_string/op_constructor.md
@@ -150,9 +150,9 @@ constexpr basic_string(from_range_t, R&amp;amp;&amp;amp; rg,
 ## テンプレートパラメータ制約
 
 - (14) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
-- (15) : [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`であること
+- (15) : [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`であること
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus_assign.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/op_plus_assign.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus_assign.md b/reference/string/basic_string/op_plus_assign.md
index c8c721f05..a983c500f 100644
--- a/reference/string/basic_string/op_plus_assign.md
+++ b/reference/string/basic_string/op_plus_assign.md
@@ -31,7 +31,7 @@ constexpr basic_string&amp;amp; operator+=(const T&amp;amp; t); // (5) C++20
 ## テンプレートパラメータ制約
 
 - (5) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/replace.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/replace.md b/reference/string/basic_string/replace.md
index fb22d0451..6d9733f8b 100644
--- a/reference/string/basic_string/replace.md
+++ b/reference/string/basic_string/replace.md
@@ -193,7 +193,7 @@ constexpr basic_string&amp;amp;
 ## テンプレートパラメータ制約
 
 - (12), (13), (14) : 以下の両方を満たしていること
-    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resize_and_overwrite -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/resize_and_overwrite.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/string/basic_string/resize_and_overwrite.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/resize_and_overwrite.md b/reference/string/basic_string/resize_and_overwrite.md
index d7e94a1ff..210ccc884 100644
--- a/reference/string/basic_string/resize_and_overwrite.md
+++ b/reference/string/basic_string/resize_and_overwrite.md
@@ -33,8 +33,8 @@ constexpr void resize_and_overwrite(size_type n, Operation op); // C++23
 
 
 ## 効果
-1. 関数実行前に `[`[`data()`](data.md)`, `[`data()`](data.md)` + n)` が有効範囲でないなら、領域の確保が行われる（[`reserve(n)`](reserve.md) 相当）。新たな領域は初期化されないことに注意。
-1. `std::move(op)(data(), n)` が呼ばれる。`op` 内では、`[`[`data()`](data.md)`, `[`data()`](data.md)` + n)` の範囲に対して任意の初期化を行う。
+1. 関数実行前に `[`[`data()`](data.md)`,` [`data()`](data.md) `+ n)` が有効範囲でないなら、領域の確保が行われる（[`reserve(n)`](reserve.md) 相当）。新たな領域は初期化されないことに注意。
+1. `std::move(op)(data(), n)` が呼ばれる。`op` 内では、`[`[`data()`](data.md)`,` [`data()`](data.md) `+ n)` の範囲に対して任意の初期化を行う。
 1. `op` の戻り値を `r` とすると、サイズを `r` に変更する。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_common_reference -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple/basic_common_reference.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/tuple/tuple/basic_common_reference.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple/basic_common_reference.md b/reference/tuple/tuple/basic_common_reference.md
index 705fa4e1c..560cb05e5 100644
--- a/reference/tuple/tuple/basic_common_reference.md
+++ b/reference/tuple/tuple/basic_common_reference.md
@@ -26,7 +26,7 @@ template&amp;lt;tuple-like TTuple, tuple-like UTuple,
 
 ## 要件
 - `TTuple`か`UTuple`のどちらかが[`tuple`](../tuple.md)の特殊化であること。
-- `TTuple`と`UTuple`のそれぞれについて、（次の`T`を置き換える形で）[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;T, `[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;T&amp;gt;&amp;gt;`であること。
+- `TTuple`と`UTuple`のそれぞれについて、（次の`T`を置き換える形で）[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;T,` [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;T&amp;gt;&amp;gt;`であること。
     - 実質的には`TTuple`と`Utuple`について、参照型ではなく、最上位の`const`/`volatile`修飾も持っていないこと要求する。
 - `TTuple`と`UTuple`の要素数が一致していること。
     - 具体的には、[`tuple_size_v`](../tuple_size.md)`&amp;lt;TTuple&amp;gt; ==` [`tuple_size_v`](../tuple_size.md)`&amp;lt;UTuple&amp;gt;`であること。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/at.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/vector/vector/at.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/at.md b/reference/vector/vector/at.md
index 64fe656e3..f742f4e6d 100644
--- a/reference/vector/vector/at.md
+++ b/reference/vector/vector/at.md
@@ -29,7 +29,7 @@ constexpr const_reference at(size_type n) const; // (2) C++20
 
 
 ## 備考
-`at(n)` は `*(`[`begin()`](begin.md)` + n)` と同じ結果となるが、イテレータを使用したランダムアクセスや[`operator[]`](op_at.md)と違い、コンテナの要素数に対して境界チェックを行う。
+`at(n)` は `*(`[`begin()`](begin.md) `+ n)` と同じ結果となるが、イテレータを使用したランダムアクセスや[`operator[]`](op_at.md)と違い、コンテナの要素数に対して境界チェックを行う。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- インラインコードの先頭・末尾の空白を修正</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_at.html"/>
      <id>e79ed6a21639cfc37a3a8f8cbf33e3fd8f402fe1:reference/vector/vector/op_at.md</id>
      <updated>2025-08-31T19:06:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_at.md b/reference/vector/vector/op_at.md
index 090627089..d17b913a3 100644
--- a/reference/vector/vector/op_at.md
+++ b/reference/vector/vector/op_at.md
@@ -25,7 +25,7 @@ constexpr const_reference operator[](size_type n) const; // (2) C++20
 
 
 ## 備考
-- `vector`型のオブジェクト`v`に対して、`v[n]` と `*(v.`[`begin()`](begin.md)` + n)` は同じ結果になる
+- `vector`型のオブジェクト`v`に対して、`v[n]` と `*(v.`[`begin()`](begin.md) `+ n)` は同じ結果になる
 - `n &amp;gt;=` [`size()`](size.md)の場合、未定義動作を引き起こす
 - この関数は、[`at()`](at.md)メンバ関数とちがって境界チェックを行うことが規定されない。標準ライブラリの実装によっては[`assert`](/reference/cassert/assert.md)`(n &amp;lt;` [`size()`](size.md)`)`による境界チェックが行われる場合がある
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン [P0912R5] -- cpp20/coroutines: コード中の斜体の変数を &lt;code&gt; で修飾</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>b981b77147631a70af2ebb34be205e70770b196a:lang/cpp20/coroutines.md</id>
      <updated>2025-08-31T17:35:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 6a380acd1..c30f35ed2 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -194,7 +194,7 @@ final-suspend :
 
 Promise型のスコープにおいて、非修飾な`return_void`および`return_value`の探索が行われる。両方が見つかった場合、プログラムは不適格となる。
 
-コルーチン呼び出しのglvalue結果またはprvalue結果オブジェクトを初期化するために、式 _promise_`.get_return_object()`が使われる。
+コルーチン呼び出しのglvalue結果またはprvalue結果オブジェクトを初期化するために、式 &amp;lt;code&amp;gt;_promise_&amp;lt;/code&amp;gt;`.get_return_object()`が使われる。
 `get_return_object`呼び出しは高々1回であり、`initial_suspend`呼び出しよりも前に順序付けられる。
 
 中断状態にあるコルーチンは、そのコルーチンを指すコルーチンハンドルの再開メンバ関数呼び出しによって、継続実行を再開できる。
@@ -280,9 +280,9 @@ int main() {
 パラメータのコピーの生存期間は、パラメータPromiseオブジェクトの終了直後で終了する。
 （コルーチンが参照渡しのパラメータを持つ場合、そのパラメータにより参照されるエンティティ生存期間終了後のコルーチン再開は未定義動作を引き起こしやすい。）
 
-式 _promise_`.unhandled_exception()`の評価が例外で終了した場合、コルーチンは最終サスペンドポイントで中断したとみなされる。
+式 &amp;lt;code&amp;gt;_promise_&amp;lt;/code&amp;gt;`.unhandled_exception()`の評価が例外で終了した場合、コルーチンは最終サスペンドポイントで中断したとみなされる。
 
-式 `co_await ` _promise_`.final_suspend()` は例外送出してはならない。
+式 `co_await` &amp;lt;code&amp;gt;_promise_&amp;lt;/code&amp;gt;`.final_suspend()` は例外送出してはならない。
 
 ### Await式
 `co_await`式は、そのオペランド式で表される計算の完了を待機しているあいだ、コルーチン評価をサスペンド(中断)するために用いる。
@@ -303,7 +303,7 @@ Await式の評価では、次のような補助的な型、式、オブジェク
 - _p_ を同Await式を含むコルーチンのPromiseオブジェクトの左辺値名とし、`P`を同オブジェクトの型とする。
 - _a_ (Awaitable) を下記のように定義する：
     - Await式がYield式または初期サスペンドポイントまたは最終サスペンドポイントにより暗黙に生成された場合、_a_ をその _cast-expression_ とする。
-    - `P`のスコープで非修飾な`await_transform`の探索により一つ以上の名前がみつかった場合は、 _a_ を _p_`.await_transform(` _cast-expression_ `)`とする。
+    - `P`のスコープで非修飾な`await_transform`の探索により一つ以上の名前がみつかった場合は、 _a_ を &amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.await_transform(` &amp;lt;code&amp;gt;_cast-expression_&amp;lt;/code&amp;gt; `)`とする。
     - それ以外では _a_ を _cast-expression_ とする。
 - _o_ (Awaiter) を下記のように定義する。_o_ がprvalueの場合は[Temporary materialization conversion](https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html)が行われる：
     - 実引数 _a_ に対して適用可能な`operator co_await`関数を列挙し、_o_ をオーバーロード解決により選択された関数呼び出しとする。
@@ -311,9 +311,9 @@ Await式の評価では、次のような補助的な型、式、オブジェク
     - オーバーロード解決が曖昧な場合、プログラムは不適格となる。
 - _e_ を、_o_ の評価結果を参照する左辺値とする。
 - _h_ を、同Await式を含むコルーチンを参照する[`std::coroutine_handle&amp;lt;P&amp;gt;`](/reference/coroutine/coroutine_handle.md)型のオブジェクトとする。
-- _await-ready_ を、`bool`に変換されうる式 _e_`.await_ready()`とする。
-- _await-suspend_ を、式 _e_`.await_suspend(` _h_ `)`とする。この式（の結果）は`void`であるか、`bool`または任意の型`Z`に対する[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)型のprvalueであるべき。
-- _await-resume_ を、式 _e_`.await_resume()`とする。
+- _await-ready_ を、`bool`に変換されうる式 &amp;lt;code&amp;gt;_e_&amp;lt;/code&amp;gt;`.await_ready()`とする。
+- _await-suspend_ を、式 &amp;lt;code&amp;gt;_e_&amp;lt;/code&amp;gt;`.await_suspend(` &amp;lt;code&amp;gt;_h_&amp;lt;/code&amp;gt; `)`とする。この式（の結果）は`void`であるか、`bool`または任意の型`Z`に対する[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)型のprvalueであるべき。
+- _await-resume_ を、式 &amp;lt;code&amp;gt;_e_&amp;lt;/code&amp;gt;`.await_resume()`とする。
 
 Await式は式 _await-resume_ と同じ型、同じ値カテゴリを持つ。
 
@@ -377,7 +377,7 @@ co_yield braced-init-list
 * braced-init-list[italic]
 
 Yield式は関数の中断コンテキストにのみ出現してよい。
-_e_ をYield式のオペランド、_p_ を同式を含むコルーチンのPromiseオブジェクトのlvalue名としたとき、Yield式は式`co_await` _p_`.yield_value(` _e_ `)`と等価である。
+_e_ をYield式のオペランド、_p_ を同式を含むコルーチンのPromiseオブジェクトのlvalue名としたとき、Yield式は式`co_await` &amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.yield_value(` &amp;lt;code&amp;gt;_e_&amp;lt;/code&amp;gt; `)`と等価である。
 
 ```cpp
 template &amp;lt;typename T&amp;gt;
@@ -441,10 +441,10 @@ _p_ をコルーチンPromiseオブジェクトのlvalue名とすると、`co_re
 
 ここで _final-suspend_ はコルーチン動作説明用の最終サスペンドポイントラベル名であり、_S_ は次の通り定義される：
 
-- オペランドが _braced-init-list_ または非`void`型の式の場合、_S_ を _p_`.return_value(` _expr-or-braced-init-list_ `)`とする。式 _S_ は `void`型のprvalueであるべき。
-- そうでなければ、_S_ を複合文 `{` _expression_ _opt_ `;` _p_`.return_void(); }`とする。式 _p_`.return_void()`は`void`型のprvalueであるべき。
+- オペランドが _braced-init-list_ または非`void`型の式の場合、_S_ を &amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.return_value(` &amp;lt;code&amp;gt;_expr-or-braced-init-list_&amp;lt;/code&amp;gt; `)`とする。式 _S_ は `void`型のprvalueであるべき。
+- そうでなければ、_S_ を複合文 `{` &amp;lt;code&amp;gt;_expression&amp;lt;sub&amp;gt;opt&amp;lt;/sub&amp;gt;_&amp;lt;/code&amp;gt; `;` &amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.return_void(); }`とする。式 &amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.return_void()`は`void`型のprvalueであるべき。
 
-_p_`.return_void()`が有効な式のとき、コルーチン本体の終端到達はオペランド無し`co_return`と等価である。
+&amp;lt;code&amp;gt;_p_&amp;lt;/code&amp;gt;`.return_void()`が有効な式のとき、コルーチン本体の終端到達はオペランド無し`co_return`と等価である。
 そうでなければ、コルーチン本体の終端到達は未定義の動作を引き起こす。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_view -- 3点リーダの前にスペースを挿入</title>
      <link href="https://cpprefjp.github.io/reference/ranges/adjacent_view.html"/>
      <id>cd924cf4feb6256fc9ab05d086071dbcc8aacc6b:reference/ranges/adjacent_view.md</id>
      <updated>2025-08-31T16:38:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/adjacent_view.md b/reference/ranges/adjacent_view.md
index 63b69d494..f62fe4691 100644
--- a/reference/ranges/adjacent_view.md
+++ b/reference/ranges/adjacent_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;forward_range V, size_t N&amp;gt;
     requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; (N &amp;gt; 0)
-  class adjacent_view : public view_interface&amp;lt;adjacent_view&amp;lt;V, N&amp;gt;&amp;gt; {…… }; // (1)
+  class adjacent_view : public view_interface&amp;lt;adjacent_view&amp;lt;V, N&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     template&amp;lt;std::size_t N&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cartesian_product_view -- 3点リーダの前にスペースを挿入</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cartesian_product_view.html"/>
      <id>cd924cf4feb6256fc9ab05d086071dbcc8aacc6b:reference/ranges/cartesian_product_view.md</id>
      <updated>2025-08-31T16:38:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cartesian_product_view.md b/reference/ranges/cartesian_product_view.md
index f70ebf3ea..f28ffec66 100644
--- a/reference/ranges/cartesian_product_view.md
+++ b/reference/ranges/cartesian_product_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;input_range First, forward_range... Vs&amp;gt;
     requires (view&amp;lt;First&amp;gt; &amp;amp;&amp;amp; ... &amp;amp;&amp;amp; view&amp;lt;Vs&amp;gt;)
-  class cartesian_product_view : public view_interface&amp;lt;cartesian_product_view&amp;lt;First, Vs...&amp;gt;&amp;gt; {…… }; // (1)
+  class cartesian_product_view : public view_interface&amp;lt;cartesian_product_view&amp;lt;First, Vs...&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ cartesian_product = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>chunk_by_view -- 3点リーダの前にスペースを挿入</title>
      <link href="https://cpprefjp.github.io/reference/ranges/chunk_by_view.html"/>
      <id>cd924cf4feb6256fc9ab05d086071dbcc8aacc6b:reference/ranges/chunk_by_view.md</id>
      <updated>2025-08-31T16:38:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/chunk_by_view.md b/reference/ranges/chunk_by_view.md
index 8b8d90632..5bbe0f4d2 100644
--- a/reference/ranges/chunk_by_view.md
+++ b/reference/ranges/chunk_by_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;forward_range V, indirect_binary_predicate&amp;lt;iterator_t&amp;lt;V&amp;gt;, iterator_t&amp;lt;V&amp;gt;&amp;gt; Pred&amp;gt;
     requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt;
-  class chunk_by_view : public view_interface&amp;lt;chunk_by_view&amp;lt;V, Pred&amp;gt;&amp;gt; {…… }; // (1)
+  class chunk_by_view : public view_interface&amp;lt;chunk_by_view&amp;lt;V, Pred&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ chunk_by = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>chunk_view -- 3点リーダの前にスペースを挿入</title>
      <link href="https://cpprefjp.github.io/reference/ranges/chunk_view.html"/>
      <id>cd924cf4feb6256fc9ab05d086071dbcc8aacc6b:reference/ranges/chunk_view.md</id>
      <updated>2025-08-31T16:38:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/chunk_view.md b/reference/ranges/chunk_view.md
index 1452c0e03..0c837cb3a 100644
--- a/reference/ranges/chunk_view.md
+++ b/reference/ranges/chunk_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;view V&amp;gt;
     requires input_range&amp;lt;V&amp;gt;
-  class chunk_view : public view_interface&amp;lt;chunk_view&amp;lt;V&amp;gt;&amp;gt; {…… }; // (1)
+  class chunk_view : public view_interface&amp;lt;chunk_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ chunk = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>concat_view -- 3点リーダの前にスペースを挿入</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view.html"/>
      <id>cd924cf4feb6256fc9ab05d086071dbcc8aacc6b:reference/ranges/concat_view.md</id>
      <updated>2025-08-31T16:38:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view.md b/reference/ranges/concat_view.md
index 54b39fc32..23109df85 100644
--- a/reference/ranges/concat_view.md
+++ b/reference/ranges/concat_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;input_range... Views&amp;gt;
   requires (view&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...) &amp;amp;&amp;amp; (sizeof...(Views) &amp;gt; 0) &amp;amp;&amp;amp; concatable&amp;lt;Views...&amp;gt;
-  class concat_view : public view_interface&amp;lt;concat_view&amp;lt;Views...&amp;gt;&amp;gt; {…… }; // (1)
+  class concat_view : public view_interface&amp;lt;concat_view&amp;lt;Views...&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ concat = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>slide_view -- 3点リーダの前にスペースを挿入</title>
      <link href="https://cpprefjp.github.io/reference/ranges/slide_view.html"/>
      <id>cd924cf4feb6256fc9ab05d086071dbcc8aacc6b:reference/ranges/slide_view.md</id>
      <updated>2025-08-31T16:38:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/slide_view.md b/reference/ranges/slide_view.md
index 7f4871734..0eed5231b 100644
--- a/reference/ranges/slide_view.md
+++ b/reference/ranges/slide_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;view V&amp;gt;
     requires input_range&amp;lt;V&amp;gt;
-  class slide_view : public view_interface&amp;lt;slide_view&amp;lt;V&amp;gt;&amp;gt; {…… }; // (1)
+  class slide_view : public view_interface&amp;lt;slide_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ slide = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride_view -- 3点リーダの前にスペースを挿入</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view.html"/>
      <id>cd924cf4feb6256fc9ab05d086071dbcc8aacc6b:reference/ranges/stride_view.md</id>
      <updated>2025-08-31T16:38:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view.md b/reference/ranges/stride_view.md
index d14de81ec..8c0d7dbb0 100644
--- a/reference/ranges/stride_view.md
+++ b/reference/ranges/stride_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;input_range V&amp;gt;
     requires view&amp;lt;V&amp;gt;
-  class stride_view : public view_interface&amp;lt;stride_view&amp;lt;V&amp;gt;&amp;gt; {…… }; // (1)
+  class stride_view : public view_interface&amp;lt;stride_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ stride = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zip_transform_view -- 3点リーダの前にスペースを挿入</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view.html"/>
      <id>cd924cf4feb6256fc9ab05d086071dbcc8aacc6b:reference/ranges/zip_transform_view.md</id>
      <updated>2025-08-31T16:38:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view.md b/reference/ranges/zip_transform_view.md
index cad05caf0..6da456b10 100644
--- a/reference/ranges/zip_transform_view.md
+++ b/reference/ranges/zip_transform_view.md
@@ -10,7 +10,7 @@ namespace std::ranges {
     requires (view&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...) &amp;amp;&amp;amp; (sizeof...(Views) &amp;gt; 0) &amp;amp;&amp;amp; is_object_v&amp;lt;F&amp;gt; &amp;amp;&amp;amp;
               regular_invocable&amp;lt;F&amp;amp;, range_reference_t&amp;lt;Views&amp;gt;...&amp;gt; &amp;amp;&amp;amp;
               can-reference&amp;lt;invoke_result_t&amp;lt;F&amp;amp;, range_reference_t&amp;lt;Views&amp;gt;...&amp;gt;&amp;gt;
-  class zip_transform_view : public view_interface&amp;lt;zip_transform_view&amp;lt;F, Views...&amp;gt;&amp;gt; {…… }; // (1)
+  class zip_transform_view : public view_interface&amp;lt;zip_transform_view&amp;lt;F, Views...&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ zip_transform = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zip_view -- 3点リーダの前にスペースを挿入</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_view.html"/>
      <id>cd924cf4feb6256fc9ab05d086071dbcc8aacc6b:reference/ranges/zip_view.md</id>
      <updated>2025-08-31T16:38:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_view.md b/reference/ranges/zip_view.md
index 74720f290..9b847f365 100644
--- a/reference/ranges/zip_view.md
+++ b/reference/ranges/zip_view.md
@@ -8,7 +8,7 @@
 namespace std::ranges {
   template&amp;lt;input_range... Views&amp;gt;
   requires (view&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...) &amp;amp;&amp;amp; (sizeof...(Views) &amp;gt; 0)
-  class zip_view : public view_interface&amp;lt;zip_view&amp;lt;Views...&amp;gt;&amp;gt; {…… }; // (1)
+  class zip_view : public view_interface&amp;lt;zip_view&amp;lt;Views...&amp;gt;&amp;gt; { …… }; // (1)
 
   namespace views {
     inline constexpr /*unspecified*/ zip = /*unspecified*/;      // (2)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
</feed>
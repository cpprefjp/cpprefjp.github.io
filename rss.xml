<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-01-24T06:11:39.117080</updated>
  <id>e410feaf-866e-473f-a990-abd10fcf77d6</id>

  
    <entry>
      <title>replace -- Merge pull request #936 from Jumpaku/Jumpaku-patch-3</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>10a3ed4a9209cb43584702a6a714c069cb6ce7b6:reference/string/basic_string/replace.md</id>
      <updated>2022-01-23T17:39:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/replace.md b/reference/string/basic_string/replace.md
index ec25752e6..5d5d89d8b 100644
--- a/reference/string/basic_string/replace.md
+++ b/reference/string/basic_string/replace.md
@@ -94,7 +94,7 @@ basic_string&amp;amp; replace(const_iterator i1,
 ## 効果
 - (1) : `replace(pos1, n1, str.`[`data()`](data.md)`, str.`[`size()`](size.md)`)`を呼び出す。
 - (2) :
-    - `n2`と`str.`[`size()`](size.md) `- pos2`のうち小さい方を`rlen`とする。`n == npos` の場合は、 `str.`[`size`](size.md)`() - pos2` が使用される。
+    - `n2`と`str.`[`size()`](size.md) `- pos2`のうち小さい方を`rlen`とする。`n2 == npos` の場合は、 `str.`[`size`](size.md)`() - pos2` が使用される。
     - `replace(pos1, n1, str.`[`data()`](data.md) `+ pos2, rlen)`を呼び出す。
 - (3) : `n1`と[`size()`](size.md) `- pos1`のうち小さい方を`xlen`とし、自身の`pos1`番目から`xlen`個の要素を、文字配列`s`の先頭`n2`文字で置き換える。
 - (4) : `replace(pos, n, s,` [`traits::length`](/reference/string/char_traits/length.md)`(s))`を呼び出す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- Update replace.md</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>7a6374f77d3c54c7f11047f819bed6fd43e901be:reference/string/basic_string/replace.md</id>
      <updated>2022-01-23T10:25:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/replace.md b/reference/string/basic_string/replace.md
index ec25752e6..5d5d89d8b 100644
--- a/reference/string/basic_string/replace.md
+++ b/reference/string/basic_string/replace.md
@@ -94,7 +94,7 @@ basic_string&amp;amp; replace(const_iterator i1,
 ## 効果
 - (1) : `replace(pos1, n1, str.`[`data()`](data.md)`, str.`[`size()`](size.md)`)`を呼び出す。
 - (2) :
-    - `n2`と`str.`[`size()`](size.md) `- pos2`のうち小さい方を`rlen`とする。`n == npos` の場合は、 `str.`[`size`](size.md)`() - pos2` が使用される。
+    - `n2`と`str.`[`size()`](size.md) `- pos2`のうち小さい方を`rlen`とする。`n2 == npos` の場合は、 `str.`[`size`](size.md)`() - pos2` が使用される。
     - `replace(pos1, n1, str.`[`data()`](data.md) `+ pos2, rlen)`を呼び出す。
 - (3) : `n1`と[`size()`](size.md) `- pos1`のうち小さい方を`xlen`とし、自身の`pos1`番目から`xlen`個の要素を、文字配列`s`の先頭`n2`文字で置き換える。
 - (4) : `replace(pos, n, s,` [`traits::length`](/reference/string/char_traits/length.md)`(s))`を呼び出す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Jumpaku</name>
        <email>Jumpaku@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>即時関数 -- Update immediate_functions.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/immediate_functions.html"/>
      <id>2a124ef72de057aa91dcbe773ddc039737dbf976:lang/cpp20/immediate_functions.md</id>
      <updated>2022-01-22T17:30:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/immediate_functions.md b/lang/cpp20/immediate_functions.md
index a857c63b3..63321ced0 100644
--- a/lang/cpp20/immediate_functions.md
+++ b/lang/cpp20/immediate_functions.md
@@ -46,12 +46,12 @@ Int2Int *pf = sqr; // エラー
 ```
 * P1073R3[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1073r3.html]
 
-定数式として評価できない部分があっても、実行されなければエラーとならない。
+定数式として評価できない部分があっても、評価しようとしなければエラーとならない。
 
 ```cpp example
 consteval void f(int n) {
   if(n &amp;lt; 0) {
-    throw &amp;#34;n should not be negative&amp;#34;;
+    throw &amp;#34;n should not be negative&amp;#34;; // throwは定数式として評価できないが、ここを通らなければOK
   }
 }
 
@@ -61,6 +61,8 @@ int main() {
 }
 ```
 
+この性質は様々なチェックをコンパイル時に行うために活用できる。たとえば、[`std::format`](/reference/format/format.md)におけるコンパイル時の書式文字列チェックで使用されている。
+
 ## 例
 ```cpp example
 // P1073R3より引用
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dangling -- Update dangling.md</title>
      <link href="https://cpprefjp.github.io/reference/ranges/dangling.html"/>
      <id>da8a30ca9040da3647b15dc58373ec2cbe063b7d:reference/ranges/dangling.md</id>
      <updated>2022-01-22T16:07:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/dangling.md b/reference/ranges/dangling.md
index 907a723b1..da04b3a85 100644
--- a/reference/ranges/dangling.md
+++ b/reference/ranges/dangling.md
@@ -19,7 +19,7 @@ namespace std::ranges {
 
 `dangling`は、イテレータまたはRangeがダングリングであることを示す型である。
 
-この型のオブジェクトは、イテレータまたはRangeを返す関数において、戻り値のイテレータやRangeがダングリングとなる場合に代わりに返される(逆は成立しない)。
+この型のオブジェクトは、イテレータまたはRangeを返す関数において、それらがダングリングとなることがコンパイル時にわかる場合に、代わりに返されることがある。
 
 `dangling`自身はイテレータでもRangeでもないため、呼び出し側でそれらを期待したコードを書いていればコンパイルエラーとなる。その結果、ダングリングイテレータ/Rangeにアクセスするというエラーをコンパイル時に発見することができる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
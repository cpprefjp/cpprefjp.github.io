<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-08-19T02:36:45.363596</updated>
  <id>1c9b07f6-e224-44d0-bc7b-1662835a595e</id>

  
    <entry>
      <title>operator= -- basic_string: C++23 P2166R1対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_assign.html"/>
      <id>7230b34ef0071b07123f44363e811917ef0752de:reference/string/basic_string/op_assign.md</id>
      <updated>2021-08-19T11:32:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_assign.md b/reference/string/basic_string/op_assign.md
index 1a450eee7..dabefbe8a 100644
--- a/reference/string/basic_string/op_assign.md
+++ b/reference/string/basic_string/op_assign.md
@@ -17,6 +17,8 @@ basic_string&amp;amp; operator=(initializer_list&amp;lt;charT&amp;gt; il);               // (5) C++11
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
 basic_string&amp;amp; operator=(const T&amp;amp; t);                               // (6) C++17
+
+basic_string&amp;amp; operator=(nullptr_t) = delete;                       // (7)
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -114,3 +116,5 @@ hello
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(6)の引数型を`const T&amp;amp;`に変更
+- [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
+    - C++23での、`nullptr_t`をとる代入演算子のdelete宣言追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_string: C++23 P2166R1対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>7230b34ef0071b07123f44363e811917ef0752de:reference/string/basic_string/op_constructor.md</id>
      <updated>2021-08-19T11:32:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_constructor.md b/reference/string/basic_string/op_constructor.md
index 946cf5d09..5924f6f2a 100644
--- a/reference/string/basic_string/op_constructor.md
+++ b/reference/string/basic_string/op_constructor.md
@@ -61,6 +61,8 @@ template&amp;lt;class T&amp;gt;
                       size_type pos,
                       size_type n,
                       const Allocator&amp;amp; a = Allocator());        // (15) C++17
+
+basic_string(nullptr_t) = delete;                               // (16) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -198,3 +200,5 @@ s14 : Hello
     - `string_view`から範囲を指定して構築する(15)を追加
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(14)の引数型を`const T&amp;amp;`に変更
+- [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
+    - C++23での、`nullptr_t`をとるコンストラクタのdelete宣言追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_string_view/op_constructor: delete forbid. chars</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_constructor.html"/>
      <id>b8b84a1084420747236896d9fe605be9ce1fde76:reference/string_view/basic_string_view/op_constructor.md</id>
      <updated>2021-08-19T11:03:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_constructor.md b/reference/string_view/basic_string_view/op_constructor.md
index d83c63abd..82545efff 100644
--- a/reference/string_view/basic_string_view/op_constructor.md
+++ b/reference/string_view/basic_string_view/op_constructor.md
@@ -38,11 +38,11 @@ constexpr basic_string_view(R&amp;amp;&amp;amp; r);                            // (7) C++23
     - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`iter_value_t`](/reference/iterator/iter_value_t.md)`&amp;lt;It&amp;gt;, charT&amp;gt;`が`true`であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;End, size_type&amp;gt;`が`false`であること
 - (7) :
-    - `R`はコンセプト[`ranges::contiguous_range`](/reference/ranges/contiguous_range.md.nolink)および[`ranges​::​sized_range`](/reference/ranges/sized_range.md.nolink)のモデルであること
+    - `R`はコンセプト[`ranges::contiguous_range`](/reference/ranges/contiguous_range.md.nolink)および[`ranges::sized_range`](/reference/ranges/sized_range.md.nolink)のモデルであること
     - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`ranges::range_value_t`](/reference/ranges/range_value_t.md.nolink)`&amp;lt;R&amp;gt;, charT&amp;gt;`が`true`であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;R, const charT*&amp;gt;`が`false`であること
-    - `d`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;R&amp;gt;`型の左辺値としたとき、`d.operator ​::​std​::​basic_string_view&amp;lt;charT, traits&amp;gt;()`が妥当な式ではないこと
-    - もし`R::​traits_type`が妥当な型の場合、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;R&amp;gt;::type_traits, traits&amp;gt;`が`true`であること
+    - `d`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;R&amp;gt;`型の左辺値としたとき、`d.operator ::std::basic_string_view&amp;lt;charT, traits&amp;gt;()`が妥当な式ではないこと
+    - もし`R::traits_type`が妥当な型の場合、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;R&amp;gt;::type_traits, traits&amp;gt;`が`true`であること
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_string_view/op_constructor: fix inner link</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_constructor.html"/>
      <id>2b20781ea8990d7834e854dcc4c8fc9ede179cfe:reference/string_view/basic_string_view/op_constructor.md</id>
      <updated>2021-08-19T10:58:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_constructor.md b/reference/string_view/basic_string_view/op_constructor.md
index d2c66d23a..d83c63abd 100644
--- a/reference/string_view/basic_string_view/op_constructor.md
+++ b/reference/string_view/basic_string_view/op_constructor.md
@@ -39,10 +39,10 @@ constexpr basic_string_view(R&amp;amp;&amp;amp; r);                            // (7) C++23
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;End, size_type&amp;gt;`が`false`であること
 - (7) :
     - `R`はコンセプト[`ranges::contiguous_range`](/reference/ranges/contiguous_range.md.nolink)および[`ranges​::​sized_range`](/reference/ranges/sized_range.md.nolink)のモデルであること
-    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`ranges::ranve_value_t`](/reference/ranges/ranve_value_t.md.nokink)`&amp;lt;R&amp;gt;, charT&amp;gt;`が`true`であること
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`ranges::range_value_t`](/reference/ranges/range_value_t.md.nolink)`&amp;lt;R&amp;gt;, charT&amp;gt;`が`true`であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;R, const charT*&amp;gt;`が`false`であること
     - `d`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;R&amp;gt;`型の左辺値としたとき、`d.operator ​::​std​::​basic_string_view&amp;lt;charT, traits&amp;gt;()`が妥当な式ではないこと
-    - もし`R::​traits_type`が妥当な型の場合、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference_t.md)`&amp;lt;R&amp;gt;::type_traits, traits&amp;gt;`が`true`であること
+    - もし`R::​traits_type`が妥当な型の場合、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;R&amp;gt;::type_traits, traits&amp;gt;`が`true`であること
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_string_view: C++23 P2166R1, P1989R2対応</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_constructor.html"/>
      <id>1aa234e60d6b85047c84b23b7faa5987e74276ef:reference/string_view/basic_string_view/op_constructor.md</id>
      <updated>2021-08-19T10:43:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_constructor.md b/reference/string_view/basic_string_view/op_constructor.md
index 48925c664..d2c66d23a 100644
--- a/reference/string_view/basic_string_view/op_constructor.md
+++ b/reference/string_view/basic_string_view/op_constructor.md
@@ -9,34 +9,47 @@
 constexpr basic_string_view() noexcept;                        // (1)
 constexpr basic_string_view(
             const basic_string_view&amp;amp;) noexcept = default;      // (2)
+
 constexpr basic_string_view(const CharT* str);                 // (3)
-constexpr basic_string_view(const CharT* str, size_type len);  // (4)
+basic_string_view(nullptr_t) = delete;                         // (4) C++23
+
+constexpr basic_string_view(const CharT* str, size_type len);  // (5)
 
 template &amp;lt;class It, class End&amp;gt;
-constexpr basic_string_view(It first, End last);               // (5) C++20
+constexpr basic_string_view(It begin, End end);                // (6) C++20
+
+template &amp;lt;class R&amp;gt;
+constexpr basic_string_view(R&amp;amp;&amp;amp; r);                            // (7) C++23
 ```
 
 ## 概要
 - (1) : デフォルトコンストラクタ。空の`basic_string_view`オブジェクトを構築する
 - (2) : コピーコンストラクタ。コピー元と同じ文字列を参照する
 - (3) : 文字配列を受けとって、その文字配列の全体(ただしヌル文字列を含む場合はそこまで)を参照する
-- (4) : 文字配列と長さを受けとって、文字配列`str`の先頭`len`文字を参照する
-- (5) : 文字のイテレータ範囲`[first, last)`を参照する
+- (5) : 文字配列と長さを受けとって、文字配列`str`の先頭`len`文字を参照する
+- (6) : 文字のイテレータ範囲`[begin, end)`を参照する
+- (7) : 文字のレンジ`R`を参照する
 
 
 ## テンプレートパラメータ制約
-- (5) :
+- (6) :
     - `It`は[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)の要件を満たすこと
     - `End`は[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`&amp;lt;It&amp;gt;`の要件を満たすこと
     - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`iter_value_t`](/reference/iterator/iter_value_t.md)`&amp;lt;It&amp;gt;, charT&amp;gt;`が`true`であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;End, size_type&amp;gt;`が`false`であること
+- (7) :
+    - `R`はコンセプト[`ranges::contiguous_range`](/reference/ranges/contiguous_range.md.nolink)および[`ranges​::​sized_range`](/reference/ranges/sized_range.md.nolink)のモデルであること
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`ranges::ranve_value_t`](/reference/ranges/ranve_value_t.md.nokink)`&amp;lt;R&amp;gt;, charT&amp;gt;`が`true`であること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;R, const charT*&amp;gt;`が`false`であること
+    - `d`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;R&amp;gt;`型の左辺値としたとき、`d.operator ​::​std​::​basic_string_view&amp;lt;charT, traits&amp;gt;()`が妥当な式ではないこと
+    - もし`R::​traits_type`が妥当な型の場合、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference_t.md)`&amp;lt;R&amp;gt;::type_traits, traits&amp;gt;`が`true`であること
 
 
 ## 事前条件
 - (3) : 範囲`[str, str + Traits::`[`length`](/reference/string/char_traits/length.md)`(str))`が妥当であること (アクセス可能であること)
-- (4) : 範囲`[str, str + len)`が妥当であること
-- (5) :
-    - 範囲`[first, last)`が妥当であること
+- (5) : 範囲`[str, str + len)`が妥当であること
+- (6) :
+    - 範囲`[begin, end)`が妥当であること
     - `It`が[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)のモデルであること
     - `End`が[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`&amp;lt;It&amp;gt;`のモデルであること
 
@@ -46,13 +59,19 @@ constexpr basic_string_view(It first, End last);               // (5) C++20
 
 - (1) : `data_ = nullptr;`および`size_ = 0;`とする
 - (3) : `data_ = str;`および`size_ = Traits::`[`length`](/reference/string/char_traits/length.md)`(str);`とする
-- (4) : `data_ = str;`および`size_ = len;`とする
-- (5) : `data_ =` [`to_address`](/reference/memory/to_address.md)`(first);`および`size_ = last - first;`とする
+- (5) : `data_ = str;`および`size_ = len;`とする
+- (6) : `data_ =` [`to_address`](/reference/memory/to_address.md)`(begin);`および`size_ = end - begin;`とする
+- (7) : `data_ =` [`ranges::data`](/reference/ranges/data.md.nolink)`(r);`および`size_ =` [`ranges::size`](/reference/ranges/size.md.nolink)`(r);`とする
 
 
 ## 計算量
-- (1), (4) : 定数時間
-- (3): 文字数に対して線形時間
+- (1), (5) : 定数時間
+- (3) : 文字数に対して線形時間
+
+
+## 例外
+- (7) : [`ranges::data`](/reference/ranges/data.md.nolink)`(r)`および[`ranges::size`](/reference/ranges/size.md.nolink)`(r)`が投げた例外
+
 
 ## 備考
 - `basic_string_view`のコンストラクタに`template&amp;lt;size_t N&amp;gt;basic_string_view(const charT (&amp;amp;str)[N])`タイプの配列を受け取るコンストラクタが無いのは次の使い方をしたとき`str`のサイズが`sizeof(buf)`となり、それは利用者の意図しない挙動になる可能性が高いと判断されたからである。
@@ -140,3 +159,8 @@ int main()
 ## 参照
 - [ISO/IEC JTC1 SC22 WG21 N3762](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3762.html#avoid-strlen)
 - [P1391R4 Range constructor for `std::string_view`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1391r4.pdf)
+    - C++20での、イテレータ範囲版コンストラクタ追加
+- [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
+    - C++23での、`nullptr_t`をとるコンストラクタのdelete宣言追加
+- [P1989R2 Range constructor for `std::string_view` 2: Constrain Harder](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1989r2.pdf)
+    - C++23での、レンジ版コンストラクタ追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- basic_string_view: C++23 P2166R1, P1989R2対応</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_deduction_guide.html"/>
      <id>1aa234e60d6b85047c84b23b7faa5987e74276ef:reference/string_view/basic_string_view/op_deduction_guide.md</id>
      <updated>2021-08-19T10:43:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_deduction_guide.md b/reference/string_view/basic_string_view/op_deduction_guide.md
index c9cf98813..a2e10a5e4 100644
--- a/reference/string_view/basic_string_view/op_deduction_guide.md
+++ b/reference/string_view/basic_string_view/op_deduction_guide.md
@@ -7,19 +7,27 @@
 ```cpp
 namespace std {
   template &amp;lt;class It, class End&amp;gt;
-  basic_string_view(It, End) -&amp;gt; basic_string_view&amp;lt;iter_value_t&amp;lt;It&amp;gt;&amp;gt;; // (1) C++20
+  basic_string_view(It, End)
+    -&amp;gt; basic_string_view&amp;lt;iter_value_t&amp;lt;It&amp;gt;&amp;gt;;          // (1) C++20
+
+  template&amp;lt;class R&amp;gt;
+  basic_string_view(R&amp;amp;&amp;amp;)
+    -&amp;gt; basic_string_view&amp;lt;ranges::range_value_t&amp;lt;R&amp;gt;&amp;gt;;  // (2) C++23
 }
 ```
 * iter_value_t[link /reference/iterator/iter_value_t.md]
+* ranges::range_value_t[link /reference/ranges/range_value_t.md.nolink]
 
 ## 概要
-`std::basic_string_view`クラステンプレートの型推論補助。イテレータ範囲から推論する。
+`std::basic_string_view`クラステンプレートの型推論補助。イテレータ範囲やレンジから推論する。
 
 
 ## テンプレートパラメータ制約
 - (1) :
     - `It`は[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)の要件を満たすこと
     - `End`は[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`&amp;lt;It&amp;gt;`の要件を満たすこと
+- (2) :
+    - `R`は[`ranges::contiguous_range`](/reference/ranges/contiguous_range.md.nolink)の要件を満たすこと
 
 
 ## 例
@@ -59,3 +67,5 @@ Hello
 
 ## 参照
 - [P1391R4 Range constructor for `std::string_view`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1391r4.pdf)
+- [P1989R2 Range constructor for `std::string_view` 2: Constrain Harder](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1989r2.pdf)
+    - C++23での、レンジ版推論補助追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 -- Merge pull request #891 from naritan/patch-2</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>f0db87cc61c7033307404cc7d566af6cd76887f2:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2021-08-18T19:29:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 90ee72a45..74dcc4966 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -17,7 +17,7 @@ int main()
   const bool b1 = ++b;
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
   const bool b2 = ++b;
-  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
+  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b2 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
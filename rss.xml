<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-11-09T14:37:57.706186</updated>
  <id>2b2584de-b7db-441d-b366-d61dae360e36</id>

  
    <entry>
      <title>cpprefjp - C++日本語リファレンス -- スポンサー更新 #1212</title>
      <link href="https://cpprefjp.github.io/index.html"/>
      <id>cc748a66a57065cd020e019f780845390e3026f8:index.md</id>
      <updated>2023-11-09T16:27:29+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cpprefjp - C++日本語リファレンス&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトcpprefjpは、プログラミング言語C++のリファレンスを提供するWebサイトです。&lt;/p&gt;
&lt;p&gt;最新C++バージョンのリファレンスを提供していきます。&lt;/p&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;p&gt;本リファレンスサイトは、C++言語の最新のリファレンスを常に提供し続けることを目標にしています。&lt;/p&gt;
&lt;p&gt;各クラス、関数にはそれぞれ1つ以上のサンプルコードを付けていく方針です。&lt;/p&gt;
&lt;p&gt;本サイトでは、他サイトおよび規格書の直接的な翻訳ではなく、編集者の調査と考えに基づいた解説を提供していきます。&lt;/p&gt;
&lt;h2&gt;スポンサーシップ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプロジェクトは、持続的な活動のため、ユーザーの方々からのご支援をお待ちしております。上記Open Collectiveのプロジェクトでスポンサーシップの募集をしております。&lt;/p&gt;
&lt;p&gt;ご支援いただくユーザーの方々は、本ページ (cpprefjpサイトのトップページ) に、金額順でロゴを表示させていただきます (金額が同じ場合は登録順)。ご支援いただいた資金は、貢献度に応じてコントリビューターに分配させていただきます。&lt;/p&gt;
&lt;p&gt;また、スポンサーシップの入金方法として、Open Collectiveのほかに銀行振込も対応しております。&lt;/p&gt;
&lt;p&gt;銀行振込に関して、またはそれ以外でスポンサーシップの相談に関しては、以下のメールアドレスにお問い合わせください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メールアドレス : &lt;a href=&#34;mailto:cpprefjp_org@googlegroups.com&#34;&gt;cpprefjp_org@googlegroups.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;宛名 : cpprefjp管理者&lt;ul&gt;
&lt;li&gt;代表として、主に高橋晶 (Akira Takahashi) がご対応させていただきます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参加方法&lt;/h2&gt;
&lt;p&gt;本サイトは、多くのユーザの手によって書かれています。&lt;/p&gt;
&lt;p&gt;あなたがこの cpprefjp プロジェクトに参加したいのであれば、私達はそれをとても歓迎します。&lt;/p&gt;
&lt;p&gt;cpprefjp プロジェクトに参加する方法は簡単です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site/issues?state=open&#34; target=&#34;_blank&#34;&gt;cpprefjp の Issues&lt;/a&gt; にアクセスし、&lt;/li&gt;
&lt;li&gt;あなたが手伝えそうな、まだ誰にもアサインされていないタスクを見つけ、&lt;/li&gt;
&lt;li&gt;その Issue のコメントに「このタスクやります」と書く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これだけです。&lt;/p&gt;
&lt;p&gt;あとは、そのタスクを完了させて pull request を送れば、あなたも cpprefjp のコミッタになれます。&lt;/p&gt;
&lt;h2&gt;編集者向けのさらなる情報&lt;/h2&gt;
&lt;p&gt;本サイトは、GitHubのリポジトリ上で、Markdown形式でリファレンスを記載し、GitHub Pagesに自動反映するという形をとっています。本サイトのMarkdownソースは、以下のリポジトリにあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpprefjp/site&#34; target=&#34;_blank&#34;&gt;https://github.com/cpprefjp/site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記リポジトリのREADMEに、コアメンバの一覧を記載してありますので、何かありましたらそのうちの誰か、もしくはリポジトリへのIssueという形でご相談ください。&lt;/p&gt;
&lt;p&gt;本サイトの編集方法については、以下のドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトのコンテンツを作成、編集するにあたり、仕様を熟知し、一人で完璧に正しい内容を書くことは要求しません。&lt;/p&gt;
&lt;p&gt;たとえ間違ったことを記載した場合や、不安の残る内容を記載した場合でも、それに気づいた誰かが修正してくれます。&lt;/p&gt;
&lt;h2&gt;その他参考情報&lt;/h2&gt;
&lt;p&gt;以下のWebサイトから転載許可をいただいています。&lt;/p&gt;
&lt;p&gt;翻訳や解説などで活用してください：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190112041213/http://episteme.wankuma.com/stlprog/index.html&#34; target=&#34;_blank&#34;&gt;Standard Template Library プログラミング on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スポンサー&lt;/h2&gt;
&lt;p&gt;cpprefjpプロジェクトは、以下の方々にスポンサーになっていただいております。&lt;/p&gt;
&lt;h3&gt;ゴールドスポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://shiguredo.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;shiguredo&#34; src=&#34;https://raw.githubusercontent.com/cpprefjp/image/master/sponsors/shiguredo/shiguredo.png&#34; width=&#34;560&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;シルバースポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.fixstars.com/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Fixstars&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/Fixstars/fixstars-logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://acerola-software.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Acerola Software&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/Acerola/as_logo.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://vaporoid.com/sys/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;vaporoid&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/vaporoid/cpprefjp-400x150.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.cube-soft.jp/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;CubeSoft&#34; src=&#34;https://raw.githubusercontent.com/cube-soft/cube.assets/master/home/banner/large.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://mkohana.github.io/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;M.Kohana&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/m_kohana/m_kohana.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;ブロンズスポンサー&lt;/h3&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://opencollective.com/odan&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;odan&#34; src=&#34;https://odan.dev/icon.jpeg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://www.unagiworks.net/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;unagi&#34; src=&#34;https://www.unagiworks.net/blog/wp-content/uploads/2019/01/logo.gif&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/nodchip&#34; target=&#34;_blank&#34;&gt;nodchip&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;イシハラユウヤ様&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/meg_nakagami&#34; target=&#34;_blank&#34;&gt;Megumi Nakagami様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;a href=&#34;https://github.com/minachun/minachun&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;minachun / J.Minami&#34; src=&#34;https://raw.githubusercontent.com/minachun/minachun/main/banner.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/hashitaku&#34; target=&#34;_blank&#34;&gt;Hashitaku様&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div style=&#34;text-align: center&#34;&gt;&lt;img alt=&#34;yukika2e&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/sponsors/yukika2e/yukika2e.png&#34; /&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;スポンサーシップについては、以下のページを参照ください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opencollective.com/cpprefjp&#34; target=&#34;_blank&#34;&gt;cpprefjp - Open Collective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;連絡先が不明なスポンサー様は、ロゴの表示が現在できておりません。Open Collectiveの問い合わせフォームから、表示するロゴ画像とリンク先URLについてご連絡いただきたいです。&lt;/p&gt;
&lt;h2&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;本サイトは、サイトの改善のためにGoogleアナリティクスを使用しています。本サイトをご利用中のブラウザは、Googleに特定の情報を自動的に送信します。本サイトは、この分析のためにCookieを使用します。利用者は、本サイトを利用することで、この目的においてCookieを使用することを許可したものとみなします。&lt;/p&gt;
&lt;p&gt;Googleによるデータ使用の詳細は、以下のURLで確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/ja/policies/privacy/partners/&#34; target=&#34;_blank&#34;&gt;https://www.google.com/intl/ja/policies/privacy/partners/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ライセンスについて&lt;/h2&gt;
&lt;p&gt;本サイトの情報は、&lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 3.0 非移植 ライセンス(CC BY)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://i.creativecommons.org/l/by/3.0/88x31.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;cpprefjpサイトのアイコン・ロゴ画像は、&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja&#34; target=&#34;_blank&#34;&gt;クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 (CC BY-NC-ND 4.0)&lt;/a&gt;の下に提供しています。&lt;/p&gt;
&lt;p&gt;高解像度画像データ： &lt;a href=&#34;https://github.com/cpprefjp/image/tree/master/cpprefjp/icon&#34; target=&#34;_blank&#34;&gt;cpprefjp/image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34; /&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>apply -- tuple/apply : Gitのコンフリクトコメントを削除</title>
      <link href="https://cpprefjp.github.io/reference/tuple/apply.html"/>
      <id>118d5b9ebee27d1a04c52bf9c0bfdadd7f940b37:reference/tuple/apply.md</id>
      <updated>2023-11-09T01:46:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/apply.md b/reference/tuple/apply.md
index cd65bab1b..f78a536d5 100644
--- a/reference/tuple/apply.md
+++ b/reference/tuple/apply.md
@@ -17,10 +17,7 @@ namespace std {
 ```
 * tuple-like[link tuple-like.md]
 * tuple-like[link tuple-like.md]
-&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; Updated upstream
 * see below[italic]
-=======
-&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Stashed changes
 
 ## 概要
 タプルを展開し、関数の引数に適用してその関数を実行する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_copy -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_copy.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/ranges_uninitialized_copy.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_copy.md b/reference/memory/ranges_uninitialized_copy.md
index dea3cc027..381a31874 100644
--- a/reference/memory/ranges_uninitialized_copy.md
+++ b/reference/memory/ranges_uninitialized_copy.md
@@ -83,6 +83,10 @@ return {std::move(ifirst), ofirst};
 * iter_reference_t[link /reference/iterator/iter_reference_t.md]
 * std::move[link /reference/utility/move.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_copy_n -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_copy_n.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/ranges_uninitialized_copy_n.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_copy_n.md b/reference/memory/ranges_uninitialized_copy_n.md
index 74ca629bc..ba3edaebd 100644
--- a/reference/memory/ranges_uninitialized_copy_n.md
+++ b/reference/memory/ranges_uninitialized_copy_n.md
@@ -63,6 +63,10 @@ return {std::move(t.in).base(), t.out};
 * default_sentinel[link /reference/iterator/default_sentinel_t.md]
 * std::move[link /reference/utility/move.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_default_construct.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/ranges_uninitialized_default_construct.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_default_construct.md b/reference/memory/ranges_uninitialized_default_construct.md
index 1003a3096..7e4ae7e34 100644
--- a/reference/memory/ranges_uninitialized_default_construct.md
+++ b/reference/memory/ranges_uninitialized_default_construct.md
@@ -62,6 +62,9 @@ return first;
 * remove_reference_t[link /reference/type_traits/remove_reference.md]
 * iter_reference_t[link /reference/iterator/iter_reference_t.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
 
 ## 備考
 - [`std::vector`](/reference/vector/vector.md)クラスの要素数を変更する操作は、要素を値構築するためゼロ初期化が行われる。その値初期化のコストが気になるような場合に、デフォルト構築することでプログラマの責任で必要な分だけ任意に初期化でき、パフォーマンス向上が期待できるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct_n -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_default_construct_n.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/ranges_uninitialized_default_construct_n.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_default_construct_n.md b/reference/memory/ranges_uninitialized_default_construct_n.md
index 02dd22a2d..e1ff73716 100644
--- a/reference/memory/ranges_uninitialized_default_construct_n.md
+++ b/reference/memory/ranges_uninitialized_default_construct_n.md
@@ -38,6 +38,9 @@ return uninitialized_default_construct(counted_iterator(first, n),
 * default_sentinel[link /reference/iterator/default_sentinel_t.md]
 * base()[link /reference/iterator/counted_iterator/base.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_fill -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_fill.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/ranges_uninitialized_fill.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_fill.md b/reference/memory/ranges_uninitialized_fill.md
index a4df77097..27c6f35d0 100644
--- a/reference/memory/ranges_uninitialized_fill.md
+++ b/reference/memory/ranges_uninitialized_fill.md
@@ -66,6 +66,9 @@ return first;
 * remove_reference_t[link /reference/type_traits/remove_reference.md]
 * iter_reference_t[link /reference/iterator/iter_reference_t.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_fill_n -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_fill_n.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/ranges_uninitialized_fill_n.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_fill_n.md b/reference/memory/ranges_uninitialized_fill_n.md
index 8b4a686ce..4490ea569 100644
--- a/reference/memory/ranges_uninitialized_fill_n.md
+++ b/reference/memory/ranges_uninitialized_fill_n.md
@@ -37,6 +37,9 @@ return uninitialized_fill(counted_iterator(first, n), default_sentinel, x).base(
 * default_sentinel[link /reference/iterator/default_sentinel_t.md]
 * base()[link /reference/iterator/counted_iterator/base.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_move -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_move.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/ranges_uninitialized_move.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_move.md b/reference/memory/ranges_uninitialized_move.md
index 37ae4a90f..d19f2cb1d 100644
--- a/reference/memory/ranges_uninitialized_move.md
+++ b/reference/memory/ranges_uninitialized_move.md
@@ -84,6 +84,11 @@ return {std::move(ifirst), ofirst};
 * std::move[link /reference/utility/move.md]
 * ranges::iter_move[link /reference/iterator/iter_move.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
+
+またその場合、`[ifirst, ilast)`内の一部のオブジェクトは有効だが未規定な状態として残される。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_move_n -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_move_n.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/ranges_uninitialized_move_n.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_move_n.md b/reference/memory/ranges_uninitialized_move_n.md
index 5dbc814bb..0b646f6a3 100644
--- a/reference/memory/ranges_uninitialized_move_n.md
+++ b/reference/memory/ranges_uninitialized_move_n.md
@@ -63,6 +63,11 @@ return {std::move(t.in).base(), t.out};
 * default_sentinel[link /reference/iterator/default_sentinel_t.md]
 * std::move[link /reference/utility/move.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
+
+またその場合、`[ifirst, ifirst + n)`内の一部のオブジェクトは有効だが未規定な状態として残される。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_value_construct -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_value_construct.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/ranges_uninitialized_value_construct.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_value_construct.md b/reference/memory/ranges_uninitialized_value_construct.md
index 32ae40a9f..2d26b966a 100644
--- a/reference/memory/ranges_uninitialized_value_construct.md
+++ b/reference/memory/ranges_uninitialized_value_construct.md
@@ -62,6 +62,10 @@ return first;
 * remove_reference_t[link /reference/type_traits/remove_reference.md]
 * iter_reference_t[link /reference/iterator/iter_reference_t.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_value_construct_n -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_value_construct_n.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/ranges_uninitialized_value_construct_n.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_value_construct_n.md b/reference/memory/ranges_uninitialized_value_construct_n.md
index 107825ab3..ba2cf6981 100644
--- a/reference/memory/ranges_uninitialized_value_construct_n.md
+++ b/reference/memory/ranges_uninitialized_value_construct_n.md
@@ -38,6 +38,10 @@ return uninitialized_value_construct(counted_iterator(first, n),
 * default_sentinel[link /reference/iterator/default_sentinel_t.md]
 * base()[link /reference/iterator/counted_iterator/base.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_copy -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_copy.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/uninitialized_copy.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_copy.md b/reference/memory/uninitialized_copy.md
index 28c94f27c..0f985d872 100644
--- a/reference/memory/uninitialized_copy.md
+++ b/reference/memory/uninitialized_copy.md
@@ -51,6 +51,10 @@ namespace std {
 ## 戻り値
 `result`
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
+
 
 ### 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_copy_n -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_copy_n.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/uninitialized_copy_n.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_copy_n.md b/reference/memory/uninitialized_copy_n.md
index 930e382b2..461b339ba 100644
--- a/reference/memory/uninitialized_copy_n.md
+++ b/reference/memory/uninitialized_copy_n.md
@@ -54,6 +54,10 @@ namespace std {
 ## 戻り値
 `result`
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
+
 
 ### 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_default_construct.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/uninitialized_default_construct.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_default_construct.md b/reference/memory/uninitialized_default_construct.md
index 6fdf2633f..d3b092fa5 100644
--- a/reference/memory/uninitialized_default_construct.md
+++ b/reference/memory/uninitialized_default_construct.md
@@ -38,6 +38,9 @@ for (; first != last; ++first)
 ## 戻り値
 なし
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
 
 ## 備考
 - [`std::vector`](/reference/vector/vector.md)クラスの要素数を変更する操作は、要素を値構築するためゼロ初期化が行われる。その値初期化のコストが気になるような場合に、デフォルト構築することでプログラマの責任で必要な分だけ任意に初期化でき、パフォーマンス向上が期待できるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct_n -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_default_construct_n.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/uninitialized_default_construct_n.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_default_construct_n.md b/reference/memory/uninitialized_default_construct_n.md
index 18919f615..40207f333 100644
--- a/reference/memory/uninitialized_default_construct_n.md
+++ b/reference/memory/uninitialized_default_construct_n.md
@@ -37,6 +37,9 @@ return first;
 * addressof[link addressof.md]
 * iterator_traits[link /reference/iterator/iterator_traits.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
 
 ## 備考
 - [`std::vector`](/reference/vector/vector.md)クラスの要素数を変更する操作は、要素を値構築するためゼロ初期化が行われる。その値初期化のコストが気になるような場合に、デフォルト構築することでプログラマの責任で必要な分だけ任意に初期化でき、パフォーマンス向上が期待できるようになる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_fill -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_fill.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/uninitialized_fill.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_fill.md b/reference/memory/uninitialized_fill.md
index 59d8a5dcd..ec93f3fb3 100644
--- a/reference/memory/uninitialized_fill.md
+++ b/reference/memory/uninitialized_fill.md
@@ -46,6 +46,9 @@ namespace std {
 ## 戻り値
 なし
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
 
 ### 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_fill_n -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_fill_n.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/uninitialized_fill_n.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_fill_n.md b/reference/memory/uninitialized_fill_n.md
index 5e362ff29..03dd5c848 100644
--- a/reference/memory/uninitialized_fill_n.md
+++ b/reference/memory/uninitialized_fill_n.md
@@ -48,6 +48,9 @@ namespace std {
 ## 戻り値
 `first`
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
 
 ### 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_move -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_move.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/uninitialized_move.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_move.md b/reference/memory/uninitialized_move.md
index b431ad161..bc78fbf44 100644
--- a/reference/memory/uninitialized_move.md
+++ b/reference/memory/uninitialized_move.md
@@ -46,6 +46,9 @@ for (; first != last; ++result, ++first)
 ## 戻り値
 `result`
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
 
 ### 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_move_n -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_move_n.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/uninitialized_move_n.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_move_n.md b/reference/memory/uninitialized_move_n.md
index 3af10f486..26888fc1a 100644
--- a/reference/memory/uninitialized_move_n.md
+++ b/reference/memory/uninitialized_move_n.md
@@ -46,6 +46,9 @@ for (; n &amp;gt; 0; ++result, (void)++first, --n)
 ## 戻り値
 `{first, result}`
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
 
 ### 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_value_construct -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_value_construct.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/uninitialized_value_construct.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_value_construct.md b/reference/memory/uninitialized_value_construct.md
index 4f27319ed..ed381b073 100644
--- a/reference/memory/uninitialized_value_construct.md
+++ b/reference/memory/uninitialized_value_construct.md
@@ -38,6 +38,9 @@ for (; first != last; ++first)
 ## 戻り値
 なし
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
 
 ### 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_value_construct_n -- 未初期化メモリに対するアルゴリズム、例外発生時の振る舞いについて追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_value_construct_n.html"/>
      <id>2f67b2a41bf0aaac87dd465530ed1e7f299ec156:reference/memory/uninitialized_value_construct_n.md</id>
      <updated>2023-11-08T17:06:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_value_construct_n.md b/reference/memory/uninitialized_value_construct_n.md
index 5645f1872..f27882d74 100644
--- a/reference/memory/uninitialized_value_construct_n.md
+++ b/reference/memory/uninitialized_value_construct_n.md
@@ -37,6 +37,10 @@ return first;
 * addressof[link addressof.md]
 * iterator_traits[link /reference/iterator/iterator_traits.md]
 
+## 例外
+
+呼び出すコンストラクタなどから例外がスローされた場合、その例外がこの関数の外側に伝播される前に、その時点で構築済のオブジェクトは全て未規定の順序で破棄される。すなわち、例外がスローされた場合は初期化対象領域は未初期化のままとなる。
+
 
 ### 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_copy -- 未初期化メモリに対するアルゴリズム、事前条件追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_copy.html"/>
      <id>9a64346a2a1d30ebefdbc5136b08e9a8eaa8b5c9:reference/memory/uninitialized_copy.md</id>
      <updated>2023-11-08T16:42:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_copy.md b/reference/memory/uninitialized_copy.md
index f1e335773..28c94f27c 100644
--- a/reference/memory/uninitialized_copy.md
+++ b/reference/memory/uninitialized_copy.md
@@ -25,6 +25,9 @@ namespace std {
 
 入力範囲`[first, last)`のコピーを未初期化出力範囲`[result, )`に書き込む。
 
+## 事前条件
+
+- イテレータ範囲`[result, result + (last - first))`が`[first, last)`と重ならないこと
 
 ## 効果
 - C++03 : 以下と等価
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_copy_n -- 未初期化メモリに対するアルゴリズム、事前条件追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_copy_n.html"/>
      <id>9a64346a2a1d30ebefdbc5136b08e9a8eaa8b5c9:reference/memory/uninitialized_copy_n.md</id>
      <updated>2023-11-08T16:42:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_copy_n.md b/reference/memory/uninitialized_copy_n.md
index 374055f2a..930e382b2 100644
--- a/reference/memory/uninitialized_copy_n.md
+++ b/reference/memory/uninitialized_copy_n.md
@@ -26,6 +26,9 @@ namespace std {
 
 入力イテレータ範囲`[first, first + n)`のコピーを未初期化出力イテレータ範囲`[result, result + n)`に書き込む。
 
+## 事前条件
+
+- イテレータ範囲`[result, result + n)`が`[first, first + n)`と重ならないこと
 
 ## 効果
 - C++11 : 以下と等価
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_move -- 未初期化メモリに対するアルゴリズム、事前条件追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_move.html"/>
      <id>9a64346a2a1d30ebefdbc5136b08e9a8eaa8b5c9:reference/memory/uninitialized_move.md</id>
      <updated>2023-11-08T16:42:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_move.md b/reference/memory/uninitialized_move.md
index 790e61d87..b431ad161 100644
--- a/reference/memory/uninitialized_move.md
+++ b/reference/memory/uninitialized_move.md
@@ -26,6 +26,9 @@ namespace std {
 
 入力範囲`[first, last)`からムーブして未初期化出力範囲`[result, )`に書き込む。
 
+## 事前条件
+
+- イテレータ範囲`[result, result + (last - first))`が`[first, last)`と重ならないこと
 
 ## 効果
 以下と等価：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_move_n -- 未初期化メモリに対するアルゴリズム、事前条件追記</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_move_n.html"/>
      <id>9a64346a2a1d30ebefdbc5136b08e9a8eaa8b5c9:reference/memory/uninitialized_move_n.md</id>
      <updated>2023-11-08T16:42:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_move_n.md b/reference/memory/uninitialized_move_n.md
index 8352c6f19..3af10f486 100644
--- a/reference/memory/uninitialized_move_n.md
+++ b/reference/memory/uninitialized_move_n.md
@@ -26,6 +26,9 @@ namespace std {
 
 入力イテレータ範囲`[first, first + n)`からムーブして未初期化出力イテレータ範囲`[result, )`に書き込む。
 
+## 事前条件
+
+- イテレータ範囲`[result, result + n)`が`[first, first + n)`と重ならないこと
 
 ## 効果
 以下と等価：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>charconv -- update information about charconv</title>
      <link href="https://cpprefjp.github.io/reference/charconv.html"/>
      <id>1bf71dc803d140329e3690f6abaa004bb21b9c97:reference/charconv.md</id>
      <updated>2023-11-05T21:08:32+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;charconv&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;charconv&amp;gt;&lt;/code&gt;ヘッダでは、ロケール依存なし、フォーマット解析なしの高速な文字列・数値変換を提供する。&lt;/p&gt;
&lt;p&gt;これらの変換は以下のような特徴がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フォーマットは引数で指定し、入力値のフォーマットを実行時に解析することはない&lt;/li&gt;
&lt;li&gt;動的にメモリ確保を行わない&lt;/li&gt;
&lt;li&gt;ロケールを考慮しない（Cロケール (POSIXロケール) 固定）&lt;/li&gt;
&lt;li&gt;バッファオーバーランしない&lt;/li&gt;
&lt;li&gt;例外を投げない（エラーは戻り値で表現、エラーと有効値は区別可能）&lt;/li&gt;
&lt;li&gt;使用可能なフォーマットは最小限&lt;ul&gt;
&lt;li&gt;スペースが現れた場合はそこで変換終了&lt;/li&gt;
&lt;li&gt;浮動小数点数の指数部以外の&lt;code&gt;+&lt;/code&gt;符号は考慮されない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;による小数点以下の桁数指定はできない&lt;/li&gt;
&lt;li&gt;16進数に&lt;code&gt;0x&lt;/code&gt;は付けられない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;文字列 ⇔ 数値変換関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/to_chars.html&#34;&gt;to_chars&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値 → 文字列の変換&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/from_chars.html&#34;&gt;from_chars&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列 → 数値の変換&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;クラス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/chars_format.html&#34;&gt;chars_format&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;変換時の浮動小数点フォーマット指定のための列挙体&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/to_chars_result.html&#34;&gt;to_chars_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/to_chars.html&#34;&gt;to_chars&lt;/a&gt;&lt;/code&gt;の結果型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/from_chars_result.html&#34;&gt;from_chars_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/from_chars.html&#34;&gt;from_chars&lt;/a&gt;&lt;/code&gt;の結果型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;導入された経緯&lt;/h2&gt;
&lt;p&gt;XMLやJSONに代表されるテキストベースのデータを利用するケースが増えており、C++においてそれを利用するケースも増加している。
それらは多くの場合コンピュータによって生成されコンピュータによって読まれるため国際化対応の必要がなく、生成する側でも読む側でもロケールに非依存であり、考慮するべきではない。&lt;br /&gt;
そして、これらのデータは多くの場合通信に利用されており高いスループットを要求される。&lt;/p&gt;
&lt;p&gt;しかし、C++17未満の環境で利用可能であった文字列変換法はいずれもロケールに依存しておりロケール非依存な変換が提供されていなかったうえに、いずれの方法も動的なフォーマットの解析・指定や動的メモリ確保、エラー報告の不足等何かしら使いにくい所があった。&lt;br /&gt;
動的なフォーマット解析はコンパイル時のフォーマットチェック及び選択を妨げ、（&lt;code&gt;iostream&lt;/code&gt;のマニピュレータのような）動的なフォーマット指定はその状態のスレッド間共有が必要になるため好ましくなく、動的メモリ確保を行わず変換エラーは区別できることが望ましい。&lt;/p&gt;
&lt;p&gt;また、浮動小数点数を10進文字列→2進浮動小数点数→10進文字列と変換した時に最初と最後の文字列が一致する保証がある変換方法も提供されていなかった。&lt;/p&gt;
&lt;p&gt;各変換方法とその問題点&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;欠点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、フォーマットの動的解析、バッファオーバーランの危険性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;snprintf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、フォーマットの動的解析&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sscanf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、フォーマットの動的解析&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、エラー報告の不足&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、先頭ホワイトスペースの無視、接頭辞(0x等)を考慮する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strstream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、先頭ホワイトスペースの無視&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stringstream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、先頭ホワイトスペースの無視、動的メモリ確保&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;num_put / num_get facets&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、仮想関数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;to_string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール依存、動的メモリ確保&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stoi&lt;/code&gt;等&lt;/td&gt;
&lt;td&gt;ロケール依存、動的メモリ確保、先頭ホワイトスペースの無視、接頭辞(0x等)を考慮する、例外の送出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらの問題がなく高速な文字列・数値変換を提供するために、本ヘッダ及び&lt;code&gt;to_chars, from_chars&lt;/code&gt;関数が導入された。各関数の特徴は冒頭及び個別のページを参照のこと。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++17&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 7.0(整数のみ), 14.0(to_chars()のみ浮動小数点もsupport)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 8.0(整数のみ), 11.1(full support)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2017 update 7(整数のみ), update 9(full support)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/2016/08/24/181540&#34; target=&#34;_blank&#34;&gt;C++1z ロケール依存なし、フォーマット解析なしの高速な文字列・数値変換 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0067r0.html&#34; target=&#34;_blank&#34;&gt;P0067R0 Elementary string conversions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r1.html&#34; target=&#34;_blank&#34;&gt;P0067R1 Elementary string conversions, revision 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r2.html&#34; target=&#34;_blank&#34;&gt;P0067R2 Elementary string conversions, revision 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r3.html&#34; target=&#34;_blank&#34;&gt;P0067R3 Elementary string conversions, revision 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r4.html&#34; target=&#34;_blank&#34;&gt;P0067R4 Elementary string conversions, revision 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r5.html&#34; target=&#34;_blank&#34;&gt;P0067R5 Elementary string conversions, revision 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0682r1.html&#34; target=&#34;_blank&#34;&gt;P0682R1: Repairing elementary string conversions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/n4412.html&#34; target=&#34;_blank&#34;&gt;N4412: Shortcomings of iostreams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wg21.cmeerw.net/lwg/issue3080&#34; target=&#34;_blank&#34;&gt;LWG Issue 3080. Floating point from_chars pattern specification breaks round-tripping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_chars -- update information about charconv</title>
      <link href="https://cpprefjp.github.io/reference/charconv/from_chars.html"/>
      <id>1bf71dc803d140329e3690f6abaa004bb21b9c97:reference/charconv/from_chars.md</id>
      <updated>2023-11-05T21:08:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/from_chars.md b/reference/charconv/from_chars.md
index d23eec298..855170e2e 100644
--- a/reference/charconv/from_chars.md
+++ b/reference/charconv/from_chars.md
@@ -1,6 +1,6 @@
 # from_chars
 * charconv[meta header]
-* function template[meta id-type]
+* function[meta id-type]
 * std[meta namespace]
 * cpp17[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_chars -- update information about charconv</title>
      <link href="https://cpprefjp.github.io/reference/charconv/to_chars.html"/>
      <id>1bf71dc803d140329e3690f6abaa004bb21b9c97:reference/charconv/to_chars.md</id>
      <updated>2023-11-05T21:08:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/charconv/to_chars.md b/reference/charconv/to_chars.md
index aeb75e232..565102209 100644
--- a/reference/charconv/to_chars.md
+++ b/reference/charconv/to_chars.md
@@ -1,6 +1,6 @@
 # to_chars
 * charconv[meta header]
-* function template[meta id-type]
+* function[meta id-type]
 * std[meta namespace]
 * cpp17[meta cpp]
 
@@ -284,7 +284,7 @@ z
 - C++17
 
 ### 処理系
-- [Clang](/implementation.md#clang): 7.0(整数のみ)
+- [Clang](/implementation.md#clang): 7.0(整数のみ), 14.0(full support)
 - [GCC](/implementation.md#gcc): 8.0(整数のみ), 11.1(full support)
 - [Visual C++](/implementation.md#visual_cpp): 2017 update 7(整数のみ), update 9(full support)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
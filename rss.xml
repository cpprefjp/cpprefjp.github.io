<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-18T00:37:49.897837</updated>
  <id>c6de24d3-11d8-42b2-8740-a311010af4f1</id>

  
    <entry>
      <title>operator delete[] -- operator delete[] : 番号の調整</title>
      <link href="https://cpprefjp.github.io/reference/new/op_delete[].html"/>
      <id>3a5b2dc12d79e256423a3b90bb35533e103ec671:reference/new/op_delete[].md</id>
      <updated>2023-01-18T09:33:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/op_delete[].md b/reference/new/op_delete[].md
index b734ca7cd..7be6ffe5c 100644
--- a/reference/new/op_delete[].md
+++ b/reference/new/op_delete[].md
@@ -11,11 +11,11 @@ void operator delete[](void* ptr, std::align_val_t alignment) noexcept;
 void operator delete[](void* ptr, std::size_t size, std::align_val_t alignment) noexcept; // (4) C++17 から
 
 void operator delete[](void* ptr, const std::nothrow_t&amp;amp;) throw();                              // (5) C++03 まで
-void operator delete[](void* ptr, const std::nothrow_t&amp;amp;) noexcept;                             // (6) C++11 から
-void operator delete[](void* ptr, std::align_val_t alignment, const std::nothrow_t&amp;amp;) noexcept; // (7) C++17 から
+void operator delete[](void* ptr, const std::nothrow_t&amp;amp;) noexcept;                             // (5) C++11 から
+void operator delete[](void* ptr, std::align_val_t alignment, const std::nothrow_t&amp;amp;) noexcept; // (6) C++17 から
 
-void operator delete[](void* ptr, void*) throw();                                       // (8) C++03 まで
-void operator delete[](void* ptr, void*) noexcept;                                      // (8) C++11 から
+void operator delete[](void* ptr, void*) throw();                                       // (7) C++03 まで
+void operator delete[](void* ptr, void*) noexcept;                                      // (7) C++11 から
 ```
 * std::nothrow_t[link nothrow_t.md]
 * std::align_val_t[link align_val_t.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unreachable -- utility/unreachable: 微調整</title>
      <link href="https://cpprefjp.github.io/reference/utility/unreachable.html"/>
      <id>da9f2c769593d5d8b94ad15ed3291ab538c5f83f:reference/utility/unreachable.md</id>
      <updated>2023-01-18T09:25:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/unreachable.md b/reference/utility/unreachable.md
index f4e949d46..9ba4c982d 100644
--- a/reference/utility/unreachable.md
+++ b/reference/utility/unreachable.md
@@ -19,7 +19,7 @@ namespace std {
 
 
 ## 備考
-`std::unreachable`関数の事前条件は決して満たされない（恒偽式）となるため、関数呼び出しは常に未定義の動作を引き起こす。
+`std::unreachable`関数の事前条件は決して満たされない（恒偽式）ため、関数呼び出しは常に未定義の動作を引き起こす。
 C++コンパイラはこの情報を利用し、`std::unreachable`呼び出しを含まないコードパスのみが実行されうると仮定して、より高速に動作するプログラムを生成する可能性がある。
 
 
@@ -28,15 +28,18 @@ C++コンパイラはこの情報を利用し、`std::unreachable`呼び出し
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;utility&amp;gt;
 
-int f(int x)
+int flip(int x)
 {
- switch (x) {
- case 0:
- case 1:
-   return x;
- default:
-   std::unreachable();
- }
+  switch (x) {
+  case 0:
+    return 1;
+  case 1:
+    return 0;
+  default:
+    // C++コンパイラは引数 x が値0,1以外を取らないと
+    // 仮定したコード生成を行う可能性がある。
+    std::unreachable();
+  }
 }
 
 int main()
@@ -50,8 +53,8 @@ int main()
 
 ### 出力
 ```
-0
 1
+0
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- format : Rangeのデバッグ出力を解除する例を記載 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>dd2fa16c526d237459f87e1b6b2511545779968d:reference/format/format.md</id>
      <updated>2023-01-17T20:24:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index ad5be5954..110f2a53d 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -168,6 +168,8 @@ Range・シーケンスコンテナに対して使用できる標準のオプシ
 
 - `?s`書式を指定した場合、`n`オプションと、`range-underlying-spec`は指定できない。
 - コンテナが[`std::vector`](/reference/vector/vector.md)`&amp;lt;bool&amp;gt;`である場合、その要素型は`bool`として処理される
+- Range・シーケンスコンテナでは、要素型がデバッグ出力可能である場合、それがデフォルトで有効となる
+    - 要素型の書式を指定して、デバッグ出力指定をしなければ、デフォルトで有効になっているデバッグ出力を解除できる
 
 
 #### 連想コンテナの場合 (C++23)
@@ -200,7 +202,7 @@ Range・シーケンスコンテナと同じだが、デフォルトで`m`書式
 | (なし) | デフォルト | `tuple{3, 1.23, &amp;#34;hello&amp;#34;}`は`(3, 1.23, &amp;#34;hello&amp;#34;)`となる | C++23 |
 
 - 要素型ごとに個別に書式を指定することはできない
-- 文字列はデバッグ出力が常に有効
+- デバッグ出力可能な要素型の場合、デバッグ出力は常に有効
 
 
 ### 書式例
@@ -388,10 +390,16 @@ int main() {
   std::vector&amp;lt;int&amp;gt; vx = {0xf, 0x1e, 0x3c};
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5. {::#x}&amp;#34;, vx) &amp;lt;&amp;lt; std::endl;
 
+  // コンテナの要素型が文字・文字列型の場合はデフォルトでデバッグ出力 (?) が適用されるが、
+  // 要素への書式指定として ? を指定しなければ、デバッグ出力が解除される
+  std::vector&amp;lt;std::string&amp;gt; vt = {&amp;#34;h\tello&amp;#34;, &amp;#34;w\norld&amp;#34;, &amp;#34;C++&amp;#34;};
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6. {:}&amp;#34;, vt) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7. {::}&amp;#34;, vt) &amp;lt;&amp;lt; std::endl;
+
   // 文字を要素とするコンテナは文字列として出力させることもできる
   std::vector&amp;lt;char&amp;gt; vc = {&amp;#39;h&amp;#39;, &amp;#39;\n&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;};
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6. {:s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7. {:?s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;8. {:s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;9. {:?s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::ranges::views::iota[link /reference/ranges/iota_view.md]
@@ -404,9 +412,12 @@ int main() {
 3. {1, 2, 3}
 4. [1, 2, 3, 4]
 5. [0xf, 0x1e, 0x3c]
-6. h
+6. [&amp;#34;h\tello&amp;#34;, &amp;#34;w\norld&amp;#34;, &amp;#34;C++&amp;#34;]
+7. [h    ello, w
+orld, C++]
+8. h
 ello
-7. &amp;#34;h\nello&amp;#34;
+9. &amp;#34;h\nello&amp;#34;
 ```
 
 ### pair、tupleを出力する (C++23)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変引数テンプレート -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/variadic_templates.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:lang/cpp11/variadic_templates.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/variadic_templates.md b/lang/cpp11/variadic_templates.md
index 34e2c5a10..fefba1917 100644
--- a/lang/cpp11/variadic_templates.md
+++ b/lang/cpp11/variadic_templates.md
@@ -40,7 +40,6 @@ void f(Args... args)
 
 f(3, &amp;#39;a&amp;#39;, &amp;#34;hello&amp;#34;);
 ```
-* std::tuple[link /reference/tuple/tuple.md]
 
 パラメータパックを最初の要素から順番に処理していきたい場合には、「任意の型のパラメータをひとつと、任意の個数の任意の型のパラメータを受け取る」というような形式のパラメータリストとし、再帰によって処理をする：
 
@@ -201,7 +200,6 @@ hello
       f(a, b);
     }
     ```
-    * std::tuple[link /reference/tuple/tuple.md]
     * std::make_tuple[link /reference/tuple/make_tuple.md]
 
 - テンプレートパラメータ
@@ -247,7 +245,6 @@ hello
     ```cpp
     std::tuple&amp;lt;Args...&amp;gt; t;
     ```
-    * std::tuple[link /reference/tuple/tuple.md]
 
 - 初期化子
 
@@ -356,7 +353,6 @@ hello
       &amp;gt;::value, &amp;#34;&amp;#34;); // OK
     }
     ```
-    * std::tuple[link /reference/tuple/tuple.md]
     * static_assert[link static_assert.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>構造化束縛 -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/structured_bindings.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:lang/cpp17/structured_bindings.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/structured_bindings.md b/lang/cpp17/structured_bindings.md
index 9d725be6a..6dc9d9971 100644
--- a/lang/cpp17/structured_bindings.md
+++ b/lang/cpp17/structured_bindings.md
@@ -122,7 +122,6 @@ int main()
   }
 }
 ```
-* std::tuple[link /reference/tuple/tuple.md]
 * std::forward_as_tuple[link /reference/tuple/forward_as_tuple.md]
 
 #### 出力
@@ -325,7 +324,6 @@ C++17時点の構造化束縛では、使用しない変数もコピーあるい
 std::tuple&amp;lt;T1, std::pair&amp;lt;T2, T3&amp;gt;, T4&amp;gt; f();
 auto { w, {x, y}, z } = f(); // このような、tuple内にあるpairを同時に分解はできない
 ```
-* std::tuple[link /reference/tuple/tuple.md]
 
 
 ## 関連項目
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>クラステンプレートのテンプレート引数推論 -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/type_deduction_for_class_templates.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:lang/cpp17/type_deduction_for_class_templates.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/type_deduction_for_class_templates.md b/lang/cpp17/type_deduction_for_class_templates.md
index 141b334e8..a6c5bcc05 100644
--- a/lang/cpp17/type_deduction_for_class_templates.md
+++ b/lang/cpp17/type_deduction_for_class_templates.md
@@ -191,7 +191,6 @@ int main()
 * std::function[link /reference/functional/function.md]
 * std::weak_ptr[link /reference/memory/weak_ptr.md]
 * wp.lock()[link /reference/memory/weak_ptr/lock.md]
-* std::tuple[link /reference/tuple/tuple.md]
 * std::make_tuple[link /reference/tuple/make_tuple.md]
 * std::promise[link /reference/future/promise.md]
 * p.get_future()[link /reference/future/promise/get_future.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数テンプレートに明示的に型指定した場合にADLで見つからない問題を修正 -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/adl_and_function_templates_that_are_not_visible.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:lang/cpp20/adl_and_function_templates_that_are_not_visible.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
index 2843c7bde..0854827db 100644
--- a/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
+++ b/lang/cpp20/adl_and_function_templates_that_are_not_visible.md
@@ -53,7 +53,6 @@ int main() {
   std::cout &amp;lt;&amp;lt; get&amp;lt;0&amp;gt;(t) &amp;lt;&amp;lt; std::endl; // C++17:NG C++20:OK
 }
 ```
-* std::tuple[link /reference/tuple/tuple.md]
 * get[link /reference/tuple/tuple/get.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>関数を条件付きでexplicitにする構文を追加 -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/explicit_bool.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:lang/cpp20/explicit_bool.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/explicit_bool.md b/lang/cpp20/explicit_bool.md
index d8cc56606..1981098fd 100644
--- a/lang/cpp20/explicit_bool.md
+++ b/lang/cpp20/explicit_bool.md
@@ -94,7 +94,6 @@ std::tuple&amp;lt;int, int&amp;gt; pixel_coordinates()
 struct NonCopyable { NonCopyable(int); NonCopyable(const NonCopyable&amp;amp;) = delete; };
 std::pair&amp;lt;NonCopyable, double&amp;gt; pmd{42, 3.14};  // C++14でコンパイルエラー！
 ```
-* std::tuple[link /reference/tuple/tuple.md]
 
 この問題に対して、C++17では (対応が早い処理系はそれ以前から) これらのクラスのコンストラクタが、条件付きで`explicit`定義されるようにした。その実装方法としてはSFINAEによって、`explicit`コンストラクタと非`explicit`コンストラクタをオーバーロードする方法が使われていた。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uses_allocator_construction_args -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/memory/uses_allocator_construction_args.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/memory/uses_allocator_construction_args.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uses_allocator_construction_args.md b/reference/memory/uses_allocator_construction_args.md
index d3862b4e9..3596122c2 100644
--- a/reference/memory/uses_allocator_construction_args.md
+++ b/reference/memory/uses_allocator_construction_args.md
@@ -215,7 +215,6 @@ int main()
 * std::allocator_arg_t[link allocator_arg_t.md]
 * std::ostream[link ../ostream/basic_ostream.md]
 * std::piecewise_construct_t[link ../utility/piecewise_construct_t.md]
-* std::tuple[link ../tuple/tuple.md]
 * std::apply[link ../tuple/apply.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forward_as_tuple -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/forward_as_tuple.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/forward_as_tuple.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/forward_as_tuple.md b/reference/tuple/forward_as_tuple.md
index ecd0095c9..82e5c72da 100644
--- a/reference/tuple/forward_as_tuple.md
+++ b/reference/tuple/forward_as_tuple.md
@@ -48,7 +48,6 @@ int main()
 }
 ```
 * std::forward_as_tuple[color ff0000]
-* std::tuple[link tuple.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_tuple -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/make_tuple.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/make_tuple.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/make_tuple.md b/reference/tuple/make_tuple.md
index 596be8540..237294775 100644
--- a/reference/tuple/make_tuple.md
+++ b/reference/tuple/make_tuple.md
@@ -54,7 +54,6 @@ int main()
 }
 ```
 * std::make_tuple[color ff0000]
-* std::tuple[link tuple.md]
 * std::ref[link /reference/functional/ref.md]
 * std::cref[link /reference/functional/cref.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tie -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tie.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/tie.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tie.md b/reference/tuple/tie.md
index b94c9d975..f27dd9616 100644
--- a/reference/tuple/tie.md
+++ b/reference/tuple/tie.md
@@ -78,7 +78,6 @@ int main()
 ```
 * std::tie[color ff0000]
 * std::ignore[link ignore.md]
-* std::tuple[link tuple.md]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/tuple.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple.md b/reference/tuple/tuple.md
index 6b55fb90a..a4a196ca8 100644
--- a/reference/tuple/tuple.md
+++ b/reference/tuple/tuple.md
@@ -93,7 +93,6 @@ int main()
   std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
 }
 ```
-* std::tuple[color ff0000]
 * std::get[link tuple/get.md]
 * std::make_tuple[link make_tuple.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_cat -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple_cat.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/tuple_cat.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple_cat.md b/reference/tuple/tuple_cat.md
index 2c278f82d..f1a557365 100644
--- a/reference/tuple/tuple_cat.md
+++ b/reference/tuple/tuple_cat.md
@@ -55,7 +55,6 @@ int main()
 }
 ```
 * std::tuple_cat[color ff0000]
-* std::tuple[link tuple.md]
 * std::get[link tuple/get.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_element -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple_element.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/tuple_element.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple_element.md b/reference/tuple/tuple_element.md
index 8cc6c5558..06543ace0 100644
--- a/reference/tuple/tuple_element.md
+++ b/reference/tuple/tuple_element.md
@@ -80,7 +80,6 @@ int main()
 }
 ```
 * std::tuple_element[color ff0000]
-* std::tuple[link tuple.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_size -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/tuple/tuple_size.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/tuple/tuple_size.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/tuple/tuple_size.md b/reference/tuple/tuple_size.md
index 7132b6c54..d20516e29 100644
--- a/reference/tuple/tuple_size.md
+++ b/reference/tuple/tuple_size.md
@@ -67,7 +67,6 @@ int main()
 }
 ```
 * std::tuple_size[color ff0000]
-* std::tuple[link tuple.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>index_sequence_for -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/utility/index_sequence_for.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/utility/index_sequence_for.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/index_sequence_for.md b/reference/utility/index_sequence_for.md
index 3aceab4d6..8f1a90940 100644
--- a/reference/utility/index_sequence_for.md
+++ b/reference/utility/index_sequence_for.md
@@ -53,7 +53,6 @@ int main()
 ```
 * std::index_sequence_for[color ff0000]
 * std::integer_sequence[link integer_sequence.md]
-* std::tuple[link /reference/tuple/tuple.md]
 * std::make_tuple[link /reference/tuple/make_tuple.md]
 
 ## 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 「std::tuple」をグローバル修飾リストに追加</title>
      <link href="https://cpprefjp.github.io/reference/utility/pair/op_constructor.html"/>
      <id>1a3edd0c8bebb22b99068fcdd45d4f2efb52c312:reference/utility/pair/op_constructor.md</id>
      <updated>2023-01-17T20:01:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/pair/op_constructor.md b/reference/utility/pair/op_constructor.md
index f7039ea23..72d83c383 100644
--- a/reference/utility/pair/op_constructor.md
+++ b/reference/utility/pair/op_constructor.md
@@ -113,7 +113,6 @@ constexpr pair(piecewise_construct_t,
     struct NonCopyable { NonCopyable(int); NonCopyable(const NonCopyable&amp;amp;) = delete; };
     std::pair&amp;lt;NonCopyable, double&amp;gt; pmd{42, 3.14};  // C++14でコンパイルエラー！
     ```
-    * std::tuple[link /reference/tuple/tuple.md]
 
     - この変更はC++17に対するものであるが、コンパイラが早期に対応していたため、一部処理系ではC++14の段階から適格となっていた
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- format : Rangeの要素に対する書式指定の例を記載 #1085</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>2497046e4f89beeaffa4c0f7f3a014c4b6560e0e:reference/format/format.md</id>
      <updated>2023-01-17T19:47:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index a30e60934..ad5be5954 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -384,10 +384,14 @@ int main() {
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3. {}&amp;#34;, s) &amp;lt;&amp;lt; std::endl;
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4. {}&amp;#34;, r) &amp;lt;&amp;lt; std::endl;
 
+  // Rangeの書式指定のあと、:で区切って要素に対する書式指定ができる (ここでは16進数出力)
+  std::vector&amp;lt;int&amp;gt; vx = {0xf, 0x1e, 0x3c};
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5. {::#x}&amp;#34;, vx) &amp;lt;&amp;lt; std::endl;
+
   // 文字を要素とするコンテナは文字列として出力させることもできる
   std::vector&amp;lt;char&amp;gt; vc = {&amp;#39;h&amp;#39;, &amp;#39;\n&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;};
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5. {:s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6. {:?s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6. {:s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7. {:?s}&amp;#34;, vc) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::ranges::views::iota[link /reference/ranges/iota_view.md]
@@ -399,9 +403,10 @@ int main() {
 2. {1: &amp;#34;aaa&amp;#34;, 2: &amp;#34;bbb&amp;#34;}
 3. {1, 2, 3}
 4. [1, 2, 3, 4]
-5. h
+5. [0xf, 0x1e, 0x3c]
+6. h
 ello
-6. &amp;#34;h\nello&amp;#34;
+7. &amp;#34;h\nello&amp;#34;
 ```
 
 ### pair、tupleを出力する (C++23)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
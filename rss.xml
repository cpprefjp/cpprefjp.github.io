<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-12-04T07:01:35.561457</updated>
  <id>05182fbc-b973-4231-9030-38973b1b8cd0</id>

  
    <entry>
      <title>ADLを無効にする関数定義 -- ADLを無効にする関数定義 : 実装例を記載</title>
      <link href="https://cpprefjp.github.io/article/lib/disable_adl_function.html"/>
      <id>9aa71ee54f0a6ede4bba7fbb3f81345e852f6d5c:article/lib/disable_adl_function.md</id>
      <updated>2020-12-04T15:57:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/article/lib/disable_adl_function.md b/article/lib/disable_adl_function.md
index 72f57bb7f..bfdaad89e 100644
--- a/article/lib/disable_adl_function.md
+++ b/article/lib/disable_adl_function.md
@@ -21,7 +21,41 @@ void foo() {
 
 `std::ranges`名前空間に追加される関数テンプレート群は、同名の`std`名前空間直下にある既存のものに対してC++20の`&amp;lt;ranges&amp;gt;`が規定するイテレータ/rangeコンセプトに適合するように再設計されたものであり、このような規定はC++20以降古い関数が意図せず使用されないようにするための処置であると考えられる。
 
-この性質は通常の関数では実現できず、これらの関数テンプレートは実のところ関数テンプレートではない。おそらく関数オブジェクトとして実装されるものと思われる。
+この性質は通常の関数では実現できず、これらの関数テンプレートは実のところ関数テンプレートではない。おそらく関数オブジェクトとして実装されるものと思われる。以下は、関数オブジェクトによる実装例である：
+
+```cpp
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+namespace my_range {
+  struct distance_t {
+    template &amp;lt;class Iterator&amp;gt;
+    auto operator()(Iterator first, Iterator last) const {
+      std::cout &amp;lt;&amp;lt; &amp;#34;call my_distance&amp;#34; &amp;lt;&amp;lt; std::endl;
+      int n = 0;
+      for (;first != last; ++first, ++n) {}
+      return n;
+    }
+  };
+  const inline distance_t distance{};
+}
+
+int main() {
+  using namespace my_range;
+
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  int n = distance(begin(v), end(v));
+  std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
+}
+```
+
+出力：
+
+```
+call my_distance
+3
+```
 
 
 ## 呼称について
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted_iterator -- counted_iterator base追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>967b551f59dd858fc1e2f12a5b9a5470584247b3:reference/iterator/counted_iterator.md</id>
      <updated>2020-12-04T14:51:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index 00d3fdaac..b2f884c39 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -48,7 +48,7 @@ namespace std {
 |------------------------------------------------------|-------------|-------|
 | [`(constructor)`](counted_iterator/op_constructor.md) | コンストラクタ | C++20 |
 | [`operator=`](counted_iterator/op_assign.md)          | 代入演算子 | C++20 |
-| [`base`](counted_iterator/base.md.nolink)          | 元のイテレータを取得する | C++20 |
+| [`base`](counted_iterator/base.md)          | 元のイテレータを取得する | C++20 |
 | [`count`](counted_iterator/count.md.nolink)          | 代入演算子 | C++20 |
 | [`operator*`](counted_iterator/op_deref.md.nolink)           | 間接参照演算子 | C++20 |
 | [`operator-&amp;gt;`](counted_iterator/op_arrow.md.nolink)          | メンバアクセス演算子 | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- counted_iterator base追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/base.html"/>
      <id>967b551f59dd858fc1e2f12a5b9a5470584247b3:reference/iterator/counted_iterator/base.md</id>
      <updated>2020-12-04T14:51:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/base.md b/reference/iterator/counted_iterator/base.md
new file mode 100644
index 000000000..82d769754
--- /dev/null
+++ b/reference/iterator/counted_iterator/base.md
@@ -0,0 +1,33 @@
+# base
+* iterator[meta header]
+* std[meta namespace]
+* counted_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr I base() const &amp;amp; requires copy_constructible&amp;lt;I&amp;gt;;  // (1)
+constexpr I base() &amp;amp;&amp;amp;;  // (2)
+```
+* copy_constructible[link /reference/concepts/copy_constructible.md]
+
+## 概要
+
+メンバ変数として保持している、元のイテレータを取得する。
+
+## 戻り値
+
+- (1) : 元のイテレータをコピーして返す。
+- (2) : 元のイテレータをムーブして返す。
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 8
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted_iterator -- counted_iterator operator=追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>ee954f2bc2279cec9aaf4b158e5afb09a855d22d:reference/iterator/counted_iterator.md</id>
      <updated>2020-12-04T10:53:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index 9dad2b436..00d3fdaac 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -47,7 +47,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
 | [`(constructor)`](counted_iterator/op_constructor.md) | コンストラクタ | C++20 |
-| [`operator=`](counted_iterator/op_assign.md.nolink)          | 代入演算子 | C++20 |
+| [`operator=`](counted_iterator/op_assign.md)          | 代入演算子 | C++20 |
 | [`base`](counted_iterator/base.md.nolink)          | 元のイテレータを取得する | C++20 |
 | [`count`](counted_iterator/count.md.nolink)          | 代入演算子 | C++20 |
 | [`operator*`](counted_iterator/op_deref.md.nolink)           | 間接参照演算子 | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- counted_iterator operator=追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_assign.html"/>
      <id>ee954f2bc2279cec9aaf4b158e5afb09a855d22d:reference/iterator/counted_iterator/op_assign.md</id>
      <updated>2020-12-04T10:53:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_assign.md b/reference/iterator/counted_iterator/op_assign.md
new file mode 100644
index 000000000..53fcd0fc4
--- /dev/null
+++ b/reference/iterator/counted_iterator/op_assign.md
@@ -0,0 +1,40 @@
+# operator=
+* iterator[meta header]
+* std[meta namespace]
+* counted_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template&amp;lt;class I2&amp;gt;
+  requires assignable_from&amp;lt;I&amp;amp;, const I2&amp;amp;&amp;gt;
+constexpr counted_iterator&amp;amp; operator=(const counted_iterator&amp;lt;I2&amp;gt;&amp;amp; x);
+```
+* assignable_from[link /reference/concepts/assignable_from.md]
+
+## 概要
+
+`counted_iterator`オブジェクトをコピー代入する。
+
+## 効果
+
+`I`の値`current`メンバ変数、カウントの値を`length`メンバ変数に保持するとする。
+
+`current`を`x.current`から、`length`を`x.length`からコピー代入する。
+
+## 戻り値
+
+`*this`
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 8
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- string_viewコンストラクタ : rangeコンストラクタのバージョン追記</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_constructor.html"/>
      <id>65928e0c4421828edc128b97ef38611c1e224f24:reference/string_view/basic_string_view/op_constructor.md</id>
      <updated>2020-12-04T00:30:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_constructor.md b/reference/string_view/basic_string_view/op_constructor.md
index 2847ad67a..48925c664 100644
--- a/reference/string_view/basic_string_view/op_constructor.md
+++ b/reference/string_view/basic_string_view/op_constructor.md
@@ -6,14 +6,14 @@
 * cpp17[meta cpp]
 
 ```cpp
-constexpr basic_string_view() noexcept;                       // (1)
+constexpr basic_string_view() noexcept;                        // (1)
 constexpr basic_string_view(
-            const basic_string_view&amp;amp;) noexcept = default;     // (2)
-constexpr basic_string_view(const CharT* str);                // (3)
-constexpr basic_string_view(const CharT* str, size_type len); // (4)
+            const basic_string_view&amp;amp;) noexcept = default;      // (2)
+constexpr basic_string_view(const CharT* str);                 // (3)
+constexpr basic_string_view(const CharT* str, size_type len);  // (4)
 
 template &amp;lt;class It, class End&amp;gt;
-constexpr basic_string_view(It first, End last);               // (5)
+constexpr basic_string_view(It first, End last);               // (5) C++20
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator/= -- Merge pull request #822 from Nagarei/patch-1</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/path/op_append_assign.html"/>
      <id>5f05ee91cad93d2c16774daf88bf59152c719901:reference/filesystem/path/op_append_assign.md</id>
      <updated>2020-12-03T20:51:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/path/op_append_assign.md b/reference/filesystem/path/op_append_assign.md
index fc5b4561a..583721984 100644
--- a/reference/filesystem/path/op_append_assign.md
+++ b/reference/filesystem/path/op_append_assign.md
@@ -18,7 +18,7 @@ path&amp;amp; operator/=(const Source&amp;amp; source); // (2)
 
 ## 効果
 - (1) :
-    - `p.`[`is_absolute()`](is_absolute.md) `|| (p.`[`has_root_name()`](has_root_name.md) `&amp;amp;&amp;amp; p.`[`root_name()](root_name.md) `!=` [`root_name()`](root_name.md)`)`であれば、`p`を`*this`に代入する。
+    - `p.`[`is_absolute()`](is_absolute.md) `|| (p.`[`has_root_name()`](has_root_name.md) `&amp;amp;&amp;amp; p.`[`root_name()`](root_name.md) `!=` [`root_name()`](root_name.md)`)`であれば、`p`を`*this`に代入する。
         - `p`が絶対パスであれば`*this`にパス連結できないため、置き換えとする
     - そうでなければ、`*this`を以下のように変更する：
         1. `p`が[ルートディレクトリを持っている](has_root_directory.md)場合、`*this`から[ルートディレクトリ](root_directory.md)と[相対パス](relative_path.md)を削除する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
</feed>
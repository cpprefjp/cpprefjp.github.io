<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2019-07-24T05:01:05.070855</updated>
  <id>651fee79-2313-4d46-9c9b-82cfadd567f3</id>

  
    <entry>
      <title>言語機能 -- C++23言語ページを用意 #673</title>
      <link href="https://cpprefjp.github.io/lang.html"/>
      <id>b5aa414ac6d2db02484951c799d0ffd958ee77ac:lang.md</id>
      <updated>2019-07-24T13:50:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;言語機能&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;ここでは、C++の言語機能の解説を記載する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11.html&#34;&gt;C++11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14.html&#34;&gt;C++14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17.html&#34;&gt;C++17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20.html&#34;&gt;C++20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23.html&#34;&gt;C++23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/extension.md.nolink&#34;&gt;言語拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;運営方針&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation-status.html&#34;&gt;コンパイラの実装状況ページ&lt;/a&gt;に沿って、言語のバージョンアップによって追加・更新された言語機能を解説する。&lt;/li&gt;
&lt;li&gt;C++全体の言語機能を解説することは、当面の間、目指さない。&lt;ul&gt;
&lt;li&gt;バージョン更新に追従するのが大変であること、量が途方もなくなる、という理由から、できるところからやる。&lt;/li&gt;
&lt;li&gt;C++全体の言語解説を追加する場合には、このページの下に&lt;code&gt;general&lt;/code&gt;階層を作って、そこで作業する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++23 -- C++23言語ページを用意 #673</title>
      <link href="https://cpprefjp.github.io/lang/cpp23.html"/>
      <id>b5aa414ac6d2db02484951c799d0ffd958ee77ac:lang/cpp23.md</id>
      <updated>2019-07-24T13:50:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++23&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23とは、2023年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 雛形ページにC++23メタ情報について記載 #673</title>
      <link href="https://cpprefjp.github.io/editors_doc/class_template_page.html"/>
      <id>7017aaf5c9621a14e31db3b2ef095fc0dbb4f48b:editors_doc/class_template_page.md</id>
      <updated>2019-07-24T13:48:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;header_name&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください)&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;(&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt; および &lt;a href=&#34;https://cpprefjp.github.io/editors_doc/specialized.html&#34;&gt;cpprefjp特有の拡張構文&lt;/a&gt; を先に読んで下さい。)&lt;/p&gt;
&lt;p&gt;(
  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
  その際拡張構文である&lt;code&gt;example&lt;/code&gt;タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
)&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta header]`は、所属ヘッダを表すメタ情報 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, concept, macro, namespace --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta namespace]`は、所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは`::` --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta class]`は、所属するクラスを表すメタ情報。クラスページでは省略する。structとは書けない --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;definition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// クラスの宣言を記述します。&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;(ここには、クラスの概要を記述します。必須事項です。)&lt;/p&gt;
&lt;p&gt;(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)&lt;/p&gt;
&lt;h2&gt;テンプレートパラメータ制約&lt;/h2&gt;
&lt;p&gt;(ここには、クラスのテンプレートパラメータに対する制約を記載します。SFINAE-friendlyな関数の条件、制約テンプレートによる条件などを記載します。)&lt;/p&gt;
&lt;h2&gt;適格要件&lt;/h2&gt;
&lt;p&gt;(ここには、満たさなければプログラムが不適格となる要件を記載します。&lt;code&gt;static_assert&lt;/code&gt;に相当します。規格ではMandatesの項目です。)&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;function_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;説明&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;静的メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;5013b1b4fde3b106a13234ac2364696b08b570e4&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// (ここには、クラスを解説するための、サンプルコードを記述します。)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;variable&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;variable&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;(コードブロック中の識別子に、文字色を付ける例です。)&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;(ここには、サンプルコードの実行結果を記述します。何も出力がない場合は、項目を削除せず、空の出力にしてください。)&lt;br /&gt;
(実行結果が処理系・実行環境によって異なる場合は、項目名を「出力例」に変更し、可能であればその理由も併記してください。)&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 1.9, 2.9, 3.0, 3.1, 3.2, 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 3.4.6, 4.2.4, 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: 10.1, 11.0, 11.1, 12.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2003, 2005, 2008, 2010, 2012&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(ここには、その機能が存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)&lt;br /&gt;
(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;p&gt;(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0788r3.pdf&#34; target=&#34;_blank&#34;&gt;P0788R3 Standard Library Specification in a Concepts and Contracts World&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 雛形ページにC++23メタ情報について記載 #673</title>
      <link href="https://cpprefjp.github.io/editors_doc/function_template_page.html"/>
      <id>7017aaf5c9621a14e31db3b2ef095fc0dbb4f48b:editors_doc/function_template_page.md</id>
      <updated>2019-07-24T13:48:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;header_name&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class class_name&#34;&gt;class_name::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;(&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt; および &lt;a href=&#34;https://cpprefjp.github.io/editors_doc/specialized.html&#34;&gt;cpprefjp特有の拡張構文&lt;/a&gt; を先に読んで下さい。)&lt;/p&gt;
&lt;p&gt;(
  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
  その際拡張構文である&lt;code&gt;example&lt;/code&gt;タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
)&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta header]`は、所属ヘッダを表すメタ情報 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, concept, macro, namespace。全てがのオーバーロードが関数テンプレートならfunction templateを使用し、そうでなければfunctionを使用する --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta namespace]`は、所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは`::` --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta class]`は、所属するクラスを表すメタ情報。クラスページでは省略する。structとは書けない --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;definition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 関数・変数・定数の宣言を記述します。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;(ここには、関数・変数・定数の概要を記述します。必須事項です。)&lt;/p&gt;
&lt;p&gt;(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;(ここには、関数を実行するための事前条件、型への要件などを記述します。とくになければ、項目を削除してください。この項目は、今後は「テンプレートパラメータ制約」「適格要件」「事前条件」「事後条件」など、より細分化された項目で記載してください。)&lt;/p&gt;
&lt;h2&gt;テンプレートパラメータ制約&lt;/h2&gt;
&lt;p&gt;(ここには、関数がオーバーロード解決に参加するための条件を記載します。SFINAE-friendlyな関数の条件、制約テンプレートによるオーバーロードの条件などを記載します。)&lt;/p&gt;
&lt;h2&gt;適格要件&lt;/h2&gt;
&lt;p&gt;(ここには、満たさなければプログラムが不適格となる要件を記載します。&lt;code&gt;static_assert&lt;/code&gt;や関数のdelete宣言などに相当します。規格ではMandatesの項目です。)&lt;/p&gt;
&lt;h2&gt;事前条件&lt;/h2&gt;
&lt;p&gt;(ここには、関数を実行するための値の事前条件を記述します。契約属性の&lt;code&gt;[[expects]]&lt;/code&gt;に相当します。)&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;(ここには、関数の内部で行われる効果:effect を記述します。戻り値しかないような関数の場合には、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;(ここには、関数の戻り値を記述します。戻り値の型が&lt;code&gt;void&lt;/code&gt;の場合は、「なし」と記述してください。)&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;(ここには、関数を実行した結果が満たすべき事後条件を記述します。契約属性の&lt;code&gt;[[ensures]]&lt;/code&gt;に相当します。)&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;(ここには、アルゴリズムの計算量を記述します。規格上とくに明記がなければ、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;(ここには、例外送出の有無、例外送出の条件と送出される例外、例外を抄出しない条件、例外送出後の変数・オブジェクトの状態 (例外安全性) などを記述します。&lt;code&gt;noexcept&lt;/code&gt;なら「投げない」を記述します。規格上とくに明記がなければ、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;自明定義される条件&lt;/h2&gt;
&lt;p&gt;(コンストラクタや代入演算子などの特殊関数が自明定義される条件を記述します。)&lt;/p&gt;
&lt;h2&gt;delete定義される条件&lt;/h2&gt;
&lt;p&gt;(関数がdelete定義される条件を記述します。)&lt;/p&gt;
&lt;h2&gt;定数式に評価される条件&lt;/h2&gt;
&lt;p&gt;(関数が&lt;code&gt;constexpr&lt;/code&gt;評価される条件を記述します。)&lt;/p&gt;
&lt;h2&gt;explicitになる条件&lt;/h2&gt;
&lt;p&gt;(コンストラクタや変換演算子が&lt;code&gt;explicit&lt;/code&gt;になる条件を記述します。)&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;(ここには、関数・変数・定数を説明するにあたっての、補足事項を記述します。とくになければ、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;3e6dcd50f2eb7aee3072d3a8d439fec0519e29a4&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// (ここには、関数・変数・定数を解説するための、サンプルコードを記述します。)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;variable&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;variable&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// (ここには、その関数・変数・定数の、実装例を記述します。)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// (とくに必要がないと判断した場合、項目を削除してください。)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 1.9, 2.9, 3.0, 3.1, 3.2, 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 3.4.6, 4.2.4, 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: 10.1, 11.0, 11.1, 12.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2003, 2005, 2008, 2010, 2012&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(ここには、その機能が存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)&lt;br /&gt;
(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)
(確認のテストできないときは、??を記述してください。)&lt;/p&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;(処理系ごとに存在するバグや注意事項を記述します。とくにない場合は、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;p&gt;(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0788r3.pdf&#34; target=&#34;_blank&#34;&gt;P0788R3 Standard Library Specification in a Concepts and Contracts World&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 雛形ページにC++23メタ情報について記載 #673</title>
      <link href="https://cpprefjp.github.io/editors_doc/header_template_page.html"/>
      <id>7017aaf5c9621a14e31db3b2ef095fc0dbb4f48b:editors_doc/header_template_page.md</id>
      <updated>2019-07-24T13:48:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;header_name&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;(&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt; および &lt;a href=&#34;https://cpprefjp.github.io/editors_doc/specialized.html&#34;&gt;cpprefjp特有の拡張構文&lt;/a&gt; を先に読んで下さい。)&lt;/p&gt;
&lt;p&gt;(
  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
  その際拡張構文である&lt;code&gt;example&lt;/code&gt;タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
)&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta header]`は、所属ヘッダを表すメタ情報 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;(ここには、このヘッダファイル(ライブラリ)の概要を記述します。必須事項です。)&lt;/p&gt;
&lt;p&gt;(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 1.9, 2.9, 3.0, 3.1, 3.2, 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 3.4.6, 4.2.4, 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: 10.1, 11.0, 11.1, 12.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2003, 2005, 2008, 2010, 2012&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(ここには、そのヘッダファイルが存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)&lt;br /&gt;
(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;p&gt;(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 雛形ページにC++23メタ情報について記載 #673</title>
      <link href="https://cpprefjp.github.io/editors_doc/lang_template_page.html"/>
      <id>7017aaf5c9621a14e31db3b2ef095fc0dbb4f48b:editors_doc/lang_template_page.md</id>
      <updated>2019-07-24T13:48:29+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;(&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt; および &lt;a href=&#34;https://cpprefjp.github.io/editors_doc/specialized.html&#34;&gt;cpprefjp特有の拡張構文&lt;/a&gt; を先に読んで下さい。)&lt;/p&gt;
&lt;p&gt;(
  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
  その際拡張構文である&lt;code&gt;example&lt;/code&gt;タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
)&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;(ここには、言語機能の概要を記載します。)&lt;/p&gt;
&lt;p&gt;(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;p&gt;(ここには、言語機能の仕様を記載します。最初のコミットから完璧にする必要はありません。徐々に詳細にしていけばOKです。)&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;f13c43f217dd0de2a102f881250a84a7c361e710&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// (ここには、言語機能の使い方を解説するための、サンプルコードを記述します。)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;variable&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;variable&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;(ここには、その言語機能が必要になった背景や経緯を記述します。その言語機能で解決したい問題は何だったのかは、ユーザーがその言語機能を実際に使う上で重要な情報となります。)&lt;/p&gt;
&lt;h2&gt;検討されたほかの選択肢&lt;/h2&gt;
&lt;p&gt;(ここには、その言語機能が実際に採用されるまでに検討された、ほかの設計選択を記述します。どのような選択肢があって今の言語機能となったのかがわかるようにします。)&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;(ここには、その言語機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;p&gt;(ここには、その言語機能を理解するにあたっての参考資料へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- 雛形ページにC++23メタ情報について記載 #673</title>
      <link href="https://cpprefjp.github.io/editors_doc/type-type_template_page.html"/>
      <id>7017aaf5c9621a14e31db3b2ef095fc0dbb4f48b:editors_doc/type-type_template_page.md</id>
      <updated>2019-07-24T13:48:29+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;type-alias&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;header_name&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class class_name&#34;&gt;class_name::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;page_title ((1行目の見出し1はページのタイトルです。修飾なしで記載してください)&lt;/span&gt;&lt;span class=&#34;cpp cpp17&#34; title=&#34;C++17で追加&#34;&gt;(C++17)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;(&lt;a href=&#34;https://cpprefjp.github.io/editors_doc/start_editing.html&#34;&gt;cpprefjpを編集するには&lt;/a&gt; および &lt;a href=&#34;https://cpprefjp.github.io/editors_doc/specialized.html&#34;&gt;cpprefjp特有の拡張構文&lt;/a&gt; を先に読んで下さい。)&lt;/p&gt;
&lt;p&gt;(
  サンプルコードは文章中のどの部分で書いても大丈夫です。閲覧者の理解を助けるために必要だと感じたところで入れてください。
  その際拡張構文である&lt;code&gt;example&lt;/code&gt;タグをルールに従って付け、コンパイル・実行可能にすることを検討してください。
)&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta header]`は、所属ヘッダを表すメタ情報 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta id-type]`は、識別子の種別を表すメタ情報。class, class template, function, function template, enum, variable, type-alias, concept, macro, namespace --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta namespace]`は、所属する名前空間を表すメタ情報。マクロを考慮して省略可。名前空間の区切りは`::` --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta class]`は、所属するクラスを表すメタ情報。クラスページでは省略する。structとは書けない --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- `[meta cpp]`は、機能が追加・非推奨・削除されたバージョンを表すメタ情報。改行して複数指定ができる。 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp11[meta cpp]` : C++11で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14[meta cpp]` : C++14で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17[meta cpp]` : C++17で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20[meta cpp]` : C++20で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23[meta cpp]` : C++23で追加された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp11deprecated[meta cpp]` : C++11で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14deprecated[meta cpp]` : C++14で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp14removed[meta cpp]` : C++14で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17deprecated[meta cpp]` : C++17で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp17removed[meta cpp]` : C++17で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20deprecated[meta cpp]` : C++20で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp20removed[meta cpp]` : C++20で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23deprecated[meta cpp]` : C++23で非推奨になった機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--    `cpp23removed[meta cpp]` : C++23で削除された機能 --&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;origin_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;(ここには、型の概要を記述します。必須事項です。)&lt;/p&gt;
&lt;p&gt;(必要な項目を省略する場合には、「(執筆中)」と書いておいてください。)&lt;/p&gt;
&lt;p&gt;これは、メンバ型等の、型の別名定義を解説するページの雛形です。&lt;/p&gt;
&lt;p&gt;ページ名の先頭に「&lt;code&gt;type-&lt;/code&gt;」を付けることにより、cpprefjpサイト左部のサイドバーに並ぶページの順番を制御できます。その接頭辞を付けた場合には、型のページは並びの最後に来ます(関数、演算子、型の順番)。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;(用途、注意事項、バージョンによる変更の経緯などを書いてください。省略可能です)&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;yata&#34; id=&#34;40930678c95953546175908959a4ddb7bb65e830&#34;&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// (ここには、関数・変数・定数を解説するための、サンプルコードを記述します。省略可能です)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// (インクルードとmain()関数を含む、実行可能なサンプルコードを記述してください。そのようなコードブロックにはexampleタグを付けます。)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 1.9, 2.9, 3.0, 3.1, 3.2, 3.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 3.4.6, 4.2.4, 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.3.6, 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: 10.1, 11.0, 11.1, 12.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2003, 2005, 2008, 2010, 2012&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(ここには、その機能が存在する言語のバージョンと、確認がとれたコンパイラとそのバージョンを記述します。)&lt;br /&gt;
(これらの項目を削除した場合、C++03のあらゆる環境で使用できることを意味します。)
(確認のテストできないときは、??を記述してください。)&lt;/p&gt;
&lt;h3&gt;備考&lt;/h3&gt;
&lt;p&gt;(処理系ごとに存在するバグや注意事項を記述します。とくにない場合は、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;p&gt;(ここには、その機能と関連のあるcpprefjpサイト内の項目へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;p&gt;(ここには、その関数・変数・定数を理解するにあたっての参考資料や、関連する機能へのリンクを記述します。とくに必要がないと判断した場合、項目を削除してください。)&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>2ad393a8e91968547fe0fff2d2f11ff7ae63fe3e:lang/cpp20/modules.md</id>
      <updated>2019-07-23T23:42:26+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;モジュール&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20では、インクルードに代わる新たな仕組みとしてモジュールが導入された。&lt;/p&gt;
&lt;p&gt;C++20では、プリプロセッサを用いずにプログラムを分割することができる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// a.cpp&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// モジュールAのインターフェース&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エクスポートしていない関数foo&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// エクスポートしている関数bar&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// a-impl.cpp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// モジュールAの実装&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK: fooはエクスポートしていないが、モジュールAの中では見える。&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// unrelated.cpp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK: barはAからエクスポートされているので見える&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エラー: fooはモジュールAの外では見えない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ただし、C++20では標準でモジュールとして提供されるライブラリはない。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;h3&gt;モジュール宣言&lt;/h3&gt;
&lt;p&gt;モジュール宣言の構文は以下のようになる：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;export(opt) module モジュール名 属性(opt);
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;モジュール宣言は翻訳単位あたり1回だけ、原則として翻訳単位の先頭に記述する。&lt;/li&gt;
&lt;li&gt;モジュール宣言を含む翻訳単位をモジュールユニットという。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;がある場合をモジュールインターフェースユニット、ない場合をモジュール実装ユニットと呼ぶ。&lt;/li&gt;
&lt;li&gt;あるモジュールについて、モジュールインターフェースユニットがただ1つ存在しなければならない。モジュールの実装は好きなだけ存在できる。&lt;/li&gt;
&lt;li&gt;モジュール実装ユニットはモジュールインターフェースユニットを暗黙的にインポートする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モジュール名は、識別子または識別子をドットで繋いだもの(例えば、&lt;code&gt;foo&lt;/code&gt;や&lt;code&gt;std.core&lt;/code&gt;)である。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;および&lt;code&gt;std&lt;/code&gt;から始まるあらゆるモジュール名は、今後の規格や処理系のために予約されているので、ユーザー定義のモジュール名として使うことはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// fooのモジュールインターフェースユニット&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;// fooのモジュール実装ユニット&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;// foo.barのモジュール実装ユニット&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 属性&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h4&gt;プライベートモジュールフラグメント&lt;/h4&gt;
&lt;p&gt;プライベートモジュールフラグメントは、1ファイルでモジュールを定義しつつインターフェースと実装を分離するための機能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// モジュールのインターフェース&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// プライベートモジュールフラグメント&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;プライベートモジュールフラグメントを記述する場合、そのモジュールは翻訳単位(必然的にモジュールインターフェースユニット)を1つしか持つことができない。&lt;/p&gt;
&lt;h4&gt;グローバルモジュール&lt;/h4&gt;
&lt;p&gt;C++20では、名前のあるモジュールに属していない宣言はグローバルモジュールに属している。&lt;/p&gt;
&lt;p&gt;グローバルモジュールの性質は以下の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前を持たず、インポートすることはできない。&lt;/li&gt;
&lt;li&gt;宣言をエクスポートすることはできない。&lt;/li&gt;
&lt;li&gt;モジュールインターフェースユニットを持つことはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;エクスポート&lt;/h3&gt;
&lt;p&gt;宣言の前に&lt;code&gt;export&lt;/code&gt;キーワードを付加することでその対象をエクスポートできる。
モジュールをインポートするとエクスポートした宣言が見える(名前探索の候補に挙がる)ようになる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 変数のエクスポート&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*...*/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// クラスのエクスポート&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*...*/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 名前空間のエクスポート&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foobar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 関数テンプレートのエクスポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;また、波カッコに&lt;code&gt;export&lt;/code&gt;をつけることで、その中の宣言をまとめてエクスポートできる。この波カッコはスコープを作らない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;エクスポート宣言はモジュールインターフェースユニットの中でのみ行える。ただし、以下の場所では不可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グローバルモジュールフラグメントの中&lt;/li&gt;
&lt;li&gt;プライベートモジュールフラグメントの中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;エクスポート宣言は必ず新たな名前をエクスポートしなければならない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;を付けた宣言が新たな名前を宣言していない場合は、エラーとなる。&lt;/li&gt;
&lt;li&gt;内部リンケージを持つ名前をエクスポートすると、エラーとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// エラー: 新たな名前を宣言していない&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;// エラー: 内部リンケージを持つ名前はエクスポートできない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// エラー: 内部リンケージを持つ名前はエクスポートできない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// エラー: 明示的にstaticで宣言されている名前はエクスポートできない&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エラー: 新たな名前を宣言していない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h4&gt;モジュールリンケージ&lt;/h4&gt;
&lt;p&gt;C++20では、新たにモジュールリンケージが追加された。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前のあるモジュールに属していてエクスポートしていない名前は、モジュールリンケージを持つ。&lt;ul&gt;
&lt;li&gt;エクスポートしている名前は外部リンケージを持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モジュールリンケージを持つ名前は、同一モジュール内で参照できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;インポート&lt;/h3&gt;
&lt;p&gt;モジュールインポート宣言は次のようになる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libのインポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;モジュールインポート宣言は、モジュールのインターフェースユニットをインポートする。&lt;/p&gt;
&lt;p&gt;インポートした翻訳単位中の宣言について、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;すべての宣言は到達可能となる。&lt;/li&gt;
&lt;li&gt;エクスポートしている宣言は見える(名前探索の候補に挙がる)ようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マクロや&lt;code&gt;using namespace&lt;/code&gt;は取り込まれない。ヘッダーファイル中での &lt;code&gt;using namespace&lt;/code&gt; はしばしば避けられるが、モジュールでは問題なく使うことができる。&lt;/p&gt;
&lt;h4&gt;再エクスポート&lt;/h4&gt;
&lt;p&gt;インポート宣言もエクスポートできる。これを再エクスポートという。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libの再エクスポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;モジュールをインポートすると、そのモジュールが再エクスポートしているモジュールも同時にインポートする。&lt;/p&gt;
&lt;h4&gt;インターフェース依存&lt;/h4&gt;
&lt;p&gt;翻訳単位がモジュールユニットUに&lt;strong&gt;インターフェース依存&lt;/strong&gt;(interface dependency)を持つとは、次のことをいう：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uをインポートするモジュールインポート宣言か、Uを暗黙的にインポートするモジュール宣言を含む&lt;/li&gt;
&lt;li&gt;または、Uにインターフェース依存を持つモジュールユニットに対してインターフェース依存を持つ(推移律)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;翻訳単位は、自分自身に対してインターフェース依存を持ってはならない(インターフェース依存関係は循環しない)。&lt;/p&gt;
&lt;h4&gt;到達可能性&lt;/h4&gt;
&lt;p&gt;C++20では、翻訳単位と宣言に対して到達可能という用語を使うようになった。&lt;/p&gt;
&lt;p&gt;翻訳単位Uがプログラムの点Pから&lt;strong&gt;必然的に到達可能&lt;/strong&gt;(necessarily reachable) とは、次のことをいう：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uがモジュールインターフェースユニットであり、点Pを含む翻訳単位が点Pに先立ってUにインターフェース依存を持っている&lt;/li&gt;
&lt;li&gt;または、点Pを含む翻訳単位が点Pに先立ってUをインポートしている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;必然的に到達可能な翻訳単位は、&lt;strong&gt;到達可能&lt;/strong&gt;(reachable)である。その他のインターフェース依存を持つ翻訳単位が到達可能となるかは、未規定である。
(推移的にインターフェース依存を持つモジュール実装パーティションなどが該当する)&lt;/p&gt;
&lt;p&gt;宣言Dが点Pから到達可能あるいは必然的に到達可能とは、次のことをいう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DがPと同じ翻訳単位にあり、Pに先立って宣言されている&lt;/li&gt;
&lt;li&gt;または、DがPから到達可能あるいは必然的に到達可能な翻訳単位にあって、破棄(discard)されておらず、プライベートモジュールフラグメント内にもない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20までは到達可能という用語はなかったが、前者の条件を満たす宣言だけが参照できていた。
宣言の意味論的な性質(semantic property)を使用するには、宣言が到達可能でなければならない。&lt;/p&gt;
&lt;p&gt;例えば、クラス定義はクラスの完全性という性質を持っている。クラス定義が到達可能であるときそのクラスは完全である。&lt;/p&gt;
&lt;h3&gt;モジュールパーティション&lt;/h3&gt;
&lt;p&gt;モジュールは分割することができる。分割したモジュールをモジュールパーティションという。&lt;/p&gt;
&lt;p&gt;モジュールパーティションを宣言する構文は以下のようになる：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;export(opt) module モジュール名:モジュールパーティション名 属性(opt);
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;モジュールパーティション名の書式は、モジュール名と同じである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt; がある場合をモジュールインターフェースパーティション、ない場合をモジュール実装パーティションという。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;part&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libモジュールのモジュールインターフェースパーティションpart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;internal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libモジュールのモジュール実装パーティションinternal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;モジュールパーティションは基本的に別のモジュールと考えてよいが、以下の点で異なる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主となるモジュールが異なる場合はインポートできない。&lt;ul&gt;
&lt;li&gt;外部へ公開するには、モジュールインターフェースから再エクスポートする。&lt;/li&gt;
&lt;li&gt;モジュールの利用者にパーティションの存在を意識させてはいけない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インポート宣言にはモジュールパーティション名だけを書く。&lt;/li&gt;
&lt;li&gt;インポートするとエクスポートしていない宣言も見えるようになる。&lt;ul&gt;
&lt;li&gt;ただし、再エクスポートはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主となるモジュールのインターフェースとパーティションを区別する場合は、プライマリーモジュールインターフェースユニットという事がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 翻訳単位1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 翻訳単位2&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Internals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 翻訳単位3&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Internals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 翻訳単位4&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Internals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このモジュールAは4つの翻訳単位からなる。上から順に、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(プライマリー)モジュールインターフェースユニット&lt;/li&gt;
&lt;li&gt;モジュールインターフェースパーティション &lt;code&gt;:Foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;モジュール実装パーティション &lt;code&gt;:Internals&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;モジュール実装ユニット&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ODRの緩和&lt;/h3&gt;
&lt;p&gt;C++20では、複数の定義があっても必然的に到達可能でなければODR違反とならない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// a.cpp&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// b.cpp&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムでは、関数&lt;code&gt;foo&lt;/code&gt;をモジュールA,Bで2回定義しているが、モジュールA,Bを同時にインポートしていないのでODR違反とならない。&lt;/p&gt;
&lt;p&gt;一方、同じトークン列であれば再定義しても良いというODRの例外は、その定義が名前のあるモジュールに属する場合は適用されない。&lt;/p&gt;
&lt;p&gt;この例外はヘッダーファイルにクラス定義などを書いてインクルードした際にODR違反にならないための規定である。
モジュールを定義する場合はヘッダーファイルは使わないから、実質的な影響はない。&lt;/p&gt;
&lt;h2&gt;後方互換性のための機能&lt;/h2&gt;
&lt;h3&gt;グローバルモジュールフラグメント&lt;/h3&gt;
&lt;p&gt;モジュール宣言の前にグローバルモジュールの実装を書くことができる。これをグローバルモジュールフラグメントという。&lt;/p&gt;
&lt;p&gt;グローバルモジュールフラグメントにはプリプロセッサディレクティブのみ記述できる。
翻訳フェーズ4以前の段階でプリプロセッサディレクティブ以外の記述がある場合は、エラーとなる。&lt;/p&gt;
&lt;p&gt;この機能は、モジュールのインターフェースへ影響を与えずにインクルードをするために用意された。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// グローバルモジュールフラグメントの宣言&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// &amp;lt;iostream&amp;gt;中の宣言はモジュールfooに含まれない。&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &#34;lib.h&#34;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// &#34;lib.h&#34;中の宣言がモジュールfooに含まれてしまう(モジュールリンケージを持ってしまう)。&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;foo&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;名前のあるモジュールに属する定義に対してはODRの例外が適用されないため、
グローバルモジュールフラグメント以外でインクルードすると、ODR違反になりやすいので注意が必要である。&lt;/p&gt;
&lt;p&gt;グローバルモジュールフラグメント内の宣言は、後続のモジュールに属する宣言から参照されていない場合は、&lt;strong&gt;破棄&lt;/strong&gt;される(discarded)。&lt;/p&gt;
&lt;p&gt;C++標準ライブラリのヘッダーをヘッダーユニット内でインクルードする場合、グローバルモジュールフラグメント内でインクルードするべきである。&lt;/p&gt;
&lt;h3&gt;ヘッダーユニット&lt;/h3&gt;
&lt;p&gt;一部のヘッダーファイルは、モジュールとしてインポートすることができる。この機能およびヘッダーファイルから生成される翻訳単位をヘッダーユニットという。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// foo.hをヘッダーユニットとしてインポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ただし、インポートできるヘッダーファイル(インポータブルヘッダー)は以下のものに限られる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ライブラリヘッダー(C++標準ライブラリヘッダーのうち、C言語標準ライブラリヘッダーに由来するもの(&lt;code&gt;&amp;lt;cstdio&amp;gt;&lt;/code&gt;など)を除くもの)&lt;/li&gt;
&lt;li&gt;その他、処理系定義のヘッダー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ヘッダーユニットをインポートしてもその内容が展開されることはないが、&lt;code&gt;#include&lt;/code&gt;とほぼ同じ効果が得られる(そのようなヘッダーファイルだけがインポータブルヘッダーに指定されるともいえる)。&lt;/p&gt;
&lt;p&gt;C++20では、インポータブルヘッダーに対する&lt;code&gt;#include&lt;/code&gt;は自動的にインポートに置き換わる。この処理はプリプロセッサで行われる。&lt;/p&gt;
&lt;h4&gt;モジュールとの違い&lt;/h4&gt;
&lt;p&gt;ヘッダーユニットはインポートしたときの効果を&lt;code&gt;#include&lt;/code&gt;と近くするために、普通のモジュールとは異なる性質をもつ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダーユニットはモジュール宣言を持てない。&lt;/li&gt;
&lt;li&gt;ヘッダーユニット内の宣言はすべてグローバルモジュールに属し、暗黙的にエクスポートされる。&lt;/li&gt;
&lt;li&gt;ヘッダーユニットをインポートすると、ヘッダーユニット内のマクロが使えるようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// a.h&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define X 123 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Y 45  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #2&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Z a   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #3&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#undef  X      &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// a.hではここで#1が無効になる&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// b.h&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;a.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// b.hではここで#1, #2, #3が定義され、#1が無効になる&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define X 456 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// OK: #1で定義したXはすでに無効&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Y 6   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// エラー: #2で定義したYが有効&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// c.h&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Y 45  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #4&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Z c   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #5&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// d.h&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;a.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// d.hではここで#1, #2, #3が定義され、#1が無効になる&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;c.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// d.hではここで#4, #5が定義される&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// OK: #4は#2と同じ&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// エラー: #5は#3を異なる値で再定義している&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ヘッダーユニットは再エクスポートできるが、ヘッダーユニットを間接的にインポートした場合はマクロはインポートされない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// lib.h&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define NUM 1000&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// lib_mod.cpp&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lib.h中の宣言をすべてエクスポートするモジュールlib&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;lib.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// main.cpp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エラー: マクロは再エクスポートしても引き継がれない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h4&gt;includeとの違い&lt;/h4&gt;
&lt;p&gt;ヘッダーユニットをインポートすると以下のことが起こる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダーファイルを翻訳フェーズ7までコンパイルし、その翻訳単位(ヘッダーユニット)をインポートする。&lt;/li&gt;
&lt;li&gt;さらに、ヘッダーファイルの翻訳フェーズ4終了時点で定義されていたマクロがインポート宣言の直後で宣言される。この処理はプリプロセッサで行われる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ヘッダーファイルが新たな翻訳単位としてコンパイルされる点が従来の &lt;code&gt;#include&lt;/code&gt; とは異なる。
ヘッダーユニット内のマクロはインポートできるが、逆は起こらない。すなわち、&lt;code&gt;import&lt;/code&gt;を書いた翻訳単位におけるプリプロセッサの状態がヘッダーユニット内に影響を与えることはない。&lt;/p&gt;
&lt;h4&gt;ヘッダーユニットが必要になった背景・経緯&lt;/h4&gt;
&lt;p&gt;単にヘッダーファイルをインクルードしたいだけであれば、グローバルモジュールフラグメント内で行えば問題は無い。&lt;/p&gt;
&lt;p&gt;しかし、処理系はヘッダーファイルをインポータブルヘッダーに指定することで、それらに対する &lt;code&gt;#include&lt;/code&gt; を &lt;code&gt;import&lt;/code&gt; に置き換え、
コンパイルを速くすることができる。&lt;/p&gt;
&lt;p&gt;例えば、C++20では標準ライブラリは従来通りヘッダーファイルで提供されるが、C++ライブラリヘッダーはインポータブルヘッダーでもある。処理系はこれらをコンパイル済みモジュールとして提供するかもしれない(ヘッダーファイルからヘッダーユニットを生成する手順を事前に行っておくことは禁止されていない)。&lt;/p&gt;
&lt;p&gt;そのような処理系では、C++20としてコンパイルするだけで従来のコードでも恩恵を得ることができる。&lt;/p&gt;
&lt;h2&gt;ビルド&lt;/h2&gt;
&lt;p&gt;プログラムのビルドは規格の範囲外なので、ここでは一般論を述べる。&lt;/p&gt;
&lt;p&gt;モジュールをコンパイルすると、何らかの中間表現(コンパイル済みモジュール)が保存される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートはテンプレートのまま（実体化することなく）エクスポートできるので、中間表現は機械語ではなく、いわゆるプリコンパイルドヘッダーと似たようなものにならざるを得ない。&lt;/li&gt;
&lt;li&gt;モジュールAをインポートするプログラムをコンパイルするには、モジュールAのコンパイル済みモジュールが存在しなければならない。&lt;/li&gt;
&lt;li&gt;モジュールAをインポートするプログラムをリンクするには、モジュールAに関するモジュールユニットから生成されるオブジェクトファイル、ライブラリなどを別途リンクしなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;プリプロセッサによるインクルードは、ヘッダーファイルの内容をその場に展開する。
これには次のような問題が指摘されてきた。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コンパイル時間が長くなる&lt;ul&gt;
&lt;li&gt;ヘッダーファイルの内容が再帰的に展開され、プログラムが長くなる（Hello worldだけでも数万行に達する）&lt;/li&gt;
&lt;li&gt;さらに、展開が翻訳単位ごとに行われるので、全体で見ると同じヘッダーファイルが何度も解析される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;プリプロセッサの状態により、インクルードの結果が変わってしまう&lt;ul&gt;
&lt;li&gt;インクルードの順番によってエラーが起きることがあった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ヘッダーファイル内の記述の影響を受けすぎる&lt;ul&gt;
&lt;li&gt;影響が大きいため、ヘッダーファイル内に書くことがためらわれる記述があった。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;using namespace&lt;/code&gt;やマクロ(例えばWindowsにおける&lt;code&gt;max&lt;/code&gt;)など。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;モジュールは、以上のような問題のないプログラム分割の仕組みとして導入された。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3 Merging Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1502r0.html&#34; target=&#34;_blank&#34;&gt;P1502R0
Standard library header units for C++20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1703r0.html&#34; target=&#34;_blank&#34;&gt;P1703R0 Recognizing Header Unit Imports Requires Full Preprocessing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1766r0.html&#34; target=&#34;_blank&#34;&gt;P1766R0
Mitigating minor modules maladies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>MATSUMURA Tetsuro</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>e93ef7ed72fe0464114091cd4e3ac537c6d31502:lang/cpp20/modules.md</id>
      <updated>2019-07-23T13:07:25+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;モジュール&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20では、インクルードに代わる新たな仕組みとしてモジュールが導入された。&lt;/p&gt;
&lt;p&gt;C++20では、プリプロセッサを用いずにプログラムを分割することができる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// a.cpp&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// モジュールAのインターフェース&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エクスポートしていない関数foo&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// エクスポートしている関数bar&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// a-impl.cpp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// モジュールAの実装&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK: fooはエクスポートしていないが、モジュールAの中では見える。&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// unrelated.cpp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK: barはAからエクスポートされているので見える&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エラー: fooはモジュールAの外では見えない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ただし、C++20では標準でモジュールとして提供されるライブラリはない。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;h3&gt;モジュール宣言&lt;/h3&gt;
&lt;p&gt;モジュール宣言の構文は以下のようになる：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;export(opt) module モジュール名 属性(opt);
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;モジュール宣言は翻訳単位あたり1回だけ、原則として翻訳単位の先頭に記述する。&lt;/li&gt;
&lt;li&gt;モジュール宣言を含む翻訳単位をモジュールユニットという。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;がある場合をモジュールインターフェースユニット、ない場合をモジュール実装ユニットと呼ぶ。&lt;/li&gt;
&lt;li&gt;あるモジュールについて、モジュールインターフェースユニットがただ1つ存在しなければならない。モジュールの実装は好きなだけ存在できる。&lt;/li&gt;
&lt;li&gt;モジュール実装ユニットはモジュールインターフェースユニットを暗黙的にインポートする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モジュール名は、識別子または識別子をドットで繋いだもの(例えば、&lt;code&gt;foo&lt;/code&gt;や&lt;code&gt;std.core&lt;/code&gt;)である。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;および&lt;code&gt;std&lt;/code&gt;から始まるあらゆるモジュール名は、今後の規格や処理系のために予約されているので、ユーザー定義のモジュール名として使うことはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// fooのモジュールインターフェースユニット&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;// fooのモジュール実装ユニット&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;// foo.barのモジュール実装ユニット&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 属性&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h4&gt;プライベートモジュールフラグメント&lt;/h4&gt;
&lt;p&gt;プライベートモジュールフラグメントは、1ファイルでモジュールを定義しつつインターフェースと実装を分離するための機能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// モジュールのインターフェース&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// プライベートモジュールフラグメント&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;プライベートモジュールフラグメントを記述する場合、そのモジュールは翻訳単位(必然的にモジュールインターフェースユニット)を1つしか持つことができない。&lt;/p&gt;
&lt;h4&gt;グローバルモジュール&lt;/h4&gt;
&lt;p&gt;C++20では、名前のあるモジュールに属していない宣言はグローバルモジュールに属している。&lt;/p&gt;
&lt;p&gt;グローバルモジュールの性質は以下の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前を持たず、インポートすることはできない。&lt;/li&gt;
&lt;li&gt;宣言をエクスポートすることはできない。&lt;/li&gt;
&lt;li&gt;モジュールインターフェースユニットを持つことはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;エクスポート&lt;/h3&gt;
&lt;p&gt;宣言の前に&lt;code&gt;export&lt;/code&gt;キーワードを付加することでその対象をエクスポートできる。
モジュールをインポートするとエクスポートした宣言が見える(名前探索の候補に挙がる)ようになる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 変数のエクスポート&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*...*/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// クラスのエクスポート&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*...*/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 名前空間のエクスポート&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foobar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 関数テンプレートのエクスポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;また、波カッコに&lt;code&gt;export&lt;/code&gt;をつけることで、その中の宣言をまとめてエクスポートできる。この波カッコはスコープを作らない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;エクスポート宣言はモジュールインターフェースユニットの中でのみ行える。ただし、以下の場所では不可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グローバルモジュールフラグメントの中&lt;/li&gt;
&lt;li&gt;プライベートモジュールフラグメントの中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;エクスポート宣言は必ず新たな名前をエクスポートしなければならない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;を付けた宣言が新たな名前を宣言していない場合は、エラーとなる。&lt;/li&gt;
&lt;li&gt;内部リンケージを持つ名前をエクスポートすると、エラーとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// エラー: 新たな名前を宣言していない&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;// エラー: 内部リンケージを持つ名前はエクスポートできない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// エラー: 内部リンケージを持つ名前はエクスポートできない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// エラー: 明示的にstaticで宣言されている名前はエクスポートできない&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エラー: 新たな名前を宣言していない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h4&gt;モジュールリンケージ&lt;/h4&gt;
&lt;p&gt;C++20では、新たにモジュールリンケージが追加された。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前のあるモジュールに属していてエクスポートしていない名前は、モジュールリンケージを持つ。&lt;ul&gt;
&lt;li&gt;エクスポートしている名前は外部リンケージを持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モジュールリンケージを持つ名前は、同一モジュール内で参照できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;インポート&lt;/h3&gt;
&lt;p&gt;モジュールインポート宣言は次のようになる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libのインポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;モジュールインポート宣言は、モジュールのインターフェースユニットをインポートする。&lt;/p&gt;
&lt;p&gt;インポートした翻訳単位中の宣言について、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;すべての宣言は到達可能となる。&lt;/li&gt;
&lt;li&gt;エクスポートしている宣言は見える(名前探索の候補に挙がる)ようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マクロや&lt;code&gt;using namespace&lt;/code&gt;は取り込まれない。ヘッダーファイル中での &lt;code&gt;using namespace&lt;/code&gt; はしばしば避けられるが、モジュールでは問題なく使うことができる。&lt;/p&gt;
&lt;h4&gt;再エクスポート&lt;/h4&gt;
&lt;p&gt;インポート宣言もエクスポートできる。これを再エクスポートという。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libの再エクスポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;モジュールをインポートすると、そのモジュールが再エクスポートしているモジュールも同時にインポートする。&lt;/p&gt;
&lt;h4&gt;インターフェース依存&lt;/h4&gt;
&lt;p&gt;翻訳単位がモジュールユニットUに&lt;strong&gt;インターフェース依存&lt;/strong&gt;(interface dependency)を持つとは、次のことをいう：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uをインポートするモジュールインポート宣言か、Uを暗黙的にインポートするモジュール宣言を含む&lt;/li&gt;
&lt;li&gt;または、Uにインターフェース依存を持つモジュールユニットに対してインターフェース依存を持つ(推移律)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;翻訳単位は、自分自身に対してインターフェース依存を持ってはならない(インターフェース依存関係は循環しない)。&lt;/p&gt;
&lt;h4&gt;到達可能性&lt;/h4&gt;
&lt;p&gt;C++20では、翻訳単位と宣言に対して到達可能という用語を使うようになった。&lt;/p&gt;
&lt;p&gt;翻訳単位Uがプログラムの点Pから&lt;strong&gt;必然的に到達可能&lt;/strong&gt;(necessarily reachable) とは、次のことをいう：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uがモジュールインターフェースユニットであり、点Pを含む翻訳単位が点Pに先立ってUにインターフェース依存を持っている&lt;/li&gt;
&lt;li&gt;または、点Pを含む翻訳単位が点Pに先立ってUをインポートしている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;必然的に到達可能な翻訳単位は、&lt;strong&gt;到達可能&lt;/strong&gt;(reachable)である。その他のインターフェース依存を持つ翻訳単位が到達可能となるかは、未規定である。
(推移的にインターフェース依存を持つモジュール実装パーティションなどが該当する)&lt;/p&gt;
&lt;p&gt;宣言Dが点Pから到達可能あるいは必然的に到達可能とは、次のことをいう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DがPと同じ翻訳単位にあり、Pに先立って宣言されている&lt;/li&gt;
&lt;li&gt;または、DがPから到達可能あるいは必然的に到達可能な翻訳単位にあって、破棄(discard)されておらず、プライベートモジュールフラグメント内にもない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20までは到達可能という用語はなかったが、前者の条件を満たす宣言だけが参照できていた。
宣言の意味論的な性質(semantic property)を使用するには、宣言が到達可能でなければならない。&lt;/p&gt;
&lt;p&gt;例えば、クラス定義はクラスの完全性という性質を持っている。クラス定義が到達可能であるときそのクラスは完全である。&lt;/p&gt;
&lt;h3&gt;モジュールパーティション&lt;/h3&gt;
&lt;p&gt;モジュールは分割することができる。分割したモジュールをモジュールパーティションという。&lt;/p&gt;
&lt;p&gt;モジュールパーティションを宣言する構文は以下のようになる：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;export(opt) module モジュール名:モジュールパーティション名 属性(opt);
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;モジュールパーティション名の書式は、モジュール名と同じである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt; がある場合をモジュールインターフェースパーティション、ない場合をモジュール実装パーティションという。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;part&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libモジュールのモジュールインターフェースパーティションpart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;internal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libモジュールのモジュール実装パーティションinternal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;モジュールパーティションは基本的に別のモジュールと考えてよいが、以下の点で異なる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主となるモジュールが異なる場合はインポートできない。&lt;ul&gt;
&lt;li&gt;外部へ公開するには、モジュールインターフェースから再エクスポートする。&lt;/li&gt;
&lt;li&gt;モジュールの利用者にパーティションの存在を意識させてはいけない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インポート宣言にはモジュールパーティション名だけを書く。&lt;/li&gt;
&lt;li&gt;インポートするとエクスポートしていない宣言も見えるようになる。&lt;ul&gt;
&lt;li&gt;ただし、再エクスポートはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主となるモジュールのインターフェースとパーティションを区別する場合は、プライマリーモジュールインターフェースユニットという事がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 翻訳単位1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 翻訳単位2&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Internals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 翻訳単位3&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Internals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 翻訳単位4&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Internals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このモジュールAは4つの翻訳単位からなる。上から順に、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(プライマリー)モジュールインターフェースユニット&lt;/li&gt;
&lt;li&gt;モジュールインターフェースパーティション &lt;code&gt;:Foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;モジュール実装パーティション &lt;code&gt;:Internals&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;モジュール実装ユニット&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ODRの緩和&lt;/h3&gt;
&lt;p&gt;C++20では、複数の定義があっても必然的に到達可能でなければODR違反とならない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// a.cpp&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// b.cpp&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムでは、関数&lt;code&gt;foo&lt;/code&gt;をモジュールA,Bで2回定義しているが、モジュールA,Bを同時にインポートしていないのでODR違反とならない。&lt;/p&gt;
&lt;p&gt;一方、同じトークン列であれば再定義しても良いというODRの例外は、その定義が名前のあるモジュールに属する場合は適用されない。&lt;/p&gt;
&lt;p&gt;この例外はヘッダーファイルにクラス定義などを書いてインクルードした際にODR違反にならないための規定である。
モジュールを定義する場合はヘッダーファイルは使わないから、実質的な影響はない。&lt;/p&gt;
&lt;h2&gt;後方互換性のための機能&lt;/h2&gt;
&lt;h3&gt;グローバルモジュールフラグメント&lt;/h3&gt;
&lt;p&gt;モジュール宣言の前にグローバルモジュールの実装を書くことができる。これをグローバルモジュールフラグメントという。&lt;/p&gt;
&lt;p&gt;グローバルモジュールフラグメントにはプリプロセッサディレクティブのみ記述できる。
翻訳フェーズ4以前の段階でプリプロセッサディレクティブ以外の記述がある場合は、エラーとなる。&lt;/p&gt;
&lt;p&gt;この機能は、モジュールのインターフェースへ影響を与えずにインクルードをするために用意された。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// グローバルモジュールフラグメントの宣言&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// &amp;lt;iostream&amp;gt;中の宣言はモジュールfooに含まれない。&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &#34;lib.h&#34;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// &#34;lib.h&#34;中の宣言がモジュールfooに含まれてしまう(モジュールリンケージを持ってしまう)。&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;foo&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;名前のあるモジュールに属する定義に対してはODRの例外が適用されないため、
グローバルモジュールフラグメント以外でインクルードすると、ODR違反になりやすいので注意が必要である。&lt;/p&gt;
&lt;p&gt;グローバルモジュールフラグメント内の宣言は、後続のモジュールに属する宣言から参照されていない場合は、&lt;strong&gt;破棄&lt;/strong&gt;される(discarded)。&lt;/p&gt;
&lt;p&gt;C++標準ライブラリのヘッダーをヘッダーユニット内でインクルードする場合、グローバルモジュールフラグメント内でインクルードするべきである。&lt;/p&gt;
&lt;h3&gt;ヘッダーユニット&lt;/h3&gt;
&lt;p&gt;ヘッダーユニットは、ヘッダーファイルをモジュールとしてインポートする機能である。
ヘッダーファイル内の宣言が見えるようになり、通常のモジュールとは異なりマクロも引き継がれる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// foo.hをヘッダーユニットとしてインポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ただし、どのようなヘッダーファイルでもヘッダーユニットになれるわけではない。
ヘッダーユニットとしてインポートできるヘッダーファイル(インポータブルヘッダー)は以下のものに限られる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ライブラリヘッダー(C++標準ライブラリヘッダーのうち、C言語標準ライブラリヘッダーに由来するもの(&lt;code&gt;&amp;lt;cstdio&amp;gt;&lt;/code&gt;など)を除くもの)&lt;/li&gt;
&lt;li&gt;その他、処理系定義のヘッダー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インポータブルヘッダーを &lt;code&gt;#include&lt;/code&gt; した場合、自動的にヘッダーユニットのインポートに置き換わる。&lt;/p&gt;
&lt;p&gt;ヘッダーユニットは再エクスポートできる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// lib.h&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define NUM 1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// lib_mod.cpp&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lib.h中の宣言をすべてエクスポートするモジュールlib&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;lib.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// main.cpp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エラー: マクロは再エクスポートしても引き継がれない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ヘッダーユニットをインポートすると以下のことが起こる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダーファイルをプリプロセスし、フェーズ4終了時点で定義されていたマクロをインポート宣言の直後で再定義する。&lt;/li&gt;
&lt;li&gt;ヘッダーファイルをフェーズ7までコンパイルし、その翻訳単位(ヘッダーユニット)をインポートする。&lt;ul&gt;
&lt;li&gt;内部リンケージを持たない名前は暗黙的にエクスポートされる。&lt;/li&gt;
&lt;li&gt;ヘッダーユニットはモジュール宣言を持てない。ヘッダーユニット内の宣言はグローバルモジュールに属する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ヘッダーファイルが新たな翻訳単位としてコンパイルされる点が従来の &lt;code&gt;#include&lt;/code&gt; と異なるので注意が必要である。&lt;/p&gt;
&lt;p&gt;ヘッダーファイルからヘッダーユニットを生成する手順を事前に行っておくことは禁止されていない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// a.h&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define X 123 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Y 45  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #2&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Z a   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #3&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#undef  X      &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// a.hではここで#1が無効になる&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// b.h&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;a.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// b.hではここで#1, #2, #3が定義され、#1が無効になる&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define X 456 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// OK: #1で定義したXはすでに無効&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Y 6   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// エラー: #2で定義したYが有効&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// c.h&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Y 45  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #4&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Z c   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #5&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// d.h&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;a.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// d.hではここで#1, #2, #3が定義され、#1が無効になる&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;c.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// d.hではここで#4, #5が定義される&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// OK: #4は#2と同じ&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// エラー: #5は#3を異なる値で再定義している&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h4&gt;ヘッダーユニットが必要になった背景・経緯&lt;/h4&gt;
&lt;p&gt;単にヘッダーファイルをインクルードしたいだけであれば、グローバルモジュールフラグメント内で行えば問題は無い。&lt;/p&gt;
&lt;p&gt;しかし、処理系はヘッダーファイルをインポータブルヘッダーに指定することで、それらに対する &lt;code&gt;#include&lt;/code&gt; を &lt;code&gt;import&lt;/code&gt; に置き換え、
コンパイルを速くすることができる。&lt;/p&gt;
&lt;p&gt;例えば、C++20では標準ライブラリは従来通りヘッダーファイルで提供されるが、C++ライブラリヘッダーはインポータブルヘッダーでもある。処理系はこれらをコンパイル済みモジュールとして提供するかもしれない。
そのような処理系では、C++20としてコンパイルするだけで従来のコードでも恩恵を得ることができる。&lt;/p&gt;
&lt;h2&gt;ビルド&lt;/h2&gt;
&lt;p&gt;プログラムのビルドは規格の範囲外なので、ここでは一般論を述べる。&lt;/p&gt;
&lt;p&gt;モジュールをコンパイルすると、何らかの中間表現(コンパイル済みモジュール)が保存される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートはテンプレートのまま（実体化することなく）エクスポートできるので、中間表現は機械語ではなく、いわゆるプリコンパイルドヘッダーと似たようなものにならざるを得ない。&lt;/li&gt;
&lt;li&gt;モジュールAをインポートするプログラムをコンパイルするには、モジュールAのコンパイル済みモジュールが存在しなければならない。&lt;/li&gt;
&lt;li&gt;モジュールAをインポートするプログラムをリンクするには、モジュールAに関するモジュールユニットから生成されるオブジェクトファイル、ライブラリなどを別途リンクしなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;プリプロセッサによるインクルードは、ヘッダーファイルの内容をその場に展開する。
これには次のような問題が指摘されてきた。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コンパイル時間が長くなる&lt;ul&gt;
&lt;li&gt;ヘッダーファイルの内容が再帰的に展開され、プログラムが長くなる（Hello worldだけでも数万行に達する）&lt;/li&gt;
&lt;li&gt;さらに、展開が翻訳単位ごとに行われるので、全体で見ると同じヘッダーファイルが何度も解析される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;プリプロセッサの状態により、インクルードの結果が変わってしまう&lt;ul&gt;
&lt;li&gt;インクルードの順番によってエラーが起きることがあった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ヘッダーファイル内の記述の影響を受けすぎる&lt;ul&gt;
&lt;li&gt;影響が大きいため、ヘッダーファイル内に書くことがためらわれる記述があった。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;using namespace&lt;/code&gt;やマクロ(例えばWindowsにおける&lt;code&gt;max&lt;/code&gt;)など。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;モジュールは、以上のような問題のないプログラム分割の仕組みとして導入された。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3 Merging Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1502r0.html&#34; target=&#34;_blank&#34;&gt;P1502R0
Standard library header units for C++20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1766r0.html&#34; target=&#34;_blank&#34;&gt;P1766R0
Mitigating minor modules maladies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>MATSUMURA Tetsuro</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>8cd9ca6980097e115d9a3b59f26985f23a7c13ca:lang/cpp20/modules.md</id>
      <updated>2019-07-23T13:05:09+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;モジュール&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++20では、インクルードに代わる新たな仕組みとしてモジュールが導入された。&lt;/p&gt;
&lt;p&gt;C++20では、プリプロセッサを用いずにプログラムを分割することができる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// a.cpp&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// モジュールAのインターフェース&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エクスポートしていない関数foo&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// エクスポートしている関数bar&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// a-impl.cpp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// モジュールAの実装&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK: fooはエクスポートしていないが、モジュールAの中では見える。&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// unrelated.cpp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK: barはAからエクスポートされているので見える&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エラー: fooはモジュールAの外では見えない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ただし、C++20では標準でモジュールとして提供されるライブラリはない。&lt;/p&gt;
&lt;h2&gt;仕様&lt;/h2&gt;
&lt;h3&gt;モジュール宣言&lt;/h3&gt;
&lt;p&gt;モジュール宣言の構文は以下のようになる：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;export(opt) module モジュール名 属性(opt);
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;モジュール宣言は翻訳単位あたり1回だけ、原則として翻訳単位の先頭に記述する。&lt;/li&gt;
&lt;li&gt;モジュール宣言を含む翻訳単位をモジュールユニットという。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;がある場合をモジュールインターフェースユニット、ない場合をモジュール実装ユニットと呼ぶ。&lt;/li&gt;
&lt;li&gt;あるモジュールについて、モジュールインターフェースユニットがただ1つ存在しなければならない。モジュールの実装は好きなだけ存在できる。&lt;/li&gt;
&lt;li&gt;モジュール実装ユニットはモジュールインターフェースユニットを暗黙的にインポートする。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モジュール名は、識別子または識別子をドットで繋いだもの(例えば、&lt;code&gt;foo&lt;/code&gt;や&lt;code&gt;std.core&lt;/code&gt;)である。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std&lt;/code&gt;および&lt;code&gt;std&lt;/code&gt;から始まるあらゆるモジュール名は、今後の規格や処理系のために予約されているので、ユーザー定義のモジュール名として使うことはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// fooのモジュールインターフェースユニット&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// fooのモジュール実装ユニット&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// foo.barのモジュール実装ユニット&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 属性&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h4&gt;プライベートモジュールフラグメント&lt;/h4&gt;
&lt;p&gt;プライベートモジュールフラグメントは、1ファイルでモジュールを定義しつつインターフェースと実装を分離するための機能である。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// モジュールのインターフェース&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// プライベートモジュールフラグメント&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;プライベートモジュールフラグメントを記述する場合、そのモジュールは翻訳単位(必然的にモジュールインターフェースユニット)を1つしか持つことができない。&lt;/p&gt;
&lt;h4&gt;グローバルモジュール&lt;/h4&gt;
&lt;p&gt;C++20では、名前のあるモジュールに属していない宣言はグローバルモジュールに属している。&lt;/p&gt;
&lt;p&gt;グローバルモジュールの性質は以下の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前を持たず、インポートすることはできない。&lt;/li&gt;
&lt;li&gt;宣言をエクスポートすることはできない。&lt;/li&gt;
&lt;li&gt;モジュールインターフェースユニットを持つことはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;エクスポート&lt;/h3&gt;
&lt;p&gt;宣言の前に&lt;code&gt;export&lt;/code&gt;キーワードを付加することでその対象をエクスポートできる。
モジュールをインポートするとエクスポートした宣言が見える(名前探索の候補に挙がる)ようになる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 変数のエクスポート&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*...*/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// クラスのエクスポート&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*...*/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 名前空間のエクスポート&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foobar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 関数テンプレートのエクスポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;また、波カッコに&lt;code&gt;export&lt;/code&gt;をつけることで、その中の宣言をまとめてエクスポートできる。この波カッコはスコープを作らない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;エクスポート宣言はモジュールインターフェースユニットの中でのみ行える。ただし、以下の場所では不可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;グローバルモジュールフラグメントの中&lt;/li&gt;
&lt;li&gt;プライベートモジュールフラグメントの中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;エクスポート宣言は必ず新たな名前をエクスポートしなければならない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;を付けた宣言が新たな名前を宣言していない場合は、エラーとなる。&lt;/li&gt;
&lt;li&gt;内部リンケージを持つ名前をエクスポートすると、エラーとなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// エラー: 新たな名前を宣言していない&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;// エラー: 内部リンケージを持つ名前はエクスポートできない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// エラー: 内部リンケージを持つ名前はエクスポートできない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// エラー: 明示的にstaticで宣言されている名前はエクスポートできない&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エラー: 新たな名前を宣言していない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h4&gt;モジュールリンケージ&lt;/h4&gt;
&lt;p&gt;C++20では、新たにモジュールリンケージが追加された。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名前のあるモジュールに属していてエクスポートしていない名前は、モジュールリンケージを持つ。&lt;ul&gt;
&lt;li&gt;エクスポートしている名前は外部リンケージを持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;モジュールリンケージを持つ名前は、同一モジュール内で参照できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;インポート&lt;/h3&gt;
&lt;p&gt;モジュールインポート宣言は次のようになる：&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libのインポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;モジュールインポート宣言は、モジュールのインターフェースユニットをインポートする。&lt;/p&gt;
&lt;p&gt;インポートした翻訳単位中の宣言について、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;すべての宣言は到達可能となる。&lt;/li&gt;
&lt;li&gt;エクスポートしている宣言は見える(名前探索の候補に挙がる)ようになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マクロや&lt;code&gt;using namespace&lt;/code&gt;は取り込まれない。ヘッダーファイル中での &lt;code&gt;using namespace&lt;/code&gt; はしばしば避けられるが、モジュールでは問題なく使うことができる。&lt;/p&gt;
&lt;h4&gt;再エクスポート&lt;/h4&gt;
&lt;p&gt;インポート宣言もエクスポートできる。これを再エクスポートという。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libの再エクスポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;モジュールをインポートすると、そのモジュールが再エクスポートしているモジュールも同時にインポートする。&lt;/p&gt;
&lt;h4&gt;インターフェース依存&lt;/h4&gt;
&lt;p&gt;翻訳単位がモジュールユニットUに&lt;strong&gt;インターフェース依存&lt;/strong&gt;(interface dependency)を持つとは、次のことをいう：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uをインポートするモジュールインポート宣言か、Uを暗黙的にインポートするモジュール宣言を含む&lt;/li&gt;
&lt;li&gt;または、Uにインターフェース依存を持つモジュールユニットに対してインターフェース依存を持つ(推移律)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;翻訳単位は、自分自身に対してインターフェース依存を持ってはならない(インターフェース依存関係は循環しない)。&lt;/p&gt;
&lt;h4&gt;到達可能性&lt;/h4&gt;
&lt;p&gt;C++20では、翻訳単位と宣言に対して到達可能という用語を使うようになった。&lt;/p&gt;
&lt;p&gt;翻訳単位Uがプログラムの点Pから&lt;strong&gt;必然的に到達可能&lt;/strong&gt;(necessarily reachable) とは、次のことをいう：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uがモジュールインターフェースユニットであり、点Pを含む翻訳単位が点Pに先立ってUにインターフェース依存を持っている&lt;/li&gt;
&lt;li&gt;または、点Pを含む翻訳単位が点Pに先立ってUをインポートしている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;必然的に到達可能な翻訳単位は、&lt;strong&gt;到達可能&lt;/strong&gt;(reachable)である。その他のインターフェース依存を持つ翻訳単位が到達可能となるかは、未規定である。
(推移的にインターフェース依存を持つモジュール実装パーティションなどが該当する)&lt;/p&gt;
&lt;p&gt;宣言Dが点Pから到達可能あるいは必然的に到達可能とは、次のことをいう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DがPと同じ翻訳単位にあり、Pに先立って宣言されている&lt;/li&gt;
&lt;li&gt;または、DがPから到達可能あるいは必然的に到達可能な翻訳単位にあって、破棄(discard)されておらず、プライベートモジュールフラグメント内にもない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++20までは到達可能という用語はなかったが、前者の条件を満たす宣言だけが参照できていた。
宣言の意味論的な性質(semantic property)を使用するには、宣言が到達可能でなければならない。&lt;/p&gt;
&lt;p&gt;例えば、クラス定義はクラスの完全性という性質を持っている。クラス定義が到達可能であるときそのクラスは完全である。&lt;/p&gt;
&lt;h3&gt;モジュールパーティション&lt;/h3&gt;
&lt;p&gt;モジュールは分割することができる。分割したモジュールをモジュールパーティションという。&lt;/p&gt;
&lt;p&gt;モジュールパーティションを宣言する構文は以下のようになる：&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;export(opt) module モジュール名:モジュールパーティション名 属性(opt);
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;モジュールパーティション名の書式は、モジュール名と同じである。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt; がある場合をモジュールインターフェースパーティション、ない場合をモジュール実装パーティションという。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;part&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libモジュールのモジュールインターフェースパーティションpart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;internal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// libモジュールのモジュール実装パーティションinternal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;モジュールパーティションは基本的に別のモジュールと考えてよいが、以下の点で異なる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主となるモジュールが異なる場合はインポートできない。&lt;ul&gt;
&lt;li&gt;外部へ公開するには、モジュールインターフェースから再エクスポートする。&lt;/li&gt;
&lt;li&gt;モジュールの利用者にパーティションの存在を意識させてはいけない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インポート宣言にはモジュールパーティション名だけを書く。&lt;/li&gt;
&lt;li&gt;インポートするとエクスポートしていない宣言も見えるようになる。&lt;ul&gt;
&lt;li&gt;ただし、再エクスポートはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主となるモジュールのインターフェースとパーティションを区別する場合は、プライマリーモジュールインターフェースユニットという事がある。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 翻訳単位1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 翻訳単位2&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Internals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 翻訳単位3&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Internals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 翻訳単位4&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Internals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このモジュールAは4つの翻訳単位からなる。上から順に、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(プライマリー)モジュールインターフェースユニット&lt;/li&gt;
&lt;li&gt;モジュールインターフェースパーティション &lt;code&gt;:Foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;モジュール実装パーティション &lt;code&gt;:Internals&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;モジュール実装ユニット&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ODRの緩和&lt;/h3&gt;
&lt;p&gt;C++20では、複数の定義があっても必然的に到達可能でなければODR違反とならない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// a.cpp&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// b.cpp&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;このプログラムでは、関数&lt;code&gt;foo&lt;/code&gt;をモジュールA,Bで2回定義しているが、モジュールA,Bを同時にインポートしていないのでODR違反とならない。&lt;/p&gt;
&lt;p&gt;一方、同じトークン列であれば再定義しても良いというODRの例外は、その定義が名前のあるモジュールに属する場合は適用されない。&lt;/p&gt;
&lt;p&gt;この例外はヘッダーファイルにクラス定義などを書いてインクルードした際にODR違反にならないための規定である。
モジュールを定義する場合はヘッダーファイルは使わないから、実質的な影響はない。&lt;/p&gt;
&lt;h2&gt;後方互換性のための機能&lt;/h2&gt;
&lt;h3&gt;グローバルモジュールフラグメント&lt;/h3&gt;
&lt;p&gt;モジュール宣言の前にグローバルモジュールの実装を書くことができる。これをグローバルモジュールフラグメントという。&lt;/p&gt;
&lt;p&gt;グローバルモジュールフラグメントにはプリプロセッサディレクティブのみ記述できる。
翻訳フェーズ4以前の段階でプリプロセッサディレクティブ以外の記述がある場合は、エラーとなる。&lt;/p&gt;
&lt;p&gt;この機能は、モジュールのインターフェースへ影響を与えずにインクルードをするために用意された。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// グローバルモジュールフラグメントの宣言&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;iostream&amp;gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// &amp;lt;iostream&amp;gt;中の宣言はモジュールfooに含まれない。&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include &#34;lib.h&#34;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// &#34;lib.h&#34;中の宣言がモジュールfooに含まれてしまう(モジュールリンケージを持ってしまう)。&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;foo&#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;名前のあるモジュールに属する定義に対してはODRの例外が適用されないため、
グローバルモジュールフラグメント以外でインクルードすると、ODR違反になりやすいので注意が必要である。&lt;/p&gt;
&lt;p&gt;グローバルモジュールフラグメント内の宣言は、後続のモジュールに属する宣言から参照されていない場合は、&lt;strong&gt;破棄&lt;/strong&gt;される(discarded)。&lt;/p&gt;
&lt;p&gt;C++標準ライブラリのヘッダーをヘッダーユニット内でインクルードする場合、グローバルモジュールフラグメント内でインクルードするべきである。&lt;/p&gt;
&lt;h3&gt;ヘッダーユニット&lt;/h3&gt;
&lt;p&gt;ヘッダーユニットは、ヘッダーファイルをモジュールとしてインポートする機能である。
ヘッダーファイル内の宣言が見えるようになり、通常のモジュールとは異なりマクロも引き継がれる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// foo.hをヘッダーユニットとしてインポート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ただし、どのようなヘッダーファイルでもヘッダーユニットになれるわけではない。
ヘッダーユニットとしてインポートできるヘッダーファイル(インポータブルヘッダー)は以下のものに限られる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ライブラリヘッダー(C++標準ライブラリヘッダーのうち、C言語標準ライブラリヘッダーに由来するもの(&lt;code&gt;&amp;lt;cstdio&amp;gt;&lt;/code&gt;など)を除くもの)&lt;/li&gt;
&lt;li&gt;その他、処理系定義のヘッダー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インポータブルヘッダーを &lt;code&gt;#include&lt;/code&gt; した場合、自動的にヘッダーユニットのインポートに置き換わる。&lt;/p&gt;
&lt;p&gt;ヘッダーユニットは再エクスポートできる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// lib.h&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#define NUM 1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// lib_mod.cpp&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// lib.h中の宣言をすべてエクスポートするモジュールlib&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;lib.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// main.cpp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
  &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NUM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// エラー: マクロは再エクスポートしても引き継がれない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;ヘッダーユニットをインポートすると以下のことが起こる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ヘッダーファイルをプリプロセスし、フェーズ4終了時点で定義されていたマクロをインポート宣言の直後で再定義する。&lt;/li&gt;
&lt;li&gt;ヘッダーファイルをフェーズ7までコンパイルし、その翻訳単位(ヘッダーユニット)をインポートする。&lt;ul&gt;
&lt;li&gt;内部リンケージを持たない名前は暗黙的にエクスポートされる。&lt;/li&gt;
&lt;li&gt;ヘッダーユニットはモジュール宣言を持てない。ヘッダーユニット内の宣言はグローバルモジュールに属する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ヘッダーファイルが新たな翻訳単位としてコンパイルされる点が従来の &lt;code&gt;#include&lt;/code&gt; と異なるので注意が必要である。&lt;/p&gt;
&lt;p&gt;ヘッダーファイルからヘッダーユニットを生成する手順を事前に行っておくことは禁止されていない。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// &lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3&lt;/a&gt;より引用&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// a.h&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define X 123 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Y 45  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #2&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Z a   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #3&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#undef  X      &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// a.hではここで#1が無効になる&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// b.h&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;a.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// b.hではここで#1, #2, #3が定義され、#1が無効になる&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define X 456 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// OK: #1で定義したXはすでに無効&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Y 6   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// エラー: #2で定義したYが有効&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// c.h&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Y 45  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #4&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define Z c   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// #5&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// d.h&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;a.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// d.hではここで#1, #2, #3が定義され、#1が無効になる&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;c.h&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// d.hではここで#4, #5が定義される&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// OK: #4は#2と同じ&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// エラー: #5は#3を異なる値で再定義している&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h4&gt;ヘッダーユニットが必要になった背景・経緯&lt;/h4&gt;
&lt;p&gt;単にヘッダーファイルをインクルードしたいだけであれば、グローバルモジュールフラグメント内で行えば問題は無い。&lt;/p&gt;
&lt;p&gt;しかし、処理系はヘッダーファイルをインポータブルヘッダーに指定することで、それらに対する &lt;code&gt;#include&lt;/code&gt; を &lt;code&gt;import&lt;/code&gt; に置き換え、
コンパイルを速くすることができる。&lt;/p&gt;
&lt;p&gt;例えば、C++20では標準ライブラリは従来通りヘッダーファイルで提供されるが、C++ライブラリヘッダーはインポータブルヘッダーでもある。処理系はこれらをコンパイル済みモジュールとして提供するかもしれない。
そのような処理系では、C++20としてコンパイルするだけで従来のコードでも恩恵を得ることができる。&lt;/p&gt;
&lt;h2&gt;ビルド&lt;/h2&gt;
&lt;p&gt;プログラムのビルドは規格の範囲外なので、ここでは一般論を述べる。&lt;/p&gt;
&lt;p&gt;モジュールをコンパイルすると、何らかの中間表現(コンパイル済みモジュール)が保存される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テンプレートはテンプレートのまま（実体化することなく）エクスポートできるので、中間表現は機械語ではなく、いわゆるプリコンパイルドヘッダーと似たようなものにならざるを得ない。&lt;/li&gt;
&lt;li&gt;モジュールAをインポートするプログラムをコンパイルするには、モジュールAのコンパイル済みモジュールが存在しなければならない。&lt;/li&gt;
&lt;li&gt;モジュールAをインポートするプログラムをリンクするには、モジュールAに関するモジュールユニットから生成されるオブジェクトファイル、ライブラリなどを別途リンクしなければならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;プリプロセッサによるインクルードは、ヘッダーファイルの内容をその場に展開する。
これには次のような問題が指摘されてきた。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コンパイル時間が長くなる&lt;ul&gt;
&lt;li&gt;ヘッダーファイルの内容が再帰的に展開され、プログラムが長くなる（Hello worldだけでも数万行に達する）&lt;/li&gt;
&lt;li&gt;さらに、展開が翻訳単位ごとに行われるので、全体で見ると同じヘッダーファイルが何度も解析される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;プリプロセッサの状態により、インクルードの結果が変わってしまう&lt;ul&gt;
&lt;li&gt;インクルードの順番によってエラーが起きることがあった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ヘッダーファイル内の記述の影響を受けすぎる&lt;ul&gt;
&lt;li&gt;影響が大きいため、ヘッダーファイル内に書くことがためらわれる記述があった。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;using namespace&lt;/code&gt;やマクロ(例えばWindowsにおける&lt;code&gt;max&lt;/code&gt;)など。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;モジュールは、以上のような問題のないプログラム分割の仕組みとして導入された。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf&#34; target=&#34;_blank&#34;&gt;P1103R3 Merging Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1502r0.html&#34; target=&#34;_blank&#34;&gt;P1502R0
Standard library header units for C++20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1766r0.html&#34; target=&#34;_blank&#34;&gt;P1766R0
Mitigating minor modules maladies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>MATSUMURA Tetsuro</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
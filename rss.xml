<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-08-18T14:36:29.659967</updated>
  <id>bb1baa73-0cd5-48bc-b16a-80382f1159cc</id>

  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 -- Merge pull request #891 from naritan/patch-2</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>f0db87cc61c7033307404cc7d566af6cd76887f2:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2021-08-18T19:29:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 90ee72a45..74dcc4966 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -17,7 +17,7 @@ int main()
   const bool b1 = ++b;
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
   const bool b2 = ++b;
-  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
+  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b2 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 -- サンプルコード修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>4528b30ec7fc41764879ced63699eefb601f9b8f:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2021-08-18T19:27:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 90ee72a45..74dcc4966 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -17,7 +17,7 @@ int main()
   const bool b1 = ++b;
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
   const bool b2 = ++b;
-  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
+  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b2 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>naritan</name>
        <email>yuuki@naritan.net</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 -- Merge pull request #890 from naritan/patch-1</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>7d2b951e034e3e166a01d10a2120656b9f07e2b6:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2021-08-18T19:21:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 548a00acf..90ee72a45 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -14,9 +14,9 @@ C++17では`bool`型に対する前置および後置の`operator ++`を削除
 int main()
 {
   bool b = false;
-  const b1 = ++b;
+  const bool b1 = ++b;
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
-  const b2 = ++b;
+  const bool b2 = ++b;
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 -- boolが抜けていたので修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>41cc6040ebdc3a3277a85db30b78a08e97f3e415:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2021-08-18T19:07:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 548a00acf..90ee72a45 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -14,9 +14,9 @@ C++17では`bool`型に対する前置および後置の`operator ++`を削除
 int main()
 {
   bool b = false;
-  const b1 = ++b;
+  const bool b1 = ++b;
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
-  const b2 = ++b;
+  const bool b2 = ++b;
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>naritan</name>
        <email>yuuki@naritan.net</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- P0602R4対応</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_assign.html"/>
      <id>956915d4e7be5f44bc41a7650885bf1e245ea99f:reference/optional/optional/op_assign.md</id>
      <updated>2021-08-18T12:25:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_assign.md b/reference/optional/optional/op_assign.md
index a4bd6fc19..9ef8badaf 100644
--- a/reference/optional/optional/op_assign.md
+++ b/reference/optional/optional/op_assign.md
@@ -73,6 +73,10 @@ optional&amp;amp; operator=(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                  // (6)
 - (2) : 型`T`がコピー構築可能でなく、コピー代入可能でもないこと
 - (3) : 型`T`がムーブ構築可能でなく、ムーブ代入可能でもないこと
 
+## トリビアルに定義される条件
+
+- (2) : 型`T`が、[トリビアルにコピー構築可能](/reference/type_traits/is_trivially_copy_constructible.md)であり[トリビアルにコピー代入可能](/reference/type_traits/is_trivially_copy_assignable.md)かつ、[トリビアルに破棄可能](/reference/type_traits/is_trivially_destructible.md)である
+- (3) : 型`T`が、[トリビアルにムーブ構築可能](/reference/type_traits/is_trivially_move_constructible.md)であり[トリビアルにムーブ代入可能](/reference/type_traits/is_nothrow_move_assignable.md)かつ、[トリビアルに破棄可能](/reference/type_traits/is_trivially_destructible.md)である
 
 ## 例
 ```cpp example
@@ -165,3 +169,4 @@ int main()
 
 ## 参照
 - [LWG Issue 2756. `optional&amp;lt;T&amp;gt;` should `forward` `T`&amp;#39;s implicit conversions](https://wg21.cmeerw.net/lwg/issue2756)
+- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- P0602R4対応</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_constructor.html"/>
      <id>956915d4e7be5f44bc41a7650885bf1e245ea99f:reference/optional/optional/op_constructor.md</id>
      <updated>2021-08-18T12:25:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_constructor.md b/reference/optional/optional/op_constructor.md
index 5b6ba7db2..3046ccd0e 100644
--- a/reference/optional/optional/op_constructor.md
+++ b/reference/optional/optional/op_constructor.md
@@ -85,12 +85,16 @@ explicit(see below) optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);         // (9) C++20
 
 
 ## 定数式に評価される条件
-- (3) : 型`T`がトリビアルにコピー構築可能であること
-- (4) : 型`T`がトリビアルにムーブ構築可能であること
+- (3) : 型`T`が[トリビアルにコピー構築可能](/reference/type_traits/is_trivially_copy_constructible.md)であること
+- (4) : 型`T`が[トリビアルにムーブ構築可能](/reference/type_traits/is_trivially_move_constructible.md)であること
 - (5) : 型`T`の選択されたコンストラクタが`constexpr`であること
 - (6) : 型`T`の選択されたコンストラクタが`constexpr`であること
 - (7) : 型`T`の選択されたコンストラクタが`constexpr`であること
 
+## トリビアルに定義される条件
+
+- (3) : 型`T`が[トリビアルにコピー構築可能](/reference/type_traits/is_trivially_copy_constructible.md)であること
+- (4) : 型`T`が[トリビアルにムーブ構築可能](/reference/type_traits/is_trivially_move_constructible.md)であること
 
 ## explicitになる条件
 - (7) : 型`U`から型`T`に暗黙的に型変換ができる場合、このオーバーロードは非`explicit`となる。型`U`から型`T`に明示的な型変換ならできる場合、このオーバーロードは`explicit`となる
@@ -219,3 +223,4 @@ int main()
 - [LWG Issue 2900. The copy and move constructors of `optional` are not `constexpr`](https://wg21.cmeerw.net/lwg/issue2900)
 - [P0892R2 `explicit(bool)`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html)
     - C++20での`explicit(bool)`構文への対応
+- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- P0602R4対応</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_assign.html"/>
      <id>956915d4e7be5f44bc41a7650885bf1e245ea99f:reference/variant/variant/op_assign.md</id>
      <updated>2021-08-18T12:25:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_assign.md b/reference/variant/variant/op_assign.md
index d868cff32..b98f075a9 100644
--- a/reference/variant/variant/op_assign.md
+++ b/reference/variant/variant/op_assign.md
@@ -192,3 +192,4 @@ int main()
 
 ## 参照
 - [P0608R3 A sane variant converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
+- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- P0602R4対応</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_constructor.html"/>
      <id>956915d4e7be5f44bc41a7650885bf1e245ea99f:reference/variant/variant/op_constructor.md</id>
      <updated>2021-08-18T12:25:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_constructor.md b/reference/variant/variant/op_constructor.md
index af17c4292..280ea9f56 100644
--- a/reference/variant/variant/op_constructor.md
+++ b/reference/variant/variant/op_constructor.md
@@ -411,3 +411,4 @@ int main()
 
 ## 参照
 - [P0608R3 A sane variant converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
+- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
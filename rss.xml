<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-16T09:23:03.296394</updated>
  <id>47b64664-fe2c-41e8-9b6b-9cdf69756805</id>

  
    <entry>
      <title>substr -- 拡張子ミスのような不正な内部リンクが検出されていなかったのを修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/substr.html"/>
      <id>a0a65d950381e8c5c246de5f9dead685aba7db4e:reference/string/basic_string/substr.md</id>
      <updated>2023-01-16T18:18:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/substr.md b/reference/string/basic_string/substr.md
index 3585e7332..a7ad8c218 100644
--- a/reference/string/basic_string/substr.md
+++ b/reference/string/basic_string/substr.md
@@ -48,7 +48,7 @@ constexpr basic_string
 
 
 ## 備考
-C++23から(2)[右辺値修飾オーバーロード](/lang/cpp11/ref_qualifier_for_this)の追加にともない、従来からある(1)はconst左辺値参照オーバーロードに変更される。
+C++23から(2)[右辺値修飾オーバーロード](/lang/cpp11/ref_qualifier_for_this.md)の追加にともない、従来からある(1)はconst左辺値参照オーバーロードに変更される。
 同時にメンバ関数`substr`のライブラリ仕様記述は、新たに追加された`basic_string`コンストラクタを用いて書き直されるものの、基本的な動作はC++20までと同一である。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- 拡張子ミスのような不正な内部リンクが検出されていなかったのを修正</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_constructor.html"/>
      <id>a0a65d950381e8c5c246de5f9dead685aba7db4e:reference/string_view/basic_string_view/op_constructor.md</id>
      <updated>2023-01-16T18:18:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_constructor.md b/reference/string_view/basic_string_view/op_constructor.md
index 4e1c60b05..3de2a3a37 100644
--- a/reference/string_view/basic_string_view/op_constructor.md
+++ b/reference/string_view/basic_string_view/op_constructor.md
@@ -82,7 +82,7 @@ snprintf(buf, sizeof(buf), &amp;#34;abc&amp;#34;);
 string_view str(buf);
 ```
 
-- ヌル文字を含む文字列リテラル全体から`basic_string_view`を構築したい場合は[`std::string_view_literals::svリテラル`](op_sv.html)を用いる。
+- ヌル文字を含む文字列リテラル全体から`basic_string_view`を構築したい場合は[`std::string_view_literals::svリテラル`](op_sv.md)を用いる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ページファイル名の付け方 -- 拡張子ミスのような不正な内部リンクが検出されていなかったのを修正</title>
      <link href="https://cpprefjp.github.io/start_editing/page_names.html"/>
      <id>a0a65d950381e8c5c246de5f9dead685aba7db4e:start_editing/page_names.md</id>
      <updated>2023-01-16T18:18:48+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ページファイル名の付け方&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;cpprefjpサイトでは、ページファイル名の付け方について、いくつかの共通ルールがあります。&lt;/p&gt;
&lt;h2&gt;基本ルール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;機能名をページファイル名とする&lt;/li&gt;
&lt;li&gt;マクロは小文字とする&lt;/li&gt;
&lt;li&gt;大文字 + 区切り文字 + 拡張子で構成される名前のファイルは、MarkdownからHTMLへの変換の際に無視される&lt;ul&gt;
&lt;li&gt;README.mdなど&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;演算子のファイル名&lt;/h2&gt;
&lt;p&gt;便宜的に、コンストラクタやデストラクタのような特殊メンバ関数も演算子という扱いにしている。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;演算子&lt;/th&gt;
&lt;th&gt;演算子名&lt;/th&gt;
&lt;th&gt;ファイル名&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_constructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;クラス名をファイル名にはしない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_destructor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイル名に &lt;code&gt;~&lt;/code&gt; (チルダ) が含まれないようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;クラステンプレートの推論補助&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_deduction_guide&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator[ ]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;添字演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_at&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数呼び出し演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_call&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator*&lt;/code&gt; (単項)&lt;/td&gt;
&lt;td&gt;間接参照演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_deref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;dereferenceの略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ポインタアクセス演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_arrow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator+=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加算の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_plus_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator-=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;減算の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_minus_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator*=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乗算の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_multiply_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator/=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;除算の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_divide_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator/=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;パス要素加算の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_append_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;この演算子はファイルシステムの文脈で特殊な意味を持つ。&lt;br /&gt; 対応するメンバ関数&lt;code&gt;append()&lt;/code&gt;と合わせた命名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator%=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;剰余の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_modulo_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左ビットシフトの複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_left_shift_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右ビットシフトの複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_right_shift_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;amp;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット論理積の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_and_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator|=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット論理和の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_or_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator^=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット排他的論理和の複合代入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_xor_assign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_increment&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前置・後置は同じページ内で解説する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator--&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デクリメント&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_decrement&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前置・後置は同じページ内で解説する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator+&lt;/code&gt; (単項)&lt;/td&gt;
&lt;td&gt;単項プラス演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_unary_plus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator-&lt;/code&gt; (単項)&lt;/td&gt;
&lt;td&gt;単項マイナス演算子 (符号反転)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_unary_minus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator!&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理反転演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット反転演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_flip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等値比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非等値比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_not_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小なり演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_less&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大なり演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_greater&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以下演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_less_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以上演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_greater_equal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;=&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;三方比較演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_compare_3way&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator+&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;加算演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_plus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator-&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;減算演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_minus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator*&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;乗算演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_multiply&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator/&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;除算演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_divide&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator/&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;パス要素加算の演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_append&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;この演算子はファイルシステムの文脈で特殊な意味を持つ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator/&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;カレンダー構文の演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_append&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;時間・日付ライブラリにおいて、この演算子はカレンダーの&lt;code&gt;YYYY/MM/DD&lt;/code&gt;のような表記をできるようにする意味をもつ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator%&lt;/code&gt; (二項)&lt;/td&gt;
&lt;td&gt;剰余演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_modulo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット論理積演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_and&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator|&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット論理和演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット排他的論理和演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_xor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理積演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_logical_and&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator||&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;論理和演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_logical_or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット左シフト演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_left_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビット右シフト演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_right_shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリーム演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_ostream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットシフトと意味論が異なるため、別ページとしている&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリーム演算子&lt;/td&gt;
&lt;td&gt;&lt;code&gt;op_istream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビットシフトと意味論が異なるため、別ページとしている&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;C++にはこの表に含まれない演算子もいくつかあるが、ここでは標準ライブラリでオーバーロードされ、本サイトが掲載している演算子のみを記載している。&lt;/p&gt;
&lt;p&gt;この表に含まれない演算子として、以下のようなものもある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型変換演算子&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator int&lt;/code&gt;のような&lt;code&gt;int&lt;/code&gt;への型変換演算子は、&lt;code&gt;op_int&lt;/code&gt;のようなファイル名とする&lt;/li&gt;
&lt;li&gt;型の別名が使用される場合もあるが、&lt;code&gt;operator int_type&lt;/code&gt;型変換演算子の場合は、&lt;code&gt;op_int_type&lt;/code&gt;をファイル名とする&lt;/li&gt;
&lt;li&gt;規格で&lt;code&gt;operator unsigned&lt;/code&gt;を使用しているところは、&lt;code&gt;operator unsigned int&lt;/code&gt;とし、&lt;code&gt;op_unsigned_int&lt;/code&gt;をファイル名とする。&lt;code&gt;unsigned&lt;/code&gt;は&lt;code&gt;unsigned int&lt;/code&gt;の短縮だが、この短縮法は認知度が低いため&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リテラル演算子&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator &#34;&#34;i&lt;/code&gt;のような&lt;code&gt;i&lt;/code&gt;サフィックスのリテラル演算子は、&lt;code&gt;op_i&lt;/code&gt;のようなファイル名とする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;同名のメンバ関数と非メンバ関数がある場合&lt;/h2&gt;
&lt;p&gt;非メンバ関数側のページファイル名末尾に&lt;code&gt;_free&lt;/code&gt;を付ける。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;free&lt;/code&gt;は「非メンバ関数 (non member function)」の通称である「フリー関数 (free function)」からきている。これを採用した理由は以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_non_member_function&lt;/code&gt;は長いため、短くしたい&lt;/li&gt;
&lt;li&gt;&lt;code&gt;member&lt;/code&gt;は男性器を意味するため、&lt;code&gt;function&lt;/code&gt;は省略できない&lt;/li&gt;
&lt;li&gt;規格用語にはないが、ページファイル名を短くするために便宜上&lt;code&gt;free&lt;/code&gt;を採用する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他、例外的なページファイル名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_.html&#34;&gt;std::_Exit()&lt;/a&gt;&lt;/code&gt;は、ページファイル名を先頭アンダースコアしたところ、Chromeブラウザで404 Page Not Foundとなったため、回避策として末尾にアンダースコアを付けている&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/all.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/all.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/all.md b/reference/bitset/bitset/all.md
index d56dc5447..b1bc7202e 100644
--- a/reference/bitset/bitset/all.md
+++ b/reference/bitset/bitset/all.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-bool all() const noexcept;
+bool all() const noexcept;           // (1) C++11
+constexpr bool all() const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -63,4 +64,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>any -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/any.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/any.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/any.md b/reference/bitset/bitset/any.md
index a0115f0e9..f3a58acf2 100644
--- a/reference/bitset/bitset/any.md
+++ b/reference/bitset/bitset/any.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bool any() const;          // C++03
-bool any() const noexcept; // C++11
+bool any() const;                    // (1) C++03
+bool any() const noexcept;           // (1) C++11
+constexpr bool any() const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -49,5 +50,6 @@ int main()
 ```
 ```
 
-## 参照
 
+## 参照
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/count.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/count.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/count.md b/reference/bitset/bitset/count.md
index e4a625c47..2a4e8ff6a 100644
--- a/reference/bitset/bitset/count.md
+++ b/reference/bitset/bitset/count.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_t count() const;          // C++03
-size_t count() const noexcept; // C++11
+size_t count() const;                    // (1) C++03
+size_t count() const noexcept;           // (1) C++11
+constexpr size_t count() const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -71,3 +72,7 @@ int main()
 
 ## 関連項目
 - [`std::popcount()`](/reference/bit/popcount.md)
+
+
+## 参照
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flip -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/flip.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/flip.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/flip.md b/reference/bitset/bitset/flip.md
index 9f594d31d..a340f74e7 100644
--- a/reference/bitset/bitset/flip.md
+++ b/reference/bitset/bitset/flip.md
@@ -5,10 +5,12 @@
 * function[meta id-type]
 
 ```cpp
-bitset&amp;lt;N&amp;gt;&amp;amp; flip();           // (1) C++03
-bitset&amp;lt;N&amp;gt;&amp;amp; flip() noexcept;  // (1) C++11
+bitset&amp;lt;N&amp;gt;&amp;amp; flip();                     // (1) C++03
+bitset&amp;lt;N&amp;gt;&amp;amp; flip() noexcept;            // (1) C++11
+constexpr bitset&amp;lt;N&amp;gt;&amp;amp; flip() noexcept;  // (1) C++23
 
-bitset&amp;lt;N&amp;gt;&amp;amp; flip(size_t pos); // (2)
+bitset&amp;lt;N&amp;gt;&amp;amp; flip(size_t pos);           // (2) C++03
+constexpr bitset&amp;lt;N&amp;gt;&amp;amp; flip(size_t pos); // (2) C++23
 ```
 
 ## 概要
@@ -64,4 +66,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>none -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/none.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/none.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/none.md b/reference/bitset/bitset/none.md
index 0c493f753..8c2dce68d 100644
--- a/reference/bitset/bitset/none.md
+++ b/reference/bitset/bitset/none.md
@@ -5,7 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bool none() const noexcept;
+bool none() const;                    // (1) C++03
+bool none() const noexcept;           // (1) C++11
+constexpr bool none() const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -48,5 +50,6 @@ int main()
 ```
 ```
 
-## 参照
 
+## 参照
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&amp; -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_and.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_and.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_and.md b/reference/bitset/bitset/op_and.md
index 9b8920b51..23b9fedff 100644
--- a/reference/bitset/bitset/op_and.md
+++ b/reference/bitset/bitset/op_and.md
@@ -6,10 +6,13 @@
 ```cpp
 namespace std {
   template &amp;lt;size_t N&amp;gt;
-  bitset&amp;lt;N&amp;gt; operator&amp;amp;(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);          // C++03
+  bitset&amp;lt;N&amp;gt; operator&amp;amp;(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);          // (1) C++03
 
   template &amp;lt;size_t N&amp;gt;
-  bitset&amp;lt;N&amp;gt; operator&amp;amp;(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // C++11
+  bitset&amp;lt;N&amp;gt; operator&amp;amp;(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // (1) C++11
+
+  template &amp;lt;size_t N&amp;gt;
+  constexpr bitset&amp;lt;N&amp;gt; operator&amp;amp;(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // (1) C++23
 }
 ```
 
@@ -54,4 +57,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&amp;= -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_and_assign.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_and_assign.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_and_assign.md b/reference/bitset/bitset/op_and_assign.md
index 7c31f9293..a1671426b 100644
--- a/reference/bitset/bitset/op_and_assign.md
+++ b/reference/bitset/bitset/op_and_assign.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;amp;=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);          // C++03
-bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;amp;=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // C++11
+bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;amp;=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);          // (1) C++03
+bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;amp;=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // (1) C++11
+constexpr bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;amp;=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -48,4 +49,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_at.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_at.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_at.md b/reference/bitset/bitset/op_at.md
index c1aac0187..e5ee01c9d 100644
--- a/reference/bitset/bitset/op_at.md
+++ b/reference/bitset/bitset/op_at.md
@@ -9,7 +9,8 @@ bool operator[](size_t pos) const;           // (1) C++03
 constexpr bool operator[](size_t pos);       // (1) C++11
 constexpr bool operator[](size_t pos) const; // (1) C++14
 
-reference operator[](size_t pos);            // (2)
+reference operator[](size_t pos);            // (2) C++03
+constexpr reference operator[](size_t pos);  // (2) C++23
 ```
 * reference[link reference.md]
 
@@ -58,4 +59,4 @@ false
 
 ## 参照
 - [N3669 Fixing constexpr member functions without const](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3669.pdf)
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_constructor.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_constructor.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_constructor.md b/reference/bitset/bitset/op_constructor.md
index a21dae1a6..1b898c9a8 100644
--- a/reference/bitset/bitset/op_constructor.md
+++ b/reference/bitset/bitset/op_constructor.md
@@ -26,11 +26,25 @@ explicit bitset(
     basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::npos,
   CharT zero = CharT(&amp;#39;0&amp;#39;), CharT one = CharT(&amp;#39;1&amp;#39;)); // (3) C++11
 
+template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+constexpr explicit bitset(
+  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; str,
+  typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type pos = 0,
+  typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type n =
+    basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::npos,
+  CharT zero = CharT(&amp;#39;0&amp;#39;), CharT one = CharT(&amp;#39;1&amp;#39;)); // (3) C++23
+
 template &amp;lt;class CharT&amp;gt;
 explicit bitset(
   const CharT* str,
   typename basic_string&amp;lt;CharT&amp;gt;::size_type n = basic_string&amp;lt;CharT&amp;gt;::npos,
   CharT zero = CharT(&amp;#39;0&amp;#39;), CharT one = CharT(&amp;#39;1&amp;#39;)); // (4) C++11
+
+template &amp;lt;class CharT&amp;gt;
+constexpr explicit bitset(
+  const CharT* str,
+  typename basic_string&amp;lt;CharT&amp;gt;::size_type n = basic_string&amp;lt;CharT&amp;gt;::npos,
+  CharT zero = CharT(&amp;#39;0&amp;#39;), CharT one = CharT(&amp;#39;1&amp;#39;)); // (4) C++23
 ```
 * basic_string[link /reference/string/basic_string.md]
 
@@ -122,4 +136,4 @@ int main()
 ## 参照
 - [LWG Issue 778. `std::bitset` does not have any constructor taking a string literal](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#778)
     - (4)のコンストラクタが追加された経緯となるレポート
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_equal.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_equal.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_equal.md b/reference/bitset/bitset/op_equal.md
index 90f60064f..d8574f78d 100644
--- a/reference/bitset/bitset/op_equal.md
+++ b/reference/bitset/bitset/op_equal.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bool operator==(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) const;          // C++03
-bool operator==(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) const noexcept; // C++11
+bool operator==(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) const;          // (1) C++03
+bool operator==(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) const noexcept; // (1) C++11
+constexpr bool operator==(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -47,4 +48,4 @@ equal
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator~ -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_flip.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_flip.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_flip.md b/reference/bitset/bitset/op_flip.md
index 4ae7cd843..2ef56cb23 100644
--- a/reference/bitset/bitset/op_flip.md
+++ b/reference/bitset/bitset/op_flip.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bitset&amp;lt;N&amp;gt; operator~() const;          // C++03
-bitset&amp;lt;N&amp;gt; operator~() const noexcept; // C++11
+bitset&amp;lt;N&amp;gt; operator~() const;          // (1) C++03
+bitset&amp;lt;N&amp;gt; operator~() const noexcept; // (1) C++11
+constexpr bitset&amp;lt;N&amp;gt; operator~() const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -49,4 +50,5 @@ int main()
 
 
 ## 参照
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_left_shift.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_left_shift.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_left_shift.md b/reference/bitset/bitset/op_left_shift.md
index 87fb4cf10..517b45125 100644
--- a/reference/bitset/bitset/op_left_shift.md
+++ b/reference/bitset/bitset/op_left_shift.md
@@ -5,7 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bitset&amp;lt;N&amp;gt; operator&amp;lt;&amp;lt;(size_t pos) const noexcept;
+bitset&amp;lt;N&amp;gt; operator&amp;lt;&amp;lt;(size_t pos) const;                    // (1) C++03
+bitset&amp;lt;N&amp;gt; operator&amp;lt;&amp;lt;(size_t pos) const noexcept;           // (1) C++11
+constexpr bitset&amp;lt;N&amp;gt; operator&amp;lt;&amp;lt;(size_t pos) const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -48,4 +50,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt;= -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_left_shift_assign.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_left_shift_assign.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_left_shift_assign.md b/reference/bitset/bitset/op_left_shift_assign.md
index f9e445904..056dc43bc 100644
--- a/reference/bitset/bitset/op_left_shift_assign.md
+++ b/reference/bitset/bitset/op_left_shift_assign.md
@@ -5,7 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;=(size_t pos) noexcept;
+bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;=(size_t pos);                    // (1) C++03
+bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;=(size_t pos) noexcept;           // (1) C++11
+constexpr bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;lt;&amp;lt;=(size_t pos) noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -46,4 +48,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_not_equal.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_not_equal.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_not_equal.md b/reference/bitset/bitset/op_not_equal.md
index 4506c6580..c2b8e152f 100644
--- a/reference/bitset/bitset/op_not_equal.md
+++ b/reference/bitset/bitset/op_not_equal.md
@@ -7,7 +7,8 @@
 ```cpp
 // operator==により、以下のオーバーロードが使用可能になる (C++20)
 bool operator!=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) const;          // (1) C++03
-bool operator!=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) const noexcept; // (2) C++11
+bool operator!=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) const noexcept; // (1) C++11
+constexpr bool operator!=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -54,3 +55,4 @@ not equal
 ## 参照
 - [P1614R2 The Mothership has Landed](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html)
     - C++20での三方比較演算子の追加と、関連する演算子の自動導出
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator| -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_or.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_or.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_or.md b/reference/bitset/bitset/op_or.md
index eabd61bf4..9bb3cc2e7 100644
--- a/reference/bitset/bitset/op_or.md
+++ b/reference/bitset/bitset/op_or.md
@@ -6,10 +6,13 @@
 ```cpp
 namespace std {
   template &amp;lt;size_t N&amp;gt;
-  bitset&amp;lt;N&amp;gt; operator|(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);          // C++03
+  bitset&amp;lt;N&amp;gt; operator|(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);          // (1) C++03
 
   template &amp;lt;size_t N&amp;gt;
-  bitset&amp;lt;N&amp;gt; operator|(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // C++11
+  bitset&amp;lt;N&amp;gt; operator|(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // (1) C++11
+
+  template &amp;lt;size_t N&amp;gt;
+  constexpr bitset&amp;lt;N&amp;gt; operator|(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // (1) C++23
 }
 ```
 
@@ -54,4 +57,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator|= -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_or_assign.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_or_assign.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_or_assign.md b/reference/bitset/bitset/op_or_assign.md
index c062ae51b..2dcd663e0 100644
--- a/reference/bitset/bitset/op_or_assign.md
+++ b/reference/bitset/bitset/op_or_assign.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bitset&amp;lt;N&amp;gt;&amp;amp; operator|=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);          // C++03
-bitset&amp;lt;N&amp;gt;&amp;amp; operator|=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // C++11
+bitset&amp;lt;N&amp;gt;&amp;amp; operator|=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);                    // (1) C++03
+bitset&amp;lt;N&amp;gt;&amp;amp; operator|=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept;           // (1) C++11
+constexpr bitset&amp;lt;N&amp;gt;&amp;amp; operator|=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -48,4 +49,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt; -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_right_shift.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_right_shift.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_right_shift.md b/reference/bitset/bitset/op_right_shift.md
index a0f013b88..b3aa2263e 100644
--- a/reference/bitset/bitset/op_right_shift.md
+++ b/reference/bitset/bitset/op_right_shift.md
@@ -5,7 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bitset&amp;lt;N&amp;gt; operator&amp;gt;&amp;gt;(size_t pos) const noexcept;
+bitset&amp;lt;N&amp;gt; operator&amp;gt;&amp;gt;(size_t pos) const;                    // (1) C++03
+bitset&amp;lt;N&amp;gt; operator&amp;gt;&amp;gt;(size_t pos) const noexcept;           // (1) C++11
+constexpr bitset&amp;lt;N&amp;gt; operator&amp;gt;&amp;gt;(size_t pos) const noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -48,4 +50,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt;= -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_right_shift_assign.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_right_shift_assign.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_right_shift_assign.md b/reference/bitset/bitset/op_right_shift_assign.md
index 0c3539bfe..cb4721896 100644
--- a/reference/bitset/bitset/op_right_shift_assign.md
+++ b/reference/bitset/bitset/op_right_shift_assign.md
@@ -5,7 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;=(size_t pos) noexcept;
+bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;=(size_t pos);                    // (1) C++03
+bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;=(size_t pos) noexcept;           // (1) C++11
+constexpr bitset&amp;lt;N&amp;gt;&amp;amp; operator&amp;gt;&amp;gt;=(size_t pos) noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -46,4 +48,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator^ -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_xor.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_xor.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_xor.md b/reference/bitset/bitset/op_xor.md
index 3fcfd962d..36f622fe1 100644
--- a/reference/bitset/bitset/op_xor.md
+++ b/reference/bitset/bitset/op_xor.md
@@ -6,10 +6,13 @@
 ```cpp
 namespace std {
   template &amp;lt;size_t N&amp;gt;
-  bitset&amp;lt;N&amp;gt; operator^(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);          // C++03
+  bitset&amp;lt;N&amp;gt; operator^(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);          // (1) C++03
 
   template &amp;lt;size_t N&amp;gt;
-  bitset&amp;lt;N&amp;gt; operator^(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // C++11
+  bitset&amp;lt;N&amp;gt; operator^(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // (1) C++11
+
+  template &amp;lt;size_t N&amp;gt;
+  constexpr bitset&amp;lt;N&amp;gt; operator^(const bitset&amp;lt;N&amp;gt;&amp;amp; lhs, const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // (1) C++23
 }
 ```
 
@@ -54,4 +57,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator^= -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_xor_assign.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/op_xor_assign.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_xor_assign.md b/reference/bitset/bitset/op_xor_assign.md
index 26a82351e..b6091b5a7 100644
--- a/reference/bitset/bitset/op_xor_assign.md
+++ b/reference/bitset/bitset/op_xor_assign.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bitset&amp;lt;N&amp;gt;&amp;amp; operator^=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);          // C++03
-bitset&amp;lt;N&amp;gt;&amp;amp; operator^=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // C++11
+bitset&amp;lt;N&amp;gt;&amp;amp; operator^=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs);                    // (1) C++03
+bitset&amp;lt;N&amp;gt;&amp;amp; operator^=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept;           // (1) C++11
+constexpr bitset&amp;lt;N&amp;gt;&amp;amp; operator^=(const bitset&amp;lt;N&amp;gt;&amp;amp; rhs) noexcept; // (1) C++23
 ```
 
 ## 概要
@@ -48,4 +49,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reference -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/reference.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/reference.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/reference.md b/reference/bitset/bitset/reference.md
index f4f5f2e2a..76add68b8 100644
--- a/reference/bitset/bitset/reference.md
+++ b/reference/bitset/bitset/reference.md
@@ -11,22 +11,24 @@ namespace std {
   public:
     class reference {
       friend class bitset;
-      reference() noexcept;
+      CONSTEXPR reference() noexcept;
     public:
-      ~reference() noexcept;
-      reference&amp;amp; operator=(bool x) noexcept;
-      reference&amp;amp; operator=(const reference&amp;amp;) noexcept;
-      bool operator~() const noexcept;
-      operator bool() const noexcept;
-      reference&amp;amp; flip() noexcept;
+      CONSTEXPR ~reference() noexcept;
+      CONSTEXPR reference&amp;amp; operator=(bool x) noexcept;
+      CONSTEXPR reference&amp;amp; operator=(const reference&amp;amp;) noexcept;
+      CONSTEXPR bool operator~() const noexcept;
+      CONSTEXPR operator bool() const noexcept;
+      CONSTEXPR reference&amp;amp; flip() noexcept;
     };
   };
-}
 ```
+* CONSTEXPR[italic]
 
 ## 概要
 `bitset::reference`は、`bitset`の各ビットにアクセスするためのプロキシクラスである。`bitset::`[`operator[]`](op_at.md)で返されるビット情報を取得、書き換えるためにある。
 
+C++23から`bitset::reference`全メンバ関数への`constexpr`指定が行われる。
+
 
 ### メンバ関数
 
@@ -69,5 +71,6 @@ int main()
 ```
 ```
 
-### 参照
 
+## 参照
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/reset.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/reset.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/reset.md b/reference/bitset/bitset/reset.md
index 91436468a..66e5de4a6 100644
--- a/reference/bitset/bitset/reset.md
+++ b/reference/bitset/bitset/reset.md
@@ -5,10 +5,12 @@
 * function[meta id-type]
 
 ```cpp
-bitset&amp;lt;N&amp;gt;&amp;amp; reset();           // (1) C++03
-bitset&amp;lt;N&amp;gt;&amp;amp; reset() noexcept;  // (1) C++11
+bitset&amp;lt;N&amp;gt;&amp;amp; reset();                     // (1) C++03
+bitset&amp;lt;N&amp;gt;&amp;amp; reset() noexcept;            // (1) C++11
+constexpr bitset&amp;lt;N&amp;gt;&amp;amp; reset() noexcept;  // (1) C++23
 
-bitset&amp;lt;N&amp;gt;&amp;amp; reset(size_t pos); // (2)
+bitset&amp;lt;N&amp;gt;&amp;amp; reset(size_t pos);           // (2) C++03
+constexpr bitset&amp;lt;N&amp;gt;&amp;amp; reset(size_t pos); // (2) C++23
 ```
 
 ## 概要
@@ -64,4 +66,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/set.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/set.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/set.md b/reference/bitset/bitset/set.md
index eff41c637..9b41a8dbc 100644
--- a/reference/bitset/bitset/set.md
+++ b/reference/bitset/bitset/set.md
@@ -5,10 +5,12 @@
 * function[meta id-type]
 
 ```cpp
-bitset&amp;lt;N&amp;gt;&amp;amp; set();                            // (1) C++03
-bitset&amp;lt;N&amp;gt;&amp;amp; set() noexcept;                   // (1) C++11
+bitset&amp;lt;N&amp;gt;&amp;amp; set();                    // (1) C++03
+bitset&amp;lt;N&amp;gt;&amp;amp; set() noexcept;           // (1) C++11
+constexpr bitset&amp;lt;N&amp;gt;&amp;amp; set() noexcept; // (1) C++23
 
-bitset&amp;lt;N&amp;gt;&amp;amp; set(size_t pos, bool val = true); // (2)
+bitset&amp;lt;N&amp;gt;&amp;amp; set(size_t pos, bool val = true);           // (2) C++03
+constexpr bitset&amp;lt;N&amp;gt;&amp;amp; set(size_t pos, bool val = true); // (2) C++23
 ```
 
 ## 概要
@@ -64,4 +66,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/size.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/size.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/size.md b/reference/bitset/bitset/size.md
index 262599b0d..b3c58ac78 100644
--- a/reference/bitset/bitset/size.md
+++ b/reference/bitset/bitset/size.md
@@ -5,9 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_t size() const;                    // C++03
-constexpr size_t size() noexcept;       // C++11
-constexpr size_t size() const noexcept; // C++14
+size_t size() const;                    // (1) C++03
+constexpr size_t size() noexcept;       // (1) C++11
+constexpr size_t size() const noexcept; // (1) C++14
 ```
 
 ## 概要
@@ -39,4 +39,3 @@ int main()
 
 ## 参照
 - [N3669 Fixing constexpr member functions without const](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3669.pdf)
-
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>test -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/test.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/test.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/test.md b/reference/bitset/bitset/test.md
index 7de20bcb4..544fe980f 100644
--- a/reference/bitset/bitset/test.md
+++ b/reference/bitset/bitset/test.md
@@ -5,7 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-bool test(size_t pos) const;
+bool test(size_t pos) const;           // (1) C++03
+constexpr bool test(size_t pos) const; // (1) C++23
 ```
 
 ## 概要
@@ -45,5 +46,6 @@ int main()
 ```
 ```
 
-## 参照
 
+## 参照
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_string -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/to_string.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/to_string.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/to_string.md b/reference/bitset/bitset/to_string.md
index 83590fe67..a83a4103a 100644
--- a/reference/bitset/bitset/to_string.md
+++ b/reference/bitset/bitset/to_string.md
@@ -5,16 +5,20 @@
 * function template[meta id-type]
 
 ```cpp
-// C++03
 template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; to_string() const;
+basic_string&amp;lt;CharT, Traits, Allocator&amp;gt; to_string() const;           // (1) C++03
 
-// C++11
 template &amp;lt;class CharT = char,
           class Traits = char_traits&amp;lt;CharT&amp;gt;,
           class Allocator = allocator&amp;lt;CharT&amp;gt;&amp;gt;
 basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;
-  to_string(CharT zero = CharT(&amp;#39;0&amp;#39;), CharT one = CharT(&amp;#39;1&amp;#39;)) const;
+  to_string(CharT zero = CharT(&amp;#39;0&amp;#39;), CharT one = CharT(&amp;#39;1&amp;#39;)) const; // (1) C++11
+
+template &amp;lt;class CharT = char,
+          class Traits = char_traits&amp;lt;CharT&amp;gt;,
+          class Allocator = allocator&amp;lt;CharT&amp;gt;&amp;gt;
+constexpr basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;
+  to_string(CharT zero = CharT(&amp;#39;0&amp;#39;), CharT one = CharT(&amp;#39;1&amp;#39;)) const; // (1) C++23
 ```
 * basic_string[link /reference/string/basic_string.md]
 
@@ -65,4 +69,4 @@ int main()
     - C++11で、`0`を表す文字と`1`を表す文字を指定できるようになった経緯のレポート
 - [LWG Issue 1113. `bitset::to_string` could be simplified](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1113)
     - C++11で、デフォルトの文字型が設定された経緯のレポート
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_ullong -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/to_ullong.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/to_ullong.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/to_ullong.md b/reference/bitset/bitset/to_ullong.md
index f99fff73f..5b03cf19b 100644
--- a/reference/bitset/bitset/to_ullong.md
+++ b/reference/bitset/bitset/to_ullong.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-unsigned long long to_ullong() const;
+unsigned long long to_ullong() const;           // (1) C++11
+constexpr unsigned long long to_ullong() const; // (1) C++23
 ```
 
 ## 概要
@@ -52,4 +53,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_ulong -- bitset: P2417R2 constexpr化(#1091)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/to_ulong.html"/>
      <id>53c9bf6cffc98cc92fb84cff4f378285cd8bd320:reference/bitset/bitset/to_ulong.md</id>
      <updated>2023-01-16T17:49:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/to_ulong.md b/reference/bitset/bitset/to_ulong.md
index c6c90b009..2b0d44b62 100644
--- a/reference/bitset/bitset/to_ulong.md
+++ b/reference/bitset/bitset/to_ulong.md
@@ -5,7 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-unsigned long to_ulong() const;
+unsigned long to_ulong() const;           // (1) C++03
+constexpr unsigned long to_ulong() const; // (1) C++23
 ```
 
 ## 概要
@@ -41,4 +42,4 @@ int main()
 
 
 ## 参照
-
+- [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_string/substr: P2438R2対応(#1092)</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>58fba8bb7d3df10b7d1e4052109ae27c22a472ed:reference/string/basic_string/op_constructor.md</id>
      <updated>2023-01-16T16:44:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_constructor.md b/reference/string/basic_string/op_constructor.md
index b64ae154e..a4d4337da 100644
--- a/reference/string/basic_string/op_constructor.md
+++ b/reference/string/basic_string/op_constructor.md
@@ -5,6 +5,7 @@
 * function[meta id-type]
 
 ```cpp
+// デフォルトコンストラクタ
 basic_string();                                                 // (1) C++14
 basic_string() noexcept(noexcept(Allocator()))                  // (1) C++17
   : basic_string(Allocator()) {}
@@ -17,12 +18,15 @@ constexpr explicit basic_string(const Allocator&amp;amp; a) noexcept;   // (2) C++20
 
 explicit basic_string(const Allocator&amp;amp; a = Allocator());        // (1) + (2) C++03
 
+// コピーコンストラクタ
 basic_string(const basic_string&amp;amp; str);                          // (3) C++03
 constexpr basic_string(const basic_string&amp;amp; str);                // (3) C++20
 
+// ムーブコンストラクタ
 basic_string(basic_string&amp;amp;&amp;amp; str) noexcept;                      // (4) C++11
 constexpr basic_string(basic_string&amp;amp;&amp;amp; str) noexcept;            // (4) C++20
 
+// basic_stringの指定範囲から構築するコンストラクタ
 basic_string(const basic_string&amp;amp; str,
              size_type pos,
              size_type n = npos,
@@ -43,6 +47,16 @@ constexpr basic_string(const basic_string&amp;amp; str,
                        size_type pos,
                        const Allocator&amp;amp; a = Allocator());       // (6) C++20
 
+constexpr basic_string(basic_string&amp;amp;&amp;amp; str,
+                       size_type pos,
+                       const Allocator&amp;amp; a = Allocator());       // (17) C++23
+
+constexpr basic_string(basic_string&amp;amp;&amp;amp; str,
+                       size_type pos,
+                       size_type n,
+                       const Allocator&amp;amp; a = Allocator());       // (18) C++23
+
+// 文字列ポインタから構築するコンストラクタ
 basic_string(const charT* s,
              size_type n,
              const Allocator&amp;amp; a = Allocator());                 // (7) C++03
@@ -55,6 +69,9 @@ basic_string(const charT* s,
 constexpr basic_string(const charT* s,
                        const Allocator&amp;amp; a = Allocator());       // (8) C++20
 
+basic_string(nullptr_t) = delete;                               // (16) C++23
+
+// 文字個数から構築するコンストラクタ
 basic_string(size_type n,
              charT c,
              const Allocator&amp;amp; a = Allocator());                 // (9) C++03
@@ -62,6 +79,7 @@ constexpr basic_string(size_type n,
                        charT c,
                        const Allocator&amp;amp; a = Allocator());       // (9) C++20
 
+// イテレータ範囲から構築するコンストラクタ
 template &amp;lt;class InputIterator&amp;gt;
 basic_string(InputIterator begin, InputIterator end,
              const Allocator&amp;amp; a = Allocator());                 // (10) C++03
@@ -69,11 +87,13 @@ template &amp;lt;class InputIterator&amp;gt;
 constexpr basic_string(InputIterator begin, InputIterator end,
                        const Allocator&amp;amp; a = Allocator());       // (10) C++20
 
+// 初期化子リストから構築するコンストラクタ
 basic_string(initializer_list&amp;lt;charT&amp;gt; init,
              const Allocator&amp;amp; = Allocator());                   // (11) C++11
 constexpr basic_string(initializer_list&amp;lt;charT&amp;gt; init,
                        const Allocator&amp;amp; = Allocator());         // (11) C++20
 
+// アロケータ指定コピー／ムーブコンストラクタ
 basic_string(const basic_string&amp;amp; str, const Allocator&amp;amp;);           // (12) C++11
 constexpr basic_string(const basic_string&amp;amp; str, const Allocator&amp;amp;); // (12) C++20
 
@@ -98,8 +118,6 @@ constexpr basic_string(const T&amp;amp; t,
                        size_type pos,
                        size_type n,
                        const Allocator&amp;amp; a = Allocator());        // (15) C++20
-
-basic_string(nullptr_t) = delete; // (16) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -119,6 +137,9 @@ basic_string(nullptr_t) = delete; // (16) C++23
 - (13) : アロケータを受け取るムーブコンストラクタ。
 - (14) : [`std::basic_string_view`](/reference/string_view/basic_string_view.md)オブジェクトからの変換コンストラクタ。[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`が参照する範囲の文字列を`*this`にコピーする。
 - (15) : [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`が参照する範囲の文字列の`pos`番目から`n`文字の部分文字列がコピーされる。`n == npos`の場合、`pos`番目から末尾までの部分文字列がコピーされる。
+- (17) : `str`オブジェクトの部分文字列のコピーから`basic_string`オブジェクトを構築する。`str`オブジェクトの`pos`番目から`n`文字の部分文字列がコピーされる。`n == npos`の場合、`pos`番目から末尾までの部分文字列がコピーされる。`str`は未規定の値になる。
+- (18) : `str`オブジェクトの部分文字列のコピーから`basic_string`オブジェクトを構築する。`str`オブジェクトの`pos`番目から末尾までの部分文字列がコピーされる。`str`は未規定の値になる。
+
 
 ## テンプレートパラメータ制約
 
@@ -138,7 +159,7 @@ basic_string(nullptr_t) = delete; // (16) C++23
 
 
 ## 例外
-- (5), (6) : `pos &amp;gt; str.`[`size()`](size.md)の場合、[`out_of_range`](/reference/stdexcept.md)例外を送出する。
+- (5), (6), (17), (18) : `pos &amp;gt; str.`[`size()`](size.md)の場合、[`out_of_range`](/reference/stdexcept.md)例外を送出する。
 - (13) : `alloc == str.`[`get_allocator()`](get_allocator.md)の場合、例外を投げない。
 
 
@@ -237,6 +258,8 @@ s14 : Hello
     - `string_view`から範囲を指定して構築する(15)を追加
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(14)の引数型を`const T&amp;amp;`に変更
-- [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
-    - C++23での、`nullptr_t`をとるコンストラクタのdelete宣言追加
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
+    - C++23での(16)`nullptr_t`をとるコンストラクタのdelete宣言追加
+- [P2438R2 `std::string::substr() &amp;amp;&amp;amp;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2438r2.html)
+    - C++23での(17),(18)`basic_string&amp;amp;&amp;amp;`と範囲指定をとるコンストラクタ追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>substr -- basic_string/substr: P2438R2対応(#1092)</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/substr.html"/>
      <id>58fba8bb7d3df10b7d1e4052109ae27c22a472ed:reference/string/basic_string/substr.md</id>
      <updated>2023-01-16T16:44:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/substr.md b/reference/string/basic_string/substr.md
index 0e0d9c152..3585e7332 100644
--- a/reference/string/basic_string/substr.md
+++ b/reference/string/basic_string/substr.md
@@ -11,18 +11,26 @@ basic_string
 constexpr basic_string
   substr(size_type pos = 0,
          size_type n = npos) const; // (1) C++20
+constexpr basic_string
+  substr(size_type pos = 0,
+         size_type n = npos) const &amp;amp;; // (1) C++23
+
+constexpr basic_string
+  substr(size_type pos = 0,
+         size_type n = npos) &amp;amp;&amp;amp;; // (2) C++23
 ```
 
 ## 概要
-部分文字列を取得する。  
+部分文字列を取得する。
 `pos`番目から`n`要素の文字列を返す。
+引数省略時は、先頭位置（`0`番目）から全要素（`npos`）の文字列を返す。
 
 
 ## 要件
 `pos &amp;lt;=` [`size()`](size.md)
 
 
-## 戻り値
+## 戻り値(C++20まで)
 `n`と[`size()`](size.md) `- pos`のうち、小さい方をコピーする長さ`rlen`として、
 
 `basic_string(`[`data()`](data.md)`+pos, rlen)`
@@ -30,10 +38,20 @@ constexpr basic_string
 を返す。パラメータ`n`のデフォルト引数である`npos`の場合には、`pos`番目以降の全体を返す。
 
 
+## 効果(C++23から)
+- (1) 次と等価 : `return` [`basic_string`](op_constructor.md)`(*this, pos, n);`
+- (2) 次と等価 : `return` [`basic_string`](op_constructor.md)`(std::move(*this), pos, n);`
+
+
 ## 例外
 `pos &amp;gt;` [`size()`](size.md)の場合、[`out_of_range`](/reference/stdexcept.md)例外を送出する。
 
 
+## 備考
+C++23から(2)[右辺値修飾オーバーロード](/lang/cpp11/ref_qualifier_for_this)の追加にともない、従来からある(1)はconst左辺値参照オーバーロードに変更される。
+同時にメンバ関数`substr`のライブラリ仕様記述は、新たに追加された`basic_string`コンストラクタを用いて書き直されるものの、基本的な動作はC++20までと同一である。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -66,3 +84,5 @@ llo
 
 ## 参照
 - [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
+- [P2438R2 `std::string::substr() &amp;amp;&amp;amp;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2438r2.html)
+    - C++23での(2)右辺値修飾オーバーロード追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++23 -- C++23 : std::formatのRange、タプルの出力を例示 #1085</title>
      <link href="https://cpprefjp.github.io/lang/cpp23.html"/>
      <id>03178a714b1bb037194554a0ce91395cd3536e16:lang/cpp23.md</id>
      <updated>2023-01-16T16:48:48+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++23&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23とは、2023年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2bと呼ばれることがある。「(C++20である2020年の次の) 202b年にリリースされる」という伏せ字として「b」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/literal_suffix_for_signed_size_t.html&#34;&gt;(符号付き)&lt;code&gt;size_t&lt;/code&gt;リテラルのためのサフィックス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;42z&lt;/code&gt;/&lt;code&gt;42Z&lt;/code&gt;とすることで&lt;code&gt;size_t&lt;/code&gt;に対応する符号付き整数型のリテラルとする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/delimited_escape_sequences.md.nolink&#34;&gt;エスケープシーケンスの区切り&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エスケープシーケンスの範囲を明確にする構文を追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/simpler_implicit_move.md.nolink&#34;&gt;暗黙的なムーブを簡略化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;参照を返す関数の&lt;code&gt;return&lt;/code&gt;文で暗黙的にムーブされない問題を修正&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/extended_floating_point_types_and_standard_names.md.nolink&#34;&gt;浮動小数点数型の拡張&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実装による拡張浮動小数点型の定義を許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;関数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/declarations_and_where_to_find_them.md.nolink&#34;&gt;スコープと名前ルックアップの仕様整理&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複雑で不完全になっているスコープと名前ルックアップの仕様を整理し、一部の問題を解決する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;制御構文&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/extend_init_statement_to_allow_alias_declaration.md.nolink&#34;&gt;初期化文での型の別名宣言を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for (using T = int; T e : v) {}&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/labels_at_the_end_of_compound_statements.md.nolink&#34;&gt;関数末尾のラベルを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C互換のため、関数末尾でのgoto文のラベルを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;クラス&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/deducing_this.md.nolink&#34;&gt;自身のオブジェクトを明示的にパラメータとして指定する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバ関数が&lt;code&gt;*this&lt;/code&gt;の型・オブジェクトをパラメータとしてとり、&lt;code&gt;*this&lt;/code&gt;オブジェクトがconst/非const、左辺値/右辺値であるかをメンバ関数内で識別できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/make_declaration_order_layout_mandated.md.nolink&#34;&gt;アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アクセス制御の異なるメンバ変数のレイアウトが実装によって異なっていたため仕様を規定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/multidimensional_subscript_operator.nd.nolink&#34;&gt;添字演算子の多次元サポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator[](int x, int y, int z)&lt;/code&gt;のように添字演算子のオーバーロードで複数のパラメータをとることを許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/static_operator.md.nolink&#34;&gt;&lt;code&gt;this&lt;/code&gt;ポインタをもつ必要のない演算子を&lt;code&gt;static&lt;/code&gt;として宣言できるようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/mixed_string_literal_concatenation.md.nolink&#34;&gt;異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto a = u8&#34;&#34; L&#34;&#34;;&lt;/code&gt;のような異なる文字エンコーディング同士での文字列リテラルを連結を禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/numeric_and_universal_character_escapes_in_character_and_string_literals.md.nolink&#34;&gt;文字・文字列リテラル中の数値・ユニバーサルキャラクタのエスケープに関する問題解決&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/remove_non_encodable_wide_character_literals_and_multicharacter_wide_character_literals.md.nolink&#34;&gt;1ワイド文字に収まらないワイド文字リテラルを禁止する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エンコード結果として&lt;code&gt;wchar_t&lt;/code&gt;の大きさに収まらないワイド文字リテラルを禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/named_universal_character_escapes.md.nolink&#34;&gt;名前付きユニバーサルキャラクタ名&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;16進数のユニバーサルキャラクタだけでなく、その文字の名前を入力できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/generalized_wording_for_partial_specializations.md.nolink&#34;&gt;部分特殊化の汎用化仕様&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数テンプレートの部分特殊化を許可するために部分特殊化の仕様を汎用化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/class_template_argument_deduction_from_inherited.md.nolink&#34;&gt;継承コンストラクタからのクラステンプレート引数の推論&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/if_consteval.md.nolink&#34;&gt;if consteval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時の文脈かどうかで分岐させる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/narrowing_contextual_conversions_to_bool.md.nolink&#34;&gt;定数式の文脈での&lt;code&gt;bool&lt;/code&gt;への縮小変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(flags &amp;amp; Flags::Exec)&lt;/code&gt;や&lt;code&gt;static_assert(N);&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/non_literal_variables_in_constexpr_functions.md.nolink&#34;&gt;定数式内での非リテラル変数の使用を含められないようにする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;定数式内で静的変数・スレッドローカル変数およびgoto文とラベルを含められない制限を設ける&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/character_encoding_of_diagnostic_text.md.nolink&#34;&gt;静的な診断メッセージの文字エンコーディング&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などの診断メッセージの文字集合に関する要件をなくす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.md.nolink&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt;関数のすべての引数が定数実行できない場合でも適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ラムダ式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/down_with_lambda_parens.md.nolink&#34;&gt;ラムダ式で&lt;code&gt;()&lt;/code&gt;を省略できる条件を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャや修飾をともなってもパラメータリストが空であれば&lt;code&gt;()&lt;/code&gt;を省略できる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/attributes_on_lambda_expressions.md.nolink&#34;&gt;ラムダ式に対する属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ラムダ式のいくつかの箇所に属性を記述できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/portable_assumptions.md.nolink&#34;&gt;コード内容の仮定をコンパイラに伝えるassume属性&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最適化のために、コードの仮定をコンパイラに伝える属性を標準化する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;プリプロセッサ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/consistent_character_literal_encoding.md.nolink&#34;&gt;文字リテラルエンコーディングを一貫させる&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プリプロセッサの条件式での文字リテラルの扱いをC++式と同様にする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md.nolink&#34;&gt;&lt;code&gt;elif&lt;/code&gt;/&lt;code&gt;elifdef&lt;/code&gt;/&lt;code&gt;elifndef&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#if&lt;/code&gt;/&lt;code&gt;#ifdef&lt;/code&gt;/&lt;code&gt;#ifndef&lt;/code&gt;に対応する複数条件命令のサポートを追加する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/warning.md.nolink&#34;&gt;&lt;code&gt;#warning&lt;/code&gt;のサポートを追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;多くのC++コンパイラが実装していたプリプロセス時の警告&lt;code&gt;#warning message&lt;/code&gt;を正式サポート&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/support_for_utf8_as_a_portable_source_file_encoding.md.nolink&#34;&gt;汎用的なソースコードのエンコーディングとしてUTF-8をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html&#34;&gt;参照するPOSIX規格を更新&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;新しいPOSIX規格の機能を標準C++が参照していたため、参照するPOSIX規格のバージョンを更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.md.nolink&#34;&gt;行末スペースを無視するよう規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;行末が&lt;code&gt;\&lt;/code&gt;でおわっていた場合にMSVCは行の継続をしない実装になっていたため動作を共通化するため仕様を規定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++標準ライブラリ全体のモジュールとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/module/std.html&#34;&gt;std&lt;/a&gt;&lt;/code&gt;、C互換ライブラリ全体のモジュールとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/module/std.compat.html&#34;&gt;std.compat&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;スタックトレースを取得するためのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;CとC++の間でのアトミック操作の相互運用のため、C互換ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;外部から提供されるメモリバッファでストリーム処理を行うライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/spanstream.md.nolink&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;正常値とエラー値のどちらかを持つクラスおよびライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/expected.md.nolink&#34;&gt;&amp;lt;expected&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;多次元配列ビューのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan.md.nolink&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ノードベースではないソート済みキーによる順序付き連想コンテナのライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/flat_map.md.nolink&#34;&gt;&amp;lt;flat_map&amp;gt;&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/flat_set.md.nolink&#34;&gt;&amp;lt;flat_set&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;書式指定で出力するライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/print.md.nolink&#34;&gt;&amp;lt;print&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;コルーチンによるRangeの生成をサポートする&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/generator.html&#34;&gt;&amp;lt;generator&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stack/stack.html&#34;&gt;std::stack&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/queue/queue.html&#34;&gt;std::queue&lt;/a&gt;&lt;/code&gt;に、イテレータのペアをとるコンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto v = std::vector(v, alloc);&lt;/code&gt;のようなアロケータ引数をともなう場合のクラステンプレートのテンプレート引数推論が動作しなかったため、各コンテナクラスのコンストラクタにおけるアロケータパラメータの型を&lt;code&gt;const Allocator&amp;amp;&lt;/code&gt;から&lt;code&gt;const &lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/type_identity.html&#34;&gt;std::type_identity_t&lt;/a&gt;&amp;lt;Allocator&amp;gt;&amp;amp;&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;N要素のメモリアロケート時にアロケータが実際にどれくらいのメモリを確保したかを得られるインタフェースとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/allocate_at_least.md.nolink&#34;&gt;allocate_at_least()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の転送コンストラクタにデフォルトテンプレート引数を追加することで、&lt;code&gt;{}&lt;/code&gt;のような型推論ができない引数を渡した場合でも完全転送が行われるよう修正&lt;/li&gt;
&lt;li&gt;順序付き連想コンテナの要素削除の処理について、一時オブジェクトのコストを抑える拡張が行われた&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/erase.html&#34;&gt;std::map::erase()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/extract.html&#34;&gt;std::map::extract()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、複数の範囲を綴じ合わせる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/zip_view.md.nolink&#34;&gt;std::views::zip&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、複数の範囲の直積をとる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/cartesian_product_view.md.nolink&#34;&gt;std::views::cartesian_product&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeから任意のコンテナに変換するRangeアダプタ&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/to.md.nolink&#34;&gt;std::ranges::to()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeから任意のコンテナに変換するために、可変長のコンテナ (&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/array/array.html&#34;&gt;std::array&lt;/a&gt;&lt;/code&gt;以外) に、以下の機能を追加：&lt;ul&gt;
&lt;li&gt;Rangeから変換するコンストラクタ&lt;/li&gt;
&lt;li&gt;Rangeを挿入する&lt;code&gt;insert_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを先頭に追加する&lt;code&gt;prepend_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを末尾に追加する&lt;code&gt;append_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;li&gt;Rangeを代入する&lt;code&gt;assign_range()&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ユーザー定義のRangeアダプタがパイプライン演算子 &lt;code&gt;|&lt;/code&gt; をサポートしやすくするために、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_adaptor_closure.md.nolink&#34;&gt;std::range::range_adaptor_closure&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeを連結させる&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/join_with.md.nolink&#34;&gt;join_with&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeを指定の大きさで分割する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/chunk_view.md.nolink&#34;&gt;std::views::chunk&lt;/a&gt;&lt;/code&gt;と、Rangeを指定の大きさの隣接要素で分割する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/slide_view.md.nolink&#34;&gt;std::views::slide&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;Rangeを条件一致する間の要素で分割する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/chunk_by_view.md.nolink&#34;&gt;std::views::chunk_by&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeを等間隔からなるRangeに変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/stride_view.md.nolink&#34;&gt;std::views::stride&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、Rangeをムーブするための&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/as_rvalue.md.nolink&#34;&gt;std::views::as_rvalue&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;に、指定した値をN回繰り返すRangeを生成する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/repeat.md.nolink&#34;&gt;std::views::repeat&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲の先頭が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/starts_with.md.nolink&#34;&gt;std::starts_with()&lt;/a&gt;&lt;/code&gt;、範囲の末尾が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ends_with.md.nolink&#34;&gt;std::ends_with()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、要素を左シフトさせるRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_shift_left.html&#34;&gt;std::ranges::shift_left()&lt;/a&gt;&lt;/code&gt;、要素を右シフトさせるRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_shift_right.html&#34;&gt;std::ranges::shift_right()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲の末尾から要素を検索する以下のアルゴリズムを追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_find_last.md.nolink&#34;&gt;std::ranges::find_last()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/find_last_if.md.nolink&#34;&gt;std::ranges::find_last_if()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/find_last_if_not.md.nolink&#34;&gt;std::ranges::find_last_if_not()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲に特定の値が含まれているかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_contains.md.nolink&#34;&gt;std::ranges::contains()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_contains_subrange.md.nolink&#34;&gt;std::ranges::contains_subrange&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、数値に限定しない汎用的な畳み込みアルゴリズムとして、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_left.md.nolink&#34;&gt;std::ranges::fold_left()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_first.md.nolink&#34;&gt;std::ranges::fold_left_first()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_right.md.nolink&#34;&gt;std::ranges::fold_right()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_right_last.md.nolink&#34;&gt;std::ranges::fold_right_last()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_with_iter.md.nolink&#34;&gt;std::ranges::fold_left_with_iter()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_fold_left_first_with_iter.md.nolink&#34;&gt;std::ranges::fold_left_first_with_iter()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;に、連番を生成するRangeアルゴリズム&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/ranges_iota.html&#34;&gt;std::ranges::iota()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;クラスに、文字列内に指定した文字・文字列が含まれているかを判定するメンバ関数&lt;code&gt;contains()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;のコンストラクタに、範囲をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::string s = nullptr;&lt;/code&gt;のような文字列オブジェクトに&lt;code&gt;nullptr&lt;/code&gt;を代入するようなコードはバグの元であるため、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/nullptr_t.html&#34;&gt;nullptr_t&lt;/a&gt;&lt;/code&gt;をとるコンストラクタをdelete定義として追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスに、resize時に任意の初期化を行う&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/resize_and_overwrite.md.nolink&#34;&gt;resize_and_overwrite()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスのコンストラクタと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/substr.html&#34;&gt;substr()&lt;/a&gt;&lt;/code&gt;メンバ関数に一時オブジェクトのオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;関数でRange・コンテナ、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;を出力できるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/formatter.html&#34;&gt;std::formatter&lt;/a&gt;&lt;/code&gt;に特殊化を追加&lt;ul&gt;
&lt;li&gt;Range・シーケンスコンテナは&lt;code&gt;[1, 2, 3]&lt;/code&gt;、&lt;code&gt;[&#34;hello&#34;, &#34;world&#34;]&lt;/code&gt;、&lt;code&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;li&gt;連想コンテナの場合、&lt;code&gt;std::map&amp;lt;int, int&amp;gt;{{1, 2}, {3, 4}}&lt;/code&gt;は&lt;code&gt;{1: 2, 3: 4}&lt;/code&gt;のように出力され、&lt;code&gt;std::set&amp;lt;int&amp;gt;{1, 2, 3}&lt;/code&gt;は&lt;code&gt;{1, 2, 3}&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple/tuple.html&#34;&gt;std::tuple&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;は&lt;code&gt;(1, 2)&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;関数のフォーマット指定子としてデバッグ指定「&lt;code&gt;&#34;?&#34;&lt;/code&gt;」を追加。これは文字・文字列を引用符で囲み、エスケープシーケンスをエスケープする&lt;ul&gt;
&lt;li&gt;ただし、Range・コンテナ中の文字・文字列はデフォルトでエスケープされる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format(&#34;{:?}&#34;, &#34;h\tello&#34;)&lt;/code&gt;は&lt;code&gt;&#34;h\tello&#34;&lt;/code&gt;のように出力される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream.html&#34;&gt;operator&amp;lt;&amp;lt;&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;const volatile void*&lt;/code&gt;をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;ファイルを開く際のオプションとして、排他モードを表す&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ios/ios_base/type-openmode.html&#34;&gt;noreplace&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;の戻り値型を指定するバージョンである&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/onvoke_r.md.nolink&#34;&gt;std::invoke_r()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;ムーブのみ可能な&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;クラスと等価な機能をもつ&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/move_only_function.md.nolink&#34;&gt;std::move_only_function&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;ユーザー定義のRangeアダプタがパイプライン演算子 &lt;code&gt;|&lt;/code&gt; をサポートしやすくするために、末尾から引数を束縛する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_back.md.nolink&#34;&gt;std::bind_back()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、出力ポインタと入出力ポインタの抽象である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/out_ptr.md.nolink&#34;&gt;std::out_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/inout_ptr.md.nolink&#34;&gt;std::inout_ptr&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/unique_ptr.html&#34;&gt;std::unique_ptr&lt;/a&gt;&lt;/code&gt;クラスを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、オブジェクトの生存期間を開始することを明示する関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/start_lifetime_as.md.nolink&#34;&gt;std::start_lifetime_as()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/start_lifetime_as_array.md.nolink&#34;&gt;std::start_lifetime_as_array()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit.html&#34;&gt;&amp;lt;bit&amp;gt;&lt;/a&gt;&lt;/code&gt;に、値のバイト入れ替え (エンディアン変換) を行う&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bit/byteswap.html&#34;&gt;std::byteswap()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/visit.html&#34;&gt;std::visit()&lt;/a&gt;&lt;/code&gt;に指定できるバリアントオブジェクトを、直接的な「&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;型の特殊化であること」という制約を緩和し、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;から派生した型も許可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、列挙値を基底型に変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/to_underlying.html&#34;&gt;std::to_underlying()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、 (主に) メンバ変数を転送するため、指定された型の&lt;code&gt;const&lt;/code&gt;性と参照修飾で引数を転送する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/forward_like.html&#34;&gt;std::forward_like()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional/optional.html&#34;&gt;std::optional&lt;/a&gt;&lt;/code&gt;クラスにモナド操作としてメンバ関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional/optional/and_then.md.nolink&#34;&gt;and_then()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional/optional/transform.md.nolink&#34;&gt;transform()&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/optional/optional/or_else.md.nolink&#34;&gt;or_else()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;到達しないパスであることを表明する関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/unreachable.md.nolink&#34;&gt;std::unreachable()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bitset/bitset.html&#34;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;クラスをさらに&lt;code&gt;constexpr&lt;/code&gt;対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo/type_info.html&#34;&gt;std::type_info&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo/type_info/op_equal.html&#34;&gt;operator==&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、スコープ付き列挙型かを判定する型特性&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_scoped_enum.html&#34;&gt;std::is_scoped_enum&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、第1テンプレート引数についている型修飾を外す型特性として、以下を追加：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、一時オブジェクトの参照への束縛を検出するための型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/reference_constructs_from_temporary.md.nolink&#34;&gt;std::reference_constructs_from_temporary&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/reference_converts_from_temporary.md.nolink&#34;&gt;std::reference_converts_from_temporary&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C互換ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;ヘッダの多くの関数を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::aligned_storage&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;を非推奨化。これらの機能は未定義動作を引き起こし、間違った保証が行われ、よくないAPI設計が行われていたため、非推奨となる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::aligned_storage&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(T) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[sizeof(T)];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(Ts...) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/max.html&#34;&gt;std::max&lt;/a&gt;({sizeof(Ts)...})];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ガベージコレクションの実装にうまく役立てられなかった、ガベージコレクション実装のサポートをする以下の機能を削除する：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_reachable.html&#34;&gt;std::declare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_reachable.html&#34;&gt;std::undeclare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_no_pointers.html&#34;&gt;std::declare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_no_pointers.html&#34;&gt;std::undeclare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/get_pointer_safety.html&#34;&gt;std::get_pointer_safety()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_safety.html&#34;&gt;std::pointer_safety&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;マクロ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;取り決め&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下のヘッダの一部機能をフリースタンディングライブラリとして追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/tuple.html&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
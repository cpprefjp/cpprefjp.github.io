<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-04-15T05:16:09.620540</updated>
  <id>52b184a8-4538-463b-9acc-9c3e2f6e412e</id>

  
    <entry>
      <title>条件付きで特殊メンバ関数をトリビアルに定義するように [P0848R3] -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/conditionally_trivial_special_member_functions.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:lang/cpp20/conditionally_trivial_special_member_functions.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/conditionally_trivial_special_member_functions.md b/lang/cpp20/conditionally_trivial_special_member_functions.md
index e33bd76fa..07a2acce1 100644
--- a/lang/cpp20/conditionally_trivial_special_member_functions.md
+++ b/lang/cpp20/conditionally_trivial_special_member_functions.md
@@ -285,7 +285,7 @@ C++20のコンセプトの導入によって、コンセプトによって特殊
 
 この機能はそれを補うための仕組みであり、特殊メンバ関数に対するコンセプト制約自体は最初のコンセプト導入時から可能になっていたため、この機能は厳密にいえば仕様の調整のみである。
 
-この機能は、C++23の`std::expceted`の実装で活用されるだろう。
+この機能は、C++23の`std::expected`の実装で活用されるだろう。
 
 ## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コード内容の仮定をコンパイラに伝える`assume`属性 [P1774R8] -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/portable_assumptions.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:lang/cpp23/portable_assumptions.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/portable_assumptions.md b/lang/cpp23/portable_assumptions.md
index e80c8e4ed..7433e8ddc 100644
--- a/lang/cpp23/portable_assumptions.md
+++ b/lang/cpp23/portable_assumptions.md
@@ -43,7 +43,7 @@ int divide_by_32(int x)
   // 非正値を考慮しない最適コードを生成できる可能性がある。
   return x / 32;
 }
-// asssume属性による仮定がfalseとなる関数呼び出し、
+// assume属性による仮定がfalseとなる関数呼び出し、
 // 例えば divide_by_32(-100) は未定義動作を引き起こす。
 ```
 * assume[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>strong_ordering -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/compare/strong_ordering.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/compare/strong_ordering.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/strong_ordering.md b/reference/compare/strong_ordering.md
index 8b10e1c74..f0a37196d 100644
--- a/reference/compare/strong_ordering.md
+++ b/reference/compare/strong_ordering.md
@@ -55,8 +55,8 @@ namespace std {
 
 | 名前                                                                         | 説明                                                      | 対応バージョン |
 | ---------------------------------------------------------------------------- | --------------------------------------------------------- | -------------- |
-| [`oeprator partial_ordering`](strong_ordering/op_partial_ordering.md) | [`partial_ordering`](partial_ordering.md)への型変換演算子 | C++20          |
-| [`oeprator weak_ordering`](strong_ordering/op_weak_ordering.md)       | [`weak_ordering`](weak_ordering.md)への型変換演算子       | C++20          |
+| [`operator partial_ordering`](strong_ordering/op_partial_ordering.md) | [`partial_ordering`](partial_ordering.md)への型変換演算子 | C++20          |
+| [`operator weak_ordering`](strong_ordering/op_weak_ordering.md)       | [`weak_ordering`](weak_ordering.md)への型変換演算子       | C++20          |
 
 
 ### 比較演算子
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>weak_ordering -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/compare/weak_ordering.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/compare/weak_ordering.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/weak_ordering.md b/reference/compare/weak_ordering.md
index 0f20437fe..3057dca83 100644
--- a/reference/compare/weak_ordering.md
+++ b/reference/compare/weak_ordering.md
@@ -47,7 +47,7 @@ namespace std {
 
 | 名前                                                                         | 説明                                                      | 対応バージョン |
 | ---------------------------------------------------------------------------- | --------------------------------------------------------- | -------------- |
-| [`oeprator partial_ordering`](weak_ordering/op_partial_ordering.md) | [`partial_ordering`](partial_ordering.md)への型変換演算子 | C++20          |
+| [`operator partial_ordering`](weak_ordering/op_partial_ordering.md) | [`partial_ordering`](partial_ordering.md)への型変換演算子 | C++20          |
 
 
 ### 比較演算子
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cstdlib -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/cstdlib.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cstdlib&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;ヘッダでは、一般的なユーティリティの関数を定義する。これらの機能は基本的には、&lt;code&gt;std&lt;/code&gt;名前空間に属することを除いてC言語の標準ライブラリ&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;ヘッダと同じである。&lt;/p&gt;
&lt;p&gt;本ヘッダはフリースタンディング環境でも提供される。
フリースタンディング環境の場合、少なくとも&lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;atexit&lt;/code&gt;, &lt;code&gt;at_quick_exit&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, &lt;code&gt;quick_exit&lt;/code&gt;関数がサポートされる。&lt;/p&gt;
&lt;p&gt;ただし、一部の機能には、&lt;code&gt;[[noreturn]]&lt;/code&gt;属性、&lt;code&gt;noexcept&lt;/code&gt;キーワード、スレッドローカルストレージのような、C++特有の言語機能に関する規定がある。&lt;/p&gt;
&lt;h2&gt;数値変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;int&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;float&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;long double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;擬似乱数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RAND_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される値域の最大値を表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される擬似乱数のシードを指定する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;で指定されたシードを元に、擬似乱数を生成する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aligned_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したアライメントでメモリを確保する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;malloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;calloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保し、領域をゼロ初期化する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;realloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを再確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保したメモリを解放する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;プログラムの開始と終了&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/exit_failure.html&#34;&gt;EXIT_FAILURE&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが異常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/exit_success.html&#34;&gt;EXIT_SUCCESS&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが正常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/abort.html&#34;&gt;abort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを異常終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/exit_.html&#34;&gt;_Exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/exit.html&#34;&gt;exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/atexit.html&#34;&gt;atexit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/quick_exit.html&#34;&gt;quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quick_exit&lt;/code&gt;関数でプログラムが終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getenv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境変数を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムコマンドを実行する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;検索と並び替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bsearch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二分探索を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;qsort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の並べ替えを行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数に対する算術関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/abs.html&#34;&gt;abs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/abs.html&#34;&gt;labs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/abs.html&#34;&gt;llabs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/div_t.html&#34;&gt;div_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/div.html&#34;&gt;div&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の除算と剰余算を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/ldiv_t.html&#34;&gt;ldiv_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ldiv&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/div.html&#34;&gt;ldiv&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の除算と剰余算を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/lldiv_t.html&#34;&gt;lldiv_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;lldiv&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;cstdlib/div.html&#34;&gt;lldiv&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の除算と剰余算を行う (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マルチバイト文字とワイド文字の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MB_CUR_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列の最大サイズを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mblen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字の長さを取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbtowc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字を、ワイド文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wctomb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字を、マルチバイト文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbstowcs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列を、ワイド文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcstombs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列を、マルチバイト文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_file -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/copy_file.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/filesystem/copy_file.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/copy_file.md b/reference/filesystem/copy_file.md
index 4cbe89bbf..cb2f4e74e 100644
--- a/reference/filesystem/copy_file.md
+++ b/reference/filesystem/copy_file.md
@@ -33,7 +33,7 @@ namespace std::filesystem {
         - `!`[`is_regular_file`](is_regular_file.md)`(from)` (コピー元のファイルが存在しない)
         - [`exists`](exists.md)`(to) &amp;amp;&amp;amp; !`[`is_regular_file`](is_regular_file.md)`(to)` (コピー先に、通常ファイルではないファイルが存在している)
         - [`exists`](exists.md)`(to) &amp;amp;&amp;amp;` [`equivalent`](equivalent.md)`(from, to)` (コピー先にファイルが存在しており、それがコピー元と等価)
-        - [`exists`](exists.md)`(to) &amp;amp;&amp;amp; (options &amp;amp; (`[`copy_optons::skip_existing`](copy_options.md) `|` [`copy_optons::overwrite_existing`](copy_options.md) `|` [`copy_optons::update_existing`](copy_options.md)`)) ==` [`copy_optons::none`](copy_options.md) (コピー先にファイルが存在しており、その場合にエラーにならないオプションが指定されていない)
+        - [`exists`](exists.md)`(to) &amp;amp;&amp;amp; (options &amp;amp; (`[`copy_options::skip_existing`](copy_options.md) `|` [`copy_options::overwrite_existing`](copy_options.md) `|` [`copy_options::update_existing`](copy_options.md)`)) ==` [`copy_options::none`](copy_options.md) (コピー先にファイルが存在しており、その場合にエラーにならないオプションが指定されていない)
     - 以下の条件のいずれかに合致する場合、パス`from`が解決したファイルを、パス`to`が解決した先にコピーする
         - `!`[`exists`](exists.md)`(to)`
         - `(options &amp;amp;` [`copy_options::overwrite_existing`](copy_options.md)`) !=` [`copy_options::none`](copy_options.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/function_ref/op_constructor.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/functional/function_ref/op_constructor.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/function_ref/op_constructor.md b/reference/functional/function_ref/op_constructor.md
index 83be90fc2..297237e90 100644
--- a/reference/functional/function_ref/op_constructor.md
+++ b/reference/functional/function_ref/op_constructor.md
@@ -37,13 +37,13 @@ constexpr function_ref(const function_ref&amp;amp;) noexcept = default;  // (6)
 `function_ref`クラステンプレートパラメータのCV修飾子 *cv* に応じて
 
 - (1) : [`is_function`](/reference/type_traits/is_function.md)`&amp;lt;F&amp;gt;`が`true`、かつ`is-invocable-using&amp;lt;F&amp;gt;`が`true`であること
-- (2) : `T`を[`remove_refernce_t`](/reference/type_traits/remove_reference.md)`&amp;lt;F&amp;gt;`としたとき
+- (2) : `T`を[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;F&amp;gt;`としたとき
     - [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;F&amp;gt;`が`function_ref`と同一型ではなく、かつ
     - [`is_member_pointer_v`](/reference/type_traits/is_member_pointer.md)`&amp;lt;T&amp;gt;`が`false`であり、かつ
     - `is-invocable-using&amp;lt;/*cv*/ T&amp;amp;&amp;gt;`が`true`であること
 - (3) : `F`を`decltype(f)`としたとき
     - `is-invocable-using&amp;lt;F&amp;gt;`が`true`であること
-- (4) : `T`を[`remove_refernce_t`](/reference/type_traits/remove_reference.md)`&amp;lt;F&amp;gt;`、`F`を`decltype(f)`としたとき
+- (4) : `T`を[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;F&amp;gt;`、`F`を`decltype(f)`としたとき
     - [`is_rvalue_reference_v`](/reference/type_traits/is_rvalue_reference.md)`&amp;lt;U&amp;amp;&amp;amp;&amp;gt;`が`false`であり、かつ
     - `is-invocable-using&amp;lt;F, /*cv*/ T&amp;amp;&amp;gt;`が`true`であること
 - (5) : `F`を`decltype(f)`としたとき
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_const_reference_t -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_const_reference_t.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/iterator/iter_const_reference_t.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_const_reference_t.md b/reference/iterator/iter_const_reference_t.md
index aefaf7a21..7429fd03c 100644
--- a/reference/iterator/iter_const_reference_t.md
+++ b/reference/iterator/iter_const_reference_t.md
@@ -39,9 +39,9 @@ namespace std {
 |[`std::vector&amp;lt;bool&amp;gt;`](/reference/vector/vector.md)|`bool`|`std::vector&amp;lt;bool&amp;gt;::reference`|`bool`|
 |`const std::vector&amp;lt;bool&amp;gt;`|`bool`|`bool`|`bool`|
 |[`views::zip`](/reference/ranges/zip_view.md)|`std::tuple&amp;lt;T, U&amp;gt;`|`std::tuple&amp;lt;T&amp;amp;, U&amp;amp;&amp;gt;`|`std::tuple&amp;lt;const T&amp;amp;, const D&amp;amp;&amp;gt;`|
-|[`views::enumrate`](/reference/ranges/enumrate_view.md.nolink)|`std::tuple&amp;lt;D, T&amp;gt;`|`std::tuple&amp;lt;D, T&amp;amp;&amp;gt;`|`std::tuple&amp;lt;D, const T&amp;amp;&amp;gt;`|
+|[`views::enumerate`](/reference/ranges/enumerate_view.md)|`std::tuple&amp;lt;D, T&amp;gt;`|`std::tuple&amp;lt;D, T&amp;amp;&amp;gt;`|`std::tuple&amp;lt;D, const T&amp;amp;&amp;gt;`|
 
-表中の`T, U`はそれそれの`view`に入力された範囲の値型、`D`は`views::enumrate`の入力範囲の`iter_difference_t`とする。
+表中の`T, U`はそれそれの`view`に入力された範囲の値型、`D`は`views::enumerate`の入力範囲の`iter_difference_t`とする。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>access -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/linalg/conjugated_accessor/access.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/linalg/conjugated_accessor/access.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/conjugated_accessor/access.md b/reference/linalg/conjugated_accessor/access.md
index 2e3760423..b5c55b6e2 100644
--- a/reference/linalg/conjugated_accessor/access.md
+++ b/reference/linalg/conjugated_accessor/access.md
@@ -1,4 +1,4 @@
-# acccess
+# access
 * linalg[meta header]
 * function[meta id-type]
 * std::linalg[meta namespace]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>access -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/linalg/scaled_accessor/access.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/linalg/scaled_accessor/access.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/scaled_accessor/access.md b/reference/linalg/scaled_accessor/access.md
index 57fa1055b..1676f1c46 100644
--- a/reference/linalg/scaled_accessor/access.md
+++ b/reference/linalg/scaled_accessor/access.md
@@ -1,4 +1,4 @@
-# acccess
+# access
 * linalg[meta header]
 * function[meta id-type]
 * std::linalg[meta namespace]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transposed -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/linalg/transposed.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/linalg/transposed.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/transposed.md b/reference/linalg/transposed.md
index f03034f6c..d2e87da98 100644
--- a/reference/linalg/transposed.md
+++ b/reference/linalg/transposed.md
@@ -114,7 +114,7 @@ int main()
 
   // transposed戻り値は書き換え可能なmdspan
   mat0[1, 2] = 42;  // 6 -&amp;gt; 42
-  asssert((mat1[2, 1] == 42));
+  assert((mat1[2, 1] == 42));
 }
 ```
 * std::linalg::transposed[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/op_constructor.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/mdspan/layout_left_padded/mapping/op_constructor.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/op_constructor.md b/reference/mdspan/layout_left_padded/mapping/op_constructor.md
index fab88cd47..dad0d9a78 100644
--- a/reference/mdspan/layout_left_padded/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left_padded/mapping/op_constructor.md
@@ -64,7 +64,7 @@ constexpr explicit(see below)
 
 
 ## 適格要件
-- (5) : `OhterExtents::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`(static-padding-stride ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (OtherExtents::`[`static_extent`](../../extents/static_extent.md)`(0) == dynamic_extent) || (static-padding-stride == OtherExtents::static_extent(0))`が`true`であること。
+- (5) : `OtherExtents::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`(static-padding-stride ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (OtherExtents::`[`static_extent`](../../extents/static_extent.md)`(0) == dynamic_extent) || (static-padding-stride == OtherExtents::static_extent(0))`が`true`であること。
 - (7) : `rank_ &amp;gt; 1`のとき、`(padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (LayoutLeftPaddedMapping::padding_value == dynamic_extent) || (padding_value == LayoutLeftPaddedMapping::padding_value)`が`true`であること。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/op_constructor.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/mdspan/layout_right_padded/mapping/op_constructor.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/op_constructor.md b/reference/mdspan/layout_right_padded/mapping/op_constructor.md
index 5ae9da9d3..cebd64271 100644
--- a/reference/mdspan/layout_right_padded/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right_padded/mapping/op_constructor.md
@@ -63,7 +63,7 @@ constexpr explicit(see below)
 
 
 ## 適格要件
-- (5) : `OhterExtents::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`(static-padding-stride ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (OtherExtents::`[`static_extent`](../../extents/static_extent.md)`(rank_ - 1) == dynamic_extent) || (static-padding-stride == OtherExtents::static_extent(rank_ - 1))`が`true`であること。
+- (5) : `OtherExtents::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`(static-padding-stride ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (OtherExtents::`[`static_extent`](../../extents/static_extent.md)`(rank_ - 1) == dynamic_extent) || (static-padding-stride == OtherExtents::static_extent(rank_ - 1))`が`true`であること。
 - (7) : `rank_ &amp;gt; 1`のとき、`(padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (LayoutRightPaddedMapping::padding_value == dynamic_extent) || (padding_value == LayoutRightPaddedMapping::padding_value)`が`true`であること。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/mdspan/mdspan.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
index 3d82ef40d..410c68a77 100644
--- a/reference/mdspan/mdspan.md
+++ b/reference/mdspan/mdspan.md
@@ -24,7 +24,7 @@ namespace std {
 `mdspan`は、任意のメモリブロックに対して多次元配列のようにアクセスする機能を提供するクラスである。 
 `mdspan`それ自体は参照先メモリブロックを所有せず、[`[]`演算子](mdspan/op_at.md)を介して多次元配列のように見せかけるビュー(view)にすぎない。
 
-クラスの名称`mdspan`は、1次元の範囲[`std::span`](../span/span.md)に対する多次元(MultiDimentional)拡張に由来する。
+クラスの名称`mdspan`は、1次元の範囲[`std::span`](../span/span.md)に対する多次元(MultiDimensional)拡張に由来する。
 
 `mdspan`の特殊化`MDS`は[`copyable`](/reference/concepts/copyable.md)のモデルであり、かつ
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_at_least -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator/allocate_at_least.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/memory/allocator/allocate_at_least.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator/allocate_at_least.md b/reference/memory/allocator/allocate_at_least.md
index fd447e41a..750ed9c3d 100644
--- a/reference/memory/allocator/allocate_at_least.md
+++ b/reference/memory/allocator/allocate_at_least.md
@@ -1,4 +1,4 @@
-# alloacte_at_least
+# allocate_at_least
 * memory[meta header]
 * std[meta namespace]
 * allocator[meta class]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_at_least -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator_traits/allocate_at_least.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/memory/allocator_traits/allocate_at_least.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator_traits/allocate_at_least.md b/reference/memory/allocator_traits/allocate_at_least.md
index 4728c68c9..ecb35b1e1 100644
--- a/reference/memory/allocator_traits/allocate_at_least.md
+++ b/reference/memory/allocator_traits/allocate_at_least.md
@@ -1,4 +1,4 @@
-# alloacte_at_least
+# allocate_at_least
 * memory[meta header]
 * std[meta namespace]
 * allocator_traits[meta class]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assume_aligned -- いくつかのtypoを修正</title>
      <link href="https://cpprefjp.github.io/reference/memory/assume_aligned.html"/>
      <id>2107107379cde39744084d400cea41c89185e56b:reference/memory/assume_aligned.md</id>
      <updated>2025-04-15T13:10:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/assume_aligned.md b/reference/memory/assume_aligned.md
index a26985f03..01bd575d0 100644
--- a/reference/memory/assume_aligned.md
+++ b/reference/memory/assume_aligned.md
@@ -168,7 +168,7 @@ int main()
   {
     auto&amp;amp; pack = packs[ n ];
     auto xmm =
-#ifdef ASSUME_ALING_CPP20
+#ifdef ASSUME_ALIGN_CPP20
       _mm_load_ps( std::assume_aligned&amp;lt; SSE_ALIGNMENT &amp;gt;( pack.data ) );
 #elif defined( ASSUME_ALIGN_GCC_OR_CLANG )
       _mm_load_ps( (float*)__builtin_assume_aligned( pack.data, SSE_ALIGNMENT ) );
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>はじめてのコントリビュート -- Markdownの外部解説サイトへのリンクを削除</title>
      <link href="https://cpprefjp.github.io/start_editing.html"/>
      <id>b4cf7e4d32e038907bf489e4850829990043ca57:start_editing.md</id>
      <updated>2025-04-15T13:06:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing.md b/start_editing.md
index 2e632953f..2bd0b2352 100644
--- a/start_editing.md
+++ b/start_editing.md
@@ -91,9 +91,6 @@ Markdownは、GitHubサービス上でドキュメントを記述するフォー
 
 Markdownの記述方法をわかりやすく解説してくれているWebサイトは、すでに数多く存在しますので、詳細はそちらを参照してください。
 
-- [Markdown記法 チートシート](http://qiita.com/Qiita/items/c686397e4a0f4f11683d)
-- [文章作成やメモ書きにも便利、Markdown記法](http://kojika17.com/2013/01/starting-markdown.html)
-
 ただし、cpprefjp特有の拡張構文もあります。
 以下のページにまとめてあるので、そちらを参照して下さい。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>env -- execution/env: fix ngword</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/env.html"/>
      <id>92a7237ce2698f7bc6fcaed781f171f579040706:reference/execution/execution/env.md</id>
      <updated>2025-04-15T01:19:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/env.md b/reference/execution/execution/env.md
index df547da64..4ebb6362c 100644
--- a/reference/execution/execution/env.md
+++ b/reference/execution/execution/env.md
@@ -30,7 +30,7 @@ namespace std::execution {
 
 `env`の特殊化は代入可能ではない。
 
-式リストが単一要素で構成される場合を除いて、`env`が括弧を用いた式リストによる初期化をサポートするか否かは未規定。
+式リストが単一要素で構成される場合を除いて、`env`が丸カッコを用いた式リストによる初期化をサポートするか否かは未規定。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index 920223549..15206c657 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -35,22 +35,22 @@ namespace std::execution {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`forwarding_query`](forwarding_query.md.nolink) | 進行保証の問い合わせオブジェクト (customization point object) | C++26 |
-| [`get_allocator`](get_allocator.md.nolink) | アロケータ取得の問い合わせオブジェクト (customization point object) | C++26 |
-| [`get_stop_token`](get_stop_token.md.nolink) | 停止トークン取得の問い合わせオブジェクト (customization point object) | C++26 |
+| [`forwarding_query`](forwarding_query.md.nolink) | クエリオブジェクトに転送問い合わせ可能か否かを返す (customization point object) | C++26 |
+| [`get_allocator`](get_allocator.md.nolink) | アロケータ取得のクエリオブジェクト (customization point object) | C++26 |
+| [`get_stop_token`](get_stop_token.md.nolink) | 停止トークン取得のクエリオブジェクト (customization point object) | C++26 |
 | [`stop_token_of_t`](get_stop_token.md.nolink) | 指定型から停止トークン型を取得 (alias template) | C++26 |
-| [`execution::get_domain`](execution/get_domain.md.nolink) | 実行ドメイン取得の問い合わせオブジェクト (customization point object) | C++26 |
-| [`execution::get_scheduler`](execution/get_scheduler.md.nolink) | Scheduler取得の問い合わせオブジェクト (customization point object) | C++26 |
-| [`execution::get_delegation_scheduler`](execution/get_delegation_scheduler.md.nolink) | 委譲Scheduler取得の問い合わせオブジェクト (customization point object) | C++26 |
+| [`execution::get_domain`](execution/get_domain.md.nolink) | 実行ドメイン取得のクエリオブジェクト (customization point object) | C++26 |
+| [`execution::get_scheduler`](execution/get_scheduler.md.nolink) | Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
+| [`execution::get_delegation_scheduler`](execution/get_delegation_scheduler.md.nolink) | 委譲Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::forward_progress_guarantee`](execution/forward_progress_guarantee.md.nolink) | 前進保証 (enum) | C++26 |
-| [`execution::get_forward_progress_guarantee`](execution/get_forward_progress_guarantee.md.nolink) | 前進保証取得の問い合わせオブジェクト (customization point object) | C++26 |
-| [`execution::get_completion_scheduler`](execution/get_completion_scheduler.md.nolink) | 完了Scheduler取得の問い合わせオブジェクト (customization point object) | C++26 |
-| [`execution::get_env`](execution/get_env.md.nolink) | 環境取得の問い合わせオブジェクト (customization point object) | C++26 |
+| [`execution::get_forward_progress_guarantee`](execution/get_forward_progress_guarantee.md.nolink) | 前進保証取得のクエリオブジェクト (customization point object) | C++26 |
+| [`execution::get_completion_scheduler`](execution/get_completion_scheduler.md.nolink) | 完了Scheduler取得のクエリオブジェクト (customization point object) | C++26 |
+| [`execution::get_env`](execution/get_env.md.nolink) | 環境取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::env_of_t`](execution/env_of_t.md.nolink) | 指定型から環境型を取得 (alias template) | C++26 |
-| [`execution::prop`](execution/prop.md.nolink) | プロパティ(class template) | C++26 |
-| [`execution::env`](execution/env.md.nolink) | 環境 (class template) | C++26 |
+| [`execution::prop`](execution/prop.md) | 環境構築用のヘルパクラス (class template) | C++26 |
+| [`execution::env`](execution/env.md) | 環境 (class template) | C++26 |
 
-問い合わせオブジェクトは名前空間 `std` および名前空間 `std::execution` で定義される。
+クエリオブジェクトは名前空間 `std` および名前空間 `std::execution` で定義される。
 
 ### Scheduler
 
@@ -83,14 +83,14 @@ namespace std::execution {
 | [`execution::sender`](execution/sender.md) | Sender型 (concept) | C++26 |
 | [`execution::sender_in`](execution/sender_in.md) | 指定環境で有効なSender (concept) | C++26 |
 | [`execution::sender_to`](execution/sender_to.md) | 指定Receiverに接続可能なSender (concept) | C++26 |
-| [`execution::get_completion_signatures`](execution/get_completion_signatures.md.nolink) | 完了シグネチャ集合取得の問い合わせオブジェクト (customization point object) | C++26 |
+| [`execution::get_completion_signatures`](execution/get_completion_signatures.md.nolink) | 完了シグネチャ集合取得のクエリオブジェクト (customization point object) | C++26 |
 | [`execution::completion_signatures_of_t`](execution/completion_signatures_of_t.md) | Senderから完了シグネチャ集合を取得 (alias template) | C++26 |
 | [`execution::value_types_of_t`](execution/value_types_of_t.md.nolink) | Senderの値完了型を取得 (alias template) | C++26 |
 | [`execution::error_types_of_t`](execution/error_types_of_t.md.nolink) | Senderのエラー完了型を取得 (alias template) | C++26 |
 | [`execution::sends_stopped`](execution/value_types_of_t.md.nolink) | Senderが停止完了に対応するか否か (variable template) | C++26 |
 | [`execution::tag_of_t`](execution/tag_of_t.md.nolink) | Senderのタグ型を取得 (alias template) | C++26 |
 | [`execution::transform_sender`](execution/transform_sender.md.nolink) | Senderを変換 (function template) | C++26 |
-| [`execution::transform_env`](execution/transform_env.md.nolink) | 問い合わせオブジェクトを変換 (function template) | C++26 |
+| [`execution::transform_env`](execution/transform_env.md.nolink) | クエリオブジェクトを変換 (function template) | C++26 |
 | [`execution::apply_sender`](execution/apply_sender.md.nolink) | Senderにタグ型と引数を適用 (function template) | C++26 |
 | [`execution::connect`](execution/connect.md.nolink) | SenderとReceiverを接続 (customization point object) | C++26 |
 | [`execution::connect_result_t`](execution/connect_result_t.md.nolink) | `connect`結果型を取得 (alias template) | C++26 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>completion_signatures_of_t -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/completion_signatures_of_t.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/completion_signatures_of_t.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/completion_signatures_of_t.md b/reference/execution/execution/completion_signatures_of_t.md
index 6a4fc2009..6429a2714 100644
--- a/reference/execution/execution/completion_signatures_of_t.md
+++ b/reference/execution/execution/completion_signatures_of_t.md
@@ -11,14 +11,14 @@ namespace std::execution {
   using completion_signatures_of_t = call-result-t&amp;lt;get_completion_signatures_t, Sndr, Env&amp;gt;;
 }
 ```
-* env&amp;lt;&amp;gt;[link env.md.nolink]
+* env&amp;lt;&amp;gt;[link env.md]
 * sender_in[link sender_in.md]
 * call-result-t[link call-result-t.md.nolink]
 * sender_in[link sender_in.md]
 
 ## 概要
 
-[Sender型](sender.md)`Sndr`から[環境](env.md.nolink)`Env`における[完了シグネチャ集合](completion_signatures.md)を取得する。
+[Sender型](sender.md)`Sndr`から[環境](env.md)`Env`における[完了シグネチャ集合](completion_signatures.md)を取得する。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>env -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/env.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/env.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/env.md b/reference/execution/execution/env.md
new file mode 100644
index 000000000..df547da64
--- /dev/null
+++ b/reference/execution/execution/env.md
@@ -0,0 +1,83 @@
+# env
+* execution[meta header]
+* class template[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;queryable... Envs&amp;gt;
+  struct env {
+    Envs0 envs0_;  // exposition only
+    Envs1 envs1_;  // exposition only
+    // ...
+    EnvsN envsN_;  // exposition only
+
+    template&amp;lt;class QueryTag&amp;gt;
+    constexpr decltype(auto) query(QueryTag q) const noexcept;
+  };
+
+  template&amp;lt;class... Envs&amp;gt;
+  env(Envs...) -&amp;gt; env&amp;lt;unwrap_reference_t&amp;lt;Envs&amp;gt;...&amp;gt;;
+}
+```
+* queryable[link ../queryable.md]
+* unwrap_reference_t[link /reference/type_traits/unwrap_reference.md]
+
+## 概要
+クラステンプレート`env`は、複数の[クエリ可能オブジェクト](../queryable.md)からクエリ可能オブジェクトを作成する。
+結果オブジェクト上に対する問い合わせは、各サブオブジェクトに対して宣言順に問い合わせを行うことで解決される。
+
+`env`の特殊化は代入可能ではない。
+
+式リストが単一要素で構成される場合を除いて、`env`が括弧を用いた式リストによる初期化をサポートするか否かは未規定。
+
+
+## メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|-------|
+| `(constructor)` | コンストラクタ | C++26 |
+| `(destructor)`  | デストラクタ   | C++26 |
+| [`query`](env/query.md) | 問い合わせ | C++26 |
+
+
+## 例
+```cpp example
+#include &amp;lt;stop_token&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  auto env = ex::env{
+    ex::prop(std::get_stop_token, std::never_stop_token{})
+  };
+}
+```
+* ex::env[color ff0000]
+* ex::prop[link prop.md]
+* std::never_stop_token[link /reference/stop_token/never_stop_token.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::prop`](prop.md)
+
+
+## 参照
+- [P3325R5 A Utility for Creating Execution Environments](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3325r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>query -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/env/query.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/env/query.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/env/query.md b/reference/execution/execution/env/query.md
new file mode 100644
index 000000000..171fa25da
--- /dev/null
+++ b/reference/execution/execution/env/query.md
@@ -0,0 +1,80 @@
+# query
+* execution[meta header]
+* std::execution[meta namespace]
+* env[meta class]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class QueryTag&amp;gt;
+constexpr decltype(auto) query(QueryTag q) const noexcept(see below);
+```
+* see below[italic]
+
+## 概要
+クエリオブジェクト`q`に対して問い合わせを行う。
+
+
+## テンプレートパラメータ制約
+説明専用のコンセプト`has-query`を次のように定義したとき、`(has-query&amp;lt;Envs, QueryTag&amp;gt; || ...)`が`true`であること。
+
+```cpp
+template&amp;lt;class Env, class QueryTag&amp;gt;
+concept has-query =
+  requires (const Env&amp;amp; env) {
+    env.query(QueryTag());
+  };
+```
+
+## 効果
+説明用の`fe`を、`env`クラステンプレートの説明専用メンバ変数`envs0_`, ..., `envsN_`のうち最初に式`fe.query(q)`が適格となる要素としたとき、下記と等価。
+
+```cpp
+return fe.query(q);
+```
+
+## 例外
+式`fe.query(q)`が`true`のとき、例外送出しない。
+
+
+## 例
+```cpp example
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;stop_token&amp;gt;
+#include &amp;lt;execution&amp;gt;
+using ex = std::execution;
+
+int main()
+{
+  auto env = ex::env{
+    ex::prop(std::get_stop_token, std::stop_token{}),
+    ex::prop(std::get_allocator, std::allocator&amp;lt;std::byte&amp;gt;{}),
+    ex::prop(std::get_stop_token, std::never_stop_token{}),
+  };
+
+  auto token = env.query(std::get_stop_token);
+  static_assert(std::same_as&amp;lt;decltype(token), std::stop_token&amp;gt;);
+}
+```
+* query[color ff0000]
+* ex::env[link ../env.md]
+* ex::prop[link ../prop.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P3325R5 A Utility for Creating Execution Environments](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3325r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prop -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/prop.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/prop.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/prop.md b/reference/execution/execution/prop.md
new file mode 100644
index 000000000..064085cf1
--- /dev/null
+++ b/reference/execution/execution/prop.md
@@ -0,0 +1,75 @@
+# prop
+* execution[meta header]
+* class template[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::execution {
+  template&amp;lt;class QueryTag, class ValueType&amp;gt;
+  struct prop {
+    QueryTag query_;   // exposition only
+    ValueType value_;  // exposition only
+
+    constexpr const ValueType&amp;amp; query(QueryTag) const noexcept {
+      return value_;
+    }
+  };
+
+  template&amp;lt;class QueryTag, class ValueType&amp;gt;
+  prop(QueryTag, ValueType) -&amp;gt; prop&amp;lt;QueryTag, unwrap_reference_t&amp;lt;ValueType&amp;gt;&amp;gt;;
+}
+```
+* unwrap_reference_t[link /reference/type_traits/unwrap_reference.md]
+
+## 概要
+`QueryTag`型クエリオブジェクトのキーと`ValueType`型の値から、読み取り専用の[クエリ可能オブジェクト](../queryable.md)を構築する。
+
+
+## 適格要件
+説明用の`prop-like`テンプレートクラスを用いて、`QueryTag`と`ValueType`が`callable&amp;lt;QueryTag, prop-like&amp;lt;ValueType&amp;gt;&amp;gt;`のモデルであること。
+
+```cpp
+template&amp;lt;class ValueType&amp;gt;
+struct prop-like {
+  const ValueType&amp;amp; query(auto) const noexcept;
+};
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;stop_token&amp;gt;
+#include &amp;lt;execution&amp;gt;
+namespace ex = std::execution;
+
+int main()
+{
+  auto env0 = ex::prop(std::get_stop_token, std::never_stop_token{});
+}
+```
+* ex::prop[color ff0000]
+* std::never_stop_token[link /reference/stop_token/never_stop_token.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::env`](env.md)
+
+
+## 参照
+- [P3325R5 A Utility for Creating Execution Environments](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3325r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>receiver -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/receiver.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/receiver.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/receiver.md b/reference/execution/execution/receiver.md
index b611d9882..bb7c46198 100644
--- a/reference/execution/execution/receiver.md
+++ b/reference/execution/execution/receiver.md
@@ -19,7 +19,7 @@ namespace std::execution {
 }
 ```
 * get_env[link get_env.md.nolink]
-* queryable[link queryable.md.nolink]
+* queryable[link ../queryable.md]
 * derived_from[link /reference/concepts/derived_from.md]
 * move_constructible[link /reference/concepts/move_constructible.md]
 * constructible_from[link /reference/concepts/constructible_from.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/scheduler.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 7c1ea0931..a89bb8d47 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -24,7 +24,7 @@ namespace std::execution {
 ```
 * derived_from[link /reference/concepts/derived_from.md]
 * sender[link sender.md]
-* queryable[link queryable.md.nolink]
+* queryable[link ../queryable.md]
 * get_completion_scheduler[link get_completion_scheduler.md.nolink]
 * set_value_t[link set_value.md]
 * get_env[link get_env.md.nolink]
@@ -36,8 +36,8 @@ namespace std::execution {
 
 下記をみたすクラス型はSchedulerとみなせる。
 
-- `scheduler_t`をメンバ型`Sch::scheduler_concept`として定義するクラス型
-- [問い合わせ可能](queryable.md.nolink)であること
+- `scheduler_t`をメンバ型`Sch::scheduler_concept`として定義するクラス
+- [クエリ可能オブジェクト](../queryable.md)であること
 - `Sch`型の値`sch`に対して下記が有効な式であること
     - [`execution::schedule`](schedule.md.nolink)`(sch)`が[Sender](sender.md)を返すこと
     - [`execution::get_completion_scheduler`](get_completion_scheduler.md.nolink)`&amp;lt;`[`set_value_t`](set_value.md)`&amp;gt;(`[`execution::get_env`](get_env.md.nolink)`(`[`execution::schedule`](schedule.md.nolink)`(sch)))`の結果が`Sch`型に等しいこと
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/sender.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender.md b/reference/execution/execution/sender.md
index 19c77f609..7d065640c 100644
--- a/reference/execution/execution/sender.md
+++ b/reference/execution/execution/sender.md
@@ -48,7 +48,7 @@ struct env-promise : with-await-transform&amp;lt;env-promise&amp;lt;Env&amp;gt;&amp;gt; {
 };
 ```
 * is-awaitable[link ../is-awaitable.md]
-* env&amp;lt;&amp;gt;[link env.md.nolink]
+* env&amp;lt;&amp;gt;[link env.md]
 * derived_from[link /reference/concepts/derived_from.md]
 * coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
 * unspecified[italic]
@@ -66,7 +66,7 @@ concept sender =
   constructible_from&amp;lt;remove_cvref_t&amp;lt;Sndr&amp;gt;, Sndr&amp;gt;;
 ```
 * get_env[link get_env.md.nolink]
-* queryable[link queryable.md.nolink]
+* queryable[link ../queryable.md]
 * move_constructible[link /reference/concepts/move_constructible.md]
 * constructible_from[link /reference/concepts/constructible_from.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sender_in -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sender_in.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/execution/sender_in.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sender_in.md b/reference/execution/execution/sender_in.md
index f068b6882..1ef582f4d 100644
--- a/reference/execution/execution/sender_in.md
+++ b/reference/execution/execution/sender_in.md
@@ -16,13 +16,13 @@ namespace std::execution {
     };
 }
 ```
-* env&amp;lt;&amp;gt;[link env.md.nolink]
+* env&amp;lt;&amp;gt;[link env.md]
 * sender[link sender.md]
-* queryable[link queryable.md.nolink]
+* queryable[link ../queryable.md]
 * get_completion_signatures[link get_completion_signatures.md.nolink]
 
 ## 概要
-`sender_in`は、[Sender型](sender.md)`Sndr`が[環境](env.md.nolink)`Env`において非同期操作を作成できることを表すコンセプトである。
+`sender_in`は、[Sender型](sender.md)`Sndr`が[環境](env.md)`Env`において非同期操作を作成できることを表すコンセプトである。
 
 
 ## モデル
@@ -55,7 +55,7 @@ int main()
 * ex::sender_in[color ff0000]
 * ex::sender[link sender.md]
 * ex::just[link just.md.nolink]
-* ex::env&amp;lt;&amp;gt;[link env.md.nolink]
+* ex::env&amp;lt;&amp;gt;[link env.md]
 
 ### 出力
 ```
@@ -75,7 +75,7 @@ int main()
 
 ## 関連項目
 - [`execution::sender`](sender.md)
-- [`execution::env`](env.md.nolink)
+- [`execution::env`](env.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>queryable -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/queryable.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:reference/execution/queryable.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/queryable.md b/reference/execution/queryable.md
new file mode 100644
index 000000000..346b7d038
--- /dev/null
+++ b/reference/execution/queryable.md
@@ -0,0 +1,33 @@
+# queryable
+* execution[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class T&amp;gt;
+concept queryable = destructible&amp;lt;T&amp;gt;;
+```
+* destructible[link /reference/concepts/destructible.md]
+
+## 概要
+`queryable`は、型`T`がクエリ可能オブジェクトの制約を満たすことを表す説明専用のコンセプトである。
+
+
+## モデル
+説明用の`env`を`Env`型のオブジェクトとする。
+呼び出し可能オブジェクト`q`と部分式パック`args`に対して、`requires { q(env, args...) }`が`true`であれば、`q(env, args...)`が`q`に課されるセマンティック要件を満たす場合に、`Env`は`queryable`のモデルである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`execution::prop`](execution/prop.md)
+- [`execution::env`](execution/env.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- execution: env,prop,queryable (#1384)</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>2d92c9fd2901685e95c87206c2754827357594fb:working_style.md</id>
      <updated>2025-04-15T01:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index ed10d259b..86ed8088d 100644
--- a/working_style.md
+++ b/working_style.md
@@ -126,7 +126,8 @@ C++11以降対応については対応バージョンを明記します。バー
 | predicate                          | 述語                         |
 | propagation, propagate             | 伝播&amp;lt;br/&amp;gt; (伝搬は誤用が広まったものなので使わない) |
 | pure virtual function              | 純粋仮想関数                 |
-| query object                       | 問い合わせオブジェクト       | 
+| query object                       | クエリオブジェクト           |
+| queryable object                   | クエリ可能オブジェクト       |
 | random access iterator             | ランダムアクセスイテレータ   |
 | range                              | 一般用途の場合：範囲&amp;lt;br/&amp;gt; Rangeアルゴリズム・Rangeアダプタ・Rangeオブジェクトの場合：Range&amp;lt;br/&amp;gt; range-based for：範囲for文&amp;lt;br/&amp;gt; 2つのイテレータによる範囲：イテレータ範囲 |
 | region of RCU protection           | RCU保護区間                  |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
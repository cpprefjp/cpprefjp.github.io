<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-20T12:28:59.013367</updated>
  <id>53f19945-8918-44b0-9491-a64abd0dbe01</id>

  
    <entry>
      <title>remquo -- cmath/remquo: 関数の利用目的を追記</title>
      <link href="https://cpprefjp.github.io/reference/cmath/remquo.html"/>
      <id>9fc8d7418c4c64c443038637e34578e7a9428c4c:reference/cmath/remquo.md</id>
      <updated>2023-02-20T21:23:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/remquo.md b/reference/cmath/remquo.md
index 1dd97d8b8..5f47b4578 100644
--- a/reference/cmath/remquo.md
+++ b/reference/cmath/remquo.md
@@ -55,9 +55,9 @@ namespace std {
 * Integral[italic]
 
 ## 概要
-浮動小数点数の剰余と商を求める。remquoは、「remainder (剰余)」と「quotient (商)」と意味する。
+浮動小数点数の剰余と、商の一部を求める。remquoは、「remainder (剰余)」と「quotient (商)」と意味する。
 
-この関数は、浮動小数点数に対して除算を行い、除算の結果(商)と、その余り(剰余)を同時に求める。戻り値として剰余が返され、ポインタ引数`quo`に商の値が書き込まれる。
+この関数は、浮動小数点数に対して除算を行い、除算の結果(商)の一部と、その余り(剰余)を同時に求める。戻り値として剰余が返され、ポインタ引数`quo`に商の値の一部が書き込まれる。
 
 - (1) : `float`に対するオーバーロード
 - (2) : `double`に対するオーバーロード
@@ -70,12 +70,16 @@ namespace std {
 
 ## 戻り値
 - [`remainder()`](remainder.md)関数と同じ方法で剰余を求めて、戻り値として返す。
-- `quo`が指す値は、`x/y`で得られた商と同じ大きさを持ち、`x/y`で得られた符号と同じ符号を持つ
+- `quo`が指す値は、`x/y`で得られる商と下位数ビットが等しく、`x/y`で得られた符号と同じ符号を持つ。
+    - 商と等しくなる有効なビット数nは、少なくとも3以上の処理系定義の値とされる。
 
 `y`がゼロである場合、`quo`が指す値は未規定となる。またその際、定義域エラーを発生させるかゼロを返すかは、実装定義となる。定義域エラーが発生した際の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 
 
 ## 備考
+`remquo`関数では`x/y`の厳密な商を求めることはできない。
+三角関数のような周期性をもつ数学関数の内部実装において、商の低次ビットを利用した引数の還元(argument reduction)操作で利用する。
+
 - C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
@@ -131,6 +135,7 @@ remquo(6, 2) = quotient:3 remainder:0
 
 
 ## 参照
+- [std::remquo purpose and usage? - Stack Overflow](https://stackoverflow.com/q/11074865/684921)
 - [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
     - C++23での、一部関数の`constexpr`対応
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cstdlib -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cstdlib&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;ヘッダでは、一般的なユーティリティの関数を定義する。これらの機能は基本的には、&lt;code&gt;std&lt;/code&gt;名前空間に属することを除いてC言語の標準ライブラリ&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;ヘッダと同じである。&lt;/p&gt;
&lt;p&gt;本ヘッダはフリースタンディング環境でも提供される。
フリースタンディング環境の場合、少なくとも&lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;atexit&lt;/code&gt;, &lt;code&gt;at_quick_exit&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, &lt;code&gt;quick_exit&lt;/code&gt;関数がサポートされる。&lt;/p&gt;
&lt;p&gt;ただし、一部の機能には、&lt;code&gt;[[noreturn]]&lt;/code&gt;属性、&lt;code&gt;noexcept&lt;/code&gt;キーワード、スレッドローカルストレージのような、C++特有の言語機能に関する規定がある。&lt;/p&gt;
&lt;h2&gt;数値変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;int&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;float&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;long double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;擬似乱数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RAND_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される値域の最大値を表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される擬似乱数のシードを指定する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;で指定されたシードを元に、擬似乱数を生成する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aligned_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したアライメントでメモリを確保する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;malloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;calloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保し、領域をゼロ初期化する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;realloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを再確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保したメモリを解放する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;プログラムの開始と終了&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;EXIT_FAILURE&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが異常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;EXIT_SUCCESS&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが正常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを異常終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_.html&#34;&gt;_Exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;atexit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quick_exit&lt;/code&gt;関数でプログラムが終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getenv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境変数を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムコマンドを実行する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;検索と並び替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bsearch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二分探索を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;qsort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の並べ替えを行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数に対する算術関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;abs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;labs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;llabs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div_t.html&#34;&gt;div_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div.html&#34;&gt;div&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の除算と剰余算を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/ldiv_t.html&#34;&gt;ldiv_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ldiv&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div.html&#34;&gt;ldiv&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の除算と剰余算を行う (functon)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/lldiv_t.html&#34;&gt;lldiv_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;lldiv&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div.html&#34;&gt;lldiv&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の除算と剰余算を行う (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マルチバイト文字とワイド文字の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MB_CUR_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列の最大サイズを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mblen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字の長さを取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbtowc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字を、ワイド文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wctomb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字を、マルチバイト文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbstowcs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列を、ワイド文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcstombs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列を、マルチバイト文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>div -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/div.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/div.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/div.md b/reference/cstdlib/div.md
new file mode 100644
index 000000000..1940b7e9e
--- /dev/null
+++ b/reference/cstdlib/div.md
@@ -0,0 +1,96 @@
+# div
+* cstdlib[meta header]
+* std[meta namespace]
+* function[meta id-type]
+
+```cpp
+namespace std {
+  div_t
+    div(int numer,
+        int denom);         // (1) C++03
+  constexpr div_t
+    div(int numer,
+        int denom);         // (1) C++23
+
+  ldiv_t
+    div(long numer,
+        long denom);        // (2) C++03
+  constexpr ldiv_t
+    div(long numer,
+        long denom);        // (2) C++23
+
+  lldiv_t
+    div(long long numer,
+        long long denom);   // (3) C++03
+  constexpr lldiv_t
+    div(long long numer,
+        long long denom);   // (3) C++23
+
+  ldiv_t
+    ldiv(long numer,
+         long denom);       // (4) C++03
+  constexpr ldiv_t
+    ldiv(long numer,
+         long denom);       // (4) C++23
+
+  lldiv_t
+    lldiv(long long numer,
+          long long denom); // (5) C++11
+  constexpr lldiv_t
+    lldiv(long long numer,
+          long long denom); // (5) C++23
+}
+```
+* div_t[link div_t.md]
+* ldiv_t[link ldiv_t.md]
+* lldiv_t[link lldiv_t.md]
+
+## 概要
+`number / denom`と`number % denom`の計算をひとつの操作で行う。
+
+- (1) : `int`型のオーバーロード
+- (2) : `long`型のオーバーロード
+- (3) : `long long`型のオーバーロード
+- (4) : `long`型規定
+- (5) : `long long`型規定
+
+
+## 戻り値
+戻り値型となるクラスの`quot`に商、`rem`に剰余を代入して返す。
+
+結果のどちらかが表現できない場合は未定義動作となる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::div_t x = std::div(5, 2);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::div[color ff0000]
+* std::div_t[link div_t.md]
+
+### 出力
+```
+2
+1
+```
+
+
+### 備考
+特定の環境では、早期に `constexpr` 対応されている場合がある：
+
+- GCC 4.6.1 以上
+
+
+## 参照
+- [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
+    - C++23での、一部関数の`constexpr`対応
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>div_t -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/div_t.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/div_t.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/div_t.md b/reference/cstdlib/div_t.md
new file mode 100644
index 000000000..799dad33a
--- /dev/null
+++ b/reference/cstdlib/div_t.md
@@ -0,0 +1,41 @@
+# div_t
+* cstdlib[meta header]
+* std[meta namespace]
+* class[meta id-type]
+
+```cpp
+namespace std {
+  struct div_t {
+    int quot;
+    int rem;
+  };
+}
+```
+
+## 概要
+[`std::div()`](div.md)関数の戻り値。
+
+`quot`は「quotient (商)」、`rem`は「remainder (剰余)」。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::div_t x = std::div(5, 2);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::div_t[color ff0000]
+* std::div[link div.md]
+
+### 出力
+```
+2
+1
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ldiv_t -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/ldiv_t.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/ldiv_t.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/ldiv_t.md b/reference/cstdlib/ldiv_t.md
new file mode 100644
index 000000000..a9de6511c
--- /dev/null
+++ b/reference/cstdlib/ldiv_t.md
@@ -0,0 +1,41 @@
+# ldiv_t
+* cstdlib[meta header]
+* std[meta namespace]
+* class[meta id-type]
+
+```cpp
+namespace std {
+  struct ldiv_t {
+    long quot;
+    long rem;
+  };
+}
+```
+
+## 概要
+[`std::div()`](div.md)関数の`long`版の戻り値。
+
+`quot`は「quotient (商)」、`rem`は「remainder (剰余)」。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::ldiv_t x = std::div(5L, 2L);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ldiv_t[color ff0000]
+* std::div[link div.md]
+
+### 出力
+```
+2
+1
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lldiv_t -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/lldiv_t.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/lldiv_t.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/lldiv_t.md b/reference/cstdlib/lldiv_t.md
new file mode 100644
index 000000000..4fc72ed07
--- /dev/null
+++ b/reference/cstdlib/lldiv_t.md
@@ -0,0 +1,42 @@
+# lldiv_t
+* cstdlib[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+namespace std {
+  struct lldiv_t {
+    long long quot;
+    long long rem;
+  };
+}
+```
+
+## 概要
+[`std::div()`](div.md)関数の`long long`版の戻り値。
+
+`quot`は「quotient (商)」、`rem`は「remainder (剰余)」。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::lldiv_t x = std::div(5LL, 2LL);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::lldiv_t[color ff0000]
+* std::div[link div.md]
+
+### 出力
+```
+2
+1
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/abs.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/cmath/abs.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/abs.md b/reference/cmath/abs.md
index 2fd23a231..8ae5febb3 100644
--- a/reference/cmath/abs.md
+++ b/reference/cmath/abs.md
@@ -45,7 +45,7 @@ namespace std {
 ## 戻り値
 引数 `x` の絶対値を返す。
 
-- (1),(2),(3) : `x` が `±∞` だった場合 `+∞` を返す。
+- (1),(2),(3),(4) : `x` が `±∞` だった場合 `+∞` を返す。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/abs.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/complex/complex/abs.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/abs.md b/reference/complex/complex/abs.md
index cf7686b0e..69f779ae0 100644
--- a/reference/complex/complex/abs.md
+++ b/reference/complex/complex/abs.md
@@ -24,21 +24,21 @@ namespace std {
 - 処理系が ISO IEC 60559 に準拠しているかどうかは、C99 の場合はマクロ `__STDC_IEC_559_COMPLEX__` が `1` に定義されている事で判別可能であるが、C++ の規格書には該当する記載を見つける事ができなかった。
 - 絶対値の算出については、一部の算術型、および、[`valarray`](/reference/valarray/valarray.md) クラステンプレートに対しても、他のヘッダで定義されている。  
 
-	| 引数の型                                           | 関数                                          | ヘッダ                               | 備考       |
-	|----------------------------------------------------|-----------------------------------------------|--------------------------------------|------------|
-	| `float`                                            | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       |            |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       |            |
-	| `double`                                           | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       |            |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       |            |
-	| `long double`                                      | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       |            |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       |            |
-	| 任意の整数型                                       | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       | C++11 から |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       | C++11 から |
-	| `int`                                              | [`abs`](/reference/cstdlib/abs.md.nolink)     | [`cstdlib`](/reference/cstdlib.md)   |            |
-	| `long int`                                         | [`labs`](/reference/cstdlib/labs.md.nolink)   | [`cstdlib`](/reference/cstdlib.md)   |            |
-	|                                                    | [`abs`](/reference/cstdlib/abs.md.nolink)     | [`cstdlib`](/reference/cstdlib.md)   |            |
-	| `long long int`                                    | [`llabs`](/reference/cstdlib/llabs.md.nolink) | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
-	|                                                    | [`abs`](/reference/cstdlib/abs.md.nolink)     | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
+	| 引数の型                                           | 関数                                 | ヘッダ                               | 備考       |
+	|----------------------------------------------------|--------------------------------------|--------------------------------------|------------|
+	| `float`                                            | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       |            |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       |            |
+	| `double`                                           | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       |            |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       |            |
+	| `long double`                                      | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       |            |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       |            |
+	| 任意の整数型                                       | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       | C++11 から |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       | C++11 から |
+	| `int`                                              | [`abs`](/reference/cstdlib/abs.md)   | [`cstdlib`](/reference/cstdlib.md)   |            |
+	| `long int`                                         | [`labs`](/reference/cstdlib/abs.md)  | [`cstdlib`](/reference/cstdlib.md)   |            |
+	|                                                    | [`abs`](/reference/cstdlib/abs.md)   | [`cstdlib`](/reference/cstdlib.md)   |            |
+	| `long long int`                                    | [`llabs`](/reference/cstdlib/abs.md) | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
+	|                                                    | [`abs`](/reference/cstdlib/abs.md)   | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
 	| [`valarray`](/reference/valarray/valarray.md)`&amp;lt;T&amp;gt;` | [`abs`](/reference/valarray/valarray/abs.md)  | [`valarray`](/reference/valarray.md) |            |
 
 	なお、上記のうち、任意の整数型に対する [`abs`](/reference/cmath/abs.md) については C++11 で追加されたが、ある種の問題を引き起こすことから、今後削除される可能性がある。[Validity and return type of std::abs(0u) is unclear](http://wg21.cmeerw.net/lwg/issue2192) 参照。  
@@ -89,4 +89,4 @@ abs( (1,2) ) = 2.23607
 | [`polar`](polar.md)                | 指定した絶対値と偏角の複素数値を得る。 |
 | [`abs`](/reference/cmath/abs.md)   | 絶対値を得る。（浮動小数点版）         |
 | [`fabs`](/reference/cmath/fabs.md) | 絶対値を得る。（浮動小数点版）         |
-| [`abs`](/reference/cstdlib/abs.md.nolink) | 絶対値を得る。（整数版）               |
+| [`abs`](/reference/cstdlib/abs.md) | 絶対値を得る。（整数版）               |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cstdlib -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/cstdlib.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cstdlib&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;ヘッダでは、一般的なユーティリティの関数を定義する。これらの機能は基本的には、&lt;code&gt;std&lt;/code&gt;名前空間に属することを除いてC言語の標準ライブラリ&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;ヘッダと同じである。&lt;/p&gt;
&lt;p&gt;本ヘッダはフリースタンディング環境でも提供される。
フリースタンディング環境の場合、少なくとも&lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;atexit&lt;/code&gt;, &lt;code&gt;at_quick_exit&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, &lt;code&gt;quick_exit&lt;/code&gt;関数がサポートされる。&lt;/p&gt;
&lt;p&gt;ただし、一部の機能には、&lt;code&gt;[[noreturn]]&lt;/code&gt;属性、&lt;code&gt;noexcept&lt;/code&gt;キーワード、スレッドローカルストレージのような、C++特有の言語機能に関する規定がある。&lt;/p&gt;
&lt;h2&gt;数値変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;int&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;float&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;long double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;擬似乱数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RAND_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される値域の最大値を表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される擬似乱数のシードを指定する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;で指定されたシードを元に、擬似乱数を生成する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aligned_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したアライメントでメモリを確保する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;malloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;calloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保し、領域をゼロ初期化する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;realloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを再確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保したメモリを解放する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;プログラムの開始と終了&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;EXIT_FAILURE&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが異常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;EXIT_SUCCESS&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが正常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを異常終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_.html&#34;&gt;_Exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;atexit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quick_exit&lt;/code&gt;関数でプログラムが終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getenv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境変数を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムコマンドを実行する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;検索と並び替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bsearch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二分探索を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;qsort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の並べ替えを行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数に対する算術関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;abs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;labs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;llabs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の除算を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ldiv_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ldiv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の除算を行う (functon)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lldiv_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lldiv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の除算を行う (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マルチバイト文字とワイド文字の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MB_CUR_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列の最大サイズを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mblen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字の長さを取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbtowc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字を、ワイド文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wctomb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字を、マルチバイト文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbstowcs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列を、ワイド文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcstombs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列を、マルチバイト文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/abs.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/cstdlib/abs.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/abs.md b/reference/cstdlib/abs.md
new file mode 100644
index 000000000..ad61f0b6a
--- /dev/null
+++ b/reference/cstdlib/abs.md
@@ -0,0 +1,100 @@
+# abs
+* cstdlib[meta header]
+* std[meta namespace]
+* function[meta id-type]
+
+```cpp
+namespace std {
+  int
+    abs(int j);         // (1) C++03
+  constexpr int
+    abs(int j);         // (1) C++23
+
+  long
+    int abs(long j);    // (2) C++03
+  constexpr long
+    int abs(long j);    // (2) C++23
+
+  long long
+    abs(long long j);   // (3) C++11
+  constexpr long long
+    abs(long long j);   // (3) C++23
+
+  float
+    abs(float j);               // (4) C++03からC++20まで
+  double
+    abs(double j);              // (5) C++03からC++20まで
+  long double
+    abs(long double j);         // (6) C++03からC++20まで
+
+  floating-point-type
+    abs(floating-point-type j); // (7) C++03からC++20まで
+
+  long
+    labs(long j);       // (8) C++03
+  constexpr long
+    labs(long j);       // (8) C++23
+
+  long long
+    llabs(long long j); // (9) C++11
+  constexpr long long
+    llabs(long long j); // (9) C++23
+}
+```
+
+## 概要
+絶対値を求める。abs は absolute value（絶対値）の略。
+
+- (1) : `int`に対するオーバーロード
+- (2) : `long`に対するオーバーロード
+- (3) : `long long`に対するオーバーロード
+- (4) : `float`に対するオーバーロード
+- (5) : `double`に対するオーバーロード
+- (6) : `long double`に対するオーバーロード
+- (7) : 浮動小数点数型に対するオーバーロード
+- (8) : `long`規定
+- (9) : `long long`規定
+
+
+## 戻り値
+引数 `j` の絶対値を返す。
+
+- (4),(5),(6),(7) : `j` が `±∞` だった場合 `+∞` を返す。
+
+
+## 備考
+- パラメータの型`X`において[`is_unsigned_v`](/reference/type_traits/is_unsigned.md)`&amp;lt;X&amp;gt;`が`true`であり、`X`が整数昇格によって`int`に変換できない場合、プログラムは不適格となる
+    - Cとの互換性のため、`int`に昇格できる符号なし整数型は許可される
+- C++23では、(4)、(5)、(6)が(7)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  int x = std::abs(-1);
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::abs[color ff0000]
+
+### 出力
+```
+1
+```
+
+
+### 備考
+特定の環境では、早期に `constexpr` 対応されている場合がある：
+
+- GCC 4.6.1 以上
+
+
+## 参照
+- [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
+    - C++23での、一部関数の`constexpr`対応
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_bessel_i -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_bessel_i.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/cyl_bessel_i.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_bessel_i.md b/reference/cmath/cyl_bessel_i.md
index 63681b73c..b6a9ecfad 100644
--- a/reference/cmath/cyl_bessel_i.md
+++ b/reference/cmath/cyl_bessel_i.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float cyl_bessel_if(float nu, float x);
-double cyl_bessel_i(double nu, double x);
-long double cyl_bessel_il(long double nu, long double x);
+  double
+    cyl_bessel_i(double nu,
+                 double x);              // (1) C++17
+  floating-point-type
+    cyl_bessel_i(floating-point-type nu,
+                 floating-point-type x); // (1) C++23
+
+  Promoted
+    cyl_bessel_i(Arithmetic1 nu,
+                 Arithmetic2 x);         // (2) C++17
+
+  float
+    cyl_bessel_if(float nu,
+                  float x);              // (3) C++17
+
+  long double
+    cyl_bessel_il(long double nu,
+                  long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第一種変形ベッセル関数 (modified Bessel functions of the first kind) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `nu`, `x` の第一種変形ベッセル関数
@@ -28,7 +53,8 @@ $J$ は第一種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md)) である
 
 
 ## 備考
-`nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -84,11 +110,13 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
-* 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
-* 第二種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
+- 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
+- 第二種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_bessel_j -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_bessel_j.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/cyl_bessel_j.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_bessel_j.md b/reference/cmath/cyl_bessel_j.md
index 7f4d945e5..0958d751e 100644
--- a/reference/cmath/cyl_bessel_j.md
+++ b/reference/cmath/cyl_bessel_j.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float cyl_bessel_jf(float nu, float x);
-double cyl_bessel_j(double nu, double x);
-long double cyl_bessel_jl(long double nu, long double x);
+  double
+    cyl_bessel_j(double nu,
+                 double x);              // (1) C++17
+  floating-point-type
+    cyl_bessel_j(floating-point-type nu,
+                 floating-point-type x); // (1) C++23
+
+  Promoted
+    cyl_bessel_j(Arithmetic1 nu,
+                 Arithmetic2 x);         // (2) C++17
+
+  float
+    cyl_bessel_jf(float nu,
+                  float x);              // (3) C++17
+
+  long double
+    cyl_bessel_jl(long double nu,
+                  long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第一種ベッセル関数 (Bessel functions of the first kind) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `nu`, `x` の第一種ベッセル関数
@@ -27,7 +52,8 @@ $$
 
 
 ## 備考
-`nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -85,13 +111,15 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
-* 第一種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
-* 第二種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
-* 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
-* 第一種球ベッセル関数 [`sph_bessel`](sph_bessel.md)
+- 第一種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
+- 第二種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
+- 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
+- 第一種球ベッセル関数 [`sph_bessel`](sph_bessel.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_bessel_k -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_bessel_k.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/cyl_bessel_k.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_bessel_k.md b/reference/cmath/cyl_bessel_k.md
index 4d8be72c8..8bdb4b930 100644
--- a/reference/cmath/cyl_bessel_k.md
+++ b/reference/cmath/cyl_bessel_k.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float cyl_bessel_kf(float nu, float x);
-double cyl_bessel_k(double nu, double x);
-long double cyl_bessel_kl(long double nu, long double x);
+  double
+    cyl_bessel_k(double nu,
+                 double x);              // (1) C++17
+  floating-point-type
+    cyl_bessel_k(floating-point-type nu,
+                 floating-point-type x); // (1) C++23
+
+  Promoted
+    cyl_bessel_k(Arithmetic1 nu,
+                 Arithmetic2 x);         // (2) C++17
+
+  float
+    cyl_bessel_kf(float nu,
+                  float x);              // (3) C++17
+
+  long double
+    cyl_bessel_kl(long double nu,
+                  long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第二種変形ベッセル関数 (modified Bessel functions of the second kind) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `nu`, `x` の第二種変形ベッセル関数
@@ -33,7 +58,8 @@ $I$, $J$, $N$ はそれぞれ
 
 
 ## 備考
-`nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -89,12 +115,14 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
-* 第一種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
-* 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
-* 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
+- 第一種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
+- 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
+- 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_neumann -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_neumann.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/cyl_neumann.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_neumann.md b/reference/cmath/cyl_neumann.md
index 8e092a00a..548ce6881 100644
--- a/reference/cmath/cyl_neumann.md
+++ b/reference/cmath/cyl_neumann.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float cyl_neumannf(float nu, float x);
-double cyl_neumann(double nu, double x);
-long double cyl_neumannl(long double nu, long double x);
+  double
+    cyl_neumann(double nu,
+                double x);              // (1) C++17
+  floating-point-type
+    cyl_neumann(floating-point-type nu,
+                floating-point-type x); // (1) C++23
+
+  Promoted
+    cyl_neumann(Arithmetic1 nu,
+                Arithmetic2 x);         // (2) C++17
+
+  float
+    cyl_neumannf(float nu,
+                 float x);              // (3) C++17
+
+  long double
+    cyl_neumannl(long double nu,
+                 long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第二種ベッセル関数 (Bessel functions of the second kind)、ノイマン関数 (Neumann functions) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の第二種ベッセル関数
@@ -28,7 +53,8 @@ $J$ は第一種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md)) である
 
 
 ## 備考
-`nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `nu &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -95,3 +121,5 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_1 -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_1.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/ellint_1.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_1.md b/reference/cmath/ellint_1.md
index 68c4b64d6..7c47a2c82 100644
--- a/reference/cmath/ellint_1.md
+++ b/reference/cmath/ellint_1.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float ellint_1f(float k, float phi);
-double ellint_1(double k, double phi);
-long double ellint_1l(long double k, long double phi);
+  double
+    ellint_1(double k,
+             double phi);              // (1) C++17
+  floating-point-type
+    ellint_1(floating-point-type k,
+             floating-point-type phi); // (1) C++23
+
+  Promoted
+    ellint_1(Arithmetic1 k,
+             Arithmetic2 phi);         // (2) C++17
+
+  float
+    ellint_1f(float k,
+              float phi);              // (3) C++17
+
+  long double
+    ellint_1l(long double k,
+              long double phi);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第一種不完全楕円積分 (incomplete elliptic integral of the first kind) を計算する。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `k`, `phi` の第一種不完全楕円積分
@@ -27,7 +52,8 @@ $$
 
 
 ## 備考
-$ F(k, \pi/2) = K(k)$ (第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md))。
+- $ F(k, \pi/2) = K(k)$ (第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md))
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -85,10 +111,12 @@ GCC 7.1.0–8.0.0 では `|k| == 1 &amp;amp;&amp;amp; |phi| &amp;gt;= π / 2` の場合 `nan` を返す
 
 
 ## 関連項目
-* 第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md)
+- 第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_2 -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_2.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/ellint_2.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_2.md b/reference/cmath/ellint_2.md
index b454f4951..041b8c6b0 100644
--- a/reference/cmath/ellint_2.md
+++ b/reference/cmath/ellint_2.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float ellint_2f(float k, float phi);
-double ellint_2(double k, double phi);
-long double ellint_2l(long double k, long double phi);
+  double
+    ellint_2(double k,
+             double phi);              // (1) C++17
+  floating-point-type
+    ellint_2(floating-point-type k,
+             floating-point-type phi); // (1) C++23
+
+  Promoted
+    ellint_2(Arithmetic1 k,
+             Arithmetic2 phi);         // (2) C++17
+
+  float
+    ellint_2f(float k,
+              float phi);              // (3) C++17
+
+  long double
+    ellint_2l(long double k,
+              long double phi);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第二種不完全楕円積分 (incomplete elliptic integral of the second kind) を計算する。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `k`, `phi` の第二種不完全楕円積分
@@ -27,7 +52,8 @@ $$
 
 
 ## 備考
-$ E(k, \pi/2) = E(k) $ (第二種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md))。
+- $ E(k, \pi/2) = E(k) $ (第二種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md))
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -80,10 +106,12 @@ ellint_2(1, 0.5 pi) = 1
 
 
 ## 関連項目
-* 第二種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md)
+- 第二種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_3 -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_3.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/ellint_3.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_3.md b/reference/cmath/ellint_3.md
index 09166a3f9..b48b69b77 100644
--- a/reference/cmath/ellint_3.md
+++ b/reference/cmath/ellint_3.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float ellint_3f(float k, float nu, float phi);
-double ellint_3(double k, double nu, double phi);
-long double ellint_3l(long double k, long double nu, long double phi);
+  double
+    ellint_3(double k,
+             double phi);              // (1) C++17
+  floating-point-type
+    ellint_3(floating-point-type k,
+             floating-point-type phi); // (1) C++23
+
+  Promoted
+    ellint_3(Arithmetic1 k,
+             Arithmetic2 phi);         // (2) C++17
+
+  float
+    ellint_3f(float k,
+              float phi);              // (3) C++17
+
+  long double
+    ellint_3l(long double k,
+              long double phi);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第三種不完全楕円積分 (incomplete elliptic integral of the third kind) を計算する。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `k`, `nu`, `phi` の第三種不完全楕円積分
@@ -28,9 +53,9 @@ $$
 
 
 ## 備考
-$ \Pi(\nu, k, \pi/2) = \Pi(\nu, k) $ (第三種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md))。
-
-$ \Pi(0, k, \phi) = F(k, \phi) $ (第一種不完全楕円積分 [`ellint_1`](ellint_1.md))。
+- $ \Pi(\nu, k, \pi/2) = \Pi(\nu, k) $ (第三種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md))
+- $ \Pi(0, k, \phi) = F(k, \phi) $ (第一種不完全楕円積分 [`ellint_1`](ellint_1.md))
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -109,10 +134,12 @@ GCC 7.1.0–8.0.0 では `1 - nu * sin^2(phi) &amp;lt; 0` のときに [`std::domain_er
 
 
 ## 関連項目
-* 第三種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md)
+- 第三種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expint -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/expint.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/expint.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/expint.md b/reference/cmath/expint.md
index 58a766535..ee4e7b02a 100644
--- a/reference/cmath/expint.md
+++ b/reference/cmath/expint.md
@@ -7,20 +7,45 @@
 
 ```cpp
 namespace std {
-float expintf(float x);
-double expint(double x);
-long double expintl(long double x);
+  double
+    expint(double x);              // (1) C++17
+  floating-point-type
+    expint(floating-point-type x); // (1) C++23
+
+  Promoted
+    expint(Arithmetic x);          // (2) C++17
+
+  float
+    expintf(float x);              // (3) C++17
+
+  long double
+    expintl(long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 指数積分 (exponential integral) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
+
 ## 戻り値
 引数 `x` の指数積分
 $$ \mathrm{Ei}(x) = - \int_{-x}^\infty \mathrm{d}t \frac{e^{-t}}{t} = - \int_{-\infty}^x \mathrm{d}t \frac{e^t}{t} $$
 を返す。
 
+
+## 備考
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cmath&amp;gt;
@@ -62,3 +87,5 @@ expint(∞)  = -nan
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermite -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/hermite.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/hermite.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/hermite.md b/reference/cmath/hermite.md
index 8484383d4..cfe3004a2 100644
--- a/reference/cmath/hermite.md
+++ b/reference/cmath/hermite.md
@@ -7,15 +7,39 @@
 
 ```cpp
 namespace std {
-float hermitef(unsigned n, float x);
-double hermite(unsigned n, double x);
-long double hermitel(unsigned n, long double x);
+  double
+    hermite(unsigned int n,
+            double x);              // (1) C++17
+  floating-point-type
+    hermite(unsigned int n,
+            floating-point-type x); // (1) C++23
+
+  Promoted
+    hermite(unsigned int n,
+            Arithmetic x);          // (2) C++17
+
+  float
+    hermitef(unsigned int n,
+             float x);              // (3) C++17
+
+  long double
+    hermitel(unsigned int n,
+             long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 エルミート多項式 (Hermite polynomials) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `n`, `x` のエルミート多項式
@@ -24,7 +48,8 @@ $$ H_n(x) = (-1)^n \exp(x^2) \frac{\mathrm{d}^n}{\mathrm{d}x^n} \exp(-x^2) $$
 
 
 ## 備考
-`n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -78,15 +103,17 @@ hermite(3, 1) = -4
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): ??
 
-## 参照
-- [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
-- [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
-- [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
 ## 実装例
 ### 閉形式
 $$ H_n(x) = n! \sum_{j=0}^{\lfloor n / 2 \rfloor} \frac{(-1)^j}{j! (n - 2j)!} (2x)^{n - 2j} $$
 
 ### 漸化式
 $$ H_n(x) = 2 x H_{n-1}(x) - 2 (n-1) H_{n-2}(x); H_0(x) = 1, H_1(x) = 2x $$
+
+
+## 参照
+- [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
+- [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
+- [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>laguerre -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/laguerre.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/laguerre.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/laguerre.md b/reference/cmath/laguerre.md
index ee4fac8c3..1f3ada630 100644
--- a/reference/cmath/laguerre.md
+++ b/reference/cmath/laguerre.md
@@ -7,15 +7,39 @@
 
 ```cpp
 namespace std {
-float laguerref(unsigned n, float x);
-double laguerre(unsigned n, double x);
-long double laguerrel(unsigned n, long double x);
+  double
+    laguerre(unsigned int n,
+             double x);              // (1) C++17
+  floating-point-type
+    laguerre(unsigned int n,
+             floating-point-type x); // (1) C++23
+
+  Promoted
+    laguerre(unsigned int n,
+             Arithmetic x);          // (2) C++17
+
+  float
+    laguerref(unsigned int n,
+              float x);              // (3) C++17
+
+  long double
+    laguerrel(unsigned int n,
+              long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 ラゲール多項式 (Laguerre polynomials) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `n`, `x` のラゲール多項式
@@ -24,7 +48,8 @@ $$ L_n(x) = \frac{e^x}{n!} \frac{\mathrm{d}^n}{\mathrm{d}x^n} (x^n e^{-x}) \quad
 
 
 ## 備考
-`n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -79,19 +104,21 @@ laguerre(3, 2) = -0.333333
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 実装例
+### 閉形式
+$$ L_n(x) = \sum_{j=0}^n \frac{n!}{j! (n-j)!} \frac{(-x)^j}{j!} $$
+
+### 漸化式
+$$ L_{n}(x) = \frac{(2n - 1 - x) L_{n-1}(x) - (n-1) L_{n-2}(x)}{n}; L_0(x) = 1, L_1(x) = -x + 1 $$
+
+
 ## 関連項目
-* ラゲール陪多項式 [`assoc_laguerre`](assoc_laguerre.md)
+- ラゲール陪多項式 [`assoc_laguerre`](assoc_laguerre.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
-## 実装例
-### 閉形式
-$$ L_n(x) = \sum_{j=0}^n \frac{n!}{j! (n-j)!} \frac{(-x)^j}{j!} $$
-
-### 漸化式
-$$ L_{n}(x) = \frac{(2n - 1 - x) L_{n-1}(x) - (n-1) L_{n-2}(x)}{n}; L_0(x) = 1, L_1(x) = -x + 1 $$
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>legendre -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/legendre.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/legendre.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/legendre.md b/reference/cmath/legendre.md
index 77edfbec8..2bf88a55b 100644
--- a/reference/cmath/legendre.md
+++ b/reference/cmath/legendre.md
@@ -7,15 +7,39 @@
 
 ```cpp
 namespace std {
-float legendref(unsigned l, float x);
-double legendre(unsigned l, double x);
-long double legendrel(unsigned l, long double x);
+  double
+    legendre(unsigned int n,
+             double x);              // (1) C++17
+  floating-point-type
+    legendre(unsigned int n,
+             floating-point-type x); // (1) C++23
+
+  Promoted
+    legendre(unsigned int n,
+             Arithmetic x);          // (2) C++17
+
+  float
+    legendref(unsigned int n,
+              float x);              // (3) C++17
+
+  long double
+    legendrel(unsigned int n,
+              long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 ルジャンドル多項式 (Legendre polynomials) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `l`, `x` のルジャンドル多項式
@@ -24,7 +48,8 @@ $$ P_l(x) = \frac{1}{2^l l!} \frac{\mathrm{d}^l}{\mathrm{d}x^l} (x^2 - 1)^l \qua
 
 
 ## 備考
-`l &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -79,19 +104,21 @@ legendre(3, 1) = 1
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 実装例
+### 閉形式
+$$ P_l(x) = \frac{1}{2^l l!} \sum_{j=0}^{\lfloor l/2 \rfloor} (-1)^j \frac{l! (2l-2j)!}{j! (l-j)! (l-2j)!} x^{l-2j} $$
+
+### 漸化式
+$$ P_l(x) = \frac{(2l-1) xP_{l-1}(x) - (l-1) P_{l-2}(x)}{l}; P_0(x) = 1, P_1(x) = x $$
+
+
 ## 関連項目
-* ルジャンドル陪関数 [`assoc_legendre`](assoc_legendre.md)
+- ルジャンドル陪関数 [`assoc_legendre`](assoc_legendre.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
-## 実装例
-### 閉形式
-$$ P_l(x) = \frac{1}{2^l l!} \sum_{j=0}^{\lfloor l/2 \rfloor} (-1)^j \frac{l! (2l-2j)!}{j! (l-j)! (l-2j)!} x^{l-2j} $$
-
-### 漸化式
-$$ P_l(x) = \frac{(2l-1) xP_{l-1}(x) - (l-1) P_{l-2}(x)}{l}; P_0(x) = 1, P_1(x) = x $$
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>riemann_zeta -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/riemann_zeta.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/riemann_zeta.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/riemann_zeta.md b/reference/cmath/riemann_zeta.md
index f9763835d..b6a8981d5 100644
--- a/reference/cmath/riemann_zeta.md
+++ b/reference/cmath/riemann_zeta.md
@@ -7,15 +7,34 @@
 
 ```cpp
 namespace std {
-float riemann_zetaf(float x);
-double riemann_zeta(double x);
-long double riemann_zetal(long double x);
+  double
+    riemann_zeta(double x);              // (1) C++17
+  floating-point-type
+    riemann_zeta(floating-point-type x); // (1) C++23
+
+  Promoted
+    riemann_zeta(Arithmetic x);          // (2) C++17
+
+  float
+    riemann_zetaf(float x);              // (3) C++17
+
+  long double
+    riemann_zetal(long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 リーマンのゼータ関数 (Riemann zeta function) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` のリーマンゼータ関数
@@ -31,6 +50,9 @@ $$
 $$
 を返す。
 
+## 備考
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+
 
 ## 例
 ```cpp example
@@ -72,3 +94,5 @@ riemann_zeta(2)  = 1.64493
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sph_bessel -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sph_bessel.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/sph_bessel.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sph_bessel.md b/reference/cmath/sph_bessel.md
index 6e26a7b1f..ec9ba8c17 100644
--- a/reference/cmath/sph_bessel.md
+++ b/reference/cmath/sph_bessel.md
@@ -7,15 +7,39 @@
 
 ```cpp
 namespace std {
-float sph_besself(unsigned n, float x);
-double sph_bessel(unsigned n, double x);
-long double sph_bessell(unsigned n, long double x);
+  double
+    sph_bessel(unsigned int n,
+               double x);              // (1) C++17
+  floating-point-type
+    sph_bessel(unsigned int n,
+               floating-point-type x); // (1) C++23
+
+  Promoted
+    sph_bessel(unsigned int n,
+               Arithmetic x);          // (2) C++17
+
+  float
+    sph_besself(unsigned int n,
+                float x);              // (3) C++17
+
+  long double
+    sph_bessell(unsigned int n,
+                long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 第一種球ベッセル関数 (spherical Bessel functions of the first kind) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `n`, `x` の第一種球ベッセル関数
@@ -28,7 +52,8 @@ $J$ は第一種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md))。
 
 
 ## 備考
-`n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -80,19 +105,21 @@ sph_bessel(2, 0.5 pi) = 0.137417
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 実装例
+### 漸化式
+$$
+j_n(x) = \frac{2n-1}{x} j_{n-1}(x) - j_{n-2}(x);
+j_0(x) = \frac{\sin x}{x}, j_1(x) = \frac{\sin x}{x^2} - \frac{\cos x}{x}
+$$
+
+
 ## 関連項目
-* 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
+- 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
-## 実装例
-### 漸化式
-$$
-j_n(x) = \frac{2n-1}{x} j_{n-1}(x) - j_{n-2}(x);
-j_0(x) = \frac{\sin x}{x}, j_1(x) = \frac{\sin x}{x^2} - \frac{\cos x}{x}
-$$
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sph_legendre -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sph_legendre.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/sph_legendre.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sph_legendre.md b/reference/cmath/sph_legendre.md
index 4a6b9df58..8f370c09d 100644
--- a/reference/cmath/sph_legendre.md
+++ b/reference/cmath/sph_legendre.md
@@ -7,15 +7,44 @@
 
 ```cpp
 namespace std {
-float sph_legendref(unsigned l, unsigned m, float theta);
-double sph_legendre(unsigned l, unsigned m, double theta);
-long double sph_legendrel(unsigned l, unsigned m, long double theta);
+  double
+    sph_legendre(unsigned int l,
+                 unsigned int m,
+                 double theta);               // (1) C++17
+  floating-point-type
+    sph_legendre(unsigned int l,
+                 unsigned int m,
+                 floating-point-type theta);  // (1) C++23
+
+  Promoted
+    sph_legendre(unsigned int l,
+                 unsigned int m,
+                 Arithmetic theta);           // (2) C++17
+
+  float
+    sph_legendref(unsigned int l,
+                  unsigned int m,
+                  float theta);               // (3) C++17
+
+  long double
+    sph_legendrel(unsigned int l,
+                  unsigned int m,
+                  long double theta);         // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 球面調和関数 (spherical harmonic function) の *θ* 成分を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `l`, `m`, `theta` について $Y_l^m(\theta, 0)$ を返す。
@@ -29,7 +58,8 @@ $P_l^m$ はルジャンドル陪関数 ([`assoc_legendre`](assoc_legendre.md)) 
 
 
 ## 備考
-`l &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `l &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -115,10 +145,12 @@ GCC 7.1.0–8.0.0 では `l &amp;lt; m` の場合 ($Y_l^m = 0$) [`std::domain_error`](/
 
 
 ## 関連項目
-* ルジャンドル陪関数 [`assoc_legendre`](assoc_legendre.md)
+- ルジャンドル陪関数 [`assoc_legendre`](assoc_legendre.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sph_neumann -- &lt;cmath&gt; : 残りの数学関数を拡張浮動小数点数型に対応 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sph_neumann.html"/>
      <id>0567ba866215221944f3f808e33f23700c92f9cf:reference/cmath/sph_neumann.md</id>
      <updated>2023-02-20T15:22:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sph_neumann.md b/reference/cmath/sph_neumann.md
index 0cb874ef5..9eb76458a 100644
--- a/reference/cmath/sph_neumann.md
+++ b/reference/cmath/sph_neumann.md
@@ -7,15 +7,39 @@
 
 ```cpp
 namespace std {
-float sph_neumannf(unsigned n, float x);
-double sph_neumann(unsigned n, double x);
-long double sph_neumannl(unsigned n, long double x);
+  double
+    sph_neumann(unsigned int n,
+                double x);              // (1) C++17
+  floating-point-type
+    sph_neumann(unsigned int n,
+                floating-point-type x); // (1) C++23
+
+  Promoted
+    sph_neumann(unsigned int n,
+                Arithmetic x);          // (2) C++17
+
+  float
+    sph_neumannf(unsigned int n,
+                 float x);              // (3) C++17
+
+  long double
+    sph_neumannl(unsigned int n,
+                 long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 第二種球ベッセル関数 (spherical Bessel functions of the second kind)、球ノイマン関数 (spherical Neumann functions) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `n`, `x` の第二種球ベッセル関数
@@ -28,7 +52,8 @@ $N$ は第二種ベッセル関数 ([`cyl_neumann`](cyl_neumann.md))。
 
 
 ## 備考
-`n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `n &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -80,19 +105,21 @@ sph_neumann(2, 0.5 pi) = -1.21585
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 実装例
+### 漸化式
+$$
+n_n(x) = \frac{2n-1}{x} n_{n-1}(x) - n_{n-2}(x);
+n_0(x) = - \frac{\cos x}{x}, n_1(x) = - \frac{\cos x}{x^2} - \frac{\sin x}{x}
+$$
+
+
 ## 関連項目
-* 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
+- 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
-## 実装例
-### 漸化式
-$$
-n_n(x) = \frac{2n-1}{x} n_{n-1}(x) - n_{n-2}(x);
-n_0(x) = - \frac{\cos x}{x}, n_1(x) = - \frac{\cos x}{x^2} - \frac{\sin x}{x}
-$$
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acos -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/acos.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/acos.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/acos.md b/reference/cmath/acos.md
index 46f0a5c89..6ae027aec 100644
--- a/reference/cmath/acos.md
+++ b/reference/cmath/acos.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float acos(float x);
-  double acos(double x);
-  long double acos(long double x);
+  float acos(float x);              // (1) C++03からC++20まで
+  double acos(double x);            // (2) C++03からC++20まで
+  long double acos(long double x);  // (3) C++03からC++20まで
 
-  double acos(Integral x);          // C++11 から
+  floating-point-type
+    acos(floating-point-type x);    // (4) C++23
 
-  float acosf(float x);             // C++17 から
-  long double acosl(long double x); // C++17 から
+  double acos(Integral x);          // (5) C++11
+
+  float acosf(float x);             // (6) C++17
+  long double acosl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -23,6 +26,14 @@ namespace std {
 
 `acos()`は、余弦を表す[`cos()`](cos.md)の逆関数である。$\cos(\mathrm{Arccos}~x) = x$、$\mathrm{Arccos}~(\cos x) = x ~ (x \in [0, \pi])$である。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の逆余弦を主値 `[0, π]` の範囲で返す。（単位はラジアン）
@@ -34,8 +45,9 @@ namespace std {
 - $$ f(x) = \mathrm{Arccos}~ x $$
 - 定義域エラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = 1` の場合、戻り値は `+0` となる。
-	- `x &amp;gt; |1|` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+    - `x = 1` の場合、戻り値は `+0` となる。
+    - `x &amp;gt; |1|` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -94,3 +106,8 @@ $$ \mathrm{Arccos}~x = \frac{\pi}{2} - \sum_{n = 0}^{\infty}\frac{\left(2n\right
 また、逆正接関数と逆余接関数の和は π / 2 なので [`asin`](asin.md) から求めることができる。
 
 $$ \mathrm{Arccos}~x = \frac{\pi}{2} - \mathrm{Arcsin}~x \quad \mathrm{for} \; |x| &amp;amp;lt; 1 $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acosh -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/acosh.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/acosh.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/acosh.md b/reference/cmath/acosh.md
index a87928624..8e072d9bf 100644
--- a/reference/cmath/acosh.md
+++ b/reference/cmath/acosh.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float acosh(float x);
-  double acosh(double x);
-  long double acosh(long double x);
+  float acosh(float x);              // (1) C++11からC++20まで
+  double acosh(double x);            // (2) C++11からC++20まで
+  long double acosh(long double x);  // (3) C++11からC++20まで
 
-  double acosh(Integral x);          // C++11 から
+  floating-point-type
+    acosh(floating-point-type x);    // (4) C++23
 
-  float acoshf(float x);             // C++17 から
-  long double acoshl(long double x); // C++17 から
+  double acosh(Integral x);          // (5) C++11
+
+  float acoshf(float x);             // (6) C++17
+  long double acoshl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -22,6 +25,14 @@ namespace std {
 ## 概要
 算術型の逆双曲線余弦（エリアハイパボリックコサイン、area hyperbolic cosine）を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の逆双曲線余弦を `[0, +∞]` の範囲で返す。
@@ -33,9 +44,10 @@ namespace std {
 - $$ f(x) = \mathrm{arcosh}~x $$
 - 定義域エラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - 処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = 1` の場合、戻り値は `+0` となる。
-	- `x &amp;lt; 1` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-	- `x = +∞` の場合、戻り値は `+∞` となる。
+    - `x = 1` の場合、戻り値は `+0` となる。
+    - `x &amp;lt; 1` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+    - `x = +∞` の場合、戻り値は `+∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -79,3 +91,8 @@ acosh(∞)  = inf
 対数に変換して求めることができる。
 
 $$ \mathrm{arcosh}~x = \log_e \left(x + \sqrt{x^2-1}\right) \quad \mathrm{for} \; 1 &amp;amp;lt; x $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>asin -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/asin.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/asin.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/asin.md b/reference/cmath/asin.md
index 6cda0510f..132bd53a1 100644
--- a/reference/cmath/asin.md
+++ b/reference/cmath/asin.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float asin(float x);
-  double asin(double x);
-  long double asin(long double x);
+  float asin(float x);                // (1) C++03からC++20まで
+  double asin(double x);              // (2) C++03からC++20まで
+  long double asin(long double x);    // (3) C++03からC++20まで
 
-  double asin(Integral x);          // C++11
+  floating-point-type
+    asin(floating-point-type x);      // (4) C++23
 
-  float asinf(float x);             // C++17 から
-  long double asinl(long double x); // C++17 から
+  double asin(Integral x);            // (5) C++11
+
+  float asinf(float x);               // (6) C++17
+  long double asinl(long double x);   // (7) C++17
 }
 ```
 * Integral[italic]
@@ -23,6 +26,14 @@ namespace std {
 
 `asin()`は、正弦を表す[`sin()`](sin.md)の逆関数である。$\sin(\mathrm{Arcsin}~x) = x$、$\mathrm{Arcsin}~(\sin x) = x ~ (x \in [-\pi/2, \pi/2])$である。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の逆正弦を主値 `[-π/2, π/2]` の範囲で返す。（単位はラジアン）
@@ -34,8 +45,9 @@ namespace std {
 - $$ f(x) = \mathrm{Arcsin}~x $$
 - 定義域エラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
-	- `x &amp;gt; |1|` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+    - `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
+    - `x &amp;gt; |1|` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -90,3 +102,8 @@ $$ \mathrm{Arcsin}~x = \sum_{n = 0}^{\infty} \frac{(2n)!}{4^n (n!)^2 (2n+1)} x^{
 $|x| = 1$ 近傍の精度低下する領域（特に $1 / \sqrt{2} &amp;amp;lt; |x| \le 1$）においては、以下の公式による変換で精度向上を図れる。
 
 $$ \mathrm{Arcsin}~x = \frac{\pi}{2} - \mathrm{Arccos}~x = \frac{\pi}{2} - \mathrm{Arcsin}~\sqrt{1 - x^2} \quad \mathrm{for} \; 0 \le x \le 1 $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>asinh -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/asinh.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/asinh.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/asinh.md b/reference/cmath/asinh.md
index 94543b7c5..c18b0fa46 100644
--- a/reference/cmath/asinh.md
+++ b/reference/cmath/asinh.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float asinh(float x);
-  double asinh(double x);
-  long double asinh(long double x);
+  float asinh(float x);              // (1) C++11からC++20まで
+  double asinh(double x);            // (2) C++11からC++20まで
+  long double asinh(long double x);  // (3) C++11からC++20まで
 
-  double asinh(Integral x);          // C++11 から
+  floating-point-type
+    asinh(floating-point-type x);    // (4) C++23
 
-  float asinhf(float x);             // C++17 から
-  long double asinhl(long double x); // C++17 から
+  double asinh(Integral x);          // (5) C++11
+
+  float asinhf(float x);             // (6) C++17
+  long double asinhl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -22,6 +25,14 @@ namespace std {
 ## 概要
 算術型の逆双曲線正弦（エリアハイパボリックサイン、area hyperbolic sine）を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の逆双曲線正弦を返す。
@@ -30,8 +41,9 @@ namespace std {
 ## 備考
 - $$ f(x) = \mathrm{arsinh}~x $$
 - 処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
-	- `x = ±0` の場合、戻り値は `±0` となる。
-	- `x = ±∞` の場合、戻り値は `±∞` となる。
+    - `x = ±0` の場合、戻り値は `±0` となる。
+    - `x = ±∞` の場合、戻り値は `±∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -80,3 +92,8 @@ $$ \mathrm{arsinh}~x = \sum_{n = 0}^{\infty} \frac{(-1)^n (2n)!}{4^n (n!)^2 (2n
 または対数に変換して求めることができる。
 
 $$ \mathrm{arsinh}~x = \log_e \left(x + \sqrt{x^2+1}\right) \quad \mathrm{for~all} \; x $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assoc_laguerre -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/assoc_laguerre.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/assoc_laguerre.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/assoc_laguerre.md b/reference/cmath/assoc_laguerre.md
index 0a30b9b7a..2effc09d6 100644
--- a/reference/cmath/assoc_laguerre.md
+++ b/reference/cmath/assoc_laguerre.md
@@ -7,15 +7,44 @@
 
 ```cpp
 namespace std {
-float assoc_laguerref(unsigned n, unsigned m, float x);
-double assoc_laguerre(unsigned n, unsigned m, double x);
-long double assoc_laguerrel(unsigned n, unsigned m, long double x);
+  double
+    assoc_laguerre(unsigned int n,
+                   unsigned int m,
+                   double x);              // (1) C++17
+  floating-point-type
+    assoc_laguerre(unsigned int n,
+                   unsigned int m,
+                   floating-point-type x); // (1) C++23
+
+  Promoted
+    assoc_laguerre(unsigned int n,
+                   unsigned int m,
+                   Arithmetic x);          // (2) C++17
+
+  float
+    assoc_laguerref(unsigned int n,
+                    unsigned int m,
+                    float x);              // (3) C++17
+
+  long double
+    assoc_laguerrel(unsigned int n,
+                    unsigned int m,
+                    long double x);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 ラゲール陪多項式 (associated Laguerre polynomials) を計算する。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `n`, `m`, `x` のラゲール陪多項式
@@ -28,7 +57,8 @@ $$
 
 
 ## 備考
-`n &amp;gt;= 128 || m &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `n &amp;gt;= 128 || m &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -93,16 +123,6 @@ assoc_laguerre(2, 1, 2) = -1
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
-## 関連項目
-* ラゲール多項式 [`laguerre`](laguerre.md)
-
-
-## 参照
-- [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
-- [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
-- [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
 ## 実装例
 ### 閉形式
 $$
@@ -114,3 +134,15 @@ $$
 L_n^m(x) = \frac{(2n + m - 1 - x)L_{n-1}^m(x) - (n + m - 1) L_{n-2}^m(x)}{n};
 L_0^m(x) = 1, L_1^m(x) = -x + m + 1
 $$
+
+
+## 関連項目
+- ラゲール多項式 [`laguerre`](laguerre.md)
+
+
+## 参照
+- [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
+- [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
+- [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assoc_legendre -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/assoc_legendre.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/assoc_legendre.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/assoc_legendre.md b/reference/cmath/assoc_legendre.md
index caf8d7941..b36db5ea0 100644
--- a/reference/cmath/assoc_legendre.md
+++ b/reference/cmath/assoc_legendre.md
@@ -7,15 +7,44 @@
 
 ```cpp
 namespace std {
-float assoc_legendref(unsigned l, unsigned m, float x);
-double assoc_legendre(unsigned l, unsigned m, double x);
-long double assoc_legendrel(unsigned l, unsigned m, long double x);
+  double
+    assoc_legendre(unsigned int l,
+                   unsigned int m,
+                   double x);              // (1) C++17
+  floating-point-type
+    assoc_legendre(unsigned int l,
+                   unsigned int m,
+                   floating-point-type x); // (1) C++23
+
+  Promoted
+    assoc_legendre(unsigned int l,
+                   unsigned int m,
+                   Arithmetic x);          // (2) C++17
+
+  float
+    assoc_legendref(unsigned int l,
+                    unsigned int m,
+                    float x);              // (2) C++17
+
+  long double
+    assoc_legendrel(unsigned int l,
+                    unsigned int m,
+                    long double x);        // (3) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 ルジャンドル陪関数 (associated Legendre functions) を計算する。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `l`, `m`, `x` のルジャンドル陪関数
@@ -27,7 +56,8 @@ $$
 
 
 ## 備考
-`l &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である。
+- `l &amp;gt;= 128` の場合、この関数の呼び出しの効果は実装定義である
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -98,17 +128,6 @@ GCC 7.1.0–8.0.0 では `l &amp;lt; m` の場合 ($P_l^m = 0$) [`std::domain_error`](/
 GCC 7.1.0–8.0.0 では $(-1)^m$ 倍された値を返す。
 
 
-## 関連項目
-* ルジャンドル多項式 [`legendre`](legendre.md)
-* 球面調和関数の *θ* 成分 [`sph_legendre`](sph_legendre.md)
-
-
-## 参照
-- [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
-- [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
-- [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
 ## 実装例
 ### 閉形式
 $$
@@ -121,3 +140,17 @@ $$
 P_l^m(x) = \frac{(2l-1) x P_{l-1}^m(x) - (l+m-1) P_{l-2}^m(x)}{l-m};
 \quad P_{m-1}^m(x) = 0, \quad P_m^m(x) = (2m-1)!! (1 - x^2)^{m/2}
 $$
+
+
+## 関連項目
+- ルジャンドル多項式 [`legendre`](legendre.md)
+- 球面調和関数の *θ* 成分 [`sph_legendre`](sph_legendre.md)
+
+
+## 参照
+- [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
+- [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
+- [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atan -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/atan.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/atan.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/atan.md b/reference/cmath/atan.md
index 85488a317..a82f0ba13 100644
--- a/reference/cmath/atan.md
+++ b/reference/cmath/atan.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float atan(float x);
-  double atan(double x);
-  long double atan(long double x);
+  float atan(float x);                // (1) C++03からC++20まで
+  double atan(double x);              // (2) C++03からC++20まで
+  long double atan(long double x);    // (3) C++03からC++20まで
 
-  double atan(Integral x);          // C++11 から
+  floating-point-type
+    atan(floating-point-type x);      // (4) C++23
 
-  float atanf(float x);             // C++17 から
-  long double atanl(long double x); // C++17 から
+  double atan(Integral x);            // (5) C++11
+
+  float atanf(float x);               // (6) C++17
+  long double atanl(long double x);   // (7) C++17
 }
 ```
 * Integral[italic]
@@ -23,6 +26,14 @@ namespace std {
 
 `atan()`は、正接を表す[`tan()`](tan.md)の逆関数である。$\tan(\mathrm{Arctan}~x) = x$、$\mathrm{Arctan}~(\tan x) = x ~ (x \in [-\pi/2, \pi/2])$である。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の逆正接を主値 `[-π/2, π/2]` の範囲で返す。（単位はラジアン）
@@ -31,8 +42,9 @@ namespace std {
 ## 備考
 - $$ f(x) = \mathrm{Arctan}~x $$
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
-	- `x = ±∞` の場合、戻り値は `±π/2` となる。（複号同順）
+    - `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
+    - `x = ±∞` の場合、戻り値は `±π/2` となる。（複号同順）
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -98,3 +110,8 @@ $$ \mathrm{Arctan}~x = \frac{\pi}{2} - \mathrm{Arctan}~\frac{1}{x} \quad \mathrm
 （特に $ \sqrt{2} - 1 &amp;amp;lt; |x| \le \sqrt{2} + 1 $ の場合）
 
 $$ \mathrm{Arctan}~x = \frac{\pi}{4} + \mathrm{Arctan}~\frac{x - 1}{x + 1} \quad \mathrm{for} \; x \ne -1 $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atan2 -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/atan2.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/atan2.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/atan2.md b/reference/cmath/atan2.md
index 9d45bc3fc..4878498a1 100644
--- a/reference/cmath/atan2.md
+++ b/reference/cmath/atan2.md
@@ -6,14 +6,23 @@
 
 ```cpp
 namespace std {
-  float atan2(float y, float x);
-  double atan2(double y, double x);
-  long double atan2(long double y, long double x);
-
-  Promoted atan2(Arithmetic1 y, Arithmetic2 x);     // C++11 から
-
-  float atan2f(float y, float x);                   // C++17 から
-  long double atan2l(long double y, long double x); // C++17 から
+  float atan2(float y, float x);          // (1) C++03からC++20まで
+  double atan2(double y, double x);       // (2) C++03からC++20まで
+  long double
+    atan2(long double y, long double x);  // (3) C++03からC++20まで
+
+  floating-point-type
+    atan2(floating-point-type y,
+          floating-point-type x);         // (4) C++23
+
+  Promoted
+    atan2(Arithmetic1 y,
+          Arithmetic2 x);                 // (5) C++11
+
+  float
+    atan2f(float y, float x);             // (6) C++17
+  long double
+    atan2l(long double y, long double x); // (7) C++17
 }
 ```
 * Promoted[italic]
@@ -27,6 +36,14 @@ namespace std {
 
 このような三角形があった場合、辺`y`の長さと辺`x`の長さを`atan2()`関数に与えることで、角度θがラジアン単位として求まる。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 算術型に対するオーバーロード (大きい精度にキャストして計算される。整数は`double`で計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 `y / x` の逆正接を `[-π, π]` の範囲で返す。（単位はラジアン）
@@ -38,21 +55,22 @@ namespace std {
 ## 備考
 - $$ f(y, x) = \mathrm{Arctan}~\frac{y}{x} $$
 
-	引数の順番に注意されたし。
+    引数の順番に注意されたし。
 
 - 定義域エラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
-	- `y = ±0` で `x &amp;lt; 0` または `x = -0` の場合、戻り値は `±π` となる。
-	- `y = ±0` で `x &amp;gt; 0` または `x = +0` の場合、戻り値は `±0` となる。
-	- `y &amp;gt; 0` で `x = ±0` の場合、戻り値は `+π/2` となる。
-	- `y &amp;lt; 0` で `x = ±0` の場合、戻り値は `-π/2` となる。
-	- `0 &amp;lt; z &amp;lt; +∞` とすると、`y = ±z` で `x = -∞` の場合、戻り値は `±π` となる。
-	- `0 &amp;lt; z &amp;lt; +∞` とすると、`y = ±z` で `x = +∞` の場合、戻り値は `±0` となる。
-	- `y = ±∞` で `x` が有限の値の場合、戻り値は `±π/2` となる。
-	- `y = ±∞` で `x = -∞` の場合、戻り値は `±3π/4` となる。
-	- `y = ±∞` で `x = +∞` の場合、戻り値は `±π/4` となる。
+    - `y = ±0` で `x &amp;lt; 0` または `x = -0` の場合、戻り値は `±π` となる。
+    - `y = ±0` で `x &amp;gt; 0` または `x = +0` の場合、戻り値は `±0` となる。
+    - `y &amp;gt; 0` で `x = ±0` の場合、戻り値は `+π/2` となる。
+    - `y &amp;lt; 0` で `x = ±0` の場合、戻り値は `-π/2` となる。
+    - `0 &amp;lt; z &amp;lt; +∞` とすると、`y = ±z` で `x = -∞` の場合、戻り値は `±π` となる。
+    - `0 &amp;lt; z &amp;lt; +∞` とすると、`y = ±z` で `x = +∞` の場合、戻り値は `±0` となる。
+    - `y = ±∞` で `x` が有限の値の場合、戻り値は `±π/2` となる。
+    - `y = ±∞` で `x = -∞` の場合、戻り値は `±3π/4` となる。
+    - `y = ±∞` で `x = +∞` の場合、戻り値は `±π/4` となる。
 
-	特に、`y` と `x` の両方がゼロの場合に定義域エラー（[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外））となったり、`y` が非ゼロで `x` がゼロの場合に極エラー（[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外））となったりは**しない**事に注意。
+    特に、`y` と `x` の両方がゼロの場合に定義域エラー（[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外））となったり、`y` が非ゼロで `x` がゼロの場合に極エラー（[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外））となったりは**しない**事に注意。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -114,3 +132,7 @@ $$
 \displaystyle \mathrm{Arctan}~\frac{y}{x} - \pi &amp;amp;amp; \quad \mathrm{for} \; x &amp;amp;lt; 0, \; y &amp;amp;lt; 0
 \end{cases}
 $$
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atanh -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/atanh.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/atanh.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/atanh.md b/reference/cmath/atanh.md
index c09d4bdd1..78e3a266d 100644
--- a/reference/cmath/atanh.md
+++ b/reference/cmath/atanh.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float atanh(float x);
-  double atanh(double x);
-  long double atanh(long double x);
+  float atanh(float x);              // (1) C++11からC++20まで
+  double atanh(double x);            // (2) C++11からC++20まで
+  long double atanh(long double x);  // (3) C++11からC++20まで
 
-  double atanh(Integral x);          // C++17 から
+  floating-point-type
+    atanh(floating-point-type x);    // (4) C++23
 
-  float atanhf(float x);             // C++17 から
-  long double atanhl(long double x); // C++17 から
+  double atanh(Integral x);          // (5) C++11
+
+  float atanhf(float x);             // (6) C++17
+  long double atanhl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -22,6 +25,14 @@ namespace std {
 ## 概要
 算術型の逆双曲線正接（エリアハイパボリックタンジェント、area hyperbolic tangent）を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の逆双曲線正接を返す。
@@ -33,9 +44,10 @@ namespace std {
 - $$ f(x) = \mathrm{artanh}~x $$
 - 定義域エラー、あるいは、極エラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - 処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
-	- `x = ±0` の場合、戻り値は `±0` となる。
-	- `x = ±1` の場合、戻り値は `±∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
-	- `|x| &amp;gt; 1` の場合、戻り値は NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+    - `x = ±0` の場合、戻り値は `±0` となる。
+    - `x = ±1` の場合、戻り値は `±∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
+    - `|x| &amp;gt; 1` の場合、戻り値は NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -87,3 +99,8 @@ $$ \mathrm{artanh}~x = \sum_{n = 0}^{\infty} \frac{1}{2n + 1} x^{2n + 1} \quad \
 または対数に変換して求めることができる。
 
 $$ \mathrm{artanh}~x = \frac{1}{2} \log_e \frac{1 + x}{1 - x} \quad \mathrm{for} \; |x| &amp;amp;lt; 1 $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>beta -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/beta.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/beta.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/beta.md b/reference/cmath/beta.md
index ef26eca01..16ca1ded5 100644
--- a/reference/cmath/beta.md
+++ b/reference/cmath/beta.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float betaf(float x, float y);
-double beta(double x, double y);
-long double betal(long double x, long double y);
+  double
+    beta(double x,
+         double y);              // (1) C++17
+  floating-point-type
+    beta(floating-point-type x,
+         floating-point-type y); // (1) C++23
+
+  Promoted
+    beta(Arithmetic1 x,
+         Arithmetic2 y);         // (2) C++17
+
+  float
+    betaf(float x,
+          float y);              // (3) C++17
+
+  long double
+    betal(long double x,
+          long double y);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 ベータ関数 (beta function) を求める。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `x`, `y` のベータ関数
@@ -26,6 +51,10 @@ $$
 を返す。$\Gamma$ はガンマ関数 ([`tgamma`](tgamma.md))。
 
 
+## 備考
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cmath&amp;gt;
@@ -71,3 +100,6 @@ $ |\mathrm{B}(x, y)| = \exp(\ln |\Gamma(x) \Gamma(y) / \Gamma(x + y)|)) $
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbrt -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cbrt.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/cbrt.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cbrt.md b/reference/cmath/cbrt.md
index c6c171a6d..f5c879de3 100644
--- a/reference/cmath/cbrt.md
+++ b/reference/cmath/cbrt.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float cbrt(float x);
-  double cbrt(double x);
-  long double cbrt(long double x);
+  float cbrt(float x);              // (1) C++11からC++20まで
+  double cbrt(double x);            // (2) C++11からC++20まで
+  long double cbrt(long double x);  // (3) C++11からC++20まで
 
-  double cbrt(Integral x);
+  floating-point-type
+    cbrt(floating-point-type x);    // (4) C++23
 
-  float cbrtf(float x);             // C++17 から
-  long double cbrtl(long double x); // C++17 から
+  double cbrt(Integral x);          // (5) C++11
+
+  float cbrtf(float x);             // (6) C++17
+  long double cbrtl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -22,6 +25,14 @@ namespace std {
 ## 概要
 算術型の実数の立方根を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の実数の立方根を返す。
@@ -30,8 +41,9 @@ namespace std {
 ## 備考
 - $$ f(x) = \sqrt[3] x $$
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
-	- `x = ±0` の場合、戻り値は `±0` となる。
-	- `x = ±∞` の場合、戻り値は `±∞` となる。
+    - `x = ±0` の場合、戻り値は `±0` となる。
+    - `x = ±∞` の場合、戻り値は `±∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -78,3 +90,6 @@ cbrt(-1.0) = -1.000000
 - GCC 4.6.1 以上
 
 
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>comp_ellint_1 -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/comp_ellint_1.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/comp_ellint_1.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/comp_ellint_1.md b/reference/cmath/comp_ellint_1.md
index 96c669a22..8969a506b 100644
--- a/reference/cmath/comp_ellint_1.md
+++ b/reference/cmath/comp_ellint_1.md
@@ -7,15 +7,35 @@
 
 ```cpp
 namespace std {
-  float comp_ellint_1f(float k);
-  double comp_ellint_1(double k);
-  long double comp_ellint_1l(long double k);
+  double
+    comp_ellint_1(double k);              // (1) C++17
+  floating-point-type
+    comp_ellint_1(floating-point-type k); // (1) C++23
+
+  Promoted
+    comp_ellint_1(Arithmetic k);          // (1) C++17
+
+  float
+    comp_ellint_1f(float k);              // (2) C++17
+
+  long double
+    comp_ellint_1l(long double k);        // (3) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
+
 
 ## 概要
 第一種完全楕円積分 (complete elliptic integral of the first kind) を計算する。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `k` の第一種完全楕円積分
@@ -27,6 +47,10 @@ $$
 $ F(k, \phi) $ は第一種不完全楕円積分 ([`ellint_1`](ellint_1.md))。
 
 
+## 備考
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cmath&amp;gt;
@@ -69,7 +93,7 @@ double pendulum_period_shift(double theta) {
 
 int main() {
   std::cout &amp;lt;&amp;lt; std::setprecision(16);
-  
+
   for (const auto theta : {15.0, 30.0, 45.0, 60.0}) {
     const auto angle = theta * pi / 180.0;
     std::cout &amp;lt;&amp;lt; theta &amp;lt;&amp;lt; &amp;#34; [°] : &amp;#34;;
@@ -104,8 +128,15 @@ int main() {
 GCC 7.1.0–8.0.0 では定義域エラーが発生したときに [`std::numeric_limits::quiet_NaN`](/reference/limits/numeric_limits/quiet_nan.md) を返す。
 
 
+## 実装例
+### 級数
+$$
+K(k) = \frac{\pi}{2} \sum_{n=0}^\infty \left[ \frac{(2n-1)!!}{(2n)!!} \right]^2 k^{2n}
+$$
+
+
 ## 関連項目
-* 第一種不完全楕円積分 [`ellint_1`](ellint_1.md)
+- 第一種不完全楕円積分 [`ellint_1`](ellint_1.md)
 
 
 ## 参照
@@ -113,9 +144,5 @@ GCC 7.1.0–8.0.0 では定義域エラーが発生したときに [`std::numeri
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
 - [振り子 - Wikipedia](https://ja.wikipedia.org/wiki/振り子)
-
-## 実装例
-### 級数
-$$
-K(k) = \frac{\pi}{2} \sum_{n=0}^\infty \left[ \frac{(2n-1)!!}{(2n)!!} \right]^2 k^{2n}
-$$
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>comp_ellint_2 -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/comp_ellint_2.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/comp_ellint_2.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/comp_ellint_2.md b/reference/cmath/comp_ellint_2.md
index 5cfcb4551..8768d2306 100644
--- a/reference/cmath/comp_ellint_2.md
+++ b/reference/cmath/comp_ellint_2.md
@@ -7,15 +7,34 @@
 
 ```cpp
 namespace std {
-float comp_ellint_2f(float k);
-double comp_ellint_2(double k);
-long double comp_ellint_2l(long double k);
+  double
+    comp_ellint_2(double k);              // (1) C++17
+  floating-point-type
+    comp_ellint_2(floating-point-type k); // (1) C++23
+
+  Promoted
+    comp_ellint_2(Arithmetic k);          // (2) C++17
+
+  float
+    comp_ellint_2f(float k);              // (3) C++17
+
+  long double
+    comp_ellint_2l(long double k);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic[italic]
 
 ## 概要
 第二種完全楕円積分 (complete elliptic integral of the second kind) を計算する。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `k` の第二種完全楕円積分
@@ -27,6 +46,10 @@ $$
 $ E(k, \phi) $ は第二種不完全楕円積分 ([`ellint_2`](ellint_2.md))。
 
 
+## 備考
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+
+
 ## 例
 ```cpp example
 #include &amp;lt;cmath&amp;gt;
@@ -59,18 +82,20 @@ comp_ellint_2(1)   = 1
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 実装例
+### 級数
+$$
+E(k) = - \frac{\pi}{2} \sum_{n=0}^\infty \frac{1}{2n-1} \left[ \frac{(2n-1)!!}{(2n)!!} \right]^2 k^{2n}
+$$
+
+
 ## 関連項目
-* 第二種不完全楕円積分 [`ellint_2`](ellint_2.md)
+- 第二種不完全楕円積分 [`ellint_2`](ellint_2.md)
 
 
 ## 参照
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
-
-
-## 実装例
-### 級数
-$$
-E(k) = - \frac{\pi}{2} \sum_{n=0}^\infty \frac{1}{2n-1} \left[ \frac{(2n-1)!!}{(2n)!!} \right]^2 k^{2n}
-$$
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>comp_ellint_3 -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/comp_ellint_3.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/comp_ellint_3.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/comp_ellint_3.md b/reference/cmath/comp_ellint_3.md
index fa89db92e..3a234e503 100644
--- a/reference/cmath/comp_ellint_3.md
+++ b/reference/cmath/comp_ellint_3.md
@@ -7,15 +7,40 @@
 
 ```cpp
 namespace std {
-float comp_ellint_3f(float k, float nu);
-double comp_ellint_3(double k, double nu);
-long double comp_ellint_3l(long double k, long double nu);
+  double
+    comp_ellint_3(double k,
+                  double nu);              // (1) C++17
+  floating-point-type
+    comp_ellint_3(floating-point-type k,
+                  floating-point-type nu); // (1) C++23
+
+  Promoted
+    comp_ellint_3(Arithmetic1 k,
+                  Arithmetic2 nu);         // (2) C++17
+
+  float
+    comp_ellint_3f(float k,
+                   float nu);              // (3) C++17
+
+  long double
+    comp_ellint_3l(long double k,
+                   long double nu);        // (4) C++17
 }
 ```
+* Promoted[italic]
+* Arithmetic1[italic]
+* Arithmetic2[italic]
 
 ## 概要
 第三種完全楕円積分 (complete elliptic integral of the third kind) を計算する。
 
+- (1) :
+    - C++17 : `double`に対するオーバーロード
+    - C++23 : 浮動小数点数型に対するオーバーロード
+- (2) : 算術型に対するオーバーロード (対応する大きい方の精度の浮動小数点数型にキャストして計算される)
+- (3) : `float`型規定
+- (4) : `long double`型規定
+
 
 ## 戻り値
 引数 `k`, `nu` の第三種完全楕円積分
@@ -25,11 +50,13 @@ $$
 \quad \text{for } |k| \le 1
 $$
 を返す。
+
 $ \Pi(\nu, k) $ は第三種不完全楕円積分 ([`ellint_3`](ellint_3.md))。
 
 
 ## 備考
-$\Pi(0, k) = K(k)$ (第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md))。
+- $\Pi(0, k) = K(k)$ (第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md))
+- (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -100,3 +127,5 @@ GCC 7.1.0–8.0.0 では
 - [N3060 JTC1.22.29124 Programming Language C++ — Special Math Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3060.pdf)
 - [WG21 P0226R1 Mathematical Special Functions for C++17, v5](https://isocpp.org/files/papers/P0226R1.pdf)
 - [ISO/IEC 29124:2010 Information technology -- Programming languages, their environments and system software interfaces -- Extensions to the C++ Library to support mathematical special functions](https://www.iso.org/standard/50511.html)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cos -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cos.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/cos.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cos.md b/reference/cmath/cos.md
index 2f8306873..0f68b806d 100644
--- a/reference/cmath/cos.md
+++ b/reference/cmath/cos.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float cos(float x);
-  double cos(double x);
-  long double cos(long double x);
+  float cos(float x);              // (1) C++03からC++20まで
+  double cos(double x);            // (2) C++03からC++20まで
+  long double cos(long double x);  // (3) C++03からC++20まで
 
-  double cos(Integral x);          // C++11 から
+  floating-point-type
+    cos(floating-point-type x);    // (4) C++23
 
-  float cosf(float x);             // C++17 から
-  long double cosl(long double x); // C++17 から
+  double cos(Integral x);          // (5) C++11
+
+  float cosf(float x);             // (6) C++17
+  long double cosl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 算術型の余弦（コサイン）を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の余弦を返す(`x`の単位はラジアン)。
@@ -29,8 +40,9 @@ namespace std {
 ## 備考
 - $$ f(x) = \cos x $$
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `1` となる。
-	- `x = ±∞` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+    - `x = ±0` の場合、戻り値は `1` となる。
+    - `x = ±∞` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -109,3 +121,8 @@ $$ \cos x = \sum_{n = 0}^{\infty} \frac{(-1)^n}{(2n)!} x^{2n} \quad \mathrm{for~
 
 ## 関連項目
 - [`std::numbers::pi`](/reference/numbers/pi.md)
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cosh -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cosh.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/cosh.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cosh.md b/reference/cmath/cosh.md
index 0cb1d97bf..3218f93c7 100644
--- a/reference/cmath/cosh.md
+++ b/reference/cmath/cosh.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float cosh(float x);
-  double cosh(double x);
-  long double cosh(long double x);
+  float cosh(float x);              // (1) C++03からC++20まで
+  double cosh(double x);            // (2) C++03からC++20まで
+  long double cosh(long double x);  // (3) C++03からC++20まで
 
-  double cosh(Integral x);          // C++11 から
+  floating-point-type
+    cosh(floating-point-type x);    // (4) C++23
 
-  float coshf(float x);             // C++17 から
-  long double coshl(long double x); // C++17 から
+  double cosh(Integral x);          // (5) C++11
+
+  float coshf(float x);             // (6) C++17
+  long double coshl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 算術型の双曲線余弦（ハイパボリックコサイン）を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の双曲線余弦を返す。
@@ -32,8 +43,9 @@ namespace std {
 - $$ f(x) = \cosh x $$
 - オーバーフローエラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `1` となる。
-	- `x = ±∞` の場合、戻り値は `+∞` となる。
+    - `x = ±0` の場合、戻り値は `1` となる。
+    - `x = ±∞` の場合、戻り値は `+∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -78,3 +90,8 @@ cosh(1.0)  = 1.543081
 以下のマクローリン級数を適当な次数で打ち切ることで近似的に求めることができる。
 
 $$ \cosh x = \sum_{n = 0}^{\infty} \frac{1}{(2n)!} x^{2n} \quad \mathrm{for~all} \; x $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erf -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/erf.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/erf.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/erf.md b/reference/cmath/erf.md
index 215c0bdfc..138fa4d5f 100644
--- a/reference/cmath/erf.md
+++ b/reference/cmath/erf.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float erf(float x);
-  double erf(double x);
-  long double erf(long double x);
+  float erf(float x);              // (1) C++11からC++20まで
+  double erf(double x);            // (2) C++11からC++20まで
+  long double erf(long double x);  // (3) C++11からC++20まで
 
-  double erf(Integral x);
+  floating-point-type
+    erf(floating-point-type x);    // (4) C++23
 
-  float erff(float x);             // C++17 から
-  long double erfl(long double x); // C++17 から
+  double erf(Integral x);          // (5) C++11
+
+  float erff(float x);             // (6) C++17
+  long double erfl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -22,6 +25,14 @@ namespace std {
 ## 概要
 算術型の誤差関数 (error function) を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の誤差関数を返す。
@@ -33,6 +44,7 @@ namespace std {
     - `x = ±0` の場合、戻り値は `±0` となる。
     - `x = ±∞` の場合、戻り値は `±1` となる。
 - 平均μ, 標準偏差σの正規分布の累積分布関数は $$\frac{1}{2} \left( 1 + \mathrm{erf} ~ \frac{x - \mu}{\sqrt{2} \sigma} \right)$$ で与えられる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -75,3 +87,8 @@ erf(+∞) = 1.000000
 特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
 
 - GCC 4.6.1 以上
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erfc -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/erfc.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/erfc.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/erfc.md b/reference/cmath/erfc.md
index 4effef62c..8f1698870 100644
--- a/reference/cmath/erfc.md
+++ b/reference/cmath/erfc.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float erfc(float x);
-  double erfc(double x);
-  long double erfc(long double x);
+  float erfc(float x);              // (1) C++11からC++20まで
+  double erfc(double x);            // (2) C++11からC++20まで
+  long double erfc(long double x);  // (3) C++11からC++20まで
 
-  double erfc(Integral x);
+  floating-point-type
+    erfc(floating-point-type x);    // (4) C++23
 
-  float erfcf(float x);             // C++17 から
-  long double erfcl(long double x); // C++17 から
+  double erfc(Integral x);          // (5) C++11
+
+  float erfcf(float x);             // (6) C++17
+  long double erfcl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -22,6 +25,14 @@ namespace std {
 ## 概要
 算術型の相補誤差関数 (complementary error function) を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の相補誤差関数を返す。
@@ -33,6 +44,7 @@ namespace std {
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
     - `x = -∞` の場合、戻り値は `2` となる。
     - `x = +∞` の場合、戻り値は `+0` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -75,3 +87,8 @@ erfc(+∞) = 0.000000
 特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
 
 - GCC 4.6.1 以上
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exp -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/exp.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/exp.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/exp.md b/reference/cmath/exp.md
index b24bb110e..1d080b751 100644
--- a/reference/cmath/exp.md
+++ b/reference/cmath/exp.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float exp(float x);
-  double exp(double x);
-  long double exp(long double x);
+  float exp(float x);              // (1) C++03からC++20まで
+  double exp(double x);            // (2) C++03からC++20まで
+  long double exp(long double x);  // (3) C++03からC++20まで
 
-  double exp(Integral x);          // C++11 から
+  floating-point-type
+    exp(floating-point-type x);    // (4) C++23
 
-  float expf(float x);             // C++17 から
-  long double expl(long double x); // C++17 から
+  double exp(Integral x);          // (5) C++11
+
+  float expf(float x);             // (6) C++17
+  long double expl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 `e` (ネイピア数) を底とする指数関数を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 `e` (ネイピア数) の `x` 乗を返す。
@@ -32,9 +43,10 @@ namespace std {
 - $$ f(x) = e^x $$
 - オーバーフローエラー、アンダーフローエラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `1` となる。
-	- `x = -∞` の場合、戻り値は `+0` となる。
-	- `x = +∞` の場合、戻り値は `+∞` となる。
+    - `x = ±0` の場合、戻り値は `1` となる。
+    - `x = -∞` の場合、戻り値は `+0` となる。
+    - `x = +∞` の場合、戻り値は `+∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -83,3 +95,8 @@ exp(-∞) = 0.000000
 以下のマクローリン級数を適当な次数で打ち切ることで近似的に求めることができる。
 
 $$ e^x = \sum_{n = 0}^{\infty} \frac{x^n}{n!} \quad \mathrm{for~all} \; x $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exp2 -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/exp2.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/exp2.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/exp2.md b/reference/cmath/exp2.md
index 1819fe338..44b28dc80 100644
--- a/reference/cmath/exp2.md
+++ b/reference/cmath/exp2.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float exp2(float x);
-  double exp2(double x);
-  long double exp2(long double x);
+  float exp2(float x);              // (1) C++11からC++20まで
+  double exp2(double x);            // (2) C++11からC++20まで
+  long double exp2(long double x);  // (3) C++11からC++20まで
 
-  double exp2(Integral x);          // C++11 から
+  floating-point-type
+    exp2(floating-point-type x);    // (4) C++23
 
-  float exp2f(float x);             // C++17 から
-  long double exp2l(long double x); // C++17 から
+  double exp2(Integral x);          // (5) C++11
+
+  float exp2f(float x);             // (6) C++17
+  long double exp2l(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -22,6 +25,14 @@ namespace std {
 ## 概要
 2 を底とする指数関数を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 2 の `x` 乗を返す。
@@ -33,9 +44,10 @@ namespace std {
 - $$ f(x) = 2^x $$
 - オーバーフローエラー、アンダーフローエラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - 処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `1` となる。
-	- `x = -∞` の場合、戻り値は `+0` となる。
-	- `x = +∞` の場合、戻り値は `+∞` となる。
+    - `x = ±0` の場合、戻り値は `1` となる。
+    - `x = -∞` の場合、戻り値は `+0` となる。
+    - `x = +∞` の場合、戻り値は `+∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -104,3 +116,8 @@ namespace std {
 `exp` があれば、以下のように変換することで求められる。
 
 $$ 2^x = e^{x \log_e 2} \quad \mathrm{for~all} \; x $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expm1 -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/expm1.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/expm1.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/expm1.md b/reference/cmath/expm1.md
index b9624739b..cf40c790d 100644
--- a/reference/cmath/expm1.md
+++ b/reference/cmath/expm1.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float expm1(float x);
-  double expm1(double x);
-  long double expm1(long double x);
+  float expm1(float x);              // (1) C++11からC++20まで
+  double expm1(double x);            // (2) C++11からC++20まで
+  long double expm1(long double x);  // (3) C++11からC++20まで
 
-  double expm1(Integral x);          // C++11 から
+  floating-point-type
+    expm1(floating-point-type x);    // (4) C++23
 
-  float expm1f(float x);             // C++17 から
-  long double expm1l(long double x); // C++17 から
+  double expm1(Integral x);          // (5) C++11
+
+  float expm1f(float x);             // (6) C++17
+  long double expm1l(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -24,6 +27,14 @@ namespace std {
 
 引数が 0 近傍において `exp(x)-1` より高精度な計算になる。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 `e` (ネイピア数) の `x` 乗から 1 を引いた値を返す。
@@ -35,9 +46,9 @@ namespace std {
 - $$ f(x) = e^x - 1 $$
 - オーバーフローエラー、アンダーフローエラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - 処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
-	- `x = -∞` の場合、戻り値は `-1` となる。
-	- `x = +∞` の場合、戻り値は `+∞` となる。
+    - `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
+    - `x = -∞` の場合、戻り値は `-1` となる。
+    - `x = +∞` の場合、戻り値は `+∞` となる。
 
 
 ## 例
@@ -81,3 +92,7 @@ expm1(-∞)  = -1.000000
 
 - GCC 4.6.1 以上
 
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hypot -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/hypot.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/hypot.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/hypot.md b/reference/cmath/hypot.md
index 041d83f2c..340bddcd1 100644
--- a/reference/cmath/hypot.md
+++ b/reference/cmath/hypot.md
@@ -7,20 +7,35 @@
 
 ```cpp
 namespace std {
-  float hypot(float x, float y);                                  // (1)
-  double hypot(double x, double y);                               // (2)
-  long double hypot(long double x, long double y);                // (3)
-
-  Promoted hypot(Arithmetic1 x, Arithmetic2 y);                   // (4)
-
-  float hypotf(float x, float y);                                 // (5) C++17 から
-  long double hypotl(long double x, long double y);               // (6) C++17 から
-
-  double hypot(double x, double y, double z);                     // (7) C++17 から
-  float hypot(float x, float y, float z);                         // (8) C++17 から
-  long double hypot(long double x, long double y, long double z); // (9) C++17 から
-
-  Promoted hypot(Arithmetic1 x, Arithmetic2 y, Arithmetic3 z);    // (10) C++17 から
+  float hypot(float x, float y);                    // (1) C++11からC++20まで
+  double hypot(double x, double y);                 // (2) C++11からC++20まで
+  long double hypot(long double x, long double y);  // (3) C++11からC++20まで
+
+  floating-point-type
+    hypot(floating-point-type x,
+          floating-point-type y);                   // (4) C++23
+
+  Promoted hypot(Arithmetic1 x, Arithmetic2 y);     // (5) C++11
+
+  float hypotf(float x, float y);                   // (6) C++17
+  long double hypotl(long double x, long double y); // (7) C++17
+
+  float hypot(float x, float y, float z);           // (8) C++17からC++20まで
+  double hypot(double x, double y, double z);       // (9) C++17からC++20まで
+  long double
+    hypot(long double x,
+          long double y,
+          long double z);                           // (10) C++17からC++20まで
+
+  floating-point-type
+    hypot(floating-point-type x,
+          floating-point-type y,
+          floating-point-type z);                   // (11) C++23
+
+  Promoted
+    hypot(Arithmetic1 x,
+          Arithmetic2 y,
+          Arithmetic3 z);                           // (12) C++17
 }
 ```
 * Promoted[italic]
@@ -43,34 +58,37 @@ $$ f(x, y) = \sqrt{x^2 + y^2} $$
 
 各オーバーロードの概要は、以下の通りである：
 
-- (1) : `double`型について、2引数の平方和の平方根を求める
-- (2) : `float`型について、2引数の平方和の平方根を求める
-- (3) : `long double`型について、2引数の平方和の平方根を求める
-- (4) : 浮動小数点数型以外の算術型について、2引数の平方和の平方根を求める
-- (5) : `float`型について、2引数の平方和の平方根を求める
-- (6) : `long double`型について、2引数の平方和の平方根を求める
-- (7) : `double`型について、3引数の平方和の平方根を求める
-- (8) : `float`型について、3引数の平方和の平方根を求める
-- (9) : `long double`型について、3引数の平方和の平方根を求める
-- (10) : 浮動小数点数型以外の算術型について、3引数の平方和の平方根を求める
+- (1) : 2引数版の`float`に対するオーバーロード
+- (2) : 2引数版の`double`に対するオーバーロード
+- (3) : 2引数版の`long double`に対するオーバーロード
+- (4) : 2引数版の浮動小数点数型に対するオーバーロード
+- (5) : 2引数版の算術型に対するオーバーロード (大きい精度にキャストして計算される。整数は`double`で計算される)
+- (6) : 2引数版の`float`型規定
+- (7) : 2引数版の`long double`型規定
+- (8) : 3引数版の`float`に対するオーバーロード
+- (9) : 3引数版の`double`に対するオーバーロード
+- (10) : 3引数版の`long double`に対するオーバーロード
+- (11) : 3引数版の浮動小数点数型に対するオーバーロード
+- (12) : 3引数版の算術型に対するオーバーロード (大きい精度にキャストして計算される。整数は`double`で計算される)
 
 
 ## 戻り値
-- (1)-(6) : 引数 `x` と引数 `y` の平方和の平方根を返す。
-- (7)-(10) : 引数 `x` 、引数 `y` 、引数 `z` の平方和の平方根を返す。
+- (1)-(7) : 引数 `x` と引数 `y` の平方和の平方根を返す。
+- (8)-(12) : 引数 `x` 、引数 `y` 、引数 `z` の平方和の平方根を返す。
 
 オーバーフローエラー、アンダーフローエラーが発生する可能性がある。
 
 
 ## 備考
-- (1)-(6) : $$ f(x, y) = \sqrt{x^2 + y^2} $$
-- (7)-(10) : $$ f(x, y, z) = \sqrt{x^2 + y^2 + z^2} $$
+- (1)-(7) : $$ f(x, y) = \sqrt{x^2 + y^2} $$
+- (8)-(12) : $$ f(x, y, z) = \sqrt{x^2 + y^2 + z^2} $$
 - 概要の「余計なオーバーフロー、アンダーフローを起こさない」とは、たとえ &amp;lt;code&amp;gt;x&amp;lt;sup&amp;gt;2&amp;lt;/sup&amp;gt;&amp;lt;/code&amp;gt; が戻り値型の範囲を超えていても、結果が戻り値型の範囲に収まるのであればオーバーフローしないで正しい結果を返す、と言う事である。
 - オーバーフローエラー、アンダーフローエラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - 処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `hypot(x, y)` と `hypot(y, x)` と `hypot(x, -y)` は等価である。
-	- `hypot(x, ±0)` は、[`fabs`](fabs.md)`(x)` と等価である。
-	- `hypot(±∞, y)` の戻り値は、たとえ `y` が NaN の場合でも `+∞` となる。
+    - `hypot(x, y)` と `hypot(y, x)` と `hypot(x, -y)` は等価である。
+    - `hypot(x, ±0)` は、[`fabs`](fabs.md)`(x)` と等価である。
+    - `hypot(±∞, y)` の戻り値は、たとえ `y` が NaN の場合でも `+∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合、(8)、(9)、(10)が(11)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -161,14 +179,14 @@ int main()
 - [Clang](/implementation.md#clang): 2.9, 3.1
 - [GCC](/implementation.md#gcc): 4.3.4, 4.4.5, 4.5.2, 4.6.1, 4.7.0
 - [Visual C++](/implementation.md#visual_cpp): 2012, 2013, 2015, 2017
-	- 2002, 2003, 2005, 2008, 2010およびそれ以降では、`&amp;lt;math.h&amp;gt;`でグローバル名前空間に以下が定義されている。
-		- 仮引数・戻り値が`float`型の`_hypotf`関数が定義されている。
-		- 仮引数・戻り値が`double`型の`hypot`関数と`_hypot`関数が定義されている。
-		- 仮引数・戻り値が`long double`型の`_hypotl`マクロが定義されている。
-	- 2010, 2012およびそれ以降では、上記に加え`&amp;lt;math.h&amp;gt;`でグローバル名前空間に以下が定義されている。
-		- 仮引数・戻り値が`float`型の`hypotf`関数が定義されている。
-		- 仮引数・戻り値が`long double`型の`hypotl`マクロが定義されている。
-	- 2013以降、`_hypotl`と`hypotl`は関数として定義されている。
+    - 2002, 2003, 2005, 2008, 2010およびそれ以降では、`&amp;lt;math.h&amp;gt;`でグローバル名前空間に以下が定義されている。
+        - 仮引数・戻り値が`float`型の`_hypotf`関数が定義されている。
+        - 仮引数・戻り値が`double`型の`hypot`関数と`_hypot`関数が定義されている。
+        - 仮引数・戻り値が`long double`型の`_hypotl`マクロが定義されている。
+    - 2010, 2012およびそれ以降では、上記に加え`&amp;lt;math.h&amp;gt;`でグローバル名前空間に以下が定義されている。
+        - 仮引数・戻り値が`float`型の`hypotf`関数が定義されている。
+        - 仮引数・戻り値が`long double`型の`hypotl`マクロが定義されている。
+    - 2013以降、`_hypotl`と`hypotl`は関数として定義されている。
 
 #### 備考
 特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
@@ -184,3 +202,5 @@ $$ \sqrt{x^2 + y^2} = \left| u \right| \sqrt{1 + \left( \frac{v}{u} \right)^2} \
 
 ## 参照
 - [P0030R1 Proposal to Introduce a 3-Argument Overload to `std::hypot`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0030r1.pdf)
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lgamma -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/lgamma.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/lgamma.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/lgamma.md b/reference/cmath/lgamma.md
index fbbfd3d71..ace61255b 100644
--- a/reference/cmath/lgamma.md
+++ b/reference/cmath/lgamma.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float lgamma(float x);
-  double lgamma(double x);
-  long double lgamma(long double x);
+  float lgamma(float x);              // (1) C++11からC++20まで
+  double lgamma(double x);            // (2) C++11からC++20まで
+  long double lgamma(long double x);  // (3) C++11からC++20まで
 
-  double lgamma(Integral x);
+  floating-point-type
+    lgamma(floating-point-type x);    // (4) C++23
 
-  float lgammaf(float x);             // C++17 から
-  long double lgammal(long double x); // C++17 から
+  double lgamma(Integral x);          // (5) C++11
+
+  float lgammaf(float x);             // (6) C++17
+  long double lgammal(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -22,6 +25,14 @@ namespace std {
 ## 概要
 ガンマ関数の絶対値の自然対数を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` のガンマ関数の絶対値の自然対数を返す。
@@ -36,6 +47,7 @@ namespace std {
     [`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
     - `x = -∞` の場合、戻り値は `+∞` となる。
     - `x = +∞` の場合、戻り値は `+∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -82,3 +94,8 @@ lgamma(+∞)  = inf
 特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
 
 - GCC 4.6.1 以上
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>llrint -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/llrint.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/llrint.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/llrint.md b/reference/cmath/llrint.md
index d193710de..ad4bfdedf 100644
--- a/reference/cmath/llrint.md
+++ b/reference/cmath/llrint.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  long long llrint(float x);
-  long long llrint(double x);
-  long long llrint(long double x);
+  long long llrint(float x);        // (1) C++11からC++20まで
+  long long llrint(double x);       // (2) C++11からC++20まで
+  long long llrint(long double x);  // (3) C++11からC++20まで
 
-  long long llrint(Integral x);
+  long long
+    llrint(floating-point-type x);  // (4) C++23
 
-  long long llrintf(float x);       // C++17 から
-  long long llrintl(long double x); // C++17 から
+  long long llrint(Integral x);     // (5) C++11
+
+  long long llrintf(float x);       // (6) C++17
+  long long llrintl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 引数 `x` を現在の丸めモードで `long long` に丸めた値を得る。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` を現在の丸めモードで `long long` に丸めた値
@@ -29,12 +40,13 @@ namespace std {
 ## 備考
 - 本関数は、C99 の規格にある `llrint`（より正確には `math.h` ヘッダの `llrint`、`llrintf`、`llrintl` の 3 つ。それぞれ C++ の `double`、`float`、`long double` バージョンに相当）と等価である。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- 丸めの結果が `long long` で表現不可能な場合、無効演算の浮動小数点例外（[`FE_INVALID`](../cfenv/fe_invalid.md)）が発生する。
-	- 他の例外が発生しておらず、引数 `x` が戻り値と異なってる場合、不正確結果の浮動小数点例外（[`FE_INEXACT`](../cfenv/fe_inexact.md)）が発生する。
+    - 丸めの結果が `long long` で表現不可能な場合、無効演算の浮動小数点例外（[`FE_INVALID`](../cfenv/fe_invalid.md)）が発生する。
+    - 他の例外が発生しておらず、引数 `x` が戻り値と異なってる場合、不正確結果の浮動小数点例外（[`FE_INEXACT`](../cfenv/fe_inexact.md)）が発生する。
 - C99 では、丸めモードや浮動小数点例外へのアクセスには `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
-	なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
+    なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は四捨五入ではなく、最近接偶数への丸めであることに注意。（例を参照）  
-	四捨五入が必要であれば、[`lround`](lround.md) を使用すること。（ただし、[`lround`](lround.md) は本関数と異なり、ISO IEC 60559 に準拠していても [`FE_INEXACT`](../cfenv/fe_inexact.md) が発生するか否かは処理系定義である）  
+    四捨五入が必要であれば、[`lround`](lround.md) を使用すること。（ただし、[`lround`](lround.md) は本関数と異なり、ISO IEC 60559 に準拠していても [`FE_INEXACT`](../cfenv/fe_inexact.md) が発生するか否かは処理系定義である）  
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -149,3 +161,8 @@ llrint(9.22337e+18) = -9223372036854775808, FE_INEXACT = false, FE_INVALID = tru
 - [GCC](/implementation.md#gcc): 4.3.6, 4.4.7, 4.5.4, 4.6.4, 4.7.3, 4.8.1, 4.8.2, 4.9.0, 4.9.1, 4.9.2, 5.1.0, 5.2.0, 6.0.0
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2013, 2015
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/log.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log.md b/reference/cmath/log.md
index b0546b9bb..de3f1ebe7 100644
--- a/reference/cmath/log.md
+++ b/reference/cmath/log.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float log(float x);
-  double log(double x);
-  long double log(long double x);
+  float log(float x);              // (1) C++03からC++20まで
+  double log(double x);            // (2) C++03からC++20まで
+  long double log(long double x);  // (3) C++03からC++20まで
 
-  double log(Integral x);          // C++11 から
+  floating-point-type
+    log(floating-point-type x);    // (4) C++23
 
-  float logf(float x);             // C++17 から
-  long double logl(long double x); // C++17 から
+  double log(Integral x);          // (5) C++11
+
+  float logf(float x);             // (6) C++17
+  long double logl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 `e` (ネイピア数) を底とする自然対数を求める。logは「logarithm (対数)」の略である。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の `e` (ネイピア数) を底とする自然対数を返す。
@@ -32,10 +43,11 @@ namespace std {
 - $$ f(x) = \log_e x $$
 - 定義域エラー、極エラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `-∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
-	- `x = 1` の場合、戻り値は `+0` となる。
-	- `x &amp;lt; 0` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-	- `x = +∞` の場合、戻り値は `+∞` となる。
+    - `x = ±0` の場合、戻り値は `-∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
+    - `x = 1` の場合、戻り値は `+0` となる。
+    - `x &amp;lt; 0` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+    - `x = +∞` の場合、戻り値は `+∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -85,3 +97,8 @@ log(-1.0) = nan
 以下のマクローリン級数を適当な次数で打ち切ることで近似的に求めることができる。
 
 $$ \log_e (1 + x) = \sum_{n = 1}^{\infty} \frac{(-1)^{n + 1}}{n} x^n \quad \mathrm{for} \; -1 &amp;amp;lt; x \le 1 $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log10 -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log10.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/log10.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log10.md b/reference/cmath/log10.md
index b50a95280..b2abb65ab 100644
--- a/reference/cmath/log10.md
+++ b/reference/cmath/log10.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float log10(float x);
-  double log10(double x);
-  long double log10(long double x);
+  float log10(float x);              // (1) C++03からC++20まで
+  double log10(double x);            // (2) C++03からC++20まで
+  long double log10(long double x);  // (3) C++03からC++20まで
 
-  double log10(Integral x);          // C++11 から
+  floating-point-type
+    log10(floating-point-type x);    // (4) C++23
 
-  float log10f(float x);             // C++17 から
-  long double log10l(long double x); // C++17 から
+  double log10(Integral x);          // (5) C++11
+
+  float log10f(float x);             // (6) C++17
+  long double log10l(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 10 を底とする常用対数を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の 10 を底とする常用対数を返す。
@@ -32,10 +43,11 @@ namespace std {
 - $$ f(x) = \log_{10} x $$
 - 定義域エラー、極エラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `-∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
-	- `x = 1` の場合、戻り値は `+0` となる。
-	- `x &amp;lt; 0` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-	- `x = +∞` の場合、戻り値は `+∞` となる。
+    - `x = ±0` の場合、戻り値は `-∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
+    - `x = 1` の場合、戻り値は `+0` となる。
+    - `x &amp;lt; 0` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+    - `x = +∞` の場合、戻り値は `+∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -118,3 +130,8 @@ log10(100000000.000000) : 8.000000
 [`log`](log.md) があれば、以下のように変換することで求められる。
 
 $$ \log_{10} x = \frac{\log_e x}{\log_e 10}$$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log1p -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log1p.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/log1p.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log1p.md b/reference/cmath/log1p.md
index cbd9e8120..4cabef440 100644
--- a/reference/cmath/log1p.md
+++ b/reference/cmath/log1p.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float log1p(float x);
-  double log1p(double x);
-  long double log1p(long double x);
+  float log1p(float x);              // (1) C++11からC++20まで
+  double log1p(double x);            // (2) C++11からC++20まで
+  long double log1p(long double x);  // (3) C++11からC++20まで
 
-  double log1p(Integral x);
+  floating-point-type
+    log1p(floating-point-type x);    // (4) C++23
 
-  float log1pf(float x);             // C++17 から
-  long double log1pl(long double x); // C++17 から
+  double log1p(Integral x);          // (5) C++11
+
+  float log1pf(float x);             // (6) C++17
+  long double log1pl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -24,6 +27,14 @@ namespace std {
 
 引数が 0 近傍において [`log`](log.md)`(1 + x)` より高精度な計算になる。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` に対して `1 + x` の `e` (ネイピア数) を底とする自然対数を返す。
@@ -35,10 +46,11 @@ namespace std {
 - $$ f(x) = \log_e (1 + x) $$
 - 定義域エラー、極エラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - 処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `±0` となる。
-	- `x = -1` の場合、戻り値は `-∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
-	- `x &amp;lt; -1` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-	- `x = +∞` の場合、戻り値は `+∞` となる。
+    - `x = ±0` の場合、戻り値は `±0` となる。
+    - `x = -1` の場合、戻り値は `-∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
+    - `x &amp;lt; -1` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+    - `x = +∞` の場合、戻り値は `+∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -85,3 +97,8 @@ log1p(-2.0) = -nan
 特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
 
 - GCC 4.6.1 以上
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log2 -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log2.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/log2.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log2.md b/reference/cmath/log2.md
index 082925fd5..a2e051fce 100644
--- a/reference/cmath/log2.md
+++ b/reference/cmath/log2.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float log2(float x);
-  double log2(double x);
-  long double log2(long double x);
+  float log2(float x);              // (1) C++11からC++20まで
+  double log2(double x);            // (2) C++11からC++20まで
+  long double log2(long double x);  // (3) C++11からC++20まで
 
-  double log2(Integral x);
+  floating-point-type
+    log2(floating-point-type x);    // (4) C++23
 
-  float log2f(float x);             // C++17 から
-  long double log2l(long double x); // C++17 から
+  double log2(Integral x);          // (5) C++11
+
+  float log2f(float x);             // (6) C++17
+  long double log2l(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -22,6 +25,14 @@ namespace std {
 ## 概要
 2 を底とする二進対数を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の 2 を底とする二進対数を返す。
@@ -33,10 +44,11 @@ namespace std {
 - $$ f(x) = \log_2 x $$
 - 定義域エラー、極エラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - 処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `-∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
-	- `x = 1` の場合、戻り値は `+0` となる。
-	- `x &amp;lt; 0` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
-	- `x = +∞` の場合、戻り値は `+∞` となる。
+    - `x = ±0` の場合、戻り値は `-∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
+    - `x = 1` の場合、戻り値は `+0` となる。
+    - `x &amp;lt; 0` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+    - `x = +∞` の場合、戻り値は `+∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -145,3 +157,8 @@ log2(32) : 5, power of 2
 [`log`](log.md) があれば、以下のように変換することで求められる。
 
 $$ \log_2 x = \frac{\log_e x}{\log_e 2}$$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lrint -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/lrint.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/lrint.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/lrint.md b/reference/cmath/lrint.md
index dbcb5393e..f81ec4664 100644
--- a/reference/cmath/lrint.md
+++ b/reference/cmath/lrint.md
@@ -6,14 +6,16 @@
 
 ```cpp
 namespace std {
-  long lrint(float x);
-  long lrint(double x);
-  long lrint(long double x);
+  long lrint(float x);               // (1) C++11からC++20まで
+  long lrint(double x);              // (2) C++11からC++20まで
+  long lrint(long double x);         // (3) C++11からC++20まで
 
-  long lrint(Integral x);
+  long lrint(floating-point-type x); // (4) C++23
 
-  long int lrintf(float x);       // C++17 から
-  long int lrintl(long double x); // C++17 から
+  long lrint(Integral x);            // (5) C++11
+
+  long int lrintf(float x);          // (6) C++17
+  long int lrintl(long double x);    // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +23,14 @@ namespace std {
 ## 概要
 引数 `x` を現在の丸めモードで `long` に丸めた値を得る。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` を現在の丸めモードで `long` に丸めた値
@@ -29,12 +39,13 @@ namespace std {
 ## 備考
 - 本関数は、C99 の規格にある `lrint`（より正確には `math.h` ヘッダの `lrint`、`lrintf`、`lrintl` の 3 つ。それぞれ C++ の `double`、`float`、`long double` バージョンに相当）と等価である。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- 丸めの結果が `long` で表現不可能な場合、無効演算の浮動小数点例外（[`FE_INVALID`](../cfenv/fe_invalid.md)）が発生する。
-	- 他の例外が発生しておらず、引数 `x` が戻り値と異なってる場合、不正確結果の浮動小数点例外（[`FE_INEXACT`](../cfenv/fe_inexact.md)）が発生する。
+    - 丸めの結果が `long` で表現不可能な場合、無効演算の浮動小数点例外（[`FE_INVALID`](../cfenv/fe_invalid.md)）が発生する。
+    - 他の例外が発生しておらず、引数 `x` が戻り値と異なってる場合、不正確結果の浮動小数点例外（[`FE_INEXACT`](../cfenv/fe_inexact.md)）が発生する。
 - C99 では、丸めモードや浮動小数点例外へのアクセスには `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
-	なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
+    なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。  
-	四捨五入が必要であれば、[`lround`](lround.md) を使用すること。（ただし、[`lround`](lround.md) は本関数と異なり、ISO IEC 60559 に準拠していても [`FE_INEXACT`](../cfenv/fe_inexact.md) が発生するか否かは処理系定義である）  
+    四捨五入が必要であれば、[`lround`](lround.md) を使用すること。（ただし、[`lround`](lround.md) は本関数と異なり、ISO IEC 60559 に準拠していても [`FE_INEXACT`](../cfenv/fe_inexact.md) が発生するか否かは処理系定義である）  
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -151,4 +162,9 @@ lrint(9.22337e+18) = -9223372036854775808, FE_INEXACT = false, FE_INVALID = true
 - [Visual C++](/implementation.md#visual_cpp): 2013, 2015
 
 ### 備考
-本関数は C++11 で追加されたが、Clang(libc++) では C++11 モードでなくても使用可能である。
+- 本関数は C++11 で追加されたが、Clang(libc++) では C++11 モードでなくても使用可能である
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nearbyint -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/nearbyint.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/nearbyint.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/nearbyint.md b/reference/cmath/nearbyint.md
index 8c0b6f9b9..f5d3a067b 100644
--- a/reference/cmath/nearbyint.md
+++ b/reference/cmath/nearbyint.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float nearbyint(float x);
-  double nearbyint(double x);
-  long double nearbyint(long double x);
+  float nearbyint(float x);              // (1) C++11からC++20まで
+  double nearbyint(double x);            // (2) C++11からC++20まで
+  long double nearbyint(long double x);  // (3) C++11からC++20まで
 
-  double nearbyint(Integral x);
+  floating-point-type
+    nearbyint(floating-point-type x);    // (4) C++23
 
-  float nearbyintf(float x);             // C++17 から
-  long double nearbyintl(long double x); // C++17 から
+  double nearbyint(Integral x);          // (5) C++11
+
+  float nearbyintf(float x);             // (6) C++17
+  long double nearbyintl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 引数 `x` を現在の丸めモードで整数値に丸めた値を得る。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` を現在の丸めモードで整数値に丸めた値
@@ -30,11 +41,12 @@ namespace std {
 - 本関数と [`rint`](rint.md) は戻り値は同一であるが、本関数は引数 `x` が戻り値と異なっていても [`FE_INEXACT`](../cfenv/fe_invalid.md) は発生しないが、[`rint`](rint.md) は発生する可能性がある点のみ動作が異なる。
 - 本関数は、C99 の規格にある `nearbyint`（より正確には `math.h` ヘッダの `nearbyint`、`nearbyintf`、`nearbyintl` の 3 つ。それぞれ C++ の `double`、`float`、`long double` バージョンに相当）と等価である。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、`±0` を返す。
-	- `x = ±∞` の場合、`±∞` を返す。
+    - `x = ±0` の場合、`±0` を返す。
+    - `x = ±∞` の場合、`±∞` を返す。
 - C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
-	なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
+    なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -120,4 +132,9 @@ FE_INEXACT = false
 - [Visual C++](/implementation.md#visual_cpp): 2013, 2015
 
 ### 備考
-本関数は C++11 で追加されたが、Clang(libc++) では C++11 モードでなくても使用可能である。
+- 本関数は C++11 で追加されたが、Clang(libc++) では C++11 モードでなくても使用可能である。
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pow -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/pow.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/pow.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/pow.md b/reference/cmath/pow.md
index 17d6a244b..2fc052767 100644
--- a/reference/cmath/pow.md
+++ b/reference/cmath/pow.md
@@ -6,18 +6,22 @@
 
 ```cpp
 namespace std {
-  float pow(float x, float y);
-  double pow(double x, double y);
-  long double pow(long double x, long double y);
+  float pow(float x, float y);                    // (1) C++03からC++20まで
+  double pow(double x, double y);                 // (2) C++03からC++20まで
+  long double pow(long double x, long double y);  // (3) C++03からC++20まで
 
-  float pow(float x, int y);                      // C++03 まで
-  double pow(double x, int y);                    // C++03 まで
-  long double pow(long double x, int y);          // C++03 まで
+  float pow(float x, int y);                      // (4) C++03まで
+  double pow(double x, int y);                    // (5) C++03まで
+  long double pow(long double x, int y);          // (6) C++03まで
 
-  Promoted pow(Arithmetic1 x, Arithmetic2 y);     // C++11 から
+  floating-point-type
+    pow(floating-point-type x,
+        floating-point-type y);                   // (7) C++23
 
-  float powf(float x, float y);                   // C++17 から
-  long double powl(long double x, long double y); // C++17 から
+  Promoted pow(Arithmetic1 x, Arithmetic2 y);     // (8) C++11
+
+  float powf(float x, float y);                   // (9) C++17
+  long double powl(long double x, long double y); // (10) C++17
 }
 ```
 * Promoted[italic]
@@ -27,6 +31,17 @@ namespace std {
 ## 概要
 `x` の `y` 乗を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : `float`に対するオーバーロードで、`int`型の`y`をとる
+- (5) : `double`に対するオーバーロードで、`int`型の`y`をとる
+- (6) : `long double`に対するオーバーロードで、`int`型の`y`をとる
+- (7) : 浮動小数点数型に対するオーバーロード
+- (8) : 算術型に対するオーバーロード (大きい精度にキャストして計算される。整数は`double`で計算される)
+- (9) : `float`型規定
+- (10) : `long double`型規定
+
 
 ## 戻り値
 `x` を `y` 乗した値を返す。
@@ -38,24 +53,25 @@ namespace std {
 - $$ f(x, y) = x^y $$
 - 定義域エラー、極エラー、オーバーフローエラー、アンダーフローエラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
-	- `x = ±0` で `y` が負の奇数の場合、戻り値は `±∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
-	- `x = ±0` で `y` が有限でかつ負の奇数ではない場合、戻り値は `+∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
-	- `x = ±0` で `y = -∞` の場合、戻り値は `+∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する可能性がある。
-	- `x = ±0` で `y` が正の奇数の場合、戻り値は `±0` となる。
-	- `x = ±0` で `y` が正でかつ奇数ではない場合、戻り値は `+0` となる。
-	- `x = -1` で `y = ±∞` の場合、戻り値は `1` となる。
-	- `x = 1` の場合、`y` にかかわらず戻り値は `1` となる（`y` が quiet NaN の場合を含む）。
-	- `y = ±0` の場合、`x` にかかわらず戻り値は `1` となる（`x` が quiet NaN の場合を含む）。
-	- `|x| &amp;lt; 1` で `y = -∞` の場合、戻り値は `+∞` となる。
-	- `|x| &amp;gt; 1` で `y = -∞` の場合、戻り値は `+0` となる。
-	- `|x| &amp;lt; 1` で `y = +∞` の場合、戻り値は `+0` となる。
-	- `|x| &amp;gt; 1` で `y = +∞` の場合、戻り値は `+∞` となる。
-	- `x = -∞` で `y` が負の奇数の場合、戻り値は `-0` となる。
-	- `x = -∞` で `y` が負でかつ奇数ではない場合、戻り値は `+0` となる。
-	- `x = -∞` で `y` が正の奇数の場合、戻り値は `-∞` となる。
-	- `x = -∞` で `y` が正でかつ奇数ではない場合、戻り値は `+∞` となる。
-	- `x = +∞` で `y &amp;lt; 0` の場合、戻り値は `+0` となる。
-	- `x = +∞` で `y &amp;gt; 0` の場合、戻り値は `+∞` となる。
+    - `x = ±0` で `y` が負の奇数の場合、戻り値は `±∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
+    - `x = ±0` で `y` が有限でかつ負の奇数ではない場合、戻り値は `+∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する。
+    - `x = ±0` で `y = -∞` の場合、戻り値は `+∞` となり、[`FE_DIVBYZERO`](../cfenv/fe_divbyzero.md)（ゼロ除算浮動小数点例外）が発生する可能性がある。
+    - `x = ±0` で `y` が正の奇数の場合、戻り値は `±0` となる。
+    - `x = ±0` で `y` が正でかつ奇数ではない場合、戻り値は `+0` となる。
+    - `x = -1` で `y = ±∞` の場合、戻り値は `1` となる。
+    - `x = 1` の場合、`y` にかかわらず戻り値は `1` となる（`y` が quiet NaN の場合を含む）。
+    - `y = ±0` の場合、`x` にかかわらず戻り値は `1` となる（`x` が quiet NaN の場合を含む）。
+    - `|x| &amp;lt; 1` で `y = -∞` の場合、戻り値は `+∞` となる。
+    - `|x| &amp;gt; 1` で `y = -∞` の場合、戻り値は `+0` となる。
+    - `|x| &amp;lt; 1` で `y = +∞` の場合、戻り値は `+0` となる。
+    - `|x| &amp;gt; 1` で `y = +∞` の場合、戻り値は `+∞` となる。
+    - `x = -∞` で `y` が負の奇数の場合、戻り値は `-0` となる。
+    - `x = -∞` で `y` が負でかつ奇数ではない場合、戻り値は `+0` となる。
+    - `x = -∞` で `y` が正の奇数の場合、戻り値は `-∞` となる。
+    - `x = -∞` で `y` が正でかつ奇数ではない場合、戻り値は `+∞` となる。
+    - `x = +∞` で `y &amp;lt; 0` の場合、戻り値は `+0` となる。
+    - `x = +∞` で `y &amp;gt; 0` の場合、戻り値は `+∞` となる。
+- C++23では、(1)、(2)、(3)が(7)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -121,3 +137,6 @@ $$ x^y = e^{y \log_e x} $$
 
 ただし `x` が負数かつ `y` が整数に等しい場合などについては、別に計算する必要がある。
 
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rint -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/rint.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/rint.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/rint.md b/reference/cmath/rint.md
index 3568f563d..85e053f49 100644
--- a/reference/cmath/rint.md
+++ b/reference/cmath/rint.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float rint(float x);
-  double rint(double x);
-  long double rint(long double x);
+  float rint(float x);              // (1) C++11からC++20まで
+  double rint(double x);            // (2) C++11からC++20まで
+  long double rint(long double x);  // (3) C++11からC++20まで
 
-  double rint(Integral x);
+  floating-point-type
+    rint(floating-point-type x);    // (4) C++23
 
-  float rintf(float x);             // C++17 から
-  long double rintl(long double x); // C++17 から
+  double rint(Integral x);          // (5) C++11
+
+  float rintf(float x);             // (6) C++17
+  long double rintl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 引数 `x` を現在の丸めモードで整数値に丸めた値を得る。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` を現在の丸めモードで整数値に丸めた値
@@ -30,12 +41,13 @@ namespace std {
 - 本関数と [`nearbyint`](nearbyint.md) は戻り値は同一であるが、本関数は引数 `x` が戻り値と異なってる場合 [`FE_INEXACT`](../cfenv/fe_inexact.md) が発生する可能性があるが、[`nearbyint`](nearbyint.md) は発生しない点のみ動作が異なる。
 - 本関数は、C99 の規格にある `rint`（より正確には `math.h` ヘッダの `rint`、`rintf`、`rintl` の 3 つ。それぞれ C++ の `double`、`float`、`long double` バージョンに相当）と等価である。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、`±0` を返す。
-	- `x = ±∞` の場合、`±∞` を返す。
-	- 引数 `x` が戻り値と異なってる場合、[`FE_INEXACT`](../cfenv/fe_inexact.md) が発生する。
+    - `x = ±0` の場合、`±0` を返す。
+    - `x = ±∞` の場合、`±∞` を返す。
+    - 引数 `x` が戻り値と異なってる場合、[`FE_INEXACT`](../cfenv/fe_inexact.md) が発生する。
 - C99 では、丸めモードの設定時には `#pragma STDC FENV_ACCESS ON` でなければなければならないと記載されているが、C++ には該当する記載を見つけることができなかった。  
-	なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
+    なお、C99 でも `FENV_ACCESS` のデフォルトは処理系定義である。
 - 丸めモード [`FE_TONEAREST`](../cfenv/fe_tonearest.md) は単なる四捨五入ではないことに注意。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -122,4 +134,9 @@ FE_INEXACT = true
 - [Visual C++](/implementation.md#visual_cpp): 2013, 2015
 
 ### 備考
-本関数は C++11 で追加されたが、Clang(libc++) では C++11 モードでなくても使用可能である。
+- 本関数は C++11 で追加されたが、Clang(libc++) では C++11 モードでなくても使用可能である。
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sin -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sin.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/sin.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sin.md b/reference/cmath/sin.md
index e26f6e35b..3b9d23e24 100644
--- a/reference/cmath/sin.md
+++ b/reference/cmath/sin.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float sin(float x);
-  double sin(double x);
-  long double sin(long double x);
+  float sin(float x);              // (1) C++03からC++20まで
+  double sin(double x);            // (2) C++03からC++20まで
+  long double sin(long double x);  // (3) C++03からC++20まで
 
-  double sin(Integral x);          // C++11 から
+  floating-point-type
+    sin(floating-point-type x);    // (4) C++23
 
-  float sinf(float x);             // C++17 から
-  long double sinl(long double x); // C++17 から
+  double sin(Integral x);          // (5) C++11
+
+  float sinf(float x);             // (6) C++17
+  long double sinl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 算術型の正弦（サイン）を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の正弦を返す(`x`の単位はラジアン)。
@@ -29,8 +40,9 @@ namespace std {
 ## 備考
 - $$ f(x) = \sin x $$
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
-	- `x = ±∞` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+    - `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
+    - `x = ±∞` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -109,3 +121,8 @@ $$ \sin x = \sum_{n = 0}^{\infty} \frac{(-1)^n}{(2n + 1)!} x^{2n + 1} \quad \mat
 
 ## 関連項目
 - [`std::numbers::pi`](/reference/numbers/pi.md)
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sinh -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sinh.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/sinh.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sinh.md b/reference/cmath/sinh.md
index fabccedce..48337b7b6 100644
--- a/reference/cmath/sinh.md
+++ b/reference/cmath/sinh.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float sinh(float x);
-  double sinh(double x);
-  long double sinh(long double x);
+  float sinh(float x);              // (1) C++03からC++20まで
+  double sinh(double x);            // (2) C++03からC++20まで
+  long double sinh(long double x);  // (3) C++03からC++20まで
 
-  double sinh(Integral x);          // C++11 から
+  floating-point-type
+    sinh(floating-point-type x);    // (4) C++23
 
-  float sinhf(float x);             // C++17 から
-  long double sinhl(long double x); // C++17 から
+  double sinh(Integral x);          // (5) C++11
+
+  float sinhf(float x);             // (6) C++17
+  long double sinhl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 算術型の双曲線正弦（ハイパボリックサイン）を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の双曲線正弦を返す。
@@ -32,8 +43,9 @@ namespace std {
 - $$ f(x) = \sinh x $$
 - オーバーフローエラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
-	- `x = ±0` の場合、戻り値は `±0` となる。
-	- `x = ±∞` の場合、戻り値は `±∞` となる。
+    - `x = ±0` の場合、戻り値は `±0` となる。
+    - `x = ±∞` の場合、戻り値は `±∞` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -70,6 +82,7 @@ sinh(1.0)  = 1.175201
 
 #### 備考
 特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+
 - GCC 4.6.1 以上
 
 
@@ -77,3 +90,8 @@ sinh(1.0)  = 1.175201
 以下のマクローリン級数を適当な次数で打ち切ることで近似的に求めることができる。
 
 $$ \sinh x = \sum_{n = 0}^{\infty} \frac{1}{(2n + 1)!} x^{2n + 1} \quad \mathrm{for~all} \; x $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sqrt.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/sqrt.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sqrt.md b/reference/cmath/sqrt.md
index d091d8a0a..b46859851 100644
--- a/reference/cmath/sqrt.md
+++ b/reference/cmath/sqrt.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float sqrt(float x);
-  double sqrt(double x);
-  long double sqrt(long double x);
+  float sqrt(float x);              // (1) C++03からC++20まで
+  double sqrt(double x);            // (2) C++03からC++20まで
+  long double sqrt(long double x);  // (3) C++03からC++20まで
 
-  double sqrt(Integral x);          // C++11 から
+  floating-point-type
+    sqrt(floating-point-type x);    // (4) C++23
 
-  float sqrtf(float x);             // C++17 から
-  long double sqrtl(long double x); // C++17 から
+  double sqrt(Integral x);          // (5) C++11
+
+  float sqrtf(float x);             // (6) C++17
+  long double sqrtl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 算術型の非負の平方根を求める。sqrtは square root (平方根) の略。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の非負の平方根を返す。
@@ -33,8 +44,9 @@ namespace std {
 - $$ f(x) = \sqrt{x} $$
 - 定義域エラーが発生した場合の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
-	- `x = ±0` の場合、戻り値は `±0` となる。
+    - `x = ±0` の場合、戻り値は `±0` となる。
 - `-0.0`は`0.0`と等しいため、定義域エラーにはならず、`-0.0`が返る
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -95,3 +107,8 @@ sqrt(-1.0) = -nan
 $$ a_{n + 1} = \frac{\frac{x}{a_n} + a_n}{2} \quad \mathrm{for} \; x \geq 0 $$
 
 ただし `x` は引数、`a` の初期値は適当な値を選ぶものとする。
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tan -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tan.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/tan.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tan.md b/reference/cmath/tan.md
index 0cb997396..18b7e1e63 100644
--- a/reference/cmath/tan.md
+++ b/reference/cmath/tan.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float tan(float x);
-  double tan(double x);
-  long double tan(long double x);
+  float tan(float x);              // (1) C++03からC++20まで
+  double tan(double x);            // (2) C++03からC++20まで
+  long double tan(long double x);  // (3) C++03からC++20まで
 
-  double tan(Integral x);          // C++11 から
+  floating-point-type
+    tan(floating-point-type x);    // (4) C++23
 
-  float tanf(float x);             // C++17 から
-  long double tanl(long double x); // C++17 から
+  double tan(Integral x);          // (5) C++11
+
+  float tanf(float x);             // (6) C++17
+  long double tanl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 算術型の正接（タンジェント）を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の正接を返す(`x`の単位はラジアン)。
@@ -29,8 +40,9 @@ namespace std {
 ## 備考
 - $$ f(x) = \tan x $$
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。
-	- `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
-	- `x = ±∞` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+    - `x = ±0` の場合、戻り値は `±0` となる。（複号同順）
+    - `x = ±∞` の場合、戻り値は quiet NaN となり、[`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -72,6 +84,7 @@ tan(pi/2) = 16331239353195370.000000
 
 #### 備考
 特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+
 - GCC 4.6.1 以上
 
 
@@ -83,3 +96,8 @@ $$ \tan x = \sum_{n = 1}^{\infty} \frac{B_{2n}(-4)^n(1-4^n)}{(2n)!} x^{2n - 1} \
 以下の公式から求めることができる。
 
 $$ \tan x = \frac{\sin x}{\cos x} $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tanh -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tanh.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/tanh.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tanh.md b/reference/cmath/tanh.md
index 487a1d1ae..d2ae4edd8 100644
--- a/reference/cmath/tanh.md
+++ b/reference/cmath/tanh.md
@@ -6,14 +6,17 @@
 
 ```cpp
 namespace std {
-  float tanh(float x);
-  double tanh(double x);
-  long double tanh(long double x);
+  float tanh(float x);              // (1) C++03からC++20まで
+  double tanh(double x);            // (2) C++03からC++20まで
+  long double tanh(long double x);  // (3) C++03からC++20まで
 
-  double tanh(Integral x);          // C++11 から
+  floating-point-type
+    tanh(floating-point-type x);    // (4) C++23
 
-  float tanhf(float x);             // C++17 から
-  long double tanhl(long double x); // C++17 から
+  double tanh(Integral x);          // (5) C++11
+
+  float tanhf(float x);             // (6) C++17
+  long double tanhl(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -21,6 +24,14 @@ namespace std {
 ## 概要
 算術型の双曲線正接（ハイパボリックタンジェント）を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` の双曲線正接を返す。
@@ -29,8 +40,9 @@ namespace std {
 ## 備考
 - $$ f(x) = \tanh x $$
 - C++11 以降では、処理系が IEC 60559 に準拠している場合（[`std::numeric_limits`](../limits/numeric_limits.md)`&amp;lt;T&amp;gt;::`[`is_iec559`](../limits/numeric_limits/is_iec559.md)`() != false`）、以下の規定が追加される。（複号同順）
-	- `x = ±0` の場合、戻り値は `±0` となる。
-	- `x = ±∞` の場合、戻り値は `±1` となる。
+    - `x = ±0` の場合、戻り値は `±0` となる。
+    - `x = ±∞` の場合、戻り値は `±1` となる。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -77,3 +89,8 @@ $$ \tanh x = \sum_{n = 1}^{\infty} \frac{B_{2n}4^n(4^n - 1)}{(2n)!} x^{2n - 1} \
 以下の公式から求めることができる。
 
 $$ \tanh x = \frac{\sinh x}{\cosh x} $$
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tgamma -- &lt;cmath&gt; : 拡張浮動小数点数型への対応続き。途中で力尽きた #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tgamma.html"/>
      <id>ace1860c41772f23dc20e50b11b68c5890c2d430:reference/cmath/tgamma.md</id>
      <updated>2023-02-17T18:32:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tgamma.md b/reference/cmath/tgamma.md
index e085208c7..0ed6c691b 100644
--- a/reference/cmath/tgamma.md
+++ b/reference/cmath/tgamma.md
@@ -7,14 +7,17 @@
 
 ```cpp
 namespace std {
-  float tgamma(float x);
-  double tgamma(double x);
-  long double tgamma(long double x);
+  float tgamma(float x);              // (1) C++11からC++20まで
+  double tgamma(double x);            // (2) C++11からC++20まで
+  long double tgamma(long double x);  // (3) C++11からC++20まで
 
-  double tgamma(Integral x);
+  floating-point-type
+    tgamma(floating-point-type x);    // (4) C++23
 
-  float tgammaf(float x);             // C++17 から
-  long double tgammal(long double x); // C++17 から
+  double tgamma(Integral x);          // (5) C++11
+
+  float tgammaf(float x);             // (6) C++17
+  long double tgammal(long double x); // (7) C++17
 }
 ```
 * Integral[italic]
@@ -22,6 +25,14 @@ namespace std {
 ## 概要
 ガンマ関数を求める。
 
+- (1) : `float`に対するオーバーロード
+- (2) : `double`に対するオーバーロード
+- (3) : `long double`に対するオーバーロード
+- (4) : 浮動小数点数型に対するオーバーロード
+- (5) : 整数型に対するオーバーロード (`double`にキャストして計算される)
+- (6) : `float`型規定
+- (7) : `long double`型規定
+
 
 ## 戻り値
 引数 `x` のガンマ関数を返す。
@@ -39,6 +50,7 @@ namespace std {
     [`FE_INVALID`](../cfenv/fe_invalid.md)（無効演算浮動小数点例外）が発生する。
     - `x = +∞` の場合、戻り値は `+∞` となる。
 - `gamma` という関数は既にあったが処理系によって定義が違ったため、本当の (true) ガンマ関数 `tgamma` と名付けられた。
+- C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
 ## 例
@@ -85,3 +97,8 @@ tgamma(+∞)  = inf
 特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
 
 - GCC 4.6.1 以上
+
+
+## 参照
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-11-17T11:12:36.361813</updated>
  <id>ae615c02-9d17-4ae8-ac14-4d485d879c3e</id>

  
    <entry>
      <title>はじめてのコントリビュート -- Markdownの記法として箇条書きのインデントに4スペースが必要であることを記載 #1362</title>
      <link href="https://cpprefjp.github.io/start_editing.html"/>
      <id>1714d229db60c5163137213bf3ee735899fc1883:start_editing.md</id>
      <updated>2024-11-17T20:09:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing.md b/start_editing.md
index dae4ce787..d9e48a739 100644
--- a/start_editing.md
+++ b/start_editing.md
@@ -108,7 +108,10 @@ Markdown形式では、HTMLのタグも併用できますが、cpprefjpサイト
 - 値の大きさを表現するために、上付き文字を表す`&amp;lt;sup&amp;gt;`タグを利用している
 - 添字を表現するために、下付き文字を表す`&amp;lt;sub&amp;gt;`タグを利用している
 
-また、Markdownパーサーの制限を回避し、表内で `|` (縦線、vertical line) を使用するために、文字参照 `&amp;amp;amp;#x7C;` を使用してます。
+その他、Markdown記法の制限として、以下のようなものがあります：
+
+- 表内で `|` (縦線、vertical line) を使用するために、文字参照 `&amp;amp;amp;#x7C;` を使用している
+- 箇条書きのインデントとして4スペースのみを許可している (2スペースでは正しくインデントされない)
 
 新規リファレンスを書くにあたって、雛形ページを用意していますので、そちらをベースにして編集作業を行ってください。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>未初期化変数の読み取りをエラー性動作とする [P2795R5] -- C++26 未初期化変数の読み取りをエラー性動作とする : 入れ子リストの表示崩れを修正 #1362</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/erroneous_behavior_for_uninitialized_reads.html"/>
      <id>41226575825b0ca5d115b300af739a3c1afda5cd:lang/cpp26/erroneous_behavior_for_uninitialized_reads.md</id>
      <updated>2024-11-17T18:49:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/erroneous_behavior_for_uninitialized_reads.md b/lang/cpp26/erroneous_behavior_for_uninitialized_reads.md
index 4cf7047e0..79b80c7ac 100644
--- a/lang/cpp26/erroneous_behavior_for_uninitialized_reads.md
+++ b/lang/cpp26/erroneous_behavior_for_uninitialized_reads.md
@@ -44,11 +44,11 @@ int main() {
 
 ## 仕様
 - 自動記憶域期間をもつオブジェクトの記憶域は確保時点で「エラー性の値 (erroneous value)」をもつとされ、処理系がプログラムの状態に依存せず決定する何らかの値で埋められる
-  - 動的記憶域期間であれば不定値、静的・スレッド記憶域期間であればゼロで埋められる。C++23までは自動記憶域期間も不定値で埋められていた
+    - 動的記憶域期間であれば不定値、静的・スレッド記憶域期間であればゼロで埋められる。C++23までは自動記憶域期間も不定値で埋められていた
 - 初期化されなかったスカラ型オブジェクトなど、値表現（パディングは含まない）内のいずれかのビットにエラー性の値をもつオブジェクトはエラー性の値をもつとされる
 - 式が評価された結果としてエラー性の値が生成された場合、エラー性動作を引き起こす
-  - ただし、`unsigned char`（およびunsignedとなる場合は`char`）もしくは[`std::byte`](/reference/cstddef/byte.md)型のエラー性の値がこれらの型のオブジェクトの初期化・代入に使用される場合や値が破棄される場合はエラー性動作にならない
-  - これらのルールは、式が評価された結果として不定値が生成された場合に未定義の動作を引き起こすとする従来のルールと同様である
+    - ただし、`unsigned char`（およびunsignedとなる場合は`char`）もしくは[`std::byte`](/reference/cstddef/byte.md)型のエラー性の値がこれらの型のオブジェクトの初期化・代入に使用される場合や値が破棄される場合はエラー性動作にならない
+    - これらのルールは、式が評価された結果として不定値が生成された場合に未定義の動作を引き起こすとする従来のルールと同様である
 - エラー性動作を引き起こしたうえで生成された値は、後続の処理ではエラー性の値とはみなされない
 
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>elifdef/elifndefのサポートを追加 [P2334R1] -- P2334R1 : elifはあった</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.html"/>
      <id>5151c6a0ac0b782e30f8464c11cb72296acc0d21:lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md</id>
      <updated>2024-11-17T01:24:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
index 50f00f7b5..ac742192c 100644
--- a/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
+++ b/lang/cpp23/add_support_for_preprocessing_directives_elifdef_and_elifndef.md
@@ -1,4 +1,4 @@
-# elif/elifdef/elifndefのサポートを追加 [P2334R1]
+# elifdef/elifndefのサポートを追加 [P2334R1]
 * cpp23[meta cpp]
 
 &amp;lt;!-- start lang caution --&amp;gt;
@@ -12,11 +12,11 @@
 ## 概要
 C++23では、以下のプリプロセス時条件式が追加される：
 
-- `#if`に対応する`#elif`を追加。`#if`/`#ifdef`/`#ifndef`が偽だった場合の条件式を記述できる
-- `#ifdef`に対応する`#elifdef`を追加。`#if`/`#ifdef`/`#ifndef`が偽だった場合の、特定の識別子が定義されているかの判定を記述できる
-- `#ifndef`に対応する`#elifndef`を追加。`#if`/`#ifdef`/`#ifndef`が偽だった場合の、特定の識別子が定義されていないかの判定を記述できる
+- `#ifdef`に対応する`#elif`である、`#elifdef`を追加。`#if`/`#ifdef`/`#ifndef`が偽だった場合の、特定の識別子（マクロ名）が定義されているかの判定を記述できる
+- `#ifndef`に対応する`#elif`である、`#elifndef`を追加。`#if`/`#ifdef`/`#ifndef`が偽だった場合の、特定の識別子（マクロ名）が定義されていないかの判定を記述できる
 
-これまでは`#if`が偽だった場合のさらなる条件式を記述するためには`#else`にネストして`#if`を記述する必要があったが、そのような条件分岐が書きやすくなる。
+
+これまでは`#elif`において特定のマクロが定義されているかを調べるために`#elif defined(macro_name) / #elif !defined(macro_name)`と書く必要があり、`#if`に対する`#ifdef macro_name / #ifndef macro_name`のような短縮ディレクティブが用意されていなかったが、C++23からは`#if`と`#elif`の両方で`def/ndef`付きのディレクティブが利用できるようになる。
 
 ```cpp
 #define FOO 2
@@ -36,4 +36,4 @@ C++23では、以下のプリプロセス時条件式が追加される：
 
 
 ## 参照
-- [P2334R1 Add support for preprocessing directives elifdef and elifndef](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2334r1.pdf)
\ No newline at end of file
+- [P2334R1 Add support for preprocessing directives elifdef and elifndef](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2334r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>名前付きユニバーサルキャラクタ名 [P2071R2] -- 名前付きユニバーサルキャラクタ名: マッチングについて修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/named_universal_character_escapes.html"/>
      <id>abe6cbeeec725734bc8632fb0f6b007e2b554198:lang/cpp23/named_universal_character_escapes.md</id>
      <updated>2024-11-14T01:52:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/named_universal_character_escapes.md b/lang/cpp23/named_universal_character_escapes.md
index 2feee22a6..e4f1ee3d6 100644
--- a/lang/cpp23/named_universal_character_escapes.md
+++ b/lang/cpp23/named_universal_character_escapes.md
@@ -16,15 +16,9 @@
 
 構文としては`u8&amp;#34;\N{LATIN CAPITAL LETTER A WITH MACRON}&amp;#34;`のように、`\N{…}`の波カッコで囲まれた中に、ユニバーサルキャラクタ名を入力する。
 
-使用可能な文字はUnicode規格ISO/IEC 10646で定義される。
+使用可能な文字はUnicode規格ISO/IEC 10646で定義され、それと厳密に一致しなければならない（大文字と小文字の違いやスペースの有無・数などが厳密にチェックされる）。
 
-名前のマッチングは[UAX44-LM2](https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2)を参照しており、これによって
-
-- 大文字・小文字を区別しない
-- ハイフンの省略
-- アンダースコアをハイフンに置換
-
-するなど、柔軟な指定ができるようになっている。例として、以下の名前はすべて`U+200B` (ZERO WIDTH SPACE、ゼロ幅スペース) を表すものとして使用できる：
+このユニコード名のマッチングを規定する[UAX44-LM2](https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2)では、以下の名前はすべて`U+200B` (ZERO WIDTH SPACE、ゼロ幅スペース) を表すものとしてマッチングされるが、C++の名前付きユニバーサルキャラクタ名では一番最初の`ZERO WIDTH SPACE`のみが正しい名前として受け入れられる。
 
 ```
 ZERO WIDTH SPACE
@@ -33,7 +27,6 @@ zero-width space
 ZERO width S P_A_C E
 ```
 
-
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -61,6 +54,6 @@ int main()
 - [C++11 `char16_t`と`char32_t`](/lang/cpp11/char16_32.md)
 
 ## 参照
-- [P2173R1 Attributes on Lambda-Expressions](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2173r1.pdf)
+- [P2071R2 Named universal character escapes](https://www.open-std.org/JTC1/SC22/WG21/docs/papers/2022/p2071r2.html)
 - [Unicode Character “Ā” (U+0100)](https://www.compart.com/en/unicode/U+0100)
-- [Unicode Character “◌̀” (U+0300)](https://www.compart.com/en/unicode/U+0300)
\ No newline at end of file
+- [Unicode Character “◌̀” (U+0300)](https://www.compart.com/en/unicode/U+0300)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>列挙値から算術型への暗黙変換を非推奨化 [P1120R0] -- 言語機能の注意文章を更新 #1231</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_arithmetic_conversion_on_enumerations.html"/>
      <id>165353e4a2df20da05e1208cca403329ea548e63:lang/cpp20/deprecate_arithmetic_conversion_on_enumerations.md</id>
      <updated>2024-11-13T12:55:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecate_arithmetic_conversion_on_enumerations.md b/lang/cpp20/deprecate_arithmetic_conversion_on_enumerations.md
index 3b4d60e5d..6d327bb60 100644
--- a/lang/cpp20/deprecate_arithmetic_conversion_on_enumerations.md
+++ b/lang/cpp20/deprecate_arithmetic_conversion_on_enumerations.md
@@ -22,10 +22,10 @@ int x = +f - e;    // OK
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 `&amp;lt;=&amp;gt;`/`==`による比較演算子の自動定義](consistent_comparison.md)
 - [C++26 非推奨となっていた列挙型の算術変換を削除](/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md)
 
 
 ## 参照
-- [P1120R0 Consistency improvements for `&amp;lt;=&amp;gt;` and other comparison operators](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1120r0.html)
+- [P1120R0 Consistency improvements for `&amp;lt;=&amp;gt;` and other comparison operators](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1120r0.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>列挙値から算術型への暗黙変換を非推奨化 [P2864R2] -- 言語機能の注意文章を更新 #1231</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.html"/>
      <id>165353e4a2df20da05e1208cca403329ea548e63:lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md</id>
      <updated>2024-11-13T12:55:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md b/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md
index b512f12d4..c44035a45 100644
--- a/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md
+++ b/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md
@@ -3,7 +3,7 @@
 
 &amp;lt;!-- start lang caution --&amp;gt;
 
-このページはC++20に採用された言語機能の変更を解説しています。
+このページはC++26に採用される見込みの言語機能の変更を解説しています。
 
 のちのC++規格でさらに変更される場合があるため[関連項目](#relative-page)を参照してください。
 
@@ -22,9 +22,9 @@ int x = +f - e;    // OK
 ```
 
 
-## 関連項目
+## &amp;lt;a id=&amp;#34;relative-page&amp;#34; href=&amp;#34;#relative-page&amp;#34;&amp;gt;関連項目&amp;lt;/a&amp;gt;
 - [C++20 列挙値から算術型への暗黙変換を非推奨化](/lang/cpp20/deprecate_arithmetic_conversion_on_enumerations.md)
 
 
 ## 参照
-- [P2864R2 Remove Deprecated Arithmetic Conversion on Enumerations From C++26](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2864r2.pdf)
+- [P2864R2 Remove Deprecated Arithmetic Conversion on Enumerations From C++26](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2864r2.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
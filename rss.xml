<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-05-15T03:34:44.592006</updated>
  <id>2b2d2489-da9e-4bea-bd95-441ca9ed4871</id>

  
    <entry>
      <title>move_iterator -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator.md b/reference/iterator/move_iterator.md
index 56f23972f..29b57543f 100644
--- a/reference/iterator/move_iterator.md
+++ b/reference/iterator/move_iterator.md
@@ -42,28 +42,15 @@ namespace std {
 
 ## メンバ型
 
-### C++17まで
-
-| 名前 | 説明 | 対応バージョン |
-|------------------------------------------------------|-------------|-------|
-| `iterator_type` | `Iterator` | C++11 |
-| `difference_type` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::difference_type` | C++11 |
-| `pointer` | `Iterator` | C++11 |
-| `value_type` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::value_type` | C++11 |
-| `iterator_category` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category` | C++11 |
-| `reference` | `value_type&amp;amp;&amp;amp;` | C++11 |
-
-### C++20
-
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
-| `iterator_type` | `Iterator` | C++11 |
-| `difference_type` | [`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;Iterator&amp;gt;` | C++20 |
-| `pointer` | `Iterator` | C++11 |
-| `value_type` | [`iter_value_t`](/reference/iterator/iter_value_t.md)`&amp;lt;Iterator&amp;gt;` | C++20 |
-| `iterator_category` | [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category` &amp;lt;br/&amp;gt; ただし、[`contiguous_iterator_tag`](/reference/iterator/iterator_tag.md)となるときは`random_access_iterator_tag` | C++20 |
-| `iterator_concept` | [`input_iterator_tag`](/reference/iterator/iterator_tag.md) | C++20 |
-| `reference` | [`iter_rvalue_reference_t`](/reference/iterator/iter_rvalue_reference_t.md)`&amp;lt;Iterator&amp;gt;`  | C++20 |
+| `iterator_type` | 元となるイテレータ型 `Iterator` | C++11 |
+| [`difference_type`](move_iterator/type-deferrence_type.md) | イテレータ間の差を表す数値型 | C++11 |
+| `pointer` | ポインタ型 `Iterator` | C++11 |
+| [`value_type`](move_iterator/type-value_type.md) | イテレータが指す値型 | C++11 |
+| [`iterator_category`](move_iterator/type-iterator_category.md) | イテレータの分類を表す型 | C++11 |
+| [`iterator_concept`](move_iterator/type-iterator_concept.md) | イテレータコンセプトを表す型 | C++20 |
+| [`reference`](move_iterator/type-reference.md) | イテレータを間接参照する型 | C++11 |
 
 
 ## 非メンバ関数
@@ -137,6 +124,9 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
-## 参照
+## 関連項目
 - [C++11 右辺値参照・ムーブセマンティクス](/lang/cpp11/rvalue_ref_and_move_semantics.md)
+
+
+## 参照
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>deferrence_type -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/type-deferrence_type.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator/type-deferrence_type.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/type-deferrence_type.md b/reference/iterator/move_iterator/type-deferrence_type.md
new file mode 100644
index 000000000..1278ae8d0
--- /dev/null
+++ b/reference/iterator/move_iterator/type-deferrence_type.md
@@ -0,0 +1,22 @@
+# deferrence_type
+* iterator[meta header]
+* std[meta namespace]
+* move_iterator[meta class]
+* type-alias[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+using difference_type = iterator_traits&amp;lt;Iterator&amp;gt;::difference_type; // (1) C++11
+using difference_type = iter_difference_t&amp;lt;Iterator&amp;gt;;                // (1) C++20
+```
+
+## 概要
+イテレータの差を表す型。
+
+
+## バージョン
+### 言語
+- C++11
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator_category -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/type-iterator_category.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator/type-iterator_category.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/type-iterator_category.md b/reference/iterator/move_iterator/type-iterator_category.md
new file mode 100644
index 000000000..a7cbce247
--- /dev/null
+++ b/reference/iterator/move_iterator/type-iterator_category.md
@@ -0,0 +1,27 @@
+# iterator_category
+* iterator[meta header]
+* std[meta namespace]
+* move_iterator[meta class]
+* type-alias[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+using iterator_category = 以下参照; // (1) C++11
+```
+
+## 概要
+イテレータの分類を表す型。
+
+- C++11:
+    - [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category`
+- C++20:
+    - [`iterator_traits`](/reference/iterator/iterator_traits.md)`&amp;lt;Iterator&amp;gt;::iterator_category`
+    - ただし、[`contiguous_iterator_tag`](/reference/iterator/iterator_tag.md)となる場合は[`random_access_iterator_tag`](/reference/iterator/iterator_tag.md)
+
+
+## バージョン
+### 言語
+- C++11
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator_concept -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/type-iterator_concept.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator/type-iterator_concept.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/type-iterator_concept.md b/reference/iterator/move_iterator/type-iterator_concept.md
new file mode 100644
index 000000000..0df1bcae2
--- /dev/null
+++ b/reference/iterator/move_iterator/type-iterator_concept.md
@@ -0,0 +1,21 @@
+# iterator_concept
+* iterator[meta header]
+* std[meta namespace]
+* move_iterator[meta class]
+* type-alias[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+using iterator_concept = input_iterator_tag; // (1) C++20
+```
+* input_iterator_tag[link /reference/iterator/iterator_tag.md]
+
+## 概要
+イテレータコンセプトを表す型。
+
+## バージョン
+### 言語
+- C++20
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reference -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/type-reference.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator/type-reference.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/type-reference.md b/reference/iterator/move_iterator/type-reference.md
new file mode 100644
index 000000000..2b96ab2d1
--- /dev/null
+++ b/reference/iterator/move_iterator/type-reference.md
@@ -0,0 +1,22 @@
+# reference
+* iterator[meta header]
+* std[meta namespace]
+* move_iterator[meta class]
+* type-alias[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+using difference_type = value_type&amp;amp;&amp;amp;;                      // (1) C++11
+using difference_type = iter_rvalue_reference_t&amp;lt;Iterator&amp;gt;; // (1) C++20
+```
+
+## 概要
+イテレータを間接参照する型。
+
+
+## バージョン
+### 言語
+- C++11
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value_type -- move_iterator : メンバ型の表を整理してバージョン差異があるものは個別ページを用意した</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/type-value_type.html"/>
      <id>b1ce4365524d542e92d772ce35a6d422cd7463eb:reference/iterator/move_iterator/type-value_type.md</id>
      <updated>2025-05-15T12:25:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/type-value_type.md b/reference/iterator/move_iterator/type-value_type.md
new file mode 100644
index 000000000..983dd2b73
--- /dev/null
+++ b/reference/iterator/move_iterator/type-value_type.md
@@ -0,0 +1,22 @@
+# value_type
+* iterator[meta header]
+* std[meta namespace]
+* move_iterator[meta class]
+* type-alias[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+using difference_type = iterator_traits&amp;lt;Iterator&amp;gt;::value_type; // (1) C++11
+using difference_type = iter_value_t&amp;lt;Iterator&amp;gt;;                // (1) C++20
+```
+
+## 概要
+イテレータが指す値型。
+
+
+## バージョン
+### 言語
+- C++11
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_multiset -- flat_set / flat_multiset : 概要文章を追加 #1448</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset.html"/>
      <id>f529f5d9fea79c03660a64477e0afacfc787351a:reference/flat_set/flat_multiset.md</id>
      <updated>2025-05-14T16:24:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset.md b/reference/flat_set/flat_multiset.md
index 60d49067e..5c10721b4 100644
--- a/reference/flat_set/flat_multiset.md
+++ b/reference/flat_set/flat_multiset.md
@@ -16,6 +16,32 @@ namespace std {
 * vector[link /reference/vector/vector.md]
 
 ## 概要
+`std::flat_multiset`は、重複する要素を許可する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
+
+`std::flat_multiset`は、ノードベースで実装される[`std::multiset`](/reference/set/multiset.md)、ハッシュテーブルで実装される[`std::unordered_multiset`](/reference/unordered_set/unordered_multiset.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+
+また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::skack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列をラップして扱う実装となっている。
+
+このコンテナクラスは、ランダムアクセスイテレータをサポートする。
+
+
+### ほかの連想コンテナとの要件の違い
+このクラスは要件として、コンテナクラスと、逆順コンテナクラスであることは満たすが、連想コンテナの要件としては以下を満たさない：
+
+- node handleに関する要件
+- イテレータ無効化に関する要件
+- 単一要素の挿入と削除に線形時間かかる (挿入位置のイテレータを指定したとしても)
+
+また、このコンテナはメモリアロケータを指定できない設計にもなっている。
+
+## テンプレートパラメータ制約
+- `KeyContainer`に指定するコンテナ型は、
+    - シーケンスコンテナの要件を満たし、
+    - ランダムアクセスイテレータをもつこと
+
+
+## 適格要件
+- `Key`が`KeyContainer::value_type`と同じ型であること
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_set -- flat_set / flat_multiset : 概要文章を追加 #1448</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set.html"/>
      <id>f529f5d9fea79c03660a64477e0afacfc787351a:reference/flat_set/flat_set.md</id>
      <updated>2025-05-14T16:24:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set.md b/reference/flat_set/flat_set.md
index ece18174a..50e95d4bd 100644
--- a/reference/flat_set/flat_set.md
+++ b/reference/flat_set/flat_set.md
@@ -16,6 +16,32 @@ namespace std {
 * vector[link /reference/vector/vector.md]
 
 ## 概要
+`std::flat_set`は、重複しない要素を格納する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
+
+`std::flat_set`は、ノードベースで実装される[`std::set`](/reference/set/set.md)、ハッシュテーブルで実装される[`std::unordered_set`](/reference/unordered_set/unordered_set.md)とは異なり、ソート済み配列と二分探索の組み合わせで実装される。これはほかの実装と比較して、メモリ使用量と列挙速度において優位であり、一方で挿入速度と検索速度はほかの実装に劣る。
+
+また、このクラスは分類としては[`std::queue`](/reference/queue/queue.md)や[`std::skack`](/reference/stack/stack.md)と同様のコンテナアダプタに分類され、キーの配列をラップして扱う実装となっている。
+
+このコンテナクラスは、ランダムアクセスイテレータをサポートする。
+
+
+### ほかの連想コンテナとの要件の違い
+このクラスは要件として、コンテナクラスと、逆順コンテナクラスであることは満たすが、連想コンテナの要件としては以下を満たさない：
+
+- node handleに関する要件
+- イテレータ無効化に関する要件
+- 単一要素の挿入と削除に線形時間かかる (挿入位置のイテレータを指定したとしても)
+
+また、このコンテナはメモリアロケータを指定できない設計にもなっている。
+
+## テンプレートパラメータ制約
+- `KeyContainer`に指定するコンテナ型は、
+    - シーケンスコンテナの要件を満たし、
+    - ランダムアクセスイテレータをもつこと
+
+
+## 適格要件
+- `Key`が`KeyContainer::value_type`と同じ型であること
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multiset -- set / multiset : 「集合」という言葉がでてきていなかったので補足</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset.html"/>
      <id>fb9b7a8dbb69406653571dd3f1950a53175d6aee:reference/set/multiset.md</id>
      <updated>2025-05-14T16:21:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset.md b/reference/set/multiset.md
index 595668e35..8afb5598e 100644
--- a/reference/set/multiset.md
+++ b/reference/set/multiset.md
@@ -19,8 +19,8 @@ namespace std {
 * allocator[link /reference/memory/allocator.md]
 * polymorphic_allocator[link /reference/memory_resource/polymorphic_allocator.md]
 
-
-`multiset` は連想コンテナの一種であり、要素自身がキーとなる。
+## 概要
+`multiset` は重複を許可する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
 
 連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
 
@@ -33,8 +33,8 @@ namespace std {
 
 このコンテナクラスは、双方向イテレータをサポートする。
 
-各テンプレートパラメータは以下のような意味である。
 
+## テンプレートパラメータ
 - `Key`: キーの型。このコンテナに格納されれる要素の型。`multiset` に格納される要素はそれぞれはキーでもある。
 - `Compare`: 比較クラス。このクラスは 2 つの引数（同じ型であり、コンテナの要素型でもある）をとり `bool` 値を返す。[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)において `a` が `b` よりも前の場所に位置づけられる場合に `true` である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、`operator&amp;lt;()` を適用( `a &amp;lt; b` )したときと同じ値を返す [`less`](/reference/functional/less.md)`&amp;lt;Key&amp;gt;` がデフォルトである。
 - `Allocator`: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、`Key` への [`allocator`](/reference/memory/allocator.md) クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set -- set / multiset : 「集合」という言葉がでてきていなかったので補足</title>
      <link href="https://cpprefjp.github.io/reference/set/set.html"/>
      <id>fb9b7a8dbb69406653571dd3f1950a53175d6aee:reference/set/set.md</id>
      <updated>2025-05-14T16:21:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set.md b/reference/set/set.md
index e564e5944..c1b6460fb 100644
--- a/reference/set/set.md
+++ b/reference/set/set.md
@@ -19,8 +19,8 @@ namespace std {
 * allocator[link /reference/memory/allocator.md]
 * polymorphic_allocator[link /reference/memory_resource/polymorphic_allocator.md]
 
-
-`set` はユニークな要素を格納する連想コンテナの一種であり、要素自身がキーとなる。
+## 概要
+`set` はユニークな要素を格納する連想コンテナの一種であり、要素自身がキーとなる、集合を表すクラスである。
 
 連想コンテナは特にそれらキーによる要素アクセスが効率的になるよう設計されたコンテナである（要素への相対位置または絶対位置によるアクセスが効率的であるシーケンシャルコンテナとは異なる）。
 
@@ -34,8 +34,8 @@ namespace std {
 
 このコンテナクラスは、双方向イテレータをサポートする。
 
-各テンプレートパラメータは以下のような意味である。
 
+## テンプレートパラメータ
 - `Key`: キーの型。このコンテナに格納されれる要素の型。`set` に格納される要素はそれぞれはキーでもある。
 - `Compare`: 比較クラス。このクラスは 2 つの引数（同じ型であり、コンテナの要素型でもある）をとり `bool` 値を返す。[狭義の弱順序](/reference/algorithm.md#strict-weak-ordering)において `a` が `b` よりも前の場所に位置づけられる場合に `true` である。これはクラスが関数呼び出しオブジェクトを実装したクラスであっても良いし関数ポインタであっても良い（例は コンストラクタ を参照）。これは、`operator&amp;lt;()` を適用( `a &amp;lt; b` )したときと同じ値を返す [`less`](/reference/functional/less.md)`&amp;lt;Key&amp;gt;` がデフォルトである。
 - `Allocator`: ストレージアロケーションモデルを決定づける、アロケータオブジェクトの型である。デフォルトでは、`Key` への [`allocator`](/reference/memory/allocator.md) クラステンプレート（これは値に依存しないシンプルなメモリ確保モデルを定義する）が使われる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
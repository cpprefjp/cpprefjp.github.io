<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-08-18T14:35:00.708135</updated>
  <id>83888f3d-76b4-443b-b193-777197b6386e</id>

  
    <entry>
      <title>format -- Update format.md</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>e4f2462793871b11df49a89c9f02d0af4607833d:reference/format/format.md</id>
      <updated>2020-08-18T12:59:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 9d435e4ab..e434b2b60 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -97,23 +97,7 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // format_error
 |:-----------|:-----------------|
 | s (省略可) | 文字列           |
 
-#### 文字型の場合
-
-| type       | 意味       |
-|:-----------|:-----------|
-| c (省略可) | 1文字      |
-
-整数型のオプションも使用できる。
-
-#### `bool`型の場合
-
-| type     | 意味                         |
-|:---------|:-----------------------------|
-| (なし)   | `&amp;#34;true&amp;#34;`/`&amp;#34;false&amp;#34;`を出力する |
-
-整数型のオプションも使用できる。
-
-#### 整数型の場合
+#### 文字型 / `bool`型 / 整数型の場合
 
 `[first, last)`を[`to_chars`](/reference/charconv/to_chars.md)の結果を格納するのに十分な範囲、`value`をフォーマットする値、`charT`を`char`または`wchar_t`とする。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>monotonic_buffer_resource -- monotonic_buffer_resource : 言葉の表現修正</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/monotonic_buffer_resource.html"/>
      <id>55ac19f185aa781f7ea52427bd2a63472a6e213a:reference/memory_resource/monotonic_buffer_resource.md</id>
      <updated>2020-08-18T00:37:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/monotonic_buffer_resource.md b/reference/memory_resource/monotonic_buffer_resource.md
index 2c967659b..aff8127dc 100644
--- a/reference/memory_resource/monotonic_buffer_resource.md
+++ b/reference/memory_resource/monotonic_buffer_resource.md
@@ -13,7 +13,7 @@ namespace std::pmr {
 
 ## 概要
 `monotonic_buffer_resource`はオブジェクトの破棄時にのみ管理しているメモリを全て開放する特殊な [`memory_resource`](memory_resource.md)実装である。  
-少数のオブジェクトを多数構築するために割り当てを行い、最後にまとめて開放するといった状況において高速なメモリ割り当てを行うことを目的としている。
+少さなオブジェクトを多数構築するために割り当てを行い、最後にまとめて開放するといった状況において高速なメモリ割り当てを行うことを目的としている。
 
 このクラスはスレッドセーフではない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>右辺値参照・ムーブセマンティクス -- Merge pull request #793 from Jumpaku/Jumpaku-patch-1</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html"/>
      <id>59b9e6882397840211c6061bab805d11071516db:lang/cpp11/rvalue_ref_and_move_semantics.md</id>
      <updated>2020-08-12T10:25:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/rvalue_ref_and_move_semantics.md b/lang/cpp11/rvalue_ref_and_move_semantics.md
index d000943ef..3f8abc72a 100644
--- a/lang/cpp11/rvalue_ref_and_move_semantics.md
+++ b/lang/cpp11/rvalue_ref_and_move_semantics.md
@@ -323,8 +323,7 @@ void f(T&amp;amp;&amp;amp; a)
 __lvalue__  
 lvalueは関数もしくはオブジェクトを指す。  
 
-名前付きの変数が指し示すオブジェクトや。  
-ポインタを通してアクセスできるオブジェクトが該当する。  
+名前付きの変数が指し示すオブジェクトや、ポインタを通してアクセスできるオブジェクトが該当する。  
 戻り値の型が左辺値参照型の関数の戻り値などもこれにあたる。  
 
 __xvalue__  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>右辺値参照・ムーブセマンティクス -- 句点の修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/rvalue_ref_and_move_semantics.html"/>
      <id>7a52896d4aaba63028d8942e4c6b58f7b16122ad:lang/cpp11/rvalue_ref_and_move_semantics.md</id>
      <updated>2020-08-11T21:34:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/rvalue_ref_and_move_semantics.md b/lang/cpp11/rvalue_ref_and_move_semantics.md
index d000943ef..3f8abc72a 100644
--- a/lang/cpp11/rvalue_ref_and_move_semantics.md
+++ b/lang/cpp11/rvalue_ref_and_move_semantics.md
@@ -323,8 +323,7 @@ void f(T&amp;amp;&amp;amp; a)
 __lvalue__  
 lvalueは関数もしくはオブジェクトを指す。  
 
-名前付きの変数が指し示すオブジェクトや。  
-ポインタを通してアクセスできるオブジェクトが該当する。  
+名前付きの変数が指し示すオブジェクトや、ポインタを通してアクセスできるオブジェクトが該当する。  
 戻り値の型が左辺値参照型の関数の戻り値などもこれにあたる。  
 
 __xvalue__  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Jumpaku</name>
        <email>Jumpaku@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_flag_test_explicit -- Merge pull request #791 from cpprefjp/herumi-patch-2</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag_test_explicit.html"/>
      <id>2330177c3eb67ce69769ad6a57936532343cf00b:reference/atomic/atomic_flag_test_explicit.md</id>
      <updated>2020-08-06T11:33:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag_test_explicit.md b/reference/atomic/atomic_flag_test_explicit.md
index a2995057e..36668d28c 100644
--- a/reference/atomic/atomic_flag_test_explicit.md
+++ b/reference/atomic/atomic_flag_test_explicit.md
@@ -47,13 +47,13 @@ int main()
   std::cout &amp;lt;&amp;lt; std::boolalpha;
 
   std::atomic_flag x = ATOMIC_FLAG_INIT;
-  std::cout &amp;lt;&amp;lt; std::atomic_flag_test(&amp;amp;x, std::memory_order::acquire) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::atomic_flag_test_explicit(&amp;amp;x, std::memory_order::acquire) &amp;lt;&amp;lt; std::endl;
 
   std::atomic_flag_test_and_set(&amp;amp;x, std::memory_order::release);
-  std::cout &amp;lt;&amp;lt; std::atomic_flag_test(&amp;amp;x, std::memory_order::acquire) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::atomic_flag_test_explicit(&amp;amp;x, std::memory_order::acquire) &amp;lt;&amp;lt; std::endl;
 }
 ```
-* std::atomic_flag_test[color ff0000]
+* std::atomic_flag_test_explicit[color ff0000]
 * std::atomic_flag_test_and_set[link atomic_flag_test_and_set.md]
 * ATOMIC_FLAG_INIT[link /reference/atomic/atomic_flag_init.md]
 * memory_order[link /reference/atomic/memory_order.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
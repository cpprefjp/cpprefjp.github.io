<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-04-19T14:39:30.013354</updated>
  <id>4096642f-dcf5-4a4e-95fe-4c4f52e33e58</id>

  
    <entry>
      <title>operator new -- Merge pull request #1269 from cpprefjp/Nagarei/fix-typo-at-op_new</title>
      <link href="https://cpprefjp.github.io/reference/new/op_new.html"/>
      <id>fbf0fce7252d9c4b4f5f50f5fafc7c7df74cbe08:reference/new/op_new.md</id>
      <updated>2024-04-19T16:46:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/op_new.md b/reference/new/op_new.md
index 89b286a5e..c098d8be1 100644
--- a/reference/new/op_new.md
+++ b/reference/new/op_new.md
@@ -136,7 +136,7 @@ int main()
     // (5) char 配列のスタック領域に、cl 型変数を動的に作成
     // 領域のアライメントに注意
     alignas(cl) char one_field[sizeof(cl)] = {};
-    int* p3 = new(one_field) cl();
+    cl* p3 = new(one_field) cl();
     p3-&amp;gt;~cl();  // delete は使えないため、デストラクタを直接呼び出す
   }
   catch (std::bad_alloc&amp;amp; e) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator new -- fix typo in sample code</title>
      <link href="https://cpprefjp.github.io/reference/new/op_new.html"/>
      <id>fabe7cbeb141cbaa865dd967180a7d8934ecb192:reference/new/op_new.md</id>
      <updated>2024-04-19T16:43:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/op_new.md b/reference/new/op_new.md
index 89b286a5e..c098d8be1 100644
--- a/reference/new/op_new.md
+++ b/reference/new/op_new.md
@@ -136,7 +136,7 @@ int main()
     // (5) char 配列のスタック領域に、cl 型変数を動的に作成
     // 領域のアライメントに注意
     alignas(cl) char one_field[sizeof(cl)] = {};
-    int* p3 = new(one_field) cl();
+    cl* p3 = new(one_field) cl();
     p3-&amp;gt;~cl();  // delete は使えないため、デストラクタを直接呼び出す
   }
   catch (std::bad_alloc&amp;amp; e) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Nagarei</name>
        <email>Nagarei@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- Merge pull request #1268 from cpprefjp/Nagarei/fix-typo-at-algorithm</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>fd29f775422fea7d1f15eedfb36c3c78793f35d5:reference/algorithm.md</id>
      <updated>2024-04-19T16:42:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 58bc01f2a..24441a342 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -109,7 +109,7 @@ sort(pv.begin(), pv.end(), [](auto&amp;amp;&amp;amp; a, auto&amp;amp;&amp;amp; b){ return a.name &amp;lt; b.name; });
 // デフォルトの述語(ranges::less{})で、nameでソート
 ranges::sort(pv, {}, [](auto&amp;amp;&amp;amp; a){ return a.name; });
 // std::invokeで呼び出されるため、メンバ変数ポインタでもよい
-ranges::sort(pv, {}, &amp;amp;Parson::name);
+ranges::sort(pv, {}, &amp;amp;Person::name);
 ```
 * ranges::sort[link algorithm/ranges_sort.md]
 * ranges::less[link /reference/functional/ranges_less.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- fix typo in algorithm&#39;s sample code</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>4bfd4910e61e7dab64dbf29a5ba7f112bbe0e617:reference/algorithm.md</id>
      <updated>2024-04-19T16:38:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 58bc01f2a..24441a342 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -109,7 +109,7 @@ sort(pv.begin(), pv.end(), [](auto&amp;amp;&amp;amp; a, auto&amp;amp;&amp;amp; b){ return a.name &amp;lt; b.name; });
 // デフォルトの述語(ranges::less{})で、nameでソート
 ranges::sort(pv, {}, [](auto&amp;amp;&amp;amp; a){ return a.name; });
 // std::invokeで呼び出されるため、メンバ変数ポインタでもよい
-ranges::sort(pv, {}, &amp;amp;Parson::name);
+ranges::sort(pv, {}, &amp;amp;Person::name);
 ```
 * ranges::sort[link algorithm/ranges_sort.md]
 * ranges::less[link /reference/functional/ranges_less.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Nagarei</name>
        <email>Nagarei@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- fix: fix argument order for scoped_lock</title>
      <link href="https://cpprefjp.github.io/reference/mutex/scoped_lock/op_constructor.html"/>
      <id>a8976099ef2f10aa426d054031bccd848c627463:reference/mutex/scoped_lock/op_constructor.md</id>
      <updated>2024-04-19T10:49:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mutex/scoped_lock/op_constructor.md b/reference/mutex/scoped_lock/op_constructor.md
index 565f31818..9ca74c4cb 100644
--- a/reference/mutex/scoped_lock/op_constructor.md
+++ b/reference/mutex/scoped_lock/op_constructor.md
@@ -7,7 +7,7 @@
 
 ```cpp
 explicit scoped_lock(MutexTypes&amp;amp;... m);               // (1)
-explicit scoped_lock(MutexTypes&amp;amp;... m, adopt_lock_t); // (2)
+explicit scoped_lock(adopt_lock_t, MutexTypes&amp;amp;... m); // (2)
 
 scoped_lock(const scoped_lock&amp;amp;) = delete;             // (3)
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>komori-n</name>
        <email>t_toshi2006@yahoo.co.jp</email>
      </author>
    </entry>
  
</feed>
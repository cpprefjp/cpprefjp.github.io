<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-20T08:52:30.007730</updated>
  <id>271dab97-3b0b-4aa3-a5bc-515dc5b1a904</id>

  
    <entry>
      <title>operator&lt;&lt; -- durationのoperator&lt;&lt; : µsが表現できない場合にusを使用するのではなく実装定義での選択になった</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_ostream.html"/>
      <id>71421ee85b6a010711ee66ae708de0f00aae5135:reference/chrono/duration/op_ostream.md</id>
      <updated>2020-11-20T17:47:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_ostream.md b/reference/chrono/duration/op_ostream.md
index f78e41af2..8220e3402 100644
--- a/reference/chrono/duration/op_ostream.md
+++ b/reference/chrono/duration/op_ostream.md
@@ -48,7 +48,7 @@ return os &amp;lt;&amp;lt; s.str();
 | [`femto`](/reference/ratio/si_prefix.md)      | `&amp;#34;fs&amp;#34;` |
 | [`pico`](/reference/ratio/si_prefix.md)       | `&amp;#34;ps&amp;#34;` |
 | [`nano`](/reference/ratio/si_prefix.md)       | `&amp;#34;ns&amp;#34;` |
-| [`micro`](/reference/ratio/si_prefix.md)      | `&amp;#34;µs&amp;#34;` (`&amp;#34;\u00b5\u0073&amp;#34;`) |
+| [`micro`](/reference/ratio/si_prefix.md)      | `&amp;#34;µs&amp;#34;` (`&amp;#34;\u00b5\u0073&amp;#34;`) もしくは`&amp;#34;us&amp;#34;`が実装定義で選択される |
 | [`milli`](/reference/ratio/si_prefix.md)      | `&amp;#34;ms&amp;#34;` |
 | [`centi`](/reference/ratio/si_prefix.md)      | `&amp;#34;cs&amp;#34;` |
 | [`deci`](/reference/ratio/si_prefix.md)       | `&amp;#34;ds&amp;#34;` |
@@ -70,8 +70,6 @@ return os &amp;lt;&amp;lt; s.str();
 - `Period::type::den == 1`である場合、`units_suffix`は`&amp;#34;[num]s&amp;#34;`
 - いずれにもあてはまらない場合、`units_suffix`は`&amp;#34;[num/den]s&amp;#34;`
 
-マイクロ秒として`&amp;#34;µs&amp;#34;`が表現できないエンコーディングの場合、代わりに`&amp;#34;us&amp;#34;`が使用される。
-
 
 ## 戻り値
 ```cpp
@@ -128,3 +126,4 @@ float sec : 1.23s
 
 ## 参照
 - [P2051R0 C++ Standard Library Issues to be moved in Prague](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2051r0.html)
+- [LWG Issue 3314. Is stream insertion behavior locale dependent when `Period::type` is `micro`?](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3314)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- リンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/formatter.html"/>
      <id>5750e3f126b4c7e88846fb72b3af879f7d7dc017:reference/chrono/duration/formatter.md</id>
      <updated>2020-11-20T17:47:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/formatter.md b/reference/chrono/duration/formatter.md
index 660a466c4..d95daa424 100644
--- a/reference/chrono/duration/formatter.md
+++ b/reference/chrono/duration/formatter.md
@@ -18,7 +18,7 @@ namespace std {
 
 | フォーマットフラグ | 説明 |
 |--------------------|------|
-| `%j` | [`days`](duration_aliases.md)の10進数値として0埋めなしで書式化される |
+| `%j` | [`days`](/reference/chrono/duration_aliases.md)の10進数値として0埋めなしで書式化される |
 | `%q` | `duration`単位ごとのサフィックス。`duration`の`operator&amp;lt;&amp;lt;`で出力されるサフィックスと等価 |
 | `%Q` | `duration`の数値。`.count()`で取得した値 |
 | `%S` | 2桁0埋めの秒 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- durationの書式として%jを許可</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/formatter.html"/>
      <id>2aeb8c0e6efaba9dcd1f1841dd21bd8c03beebd5:reference/chrono/duration/formatter.md</id>
      <updated>2020-11-20T17:42:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/formatter.md b/reference/chrono/duration/formatter.md
index 59e2ac80d..660a466c4 100644
--- a/reference/chrono/duration/formatter.md
+++ b/reference/chrono/duration/formatter.md
@@ -18,6 +18,7 @@ namespace std {
 
 | フォーマットフラグ | 説明 |
 |--------------------|------|
+| `%j` | [`days`](duration_aliases.md)の10進数値として0埋めなしで書式化される |
 | `%q` | `duration`単位ごとのサフィックス。`duration`の`operator&amp;lt;&amp;lt;`で出力されるサフィックスと等価 |
 | `%Q` | `duration`の数値。`.count()`で取得した値 |
 | `%S` | 2桁0埋めの秒 |
@@ -84,3 +85,7 @@ AM/PM : PM 03:00
 
 ## 関連項目
 - [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
+
+
+## 参照
+- [LWG Issue 3270. Parsing and formatting `%j` with `duration`s](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3270)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- durationの書式として%jを許可</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>2aeb8c0e6efaba9dcd1f1841dd21bd8c03beebd5:reference/chrono/format.md</id>
      <updated>2020-11-20T17:42:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index e5fe97746..4b22dbff0 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -39,7 +39,7 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 | `%h` | `%b`と等価 | `&amp;#34;Jan&amp;#34;`, `&amp;#34;4月&amp;#34;` |
 | `%H` | 24時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OH`を指定知ると、ロケール依存の異なる表現を出力する | `&amp;#34;17&amp;#34;` |
 | `%I` | 12時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OI`を指定知ると、ロケール依存の異なる表現を出力する | `&amp;#34;05&amp;#34;` |
-| `%j` | 10進数での年の日。1月1日は`001`が出力される。結果が3桁未満の場合、3桁になるよう左が`0`で埋められる | `&amp;#34;115&amp;#34;` |
+| `%j` | 10進数での年の日。1月1日は`001`が出力される。結果が3桁未満の場合、3桁になるよう左が`0`で埋められる。[`duration`](duration.md)の特殊化が与えられた場合、[`days`](duration_aliases.md)の10進数値として0埋めなしで書式化される | `&amp;#34;115&amp;#34;` |
 | `%m` | 10進数での月。1月は`01`が出力される。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%Om`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;04&amp;#34;` |
 | `%M` | 10進数での分。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OM`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;14&amp;#34;` |
 | `%n` | 改行文字 | |
@@ -82,3 +82,4 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 - [P1361R2 Integration of chrono with text formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1361r2.pdf)
 - [P2117R0 C++ Standard Library Issues Resolved Directly In Prague](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html)
 - [LWG Issue 3262. Formatting of negative durations is not specified](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3262)
+- [LWG Issue 3270. Parsing and formatting `%j` with `duration`s](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3270)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>parse -- durationの書式として%jを許可</title>
      <link href="https://cpprefjp.github.io/reference/chrono/parse.html"/>
      <id>2aeb8c0e6efaba9dcd1f1841dd21bd8c03beebd5:reference/chrono/parse.md</id>
      <updated>2020-11-20T17:42:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/parse.md b/reference/chrono/parse.md
index 932b5d7bb..6022af59f 100644
--- a/reference/chrono/parse.md
+++ b/reference/chrono/parse.md
@@ -60,7 +60,7 @@ namespace std::chrono {
 | `%h` | `%b`と等価 | |
 | `%H` | 24時間時計での10進数の時。改良コマンド`%NH` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%OH`はロケール依存の異なる表現になる | `&amp;#34;17&amp;#34;` |
 | `%I` | 12時間時計での10進数の時。改良コマンド`%NI` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%OI`はロケール依存の異なる表現になる | `&amp;#34;05&amp;#34;` |
-| `%j` | 10進数での年の日。1月1日は`001`。改良コマンド`%Nj` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは3。先頭の0は許可されるが要求はされない。 | `&amp;#34;115&amp;#34;` |
+| `%j` | 10進数での年の日。1月1日は`001`。改良コマンド`%Nj` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは3。先頭の0は許可されるが要求はされない。[`duration`](duration.md)の特殊化が与えられた場合、[`days`](duration_aliases.md)の10進数値として解析される | `&amp;#34;115&amp;#34;` |
 | `%m` | 10進数での月。1月は`01`。改良コマンド`%Nm` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%Om`はロケール依存の異なる表現になる | `&amp;#34;04&amp;#34;` |
 | `%M` | 10進数での分。改良コマンド`%NM` (Nは10進整数) によって読み込む最大の文字数を指定できる。Nを指定しない場合、デフォルトは2。先頭の0は許可されるが要求はされない。改良コマンド`%OM`はロケール依存の異なる表現になる | `&amp;#34;14&amp;#34;` |
 | `%n` | ひとつのホワイトスペース文字にマッチする。 | |
@@ -179,3 +179,4 @@ JST
 
 ## 参照
 - [LWG Issue 3269. Parse manipulators do not specify the result of the extraction from stream](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3269)
+- [LWG Issue 3270. Parsing and formatting `%j` with `duration`s](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3270)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_iterator -- common_iterator : 代入演算子追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator.html"/>
      <id>e6191b4087a760bad874bb2cf91dde49d6cc668c:reference/iterator/common_iterator.md</id>
      <updated>2020-11-20T10:58:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator.md b/reference/iterator/common_iterator.md
index 50db5c7d8..b2c5315dc 100644
--- a/reference/iterator/common_iterator.md
+++ b/reference/iterator/common_iterator.md
@@ -54,7 +54,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
 | [`(constructor)`](common_iterator/op_constructor.md) | コンストラクタ | C++20 |
-| [`operator=`](common_iterator/op_assign.md.nolink)          | 代入演算子 | C++20 |
+| [`operator=`](common_iterator/op_assign.md)          | 代入演算子 | C++20 |
 | [`operator*`](common_iterator/op_deref.md.nolink)           | 間接参照演算子 | C++20 |
 | [`operator-&amp;gt;`](common_iterator/op_arrow.md.nolink)          | メンバアクセス演算子 | C++20 |
 | [`operator++`](common_iterator/op_increment.md.nolink)      | イテレータをインクリメントする | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- common_iterator : 代入演算子追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/op_assign.html"/>
      <id>e6191b4087a760bad874bb2cf91dde49d6cc668c:reference/iterator/common_iterator/op_assign.md</id>
      <updated>2020-11-20T10:58:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/op_assign.md b/reference/iterator/common_iterator/op_assign.md
new file mode 100644
index 000000000..c1c6d36b5
--- /dev/null
+++ b/reference/iterator/common_iterator/op_assign.md
@@ -0,0 +1,47 @@
+# operator=
+* iterator[meta header]
+* std[meta namespace]
+* common_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template&amp;lt;class I2, class S2&amp;gt;
+  requires convertible_to&amp;lt;const I2&amp;amp;, I&amp;gt; &amp;amp;&amp;amp; convertible_to&amp;lt;const S2&amp;amp;, S&amp;gt; &amp;amp;&amp;amp;
+           assignable_from&amp;lt;I&amp;amp;, const I2&amp;amp;&amp;gt; &amp;amp;&amp;amp; assignable_from&amp;lt;S&amp;amp;, const S2&amp;amp;&amp;gt;
+common_iterator&amp;amp; operator=(const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; x);
+```
+* assignable_from[link /reference/concepts/assignable_from.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+
+## 概要
+
+`common_iterator`オブジェクトをコピー代入する。
+
+## 事前条件
+
+`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`() == false`であること。
+
+## 効果
+
+`I, S`の値のどちらかを[`variant&amp;lt;I, S&amp;gt;`](/reference/variant/variant.md)型のメンバ変数`_v`に保持しており、`i = x.v_.`[`index()`](/reference/variant/variant/index.md)として、次のどちらか
+
+- `i == _v.index()`が`true`である場合 : `get&amp;lt;i&amp;gt;(v_) = get&amp;lt;i&amp;gt;(x.v_)`
+- それ以外の場合 : `v_.`[`emplace`](/reference/variant/variant/emplace.md)`&amp;lt;i&amp;gt;(get&amp;lt;i&amp;gt;(x.v_))`
+
+## 戻り値
+
+`*this`
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- common_iterator : 代入演算子追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/op_constructor.html"/>
      <id>e6191b4087a760bad874bb2cf91dde49d6cc668c:reference/iterator/common_iterator/op_constructor.md</id>
      <updated>2020-11-20T10:58:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/op_constructor.md b/reference/iterator/common_iterator/op_constructor.md
index 1aba655a2..92411c8f5 100644
--- a/reference/iterator/common_iterator/op_constructor.md
+++ b/reference/iterator/common_iterator/op_constructor.md
@@ -25,7 +25,8 @@ constexpr common_iterator(const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; x);  // (4)
 
 ## 事前条件
 
-- (4) : `x.v_.valueless_by_exception() == false`であること。
+- (4) : `x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`() == false`であること。
+
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_iterator -- common_iterator : コンストラクタ追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator.html"/>
      <id>bcd3e40e06621afcb9cc46e4d48c901c037e271e:reference/iterator/common_iterator.md</id>
      <updated>2020-11-20T10:47:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator.md b/reference/iterator/common_iterator.md
index 47d964995..50db5c7d8 100644
--- a/reference/iterator/common_iterator.md
+++ b/reference/iterator/common_iterator.md
@@ -53,7 +53,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------------------------------------------------------|-------------|-------|
-| [`(constructor)`](common_iterator/op_constructor.md.nolink) | コンストラクタ | C++20 |
+| [`(constructor)`](common_iterator/op_constructor.md) | コンストラクタ | C++20 |
 | [`operator=`](common_iterator/op_assign.md.nolink)          | 代入演算子 | C++20 |
 | [`operator*`](common_iterator/op_deref.md.nolink)           | 間接参照演算子 | C++20 |
 | [`operator-&amp;gt;`](common_iterator/op_arrow.md.nolink)          | メンバアクセス演算子 | C++20 |
@@ -137,7 +137,7 @@ int main() {
 ### 処理系
 - [Clang](/implementation.md#clang): ??
 - [GCC](/implementation.md#gcc): 10.1
-- [Visual C++](/implementation.md#visual_cpp): 2019 Update 7
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
 
 ## 関連項目
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- common_iterator : コンストラクタ追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/op_constructor.html"/>
      <id>bcd3e40e06621afcb9cc46e4d48c901c037e271e:reference/iterator/common_iterator/op_constructor.md</id>
      <updated>2020-11-20T10:47:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/op_constructor.md b/reference/iterator/common_iterator/op_constructor.md
new file mode 100644
index 000000000..1aba655a2
--- /dev/null
+++ b/reference/iterator/common_iterator/op_constructor.md
@@ -0,0 +1,92 @@
+# コンストラクタ
+* iterator[meta header]
+* std[meta namespace]
+* common_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr common_iterator() = default;                        // (1)
+
+constexpr common_iterator(I i);                               // (2)
+
+constexpr common_iterator(S s);                               // (3)
+
+template&amp;lt;class I2, class S2&amp;gt;
+  requires convertible_to&amp;lt;const I2&amp;amp;, I&amp;gt; &amp;amp;&amp;amp;
+           convertible_to&amp;lt;const S2&amp;amp;, S&amp;gt;
+constexpr common_iterator(const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; x);  // (4)
+```
+* convertible_to[link /reference/concepts/convertible_to.md]
+
+## 概要
+
+`common_iterator`オブジェクトを構築する。
+
+## 事前条件
+
+- (4) : `x.v_.valueless_by_exception() == false`であること。
+
+## 効果
+
+`I, S`の値のどちらかを[`variant&amp;lt;I, S&amp;gt;`](/reference/variant/variant.md)型のメンバ変数`_v`に保持するとする。
+
+- (1) : `_v`をデフォルト構築（`I`をデフォルト構築して初期化）する。
+- (2) : `v_{`[`in_place_type`](/reference/utility/in_place_type_t.md)`&amp;lt;I&amp;gt;, std::move(i)}`が行われたかのように`_v`を初期化する。
+- (3) : `v_{`[`in_place_type`](/reference/utility/in_place_type_t.md)`&amp;lt;S&amp;gt;, std::move(s)}`が行われたかのように`_v`を初期化する。
+- (4) : `i = x.v_.`[`index()`](/reference/variant/variant/index.md)として、`v_{`[`in_place_index`](/reference/utility/in_place_index_t.md)`&amp;lt;i&amp;gt;, get&amp;lt;i&amp;gt;(x.v_)}`が行われたかのように`_v`を初期化する。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+
+int main() {
+  auto seq = std::views::iota(1) | std::views::take(5);
+
+  using CI = std::common_iterator&amp;lt;std::ranges::iterator_t&amp;lt;decltype(seq)&amp;gt;, std::ranges::sentinel_t&amp;lt;decltype(seq)&amp;gt;&amp;gt;;
+
+  auto i = std::ranges::begin(seq);
+  auto s = std::ranges::end(seq);
+
+  // (1) デフォルトコンストラクタ
+  CI ci1{};
+
+  // (2) イテレータから構築
+  CI ci2{i};
+
+  // (3) 番兵から構築
+  CI ci3{s};
+
+  // (3) コピーコンストラクタ
+  CI ci4{ci2};
+}
+```
+* std::common_iterator[color ff0000]
+* views::iota[link /reference/ranges/iota_view.md.nolink]
+* views::take[link /reference/ranges/take_view.md.nolink]
+* iterator_t[link /reference/ranges/iterator_t.md.nolink]
+* sentinel_t[link /reference/ranges/sentinel_t.md.nolink]
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+* seranges::end[link /reference/ranges/end.md.nolink]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 関連項目
+
+- [`variant` コンストラクタ](/reference/variant/variant/op_constructor.md)
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-08-26T04:19:30.357726</updated>
  <id>b13e7a24-c9a4-451a-b6e5-993b68012836</id>

  
    <entry>
      <title>cend -- 不可視文字を削除</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cend.html"/>
      <id>4506c6afb50e04118ef75b54a013cfa189914982:reference/ranges/cend.md</id>
      <updated>2021-08-26T13:14:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cend.md b/reference/ranges/cend.md
index 43494da14..e092ceaf7 100644
--- a/reference/ranges/cend.md
+++ b/reference/ranges/cend.md
@@ -28,7 +28,7 @@ namespace std::ranges {
 範囲が`const`な場合について[`ranges::end`](end.md)をカスタマイズすることで、`ranges::cend`をカスタマイズできる。
 
 ## 備考
-`ranges​::c​end(E)`が有効な式であるとき、`ranges::cend(E)`の型`S`、[`ranges::cbegin`](cbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
+`ranges::cend(E)`が有効な式であるとき、`ranges::cend(E)`の型`S`、[`ranges::cbegin`](cbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- 不可視文字を削除</title>
      <link href="https://cpprefjp.github.io/reference/ranges/crbegin.html"/>
      <id>4506c6afb50e04118ef75b54a013cfa189914982:reference/ranges/crbegin.md</id>
      <updated>2021-08-26T13:14:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/crbegin.md b/reference/ranges/crbegin.md
index 678d82ad3..0b1dd5689 100644
--- a/reference/ranges/crbegin.md
+++ b/reference/ranges/crbegin.md
@@ -17,14 +17,14 @@ namespace std::ranges {
 ## 効果
 部分式`E`の型を`T`とする。このとき、式`ranges::crbegin(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges​::​rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges​::​rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+1. `E`がlvalueであれば、[`ranges::rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+2. それ以外の場合、[`ranges::rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
 
 ## 戻り値
 範囲の末尾を指す読み取り専用逆イテレータ。
 
 ## カスタマイゼーションポイント
-範囲が`const`な場合について[`ranges​::​rbegin`](rbegin.md)をカスタマイズすることで、`ranges::crbegin`をカスタマイズできる。
+範囲が`const`な場合について[`ranges::rbegin`](rbegin.md)をカスタマイズすることで、`ranges::crbegin`をカスタマイズできる。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- 不可視文字を削除</title>
      <link href="https://cpprefjp.github.io/reference/ranges/crend.html"/>
      <id>4506c6afb50e04118ef75b54a013cfa189914982:reference/ranges/crend.md</id>
      <updated>2021-08-26T13:14:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/crend.md b/reference/ranges/crend.md
index 8095c1a5d..c06b53ff2 100644
--- a/reference/ranges/crend.md
+++ b/reference/ranges/crend.md
@@ -18,8 +18,8 @@ namespace std::ranges {
 ## 効果
 部分式`E`の型を`T`とする。このとき、式`ranges::crend(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges​::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges​::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+1. `E`がlvalueであれば、[`ranges::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+2. それ以外の場合、[`ranges::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
 
 ## 戻り値
 範囲の先頭の前を指す、読み取り専用逆イテレータもしくは番兵。
@@ -28,7 +28,7 @@ namespace std::ranges {
 範囲が`const`な場合について[`ranges::rend`](rend.md)をカスタマイズすることで、`ranges::crend`をカスタマイズできる。
 
 ## 備考
-`ranges​::c​rend(E)`が有効な式であるとき、`ranges::crend(E)`の型`S`、[`ranges::crbegin`](crbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
+`ranges::crend(E)`が有効な式であるとき、`ranges::crend(E)`の型`S`、[`ranges::crbegin`](crbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- 不可視文字を削除</title>
      <link href="https://cpprefjp.github.io/reference/ranges/end.html"/>
      <id>4506c6afb50e04118ef75b54a013cfa189914982:reference/ranges/end.md</id>
      <updated>2021-08-26T13:14:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/end.md b/reference/ranges/end.md
index 2cd8af8ec..59b99721c 100644
--- a/reference/ranges/end.md
+++ b/reference/ranges/end.md
@@ -48,7 +48,7 @@ constexpr decay_t&amp;lt;T&amp;gt; decay-copy(T&amp;amp;&amp;amp; v) noexcept(is_nothrow_convertible_v&amp;lt;T, deca
 3か4の条件を満たすようにする。例えば、ユーザー定義のフリー関数`end`を定義するか、ユーザー定義のクラスにメンバ関数`end`を持たせることでカスタマイズできる。
 
 ## 備考
-`ranges​::​end(E)`が有効な式であるとき、`ranges::end(E)`の型`S`、[`ranges::begin`](begin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
+`ranges::end(E)`が有効な式であるとき、`ranges::end(E)`の型`S`、[`ranges::begin`](begin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- 不可視文字を削除</title>
      <link href="https://cpprefjp.github.io/reference/ranges/rbegin.html"/>
      <id>4506c6afb50e04118ef75b54a013cfa189914982:reference/ranges/rbegin.md</id>
      <updated>2021-08-26T13:14:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/rbegin.md b/reference/ranges/rbegin.md
index 3856c3c15..ff2101314 100644
--- a/reference/ranges/rbegin.md
+++ b/reference/ranges/rbegin.md
@@ -24,7 +24,7 @@ namespace std::ranges {
 2. `T`が配列型かつ[`remove_all_extents_t`](/reference/type_traits/remove_all_extents.md)`&amp;lt;T&amp;gt;`が不完全型であれば、呼び出しは不適格(診断不要)。
 3. `decay-copy(t.rbegin())`が有効な式でその型が[`input_or_output_iterator`](/reference/iterator/input_or_output_iterator.md)のモデルであれば、`decay-copy(t.rbegin())`と等しい。
 4. `T`がクラス型または列挙体であって、`rbegin`がADLで見つかり、`decay-copy(rbegin(t))`が有効な式でその型が[`input_or_output_iterator`](/reference/iterator/input_or_output_iterator.md)のモデルであれば、`decay-copy(rbegin(t))`と等しい。
-5. [`ranges::begin`](begin.md)`(t)`と[`ranges::end`](end.md)`(t)`が同じ型をもつ有効な式で、その型が[`bidirectional_iterator`](/reference/iterator/bidirectional_iterator.md)のモデルであれば、[`make_reverse_iterator`](/reference/iterator/make_reverse_iterator.md)`(`[`ranges​::​end`](end.md)`(t))`と等しい。
+5. [`ranges::begin`](begin.md)`(t)`と[`ranges::end`](end.md)`(t)`が同じ型をもつ有効な式で、その型が[`bidirectional_iterator`](/reference/iterator/bidirectional_iterator.md)のモデルであれば、[`make_reverse_iterator`](/reference/iterator/make_reverse_iterator.md)`(`[`ranges::end`](end.md)`(t))`と等しい。
 
 どれにも当てはまらないとき、呼び出しは不適格。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- 不可視文字を削除</title>
      <link href="https://cpprefjp.github.io/reference/ranges/rend.html"/>
      <id>4506c6afb50e04118ef75b54a013cfa189914982:reference/ranges/rend.md</id>
      <updated>2021-08-26T13:14:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/rend.md b/reference/ranges/rend.md
index e5c7a287c..8700ce9f8 100644
--- a/reference/ranges/rend.md
+++ b/reference/ranges/rend.md
@@ -21,9 +21,9 @@ namespace std::ranges {
 
 1. `E`がrvalueかつ[`enable_borrowed_range`](enable_borrowed_range.md)`&amp;lt;`[`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;T&amp;gt;&amp;gt;`が`false`であれば、呼び出しは不適格。
 2. `T`が配列型かつ[`remove_all_extents_t`](/reference/type_traits/remove_all_extents.md)`&amp;lt;T&amp;gt;`が不完全型であれば、呼び出しは不適格(診断不要)。
-3. `decay-copy(t.rend())`が有効な式でその型が[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;decltype(`[`ranges​::​rbegin`](rbegin.md)`(E))&amp;gt;`のモデルであれば、`decay-copy(t.rend())`と等しい。
-4. `T`がクラス型または列挙体であって、`rend`がADLで見つかり、`decay-copy(rend(t))`が有効な式でその型が[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;decltype(`[`ranges​::​rbegin`](rbegin.md)`(E))&amp;gt;`のモデルであれば、`decay-copy(rend(t))`と等しい。
-5. [`ranges::begin`](begin.md)`(t)`と[`ranges::end`](end.md)`(t)`が同じ型をもつ有効な式で、その型が[`bidirectional_iterator`](/reference/iterator/bidirectional_iterator.md)のモデルであれば、[`make_reverse_iterator`](/reference/iterator/make_reverse_iterator.md)`(`[`ranges​::​begin`](​begin.md)`(t))`と等しい。
+3. `decay-copy(t.rend())`が有効な式でその型が[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;decltype(`[`ranges::rbegin`](rbegin.md)`(E))&amp;gt;`のモデルであれば、`decay-copy(t.rend())`と等しい。
+4. `T`がクラス型または列挙体であって、`rend`がADLで見つかり、`decay-copy(rend(t))`が有効な式でその型が[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;decltype(`[`ranges::rbegin`](rbegin.md)`(E))&amp;gt;`のモデルであれば、`decay-copy(rend(t))`と等しい。
+5. [`ranges::begin`](begin.md)`(t)`と[`ranges::end`](end.md)`(t)`が同じ型をもつ有効な式で、その型が[`bidirectional_iterator`](/reference/iterator/bidirectional_iterator.md)のモデルであれば、[`make_reverse_iterator`](/reference/iterator/make_reverse_iterator.md)`(`[`ranges::begin`](begin.md)`(t))`と等しい。
 
 どれにも当てはまらないとき、呼び出しは不適格。
 
@@ -50,7 +50,7 @@ constexpr decay_t&amp;lt;T&amp;gt; decay-copy(T&amp;amp;&amp;amp; v) noexcept(is_nothrow_convertible_v&amp;lt;T, deca
 または、5の条件を満たすようにして、[`ranges::begin`](begin.md)、[`ranges::end`](end.md)をカスタマイズすることで、`ranges::rend`をカスタマイズできる。
 
 ## 備考
-`ranges​::r​end(E)`が有効な式であるとき、`ranges::rend(E)`の型`S`、[`ranges::rbegin`](rbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
+`ranges::rend(E)`が有効な式であるとき、`ranges::rend(E)`の型`S`、[`ranges::rbegin`](rbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- 逆イテレータ取得関数の説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>8f9fd59ac055a1150cbe07d17775b8f89816922f:reference/ranges.md</id>
      <updated>2021-08-26T12:16:02+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt; では、イテレータの組ではなく、コンテナや配列、部分的なコンテナなどを扱う範囲ライブラリを提供する。&lt;/p&gt;
&lt;p&gt;C++17までは、標準アルゴリズム関数はイテレータの組を扱い、範囲を直接扱ってはいなかった。
範囲ライブラリはBoost.Rangeやrange-v3などで実績があり、C++標準にも取り込まれることになった。&lt;/p&gt;
&lt;h2&gt;範囲アクセス&lt;/h2&gt;
&lt;p&gt;これらの機能は従来&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;でフリー関数として提供されていた。
C++20では関数によるカスタマイゼーションポイントの問題点を解消するため、関数オブジェクトとして再実装されている。
互換性を維持するために従来の関数も残っているが、これらのカスタマイゼーションポイントオブジェクトを使用することが推奨される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/begin.html&#34;&gt;begin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指すイテレータを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/end.html&#34;&gt;end&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指すイテレータもしくは番兵を取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/cbegin.html&#34;&gt;cbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指す読み取り専用イテレータを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/cend.html&#34;&gt;cend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指す読み取り専用イテレータもしくは番兵を取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/rbegin.html&#34;&gt;rbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す逆イテレータを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/rend.html&#34;&gt;rend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す逆イテレータもしくは番兵を取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/crbegin.html&#34;&gt;crbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す読み取り専用逆イテレータを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/crend.html&#34;&gt;crend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す読み取り専用逆イテレータもしくは番兵を取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/size.md.nolink&#34;&gt;size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素数を取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/ssize.md.nolink&#34;&gt;ssize&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素数を、符号付き整数型で取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/empty.md.nolink&#34;&gt;empty&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲が空かどうかを判定する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/data.md.nolink&#34;&gt;data&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素配列へのポインタを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/cdata.md.nolink&#34;&gt;cdata&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素配列への読み取り専用ポインタを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;範囲に関連する型へのアクセス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/iterator_t.md.nolink&#34;&gt;iterator_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲のイテレータ型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/sentinel_t.md.nolink&#34;&gt;sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の番兵型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_difference_t.md.nolink&#34;&gt;range_difference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲のイテレータの差の型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_size_t.md.nolink&#34;&gt;range_size_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲のサイズの型を取得する(alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_value_t.md.nolink&#34;&gt;range_value_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素の型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_reference_t.md.nolink&#34;&gt;range_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素の参照型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_rvalue_reference_t.md.nolink&#34;&gt;range_rvalue_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素の右辺値参照型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;範囲コンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range.md.nolink&#34;&gt;range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を定義するコンセプト (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/borrowed_range.md.nolink&#34;&gt;borrowed_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所有権を持たない範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/sized_range.md.nolink&#34;&gt;sized_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サイズを一定時間で求められる範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/output_range.md.nolink&#34;&gt;output_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータが出力イテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/input_range.md.nolink&#34;&gt;input_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータが入力イテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/forward_range.md.nolink&#34;&gt;forward_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータが前進イテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/bidirectional_range.md.nolink&#34;&gt;bidirectional_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータが双方向イテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/random_access_range.md.nolink&#34;&gt;random_access_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータがランダムアクセスイテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/contiguous_range.md.nolink&#34;&gt;contiguous_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータが隣接イテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/common_range.md.nolink&#34;&gt;common_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータと番兵の型が等しい範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/viewable_range.md.nolink&#34;&gt;viewable_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビューに変換できる範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;カスタマイゼーションポイント&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/enable_borrowed_range.html&#34;&gt;enable_borrowed_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を&lt;code&gt;borrowed_range&lt;/code&gt;にする (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/enable_view.html&#34;&gt;enable_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を&lt;code&gt;view&lt;/code&gt;にする (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/disable_sized_range.html&#34;&gt;disable_sized_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を&lt;code&gt;sized_range&lt;/code&gt;にならないようにする (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;部分範囲&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/view_interface.md.nolink&#34;&gt;view_interface&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビューの基底クラスとして推奨されるクラス (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/subrange_kind.md.nolink&#34;&gt;subrange_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;部分範囲の種類を表す列挙体 (enum class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/subrange.md.nolink&#34;&gt;subrange&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータペアを範囲として扱う (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ダングリングイテレータハンドリング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/dangling.md.nolink&#34;&gt;dangling&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ダングリングイテレータ、ダングリング範囲を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/borrowed_iterator_t.md.nolink&#34;&gt;borrowed_iterator_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲が&lt;code&gt;borrowed_range&lt;/code&gt;ではないとき&lt;code&gt;dangling&lt;/code&gt;となるイテレータ (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/borrowed_subrange_t.md.nolink&#34;&gt;borrowed_subrange_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲が&lt;code&gt;borrowed_range&lt;/code&gt;ではないとき&lt;code&gt;dangling&lt;/code&gt;となる部分範囲 (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/view_base.html&#34;&gt;view_base&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基底クラスとすることで&lt;code&gt;view&lt;/code&gt;となるタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/view.md.nolink&#34;&gt;view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビューである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Rangeファクトリ&lt;/h3&gt;
&lt;h4&gt;empty view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/empty_view.md.nolink&#34;&gt;empty_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空の範囲 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/empty.md.nolink&#34;&gt;empty&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;empty_view&lt;/code&gt;を生成する (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;single view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/single_view.md.nolink&#34;&gt;single_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した値1つからなる範囲 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/single.md.nolink&#34;&gt;single&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;single_view&lt;/code&gt;を生成する (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;iota view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/iota_view.md.nolink&#34;&gt;iota_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単調増加列である範囲 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/iota.md.nolink&#34;&gt;iota&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iota_view&lt;/code&gt;を生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;istream view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/basic_istream_view.md.nolink&#34;&gt;basic_istream_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームから値を読む範囲 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/istream_view.md.nolink&#34;&gt;istream_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_istream_view&lt;/code&gt;を生成する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Rangeアダプタ&lt;/h3&gt;
&lt;h4&gt;all view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/ref_view.md.nolink&#34;&gt;ref_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲への参照として振る舞うビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/all.md.nolink&#34;&gt;all&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲への参照として振る舞うビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/all_t.md.nolink&#34;&gt;all_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;all&lt;/code&gt;の戻り値型 (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;filter view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/filter_view.md.nolink&#34;&gt;filter_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した条件を満たす要素だけを集めるビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/filter.md.nolink&#34;&gt;filter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した条件を満たす要素だけを集めるビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;transform view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/transform_view.md.nolink&#34;&gt;transform_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した関数で各要素を変換するビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/transform.md.nolink&#34;&gt;transform&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した関数で各要素を変換するビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;take view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/take_view.md.nolink&#34;&gt;take_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した個数だけ取り出すビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/take.md.nolink&#34;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した個数だけ取り出すビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;take while view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/take_while_view.md.nolink&#34;&gt;take_while_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した条件を満たす範囲を取り出すビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/take_while.md.nolink&#34;&gt;take_while&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した条件を満たす範囲を取り出すビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;drop view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/drop_view.md.nolink&#34;&gt;drop_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した個数だけ除外するビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/drop.md.nolink&#34;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した個数だけ除外するビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;drop while view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/drop_while_view.md.nolink&#34;&gt;drop_while_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した条件を満たす範囲を除外するビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/drop_while.md.nolink&#34;&gt;drop_while&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した条件を満たす範囲を除外するビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;join view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/join_view.md.nolink&#34;&gt;join_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ネストされた範囲を平坦にするビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/join.md.nolink&#34;&gt;join&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ネストされた範囲を平坦にするビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;split view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/split_view.md.nolink&#34;&gt;split_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を指定したデリミタで分割するビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/split.md.nolink&#34;&gt;split&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を指定したデリミタで分割するビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;counted view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/counted.md.nolink&#34;&gt;counted&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを指定した数だけ進めるビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;common view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/common_view.md.nolink&#34;&gt;common_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;common_range&lt;/code&gt;にしたビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/common.md.nolink&#34;&gt;common&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;common_range&lt;/code&gt;なビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;reverse view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/reverse_view.md.nolink&#34;&gt;reverse_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆順のビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/reverse.md.nolink&#34;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆順のビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;elements view&lt;/h4&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/elements_view.md.nolink&#34;&gt;elements_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第n要素を集めたビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/keys_view.md.nolink&#34;&gt;keys_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第0要素を集めたビュー (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/values_view.md.nolink&#34;&gt;values_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第1要素を集めたビュー (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/elements.md.nolink&#34;&gt;elements&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;elements_view&lt;/code&gt;を生成する (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/keys.md.nolink&#34;&gt;keys&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;keys_view&lt;/code&gt;を生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/values.md.nolink&#34;&gt;values&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;values_view&lt;/code&gt;を生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 13.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 10.1.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2019 Update 10&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4861/ranges&#34; target=&#34;_blank&#34;&gt;N4861 24 Ranges library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techbookfest.org/product/5134506308665344&#34; target=&#34;_blank&#34;&gt;C++20 ranges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- 逆イテレータ取得関数の説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/begin.html"/>
      <id>8f9fd59ac055a1150cbe07d17775b8f89816922f:reference/ranges/begin.md</id>
      <updated>2021-08-26T12:16:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/begin.md b/reference/ranges/begin.md
index 614a8526c..caeefcdcd 100644
--- a/reference/ranges/begin.md
+++ b/reference/ranges/begin.md
@@ -26,7 +26,7 @@ namespace std::ranges {
 
 どれにも当てはまらないとき、呼び出しは不適格。
 
-### `decay-copy`の定義
+### decay-copyの定義
 
 ```cpp
 template&amp;lt;class T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- 逆イテレータ取得関数の説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/crbegin.html"/>
      <id>8f9fd59ac055a1150cbe07d17775b8f89816922f:reference/ranges/crbegin.md</id>
      <updated>2021-08-26T12:16:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/crbegin.md b/reference/ranges/crbegin.md
new file mode 100644
index 000000000..678d82ad3
--- /dev/null
+++ b/reference/ranges/crbegin.md
@@ -0,0 +1,102 @@
+# crbegin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cpo[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  inline namespace /*unspecified*/ {
+    inline constexpr /*unspecified*/ crbegin = /*unspecified*/;
+  }
+}
+```
+## 概要
+範囲の末尾を指す読み取り専用逆イテレータを取得する関数オブジェクト。
+
+## 効果
+部分式`E`の型を`T`とする。このとき、式`ranges::crbegin(E)`の効果は以下の式と等しい。
+
+1. `E`がlvalueであれば、[`ranges​::​rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+2. それ以外の場合、[`ranges​::​rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+
+## 戻り値
+範囲の末尾を指す読み取り専用逆イテレータ。
+
+## カスタマイゼーションポイント
+範囲が`const`な場合について[`ranges​::​rbegin`](rbegin.md)をカスタマイズすることで、`ranges::crbegin`をカスタマイズできる。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void print(int x)
+{
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+}
+
+int main()
+{
+  // コンテナ
+  {
+    std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+
+    decltype(v)::const_reverse_iterator first = std::ranges::crbegin(v);
+    decltype(v)::const_reverse_iterator last = std::ranges::crend(v);
+
+    std::for_each(first, last, print);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // 組み込み配列
+  {
+    int ar[] = {4, 5, 6};
+
+    std::reverse_iterator&amp;lt;const int*&amp;gt; first = std::ranges::crbegin(ar);
+    std::reverse_iterator&amp;lt;const int*&amp;gt; last = std::ranges::crend(ar);
+
+    std::for_each(first, last, print);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // 初期化子リスト
+  {
+    std::initializer_list&amp;lt;int&amp;gt; init = {7, 8, 9};
+
+    std::reverse_iterator&amp;lt;const int*&amp;gt; first = std::ranges::crbegin(init);
+    std::reverse_iterator&amp;lt;const int*&amp;gt; last = std::ranges::crend(init);
+
+    std::for_each(first, last, print);
+  }
+}
+```
+* std::ranges::crbegin[color ff0000]
+* std::ranges::crend[link crend.md]
+* std::reverse_iterator[link /reference/iterator/reverse_iterator.md]
+
+### 出力
+```
+3 2 1 
+6 5 4 
+9 8 7 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 関連項目
+- [`std::crbegin`](/reference/iterator/crbegin.md)
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- 逆イテレータ取得関数の説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/crend.html"/>
      <id>8f9fd59ac055a1150cbe07d17775b8f89816922f:reference/ranges/crend.md</id>
      <updated>2021-08-26T12:16:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/crend.md b/reference/ranges/crend.md
new file mode 100644
index 000000000..8095c1a5d
--- /dev/null
+++ b/reference/ranges/crend.md
@@ -0,0 +1,106 @@
+# crend
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cpo[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  inline namespace /*unspecified*/ {
+    inline constexpr /*unspecified*/ crend = /*unspecified*/;
+  }
+}
+```
+
+## 概要
+範囲の先頭の前を指す、読み取り専用逆イテレータもしくは番兵を取得する関数オブジェクト。
+
+## 効果
+部分式`E`の型を`T`とする。このとき、式`ranges::crend(E)`の効果は以下の式と等しい。
+
+1. `E`がlvalueであれば、[`ranges​::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+2. それ以外の場合、[`ranges​::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+
+## 戻り値
+範囲の先頭の前を指す、読み取り専用逆イテレータもしくは番兵。
+
+## カスタマイゼーションポイント
+範囲が`const`な場合について[`ranges::rend`](rend.md)をカスタマイズすることで、`ranges::crend`をカスタマイズできる。
+
+## 備考
+`ranges​::c​rend(E)`が有効な式であるとき、`ranges::crend(E)`の型`S`、[`ranges::crbegin`](crbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void print(int x)
+{
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+}
+
+int main()
+{
+  // コンテナ
+  {
+    std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+
+    decltype(v)::const_reverse_iterator first = std::ranges::crbegin(v);
+    decltype(v)::const_reverse_iterator last = std::ranges::crend(v);
+
+    std::for_each(first, last, print);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // 組み込み配列
+  {
+    int ar[] = {4, 5, 6};
+
+    std::reverse_iterator&amp;lt;const int*&amp;gt; first = std::ranges::crbegin(ar);
+    std::reverse_iterator&amp;lt;const int*&amp;gt; last = std::ranges::crend(ar);
+
+    std::for_each(first, last, print);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // 初期化子リスト
+  {
+    std::initializer_list&amp;lt;int&amp;gt; init = {7, 8, 9};
+
+    std::reverse_iterator&amp;lt;const int*&amp;gt; first = std::ranges::crbegin(init);
+    std::reverse_iterator&amp;lt;const int*&amp;gt; last = std::ranges::crend(init);
+
+    std::for_each(first, last, print);
+  }
+}
+```
+* std::ranges::crend[color ff0000]
+* std::ranges::crbegin[link crbegin.md]
+* std::reverse_iterator[link /reference/iterator/reverse_iterator.md]
+
+### 出力
+```
+3 2 1 
+6 5 4 
+9 8 7 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 関連項目
+- [`std::crend`](/reference/iterator/crend.md)
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- 逆イテレータ取得関数の説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/end.html"/>
      <id>8f9fd59ac055a1150cbe07d17775b8f89816922f:reference/ranges/end.md</id>
      <updated>2021-08-26T12:16:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/end.md b/reference/ranges/end.md
index cd5abf47d..2cd8af8ec 100644
--- a/reference/ranges/end.md
+++ b/reference/ranges/end.md
@@ -26,7 +26,7 @@ namespace std::ranges {
 
 どれにも当てはまらないとき、呼び出しは不適格。
 
-### `decay-copy`の定義
+### decay-copyの定義
 
 ```cpp
 template&amp;lt;class T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- 逆イテレータ取得関数の説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/rbegin.html"/>
      <id>8f9fd59ac055a1150cbe07d17775b8f89816922f:reference/ranges/rbegin.md</id>
      <updated>2021-08-26T12:16:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/rbegin.md b/reference/ranges/rbegin.md
new file mode 100644
index 000000000..3856c3c15
--- /dev/null
+++ b/reference/ranges/rbegin.md
@@ -0,0 +1,126 @@
+# rbegin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cpo[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  inline namespace /*unspecified*/ {
+    inline constexpr /*unspecified*/ rbegin = /*unspecified*/;
+  }
+}
+```
+
+## 概要
+範囲の末尾を指す逆イテレータを取得する関数オブジェクト。
+
+## 効果
+
+部分式`E`の型を`T`、`t`を`E`を評価した値とし、関数`decay-copy`が後述のように定義されているとする。
+このとき、式`ranges::rbegin(E)`の効果は以下の通り。
+
+1. `E`がrvalueかつ[`enable_borrowed_range`](enable_borrowed_range.md)`&amp;lt;`[`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;T&amp;gt;&amp;gt;`が`false`であれば、呼び出しは不適格。
+2. `T`が配列型かつ[`remove_all_extents_t`](/reference/type_traits/remove_all_extents.md)`&amp;lt;T&amp;gt;`が不完全型であれば、呼び出しは不適格(診断不要)。
+3. `decay-copy(t.rbegin())`が有効な式でその型が[`input_or_output_iterator`](/reference/iterator/input_or_output_iterator.md)のモデルであれば、`decay-copy(t.rbegin())`と等しい。
+4. `T`がクラス型または列挙体であって、`rbegin`がADLで見つかり、`decay-copy(rbegin(t))`が有効な式でその型が[`input_or_output_iterator`](/reference/iterator/input_or_output_iterator.md)のモデルであれば、`decay-copy(rbegin(t))`と等しい。
+5. [`ranges::begin`](begin.md)`(t)`と[`ranges::end`](end.md)`(t)`が同じ型をもつ有効な式で、その型が[`bidirectional_iterator`](/reference/iterator/bidirectional_iterator.md)のモデルであれば、[`make_reverse_iterator`](/reference/iterator/make_reverse_iterator.md)`(`[`ranges​::​end`](end.md)`(t))`と等しい。
+
+どれにも当てはまらないとき、呼び出しは不適格。
+
+### decay-copyの定義
+
+```cpp
+template&amp;lt;class T&amp;gt;
+constexpr decay_t&amp;lt;T&amp;gt; decay-copy(T&amp;amp;&amp;amp; v) noexcept(is_nothrow_convertible_v&amp;lt;T, decay_t&amp;lt;T&amp;gt;&amp;gt;)
+{
+  return std::forward&amp;lt;T&amp;gt;(v);
+}
+```
+* decay-copy[italic]
+* forward[link /reference/utility/forward.md]
+* decay_t[link /reference/type_traits/decay.md]
+* decay_t[link /reference/type_traits/decay.md]
+* is_nothrow_convertible_v[link /reference/type_traits/is_nothrow_convertible.md]
+
+## 戻り値
+範囲の末尾を指す逆イテレータ。
+
+## カスタマイゼーションポイント
+3か4の条件を満たすようにする。例えば、ユーザー定義のフリー関数`rbegin`を定義するか、ユーザー定義のクラスにメンバ関数`rbegin`を持たせることでカスタマイズできる。
+または、5の条件を満たすようにして、[`ranges::begin`](begin.md)、[`ranges::end`](end.md)をカスタマイズすることで、`ranges::rbegin`をカスタマイズできる。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void print(int x)
+{
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+}
+
+int main()
+{
+  // コンテナ
+  {
+    std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+
+    decltype(v)::reverse_iterator first = std::ranges::rbegin(v);
+    decltype(v)::reverse_iterator last = std::ranges::rend(v);
+
+    std::for_each(first, last, print);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // 組み込み配列
+  {
+    int ar[] = {4, 5, 6};
+
+    std::reverse_iterator&amp;lt;int*&amp;gt; first = std::ranges::rbegin(ar);
+    std::reverse_iterator&amp;lt;int*&amp;gt; last = std::ranges::rend(ar);
+
+    std::for_each(first, last, print);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // 初期化子リスト
+  {
+    std::initializer_list&amp;lt;int&amp;gt; init = {7, 8, 9};
+
+    std::reverse_iterator&amp;lt;const int*&amp;gt; first = std::ranges::rbegin(init);
+    std::reverse_iterator&amp;lt;const int*&amp;gt; last = std::ranges::rend(init);
+
+    std::for_each(first, last, print);
+  }
+}
+```
+* std::ranges::rbegin[color ff0000]
+* std::ranges::rend[link rend.md]
+* std::reverse_iterator[link /reference/iterator/reverse_iterator.md]
+
+### 出力
+```
+3 2 1 
+6 5 4 
+9 8 7 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 関連項目
+- [`std::rbegin`](/reference/iterator/rbegin.md)
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- 逆イテレータ取得関数の説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/rend.html"/>
      <id>8f9fd59ac055a1150cbe07d17775b8f89816922f:reference/ranges/rend.md</id>
      <updated>2021-08-26T12:16:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/rend.md b/reference/ranges/rend.md
new file mode 100644
index 000000000..e5c7a287c
--- /dev/null
+++ b/reference/ranges/rend.md
@@ -0,0 +1,128 @@
+# rend
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cpo[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  inline namespace /*unspecified*/ {
+    inline constexpr /*unspecified*/ rend = /*unspecified*/;
+  }
+}
+```
+
+## 概要
+範囲の先頭の前を指す逆イテレータもしくは番兵を取得する関数オブジェクト。
+
+## 効果
+部分式`E`の型を`T`、`t`を`E`を評価した値とし、関数`decay-copy`が後述のように定義されているとする。
+このとき、式`ranges::begin(E)`の効果は以下の通り。
+
+1. `E`がrvalueかつ[`enable_borrowed_range`](enable_borrowed_range.md)`&amp;lt;`[`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;T&amp;gt;&amp;gt;`が`false`であれば、呼び出しは不適格。
+2. `T`が配列型かつ[`remove_all_extents_t`](/reference/type_traits/remove_all_extents.md)`&amp;lt;T&amp;gt;`が不完全型であれば、呼び出しは不適格(診断不要)。
+3. `decay-copy(t.rend())`が有効な式でその型が[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;decltype(`[`ranges​::​rbegin`](rbegin.md)`(E))&amp;gt;`のモデルであれば、`decay-copy(t.rend())`と等しい。
+4. `T`がクラス型または列挙体であって、`rend`がADLで見つかり、`decay-copy(rend(t))`が有効な式でその型が[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;decltype(`[`ranges​::​rbegin`](rbegin.md)`(E))&amp;gt;`のモデルであれば、`decay-copy(rend(t))`と等しい。
+5. [`ranges::begin`](begin.md)`(t)`と[`ranges::end`](end.md)`(t)`が同じ型をもつ有効な式で、その型が[`bidirectional_iterator`](/reference/iterator/bidirectional_iterator.md)のモデルであれば、[`make_reverse_iterator`](/reference/iterator/make_reverse_iterator.md)`(`[`ranges​::​begin`](​begin.md)`(t))`と等しい。
+
+どれにも当てはまらないとき、呼び出しは不適格。
+
+### decay-copyの定義
+
+```cpp
+template&amp;lt;class T&amp;gt;
+constexpr decay_t&amp;lt;T&amp;gt; decay-copy(T&amp;amp;&amp;amp; v) noexcept(is_nothrow_convertible_v&amp;lt;T, decay_t&amp;lt;T&amp;gt;&amp;gt;)
+{
+  return std::forward&amp;lt;T&amp;gt;(v);
+}
+```
+* decay-copy[italic]
+* forward[link /reference/utility/forward.md]
+* decay_t[link /reference/type_traits/decay.md]
+* decay_t[link /reference/type_traits/decay.md]
+* is_nothrow_convertible_v[link /reference/type_traits/is_nothrow_convertible.md]
+
+## 戻り値
+範囲の先頭の前を指す逆イテレータもしくは番兵。
+
+## カスタマイゼーションポイント
+3か4の条件を満たすようにする。例えば、ユーザー定義のフリー関数`rend`を定義するか、ユーザー定義のクラスにメンバ関数`rend`を持たせることでカスタマイズできる。
+または、5の条件を満たすようにして、[`ranges::begin`](begin.md)、[`ranges::end`](end.md)をカスタマイズすることで、`ranges::rend`をカスタマイズできる。
+
+## 備考
+`ranges​::r​end(E)`が有効な式であるとき、`ranges::rend(E)`の型`S`、[`ranges::rbegin`](rbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+void print(int x)
+{
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+}
+
+int main()
+{
+  // コンテナ
+  {
+    std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+
+    decltype(v)::reverse_iterator first = std::ranges::rbegin(v);
+    decltype(v)::reverse_iterator last = std::ranges::rend(v);
+
+    std::for_each(first, last, print);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // 組み込み配列
+  {
+    int ar[] = {4, 5, 6};
+
+    std::reverse_iterator&amp;lt;int*&amp;gt; first = std::ranges::rbegin(ar);
+    std::reverse_iterator&amp;lt;int*&amp;gt; last = std::ranges::rend(ar);
+
+    std::for_each(first, last, print);
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // 初期化子リスト
+  {
+    std::initializer_list&amp;lt;int&amp;gt; init = {7, 8, 9};
+
+    std::reverse_iterator&amp;lt;const int*&amp;gt; first = std::ranges::rbegin(init);
+    std::reverse_iterator&amp;lt;const int*&amp;gt; last = std::ranges::rend(init);
+
+    std::for_each(first, last, print);
+  }
+}
+```
+* std::ranges::rend[color ff0000]
+* std::ranges::rbegin[link rbegin.md]
+* std::reverse_iterator[link /reference/iterator/reverse_iterator.md]
+
+### 出力
+```
+3 2 1 
+6 5 4 
+9 8 7 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 関連項目
+- [`std::rend`](/reference/iterator/rend.md)
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- sentinel_forの引数を修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cend.html"/>
      <id>57427167dd39199ed1651807b85e167c20ea581d:reference/ranges/cend.md</id>
      <updated>2021-08-26T11:57:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cend.md b/reference/ranges/cend.md
index 5e1cb93a7..43494da14 100644
--- a/reference/ranges/cend.md
+++ b/reference/ranges/cend.md
@@ -28,7 +28,7 @@ namespace std::ranges {
 範囲が`const`な場合について[`ranges::end`](end.md)をカスタマイズすることで、`ranges::cend`をカスタマイズできる。
 
 ## 備考
-`ranges::cend(E)`が有効な式であるとき、`ranges::cend(E)`の型`S`、[`ranges::cbegin`](begin.md)`(E)`の型`T`は[`sentinel_for`](/reference/iterator/sentinel_for.md)のモデルである。
+`ranges​::c​end(E)`が有効な式であるとき、`ranges::cend(E)`の型`S`、[`ranges::cbegin`](cbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- sentinel_forの引数を修正 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/end.html"/>
      <id>57427167dd39199ed1651807b85e167c20ea581d:reference/ranges/end.md</id>
      <updated>2021-08-26T11:57:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/end.md b/reference/ranges/end.md
index ba32a50b9..cd5abf47d 100644
--- a/reference/ranges/end.md
+++ b/reference/ranges/end.md
@@ -48,7 +48,7 @@ constexpr decay_t&amp;lt;T&amp;gt; decay-copy(T&amp;amp;&amp;amp; v) noexcept(is_nothrow_convertible_v&amp;lt;T, deca
 3か4の条件を満たすようにする。例えば、ユーザー定義のフリー関数`end`を定義するか、ユーザー定義のクラスにメンバ関数`end`を持たせることでカスタマイズできる。
 
 ## 備考
-`ranges::end(E)`が有効な式であるとき、`ranges::end(E)`の型`S`、[`ranges::begin`](begin.md)`(E)`の型`T`は[`sentinel_for`](/reference/iterator/sentinel_for.md)のモデルである。
+`ranges​::​end(E)`が有効な式であるとき、`ranges::end(E)`の型`S`、[`ranges::begin`](begin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cbegin.html"/>
      <id>54a19548c2a02dc8d2b89c4dd830bd9728652a17:reference/ranges/cbegin.md</id>
      <updated>2021-08-26T11:56:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cbegin.md b/reference/ranges/cbegin.md
index afaabc2ec..e466aa1bf 100644
--- a/reference/ranges/cbegin.md
+++ b/reference/ranges/cbegin.md
@@ -70,7 +70,7 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
 
 ## 関連項目
-- [`std::cend`](/reference/iterator/cend.md)
+- [`std::cbegin`](/reference/iterator/cbegin.md)
 
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- 不可視文字の削除</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cbegin.html"/>
      <id>f5ecbccb0e7bddfef1c3fe4caa8ffacef900751f:reference/ranges/cbegin.md</id>
      <updated>2021-08-26T11:05:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cbegin.md b/reference/ranges/cbegin.md
index 6056b54da..afaabc2ec 100644
--- a/reference/ranges/cbegin.md
+++ b/reference/ranges/cbegin.md
@@ -18,14 +18,14 @@ namespace std::ranges {
 ## 効果
 部分式`E`の型を`T`とする。このとき、式`ranges::cbegin(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges​::​begin`](begin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges​::​begin`](begin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+1. `E`がlvalueであれば、[`ranges::begin`](begin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+2. それ以外の場合、[`ranges::begin`](begin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
 
 ## 戻り値
 先頭要素への読み取り専用イテレータ。
 
 ## カスタマイゼーションポイント
-範囲が`const`な場合について[`ranges​::​begin`](begin.md)をカスタマイズすることで、`ranges::cbegin`をカスタマイズできる。
+範囲が`const`な場合について[`ranges::begin`](begin.md)をカスタマイズすることで、`ranges::cbegin`をカスタマイズできる。
 
 ## 備考
 `ranges::cbegin`の呼び出しが有効な式であるとき、その型は[`input_or_output_iterator`](/reference/iterator/input_or_output_iterator.md)のモデルである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- 不可視文字の削除</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cend.html"/>
      <id>f5ecbccb0e7bddfef1c3fe4caa8ffacef900751f:reference/ranges/cend.md</id>
      <updated>2021-08-26T11:05:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cend.md b/reference/ranges/cend.md
index fd3b69d9b..5e1cb93a7 100644
--- a/reference/ranges/cend.md
+++ b/reference/ranges/cend.md
@@ -18,8 +18,8 @@ namespace std::ranges {
 ## 効果
 部分式`E`の型を`T`とする。このとき、式`ranges::cend(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges​::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges​::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+1. `E`がlvalueであれば、[`ranges::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+2. それ以外の場合、[`ranges::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
 
 ## 戻り値
 最後尾要素の次を指す読み取り専用イテレータもしくは番兵。
@@ -28,7 +28,7 @@ namespace std::ranges {
 範囲が`const`な場合について[`ranges::end`](end.md)をカスタマイズすることで、`ranges::cend`をカスタマイズできる。
 
 ## 備考
-`ranges​::c​end(E)`が有効な式であるとき、`ranges::cend(E)`の型`S`、[`ranges::cbegin`](begin.md)`(E)`の型`T`は[`sentinel_for`](/reference/iterator/sentinel_for.md)のモデルである。
+`ranges::cend(E)`が有効な式であるとき、`ranges::cend(E)`の型`S`、[`ranges::cbegin`](begin.md)`(E)`の型`T`は[`sentinel_for`](/reference/iterator/sentinel_for.md)のモデルである。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- 不可視文字の削除</title>
      <link href="https://cpprefjp.github.io/reference/ranges/end.html"/>
      <id>f5ecbccb0e7bddfef1c3fe4caa8ffacef900751f:reference/ranges/end.md</id>
      <updated>2021-08-26T11:05:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/end.md b/reference/ranges/end.md
index ecb6e383f..ba32a50b9 100644
--- a/reference/ranges/end.md
+++ b/reference/ranges/end.md
@@ -48,7 +48,7 @@ constexpr decay_t&amp;lt;T&amp;gt; decay-copy(T&amp;amp;&amp;amp; v) noexcept(is_nothrow_convertible_v&amp;lt;T, deca
 3か4の条件を満たすようにする。例えば、ユーザー定義のフリー関数`end`を定義するか、ユーザー定義のクラスにメンバ関数`end`を持たせることでカスタマイズできる。
 
 ## 備考
-`ranges​::​end(E)`が有効な式であるとき、`ranges::end(E)`の型`S`、[`ranges::begin`](begin.md)`(E)`の型`T`は[`sentinel_for`](/reference/iterator/sentinel_for.md)のモデルである。
+`ranges::end(E)`が有効な式であるとき、`ranges::end(E)`の型`S`、[`ranges::begin`](begin.md)`(E)`の型`T`は[`sentinel_for`](/reference/iterator/sentinel_for.md)のモデルである。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
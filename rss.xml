<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-01T16:12:30.860478</updated>
  <id>e1ff0d27-ae8e-46f6-ab3b-b97a7f5854db</id>

  
    <entry>
      <title>print -- print(ln) : コンパイルエラー行をコメントアウト</title>
      <link href="https://cpprefjp.github.io/reference/print/print.html"/>
      <id>a689c6b126c827101cda6035cb83100609953f65:reference/print/print.md</id>
      <updated>2023-02-02T01:06:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/print.md b/reference/print/print.md
index da96a425d..0f4624814 100644
--- a/reference/print/print.md
+++ b/reference/print/print.md
@@ -118,10 +118,15 @@ int main()
   // stdout / stderrはマクロとして定義される。
   // モジュールはマクロをエクスポートしないので、
   // stdout / stderrは使用できない
-  std::print(stdout, &amp;#34;Hello {} World\n&amp;#34;, 42); // エラー！stdoutが見つからない
+  // std::print(stdout, &amp;#34;Hello {} World\n&amp;#34;, 42); // エラー！stdoutが見つからない
 }
 ```
 
+#### 出力
+```
+Hello 42 World
+```
+
 ## バージョン
 ### 言語
 - C++23
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>println -- print(ln) : コンパイルエラー行をコメントアウト</title>
      <link href="https://cpprefjp.github.io/reference/print/println.html"/>
      <id>a689c6b126c827101cda6035cb83100609953f65:reference/print/println.md</id>
      <updated>2023-02-02T01:06:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/println.md b/reference/print/println.md
index e588f774d..c352e6dc8 100644
--- a/reference/print/println.md
+++ b/reference/print/println.md
@@ -86,10 +86,15 @@ int main()
   // stdout / stderrはマクロとして定義される。
   // モジュールはマクロをエクスポートしないので、
   // stdout / stderrは使用できない
-  std::println(stdout, &amp;#34;Hello {} World&amp;#34;, 42); // エラー！stdoutが見つからない
+  // std::println(stdout, &amp;#34;Hello {} World&amp;#34;, 42); // エラー！stdoutが見つからない
 }
 ```
 
+#### 出力
+```
+Hello 42 World
+```
+
 ## バージョン
 ### 言語
 - C++23
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- &lt;ostream&gt;のprint(ln) : 出力先を指定する例を追加</title>
      <link href="https://cpprefjp.github.io/reference/ostream/print.html"/>
      <id>bc47b38c8e7d7a4e56a6783240de300d0d5cac84:reference/ostream/print.md</id>
      <updated>2023-02-02T00:03:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/print.md b/reference/ostream/print.md
index 507b72ead..c79697488 100644
--- a/reference/ostream/print.md
+++ b/reference/ostream/print.md
@@ -77,7 +77,8 @@ namespace std {
 
 int main()
 {
-  std::print(std::cout, &amp;#34;Hello {} World\n&amp;#34;, 42);
+  std::print(std::cout, &amp;#34;Hello {} World\n&amp;#34;, 42); // 標準出力に出力
+  std::print(std::cerr, &amp;#34;Hello {} World\n&amp;#34;, 42); // 標準エラーに出力
 }
 ```
 * std::print[color ff0000]
@@ -85,6 +86,7 @@ int main()
 ### 出力
 ```
 Hello 42 World
+Hello 42 World
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>println -- &lt;ostream&gt;のprint(ln) : 出力先を指定する例を追加</title>
      <link href="https://cpprefjp.github.io/reference/ostream/println.html"/>
      <id>bc47b38c8e7d7a4e56a6783240de300d0d5cac84:reference/ostream/println.md</id>
      <updated>2023-02-02T00:03:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/println.md b/reference/ostream/println.md
index 7924f33b3..1f3f7cc86 100644
--- a/reference/ostream/println.md
+++ b/reference/ostream/println.md
@@ -45,7 +45,8 @@ namespace std {
 
 int main()
 {
-  std::println(std::cout, &amp;#34;Hello {} World&amp;#34;, 42);
+  std::println(std::cout, &amp;#34;Hello {} World&amp;#34;, 42); // 標準出力に出力
+  std::println(std::cerr, &amp;#34;Hello {} World&amp;#34;, 42); // 標準エラーに出力
 }
 ```
 * std::println[color ff0000]
@@ -53,6 +54,7 @@ int main()
 ### 出力
 ```
 Hello 42 World
+Hello 42 World
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- print(ln) : 出力先を指定する例、モジュールインポートの例を追加</title>
      <link href="https://cpprefjp.github.io/reference/print/print.html"/>
      <id>88c024464a199aa995fdfc422f9d4c4da216c048:reference/print/print.md</id>
      <updated>2023-02-02T00:02:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/print.md b/reference/print/print.md
index 088c0647b..da96a425d 100644
--- a/reference/print/print.md
+++ b/reference/print/print.md
@@ -84,19 +84,42 @@ namespace std {
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;print&amp;gt;
 
 int main()
 {
   std::print(&amp;#34;Hello {} World\n&amp;#34;, 42);
+
+  // 出力先を指定
+  std::print(stdout, &amp;#34;Hello {} World\n&amp;#34;, 42); // 標準出力に出力
+  std::print(stderr, &amp;#34;Hello {} World\n&amp;#34;, 42); // 標準エラーに出力
 }
 ```
 * std::print[color ff0000]
 
-### 出力
+#### 出力
 ```
 Hello 42 World
+Hello 42 World
+Hello 42 World
+```
+
+### モジュールをインポートする例
+```cpp example
+#import std;
+#import std.compat;
+
+int main()
+{
+  std::print(&amp;#34;Hello {} World\n&amp;#34;, 42); // OK
+
+  // stdout / stderrはマクロとして定義される。
+  // モジュールはマクロをエクスポートしないので、
+  // stdout / stderrは使用できない
+  std::print(stdout, &amp;#34;Hello {} World\n&amp;#34;, 42); // エラー！stdoutが見つからない
+}
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>println -- print(ln) : 出力先を指定する例、モジュールインポートの例を追加</title>
      <link href="https://cpprefjp.github.io/reference/print/println.html"/>
      <id>88c024464a199aa995fdfc422f9d4c4da216c048:reference/print/println.md</id>
      <updated>2023-02-02T00:02:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/println.md b/reference/print/println.md
index 5ecd8f35a..e588f774d 100644
--- a/reference/print/println.md
+++ b/reference/print/println.md
@@ -52,19 +52,42 @@ namespace std {
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;print&amp;gt;
 
 int main()
 {
   std::println(&amp;#34;Hello {} World&amp;#34;, 42);
+
+  // 出力先を指定
+  std::println(stdout, &amp;#34;Hello {} World&amp;#34;, 42); // 標準出力に出力
+  std::println(stderr, &amp;#34;Hello {} World&amp;#34;, 42); // 標準エラーに出力
 }
 ```
 * std::println[color ff0000]
 
-### 出力
+#### 出力
 ```
 Hello 42 World
+Hello 42 World
+Hello 42 World
+```
+
+### モジュールをインポートする例
+```cpp example
+import std;
+import std.compat;
+
+int main()
+{
+  std::println(&amp;#34;Hello {} World&amp;#34;, 42); // OK
+
+  // stdout / stderrはマクロとして定義される。
+  // モジュールはマクロをエクスポートしないので、
+  // stdout / stderrは使用できない
+  std::println(stdout, &amp;#34;Hello {} World&amp;#34;, 42); // エラー！stdoutが見つからない
+}
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- expected/expected: 調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/emplace.html"/>
      <id>c10f83df34e60c270db8b53c3699ce6348a7700e:reference/expected/expected/emplace.md</id>
      <updated>2023-02-01T23:49:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/emplace.md b/reference/expected/expected/emplace.md
index 4f357de71..2faa79e85 100644
--- a/reference/expected/expected/emplace.md
+++ b/reference/expected/expected/emplace.md
@@ -12,15 +12,23 @@ constexpr T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args) noexcept;  // (1)
 template&amp;lt;class U, class... Args&amp;gt;
 constexpr T&amp;amp; emplace(initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args) noexcept; // (2)
 ```
+* initializer_list[link /reference/initializer_list/initializer_list.md]
 
 ## 概要
 - (1) : 正常値型`T`のコンストラクタ引数として任意個の引数を受け取って、型`T`のオブジェクトを有効値として生成し、保持する。
 - (2) : 正常値型`T`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、型`T`のオブジェクトを有効値として生成し、保持する。
 
 
+動作説明用の`expected`クラスメンバ変数として、下記を導入する。
+
+- `val` : `T`型の正常値。
+- `unex` : `E`型のエラー値。
+- `has_val` : `bool`型のフラグ変数。正常値を保持する場合は`true`に、エラー値を保持する場合は`false`となる。
+
+
 ## テンプレートパラメータ制約
 - (1) : [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;T, Args...&amp;gt; == true`
-- (2) : [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;T, initializer_list&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
+- (2) : [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;T,` [`initializer_list`](/reference/initializer_list/initializer_list.md)`&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
 
 
 ## 効果
@@ -38,6 +46,7 @@ constexpr T&amp;amp; emplace(initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args) noexcept; // (2)
     * addressof[link /reference/memory/addressof.md]
     * construct_at[link /reference/memory/construct_at.md]
     * destroy_at[link /reference/memory/destroy_at.md]
+    * std::forward[link /reference/utility/forward.md]
 
 - (2) : 次の処理と等価
     ```cpp
@@ -53,6 +62,7 @@ constexpr T&amp;amp; emplace(initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args) noexcept; // (2)
     * addressof[link /reference/memory/addressof.md]
     * construct_at[link /reference/memory/construct_at.md]
     * destroy_at[link /reference/memory/destroy_at.md]
+    * std::forward[link /reference/utility/forward.md]
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error -- expected/expected: 調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/error.html"/>
      <id>c10f83df34e60c270db8b53c3699ce6348a7700e:reference/expected/expected/error.md</id>
      <updated>2023-02-01T23:49:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/error.md b/reference/expected/expected/error.md
index 5ac4883f9..75a60fe65 100644
--- a/reference/expected/expected/error.md
+++ b/reference/expected/expected/error.md
@@ -16,11 +16,15 @@ constexpr E&amp;amp;&amp;amp; error() &amp;amp;&amp;amp; noexcept;             // (4)
 エラー値を取得する。
 
 
+## 事前条件
+[`has_value()`](has_value.md) `== false`
+
+
 ## 戻り値
 動作説明用のメンバ変数として、エラー値を保持する`unex`を導入する。
 
-- (1), (2) : [`has_value()`](has_value.md) `== false`ならば、`unex`
-- (3), (4) : [`has_value()`](has_value.md) `== false`ならば、[`std::move`](/reference/utility/move.md)`(unex)`
+- (1), (2) : エラー値を保持していたら、`unex`
+- (3), (4) : エラー値を保持していたら、[`std::move`](/reference/utility/move.md)`(unex)`
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- expected/expected: 調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_assign.html"/>
      <id>c10f83df34e60c270db8b53c3699ce6348a7700e:reference/expected/expected/op_assign.md</id>
      <updated>2023-02-01T23:49:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_assign.md b/reference/expected/expected/op_assign.md
index 3b1023df3..d9763a4b9 100644
--- a/reference/expected/expected/op_assign.md
+++ b/reference/expected/expected/op_assign.md
@@ -69,24 +69,24 @@ constexpr void reinit-expected(T&amp;amp; newval, U&amp;amp; oldval, Args&amp;amp;&amp;amp;... args) {
 * std::move[link /reference/utility/move.md]
 
 ## テンプレートパラメータ制約
-- (2) : 下記を全て満たすこと
+- (2) : 次の制約を全て満たすこと
     - [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; == true`
     - [`is_move_assignable_v`](/reference/type_traits/is_move_assignable.md)`&amp;lt;T&amp;gt; == true`
     - [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
     - [`is_move_assignable_v`](/reference/type_traits/is_move_assignable.md)`&amp;lt;E&amp;gt; == true`
     - `(`[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; ||` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
-- (3) : 下記を全て満たすこと
+- (3) : 次の制約を全て満たすこと
     - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;expected,` [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;U&amp;gt;&amp;gt; == false`
     - [`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;U&amp;gt;`が[`unexpected`](../unexpected.md)の特殊化ではない
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, U&amp;gt; == true`
     - [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;T&amp;amp;, U&amp;gt; == true`
     - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;T, U&amp;gt; ||` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; ||` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
-- (4) : 下記を全て満たすこと
+- (4) : 次の制約を全て満たすこと
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, const G&amp;amp;&amp;gt; == true`
     - [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;E&amp;amp;, const G&amp;amp;&amp;gt; == true`
     - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;E, const G&amp;amp;&amp;gt; ||` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; ||
 `[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
-- (5) : 下記を全て満たすこと
+- (5) : 次の制約を全て満たすこと
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, G&amp;gt; == true`
     - [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;E&amp;amp;, G&amp;gt; == true`
     - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;E, G&amp;gt; ||` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;T&amp;gt; ||` [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt;) == true`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected/expected: 調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_constructor.html"/>
      <id>c10f83df34e60c270db8b53c3699ce6348a7700e:reference/expected/expected/op_constructor.md</id>
      <updated>2023-02-01T23:49:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_constructor.md b/reference/expected/expected/op_constructor.md
index 564f2e7f3..2d9634ce5 100644
--- a/reference/expected/expected/op_constructor.md
+++ b/reference/expected/expected/op_constructor.md
@@ -50,8 +50,8 @@ constexpr explicit expected(unexpect_t, initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);
 - (8) : 変換可能な[`unexpected`](../unexpected.md)オブジェクトからエラー値をムーブ構築する。
 - (9) : 正常値型`T`のコンストラクタ引数として任意個の引数を受け取って、コンストラクタ内で型`T`のオブジェクトを正常値として生成し、保持する。
 - (10) : 正常値型`T`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、コンストラクタ内で型`T`のオブジェクトを正常値として生成し、保持する。
-- (11) : エラー値型`E`のコンストラクタ引数として任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトを正常値として生成し、保持する。
-- (12) : エラー値型`E`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトを正常値として生成し、保持する。
+- (11) : エラー値型`E`のコンストラクタ引数として任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトをエラー値として生成し、保持する。
+- (12) : エラー値型`E`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトをエラー値として生成し、保持する。
 
 
 説明用のテンプレート変数`converts-from-any-cvref`を次の通り定義する。
@@ -96,9 +96,9 @@ constexpr bool converts-from-any-cvref =
 - (7) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, const G&amp;amp;&amp;gt; == true`
 - (8) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, G&amp;gt; == true`
 - (9) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, Args...&amp;gt; == true`
-- (10) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, `[`initializer_list`](/reference/initializer_list/initializer_list.md)`&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
+- (10) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T,` [`initializer_list`](/reference/initializer_list/initializer_list.md)`&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
 - (11) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, Args...&amp;gt; == true`
-- (12) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, `[`initializer_list`](/reference/initializer_list/initializer_list.md)`&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
+- (12) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E,` [`initializer_list`](/reference/initializer_list/initializer_list.md)`&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value -- expected/expected: 調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/value.html"/>
      <id>c10f83df34e60c270db8b53c3699ce6348a7700e:reference/expected/expected/value.md</id>
      <updated>2023-02-01T23:49:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/value.md b/reference/expected/expected/value.md
index c7da83954..136b805c8 100644
--- a/reference/expected/expected/value.md
+++ b/reference/expected/expected/value.md
@@ -19,13 +19,13 @@ constexpr T&amp;amp;&amp;amp; value() &amp;amp;&amp;amp;;             // (4)
 ## 戻り値
 動作説明用のメンバ変数として、正常値を保持する`val`を導入する。
 
-- (1), (2) : [`has_value()`](has_value.md) `== true`ならば、`val`
-- (3), (4) : [`has_value()`](has_value.md) `== true`ならば、[`std::move`](/reference/utility/move.md)`(val)`
+- (1), (2) : 正常値を保持していたら、`val`
+- (3), (4) : 正常値を保持していたら、[`std::move`](/reference/utility/move.md)`(val)`
 
 
 ## 例外
-- (1), (2) : [`has_value()`](has_value.md) `== false`ならば、例外[`bad_expected_access`](../bad_expected_access.md)`(`[`error()`](error.md)`)`をスローする
-- (3), (4) : [`has_value()`](has_value.md) `== false`ならば、例外[`bad_expected_access`](../bad_expected_access.md)`(`[`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`をスローする
+- (1), (2) : エラー値を保持していたら、例外[`bad_expected_access`](../bad_expected_access.md)`(`[`error()`](error.md)`)`をスローする
+- (3), (4) : エラー値を保持していたら、例外[`bad_expected_access`](../bad_expected_access.md)`(`[`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`をスローする
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected/expected: emplace(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>b36c4caa5ecd2acad1c374ef5553814b943de8b6:reference/expected/expected.md</id>
      <updated>2023-02-01T22:19:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index e002aae20..a3ef99bf7 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -40,7 +40,7 @@ namespace std {
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|-------|
 | [`operator=`](expected/op_assign.md) | 代入演算子 | C++23 |
-| [`emplace`](expected/emplace.md.nolink) | 正常値型のコンストラクタ引数から直接構築する | C++23 |
+| [`emplace`](expected/emplace.md) | 正常値型のコンストラクタ引数から直接構築する | C++23 |
 | [`swap`](expected/swap.md.nolink) | 他の`expected`オブジェクトとデータを入れ替える | C++23 |
 
 ### 値の観測
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- expected/expected: emplace(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/emplace.html"/>
      <id>b36c4caa5ecd2acad1c374ef5553814b943de8b6:reference/expected/expected/emplace.md</id>
      <updated>2023-02-01T22:19:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/emplace.md b/reference/expected/expected/emplace.md
new file mode 100644
index 000000000..4f357de71
--- /dev/null
+++ b/reference/expected/expected/emplace.md
@@ -0,0 +1,115 @@
+# emplace
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class... Args&amp;gt;
+constexpr T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args) noexcept;  // (1)
+
+template&amp;lt;class U, class... Args&amp;gt;
+constexpr T&amp;amp; emplace(initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args) noexcept; // (2)
+```
+
+## 概要
+- (1) : 正常値型`T`のコンストラクタ引数として任意個の引数を受け取って、型`T`のオブジェクトを有効値として生成し、保持する。
+- (2) : 正常値型`T`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、型`T`のオブジェクトを有効値として生成し、保持する。
+
+
+## テンプレートパラメータ制約
+- (1) : [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;T, Args...&amp;gt; == true`
+- (2) : [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;T, initializer_list&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
+
+
+## 効果
+- (1) : 次の処理と等価
+    ```cpp
+    if (has_value()) {
+      destroy_at(addressof(val));
+    } else {
+      destroy_at(addressof(unex));
+      has_val = true;
+    }
+    return *construct_at(addressof(val), std::forward&amp;lt;Args&amp;gt;(args)...);
+    ```
+    * has_value[link has_value.md]
+    * addressof[link /reference/memory/addressof.md]
+    * construct_at[link /reference/memory/construct_at.md]
+    * destroy_at[link /reference/memory/destroy_at.md]
+
+- (2) : 次の処理と等価
+    ```cpp
+    if (has_value()) {
+      destroy_at(addressof(val));
+    } else {
+      destroy_at(addressof(unex));
+      has_val = true;
+    }
+    return *construct_at(addressof(val), il, std::forward&amp;lt;Args&amp;gt;(args)...);
+    ```
+    * has_value[link has_value.md]
+    * addressof[link /reference/memory/addressof.md]
+    * construct_at[link /reference/memory/construct_at.md]
+    * destroy_at[link /reference/memory/destroy_at.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;numeric&amp;gt;
+
+// 引数リスト または 初期化子リスト＋引数リスト から例外送出なしに構築可能な型
+struct ComplexType {
+  int result = 0;
+
+  ComplexType(int a, int b) noexcept
+    : result(a + b) {}
+  ComplexType(std::initializer_list&amp;lt;int&amp;gt; list, int init) noexcept
+    : result(std::accumulate(list.begin(), list.end(), init)) {}
+};
+
+int main()
+{
+  // (1)
+  {
+    std::expected&amp;lt;ComplexType, int&amp;gt; x = std::unexpected{0};
+    x.emplace(1, 2);
+    assert(x.has_value());
+    assert(x.value().result == 3);
+  }
+
+  // (2)
+  {
+    std::expected&amp;lt;ComplexType, int&amp;gt; x = std::unexpected{0};
+    x.emplace({1, 2, 3, 4}, 5);
+    assert(x.has_value());
+    assert(x.value().result == 15);
+  }
+}
+```
+* emplace[color ff0000]
+* has_value()[link has_value.md]
+* value()[link value.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
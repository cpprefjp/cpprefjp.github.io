<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-10-17T12:33:50.371450</updated>
  <id>35543879-2d9c-4ff9-80c9-55dac741228e</id>

  
    <entry>
      <title>get_leap_second_info -- chrono: leap_second_info例示コード改定(GCC13.2)</title>
      <link href="https://cpprefjp.github.io/reference/chrono/get_leap_second_info.html"/>
      <id>2e1d2fe272b34455486af4a9762cf618b76ce796:reference/chrono/get_leap_second_info.md</id>
      <updated>2024-10-17T21:25:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/get_leap_second_info.md b/reference/chrono/get_leap_second_info.md
index ffedc03a8..b1f93a111 100644
--- a/reference/chrono/get_leap_second_info.md
+++ b/reference/chrono/get_leap_second_info.md
@@ -37,28 +37,18 @@ using namespace std::chrono_literals;
 int main()
 {
   std::cout &amp;lt;&amp;lt; std::boolalpha;
-  {
-    chrono::utc_time now = chrono::utc_clock::now();
-    chrono::leap_second_info info = chrono::get_leap_second_info(now);
-
-    std::cout &amp;lt;&amp;lt; info.is_leap_second &amp;lt;&amp;lt; std::endl;
-    std::cout &amp;lt;&amp;lt; info.elapsed.count() &amp;lt;&amp;lt; std::endl;
-  }
-  std::cout &amp;lt;&amp;lt; std::endl;
-  {
-    // 2017年1月1日はうるう秒が挿入された日
-    chrono::utc_time date = chrono::clock_cast&amp;lt;chrono::utc_clock&amp;gt;(chrono::sys_days{2017y/1/1});
-    chrono::leap_second_info info = chrono::get_leap_second_info(date);
-
-    std::cout &amp;lt;&amp;lt; info.is_leap_second &amp;lt;&amp;lt; std::endl;
-    std::cout &amp;lt;&amp;lt; info.elapsed.count() &amp;lt;&amp;lt; std::endl;
-  }
+  // 日本標準時(JST)2017年1月1日にうるう秒挿入が実施され
+  //   2016-12-31 23:59:60 UTC
+  // が存在する
+  chrono::utc_time tp = chrono::clock_cast&amp;lt;chrono::utc_clock&amp;gt;(chrono::sys_days{2017y/1/1}) - 1s;
+  chrono::leap_second_info info = chrono::get_leap_second_info(tp);
+  std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; info.is_leap_second &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; info.elapsed.count() &amp;lt;&amp;lt; std::endl;
 }
 ```
 * chrono::leap_second_info[link leap_second_info.md]
 * chrono::utc_time[link utc_time.md]
 * chrono::utc_clock[link utc_clock.md]
-* now()[link utc_clock/now.md]
 * count()[link duration/count.md]
 * 2017y[link year/op_y.md]
 * chrono::sys_days[link sys_time.md]
@@ -66,16 +56,13 @@ int main()
 
 ### 出力例
 ```
-false
-27
-
-true
-27
+2016-12-31 23:59:60
+true 27
 ```
 
 ### 処理系
 - [Clang](/implementation.md#clang): 9.0 [mark noimpl]
-- [GCC](/implementation.md#gcc): 9.2 [mark noimpl]
+- [GCC](/implementation.md#gcc): 9.2 [mark noimpl], 13.2 [mark impl]
 - [Visual C++](/implementation.md#visual_cpp): 2019 Update 3 [mark noimpl]
 
 
@@ -84,5 +71,6 @@ true
 
 
 ## 参照
+- [日本標準時プロジェクト Information of Leap second](https://jjy.nict.go.jp/QandA/data/leapsec.html)
 - [P1466R3 Miscellaneous minor fixes for chrono](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1466r3.html)
 - [LWG Issue 3359. `&amp;lt;chrono&amp;gt;` leap second support should allow for negative leap seconds](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2117r0.html#3359)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>leap_second_info -- chrono: leap_second_info例示コード改定(GCC13.2)</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second_info.html"/>
      <id>2e1d2fe272b34455486af4a9762cf618b76ce796:reference/chrono/leap_second_info.md</id>
      <updated>2024-10-17T21:25:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second_info.md b/reference/chrono/leap_second_info.md
index 8f2c862f0..6e311e5e5 100644
--- a/reference/chrono/leap_second_info.md
+++ b/reference/chrono/leap_second_info.md
@@ -35,45 +35,55 @@ using namespace std::chrono_literals;
 int main()
 {
   std::cout &amp;lt;&amp;lt; std::boolalpha;
-  {
-    chrono::utc_time now = chrono::utc_clock::now();
-    chrono::leap_second_info info = chrono::get_leap_second_info(now);
 
-    std::cout &amp;lt;&amp;lt; info.is_leap_second &amp;lt;&amp;lt; std::endl;
-    std::cout &amp;lt;&amp;lt; info.elapsed.count() &amp;lt;&amp;lt; std::endl;
+  // 2016-12-31 23:59:59 UTC
+  chrono::utc_time tp = chrono::clock_cast&amp;lt;chrono::utc_clock&amp;gt;(chrono::sys_days{2017y/1/1});
+  tp -= 2s;
+  {
+    chrono::leap_second_info info = chrono::get_leap_second_info(tp);
+    std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; info.is_leap_second &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; info.elapsed.count() &amp;lt;&amp;lt; std::endl;
   }
-  std::cout &amp;lt;&amp;lt; std::endl;
+
+  // 日本標準時(JST)2017年1月1日にうるう秒挿入が実施された
+  // 2016-12-31 23:59:60 UTC
+  tp += 1s;
   {
-    // 2017年1月1日はうるう秒が挿入された日
-    chrono::utc_time date = chrono::clock_cast&amp;lt;chrono::utc_clock&amp;gt;(chrono::sys_days{2017y/1/1});
-    chrono::leap_second_info info = chrono::get_leap_second_info(date);
+    chrono::leap_second_info info = chrono::get_leap_second_info(tp);
+    std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; info.is_leap_second &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; info.elapsed.count() &amp;lt;&amp;lt; std::endl;
+  }
 
-    std::cout &amp;lt;&amp;lt; info.is_leap_second &amp;lt;&amp;lt; std::endl;
-    std::cout &amp;lt;&amp;lt; info.elapsed.count() &amp;lt;&amp;lt; std::endl;
+  // 2017-01-01 00:00:00 UTC
+  tp += 1s;
+  {
+    chrono::leap_second_info info = chrono::get_leap_second_info(tp);
+    std::cout &amp;lt;&amp;lt; tp &amp;lt;&amp;lt; std::endl;
+    std::cout &amp;lt;&amp;lt; info.is_leap_second &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; info.elapsed.count() &amp;lt;&amp;lt; std::endl;
   }
 }
 ```
 * chrono::get_leap_second_info[link get_leap_second_info.md]
 * chrono::utc_time[link utc_time.md]
 * chrono::utc_clock[link utc_clock.md]
-* now()[link utc_clock/now.md]
 * count()[link duration/count.md]
 * 2017y[link year/op_y.md]
 * chrono::sys_days[link sys_time.md]
 * chrono::clock_cast[link clock_cast.md]
 
-### 出力例
+### 出力
 ```
-false
-27
-
-true
-27
+2016-12-31 23:59:59
+false 26
+2016-12-31 23:59:60
+true 27
+2017-01-01 00:00:00
+false 27
 ```
 
 ### 処理系
 - [Clang](/implementation.md#clang): 9.0 [mark noimpl]
-- [GCC](/implementation.md#gcc): 9.2 [mark noimpl]
+- [GCC](/implementation.md#gcc): 9.2 [mark noimpl], 13.2 [mark impl]
 - [Visual C++](/implementation.md#visual_cpp): 2019 Update 3 [mark noimpl]
 
 
@@ -82,4 +92,5 @@ true
 
 
 ## 参照
+- [日本標準時プロジェクト Information of Leap second](https://jjy.nict.go.jp/QandA/data/leapsec.html)
 - [P1466R3 Miscellaneous minor fixes for chrono](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1466r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bad_array_new_length -- bad_array_new_length : サンプルコードを追加</title>
      <link href="https://cpprefjp.github.io/reference/new/bad_array_new_length.html"/>
      <id>ab361724c3a851217581c9daf8eecf009f7527ee:reference/new/bad_array_new_length.md</id>
      <updated>2024-10-16T13:02:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/bad_array_new_length.md b/reference/new/bad_array_new_length.md
index 76f189b9b..6ab8cac67 100644
--- a/reference/new/bad_array_new_length.md
+++ b/reference/new/bad_array_new_length.md
@@ -18,6 +18,31 @@ namespace std {
 動的に記憶域を確保しようとする配列の長さが 0 未満または処理系の最大値以上の場合に送出される例外。
 
 
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  int n = -1;
+  try {
+    int* p = new int[n];
+    delete[] p;
+  }
+  catch (std::bad_array_new_length&amp;amp;) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;bad array new length&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力例
+```
+bad array new length
+```
+
 ## バージョン
 C++11
 
+### 処理系
+- [Clang](/implementation.md#clang): 7 [mark verified]
+- [GCC](/implementation.md#gcc): 4.9 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2019 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>knuth_b -- knuth_b : 書籍での紹介を「考案」→「述べられている」に修正し、.NETの実装は別アルゴリズムであるため言及を削除 #1355</title>
      <link href="https://cpprefjp.github.io/reference/random/knuth_b.html"/>
      <id>7a4c6c55911bbf152021f6a6bcfdd4547179572f:reference/random/knuth_b.md</id>
      <updated>2024-10-16T12:43:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/knuth_b.md b/reference/random/knuth_b.md
index 327897c3f..1c6d6ea38 100644
--- a/reference/random/knuth_b.md
+++ b/reference/random/knuth_b.md
@@ -17,9 +17,7 @@ namespace std {
 
 `knuth_b`では、[`minstd_rand0`](minstd_rand0.md)によって生成された乱数を`256`個バッファリングしておき、順番を入れ替えて値を選択していく。これにより、線形合同法([`minstd_rand0`](minstd_rand0.md) or [`minstd_rand`](minstd_rand.md))を直接使用するよりも出力間の相関関係が小さくなり、乱雑さが増加する。
 
-Donald Knuth氏の著書『The Art of Computer Programming, Second Edition, Volume 2, Seminumerical Algorithms』で考案された、リオーダーアルゴリズムBがそれだ。  
-
-このアルゴリズムは、Microsoft .NET Frameworkの[`System.Random`](https://docs.microsoft.com/ja-jp/dotnet/api/system.random)クラスにも、実装として使用されている。
+Donald Knuth氏の著書『The Art of Computer Programming, Second Edition, Volume 2, Seminumerical Algorithms』で述べられている、リオーダーアルゴリズムBがそれだ。
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
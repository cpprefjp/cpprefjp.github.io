<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-25T22:52:51.101065</updated>
  <id>ff2646cb-f5c7-4ab6-a7d2-57ff8eeed70b</id>

  
    <entry>
      <title>コンストラクタ -- filesystem_error : エラー理由文字列の事後条件を変更</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/filesystem_error/op_constructor.html"/>
      <id>71950072d2918215adff5913dbe194014320e67e:reference/filesystem/filesystem_error/op_constructor.md</id>
      <updated>2020-11-26T07:48:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/filesystem_error/op_constructor.md b/reference/filesystem/filesystem_error/op_constructor.md
index a2e8bf6c6..45c30a329 100644
--- a/reference/filesystem/filesystem_error/op_constructor.md
+++ b/reference/filesystem/filesystem_error/op_constructor.md
@@ -30,20 +30,26 @@ filesystem_error(const string&amp;amp; what_arg,
 
 ## 事後条件
 - (1) :
-    - [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
     - [`code()`](code.md)メンバ関数の戻り値 : `ec`
     - [`path1()`](path1.md)メンバ関数の戻り値 : 空のパス
     - [`path2()`](path2.md)メンバ関数の戻り値 : 空のパス
+    - エラー理由の文字列：
+        - C++17 : [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
+        - C++20 : [`string_view`](/reference/string_view/basic_string_view.md)`(`[`what()`](what.md)`).`[`find`](/reference/string_view/basic_string_view/find.md)`(what_arg.`[`c_str()`](/reference/string/basic_string/c_str.md)`) != string_view::npos`
 - (2) :
-    - [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
     - [`code()`](code.md)メンバ関数の戻り値 : `ec`
     - [`path1()`](path1.md)メンバ関数の戻り値 : コピーされた`p1`への参照
     - [`path2()`](path2.md)メンバ関数の戻り値 : 空のパス
+    - エラー理由の文字列：
+        - C++17 : [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
+        - C++20 : [`string_view`](/reference/string_view/basic_string_view.md)`(`[`what()`](what.md)`).`[`find`](/reference/string_view/basic_string_view/find.md)`(what_arg.`[`c_str()`](/reference/string/basic_string/c_str.md)`) != string_view::npos`
 - (3) :
-    - [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
     - [`code()`](code.md)メンバ関数の戻り値 : `ec`
     - [`path1()`](path1.md)メンバ関数の戻り値 : コピーされた`p1`への参照
     - [`path2()`](path2.md)メンバ関数の戻り値 : コピーされた`p2`への参照
+    - エラー理由の文字列：
+        - C++17 : [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
+        - C++20 : [`string_view`](/reference/string_view/basic_string_view.md)`(`[`what()`](what.md)`).`[`find`](/reference/string_view/basic_string_view/find.md)`(what_arg.`[`c_str()`](/reference/string/basic_string/c_str.md)`) != string_view::npos`
 
 
 ## 例
@@ -111,3 +117,8 @@ filesystem error: can&amp;#39;t copy file. source file doesn&amp;#39;t found: No such file or di
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 4.8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [LWG Issue `system_error` and `filesystem_error` constructors taking a `string` may not be able to meet their postconditions](https://wg21.cmeerw.net/lwg/issue3112)
+    - C++20でのエラー理由文字列の事後条件が、指定したエラー理由文字列を直接要求するのではなく、それを含んでいることを要求するように変更された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_lock_free -- atomic_ref::is_lock_free : 対象を「オブジェクト」から「`atomic_ref&lt;T&gt;`型のすべてのオブジェクト」に変更</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/is_lock_free.html"/>
      <id>64d25f77c5664c4cf58e2a65c5538ab7d2ee050b:reference/atomic/atomic_ref/is_lock_free.md</id>
      <updated>2020-11-26T07:17:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/is_lock_free.md b/reference/atomic/atomic_ref/is_lock_free.md
index 2978f604f..b748904c4 100644
--- a/reference/atomic/atomic_ref/is_lock_free.md
+++ b/reference/atomic/atomic_ref/is_lock_free.md
@@ -14,7 +14,7 @@ bool is_lock_free() const noexcept;
 
 
 ## 戻り値
-オブジェクトに対する操作がロックフリーに振る舞えるなら`true`、そうでなければ`false`を返す。
+`atomic_ref&amp;lt;T&amp;gt;`型のすべてのオブジェクトに対する操作がロックフリーに振る舞えるなら`true`、そうでなければ`false`を返す。
 
 `false`を返す場合は、ロックで実装されることを意味する。
 
@@ -60,3 +60,7 @@ atomic_ref&amp;lt;int&amp;gt; is lock-free
 - [GCC](/implementation.md#gcc): 10.1
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 対象を「オブジェクト」から「`atomic_ref&amp;lt;T&amp;gt;`型のすべてのオブジェクト」に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- atomic(_ref) : インクリメント、デクリメントの戻り値型をTからvalue_typeに変更</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic/op_decrement.html"/>
      <id>3426ac42b7a81b59a431c6e3171264398fe43d1c:reference/atomic/atomic/op_decrement.md</id>
      <updated>2020-11-26T07:15:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic/op_decrement.md b/reference/atomic/atomic/op_decrement.md
index 001c00659..c078b6a9e 100644
--- a/reference/atomic/atomic/op_decrement.md
+++ b/reference/atomic/atomic/op_decrement.md
@@ -6,11 +6,17 @@
 * cpp11[meta cpp]
 
 ```cpp
-T operator--() volatile noexcept;    // (1) C++11
-T operator--() noexcept;             // (2) C++11
+T operator--() volatile noexcept;             // (1) C++11
+value_type operator--() volatile noexcept;    // (1) C++20
 
-T operator--(int) volatile noexcept; // (3) C++11
-T operator--(int) noexcept;          // (4) C++11
+T operator--() noexcept;                      // (2) C++11
+value_type operator--() noexcept;             // (2) C++20
+
+T operator--(int) volatile noexcept;          // (3) C++11
+value_type operator--(int) volatile noexcept; // (3) C++20
+
+T operator--(int) noexcept;                   // (4) C++11
+value_type operator--(int) noexcept;          // (4) C++20
 ```
 
 ## 概要
@@ -115,3 +121,5 @@ int main()
 ## 参照
 - [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
     - C++20での、`volatile`版への制約追加
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 戻り値の型を`T`から`value_type`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- atomic(_ref) : インクリメント、デクリメントの戻り値型をTからvalue_typeに変更</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic/op_increment.html"/>
      <id>3426ac42b7a81b59a431c6e3171264398fe43d1c:reference/atomic/atomic/op_increment.md</id>
      <updated>2020-11-26T07:15:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic/op_increment.md b/reference/atomic/atomic/op_increment.md
index 8494218c2..9f28b0897 100644
--- a/reference/atomic/atomic/op_increment.md
+++ b/reference/atomic/atomic/op_increment.md
@@ -6,11 +6,17 @@
 * cpp11[meta cpp]
 
 ```cpp
-T operator++() volatile noexcept;    // (1) C++11
-T operator++() noexcept;             // (2) C++11
+T operator++() volatile noexcept;             // (1) C++11
+value_type operator++() volatile noexcept;    // (1) C++20
 
-T operator++(int) volatile noexcept; // (3) C++11
-T operator++(int) noexcept;          // (4) C++11
+T operator++() noexcept;                      // (2) C++11
+value_type operator++() noexcept;             // (2) C++20
+
+T operator++(int) volatile noexcept;          // (3) C++11
+value_type operator++(int) volatile noexcept; // (3) C++20
+
+T operator++(int) noexcept;                   // (4) C++11
+value_type operator++(int) noexcept;          // (4) C++20
 ```
 
 ## 概要
@@ -118,3 +124,5 @@ int main()
 ## 参照
 - [P1831R1 Deprecating `volatile`: library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1831r1.html)
     - C++20での、`volatile`版への制約追加
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 戻り値の型を`T`から`value_type`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- atomic(_ref) : インクリメント、デクリメントの戻り値型をTからvalue_typeに変更</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/op_decrement.html"/>
      <id>3426ac42b7a81b59a431c6e3171264398fe43d1c:reference/atomic/atomic_ref/op_decrement.md</id>
      <updated>2020-11-26T07:15:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/op_decrement.md b/reference/atomic/atomic_ref/op_decrement.md
index 08ca53bcf..2d89b0dca 100644
--- a/reference/atomic/atomic_ref/op_decrement.md
+++ b/reference/atomic/atomic_ref/op_decrement.md
@@ -6,19 +6,22 @@
 * cpp20[meta cpp]
 
 ```cpp
-T operator--() const noexcept;
-T operator--(int) const noexcept;
+value_type operator--() const noexcept;
+value_type operator--(int) const noexcept;
 ```
 
 ## 概要
-値をデクリメントする
+値をデクリメントする。
+
+- (1) : 前置デクリメント
+- (2) : 後置デクリメント
 
 
 ## 戻り値
 以下と等価：
 
-- 前置`operator--`： [`fetch_sub`](fetch_sub.md)`(1) - 1`
-- 後置`operator--`： [`fetch_sub`](fetch_sub.md)`(1)`
+- (1) : [`fetch_sub`](fetch_sub.md)`(1) - 1`
+- (2) : [`fetch_sub`](fetch_sub.md)`(1)`
 
 
 ## 例外
@@ -91,3 +94,8 @@ int main()
 - [Clang](/implementation.md#clang): (9.0時点で実装なし)
 - [GCC](/implementation.md#gcc): 10.1
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 戻り値の型を`T`から`value_type`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- atomic(_ref) : インクリメント、デクリメントの戻り値型をTからvalue_typeに変更</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/op_increment.html"/>
      <id>3426ac42b7a81b59a431c6e3171264398fe43d1c:reference/atomic/atomic_ref/op_increment.md</id>
      <updated>2020-11-26T07:15:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/op_increment.md b/reference/atomic/atomic_ref/op_increment.md
index cdce751a5..911712f70 100644
--- a/reference/atomic/atomic_ref/op_increment.md
+++ b/reference/atomic/atomic_ref/op_increment.md
@@ -6,20 +6,22 @@
 * cpp20[meta cpp]
 
 ```cpp
-T operator++() const noexcept;
-
-T operator++(int) const noexcept;
+value_type operator++() const noexcept;    // (1) C++20
+value_type operator++(int) const noexcept; // (2) C++20
 ```
 
 ## 概要
-値をインクリメントする
+値をインクリメントする。
+
+- (1) : 前置インクリメント
+- (2) : 後置インクリメント
 
 
 ## 戻り値
 以下と等価：
 
-- 前置`operator++`：[`fetch_add`](fetch_add.md)`(1) + 1`
-- 後置`operator++`：[`fetch_add`](fetch_add.md)`(1)`
+- (1) : [`fetch_add`](fetch_add.md)`(1) + 1`
+- (2) : [`fetch_add`](fetch_add.md)`(1)`
 
 
 ## 例外
@@ -95,3 +97,7 @@ int main()
 - [GCC](/implementation.md#gcc): 10.1
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 戻り値の型を`T`から`value_type`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>notify_all -- atomic_ref : notify_all, notify_one, operator=をconstメンバ関数にした</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/notify_all.html"/>
      <id>dc35f117cdff4e63e0d727175cd440a4a808838e:reference/atomic/atomic_ref/notify_all.md</id>
      <updated>2020-11-26T07:08:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/notify_all.md b/reference/atomic/atomic_ref/notify_all.md
index 15ec2288c..0579533ba 100644
--- a/reference/atomic/atomic_ref/notify_all.md
+++ b/reference/atomic/atomic_ref/notify_all.md
@@ -6,7 +6,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-void notify_all() noexcept;
+void notify_all() const noexcept;
 ```
 
 ## 概要
@@ -81,3 +81,5 @@ int main()
 - [P0514R4 Efficient concurrent waiting for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0514r4.pdf)
 - [ogiroux/atomic_wait - Sample implementation of C++20 atomic_wait/notify](https://github.com/ogiroux/atomic_wait)
 - [P1643R1 Add wait/notify to `atomic_ref`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1643r1.html)
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 宣言に`const`を追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>notify_one -- atomic_ref : notify_all, notify_one, operator=をconstメンバ関数にした</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/notify_one.html"/>
      <id>dc35f117cdff4e63e0d727175cd440a4a808838e:reference/atomic/atomic_ref/notify_one.md</id>
      <updated>2020-11-26T07:08:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/notify_one.md b/reference/atomic/atomic_ref/notify_one.md
index ce2e299d9..a15e9e73c 100644
--- a/reference/atomic/atomic_ref/notify_one.md
+++ b/reference/atomic/atomic_ref/notify_one.md
@@ -6,7 +6,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-void notify_one() noexcept;
+void notify_one() const noexcept;
 ```
 
 ## 概要
@@ -108,3 +108,5 @@ int main()
 - [P0514R4 Efficient concurrent waiting for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0514r4.pdf)
 - [ogiroux/atomic_wait - Sample implementation of C++20 atomic_wait/notify](https://github.com/ogiroux/atomic_wait)
 - [P1643R1 Add wait/notify to `atomic_ref`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1643r1.html)
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 宣言に`const`を追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- atomic_ref : notify_all, notify_one, operator=をconstメンバ関数にした</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/op_assign.html"/>
      <id>dc35f117cdff4e63e0d727175cd440a4a808838e:reference/atomic/atomic_ref/op_assign.md</id>
      <updated>2020-11-26T07:08:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/op_assign.md b/reference/atomic/atomic_ref/op_assign.md
index ea540cf87..27e1a3256 100644
--- a/reference/atomic/atomic_ref/op_assign.md
+++ b/reference/atomic/atomic_ref/op_assign.md
@@ -64,3 +64,7 @@ int main()
 - [GCC](/implementation.md#gcc): 10.1
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 宣言に`const`を追加
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>notify_all -- atomic_ref : 間違ってvolatileオーバーロードを書いてしまっていたので削除</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/notify_all.html"/>
      <id>c13bf21fef4ed5a2d3a07d596f064c14fc179bd0:reference/atomic/atomic_ref/notify_all.md</id>
      <updated>2020-11-26T07:02:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/notify_all.md b/reference/atomic/atomic_ref/notify_all.md
index 4ef7409cf..15ec2288c 100644
--- a/reference/atomic/atomic_ref/notify_all.md
+++ b/reference/atomic/atomic_ref/notify_all.md
@@ -6,7 +6,6 @@
 * cpp20[meta cpp]
 
 ```cpp
-void notify_all() volatile noexcept;
 void notify_all() noexcept;
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>notify_one -- atomic_ref : 間違ってvolatileオーバーロードを書いてしまっていたので削除</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/notify_one.html"/>
      <id>c13bf21fef4ed5a2d3a07d596f064c14fc179bd0:reference/atomic/atomic_ref/notify_one.md</id>
      <updated>2020-11-26T07:02:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/notify_one.md b/reference/atomic/atomic_ref/notify_one.md
index f972b5420..ce2e299d9 100644
--- a/reference/atomic/atomic_ref/notify_one.md
+++ b/reference/atomic/atomic_ref/notify_one.md
@@ -6,7 +6,6 @@
 * cpp20[meta cpp]
 
 ```cpp
-void notify_one() volatile noexcept;
 void notify_one() noexcept;
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>wait -- atomic_ref : 間違ってvolatileオーバーロードを書いてしまっていたので削除</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/wait.html"/>
      <id>c13bf21fef4ed5a2d3a07d596f064c14fc179bd0:reference/atomic/atomic_ref/wait.md</id>
      <updated>2020-11-26T07:02:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/wait.md b/reference/atomic/atomic_ref/wait.md
index 7eb23a10f..71ffb0317 100644
--- a/reference/atomic/atomic_ref/wait.md
+++ b/reference/atomic/atomic_ref/wait.md
@@ -6,7 +6,6 @@
 * cpp20[meta cpp]
 
 ```cpp
-void wait(T old, memory_order order = memory_order::seq_cst) const volatile noexcept;
 void wait(T old, memory_order order = memory_order::seq_cst) const noexcept;
 ```
 * memory_order[link /reference/atomic/memory_order.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
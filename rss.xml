<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-10T06:50:14.251069</updated>
  <id>45849409-676a-4cf5-961d-2b8abbe9083c</id>

  
    <entry>
      <title>add -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/add.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/add.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/add.md b/reference/linalg/add.md
index 61c0489af..d110d039b 100644
--- a/reference/linalg/add.md
+++ b/reference/linalg/add.md
@@ -42,9 +42,8 @@ $$
 
 
 ## 適格要件
-行列またはベクトルの`x`、`y`、`z`の各次元の静的要素数が同じであること。
-
-- [`possibly-addable`](possibly-addable.md)`&amp;lt;InObj1, InObj2, OutObj&amp;gt;() == true`
+- (1), (2): [`possibly-addable`](possibly-addable.md)`&amp;lt;InObj1, InObj2, OutObj&amp;gt;()`が`true` (行列またはベクトルの`x`、`y`、`z`の各次元の静的要素数が同じ)
+- (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>apply_givens_rotation -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/apply_givens_rotation.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/apply_givens_rotation.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/apply_givens_rotation.md b/reference/linalg/apply_givens_rotation.md
index d9c76b06e..11ff401f7 100644
--- a/reference/linalg/apply_givens_rotation.md
+++ b/reference/linalg/apply_givens_rotation.md
@@ -72,7 +72,10 @@ $$
 
 
 ## 適格要件
-- [`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InOutVec1, InOutVec2&amp;gt;(0,0) == true`
+- 共通:
+  + `Real`が`complex&amp;lt;Real&amp;gt;`を規定できる型であること
+  + [`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InOutVec1, InOutVec2&amp;gt;(0,0) == true`
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/copy.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/copy.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/copy.md b/reference/linalg/copy.md
index 6f9619c07..586373809 100644
--- a/reference/linalg/copy.md
+++ b/reference/linalg/copy.md
@@ -34,8 +34,8 @@ namespace std::linalg {
 
 
 ## 適格要件
-- 0以上`x.rank()`未満の整数rに対して、[`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InVec, OutVec&amp;gt;(r,r)`が`true`
-
+- (1), (2): 0以上`x.rank()`未満の整数rに対して、[`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InVec, OutVec&amp;gt;(r,r)`が`true`
+- (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 事前条件
 `x`と`y`の各次元の要素数が等しくなければならない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dot -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/dot.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/dot.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/dot.md b/reference/linalg/dot.md
index d5884d797..8dea51686 100644
--- a/reference/linalg/dot.md
+++ b/reference/linalg/dot.md
@@ -44,9 +44,9 @@ namespace std::linalg {
 
 
 ## 適格要件
-2つのベクトルの静的な要素数が同じであること。
-
-- [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0) == true`
+- 共通:
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0)`が`true` (2つのベクトルの静的な要素数が同じ)
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dotc -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/dotc.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/dotc.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/dotc.md b/reference/linalg/dotc.md
index 59efd533a..1349e6d16 100644
--- a/reference/linalg/dotc.md
+++ b/reference/linalg/dotc.md
@@ -44,9 +44,9 @@ namespace std::linalg {
 
 
 ## 適格要件
-2つのベクトルの静的な要素数が同じであること。
-
-- [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0) == true`
+- 共通:
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0)`が`true` (2つのベクトルの静的な要素数が同じ)
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_product -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_product.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/hermitian_matrix_product.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_product.md b/reference/linalg/hermitian_matrix_product.md
index 654029134..cba4988bf 100644
--- a/reference/linalg/hermitian_matrix_product.md
+++ b/reference/linalg/hermitian_matrix_product.md
@@ -133,6 +133,7 @@ namespace std::linalg {
   + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
   + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
 - (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
+- (2), (4), (6), (8): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_rank_1_update -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_rank_1_update.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/hermitian_matrix_rank_1_update.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_rank_1_update.md b/reference/linalg/hermitian_matrix_rank_1_update.md
index 3486d4f86..446426dff 100644
--- a/reference/linalg/hermitian_matrix_rank_1_update.md
+++ b/reference/linalg/hermitian_matrix_rank_1_update.md
@@ -64,10 +64,12 @@ namespace std::linalg {
 
 
 ## 適格要件
-- `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-- `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-- [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-- [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
+- 共通:
+  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_rank_2_update -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_rank_2_update.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/hermitian_matrix_rank_2_update.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_rank_2_update.md b/reference/linalg/hermitian_matrix_rank_2_update.md
index 6841357c8..624e82e2e 100644
--- a/reference/linalg/hermitian_matrix_rank_2_update.md
+++ b/reference/linalg/hermitian_matrix_rank_2_update.md
@@ -44,9 +44,11 @@ namespace std::linalg {
 
 
 ## 適格要件
-- `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-- `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-- [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
+- 共通:
+  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
+- (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_vector_product -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_vector_product.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/hermitian_matrix_vector_product.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_vector_product.md b/reference/linalg/hermitian_matrix_vector_product.md
index 650923eef..1c8b85a45 100644
--- a/reference/linalg/hermitian_matrix_vector_product.md
+++ b/reference/linalg/hermitian_matrix_vector_product.md
@@ -76,6 +76,7 @@ namespace std::linalg {
   + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
   + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
 - (3), (4): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(x),decltype(y),decltype(z)&amp;gt;()`が`true`
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_frob_norm -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_frob_norm.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/matrix_frob_norm.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_frob_norm.md b/reference/linalg/matrix_frob_norm.md
index f8f6cd64c..544a175ec 100644
--- a/reference/linalg/matrix_frob_norm.md
+++ b/reference/linalg/matrix_frob_norm.md
@@ -39,6 +39,7 @@ namespace std::linalg {
 
 ## 適格要件
 - (1), (2): `decltype(init + `[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`が`Scalar`に変換可能。
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 効果
 - (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_inf_norm -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_inf_norm.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/matrix_inf_norm.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_inf_norm.md b/reference/linalg/matrix_inf_norm.md
index 4d6b49f72..76844e853 100644
--- a/reference/linalg/matrix_inf_norm.md
+++ b/reference/linalg/matrix_inf_norm.md
@@ -39,6 +39,7 @@ namespace std::linalg {
 
 ## 適格要件
 - (1), (2): `decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()))`が`Scalar`に変換可能。
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_one_norm -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_one_norm.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/matrix_one_norm.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_one_norm.md b/reference/linalg/matrix_one_norm.md
index 66ebffef0..a0cd520e9 100644
--- a/reference/linalg/matrix_one_norm.md
+++ b/reference/linalg/matrix_one_norm.md
@@ -39,6 +39,7 @@ namespace std::linalg {
 
 ## 適格要件
 - (1), (2): `decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()))`が`Scalar`に変換可能。
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_product -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_product.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/matrix_product.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_product.md b/reference/linalg/matrix_product.md
index 52adef926..a42c9c656 100644
--- a/reference/linalg/matrix_product.md
+++ b/reference/linalg/matrix_product.md
@@ -61,6 +61,7 @@ namespace std::linalg {
 ## 適格要件
 - (1), (2), (3), (4): [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(C)&amp;gt;()`が`true`
 - (3), (4): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_rank_1_update -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_rank_1_update.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/matrix_rank_1_update.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_rank_1_update.md b/reference/linalg/matrix_rank_1_update.md
index 72770bced..72497d418 100644
--- a/reference/linalg/matrix_rank_1_update.md
+++ b/reference/linalg/matrix_rank_1_update.md
@@ -39,7 +39,8 @@ namespace std::linalg {
 
 
 ## 適格要件
-- [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;InOutMat, InVec2, InVec1&amp;gt;() == true`
+- (1), (2): [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;InOutMat, InVec2, InVec1&amp;gt;() == true`
+- (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_rank_1_update_c -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_rank_1_update_c.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/matrix_rank_1_update_c.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_rank_1_update_c.md b/reference/linalg/matrix_rank_1_update_c.md
index 504c35a41..c5cc655df 100644
--- a/reference/linalg/matrix_rank_1_update_c.md
+++ b/reference/linalg/matrix_rank_1_update_c.md
@@ -39,7 +39,8 @@ namespace std::linalg {
 
 
 ## 適格要件
-- [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;InOutMat, InVec2, InVec1&amp;gt;() == true`
+- (1), (2): [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;InOutMat, InVec2, InVec1&amp;gt;() == true`
+- (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_vector_product -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_vector_product.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/matrix_vector_product.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_vector_product.md b/reference/linalg/matrix_vector_product.md
index 8c08e3b38..0743dd73c 100644
--- a/reference/linalg/matrix_vector_product.md
+++ b/reference/linalg/matrix_vector_product.md
@@ -61,6 +61,7 @@ namespace std::linalg {
 ## 適格要件
 - (1), (2), (3), (4): [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
 - (3), (4): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(x),decltype(y),decltype(z)&amp;gt;()`が`true`
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scale -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/scale.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/scale.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/scale.md b/reference/linalg/scale.md
index aab3496cd..7ce8d8ca2 100644
--- a/reference/linalg/scale.md
+++ b/reference/linalg/scale.md
@@ -32,6 +32,10 @@ $$
 $$
 
 
+## 適格要件
+- (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
+
+
 ## 効果
 ベクトル`x`を`alpha`倍する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setup_givens_rotation -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/setup_givens_rotation.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/setup_givens_rotation.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/setup_givens_rotation.md b/reference/linalg/setup_givens_rotation.md
index 3c6c8958e..18c9bb4ac 100644
--- a/reference/linalg/setup_givens_rotation.md
+++ b/reference/linalg/setup_givens_rotation.md
@@ -52,7 +52,7 @@ sgn(x):=
 $$
 
 
-## テンプレートパラメータ制約
+## 適格要件
 - `Real`は`complex&amp;lt;Real&amp;gt;`が規定できる型であること。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setup_givens_rotation_result -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/setup_givens_rotation_result.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/setup_givens_rotation_result.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/setup_givens_rotation_result.md b/reference/linalg/setup_givens_rotation_result.md
index d921a230d..b38e24b36 100644
--- a/reference/linalg/setup_givens_rotation_result.md
+++ b/reference/linalg/setup_givens_rotation_result.md
@@ -26,7 +26,7 @@ namespace std::linalg {
 ギブンス回転の結果を表すクラス。詳しくは、[`setup_givens_rotation`](setup_givens_rotation.md)にて。
 
 
-## テンプレートパラメータ制約
+## 適格要件
 - `Real`は`complex&amp;lt;Real&amp;gt;`が規定できる型であること。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap_elements -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/swap_elements.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/swap_elements.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/swap_elements.md b/reference/linalg/swap_elements.md
index f87897599..4fc87ae70 100644
--- a/reference/linalg/swap_elements.md
+++ b/reference/linalg/swap_elements.md
@@ -34,7 +34,8 @@ namespace std::linalg {
 
 
 ## 適格要件
-- 0以上`x.rank()`未満の整数rに対して、[`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InOutVec1, InOutVec2&amp;gt;(r,r)`が`true`
+- (1), (2): 0以上`x.rank()`未満の整数rに対して、[`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InOutVec1, InOutVec2&amp;gt;(r,r)`が`true`
+- (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_product -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_product.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/symmetric_matrix_product.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_product.md b/reference/linalg/symmetric_matrix_product.md
index 6fbd57b8b..46a826621 100644
--- a/reference/linalg/symmetric_matrix_product.md
+++ b/reference/linalg/symmetric_matrix_product.md
@@ -133,6 +133,7 @@ namespace std::linalg {
   + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
   + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
 - (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
+- (2), (4), (6), (8): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_rank_1_update -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_rank_1_update.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/symmetric_matrix_rank_1_update.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_rank_1_update.md b/reference/linalg/symmetric_matrix_rank_1_update.md
index 52cc757f2..25c297b64 100644
--- a/reference/linalg/symmetric_matrix_rank_1_update.md
+++ b/reference/linalg/symmetric_matrix_rank_1_update.md
@@ -64,10 +64,12 @@ namespace std::linalg {
 
 
 ## 適格要件
-- `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-- `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-- [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-- [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
+- 共通:
+  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_rank_2_update -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_rank_2_update.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/symmetric_matrix_rank_2_update.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_rank_2_update.md b/reference/linalg/symmetric_matrix_rank_2_update.md
index 32255bfd5..045c2f191 100644
--- a/reference/linalg/symmetric_matrix_rank_2_update.md
+++ b/reference/linalg/symmetric_matrix_rank_2_update.md
@@ -44,10 +44,11 @@ namespace std::linalg {
 
 
 ## 適格要件
-- `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
-- `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-- [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
-
+- 共通:
+  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+  + `InMat`が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
+- (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 事前条件
 - `A.extent(0) == A.extent(1)`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_vector_product -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_vector_product.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/symmetric_matrix_vector_product.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_vector_product.md b/reference/linalg/symmetric_matrix_vector_product.md
index aa39fc328..ebf381b84 100644
--- a/reference/linalg/symmetric_matrix_vector_product.md
+++ b/reference/linalg/symmetric_matrix_vector_product.md
@@ -76,6 +76,7 @@ namespace std::linalg {
   + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
   + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(x), decltype(y)&amp;gt;()`が`true`
 - (3), (4): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(x),decltype(y),decltype(z)&amp;gt;()`が`true`
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_product -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_product.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/triangular_matrix_product.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_product.md b/reference/linalg/triangular_matrix_product.md
index b644a7de9..f6febd648 100644
--- a/reference/linalg/triangular_matrix_product.md
+++ b/reference/linalg/triangular_matrix_product.md
@@ -150,7 +150,7 @@ namespace std::linalg {
   + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
   + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
 - (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
-- (2), (4), (6), (8): `is_execution_policy&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
+- (2), (4), (6), (8): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_vector_product -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_vector_product.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/triangular_matrix_vector_product.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_vector_product.md b/reference/linalg/triangular_matrix_vector_product.md
index d6b7b77fd..98b73fef0 100644
--- a/reference/linalg/triangular_matrix_vector_product.md
+++ b/reference/linalg/triangular_matrix_vector_product.md
@@ -111,6 +111,7 @@ namespace std::linalg {
   + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(y)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`y`の次元が同じであること)
 - (1), (2), (5), (6): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
 - (5), (6): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(z)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`x`の次元が同じであること)
+- (2), (4), (6): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_vector_solve -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_vector_solve.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/triangular_matrix_vector_solve.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_vector_solve.md b/reference/linalg/triangular_matrix_vector_solve.md
index 837e31526..89fbdf5e6 100644
--- a/reference/linalg/triangular_matrix_vector_solve.md
+++ b/reference/linalg/triangular_matrix_vector_solve.md
@@ -141,6 +141,7 @@ namespace std::linalg {
   + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
   + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(b)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`b`の次元が同じであること)
 - (1), (2), (3), (4): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(x)&amp;gt;(0, 0)`が`true` (つまり`A`の次元と`b`の次元が同じであること)
+- (2), (4), (6), (8): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_abs_sum -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_abs_sum.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/vector_abs_sum.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_abs_sum.md b/reference/linalg/vector_abs_sum.md
index de6983f76..837a36833 100644
--- a/reference/linalg/vector_abs_sum.md
+++ b/reference/linalg/vector_abs_sum.md
@@ -38,6 +38,7 @@ namespace std::linalg {
 
 ## 適格要件
 - (1), (2): `decltype(init + `[`abs-if-needed`](abs-if-needed.md)`(`[`real-if-needed`](real-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())) + abs-if-needed(`[`imag-if-needed`](imag-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())))`が`Scalar`に変換可能。
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 効果
 - (3), (4): `T`を`typename InVec::value_type`とすると、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_abs_sum -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_idx_abs_max.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/vector_idx_abs_max.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_idx_abs_max.md b/reference/linalg/vector_idx_abs_max.md
index 85a8f153b..87b5300fc 100644
--- a/reference/linalg/vector_idx_abs_max.md
+++ b/reference/linalg/vector_idx_abs_max.md
@@ -27,6 +27,7 @@ namespace std::linalg {
 
 ## 適格要件
 - (1), (2): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(`[`real-if-needed`](real-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())) + abs-if-needed(`[`imag-if-needed`](imag-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())))`とすると、`declval&amp;lt;T&amp;gt;() &amp;lt; declval&amp;lt;T&amp;gt;()`が有効な式であること。
+- (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sum_of_squares_result -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_sum_of_squares.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/vector_sum_of_squares.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_sum_of_squares.md b/reference/linalg/vector_sum_of_squares.md
index 880f3fd96..98ed9076e 100644
--- a/reference/linalg/vector_sum_of_squares.md
+++ b/reference/linalg/vector_sum_of_squares.md
@@ -44,7 +44,8 @@ $$
 
 
 ## 適格要件
-- `decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;()))`が`Scalar`に変換可能。
+- (1), (2): `decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;()))`が`Scalar`に変換可能。
+- (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_two_norm -- linalg : ExecutionPolicyの制約を明文化 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_two_norm.html"/>
      <id>b6e197f7d208dd061f63ab9f3be1b1ab45974d09:reference/linalg/vector_two_norm.md</id>
      <updated>2024-07-10T15:46:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_two_norm.md b/reference/linalg/vector_two_norm.md
index 8d6c1c939..1178dc20c 100644
--- a/reference/linalg/vector_two_norm.md
+++ b/reference/linalg/vector_two_norm.md
@@ -38,6 +38,8 @@ namespace std::linalg {
 
 ## 適格要件
 - (1), (2): `decltype(init + `[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`が`Scalar`に変換可能。
+- (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
+
 
 ## 効果
 - (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`とすると、
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_product -- linalg : 理解しやすいよう修正 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_product.html"/>
      <id>2d887fe2f05e5d98c46395de2754a9ea07dd69fe:reference/linalg/hermitian_matrix_product.md</id>
      <updated>2024-07-10T15:01:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_product.md b/reference/linalg/hermitian_matrix_product.md
index d19cdc911..654029134 100644
--- a/reference/linalg/hermitian_matrix_product.md
+++ b/reference/linalg/hermitian_matrix_product.md
@@ -110,7 +110,7 @@ namespace std::linalg {
 
 
 ## 概要
-行列同士の積を計算する。
+エルミート行列と行列の積を計算する。
 
 - (1): エルミート行列`A`と行列`B`に対し、$C \leftarrow AB$
 - (2): (1)を指定された実行ポリシーで実行する。
@@ -126,10 +126,12 @@ namespace std::linalg {
 - 共通
   + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
   + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(C)&amp;gt;()`が`true`
-- (1), (2), (5), (6): `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-- (1), (2), (5), (6): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-- (3), (4), (7), (8): `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-- (3), (4), (7), (8): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
+- (1), (2), (5), (6):
+  + `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+- (3), (4), (7), (8):
+  + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
 - (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
 
 
@@ -226,7 +228,7 @@ int main()
 
   {
     HermitianMatrix A(A_vec.data());
-    std::mdspan B(B_vec.data(), N, N);
+    std::mdspan     B(B_vec.data(), N, N);
 
     init_herm_mat(A);
     init_mat(B);
@@ -243,7 +245,7 @@ int main()
   }
 
   {
-    std::mdspan A(A_vec.data(), N, N);
+    std::mdspan     A(A_vec.data(), N, N);
     HermitianMatrix B(B_vec.data());
 
     init_mat(A);
@@ -262,7 +264,7 @@ int main()
 
   {
     HermitianMatrix A(A_vec.data());
-    std::mdspan B(B_vec.data(), N, N);
+    std::mdspan     B(B_vec.data(), N, N);
 
     init_herm_mat(A);
     init_mat(B);
@@ -279,7 +281,7 @@ int main()
   }
 
   {
-    std::mdspan A(A_vec.data(), N, N);
+    std::mdspan     A(A_vec.data(), N, N);
     HermitianMatrix B(B_vec.data());
 
     init_mat(A);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_product -- linalg : 理解しやすいよう修正 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_product.html"/>
      <id>2d887fe2f05e5d98c46395de2754a9ea07dd69fe:reference/linalg/symmetric_matrix_product.md</id>
      <updated>2024-07-10T15:01:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_product.md b/reference/linalg/symmetric_matrix_product.md
index ecd5e66d5..6fbd57b8b 100644
--- a/reference/linalg/symmetric_matrix_product.md
+++ b/reference/linalg/symmetric_matrix_product.md
@@ -110,7 +110,7 @@ namespace std::linalg {
 
 
 ## 概要
-行列同士の積を計算する。
+対称行列と行列の積を計算する。
 
 - (1): 対称行列`A`と行列`B`に対し、$C \leftarrow AB$
 - (2): (1)を指定された実行ポリシーで実行する。
@@ -126,10 +126,12 @@ namespace std::linalg {
 - 共通
   + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
   + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(C)&amp;gt;()`が`true`
-- (1), (2), (5), (6): `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-- (1), (2), (5), (6): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
-- (3), (4), (7), (8): `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
-- (3), (4), (7), (8): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
+- (1), (2), (5), (6):
+  + `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+- (3), (4), (7), (8):
+  + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
 - (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
 
 
@@ -202,10 +204,20 @@ int main()
 {
   constexpr size_t N = 2;
 
-  std::vector&amp;lt;double&amp;gt; A_vec(N * N);
-  std::vector&amp;lt;double&amp;gt; B_vec(N * N);
-  std::vector&amp;lt;double&amp;gt; C_vec(N * N);
-  std::vector&amp;lt;double&amp;gt; E_vec(N * N);
+  using Scalar = double;
+  using Vector = std::vector&amp;lt;Scalar&amp;gt;;
+  using SymmetricMatrix = std::mdspan&amp;lt;
+      Scalar,
+      std::extents&amp;lt;size_t, N, N&amp;gt;,
+      std::linalg::layout_blas_packed&amp;lt;
+        std::linalg::upper_triangle_t,
+        std::linalg::row_major_t&amp;gt;
+    &amp;gt;;
+
+  Vector A_vec(N * N);
+  Vector B_vec(N * N);
+  Vector C_vec(N * N);
+  Vector E_vec(N * N);
 
   std::mdspan C(C_vec.data(), N, N);
   std::mdspan E(E_vec.data(), N, N);
@@ -213,14 +225,8 @@ int main()
   init_mat(E, N * N);
 
   {
-    std::mdspan&amp;lt;
-      double,
-      std::extents&amp;lt;size_t, N, N&amp;gt;,
-      std::linalg::layout_blas_packed&amp;lt;
-        std::linalg::upper_triangle_t,
-        std::linalg::row_major_t&amp;gt;
-    &amp;gt; A(A_vec.data());
-    std::mdspan B(B_vec.data(), N, N);
+    SymmetricMatrix A(A_vec.data());
+    std::mdspan     B(B_vec.data(), N, N);
 
     init_symm_mat(A);
     init_mat(B);
@@ -237,14 +243,8 @@ int main()
   }
 
   {
-    std::mdspan A(A_vec.data(), N, N);
-    std::mdspan&amp;lt;
-      double,
-      std::extents&amp;lt;size_t, N, N&amp;gt;,
-      std::linalg::layout_blas_packed&amp;lt;
-        std::linalg::upper_triangle_t,
-        std::linalg::row_major_t&amp;gt;
-    &amp;gt; B(B_vec.data());
+    std::mdspan     A(A_vec.data(), N, N);
+    SymmetricMatrix B(B_vec.data());
 
     init_mat(A);
     init_symm_mat(B);
@@ -261,14 +261,8 @@ int main()
   }
 
   {
-    std::mdspan&amp;lt;
-      double,
-      std::extents&amp;lt;size_t, N, N&amp;gt;,
-      std::linalg::layout_blas_packed&amp;lt;
-        std::linalg::upper_triangle_t,
-        std::linalg::row_major_t&amp;gt;
-    &amp;gt; A(A_vec.data());
-    std::mdspan B(B_vec.data(), N, N);
+    SymmetricMatrix A(A_vec.data());
+    std::mdspan     B(B_vec.data(), N, N);
 
     init_symm_mat(A);
     init_mat(B);
@@ -285,14 +279,8 @@ int main()
   }
 
   {
-    std::mdspan A(A_vec.data(), N, N);
-    std::mdspan&amp;lt;
-      double,
-      std::extents&amp;lt;size_t, N, N&amp;gt;,
-      std::linalg::layout_blas_packed&amp;lt;
-        std::linalg::upper_triangle_t,
-        std::linalg::row_major_t&amp;gt;
-    &amp;gt; B(B_vec.data());
+    std::mdspan     A(A_vec.data(), N, N);
+    SymmetricMatrix B(B_vec.data());
 
     init_mat(A);
     init_symm_mat(B);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>linalg -- linalg : triangular_matrix_productを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg.html"/>
      <id>c9baae05b0020e86402d504f20d5c461dd77fecd:reference/linalg.md</id>
      <updated>2024-07-10T14:51:42+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダでは、線形代数(linear algebra)に関する基礎的な演算アルゴリズムを提供する。
ベクトルや行列の成分にアクセスするアルゴリズムは、多次元配列ビュー&lt;a href=&#34;mdspan/mdspan.html&#34;&gt; &lt;code&gt;std::mdspan&lt;/code&gt; &lt;/a&gt;を通してその要素にアクセスする。
本ヘッダが提供するエンティティは、すべて名前空間&lt;code&gt;std::linalg&lt;/code&gt;に属する。&lt;/p&gt;
&lt;p&gt;1次元データであるベクトル(vector)や2次元データである行列(matrix)に対して、線形代数分野のデファクトスタンダードとされる BLAS(Basic Linear Algebra Subprograms) 互換のアルゴリズム群、いくつかの LAPACK(Linear Algebra PACKage) 互換のアルゴリズムが提供される。
BLAS互換アルゴリズムは、演算対象データの次元数や計算オーダーに応じて3段階に区分される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Level 1 BLAS : ベクトルーベクトルの演算&lt;/li&gt;
&lt;li&gt;Level 2 BLAS : 行列ーベクトルの演算&lt;/li&gt;
&lt;li&gt;Level 3 BLAS : 行列ー行列の演算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例えば、2個の一般行列の積を求める&lt;code&gt;std::linalg::matrix_product&lt;/code&gt;はLevel 3 BLASルーチン&lt;code&gt;xGEMM&lt;/code&gt;に対応する。
（実際のBLASルーチン名は、浮動小数点数型の単精度&lt;code&gt;S&lt;/code&gt;／倍精度&lt;code&gt;D&lt;/code&gt;とそれぞれの複素数版&lt;code&gt;C&lt;/code&gt;,&lt;code&gt;Z&lt;/code&gt;として、プレフィックス&lt;code&gt;x&lt;/code&gt;部は文字4種類のいずれか。）&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;std::mdspan&lt;/code&gt;と組み合わせて利用する拡張機能が提供される。&lt;/p&gt;
&lt;h2&gt;共通要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダが提供する演算アルゴリズムは、スカラ値およびベクトル／行列の要素型として線形代数値型(linear algebra value types)を取り扱う。&lt;/p&gt;
&lt;p&gt;線形代数値型はBLASが取り扱う&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&amp;lt;float&amp;gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt;をはじめ、&lt;code&gt;&lt;a href=&#34;concepts/semiregular.html&#34;&gt;semiregular&lt;/a&gt;&lt;/code&gt;のモデルであれば良い。
また、線形代数値型の値初期化は加法元（算術型であれば値&lt;code&gt;0&lt;/code&gt;）であること。&lt;/p&gt;
&lt;p&gt;プログラム定義型を利用する場合、演算アルゴリズムはカスタマイゼーションポイントとして&lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;real&lt;/code&gt;, &lt;code&gt;imag&lt;/code&gt;, &lt;code&gt;conj&lt;/code&gt;を非修飾名で呼び出す。&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;std::mdspan&lt;/code&gt;向け機能拡張&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/layout_blas_packed.html&#34;&gt;layout_blas_packed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列要素のBLAS互換パックレイアウトに対応する&lt;a href=&#34;mdspan/LayoutMappingPolicy.html&#34;&gt;レイアウトマッピングポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scaled_accessor.html&#34;&gt;scaled_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;scaled&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/AccessorPolicy.html&#34;&gt;アクセサポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scaled.html&#34;&gt;scaled&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素値をスカラー倍した読み取り専用&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugated_accessor.html&#34;&gt;conjugated_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;conjugated&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/AccessorPolicy.html&#34;&gt;アクセサポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugated.html&#34;&gt;conjugated&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の複素共役ビュー&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/layout_transpose.html&#34;&gt;layout_transpose&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;transposed&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/LayoutMappingPolicy.html&#34;&gt;レイアウトマッピングポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/transposed.html&#34;&gt;transposed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2次元&lt;code&gt;std::mdspan&lt;/code&gt;の行列転置ビューを作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugate_transposed.html&#34;&gt;conjugate_transposed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の複素共役転置ビュー&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLASの要件&lt;/h2&gt;
&lt;p&gt;BLAS 1, 2, 3のアルゴリズムでテンプレートパラメータが特に制約されていない場合、テンプレートパラメータの名前によって以下の制約を満たすとする。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;制約&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ExecutionPolicy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;is_execution_policy&amp;lt;ExecutionPolicy&amp;gt;::value == true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&amp;lt;Real&amp;gt;&lt;/code&gt;が規定できる型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Triangle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;upper_triangle_t&lt;/code&gt;または&lt;code&gt;lower_triangle_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DiagonalStorage&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;implicit_unit_diagonal_t&lt;/code&gt;または&lt;code&gt;explicit_diagonal_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 1アルゴリズム&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::mpspan&lt;/code&gt;をパラメータに持つ、この節の全てのアルゴリズムの計算量は渡された&lt;code&gt;std::mdspan&lt;/code&gt;の&lt;code&gt;extents&lt;/code&gt;の積の最大値、つまりベクトルや行列の要素数の最大値に線形である。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/setup_givens_rotation_result.html&#34;&gt;setup_givens_rotation_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;setup_givens_rotation&lt;/code&gt;の結果型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/setup_givens_rotation.html&#34;&gt;setup_givens_rotation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xLARTG: ギブンス回転をセットアップする (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/apply_givens_rotation.html&#34;&gt;apply_givens_rotation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xROT: ベクトルにギブンス回転を適用する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/swap_elements.html&#34;&gt;swap_elements&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSWAP: 2つのベクトル／行列の要素を交換する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scale.html&#34;&gt;scale&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSCAL: ベクトル／行列の要素にスカラ値を乗算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/copy.html&#34;&gt;copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xCOPY: ベクトル／行列の要素をコピーする (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/add.html&#34;&gt;add&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xAXPY: 2つのベクトル／行列の要素を加算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/dot.html&#34;&gt;dot&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xDOT, xDOTU: 2つのベクトルのドット積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/dotc.html&#34;&gt;dotc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xDOTC: 2つのベクトルの複素共役ドット積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/sum_of_squares_result.html&#34;&gt;sum_of_squares_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector_sum_of_squares&lt;/code&gt;の結果型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_sum_of_squares.html&#34;&gt;vector_sum_of_squares&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xLASSQ: ベクトル要素の平方和を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_two_norm.html&#34;&gt;vector_two_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xNRM2: ベクトルのユークリッドノルム(Euclidean norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_abs_sum.html&#34;&gt;vector_abs_sum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xASUM: ベクトル要素の絶対値和を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_idx_abs_max.html&#34;&gt;vector_idx_abs_max&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xIAMAX: ベクトル要素のうち最大絶対値インデクスを返す (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_frob_norm.html&#34;&gt;matrix_frob_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列のフロベニウスノルム(Frobenius norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_one_norm.html&#34;&gt;matrix_one_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列の1ノルム(One norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_inf_norm.html&#34;&gt;matrix_inf_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列の無限大ノルム(Infinity norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 2アルゴリズム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_vector_product.html&#34;&gt;matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGEMV: 一般行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_vector_product.html&#34;&gt;symmetric_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYMV: 対称行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_vector_product.html&#34;&gt;hermitian_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHEMV: ハミルトニアン行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_vector_product.html&#34;&gt;triangular_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMV: 三角行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_vector_solve.html&#34;&gt;triangular_matrix_vector_solve&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSV: 三角行列を係数とする行列方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_rank_1_update.html&#34;&gt;matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGER, xGERU: 行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_rank_1_update_c.html&#34;&gt;matrix_rank_1_update_c&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGERC: 複素行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_1_update.html&#34;&gt;symmetric_matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR: 対称行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_1_update.html&#34;&gt;hermitian_matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER: ハミルトニアン行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_2_update.html&#34;&gt;symmetric_matrix_rank_2_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR2: 対称行列のRank-2更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_2_update.html&#34;&gt;hermitian_matrix_rank_2_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER2: ハミルトニアン行列のRank-2更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 3アルゴリズム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_product.html&#34;&gt;matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGEMM: 2つの一般行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_product.html&#34;&gt;symmetric_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYMM: 対称行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_product.html&#34;&gt;hermitian_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHEMM: ハミルトニアン行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_product.html&#34;&gt;triangular_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: 三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;triangular_matrix_left_product&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: In-placeに三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;triangular_matrix_right_product&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: In-placeに三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symmetric_matrix_rank_k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYRK: 対称行列のRank-k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hermitian_matrix_rank_k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHERK: ハミルトニアン行列のRank-k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symmetric_matrix_rank_2k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR2K: 対称行列のRank-2k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hermitian_matrix_rank_2k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER2K: ハミルトニアン行列のRank-2k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;triangular_matrix_matrix_left_solve&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSM: 三角行列の連立一次方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;triangular_matrix_matrix_right_solve&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSM: 三角行列の連立一次方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;タグ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダでは、行列の格納順序や三角行列の上下をタグを使って表現している。&lt;/p&gt;
&lt;h3&gt;格納順序&lt;/h3&gt;
&lt;p&gt;行列の格納順序を表すタグ。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/column_major_t.html&#34;&gt;column_major_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(column-major)を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/column_major_t.html&#34;&gt;column_major&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(column-major)を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/row_major_t.html&#34;&gt;row_major_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(row-major)を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/row_major_t.html&#34;&gt;row_major&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(row-major)を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;三角行列&lt;/h3&gt;
&lt;p&gt;上三角行列か下三角行列かを表すタグ。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/upper_triangle_t.html&#34;&gt;upper_triangle_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上三角行列を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/upper_triangle_t.html&#34;&gt;upper_triangle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上三角行列を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/lower_triangle_t.html&#34;&gt;lower_triangle_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下三角行列を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/lower_triangle_t.html&#34;&gt;lower_triangle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下三角行列を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;対角成分&lt;/h3&gt;
&lt;p&gt;行列の全ての対角成分を暗黙に乗法における単位元とみなすかどうかを表すタグ。みなした場合、行列の対角成分にはアクセスせず、値が乗法における単位元であるとして計算する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/implicit_unit_diagonal_t.html&#34;&gt;implicit_unit_diagonal_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分を暗黙に乗法における単位元とみなすタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/implicit_unit_diagonal_t.html&#34;&gt;implicit_unit_diagonal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分を暗黙に乗法における単位元とみなすタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/explicit_diagonal_t.html&#34;&gt;explicit_diagonal_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分にアクセスするタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/explicit_diagonal_t.html&#34;&gt;explicit_diagonal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分にアクセスするタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html&#34; target=&#34;_blank&#34;&gt;P1673R13 A free function linear algebra interface based on the BLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1674r2.html&#34; target=&#34;_blank&#34;&gt;P1674R2: Evolving a Standard C++ Linear Algebra Library from the BLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CppCon/CppCon2023/blob/main/Presentations/stdlinalg_linear_algebra_coming_to_standard_cpp.pdf&#34; target=&#34;_blank&#34;&gt;std::linalg: Linear Algebra Coming to Standard C++&lt;/a&gt;, CppCon 2023&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlib.org/blas/&#34; target=&#34;_blank&#34;&gt;BLAS (Basic Linear Algebra Subprograms)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eel.is/c++draft/complex.numbers&#34; target=&#34;_blank&#34;&gt;Numerics library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_product -- linalg : triangular_matrix_productを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_product.html"/>
      <id>c9baae05b0020e86402d504f20d5c461dd77fecd:reference/linalg/triangular_matrix_product.md</id>
      <updated>2024-07-10T14:51:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_product.md b/reference/linalg/triangular_matrix_product.md
new file mode 100644
index 000000000..b644a7de9
--- /dev/null
+++ b/reference/linalg/triangular_matrix_product.md
@@ -0,0 +1,421 @@
+# triangular_matrix_product
+
+
+* [mathjax enable]
+* linalg[meta header]
+* function template[meta id-type]
+* std::linalg[meta namespace]
+* cpp26[meta cpp]
+
+
+```cpp
+namespace std::linalg {
+  template&amp;lt;in-matrix InMat1,
+           class Triangle,
+           class DiagonalStorage,
+           in-matrix InMat2,
+           out-matrix OutMat&amp;gt;
+  void triangular_matrix_product(
+    InMat1 A,
+    Triangle t,
+    DiagonalStorage d,
+    InMat2 B,
+    OutMat C); // (1)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat1,
+           class Triangle,
+           class DiagonalStorage,
+           in-matrix InMat2,
+           out-matrix OutMat&amp;gt;
+  void triangular_matrix_product(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat1 A,
+    Triangle t,
+    DiagonalStorage d,
+    InMat2 B,
+    OutMat C); // (2)
+
+  template&amp;lt;in-matrix InMat1,
+           in-matrix InMat2,
+           class Triangle,
+           class DiagonalStorage,
+           out-matrix OutMat&amp;gt;
+  void triangular_matrix_product(
+    InMat1 A,
+    InMat2 B,
+    Triangle t,
+    DiagonalStorage d,
+    OutMat C); // (3)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat1,
+           in-matrix InMat2,
+           class Triangle,
+           class DiagonalStorage,
+           out-matrix OutMat&amp;gt;
+  void triangular_matrix_product(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat1 A,
+    InMat2 B,
+    Triangle t,
+    DiagonalStorage d,
+    OutMat C); // (4)
+
+  template&amp;lt;in-matrix InMat1,
+           class Triangle,
+           class DiagonalStorage,
+           in-matrix InMat2,
+           in-matrix InMat3,
+           out-matrix OutMat&amp;gt;
+  void triangular_matrix_product(
+    InMat1 A,
+    Triangle t,
+    DiagonalStorage d,
+    InMat2 B,
+    InMat3 E,
+    OutMat C); // (5)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat1,
+           class Triangle,
+           class DiagonalStorage,
+           in-matrix InMat2,
+           in-matrix InMat3,
+           out-matrix OutMat&amp;gt;
+  void triangular_matrix_product(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat1 A,
+    Triangle t,
+    DiagonalStorage d,
+    InMat2 B,
+    InMat3 E,
+    OutMat C); // (6)
+
+  template&amp;lt;in-matrix InMat1,
+           in-matrix InMat2,
+           class Triangle,
+           class DiagonalStorage,
+           in-matrix InMat3,
+           out-matrix OutMat&amp;gt;
+  void triangular_matrix_product(
+    InMat1 A,
+    InMat2 B,
+    Triangle t,
+    DiagonalStorage d,
+    InMat3 E,
+    OutMat C); // (7)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat1,
+           in-matrix InMat2,
+           class Triangle,
+           class DiagonalStorage,
+           in-matrix InMat3,
+           out-matrix OutMat&amp;gt;
+  void triangular_matrix_product(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat1 A,
+    InMat2 B,
+    Triangle t,
+    DiagonalStorage d,
+    InMat3 E,
+    OutMat C); // (8)
+}
+```
+
+
+## 概要
+三角行列と行列の積を計算する。
+
+- (1): 三角行列`A`と行列`B`に対し、$C \leftarrow AB$
+- (2): (1)を指定された実行ポリシーで実行する。
+- (3): 行列`A`と三角行列`B`に対し、$C \leftarrow AB$
+- (4): (3)を指定された実行ポリシーで実行する。
+- (5): 三角行列`A`と行列`B`に対し、$C \leftarrow E + AB$
+- (6): (5)を指定された実行ポリシーで実行する。
+- (7): 行列`A`と三角行列`B`に対し、$C \leftarrow E + AB$
+- (8): (7)を指定された実行ポリシーで実行する。
+
+
+## 適格要件
+- 共通
+  + `DiagonalStorage`が[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
+  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(C)&amp;gt;()`が`true`
+- (1), (2), (5), (6):
+  + `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+- (3), (4), (7), (8):
+  + `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
+- (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
+- (2), (4), (6), (8): `is_execution_policy&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
+
+
+## 事前条件
+- 共通
+  + [`multipliable`](multipliable.md)`(A, B, C) == true`
+- (1), (2), (5), (6): [`A.extent(0) == A.extent(1)`]
+- (3), (4), (7), (8): [`B.extent(0) == B.extent(1)`]
+- (5), (6), (7), (8): [`addable`](addable.md)`(E, E, C) == true`
+
+
+## 効果
+- (1), (2): 三角行列`A`と行列`B`に対し、$C \leftarrow AB$
+- (3), (4): 行列`A`と三角行列`B`に対し、$C \leftarrow AB$
+- (5), (6): 三角行列`A`と行列`B`に対し、$C \leftarrow E + AB$
+- (7), (8): 行列`A`と三角行列`B`に対し、$C \leftarrow E + AB$
+
+
+## 戻り値
+なし
+
+
+## 計算量
+$O(\verb|A.extent(0)| \times \verb|A.extent(1)| \times \verb|B.extent(1)|)$
+
+
+## 備考
+- (5), (6), (7), (8): `C`に`E`を入れても良い。
+
+
+## 例
+**[注意] 処理系にあるコンパイラで確認していないため、間違っているかもしれません。**
+
+```cpp example
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;linalg&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template &amp;lt;class Matrix&amp;gt;
+void print_mat(const Matrix&amp;amp; A) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    for(int j = 0; j &amp;lt; A.extent(1) - 1; ++j) {
+      std::cout &amp;lt;&amp;lt; A[i, j] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+    }
+    std::cout &amp;lt;&amp;lt; A[i, A.extent(1) - 1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+
+template &amp;lt;class Matrix&amp;gt;
+void init_mat(Matrix&amp;amp; A, typename Matrix::value_type geta = 1) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    for(int j = 0; j &amp;lt; A.extent(1); ++j) {
+      A[i, j] = i * A.extent(1) + j + geta;
+    }
+  }
+}
+
+template &amp;lt;class Matrix&amp;gt;
+void init_tria_mat(Matrix&amp;amp; A) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    for(int j = i + 1; j &amp;lt; A.extent(1); ++j) {
+      A[i, j] = i * A.extent(1) + j;
+    }
+  }
+}
+
+int main()
+{
+  constexpr size_t N = 2;
+
+  using Scalar = double;
+  using Vector = std::vector&amp;lt;Scalar&amp;gt;;
+  using TriangularMatrix = std::mdspan&amp;lt;
+      Scalar,
+      std::extents&amp;lt;size_t, N, N&amp;gt;,
+      std::linalg::layout_blas_packed&amp;lt;
+        std::linalg::upper_triangle_t,
+        std::linalg::row_major_t&amp;gt;
+    &amp;gt;;
+
+  Vector A_vec(N * N);
+  Vector B_vec(N * N);
+  Vector C_vec(N * N);
+  Vector E_vec(N * N);
+
+  std::mdspan C(C_vec.data(), N, N);
+  std::mdspan E(E_vec.data(), N, N);
+
+  init_mat(E, N * N);
+
+  {
+    TriangularMatrix A(A_vec.data());
+    std::mdspan      B(B_vec.data(), N, N);
+
+    init_tria_mat(A);
+    init_mat(B);
+
+    // (1)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(1)\n&amp;#34;;
+    std::linalg::triangular_matrix_product(
+      A,
+      std::linalg::upper_triangle,
+      std::linalg::implicit_unit_diagonal,
+      B,
+      C);
+    print_mat(C);
+
+    // (2)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(2)\n&amp;#34;;
+    std::linalg::triangular_matrix_product(
+      std::execution::par,
+      A,
+      std::linalg::upper_triangle,
+      std::linalg::implicit_unit_diagonal,
+      B,
+      C);
+    print_mat(C);
+  }
+
+  {
+    std::mdspan      A(A_vec.data(), N, N);
+    TriangularMatrix B(B_vec.data());
+
+    init_mat(A);
+    init_tria_mat(B);
+
+    // (3)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(3)\n&amp;#34;;
+    std::linalg::triangular_matrix_product(
+      A,
+      B,
+      std::linalg::upper_triangle,
+      std::linalg::implicit_unit_diagonal,
+      C);
+    print_mat(C);
+
+    // (4)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(4)\n&amp;#34;;
+    std::linalg::triangular_matrix_product(
+      std::execution::par,
+      A,
+      B,
+      std::linalg::upper_triangle,
+      std::linalg::implicit_unit_diagonal,
+      C);
+    print_mat(C);
+  }
+
+  {
+    TriangularMatrix A(A_vec.data());
+    std::mdspan      B(B_vec.data(), N, N);
+
+    init_tria_mat(A);
+    init_mat(B);
+
+    // (5)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(5)\n&amp;#34;;
+    std::linalg::triangular_matrix_product(
+      A,
+      std::linalg::upper_triangle,
+      std::linalg::implicit_unit_diagonal,
+      B,
+      E,
+      C);
+    print_mat(C);
+
+    // (6)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(6)\n&amp;#34;;
+    std::linalg::triangular_matrix_product(
+      std::execution::par,
+      A,
+      std::linalg::upper_triangle,
+      std::linalg::implicit_unit_diagonal,
+      B,
+      E,
+      C);
+    print_mat(C);
+  }
+
+  {
+    std::mdspan      A(A_vec.data(), N, N);
+    TriangularMatrix B(B_vec.data());
+
+    init_mat(A);
+    init_tria_mat(B);
+
+    // (7)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(7)\n&amp;#34;;
+    std::linalg::triangular_matrix_product(
+      A,
+      B,
+      std::linalg::upper_triangle,
+      std::linalg::implicit_unit_diagonal,
+      E,
+      C);
+    print_mat(C);
+
+    // (8)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(8)\n&amp;#34;;
+    std::linalg::triangular_matrix_product(
+      std::execution::par,
+      A,
+      B,
+      std::linalg::upper_triangle,
+      std::linalg::implicit_unit_diagonal,
+      E,
+      C);
+    print_mat(C);
+  }
+
+  return 0;
+}
+```
+
+
+### 出力
+```
+(1)
+4 6
+3 4
+(2)
+4 6
+3 4
+(3)
+1 3
+3 7
+(4)
+1 3
+3 7
+(5)
+8 11
+9 11
+(6)
+8 11
+9 11
+(7)
+5 8
+9 14
+(8)
+5 8
+9 14
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution`](/reference/execution.md)
+- [`mdspan`](/reference/mdspan.md)
+- [`upper_triangle_t`](upper_triangle_t.md)
+- [`lower_triangle_t`](lower_triangle_t.md)
+- [`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)
+- [`explicit_diagonal_t`](explicit_diagonal_t.md)
+
+
+## 参照
+- [P1673R13 A free function linear algebra interface based on the BLAS](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html)
+- [LAPACK: trmm: triangular matrix-matrix multiply](https://netlib.org/lapack/explore-html/dd/dab/group__trmm.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_rank_1_update -- linalg : 例で`#include &lt;complex&gt;`を追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_rank_1_update.html"/>
      <id>a6e4d8dcb2e239e73d93f6936cadb5e8beb27060:reference/linalg/hermitian_matrix_rank_1_update.md</id>
      <updated>2024-07-09T15:51:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_rank_1_update.md b/reference/linalg/hermitian_matrix_rank_1_update.md
index b1df1f3c1..3486d4f86 100644
--- a/reference/linalg/hermitian_matrix_rank_1_update.md
+++ b/reference/linalg/hermitian_matrix_rank_1_update.md
@@ -97,6 +97,7 @@ $O((\verb|x.extent(0)|)^2)$
 
 ```cpp example
 #include &amp;lt;array&amp;gt;
+#include &amp;lt;complex&amp;gt;
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;linalg&amp;gt;
 #include &amp;lt;mdspan&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_rank_2_update -- linalg : 例で`#include &lt;complex&gt;`を追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_rank_2_update.html"/>
      <id>a6e4d8dcb2e239e73d93f6936cadb5e8beb27060:reference/linalg/hermitian_matrix_rank_2_update.md</id>
      <updated>2024-07-09T15:51:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_rank_2_update.md b/reference/linalg/hermitian_matrix_rank_2_update.md
index 620e977c1..6841357c8 100644
--- a/reference/linalg/hermitian_matrix_rank_2_update.md
+++ b/reference/linalg/hermitian_matrix_rank_2_update.md
@@ -71,6 +71,7 @@ $O(\verb|x.extent(0)| \times \verb|y.extent(0)|)$
 
 ```cpp example
 #include &amp;lt;array&amp;gt;
+#include &amp;lt;complex&amp;gt;
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;linalg&amp;gt;
 #include &amp;lt;mdspan&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>linalg -- linalg : hermitian_martix_productを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg.html"/>
      <id>048b96e30b240aedbf7eb809dbb31cad25a4a28d:reference/linalg.md</id>
      <updated>2024-07-09T15:50:42+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダでは、線形代数(linear algebra)に関する基礎的な演算アルゴリズムを提供する。
ベクトルや行列の成分にアクセスするアルゴリズムは、多次元配列ビュー&lt;a href=&#34;mdspan/mdspan.html&#34;&gt; &lt;code&gt;std::mdspan&lt;/code&gt; &lt;/a&gt;を通してその要素にアクセスする。
本ヘッダが提供するエンティティは、すべて名前空間&lt;code&gt;std::linalg&lt;/code&gt;に属する。&lt;/p&gt;
&lt;p&gt;1次元データであるベクトル(vector)や2次元データである行列(matrix)に対して、線形代数分野のデファクトスタンダードとされる BLAS(Basic Linear Algebra Subprograms) 互換のアルゴリズム群、いくつかの LAPACK(Linear Algebra PACKage) 互換のアルゴリズムが提供される。
BLAS互換アルゴリズムは、演算対象データの次元数や計算オーダーに応じて3段階に区分される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Level 1 BLAS : ベクトルーベクトルの演算&lt;/li&gt;
&lt;li&gt;Level 2 BLAS : 行列ーベクトルの演算&lt;/li&gt;
&lt;li&gt;Level 3 BLAS : 行列ー行列の演算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例えば、2個の一般行列の積を求める&lt;code&gt;std::linalg::matrix_product&lt;/code&gt;はLevel 3 BLASルーチン&lt;code&gt;xGEMM&lt;/code&gt;に対応する。
（実際のBLASルーチン名は、浮動小数点数型の単精度&lt;code&gt;S&lt;/code&gt;／倍精度&lt;code&gt;D&lt;/code&gt;とそれぞれの複素数版&lt;code&gt;C&lt;/code&gt;,&lt;code&gt;Z&lt;/code&gt;として、プレフィックス&lt;code&gt;x&lt;/code&gt;部は文字4種類のいずれか。）&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;std::mdspan&lt;/code&gt;と組み合わせて利用する拡張機能が提供される。&lt;/p&gt;
&lt;h2&gt;共通要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダが提供する演算アルゴリズムは、スカラ値およびベクトル／行列の要素型として線形代数値型(linear algebra value types)を取り扱う。&lt;/p&gt;
&lt;p&gt;線形代数値型はBLASが取り扱う&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&amp;lt;float&amp;gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt;をはじめ、&lt;code&gt;&lt;a href=&#34;concepts/semiregular.html&#34;&gt;semiregular&lt;/a&gt;&lt;/code&gt;のモデルであれば良い。
また、線形代数値型の値初期化は加法元（算術型であれば値&lt;code&gt;0&lt;/code&gt;）であること。&lt;/p&gt;
&lt;p&gt;プログラム定義型を利用する場合、演算アルゴリズムはカスタマイゼーションポイントとして&lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;real&lt;/code&gt;, &lt;code&gt;imag&lt;/code&gt;, &lt;code&gt;conj&lt;/code&gt;を非修飾名で呼び出す。&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;std::mdspan&lt;/code&gt;向け機能拡張&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/layout_blas_packed.html&#34;&gt;layout_blas_packed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列要素のBLAS互換パックレイアウトに対応する&lt;a href=&#34;mdspan/LayoutMappingPolicy.html&#34;&gt;レイアウトマッピングポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scaled_accessor.html&#34;&gt;scaled_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;scaled&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/AccessorPolicy.html&#34;&gt;アクセサポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scaled.html&#34;&gt;scaled&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素値をスカラー倍した読み取り専用&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugated_accessor.html&#34;&gt;conjugated_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;conjugated&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/AccessorPolicy.html&#34;&gt;アクセサポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugated.html&#34;&gt;conjugated&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の複素共役ビュー&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/layout_transpose.html&#34;&gt;layout_transpose&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;transposed&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/LayoutMappingPolicy.html&#34;&gt;レイアウトマッピングポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/transposed.html&#34;&gt;transposed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2次元&lt;code&gt;std::mdspan&lt;/code&gt;の行列転置ビューを作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugate_transposed.html&#34;&gt;conjugate_transposed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の複素共役転置ビュー&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLASの要件&lt;/h2&gt;
&lt;p&gt;BLAS 1, 2, 3のアルゴリズムでテンプレートパラメータが特に制約されていない場合、テンプレートパラメータの名前によって以下の制約を満たすとする。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;制約&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ExecutionPolicy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;is_execution_policy&amp;lt;ExecutionPolicy&amp;gt;::value == true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&amp;lt;Real&amp;gt;&lt;/code&gt;が規定できる型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Triangle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;upper_triangle_t&lt;/code&gt;または&lt;code&gt;lower_triangle_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DiagonalStorage&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;implicit_unit_diagonal_t&lt;/code&gt;または&lt;code&gt;implicit_unit_diagonal_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 1アルゴリズム&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::mpspan&lt;/code&gt;をパラメータに持つ、この節の全てのアルゴリズムの計算量は渡された&lt;code&gt;std::mdspan&lt;/code&gt;の&lt;code&gt;extents&lt;/code&gt;の積の最大値、つまりベクトルや行列の要素数の最大値に線形である。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/setup_givens_rotation_result.html&#34;&gt;setup_givens_rotation_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;setup_givens_rotation&lt;/code&gt;の結果型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/setup_givens_rotation.html&#34;&gt;setup_givens_rotation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xLARTG: ギブンス回転をセットアップする (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/apply_givens_rotation.html&#34;&gt;apply_givens_rotation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xROT: ベクトルにギブンス回転を適用する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/swap_elements.html&#34;&gt;swap_elements&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSWAP: 2つのベクトル／行列の要素を交換する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scale.html&#34;&gt;scale&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSCAL: ベクトル／行列の要素にスカラ値を乗算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/copy.html&#34;&gt;copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xCOPY: ベクトル／行列の要素をコピーする (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/add.html&#34;&gt;add&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xAXPY: 2つのベクトル／行列の要素を加算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/dot.html&#34;&gt;dot&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xDOT, xDOTU: 2つのベクトルのドット積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/dotc.html&#34;&gt;dotc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xDOTC: 2つのベクトルの複素共役ドット積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/sum_of_squares_result.html&#34;&gt;sum_of_squares_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector_sum_of_squares&lt;/code&gt;の結果型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_sum_of_squares.html&#34;&gt;vector_sum_of_squares&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xLASSQ: ベクトル要素の平方和を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_two_norm.html&#34;&gt;vector_two_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xNRM2: ベクトルのユークリッドノルム(Euclidean norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_abs_sum.html&#34;&gt;vector_abs_sum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xASUM: ベクトル要素の絶対値和を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_idx_abs_max.html&#34;&gt;vector_idx_abs_max&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xIAMAX: ベクトル要素のうち最大絶対値インデクスを返す (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_frob_norm.html&#34;&gt;matrix_frob_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列のフロベニウスノルム(Frobenius norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_one_norm.html&#34;&gt;matrix_one_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列の1ノルム(One norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_inf_norm.html&#34;&gt;matrix_inf_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列の無限大ノルム(Infinity norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 2アルゴリズム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_vector_product.html&#34;&gt;matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGEMV: 一般行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_vector_product.html&#34;&gt;symmetric_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYMV: 対称行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_vector_product.html&#34;&gt;hermitian_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHEMV: ハミルトニアン行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_vector_product.html&#34;&gt;triangular_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMV: 三角行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_vector_solve.html&#34;&gt;triangular_matrix_vector_solve&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSV: 三角行列を係数とする行列方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_rank_1_update.html&#34;&gt;matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGER, xGERU: 行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_rank_1_update_c.html&#34;&gt;matrix_rank_1_update_c&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGERC: 複素行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_1_update.html&#34;&gt;symmetric_matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR: 対称行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_1_update.html&#34;&gt;hermitian_matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER: ハミルトニアン行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_2_update.html&#34;&gt;symmetric_matrix_rank_2_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR2: 対称行列のRank-2更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_2_update.html&#34;&gt;hermitian_matrix_rank_2_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER2: ハミルトニアン行列のRank-2更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 3アルゴリズム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_product.html&#34;&gt;matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGEMM: 2つの一般行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_product.html&#34;&gt;symmetric_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYMM: 対称行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_product.html&#34;&gt;hermitian_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHEMM: ハミルトニアン行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;triangular_matrix_product&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: 三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;triangular_matrix_left_product&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: In-placeに三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;triangular_matrix_right_product&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: In-placeに三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symmetric_matrix_rank_k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYRK: 対称行列のRank-k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hermitian_matrix_rank_k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHERK: ハミルトニアン行列のRank-k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symmetric_matrix_rank_2k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR2K: 対称行列のRank-2k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hermitian_matrix_rank_2k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER2K: ハミルトニアン行列のRank-2k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;triangular_matrix_matrix_left_solve&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSM: 三角行列の連立一次方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;triangular_matrix_matrix_right_solve&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSM: 三角行列の連立一次方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;タグ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダでは、行列の格納順序や三角行列の上下をタグを使って表現している。&lt;/p&gt;
&lt;h3&gt;格納順序&lt;/h3&gt;
&lt;p&gt;行列の格納順序を表すタグ。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/column_major_t.html&#34;&gt;column_major_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(column-major)を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/column_major_t.html&#34;&gt;column_major&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(column-major)を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/row_major_t.html&#34;&gt;row_major_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(row-major)を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/row_major_t.html&#34;&gt;row_major&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(row-major)を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;三角行列&lt;/h3&gt;
&lt;p&gt;上三角行列か下三角行列かを表すタグ。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/upper_triangle_t.html&#34;&gt;upper_triangle_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上三角行列を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/upper_triangle_t.html&#34;&gt;upper_triangle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上三角行列を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/lower_triangle_t.html&#34;&gt;lower_triangle_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下三角行列を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/lower_triangle_t.html&#34;&gt;lower_triangle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下三角行列を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;対角成分&lt;/h3&gt;
&lt;p&gt;行列の全ての対角成分を暗黙に乗法における単位元とみなすかどうかを表すタグ。みなした場合、行列の対角成分にはアクセスせず、値が乗法における単位元であるとして計算する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/implicit_unit_diagonal_t.html&#34;&gt;implicit_unit_diagonal_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分を暗黙に乗法における単位元とみなすタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/implicit_unit_diagonal_t.html&#34;&gt;implicit_unit_diagonal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分を暗黙に乗法における単位元とみなすタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/explicit_diagonal_t.html&#34;&gt;explicit_diagonal_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分にアクセスするタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/explicit_diagonal_t.html&#34;&gt;explicit_diagonal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分にアクセスするタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html&#34; target=&#34;_blank&#34;&gt;P1673R13 A free function linear algebra interface based on the BLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1674r2.html&#34; target=&#34;_blank&#34;&gt;P1674R2: Evolving a Standard C++ Linear Algebra Library from the BLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CppCon/CppCon2023/blob/main/Presentations/stdlinalg_linear_algebra_coming_to_standard_cpp.pdf&#34; target=&#34;_blank&#34;&gt;std::linalg: Linear Algebra Coming to Standard C++&lt;/a&gt;, CppCon 2023&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlib.org/blas/&#34; target=&#34;_blank&#34;&gt;BLAS (Basic Linear Algebra Subprograms)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eel.is/c++draft/complex.numbers&#34; target=&#34;_blank&#34;&gt;Numerics library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_product -- linalg : hermitian_martix_productを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_product.html"/>
      <id>048b96e30b240aedbf7eb809dbb31cad25a4a28d:reference/linalg/hermitian_matrix_product.md</id>
      <updated>2024-07-09T15:50:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_product.md b/reference/linalg/hermitian_matrix_product.md
new file mode 100644
index 000000000..d19cdc911
--- /dev/null
+++ b/reference/linalg/hermitian_matrix_product.md
@@ -0,0 +1,353 @@
+# hermitian_matrix_product
+
+
+* [mathjax enable]
+* linalg[meta header]
+* function template[meta id-type]
+* std::linalg[meta namespace]
+* cpp26[meta cpp]
+
+
+```cpp
+namespace std::linalg {
+  template&amp;lt;in-matrix InMat1,
+           class Triangle,
+           in-matrix InMat2,
+           out-matrix OutMat&amp;gt;
+  void hermitian_matrix_product(
+    InMat1 A,
+    Triangle t,
+    InMat2 B,
+    OutMat C); // (1)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat1,
+           class Triangle,
+           in-matrix InMat2,
+           out-matrix OutMat&amp;gt;
+  void hermitian_matrix_product(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat1 A,
+    Triangle t,
+    InMat2 B,
+    OutMat C); // (2)
+
+  template&amp;lt;in-matrix InMat1,
+           in-matrix InMat2,
+           class Triangle,
+           out-matrix OutMat&amp;gt;
+  void hermitian_matrix_product(
+    InMat1 A,
+    InMat2 B,
+    Triangle t,
+    OutMat C); // (3)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat1,
+           in-matrix InMat2,
+           class Triangle,
+           out-matrix OutMat&amp;gt;
+  void hermitian_matrix_product(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat1 A,
+    InMat2 B,
+    Triangle t,
+    OutMat C); // (4)
+
+  template&amp;lt;in-matrix InMat1,
+           class Triangle,
+           in-matrix InMat2,
+           in-matrix InMat3,
+           out-matrix OutMat&amp;gt;
+  void hermitian_matrix_product(
+    InMat1 A,
+    Triangle t,
+    InMat2 B,
+    InMat3 E,
+    OutMat C); // (5)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat1,
+           class Triangle,
+           in-matrix InMat2,
+           in-matrix InMat3,
+           out-matrix OutMat&amp;gt;
+  void hermitian_matrix_product(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat1 A,
+    Triangle t,
+    InMat2 B,
+    InMat3 E,
+    OutMat C); // (6)
+
+  template&amp;lt;in-matrix InMat1,
+           in-matrix InMat2,
+           class Triangle,
+           in-matrix InMat3,
+           out-matrix OutMat&amp;gt;
+  void hermitian_matrix_product(
+    InMat1 A,
+    InMat2 B,
+    Triangle t,
+    InMat3 E,
+    OutMat C); // (7)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat1,
+           in-matrix InMat2,
+           class Triangle,
+           in-matrix InMat3,
+           out-matrix OutMat&amp;gt;
+  void hermitian_matrix_product(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat1 A,
+    InMat2 B,
+    Triangle t,
+    InMat3 E,
+    OutMat C); // (8)
+}
+```
+
+
+## 概要
+行列同士の積を計算する。
+
+- (1): エルミート行列`A`と行列`B`に対し、$C \leftarrow AB$
+- (2): (1)を指定された実行ポリシーで実行する。
+- (3): 行列`A`とエルミート行列`B`に対し、$C \leftarrow AB$
+- (4): (3)を指定された実行ポリシーで実行する。
+- (5): エルミート行列`A`と行列`B`に対し、$C \leftarrow E + AB$
+- (6): (5)を指定された実行ポリシーで実行する。
+- (7): 行列`A`とエルミート行列`B`に対し、$C \leftarrow E + AB$
+- (8): (7)を指定された実行ポリシーで実行する。
+
+
+## 適格要件
+- 共通
+  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(A), decltype(B), decltype(C)&amp;gt;()`が`true`
+- (1), (2), (5), (6): `InMat1`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+- (1), (2), (5), (6): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+- (3), (4), (7), (8): `InMat2`(`B`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+- (3), (4), (7), (8): [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(B), decltype(B)&amp;gt;(0, 1)`が`true` (つまり`B`が正方行列であること)
+- (5), (6), (7), (8): [`possibly-addable`](possibly-addable.md)`&amp;lt;decltype(E),decltype(E),decltype(C)&amp;gt;()`が`true`
+
+
+## 事前条件
+- 共通
+  + [`multipliable`](multipliable.md)`(A, B, C) == true`
+- (1), (2), (5), (6): [`A.extent(0) == A.extent(1)`]
+- (3), (4), (7), (8): [`B.extent(0) == B.extent(1)`]
+- (5), (6), (7), (8): [`addable`](addable.md)`(E, E, C) == true`
+
+
+## 効果
+- (1), (2): エルミート行列`A`と行列`B`に対し、$C \leftarrow AB$
+- (3), (4): 行列`A`とエルミート行列`B`に対し、$C \leftarrow AB$
+- (5), (6): エルミート行列`A`と行列`B`に対し、$C \leftarrow E + AB$
+- (7), (8): 行列`A`とエルミート行列`B`に対し、$C \leftarrow E + AB$
+
+
+## 戻り値
+なし
+
+
+## 計算量
+$O(\verb|A.extent(0)| \times \verb|A.extent(1)| \times \verb|B.extent(1)|)$
+
+
+## 備考
+- (5), (6), (7), (8): `C`に`E`を入れても良い。
+
+
+## 例
+**[注意] 処理系にあるコンパイラで確認していないため、間違っているかもしれません。**
+
+```cpp example
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;complex&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;linalg&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template &amp;lt;class Matrix&amp;gt;
+void print_mat(const Matrix&amp;amp; A) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    for(int j = 0; j &amp;lt; A.extent(1) - 1; ++j) {
+      std::cout &amp;lt;&amp;lt; A[i, j] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+    }
+    std::cout &amp;lt;&amp;lt; A[i, A.extent(1) - 1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+
+template &amp;lt;class Matrix&amp;gt;
+void init_mat(Matrix&amp;amp; A, typename Matrix::value_type geta = 0) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    for(int j = 0; j &amp;lt; A.extent(1); ++j) {
+      A[i, j] = std::complex&amp;lt;double&amp;gt;(i + geta, j + geta);
+    }
+  }
+}
+
+template &amp;lt;class Matrix&amp;gt;
+void init_herm_mat(Matrix&amp;amp; A) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    A[i, i] = std::complex&amp;lt;double&amp;gt;(i, 0);
+    for(int j = i + 1; j &amp;lt; A.extent(1); ++j) {
+      A[i, j] = std::complex&amp;lt;double&amp;gt;(i, j);
+    }
+  }
+}
+
+int main()
+{
+  constexpr size_t N = 2;
+
+  using Scalar = std::complex&amp;lt;double&amp;gt;;
+  using Vector = std::vector&amp;lt;Scalar&amp;gt;;
+  using HermitianMatrix = std::mdspan&amp;lt;
+      Scalar,
+      std::extents&amp;lt;size_t, N, N&amp;gt;,
+      std::linalg::layout_blas_packed&amp;lt;
+        std::linalg::upper_triangle_t,
+        std::linalg::row_major_t&amp;gt;
+    &amp;gt;;
+
+  Vector A_vec(N * N);
+  Vector B_vec(N * N);
+  Vector C_vec(N * N);
+  Vector E_vec(N * N);
+
+  std::mdspan C(C_vec.data(), N, N);
+  std::mdspan E(E_vec.data(), N, N);
+
+  init_mat(E, N * N);
+
+  {
+    HermitianMatrix A(A_vec.data());
+    std::mdspan B(B_vec.data(), N, N);
+
+    init_herm_mat(A);
+    init_mat(B);
+
+    // (1)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(1)\n&amp;#34;;
+    std::linalg::hermitian_matrix_product(A, std::linalg::upper_triangle, B, C);
+    print_mat(C);
+
+    // (2)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(2)\n&amp;#34;;
+    std::linalg::hermitian_matrix_product(std::execution::par, A, std::linalg::upper_triangle, B, C);
+    print_mat(C);
+  }
+
+  {
+    std::mdspan A(A_vec.data(), N, N);
+    HermitianMatrix B(B_vec.data());
+
+    init_mat(A);
+    init_herm_mat(B);
+
+    // (3)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(3)\n&amp;#34;;
+    std::linalg::hermitian_matrix_product(A, B, std::linalg::upper_triangle, C);
+    print_mat(C);
+
+    // (4)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(4)\n&amp;#34;;
+    std::linalg::hermitian_matrix_product(std::execution::par, A, B, std::linalg::upper_triangle, C);
+    print_mat(C);
+  }
+
+  {
+    HermitianMatrix A(A_vec.data());
+    std::mdspan B(B_vec.data(), N, N);
+
+    init_herm_mat(A);
+    init_mat(B);
+
+    // (5)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(5)\n&amp;#34;;
+    std::linalg::hermitian_matrix_product(A, std::linalg::upper_triangle, B, E, C);
+    print_mat(C);
+
+    // (6)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(6)\n&amp;#34;;
+    std::linalg::hermitian_matrix_product(std::execution::par, A, std::linalg::upper_triangle, B, E, C);
+    print_mat(C);
+  }
+
+  {
+    std::mdspan A(A_vec.data(), N, N);
+    HermitianMatrix B(B_vec.data());
+
+    init_mat(A);
+    init_herm_mat(B);
+
+    // (7)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(7)\n&amp;#34;;
+    std::linalg::hermitian_matrix_product(A, B, std::linalg::upper_triangle, E, C);
+    print_mat(C);
+
+    // (8)
+    std::cout &amp;lt;&amp;lt; &amp;#34;(8)\n&amp;#34;;
+    std::linalg::hermitian_matrix_product(std::execution::par, A, B, std::linalg::upper_triangle, E, C);
+    print_mat(C);
+  }
+
+  return 0;
+}
+```
+
+
+### 出力
+```
+(1)
+(0,1) (-1,1)
+(1,0) (2,1)
+(2)
+(0,1) (-1,1)
+(1,0) (2,1)
+(3)
+(0,-1) (1,0)
+(0,-3) (3,2)
+(4)
+(0,-1) (1,0)
+(0,-3) (3,2)
+(5)
+(4,5) (3,6)
+(6,4) (7,6)
+(6)
+(4,5) (3,6)
+(6,4) (7,6)
+(7)
+(4,3) (5,5)
+(5,1) (8,7)
+(8)
+(4,3) (5,5)
+(5,1) (8,7)
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution`](/reference/execution.md)
+- [`mdspan`](/reference/mdspan.md)
+- [`upper_triangle_t`](upper_triangle_t.md)
+- [`lower_triangle_t`](lower_triangle_t.md)
+
+
+## 参照
+- [P1673R13 A free function linear algebra interface based on the BLAS](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html)
+- [LAPACK: {he,sy}mm: Hermitian/hermitian matrix-matrix multiply](https://netlib.org/lapack/explore-html/d0/d16/group__hemm.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
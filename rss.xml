<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-04-20T06:09:02.105146</updated>
  <id>a3ef0fd8-f4f1-4efb-bd83-af4df8fa65b2</id>

  
    <entry>
      <title>base -- LWG Issue 3593対応</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/base.html"/>
      <id>43157e5d841bb81804a597d8e8cc278b674e4983:reference/iterator/counted_iterator/base.md</id>
      <updated>2022-04-20T15:03:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/base.md b/reference/iterator/counted_iterator/base.md
index 34b22657d..f29c64b22 100644
--- a/reference/iterator/counted_iterator/base.md
+++ b/reference/iterator/counted_iterator/base.md
@@ -6,7 +6,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-constexpr const I&amp;amp; base() const &amp;amp;;  // (1)
+constexpr const I&amp;amp; base() const &amp;amp; noexcept;  // (1)
 constexpr I base() &amp;amp;&amp;amp;;  // (2)
 ```
 * copy_constructible[link /reference/concepts/copy_constructible.md]
@@ -63,3 +63,4 @@ int main() {
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
 - [P1207R4 Movability of single-pass iterators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1207r4.pdf)
 - [LWG Issue 3391. Problems with `counted_iterator/move_iterator::base() const &amp;amp;`](https://cplusplus.github.io/LWG/issue3391)
+- [LWG Issue 3593. Several iterators&amp;#39; base() const &amp;amp; and lazy_split_view::outer-iterator::value_type::end() missing noexcept](https://cplusplus.github.io/LWG/issue3593)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- LWG Issue 3593対応</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/base.html"/>
      <id>43157e5d841bb81804a597d8e8cc278b674e4983:reference/iterator/move_iterator/base.md</id>
      <updated>2022-04-20T15:03:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/base.md b/reference/iterator/move_iterator/base.md
index 1bff9c1fe..d6fc8b4a4 100644
--- a/reference/iterator/move_iterator/base.md
+++ b/reference/iterator/move_iterator/base.md
@@ -6,11 +6,11 @@
 * cpp11[meta cpp]
 
 ```cpp
-Iterator base() const;                // (1) C++11
-constexpr Iterator base() const;      // (1) C++17
-constexpr Iterator&amp;amp; base() const &amp;amp;;   // (1) C++20
+Iterator base() const;                              // (1) C++11
+constexpr Iterator base() const;                    // (1) C++17
+constexpr const Iterator&amp;amp; base() const &amp;amp; noexcept;  // (1) C++20
 
-constexpr Iterator base() &amp;amp;&amp;amp;;         // (2)
+constexpr Iterator base() &amp;amp;&amp;amp;;   // (2)
 ```
 
 ## 概要
@@ -66,3 +66,4 @@ int main()
 - [P0031R0 A Proposal to Add Constexpr Modifiers to `reverse_iterator`, `move_iterator`, `array` and Range Access](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html)
 - [P1207R4 Movability of Single-pass Iterators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1207r4.pdf)
 - [LWG Issue 3391. Problems with `counted_iterator/move_iterator::base() const &amp;amp;`](https://cplusplus.github.io/LWG/issue3391)
+- [LWG Issue 3593. Several iterators&amp;#39; base() const &amp;amp; and lazy_split_view::outer-iterator::value_type::end() missing noexcept](https://cplusplus.github.io/LWG/issue3593)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- LWG Issue 3391対応</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/base.html"/>
      <id>0a3118a3db584e0630d5faa26dda25f10045afdc:reference/iterator/counted_iterator/base.md</id>
      <updated>2022-04-20T15:00:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/base.md b/reference/iterator/counted_iterator/base.md
index d529845a1..34b22657d 100644
--- a/reference/iterator/counted_iterator/base.md
+++ b/reference/iterator/counted_iterator/base.md
@@ -6,7 +6,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-constexpr I base() const &amp;amp; requires copy_constructible&amp;lt;I&amp;gt;;  // (1)
+constexpr const I&amp;amp; base() const &amp;amp;;  // (1)
 constexpr I base() &amp;amp;&amp;amp;;  // (2)
 ```
 * copy_constructible[link /reference/concepts/copy_constructible.md]
@@ -17,7 +17,7 @@ constexpr I base() &amp;amp;&amp;amp;;  // (2)
 
 ## 戻り値
 
-- (1) : 元のイテレータをコピーして返す。
+- (1) : 元のイテレータへの`const`参照を返す。
 - (2) : 元のイテレータをムーブして返す。
 
 ## 例
@@ -61,4 +61,5 @@ int main() {
 
 ## 参照
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
-- [P1207R4 Movability of single-pass iterators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1207r4.pdf)
\ No newline at end of file
+- [P1207R4 Movability of single-pass iterators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1207r4.pdf)
+- [LWG Issue 3391. Problems with `counted_iterator/move_iterator::base() const &amp;amp;`](https://cplusplus.github.io/LWG/issue3391)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- LWG Issue 3391対応</title>
      <link href="https://cpprefjp.github.io/reference/iterator/move_iterator/base.html"/>
      <id>0a3118a3db584e0630d5faa26dda25f10045afdc:reference/iterator/move_iterator/base.md</id>
      <updated>2022-04-20T15:00:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/move_iterator/base.md b/reference/iterator/move_iterator/base.md
index f50d81e0c..1bff9c1fe 100644
--- a/reference/iterator/move_iterator/base.md
+++ b/reference/iterator/move_iterator/base.md
@@ -6,8 +6,11 @@
 * cpp11[meta cpp]
 
 ```cpp
-Iterator base() const;           // C++11
-constexpr Iterator base() const; // C++17
+Iterator base() const;                // (1) C++11
+constexpr Iterator base() const;      // (1) C++17
+constexpr Iterator&amp;amp; base() const &amp;amp;;   // (1) C++20
+
+constexpr Iterator base() &amp;amp;&amp;amp;;         // (2)
 ```
 
 ## 概要
@@ -15,8 +18,11 @@ constexpr Iterator base() const; // C++17
 
 
 ## 戻り値
-元のイテレータオブジェクトのコピー
 
+- (1)
+    - C++17まで : 元のイテレータをコピーして返す。
+    - C++20 : 元のイテレータへの`const`参照を返す。
+- (2) : 元のイテレータをムーブして返す。
 
 ## 例
 ```cpp example
@@ -59,3 +65,4 @@ int main()
 ## 参照
 - [P0031R0 A Proposal to Add Constexpr Modifiers to `reverse_iterator`, `move_iterator`, `array` and Range Access](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html)
 - [P1207R4 Movability of Single-pass Iterators](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1207r4.pdf)
+- [LWG Issue 3391. Problems with `counted_iterator/move_iterator::base() const &amp;amp;`](https://cplusplus.github.io/LWG/issue3391)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #963 from acd1034/fix-typo-string-view-ctor</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_constructor.html"/>
      <id>fb2836348954a533fb909430acdaeaef8210a9dd:reference/string_view/basic_string_view/op_constructor.md</id>
      <updated>2022-04-16T19:05:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_constructor.md b/reference/string_view/basic_string_view/op_constructor.md
index 300dc8038..37c4358cb 100644
--- a/reference/string_view/basic_string_view/op_constructor.md
+++ b/reference/string_view/basic_string_view/op_constructor.md
@@ -42,7 +42,7 @@ constexpr basic_string_view(R&amp;amp;&amp;amp; r);                            // (7) C++23
     - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`ranges::range_value_t`](/reference/ranges/range_value_t.md)`&amp;lt;R&amp;gt;, charT&amp;gt;`が`true`であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;R, const charT*&amp;gt;`が`false`であること
     - `d`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;R&amp;gt;`型の左辺値としたとき、`d.operator ::std::basic_string_view&amp;lt;charT, traits&amp;gt;()`が妥当な式ではないこと
-    - もし`R::traits_type`が妥当な型の場合、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;R&amp;gt;::type_traits, traits&amp;gt;`が`true`であること
+    - もし`R::traits_type`が妥当な型の場合、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;R&amp;gt;::traits_type, traits&amp;gt;`が`true`であること
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Fix typo in basic_string_view/op_constructor</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/op_constructor.html"/>
      <id>b3ed96809ba9b73f4de1cd95f350817e9fa13571:reference/string_view/basic_string_view/op_constructor.md</id>
      <updated>2022-04-16T14:09:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/op_constructor.md b/reference/string_view/basic_string_view/op_constructor.md
index 300dc8038..37c4358cb 100644
--- a/reference/string_view/basic_string_view/op_constructor.md
+++ b/reference/string_view/basic_string_view/op_constructor.md
@@ -42,7 +42,7 @@ constexpr basic_string_view(R&amp;amp;&amp;amp; r);                            // (7) C++23
     - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`ranges::range_value_t`](/reference/ranges/range_value_t.md)`&amp;lt;R&amp;gt;, charT&amp;gt;`が`true`であること
     - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;R, const charT*&amp;gt;`が`false`であること
     - `d`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;R&amp;gt;`型の左辺値としたとき、`d.operator ::std::basic_string_view&amp;lt;charT, traits&amp;gt;()`が妥当な式ではないこと
-    - もし`R::traits_type`が妥当な型の場合、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;R&amp;gt;::type_traits, traits&amp;gt;`が`true`であること
+    - もし`R::traits_type`が妥当な型の場合、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;R&amp;gt;::traits_type, traits&amp;gt;`が`true`であること
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>acd1034</name>
        <email>48613285+acd1034@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>view_interface -- view_interface : LWG Issue 3549対応</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface.html"/>
      <id>c979c55860c923d0090b0e1c0b3299c2e99e299c:reference/ranges/view_interface.md</id>
      <updated>2022-04-15T12:51:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface.md b/reference/ranges/view_interface.md
index 04d5516fd..1e1765f58 100644
--- a/reference/ranges/view_interface.md
+++ b/reference/ranges/view_interface.md
@@ -8,10 +8,9 @@
 namespace std::ranges {
   template&amp;lt;class D&amp;gt;
     requires is_class_v&amp;lt;D&amp;gt; &amp;amp;&amp;amp; same_as&amp;lt;D, remove_cv_t&amp;lt;D&amp;gt;&amp;gt;
-  class view_interface : public view_base { …… };
+  class view_interface { …… };
 }
 ```
-* view_base[link view_base.md]
 * is_class_v[link /reference/type_traits/is_class.md]
 * same_as[link /reference/concepts/same_as.md]
 * remove_cv_t[link /reference/type_traits/remove_cv.md]
@@ -59,3 +58,4 @@ namespace std::ranges {
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [LWG Issue 3549. `view_interface` is overspecified to derive from `view_base`](https://cplusplus.github.io/LWG/issue3549)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-07-12T01:58:40.672190</updated>
  <id>81fbfaad-80c8-4e32-8801-f00e24ff0028</id>

  
    <entry>
      <title>matrix_product -- linalg : 不要なリンクを削除 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_product.html"/>
      <id>a65c8e5a3ff9f1334fee5ba5f7447dd96c262422:reference/linalg/matrix_product.md</id>
      <updated>2024-07-12T10:54:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_product.md b/reference/linalg/matrix_product.md
index 0c6437d2c..f48f31a84 100644
--- a/reference/linalg/matrix_product.md
+++ b/reference/linalg/matrix_product.md
@@ -164,7 +164,6 @@ int main()
 ```
 * .extent[link /reference/mdspan/extents/extent.md]
 * std::mdspan[link /reference/mdspan/mdspan.md]
-* std::extents[link /reference/mdspan/extents.md]
 * std::execution::par[link /reference/execution/execution/execution_policy.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hermitian_matrix_product -- linalg : BLAS3のコード例にリンクを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/hermitian_matrix_product.html"/>
      <id>54b9c75adb0f7442d17ff489649e8a8eb980b740:reference/linalg/hermitian_matrix_product.md</id>
      <updated>2024-07-12T10:51:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/hermitian_matrix_product.md b/reference/linalg/hermitian_matrix_product.md
index dc3c1696a..06298e4c7 100644
--- a/reference/linalg/hermitian_matrix_product.md
+++ b/reference/linalg/hermitian_matrix_product.md
@@ -302,6 +302,14 @@ int main()
   return 0;
 }
 ```
+* .extent[link /reference/mdspan/extents/extent.md]
+* std::mdspan[link /reference/mdspan/mdspan.md]
+* std::extents[link /reference/mdspan/extents.md]
+* std::linalg::layout_blas_packed[link /reference/linalg/layout_blas_packed.md]
+* std::linalg::upper_triangle_t[link /reference/linalg/upper_triangle_t.md]
+* std::linalg::row_major_t[link /reference/linalg/row_major_t.md]
+* std::linalg::upper_triangle[link /reference/linalg/upper_triangle_t.md]
+* std::execution::par[link /reference/execution/execution/execution_policy.md]
 
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_product -- linalg : BLAS3のコード例にリンクを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_product.html"/>
      <id>54b9c75adb0f7442d17ff489649e8a8eb980b740:reference/linalg/matrix_product.md</id>
      <updated>2024-07-12T10:51:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_product.md b/reference/linalg/matrix_product.md
index a42c9c656..0c6437d2c 100644
--- a/reference/linalg/matrix_product.md
+++ b/reference/linalg/matrix_product.md
@@ -162,6 +162,10 @@ int main()
   return 0;
 }
 ```
+* .extent[link /reference/mdspan/extents/extent.md]
+* std::mdspan[link /reference/mdspan/mdspan.md]
+* std::extents[link /reference/mdspan/extents.md]
+* std::execution::par[link /reference/execution/execution/execution_policy.md]
 
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>symmetric_matrix_product -- linalg : BLAS3のコード例にリンクを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/symmetric_matrix_product.html"/>
      <id>54b9c75adb0f7442d17ff489649e8a8eb980b740:reference/linalg/symmetric_matrix_product.md</id>
      <updated>2024-07-12T10:51:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/symmetric_matrix_product.md b/reference/linalg/symmetric_matrix_product.md
index 52897a0b5..563d71093 100644
--- a/reference/linalg/symmetric_matrix_product.md
+++ b/reference/linalg/symmetric_matrix_product.md
@@ -300,6 +300,14 @@ int main()
   return 0;
 }
 ```
+* .extent[link /reference/mdspan/extents/extent.md]
+* std::mdspan[link /reference/mdspan/mdspan.md]
+* std::extents[link /reference/mdspan/extents.md]
+* std::linalg::layout_blas_packed[link /reference/linalg/layout_blas_packed.md]
+* std::linalg::upper_triangle_t[link /reference/linalg/upper_triangle_t.md]
+* std::linalg::row_major_t[link /reference/linalg/row_major_t.md]
+* std::linalg::upper_triangle[link /reference/linalg/upper_triangle_t.md]
+* std::execution::par[link /reference/execution/execution/execution_policy.md]
 
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_left_product -- linalg : BLAS3のコード例にリンクを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_left_product.html"/>
      <id>54b9c75adb0f7442d17ff489649e8a8eb980b740:reference/linalg/triangular_matrix_left_product.md</id>
      <updated>2024-07-12T10:51:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_left_product.md b/reference/linalg/triangular_matrix_left_product.md
index 7b4c1980d..37c3bba97 100644
--- a/reference/linalg/triangular_matrix_left_product.md
+++ b/reference/linalg/triangular_matrix_left_product.md
@@ -153,6 +153,15 @@ int main()
   return 0;
 }
 ```
+* .extent[link /reference/mdspan/extents/extent.md]
+* std::mdspan[link /reference/mdspan/mdspan.md]
+* std::extents[link /reference/mdspan/extents.md]
+* std::linalg::layout_blas_packed[link /reference/linalg/layout_blas_packed.md]
+* std::linalg::upper_triangle_t[link /reference/linalg/upper_triangle_t.md]
+* std::linalg::row_major_t[link /reference/linalg/row_major_t.md]
+* std::linalg::upper_triangle[link /reference/linalg/upper_triangle_t.md]
+* std::linalg::implicit_unit_diagonal[link /reference/linalg/implicit_unit_diagonal_t.md]
+* std::execution::par[link /reference/execution/execution/execution_policy.md]
 
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_product -- linalg : BLAS3のコード例にリンクを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_product.html"/>
      <id>54b9c75adb0f7442d17ff489649e8a8eb980b740:reference/linalg/triangular_matrix_product.md</id>
      <updated>2024-07-12T10:51:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_product.md b/reference/linalg/triangular_matrix_product.md
index 8956496ec..5658be1be 100644
--- a/reference/linalg/triangular_matrix_product.md
+++ b/reference/linalg/triangular_matrix_product.md
@@ -365,6 +365,15 @@ int main()
   return 0;
 }
 ```
+* .extent[link /reference/mdspan/extents/extent.md]
+* std::mdspan[link /reference/mdspan/mdspan.md]
+* std::extents[link /reference/mdspan/extents.md]
+* std::linalg::layout_blas_packed[link /reference/linalg/layout_blas_packed.md]
+* std::linalg::upper_triangle_t[link /reference/linalg/upper_triangle_t.md]
+* std::linalg::row_major_t[link /reference/linalg/row_major_t.md]
+* std::linalg::upper_triangle[link /reference/linalg/upper_triangle_t.md]
+* std::linalg::implicit_unit_diagonal[link /reference/linalg/implicit_unit_diagonal_t.md]
+* std::execution::par[link /reference/execution/execution/execution_policy.md]
 
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_right_product -- linalg : BLAS3のコード例にリンクを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_right_product.html"/>
      <id>54b9c75adb0f7442d17ff489649e8a8eb980b740:reference/linalg/triangular_matrix_right_product.md</id>
      <updated>2024-07-12T10:51:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_right_product.md b/reference/linalg/triangular_matrix_right_product.md
index 2e0925d43..734043ce3 100644
--- a/reference/linalg/triangular_matrix_right_product.md
+++ b/reference/linalg/triangular_matrix_right_product.md
@@ -153,6 +153,15 @@ int main()
   return 0;
 }
 ```
+* .extent[link /reference/mdspan/extents/extent.md]
+* std::mdspan[link /reference/mdspan/mdspan.md]
+* std::extents[link /reference/mdspan/extents.md]
+* std::linalg::layout_blas_packed[link /reference/linalg/layout_blas_packed.md]
+* std::linalg::upper_triangle_t[link /reference/linalg/upper_triangle_t.md]
+* std::linalg::row_major_t[link /reference/linalg/row_major_t.md]
+* std::linalg::upper_triangle[link /reference/linalg/upper_triangle_t.md]
+* std::linalg::implicit_unit_diagonal[link /reference/linalg/implicit_unit_diagonal_t.md]
+* std::execution::par[link /reference/execution/execution/execution_policy.md]
 
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_left_product -- linalg : 出力を修正 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_left_product.html"/>
      <id>eac2703ed2e2f22bfc30756ecbcc34396716e202:reference/linalg/triangular_matrix_left_product.md</id>
      <updated>2024-07-12T10:09:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_left_product.md b/reference/linalg/triangular_matrix_left_product.md
index 497f6a28e..7b4c1980d 100644
--- a/reference/linalg/triangular_matrix_left_product.md
+++ b/reference/linalg/triangular_matrix_left_product.md
@@ -158,11 +158,11 @@ int main()
 ### 出力
 ```
 (1)
-1 3
-3 7
+4 6
+3 4
 (2)
-1 3
-3 7
+4 6
+3 4
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>linalg -- linalg : triangular_matrix_right_productを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg.html"/>
      <id>0909134b7d506ed4734efccde10f97c93320f410:reference/linalg.md</id>
      <updated>2024-07-12T10:08:28+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;linalg&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダでは、線形代数(linear algebra)に関する基礎的な演算アルゴリズムを提供する。
ベクトルや行列の成分にアクセスするアルゴリズムは、多次元配列ビュー&lt;a href=&#34;mdspan/mdspan.html&#34;&gt; &lt;code&gt;std::mdspan&lt;/code&gt; &lt;/a&gt;を通してその要素にアクセスする。
本ヘッダが提供するエンティティは、すべて名前空間&lt;code&gt;std::linalg&lt;/code&gt;に属する。&lt;/p&gt;
&lt;p&gt;1次元データであるベクトル(vector)や2次元データである行列(matrix)に対して、線形代数分野のデファクトスタンダードとされる BLAS(Basic Linear Algebra Subprograms) 互換のアルゴリズム群、いくつかの LAPACK(Linear Algebra PACKage) 互換のアルゴリズムが提供される。
BLAS互換アルゴリズムは、演算対象データの次元数や計算オーダーに応じて3段階に区分される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Level 1 BLAS : ベクトルーベクトルの演算&lt;/li&gt;
&lt;li&gt;Level 2 BLAS : 行列ーベクトルの演算&lt;/li&gt;
&lt;li&gt;Level 3 BLAS : 行列ー行列の演算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例えば、2個の一般行列の積を求める&lt;code&gt;std::linalg::matrix_product&lt;/code&gt;はLevel 3 BLASルーチン&lt;code&gt;xGEMM&lt;/code&gt;に対応する。
（実際のBLASルーチン名は、浮動小数点数型の単精度&lt;code&gt;S&lt;/code&gt;／倍精度&lt;code&gt;D&lt;/code&gt;とそれぞれの複素数版&lt;code&gt;C&lt;/code&gt;,&lt;code&gt;Z&lt;/code&gt;として、プレフィックス&lt;code&gt;x&lt;/code&gt;部は文字4種類のいずれか。）&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;std::mdspan&lt;/code&gt;と組み合わせて利用する拡張機能が提供される。&lt;/p&gt;
&lt;h2&gt;共通要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダが提供する演算アルゴリズムは、スカラ値およびベクトル／行列の要素型として線形代数値型(linear algebra value types)を取り扱う。&lt;/p&gt;
&lt;p&gt;線形代数値型はBLASが取り扱う&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&amp;lt;float&amp;gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt;をはじめ、&lt;code&gt;&lt;a href=&#34;concepts/semiregular.html&#34;&gt;semiregular&lt;/a&gt;&lt;/code&gt;のモデルであれば良い。
また、線形代数値型の値初期化は加法元（算術型であれば値&lt;code&gt;0&lt;/code&gt;）であること。&lt;/p&gt;
&lt;p&gt;プログラム定義型を利用する場合、演算アルゴリズムはカスタマイゼーションポイントとして&lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;real&lt;/code&gt;, &lt;code&gt;imag&lt;/code&gt;, &lt;code&gt;conj&lt;/code&gt;を非修飾名で呼び出す。&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;std::mdspan&lt;/code&gt;向け機能拡張&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/layout_blas_packed.html&#34;&gt;layout_blas_packed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列要素のBLAS互換パックレイアウトに対応する&lt;a href=&#34;mdspan/LayoutMappingPolicy.html&#34;&gt;レイアウトマッピングポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scaled_accessor.html&#34;&gt;scaled_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;scaled&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/AccessorPolicy.html&#34;&gt;アクセサポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scaled.html&#34;&gt;scaled&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;要素値をスカラー倍した読み取り専用&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugated_accessor.html&#34;&gt;conjugated_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;conjugated&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/AccessorPolicy.html&#34;&gt;アクセサポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugated.html&#34;&gt;conjugated&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の複素共役ビュー&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/layout_transpose.html&#34;&gt;layout_transpose&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;transposed&lt;/code&gt;関数用の&lt;a href=&#34;mdspan/LayoutMappingPolicy.html&#34;&gt;レイアウトマッピングポリシー&lt;/a&gt; (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/transposed.html&#34;&gt;transposed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2次元&lt;code&gt;std::mdspan&lt;/code&gt;の行列転置ビューを作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/conjugate_transposed.html&#34;&gt;conjugate_transposed&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;読み取り専用の複素共役転置ビュー&lt;code&gt;std::mdspan&lt;/code&gt;を作る (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLASの要件&lt;/h2&gt;
&lt;p&gt;BLAS 1, 2, 3のアルゴリズムでテンプレートパラメータが特に制約されていない場合、テンプレートパラメータの名前によって以下の制約を満たすとする。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;制約&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ExecutionPolicy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;is_execution_policy&amp;lt;ExecutionPolicy&amp;gt;::value == true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;complex&amp;lt;Real&amp;gt;&lt;/code&gt;が規定できる型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Triangle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;upper_triangle_t&lt;/code&gt;または&lt;code&gt;lower_triangle_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DiagonalStorage&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;implicit_unit_diagonal_t&lt;/code&gt;または&lt;code&gt;explicit_diagonal_t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 1アルゴリズム&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;std::mpspan&lt;/code&gt;をパラメータに持つ、この節の全てのアルゴリズムの計算量は渡された&lt;code&gt;std::mdspan&lt;/code&gt;の&lt;code&gt;extents&lt;/code&gt;の積の最大値、つまりベクトルや行列の要素数の最大値に線形である。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/setup_givens_rotation_result.html&#34;&gt;setup_givens_rotation_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;setup_givens_rotation&lt;/code&gt;の結果型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/setup_givens_rotation.html&#34;&gt;setup_givens_rotation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xLARTG: ギブンス回転をセットアップする (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/apply_givens_rotation.html&#34;&gt;apply_givens_rotation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xROT: ベクトルにギブンス回転を適用する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/swap_elements.html&#34;&gt;swap_elements&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSWAP: 2つのベクトル／行列の要素を交換する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/scale.html&#34;&gt;scale&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSCAL: ベクトル／行列の要素にスカラ値を乗算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/copy.html&#34;&gt;copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xCOPY: ベクトル／行列の要素をコピーする (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/add.html&#34;&gt;add&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xAXPY: 2つのベクトル／行列の要素を加算する (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/dot.html&#34;&gt;dot&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xDOT, xDOTU: 2つのベクトルのドット積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/dotc.html&#34;&gt;dotc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xDOTC: 2つのベクトルの複素共役ドット積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/sum_of_squares_result.html&#34;&gt;sum_of_squares_result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vector_sum_of_squares&lt;/code&gt;の結果型 (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_sum_of_squares.html&#34;&gt;vector_sum_of_squares&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xLASSQ: ベクトル要素の平方和を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_two_norm.html&#34;&gt;vector_two_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xNRM2: ベクトルのユークリッドノルム(Euclidean norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_abs_sum.html&#34;&gt;vector_abs_sum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xASUM: ベクトル要素の絶対値和を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/vector_idx_abs_max.html&#34;&gt;vector_idx_abs_max&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xIAMAX: ベクトル要素のうち最大絶対値インデクスを返す (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_frob_norm.html&#34;&gt;matrix_frob_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列のフロベニウスノルム(Frobenius norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_one_norm.html&#34;&gt;matrix_one_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列の1ノルム(One norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_inf_norm.html&#34;&gt;matrix_inf_norm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行列の無限大ノルム(Infinity norm)を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 2アルゴリズム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_vector_product.html&#34;&gt;matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGEMV: 一般行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_vector_product.html&#34;&gt;symmetric_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYMV: 対称行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_vector_product.html&#34;&gt;hermitian_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHEMV: ハミルトニアン行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_vector_product.html&#34;&gt;triangular_matrix_vector_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMV: 三角行列とベクトルの積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_vector_solve.html&#34;&gt;triangular_matrix_vector_solve&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSV: 三角行列を係数とする行列方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_rank_1_update.html&#34;&gt;matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGER, xGERU: 行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_rank_1_update_c.html&#34;&gt;matrix_rank_1_update_c&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGERC: 複素行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_1_update.html&#34;&gt;symmetric_matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR: 対称行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_1_update.html&#34;&gt;hermitian_matrix_rank_1_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER: ハミルトニアン行列のRank-1更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_rank_2_update.html&#34;&gt;symmetric_matrix_rank_2_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR2: 対称行列のRank-2更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_rank_2_update.html&#34;&gt;hermitian_matrix_rank_2_update&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER2: ハミルトニアン行列のRank-2更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;BLAS 3アルゴリズム&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/matrix_product.html&#34;&gt;matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xGEMM: 2つの一般行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/symmetric_matrix_product.html&#34;&gt;symmetric_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYMM: 対称行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/hermitian_matrix_product.html&#34;&gt;hermitian_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHEMM: ハミルトニアン行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_product.html&#34;&gt;triangular_matrix_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: 三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_left_product.html&#34;&gt;triangular_matrix_left_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: In-placeに三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/triangular_matrix_right_product.html&#34;&gt;triangular_matrix_right_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRMM: In-placeに三角行列と行列の積を求める (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symmetric_matrix_rank_k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYRK: 対称行列のRank-k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hermitian_matrix_rank_k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHERK: ハミルトニアン行列のRank-k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symmetric_matrix_rank_2k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xSYR2K: 対称行列のRank-2k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hermitian_matrix_rank_2k_update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xHER2K: ハミルトニアン行列のRank-2k更新 (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;triangular_matrix_matrix_left_solve&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSM: 三角行列の連立一次方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;triangular_matrix_matrix_right_solve&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;xTRSM: 三角行列の連立一次方程式を解く (function template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;タグ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;linalg&amp;gt;&lt;/code&gt;ヘッダでは、行列の格納順序や三角行列の上下をタグを使って表現している。&lt;/p&gt;
&lt;h3&gt;格納順序&lt;/h3&gt;
&lt;p&gt;行列の格納順序を表すタグ。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/column_major_t.html&#34;&gt;column_major_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(column-major)を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/column_major_t.html&#34;&gt;column_major&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(column-major)を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/row_major_t.html&#34;&gt;row_major_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(row-major)を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/row_major_t.html&#34;&gt;row_major&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(row-major)を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;三角行列&lt;/h3&gt;
&lt;p&gt;上三角行列か下三角行列かを表すタグ。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/upper_triangle_t.html&#34;&gt;upper_triangle_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上三角行列を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/upper_triangle_t.html&#34;&gt;upper_triangle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上三角行列を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/lower_triangle_t.html&#34;&gt;lower_triangle_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下三角行列を表すタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/lower_triangle_t.html&#34;&gt;lower_triangle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下三角行列を表すタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;対角成分&lt;/h3&gt;
&lt;p&gt;行列の全ての対角成分を暗黙に乗法における単位元とみなすかどうかを表すタグ。みなした場合、行列の対角成分にはアクセスせず、値が乗法における単位元であるとして計算する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/implicit_unit_diagonal_t.html&#34;&gt;implicit_unit_diagonal_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分を暗黙に乗法における単位元とみなすタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/implicit_unit_diagonal_t.html&#34;&gt;implicit_unit_diagonal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分を暗黙に乗法における単位元とみなすタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/explicit_diagonal_t.html&#34;&gt;explicit_diagonal_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分にアクセスするタグ型&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;linalg/explicit_diagonal_t.html&#34;&gt;explicit_diagonal&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての対角成分にアクセスするタグ値&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html&#34; target=&#34;_blank&#34;&gt;P1673R13 A free function linear algebra interface based on the BLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1674r2.html&#34; target=&#34;_blank&#34;&gt;P1674R2: Evolving a Standard C++ Linear Algebra Library from the BLAS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CppCon/CppCon2023/blob/main/Presentations/stdlinalg_linear_algebra_coming_to_standard_cpp.pdf&#34; target=&#34;_blank&#34;&gt;std::linalg: Linear Algebra Coming to Standard C++&lt;/a&gt;, CppCon 2023&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlib.org/blas/&#34; target=&#34;_blank&#34;&gt;BLAS (Basic Linear Algebra Subprograms)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eel.is/c++draft/complex.numbers&#34; target=&#34;_blank&#34;&gt;Numerics library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>triangular_matrix_right_product -- linalg : triangular_matrix_right_productを追加 (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/triangular_matrix_right_product.html"/>
      <id>0909134b7d506ed4734efccde10f97c93320f410:reference/linalg/triangular_matrix_right_product.md</id>
      <updated>2024-07-12T10:08:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/triangular_matrix_right_product.md b/reference/linalg/triangular_matrix_right_product.md
new file mode 100644
index 000000000..2e0925d43
--- /dev/null
+++ b/reference/linalg/triangular_matrix_right_product.md
@@ -0,0 +1,191 @@
+# triangular_matrix_right_product
+
+
+* [mathjax enable]
+* linalg[meta header]
+* function template[meta id-type]
+* std::linalg[meta namespace]
+* cpp26[meta cpp]
+
+
+```cpp
+namespace std::linalg {
+  template&amp;lt;in-matrix InMat,
+           class Triangle,
+           class DiagonalStorage,
+           inout-matrix InOutMat&amp;gt;
+  void triangular_matrix_right_product(
+    InMat A,
+    Triangle t,
+    DiagonalStorage d,
+    InOutMat C); // (1)
+
+  template&amp;lt;class ExecutionPolicy,
+           in-matrix InMat,
+           class Triangle,
+           class DiagonalStorage,
+           inout-matrix InOutMat&amp;gt;
+  void triangular_matrix_right_product(
+    ExecutionPolicy&amp;amp;&amp;amp; exec,
+    InMat A,
+    Triangle t,
+    DiagonalStorage d,
+    InOutMat C); // (2)
+}
+```
+
+
+## 概要
+三角行列の上下と対角成分のアクセス方法を考慮した、三角行列と行列の積をin-placeに計算する。
+
+- (1): 三角行列`A`と行列`C`に対し、$C \leftarrow CA$
+- (2): (1)を指定された実行ポリシーで実行する。
+
+
+## 適格要件
+- 共通
+  + `DiagonalStorage`が[`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)または[`explicit_diagonal_t`](explicit_diagonal_t.md)
+  + `Triangle`は[`upper_triangle_t`](upper_triangle_t.md)または[`lower_triangle_t`](lower_triangle_t.md)
+  + [`possibly-multipliable`](possibly-multipliable.md)`&amp;lt;decltype(C), decltype(A), decltype(C)&amp;gt;()`が`true`
+  + `InMat`(`A`の型)が[`layout_blas_packed`](layout_blas_packed.md)を持つなら、レイアウトの`Triangle`テンプレート引数とこの関数の`Triangle`テンプレート引数が同じ型
+  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;decltype(A), decltype(A)&amp;gt;(0, 1)`が`true` (つまり`A`が正方行列であること)
+- (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
+
+
+## 事前条件
+- [`multipliable`](multipliable.md)`(C, A, C)`が`true`
+- `A.extent(0) == A.extent(1)`
+
+
+## 効果
+- 三角行列`A`と行列`C`に対し、$C \leftarrow CA$
+
+
+## 戻り値
+なし
+
+
+## 計算量
+$O(\verb|A.extent(0)| \times \verb|A.extent(1)| \times \verb|C.extent(0)|)$
+
+
+## 例
+**[注意] 処理系にあるコンパイラで確認していないため、間違っているかもしれません。**
+
+```cpp example
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;linalg&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+template &amp;lt;class Matrix&amp;gt;
+void print_mat(const Matrix&amp;amp; A) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    for(int j = 0; j &amp;lt; A.extent(1) - 1; ++j) {
+      std::cout &amp;lt;&amp;lt; A[i, j] &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+    }
+    std::cout &amp;lt;&amp;lt; A[i, A.extent(1) - 1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+
+template &amp;lt;class Matrix&amp;gt;
+void init_mat(Matrix&amp;amp; A, typename Matrix::value_type geta = 1) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    for(int j = 0; j &amp;lt; A.extent(1); ++j) {
+      A[i, j] = i * A.extent(1) + j + geta;
+    }
+  }
+}
+
+template &amp;lt;class Matrix&amp;gt;
+void init_tria_mat(Matrix&amp;amp; A) {
+  for(int i = 0; i &amp;lt; A.extent(0); ++i) {
+    for(int j = i + 1; j &amp;lt; A.extent(1); ++j) {
+      A[i, j] = i * A.extent(1) + j;
+    }
+  }
+}
+
+int main()
+{
+  constexpr size_t N = 2;
+
+  using Scalar = double;
+  using Vector = std::vector&amp;lt;Scalar&amp;gt;;
+  using TriangularMatrix = std::mdspan&amp;lt;
+      Scalar,
+      std::extents&amp;lt;size_t, N, N&amp;gt;,
+      std::linalg::layout_blas_packed&amp;lt;
+        std::linalg::upper_triangle_t,
+        std::linalg::row_major_t&amp;gt;
+    &amp;gt;;
+
+  Vector A_vec(N * N);
+  Vector C_vec(N * N);
+
+  TriangularMatrix A(A_vec.data());
+  std::mdspan C(C_vec.data(), N, N);
+
+  init_tria_mat(A);
+  init_mat(C);
+
+  // (1)
+  std::cout &amp;lt;&amp;lt; &amp;#34;(1)\n&amp;#34;;
+  std::linalg::triangular_matrix_left_product(
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    C);
+  print_mat(C);
+
+  // (2)
+  init_mat(C);
+  std::cout &amp;lt;&amp;lt; &amp;#34;(2)\n&amp;#34;;
+  std::linalg::triangular_matrix_left_product(
+    std::execution::par,
+    A,
+    std::linalg::upper_triangle,
+    std::linalg::implicit_unit_diagonal,
+    C);
+  print_mat(C);
+
+  return 0;
+}
+```
+
+
+### 出力
+```
+(1)
+1 3
+3 7
+(2)
+1 3
+3 7
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution`](/reference/execution.md)
+- [`mdspan`](/reference/mdspan.md)
+- [`upper_triangle_t`](upper_triangle_t.md)
+- [`lower_triangle_t`](lower_triangle_t.md)
+- [`implicit_unit_diagonal_t`](implicit_unit_diagonal_t.md)
+- [`explicit_diagonal_t`](explicit_diagonal_t.md)
+
+
+## 参照
+- [P1673R13 A free function linear algebra interface based on the BLAS](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1673r13.html)
+- [LAPACK: trmm: triangular matrix-matrix multiply](https://netlib.org/lapack/explore-html/dd/dab/group__trmm.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Yuya Asano</name>
        <email>64895419+sukeya@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>apply_givens_rotation -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/apply_givens_rotation.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/apply_givens_rotation.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/apply_givens_rotation.md b/reference/linalg/apply_givens_rotation.md
index 11ff401f7..1e8d4ed20 100644
--- a/reference/linalg/apply_givens_rotation.md
+++ b/reference/linalg/apply_givens_rotation.md
@@ -50,6 +50,7 @@ namespace std::linalg {
     complex&amp;lt;Real&amp;gt; s); // (4)
 }
 ```
+* complex[link /reference/complex/complex.md]
 
 
 ## 概要
@@ -73,8 +74,8 @@ $$
 
 ## 適格要件
 - 共通:
-  + `Real`が`complex&amp;lt;Real&amp;gt;`を規定できる型であること
-  + [`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InOutVec1, InOutVec2&amp;gt;(0,0) == true`
+    + `Real`が[`complex`](/reference/complex/complex.md)`&amp;lt;Real&amp;gt;`を規定できる型であること
+    + [`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InOutVec1, InOutVec2&amp;gt;(0,0) == true`
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/copy.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/copy.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/copy.md b/reference/linalg/copy.md
index 586373809..668b6ff2c 100644
--- a/reference/linalg/copy.md
+++ b/reference/linalg/copy.md
@@ -30,15 +30,17 @@ namespace std::linalg {
 
 ## テンプレートパラメータ制約
 `x`と`y`の次元が等しくなければならない。
+
 - `x.rank() == y.rank()`
 
 
 ## 適格要件
-- (1), (2): 0以上`x.rank()`未満の整数rに対して、[`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InVec, OutVec&amp;gt;(r,r)`が`true`
+- (1), (2): 0以上[`x.rank()`](/reference/mdspan/mdspan/rank.md)未満の整数`r`に対して、[`compatible-static-extents`](/reference/linalg/compatible-static-extents.md)`&amp;lt;InVec, OutVec&amp;gt;(r,r)`が`true`
 - (2): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 事前条件
 `x`と`y`の各次元の要素数が等しくなければならない。
+
 - `x.extents() == y.extents()`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dot -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/dot.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/dot.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/dot.md b/reference/linalg/dot.md
index 8dea51686..95bf0a5c3 100644
--- a/reference/linalg/dot.md
+++ b/reference/linalg/dot.md
@@ -45,7 +45,7 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0)`が`true` (2つのベクトルの静的な要素数が同じ)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0)`が`true` (2つのベクトルの静的な要素数が同じ)
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
@@ -58,8 +58,8 @@ namespace std::linalg {
 ## 効果
 - (1), (2): なし
 - (3), (4): `T`を各ベクトルの値型の積の型`decltype(declval&amp;lt;typename InVec1::value_type&amp;gt;() * declval&amp;lt;typename InVec2::value_type&amp;gt;())`とする。
-  + (3): `dot(v1, v2, T{})`を返す。
-  + (4): `dot(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v1, v2, T{})`を返す。
+    + (3): `dot(v1, v2, T{})`を返す。
+    + (4): `dot(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v1, v2, T{})`を返す。
 
 
 ## 戻り値
@@ -77,7 +77,7 @@ $$
 
 
 ## 備考
-- (1), (2): もし`InVec1::value_type`、`InVec2::value_type`、`Scalar`が全て浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InVec1::value_type`と`InVec2::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InVec1::value_type`、`InVec2::value_type`、`Scalar`が全て浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InVec1::value_type`と`InVec2::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>dotc -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/dotc.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/dotc.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/dotc.md b/reference/linalg/dotc.md
index 1349e6d16..a8dd35350 100644
--- a/reference/linalg/dotc.md
+++ b/reference/linalg/dotc.md
@@ -45,7 +45,7 @@ namespace std::linalg {
 
 ## 適格要件
 - 共通:
-  + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0)`が`true` (2つのベクトルの静的な要素数が同じ)
+    + [`compatible-static-extents`](compatible-static-extents.md)`&amp;lt;InVec1, InVec2&amp;gt;(0, 0)`が`true` (2つのベクトルの静的な要素数が同じ)
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
@@ -57,10 +57,10 @@ namespace std::linalg {
 
 ## 効果
 - (1): [`dot`](dot.md)`(`[`conjugated`](conjugated.md)`(v1), v2, init)`を返す。
-- (2): `dot(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), conjugated(v1), v2, init)`を返す。
-- (3), (4): `T`を各ベクトルの値型の積の型`decltype(conj-if-needed(declval&amp;lt;typename InVec1::value_type&amp;gt;()) * declval&amp;lt;typename InVec2::value_type&amp;gt;())`とする。
-  + (3): `dotc(v1, v2, T{})`を返す。
-  + (4): `dotc(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v1, v2, T{})`を返す。
+- (2): [`dot`](dot.md)`(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec),` [`conjugated`](conjugated.md)`(v1), v2, init)`を返す。
+- (3), (4): `T`を各ベクトルの値型の積の型`decltype(`[`conj-if-needed`](conj-if-needed.md)`(declval&amp;lt;typename InVec1::value_type&amp;gt;()) * declval&amp;lt;typename InVec2::value_type&amp;gt;())`とする。
+    + (3): `dotc(v1, v2, T{})`を返す。
+    + (4): `dotc(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v1, v2, T{})`を返す。
 
 
 ## 戻り値
@@ -114,7 +114,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::dotc[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_frob_norm -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_frob_norm.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/matrix_frob_norm.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_frob_norm.md b/reference/linalg/matrix_frob_norm.md
index 544a175ec..44a97bd11 100644
--- a/reference/linalg/matrix_frob_norm.md
+++ b/reference/linalg/matrix_frob_norm.md
@@ -38,13 +38,13 @@ namespace std::linalg {
 
 
 ## 適格要件
-- (1), (2): `decltype(init + `[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`が`Scalar`に変換可能。
+- (1), (2): `decltype(init +` [`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`が`Scalar`に変換可能。
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 効果
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_frob_norm(A, T{})`を返す。
-  + (4): `matrix_frob_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_frob_norm(A, T{})`を返す。
+    + (4): `matrix_frob_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 戻り値
@@ -54,13 +54,13 @@ $$
 \sqrt{\sum_{i = 0}^{m - 1} \sum_{j = 0}^{n - 1} |\verb|A[|i, j\verb|]||^2 + \verb|init|^2}
 $$
 
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_frob_norm(A, T{})`を返す。
-  + (4): `matrix_frob_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_frob_norm(A, T{})`を返す。
+    + (4): `matrix_frob_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 備考
-- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -97,7 +97,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::matrix_frob_norm[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_inf_norm -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_inf_norm.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/matrix_inf_norm.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_inf_norm.md b/reference/linalg/matrix_inf_norm.md
index 76844e853..f11272888 100644
--- a/reference/linalg/matrix_inf_norm.md
+++ b/reference/linalg/matrix_inf_norm.md
@@ -43,9 +43,9 @@ namespace std::linalg {
 
 
 ## 効果
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_inf_norm(A, T{})`を返す。
-  + (4): `matrix_inf_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_inf_norm(A, T{})`を返す。
+    + (4): `matrix_inf_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 戻り値
@@ -57,13 +57,13 @@ $$
 \verb|init| + \max_{i = 0, \dots ,m - 1}\sum_{j = 0}^{n - 1} |\verb|A[|i, j\verb|]||
 $$
 
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_inf_norm(A, T{})`を返す。
-  + (4): `matrix_inf_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_inf_norm(A, T{})`を返す。
+    + (4): `matrix_inf_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 備考
-- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -100,7 +100,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::matrix_inf_norm[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>matrix_one_norm -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/matrix_one_norm.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/matrix_one_norm.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/matrix_one_norm.md b/reference/linalg/matrix_one_norm.md
index a0cd520e9..f736b56f9 100644
--- a/reference/linalg/matrix_one_norm.md
+++ b/reference/linalg/matrix_one_norm.md
@@ -43,9 +43,9 @@ namespace std::linalg {
 
 
 ## 効果
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_one_norm(A, T{})`を返す。
-  + (4): `matrix_one_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_one_norm(A, T{})`を返す。
+    + (4): `matrix_one_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 戻り値
@@ -57,13 +57,13 @@ $$
 \verb|init| + \max_{j = 0, \dots ,n - 1}\sum_{i = 0}^{m - 1} |\verb|A[|i, j\verb|]||
 $$
 
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
-  + (3): `matrix_one_norm(A, T{})`を返す。
-  + (4): `matrix_one_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InMat::value_type&amp;gt;()))`とすると、
+    + (3): `matrix_one_norm(A, T{})`を返す。
+    + (4): `matrix_one_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), A, T{})`を返す。
 
 
 ## 備考
-- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InMat::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InMat::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -100,7 +100,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::matrix_one_norm[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setup_givens_rotation -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/setup_givens_rotation.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/setup_givens_rotation.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/setup_givens_rotation.md b/reference/linalg/setup_givens_rotation.md
index 18c9bb4ac..f91e11574 100644
--- a/reference/linalg/setup_givens_rotation.md
+++ b/reference/linalg/setup_givens_rotation.md
@@ -9,13 +9,16 @@
 ```cpp
 namespace std::linalg {
   template&amp;lt;class Real&amp;gt;
-  setup_givens_rotation_result&amp;lt;Real&amp;gt; setup_givens_rotation(Real a, Real b) noexcept; // (1)
+  setup_givens_rotation_result&amp;lt;Real&amp;gt;
+    setup_givens_rotation(Real a, Real b) noexcept; // (1)
 
   template&amp;lt;class Real&amp;gt;
-  setup_givens_rotation_result&amp;lt;complex&amp;lt;Real&amp;gt;&amp;gt; setup_givens_rotation(complex&amp;lt;Real&amp;gt; a, complex&amp;lt;Real&amp;gt; b) noexcept; // (2)
+  setup_givens_rotation_result&amp;lt;complex&amp;lt;Real&amp;gt;&amp;gt;
+    setup_givens_rotation(complex&amp;lt;Real&amp;gt; a, complex&amp;lt;Real&amp;gt; b) noexcept; // (2)
 }
 ```
-
+* setup_givens_rotation_result[link setup_givens_rotation_result.md]
+* complex[link /reference/complex/complex.md]
 
 ## 概要
 ギブンス回転を計算する。すなわち、以下の式が成り立つような、`Real`型の値`c`と `s`, `r`を計算する。
@@ -53,7 +56,7 @@ $$
 
 
 ## 適格要件
-- `Real`は`complex&amp;lt;Real&amp;gt;`が規定できる型であること。
+- `Real`は[`complex`](/reference/complex/complex.md)`&amp;lt;Real&amp;gt;`が規定できる型であること。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>setup_givens_rotation_result -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/setup_givens_rotation_result.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/setup_givens_rotation_result.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/setup_givens_rotation_result.md b/reference/linalg/setup_givens_rotation_result.md
index b38e24b36..5cd720420 100644
--- a/reference/linalg/setup_givens_rotation_result.md
+++ b/reference/linalg/setup_givens_rotation_result.md
@@ -21,13 +21,15 @@ namespace std::linalg {
   };
 }
 ```
+* complex[link /reference/complex/complex.md]
+
 
 ## 概要
 ギブンス回転の結果を表すクラス。詳しくは、[`setup_givens_rotation`](setup_givens_rotation.md)にて。
 
 
 ## 適格要件
-- `Real`は`complex&amp;lt;Real&amp;gt;`が規定できる型であること。
+- `Real`は[`complex`](/reference/complex/complex.md)`&amp;lt;Real&amp;gt;`が規定できる型であること。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap_elements -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/swap_elements.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/swap_elements.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/swap_elements.md b/reference/linalg/swap_elements.md
index 4fc87ae70..a8be2a486 100644
--- a/reference/linalg/swap_elements.md
+++ b/reference/linalg/swap_elements.md
@@ -30,6 +30,7 @@ namespace std::linalg {
 
 ## テンプレートパラメータ制約
 `x`と`y`の次元が等しくなければならない。
+
 - `x.rank() == y.rank()`
 
 
@@ -40,6 +41,7 @@ namespace std::linalg {
 
 ## 事前条件
 `x`と`y`の各次元の要素数が等しくなければならない。
+
 - `x.extents() == y.extents()`
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_abs_sum -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_abs_sum.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/vector_abs_sum.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_abs_sum.md b/reference/linalg/vector_abs_sum.md
index 837a36833..774fb08c2 100644
--- a/reference/linalg/vector_abs_sum.md
+++ b/reference/linalg/vector_abs_sum.md
@@ -37,25 +37,25 @@ namespace std::linalg {
 
 
 ## 適格要件
-- (1), (2): `decltype(init + `[`abs-if-needed`](abs-if-needed.md)`(`[`real-if-needed`](real-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())) + abs-if-needed(`[`imag-if-needed`](imag-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())))`が`Scalar`に変換可能。
+- (1), (2): `decltype(init +` [`abs-if-needed`](abs-if-needed.md)`(`[`real-if-needed`](real-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())) + abs-if-needed(`[`imag-if-needed`](imag-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;())))`が`Scalar`に変換可能。
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 ## 効果
 - (3), (4): `T`を`typename InVec::value_type`とすると、
-  + (3): `vector_abs_sum(v, T{})`を返す。
-  + (4): `vector_abs_sum(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
+    + (3): `vector_abs_sum(v, T{})`を返す。
+    + (4): `vector_abs_sum(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
 
 
 ## 戻り値
 - (1), (2): `N`を`v`の次元`v.extent(0)`とすると、以下を返す。
-  1. もし`N`が0なら`init`
-  2. そうでない場合、もし`InVec::value_type`が算術型なら以下の式の値
+    - もし`N`が0なら`init`
+    - そうでない場合、もし`InVec::value_type`が算術型なら以下の式の値
 
 $$
 \sum_{i = 0}^{N - 1} |\verb|v[|i\verb|]|| + \verb|init|
 $$
 
-  3. そうでない場合、以下の式の値
+    - そうでない場合、以下の式の値
 
 $$
 \sum_{i = 0}^{N - 1} \left\{|\mathrm{Re}(\verb|v[|i\verb|]|)| + |\mathrm{Im}(\verb|v[|i\verb|]|)|\right\} + \verb|init|
@@ -63,12 +63,12 @@ $$
 
 
 - (3), (4): `T`を`typename InVec::value_type`とすると、
-  + (3): `vector_abs_sum(v, T{})`を返す。
-  + (4): `vector_abs_sum(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
+    + (3): `vector_abs_sum(v, T{})`を返す。
+    + (4): `vector_abs_sum(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
 
 
 ## 備考
-- (1), (2): もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -102,7 +102,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::vector_abs_sum[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_idx_abs_sum -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_idx_abs_max.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/vector_idx_abs_max.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_idx_abs_max.md b/reference/linalg/vector_idx_abs_max.md
index 63d50f909..85b4e234d 100644
--- a/reference/linalg/vector_idx_abs_max.md
+++ b/reference/linalg/vector_idx_abs_max.md
@@ -32,16 +32,18 @@ namespace std::linalg {
 
 ## 戻り値
 - (1), (2): `N`を`v`の次元`v.extent(0)`とすると、以下を返す。
-  1. もし`N`が0なら`std::numeric_limits&amp;lt;typename InVec::size_type&amp;gt;::max()`
-  2. そうでない場合、もし`InVec::value_type`が算術型なら絶対値が最大の最初の`v`の成分のインデックス。つまり、
-  $$
-  \argmax_{i = 0, \dots, N - 1} |\verb|v[|i\verb|]||
-  $$
-  3. そうでない場合、
+    + もし`N`が0なら[`std::numeric_limits`](/reference/limits/numeric_limits.md)`&amp;lt;typename InVec::size_type&amp;gt;::max()`
+    + そうでない場合、もし`InVec::value_type`が算術型なら絶対値が最大の最初の`v`の成分のインデックス。つまり、
 
-  $$
-  \argmax_{i = 0, \dots, N - 1}\left\{|\mathrm{Re}(\verb|v[|i\verb|]|)| + |\mathrm{Im}(\verb|v[|i\verb|]|)|\right\}
-  $$
+$$
+\argmax_{i = 0, \dots, N - 1} |\verb|v[|i\verb|]||
+$$
+
+    + そうでない場合、
+
+$$
+\argmax_{i = 0, \dots, N - 1}\left\{|\mathrm{Re}(\verb|v[|i\verb|]|)| + |\mathrm{Im}(\verb|v[|i\verb|]|)|\right\}
+$$
 
 
 ## 例
@@ -73,7 +75,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::vector_idx_abs_max[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sum_of_squares_result -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_sum_of_squares.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/vector_sum_of_squares.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_sum_of_squares.md b/reference/linalg/vector_sum_of_squares.md
index 98ed9076e..be29e69b5 100644
--- a/reference/linalg/vector_sum_of_squares.md
+++ b/reference/linalg/vector_sum_of_squares.md
@@ -22,6 +22,7 @@ namespace std::linalg {
     sum_of_squares_result&amp;lt;Scalar&amp;gt; init); // (2)
 }
 ```
+* sum_of_squares_result[link sum_of_squares_result.md]
 
 
 ## 概要
@@ -33,6 +34,7 @@ namespace std::linalg {
     return std::pow(result.scaling_factor, 2) * result.scaled_sum_of_squares;
   }
 ```
+* sum_of_squares_result[link sum_of_squares_result.md]
 
 を定義すると、以下の式が成り立つように計算する。
 
@@ -49,19 +51,19 @@ $$
 
 
 ## 効果
-- (1): 以下の条件を満たす`sum_of_squares_result&amp;lt;Scalar&amp;gt;`型の値`result`を返す。
-  + `result.scaling_factor`が`init.scaling_factor`と$\max_{i = 0, \dots, n - 1}|\verb|v[|i\verb|]||$の最大値。ただし、`n`は`v`の次元である。
-  + 概要に記載した式を満たす。
+- (1): 以下の条件を満たす[`sum_of_squares_result`](sum_of_squares_result.md)`&amp;lt;Scalar&amp;gt;`型の値`result`を返す。
+    + `result.scaling_factor`が`init.scaling_factor`と$\max_{i = 0, \dots, n - 1}|\verb|v[|i\verb|]||$の最大値。ただし、`n`は`v`の次元である。
+    + 概要に記載した式を満たす。
 - (2): (1)の並列アルゴリズム版。
 
 
 ## 戻り値
-`sum_of_squares_result&amp;lt;Scalar&amp;gt;`
+[`sum_of_squares_result`](sum_of_squares_result.md)`&amp;lt;Scalar&amp;gt;`
 
 
 ## 備考
 - `init.scaled_sum_of_squares`は0以上でなければならない。
-- もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -109,7 +111,8 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::vector_sum_of_squares[color ff0000]
+* std::linalg::sum_of_squares_result[link sum_of_squares_result.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector_two_norm -- linalg: refine BLAS1 functions (#1233)</title>
      <link href="https://cpprefjp.github.io/reference/linalg/vector_two_norm.html"/>
      <id>d73c2fc1e8347eae196749671ab4fa2ac56ed1be:reference/linalg/vector_two_norm.md</id>
      <updated>2024-07-11T19:10:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/vector_two_norm.md b/reference/linalg/vector_two_norm.md
index 1178dc20c..46ce843d5 100644
--- a/reference/linalg/vector_two_norm.md
+++ b/reference/linalg/vector_two_norm.md
@@ -37,14 +37,14 @@ namespace std::linalg {
 
 
 ## 適格要件
-- (1), (2): `decltype(init + `[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`が`Scalar`に変換可能。
+- (1), (2): `decltype(init +` [`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`が`Scalar`に変換可能。
 - (2), (4): [`is_execution_policy`](/reference/execution/is_execution_policy.md)`&amp;lt;ExecutionPolicy&amp;gt;::value`が`true`
 
 
 ## 効果
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`とすると、
-  + (3): `vector_two_norm(v, T{})`を返す。
-  + (4): `vector_two_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`とすると、
+    + (3): `vector_two_norm(v, T{})`を返す。
+    + (4): `vector_two_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
 
 
 ## 戻り値
@@ -55,13 +55,13 @@ $$
 $$
 
 
-- (3), (4): `T`を`decltype(abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`とすると、
-  + (3): `vector_two_norm(v, T{})`を返す。
-  + (4): `vector_two_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
+- (3), (4): `T`を`decltype(`[`abs-if-needed`](abs-if-needed.md)`(declval&amp;lt;typename InVec::value_type&amp;gt;()) * abs-if-needed(declval&amp;lt;typename InVec::value_type&amp;gt;()))`とすると、
+    + (3): `vector_two_norm(v, T{})`を返す。
+    + (4): `vector_two_norm(std::forward&amp;lt;ExecutionPolicy&amp;gt;(exec), v, T{})`を返す。
 
 
 ## 備考
-- (1), (2): もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または`std::complex`の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
+- (1), (2): もし`InVec::value_type`と`Scalar`がどちらも浮動小数点数型または[`std::complex`](/reference/complex/complex.md)の特殊化で、`Scalar`が`InVec::value_type`より精度が高い場合、和の各項は`Scalar`またはより高い精度の型が使われる。
 
 
 ## 例
@@ -95,7 +95,7 @@ int main()
   return 0;
 }
 ```
-
+* std::linalg::vector_two_norm[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
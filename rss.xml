<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-07-06T04:40:07.362012</updated>
  <id>5387cc5c-acff-41e4-81f4-2f738e2112ff</id>

  
    <entry>
      <title>外部ライブラリ -- fix: change Xbyak link to github</title>
      <link href="https://cpprefjp.github.io/third_party_library.html"/>
      <id>1638d9972cc13a22ef37d2ee495d68017cd3fb30:third_party_library.md</id>
      <updated>2020-07-06T13:36:28+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;外部ライブラリ&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;C++での開発に使用できる有用なライブラリを以下に例示する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boost.org/&#34; target=&#34;_blank&#34;&gt;Boost C++ Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++の準標準と呼ばれているライブラリ。C++標準化委員会のメンバも多く関わっており、Boostに含まれるライブラリの中から次期標準ライブラリとして採用されたものも多数ある。Intel(Boost.Polygon), Adobe(Boost.GIL)も開発に関わっている。スレッド、ネットワーク、ファイルシステム、構文解析器、正規表現、グラフ、線形代数、分散処理、区間計算、計算幾何、多倍長整数など、現在ではだいたい揃ってる。&lt;br /&gt;
ライセンス：Boost Software License 1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://opencv.jp/&#34; target=&#34;_blank&#34;&gt;OpenCV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クロスプラットフォームな画像処理、画像認識のためのC++の高水準なクラスライブラリが提供されている。Boostとも連携しやすい。最近ではCUDAなどにも対応している。&lt;br /&gt;
ライセンス：BSD License&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qt.io/&#34; target=&#34;_blank&#34;&gt;Qt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クロスプラットフォームなGUIライブラリ。最近ではStackOverflowでも「C++でGUIライブラリと言えば？」と質問が上がると9割は「Qt」という答えが返ってくる。&lt;br /&gt;
ライセンス：LGPL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://glm.g-truc.net/&#34; target=&#34;_blank&#34;&gt;GLM(OpenGL Mathematics)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3Dグラフィクスのためのヘッダオンリーライブラリ。OpenGLの生のAPIを使うよりこちらの方が扱いやすい。&lt;br /&gt;
ライセンス：MIT License&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mongodb.com/&#34; target=&#34;_blank&#34;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;データベースライブラリ。&lt;br /&gt;
ライセンス：Creative Commons, CC BY-NC-SA 3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/msgpack/msgpack-c&#34; target=&#34;_blank&#34;&gt;MessagePack implementation for C and C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通信などで使用できるデータの圧縮形式、シリアライズ／デシリアライズ、通信のライブラリ。&lt;br /&gt;
ライセンス：Boost Software License, Version 1.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/herumi/xbyak/blob/master/readme.txt&#34; target=&#34;_blank&#34;&gt;Xbyak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;x86(IA32), x64(AMD64, x86-64)のマシン語命令を実行時に生成するC++のクラスライブラリ。&lt;br /&gt;
ライセンス：修正BSDライセンス&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mpir.org/&#34; target=&#34;_blank&#34;&gt;MPIR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;巨大な数を扱うためのライブラリ。GMPより分岐したものであり，Visual C++で容易に使えるようになっていることが特徴である。boost::multiprecisionと組み合わせて使用できる。&lt;br /&gt;
ライセンス：LGPL Version 3.0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/googletest&#34; target=&#34;_blank&#34;&gt;Google Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++コードの自動テストを行うフレームワーク。&lt;br /&gt;
ライセンス：BSD Version 2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fmtlib/fmt&#34; target=&#34;_blank&#34;&gt;fmtlib&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文字列フォーマットのライブラリ。&lt;br /&gt;
ライセンス：BSD&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>Callable -- サイドバーに不具合が発生するようなのでconceptに戻す #779</title>
      <link href="https://cpprefjp.github.io/reference/concepts/Callable.html"/>
      <id>9dbf343779c9dfdbc9a905283fd4aa4671c27b93:reference/concepts/Callable.md</id>
      <updated>2020-07-06T12:53:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/Callable.md b/reference/concepts/Callable.md
index 49a7e9e65..ee2cc6932 100644
--- a/reference/concepts/Callable.md
+++ b/reference/concepts/Callable.md
@@ -1,6 +1,8 @@
 # Callable
 * cpp11[meta cpp]
-* named requirement[meta id-type]
+* concepts[meta header]
+* concept[meta id-type]
+* [meta namespace]
 
 ## 概要
 `Callable`は、関数呼び出し可能な型を表す、型の分類、または要件である。ライブラリ機能ではない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>MATSUMURA Tetsuro</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Callable -- Callableを試しにnamed requirementに変更</title>
      <link href="https://cpprefjp.github.io/reference/concepts/Callable.html"/>
      <id>0ac3d5cf945b4790ae2f8de4073a851b5aa1ed8f:reference/concepts/Callable.md</id>
      <updated>2020-07-06T12:39:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/Callable.md b/reference/concepts/Callable.md
index ee2cc6932..49a7e9e65 100644
--- a/reference/concepts/Callable.md
+++ b/reference/concepts/Callable.md
@@ -1,8 +1,6 @@
 # Callable
 * cpp11[meta cpp]
-* concepts[meta header]
-* concept[meta id-type]
-* [meta namespace]
+* named requirement[meta id-type]
 
 ## 概要
 `Callable`は、関数呼び出し可能な型を表す、型の分類、または要件である。ライブラリ機能ではない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>MATSUMURA Tetsuro</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_handle -- Merge pull request #783 from cpprefjp/Fuyutsubaki-patch-1</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html"/>
      <id>e88a1c502f05d487c4458807552c4ac739cb395e:reference/coroutine/coroutine_handle.md</id>
      <updated>2020-07-05T02:10:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle.md b/reference/coroutine/coroutine_handle.md
index 7d044a752..6fb15d096 100644
--- a/reference/coroutine/coroutine_handle.md
+++ b/reference/coroutine/coroutine_handle.md
@@ -34,7 +34,7 @@ namespace std {
 
 C++コルーチンとC API（コールバック関数へのポインタと`void*`をとる関数）との組合せ利用を可能とするため、`coroutine_handle`とポインタ型`void*`との相互変換がサポートされる。
 
-ユーザプログラムが`coroutine_handle`の明示特殊化まは部分特殊化を宣言した場合、その動作は未定義とされる。
+ユーザプログラムが`coroutine_handle`の明示特殊化または部分特殊化を宣言した場合、その動作は未定義とされる。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_handle -- typo</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html"/>
      <id>926bc4d17e61de5fc0d942ba9fb5829bf8d88763:reference/coroutine/coroutine_handle.md</id>
      <updated>2020-07-05T01:44:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle.md b/reference/coroutine/coroutine_handle.md
index 7d044a752..6fb15d096 100644
--- a/reference/coroutine/coroutine_handle.md
+++ b/reference/coroutine/coroutine_handle.md
@@ -34,7 +34,7 @@ namespace std {
 
 C++コルーチンとC API（コールバック関数へのポインタと`void*`をとる関数）との組合せ利用を可能とするため、`coroutine_handle`とポインタ型`void*`との相互変換がサポートされる。
 
-ユーザプログラムが`coroutine_handle`の明示特殊化まは部分特殊化を宣言した場合、その動作は未定義とされる。
+ユーザプログラムが`coroutine_handle`の明示特殊化または部分特殊化を宣言した場合、その動作は未定義とされる。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Fuyutsubaki</name>
        <email>pushrunkey@gmail.com</email>
      </author>
    </entry>
  
</feed>
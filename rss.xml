<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-01-21T15:48:56.164424</updated>
  <id>b2170594-473a-4ca4-9d5c-0c4fe7a6bfa4</id>

  
    <entry>
      <title>shared_timed_mutex (C++14) -- shared_timed_mutex : try_lock_sharedのリファレンスを追加</title>
      <link href="http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex.html"/>
      <id>ffcff78d592a64a805e7e18cb6cde7f42746eb1e:reference/shared_mutex/shared_timed_mutex.md</id>
      <updated>2015-01-21 15:48:39 +0900</updated>
      
        <content type="html">&lt;h1&gt;shared_timed_mutex (C++14)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;shared_timed_mutex&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shared_timed_mutex&lt;/code&gt;クラスは、&lt;a href=&#34;http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock&#34; target=&#34;_blank&#34;&gt;Readers–writer lock&lt;/a&gt;パターンをサポートするミューテックスクラスである。&lt;/p&gt;
&lt;p&gt;このパターンは、「複数のユーザーによる読み込みと、単一ユーザーによる書き込み」の排他制御を効率的に行うミューテックスクラスである。書き込みよりも読み込みの方が多い状況で使用する。&lt;/p&gt;
&lt;p&gt;このミューテックスクラスのロック取得方法は2種類ある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock()&lt;/code&gt;／&lt;code&gt;unlock()&lt;/code&gt;メンバ関数：書き込み用のロックを取得する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/lock_shared.html&#34;&gt;&lt;code&gt;lock_shared()&lt;/code&gt;&lt;/a&gt;／&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/unlock_shared.html&#34;&gt;&lt;code&gt;unlock_shared()&lt;/code&gt;&lt;/a&gt;メンバ関数：読み込み用のロックを取得する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このクラスは、デストラクタで自動的にロックを手放すことはしない。そのため、以下の補助クラスを使用して、デストラクタで自動的にロックを手放す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/lock_guard.html&#34;&gt;&lt;code&gt;lock_guard&lt;/code&gt;&lt;/a&gt;クラス／&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock.html&#34;&gt;&lt;code&gt;unique_lock&lt;/code&gt;&lt;/a&gt;クラス：書き込み用のロックを自動的に手放す&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/shared_lock.md.nolink&#34;&gt;&lt;code&gt;shared_lock&lt;/code&gt;&lt;/a&gt;：読み込み用のロックを自動的に手放す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/op_constructor.md.nolink&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/op_destructor.md.nolink&#34;&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=(const shared_timed_mutex&amp;amp;) = delete;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;排他の所有権&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/lock.md.nolink&#34;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;排他ロックを取得する&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/try_lock.md.nolink&#34;&gt;&lt;code&gt;try_lock&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;排他ロックの取得を試みる&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/try_lock_for.md.nolink&#34;&gt;&lt;code&gt;try_lock_for&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;タイムアウトする相対時間を指定して排他ロックの取得を試みる&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/try_lock_until.md.nolink&#34;&gt;&lt;code&gt;try_lock_until&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;タイムアウトする絶対時間を指定して排他ロックの取得を試みる&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/unlock.md.nolink&#34;&gt;&lt;code&gt;unlock&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;排他ロックを手放す&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;共有の所有権&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/lock_shared.html&#34;&gt;&lt;code&gt;lock_shared&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共有ロックを取得する&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/try_lock_shared.html&#34;&gt;&lt;code&gt;try_lock_shared&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共有ロックの取得を試みる&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/try_lock_shared_for.md.nolink&#34;&gt;&lt;code&gt;try_lock_shared_for&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;タイムアウトする相対時間を指定して共有ロックの取得を試みる&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/try_lock_shared_until.md.nolink&#34;&gt;&lt;code&gt;try_lock_shared_until&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;タイムアウトする絶対時間を指定して共有ロックの取得を試みる&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/unlock_shared.html&#34;&gt;&lt;code&gt;unlock_shared&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共有ロックを手放す&lt;/td&gt;
&lt;td&gt;C++14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;shared_mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;chrono&amp;gt;&lt;/span&gt;

&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;/a&gt; print_mtx;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x)
{
  &lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/lock_guard.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/mutex.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lock(print_mtx);
  &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;X&lt;/span&gt; {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_timed_mutex mtx_;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; count_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 書き込み側：カウンタを加算する&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;writer&lt;/span&gt;()
  {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/lock_guard.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;lock_guard&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_timed_mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lock(mtx_);
    &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;count_;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 読み込み側：カウンタの値を読む&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;reader&lt;/span&gt;()
  {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_lock.md.nolink&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_lock&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_timed_mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lock(mtx_);
    print_value(count_);
  }
};

X obj;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;writer_thread&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/this_thread/sleep_for.html&#34;&gt;sleep_for&lt;/a&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/milliseconds.html&#34;&gt;milliseconds&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;));
    obj.writer();
  }
}

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;reader_thread&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/this_thread/sleep_for.html&#34;&gt;sleep_for&lt;/a&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/milliseconds.html&#34;&gt;milliseconds&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;));
    obj.reader();
  }
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 書き込みユーザー1人&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 読み込みユーザー3人&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;thread&lt;/a&gt; writer1(writer_thread);
  &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;thread&lt;/a&gt; reader1(reader_thread);
  &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;thread&lt;/a&gt; reader2(reader_thread);
  &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;thread&lt;/a&gt; reader3(reader_thread);

  writer1.&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/join.html&#34;&gt;join()&lt;/a&gt;;
  reader1.&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/join.html&#34;&gt;join()&lt;/a&gt;;
  reader2.&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/join.html&#34;&gt;join()&lt;/a&gt;;
  reader3.&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/join.html&#34;&gt;join()&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
1
1
2
2
2
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++14&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++14 mode&lt;/a&gt;: 3.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++14 mode&lt;/a&gt;: 4.9&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock&#34; target=&#34;_blank&#34;&gt;Readers–writer lock - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3427.html&#34; target=&#34;_blank&#34;&gt;N3427 Shared locking in C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3568.html&#34; target=&#34;_blank&#34;&gt;N3568 Shared locking in C++ (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3659.html&#34; target=&#34;_blank&#34;&gt;N3659 Shared locking in C++ (Revision 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3891.htm&#34; target=&#34;_blank&#34;&gt;N3891 A proposal to rename &lt;code&gt;shared_mutex&lt;/code&gt; to &lt;code&gt;shared_timed_mutex&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_lock_shared (C++14) -- shared_timed_mutex : try_lock_sharedのリファレンスを追加</title>
      <link href="http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/try_lock_shared.html"/>
      <id>ffcff78d592a64a805e7e18cb6cde7f42746eb1e:reference/shared_mutex/shared_timed_mutex/try_lock_shared.md</id>
      <updated>2015-01-21 15:48:39 +0900</updated>
      
        <content type="html">&lt;h1&gt;try_lock_shared (C++14)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;try_lock_shared&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;共有ロックの取得を試みる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;この関数を呼び出したスレッドが、ミューテックスの所有権を保持していないこと&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;ブロッキングせずに、この関数を呼び出したスレッドがミューテックスの共有所有権を取得する&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;共有所有権が取得できなかった場合は何もせずに関数が&lt;code&gt;false&lt;/code&gt;で返り、共有所有権を取得できた場合は&lt;code&gt;true&lt;/code&gt;を返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;この関数の実装が、ミューテックスの所有権を保持しているスレッドがひとつもない場合でも、所有権の取得に失敗する可能性がある。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;shared_mutex&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;X&lt;/span&gt; {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;mutable&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;shared_timed_mutex mtx_;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ変数value_への書き込みを排他的にする&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
  {
    mtx_.&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/lock.md.nolink&#34;&gt;lock()&lt;/a&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 排他ロックを取得する&lt;/span&gt;
    value_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; value;
    mtx_.&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/unlock.md.nolink&#34;&gt;unlock()&lt;/a&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 排他ロックを手放す&lt;/span&gt;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ変数value_の値を読み込む&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; get_value() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;mtx_.&lt;span style=&#34;color:#ff0000&#34;&gt;try_lock_shared()&lt;/span&gt;) { &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有ロックの取得を試みる&lt;/span&gt;
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有ロックの取得に失敗&lt;/span&gt;
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code ec(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;device_or_resource_busy), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generic_category());
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system_error(ec);
    }

    result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; value_;
    mtx_.&lt;a href=&#34;http://cpprefjp.github.io/reference/shared_mutex/shared_timed_mutex/unlock_shared.html&#34;&gt;unlock_shared()&lt;/a&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 共有ロックを手放す&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
  }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  X x;

  &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;thread&lt;/a&gt; t1([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x]{ x.add_value(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.get_value(); });
  &lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;thread&lt;/a&gt; t2([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x]{ x.add_value(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; x.get_value(); });

  t1.&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/join.html&#34;&gt;join()&lt;/a&gt;;
  t2.&lt;a href=&#34;http://cpprefjp.github.io/reference/thread/thread/join.html&#34;&gt;join()&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++14&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++14 mode&lt;/a&gt;: 3.5&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++14 mode&lt;/a&gt;: 4.9&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_lock (C++11) -- unique_lockのメンバ関数：改行調整</title>
      <link href="http://cpprefjp.github.io/reference/mutex/unique_lock/try_lock.html"/>
      <id>487d625896dadc289639c774abcedc5ebc76f645:reference/mutex/unique_lock/try_lock.md</id>
      <updated>2015-01-21 15:17:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;try_lock (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;try_lock&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ロックの取得を試みる&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Mutex&lt;/code&gt;型が、&lt;code&gt;try_lock()&lt;/code&gt;メンバ関数をサポートするミューテックス型であること&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;pm&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;try_lock();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;※&lt;code&gt;pm&lt;/code&gt;はメンバ変数として保持している、ミューテックスオブジェクトへのポインタ&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock/owns_lock.html&#34;&gt;&lt;code&gt;owns_lock()&lt;/code&gt;&lt;/a&gt;の値が、&lt;code&gt;pm-&amp;gt;try_lock()&lt;/code&gt;の戻り値になること&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pm-&amp;gt;try_lock()&lt;/code&gt;の戻り値が返る&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;この関数は、&lt;code&gt;pm-&amp;gt;try_lock()&lt;/code&gt; 関数内で投げられうるあらゆる例外を投げる可能性がある。 &lt;/p&gt;
&lt;p&gt;そのほかに、以下のerror conditionを持つ&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;例外オブジェクトを送出する可能性がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;operation_not_permitted&lt;/code&gt;&lt;/a&gt; ： &lt;code&gt;pm&lt;/code&gt;が&lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;resource_deadlock_would_occur&lt;/code&gt;&lt;/a&gt; ： &lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock/owns_lock.html&#34;&gt;&lt;code&gt;owns_lock()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;== true&lt;/code&gt;の状態でこの関数が呼び出された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;system_error&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;X&lt;/span&gt; {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex mtx_;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ変数value_への書き込みを排他的にする&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx_, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;defer_lock);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;lk.&lt;span style=&#34;color:#ff0000&#34;&gt;try_lock&lt;/span&gt;()) {
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ロックの取得に失敗&lt;/span&gt;
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code ec(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;device_or_resource_busy), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generic_category());
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system_error(ec);
    }
    value_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; value;
  }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  X x;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x]{ x.add_value(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x]{ x.add_value(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); });

  t1.join();
  t2.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;terminate called after throwing an instance of &#39;std::system_error&#39;
  what():  Device or resource busy
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_lock_for (C++11) -- unique_lockのメンバ関数：改行調整</title>
      <link href="http://cpprefjp.github.io/reference/mutex/unique_lock/try_lock_for.html"/>
      <id>487d625896dadc289639c774abcedc5ebc76f645:reference/mutex/unique_lock/try_lock_for.md</id>
      <updated>2015-01-21 15:17:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;try_lock_for (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Rep&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Period&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; try_lock_for(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;duration&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Rep, Period&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; rel_time);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;タイムアウトする相対時間を指定してロックの取得を試みる&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Mutex&lt;/code&gt;型が、&lt;code&gt;try_lock_for()&lt;/code&gt;メンバ関数をサポートするミューテックス型であること&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;pm&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;try_lock_for(rel_time);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;※&lt;code&gt;pm&lt;/code&gt;はメンバ変数として保持している、ミューテックスオブジェクトへのポインタ&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock/owns_lock.html&#34;&gt;&lt;code&gt;owns_lock()&lt;/code&gt;&lt;/a&gt;の値が、&lt;code&gt;pm-&amp;gt;try_lock_for(rel_time)&lt;/code&gt;の戻り値になること&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pm-&amp;gt;try_lock_for(rel_time)&lt;/code&gt;の戻り値が返る&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;この関数は、&lt;code&gt;pm-&amp;gt;try_lock_for()&lt;/code&gt; 関数内で投げられうるあらゆる例外を投げる可能性がある。 &lt;/p&gt;
&lt;p&gt;そのほかに、以下のerror conditionを持つ&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;例外オブジェクトを送出する可能性がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;operation_not_permitted&lt;/code&gt;&lt;/a&gt; ： &lt;code&gt;pm&lt;/code&gt;が&lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;resource_deadlock_would_occur&lt;/code&gt;&lt;/a&gt; ： &lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock/owns_lock.html&#34;&gt;&lt;code&gt;owns_lock()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;== true&lt;/code&gt;の状態でこの関数が呼び出された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;chrono&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;system_error&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;X&lt;/span&gt; {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;timed_mutex mtx_;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ変数value_への書き込みを排他的にする&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;timed_mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx_, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;defer_lock);

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ロックの取得を試みる(3秒でタイムアウト)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;lk.&lt;span style=&#34;color:#ff0000&#34;&gt;try_lock_for&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;))) {
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ロックの取得に失敗&lt;/span&gt;
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code ec(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;device_or_resource_busy), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generic_category());
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system_error(ec);
    }
    value_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; value;
  }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  X x;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x]{ x.add_value(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x]{ x.add_value(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); });

  t1.join();
  t2.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>try_lock_until (C++11) -- unique_lockのメンバ関数：改行調整</title>
      <link href="http://cpprefjp.github.io/reference/mutex/unique_lock/try_lock_until.html"/>
      <id>487d625896dadc289639c774abcedc5ebc76f645:reference/mutex/unique_lock/try_lock_until.md</id>
      <updated>2015-01-21 15:17:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;try_lock_until (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Clock&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Duration&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; try_lock_until(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;time_point&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Clock, Duration&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; abs_time);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;タイムアウトする絶対時間を指定してロックの取得を試みる&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Mutex&lt;/code&gt;型が、&lt;code&gt;try_lock_until()&lt;/code&gt;メンバ関数をサポートするミューテックス型であること&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;pm&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;try_lock_until(abs_time);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;※&lt;code&gt;pm&lt;/code&gt;はメンバ変数として保持している、ミューテックスオブジェクトへのポインタ&lt;/p&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock/owns_lock.html&#34;&gt;&lt;code&gt;owns_lock()&lt;/code&gt;&lt;/a&gt;の値が、&lt;code&gt;pm-&amp;gt;try_lock_until(abs_time)&lt;/code&gt;の戻り値になること&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pm-&amp;gt;try_lock_for(rel_time)&lt;/code&gt;の戻り値が返る&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;この関数は、&lt;code&gt;pm-&amp;gt;try_lock_for()&lt;/code&gt; 関数内で投げられうるあらゆる例外を投げる可能性がある。 &lt;/p&gt;
&lt;p&gt;そのほかに、以下のerror conditionを持つ&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;&lt;code&gt;system_error&lt;/code&gt;&lt;/a&gt;例外オブジェクトを送出する可能性がある：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;operation_not_permitted&lt;/code&gt;&lt;/a&gt; ： &lt;code&gt;pm&lt;/code&gt;が&lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;&lt;code&gt;resource_deadlock_would_occur&lt;/code&gt;&lt;/a&gt; ： &lt;a href=&#34;http://cpprefjp.github.io/reference/mutex/unique_lock/owns_lock.html&#34;&gt;&lt;code&gt;owns_lock()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;== true&lt;/code&gt;の状態でこの関数が呼び出された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;thread&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;mutex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;chrono&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;system_error&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;X&lt;/span&gt; {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;timed_mutex mtx_;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color: #A0A000&#34;&gt;public:&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メンバ変数value_への書き込みを排他的にする&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;add_value&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; value)
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;unique_lock&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;timed_mutex&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; lk(mtx_, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;defer_lock);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; chrono &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;chrono;
    chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system_clock&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;time_point tp &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system_clock&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;now();

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ロックの取得を試みる(3秒後にタイムアウト)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;lk.&lt;span style=&#34;color:#ff0000&#34;&gt;try_lock_until&lt;/span&gt;(tp &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; chrono&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;))) {
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ロックの取得に失敗&lt;/span&gt;
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code ec(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;device_or_resource_busy), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generic_category());
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;system_error(ec);
    }
    value_ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; value;
  }
};

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  X x;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t1([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x]{ x.add_value(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;); });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;thread&lt;/span&gt; t2([&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;x]{ x.add_value(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;); });

  t1.join();
  t2.join();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- set::erase : C++03版のオーバーロードが間違っていたので修正</title>
      <link href="http://cpprefjp.github.io/reference/set/set/erase.html"/>
      <id>3df6e0aa01115e00cab90cc357ea1899e5d61ded:reference/set/set/erase.md</id>
      <updated>2015-01-21 15:12:42 +0900</updated>
      
        <content type="html">&lt;h1&gt;erase&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(iterator position);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator position);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(iterator first, iterator last);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator first, const_iterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

size_type &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;単一要素または要素範囲（&lt;code&gt;[first, last)&lt;/code&gt;）を &lt;code&gt;set&lt;/code&gt; コンテナから削除する。 
これは削除された要素の数だけコンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; を減らし、それぞれの要素のデストラクタを呼び出す。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt; : &lt;code&gt;set&lt;/code&gt; から削除する単一要素を指すイテレータ。&lt;code&gt;iterator&lt;/code&gt; はメンバ型であり、双方向イテレータとして定義される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : &lt;code&gt;set&lt;/code&gt; から削除される値。&lt;code&gt;key_type&lt;/code&gt; はメンバ型であり、&lt;code&gt;set&lt;/code&gt; コンテナの中で &lt;code&gt;Key&lt;/code&gt; の別名として定義される。ここで &lt;code&gt;Key&lt;/code&gt; は 1 番目のテンプレートパラメータであり、コンテナに格納される要素の型である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first, last&lt;/code&gt; : &lt;code&gt;set&lt;/code&gt; コンテナ内の、削除される範囲 &lt;code&gt;[first, last)&lt;/code&gt; を指定するイテレータ。ここでいう範囲は &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間の全ての要素を含み、&lt;code&gt;first&lt;/code&gt; が指す要素を含むが &lt;code&gt;last&lt;/code&gt; が指す要素は含まない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) :&lt;ul&gt;
&lt;li&gt;C++03 : なし&lt;/li&gt;
&lt;li&gt;C++11 : 削除された要素の次を指すイテレータを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3) : 削除された要素の数を返す。　&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 定数時間&lt;/li&gt;
&lt;li&gt;(2) : コンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; についての対数時間と、それに加えて &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間の距離に対する線形時間。 &lt;/li&gt;
&lt;li&gt;(3) : コンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;ループ中で&lt;code&gt;set&lt;/code&gt;の要素を削除するために、以下のようなコードを書くことになる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt;(it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; set_object.end()) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;条件&lt;/span&gt;) {
    set_object.erase(it&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;削除したイテレータ自身が無効になるため&lt;code&gt;it++&lt;/code&gt;を行っている。&lt;/p&gt;
&lt;p&gt;C++03とC++11以降で、この部分のコーディングスタイルが異なる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03では、前述した「&lt;code&gt;set_object.erase(it++);&lt;/code&gt;」というスタイル。&lt;/li&gt;
&lt;li&gt;C++11では、「&lt;code&gt;it = set_object.erase(it);&lt;/code&gt;」というスタイルで書く。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;);
  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;begin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;end&lt;/a&gt;());
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
2
2
0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全ての要素を削除する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- set::erase : ループ中で要素を削除する処理について、解説を追加した。</title>
      <link href="http://cpprefjp.github.io/reference/set/set/erase.html"/>
      <id>ce1aa022b707db7f2363b1973774610985042396:reference/set/set/erase.md</id>
      <updated>2015-01-21 15:05:48 +0900</updated>
      
        <content type="html">&lt;h1&gt;erase&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(iterator position);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator position);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator first, const_iterator last);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator first, const_iterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

size_type &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;単一要素または要素範囲（&lt;code&gt;[first, last)&lt;/code&gt;）を &lt;code&gt;set&lt;/code&gt; コンテナから削除する。 
これは削除された要素の数だけコンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; を減らし、それぞれの要素のデストラクタを呼び出す。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt; : &lt;code&gt;set&lt;/code&gt; から削除する単一要素を指すイテレータ。&lt;code&gt;iterator&lt;/code&gt; はメンバ型であり、双方向イテレータとして定義される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : &lt;code&gt;set&lt;/code&gt; から削除される値。&lt;code&gt;key_type&lt;/code&gt; はメンバ型であり、&lt;code&gt;set&lt;/code&gt; コンテナの中で &lt;code&gt;Key&lt;/code&gt; の別名として定義される。ここで &lt;code&gt;Key&lt;/code&gt; は 1 番目のテンプレートパラメータであり、コンテナに格納される要素の型である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first, last&lt;/code&gt; : &lt;code&gt;set&lt;/code&gt; コンテナ内の、削除される範囲 &lt;code&gt;[first, last)&lt;/code&gt; を指定するイテレータ。ここでいう範囲は &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間の全ての要素を含み、&lt;code&gt;first&lt;/code&gt; が指す要素を含むが &lt;code&gt;last&lt;/code&gt; が指す要素は含まない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) :&lt;ul&gt;
&lt;li&gt;C++03 : なし&lt;/li&gt;
&lt;li&gt;C++11 : 削除された要素の次を指すイテレータを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3) : 削除された要素の数を返す。　&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 定数時間&lt;/li&gt;
&lt;li&gt;(2) : コンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; についての対数時間と、それに加えて &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間の距離に対する線形時間。 &lt;/li&gt;
&lt;li&gt;(3) : コンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;ループ中で&lt;code&gt;set&lt;/code&gt;の要素を削除するために、以下のようなコードを書くことになる。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt;(it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; set_object.end()) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;条件&lt;/span&gt;) {
    set_object.erase(it&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;);
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;削除したイテレータ自身が無効になるため&lt;code&gt;it++&lt;/code&gt;を行っている。&lt;/p&gt;
&lt;p&gt;C++03とC++11以降で、この部分のコーディングスタイルが異なる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++03では、前述した「&lt;code&gt;set_object.erase(it++);&lt;/code&gt;」というスタイル。&lt;/li&gt;
&lt;li&gt;C++11では、「&lt;code&gt;it = set_object.erase(it);&lt;/code&gt;」というスタイルで書く。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;);
  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;begin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;end&lt;/a&gt;());
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
2
2
0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全ての要素を削除する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- set::erase : オーバーロードの書き方を、ほかに合わせた</title>
      <link href="http://cpprefjp.github.io/reference/set/set/erase.html"/>
      <id>47a13f6fbe22740357a6428e4d719c0cb18593d7:reference/set/set/erase.md</id>
      <updated>2015-01-21 15:04:51 +0900</updated>
      
        <content type="html">&lt;h1&gt;erase&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(iterator position);                             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator position);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator first, const_iterator last);     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++03&lt;/span&gt;
iterator &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(const_iterator first, const_iterator last); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;

size_type &lt;span style=&#34;color: #0000FF&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;単一要素または要素範囲（&lt;code&gt;[first, last)&lt;/code&gt;）を &lt;code&gt;set&lt;/code&gt; コンテナから削除する。 
これは削除された要素の数だけコンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; を減らし、それぞれの要素のデストラクタを呼び出す。&lt;/p&gt;
&lt;h2&gt;パラメータ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt; : &lt;code&gt;set&lt;/code&gt; から削除する単一要素を指すイテレータ。&lt;code&gt;iterator&lt;/code&gt; はメンバ型であり、双方向イテレータとして定義される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : &lt;code&gt;set&lt;/code&gt; から削除される値。&lt;code&gt;key_type&lt;/code&gt; はメンバ型であり、&lt;code&gt;set&lt;/code&gt; コンテナの中で &lt;code&gt;Key&lt;/code&gt; の別名として定義される。ここで &lt;code&gt;Key&lt;/code&gt; は 1 番目のテンプレートパラメータであり、コンテナに格納される要素の型である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first, last&lt;/code&gt; : &lt;code&gt;set&lt;/code&gt; コンテナ内の、削除される範囲 &lt;code&gt;[first, last)&lt;/code&gt; を指定するイテレータ。ここでいう範囲は &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間の全ての要素を含み、&lt;code&gt;first&lt;/code&gt; が指す要素を含むが &lt;code&gt;last&lt;/code&gt; が指す要素は含まない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (2) :&lt;ul&gt;
&lt;li&gt;C++03 : なし&lt;/li&gt;
&lt;li&gt;C++11 : 削除された要素の次を指すイテレータを返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3) : 削除された要素の数を返す。　&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 定数時間&lt;/li&gt;
&lt;li&gt;(2) : コンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; についての対数時間と、それに加えて &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; の間の距離に対する線形時間。 &lt;/li&gt;
&lt;li&gt;(3) : コンテナの &lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set.html&#34;&gt;set&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c;

  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt;);
  c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;30&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  c.&lt;span style=&#34;color:#ff0000&#34;&gt;erase&lt;/span&gt;(c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/begin.html&#34;&gt;begin&lt;/a&gt;(), c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/end.html&#34;&gt;end&lt;/a&gt;());
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c.&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/size.html&#34;&gt;size&lt;/a&gt;() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
2
2
0
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf&#34; target=&#34;_blank&#34;&gt;N2350 Container insert/erase and iterator constness (Revision 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/clear.html&#34;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;全ての要素を削除する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素を挿入する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/set/set/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
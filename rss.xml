<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-08-11T14:40:16.847343</updated>
  <id>1bbcbd30-462d-40a1-92b0-a5262ad34339</id>

  
    <entry>
      <title>forward_list -- add assign_range, insert_range_after and prepend_range to std::forward_list</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list.html"/>
      <id>d3eeb80c76c6cceb1e5b3ddef1a21e658ba14a3a:reference/forward_list/forward_list.md</id>
      <updated>2024-08-11T17:10:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list.md b/reference/forward_list/forward_list.md
index e89a102a9..097248912 100644
--- a/reference/forward_list/forward_list.md
+++ b/reference/forward_list/forward_list.md
@@ -48,6 +48,7 @@ namespace std {
 | [`(destructor)`](forward_list/op_destructor.md) | デストラクタ | C++11 |
 | [`operator=`](forward_list/op_assign.md) | 代入演算子 | C++11 |
 | [`assign`](forward_list/assign.md) | コンテナの再代入 | C++11 |
+| [`assign_range`](forward_list/assign_range.md) | Rangeの要素を再代入 | C++23 |
 
 
 ### イテレータ
@@ -83,9 +84,11 @@ namespace std {
 |----------------------------------------------------|--------------------------------|-------|
 | [`emplace_front`](forward_list/emplace_front.md) | 先頭への直接構築による要素追加 | C++11 |
 | [`push_front`](forward_list/push_front.md) | 先頭に要素を追加する | C++11 |
+| [`prepend_range`](forward_list/prepend_range.md) | 先頭にRangeの要素を追加する | C++23 |
 | [`pop_front`](forward_list/pop_front.md) | 先頭から要素を削除 | C++11 |
 | [`emplace_after`](forward_list/emplace_after.md) | 任意の位置への直接構築による要素挿入 | C++11 |
 | [`insert_after`](forward_list/insert_after.md) | 任意の位置への要素挿入 | C++11 |
+| [`insert_range_after`](forward_list/insert_range_after.md) | 任意の位置へRangeの要素挿入 | C++23 |
 | [`erase_after`](forward_list/erase_after.md) | 指定したイテレータの次の要素を削除する | C++11 |
 | [`swap`](forward_list/swap.md) | コンテナの交換 | C++11 |
 | [`resize`](forward_list/resize.md) | 要素数を変更する | C++11 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign_range -- add assign_range, insert_range_after and prepend_range to std::forward_list</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/assign_range.html"/>
      <id>d3eeb80c76c6cceb1e5b3ddef1a21e658ba14a3a:reference/forward_list/forward_list/assign_range.md</id>
      <updated>2024-08-11T17:10:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/assign_range.md b/reference/forward_list/forward_list/assign_range.md
new file mode 100644
index 000000000..bebec79a9
--- /dev/null
+++ b/reference/forward_list/forward_list/assign_range.md
@@ -0,0 +1,64 @@
+# assign_range
+* forward_list[meta header]
+* std[meta namespace]
+* forward_list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void assign_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を再代入する。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`forward_list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、再代入する。
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;forward_list&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::forward_list&amp;lt;int&amp;gt; fl = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを再代入
+  fl.assign_range(a);
+
+  for (int i : fl) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* assign_range[color ff0000]
+
+### 出力
+```
+4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`assign`](assign.md)                     | コンテナに値を代入する   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range_after -- add assign_range, insert_range_after and prepend_range to std::forward_list</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/insert_range_after.html"/>
      <id>d3eeb80c76c6cceb1e5b3ddef1a21e658ba14a3a:reference/forward_list/forward_list/insert_range_after.md</id>
      <updated>2024-08-11T17:10:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/insert_range_after.md b/reference/forward_list/forward_list/insert_range_after.md
new file mode 100644
index 000000000..150f9b3c1
--- /dev/null
+++ b/reference/forward_list/forward_list/insert_range_after.md
@@ -0,0 +1,61 @@
+# insert_range_after
+* forward_list[meta header]
+* std[meta namespace]
+* forward_list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+iterator insert_range_after(const_iterator pos, R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を任意の位置に挿入する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`forward_list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、`pos`の直後に挿入する。
+
+
+## 戻り値
+挿入されたRange`rg`の最後の要素を指すイテレータ。`rg`が空の場合は`pos`。
+
+
+## 例
+```cpp example
+#include &amp;lt;forward_list&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::forward_list&amp;lt;int&amp;gt; fl = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを１番目の直後に挿入
+  fl.insert_range_after(fl.begin(), a);
+
+  for (int i : fl) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* insert_range_after[color ff0000]
+
+### 出力
+```
+1 4 5 6 2 3
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert_after`](insert_after.md)         | 任意の位置への要素挿入   |
+| [`emplace_after`](emplace_after.md)       | 任意の位置への直接構築による要素挿入 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prepend_range -- add assign_range, insert_range_after and prepend_range to std::forward_list</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/prepend_range.html"/>
      <id>d3eeb80c76c6cceb1e5b3ddef1a21e658ba14a3a:reference/forward_list/forward_list/prepend_range.md</id>
      <updated>2024-08-11T17:10:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/prepend_range.md b/reference/forward_list/forward_list/prepend_range.md
new file mode 100644
index 000000000..9f714fb70
--- /dev/null
+++ b/reference/forward_list/forward_list/prepend_range.md
@@ -0,0 +1,57 @@
+# prepend_range
+* forward_list[meta header]
+* std[meta namespace]
+* forward_list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void prepend_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+先頭にRangeの要素を追加する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`forward_list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;forward_list&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::forward_list&amp;lt;int&amp;gt; fl = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを先頭に追加
+  fl.prepend_range(a);
+
+  for (int i : fl) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* prepend_range[color ff0000]
+
+### 出力
+```
+4 5 6 1 2 3 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_front`](push_front.md)             | 先頭に要素を追加する         |
+| [`emplace_front`](emplace_front.md)       | 先頭に要素を直接構築で追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>list -- add append_range, assign_range, insert_range and prepend_range to std::list</title>
      <link href="https://cpprefjp.github.io/reference/list/list.html"/>
      <id>1a35e93266f3576c084fc9b57381139f3820a3cd:reference/list/list.md</id>
      <updated>2024-08-11T17:08:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list.md b/reference/list/list.md
index 1dd285426..947414504 100644
--- a/reference/list/list.md
+++ b/reference/list/list.md
@@ -37,6 +37,7 @@ namespace std {
 | [`(destructor)`](list/op_destructor.md) | デストラクタ | |
 | [`operator=`](list/op_assign.md) | 代入演算子 | |
 | [`assign`](list/assign.md) | コンテナの再代入 | |
+| [`assign_range`](list/assign_range.md) | Rangeの要素を再代入 | C++23 |
 
 
 ### イテレータ
@@ -77,10 +78,13 @@ namespace std {
 |-----------------|--------------------------------|-------|
 | [`push_front`](list/push_front.md)       | 先頭に要素を追加する           | |
 | [`emplace_front`](list/emplace_front.md) | 先頭への直接構築による要素追加 | C++11 |
+| [`prepend_range`](list/prepend_range.md) | 先頭にRangeの要素を追加する   | C++23 |
 | [`push_back`](list/push_back.md)         | 末尾に要素を追加する           | |
 | [`emplace_back`](list/emplace_back.md)   | 末尾への直接構築による要素追加 | C++11 |
+| [`append_range`](list/append_range.md)   | 末尾にRangeの要素を追加する   | C++23 |
 | [`insert`](list/insert.md)               | 要素の挿入                     | |
 | [`emplace`](list/emplace.md)             | 要素の直接構築による挿入       | C++11 |
+| [`insert_range`](list/insert_range.md)   | 任意の位置にRangeの要素を挿入する | C++23 |
 | [`pop_front`](list/pop_front.md)         | 先頭から要素を削除             | |
 | [`pop_back`](list/pop_back.md)           | 末尾から要素を削除             | |
 | [`erase`](list/erase.md)                 | 要素の削除                     | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append_range -- add append_range, assign_range, insert_range and prepend_range to std::list</title>
      <link href="https://cpprefjp.github.io/reference/list/list/append_range.html"/>
      <id>1a35e93266f3576c084fc9b57381139f3820a3cd:reference/list/list/append_range.md</id>
      <updated>2024-08-11T17:08:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/append_range.md b/reference/list/list/append_range.md
new file mode 100644
index 000000000..9fd251269
--- /dev/null
+++ b/reference/list/list/append_range.md
@@ -0,0 +1,65 @@
+# append_range
+* list[meta header]
+* std[meta namespace]
+* list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void append_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの要素を末尾へ追加する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、末尾に追加する。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`とすると、`N`に比例。Tのコンストラクタは`N`回呼ばれる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;list&amp;gt;
+
+int main()
+{
+  std::list&amp;lt;int&amp;gt; lst = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを末尾に追加
+  lst.append_range(a);
+
+  for (int i : lst) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* append_range[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_back`](push_back.md)               | 末尾に要素を追加する         |
+| [`emplace_back`](emplace_back.md)         | 末尾に要素を直接構築で追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign_range -- add append_range, assign_range, insert_range and prepend_range to std::list</title>
      <link href="https://cpprefjp.github.io/reference/list/list/assign_range.html"/>
      <id>1a35e93266f3576c084fc9b57381139f3820a3cd:reference/list/list/assign_range.md</id>
      <updated>2024-08-11T17:08:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/assign_range.md b/reference/list/list/assign_range.md
new file mode 100644
index 000000000..6a73d61c4
--- /dev/null
+++ b/reference/list/list/assign_range.md
@@ -0,0 +1,64 @@
+# assign_range
+* list[meta header]
+* std[meta namespace]
+* list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void assign_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を再代入する。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、再代入する。
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;list&amp;gt;
+
+int main()
+{
+  std::list&amp;lt;int&amp;gt; lst = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを再代入
+  lst.assign_range(a);
+
+  for (int i : lst) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* assign_range[color ff0000]
+
+### 出力
+```
+4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`assign`](assign.md)                     | コンテナに値を代入する   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add append_range, assign_range, insert_range and prepend_range to std::list</title>
      <link href="https://cpprefjp.github.io/reference/list/list/insert_range.html"/>
      <id>1a35e93266f3576c084fc9b57381139f3820a3cd:reference/list/list/insert_range.md</id>
      <updated>2024-08-11T17:08:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/insert_range.md b/reference/list/list/insert_range.md
new file mode 100644
index 000000000..9e8f272a6
--- /dev/null
+++ b/reference/list/list/insert_range.md
@@ -0,0 +1,62 @@
+# insert_range
+* list[meta header]
+* std[meta namespace]
+* list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+iterator insert_range(const_iterator pos, R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を任意の位置に挿入する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、`pos`の直前に挿入する。
+
+
+## 戻り値
+挿入されたRange`rg`の最初の要素を指すイテレータ。`rg`が空の場合は`pos`。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;list&amp;gt;
+
+int main()
+{
+  std::list&amp;lt;int&amp;gt; lst = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを１番目と２番目の要素の間に挿入
+  lst.insert_range(std::next(lst.begin()), a);
+
+  for (int i : lst) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+1 4 5 6 2 3
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert`](insert.md)                     | 任意の位置に要素を挿入する         |
+| [`emplace`](emplace.md)                   | 任意の位置に要素を直接構築で挿入する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prepend_range -- add append_range, assign_range, insert_range and prepend_range to std::list</title>
      <link href="https://cpprefjp.github.io/reference/list/list/prepend_range.html"/>
      <id>1a35e93266f3576c084fc9b57381139f3820a3cd:reference/list/list/prepend_range.md</id>
      <updated>2024-08-11T17:08:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/prepend_range.md b/reference/list/list/prepend_range.md
new file mode 100644
index 000000000..6dca97b94
--- /dev/null
+++ b/reference/list/list/prepend_range.md
@@ -0,0 +1,65 @@
+# prepend_range
+* list[meta header]
+* std[meta namespace]
+* list[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void prepend_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+先頭にRangeの要素を追加する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`list`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、先頭に追加する。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`とすると、`N`に比例。Tのコンストラクタは`N`回呼ばれる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;list&amp;gt;
+
+int main()
+{
+  std::list&amp;lt;int&amp;gt; lst = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを先頭に追加
+  lst.prepend_range(a);
+
+  for (int i : lst) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* prepend_range[color ff0000]
+
+### 出力
+```
+4 5 6 1 2 3 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_front`](push_front.md)             | 先頭に要素を追加する         |
+| [`emplace_front`](emplace_front.md)       | 先頭に要素を直接構築で追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>deque -- add append_range, assign_range, insert_range and prepend_range to std::deque</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque.html"/>
      <id>774a74a79b885dc153f93a2be943b4c886907cf9:reference/deque/deque.md</id>
      <updated>2024-08-11T17:07:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque.md b/reference/deque/deque.md
index 466c3e65b..bda4249d4 100644
--- a/reference/deque/deque.md
+++ b/reference/deque/deque.md
@@ -48,6 +48,7 @@ namespace std {
 | [`(destructor)`](deque/op_destructor.md)         | デストラクタ   | |
 | [`operator=`](deque/op_assign.md)         | 代入演算子     | |
 | [`assign`](deque/assign.md)               | コンテナに値を代入する | |
+| [`assign_range`](deque/assign_range.md)   | コンテナにRangeの要素を代入する | C++23 |
 | [`get_allocator`](deque/get_allocator.md) | アロケータオブジェクトを取得する | |
 
 
@@ -92,11 +93,14 @@ namespace std {
 | [`clear`](deque/clear.md)                 | 全ての要素を削除する | |
 | [`insert`](deque/insert.md)               | 任意の位置に要素を挿入する | |
 | [`emplace`](deque/emplace.md)             | 任意の位置に要素を直接構築で挿入する | C++11 |
+| [`insert_range`](deque/insert_range.md)   | 任意の位置にRangeの要素を挿入する | C++23 |
 | [`push_back`](deque/push_back.md)         | 末尾に要素を追加する | |
 | [`emplace_back`](deque/emplace_back.md)   | 末尾に要素を直接構築で追加する | C++11 |
+| [`append_range`](deque/append_range.md)   | 末尾にRangeの要素を追加する | C++23 |
 | [`pop_back`](deque/pop_back.md)           | 末尾要素を削除する | |
 | [`push_front`](deque/push_front.md)       | 先頭に要素を追加する | |
 | [`emplace_front`](deque/emplace_front.md) | 先頭に要素を直接構築で追加する | C++11 |
+| [`prepend_range`](deque/prepend_range.md) | 先頭にRangeの要素を追加する | C++23 |
 | [`pop_front`](deque/pop_front.md)         | 先頭要素を削除する | |
 | [`resize`](deque/resize.md)               | 要素数を変更する | |
 | [`erase`](deque/erase.md)                 | 指定した要素を削除する | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append_range -- add append_range, assign_range, insert_range and prepend_range to std::deque</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/append_range.html"/>
      <id>774a74a79b885dc153f93a2be943b4c886907cf9:reference/deque/deque/append_range.md</id>
      <updated>2024-08-11T17:07:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/append_range.md b/reference/deque/deque/append_range.md
new file mode 100644
index 000000000..55c179eb6
--- /dev/null
+++ b/reference/deque/deque/append_range.md
@@ -0,0 +1,65 @@
+# append_range
+* deque[meta header]
+* std[meta namespace]
+* deque[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void append_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの要素を末尾へ追加する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`deque`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、末尾に追加する。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`とすると、`N`に比例。Tのコンストラクタは`N`回呼ばれる。
+
+
+## 例
+```cpp example
+#include &amp;lt;deque&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::deque&amp;lt;int&amp;gt; d = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを末尾に追加
+  d.append_range(a);
+
+  for (int i : d) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* append_range[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_back`](push_back.md)               | 末尾に要素を追加する         |
+| [`emplace_back`](emplace_back.md)         | 末尾に要素を直接構築で追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign_range -- add append_range, assign_range, insert_range and prepend_range to std::deque</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/assign_range.html"/>
      <id>774a74a79b885dc153f93a2be943b4c886907cf9:reference/deque/deque/assign_range.md</id>
      <updated>2024-08-11T17:07:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/assign_range.md b/reference/deque/deque/assign_range.md
new file mode 100644
index 000000000..195f38acd
--- /dev/null
+++ b/reference/deque/deque/assign_range.md
@@ -0,0 +1,64 @@
+# assign_range
+* deque[meta header]
+* std[meta namespace]
+* deque[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void assign_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を再代入する。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`deque`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、再代入する。
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;deque&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::deque&amp;lt;int&amp;gt; d = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを再代入
+  d.assign_range(a);
+
+  for (int i : d) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* assign_range[color ff0000]
+
+### 出力
+```
+4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`assign`](assign.md)                     | コンテナに値を代入する   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add append_range, assign_range, insert_range and prepend_range to std::deque</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/insert_range.html"/>
      <id>774a74a79b885dc153f93a2be943b4c886907cf9:reference/deque/deque/insert_range.md</id>
      <updated>2024-08-11T17:07:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/insert_range.md b/reference/deque/deque/insert_range.md
new file mode 100644
index 000000000..71de3fc2d
--- /dev/null
+++ b/reference/deque/deque/insert_range.md
@@ -0,0 +1,62 @@
+# insert_range
+* deque[meta header]
+* std[meta namespace]
+* deque[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+iterator insert_range(const_iterator pos, R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を任意の位置に挿入する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`deque`コンテナへの`EmplaceConstructible`であり、かつ型`T`が`MoveConstructible`・`MoveAssignable`・`Swappable`であること。
+
+
+## 効果
+Range`rg`の各要素を、`pos`の直前に挿入する。
+
+
+## 戻り値
+挿入されたRange`rg`の最初の要素を指すイテレータ。`rg`が空の場合は`pos`。
+
+
+## 例
+```cpp example
+#include &amp;lt;deque&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main()
+{
+  std::deque&amp;lt;int&amp;gt; d = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを１番目と２番目の要素の間に挿入
+  d.insert_range(std::next(d.begin()), a);
+
+  for (int i : d) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+1 4 5 6 2 3
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert`](insert.md)                     | 任意の位置に要素を挿入する         |
+| [`emplace`](emplace.md)                   | 任意の位置に要素を直接構築で挿入する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>prepend_range -- add append_range, assign_range, insert_range and prepend_range to std::deque</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/prepend_range.html"/>
      <id>774a74a79b885dc153f93a2be943b4c886907cf9:reference/deque/deque/prepend_range.md</id>
      <updated>2024-08-11T17:07:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/prepend_range.md b/reference/deque/deque/prepend_range.md
new file mode 100644
index 000000000..a5c67622e
--- /dev/null
+++ b/reference/deque/deque/prepend_range.md
@@ -0,0 +1,65 @@
+# prepend_range
+* deque[meta header]
+* std[meta namespace]
+* deque[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+void prepend_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+先頭にRangeの要素を追加する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`deque`コンテナへの`EmplaceConstructible`であること。
+
+
+## 効果
+Range`rg`の各要素を、先頭に追加する。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+`N =` [`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`とすると、`N`に比例。Tのコンストラクタは`N`回呼ばれる。
+
+
+## 例
+```cpp example
+#include &amp;lt;deque&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::deque&amp;lt;int&amp;gt; d = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを先頭に追加
+  d.prepend_range(a);
+
+  for (int i : d) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* prepend_range[color ff0000]
+
+### 出力
+```
+4 5 6 1 2 3 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_front`](push_front.md)             | 先頭に要素を追加する         |
+| [`emplace_front`](emplace_front.md)       | 先頭に要素を直接構築で追加する |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_string -- add append_range, assign_range and insert_range to std::string</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string.html"/>
      <id>e2d69e3d688ced5fc4f44851620756eb65fd6f25:reference/string/basic_string.md</id>
      <updated>2024-08-11T17:04:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string.md b/reference/string/basic_string.md
index ef2f425d9..8f4e693d3 100644
--- a/reference/string/basic_string.md
+++ b/reference/string/basic_string.md
@@ -117,8 +117,11 @@ namespace std {
 | [`operator+=`](basic_string/op_plus_assign.md)  | 文字／文字列を追加する                             |                |
 | [`append`](basic_string/append.md)              | 文字／文字列を追加する                             |                |
 | [`push_back`](basic_string/push_back.md)      | 末尾に要素を追加する                               |                |
+| [`append_range`](basic_string/append_range.md)  | Rangeの要素を末尾へ追加する                       | C++23          |
 | [`assign`](basic_string/assign.md)            | 文字列の再代入                                     |                |
+| [`assign_range`](basic_string/assign_range.md)  | Rangeの要素を再代入                              | C++23          |
 | [`insert`](basic_string/insert.md)            | 文字／文字列を挿入する                             |                |
+| [`insert_range`](basic_string/insert_range.md)  | Rangeの要素を挿入する                            | C++23          |
 | [`erase`](basic_string/erase.md)              | 要素を削除する                                     |                |
 | [`pop_back`](basic_string/pop_back.md)        | 末尾の1要素を削除する                              | C++11          |
 | [`replace`](basic_string/replace.md)          | 文字列の一部を置換する                             |                |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append_range -- add append_range, assign_range and insert_range to std::string</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/append_range.html"/>
      <id>e2d69e3d688ced5fc4f44851620756eb65fd6f25:reference/string/basic_string/append_range.md</id>
      <updated>2024-08-11T17:04:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/append_range.md b/reference/string/basic_string/append_range.md
new file mode 100644
index 000000000..63f3b7979
--- /dev/null
+++ b/reference/string/basic_string/append_range.md
@@ -0,0 +1,49 @@
+# append_range
+* string[meta header]
+* std[meta namespace]
+* basic_string[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;charT&amp;gt; R&amp;gt;
+constexpr void append_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの要素を末尾へ追加する。
+
+
+## 効果
+[`append`](append.md)`(basic_string(`[`from_range`](../../ranges/from_range_t.md)`, `[`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg), `[`get_allocator()`](get_allocator.md)`));`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::string s = &amp;#34;str&amp;#34;;
+  const char a[3] = {&amp;#39;i&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;g&amp;#39;};
+
+  // Rangeを末尾に追加
+  s.append_range(a);
+
+  std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
+}
+```
+* append_range[color ff0000]
+
+### 出力
+```
+string
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_back`](push_back.md)               | 末尾へ要素追加         |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign_range -- add append_range, assign_range and insert_range to std::string</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/assign_range.html"/>
      <id>e2d69e3d688ced5fc4f44851620756eb65fd6f25:reference/string/basic_string/assign_range.md</id>
      <updated>2024-08-11T17:04:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/assign_range.md b/reference/string/basic_string/assign_range.md
new file mode 100644
index 000000000..216a6f93a
--- /dev/null
+++ b/reference/string/basic_string/assign_range.md
@@ -0,0 +1,53 @@
+# assign_range
+* string[meta header]
+* std[meta namespace]
+* basic_string[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;charT&amp;gt; R&amp;gt;
+constexpr basic_string&amp;amp; assign_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を再代入する。
+
+
+## 効果
+`return ` [`assign`](assign.md)`(basic_string(`[`from_range`](../../ranges/from_range_t.md)`, `[`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg), `[`get_allocator()`](get_allocator.md)`));`
+
+
+## 戻り値
+`*this`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::string s = &amp;#34;str&amp;#34;;
+  const char a[3] = {&amp;#39;i&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;g&amp;#39;};
+
+  // Rangeを再代入
+  s.assign_range(a);
+
+  std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
+}
+```
+* assign_range[color ff0000]
+
+### 出力
+```
+ing
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`assign`](assign.md)                     | コンテナの再代入        |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add append_range, assign_range and insert_range to std::string</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/insert_range.html"/>
      <id>e2d69e3d688ced5fc4f44851620756eb65fd6f25:reference/string/basic_string/insert_range.md</id>
      <updated>2024-08-11T17:04:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/insert_range.md b/reference/string/basic_string/insert_range.md
new file mode 100644
index 000000000..6197d501c
--- /dev/null
+++ b/reference/string/basic_string/insert_range.md
@@ -0,0 +1,54 @@
+# insert_range
+* string[meta header]
+* std[meta namespace]
+* basic_string[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;charT&amp;gt; R&amp;gt;
+constexpr iterator insert_range(const_iterator pos, R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を任意の位置に挿入する。
+
+
+## 効果
+`return ` [`insert`](insert.md)`(pos, basic_string(`[`from_range`](../../ranges/from_range_t.md)`, `[`forward`](../../utility/forward.md)`&amp;lt;R&amp;gt;(rg), `[`get_allocator()`](get_allocator.md)`));`
+
+
+## 戻り値
+挿入されたRange`rg`の最初の要素を指すイテレータ。`rg`が空の場合は`pos`。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::string s = &amp;#34;str&amp;#34;;
+  const char a[3] = {&amp;#39;i&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;g&amp;#39;};
+
+  // Rangeを１番目と２番目の要素の間に挿入
+  s.insert_range(std::next(s.begin()), a);
+
+  std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+singtr
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert`](insert.md)                     | 要素の挿入             |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector -- add append_range, assign_range and insert_range to std::vector</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector.html"/>
      <id>1276fca74674bb2f54108a79e630d3ec65037855:reference/vector/vector.md</id>
      <updated>2024-08-11T17:03:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector.md b/reference/vector/vector.md
index 725ca5847..c98058e9b 100644
--- a/reference/vector/vector.md
+++ b/reference/vector/vector.md
@@ -100,11 +100,14 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |--------------------------------------------|------------------|-------|
 | [`assign`](vector/assign.md)             | コンテナの再代入 | |
+| [`assign_range`](vector/assign_range.md) | Rangeの要素を再代入 | C++23 |
 | [`push_back`](vector/push_back.md)       | 末尾へ要素追加 | |
 | [`emplace_back`](vector/emplace_back.md) | 末尾へ直接構築 | C++11 |
+| [`append_range`](vector/append_range.md) | Rangeの要素を末尾へ追加 | C++23 |
 | [`pop_back`](vector/pop_back.md)         | 末尾から要素削除 | |
 | [`insert`](vector/insert.md)             | 要素の挿入 | |
 | [`emplace`](vector/emplace.md)           | 要素の直接構築による挿入 | C++11 |
+| [`insert_range`](vector/insert_range.md) | Rangeの要素を挿入 | C++23 |
 | [`erase`](vector/erase.md)               | 要素の削除 | |
 | [`swap`](vector/swap.md)                 | コンテナの交換 | |
 | [`clear`](vector/clear.md)               | 全要素削除 | |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append_range -- add append_range, assign_range and insert_range to std::vector</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/append_range.html"/>
      <id>1276fca74674bb2f54108a79e630d3ec65037855:reference/vector/vector/append_range.md</id>
      <updated>2024-08-11T17:03:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/append_range.md b/reference/vector/vector/append_range.md
new file mode 100644
index 000000000..8e95fa7d2
--- /dev/null
+++ b/reference/vector/vector/append_range.md
@@ -0,0 +1,65 @@
+# append_range
+* vector[meta header]
+* std[meta namespace]
+* vector[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+constexpr void append_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの要素を末尾へ追加する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`vector`コンテナへの`EmplaceConstructible`かつ`MoveInsertable`であること。
+
+
+## 効果
+Range`rg`の各要素を、末尾に追加する。
+
+
+## 戻り値
+なし
+
+
+## 計算量
+要素を追加した後の[`size()`](size.md)が要素を追加する前の[`capacity()`](capacity.md)よりも大きい場合は領域の再確保が生じ、要素を追加した後の[`size()`](size.md)に比例する。領域の再確保が発生しない場合は、[`ranges::distance`](../../iterator/ranges_distance.md)`(rg)`に比例する。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main()
+{
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを末尾に追加
+  v.append_range(a);
+
+  for (int i : v) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* append_range[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`push_back`](push_back.md)               | 末尾へ要素追加         |
+| [`emplace_back`](emplace_back.md)         | 末尾へ直接構築         |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign_range -- add append_range, assign_range and insert_range to std::vector</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/assign_range.html"/>
      <id>1276fca74674bb2f54108a79e630d3ec65037855:reference/vector/vector/assign_range.md</id>
      <updated>2024-08-11T17:03:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/assign_range.md b/reference/vector/vector/assign_range.md
new file mode 100644
index 000000000..85f4f4bf1
--- /dev/null
+++ b/reference/vector/vector/assign_range.md
@@ -0,0 +1,64 @@
+# assign_range
+* vector[meta header]
+* std[meta namespace]
+* vector[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+constexpr void assign_range(R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を再代入する。
+
+
+## 事前条件
+`*this` の要素の範囲と Range`rg` の要素の範囲が重複していないこと
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`vector`コンテナへの`EmplaceConstructible`であること。また、`R`が[`ranges::sized_range`](../../ranges/sized_range.md)でも[`ranges::forward_range`](../../ranges/forward_range.md)でもないなら、コンテナへの`MoveInsertable`であること。
+
+
+## 効果
+Range`rg`の各要素を、再代入する。
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main()
+{
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを再代入
+  v.assign_range(a);
+
+  for (int i : v) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* assign_range[color ff0000]
+
+### 出力
+```
+4 5 6 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`assign`](assign.md)                     | コンテナの再代入        |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert_range -- add append_range, assign_range and insert_range to std::vector</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/insert_range.html"/>
      <id>1276fca74674bb2f54108a79e630d3ec65037855:reference/vector/vector/insert_range.md</id>
      <updated>2024-08-11T17:03:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/insert_range.md b/reference/vector/vector/insert_range.md
new file mode 100644
index 000000000..3485ba0ef
--- /dev/null
+++ b/reference/vector/vector/insert_range.md
@@ -0,0 +1,62 @@
+# insert_range
+* vector[meta header]
+* std[meta namespace]
+* vector[meta class]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+template &amp;lt;container-compatible-range&amp;lt;T&amp;gt; R&amp;gt;
+constexpr iterator insert_range(const_iterator pos, R&amp;amp;&amp;amp; rg); // C++23
+```
+
+## 概要
+Rangeの各要素を任意の位置に挿入する。
+
+
+## テンプレートパラメータ制約
+型`T`が`*ranges::begin(rg)`から`vector`コンテナへの`EmplaceConstructible`であり、かつ型`T`が`MoveConstructible`・`MoveAssignable`・`Swappable`であること。
+
+
+## 効果
+Range`rg`の各要素を、`pos`の直前に挿入する。
+
+
+## 戻り値
+挿入されたRange`rg`の最初の要素を指すイテレータ。`rg`が空の場合は`pos`。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main()
+{
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  const int a[3] = {4, 5, 6};
+
+  // Rangeを１番目と２番目の要素の間に挿入
+  v.insert_range(std::next(v.begin()), a);
+
+  for (int i : v) {
+    std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* insert_range[color ff0000]
+
+### 出力
+```
+1 4 5 6 2 3 
+```
+
+
+## 関連項目
+
+| 名前                                      | 説明                  |
+|-------------------------------------------|----------------------|
+| [`insert`](insert.md)                     | 要素の挿入             |
+| [`emplace`](emplace.md)                   | 要素の直接構築による挿入 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
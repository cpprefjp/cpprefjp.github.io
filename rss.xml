<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-26T02:23:12.011947</updated>
  <id>5020ebc5-2830-4e41-87b4-2c0d5e88b931</id>

  
    <entry>
      <title>iter_swap -- common_iterator::iter_swap 表示調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/iter_swap.html"/>
      <id>b06b613b985c11fd864de3c5a5e9f4a519bbc299:reference/iterator/common_iterator/iter_swap.md</id>
      <updated>2020-11-26T11:19:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/iter_swap.md b/reference/iterator/common_iterator/iter_swap.md
index 03a278d80..cdcfd15fc 100644
--- a/reference/iterator/common_iterator/iter_swap.md
+++ b/reference/iterator/common_iterator/iter_swap.md
@@ -11,8 +11,8 @@ namespace std {
   class common_iterator {
 
     template&amp;lt;indirectly_swappable&amp;lt;I&amp;gt; I2, class S2&amp;gt;
-  friend void iter_swap(const common_iterator&amp;amp; x, const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y)
-    noexcept(noexcept(ranges::iter_swap(declval&amp;lt;const I&amp;amp;&amp;gt;(), declval&amp;lt;const I2&amp;amp;&amp;gt;())));
+    friend void iter_swap(const common_iterator&amp;amp; x, const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y)
+      noexcept(noexcept(ranges::iter_swap(declval&amp;lt;const I&amp;amp;&amp;gt;(), declval&amp;lt;const I2&amp;amp;&amp;gt;())));
   };
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_iterator -- common_iterator : iter_move/swap追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator.html"/>
      <id>de5c16cd4a715476075f48a28eec9085131083b4:reference/iterator/common_iterator.md</id>
      <updated>2020-11-26T11:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator.md b/reference/iterator/common_iterator.md
index ee5b89309..140b32bd3 100644
--- a/reference/iterator/common_iterator.md
+++ b/reference/iterator/common_iterator.md
@@ -66,8 +66,8 @@ namespace std {
 | [`operator==`](common_iterator/op_equal.md)         | 等値比較 | C++20 |
 | `operator!=`     | 非等値比較 (`==`により使用可能) | C++20 |
 | [`operator-`](common_iterator/op_minus.md)          | 2つの`common_iterator`の差を求める | C++20 |
-| [`iter_move`](common_iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++20 |
-| [`iter_swap`](common_iterator/iter_swap.md.nolink)     | イテレータの要素の交換 | C++20 |
+| [`iter_move`](common_iterator/iter_move.md)     | イテレータの要素の移動 | C++20 |
+| [`iter_swap`](common_iterator/iter_swap.md)     | イテレータの要素の交換 | C++20 |
 
 ## `iterator_traits`の型
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_move -- common_iterator : iter_move/swap追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/iter_move.html"/>
      <id>de5c16cd4a715476075f48a28eec9085131083b4:reference/iterator/common_iterator/iter_move.md</id>
      <updated>2020-11-26T11:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/iter_move.md b/reference/iterator/common_iterator/iter_move.md
new file mode 100644
index 000000000..e69b9b462
--- /dev/null
+++ b/reference/iterator/common_iterator/iter_move.md
@@ -0,0 +1,96 @@
+# iter_move
+* iterator[meta header]
+* std[meta namespace]
+* common_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+  class common_iterator {
+
+    friend iter_rvalue_reference_t&amp;lt;I&amp;gt; iter_move(const common_iterator&amp;amp; i)
+      noexcept(noexcept(ranges::iter_move(declval&amp;lt;const I&amp;amp;&amp;gt;())))
+        requires input_iterator&amp;lt;I&amp;gt;;
+  };
+}
+```
+* input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* iter_rvalue_reference_t[link /reference/iterator/iter_rvalue_reference_t.md]
+* ranges::iter_move[link /reference/iterator/iter_move.md.nolink]
+* input_iterator[link /reference/iterator/input_iterator.md]
+
+## 概要
+
+`common_iterator`の指す要素をムーブする。
+
+## 事前条件
+
+[`holds_alternative`](/reference/variant/holds_alternative.md)`&amp;lt;I&amp;gt;(i.v_) == true`であること。
+
+## 効果
+
+以下と等価
+
+```cpp
+return ranges::iter_move(get&amp;lt;I&amp;gt;(i.v_));
+```
+* ranges::iter_move[link /reference/iterator/iter_move.md.nolink]
+
+## 備考
+
+この関数は`move_iterator`のクラス定義内で`friend`関数として定義される。そのため、メンバ関数としても非メンバ関数としても明示的に呼び出すことはできず、ADLによってのみ呼び出すことができる。  
+基本的には[`ranges::iter_move`](/reference/iterator/iter_move.md.nolink)カスタマイゼーションポイントオブジェクトを通して利用する。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+
+  // common_iteratorを通すことでイテレータ型と番兵型を合わせる
+  using CI = std::common_iterator&amp;lt;std::counted_iterator&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;, std::default_sentinel_t&amp;gt;;
+
+  CI ci{std::counted_iterator{std::ranges::begin(vec), 5}};
+
+  // ADLによる呼び出し
+  int n1 = iter_move(ci);
+  std::cout &amp;lt;&amp;lt; n1 &amp;lt;&amp;lt; std::endl;
+  
+  ++ci;
+
+  // ranges::iter_move CPOによる呼び出し
+  int n2 = std::ranges::iter_move(ci);
+  std::cout &amp;lt;&amp;lt; n2 &amp;lt;&amp;lt; std::endl;
+}
+```
+* iter_move[color ff0000]
+* ranges::iter_move[link /reference/iterator/iter_move.md.nolink]
+
+### 出力
+```
+1
+2
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 関連項目
+
+- [`ranges::iter_move`](/reference/iterator/iter_move.md.nolink)
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_swap -- common_iterator : iter_move/swap追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/iter_swap.html"/>
      <id>de5c16cd4a715476075f48a28eec9085131083b4:reference/iterator/common_iterator/iter_swap.md</id>
      <updated>2020-11-26T11:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/iter_swap.md b/reference/iterator/common_iterator/iter_swap.md
new file mode 100644
index 000000000..03a278d80
--- /dev/null
+++ b/reference/iterator/common_iterator/iter_swap.md
@@ -0,0 +1,105 @@
+# iter_swap
+* iterator[meta header]
+* std[meta namespace]
+* common_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+  class common_iterator {
+
+    template&amp;lt;indirectly_swappable&amp;lt;I&amp;gt; I2, class S2&amp;gt;
+  friend void iter_swap(const common_iterator&amp;amp; x, const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y)
+    noexcept(noexcept(ranges::iter_swap(declval&amp;lt;const I&amp;amp;&amp;gt;(), declval&amp;lt;const I2&amp;amp;&amp;gt;())));
+  };
+}
+```
+* move_iterator[link /reference/iterator/move_iterator.md]
+* indirectly_swappable[link /reference/iterator/indirectly_swappable.md]
+* ranges::iter_move[link /reference/iterator/iter_move.md.nolink]
+
+## 概要
+
+2つの`common_iterator`の指す要素を交換する。
+
+## 事前条件
+
+[`holds_alternative`](/reference/variant/holds_alternative.md)`&amp;lt;I&amp;gt;(x.v_)`、[`holds_alternative`](/reference/variant/holds_alternative.md)`&amp;lt;I2&amp;gt;(y.v_)`はどちらも`true`であること。
+
+## 効果
+
+以下と等価
+
+```cpp
+return ranges::iter_swap(get&amp;lt;I&amp;gt;(x.v_), get&amp;lt;I2&amp;gt;(y.v_));
+```
+* ranges::iter_swap[link /reference/iterator/iter_swap.md.nolink]
+
+## 備考
+
+この関数は`common_iterator`のクラス定義内で`friend`関数として定義される。そのため、メンバ関数としても非メンバ関数としても明示的に呼び出すことはできず、ADLによってのみ呼び出すことができる。 
+基本的には[`ranges::iter_swap`](/reference/iterator/iter_swap.md.nolink)カスタマイゼーションポイントオブジェクトを通して利用する。
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1 = {1, 2, 3, 4, 5};
+  std::vector&amp;lt;int&amp;gt; v2 = {6, 7, 8, 9, 10};
+
+  // common_iteratorを通すことでイテレータ型と番兵型を合わせる
+  using CI = std::common_iterator&amp;lt;std::counted_iterator&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;, std::default_sentinel_t&amp;gt;;
+
+  CI ci1{std::counted_iterator{std::ranges::begin(v1), 2}};
+  CI ci2{std::counted_iterator{std::ranges::begin(v2), 2}};
+
+  // ADLによる呼び出し
+  iter_swap(ci1, ci2);
+
+  ++ci1;
+  ++ci2;
+
+  // ranges::iter_swap CPOによる呼び出し
+  std::ranges::iter_swap(ci1, ci2);
+
+  for (int n : v1) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+  }
+
+  std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  for (int n : v2) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+  }
+}
+```
+* iter_swap[color ff0000]
+* ranges::iter_swap[link /reference/iterator/iter_swap.md.nolink]
+
+### 出力
+```
+6 7 3 4 5 
+1 2 8 9 10
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 関連項目
+
+- [`ranges::iter_swap`](/reference/iterator/iter_swap.md.nolink)
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- common_iterator : iter_move/swap追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/op_equal.html"/>
      <id>de5c16cd4a715476075f48a28eec9085131083b4:reference/iterator/common_iterator/op_equal.md</id>
      <updated>2020-11-26T11:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/op_equal.md b/reference/iterator/common_iterator/op_equal.md
index 3b44f3c51..786862293 100644
--- a/reference/iterator/common_iterator/op_equal.md
+++ b/reference/iterator/common_iterator/op_equal.md
@@ -29,7 +29,7 @@ namespace std {
 
 ## 事前条件
 
-`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`、`y.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`はどちらも`false`であること。
+`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception.md)`()`、`y.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception.md)`()`はどちらも`false`であること。
 
 ## 戻り値
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- -- common_iterator : iter_move/swap追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/op_minus.html"/>
      <id>de5c16cd4a715476075f48a28eec9085131083b4:reference/iterator/common_iterator/op_minus.md</id>
      <updated>2020-11-26T11:13:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/op_minus.md b/reference/iterator/common_iterator/op_minus.md
index b7c5179d6..ac6ad56ad 100644
--- a/reference/iterator/common_iterator/op_minus.md
+++ b/reference/iterator/common_iterator/op_minus.md
@@ -17,6 +17,7 @@ namespace std {
 }
 ```
 * input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
 * sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
 * iter_difference_t[link /reference/iterator/iter_difference_t.md]
 
@@ -26,7 +27,7 @@ namespace std {
 
 ## 事前条件
 
-`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`、`y.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`はどちらも`false`であること。
+`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception.md)`()`、`y.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception.md)`()`はどちらも`false`であること。
 
 ## 戻り値
 
@@ -69,8 +70,8 @@ int main() {
 ```
 1
 -1
--9
-9
+-4
+4
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_iterator -- common_iterator : operator-追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator.html"/>
      <id>3c2fb14d4145179cee775c3943a53c77b7495a20:reference/iterator/common_iterator.md</id>
      <updated>2020-11-26T10:31:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator.md b/reference/iterator/common_iterator.md
index b16b6366a..ee5b89309 100644
--- a/reference/iterator/common_iterator.md
+++ b/reference/iterator/common_iterator.md
@@ -65,7 +65,7 @@ namespace std {
 |------------------------------------------------------|-------------|-------|
 | [`operator==`](common_iterator/op_equal.md)         | 等値比較 | C++20 |
 | `operator!=`     | 非等値比較 (`==`により使用可能) | C++20 |
-| [`operator-`](common_iterator/op_minus.md.nolink)          | 2つの`common_iterator`の差を求める | C++20 |
+| [`operator-`](common_iterator/op_minus.md)          | 2つの`common_iterator`の差を求める | C++20 |
 | [`iter_move`](common_iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++20 |
 | [`iter_swap`](common_iterator/iter_swap.md.nolink)     | イテレータの要素の交換 | C++20 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator- -- common_iterator : operator-追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/op_minus.html"/>
      <id>3c2fb14d4145179cee775c3943a53c77b7495a20:reference/iterator/common_iterator/op_minus.md</id>
      <updated>2020-11-26T10:31:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/op_minus.md b/reference/iterator/common_iterator/op_minus.md
new file mode 100644
index 000000000..b7c5179d6
--- /dev/null
+++ b/reference/iterator/common_iterator/op_minus.md
@@ -0,0 +1,86 @@
+# operator-
+* iterator[meta header]
+* std[meta namespace]
+* common_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
+  class common_iterator {
+
+    template&amp;lt;sized_sentinel_for&amp;lt;I&amp;gt; I2, sized_sentinel_for&amp;lt;I&amp;gt; S2&amp;gt;
+      requires sized_sentinel_for&amp;lt;S, I2&amp;gt;
+    friend iter_difference_t&amp;lt;I2&amp;gt; operator-(const common_iterator&amp;amp; x, const common_iterator&amp;lt;I2, S2&amp;gt;&amp;amp; y);
+  };
+}
+```
+* input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+
+## 概要
+
+2つの`common_iterator`間の距離を求める。
+
+## 事前条件
+
+`x.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`、`y.v_.`[`valueless_by_exception`](/reference/variant/variant/valueless_by_exception)`()`はどちらも`false`であること。
+
+## 戻り値
+
+`I, S`（`I2, S2`）の値のどちらかを[`variant&amp;lt;I, S&amp;gt;`](/reference/variant/variant.md)型のメンバ変数`_v`に保持しており、`i = x.v_.`[`index()`](/reference/variant/variant/index.md)、`j = y.v_.`[`index()`](/reference/variant/variant/index.md)として、次のどちらか。
+
+- `i, j`がどちらも`1`の場合 : `0`
+- それ以外の場合 : `get&amp;lt;i&amp;gt;(x.v_) - get&amp;lt;j&amp;gt;(y.v_)`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+
+  // common_iteratorを通すことでイテレータ型と番兵型を合わせる
+  using CI = std::common_iterator&amp;lt;std::counted_iterator&amp;lt;std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;, std::default_sentinel_t&amp;gt;;
+
+  CI ci{std::counted_iterator{std::ranges::begin(vec), 5}};
+  CI ce{std::default_sentinel};
+  auto ci2 = ci++;
+
+  // イテレータとイテレータ
+  std::cout &amp;lt;&amp;lt; (ci - ci2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (ci2 - ci) &amp;lt;&amp;lt; std::endl;
+
+  // イテレータと番兵
+  std::cout &amp;lt;&amp;lt; (ci - ce) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; (ce - ci) &amp;lt;&amp;lt; std::endl;
+}
+```
+* counted_iterator[link /reference/iterator/counted_iterator.md.nolink]
+* default_sentinel_t[link /reference/iterator/default_sentinel_t.md.nolink]
+* default_sentinel[link /reference/iterator/default_sentinel_t.md.nolink]
+
+### 出力
+```
+1
+-1
+-9
+9
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 9
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- filesystem_error : エラー理由文字列の事後条件を変更</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/filesystem_error/op_constructor.html"/>
      <id>71950072d2918215adff5913dbe194014320e67e:reference/filesystem/filesystem_error/op_constructor.md</id>
      <updated>2020-11-26T07:48:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/filesystem_error/op_constructor.md b/reference/filesystem/filesystem_error/op_constructor.md
index a2e8bf6c6..45c30a329 100644
--- a/reference/filesystem/filesystem_error/op_constructor.md
+++ b/reference/filesystem/filesystem_error/op_constructor.md
@@ -30,20 +30,26 @@ filesystem_error(const string&amp;amp; what_arg,
 
 ## 事後条件
 - (1) :
-    - [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
     - [`code()`](code.md)メンバ関数の戻り値 : `ec`
     - [`path1()`](path1.md)メンバ関数の戻り値 : 空のパス
     - [`path2()`](path2.md)メンバ関数の戻り値 : 空のパス
+    - エラー理由の文字列：
+        - C++17 : [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
+        - C++20 : [`string_view`](/reference/string_view/basic_string_view.md)`(`[`what()`](what.md)`).`[`find`](/reference/string_view/basic_string_view/find.md)`(what_arg.`[`c_str()`](/reference/string/basic_string/c_str.md)`) != string_view::npos`
 - (2) :
-    - [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
     - [`code()`](code.md)メンバ関数の戻り値 : `ec`
     - [`path1()`](path1.md)メンバ関数の戻り値 : コピーされた`p1`への参照
     - [`path2()`](path2.md)メンバ関数の戻り値 : 空のパス
+    - エラー理由の文字列：
+        - C++17 : [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
+        - C++20 : [`string_view`](/reference/string_view/basic_string_view.md)`(`[`what()`](what.md)`).`[`find`](/reference/string_view/basic_string_view/find.md)`(what_arg.`[`c_str()`](/reference/string/basic_string/c_str.md)`) != string_view::npos`
 - (3) :
-    - [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
     - [`code()`](code.md)メンバ関数の戻り値 : `ec`
     - [`path1()`](path1.md)メンバ関数の戻り値 : コピーされた`p1`への参照
     - [`path2()`](path2.md)メンバ関数の戻り値 : コピーされた`p2`への参照
+    - エラー理由の文字列：
+        - C++17 : [`what()`](what.md)メンバ関数の戻り値 : `what_arg.c_str()`
+        - C++20 : [`string_view`](/reference/string_view/basic_string_view.md)`(`[`what()`](what.md)`).`[`find`](/reference/string_view/basic_string_view/find.md)`(what_arg.`[`c_str()`](/reference/string/basic_string/c_str.md)`) != string_view::npos`
 
 
 ## 例
@@ -111,3 +117,8 @@ filesystem error: can&amp;#39;t copy file. source file doesn&amp;#39;t found: No such file or di
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 4.8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [LWG Issue `system_error` and `filesystem_error` constructors taking a `string` may not be able to meet their postconditions](https://wg21.cmeerw.net/lwg/issue3112)
+    - C++20でのエラー理由文字列の事後条件が、指定したエラー理由文字列を直接要求するのではなく、それを含んでいることを要求するように変更された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_lock_free -- atomic_ref::is_lock_free : 対象を「オブジェクト」から「`atomic_ref&lt;T&gt;`型のすべてのオブジェクト」に変更</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/is_lock_free.html"/>
      <id>64d25f77c5664c4cf58e2a65c5538ab7d2ee050b:reference/atomic/atomic_ref/is_lock_free.md</id>
      <updated>2020-11-26T07:17:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/is_lock_free.md b/reference/atomic/atomic_ref/is_lock_free.md
index 2978f604f..b748904c4 100644
--- a/reference/atomic/atomic_ref/is_lock_free.md
+++ b/reference/atomic/atomic_ref/is_lock_free.md
@@ -14,7 +14,7 @@ bool is_lock_free() const noexcept;
 
 
 ## 戻り値
-オブジェクトに対する操作がロックフリーに振る舞えるなら`true`、そうでなければ`false`を返す。
+`atomic_ref&amp;lt;T&amp;gt;`型のすべてのオブジェクトに対する操作がロックフリーに振る舞えるなら`true`、そうでなければ`false`を返す。
 
 `false`を返す場合は、ロックで実装されることを意味する。
 
@@ -60,3 +60,7 @@ atomic_ref&amp;lt;int&amp;gt; is lock-free
 - [GCC](/implementation.md#gcc): 10.1
 - [Visual C++](/implementation.md#visual_cpp): ??
 
+
+## 参照
+- [P1960R0 NB Comment Changes Reviewed by SG1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1960r0.html)
+    - 対象を「オブジェクト」から「`atomic_ref&amp;lt;T&amp;gt;`型のすべてのオブジェクト」に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
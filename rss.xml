<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-07-20T14:21:23.188480</updated>
  <id>9b55596e-09f9-4e6e-9457-0d69a8b1fc61</id>

  
    <entry>
      <title>set_intersection -- Update ranges_set_intersection.md</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_set_intersection.html"/>
      <id>c6ea16228c8917d42a04c3ed5214f71f9ee99417:reference/algorithm/ranges_set_intersection.md</id>
      <updated>2022-07-20T23:16:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_set_intersection.md b/reference/algorithm/ranges_set_intersection.md
index 4883aaa17..bcea585c4 100644
--- a/reference/algorithm/ranges_set_intersection.md
+++ b/reference/algorithm/ranges_set_intersection.md
@@ -72,7 +72,6 @@ set_intersection_result {
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;set&amp;gt;
 #include &amp;lt;algorithm&amp;gt;
-#include &amp;lt;iterator&amp;gt;
 
 int main()
 {
@@ -81,7 +80,7 @@ int main()
   std::multiset&amp;lt;int&amp;gt; result;
 
   // aとbの積集合を作る
-  std::set_intersection(a, b, std::inserter(result, result.end()));
+  std::ranges::set_intersection(a, b, std::inserter(result, result.end()));
 
   for (int x : result) {
     std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>pea-sys</name>
        <email>49807271+pea-sys@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- lower_bound : setについては専用のメンバ関数を使うことを記載</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/lower_bound.html"/>
      <id>5ac9b350f13ba565bc55a4d87b70a0247df2c9d5:reference/algorithm/lower_bound.md</id>
      <updated>2022-07-20T15:06:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/lower_bound.md b/reference/algorithm/lower_bound.md
index 2449a80c4..3b343c2ce 100644
--- a/reference/algorithm/lower_bound.md
+++ b/reference/algorithm/lower_bound.md
@@ -66,6 +66,7 @@ namespace std {
 
 
 ## 備考
+- [`std::set`](/reference/set/set.md)や[`std::multiset`](/reference/set/multiset.md)に対しては専用の[`lower_bound`](/reference/set/set/lower_bound.md)メンバ関数が定義されているため、そちらを使用すること
 - 本関数は、本質的に C++11 で追加された [`partition_point`](partition_point.md) と等価である。  
 	具体的には、[`partition_point`](partition_point.md)`(first, last, [value](const T&amp;amp; e) { return e &amp;lt; value; })`、あるいは、[`partition_point`](partition_point.md)`(first, last, [value, comp](const T&amp;amp; e) { return comp(e, value); })` とすることで等価の結果が得られる。
 - 本関数の要件は、上記の通り C++03 までの方が C++11 よりも厳しい。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_backward -- Merge pull request #983 from pea-sys/patch-1</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_copy_backward.html"/>
      <id>35b5794806a9d0b4b386a7e3ca1c21d39278a6e8:reference/algorithm/ranges_copy_backward.md</id>
      <updated>2022-07-20T13:13:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_copy_backward.md b/reference/algorithm/ranges_copy_backward.md
index 3cbeaf640..653eaa176 100644
--- a/reference/algorithm/ranges_copy_backward.md
+++ b/reference/algorithm/ranges_copy_backward.md
@@ -62,20 +62,19 @@ copy_backward_result {
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;list&amp;gt;
-#include &amp;lt;iterator&amp;gt;
 
 int main() {
   std::list&amp;lt;int&amp;gt; ls = { 1,2,3,4,5 };
   // 1,2,3 の範囲を、3,4,5 の値のある範囲へコピーする
-  std::copy_backward(ls.begin(), std::next(ls.begin(), 3), ls.end());
+  std::ranges::copy_backward(ls.begin(), std::next(ls.begin(), 3), ls.end());
 
   // 以下のコードだと期待した結果にならないことを確認しよう
-  // std::copy(ls.begin(), std::next(ls.begin(), 3), std::next(ls.begin(), 2));
+  // std::ranges::copy(ls.begin(), std::next(ls.begin(), 3), std::next(ls.begin(), 2));
 
-  std::copy(ls.begin(), ls.end(), std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
+  std::ranges::copy(ls.begin(), ls.end(), std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
 }
 ```
-* std::copy_backward[color ff0000]
+* std::ranges::copy_backward[color ff0000]
 * ls.begin()[link /reference/list/list/begin.md]
 * std::next[link /reference/iterator/next.md]
 * ls.end()[link /reference/list/list/end.md]
@@ -86,18 +85,6 @@ int main() {
 ```
 
 
-## 実装例
-```cpp
-template &amp;lt;class BidirectionalIterator1, class BidirectionalIterator2&amp;gt;
-BidirectionalIterator2 copy_backward(BidirectionalIterator1 first,
-                                     BidirectionalIterator1 last,
-                                     BidirectionalIterator2 result) {
-  while (first != last)
-    *--result = *--last;
-  return result;
-}
-```
-
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>three_way_comparable -- three_way_comparable : 意味論要件修正</title>
      <link href="https://cpprefjp.github.io/reference/compare/three_way_comparable.html"/>
      <id>cc5a6954ce45004dd8752bcf3431f835d84b5ea4:reference/compare/three_way_comparable.md</id>
      <updated>2022-07-20T02:24:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/compare/three_way_comparable.md b/reference/compare/three_way_comparable.md
index a4e0a7455..72320ca38 100644
--- a/reference/compare/three_way_comparable.md
+++ b/reference/compare/three_way_comparable.md
@@ -91,7 +91,7 @@ concept three_way_comparable_with =
 - (1) : `const remove_reference_t&amp;lt;T&amp;gt;`の左辺値`a, b`について次の条件を満たす場合に限って、型`T, Cat`は`three_way_comparable`のモデルである
     - `(a &amp;lt;=&amp;gt; b == 0) == bool(a == b)`が`true`であること
     - `(a &amp;lt;=&amp;gt; b != 0) == bool(a != b)`が`true`であること
-    - `((a &amp;lt;=&amp;gt; b) &amp;lt;=&amp;gt; 0) == (0 &amp;lt;=&amp;gt; (a &amp;lt;=&amp;gt; b))`が等値
+    - `((a &amp;lt;=&amp;gt; b) &amp;lt;=&amp;gt; 0)`と`(0 &amp;lt;=&amp;gt; (a &amp;lt;=&amp;gt; b))`が等値
     - `(a &amp;lt;=&amp;gt; b &amp;lt; 0) == bool(a &amp;lt; b)`が`true`であること
     - `(a &amp;lt;=&amp;gt; b &amp;gt; 0) == bool(a &amp;gt; b)`が`true`であること
     - `(a &amp;lt;=&amp;gt; b &amp;lt;= 0) == bool(a &amp;lt;= b)`が`true`であること
@@ -101,7 +101,7 @@ concept three_way_comparable_with =
   
 - (2) : `const remove_reference_t&amp;lt;T&amp;gt;, const remove_reference_t&amp;lt;U&amp;gt;`の左辺値`t, u`、`C = common_reference_t&amp;lt;const remove_reference_t&amp;lt;T&amp;gt;&amp;amp;, const remove_reference_t&amp;lt;U&amp;gt;&amp;amp;&amp;gt;`について次の条件を満たす場合に限って、型`T, U, Cat`は`three_way_comparable_with`のモデルである
     - `t &amp;lt;=&amp;gt; u`と`u &amp;lt;=&amp;gt; t`が同じ[定義域](/reference/concepts.md)を持つ
-    - `((t &amp;lt;=&amp;gt; u) &amp;lt;=&amp;gt; 0) == (0 &amp;lt;=&amp;gt; (t &amp;lt;=&amp;gt; u))`が等値
+    - `((t &amp;lt;=&amp;gt; u) &amp;lt;=&amp;gt; 0)`と`(0 &amp;lt;=&amp;gt; (t &amp;lt;=&amp;gt; u))`が等値
     - `(t &amp;lt;=&amp;gt; u == 0) == bool(t == u)`が`true`であること
     - `(t &amp;lt;=&amp;gt; u != 0) == bool(t != u)`が`true`であること
     - `Cat(t &amp;lt;=&amp;gt; u) == Cat(C(t) &amp;lt;=&amp;gt; C(u))`が`true`であること
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy_backward -- Update ranges_copy_backward.md</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_copy_backward.html"/>
      <id>74c308eeb3f7e75cd6bb5193800d93c169603ee1:reference/algorithm/ranges_copy_backward.md</id>
      <updated>2022-07-19T22:35:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_copy_backward.md b/reference/algorithm/ranges_copy_backward.md
index 3cbeaf640..653eaa176 100644
--- a/reference/algorithm/ranges_copy_backward.md
+++ b/reference/algorithm/ranges_copy_backward.md
@@ -62,20 +62,19 @@ copy_backward_result {
 #include &amp;lt;algorithm&amp;gt;
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;list&amp;gt;
-#include &amp;lt;iterator&amp;gt;
 
 int main() {
   std::list&amp;lt;int&amp;gt; ls = { 1,2,3,4,5 };
   // 1,2,3 の範囲を、3,4,5 の値のある範囲へコピーする
-  std::copy_backward(ls.begin(), std::next(ls.begin(), 3), ls.end());
+  std::ranges::copy_backward(ls.begin(), std::next(ls.begin(), 3), ls.end());
 
   // 以下のコードだと期待した結果にならないことを確認しよう
-  // std::copy(ls.begin(), std::next(ls.begin(), 3), std::next(ls.begin(), 2));
+  // std::ranges::copy(ls.begin(), std::next(ls.begin(), 3), std::next(ls.begin(), 2));
 
-  std::copy(ls.begin(), ls.end(), std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
+  std::ranges::copy(ls.begin(), ls.end(), std::ostream_iterator&amp;lt;int&amp;gt;(std::cout, &amp;#34;,&amp;#34;));
 }
 ```
-* std::copy_backward[color ff0000]
+* std::ranges::copy_backward[color ff0000]
 * ls.begin()[link /reference/list/list/begin.md]
 * std::next[link /reference/iterator/next.md]
 * ls.end()[link /reference/list/list/end.md]
@@ -86,18 +85,6 @@ int main() {
 ```
 
 
-## 実装例
-```cpp
-template &amp;lt;class BidirectionalIterator1, class BidirectionalIterator2&amp;gt;
-BidirectionalIterator2 copy_backward(BidirectionalIterator1 first,
-                                     BidirectionalIterator1 last,
-                                     BidirectionalIterator2 result) {
-  while (first != last)
-    *--result = *--last;
-  return result;
-}
-```
-
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>pea-sys</name>
        <email>49807271+pea-sys@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
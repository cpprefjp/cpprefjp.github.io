<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-08-23T07:40:37.917912</updated>
  <id>a8817beb-2a2a-4945-a061-1c86dcb77aee</id>

  
    <entry>
      <title>cref -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/functional/cref.html"/>
      <id>5ee32ee693f4d40dc1424b5f0e53a0ffb440abba:reference/functional/cref.md</id>
      <updated>2021-08-23T16:17:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/cref.md b/reference/functional/cref.md
index 42318ec8b..37e37eaa0 100644
--- a/reference/functional/cref.md
+++ b/reference/functional/cref.md
@@ -10,7 +10,7 @@ namespace std {
   reference_wrapper&amp;lt;const T&amp;gt; cref(const T&amp;amp; t) noexcept;             // (1) C++11
 
   template &amp;lt;class T&amp;gt;
-  constepxr reference_wrapper&amp;lt;const T&amp;gt; cref(const T&amp;amp; t) noexcept;   // (1) C++20
+  constexpr reference_wrapper&amp;lt;const T&amp;gt; cref(const T&amp;amp; t) noexcept;   // (1) C++20
 
   template &amp;lt;class T&amp;gt;
   reference_wrapper&amp;lt;const T&amp;gt; cref(reference_wrapper&amp;lt;T&amp;gt; t) noexcept; // (2) C++11
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 -- Merge pull request #893 from hi-hori/fix_typo_constexpr_if</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>f8e379271a092c5aa1226edcc2725084776dc5fe:lang/cpp17/if_constexpr.md</id>
      <updated>2021-08-23T16:16:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index d6140427b..a915c8675 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -6,7 +6,7 @@
 constexpr if文とは、文を条件付きコンパイルすることを目的とした制御構文である。
 
 ```cpp
-if constepxr ( condition )
+if constexpr ( condition )
   statement
 else
   statement
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_bytes -- P0339R6のMSVC対応バージョン追記</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_bytes.html"/>
      <id>c03c6750e66bac0a8312025ca62c607b8d031e18:reference/memory_resource/polymorphic_allocator/allocate_bytes.md</id>
      <updated>2021-08-23T15:52:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/allocate_bytes.md b/reference/memory_resource/polymorphic_allocator/allocate_bytes.md
index 22371c86f..4166297b9 100644
--- a/reference/memory_resource/polymorphic_allocator/allocate_bytes.md
+++ b/reference/memory_resource/polymorphic_allocator/allocate_bytes.md
@@ -106,7 +106,7 @@ address : 0x1c38150
 ### 処理系
 - [Clang](/implementation.md#clang): ??
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 update 9
 
 ## 関連項目
 - [`memory_resource::allocate`](/reference/memory_resource/memory_resource/allocate.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocate_object -- P0339R6のMSVC対応バージョン追記</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/allocate_object.html"/>
      <id>c03c6750e66bac0a8312025ca62c607b8d031e18:reference/memory_resource/polymorphic_allocator/allocate_object.md</id>
      <updated>2021-08-23T15:52:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/allocate_object.md b/reference/memory_resource/polymorphic_allocator/allocate_object.md
index 5963ca989..0c800f938 100644
--- a/reference/memory_resource/polymorphic_allocator/allocate_object.md
+++ b/reference/memory_resource/polymorphic_allocator/allocate_object.md
@@ -98,7 +98,7 @@ int main() {
 ### 処理系
 - [Clang](/implementation.md#clang): ??
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 update 9
 
 ## 関連項目
 - [`allocate_bytes`](/reference/memory_resource/polymorphic_allocator/allocate_bytes.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>deallocate_bytes -- P0339R6のMSVC対応バージョン追記</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/deallocate_bytes.html"/>
      <id>c03c6750e66bac0a8312025ca62c607b8d031e18:reference/memory_resource/polymorphic_allocator/deallocate_bytes.md</id>
      <updated>2021-08-23T15:52:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/deallocate_bytes.md b/reference/memory_resource/polymorphic_allocator/deallocate_bytes.md
index bd1f2334b..6d89c866b 100644
--- a/reference/memory_resource/polymorphic_allocator/deallocate_bytes.md
+++ b/reference/memory_resource/polymorphic_allocator/deallocate_bytes.md
@@ -99,7 +99,7 @@ address : 0x1c38150
 ### 処理系
 - [Clang](/implementation.md#clang): ??
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 update 9
 
 ## 関連項目
 - [`memory_resource::deallocate`](/reference/memory_resource/memory_resource/deallocate.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>deallocate_object -- P0339R6のMSVC対応バージョン追記</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/deallocate_object.html"/>
      <id>c03c6750e66bac0a8312025ca62c607b8d031e18:reference/memory_resource/polymorphic_allocator/deallocate_object.md</id>
      <updated>2021-08-23T15:52:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/deallocate_object.md b/reference/memory_resource/polymorphic_allocator/deallocate_object.md
index 316b590f1..f493aed4e 100644
--- a/reference/memory_resource/polymorphic_allocator/deallocate_object.md
+++ b/reference/memory_resource/polymorphic_allocator/deallocate_object.md
@@ -89,7 +89,7 @@ int main() {
 ### 処理系
 - [Clang](/implementation.md#clang): ??
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 update 9
 
 ## 関連項目
 - [`deallocate_bytes`](/reference/memory_resource/polymorphic_allocator/deallocate_bytes.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>delete_object -- P0339R6のMSVC対応バージョン追記</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/delete_object.html"/>
      <id>c03c6750e66bac0a8312025ca62c607b8d031e18:reference/memory_resource/polymorphic_allocator/delete_object.md</id>
      <updated>2021-08-23T15:52:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/delete_object.md b/reference/memory_resource/polymorphic_allocator/delete_object.md
index 0fe03d0bf..3bc11f1ae 100644
--- a/reference/memory_resource/polymorphic_allocator/delete_object.md
+++ b/reference/memory_resource/polymorphic_allocator/delete_object.md
@@ -95,7 +95,7 @@ address : 0x1a2b960
 ### 処理系
 - [Clang](/implementation.md#clang): ??
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 update 9
 
 ## 参照
 - [P0339R6 polymorphic_allocator&amp;lt;&amp;gt; as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>new_object -- P0339R6のMSVC対応バージョン追記</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/new_object.html"/>
      <id>c03c6750e66bac0a8312025ca62c607b8d031e18:reference/memory_resource/polymorphic_allocator/new_object.md</id>
      <updated>2021-08-23T15:52:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/new_object.md b/reference/memory_resource/polymorphic_allocator/new_object.md
index be6cc0df5..7f166a872 100644
--- a/reference/memory_resource/polymorphic_allocator/new_object.md
+++ b/reference/memory_resource/polymorphic_allocator/new_object.md
@@ -96,7 +96,7 @@ address : 0x1a2b960
 ### 処理系
 - [Clang](/implementation.md#clang): ??
 - [GCC](/implementation.md#gcc): 9.1
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 update 9
 
 ## 参照
 - [P0339R6 polymorphic_allocator&amp;lt;&amp;gt; as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf) 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>polymorphic_allocator -- LWG Issue 3036対応</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator.html"/>
      <id>9a748419ad4d00ecff2b2fa71f5ed5d7b6f3adf5:reference/memory_resource/polymorphic_allocator.md</id>
      <updated>2021-08-23T15:47:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator.md b/reference/memory_resource/polymorphic_allocator.md
index bdaa26a6c..02ec9a03f 100644
--- a/reference/memory_resource/polymorphic_allocator.md
+++ b/reference/memory_resource/polymorphic_allocator.md
@@ -46,7 +46,7 @@ C++20にてC++プログラミングにおいての基礎部品となる型（*vo
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
 | [`construct`](polymorphic_allocator/construct.md) | 指定された領域にオブジェクトを構築する | C++17 |
-| [`destroy`](polymorphic_allocator/destroy.md) | 指定された領域のオブジェクトを破棄する | C++17 |
+| [`destroy`](polymorphic_allocator/destroy.md) | 指定された領域のオブジェクトを破棄する | C++17&amp;lt;br/&amp;gt;C++20より非推奨 |
 | [`new_object`](polymorphic_allocator/new_object.md) | メモリを確保し指定した型の構築（`new`式相当の処理）を行う | C++20 |
 | [`delete_object`](polymorphic_allocator/delete_object.md) | 指定した型の破棄とそのメモリ領域の解放（`delete`式相当の処理）を行う | C++20 |
 
@@ -92,3 +92,4 @@ C++20にてC++プログラミングにおいての基礎部品となる型（*vo
 - [Working Draft, C++ Extensions for Library Fundamentals, Version 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4562.html#memory.resource.synop)
 - [P0339R6 polymorphic_allocator&amp;lt;&amp;gt; as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf)
 - [LWG Issue 3037. `polymorphic_allocator` and incomplete types](https://wg21.cmeerw.net/lwg/issue3037)
+- [LWG Issue 3036. `polymorphic_allocator::destroy` is extraneous](https://cplusplus.github.io/LWG/issue3036)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>delete_object -- LWG Issue 3036対応</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/delete_object.html"/>
      <id>9a748419ad4d00ecff2b2fa71f5ed5d7b6f3adf5:reference/memory_resource/polymorphic_allocator/delete_object.md</id>
      <updated>2021-08-23T15:47:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/delete_object.md b/reference/memory_resource/polymorphic_allocator/delete_object.md
index cf632c4b7..0fe03d0bf 100644
--- a/reference/memory_resource/polymorphic_allocator/delete_object.md
+++ b/reference/memory_resource/polymorphic_allocator/delete_object.md
@@ -28,6 +28,8 @@ void delete_object(T* p);
 
 以下と等価。
 
+### C++17 
+
 ```cpp
 this-&amp;gt;destroy(p);
 this-&amp;gt;deallocate_object(p);
@@ -35,6 +37,16 @@ this-&amp;gt;deallocate_object(p);
 * destroy[link destroy.md]
 * deallocate_object[link deallocate_object.md]
 
+### C++20
+
+```cpp
+allocator_traits&amp;lt;polymorphic_allocator&amp;gt;::destroy(*this, p)
+this-&amp;gt;deallocate_object(p);
+```
+* allocator_traits[link /reference/memory/allocator_traits.md]
+* destroy[link /reference/memory/allocator_traits/destroy.md]
+* deallocate_object[link deallocate_object.md]
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -86,4 +98,6 @@ address : 0x1a2b960
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 ## 参照
-- [P0339R6 polymorphic_allocator&amp;lt;&amp;gt; as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf) 
+- [P0339R6 polymorphic_allocator&amp;lt;&amp;gt; as a vocabulary type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf)
+- [LWG Issue 3036. `polymorphic_allocator::destroy` is extraneous](https://cplusplus.github.io/LWG/issue3036)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>destroy -- LWG Issue 3036対応</title>
      <link href="https://cpprefjp.github.io/reference/memory_resource/polymorphic_allocator/destroy.html"/>
      <id>9a748419ad4d00ecff2b2fa71f5ed5d7b6f3adf5:reference/memory_resource/polymorphic_allocator/destroy.md</id>
      <updated>2021-08-23T15:47:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory_resource/polymorphic_allocator/destroy.md b/reference/memory_resource/polymorphic_allocator/destroy.md
index a33cc6db2..ae0163233 100644
--- a/reference/memory_resource/polymorphic_allocator/destroy.md
+++ b/reference/memory_resource/polymorphic_allocator/destroy.md
@@ -4,6 +4,7 @@
 * std::pmr[meta namespace]
 * polymorphic_allocator[meta class]
 * cpp17[meta cpp]
+* cpp20deprecated[meta cpp]
 
 ```cpp
 template &amp;lt;class T&amp;gt;
@@ -21,6 +22,16 @@ void destroy(T* p);
 
 メモリ領域の解放は行われないため、別に[`deallocate`](deallocate.md)で行う必要がある。
 
+## 非推奨の理由
+
+`polymorphic_allocator`も含めたアロケータはコンテナから利用される際に`allocator_traits`を介して利用され、`allocator_traits`の提供するデフォルト実装によってアロケータとしての多くの部分が補われる。
+
+本関数は、[`allocator_traits&amp;lt;Alloc&amp;gt;::destroy()`](/reference/memory/allocator_traits/destroy.md)で提供されているデフォルト実装と完全に同一の実装となっており、追加の事を何もしていない。従って有用性は何もなく、非推奨とされた。
+
+おそらく、[`construct()`](construct.md)メンバ関数との対称性を意識して追加されていたものと思われる。なお、`construct()`メンバ関数は[uses-allocator 構築](/reference/memory/uses_allocator.md)のために追加の仕事を担っており、こちらの関数には有効性があるため非推奨とはされていない。
+
+`allocator_traits`を介して`polymorphic_allocator`を使用する場合は本関数の有無を気にする必要はないが、もし本関数が必要となった場合は代わりに[`destroy_at()`](/reference/memory/destroy_at.md)を利用できる。
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -72,15 +83,15 @@ int main()
 - [Clang](/implementation.md#clang): ??
 - [GCC](/implementation.md#gcc): 9.1
 - [Visual C++](/implementation.md#visual_cpp): 2017 update 6
-    - 2017, 2019共にこの関数は意図的に実装されていない（必要なら[`destroy_at`](/reference/memory/destroy_at.md)を利用する）
+    - 2017, 2019共にこの関数は実装されなかった
 
 ## 関連項目
 - [`destroy_at`](/reference/memory/destroy_at.md)
-- [`destroy`](/reference/memory/allocator_traits/destroy.md)
+- [`allocator_traits::destroy`](/reference/memory/allocator_traits/destroy.md)
 
 ## 参照
 - [P0220R1 Adopt Library Fundamentals V1 TS Components for C++17 (R1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html)
 - [P0337r0 | Delete operator= for polymorphic_allocator](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0337r0.html)
 - [Working Draft, C++ Extensions for Library Fundamentals, Version 2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4562.html#memory.resource.synop)
 - [destroy: Missing member function of std::pmr::polymorphic_allocator - Developer Community](https://developercommunity.visualstudio.com/content/problem/394908/destroy-missing-member-function-of-stdpmrpolymorph.html)
-    - VC++においてこの関数の実装がされていない理由について
+- [LWG Issue 3036. `polymorphic_allocator::destroy` is extraneous](https://cplusplus.github.io/LWG/issue3036)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 -- constexpr if のタイポ修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>03e43176dc074e214831ea9ccfd619cd45c32cf2:lang/cpp17/if_constexpr.md</id>
      <updated>2021-08-23T13:54:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index d6140427b..a915c8675 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -6,7 +6,7 @@
 constexpr if文とは、文を条件付きコンパイルすることを目的とした制御構文である。
 
 ```cpp
-if constepxr ( condition )
+if constexpr ( condition )
   statement
 else
   statement
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Hiroyuki Hori</name>
        <email>43978282+hi-hori@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-04-04T13:36:36.784850</updated>
  <id>40df1ffa-80b8-4870-8206-354955a5dd1d</id>

  
    <entry>
      <title>stop_token -- Merge branch &#39;master&#39; of github.com:cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/stop_token.html"/>
      <id>c9f10c6c4b1f3d6f0a1999eb79e26c480f30420c:reference/stop_token.md</id>
      <updated>2025-04-04T22:32:49+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;stop_token&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;stop_token&amp;gt;&lt;/code&gt;ヘッダは、マルチスレッド処理や非同期処理おける停止要求の状態 &lt;code&gt;停止状態&lt;/code&gt; を扱うクラスを定義する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_token.html&#34;&gt;stop_token&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;stop_token/stop_callback.html&#34;&gt;stop_callback&lt;/a&gt;&lt;/code&gt;は停止状態を共有所有する。最後に破棄されたオブジェクトが停止状態を自動的に解放する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_source.md.nolink&#34;&gt;inplace_stop_source&lt;/a&gt;&lt;/code&gt;は停止状態をメンバとして直接所有する。&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_token.md.nolink&#34;&gt;inplace_stop_token&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_callback.md.nolink&#34;&gt;inplace_stop_callback&lt;/a&gt;&lt;/code&gt;は停止状態の所有には関与しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stoppable_token.html&#34;&gt;stoppable_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止トークン型であることを表す (concept)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/unstoppable_token.html&#34;&gt;unstoppable_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止不可能な停止トークン型であることを表す (concept)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;停止トークン&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_token.html&#34;&gt;stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止要求を発生させるクラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_callback.html&#34;&gt;stop_callback&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止要求に応じて呼び出されるコールバック (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/nostopstate.html&#34;&gt;nostopstate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止状態を扱わない&lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;を構築するためのタグ (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/never_stop_token.html&#34;&gt;never_stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止不可能な停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_token.md.nolink&#34;&gt;inplace_stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インプレース停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_source.md.nolink&#34;&gt;inplace_stop_source&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インプレース停止要求を発生させるクラス (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_callback.md.nolink&#34;&gt;inplace_stop_callback&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インプレース停止要求に応じて呼び出されるコールバック (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_callback_for_t.html&#34;&gt;stop_callback_for_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;対応するコールバック型を取得 (alias template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0660r10.pdf&#34; target=&#34;_blank&#34;&gt;P0660R10 Stop token and joining thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html&#34; target=&#34;_blank&#34;&gt;P2300R10 &lt;code&gt;std::execution&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>never_stop_token -- Merge branch &#39;master&#39; of github.com:cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/never_stop_token.html"/>
      <id>c9f10c6c4b1f3d6f0a1999eb79e26c480f30420c:reference/stop_token/never_stop_token.md</id>
      <updated>2025-04-04T22:32:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/never_stop_token.md b/reference/stop_token/never_stop_token.md
new file mode 100644
index 000000000..a78d5a66a
--- /dev/null
+++ b/reference/stop_token/never_stop_token.md
@@ -0,0 +1,63 @@
+# never_stop_token
+* stop_token[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  class never_stop_token;
+}
+```
+
+## 概要
+
+停止不可能な停止トークン。[`unstoppable_token`](unstoppable_token.md)コンセプトのモデル。
+
+
+## メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `(constructor)` | コンストラクタ | C++26 |
+| `(destructor)`  | デストラクタ   | C++26 |
+| `bool operator==(const never_stop_token&amp;amp;) const = default;` | 等値比較 | C++26 |
+| `bool operator!=(const never_stop_token&amp;amp;) const;` | 非等値比較 (`==`により使用可能) | C++26 |
+
+## 静的メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `stop_requested` | `false`を返す | C++26 |
+| `stop_possible` | `false`を返す | C++26 |
+
+## メンバ型
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `callback_type` | 説明専用の`callback-type`型 | C++26 |
+
+```cpp
+struct callback-type {
+  explicit callback-type(never_stop_token, auto&amp;amp;&amp;amp;) noexcept {}
+};
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`unstoppable_token`](unstoppable_token.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_callback -- Merge branch &#39;master&#39; of github.com:cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_callback.html"/>
      <id>c9f10c6c4b1f3d6f0a1999eb79e26c480f30420c:reference/stop_token/stop_callback.md</id>
      <updated>2025-04-04T22:32:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_callback.md b/reference/stop_token/stop_callback.md
index 1886e4062..f71392b3e 100644
--- a/reference/stop_token/stop_callback.md
+++ b/reference/stop_token/stop_callback.md
@@ -6,7 +6,7 @@
 
 ```cpp
 namespace std {
-  template&amp;lt;class Callback&amp;gt;
+  template&amp;lt;class CallbackFn&amp;gt;
   class stop_callback;
 }
 ```
@@ -17,7 +17,7 @@ namespace std {
 ## メンバ関数
 
 | 名前 | 説明 | 対応バージョン |
-|---------------------------------------------------|--------------------------------------------------------------------|-------|
+|------|------|-------|
 | [`(constructor)`](stop_callback/op_constructor.md)| コンストラクタ | C++20 |
 | [`(destructor)`](stop_callback/op_destructor.md)  | デストラクタ | C++20 |
 | `operator=(const stop_callback&amp;amp;) = delete;`       | 代入演算子 | C++20 |
@@ -25,21 +25,21 @@ namespace std {
 
 ## メンバ型
 
-| 名前            | 説明           | 対応バージョン |
-|-----------------|----------------|----------------|
-| `callback_type` | テンプレート引数`Callback`に指定した型| C++20 |
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| `callback_type` | `CallbackFn` | C++20 |
 
 ## 推論補助
 
 | 名前 | 説明 | 対応バージョン |
-|---------------------------------------------|------------------------------------|-------|
+|------|------|-------|
 | [`(deduction_guide)`](stop_callback/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20 |
 
 ## 適格要件
-テンプレート引数の`Callback`は[`invocable`](/reference/concepts/invokable.md.nolink)と[`destructible`](/reference/concepts/destructible.md)制約を満たさなければならい。
+テンプレート引数の`CallbackFn`は[`invocable`](/reference/concepts/invokable.md.nolink)と[`destructible`](/reference/concepts/destructible.md)制約を満たさなければならい。
 
 ## 事前条件
-テンプレート引数の`Callback`は[`invocable`](/reference/concepts/invokable.md.nolink)と[`destructible`](/reference/concepts/destructible.md)制約を満たさなければならい。
+テンプレート引数の`CallbackFn`は[`invocable`](/reference/concepts/invokable.md.nolink)と[`destructible`](/reference/concepts/destructible.md)制約を満たさなければならい。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge branch &#39;master&#39; of github.com:cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_callback/op_constructor.html"/>
      <id>c9f10c6c4b1f3d6f0a1999eb79e26c480f30420c:reference/stop_token/stop_callback/op_constructor.md</id>
      <updated>2025-04-04T22:32:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_callback/op_constructor.md b/reference/stop_token/stop_callback/op_constructor.md
index 6cda6aecf..fb334ad16 100644
--- a/reference/stop_token/stop_callback/op_constructor.md
+++ b/reference/stop_token/stop_callback/op_constructor.md
@@ -8,10 +8,10 @@
 ```cpp
 template&amp;lt;class C&amp;gt;
 explicit stop_callback(const stop_token&amp;amp; st, C&amp;amp;&amp;amp; cb)
-          noexcept(is_nothrow_constructible_v&amp;lt;Callback, C&amp;gt;);  // (1)
+          noexcept(is_nothrow_constructible_v&amp;lt;CallbackFn, C&amp;gt;);  // (1)
 template&amp;lt;class C&amp;gt;
 explicit stop_callback(stop_token&amp;amp;&amp;amp; st, C&amp;amp;&amp;amp; cb)
-          noexcept(is_nothrow_constructible_v&amp;lt;Callback, C&amp;gt;);  // (2)
+          noexcept(is_nothrow_constructible_v&amp;lt;CallbackFn, C&amp;gt;);  // (2)
 
 stop_callback(const stop_callback&amp;amp;) = delete;                 // (3)
 stop_callback(stop_callback&amp;amp;&amp;amp;) = delete;                      // (4)
@@ -25,22 +25,22 @@ stop_callback(stop_callback&amp;amp;&amp;amp;) = delete;                      // (4)
 
 
 ## 適格要件
-クラステンプレートのテンプレート引数`Callback`とコンストラクタのテンプレート引数`C`は[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;Callback, C&amp;gt;`制約を満たさなければならない。
+クラステンプレートのテンプレート引数`CallbackFn`とコンストラクタのテンプレート引数`C`は[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;CallbackFn, C&amp;gt;`制約を満たさなければならない。
 
 
 ## 事前条件
-クラステンプレートのテンプレート引数`Callback`とコンストラクタのテンプレート引数`C`は[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;Callback, C&amp;gt;`制約を満たさなければならない。
+クラステンプレートのテンプレート引数`CallbackFn`とコンストラクタのテンプレート引数`C`は[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;CallbackFn, C&amp;gt;`制約を満たさなければならない。
 
 
 ## 効果
-コンストラクタの引数に渡した`cb`を`std::forward&amp;lt;Callback&amp;gt;(cb)`で転送して、メンバ変数（仮に`callback`とする）を初期化する。
+コンストラクタの引数に渡した`cb`を`std::forward&amp;lt;CallbackFn&amp;gt;(cb)`で転送して、メンバ変数（仮に`callback`とする）を初期化する。
 
-もし`st.`[`stop_requested()`](../stop_token/stop_requested.md) `==` `true` の場合は、コンストラクタを呼び出したスレッドの中で`std::forward&amp;lt;Callback&amp;gt;(callback)()`を評価し、コールバックを呼び出す。したがってこのコールバックの呼び出しはコンストラクタから処理が戻るより前に完了する。
+もし`st.`[`stop_requested()`](../stop_token/stop_requested.md) `==` `true` の場合は、コンストラクタを呼び出したスレッドの中で`std::forward&amp;lt;CallbackFn&amp;gt;(callback)()`を評価し、コールバックを呼び出す。したがってこのコールバックの呼び出しはコンストラクタから処理が戻るより前に完了する。
 
-そうでない場合は、`st`が所有している停止状態への所有権を取得して停止状態を共有し、その停止状態に対する最初の[`request_stop()`](../stop_source/request_stop.md)の呼び出しで`std::forward&amp;lt;Callback&amp;gt;(callback)()`を評価するようなコールバックを登録する。
+そうでない場合は、`st`が所有している停止状態への所有権を取得して停止状態を共有し、その停止状態に対する最初の[`request_stop()`](../stop_source/request_stop.md)の呼び出しで`std::forward&amp;lt;CallbackFn&amp;gt;(callback)()`を評価するようなコールバックを登録する。
 `st`が停止状態を所有していない場合は何もしない。
 
-もし`std::forward&amp;lt;Callback&amp;gt;(callback)()`の呼び出しが例外によって終了した場合は、[`std::terminate()`](/reference/exception/terminate.md)関数が呼び出され、プログラムが異常終了する。
+もし`std::forward&amp;lt;CallbackFn&amp;gt;(callback)()`の呼び出しが例外によって終了した場合は、[`std::terminate()`](/reference/exception/terminate.md)関数が呼び出され、プログラムが異常終了する。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- Merge branch &#39;master&#39; of github.com:cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_callback/op_deduction_guide.html"/>
      <id>c9f10c6c4b1f3d6f0a1999eb79e26c480f30420c:reference/stop_token/stop_callback/op_deduction_guide.md</id>
      <updated>2025-04-04T22:32:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_callback/op_deduction_guide.md b/reference/stop_token/stop_callback/op_deduction_guide.md
index 09d091fbc..c06304e1e 100644
--- a/reference/stop_token/stop_callback/op_deduction_guide.md
+++ b/reference/stop_token/stop_callback/op_deduction_guide.md
@@ -6,8 +6,8 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class Callback&amp;gt;
-  stop_callback(stop_token, Callback) -&amp;gt; stop_callback&amp;lt;Callback&amp;gt;;
+  template &amp;lt;class CallbackFn&amp;gt;
+  stop_callback(stop_token, CallbackFn) -&amp;gt; stop_callback&amp;lt;CallbackFn&amp;gt;;
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_callback_for_t -- Merge branch &#39;master&#39; of github.com:cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_callback_for_t.html"/>
      <id>c9f10c6c4b1f3d6f0a1999eb79e26c480f30420c:reference/stop_token/stop_callback_for_t.md</id>
      <updated>2025-04-04T22:32:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_callback_for_t.md b/reference/stop_token/stop_callback_for_t.md
new file mode 100644
index 000000000..bc7004567
--- /dev/null
+++ b/reference/stop_token/stop_callback_for_t.md
@@ -0,0 +1,31 @@
+# stop_callback_for_t
+* stop_token[meta header]
+* std[meta namespace]
+* type-alias[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T, class CallbackFn&amp;gt;
+  using stop_callback_for_t = T::template callback_type&amp;lt;CallbackFn&amp;gt;;
+}
+```
+
+## 概要
+
+型`T`に対応する`CallbackFn`型のコールバック型を取得する。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_token -- Merge branch &#39;master&#39; of github.com:cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_token.html"/>
      <id>c9f10c6c4b1f3d6f0a1999eb79e26c480f30420c:reference/stop_token/stop_token.md</id>
      <updated>2025-04-04T22:32:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_token.md b/reference/stop_token/stop_token.md
index d8998fbe8..406206084 100644
--- a/reference/stop_token/stop_token.md
+++ b/reference/stop_token/stop_token.md
@@ -13,7 +13,7 @@ namespace std {
 ## 概要
 `stop_token`クラスは、停止要求が作成されたかどうか、あるいは停止要求が作成されうるかどうかなど、停止状態を問い合わせるためのインターフェースを提供する。
 
-[`stop_source`](stop_source.md)クラスの[`get_token()`](./stop_source/get_token.md)メンバ関数を呼び出すと、その`stop_source`クラスのオブジェクトと停止状態を共有する`stop_token`クラスのオブジェクトを構築できる。これによって、`stop_source`側から停止要求を作成したときに、この`stop_token`を通じて停止状態を問い合わせられるようになる。
+[`stop_source`](stop_source.md)クラスの[`get_token()`](stop_source/get_token.md)メンバ関数を呼び出すと、その`stop_source`クラスのオブジェクトと停止状態を共有する`stop_token`クラスのオブジェクトを構築できる。これによって、`stop_source`側から停止要求を作成したときに、この`stop_token`を通じて停止状態を問い合わせられるようになる。
 
 また、`stop_token`クラスは以下のクラスでも利用される：
 
@@ -26,7 +26,7 @@ namespace std {
 ## メンバ関数
 
 | 名前 | 説明 | 対応バージョン |
-|-------------------------------------------------|--------------------------------------------------------------------|-------|
+|------|------|-------|
 | [`(constructor)`](stop_token/op_constructor.md) | コンストラクタ | C++20 |
 | [`(destructor)`](stop_token/op_destructor.md)   | デストラクタ | C++20 |
 | [`operator=`](stop_token/op_assign.md)          | 代入演算子 | C++20 |
@@ -34,12 +34,19 @@ namespace std {
 | [`stop_requested`](stop_token/stop_requested.md)| 停止要求が作成されたかどうかを取得する | C++20 |
 | [`stop_possible`](stop_token/stop_possible.md)  | 停止要求が作成されうるかどうかを取得する | C++20 |
 
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| [`callback_type`](stop_token/callback_type.md) | 対応するコールバック型 (alias template) | C++26 |
+
 ## 非メンバ関数
+
 | 名前 | 説明 | 対応バージョン |
-|------------------------------------------------|---------------------------------------|-------|
-| [`operator==`](stop_token/op_equal.md)         | 等値演算子 | C++20 |
-| [`operator!=`](stop_token/op_not_equal.md)     | 非等値演算子 | C++20 |
-| [`swap`](stop_token/swap_free.md)              | 2つの`stop_token`オブジェクトを入れ替える | C++20 |
+|------|------|-------|
+| [`operator==`](stop_token/op_equal.md)     | 等値演算子 | C++20 |
+| [`operator!=`](stop_token/op_not_equal.md) | 非等値演算子 | C++20 |
+| [`swap`](stop_token/swap_free.md)          | 2つの`stop_token`オブジェクトを入れ替える | C++20 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>callback_type -- Merge branch &#39;master&#39; of github.com:cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_token/callback_type.html"/>
      <id>c9f10c6c4b1f3d6f0a1999eb79e26c480f30420c:reference/stop_token/stop_token/callback_type.md</id>
      <updated>2025-04-04T22:32:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_token/callback_type.md b/reference/stop_token/stop_token/callback_type.md
new file mode 100644
index 000000000..8c5f6a54c
--- /dev/null
+++ b/reference/stop_token/stop_token/callback_type.md
@@ -0,0 +1,30 @@
+# callback_type
+* stop_token[meta header]
+* std[meta namespace]
+* stop_token[meta class]
+* type-alias[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class CallbackFn&amp;gt;
+using callback_type = stop_callback&amp;lt;CallbackFn&amp;gt;;
+```
+* stop_callback[link ../stop_callback.md]
+
+## 概要
+`stop_token`に対応するコールバック型。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [GCC](/implementation.md#gcc): ??
+- [Clang](/implementation.md#clang): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoppable_token -- Merge branch &#39;master&#39; of github.com:cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stoppable_token.html"/>
      <id>c9f10c6c4b1f3d6f0a1999eb79e26c480f30420c:reference/stop_token/stoppable_token.md</id>
      <updated>2025-04-04T22:32:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stoppable_token.md b/reference/stop_token/stoppable_token.md
index 8f5615a83..1ff936a63 100644
--- a/reference/stop_token/stoppable_token.md
+++ b/reference/stop_token/stoppable_token.md
@@ -68,9 +68,9 @@ concept stoppable-callback-for =
 ```
 * invocable[link /reference/concepts/invocable.md]
 * constructible_from[link /reference/concepts/constructible_from.md]
-* stop_callback_for_t[link stop_callback_for_t.md.nolink]
+* stop_callback_for_t[link stop_callback_for_t.md]
 
-説明用の`init`を[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(init), Initializer&amp;gt;`を満たす式、型`SCB`を[`stop_callback_for_t`](stop_callback_for_t.md.nolink)`&amp;lt;Token, CallbackFn&amp;gt;`とする。
+説明用の`init`を[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(init), Initializer&amp;gt;`を満たす式、型`SCB`を[`stop_callback_for_t`](stop_callback_for_t.md)`&amp;lt;Token, CallbackFn&amp;gt;`とする。
 
 `stoppable-callback-for&amp;lt;CallbackFn, Token, Initializer&amp;gt;`のモデルとなるには、下記を満たすこと。
 
@@ -110,7 +110,7 @@ concept stoppable-callback-for =
 - [`unstoppable_token`](unstoppable_token.md)
 - [`stop_token`](stop_token.md)
 - [`inplace_stop_token`](inplace_stop_token.md.nolink)
-- [`never_stop_token`](never_stop_token.md.nolink)
+- [`never_stop_token`](never_stop_token.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unstoppable_token -- Merge branch &#39;master&#39; of github.com:cpprefjp/site</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/unstoppable_token.html"/>
      <id>c9f10c6c4b1f3d6f0a1999eb79e26c480f30420c:reference/stop_token/unstoppable_token.md</id>
      <updated>2025-04-04T22:32:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/unstoppable_token.md b/reference/stop_token/unstoppable_token.md
index 24a9165f0..ff88b2fc7 100644
--- a/reference/stop_token/unstoppable_token.md
+++ b/reference/stop_token/unstoppable_token.md
@@ -35,7 +35,7 @@ namespace std {
 
 ## 関連項目
 - [`stoppable_token`](stoppable_token.md)
-- [`never_stop_token`](never_stop_token.md.nolink)
+- [`never_stop_token`](never_stop_token.md)
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>adjacent_find -- created version column for reference/algorithm/adjacent_find.md</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/adjacent_find.html"/>
      <id>5df1ae75c607ece5de0a12eb6ac66a6e45c59388:reference/algorithm/adjacent_find.md</id>
      <updated>2025-04-04T22:32:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/adjacent_find.md b/reference/algorithm/adjacent_find.md
index bb764ae8f..fe20630d8 100644
--- a/reference/algorithm/adjacent_find.md
+++ b/reference/algorithm/adjacent_find.md
@@ -147,6 +147,15 @@ ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last, Binar
 }
 ```
 
+## バージョン
+### 言語
+- C++98
+
+### 処理系
+- [Clang](/implementation.md#clang): 14.0.6 [mark verified]
+- [GCC](/implementation.md#gcc): 9.5.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
 
 ## 参照
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all_of -- new clang version for reference/algorithm/ranges_all_of</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_all_of.html"/>
      <id>bf61d03da7ca726407bd9a24c7cd8d8f0799ac57:reference/algorithm/ranges_all_of.md</id>
      <updated>2025-04-04T22:20:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_all_of.md b/reference/algorithm/ranges_all_of.md
index 28dbf31ca..d5e6dc246 100644
--- a/reference/algorithm/ranges_all_of.md
+++ b/reference/algorithm/ranges_all_of.md
@@ -111,7 +111,7 @@ inline constexpr all_of_impl all_of;
 - C++20
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
+- [Clang](/implementation.md#clang): 16.0.6 [mark verified]
 - [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_token -- stop_token: never_stop_token (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token.html"/>
      <id>4f805fa67c4e0672645eb48faf5e1891013d2904:reference/stop_token.md</id>
      <updated>2025-04-04T19:13:17+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;stop_token&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;stop_token&amp;gt;&lt;/code&gt;ヘッダは、マルチスレッド処理や非同期処理おける停止要求の状態 &lt;code&gt;停止状態&lt;/code&gt; を扱うクラスを定義する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_token.html&#34;&gt;stop_token&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;stop_token/stop_callback.html&#34;&gt;stop_callback&lt;/a&gt;&lt;/code&gt;は停止状態を共有所有する。最後に破棄されたオブジェクトが停止状態を自動的に解放する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_source.md.nolink&#34;&gt;inplace_stop_source&lt;/a&gt;&lt;/code&gt;は停止状態をメンバとして直接所有する。&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_token.md.nolink&#34;&gt;inplace_stop_token&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_callback.md.nolink&#34;&gt;inplace_stop_callback&lt;/a&gt;&lt;/code&gt;は停止状態の所有には関与しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stoppable_token.html&#34;&gt;stoppable_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止トークン型であることを表す (concept)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/unstoppable_token.html&#34;&gt;unstoppable_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止不可能な停止トークン型であることを表す (concept)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;停止トークン&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_token.html&#34;&gt;stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止要求を発生させるクラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_callback.html&#34;&gt;stop_callback&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止要求に応じて呼び出されるコールバック (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/nostopstate.html&#34;&gt;nostopstate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止状態を扱わない&lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;を構築するためのタグ (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/never_stop_token.html&#34;&gt;never_stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止不可能な停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_token.md.nolink&#34;&gt;inplace_stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インプレース停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_source.md.nolink&#34;&gt;inplace_stop_source&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インプレース停止要求を発生させるクラス (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_callback.md.nolink&#34;&gt;inplace_stop_callback&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インプレース停止要求に応じて呼び出されるコールバック (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_callback_for_t.html&#34;&gt;stop_callback_for_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;対応するコールバック型を取得 (alias template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0660r10.pdf&#34; target=&#34;_blank&#34;&gt;P0660R10 Stop token and joining thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html&#34; target=&#34;_blank&#34;&gt;P2300R10 &lt;code&gt;std::execution&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>never_stop_token -- stop_token: never_stop_token (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/never_stop_token.html"/>
      <id>4f805fa67c4e0672645eb48faf5e1891013d2904:reference/stop_token/never_stop_token.md</id>
      <updated>2025-04-04T19:13:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/never_stop_token.md b/reference/stop_token/never_stop_token.md
new file mode 100644
index 000000000..a78d5a66a
--- /dev/null
+++ b/reference/stop_token/never_stop_token.md
@@ -0,0 +1,63 @@
+# never_stop_token
+* stop_token[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  class never_stop_token;
+}
+```
+
+## 概要
+
+停止不可能な停止トークン。[`unstoppable_token`](unstoppable_token.md)コンセプトのモデル。
+
+
+## メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `(constructor)` | コンストラクタ | C++26 |
+| `(destructor)`  | デストラクタ   | C++26 |
+| `bool operator==(const never_stop_token&amp;amp;) const = default;` | 等値比較 | C++26 |
+| `bool operator!=(const never_stop_token&amp;amp;) const;` | 非等値比較 (`==`により使用可能) | C++26 |
+
+## 静的メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `stop_requested` | `false`を返す | C++26 |
+| `stop_possible` | `false`を返す | C++26 |
+
+## メンバ型
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `callback_type` | 説明専用の`callback-type`型 | C++26 |
+
+```cpp
+struct callback-type {
+  explicit callback-type(never_stop_token, auto&amp;amp;&amp;amp;) noexcept {}
+};
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`unstoppable_token`](unstoppable_token.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoppable_token -- stop_token: never_stop_token (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stoppable_token.html"/>
      <id>4f805fa67c4e0672645eb48faf5e1891013d2904:reference/stop_token/stoppable_token.md</id>
      <updated>2025-04-04T19:13:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stoppable_token.md b/reference/stop_token/stoppable_token.md
index 271dedfa8..1ff936a63 100644
--- a/reference/stop_token/stoppable_token.md
+++ b/reference/stop_token/stoppable_token.md
@@ -110,7 +110,7 @@ concept stoppable-callback-for =
 - [`unstoppable_token`](unstoppable_token.md)
 - [`stop_token`](stop_token.md)
 - [`inplace_stop_token`](inplace_stop_token.md.nolink)
-- [`never_stop_token`](never_stop_token.md.nolink)
+- [`never_stop_token`](never_stop_token.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unstoppable_token -- stop_token: never_stop_token (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/unstoppable_token.html"/>
      <id>4f805fa67c4e0672645eb48faf5e1891013d2904:reference/stop_token/unstoppable_token.md</id>
      <updated>2025-04-04T19:13:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/unstoppable_token.md b/reference/stop_token/unstoppable_token.md
index 24a9165f0..ff88b2fc7 100644
--- a/reference/stop_token/unstoppable_token.md
+++ b/reference/stop_token/unstoppable_token.md
@@ -35,7 +35,7 @@ namespace std {
 
 ## 関連項目
 - [`stoppable_token`](stoppable_token.md)
-- [`never_stop_token`](never_stop_token.md.nolink)
+- [`never_stop_token`](never_stop_token.md)
 
 ## 参照
 - [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_token -- stop_token: stop_callback_for_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token.html"/>
      <id>fa3f23c2a1177ff515f4b19d2dea734e5733f3a7:reference/stop_token.md</id>
      <updated>2025-04-04T18:58:25+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;stop_token&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;stop_token&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;stop_token&amp;gt;&lt;/code&gt;ヘッダは、マルチスレッド処理や非同期処理おける停止要求の状態 &lt;code&gt;停止状態&lt;/code&gt; を扱うクラスを定義する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_token.html&#34;&gt;stop_token&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&#34;stop_token/stop_callback.html&#34;&gt;stop_callback&lt;/a&gt;&lt;/code&gt;は停止状態を共有所有する。最後に破棄されたオブジェクトが停止状態を自動的に解放する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_source.md.nolink&#34;&gt;inplace_stop_source&lt;/a&gt;&lt;/code&gt;は停止状態をメンバとして直接所有する。&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_token.md.nolink&#34;&gt;inplace_stop_token&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_callback.md.nolink&#34;&gt;inplace_stop_callback&lt;/a&gt;&lt;/code&gt;は停止状態の所有には関与しない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stoppable_token.html&#34;&gt;stoppable_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止トークン型であることを表す (concept)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/unstoppable_token.html&#34;&gt;unstoppable_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止不可能な停止トークン型であることを表す (concept)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;停止トークン&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_token.html&#34;&gt;stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止要求を発生させるクラス (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_callback.html&#34;&gt;stop_callback&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止要求に応じて呼び出されるコールバック (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/nostopstate.html&#34;&gt;nostopstate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止状態を扱わない&lt;code&gt;&lt;a href=&#34;stop_token/stop_source.html&#34;&gt;stop_source&lt;/a&gt;&lt;/code&gt;を構築するためのタグ (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/never_stop_token.md.nolink&#34;&gt;never_stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;停止不可能な停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_token.md.nolink&#34;&gt;inplace_stop_token&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インプレース停止トークン (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_source.md.nolink&#34;&gt;inplace_stop_source&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インプレース停止要求を発生させるクラス (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/inplace_stop_callback.md.nolink&#34;&gt;inplace_stop_callback&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インプレース停止要求に応じて呼び出されるコールバック (class template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;stop_token/stop_callback_for_t.html&#34;&gt;stop_callback_for_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;対応するコールバック型を取得 (alias template)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0660r10.pdf&#34; target=&#34;_blank&#34;&gt;P0660R10 Stop token and joining thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html&#34; target=&#34;_blank&#34;&gt;P2300R10 &lt;code&gt;std::execution&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_callback -- stop_token: stop_callback_for_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_callback.html"/>
      <id>fa3f23c2a1177ff515f4b19d2dea734e5733f3a7:reference/stop_token/stop_callback.md</id>
      <updated>2025-04-04T18:58:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_callback.md b/reference/stop_token/stop_callback.md
index 1886e4062..f71392b3e 100644
--- a/reference/stop_token/stop_callback.md
+++ b/reference/stop_token/stop_callback.md
@@ -6,7 +6,7 @@
 
 ```cpp
 namespace std {
-  template&amp;lt;class Callback&amp;gt;
+  template&amp;lt;class CallbackFn&amp;gt;
   class stop_callback;
 }
 ```
@@ -17,7 +17,7 @@ namespace std {
 ## メンバ関数
 
 | 名前 | 説明 | 対応バージョン |
-|---------------------------------------------------|--------------------------------------------------------------------|-------|
+|------|------|-------|
 | [`(constructor)`](stop_callback/op_constructor.md)| コンストラクタ | C++20 |
 | [`(destructor)`](stop_callback/op_destructor.md)  | デストラクタ | C++20 |
 | `operator=(const stop_callback&amp;amp;) = delete;`       | 代入演算子 | C++20 |
@@ -25,21 +25,21 @@ namespace std {
 
 ## メンバ型
 
-| 名前            | 説明           | 対応バージョン |
-|-----------------|----------------|----------------|
-| `callback_type` | テンプレート引数`Callback`に指定した型| C++20 |
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| `callback_type` | `CallbackFn` | C++20 |
 
 ## 推論補助
 
 | 名前 | 説明 | 対応バージョン |
-|---------------------------------------------|------------------------------------|-------|
+|------|------|-------|
 | [`(deduction_guide)`](stop_callback/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20 |
 
 ## 適格要件
-テンプレート引数の`Callback`は[`invocable`](/reference/concepts/invokable.md.nolink)と[`destructible`](/reference/concepts/destructible.md)制約を満たさなければならい。
+テンプレート引数の`CallbackFn`は[`invocable`](/reference/concepts/invokable.md.nolink)と[`destructible`](/reference/concepts/destructible.md)制約を満たさなければならい。
 
 ## 事前条件
-テンプレート引数の`Callback`は[`invocable`](/reference/concepts/invokable.md.nolink)と[`destructible`](/reference/concepts/destructible.md)制約を満たさなければならい。
+テンプレート引数の`CallbackFn`は[`invocable`](/reference/concepts/invokable.md.nolink)と[`destructible`](/reference/concepts/destructible.md)制約を満たさなければならい。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- stop_token: stop_callback_for_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_callback/op_constructor.html"/>
      <id>fa3f23c2a1177ff515f4b19d2dea734e5733f3a7:reference/stop_token/stop_callback/op_constructor.md</id>
      <updated>2025-04-04T18:58:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_callback/op_constructor.md b/reference/stop_token/stop_callback/op_constructor.md
index 6cda6aecf..fb334ad16 100644
--- a/reference/stop_token/stop_callback/op_constructor.md
+++ b/reference/stop_token/stop_callback/op_constructor.md
@@ -8,10 +8,10 @@
 ```cpp
 template&amp;lt;class C&amp;gt;
 explicit stop_callback(const stop_token&amp;amp; st, C&amp;amp;&amp;amp; cb)
-          noexcept(is_nothrow_constructible_v&amp;lt;Callback, C&amp;gt;);  // (1)
+          noexcept(is_nothrow_constructible_v&amp;lt;CallbackFn, C&amp;gt;);  // (1)
 template&amp;lt;class C&amp;gt;
 explicit stop_callback(stop_token&amp;amp;&amp;amp; st, C&amp;amp;&amp;amp; cb)
-          noexcept(is_nothrow_constructible_v&amp;lt;Callback, C&amp;gt;);  // (2)
+          noexcept(is_nothrow_constructible_v&amp;lt;CallbackFn, C&amp;gt;);  // (2)
 
 stop_callback(const stop_callback&amp;amp;) = delete;                 // (3)
 stop_callback(stop_callback&amp;amp;&amp;amp;) = delete;                      // (4)
@@ -25,22 +25,22 @@ stop_callback(stop_callback&amp;amp;&amp;amp;) = delete;                      // (4)
 
 
 ## 適格要件
-クラステンプレートのテンプレート引数`Callback`とコンストラクタのテンプレート引数`C`は[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;Callback, C&amp;gt;`制約を満たさなければならない。
+クラステンプレートのテンプレート引数`CallbackFn`とコンストラクタのテンプレート引数`C`は[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;CallbackFn, C&amp;gt;`制約を満たさなければならない。
 
 
 ## 事前条件
-クラステンプレートのテンプレート引数`Callback`とコンストラクタのテンプレート引数`C`は[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;Callback, C&amp;gt;`制約を満たさなければならない。
+クラステンプレートのテンプレート引数`CallbackFn`とコンストラクタのテンプレート引数`C`は[`constructible_from`](/reference/concepts/constructible_from.md)`&amp;lt;CallbackFn, C&amp;gt;`制約を満たさなければならない。
 
 
 ## 効果
-コンストラクタの引数に渡した`cb`を`std::forward&amp;lt;Callback&amp;gt;(cb)`で転送して、メンバ変数（仮に`callback`とする）を初期化する。
+コンストラクタの引数に渡した`cb`を`std::forward&amp;lt;CallbackFn&amp;gt;(cb)`で転送して、メンバ変数（仮に`callback`とする）を初期化する。
 
-もし`st.`[`stop_requested()`](../stop_token/stop_requested.md) `==` `true` の場合は、コンストラクタを呼び出したスレッドの中で`std::forward&amp;lt;Callback&amp;gt;(callback)()`を評価し、コールバックを呼び出す。したがってこのコールバックの呼び出しはコンストラクタから処理が戻るより前に完了する。
+もし`st.`[`stop_requested()`](../stop_token/stop_requested.md) `==` `true` の場合は、コンストラクタを呼び出したスレッドの中で`std::forward&amp;lt;CallbackFn&amp;gt;(callback)()`を評価し、コールバックを呼び出す。したがってこのコールバックの呼び出しはコンストラクタから処理が戻るより前に完了する。
 
-そうでない場合は、`st`が所有している停止状態への所有権を取得して停止状態を共有し、その停止状態に対する最初の[`request_stop()`](../stop_source/request_stop.md)の呼び出しで`std::forward&amp;lt;Callback&amp;gt;(callback)()`を評価するようなコールバックを登録する。
+そうでない場合は、`st`が所有している停止状態への所有権を取得して停止状態を共有し、その停止状態に対する最初の[`request_stop()`](../stop_source/request_stop.md)の呼び出しで`std::forward&amp;lt;CallbackFn&amp;gt;(callback)()`を評価するようなコールバックを登録する。
 `st`が停止状態を所有していない場合は何もしない。
 
-もし`std::forward&amp;lt;Callback&amp;gt;(callback)()`の呼び出しが例外によって終了した場合は、[`std::terminate()`](/reference/exception/terminate.md)関数が呼び出され、プログラムが異常終了する。
+もし`std::forward&amp;lt;CallbackFn&amp;gt;(callback)()`の呼び出しが例外によって終了した場合は、[`std::terminate()`](/reference/exception/terminate.md)関数が呼び出され、プログラムが異常終了する。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- stop_token: stop_callback_for_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_callback/op_deduction_guide.html"/>
      <id>fa3f23c2a1177ff515f4b19d2dea734e5733f3a7:reference/stop_token/stop_callback/op_deduction_guide.md</id>
      <updated>2025-04-04T18:58:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_callback/op_deduction_guide.md b/reference/stop_token/stop_callback/op_deduction_guide.md
index 09d091fbc..c06304e1e 100644
--- a/reference/stop_token/stop_callback/op_deduction_guide.md
+++ b/reference/stop_token/stop_callback/op_deduction_guide.md
@@ -6,8 +6,8 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class Callback&amp;gt;
-  stop_callback(stop_token, Callback) -&amp;gt; stop_callback&amp;lt;Callback&amp;gt;;
+  template &amp;lt;class CallbackFn&amp;gt;
+  stop_callback(stop_token, CallbackFn) -&amp;gt; stop_callback&amp;lt;CallbackFn&amp;gt;;
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_callback_for_t -- stop_token: stop_callback_for_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_callback_for_t.html"/>
      <id>fa3f23c2a1177ff515f4b19d2dea734e5733f3a7:reference/stop_token/stop_callback_for_t.md</id>
      <updated>2025-04-04T18:58:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_callback_for_t.md b/reference/stop_token/stop_callback_for_t.md
new file mode 100644
index 000000000..bc7004567
--- /dev/null
+++ b/reference/stop_token/stop_callback_for_t.md
@@ -0,0 +1,31 @@
+# stop_callback_for_t
+* stop_token[meta header]
+* std[meta namespace]
+* type-alias[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class T, class CallbackFn&amp;gt;
+  using stop_callback_for_t = T::template callback_type&amp;lt;CallbackFn&amp;gt;;
+}
+```
+
+## 概要
+
+型`T`に対応する`CallbackFn`型のコールバック型を取得する。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stop_token -- stop_token: stop_callback_for_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_token.html"/>
      <id>fa3f23c2a1177ff515f4b19d2dea734e5733f3a7:reference/stop_token/stop_token.md</id>
      <updated>2025-04-04T18:58:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_token.md b/reference/stop_token/stop_token.md
index d8998fbe8..406206084 100644
--- a/reference/stop_token/stop_token.md
+++ b/reference/stop_token/stop_token.md
@@ -13,7 +13,7 @@ namespace std {
 ## 概要
 `stop_token`クラスは、停止要求が作成されたかどうか、あるいは停止要求が作成されうるかどうかなど、停止状態を問い合わせるためのインターフェースを提供する。
 
-[`stop_source`](stop_source.md)クラスの[`get_token()`](./stop_source/get_token.md)メンバ関数を呼び出すと、その`stop_source`クラスのオブジェクトと停止状態を共有する`stop_token`クラスのオブジェクトを構築できる。これによって、`stop_source`側から停止要求を作成したときに、この`stop_token`を通じて停止状態を問い合わせられるようになる。
+[`stop_source`](stop_source.md)クラスの[`get_token()`](stop_source/get_token.md)メンバ関数を呼び出すと、その`stop_source`クラスのオブジェクトと停止状態を共有する`stop_token`クラスのオブジェクトを構築できる。これによって、`stop_source`側から停止要求を作成したときに、この`stop_token`を通じて停止状態を問い合わせられるようになる。
 
 また、`stop_token`クラスは以下のクラスでも利用される：
 
@@ -26,7 +26,7 @@ namespace std {
 ## メンバ関数
 
 | 名前 | 説明 | 対応バージョン |
-|-------------------------------------------------|--------------------------------------------------------------------|-------|
+|------|------|-------|
 | [`(constructor)`](stop_token/op_constructor.md) | コンストラクタ | C++20 |
 | [`(destructor)`](stop_token/op_destructor.md)   | デストラクタ | C++20 |
 | [`operator=`](stop_token/op_assign.md)          | 代入演算子 | C++20 |
@@ -34,12 +34,19 @@ namespace std {
 | [`stop_requested`](stop_token/stop_requested.md)| 停止要求が作成されたかどうかを取得する | C++20 |
 | [`stop_possible`](stop_token/stop_possible.md)  | 停止要求が作成されうるかどうかを取得する | C++20 |
 
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| [`callback_type`](stop_token/callback_type.md) | 対応するコールバック型 (alias template) | C++26 |
+
 ## 非メンバ関数
+
 | 名前 | 説明 | 対応バージョン |
-|------------------------------------------------|---------------------------------------|-------|
-| [`operator==`](stop_token/op_equal.md)         | 等値演算子 | C++20 |
-| [`operator!=`](stop_token/op_not_equal.md)     | 非等値演算子 | C++20 |
-| [`swap`](stop_token/swap_free.md)              | 2つの`stop_token`オブジェクトを入れ替える | C++20 |
+|------|------|-------|
+| [`operator==`](stop_token/op_equal.md)     | 等値演算子 | C++20 |
+| [`operator!=`](stop_token/op_not_equal.md) | 非等値演算子 | C++20 |
+| [`swap`](stop_token/swap_free.md)          | 2つの`stop_token`オブジェクトを入れ替える | C++20 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>callback_type -- stop_token: stop_callback_for_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stop_token/callback_type.html"/>
      <id>fa3f23c2a1177ff515f4b19d2dea734e5733f3a7:reference/stop_token/stop_token/callback_type.md</id>
      <updated>2025-04-04T18:58:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stop_token/callback_type.md b/reference/stop_token/stop_token/callback_type.md
new file mode 100644
index 000000000..8c5f6a54c
--- /dev/null
+++ b/reference/stop_token/stop_token/callback_type.md
@@ -0,0 +1,30 @@
+# callback_type
+* stop_token[meta header]
+* std[meta namespace]
+* stop_token[meta class]
+* type-alias[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class CallbackFn&amp;gt;
+using callback_type = stop_callback&amp;lt;CallbackFn&amp;gt;;
+```
+* stop_callback[link ../stop_callback.md]
+
+## 概要
+`stop_token`に対応するコールバック型。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [GCC](/implementation.md#gcc): ??
+- [Clang](/implementation.md#clang): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stoppable_token -- stop_token: stop_callback_for_t (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/stop_token/stoppable_token.html"/>
      <id>fa3f23c2a1177ff515f4b19d2dea734e5733f3a7:reference/stop_token/stoppable_token.md</id>
      <updated>2025-04-04T18:58:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stop_token/stoppable_token.md b/reference/stop_token/stoppable_token.md
index 8f5615a83..271dedfa8 100644
--- a/reference/stop_token/stoppable_token.md
+++ b/reference/stop_token/stoppable_token.md
@@ -68,9 +68,9 @@ concept stoppable-callback-for =
 ```
 * invocable[link /reference/concepts/invocable.md]
 * constructible_from[link /reference/concepts/constructible_from.md]
-* stop_callback_for_t[link stop_callback_for_t.md.nolink]
+* stop_callback_for_t[link stop_callback_for_t.md]
 
-説明用の`init`を[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(init), Initializer&amp;gt;`を満たす式、型`SCB`を[`stop_callback_for_t`](stop_callback_for_t.md.nolink)`&amp;lt;Token, CallbackFn&amp;gt;`とする。
+説明用の`init`を[`same_as`](/reference/concepts/same_as.md)`&amp;lt;decltype(init), Initializer&amp;gt;`を満たす式、型`SCB`を[`stop_callback_for_t`](stop_callback_for_t.md)`&amp;lt;Token, CallbackFn&amp;gt;`とする。
 
 `stoppable-callback-for&amp;lt;CallbackFn, Token, Initializer&amp;gt;`のモデルとなるには、下記を満たすこと。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-04-26T08:34:12.005514</updated>
  <id>811035e3-6624-4a25-92d9-cc32bce5e25b</id>

  
    <entry>
      <title>未初期化領域への暗黙的なオブジェクト構築 -- 未初期化領域への暗黙的なオブジェクト構築 : 微修正 #1117</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.html"/>
      <id>629ccda92610146d4e330c73f6cc44cb1977330c:lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md</id>
      <updated>2023-04-26T17:29:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
index 9ade0289a..ece3e8084 100644
--- a/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
+++ b/lang/cpp20/implicit_creation_of_objects_for_low-level_object_manipulation.md
@@ -348,7 +348,7 @@ void process(Stream *stream) {
 }
 ```
 
-`Foo`も`Bar`も*implicit-lifetime types*だとして、以前のこのコードに対して`Stream::read()`が次のように実装されている場合
+`Foo`も`Bar`も*implicit-lifetime types*だとして、このコードに対して`Stream::read()`が次のように実装されている場合
 
 ```cpp
 unique_ptr&amp;lt;char[]&amp;gt; Stream::read() {
@@ -363,7 +363,7 @@ unique_ptr&amp;lt;char[]&amp;gt; Stream::read() {
 
 ただし、`process()`内の各分岐においては、返された`buffer`ポインタ（`char(*)[]`）からそれぞれの場合で適切なオブジェクト（`Foo`/`Bar`）へのポインタを、[`std::launder()`](/reference/new/launder.md)を用いて取得する必要がある。
 
-`reinterpret_cast`はポインタ型の変換のみを行うが、型変換だけではそのポインタはその領域に生存期間内にあるオブジェクトと必ずしもリンクしない。`std::launder()`は、渡されたポインタの領域で生存期間内にあるオブジェクトへのポインタを生成して返す関数であり、これを用いることで暗黙的に構築されたオブジェクトへの適切なポインタを得ることができる。
+`reinterpret_cast`はポインタ型の変換のみを行うが、型変換だけではそのポインタはその領域で生存期間内にあるオブジェクトと必ずしもリンクしない。`std::launder()`は、渡されたポインタの領域で生存期間内にあるオブジェクトへのポインタを生成して返す関数であり、これを用いることで暗黙的に構築されたオブジェクトへの適切なポインタを得ることができる。
 
 ### 動的配列の実装
 
@@ -389,9 +389,9 @@ unique_ptr&amp;lt;char[]&amp;gt; Stream::read() {
 
 などが考案されていた。
 
-最終的には、暗黙的なオブジェクト構築のように、C++のオブジェクトモデルを修正する形でこの問題を解消することになった。
+最終的には、C++のオブジェクトモデルを修正する暗黙的なオブジェクト構築によってこの問題を解消することになった。
 
-ただし、２番目の特殊なライブラリ関数もC++23で`std::start_lifetime_as()`として追加されている。
+なお、2番目の特殊なライブラリ関数もC++23で`std::start_lifetime_as()`として追加されている。
 
 ## 関連項目
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>page_title (1行目の見出し1はページのタイトルです。修飾なしで記載してください) -- クラスの雛形ページ : Hidden Friendsの記載例を追加 #1142</title>
      <link href="https://cpprefjp.github.io/start_editing/class_template_page.html"/>
      <id>5f8fea3398580638ca88fe270ac92b789e6e48bc:start_editing/class_template_page.md</id>
      <updated>2023-04-26T16:29:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing/class_template_page.md b/start_editing/class_template_page.md
index e6c268aa8..525e7d8eb 100644
--- a/start_editing/class_template_page.md
+++ b/start_editing/class_template_page.md
@@ -102,7 +102,7 @@ namespace std {
 (比較演算子がデフォルト定義され、個別ページを作らない場合の記述例。オペランドの組み合わせ数が多い場合には、個別ページを作ることを推奨する)
 
 | 名前 | 説明 | 対応バージョン |
-|-----|-----|-----|
+|------|------|----------------|
 | `bool operator==(const X&amp;amp;, const X&amp;amp;) = default;`  | 等値比較 | |
 | `bool operator!=(const X&amp;amp;, const X&amp;amp;);`            | 非等値比較 (`==`により使用可能) | |
 | `strong_ordering operator&amp;lt;=&amp;gt;(const X&amp;amp;, const X&amp;amp;) = default;` | 三方比較 | |
@@ -112,6 +112,15 @@ namespace std {
 | `bool operator&amp;gt;=(const X&amp;amp;, const X&amp;amp;);` | 左辺が右辺以上かを判定する (`&amp;lt;=&amp;gt;`により使用可能) | |
 
 
+## 非メンバ（*Hidden friends*）関数
+
+(`friend`付きメンバ関数はこの見出し以下で記載する。[`counted_iterator`](/reference/iterator/counted_iterator.md)を例として参照)
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `swap` | 2つのオブジェクトを入れ替える | |
+
+
 ## 例
 ```cpp example
 // (ここには、クラスを解説するための、サンプルコードを記述します。)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>digits -- Merge pull request #1143 from nu4nu/fix-numeric-limits</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/digits.html"/>
      <id>521696613d6ef237fd0ec8c46ab743889bc973f1:reference/limits/numeric_limits/digits.md</id>
      <updated>2023-04-20T11:15:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/digits.md b/reference/limits/numeric_limits/digits.md
index d2df4503d..a31713bcc 100644
--- a/reference/limits/numeric_limits/digits.md
+++ b/reference/limits/numeric_limits/digits.md
@@ -30,7 +30,7 @@ static constexpr int digits; // C++11
 |---------------|-----------------------------------------------------|
 | `float`       | [`FLT_MANT_DIG`](/reference/cfloat/flt_mant_dig.md) |
 | `double`      | [`DBL_MANT_DIG`](/reference/cfloat/dbl_mant_dig.md) |
-| `long double` | [`LDBL_MANT_DIG`](/reference/cfloat/ldbl_dig.md)    |
+| `long double` | [`LDBL_MANT_DIG`](/reference/cfloat/ldbl_mant_dig.md)    |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_exponent -- Merge pull request #1143 from nu4nu/fix-numeric-limits</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent.html"/>
      <id>521696613d6ef237fd0ec8c46ab743889bc973f1:reference/limits/numeric_limits/max_exponent.md</id>
      <updated>2023-04-20T11:15:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/max_exponent.md b/reference/limits/numeric_limits/max_exponent.md
index 9a0e69216..95f84a9c5 100644
--- a/reference/limits/numeric_limits/max_exponent.md
+++ b/reference/limits/numeric_limits/max_exponent.md
@@ -14,16 +14,16 @@ static constexpr int max_exponent;
 
 ## 概要
 浮動小数点数型において、型`T`の指数上限値を得る。  
-基数[`radix`](radix.md)を`max_exponent`の値で累乗した値が、型`T`で表現可能な正規化された値となる最大の正の値。  
+基数[`radix`](radix.md)を`max_exponent - 1`の値で累乗した値が、型`T`で表現可能な正規化された値となる最大の正の値。  
 浮動小数点数型以外は0になる。  
 
 対応するマクロを次の表に挙げる。
 
 | 型            | 対応するマクロ |
 |---------------|----------------|
-| `float`       | `FLT_MAX_EXP`  |
-| `double`      | `DBL_MAX_EXP`  |
-| `long double` | `LDBL_MAX_EXP` |
+| `float`       | [`FLT_MAX_EXP`](/reference/cfloat/flt_max_exp.md)   |
+| `double`      | [`DBL_MAX_EXP`](/reference/cfloat/dbl_max_exp.md)   |
+| `long double` | [`LDBL_MAX_EXP`](/reference/cfloat/ldbl_max_exp.md) |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>min_exponent -- Merge pull request #1143 from nu4nu/fix-numeric-limits</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/min_exponent.html"/>
      <id>521696613d6ef237fd0ec8c46ab743889bc973f1:reference/limits/numeric_limits/min_exponent.md</id>
      <updated>2023-04-20T11:15:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/min_exponent.md b/reference/limits/numeric_limits/min_exponent.md
index ad9f2ea1c..253e15063 100644
--- a/reference/limits/numeric_limits/min_exponent.md
+++ b/reference/limits/numeric_limits/min_exponent.md
@@ -14,16 +14,16 @@ static constexpr int min_exponent;
 
 ## 概要
 浮動小数点数型において、型`T`の指数下限値を得る。  
-基数[`radix`](radix.md)を`min_exponent`の値で累乗した値が、型`T`で表現可能な正規化された値となる最小の負の値。   
+基数[`radix`](radix.md)を`min_exponent - 1`の値で累乗した値が、型`T`で表現可能な正規化された値となる最小の負の値。   
 浮動小数点数以外は0となる。  
 
 対応するマクロを次の表に挙げる。
 
 | 型            | 対応するマクロ |
 |---------------|----------------|
-| `float`       | `FLT_MIN_EXP`  |
-| `double`      | `DBL_MIN_EXP`  |
-| `long double` | `LDBL_MIN_EXP` |
+| `float`       | [`FLT_MIN_EXP`](/reference/cfloat/flt_min_exp.md)   |
+| `double`      | [`DBL_MIN_EXP`](/reference/cfloat/dbl_min_exp.md)   |
+| `long double` | [`LDBL_MIN_EXP`](/reference/cfloat/ldbl_min_exp.md) |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_exponent -- numeric_limits: Fix description of max/min_exponent</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent.html"/>
      <id>4816cf7b669210665378bf3cdf43dd1b6b2cfa70:reference/limits/numeric_limits/max_exponent.md</id>
      <updated>2023-04-20T01:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/max_exponent.md b/reference/limits/numeric_limits/max_exponent.md
index ee9ca5812..95f84a9c5 100644
--- a/reference/limits/numeric_limits/max_exponent.md
+++ b/reference/limits/numeric_limits/max_exponent.md
@@ -14,7 +14,7 @@ static constexpr int max_exponent;
 
 ## 概要
 浮動小数点数型において、型`T`の指数上限値を得る。  
-基数[`radix`](radix.md)を`max_exponent`の値で累乗した値が、型`T`で表現可能な正規化された値となる最大の正の値。  
+基数[`radix`](radix.md)を`max_exponent - 1`の値で累乗した値が、型`T`で表現可能な正規化された値となる最大の正の値。  
 浮動小数点数型以外は0になる。  
 
 対応するマクロを次の表に挙げる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tomoya Adachi</name>
        <email>git@nu4.nu</email>
      </author>
    </entry>
  
    <entry>
      <title>min_exponent -- numeric_limits: Fix description of max/min_exponent</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/min_exponent.html"/>
      <id>4816cf7b669210665378bf3cdf43dd1b6b2cfa70:reference/limits/numeric_limits/min_exponent.md</id>
      <updated>2023-04-20T01:23:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/min_exponent.md b/reference/limits/numeric_limits/min_exponent.md
index 30828fe39..253e15063 100644
--- a/reference/limits/numeric_limits/min_exponent.md
+++ b/reference/limits/numeric_limits/min_exponent.md
@@ -14,7 +14,7 @@ static constexpr int min_exponent;
 
 ## 概要
 浮動小数点数型において、型`T`の指数下限値を得る。  
-基数[`radix`](radix.md)を`min_exponent`の値で累乗した値が、型`T`で表現可能な正規化された値となる最小の負の値。   
+基数[`radix`](radix.md)を`min_exponent - 1`の値で累乗した値が、型`T`で表現可能な正規化された値となる最小の負の値。   
 浮動小数点数以外は0となる。  
 
 対応するマクロを次の表に挙げる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tomoya Adachi</name>
        <email>git@nu4.nu</email>
      </author>
    </entry>
  
    <entry>
      <title>digits -- numeric_limits: Add and fix links to cfloat</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/digits.html"/>
      <id>a13c86a40039bef44b954d1f33455a41fc1eaab9:reference/limits/numeric_limits/digits.md</id>
      <updated>2023-04-20T01:20:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/digits.md b/reference/limits/numeric_limits/digits.md
index d2df4503d..a31713bcc 100644
--- a/reference/limits/numeric_limits/digits.md
+++ b/reference/limits/numeric_limits/digits.md
@@ -30,7 +30,7 @@ static constexpr int digits; // C++11
 |---------------|-----------------------------------------------------|
 | `float`       | [`FLT_MANT_DIG`](/reference/cfloat/flt_mant_dig.md) |
 | `double`      | [`DBL_MANT_DIG`](/reference/cfloat/dbl_mant_dig.md) |
-| `long double` | [`LDBL_MANT_DIG`](/reference/cfloat/ldbl_dig.md)    |
+| `long double` | [`LDBL_MANT_DIG`](/reference/cfloat/ldbl_mant_dig.md)    |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tomoya Adachi</name>
        <email>git@nu4.nu</email>
      </author>
    </entry>
  
    <entry>
      <title>max_exponent -- numeric_limits: Add and fix links to cfloat</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/max_exponent.html"/>
      <id>a13c86a40039bef44b954d1f33455a41fc1eaab9:reference/limits/numeric_limits/max_exponent.md</id>
      <updated>2023-04-20T01:20:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/max_exponent.md b/reference/limits/numeric_limits/max_exponent.md
index 9a0e69216..ee9ca5812 100644
--- a/reference/limits/numeric_limits/max_exponent.md
+++ b/reference/limits/numeric_limits/max_exponent.md
@@ -21,9 +21,9 @@ static constexpr int max_exponent;
 
 | 型            | 対応するマクロ |
 |---------------|----------------|
-| `float`       | `FLT_MAX_EXP`  |
-| `double`      | `DBL_MAX_EXP`  |
-| `long double` | `LDBL_MAX_EXP` |
+| `float`       | [`FLT_MAX_EXP`](/reference/cfloat/flt_max_exp.md)   |
+| `double`      | [`DBL_MAX_EXP`](/reference/cfloat/dbl_max_exp.md)   |
+| `long double` | [`LDBL_MAX_EXP`](/reference/cfloat/ldbl_max_exp.md) |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tomoya Adachi</name>
        <email>git@nu4.nu</email>
      </author>
    </entry>
  
    <entry>
      <title>min_exponent -- numeric_limits: Add and fix links to cfloat</title>
      <link href="https://cpprefjp.github.io/reference/limits/numeric_limits/min_exponent.html"/>
      <id>a13c86a40039bef44b954d1f33455a41fc1eaab9:reference/limits/numeric_limits/min_exponent.md</id>
      <updated>2023-04-20T01:20:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/limits/numeric_limits/min_exponent.md b/reference/limits/numeric_limits/min_exponent.md
index ad9f2ea1c..30828fe39 100644
--- a/reference/limits/numeric_limits/min_exponent.md
+++ b/reference/limits/numeric_limits/min_exponent.md
@@ -21,9 +21,9 @@ static constexpr int min_exponent;
 
 | 型            | 対応するマクロ |
 |---------------|----------------|
-| `float`       | `FLT_MIN_EXP`  |
-| `double`      | `DBL_MIN_EXP`  |
-| `long double` | `LDBL_MIN_EXP` |
+| `float`       | [`FLT_MIN_EXP`](/reference/cfloat/flt_min_exp.md)   |
+| `double`      | [`DBL_MIN_EXP`](/reference/cfloat/dbl_min_exp.md)   |
+| `long double` | [`LDBL_MIN_EXP`](/reference/cfloat/ldbl_min_exp.md) |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tomoya Adachi</name>
        <email>git@nu4.nu</email>
      </author>
    </entry>
  
</feed>
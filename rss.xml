<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-06-22T07:10:23.269100</updated>
  <id>d33788e2-3bb5-4e73-a1c9-b56a6cafda7a</id>

  
    <entry>
      <title>erase -- map / setのerase : オーバーロード仕様が古くなっていたのを修正</title>
      <link href="https://cpprefjp.github.io/reference/map/map/erase.html"/>
      <id>6251e4abe9d90fab42621ba97fea3a0b4a3c94aa:reference/map/map/erase.md</id>
      <updated>2023-06-22T16:06:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/erase.md b/reference/map/map/erase.md
index 868c9e440..84fe25a4f 100644
--- a/reference/map/map/erase.md
+++ b/reference/map/map/erase.md
@@ -5,13 +5,18 @@
 * function[meta id-type]
 
 ```cpp
-void erase(iterator position);                             // (1) C++03
-iterator erase(const_iterator position);                   // (1) C++11
+void erase(iterator position);                             // (1) C++03 (C++11で一旦削除)
+iterator erase(iterator position);                         // (1) C++17
 
-size_type erase(const key_type&amp;amp; x);                        // (2)
+iterator erase(const_iterator position);                   // (2) C++11
 
-void erase(iterator first, iterator last);                 // (3) C++03
-iterator erase(const_iterator first, const_iterator last); // (3) C++11
+size_type erase(const key_type&amp;amp; x);                        // (3) C++03
+
+template &amp;lt;class K&amp;gt;
+size_type erase(K&amp;amp;&amp;amp; x);                                    // (4) C++23
+
+void erase(iterator first, iterator last);                 // (5) C++03
+iterator erase(const_iterator first, const_iterator last); // (5) C++11
 ```
 
 ## 概要
@@ -20,8 +25,10 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 これは削除された要素の数だけコンテナの `size` を減らし、それぞれの要素のデストラクタを呼び出す。
 
 - (1) : 指定されたイテレータが指す要素を削除する
-- (2) : 指定されたキーをもつ要素を削除する
-- (3) : 指定されたイテレータ範囲の要素をすべて削除する
+- (2) : 指定された読み取り専用イテレータが指す要素を削除する
+- (3) : 指定されたキーをもつ要素を削除する
+- (4) : `key_type`と比較可能な`K`型のキーを受け取って要素を削除する
+- (5) : 指定されたイテレータ範囲の要素をすべて削除する
 
 
 ## パラメータ
@@ -31,16 +38,20 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 
 ## 戻り値
-- (1), (3)
+- (1) :
+    - C++03 : 戻り値なし
+    - C++17 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
+- (2) : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
+- (3), (4) : 削除された要素の数を返す
+- (5) :
     - C++03 : 戻り値なし
     - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
-- (2) 削除された要素の数を返す。
 
 
 ## 計算量
-- (1) 定数時間。
-- (2) コンテナの [`size()`](/reference/map/map/size.md) について対数時間。
-- (3) コンテナの [`size()`](/reference/map/map/size.md) について対数時間、それに加えて `first` と `last` の間の距離に対する線形時間。
+- (1), (2) : 定数時間
+- (3), (4) : コンテナの [`size()`](/reference/map/map/size.md) について対数時間
+- (5) : コンテナの [`size()`](/reference/map/map/size.md) について対数時間、それに加えて `first` と `last` の間の距離に対する線形時間
 
 
 ## 備考
@@ -174,7 +185,11 @@ int main()
 
 ## 参照
 - [N2350 Container insert/erase and iterator constness (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf)
+    - C++11で、`erase(iterator)`を`erase(const_iterator)`に変更
 - [LWG Issue 2258. `a.erase(q1, q2)` unable to directly return `q2`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2258)
     - C++11では、「`a.erase(q1, q2)`の結果として`q2`が返る」という仕様だったが、`const_iterator`型が渡された場合に`iterator`型を返せない問題があった。そのためC++14では、`q2`が指す要素を指すイテレータが返る、ということが明記された
-
+- [LWG Issue 2059. C++0x ambiguity problem with `map::erase`](https://cplusplus.github.io/LWG/issue2059)
+    - C++17で、`erase(iterator)`を再追加
+- [P2077R3 Heterogeneous erasure overloads for associative containers](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2077r3.html)
+    - C++23で、`template &amp;lt;class K&amp;gt; erase(K&amp;amp;&amp;amp; x)`のオーバーロードが追加された
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map / setのerase : オーバーロード仕様が古くなっていたのを修正</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/erase.html"/>
      <id>6251e4abe9d90fab42621ba97fea3a0b4a3c94aa:reference/map/multimap/erase.md</id>
      <updated>2023-06-22T16:06:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/erase.md b/reference/map/multimap/erase.md
index 2f45485d8..f52bcb6cf 100644
--- a/reference/map/multimap/erase.md
+++ b/reference/map/multimap/erase.md
@@ -5,13 +5,18 @@
 * function[meta id-type]
 
 ```cpp
-void erase(iterator position);                             // (1) C++03
-iterator erase(const_iterator position);                   // (1) C++11
+void erase(iterator position);                             // (1) C++03 (C++11で一旦削除)
+iterator erase(iterator position);                         // (1) C++17
 
-size_type erase(const key_type&amp;amp; x);                        // (2)
+iterator erase(const_iterator position);                   // (2) C++11
 
-void erase(iterator first, iterator last);                 // (3) C++03
-iterator erase(const_iterator first, const_iterator last); // (3) C++11
+size_type erase(const key_type&amp;amp; x);                        // (3) C++03
+
+template &amp;lt;class K&amp;gt;
+size_type erase(K&amp;amp;&amp;amp; x);                                    // (4) C++23
+
+void erase(iterator first, iterator last);                 // (5) C++03
+iterator erase(const_iterator first, const_iterator last); // (5) C++11
 ```
 
 
@@ -21,9 +26,10 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 これは削除された要素の数だけコンテナの `size` を減らし、それぞれの要素のデストラクタを呼び出す。
 
 - (1) : 指定されたイテレータが指す要素を削除する
-- (2) : 指定されたキーをもつ要素をすべて削除する
-- (3) : 指定されたイテレータ範囲の要素をすべて削除する
-
+- (2) : 指定された読み取り専用イテレータが指す要素を削除する
+- (3) : 指定されたキーをもつ要素をすべて削除する
+- (4) : `key_type`と比較可能な`K`型のキーを受け取って要素をすべて削除する
+- (5) : 指定されたイテレータ範囲の要素をすべて削除する
 
 ## パラメータ
 - `position` : `multimap` から削除する単一要素を指すイテレータ。`iterator` はメンバ型であり、双方向イテレータとして定義される。
@@ -32,16 +38,20 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 
 ## 戻り値
-- (1), (3)
+- (1) :
+    - C++03 : 戻り値なし
+    - C++17 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
+- (2) : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
+- (3), (4) : 削除された要素の数を返す
+- (5) :
     - C++03 : 戻り値なし
     - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
-- (2) 削除された要素の数を返す。
 
 
 ## 計算量
-- (1) 定数時間。
-- (2) コンテナの [`size()`](/reference/map/map/size.md) について対数時間。
-- (3) コンテナの [`size()`](/reference/map/map/size.md) について対数時間、それに加えて `first` と `last` の間の距離に対する線形時間。
+- (1), (2) : 定数時間
+- (3), (4) : コンテナの [`size()`](/reference/map/map/size.md) について対数時間
+- (5) : コンテナの [`size()`](/reference/map/map/size.md) について対数時間、それに加えて `first` と `last` の間の距離に対する線形時間
 
 
 ## 備考
@@ -164,7 +174,10 @@ int main()
 
 ## 参照
 - [N2350 Container insert/erase and iterator constness (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf)
+    - C++11で、`erase(iterator)`を`erase(const_iterator)`に変更
 - [LWG Issue 2258. `a.erase(q1, q2)` unable to directly return `q2`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2258)
     - C++11では、「`a.erase(q1, q2)`の結果として`q2`が返る」という仕様だったが、`const_iterator`型が渡された場合に`iterator`型を返せない問題があった。そのためC++14では、`q2`が指す要素を指すイテレータが返る、ということが明記された
-
-
+- [LWG Issue 2059. C++0x ambiguity problem with `map::erase`](https://cplusplus.github.io/LWG/issue2059)
+    - C++17で、`erase(iterator)`を再追加
+- [P2077R3 Heterogeneous erasure overloads for associative containers](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2077r3.html)
+    - C++23で、`template &amp;lt;class K&amp;gt; erase(K&amp;amp;&amp;amp; x)`のオーバーロードが追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map / setのerase : オーバーロード仕様が古くなっていたのを修正</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/erase.html"/>
      <id>6251e4abe9d90fab42621ba97fea3a0b4a3c94aa:reference/set/multiset/erase.md</id>
      <updated>2023-06-22T16:06:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/erase.md b/reference/set/multiset/erase.md
index 4aed5f014..f8cd9641c 100644
--- a/reference/set/multiset/erase.md
+++ b/reference/set/multiset/erase.md
@@ -5,13 +5,18 @@
 * function[meta id-type]
 
 ```cpp
-void erase(iterator position);                             // (1) C++03 まで
-iterator erase(const_iterator position);                   // (1) C++11 から
+void erase(iterator position);                             // (1) C++03 (C++11で一旦削除)
+iterator erase(iterator position);                         // (1) C++17
 
-void erase(iterator first, iterator last);                 // (2) C++03 まで
-iterator erase(const_iterator first, const_iterator last); // (2) C++11 から
+iterator erase(const_iterator position);                   // (2) C++11
 
-size_type erase(const key_type&amp;amp; x);                        // (3)
+size_type erase(const key_type&amp;amp; x);                        // (3) C++03
+
+template &amp;lt;class K&amp;gt;
+size_type erase(K&amp;amp;&amp;amp; x);                                    // (4) C++23
+
+void erase(iterator first, iterator last);                 // (5) C++03
+iterator erase(const_iterator first, const_iterator last); // (5) C++11
 ```
 
 
@@ -20,8 +25,10 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 これは削除された要素の数だけコンテナの [`size`](size.md)`()` を減らし、それぞれの要素のデストラクタを呼び出す。
 
 - (1) : 指定されたイテレータが指す要素を削除する
-- (2) : 指定されたキーをもつ要素をすべて削除する
-- (3) : 指定されたイテレータ範囲の要素をすべて削除する
+- (2) : 指定された読み取り専用イテレータが指す要素を削除する
+- (3) : 指定されたキーをもつ要素をすべて削除する
+- (4) : `key_type`と比較可能な`K`型のキーを受け取って要素をすべて削除する
+- (5) : 指定されたイテレータ範囲の要素をすべて削除する
 
 
 ## パラメータ
@@ -31,16 +38,20 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 
 
 ## 戻り値
-- (1), (2) :
-    - C++03 まで : なし
+- (1) :
+    - C++03 : 戻り値なし
+    - C++17 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
+- (2) : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
+- (3), (4) : 削除された要素の数を返す
+- (5) :
+    - C++03 : 戻り値なし
     - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
-- (3) : 削除された要素の数を返す。
 
 
 ## 計算量
-- (1) : 定数時間
-- (2) : コンテナの [`size()`](size.md) についての対数時間と、それに加えて `first` と `last` の間の距離に対する線形時間。
-- (3) : コンテナの [`size()`](size.md) についての対数時間と、それに加えて `x` と等価なキーの要素数に対する線形時間。
+- (1), (2) : 定数時間
+- (3), (4) : コンテナの [`size()`](/reference/map/map/size.md) について対数時間
+- (5) : コンテナの [`size()`](/reference/map/map/size.md) について対数時間、それに加えて `first` と `last` の間の距離に対する線形時間
 
 
 ## 備考
@@ -157,7 +168,10 @@ int main()
 
 ## 参照
 - [N2350 Container insert/erase and iterator constness (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf)
+    - C++11で、`erase(iterator)`を`erase(const_iterator)`に変更
 - [LWG Issue 2258. `a.erase(q1, q2)` unable to directly return `q2`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2258)
     - C++11では、「`a.erase(q1, q2)`の結果として`q2`が返る」という仕様だったが、`const_iterator`型が渡された場合に`iterator`型を返せない問題があった。そのためC++14では、`q2`が指す要素を指すイテレータが返る、ということが明記された
-
-
+- [LWG Issue 2059. C++0x ambiguity problem with `map::erase`](https://cplusplus.github.io/LWG/issue2059)
+    - C++17で、`erase(iterator)`を再追加
+- [P2077R3 Heterogeneous erasure overloads for associative containers](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2077r3.html)
+    - C++23で、`template &amp;lt;class K&amp;gt; erase(K&amp;amp;&amp;amp; x)`のオーバーロードが追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map / setのerase : オーバーロード仕様が古くなっていたのを修正</title>
      <link href="https://cpprefjp.github.io/reference/set/set/erase.html"/>
      <id>6251e4abe9d90fab42621ba97fea3a0b4a3c94aa:reference/set/set/erase.md</id>
      <updated>2023-06-22T16:06:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/erase.md b/reference/set/set/erase.md
index 1138910f9..683180d57 100644
--- a/reference/set/set/erase.md
+++ b/reference/set/set/erase.md
@@ -5,13 +5,18 @@
 * function[meta id-type]
 
 ```cpp
-void erase(iterator position);                             // (1) C++03 まで
-iterator erase(const_iterator position);                   // (1) C++11 から
+void erase(iterator position);                             // (1) C++03 (C++11で一旦削除)
+iterator erase(iterator position);                         // (1) C++17
 
-void erase(iterator first, iterator last);                 // (2) C++03 まで
-iterator erase(const_iterator first, const_iterator last); // (2) C++11 から
+iterator erase(const_iterator position);                   // (2) C++11
 
-size_type erase(const key_type&amp;amp; x);                        // (3)
+size_type erase(const key_type&amp;amp; x);                        // (3) C++03
+
+template &amp;lt;class K&amp;gt;
+size_type erase(K&amp;amp;&amp;amp; x);                                    // (4) C++23
+
+void erase(iterator first, iterator last);                 // (5) C++03
+iterator erase(const_iterator first, const_iterator last); // (5) C++11
 ```
 
 
@@ -20,8 +25,10 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 これは削除された要素の数だけコンテナの [`size`](size.md)`()` を減らし、それぞれの要素のデストラクタを呼び出す。
 
 - (1) : 指定されたイテレータが指す要素を削除する
-- (2) : 指定されたキーをもつ要素を削除する
-- (3) : 指定されたイテレータ範囲の要素をすべて削除する
+- (2) : 指定された読み取り専用イテレータが指す要素を削除する
+- (3) : 指定されたキーをもつ要素を削除する
+- (4) : `key_type`と比較可能な`K`型のキーを受け取って要素を削除する
+- (5) : 指定されたイテレータ範囲の要素をすべて削除する
 
 
 ## パラメータ
@@ -31,16 +38,20 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 
 
 ## 戻り値
-- (1), (2) :
-    - C++03 まで : なし
+- (1) :
+    - C++03 : 戻り値なし
+    - C++17 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
+- (2) : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
+- (3), (4) : 削除された要素の数を返す
+- (5) :
+    - C++03 : 戻り値なし
     - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
-- (3) : 削除された要素の数を返す。
 
 
 ## 計算量
-- (1) : 定数時間
-- (2) : コンテナの [`size()`](size.md) についての対数時間と、それに加えて `first` と `last` の間の距離に対する線形時間。
-- (3) : コンテナの [`size()`](size.md) について対数時間。
+- (1), (2) : 定数時間
+- (3), (4) : コンテナの [`size()`](/reference/map/map/size.md) について対数時間
+- (5) : コンテナの [`size()`](/reference/map/map/size.md) について対数時間、それに加えて `first` と `last` の間の距離に対する線形時間
 
 
 ## 備考
@@ -158,7 +169,11 @@ int main()
 
 ## 参照
 - [N2350 Container insert/erase and iterator constness (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf)
+    - C++11で、`erase(iterator)`を`erase(const_iterator)`に変更
 - [LWG Issue 2258. `a.erase(q1, q2)` unable to directly return `q2`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2258)
     - C++11では、「`a.erase(q1, q2)`の結果として`q2`が返る」という仕様だったが、`const_iterator`型が渡された場合に`iterator`型を返せない問題があった。そのためC++14では、`q2`が指す要素を指すイテレータが返る、ということが明記された
-
+- [LWG Issue 2059. C++0x ambiguity problem with `map::erase`](https://cplusplus.github.io/LWG/issue2059)
+    - C++17で、`erase(iterator)`を再追加
+- [P2077R3 Heterogeneous erasure overloads for associative containers](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2077r3.html)
+    - C++23で、`template &amp;lt;class K&amp;gt; erase(K&amp;amp;&amp;amp; x)`のオーバーロードが追加された
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map / setのerase : endが返る条件の文章がわかりにくかったので修正</title>
      <link href="https://cpprefjp.github.io/reference/map/map/erase.html"/>
      <id>ae7c515da20425de6c80b7b4336ec49ba8d7f0c6:reference/map/map/erase.md</id>
      <updated>2023-06-19T15:30:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/erase.md b/reference/map/map/erase.md
index df6cd4fe5..868c9e440 100644
--- a/reference/map/map/erase.md
+++ b/reference/map/map/erase.md
@@ -33,7 +33,7 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 ## 戻り値
 - (1), (3)
     - C++03 : 戻り値なし
-    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す(コンテナが空になった場合や、最後尾の要素を削除した場合)。
+    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
 - (2) 削除された要素の数を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map / setのerase : endが返る条件の文章がわかりにくかったので修正</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/erase.html"/>
      <id>ae7c515da20425de6c80b7b4336ec49ba8d7f0c6:reference/map/multimap/erase.md</id>
      <updated>2023-06-19T15:30:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/erase.md b/reference/map/multimap/erase.md
index 0c19e0a46..2f45485d8 100644
--- a/reference/map/multimap/erase.md
+++ b/reference/map/multimap/erase.md
@@ -34,7 +34,7 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 ## 戻り値
 - (1), (3)
     - C++03 : 戻り値なし
-    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す(コンテナが空になった場合や、最後尾の要素を削除した場合)。
+    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
 - (2) 削除された要素の数を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map / setのerase : endが返る条件の文章がわかりにくかったので修正</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/erase.html"/>
      <id>ae7c515da20425de6c80b7b4336ec49ba8d7f0c6:reference/set/multiset/erase.md</id>
      <updated>2023-06-19T15:30:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/erase.md b/reference/set/multiset/erase.md
index 73871bdc7..4aed5f014 100644
--- a/reference/set/multiset/erase.md
+++ b/reference/set/multiset/erase.md
@@ -33,7 +33,7 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 ## 戻り値
 - (1), (2) :
     - C++03 まで : なし
-    - C++11 から : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す(コンテナが空になった場合や、最後尾の要素を削除した場合)。
+    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
 - (3) : 削除された要素の数を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map / setのerase : endが返る条件の文章がわかりにくかったので修正</title>
      <link href="https://cpprefjp.github.io/reference/set/set/erase.html"/>
      <id>ae7c515da20425de6c80b7b4336ec49ba8d7f0c6:reference/set/set/erase.md</id>
      <updated>2023-06-19T15:30:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/erase.md b/reference/set/set/erase.md
index a789cada3..1138910f9 100644
--- a/reference/set/set/erase.md
+++ b/reference/set/set/erase.md
@@ -33,7 +33,7 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 ## 戻り値
 - (1), (2) :
     - C++03 まで : なし
-    - C++11 から : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す(コンテナが空になった場合や、最後尾の要素を削除した場合)。
+    - C++11 : 削除された要素の次を指すイテレータを返す。そのような要素がない場合、[`end()`](end.md)を返す (要素を削除した結果としてコンテナが空になった場合)
 - (3) : 削除された要素の数を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map/setのerase : 範囲外のイテレータや存在しないキーが指定された場合の動作が未定義であることを記載</title>
      <link href="https://cpprefjp.github.io/reference/map/map/erase.html"/>
      <id>587bd5b265057b6b9f69895cf8c98d6c37bdd483:reference/map/map/erase.md</id>
      <updated>2023-06-19T15:23:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/erase.md b/reference/map/map/erase.md
index b0105266c..df6cd4fe5 100644
--- a/reference/map/map/erase.md
+++ b/reference/map/map/erase.md
@@ -19,6 +19,10 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 これは削除された要素の数だけコンテナの `size` を減らし、それぞれの要素のデストラクタを呼び出す。
 
+- (1) : 指定されたイテレータが指す要素を削除する
+- (2) : 指定されたキーをもつ要素を削除する
+- (3) : 指定されたイテレータ範囲の要素をすべて削除する
+
 
 ## パラメータ
 - `position` : `map` から削除する単一要素を指すイテレータ。`iterator` はメンバ型であり、双方向イテレータとして定義される。
@@ -40,7 +44,8 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 
 ## 備考
-- 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
+- この関数に、範囲外のイテレータ (終端イテレータを含む) や存在しないキーを指定した場合の動作は未定義
+- 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる
 - ループ中で `map` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
     while (it != map_object.end()) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map/setのerase : 範囲外のイテレータや存在しないキーが指定された場合の動作が未定義であることを記載</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/erase.html"/>
      <id>587bd5b265057b6b9f69895cf8c98d6c37bdd483:reference/map/multimap/erase.md</id>
      <updated>2023-06-19T15:23:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/erase.md b/reference/map/multimap/erase.md
index 3a5579f7f..0c19e0a46 100644
--- a/reference/map/multimap/erase.md
+++ b/reference/map/multimap/erase.md
@@ -20,6 +20,10 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 これは削除された要素の数だけコンテナの `size` を減らし、それぞれの要素のデストラクタを呼び出す。
 
+- (1) : 指定されたイテレータが指す要素を削除する
+- (2) : 指定されたキーをもつ要素をすべて削除する
+- (3) : 指定されたイテレータ範囲の要素をすべて削除する
+
 
 ## パラメータ
 - `position` : `multimap` から削除する単一要素を指すイテレータ。`iterator` はメンバ型であり、双方向イテレータとして定義される。
@@ -41,6 +45,7 @@ iterator erase(const_iterator first, const_iterator last); // (3) C++11
 
 
 ## 備考
+- この関数に、範囲外のイテレータ (終端イテレータを含む) や存在しないキーを指定した場合の動作は未定義
 - 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
 - ループ中で `multimap` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map/setのerase : 範囲外のイテレータや存在しないキーが指定された場合の動作が未定義であることを記載</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/erase.html"/>
      <id>587bd5b265057b6b9f69895cf8c98d6c37bdd483:reference/set/multiset/erase.md</id>
      <updated>2023-06-19T15:23:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/erase.md b/reference/set/multiset/erase.md
index 5d22911a4..73871bdc7 100644
--- a/reference/set/multiset/erase.md
+++ b/reference/set/multiset/erase.md
@@ -19,6 +19,10 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 単一要素またはイテレータ範囲`[first, last)`を `multiset` コンテナから削除する。 
 これは削除された要素の数だけコンテナの [`size`](size.md)`()` を減らし、それぞれの要素のデストラクタを呼び出す。
 
+- (1) : 指定されたイテレータが指す要素を削除する
+- (2) : 指定されたキーをもつ要素をすべて削除する
+- (3) : 指定されたイテレータ範囲の要素をすべて削除する
+
 
 ## パラメータ
 - `position` : `multiset` から削除する単一要素を指すイテレータ。`iterator`、および、`const_iterator` はメンバ型であり、双方向イテレータとして定義される。
@@ -40,6 +44,7 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 
 
 ## 備考
+- この関数に、範囲外のイテレータ (終端イテレータを含む) や存在しないキーを指定した場合の動作は未定義
 - 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
 - ループ中で `multiset` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- map/setのerase : 範囲外のイテレータや存在しないキーが指定された場合の動作が未定義であることを記載</title>
      <link href="https://cpprefjp.github.io/reference/set/set/erase.html"/>
      <id>587bd5b265057b6b9f69895cf8c98d6c37bdd483:reference/set/set/erase.md</id>
      <updated>2023-06-19T15:23:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/erase.md b/reference/set/set/erase.md
index 7dfa75ab7..a789cada3 100644
--- a/reference/set/set/erase.md
+++ b/reference/set/set/erase.md
@@ -19,6 +19,10 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 単一要素またはイテレータ範囲`[first, last)`を `set` コンテナから削除する。 
 これは削除された要素の数だけコンテナの [`size`](size.md)`()` を減らし、それぞれの要素のデストラクタを呼び出す。
 
+- (1) : 指定されたイテレータが指す要素を削除する
+- (2) : 指定されたキーをもつ要素を削除する
+- (3) : 指定されたイテレータ範囲の要素をすべて削除する
+
 
 ## パラメータ
 - `position` : `set` から削除する単一要素を指すイテレータ。`iterator`、および、`const_iterator` はメンバ型であり、双方向イテレータとして定義される。
@@ -40,6 +44,7 @@ size_type erase(const key_type&amp;amp; x);                        // (3)
 
 
 ## 備考
+- この関数に、範囲外のイテレータ (終端イテレータを含む) や存在しないキーを指定した場合の動作は未定義
 - 削除された要素を指すイテレータ、および、参照のみ無効になる。なお、規格書に明確な記載は無いが、削除された要素を指すポインタも無効になる。
 - ループ中で `set` の要素を削除するためには、C++03 までは以下のようなコードを書く必要があった。
     ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>offsetof -- offsetof : メタ情報の修正</title>
      <link href="https://cpprefjp.github.io/reference/cstddef/offsetof.html"/>
      <id>c46ebf4afd42816c9a9f10d04d668e336cfea25e:reference/cstddef/offsetof.md</id>
      <updated>2023-06-15T15:37:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstddef/offsetof.md b/reference/cstddef/offsetof.md
index 19146806b..94d3ac76d 100644
--- a/reference/cstddef/offsetof.md
+++ b/reference/cstddef/offsetof.md
@@ -1,7 +1,6 @@
 # offsetof
 * cstddef[meta header]
-* std[meta namespace]
-* type-alias[meta id-type]
+* macro[meta id-type]
 
 ```cpp
 # define offsetof(type, member) see-below
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時初期化を強制する`constinit`キーワードを追加 -- C++20 constinit : mutex/unique_ptrのコンストラクタと相互リンク</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/constinit.html"/>
      <id>5af768ad072b6415b1ed2d271af3f11270eaf5da:lang/cpp20/constinit.md</id>
      <updated>2023-06-14T18:24:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/constinit.md b/lang/cpp20/constinit.md
index 8d9a370fa..343186f49 100644
--- a/lang/cpp20/constinit.md
+++ b/lang/cpp20/constinit.md
@@ -196,6 +196,9 @@ int main() {}
 ## 関連項目
 
 - [C++11 `constexpr`](/lang/cpp11/constexpr.md)
+- [`mutex`のコンストラクタ](/reference/mutex/mutex/op_constructor.md)
+- [`unique_ptr`のコンストラクタ](/reference/memory/unique_ptr/op_constructor.md)
+
 
 ## 参照
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- C++20 constinit : mutex/unique_ptrのコンストラクタと相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/memory/unique_ptr/op_constructor.html"/>
      <id>5af768ad072b6415b1ed2d271af3f11270eaf5da:reference/memory/unique_ptr/op_constructor.md</id>
      <updated>2023-06-14T18:24:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/unique_ptr/op_constructor.md b/reference/memory/unique_ptr/op_constructor.md
index 6a6820ebf..58e858b2a 100644
--- a/reference/memory/unique_ptr/op_constructor.md
+++ b/reference/memory/unique_ptr/op_constructor.md
@@ -167,6 +167,10 @@ int main()
 	- 2012までは、delete宣言に対応していないため、代わりにprivateで宣言のみ行う手法で代用されている。
 
 
+## 関連項目
+- [C++20 コンパイル時初期化を強制する`constinit`キーワードを追加](/lang/cpp20/constinit.md)
+
+
 ## 参照
 - [N2435 Explicit bool for Smart Pointers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2435.htm)
     - (6)の経緯となる提案文書
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- C++20 constinit : mutex/unique_ptrのコンストラクタと相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/mutex/mutex/op_constructor.html"/>
      <id>5af768ad072b6415b1ed2d271af3f11270eaf5da:reference/mutex/mutex/op_constructor.md</id>
      <updated>2023-06-14T18:24:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mutex/mutex/op_constructor.md b/reference/mutex/mutex/op_constructor.md
index 5067466c2..a725c6695 100644
--- a/reference/mutex/mutex/op_constructor.md
+++ b/reference/mutex/mutex/op_constructor.md
@@ -10,7 +10,7 @@ constexpr mutex() noexcept;   // (1)
 mutex(const mutex&amp;amp;) = delete; // (2)
 ```
 
-## mutexオブジェクトの構築
+## 概要
 - (1) : デフォルトコンストラクタ。`mutex`オブジェクトの初期化を行う。
 - (2) : コピーコンストラクタ。コピー不可。
 
@@ -106,6 +106,10 @@ A
     - 2012はコピーコンストラクタのdeleteに対応していないため、代わりにprivateで宣言のみ行う手法で代用されている。
 
 
+## 関連項目
+- [C++20 コンパイル時初期化を強制する`constinit`キーワードを追加](/lang/cpp20/constinit.md)
+
+
 ## 参照
 - [Constant Initialization - 雑貨&amp;#39;s tumblr](https://zakkas783-blog-blog.tumblr.com/post/25490513807/constant-initialization)
 - [mutexのconstexprコンストラクタ - yohhoyの日記](http://d.hatena.ne.jp/yohhoy/20120621/p1)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
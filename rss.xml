<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-07-30T18:35:19.950472</updated>
  <id>71735d82-46ee-4d6d-bbdb-827a85559e41</id>

  
    <entry>
      <title>back (C++11) -- basic_string::back, front, pop_back : これらの関数が追加された経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/back.html"/>
      <id>7c0e7382a6293a19093c01232005d38c388fab7d:reference/string/basic_string/back.md</id>
      <updated>2015-07-30 18:35:01 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_string&#34;&gt;basic_string::&lt;/span&gt;back (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; back() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; back();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;末尾要素への参照を取得する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;!&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/empty.html&#34;&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_at.html&#34;&gt;&lt;code&gt;operator[]&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;- 1)&lt;/code&gt; の結果を返す。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;;

  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.back();
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;o
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#534&#34; target=&#34;_blank&#34;&gt;LWG Issue 534. Missing &lt;code&gt;basic_string&lt;/code&gt; members&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>front (C++11) -- basic_string::back, front, pop_back : これらの関数が追加された経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/front.html"/>
      <id>7c0e7382a6293a19093c01232005d38c388fab7d:reference/string/basic_string/front.md</id>
      <updated>2015-07-30 18:35:01 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_string&#34;&gt;basic_string::&lt;/span&gt;front (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; front() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; front();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;先頭要素への参照を返す。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;!&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/empty.html&#34;&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;operator[](0)&lt;/code&gt; の結果を返す。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;hello&#34;&lt;/span&gt;;

  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; s.front();
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;h
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#534&#34; target=&#34;_blank&#34;&gt;LWG Issue 534. Missing &lt;code&gt;basic_string&lt;/code&gt; members&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pop_back (C++11) -- basic_string::back, front, pop_back : これらの関数が追加された経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/string/basic_string/pop_back.html"/>
      <id>7c0e7382a6293a19093c01232005d38c388fab7d:reference/string/basic_string/pop_back.md</id>
      <updated>2015-07-30 18:35:01 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;string&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_string&#34;&gt;basic_string::&lt;/span&gt;pop_back (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;pop_back&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;末尾の1要素を削除する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;!&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/empty.html&#34;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/erase.html&#34;&gt;&lt;code&gt;erase&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;- 1, 1)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;helloo&#34;&lt;/span&gt;;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 末尾の`o`を1つ削除する&lt;/span&gt;
  s.pop_back();

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;hello
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.7.3&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#534&#34; target=&#34;_blank&#34;&gt;LWG Issue 534. Missing &lt;code&gt;basic_string&lt;/code&gt; members&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stdexcept -- stdexcept : const char*版のオーバーロードが追加された経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/stdexcept.html"/>
      <id>4ac389e8273bc0b02937ce3ddef7b0f7408accd0:reference/stdexcept.md</id>
      <updated>2015-07-30 18:28:58 +0900</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;stdexcept&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;stdexcept&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;stdexcept&amp;gt;&lt;/code&gt;ヘッダは、標準的な例外クラスを提供する。&lt;br /&gt;
これらの例外クラスは、標準ライブラリ内でも使用されている。&lt;/p&gt;
&lt;p&gt;これらのクラス群に反映されているエラーモデルでは、エラーは「実行時エラー (runtime error) 」と「論理エラー (logic error) 」との２つに大別される。&lt;br /&gt;
論理エラーを区別するための性質は、それがプログラムの内部的論理の誤りに起因することである。理論的には、それらは予め避けることができる。&lt;br /&gt;
対して、実行時エラーはプログラムの制御の及ばない事象に起因する。それらを前もって簡単に予見することはできない。&lt;/p&gt;
&lt;p&gt;このヘッダで提供される例外クラスは以下の表の通りである。以下のクラスは全て、&lt;code&gt;std&lt;/code&gt;名前空間で提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;logic_error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムの実行前に検出可能なエラー（論理エラー）を示す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;domain_error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定義域エラーを示す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;invalid_argument&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不正な引数を示す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;length_error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;長すぎるオブジェクトを作ろうとしたことを示す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;out_of_range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引数が許容範囲外であることを示す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;runtime_error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラム実行時にのみ検出可能なエラー（実行時エラー）を示す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;range_error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内部計算によって、値が範囲外になったことを示す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;overflow_error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値計算の結果がオーバーフローしたことを示す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;underflow_error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値計算の結果がアンダーフローしたことを示す&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例外クラスには継承関係があり、以下の箇条書きの階層構造で示す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/exception.html&#34;&gt;&lt;code&gt;exception&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logic_error&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;domain_error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;invalid_argument&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length_error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out_of_range&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runtime_error&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range_error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;overflow_error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;underflow_error&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/exception.html&#34;&gt;&lt;code&gt;exception&lt;/code&gt;&lt;/a&gt;クラスを除く9つのクラスは、すべて同じ&lt;code&gt;public&lt;/code&gt;メンバ関数をもつ。 &lt;/p&gt;
&lt;p&gt;クラス名を&lt;code&gt;T&lt;/code&gt;とすると、以下の&lt;code&gt;public&lt;/code&gt;メンバ関数をもつ。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;explicit T(const&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;amp; what_arg);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したメッセージを持つ例外オブジェクトを生成する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;explicit T(const char* what_arg);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したメッセージを持つ例外オブジェクトを生成する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virtual const char* what() const noexcept;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メッセージを取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;ここでは、簡単な例外処理の例を示す。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;stdexcept&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdlib&amp;gt; &lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// exit&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 例外を投げる&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;logic_error(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;an exception occurred&#34;&lt;/span&gt;);
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  try {
    f();
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;logic_error&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 例外が発生した！&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    exit(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#254&#34; target=&#34;_blank&#34;&gt;LWG Issue 254. Exception types in clause 19 are constructed from &lt;code&gt;std::string&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11から例外送出の理由として、文字配列を受け取ることを許可した経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_string -- bitset::to_string : デフォルトの文字型が設定された経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/bitset/to_string.html"/>
      <id>033d5158d7add59fda3198da008d38291162def9:reference/bitset/to_string.md</id>
      <updated>2015-07-30 15:08:13 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;bitset&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class bitset&#34;&gt;bitset::&lt;/span&gt;to_string&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; to_string() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  to_string(CharT zero &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; CharT(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;0&#39;&lt;/span&gt;), CharT one &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; CharT(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;1&#39;&lt;/span&gt;)) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列に変換する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bitset&lt;/code&gt;クラスのテンプレートパラメータ&lt;code&gt;N&lt;/code&gt;の長さの&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;各ビットを文字表現に変換する&lt;ul&gt;
&lt;li&gt;C++03 : ビット値0は文字&lt;code&gt;CharT(0)&lt;/code&gt;に、ビット値1は文字&lt;code&gt;CharT(1)&lt;/code&gt;に変換。&lt;/li&gt;
&lt;li&gt;C++11 : ビット値0はパラメータ&lt;code&gt;zero&lt;/code&gt;の文字に、ビット値1はパラメータ&lt;code&gt;one&lt;/code&gt;に変換。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各ビットの文字表現を、構築した&lt;code&gt;basic_string&lt;/code&gt;オブジェクトに順番に設定して返す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;bitset&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;8&amp;gt;&lt;/span&gt; bs(&lt;span style=&#34;color: #666666&#34;&gt;131uL&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03版の使用法&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bs.to_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11版の使用法&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bs.to_string();
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;10000011
10000011
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++、GCC(libstdc++)には、C++03でも&lt;code&gt;bs.to_string()&lt;/code&gt;のように簡単に使用するための独自実装が追加で導入されていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#853&#34; target=&#34;_blank&#34;&gt;LWG Issue 853. &lt;code&gt;to_string&lt;/code&gt; needs updating with &lt;code&gt;zero&lt;/code&gt; and &lt;code&gt;one&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11で、&lt;code&gt;0&lt;/code&gt;を表す文字と&lt;code&gt;1&lt;/code&gt;を表す文字を指定できるようになった経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1113&#34; target=&#34;_blank&#34;&gt;LWG Issue 1113. &lt;code&gt;bitset::to_string&lt;/code&gt; could be simplified&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11で、デフォルトの文字型が設定された経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_string -- bitset::to_string : 0と1を表す文字を指定できるようになった経緯を追加</title>
      <link href="http://cpprefjp.github.io/reference/bitset/to_string.html"/>
      <id>f83435dc9c6f80e16ac504eb3c8cfeda9288a158:reference/bitset/to_string.md</id>
      <updated>2015-07-30 15:05:53 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;bitset&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class bitset&#34;&gt;bitset::&lt;/span&gt;to_string&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; to_string() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;,
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Allocator&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;basic_string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits, Allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  to_string(CharT zero &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; CharT(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;0&#39;&lt;/span&gt;), CharT one &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; CharT(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;1&#39;&lt;/span&gt;)) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;文字列に変換する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bitset&lt;/code&gt;クラスのテンプレートパラメータ&lt;code&gt;N&lt;/code&gt;の長さの&lt;code&gt;basic_string&lt;/code&gt;オブジェクトを構築する。&lt;/li&gt;
&lt;li&gt;各ビットを文字表現に変換する&lt;ul&gt;
&lt;li&gt;C++03 : ビット値0は文字&lt;code&gt;CharT(0)&lt;/code&gt;に、ビット値1は文字&lt;code&gt;CharT(1)&lt;/code&gt;に変換。&lt;/li&gt;
&lt;li&gt;C++11 : ビット値0はパラメータ&lt;code&gt;zero&lt;/code&gt;の文字に、ビット値1はパラメータ&lt;code&gt;one&lt;/code&gt;に変換。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各ビットの文字表現を、構築した&lt;code&gt;basic_string&lt;/code&gt;オブジェクトに順番に設定して返す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;bitset&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;8&amp;gt;&lt;/span&gt; bs(&lt;span style=&#34;color: #666666&#34;&gt;131uL&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03版の使用法&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bs.to_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;allocator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11版の使用法&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; bs.to_string();
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;10000011
10000011
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual C++、GCC(libstdc++)には、C++03でも&lt;code&gt;bs.to_string()&lt;/code&gt;のように簡単に使用するための独自実装が追加で導入されていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#853&#34; target=&#34;_blank&#34;&gt;LWG Issue 853. &lt;code&gt;to_string&lt;/code&gt; needs updating with &lt;code&gt;zero&lt;/code&gt; and &lt;code&gt;one&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11で、&lt;code&gt;0&lt;/code&gt;を表す文字と&lt;code&gt;1&lt;/code&gt;を表す文字を指定できるようになった経緯のレポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shrink_to_fit (C++11) -- リンクミスを修正</title>
      <link href="http://cpprefjp.github.io/reference/deque/shrink_to_fit.html"/>
      <id>502a14ff3e244db07f723c54e12d1f7a737d3e4e:reference/deque/shrink_to_fit.md</id>
      <updated>2015-07-30 15:02:26 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;deque&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class deque&#34;&gt;deque::&lt;/span&gt;shrink_to_fit (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;shrink_to_fit&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;領域をコンテナのサイズまで切り詰める&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;型&lt;code&gt;T&lt;/code&gt;が&lt;code&gt;*this&lt;/code&gt;に対してムーブ挿入可能であること (C++14)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;なし&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;最大で、要素数に対して線形時間 (C++14)&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;確保した未使用のメモリ領域を&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt;に縮小させるというリクエストを行う。&lt;/p&gt;
&lt;p&gt;実装依存の最適化を許可するために、縮小するという動作は仕様上強制されない。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/deque/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;要素数を取得する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;『&lt;a href=&#34;http://www.amazon.co.jp/dp/4894714108&#34; target=&#34;_blank&#34;&gt;Effective STL - STLを効果的に使いこなす50の鉄則&lt;/a&gt;』 第17項 余分な容量を取り除くには「swap技法」を使おう&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#755&#34; target=&#34;_blank&#34;&gt;LWG Issue 755. &lt;code&gt;std::vector&lt;/code&gt; and &lt;code&gt;std:string&lt;/code&gt; lack explicit shrink-to-fit operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#850&#34; target=&#34;_blank&#34;&gt;LWG Issue 850. Should &lt;code&gt;shrink_to_fit&lt;/code&gt; apply to &lt;code&gt;std::deque&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2033&#34; target=&#34;_blank&#34;&gt;LWG Issue 2033. Preconditions of &lt;code&gt;reserve&lt;/code&gt;, &lt;code&gt;shrink_to_fit&lt;/code&gt;, and &lt;code&gt;resize&lt;/code&gt; functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-02-20T10:51:54.255435</updated>
  <id>7f7f8529-b5bb-4f57-9fe0-2d6a79bef247</id>

  
    <entry>
      <title>暗黙的なムーブを簡略化 -- 暗黙的なムーブを簡略化 : 仕様追記 #1021</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/simpler_implicit_move.html"/>
      <id>2673b918eb4ee85e27f243e18807aad34626f2fd:lang/cpp23/simpler_implicit_move.md</id>
      <updated>2024-02-20T19:48:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/simpler_implicit_move.md b/lang/cpp23/simpler_implicit_move.md
index cb5cdb15a..d8883d4fc 100644
--- a/lang/cpp23/simpler_implicit_move.md
+++ b/lang/cpp23/simpler_implicit_move.md
@@ -50,6 +50,29 @@ auto example4(Jeff x) -&amp;gt; int&amp;amp; {
 また同時に、C++11で導入されて以降少しづつその対象（暗黙ムーブが起こる場合および起こる場所）を拡大してきたことで複雑化していた暗黙ムーブ仕様が整理され、その仕様と実装がかなり単純化された。
 
 ## 仕様
+
+暗黙ムーブ可能なエンティティ（*implicitly movable entity*）を次のように指定する
+
+- 自動記憶域期間の非`volatile`オブジェクト型変数
+- 自動記憶域期間の非`volatile`オブジェクト型への右辺値参照
+
+暗黙ムーブ可能なエンティティが次の場所で指名されている場合、その式はムーブする資格がある（*move-eligible*な）式となる
+
+- `return/co_return`文のオペランド
+    - オペランドは変数名を指定する式（*id-expression*）であり（`()`で囲まれていても良い）
+    - その変数名は、その文を囲む最も内側の関数（もしくはラムダ式）の本体内もしくは関数引数宣言内の、暗黙ムーブ可能なエンティティを指定している
+- `throw`式のオペランド
+    - オペランドは変数名を指定する式であり（`()`で囲まれていても良い）
+    - その変数名のスコープは、囲む最も内側のtryブロックのスコープよりも長くなく
+    - その変数名は暗黙ムーブ可能なエンティティを指定している
+
+そして、ムーブする資格がある式の値カテゴリは*xvalue*となる。
+
+関数の戻り値は`return`文のオペランドからコピー初期化される。C++23において暗黙ムーブが可能な場合とはすなわち、`return`文のオペランドがムーブする資格がある式である場合のことで、その式（オペランド）は実際の値カテゴリがなんであれ*xvalue*として扱われる（つまり、`std::move()`されたのと等しくなる）ことで暗黙ムーブが適用される。
+
+ムーブする資格がある式は必ず変数名を指定する式（*id-expression*）であるため、*prvalue*な`return`文オペランドに対して適用される[コピー省略](/lang/cpp17/guaranteed_copy_elision.md)と複合することは無い。NRVOとは複合しうるが、その場合は暗黙ムーブによって呼び出されるムーブコンストラクタの呼び出しがNRVOによって省略される。
+
+### 副作用
 (執筆中)
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lognormal_distribution -- リンク切れを修正 #1252</title>
      <link href="https://cpprefjp.github.io/reference/random/lognormal_distribution.html"/>
      <id>907d3e161f41297f274af157edee3167b243e3f9:reference/random/lognormal_distribution.md</id>
      <updated>2024-02-20T17:27:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/lognormal_distribution.md b/reference/random/lognormal_distribution.md
index 2cc2a0312..60bde6b8e 100644
--- a/reference/random/lognormal_distribution.md
+++ b/reference/random/lognormal_distribution.md
@@ -107,7 +107,7 @@ int main()
 ```
 ```
 
-このプログラムによってある時に得られた結果（[lognormal_distribution.tsv.7z](https://github.com/cpprefjp/image/raw/master/reference/random/lognormal_distribution/lognormal_distribution.tsv.7z)）を図示する。 
+このプログラムによってある時に得られた結果（[lognormal_distribution.tsv](https://github.com/cpprefjp/image/raw/master/reference/random/lognormal_distribution/lognormal_distribution.tsv)）を図示する。 
 
 ![](https://github.com/cpprefjp/image/raw/master/reference/random/lognormal_distribution/lognormal_distribution.png)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>暗黙的なムーブを簡略化 -- 暗黙的なムーブを簡略化 : 追記 #1021</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/simpler_implicit_move.html"/>
      <id>d631e4f7ca8346fa287a9d719308ebc3e9cd89bc:lang/cpp23/simpler_implicit_move.md</id>
      <updated>2024-02-20T01:07:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/simpler_implicit_move.md b/lang/cpp23/simpler_implicit_move.md
index 9400cc8af..cb5cdb15a 100644
--- a/lang/cpp23/simpler_implicit_move.md
+++ b/lang/cpp23/simpler_implicit_move.md
@@ -45,6 +45,8 @@ auto example4(Jeff x) -&amp;gt; int&amp;amp; {
 }
 ```
 
+上記例の`example3(), example4()`は、C++20までは戻り値型が右辺値参照型であるために`return`文でコピーは発生しないため、暗黙ムーブの対象になっていなかった。C++23では、これらの場合にも暗黙ムーブが試みられるようになる。
+
 また同時に、C++11で導入されて以降少しづつその対象（暗黙ムーブが起こる場合および起こる場所）を拡大してきたことで複雑化していた暗黙ムーブ仕様が整理され、その仕様と実装がかなり単純化された。
 
 ## 仕様
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
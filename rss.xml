<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-03-11T14:34:42.763785</updated>
  <id>d5327385-2a20-4e5f-96ee-cdc529826d36</id>

  
    <entry>
      <title>leap_second -- leap_second : 大小比較の演算子を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second.html"/>
      <id>7b6cb1277e99ed911deeeb20dc74c18afa03a281:reference/chrono/leap_second.md</id>
      <updated>2020-03-11T17:11:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second.md b/reference/chrono/leap_second.md
index 0e08d6721..8402acfd9 100644
--- a/reference/chrono/leap_second.md
+++ b/reference/chrono/leap_second.md
@@ -39,11 +39,11 @@ namespace std::chrono {
 |------|------|----------------|
 | [`operator==`](leap_second/op_equal.md)         | 等値比較を行う | C++20 |
 | `bool operator!=(const leap_second&amp;amp;, const leap_second&amp;amp;) noexcept;`&amp;lt;br/&amp;gt; `template &amp;lt;class Duration&amp;gt;`&amp;lt;br/&amp;gt; `bool operator!=(const leap&amp;amp;, const sys_time&amp;lt;Duration&amp;gt;);` | 非等値比較を行う (`==`により使用可能) | C++20 |
-| [`operator&amp;lt;`](leap_second/op_less.md.nolink) | 左辺が右辺より小さいかを判定する | C++20 |
 | [`operator&amp;lt;=&amp;gt;`](leap_second/op_compare_3way.md) | 三方比較を行う | C++20 |
-| [`operator&amp;lt;=`](leap_second/op_less_equal.md.nolink) | 左辺が右辺以下を判定する | C++20 |
-| [`operator&amp;gt;`](leap_second/op_greater.md.nolink) | 左辺が右辺より大きいかを判定する | C++20 |
-| [`operator&amp;gt;=`](leap_second/op_greater_equal.md.nolink) | 左辺が右辺以上を判定する | C++20 |
+| [`operator&amp;lt;`](leap_second/op_less.md) | 左辺が右辺より小さいかを判定する | C++20 |
+| [`operator&amp;lt;=`](leap_second/op_less_equal.md) | 左辺が右辺以下を判定する | C++20 |
+| [`operator&amp;gt;`](leap_second/op_greater.md) | 左辺が右辺より大きいかを判定する | C++20 |
+| [`operator&amp;gt;=`](leap_second/op_greater_equal.md) | 左辺が右辺以上を判定する | C++20 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- leap_second : 大小比較の演算子を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second/op_greater.html"/>
      <id>7b6cb1277e99ed911deeeb20dc74c18afa03a281:reference/chrono/leap_second/op_greater.md</id>
      <updated>2020-03-11T17:11:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second/op_greater.md b/reference/chrono/leap_second/op_greater.md
new file mode 100644
index 000000000..d11059d8f
--- /dev/null
+++ b/reference/chrono/leap_second/op_greater.md
@@ -0,0 +1,82 @@
+# operator&amp;gt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr bool
+    operator&amp;gt;(const leap_second&amp;amp; x,
+              const leap_second&amp;amp; y) noexcept;        // (1) C++20 (operator&amp;lt;=&amp;gt;により使用可能)
+
+  template &amp;lt;class Duration&amp;gt;
+  constexpr bool
+    operator&amp;gt;(const leap_second&amp;amp; x,
+              const sys_time&amp;lt;Duration&amp;gt;&amp;amp; y) noexcept; // (2) C++20
+
+  template &amp;lt;class Duration&amp;gt;
+  constexpr bool
+    operator&amp;gt;(const sys_time&amp;lt;Duration&amp;gt;&amp;amp; x,
+              const leap_second&amp;amp; y) noexcept;        // (3) C++20
+}
+```
+* sys_time[link /reference/chrono/sys_time.md]
+
+## 概要
+左辺が右辺より大きいかの比較を行う。
+
+- (1) : `leap_second`オブジェクト同士において、左辺より右辺が小さいかの比較を行う
+- (2) : `leap_second`オブジェクトと[`sys_time`](/reference/chrono/sys_time.md)オブジェクトにおいて、左辺より右辺が大きいかの比較を行う
+- (3) : [`sys_time`](/reference/chrono/sys_time.md)オブジェクトと`leap_second`オブジェクトにおいて、左辺より右辺が大きいかの比較を行う
+
+
+## 戻り値
+```cpp
+return y &amp;lt; x;
+```
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  // 2000年1月1日よりあとにうるう秒が挿入された日を列挙する
+  for (const chrono::leap_second&amp;amp; date : chrono::get_tzdb().leap_seconds) {
+    if (date &amp;gt; 2000y/1/1)
+      std::cout &amp;lt;&amp;lt; date.date() &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* chrono::get_tzdb()[link /reference/chrono/get_tzdb.md]
+* 2000y[link /reference/chrono/year/op_y.md]
+* date()[link date.md]
+
+### 出力例
+```
+2006-01-01 00:00:00
+2009-01-01 00:00:00
+2012-07-01 00:00:00
+2015-07-01 00:00:00
+2017-01-01 00:00:00
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- leap_second : 大小比較の演算子を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second/op_greater_equal.html"/>
      <id>7b6cb1277e99ed911deeeb20dc74c18afa03a281:reference/chrono/leap_second/op_greater_equal.md</id>
      <updated>2020-03-11T17:11:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second/op_greater_equal.md b/reference/chrono/leap_second/op_greater_equal.md
new file mode 100644
index 000000000..c84cec33b
--- /dev/null
+++ b/reference/chrono/leap_second/op_greater_equal.md
@@ -0,0 +1,82 @@
+# operator&amp;gt;=
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr bool
+    operator&amp;gt;=(const leap_second&amp;amp; x,
+               const leap_second&amp;amp; y) noexcept;        // (1) C++20 (operator&amp;lt;=&amp;gt;により使用可能)
+
+  template &amp;lt;class Duration&amp;gt;
+  constexpr bool
+    operator&amp;gt;=(const leap_second&amp;amp; x,
+               const sys_time&amp;lt;Duration&amp;gt;&amp;amp; y) noexcept; // (2) C++20
+
+  template &amp;lt;class Duration&amp;gt;
+  constexpr bool
+    operator&amp;gt;=(const sys_time&amp;lt;Duration&amp;gt;&amp;amp; x,
+               const leap_second&amp;amp; y) noexcept;        // (3) C++20
+}
+```
+* sys_time[link /reference/chrono/sys_time.md]
+
+## 概要
+左辺が右辺以上の比較を行う。
+
+- (1) : `leap_second`オブジェクト同士において、左辺が右辺以上かの比較を行う
+- (2) : `leap_second`オブジェクトと[`sys_time`](/reference/chrono/sys_time.md)オブジェクトにおいて、左辺が右辺以上かの比較を行う
+- (3) : [`sys_time`](/reference/chrono/sys_time.md)オブジェクトと`leap_second`オブジェクトにおいて、左辺が右辺以上かの比較を行う
+
+
+## 戻り値
+```cpp
+return !(x &amp;lt; y);
+```
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  // 2000年1月1日以降にうるう秒が挿入された日を列挙する
+  for (const chrono::leap_second&amp;amp; date : chrono::get_tzdb().leap_seconds) {
+    if (date &amp;gt;= 2000y/1/1)
+      std::cout &amp;lt;&amp;lt; date.date() &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* chrono::get_tzdb()[link /reference/chrono/get_tzdb.md]
+* 2000y[link /reference/chrono/year/op_y.md]
+* date()[link date.md]
+
+### 出力例
+```
+2006-01-01 00:00:00
+2009-01-01 00:00:00
+2012-07-01 00:00:00
+2015-07-01 00:00:00
+2017-01-01 00:00:00
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- leap_second : 大小比較の演算子を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second/op_less.html"/>
      <id>7b6cb1277e99ed911deeeb20dc74c18afa03a281:reference/chrono/leap_second/op_less.md</id>
      <updated>2020-03-11T17:11:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second/op_less.md b/reference/chrono/leap_second/op_less.md
new file mode 100644
index 000000000..d02f17c1c
--- /dev/null
+++ b/reference/chrono/leap_second/op_less.md
@@ -0,0 +1,113 @@
+# operator&amp;lt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr bool
+    operator&amp;lt;(const leap_second&amp;amp; x,
+              const leap_second&amp;amp; y) noexcept;        // (1) C++20 (operator&amp;lt;=&amp;gt;により使用可能)
+
+  template &amp;lt;class Duration&amp;gt;
+  constexpr bool
+    operator&amp;lt;(const leap_second&amp;amp; x,
+              const sys_time&amp;lt;Duration&amp;gt;&amp;amp; y) noexcept; // (2) C++20
+
+  template &amp;lt;class Duration&amp;gt;
+  constexpr bool
+    operator&amp;lt;(const sys_time&amp;lt;Duration&amp;gt;&amp;amp; x,
+              const leap_second&amp;amp; y) noexcept;        // (3) C++20
+}
+```
+* sys_time[link /reference/chrono/sys_time.md]
+
+## 概要
+左辺が右辺より小さいかの比較を行う。
+
+- (1) : `leap_second`オブジェクト同士において、左辺より右辺が小さいかの比較を行う
+- (2) : `leap_second`オブジェクトと[`sys_time`](/reference/chrono/sys_time.md)オブジェクトにおいて、左辺より右辺が小さいかの比較を行う
+- (3) : [`sys_time`](/reference/chrono/sys_time.md)オブジェクトと`leap_second`オブジェクトにおいて、左辺より右辺が小さいかの比較を行う
+
+
+## 戻り値
+- (1) :
+    ```cpp
+    return x.date() &amp;lt; y.date();
+    ```
+    * date()[link date.md]
+
+- (2) :
+    ```cpp
+    return x.date() &amp;lt; y;
+    ```
+    * x.date()[link date.md]
+
+- (3) :
+    ```cpp
+    return x &amp;lt; y.date();
+    ```
+    * y.date()[link date.md]
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  // 2000年未満までにうるう秒が挿入された日を列挙する
+  for (const chrono::leap_second&amp;amp; date : chrono::get_tzdb().leap_seconds) {
+    if (date &amp;lt; 2000y/1/1)
+      std::cout &amp;lt;&amp;lt; date.date() &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* chrono::get_tzdb()[link /reference/chrono/get_tzdb.md]
+* 2000y[link /reference/chrono/year/op_y.md]
+* date()[link date.md]
+
+### 出力
+```
+1972-07-01 00:00:00
+1973-01-01 00:00:00
+1974-01-01 00:00:00
+1975-01-01 00:00:00
+1976-01-01 00:00:00
+1977-01-01 00:00:00
+1978-01-01 00:00:00
+1979-01-01 00:00:00
+1980-01-01 00:00:00
+1981-07-01 00:00:00
+1982-07-01 00:00:00
+1983-07-01 00:00:00
+1985-07-01 00:00:00
+1988-01-01 00:00:00
+1990-01-01 00:00:00
+1991-01-01 00:00:00
+1992-07-01 00:00:00
+1993-07-01 00:00:00
+1994-07-01 00:00:00
+1996-01-01 00:00:00
+1997-07-01 00:00:00
+1999-01-01 00:00:00
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- leap_second : 大小比較の演算子を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second/op_less_equal.html"/>
      <id>7b6cb1277e99ed911deeeb20dc74c18afa03a281:reference/chrono/leap_second/op_less_equal.md</id>
      <updated>2020-03-11T17:11:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second/op_less_equal.md b/reference/chrono/leap_second/op_less_equal.md
new file mode 100644
index 000000000..c54c1c897
--- /dev/null
+++ b/reference/chrono/leap_second/op_less_equal.md
@@ -0,0 +1,99 @@
+# operator&amp;lt;=
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr bool
+    operator&amp;lt;=(const leap_second&amp;amp; x,
+               const leap_second&amp;amp; y) noexcept;        // (1) C++20 (operator&amp;lt;=&amp;gt;により使用可能)
+
+  template &amp;lt;class Duration&amp;gt;
+  constexpr bool
+    operator&amp;lt;=(const leap_second&amp;amp; x,
+               const sys_time&amp;lt;Duration&amp;gt;&amp;amp; y) noexcept; // (2) C++20
+
+  template &amp;lt;class Duration&amp;gt;
+  constexpr bool
+    operator&amp;lt;=(const sys_time&amp;lt;Duration&amp;gt;&amp;amp; x,
+               const leap_second&amp;amp; y) noexcept;        // (3) C++20
+}
+```
+* sys_time[link /reference/chrono/sys_time.md]
+
+## 概要
+左辺が右辺以下かの比較を行う。
+
+- (1) : `leap_second`オブジェクト同士において、左辺が右辺以下かの比較を行う
+- (2) : `leap_second`オブジェクトと[`sys_time`](/reference/chrono/sys_time.md)オブジェクトにおいて、左辺が右辺以下かの比較を行う
+- (3) : [`sys_time`](/reference/chrono/sys_time.md)オブジェクトと`leap_second`オブジェクトにおいて、左辺が右辺以下かの比較を行う
+
+
+## 戻り値
+```cpp
+return !(y &amp;lt; x);
+```
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+int main()
+{
+  // 2000年以下までにうるう秒が挿入された日を列挙する
+  for (const chrono::leap_second&amp;amp; date : chrono::get_tzdb().leap_seconds) {
+    if (date &amp;lt;= 2000y/1/1)
+      std::cout &amp;lt;&amp;lt; date.date() &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* chrono::get_tzdb()[link /reference/chrono/get_tzdb.md]
+* 2000y[link /reference/chrono/year/op_y.md]
+* date()[link date.md]
+
+### 出力
+```
+1972-07-01 00:00:00
+1973-01-01 00:00:00
+1974-01-01 00:00:00
+1975-01-01 00:00:00
+1976-01-01 00:00:00
+1977-01-01 00:00:00
+1978-01-01 00:00:00
+1979-01-01 00:00:00
+1980-01-01 00:00:00
+1981-07-01 00:00:00
+1982-07-01 00:00:00
+1983-07-01 00:00:00
+1985-07-01 00:00:00
+1988-01-01 00:00:00
+1990-01-01 00:00:00
+1991-01-01 00:00:00
+1992-07-01 00:00:00
+1993-07-01 00:00:00
+1994-07-01 00:00:00
+1996-01-01 00:00:00
+1997-07-01 00:00:00
+1999-01-01 00:00:00
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>leap_second -- leap_second : operator&lt;=&gt;を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second.html"/>
      <id>ef7d2bee32ca3589fcf8574681846f92027ecff3:reference/chrono/leap_second.md</id>
      <updated>2020-03-11T16:53:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second.md b/reference/chrono/leap_second.md
index bce970aa1..0e08d6721 100644
--- a/reference/chrono/leap_second.md
+++ b/reference/chrono/leap_second.md
@@ -39,11 +39,11 @@ namespace std::chrono {
 |------|------|----------------|
 | [`operator==`](leap_second/op_equal.md)         | 等値比較を行う | C++20 |
 | `bool operator!=(const leap_second&amp;amp;, const leap_second&amp;amp;) noexcept;`&amp;lt;br/&amp;gt; `template &amp;lt;class Duration&amp;gt;`&amp;lt;br/&amp;gt; `bool operator!=(const leap&amp;amp;, const sys_time&amp;lt;Duration&amp;gt;);` | 非等値比較を行う (`==`により使用可能) | C++20 |
-| [`operator&amp;lt;=&amp;gt;`](leap_second/op_compare_3way.md.nolink) | 三方比較を行う | C++20 |
 | [`operator&amp;lt;`](leap_second/op_less.md.nolink) | 左辺が右辺より小さいかを判定する | C++20 |
-| [`bool operator&amp;lt;=`](leap_second/op_less_equal.md.nolink) | 左辺が右辺以下を判定する | C++20 |
-| [`bool operator&amp;gt;`](leap_second/op_greater.md.nolink) | 左辺が右辺より大きいかを判定する | C++20 |
-| [`bool operator&amp;gt;=`](leap_second/op_greater_equal.md.nolink) | 左辺が右辺以上を判定する | C++20 |
+| [`operator&amp;lt;=&amp;gt;`](leap_second/op_compare_3way.md) | 三方比較を行う | C++20 |
+| [`operator&amp;lt;=`](leap_second/op_less_equal.md.nolink) | 左辺が右辺以下を判定する | C++20 |
+| [`operator&amp;gt;`](leap_second/op_greater.md.nolink) | 左辺が右辺より大きいかを判定する | C++20 |
+| [`operator&amp;gt;=`](leap_second/op_greater_equal.md.nolink) | 左辺が右辺以上を判定する | C++20 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- leap_second : operator&lt;=&gt;を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second/op_compare_3way.html"/>
      <id>ef7d2bee32ca3589fcf8574681846f92027ecff3:reference/chrono/leap_second/op_compare_3way.md</id>
      <updated>2020-03-11T16:53:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second/op_compare_3way.md b/reference/chrono/leap_second/op_compare_3way.md
new file mode 100644
index 000000000..f47435620
--- /dev/null
+++ b/reference/chrono/leap_second/op_compare_3way.md
@@ -0,0 +1,57 @@
+# operator&amp;lt;=&amp;gt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr strong_ordering
+    operator&amp;lt;=&amp;gt;(const leap_second&amp;amp; x, const leap_second&amp;amp; y) noexcept;        // (1) C++20
+
+  template &amp;lt;three_way_comparable_with&amp;lt;sys_seconds&amp;gt; Duration&amp;gt;
+  constexpr auto
+    operator&amp;lt;=&amp;gt;(const leap_second&amp;amp; x, const sys_time&amp;lt;Duration&amp;gt;&amp;amp; y) noexcept; // (2) C++20
+}
+```
+* three_way_comparable_with[link /reference/compare/three_way_comparable.md]
+* sys_seconds[link /reference/chrono/sys_time.md]
+* sys_time[link /reference/chrono/sys_time.md]
+
+## 概要
+三方比較を行う。
+
+- (1) : `leap_second`オブジェクト同士の三方比較を行う
+- (2) : `leap_second`オブジェクトと[`sys_time`](/reference/chrono/sys_time.md)オブジェクトの三方比較を行う
+
+
+## 戻り値
+- (1) :
+    ```cpp
+    return x.date() &amp;lt;=&amp;gt; y.date();
+    ```
+    * date()[link date.md]
+
+- (2) :
+    ```cpp
+    return x.date() &amp;lt;=&amp;gt; y;
+    ```
+    * x.date()[link date.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、`operator&amp;lt;`、`operator&amp;lt;=`、`operator&amp;gt;`、`operator&amp;gt;=`が使用可能になる
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- leap_secondのoperator== : コピペミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second/op_equal.html"/>
      <id>a34fc2acf0605147d991db863110819e7e8bc7f9:reference/chrono/leap_second/op_equal.md</id>
      <updated>2020-03-11T16:11:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second/op_equal.md b/reference/chrono/leap_second/op_equal.md
index d2e3c48eb..711b2800c 100644
--- a/reference/chrono/leap_second/op_equal.md
+++ b/reference/chrono/leap_second/op_equal.md
@@ -10,7 +10,7 @@ namespace std::chrono {
                             const leap_second&amp;amp; y) noexcept;        // (1) C++20
 
   template &amp;lt;class Duration&amp;gt;
-  constexpr bool operator==(const leap&amp;amp; x,
+  constexpr bool operator==(const leap_second&amp;amp; x,
                             const sys_time&amp;lt;Duration&amp;gt;&amp;amp; y) noexcept; // (2) C++20
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>leap_second -- leap_second : date, operator==を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second.html"/>
      <id>9a4940b9fc3e5bac3c46823bbcad77885fcbaddd:reference/chrono/leap_second.md</id>
      <updated>2020-03-11T15:54:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second.md b/reference/chrono/leap_second.md
index ca427e47b..bce970aa1 100644
--- a/reference/chrono/leap_second.md
+++ b/reference/chrono/leap_second.md
@@ -29,7 +29,7 @@ namespace std::chrono {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`date`](leap_second/date.md.nolink) | うるう秒が挿入された日時を秒単位のシステム時間として取得する | C++20 |
+| [`date`](leap_second/date.md) | うるう秒が挿入された日時を秒単位のシステム時間として取得する | C++20 |
 
 
 ## 非メンバ関数
@@ -37,7 +37,7 @@ namespace std::chrono {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator==`](leap_second/op_equal.md.nolink)         | 等値比較を行う | C++20 |
+| [`operator==`](leap_second/op_equal.md)         | 等値比較を行う | C++20 |
 | `bool operator!=(const leap_second&amp;amp;, const leap_second&amp;amp;) noexcept;`&amp;lt;br/&amp;gt; `template &amp;lt;class Duration&amp;gt;`&amp;lt;br/&amp;gt; `bool operator!=(const leap&amp;amp;, const sys_time&amp;lt;Duration&amp;gt;);` | 非等値比較を行う (`==`により使用可能) | C++20 |
 | [`operator&amp;lt;=&amp;gt;`](leap_second/op_compare_3way.md.nolink) | 三方比較を行う | C++20 |
 | [`operator&amp;lt;`](leap_second/op_less.md.nolink) | 左辺が右辺より小さいかを判定する | C++20 |
@@ -66,7 +66,7 @@ int main()
 * chrono::leap_second[color ff0000]
 * chrono::get_tzdb()[link get_tzdb.md]
 * 2018y[link year/op_y.md]
-* date()[link leap_second/date.md.nolink]
+* date()[link leap_second/date.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>date -- leap_second : date, operator==を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second/date.html"/>
      <id>9a4940b9fc3e5bac3c46823bbcad77885fcbaddd:reference/chrono/leap_second/date.md</id>
      <updated>2020-03-11T15:54:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second/date.md b/reference/chrono/leap_second/date.md
new file mode 100644
index 000000000..c6c6e37c0
--- /dev/null
+++ b/reference/chrono/leap_second/date.md
@@ -0,0 +1,78 @@
+# date
+* chrono[meta header]
+* std::chrono[meta namespace]
+* leap_second[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr sys_seconds date() const noexcept;; // (1) C++20
+```
+* sys_seconds[link /reference/chrono/sys_time.md]
+
+## 概要
+うるう秒が挿入された日時を秒単位のシステム時間として取得する。
+
+
+## 戻り値
+うるう秒が挿入された日時を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  for (const chrono::leap_seconds date : chrono::get_tzdb().leap_seconds) {
+    chrono::sys_seconds s = date.date();
+    std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* date()[color ff0000]
+* chrono::get_tzdb()[link /reference/chrono/get_tzdb.md]
+* chrono::sys_seconds[link /reference/chrono/sys_time.md]
+
+### 出力例
+```
+1972-07-01 00:00:00
+1973-01-01 00:00:00
+1974-01-01 00:00:00
+1975-01-01 00:00:00
+1976-01-01 00:00:00
+1977-01-01 00:00:00
+1978-01-01 00:00:00
+1979-01-01 00:00:00
+1980-01-01 00:00:00
+1981-07-01 00:00:00
+1982-07-01 00:00:00
+1983-07-01 00:00:00
+1985-07-01 00:00:00
+1988-01-01 00:00:00
+1990-01-01 00:00:00
+1991-01-01 00:00:00
+1992-07-01 00:00:00
+1993-07-01 00:00:00
+1994-07-01 00:00:00
+1996-01-01 00:00:00
+1997-07-01 00:00:00
+1999-01-01 00:00:00
+2006-01-01 00:00:00
+2009-01-01 00:00:00
+2012-07-01 00:00:00
+2015-07-01 00:00:00
+2017-01-01 00:00:00
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- leap_second : date, operator==を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second/op_equal.html"/>
      <id>9a4940b9fc3e5bac3c46823bbcad77885fcbaddd:reference/chrono/leap_second/op_equal.md</id>
      <updated>2020-03-11T15:54:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second/op_equal.md b/reference/chrono/leap_second/op_equal.md
new file mode 100644
index 000000000..d2e3c48eb
--- /dev/null
+++ b/reference/chrono/leap_second/op_equal.md
@@ -0,0 +1,90 @@
+# operator==
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  constexpr bool operator==(const leap_second&amp;amp; x,
+                            const leap_second&amp;amp; y) noexcept;        // (1) C++20
+
+  template &amp;lt;class Duration&amp;gt;
+  constexpr bool operator==(const leap&amp;amp; x,
+                            const sys_time&amp;lt;Duration&amp;gt;&amp;amp; y) noexcept; // (2) C++20
+}
+```
+* sys_time[link /reference/chrono/sys_time.md]
+
+## 概要
+等値比較を行う。
+
+- (1) : `leap_second`オブジェクト同士の等値比較を行う
+- (2) : `leap_second`オブジェクトと[`sys_time`](/reference/chrono/sys_time.md)オブジェクトの等値比較を行う
+
+
+## 戻り値
+- (1) :
+    ```cpp
+    return x.date() == y.date();
+    ```
+    * date()[link date.md]
+
+- (2) :
+    ```cpp
+    return x.date() == y;
+    ```
+    * x.date()[link date.md]
+
+
+## 例外
+投げない
+
+
+## 備考
+- この演算子により、`operator!=`が使用可能になる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+using namespace std::chrono_literals;
+
+// うるう秒が挿入された日かを判定
+bool is_leap_second_day(chrono::year_month_day ymd) {
+  for (const chrono::leap_second&amp;amp; x : chrono::get_tzdb().leap_seconds) {
+    if (x == ymd) {
+      return true;
+    }
+  }
+  return false;
+}
+
+int main()
+{
+  if (is_leap_second_day(1972y/7/1)) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;1972/7/1 is a leap second day&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* x == date[color ff0000]
+* chrono::year_month_day[link /reference/chrono/year_month_day.md]
+* chrono::get_tzdb()[link /reference/chrono/get_tzdb.md]
+* 1972y[link /reference/chrono/year/op_y.md]
+
+### 出力
+```
+1972/7/1 is a leap second day
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>leap_second -- leap_second : 23:59:60をシステム時間で表現できないだけで、IANAのtzdbと違って日付定義されてるわけではなかった</title>
      <link href="https://cpprefjp.github.io/reference/chrono/leap_second.html"/>
      <id>eeeed23ef066dd3749e7b32b39c97e369464f3c2:reference/chrono/leap_second.md</id>
      <updated>2020-03-10T17:46:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/leap_second.md b/reference/chrono/leap_second.md
index 42093f283..ca427e47b 100644
--- a/reference/chrono/leap_second.md
+++ b/reference/chrono/leap_second.md
@@ -15,8 +15,6 @@ namespace std::chrono {
 
 [`get_tzdb()`](get_tzdb.md)で取得した[`tzdb`](tzdb.md)クラスのオブジェクトに、これまでに挿入されたうるう秒のリスト`leap_seconds`がメンバ変数として含まれている。
 
-このクラスが表すうるう秒が挿入された時間とは、日付を秒単位で表すのであって (2006年1月1日)、厳密にうるう秒が挿入された日時 (2006年1月1日8時59分60秒JSTなど) を表すものではないことに注意すること。なお、IANAのうるう秒データベースには、秒単位で定義されている。
-
 
 ## メンバ関数
 ### 構築／コピー／破棄
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
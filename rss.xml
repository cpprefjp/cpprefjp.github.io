<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-09-15T23:54:18.695073</updated>
  <id>2a7ad7f3-b2af-42ec-b5cb-b058fc451bdf</id>

  
    <entry>
      <title>error_type (C++11) -- regex_constants::error_type : 略称となっている識別子の元を記載。</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_constants/error_type.html"/>
      <id>1bbe9873d304d3960db8baffaffdd5b34e2df887:reference/regex/regex_constants/error_type.md</id>
      <updated>2015-09-15 20:07:52 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;enum&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std::regex_constants&#34;&gt;std::regex_constants::&lt;/span&gt;error_type (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; regex_constants {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt; error_type;
  constexpr error_type error_collate &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_ctype &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_escape &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_backref &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_brack &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_paren &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_brace &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_badbrace &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_range &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_space &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_badrepeat &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_complexity &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr error_type error_stack &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
}}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;正規表現のエラーを表す実装定義の列挙型。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_collate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正な照合要素名が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_ctype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正な文字クラス名が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_escape&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正なエスケープ文字もしくは不正な後方エスケープ(trailing escape)が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_backref&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正な後方参照が含まれている。backrefはback reference(後方参照)の略称&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_brack&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、対応していないカギカッコ&lt;code&gt;[ ]&lt;/code&gt;が含まれている。brackはbracket(カギカッコ)の略称&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_paren&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、対応していない丸カッコ&lt;code&gt;( )&lt;/code&gt;が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_brace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、対応していない波カッコ&lt;code&gt;{ }&lt;/code&gt;が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_badbrace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正な範囲が設定された波カッコ&lt;code&gt;{ }&lt;/code&gt;が含まれている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_range&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式に、不正な文字範囲が含まれている。多くのエンコーディングでは、&lt;code&gt;[b-a]&lt;/code&gt;のようなものが不正な文字範囲となる。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_space&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリ不足のため、式を有限状態マシンに変換できない&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_badrepeat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;有効な正規表現において、繰り返し&lt;code&gt;*?+{&lt;/code&gt;が処理されなかった&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_complexity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式の複雑さが、事前に設定したレベルを超えている&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;error_stack&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリ不足のため、正規表現が指定されたシーケンスにマッチするかどうかを判断できない&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 4.9.2, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2053&#34; target=&#34;_blank&#34;&gt;LWG Issue 2053. Errors in regex bitmask types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;定数定義に不要な&lt;code&gt;static&lt;/code&gt;が付いていたため、C++14で削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- 体裁をほんのちょっとだけ修正</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/equal_range.html"/>
      <id>38fd6bc99bcd4c52e152b3e0216feec691766ac8:reference/algorithm/equal_range.md</id>
      <updated>2015-09-15 15:52:02 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;equal_range&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator, ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(
      ForwardIterator first, ForwardIterator last, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Compare&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ForwardIterator, ForwardIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(
      ForwardIterator first, ForwardIterator last, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; value,  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
      Compare comp);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound()&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound()&lt;/code&gt;&lt;/a&gt;の結果を組で取得する。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; の要素 &lt;code&gt;e&lt;/code&gt; は &lt;code&gt;e &amp;lt; value&lt;/code&gt; および &lt;code&gt;!(value &amp;lt; e)&lt;/code&gt; 、あるいは &lt;code&gt;comp(e, value)&lt;/code&gt; および &lt;code&gt;!comp(value, e)&lt;/code&gt; によって&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm.html#sequence-is-partitioned&#34;&gt;区分化&lt;/a&gt;されていなければならない。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;[first, last)&lt;/code&gt; の要素 &lt;code&gt;e&lt;/code&gt; は全て暗黙に、&lt;code&gt;e &amp;lt; value&lt;/code&gt; が &lt;code&gt;!(value &amp;lt; e)&lt;/code&gt; または &lt;code&gt;comp(e, value)&lt;/code&gt; が &lt;code&gt;!comp(value, e)&lt;/code&gt; を意味している必要がある。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/make_pair.html&#34;&gt;&lt;code&gt;make_pair&lt;/code&gt;&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, value),&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, value))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(2) : &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/make_pair.html&#34;&gt;&lt;code&gt;make_pair&lt;/code&gt;&lt;/a&gt;(&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, value, comp),&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/algorithm/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(first, last, value, comp))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;最大で 2 * log2(&lt;code&gt;last - first&lt;/code&gt;) + O(1) 回の比較を行う&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;};

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;sort(v.begin(), v.end());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3以上の要素と、3より大きい要素を二分探索で検索&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;equal_range&lt;/span&gt;(v.begin(), v.end(), &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result.first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result.second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;3
4
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#384&#34; target=&#34;_blank&#34;&gt;LWG Issue 384. &lt;code&gt;equal_range&lt;/code&gt; has unimplementable runtime complexity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- リンクを修正</title>
      <link href="http://cpprefjp.github.io/reference/complex/abs.html"/>
      <id>4b97890d204bb592cfcbb174ce43866707ffa1a7:reference/complex/abs.md</id>
      <updated>2015-09-15 15:50:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;complex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;abs&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  T abs(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; complex&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; x);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;複素数値の絶対値（大きさ・マグニチュード）を得る。abs は absolute value（絶対値）の略。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;引数 &lt;code&gt;x&lt;/code&gt; の絶対値（大きさ・マグニチュード）&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;規格には、本関数に関する具体的な規定・説明は無い。&lt;br /&gt;
    なお、C99 の規格にある本関数と同等の関数群（&lt;code&gt;complex.h&lt;/code&gt; ヘッダの &lt;code&gt;cabs&lt;/code&gt;、&lt;code&gt;cabsf&lt;/code&gt;、&lt;code&gt;cabsl&lt;/code&gt; の 3 つ。それぞれ C++ の &lt;code&gt;abs&amp;lt;double&amp;gt;&lt;/code&gt;、&lt;code&gt;abs&amp;lt;float&amp;gt;&lt;/code&gt;、&lt;code&gt;abs&amp;lt;long double&amp;gt;&lt;/code&gt; に相当）では、処理系が ISO IEC 60559（IEEE 754 と同一）に準拠している（マクロ &lt;code&gt;__STDC_IEC_559_COMPLEX__&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; に定義されている）場合、&lt;code&gt;abs(x +&lt;/code&gt; &lt;em&gt;i&lt;/em&gt; &lt;code&gt;y) =&lt;/code&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/hypot.html&#34;&gt;&lt;code&gt;hypot&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x, y)&lt;/code&gt; と規定されている（&lt;em&gt;i&lt;/em&gt; は虚数単位）。&lt;/li&gt;
&lt;li&gt;処理系が ISO IEC 60559 に準拠しているかどうかは、C99 の場合はマクロ &lt;code&gt;__STDC_IEC_559_COMPLEX__&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; に定義されている事で判別可能であるが、C++ の規格書には該当する記載を見つける事ができなかった。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;絶対値の算出については、一部の算術型、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/valarray.html&#34;&gt;&lt;code&gt;valarray&lt;/code&gt;&lt;/a&gt; クラステンプレートに対しても、他のヘッダで定義されている。  &lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数の型&lt;/th&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/abs.html&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fabs.html&#34;&gt;&lt;code&gt;fabs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/abs.html&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fabs.html&#34;&gt;&lt;code&gt;fabs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/abs.html&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fabs.html&#34;&gt;&lt;code&gt;fabs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;任意の整数型&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/abs.html&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++11 から&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fabs.html&#34;&gt;&lt;code&gt;fabs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++11 から&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abs.md.nolink&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&lt;code&gt;cstdlib&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/labs.md.nolink&#34;&gt;&lt;code&gt;labs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&lt;code&gt;cstdlib&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abs.md.nolink&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&lt;code&gt;cstdlib&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long long int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/llabs.md.nolink&#34;&gt;&lt;code&gt;llabs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&lt;code&gt;cstdlib&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++11 から&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abs.md.nolink&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&lt;code&gt;cstdlib&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++11 から&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/valarray.html&#34;&gt;&lt;code&gt;valarray&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray/valarray/abs.html&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/valarray.html&#34;&gt;&lt;code&gt;valarray&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;なお、上記のうち、任意の整数型に対する &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/abs.html&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt; については C++11 で追加されたが、ある種の問題を引き起こすことから、今後削除される可能性がある。&lt;a href=&#34;http://wg21.cmeerw.net/lwg/issue2192&#34; target=&#34;_blank&#34;&gt;Validity and return type of std::abs(0u) is unclear&lt;/a&gt; 参照。&lt;br /&gt;
また、浮動小数点版、および、整数版の &lt;code&gt;abs&lt;/code&gt; については今後、全て &lt;a href=&#34;http://cpprefjp.github.io/reference/cmath.html&#34;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib.html&#34;&gt;&lt;code&gt;cstdlib&lt;/code&gt;&lt;/a&gt; 両方のヘッダで利用できるようになるかもしれない。&lt;a href=&#34;http://wg21.cmeerw.net/lwg/issue2294&#34; target=&#34;_blank&#34;&gt;\&amp;lt;cstdlib&amp;gt; should declare abs(double)&lt;/a&gt; 参照。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;complex&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;complex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; c(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2.0&lt;/span&gt;);

  &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;abs&lt;/span&gt;(c);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;span style=&#34;color:#ff0000&#34;&gt;abs&lt;/span&gt;( &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34; ) = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;abs( (1,2) ) = 2.23607
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 4.3.6, 4.4.7, 4.5.4, 4.6.4, 4.7.3, 4.8.1, 4.8.2, 4.9.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/real.html&#34;&gt;&lt;code&gt;real&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の実部を得る。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/imag.html&#34;&gt;&lt;code&gt;imag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の虚部を得る。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/arg.html&#34;&gt;&lt;code&gt;arg&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数の偏角を得る。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/norm.html&#34;&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複素数体のノルムを得る。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/conj.html&#34;&gt;&lt;code&gt;conj&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;共役複素数を得る。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/proj.html&#34;&gt;&lt;code&gt;proj&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;リーマン球面への射影を得る。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/polar.html&#34;&gt;&lt;code&gt;polar&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定した絶対値と偏角の複素数値を得る。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/abs.html&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;絶対値を得る。（浮動小数点版）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cmath/fabs.html&#34;&gt;&lt;code&gt;fabs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;絶対値を得る。（浮動小数点版）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abs.md.nolink&#34;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;絶対値を得る。（整数版）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exit -- リンクを修正</title>
      <link href="http://cpprefjp.github.io/reference/cstdlib/exit.html"/>
      <id>4b97890d204bb592cfcbb174ce43866707ffa1a7:reference/cstdlib/exit.md</id>
      <updated>2015-09-15 15:50:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;exit&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; exit(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; status);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;
  [[noreturn]] &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; exit(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; status); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;プログラムを終了させる。&lt;/p&gt;
&lt;p&gt;パラメータとして渡された&lt;code&gt;status&lt;/code&gt;は、プログラムの終了コードとして使用される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プログラムを正常終了させたい場合は、&lt;code&gt;0&lt;/code&gt;もしくは&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;&lt;code&gt;EXIT_SUCCESS&lt;/code&gt;&lt;/a&gt;をパラメータ&lt;code&gt;status&lt;/code&gt;に設定する。&lt;/li&gt;
&lt;li&gt;プログラムを異常終了させたい場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;&lt;code&gt;EXIT_FAILURE&lt;/code&gt;&lt;/a&gt;をパラメータ&lt;code&gt;status&lt;/code&gt;に設定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この関数でプログラムを終了させた場合、生存しているオブジェクトおよびストリームは、自動的に破棄される。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;スレッド生存期間を持つオブジェクトが破棄される。&lt;/li&gt;
&lt;li&gt;静的生存期間を持つオブジェクトが破棄される。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;&lt;code&gt;atexit()&lt;/code&gt;&lt;/a&gt;関数で登録された関数が、逆順に呼び出される。&lt;ul&gt;
&lt;li&gt;登録された関数で例外が送出された場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/exception/terminate.html&#34;&gt;&lt;code&gt;std::terminate()&lt;/code&gt;&lt;/a&gt;関数が呼び出され、プログラムが異常終了する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全てのCストリームが破棄される。&lt;ul&gt;
&lt;li&gt;まだ書き出されていないバッファリングされたデータはフラッシュされる。&lt;/li&gt;
&lt;li&gt;ストリームが閉じられる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdio/tmpfile.md.nolink&#34;&gt;&lt;code&gt;tmpfile()&lt;/code&gt;&lt;/a&gt;関数の呼び出しで作成された一時ファイルが削除される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ホスト環境に制御が戻される。&lt;ul&gt;
&lt;li&gt;パラメータ&lt;code&gt;status&lt;/code&gt;の値が&lt;code&gt;0&lt;/code&gt;もしくは&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;&lt;code&gt;EXIT_SUCCESS&lt;/code&gt;&lt;/a&gt;であった場合、実装依存の正常終了値が返る。&lt;/li&gt;
&lt;li&gt;パラメータ&lt;code&gt;status&lt;/code&gt;の値が&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;&lt;code&gt;EXIT_FAILURE&lt;/code&gt;&lt;/a&gt;であった場合、実装依存の異常終了値が返る。&lt;/li&gt;
&lt;li&gt;それ以外の場合には、実装依存の値が返る。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;この関数は決して返らない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exit(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// プログラムを正常終了させる&lt;/span&gt;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  f();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;&lt;code&gt;quick_exit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_bytes (C++11) -- リンクを修正</title>
      <link href="http://cpprefjp.github.io/reference/locale/wstring_convert/from_bytes.html"/>
      <id>4b97890d204bb592cfcbb174ce43866707ffa1a7:reference/locale/wstring_convert/from_bytes.md</id>
      <updated>2015-09-15 15:50:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;locale&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class wstring_convert&#34;&gt;wstring_convert::&lt;/span&gt;from_bytes (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;wide_string &lt;span style=&#34;color: #0000FF&#34;&gt;from_bytes&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; byte);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
wide_string &lt;span style=&#34;color: #0000FF&#34;&gt;from_bytes&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
wide_string &lt;span style=&#34;color: #0000FF&#34;&gt;from_bytes&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; byte_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; str); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
wide_string &lt;span style=&#34;color: #0000FF&#34;&gt;from_bytes&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; first,
                       &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; last);       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;バイト文字列からワイド文字列に変換する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;変換前に、&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/state.html&#34;&gt;&lt;code&gt;state()&lt;/code&gt;&lt;/a&gt;メンバ関数が返す状態値が、コンストラクタで明示的に指定されていなかった場合、デフォルト値を設定する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 1バイトからなる文字を、ワイド文字列に変換する。&lt;/li&gt;
&lt;li&gt;(2) : バイト文字配列を、ワイド文字列に変換する。&lt;/li&gt;
&lt;li&gt;(3) : バイト文字列を、ワイド文字列に変換する。&lt;/li&gt;
&lt;li&gt;(4) : バイト文字の範囲&lt;code&gt;[first, last)&lt;/code&gt;を、ワイド文字列に変換する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;変換に成功した場合、成功した要素数が、&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/converted.html&#34;&gt;&lt;code&gt;converted()&lt;/code&gt;&lt;/a&gt;メンバ関数が返す変数に設定される。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;変換結果のワイド文字列を返す。&lt;/p&gt;
&lt;p&gt;変換に失敗し、コンストラクタで&lt;code&gt;wide_err&lt;/code&gt;パラメータ(エラー時に返す文字列)が設定された場合、そのパラメータを返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;変換に失敗し、コンストラクタで&lt;code&gt;wide_err&lt;/code&gt;パラメータ(エラー時に返す文字列)が設定されていなかった場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::range_error&lt;/code&gt;&lt;/a&gt;例外を送出する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;locale&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;codecvt&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// UTF-8とUTF-32の相互変換を行うコンバーター&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring_convert&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/codecvt/codecvt_utf8.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;codecvt_utf8&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; converter;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1バイト文字からワイド文字列に変換&lt;/span&gt;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; input &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;u32string&lt;/a&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; converter.from_bytes(input);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/cassert/assert.md.nolink&#34;&gt;assert&lt;/a&gt;(result.&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;size()&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// バイト文字配列からワイド文字列に変換&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; input[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; u8&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;あいうえお&#34;&lt;/span&gt;;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;u32string&lt;/a&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; converter.from_bytes(input);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/cassert/assert.md.nolink&#34;&gt;assert&lt;/a&gt;(result.&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;size()&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// バイト文字列からワイド文字列に変換&lt;/span&gt;
  {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt; input &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; u8&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;あいうえお&#34;&lt;/span&gt;;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;u32string&lt;/a&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; converter.from_bytes(input);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/cassert/assert.md.nolink&#34;&gt;assert&lt;/a&gt;(result.&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;size()&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// バイト文字の範囲からワイド文字列に変換&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; input[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; u8&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;あいうえお&#34;&lt;/span&gt;;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;u32string&lt;/a&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; converter.from_bytes(&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin&lt;/a&gt;(input), &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end&lt;/a&gt;(input) &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/cassert/assert.md.nolink&#34;&gt;assert&lt;/a&gt;(result.&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/size.html&#34;&gt;size()&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_bytes (C++11) -- リンクを修正</title>
      <link href="http://cpprefjp.github.io/reference/locale/wstring_convert/to_bytes.html"/>
      <id>4b97890d204bb592cfcbb174ce43866707ffa1a7:reference/locale/wstring_convert/to_bytes.md</id>
      <updated>2015-09-15 15:50:38 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;locale&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class wstring_convert&#34;&gt;wstring_convert::&lt;/span&gt;to_bytes (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;byte_string &lt;span style=&#34;color: #0000FF&#34;&gt;to_bytes&lt;/span&gt;(Elem wchar);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
byte_string &lt;span style=&#34;color: #0000FF&#34;&gt;to_bytes&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Elem&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; wptr);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
byte_string &lt;span style=&#34;color: #0000FF&#34;&gt;to_bytes&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; wide_string&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; wstr); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
byte_string &lt;span style=&#34;color: #0000FF&#34;&gt;to_bytes&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Elem&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; first,
                     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; Elem&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; last);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ワイド文字列からバイト文字列に変換する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;変換前に、&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/state.html&#34;&gt;&lt;code&gt;state()&lt;/code&gt;&lt;/a&gt;メンバ関数が返す状態値が、コンストラクタで明示的に指定されていなかった場合、デフォルト値を設定する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 1つの歪度文字を、バイト文字列に変換する。&lt;/li&gt;
&lt;li&gt;(2) : ワイド文字配列を、バイト文字列に変換する。&lt;/li&gt;
&lt;li&gt;(3) : ワイド文字列を、バイト文字列に変換する。&lt;/li&gt;
&lt;li&gt;(4) : ワイド文字の範囲&lt;code&gt;[first, last)&lt;/code&gt;を、バイト文字列に変換する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;変換に成功した場合、成功した要素数が、&lt;a href=&#34;http://cpprefjp.github.io/reference/locale/wstring_convert/converted.html&#34;&gt;&lt;code&gt;converted()&lt;/code&gt;&lt;/a&gt;メンバ関数が返す変数に設定される。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;変換結果のバイト文字列を返す。&lt;/p&gt;
&lt;p&gt;変換に失敗し、コンストラクタで&lt;code&gt;byte_err&lt;/code&gt;パラメータ(エラー時に返す文字列)が設定された場合、そのパラメータを返す。&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;変換に失敗し、コンストラクタで&lt;code&gt;byte_err&lt;/code&gt;パラメータ(エラー時に返す文字列)が設定されていなかった場合、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;std::range_error&lt;/code&gt;&lt;/a&gt;例外を送出する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;locale&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;codecvt&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// UTF-8とUTF-32の相互変換を行うコンバーター&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;wstring_convert&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/codecvt/codecvt_utf8.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;codecvt_utf8&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;char32_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; converter;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1つのワイド文字からバイト文字列に変換&lt;/span&gt;
  {
    &lt;span style=&#34;color: #B00040&#34;&gt;char32_t&lt;/span&gt; input &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; U&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;あ&#39;&lt;/span&gt;;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt; u8result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; converter.to_bytes(input);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/cassert/assert.md.nolink&#34;&gt;assert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;u8result.&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/empty.html&#34;&gt;empty()&lt;/a&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ワイド文字配列からバイト文字列に変換&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char32_t&lt;/span&gt; input[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; U&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;あいうえお&#34;&lt;/span&gt;;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt; u8result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; converter.to_bytes(input);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/cassert/assert.md.nolink&#34;&gt;assert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;u8result.&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/empty.html&#34;&gt;empty()&lt;/a&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ワイド文字列からバイト文字列に変換&lt;/span&gt;
  {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;u32string&lt;/a&gt; input &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; U&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;あいうえお&#34;&lt;/span&gt;;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt; u8result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; converter.to_bytes(input);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/cassert/assert.md.nolink&#34;&gt;assert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;u8result.&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/empty.html&#34;&gt;empty()&lt;/a&gt;);
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ワイド文字の範囲からバイト文字列に変換&lt;/span&gt;
  {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char32_t&lt;/span&gt; input[] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; U&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;あいうえお&#34;&lt;/span&gt;;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt; u8result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; converter.to_bytes(&lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/begin.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin&lt;/a&gt;(input), &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/end.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end&lt;/a&gt;(input) &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);
    &lt;a href=&#34;http://cpprefjp.github.io/reference/cassert/assert.md.nolink&#34;&gt;assert&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;u8result.&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/empty.html&#34;&gt;empty()&lt;/a&gt;);
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 10.0, 11.0, 12.0&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_error (C++11) -- 読点を追加</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_error.html"/>
      <id>ec139bca26ebb1e30a0a79d8770b7cbb33452e40:reference/regex/regex_error.md</id>
      <updated>2015-09-15 12:55:52 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;regex_error (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;regex_error&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;runtime_error&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_error&lt;/code&gt;クラスは、正規表現ライブラリ&lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;からのエラー報告として送出される、例外オブジェクトの型である。&lt;/p&gt;
&lt;p&gt;有効ではない正規表現が入力された場合に送出される。&lt;/p&gt;
&lt;p&gt;エラーとなった理由は、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;what()&lt;/code&gt;&lt;/a&gt;メンバ関数によってエラーメッセージ文字列として取得できるほか、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error/code.html&#34;&gt;&lt;code&gt;code()&lt;/code&gt;&lt;/a&gt;メンバ関数によって&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/error_type.html&#34;&gt;&lt;code&gt;regex_constants::error_type&lt;/code&gt;&lt;/a&gt;型のエラーコード値としても取得できる。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;p&gt;基底クラスである&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;runtime_error&lt;/code&gt;&lt;/a&gt;も参照のこと。&lt;/p&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~regex_error() = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_error&amp;amp; operator=(const regex_error&amp;amp;) = default;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;regex_error&amp;amp; operator=(regex_error&amp;amp;&amp;amp;) = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;エラー内容&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error/code.html&#34;&gt;&lt;code&gt;code&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エラーコードを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt; code_to_string(&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/error_type.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_type&lt;/a&gt; e)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex_constants;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;switch&lt;/span&gt; (e) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_collate:    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error collapse&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_ctype:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error ctype&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_escape:     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error escape&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_backref:    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error back reference&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_brack:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error bracket&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_paren:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error paren&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_brace:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error brace&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_badbrace:   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error bad brace&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_range:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error range&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_space:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error space&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_badrepeat:  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error bad repeat&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_complexity: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error complexity&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_stack:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error stack&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #A0A000&#34;&gt;default:&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;invalid error code&#34;&lt;/span&gt;);
  }
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  try {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex&lt;/a&gt; re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開きカッコに対応する閉じカッコがない正規表現を指定&lt;/span&gt;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex_error&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e) {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; code_to_string(e.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error/code.html&#34;&gt;code()&lt;/a&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;error paren
The expression contained mismatched ( and ).
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_error (C++11) -- regex_error : デストラクタと代入演算子はdefaultにした。(#213)</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_error.html"/>
      <id>7232a194990b5bc5dabe3281efef45143b9b520b:reference/regex/regex_error.md</id>
      <updated>2015-09-15 12:34:56 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;regex_error (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;regex_error&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;runtime_error&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_error&lt;/code&gt;クラスは、正規表現ライブラリ&lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;からのエラー報告として送出される例外オブジェクトの型である。&lt;/p&gt;
&lt;p&gt;有効ではない正規表現が入力された場合に送出される。&lt;/p&gt;
&lt;p&gt;エラーとなった理由は、&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;what()&lt;/code&gt;&lt;/a&gt;メンバ関数によってエラーメッセージ文字列として取得できるほか、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error/code.html&#34;&gt;&lt;code&gt;code()&lt;/code&gt;&lt;/a&gt;メンバ関数によって&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/error_type.html&#34;&gt;&lt;code&gt;regex_constants::error_type&lt;/code&gt;&lt;/a&gt;型のエラーコード値としても取得できる。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;p&gt;基底クラスである&lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;&lt;code&gt;runtime_error&lt;/code&gt;&lt;/a&gt;も参照のこと。&lt;/p&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~regex_error() = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_error&amp;amp; operator=(const regex_error&amp;amp;) = default;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;regex_error&amp;amp; operator=(regex_error&amp;amp;&amp;amp;) = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;エラー内容&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error/code.html&#34;&gt;&lt;code&gt;code&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;エラーコードを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt; code_to_string(&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/error_type.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex_constants&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_type&lt;/a&gt; e)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex_constants;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;switch&lt;/span&gt; (e) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_collate:    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error collapse&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_ctype:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error ctype&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_escape:     &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error escape&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_backref:    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error back reference&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_brack:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error bracket&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_paren:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error paren&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_brace:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error brace&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_badbrace:   &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error bad brace&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_range:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error range&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_space:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error space&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_badrepeat:  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error bad repeat&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_complexity: &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error complexity&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; error_stack:      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error stack&#34;&lt;/span&gt;;
    &lt;span style=&#34;color: #A0A000&#34;&gt;default:&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/stdexcept.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;invalid error code&#34;&lt;/span&gt;);
  }
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  try {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex&lt;/a&gt; re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;(&#34;&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 開きカッコに対応する閉じカッコがない正規表現を指定&lt;/span&gt;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#ff0000&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex_error&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e) {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; code_to_string(e.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_error/code.html&#34;&gt;code()&lt;/a&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;error paren
The expression contained mismatched ( and ).
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
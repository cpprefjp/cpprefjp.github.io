<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-07-18T14:51:10.560344</updated>
  <id>7c0ada39-c574-418b-abf8-e5f0ca9f974d</id>

  
    <entry>
      <title>assignable_from -- assignable_from : 間違いを訂正と追記</title>
      <link href="https://cpprefjp.github.io/reference/concepts/assignable_from.html"/>
      <id>b77a069a7043bb64b41c3356a803fc62c63afb3c:reference/concepts/assignable_from.md</id>
      <updated>2022-07-18T16:53:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/assignable_from.md b/reference/concepts/assignable_from.md
index 256e22170..7c27d2213 100644
--- a/reference/concepts/assignable_from.md
+++ b/reference/concepts/assignable_from.md
@@ -26,19 +26,21 @@ namespace std {
 
 ## モデル
 
-まず、`lhs`を`decltype((lhs))`が`LHS`であるような`lcopy`オブジェクトを参照する左辺値、`rhs`を`decltype((rhs))`が`RHS`であるような式、`rcopy`を`rhs`と等値な個別のオブジェクトとして定義する。
+まず、`lhs`を`decltype((lhs))`が`LHS`であるような`lcopy`オブジェクトを参照する左辺値（参照）、`rhs`を`decltype((rhs))`が`RHS`であるような式、`rcopy`を`rhs`と等値な別のオブジェクトとして定義する。
 
 これらの`lhs, rhs, lcopy, rcopy`について、以下の条件を満たす場合に限って、型`LHS, RHS`は`assignable_from`のモデルである。
 
 - [`addressof`](/reference/memory/addressof.md)`(lhs = rhs) == `[`addressof`](/reference/memory/addressof.md)`(lcopy)`となる
-- `lhs = rhs;`という式の評価の後で以下のいずれかのことが成り立っている
-    - `rhs`が`lcopy`を参照する非`const` *xvalue*でないならば
+- `lhs = rhs;`という式の評価の後で以下のことが成り立っている
+    - `rhs`が`lcopy`を参照する非`const` *xvalue*でない（ムーブが起こる自己代入ではない）場合
         - `lhs`は`rcopy`と等値である
     - `rhs`が非`const` *xvalue*ならば
         - `rhs`が参照するオブジェクトの状態は有効だが未規定
     - それ以外の場合で、`rhs`が*glvalue*ならば
         - `rhs`が参照するオブジェクトは変更されない
 
+`rhs`が*prvalue*の場合、2つめの条件のいずれにも該当しない。これはコピー省略等の最適化を考慮したものである。
+
 ## 備考
 
 代入操作では、引数型の一部の値が本コンセプトが要求する構文・意味論的制約を必ずしも満たしていなくても構わない。特に、あるオブジェクト`x`への代入操作によって別のオブジェクト`y`が変更される時、`x, y`はその場合の`=`の定義域に含まれない事がある。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>same_as -- same_as : fix typo</title>
      <link href="https://cpprefjp.github.io/reference/concepts/same_as.html"/>
      <id>252847055fcca10a9407e00642e4ae8d4b9a80c8:reference/concepts/same_as.md</id>
      <updated>2022-07-17T17:27:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/same_as.md b/reference/concepts/same_as.md
index 8e7e756ad..ed7053b3d 100644
--- a/reference/concepts/same_as.md
+++ b/reference/concepts/same_as.md
@@ -30,7 +30,7 @@ concept same-as-impl = is_same_v&amp;lt;T, U&amp;gt;;
 
 ```cpp
 template &amp;lt;class T, class U&amp;gt;
-concept C = same-as-impl&amp;lt;T, U&amp;gt; &amp;amp;&amp;amp; same-as-impl&amp;lt;U, T&amp;gt;;
+concept same_as = same-as-impl&amp;lt;T, U&amp;gt; &amp;amp;&amp;amp; same-as-impl&amp;lt;U, T&amp;gt;;
 ```
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- formatter : 微修正</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>d54e2129f30d7d8d76b89ab5abed51492810df72:reference/format/formatter.md</id>
      <updated>2022-07-14T01:51:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 337690122..dac02dfee 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -52,7 +52,7 @@ namespace std {
 
 型`F`がFormatter要件を満たすとは、次のことをいう。
 
-* `F`は`Cpp17DefaultConstructible`、`Cpp17CopyConstructible`、`Cpp17CopyAssignable`、`Cpp17Destructible`であること (注: ここはC++20の策定までにコンセプトで書き換えられるかもしれない)
+* `F`は`Cpp17DefaultConstructible`、`Cpp17CopyConstructible`、`Cpp17CopyAssignable`、`Cpp17Destructible`であること
 
 さらに、以下の条件を満たすこと
 
@@ -62,11 +62,11 @@ namespace std {
 2. 式 `f.format(t, fc)` が有効であり、
     * 戻り値の型が`FC::iterator`である
     * フォーマット結果を`fc.out()`へ出力し、出力後のイテレーターを返す
-    * 出力は`t`、グローバルロケール、最後に呼び出された`f.parse(pc)`の`[pc.begin(), pc.end())`の範囲以外に依存しない
+    * 出力は`t`、`fc.locale()`、最後に呼び出された`f.parse(pc)`の`[pc.begin(), pc.end())`の範囲以外に依存しない
 3. 式 `f.format(u, fc)` が有効であり、
     * 戻り値が`FC::iterator`である
     * フォーマット結果を`fc.out()`へ出力し、出力後のイテレーターを返す
-    * 出力は`t`、グローバルロケール、最後に呼び出された`f.parse(pc)`の`[pc.begin(), pc.end())`の範囲以外に依存しない
+    * 出力は`u`、`fc.locale()`、最後に呼び出された`f.parse(pc)`の`[pc.begin(), pc.end())`の範囲以外に依存しない
     * `u`を変更しない
 
 条件内の各要素を、以下のように定義する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to -- format_to : 制約周りを調整</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to.html"/>
      <id>3de5612490bce58646a35b36846de9b659c81a1b:reference/format/format_to.md</id>
      <updated>2022-07-06T15:34:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to.md b/reference/format/format_to.md
index bfb437091..46ea809c4 100644
--- a/reference/format/format_to.md
+++ b/reference/format/format_to.md
@@ -51,15 +51,15 @@ format_to(back_inserter(buffer), &amp;#34;The answer is {}.&amp;#34;, 42);
 
 `Out`は以下の制約を満たす。
 
-* (1),(3): `OutputIterator&amp;lt;const char&amp;amp;&amp;gt;`
-* (2),(4): `OutputIterator&amp;lt;const wchar_t&amp;amp;&amp;gt;`
+* (1),(3): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const char&amp;amp;&amp;gt;`
+* (2),(4): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const wchar_t&amp;amp;&amp;gt;`
 
 ## 事前条件
 
-`out`は以下の制約を満たす型の有効なオブジェクトである。
+`Out`は以下のコンセプトのモデルである。
 
-* (1),(3): `OutputIterator&amp;lt;const char&amp;amp;&amp;gt;`
-* (2),(4): `OutputIterator&amp;lt;const wchar_t&amp;amp;&amp;gt;`
+* (1),(3): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const char&amp;amp;&amp;gt;`
+* (2),(4): [`output_iterator`](/reference/iterator/output_iterator.md)`&amp;lt;Out, const wchar_t&amp;amp;&amp;gt;`
 
 ## 効果
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
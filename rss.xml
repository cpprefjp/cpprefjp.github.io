<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-12-07T02:28:14.140133</updated>
  <id>1627e73c-5480-48d6-87de-259eaebcbf7a</id>

  
    <entry>
      <title>counted_iterator -- counted_iterator::[] 追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>c18fc4b159a1f2d7f5fe94990e12c6eda03998b5:reference/iterator/counted_iterator.md</id>
      <updated>2020-12-07T11:23:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index e3391d3c3..92c73d0fb 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -58,7 +58,7 @@ namespace std {
 | [`operator+=`](counted_iterator/op_plus_assign.md.nolink)    | イテレータ自身を進める | C++20 |
 | [`operator-`](counted_iterator/op_unary_minus.md.nolink)     | イテレータを逆に進める | C++20 |
 | [`operator-=`](counted_iterator/op_minus_assign.md.nolink)   | イテレータ自身を逆に進める | C++20 |
-| [`operator[]`](counted_iterator/op_at.md.nolink)             | 任意の位置にランダムアクセスする | C++20 |
+| [`operator[]`](counted_iterator/op_at.md)             | 任意の位置にランダムアクセスする | C++20 |
 
 ## 非メンバ（*Hidden friends*）関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- counted_iterator::[] 追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_at.html"/>
      <id>c18fc4b159a1f2d7f5fe94990e12c6eda03998b5:reference/iterator/counted_iterator/op_at.md</id>
      <updated>2020-12-07T11:23:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_at.md b/reference/iterator/counted_iterator/op_at.md
new file mode 100644
index 000000000..ab1512f3b
--- /dev/null
+++ b/reference/iterator/counted_iterator/op_at.md
@@ -0,0 +1,65 @@
+# operator[]
+* iterator[meta header]
+* std[meta namespace]
+* counted_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr decltype(auto) operator[](iter_difference_t&amp;lt;I&amp;gt; n) const
+  requires random_access_iterator&amp;lt;I&amp;gt;;
+```
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* random_access_iterator[link /reference/iterator/random_access_iterator.md]
+
+## 概要
+任意の位置にランダムアクセスする。
+
+## 事前条件
+
+カウントの値を`length`メンバ変数に保持するとすると、`n &amp;lt; length`であること。
+
+## 効果
+
+`I`の値を`current`メンバ変数に保持するとすると、以下と等価
+
+`return current[n];`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::counted_iterator ci{std::ranges::begin(vec), 5};
+
+  std::cout &amp;lt;&amp;lt; ci[1] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  ++ci;
+
+  std::cout &amp;lt;&amp;lt; ci[1];
+}
+```
+* ci[1][color ff0000]
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+
+### 出力
+```
+2
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update ８
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted_iterator -- counted_iterator::operator*追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>1d9032e52bfdb5e53b98beb2504448348ffe063c:reference/iterator/counted_iterator.md</id>
      <updated>2020-12-07T11:12:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index 71404e93b..e3391d3c3 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -50,7 +50,7 @@ namespace std {
 | [`operator=`](counted_iterator/op_assign.md)          | 代入演算子 | C++20 |
 | [`base`](counted_iterator/base.md)          | 元のイテレータを取得する | C++20 |
 | [`count`](counted_iterator/count.md)          | 代入演算子 | C++20 |
-| [`operator*`](counted_iterator/op_deref.md.nolink)           | 間接参照演算子 | C++20 |
+| [`operator*`](counted_iterator/op_deref.md)           | 間接参照演算子 | C++20 |
 | [`operator-&amp;gt;`](counted_iterator/op_arrow.md.nolink)          | メンバアクセス演算子 | C++20 |
 | [`operator++`](counted_iterator/op_increment.md.nolink)      | イテレータをインクリメントする | C++20 |
 | [`operator--`](counted_iterator/op_decrement.md.nolink)      | イテレータをインクリメントする | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* -- counted_iterator::operator*追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/op_deref.html"/>
      <id>1d9032e52bfdb5e53b98beb2504448348ffe063c:reference/iterator/counted_iterator/op_deref.md</id>
      <updated>2020-12-07T11:12:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/op_deref.md b/reference/iterator/counted_iterator/op_deref.md
new file mode 100644
index 000000000..3135ee4d8
--- /dev/null
+++ b/reference/iterator/counted_iterator/op_deref.md
@@ -0,0 +1,61 @@
+# operator*
+* iterator[meta header]
+* std[meta namespace]
+* counted_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr decltype(auto) operator*();
+constexpr decltype(auto) operator*() const requires dereferenceable&amp;lt;const I&amp;gt;;
+```
+* dereferenceable[link /reference/iterator/dereferenceable.md]
+
+## 概要
+イテレータを間接参照する。
+
+## 効果
+
+`I`の値を`current`メンバ変数に保持するとして、以下と等価
+
+`return *current;`
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::counted_iterator ci{std::ranges::begin(vec), 5};
+
+  std::cout &amp;lt;&amp;lt; *ci &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  
+  ++ci;
+  
+  std::cout &amp;lt;&amp;lt; *ci;
+}
+```
+* *ci[color ff0000]
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+
+### 出力
+```
+1
+2
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 8
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted_iterator -- counted_iterator::count 追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>96502301c1fee303910d98d6a3ed3a38b15d143e:reference/iterator/counted_iterator.md</id>
      <updated>2020-12-07T11:06:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index 34c70f570..71404e93b 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -49,7 +49,7 @@ namespace std {
 | [`(constructor)`](counted_iterator/op_constructor.md) | コンストラクタ | C++20 |
 | [`operator=`](counted_iterator/op_assign.md)          | 代入演算子 | C++20 |
 | [`base`](counted_iterator/base.md)          | 元のイテレータを取得する | C++20 |
-| [`count`](counted_iterator/count.md.nolink)          | 代入演算子 | C++20 |
+| [`count`](counted_iterator/count.md)          | 代入演算子 | C++20 |
 | [`operator*`](counted_iterator/op_deref.md.nolink)           | 間接参照演算子 | C++20 |
 | [`operator-&amp;gt;`](counted_iterator/op_arrow.md.nolink)          | メンバアクセス演算子 | C++20 |
 | [`operator++`](counted_iterator/op_increment.md.nolink)      | イテレータをインクリメントする | C++20 |
@@ -108,7 +108,6 @@ int main() {
     std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
   }
 }
-}
 ```
 * std::counted_iterator[color ff0000]
 * ranges::begin[link /reference/ranges/begin.md.nolink]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- counted_iterator::count 追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/base.html"/>
      <id>96502301c1fee303910d98d6a3ed3a38b15d143e:reference/iterator/counted_iterator/base.md</id>
      <updated>2020-12-07T11:06:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/base.md b/reference/iterator/counted_iterator/base.md
index 82d769754..ee6da9e7e 100644
--- a/reference/iterator/counted_iterator/base.md
+++ b/reference/iterator/counted_iterator/base.md
@@ -20,6 +20,36 @@ constexpr I base() &amp;amp;&amp;amp;;  // (2)
 - (1) : 元のイテレータをコピーして返す。
 - (2) : 元のイテレータをムーブして返す。
 
+## 例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::counted_iterator ci{std::ranges::begin(vec), 5};
+
+  std::cout &amp;lt;&amp;lt; *(ci.base()) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  
+  ++ci;
+  
+  std::cout &amp;lt;&amp;lt; *(ci.base());
+}
+```
+* count[color ff0000]
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+
+### 出力
+
+```
+1
+2
+```
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- counted_iterator::count 追加 #712</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/count.html"/>
      <id>96502301c1fee303910d98d6a3ed3a38b15d143e:reference/iterator/counted_iterator/count.md</id>
      <updated>2020-12-07T11:06:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/count.md b/reference/iterator/counted_iterator/count.md
new file mode 100644
index 000000000..1ea355322
--- /dev/null
+++ b/reference/iterator/counted_iterator/count.md
@@ -0,0 +1,56 @@
+# count
+* iterator[meta header]
+* std[meta namespace]
+* counted_iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iter_difference_t&amp;lt;I&amp;gt; count() const noexcept;
+```
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+
+## 概要
+
+メンバ変数として保持している、カウント数（長さ）を取得する。
+
+## 戻り値
+
+コンストラクタで指定されたカウント数を返す。
+
+## 例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::counted_iterator ci{std::ranges::begin(vec), 5};
+
+  std::cout &amp;lt;&amp;lt; ci.count();
+}
+```
+* count[color ff0000]
+* ranges::begin[link /reference/ranges/begin.md.nolink]
+
+### 出力
+
+```
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 8
+
+## 参照
+- [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted_iterator -- counted_iterator :  fix typo</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>644e3039adcc62ebd1588b41050ff8ebc8df922f:reference/iterator/counted_iterator.md</id>
      <updated>2020-12-05T18:43:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index b2f884c39..34c70f570 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -23,7 +23,7 @@ namespace std {
 
   // iterator_traitsにアダプトする
   template&amp;lt;input_iterator I&amp;gt;
-  struct iterator_traits&amp;lt;counted_iterator&amp;lt;I&amp;gt;&amp;gt; iterator_traits&amp;lt;I&amp;gt; {
+  struct iterator_traits&amp;lt;counted_iterator&amp;lt;I&amp;gt;&amp;gt; : iterator_traits&amp;lt;I&amp;gt; {
     using pointer = void;
   };
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_pointer_interconvertible_base_of -- is_pointer_interconvertible_base_of: fix example</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_pointer_interconvertible_base_of.html"/>
      <id>373db2562dd489679aa96001078a6cb320052725:reference/type_traits/is_pointer_interconvertible_base_of.md</id>
      <updated>2020-12-04T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_pointer_interconvertible_base_of.md b/reference/type_traits/is_pointer_interconvertible_base_of.md
index 976126e49..dcd144a8e 100644
--- a/reference/type_traits/is_pointer_interconvertible_base_of.md
+++ b/reference/type_traits/is_pointer_interconvertible_base_of.md
@@ -40,15 +40,15 @@ namespace std {
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
 
-struct B { int m; };
-struct D1 { B b; };
-struct D2 : B {};
+struct B1 { int m1; };
+struct B2 { int m2; };
+struct D : B1, B2 {};
 
 int main()
 {
-  static_assert(std::is_pointer_interconvertible_base_of_v&amp;lt;B, B&amp;gt;);
-  static_assert(std::is_pointer_interconvertible_base_of_v&amp;lt;B, D1&amp;gt;);
-  static_assert(std::is_pointer_interconvertible_base_of_v&amp;lt;B, D2&amp;gt;);
+  static_assert( std::is_pointer_interconvertible_base_of_v&amp;lt;D, D&amp;gt;);
+  static_assert( std::is_pointer_interconvertible_base_of_v&amp;lt;B1, D&amp;gt;);
+  static_assert(!std::is_pointer_interconvertible_base_of_v&amp;lt;B2, D&amp;gt;);
 }
 ```
 * std::is_pointer_interconvertible_base_of_v[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
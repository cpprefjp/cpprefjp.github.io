<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-11-24T09:09:17.879198</updated>
  <id>cb6be6a1-881d-41b1-9c98-4dc8220aea63</id>

  
    <entry>
      <title>pop -- recursive_directory_iterator::pop : 無効化の事後条件を過去にさかのぼって適用</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/recursive_directory_iterator/pop.html"/>
      <id>2161c2be65072e3cda3c8043a07bf58634027b1c:reference/filesystem/recursive_directory_iterator/pop.md</id>
      <updated>2020-11-24T18:04:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/recursive_directory_iterator/pop.md b/reference/filesystem/recursive_directory_iterator/pop.md
index 97ff756bb..d71229cb8 100644
--- a/reference/filesystem/recursive_directory_iterator/pop.md
+++ b/reference/filesystem/recursive_directory_iterator/pop.md
@@ -18,6 +18,10 @@ void pop(std::error_code&amp;amp; ec);
 [`depth()`](depth.md) `== 0`の場合は、`*this`に終端イテレータを代入する。そうでない場合は、そのディレクトリの走査を終了し、親ディレクトリに戻る。
 
 
+## 事後条件
+- `*this`のそれまでのあらゆるコピーは、`==`のドメインにおいて間接参照であることが要求されなくなる
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -64,3 +68,7 @@ int main()
 - [Clang](/implementation.md#clang): 7.0
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [LWG Issue `recursive_directory_iterator::pop` must invalidate](https://wg21.cmeerw.net/lwg/issue3067)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>visit -- visit : 戻り値型が間違ってた問題へのissueを記載</title>
      <link href="https://cpprefjp.github.io/reference/variant/visit.html"/>
      <id>15f13889ab66000b14bdbf79815ce460f9f5e5ce:reference/variant/visit.md</id>
      <updated>2020-11-24T17:57:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/visit.md b/reference/variant/visit.md
index 93b58edfb..d3c1c372c 100644
--- a/reference/variant/visit.md
+++ b/reference/variant/visit.md
@@ -195,3 +195,4 @@ HelloHello
 
 ## 参照
 - [P0655R1 `visit&amp;lt;R&amp;gt;`: Explicit Return Type for `visit`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0655r1.pdf)
+- [LWG Issue 2970. Return type of `std::visit` misspecified](https://wg21.cmeerw.net/lwg/issue2970)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>what -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/filesystem_error/what.html"/>
      <id>37290198e34bc2e9d6e0714c0c18a7b415b91fe4:reference/filesystem/filesystem_error/what.md</id>
      <updated>2020-11-24T17:53:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/filesystem_error/what.md b/reference/filesystem/filesystem_error/what.md
index 7799638a6..1bd430f4d 100644
--- a/reference/filesystem/filesystem_error/what.md
+++ b/reference/filesystem/filesystem_error/what.md
@@ -16,7 +16,7 @@ const char* what() const noexcept override;
 ## 戻り値
 コンストラクタで設定されたエラー理由を含む未規定のフォーマットの実装定義の文字列を返す。
 
-実装は、[`system_error`](/reference/system_error/system_error.md)`::`[`what()`](/reference/system_error/system_error/what.md)で返される文字列とネイティブ形式の`path1`と`path2`を含める必要がある。
+実装は、[`system_error`](/reference/system_error/system_error.md)`::what()`で返される文字列とネイティブ形式の`path1`と`path2`を含める必要がある。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>what -- filesystem_error::what : 戻り値の詳細を記載</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/filesystem_error/what.html"/>
      <id>9f4447eeb7446f37f378c58a33d9e7d061ebb56a:reference/filesystem/filesystem_error/what.md</id>
      <updated>2020-11-24T17:46:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/filesystem_error/what.md b/reference/filesystem/filesystem_error/what.md
index 330fe7ff8..7799638a6 100644
--- a/reference/filesystem/filesystem_error/what.md
+++ b/reference/filesystem/filesystem_error/what.md
@@ -14,7 +14,9 @@ const char* what() const noexcept override;
 
 
 ## 戻り値
-コンストラクタで設定されたエラー理由の文字列を返す。
+コンストラクタで設定されたエラー理由を含む未規定のフォーマットの実装定義の文字列を返す。
+
+実装は、[`system_error`](/reference/system_error/system_error.md)`::`[`what()`](/reference/system_error/system_error/what.md)で返される文字列とネイティブ形式の`path1`と`path2`を含める必要がある。
 
 
 ## 例
@@ -54,3 +56,7 @@ filesystem error: can&amp;#39;t copy file. source file doesn&amp;#39;t found: No such file or di
 - [Clang](/implementation.md#clang):
 - [GCC](/implementation.md#gcc): 8.1
 - [Visual C++](/implementation.md#visual_cpp):
+
+
+## 参照
+- [LWG Issue 3043. Bogus postcondition for `filesystem_error` constructor](https://wg21.cmeerw.net/lwg/issue3043)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_literal_type -- is_literal_type_v : inline対応のissueを参照に追加</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_literal_type.html"/>
      <id>0f25a4e13f9b14ad554896223ca3687a13a21fa6:reference/type_traits/is_literal_type.md</id>
      <updated>2020-11-24T17:27:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_literal_type.md b/reference/type_traits/is_literal_type.md
index 244883aa8..927fd9b9e 100644
--- a/reference/type_traits/is_literal_type.md
+++ b/reference/type_traits/is_literal_type.md
@@ -93,3 +93,4 @@ Clang 3.0では、上記サンプルにおける`X`型が、リテラル型と
 - [P0006R0 Adopt Type Traits Variable Templates from Library Fundamentals TS for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0006r0.html)
 - [P0174R2 Deprecating Vestigial Library Parts in C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0174r2.html)
 - [P0619R4 Reviewing deprecated facilities of C++17 for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html)
+- [LWG Issue `is_literal_type_v` should be `inline`](https://wg21.cmeerw.net/lwg/issue3042)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-01-08T09:42:11.412677</updated>
  <id>80bdd850-6d18-4f76-a2ae-9ba97d52019a</id>

  
    <entry>
      <title>extents -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents.md b/reference/mdspan/extents.md
index 776ae8633..730d8c84b 100644
--- a/reference/mdspan/extents.md
+++ b/reference/mdspan/extents.md
@@ -17,7 +17,7 @@ namespace std {
 
 ## 概要
 `extents`は、多次元配列の次元数、各次元の要素数、要素数が静的（コンパイル時）または動的（プログラム実行時）いずれのタイミングで指定されるかを表現する。
-多次元配列ビュー[`std::mdspan`](mdspan.md)に対して、多次元配列のサイズを指示するために用いられる。
+多次元配列ビュー[`std::mdspan`](mdspan.md)に対して、多次元配列のサイズを指示するために用いる。
 
 - 多次元配列の次元数は`sizeof...(Extents)`に等しい
 - `Extents`要素のうち[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しい次元は、動的要素数(dynamic extent)となる
@@ -25,7 +25,8 @@ namespace std {
 
 `extents`の特殊化は[`regular`](/reference/concepts/regular.md)のモデルであり、かつ[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)である。
 
-エイリアステンプレート`dextents`は、全次元が動的要素数で指定される`extents`を生成する。
+### エイリアステンプレート
+エイリアステンプレート`dextents`は、次元数`Rank`かつ全次元が動的要素数で指定される`extents`を生成する。
 例えば`dextents&amp;lt;size_t, 2&amp;gt;`は`extents&amp;lt;size_t, dynamic_extent, dynamic_extent&amp;gt;`の略記となる。
 
 
@@ -39,12 +40,12 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](extents/op_constructor.md.nolink) | コンストラクタ | C++23 |
+| [`(constructor)`](extents/op_constructor.md) | コンストラクタ | C++23 |
 | `(destructor)`  | デストラクタ   | C++23 |
-| [`rank`](extents/rank.md.nolink) | 多次元配列の次元数を取得する | C++23 |
-| [`rank_dynamic`](extents/rank_dynamic.md.nolink) | 多次元配列のうち動的要素数に指定された次元数を取得する | C++23 |
-| [`static_extent`](extents/static_extent.md.nolink) | 指定次元の静的要素数を取得する | C++23 |
-| [`extent`](extents/extent.md.nolink) | 指定次元の要素数を取得する | C++23 |
+| [`rank`](extents/rank.md) | 多次元配列の次元数を取得する | C++23 |
+| [`rank_dynamic`](extents/rank_dynamic.md) | 多次元配列のうち動的要素数に指定された次元数を取得する | C++23 |
+| [`static_extent`](extents/static_extent.md) | 指定次元の静的要素数を取得する | C++23 |
+| [`extent`](extents/extent.md) | 指定次元の要素数を取得する | C++23 |
 
 
 ## メンバ型
@@ -60,15 +61,15 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator==`](extents/op_equal.md.nolink) | 等値比較 | C++23 |
-| [`operator!=`](extents/op_equal.md.nolink) | 非等値比較 (`==`により使用可能) | C++23 |
+| [`operator==`](extents/op_equal.md) | 等値比較 | C++23 |
+| [`operator!=`](extents/op_equal.md) | 非等値比較 (`==`により使用可能) | C++23 |
 
 
 ## 推論補助
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(deduction_guide)`](extents/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23 |
+| [`(deduction_guide)`](extents/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23 |
 
 
 ## 例
@@ -77,21 +78,19 @@ namespace std {
 
 int main()
 {
-  // 固定サイズ 3x3 の2次元配列サイズ
-  std::extents&amp;lt;size_t, 2, 3, 3&amp;gt; ext3x3;
+  // 固定要素数 3x3 の2次元配列サイズ
+  std::extents&amp;lt;size_t, 3, 3&amp;gt; ext3x3;
 
-  // 動的サイズをもつ2次元配列サイズを 4x2 で初期化
-  using Ext2D = std::dextents&amp;lt;size_t, 2&amp;gt;;
-  Ext2D ext2d{4, 2};
+  // 動的要素数からなる2次元配列サイズを 4x2 で初期化
+  std::dextents&amp;lt;size_t, 2&amp;gt; ext2d{4, 2};
 
-  // 2個の動的次元(高さ,幅)と固定次元(RGBA;4)からなる3次元配列サイズ
+  // 2個の動的要素数(高さ,幅)と静的要素数(RGBA=4)からなる3次元配列サイズ
   using ColorImageExt = std::extents&amp;lt;size_t, std::dynamic_extent, std::dynamic_extent, 4&amp;gt;;
   ColorImageExt image_ext{128, 128};
 }
 ```
 * std::extents[color ff0000]
 * std::dextents[color ff0000]
-* std::dynamic_extent[link /reference/span/dynamic_extent.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extent -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/extent.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/extent.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/extent.md b/reference/mdspan/extents/extent.md
new file mode 100644
index 000000000..1c9827b18
--- /dev/null
+++ b/reference/mdspan/extents/extent.md
@@ -0,0 +1,76 @@
+# extent
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr index_type extent(rank_type i) const noexcept;
+```
+
+## 概要
+多次元配列サイズのうち`i`番目次元の要素数を取得する。
+
+
+## 事前条件
+`i &amp;lt;` [`rank()`](rank.md)が`true`
+
+
+## 戻り値
+`i`番目次元の要素数。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  static_assert(Ext3x4::static_extent(0) == 3);
+  static_assert(Ext3x4::static_extent(1) == 4);
+  Ext3x4 ext1;
+  assert(ext1.extent(0) == 3);
+  assert(ext1.extent(1) == 4);
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  static_assert(Ext3xN::static_extent(0) == 3);
+  static_assert(Ext3xN::static_extent(1) == std::dynamic_extent);
+  Ext3xN ext2{10};
+  assert(ext2.extent(0) == 3);
+  assert(ext2.extent(1) == 10);
+}
+```
+* extent()[color ff0000]
+* static_extent()[link static_extent.md]
+* std::extents[link ../extents.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`static_extent`](static_extent.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_constructor.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/op_constructor.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_constructor.md b/reference/mdspan/extents/op_constructor.md
new file mode 100644
index 000000000..2a0487d24
--- /dev/null
+++ b/reference/mdspan/extents/op_constructor.md
@@ -0,0 +1,149 @@
+# コンストラクタ
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr extents() noexcept = default;  // (1)
+
+template&amp;lt;class OtherIndexType, size_t... OtherExtents&amp;gt;
+constexpr explicit(see below)
+  extents(const extents&amp;lt;OtherIndexType, OtherExtents...&amp;gt;&amp;amp; other) noexcept;  // (2)
+
+template&amp;lt;class... OtherIndexTypes&amp;gt;
+constexpr explicit extents(OtherIndexTypes... exts) noexcept;  // (3)
+
+template&amp;lt;class OtherIndexType, size_t N&amp;gt;
+constexpr explicit(N != rank_dynamic())
+  extents(span&amp;lt;OtherIndexType, N&amp;gt; exts) noexcept;  // (4)
+
+template&amp;lt;class OtherIndexType, size_t N&amp;gt;
+constexpr explicit(N != rank_dynamic())
+  extents(const array&amp;lt;OtherIndexType, N&amp;gt;&amp;amp; exts) noexcept;  // (5)
+```
+* see below[italic]
+* rank_dynamic()[link rank_dynamic.md]
+* span[link /reference/span/span.md]
+* array[link /reference/array/array.md]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : 他`extents`からの変換コンストラクタ
+- (3) : 要素数を値リストで設定するコンストラクタ
+- (4) : 要素数を`span`で設定するコンストラクタ
+- (5) : 要素数を`array`で設定するコンストラクタ
+
+
+## テンプレートパラメータ制約
+- (2) :
+    - `sizeof...(OtherExtents) ==` [`rank()`](rank.md)が`ture`、かつ
+    - `((OtherExtents == dynamic_extent || Extents == dynamic_extent || OtherExtents == Extents) &amp;amp;&amp;amp; ...)`が`ture`であること
+- (3) : `N`を`sizeof...(OtherIndexTypes)`、`exts_arr`を[`array`](/reference/array/array.md)`&amp;lt;index_type, N&amp;gt;{static_cast&amp;lt;index_type&amp;gt;(std:move(exts))...}`としたとき
+    - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherIndexTypes, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`ture`、かつ
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`ture`、かつ
+    - `N ==` [`rank_dynamic()`](rank_dynamic.md) `|| N ==` [`rank()`](rank.md)が`true`であること
+- (4), (5) :
+    - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const OtherIndexTypes&amp;amp;, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`ture`、かつ
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`ture`、かつ
+    - `N ==` [`rank_dynamic()`](rank_dynamic.md) `|| N ==` [`rank()`](rank.md)が`true`であること
+
+
+## 事前条件
+- (2) : それぞれ`r`番目の次元が静的要素数に対して要素数が`other.`[`extent`](extent.md)`(r)`と等しく、かつ
+    - `sizeof...(OtherExtents) == 0`、もしくは
+    - `other`の全ての次元`r`において`other.extent(r)`が`index_type`型で表現可能な値であること
+- (3) : `N`を`sizeof...(OtherIndexTypes)`、`exts_arr`を[`array`](/reference/array/array.md)`&amp;lt;index_type, N&amp;gt;{static_cast&amp;lt;index_type&amp;gt;(std:move(exts))...}`としたとき
+    - `N !=` [`rank_dynamic()`](rank_dynamic.md)ならば、それぞれ`r`番目の次元が静的要素数に対して要素数が`exts_arr[r]`と等しく、かつ
+    - `sizeof...(exts) == 0`もしくは`exts`の各要素が`index_type`型で表現可能な値であること
+- (4), (5) : `N !=` [`rank_dynamic()`](rank_dynamic.md)ならば、それぞれ`r`番目の次元が静的要素数に対して要素数が`exts[r]`と等しく、かつ
+    - `N == 0`、もしくは
+    - `exts`の各要素が`index_type`型で表現可能な値であること
+
+
+## 効果
+- (4), (5) : 動的要素数に指定された各次元の要素数を`exts`の値を用いて初期化する。
+
+
+## 事後条件
+- (2) : `*this == other`
+- (3) : `exts_arr`を[`array`](/reference/array/array.md)`&amp;lt;index_type, N&amp;gt;{static_cast&amp;lt;index_type&amp;gt;(std:move(exts))...}`としたとき、`*this == extents(exts_arr)`（オーバーロード(5)の効果を参照）
+
+
+## 例外
+投げない
+
+
+## explicitになる条件
+- (2) : `(((Extents != dynamic_extent) &amp;amp;&amp;amp; (OtherExtents == dynamic_extent)) || ... ) || (numeric_limits&amp;lt;index_type&amp;gt;::max() &amp;lt; numeric_limits&amp;lt;OtherIndexType&amp;gt;::max())`
+- (4), (5) : `N !=` [`rank_dynamic()`](rank_dynamic.md)
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;span&amp;gt;
+
+using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extents&amp;gt;;
+
+int main()
+{
+  // (1) : デフォルトコンストラクタ
+  {
+    Ext3x4 ext1_3x4;
+    Ext3xN ext1_3xN;
+  }
+  // (2) : 変換コンストラクタ
+  {
+    Ext3x4 ext1_3x4;
+    Ext3xN ext1_3xN = ext1_3x4;
+    assert(ext1_3xN.extent(1) == 4);
+  }
+  // (3) : 要素数を値リストで設定するコンストラクタ
+  {
+    Ext3xN ext3_all{3, 4};  // 全次元を設定
+    Ext3xN ext3_dyn{4};     // 動的要素数のみ設定
+    assert(ext3_all == ext3_dyn);
+  }
+  // (4) : 要素数をspanで設定するコンストラクタ
+  {
+    int exts_all[] = {3, 4};
+    int exts_dyn[] = {4};
+    Ext3xN ext4_all{ std::span{exts_all} };  // 全次元を設定(explicit)
+    Ext3xN ext4_dyn = std::span{exts_dyn};   // 動的要素数のみ設定
+    assert(ext4_all == ext4_dyn);
+  }
+  // (5) : 要素数をarrayで設定するコンストラクタ
+  {
+    std::array exts_all{3, 4};
+    std::array exts_dyn{4};
+    Ext3xN ext5_all{ exts_all };  // 全次元を設定(explicit)
+    Ext3xN ext5_dyn = exts_dyn;   // 動的要素数のみ設定
+    assert(ext5_all == ext5_dyn);
+  }
+}
+```
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [P2599R2 `index_type` &amp;amp; `size_type` in `mdspan`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2599r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_deduction_guide.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/op_deduction_guide.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_deduction_guide.md b/reference/mdspan/extents/op_deduction_guide.md
new file mode 100644
index 000000000..753582403
--- /dev/null
+++ b/reference/mdspan/extents/op_deduction_guide.md
@@ -0,0 +1,59 @@
+# 推論補助
+* mdspan[meta header]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class... Integrals&amp;gt;
+  explicit extents(Integrals...) -&amp;gt; see below;
+}
+```
+* see below[italic]
+
+## 概要
+`std::extents`クラステンプレートの型推論補助。多次元配列の動的要素数リストから[`std::dextents`](../extents.md)`&amp;lt;size_t, sizeof...(Integrals)&amp;gt;`型を推論する。
+
+
+## テンプレートパラメータ制約
+[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Integrals, size_t&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+
+
+## 例
+```cpp example
+#include &amp;lt;concept&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  // 動的要素数 3x3 の2次元配列サイズ
+  std::extents ext3x3{3, 3};
+
+  static_assert(std::same_as&amp;lt;
+    decltype(ext3x3),
+    std::dextens&amp;lt;2, std::dynamic_extent, std::dynamic_extent&amp;gt;
+  &amp;gt;);
+}
+```
+* std::extents[link ../extents.md]
+* std::dextents[link ../extents.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_equal.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/op_equal.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_equal.md b/reference/mdspan/extents/op_equal.md
new file mode 100644
index 000000000..cf11302ba
--- /dev/null
+++ b/reference/mdspan/extents/op_equal.md
@@ -0,0 +1,70 @@
+# operator==
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class OtherIndexType, size_t... OtherExtents&amp;gt;
+friend constexpr bool operator==(
+  const extents&amp;amp; lhs,
+  const extents&amp;lt;OtherIndexType, OtherExtents...&amp;gt;&amp;amp; rhs) noexcept;
+
+//operator==により、以下のオーバーロードが使用可能になる        
+template&amp;lt;class OtherIndexType, size_t... OtherExtents&amp;gt;
+friend constexpr bool operator!=(
+  const extents&amp;amp; lhs,
+  const extents&amp;lt;OtherIndexType, OtherExtents...&amp;gt;&amp;amp; rhs) noexcept;
+```
+
+## 概要
+`extents`の等値比較を行う。
+
+
+## 戻り値
+`lhs`と`rhs`の次元数が等しく、かつ全事前の要素数が等しいときに`true`を返す。そうでなければ`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  Ext3x4 ext1;
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  Ext3xN ext2{4};
+
+  assert(ext1 == ext2);
+}
+```
+* ==[color ff0000]
+* std::extents[link ../extents.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rank -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/rank.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/rank.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/rank.md b/reference/mdspan/extents/rank.md
new file mode 100644
index 000000000..fc1e9e5ad
--- /dev/null
+++ b/reference/mdspan/extents/rank.md
@@ -0,0 +1,65 @@
+# rank
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+static constexpr rank_type rank() noexcept;
+```
+
+## 概要
+多次元配列サイズの次元数を取得する。
+
+
+## 戻り値
+`sizeof...(Extents)`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  static_assert(Ext3x4::rank() == 2);
+  static_assert(Ext3x4::rank_dynamic() == 0);
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  static_assert(Ext3xN::rank() == 2);
+  static_assert(Ext3xN::rank_dynamic() == 1);
+}
+```
+* rank()[color ff0000]
+* rank_dynamic()[link rank_dynamic.md]
+* std::extents[link ../extents.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`rank_dynamic`](rank_dynamic.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rank_dynamic -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/rank_dynamic.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/rank_dynamic.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/rank_dynamic.md b/reference/mdspan/extents/rank_dynamic.md
new file mode 100644
index 000000000..a5b2fdcda
--- /dev/null
+++ b/reference/mdspan/extents/rank_dynamic.md
@@ -0,0 +1,65 @@
+# rank_dynamic
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+static constexpr rank_type rank_dynamic() noexcept;
+```
+
+## 概要
+多次元配列サイズの次元数うち、動的要素数に指定された次元数を取得する。
+
+
+## 戻り値
+動的要素数に指定された次元数
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  static_assert(Ext3x4::rank() == 2);
+  static_assert(Ext3x4::rank_dynamic() == 0);
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  static_assert(Ext3xN::rank() == 2);
+  static_assert(Ext3xN::rank_dynamic() == 1);
+}
+```
+* rank_dynamic()[color ff0000]
+* rank()[link rank.md]
+* std::extents[link ../extents.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`rank`](rank.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_extent -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/static_extent.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/static_extent.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/static_extent.md b/reference/mdspan/extents/static_extent.md
new file mode 100644
index 000000000..40dcde801
--- /dev/null
+++ b/reference/mdspan/extents/static_extent.md
@@ -0,0 +1,76 @@
+# static_extent
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+static constexpr size_t static_extent(rank_type i) noexcept;
+```
+
+## 概要
+多次元配列サイズのうち`i`番目次元の静的要素数を取得する。
+
+
+## 事前条件
+`i &amp;lt;` [`rank()`](rank.md)が`true`
+
+
+## 戻り値
+`i`番目次元の静的要素数。同次元が動的要素数の場合は[`std::dynamic_extent`](/reference/span/dynamic_extent.md)を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  static_assert(Ext3x4::static_extent(0) == 3);
+  static_assert(Ext3x4::static_extent(1) == 4);
+  Ext3x4 ext1;
+  assert(ext1.extent(0) == 3);
+  assert(ext1.extent(1) == 4);
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  static_assert(Ext3xN::static_extent(0) == 3);
+  static_assert(Ext3xN::static_extent(1) == std::dynamic_extent);
+  Ext3xN ext2{10};
+  assert(ext2.extent(0) == 3);
+  assert(ext2.extent(1) == 10);
+}
+```
+* static_extent()[color ff0000]
+* extent()[link extent.md]
+* std::extents[link ../extents.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`extent`](extent.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/layout_left.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left.md b/reference/mdspan/layout_left.md
index 39a9078ad..2c01a5492 100644
--- a/reference/mdspan/layout_left.md
+++ b/reference/mdspan/layout_left.md
@@ -38,8 +38,8 @@ int main()
   double arr[] = {1, 4, 2, 5, 3, 6};
 
   // 要素数2x3の2次元配列／列優先レイアウト
-  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
-  std::mdspan&amp;lt;double, Dim2x3, std::layout_left&amp;gt; mat{arr};
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  std::mdspan&amp;lt;double, Ext2x3, std::layout_left&amp;gt; mat{arr};
 
   for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
     for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/layout_right.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right.md b/reference/mdspan/layout_right.md
index a01e392bf..67c72013b 100644
--- a/reference/mdspan/layout_right.md
+++ b/reference/mdspan/layout_right.md
@@ -38,8 +38,8 @@ int main()
   double arr[] = {1, 2, 3, 4, 5, 6};
 
   // 要素数2x3の2次元配列／行優先レイアウト
-  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
-  std::mdspan&amp;lt;double, Dim2x3, std::layout_right&amp;gt; mat{arr};
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  std::mdspan&amp;lt;double, Ext2x3, std::layout_right&amp;gt; mat{arr};
 
   for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
     for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
index d83612403..773767c47 100644
--- a/reference/mdspan/layout_stride.md
+++ b/reference/mdspan/layout_stride.md
@@ -37,10 +37,10 @@ int main()
   double arr[] = {1, 2, 3, 0, 4, 5, 6, 0};
 
   // 要素数2x3の2次元配列／行優先かつパディングありレイアウト
-  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
   std::array&amp;lt;int, 2&amp;gt; strides{4, 1};
-  std::layout_stride::mapping&amp;lt;Dim2x3&amp;gt; mapping{{}, strides};
-  std::mdspan&amp;lt;double, Dim2x3, std::layout_stride&amp;gt; mat{arr, mapping};
+  std::layout_stride::mapping&amp;lt;Ext2x3&amp;gt; mapping{{}, strides};
+  std::mdspan&amp;lt;double, Ext2x3, std::layout_stride&amp;gt; mat{arr, mapping};
 
   for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
     for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_left.html&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(Fortran/Matlabスタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_right.html&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(C/C++スタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_stride.html&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;汎用ストライド配置レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_accessor -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/default_accessor.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/default_accessor.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/default_accessor.md b/reference/mdspan/default_accessor.md
index fd0a6d58f..9af53cfc5 100644
--- a/reference/mdspan/default_accessor.md
+++ b/reference/mdspan/default_accessor.md
@@ -43,6 +43,12 @@ namespace std {
 ### 言語
 - C++23
 
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
 
 ## 関連項目
 - [`mdspan`](mdspan.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extents -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/extents.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents.md b/reference/mdspan/extents.md
index 4e42d1044..776ae8633 100644
--- a/reference/mdspan/extents.md
+++ b/reference/mdspan/extents.md
@@ -85,7 +85,7 @@ int main()
   Ext2D ext2d{4, 2};
 
   // 2個の動的次元(高さ,幅)と固定次元(RGBA;4)からなる3次元配列サイズ
-  using ColorImageExt = std::dextents&amp;lt;size_t, std::dynamic_extent, std::dynamic_extent, 4&amp;gt;;
+  using ColorImageExt = std::extents&amp;lt;size_t, std::dynamic_extent, std::dynamic_extent, 4&amp;gt;;
   ColorImageExt image_ext{128, 128};
 }
 ```
@@ -102,6 +102,12 @@ int main()
 ### 言語
 - C++23
 
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
 
 ## 関連項目
 - [`mdspan`](mdspan.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/layout_left.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left.md b/reference/mdspan/layout_left.md
new file mode 100644
index 000000000..39a9078ad
--- /dev/null
+++ b/reference/mdspan/layout_left.md
@@ -0,0 +1,80 @@
+# layout_left
+* mdspan[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct layout_left {
+    template&amp;lt;class Extents&amp;gt;
+    class mapping;
+  };
+}
+```
+* Extents[link extents.md]
+* mapping[link mapping.md.nolink]
+
+## 概要
+`layout_left`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、FortranやMatlab多次元配列と互換性のある列優先(column major)レイアウトマッピングを表現するポリシークラスである。
+
+ポリシークラス名の由来は、多次元配列インデクスのうち最左次元が隣接配置（ストライド=1）されるところから来ている。
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`mapping`](mapping.md.nolink) | レイアウトマッピング | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 4, 2, 5, 3, 6};
+
+  // 要素数2x3の2次元配列／列優先レイアウト
+  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  std::mdspan&amp;lt;double, Dim2x3, std::layout_left&amp;gt; mat{arr};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::cout &amp;lt;&amp;lt; (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;) &amp;lt;&amp;lt; mat[i, j];
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* std::layout_left[color ff0000]
+* std::mdspan[link mdspan.md]
+* std::extents[link extents.md]
+
+### 出力
+```
+1 2 3
+4 5 6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_right`](layout_right.md)
+- [`layout_stride`](layout_stride.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/layout_right.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right.md b/reference/mdspan/layout_right.md
new file mode 100644
index 000000000..a01e392bf
--- /dev/null
+++ b/reference/mdspan/layout_right.md
@@ -0,0 +1,80 @@
+# layout_right
+* mdspan[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct layout_right {
+    template&amp;lt;class Extents&amp;gt;
+    class mapping;
+  };
+}
+```
+* Extents[link extents.md]
+* mapping[link mapping.md.nolink]
+
+## 概要
+`layout_right`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、C/C++多次元配列と互換性のある行優先(row major)レイアウトマッピングを表現するポリシークラスである。
+
+ポリシークラス名の由来は、多次元配列インデクスのうち最右次元が隣接配置（ストライド=1）されるところから来ている。
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`mapping`](mapping.md.nolink) | レイアウトマッピング | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 3, 4, 5, 6};
+
+  // 要素数2x3の2次元配列／行優先レイアウト
+  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  std::mdspan&amp;lt;double, Dim2x3, std::layout_right&amp;gt; mat{arr};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::cout &amp;lt;&amp;lt; (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;) &amp;lt;&amp;lt; mat[i, j];
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* std::layout_right[color ff0000]
+* std::mdspan[link mdspan.md]
+* std::extents[link extents.md]
+
+### 出力
+```
+1 2 3
+4 5 6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_left`](layout_left.md)
+- [`layout_stride`](layout_stride.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
new file mode 100644
index 000000000..d83612403
--- /dev/null
+++ b/reference/mdspan/layout_stride.md
@@ -0,0 +1,81 @@
+# layout_stride
+* mdspan[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct layout_stride {
+    template&amp;lt;class Extents&amp;gt;
+    class mapping;
+  };
+}
+```
+* Extents[link extents.md]
+* mapping[link mapping.md.nolink]
+
+## 概要
+`layout_right`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定したレイアウトマッピングを表現するポリシークラスである。
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`mapping`](mapping.md.nolink) | レイアウトマッピング | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 3, 0, 4, 5, 6, 0};
+
+  // 要素数2x3の2次元配列／行優先かつパディングありレイアウト
+  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  std::array&amp;lt;int, 2&amp;gt; strides{4, 1};
+  std::layout_stride::mapping&amp;lt;Dim2x3&amp;gt; mapping{{}, strides};
+  std::mdspan&amp;lt;double, Dim2x3, std::layout_stride&amp;gt; mat{arr, mapping};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::cout &amp;lt;&amp;lt; (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;) &amp;lt;&amp;lt; mat[i, j];
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* std::layout_stride[color ff0000]
+* std::mdspan[link mdspan.md]
+* std::extents[link extents.md]
+
+### 出力
+```
+1 2 3
+4 5 6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_left`](layout_left.md)
+- [`layout_right`](layout_right.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/mdspan.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
index 96090e5f6..dc612051b 100644
--- a/reference/mdspan/mdspan.md
+++ b/reference/mdspan/mdspan.md
@@ -13,7 +13,7 @@ namespace std {
   class mdspan;
 }
 ```
-* layout_right[link layout_right.md.nolink]
+* layout_right[link layout_right.md]
 * default_accessor[link default_accessor.md]
 
 ## 概要
@@ -150,10 +150,17 @@ int main()
 4 5 6 
 ```
 
+
 ## バージョン
 ### 言語
 - C++23
 
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
 
 ## 関連項目
 - [`extents`](extents.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan/default_accessor: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>40ff58769d30e3b1b7b8d3fad48dfe98fb92dd7f:reference/mdspan.md</id>
      <updated>2024-01-08T00:18:00+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_left.md.nolink&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最左次元が隣接するレイアウトマッピング (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_right.md.nolink&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最右次元が隣接するレイアウトマッピング (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_stride.md.nolink&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;汎用ストライド配置レイアウトマッピング (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_accessor -- mdspan/default_accessor: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/default_accessor.html"/>
      <id>40ff58769d30e3b1b7b8d3fad48dfe98fb92dd7f:reference/mdspan/default_accessor.md</id>
      <updated>2024-01-08T00:18:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/default_accessor.md b/reference/mdspan/default_accessor.md
new file mode 100644
index 000000000..fd0a6d58f
--- /dev/null
+++ b/reference/mdspan/default_accessor.md
@@ -0,0 +1,53 @@
+# default_accessor
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class ElementType&amp;gt;
+  class default_accessor;
+}
+```
+
+## 概要
+`default_accessor`は、多次元配列ビュー[`mdspan`](mdspan.md)の要素アクセスデフォルト動作を定義する。
+
+`ElementType`は抽象クラス型もしくは配列型のいずれでもない完全型であること。
+
+`default_accessor`はアクセサポリシー要件を満たす。
+また`default_accessor`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`semiregular`](/reference/concepts/semiregular.md)のモデルである。
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](default_accessor/op_constructor.md.nolink) | コンストラクタ | C++23 |
+| `(destructor)` | デストラクタ | C++23 |
+| [`access`](default_accessor/access.md.nolink) | 指定オフセット位置にある要素へアクセスする | C++23 |
+| [`offset`](default_accessor/offset.md.nolink) | 指定オフセット位置のハンドルを取得する | C++23 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `offset_policy`    | `default_accessor` | C++23 |
+| `element_type`     | `ElementType`  | C++23 |
+| `reference`        | `ElementType&amp;amp;` | C++23 |
+| `data_handle_type` | `ElementType*` | C++23 |
+
+
+## バージョン
+### 言語
+- C++23
+
+
+## 関連項目
+- [`mdspan`](mdspan.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [Reddit - Why is mdspan::offset_policy needed?](https://www.reddit.com/r/cpp/comments/cgc37m/why_is_mdspanoffset_policy_needed/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan/default_accessor: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>40ff58769d30e3b1b7b8d3fad48dfe98fb92dd7f:reference/mdspan/mdspan.md</id>
      <updated>2024-01-08T00:18:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
index 20a2d6117..96090e5f6 100644
--- a/reference/mdspan/mdspan.md
+++ b/reference/mdspan/mdspan.md
@@ -14,7 +14,7 @@ namespace std {
 }
 ```
 * layout_right[link layout_right.md.nolink]
-* default_accessor[link default_accessor.md.nolink]
+* default_accessor[link default_accessor.md]
 
 ## 概要
 `mdspan`は、任意のメモリブロックに対して多次元配列のようにアクセスする機能を提供するクラスである。
@@ -23,7 +23,7 @@ namespace std {
 
 - [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;MDS&amp;gt;`が`true`、かつ
 - [`is_nothrow_move_assignable_v`](/reference/type_traits/is_nothrow_move_assignable.md)`&amp;lt;MDS&amp;gt;`が`true`、かつ
-- [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;MDS&amp;gt;`が1`true`となる。
+- [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;MDS&amp;gt;`が`true`となる。
 
 そのメンバ型`accessor_type`, `mapping_type`, `pointer`が[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であるとき、`mdspan`の特殊化もトリビアルコピー可能である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan/mdspan: remove forbidden chars(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>3fa663860d835f09630b8cb9e457cb1735dde420:reference/mdspan/mdspan.md</id>
      <updated>2024-01-07T21:20:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
index 2de902515..20a2d6117 100644
--- a/reference/mdspan/mdspan.md
+++ b/reference/mdspan/mdspan.md
@@ -38,7 +38,7 @@ namespace std {
 ## 適格要件
 - `ElementType`は抽象クラス型もしくは配列型のいずれでもない完全型であり、かつ
 - `Extents`は[`extents`](extents.md)の特殊化であり、かつ
-- [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;ElementType, typename AccessorPolicy​::​element_type&amp;gt;`が`true`であること。
+- [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;ElementType, typename AccessorPolicy::element_type&amp;gt;`が`true`であること。
 
 `LayoutPolicy`はレイアウトマッピングポリシー要件を満たし、かつ`AccessorPolicy`はアクセサポリシー要件を満たすこと。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++26 -- mdspan/mdspan: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/lang/cpp26.html"/>
      <id>c7ab0726f09331e2c2ca7772477bd68030720a30:lang/cpp26.md</id>
      <updated>2024-01-07T21:12:10+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++26&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++26とは、2026年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2cと呼ばれることがある。「(2020年代の3つ目のバージョンが) 202c年にリリースされる」という伏せ字として「c」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/static_storage_for_braced_initializers.md.nolink&#34;&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;の配列を静的ストレージに配置する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::vector v = {1, 2, 3};&lt;/code&gt;のような初期化で初期化子リストを静的ストレージに配置することで無駄なコピーをなくす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/nice_placeholder_with_no_name.md.nolink&#34;&gt;宣言のみで使用しない変数の名前として&lt;code&gt;_&lt;/code&gt;をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数名&lt;code&gt;_&lt;/code&gt;は暗黙で&lt;code&gt;[[maybe_unused]]&lt;/code&gt;が指定される&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/making_non-encodable_string_literals_ill-formed.md.nolink&#34;&gt;文字列リテラルの文字エンコーディング失敗を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルのエンコーディング時に文字表現が失われる場合にコンパイルエラーにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/unevaluated_strings.md.nolink&#34;&gt;コンパイル時にのみ使用される文字列の扱いを明確化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などで使用されるコンパイル時の文字列について、文字コードの指定を禁止し、実行時エンコーディングが行われないことを規定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/on_the_ignorability_of_standard_attributes.md.nolink&#34;&gt;属性の無視性を見直し&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構文として適格な属性のみを無視できるようにし、そうでない属性の使用を&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;とする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/constexpr_cast_from_voidptr.md.nolink&#34;&gt;定数式での&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型消去のために&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/user-generated_static_assert_messages.md.nolink&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt;の診断メッセージにユーザーが生成した文字列の指定を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;な&lt;code&gt;S.size()&lt;/code&gt;と&lt;code&gt;S.data()&lt;/code&gt;メンバ関数をもつオブジェクトをコンパイル時文字列として指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ソースコード&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/add_atsign_dollar_graveaccent_to_the_basic_character_set.md.nolink&#34;&gt;基本文字集合に@、$、`を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C言語との互換性のためにこれらの文字を基本文字集合に追加&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文字列エンコーディングを識別するライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/text_encoding.md.nolink&#34;&gt;&amp;lt;text_encoding&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;並行処理におけるデータの参照・更新を行うRCU (Read Copy Update) のライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/rcu.md.nolink&#34;&gt;&amp;lt;rcu&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;並行処理において参照中のデータが更新されないよう保護するハザードポインタのライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/hazard_pointer.md.nolink&#34;&gt;&amp;lt;hazard_pointer&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;std::mdspan&lt;/a&gt;&lt;/code&gt;のサブ配列版として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/submdspan.md.nolink&#34;&gt;std::submdspan&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;連想コンテナの以下のメンバ関数に、一時オブジェクトが生成されるコストを抑える拡張を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/op_at.html&#34;&gt;operator[]&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/try_emplace.html&#34;&gt;try_emplace()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/insert_or_assign.html&#34;&gt;insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_at.html&#34;&gt;operator[]&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/try_emplace.html&#34;&gt;try_emplace()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert_or_assign.html&#34;&gt;insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set.html&#34;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html&#34;&gt;insert()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下のアルゴリズムを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/stable_sort.html&#34;&gt;std::stable_sort()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_stable_sort.html&#34;&gt;std::ranges::stable_sort()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/stable_partition.html&#34;&gt;std::stable_partition()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_stable_partition.html&#34;&gt;std::ranges::stable_partition()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/inplace_merge.html&#34;&gt;std::inplace_merge()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_inplace_merge.html&#34;&gt;std::ranges::stable_partition()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rangeアルゴリズムが完全型を要求しないようにするため、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/projected.html&#34;&gt;std::projected&lt;/a&gt;&lt;/code&gt;の制約を緩和&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有権を保持しない&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function_ref.html&#34;&gt;std::function_ref&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/move_only_function.html&#34;&gt;std::move_only_function&lt;/a&gt;&lt;/code&gt;のコピー可能版として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/copyable_function.html&#34;&gt;std::copyable_function&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_back.md.nolink&#34;&gt;std::bind_back()&lt;/a&gt;&lt;/code&gt;に、非型テンプレート引数として関数を指定するオーバーロードを追加&lt;ul&gt;
&lt;li&gt;関連して、非型テンプレート引数の関数オブジェクトを反転させられるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.html&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;に非型テンプレート引数版のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;の変換結果&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/to_chars_result.html&#34;&gt;std::to_chars_result&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/from_chars_result.html&#34;&gt;std::from_chars_result&lt;/a&gt;&lt;/code&gt;に、変換が正しく完了したかを判定する&lt;code&gt;operator bool&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/to_string.html&#34;&gt;std::to_string()&lt;/a&gt;&lt;/code&gt;の仕様が&lt;code&gt;std::sprintf()&lt;/code&gt;で説明されていたが、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;で定義するよう仕様を変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/sstream/basic_istringstream.html&#34;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/sstream/basic_ostringstream.html&#34;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;のコンストラクタおよび&lt;code&gt;str()&lt;/code&gt;メンバ関数に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;を受け取るオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;に、ポインタ出力のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;で幅と精度を動的に指定した場合でも型の検証がコンパイル時に行われるよう仕様を見直し&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファイル&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ファイルのネイティブハンドルを取得できるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_filebuf.html&#34;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_ifstream.html&#34;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_ofstream.html&#34;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_fstream.html&#34;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt;クラスに、以下のメンバを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;native_handle_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;native_handle()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行・並列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;オブジェクトに対する2つの値の最大値・最小値を取得する関数として、メンバ関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/fetch_max.md.nolink&#34;&gt;fetch_max()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/fetch_min.md.nolink&#34;&gt;fetch_min()&lt;/a&gt;&lt;/code&gt;、非メンバ関数として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_max.md.nolink&#34;&gt;std::atomic_fetch_max&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_max_explicit.md.nolink&#34;&gt;std::atomic_fetch_max_explicit&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_min.md.nolink&#34;&gt;std::atomic_fetch_min&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_min_explicit.md.nolink&#34;&gt;std::atomic_fetch_min_explicit&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;を非順序連想コンテナのキーとして使用できるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に所有権ベースのハッシュ値を取得する関数オブジェクト&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_hash.md.nolink&#34;&gt;std::owner_hash&lt;/a&gt;&lt;/code&gt;、および所有権ベースの等値比較を行う関数オブジェクト&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_equal.md.nolink&#34;&gt;std::owner_equal&lt;/a&gt;&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;関連して、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;クラスのメンバ関数として、&lt;code&gt;owner_hash()&lt;/code&gt;と&lt;code&gt;owner_equal()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;日付・時間&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下のクラスに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;std::hash&lt;/a&gt;&lt;/code&gt;のサポートを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/day.html&#34;&gt;std::chrono::day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month.html&#34;&gt;std::chrono::month&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year.html&#34;&gt;std::chrono::year&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday.html&#34;&gt;std::chrono::weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_indexed.html&#34;&gt;std::chrono::weekday_indexed&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_last.html&#34;&gt;std::chrono::weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_day.html&#34;&gt;std::chrono::month_day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_day_last.html&#34;&gt;std::chrono::month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_weekday.html&#34;&gt;std::chrono::month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_weekday_last.html&#34;&gt;std::chrono::month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month.html&#34;&gt;std::chrono::year_month&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_day.html&#34;&gt;std::chrono::year_month_day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_day_last.html&#34;&gt;std::chrono::year_month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_weekday.html&#34;&gt;std::chrono::year_month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_weekday_last.html&#34;&gt;std::chrono::year_month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/zoned_time.html&#34;&gt;std::chrono::zoned_time&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/leap_second.html&#34;&gt;std::chrono::leap_second&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の関数を、&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cos.html&#34;&gt;std::cos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sin.html&#34;&gt;std::sin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tan.html&#34;&gt;std::tan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cosh.html&#34;&gt;std::cosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sinh.html&#34;&gt;std::sinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tanh.html&#34;&gt;std::tanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/acos.html&#34;&gt;std::acos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/asin.html&#34;&gt;std::asin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan.html&#34;&gt;std::atan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan2.html&#34;&gt;std::atan2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/acosh.html&#34;&gt;std::acosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/asinh.html&#34;&gt;std::asinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atanh.html&#34;&gt;std::atanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/exp.html&#34;&gt;std::exp()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/exp2.html&#34;&gt;std::exp2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/expm1.html&#34;&gt;std::expm1()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log.html&#34;&gt;std::log()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log10.html&#34;&gt;std::log10()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log1p.html&#34;&gt;std::log1p()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log2.html&#34;&gt;std::log2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/pow.html&#34;&gt;std::pow()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sqrt.html&#34;&gt;std::sqrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cbrt.html&#34;&gt;std::cbrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/hypot.html&#34;&gt;std::hypot()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/erf.html&#34;&gt;std::erf()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/erfc.html&#34;&gt;std::erfc()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/lgamma.html&#34;&gt;std::lgamma()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tgamma.html&#34;&gt;std::tgamma()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の関数を、&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/abs.html&#34;&gt;std::abs()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/arg.html&#34;&gt;std::arg()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/proj.html&#34;&gt;std::proj()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/polar.html&#34;&gt;std::polar()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/cos.html&#34;&gt;std::cos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sin.html&#34;&gt;std::sin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/tan.html&#34;&gt;std::tan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/cosh.html&#34;&gt;std::cosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sinh.html&#34;&gt;std::sinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/tanh.html&#34;&gt;std::tanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/acos.html&#34;&gt;std::acos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/asin.html&#34;&gt;std::asin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/atan.html&#34;&gt;std::atan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/acosh.html&#34;&gt;std::acosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/asinh.html&#34;&gt;std::asinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/atanh.html&#34;&gt;std::atanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/exp.html&#34;&gt;std::exp()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/log.html&#34;&gt;std::log()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/log10.html&#34;&gt;std::log10()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/pow.html&#34;&gt;std::pow()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sqrt.html&#34;&gt;std::sqrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;クラスに、メンバ関数版の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant/visit.md.nolink&#34;&gt;visit()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;に、新たなSI接頭辞として、以下を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;ronna&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;27&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;ronto&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;−27&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;quetta&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;30&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;quecto&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;−30&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;共用体のどのメンバがアクティブかを判定するための関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_within_lifetime.md.nolink&#34;&gt;std::is_within_lifetime()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bitset/bitset.html&#34;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;を受け取るコンストラクタを追加&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan/mdspan: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>c7ab0726f09331e2c2ca7772477bd68030720a30:reference/mdspan.md</id>
      <updated>2024-01-07T21:12:10+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_left.md.nolink&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最左次元が隣接するレイアウトマッピング (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_right.md.nolink&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最右次元が隣接するレイアウトマッピング (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_stride.md.nolink&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;汎用ストライド配置レイアウトマッピング (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/default_accessor.md.nolink&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extents -- mdspan/mdspan: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents.html"/>
      <id>c7ab0726f09331e2c2ca7772477bd68030720a30:reference/mdspan/extents.md</id>
      <updated>2024-01-07T21:12:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents.md b/reference/mdspan/extents.md
index 1403114f2..4e42d1044 100644
--- a/reference/mdspan/extents.md
+++ b/reference/mdspan/extents.md
@@ -17,7 +17,7 @@ namespace std {
 
 ## 概要
 `extents`は、多次元配列の次元数、各次元の要素数、要素数が静的（コンパイル時）または動的（プログラム実行時）いずれのタイミングで指定されるかを表現する。
-多次元配列ビュー[`std::mdspan`](mdspan.md.nolink)に対して、多次元配列のサイズを指示するために用いられる。
+多次元配列ビュー[`std::mdspan`](mdspan.md)に対して、多次元配列のサイズを指示するために用いられる。
 
 - 多次元配列の次元数は`sizeof...(Extents)`に等しい
 - `Extents`要素のうち[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しい次元は、動的要素数(dynamic extent)となる
@@ -104,9 +104,9 @@ int main()
 
 
 ## 関連項目
-- [`mdspan`](mdspan.md.nolink)
+- [`mdspan`](mdspan.md)
 
 
 ## 参照
 - [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
-- [P2599R2 index_type &amp;amp; size_type in mdspan](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2599r2.pdf)
+- [P2599R2 `index_type` &amp;amp; `size_type` in `mdspan`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2599r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan/mdspan: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>c7ab0726f09331e2c2ca7772477bd68030720a30:reference/mdspan/mdspan.md</id>
      <updated>2024-01-07T21:12:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
new file mode 100644
index 000000000..2de902515
--- /dev/null
+++ b/reference/mdspan/mdspan.md
@@ -0,0 +1,166 @@
+# mdspan
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class ElementType,
+           class Extents,
+           class LayoutPolicy = layout_right,
+           class AccessorPolicy = default_accessor&amp;lt;ElementType&amp;gt;&amp;gt;
+  class mdspan;
+}
+```
+* layout_right[link layout_right.md.nolink]
+* default_accessor[link default_accessor.md.nolink]
+
+## 概要
+`mdspan`は、任意のメモリブロックに対して多次元配列のようにアクセスする機能を提供するクラスである。
+
+`mdspan`の特殊化`MDS`は[`copyable`](/reference/concepts/copyable.md)のモデルであり、かつ
+
+- [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;MDS&amp;gt;`が`true`、かつ
+- [`is_nothrow_move_assignable_v`](/reference/type_traits/is_nothrow_move_assignable.md)`&amp;lt;MDS&amp;gt;`が`true`、かつ
+- [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;MDS&amp;gt;`が1`true`となる。
+
+そのメンバ型`accessor_type`, `mapping_type`, `pointer`が[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であるとき、`mdspan`の特殊化もトリビアルコピー可能である。
+
+### 説明専用メンバ変数
+`mdspan`クラスは、下記の説明専用メンバ変数を保持する。
+
+- `acc_` : `accessor_type`型の要素アクセサ
+- `map_` : `mapping_type`型のレイアウトマッピング
+- `ptr_` : `data_handle_type`型のメモリブロックへのハンドル
+
+
+## 適格要件
+- `ElementType`は抽象クラス型もしくは配列型のいずれでもない完全型であり、かつ
+- `Extents`は[`extents`](extents.md)の特殊化であり、かつ
+- [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;ElementType, typename AccessorPolicy​::​element_type&amp;gt;`が`true`であること。
+
+`LayoutPolicy`はレイアウトマッピングポリシー要件を満たし、かつ`AccessorPolicy`はアクセサポリシー要件を満たすこと。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](mdspan/op_constructor.md.nolink) | コンストラクタ | C++23 |
+| `(destructor)` | デストラクタ | C++23 |
+| [`operator=`](mdspan/op_assing.md.nolink) | 代入演算子 | C++23 |
+
+### 要素へのアクセス
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator[]`](mdspan/op_at.md.nolink) | 多次元配列の要素アクセス | C++23 |
+
+### 多次元配列サイズ
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`rank`](mdspan/rank.md.nolink) | 多次元配列の次元数を取得する | C++23 |
+| [`rank_dynamic`](mdspan/rank_dynamic.md.nolink) | 多次元配列のうち動的要素数に指定された次元数を取得する | C++23 |
+| [`static_extent`](mdspan/static_extent.md.nolink) | 指定次元の静的要素数を取得する | C++23 |
+| [`extent`](mdspan/extent.md.nolink) | 指定次元の要素数を取得する | C++23 |
+
+### 多次元インデクス空間
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`size`](mdspan/size.md.nolink) | メモリブロックに対する最大アクセス範囲を取得 | C++23 |
+| [`empty`](mdspan/empty.md.nolink) | 最大アクセス範囲がサイズ0か否かを取得 | C++23 |
+
+### メンバ変数アクセサ
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`extents`](mdspan/extents.md.nolink) | 多次元配列のサイズ`map_.extents()`を取得 | C++23 |
+| [`data_handle`](mdspan/data_handle.md.nolink) | メモリブロックへのハンドル`ptr_`を取得 | C++23 |
+| [`mapping`](mdspan/mapping.md.nolink) | レイアウトマッピング`map_`を取得 | C++23 |
+| [`accessor`](mdspan/accessor.md.nolink) | 要素アクセサ`acc_`を取得 | C++23 |
+
+### レイアウトマッピング
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `is_always_unique()`     | `mapping_type::is_always_unique()`     | C++23 |
+| `is_always_exhaustive()` | `mapping_type::is_always_exhaustive()` | C++23 |
+| `is_always_strided()`    | `mapping_type::is_always_strided()`    | C++23 |
+| `is_unique()`     | `map_.is_unique()`     | C++23 |
+| `is_exhaustive()` | `map_.is_exhaustive()` | C++23 |
+| `is_strided()`    | `map_.is_strided()`    | C++23 |
+| `stride(rank_type r)` | `map_.stride(r)`   | C++23 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents_type`  | 多次元配列サイズ型[`Extents`](extents.md) | C++23 |
+| `layout_type`   | レイアウトポリシー型`LayoutPolicy` | C++23 |
+| `accessor_type` | アクセサポリシー型`AccessorPolicy` | C++23 |
+| `mapping_type` | レイアウトマッピング型`typename layout_type::template mapping&amp;lt;extents_type&amp;gt;` | C++23 |
+| `element_type` | 多次元配列の要素型`ElementType` | C++23 |
+| `value_type`   | 要素の値型[`remove_cv_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;element_type&amp;gt;` | C++23 |
+| `size_type` | `typename extents_type::size_type` | C++23 |
+| `rank_type` | `typename extents_type::rank_type` | C++23 |
+| `pointer`   | `typename accessor_type::pointer` | C++23 |
+| `reference` | ` typename accessor_type::reference` | C++23 |
+
+
+## 非メンバ（*Hidden friends*）関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `swap` | 2つのオブジェクトを入れ替える | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main()
+{
+  // メモリブロックに対する2次元配列/2x3要ビューを作成
+  double arr[] = {1, 2, 3, 4, 5, 6};
+  using Mat2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  std::mdspan&amp;lt;double, Mat2x3&amp;gt; mat{arr};
+
+  // 2次元配列の各要素を表示
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::print(&amp;#34;{} &amp;#34;, mat[i, j]);
+    }
+    std::println(&amp;#34;&amp;#34;);
+  }
+}
+```
+* std::mdspan[color ff0000]
+* std::extents[link extents.md]
+* extent[link mdspan/extent.md.nolink]
+
+### 出力
+```
+1 2 3 
+4 5 6 
+```
+
+## バージョン
+### 言語
+- C++23
+
+
+## 関連項目
+- [`extents`](extents.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [P2599R2 `index_type` &amp;amp; `size_type` in `mdspan`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2599r2.pdf)
+- [P2604R0 `mdspan`: rename `pointer` and `contiguous`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2604r0.html)
+- [P2613R1 Add the missing `empty` to `mdspan`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2613r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>span -- mdspan/mdspan: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/span.html"/>
      <id>c7ab0726f09331e2c2ca7772477bd68030720a30:reference/span.md</id>
      <updated>2024-01-07T21:12:10+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;span&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;ヘッダでは、所有権を持たず任意のシーケンスの部分シーケンスを参照する機能を定義する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span/dynamic_extent.html&#34;&gt;dynamic_extent&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;動的な要素数を表す値 (variable)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span/span.html&#34;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所有権を持たず部分シーケンスを参照する (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++11 &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view.html&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++23 &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan.html&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
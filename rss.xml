<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-05-18T06:43:47.778440</updated>
  <id>245fd719-6c99-4960-ae8d-bff532640e8e</id>

  
    <entry>
      <title>find -- flat_map::find : 言語バージョンと処理系の欄を追加</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/find.html"/>
      <id>fb3b50d2c8403fb9fa47e9941441f8fe686094a2:reference/flat_map/flat_map/find.md</id>
      <updated>2023-05-18T15:38:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/find.md b/reference/flat_map/flat_map/find.md
index 659806a29..6541baebb 100644
--- a/reference/flat_map/flat_map/find.md
+++ b/reference/flat_map/flat_map/find.md
@@ -92,6 +92,17 @@ int main()
 1
 ```
 
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
 ## 関連項目
 - [`contains()`](contains.md.nolink)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : sizeを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>c5c7b5ad8893c03a788f1f80a0ecd5e1480d12d0:reference/flat_map/flat_map.md</id>
      <updated>2023-05-18T15:37:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index 66257675a..1c2bff8c6 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -49,7 +49,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |---------------------------------|------------------------------------|-------|
 | [`empty`](flat_map/empty.md.nolink)       | コンテナが空であるかどうかを調べる | C++23 |
-| [`size`](flat_map/size.md.nolink)         | 要素数を取得する                   | C++23 |
+| [`size`](flat_map/size.md)         | 要素数を取得する                   | C++23 |
 | [`max_size`](flat_map/max_size.md.nolink) | 格納可能な最大の要素数を取得する   | C++23 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- flat_map : sizeを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/find.html"/>
      <id>c5c7b5ad8893c03a788f1f80a0ecd5e1480d12d0:reference/flat_map/flat_map/find.md</id>
      <updated>2023-05-18T15:37:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/find.md b/reference/flat_map/flat_map/find.md
index 81be7eaa7..659806a29 100644
--- a/reference/flat_map/flat_map/find.md
+++ b/reference/flat_map/flat_map/find.md
@@ -34,7 +34,7 @@ const_iterator find(const K&amp;amp; x) const;        // (4) C++23
 
 
 ## 計算量
-[`size`](size.md.nolink) について対数時間。
+[`size`](size.md) について対数時間。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- flat_map : sizeを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/size.html"/>
      <id>c5c7b5ad8893c03a788f1f80a0ecd5e1480d12d0:reference/flat_map/flat_map/size.md</id>
      <updated>2023-05-18T15:37:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/size.md b/reference/flat_map/flat_map/size.md
new file mode 100644
index 000000000..eee272795
--- /dev/null
+++ b/reference/flat_map/flat_map/size.md
@@ -0,0 +1,65 @@
+# size
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+size_type size() const noexcept;
+```
+
+## 概要
+コンテナ内の要素の数を返す。
+
+
+## 戻り値
+コンテナに格納されている要素の数を返す。 
+メンバ型 `size_type` は符号なし整数型である。
+
+
+## 計算量
+定数時間
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main ()
+{
+  std::flat_map&amp;lt;int, char&amp;gt; fm;
+
+  std::cout &amp;lt;&amp;lt; fm.size() &amp;lt;&amp;lt; std::endl;
+
+  fm.insert({1, &amp;#39;a&amp;#39;});
+  fm.insert({2, &amp;#39;b&amp;#39;});
+  fm.insert({3, &amp;#39;c&amp;#39;});
+  fm.insert({1, &amp;#39;a&amp;#39;});
+
+  std::cout &amp;lt;&amp;lt; fm.size() &amp;lt;&amp;lt; std::endl;
+}
+```
+* size()[color ff0000]
+* fm.insert[link insert.md.nolink]
+
+### 出力
+```
+0
+3
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`empty()`](empty.md.nolink)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : findを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>a43bd165f7c77b915000e79e11396d825ec7b0bd:reference/flat_map/flat_map.md</id>
      <updated>2023-05-18T15:28:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index ce2f36f48..66257675a 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -77,7 +77,7 @@ namespace std {
 | [`operator[]`](flat_map/op_at.md)        | 指定したキーを持つ要素を取得する           | C++23 |
 | [`at`](flat_map/at.md)                   | 指定したキーを持つ要素を取得する           | C++23 |
 | [`count`](flat_map/count.md.nolink)             | 指定したキーにマッチする要素の数を取得する | C++23 |
-| [`find`](flat_map/find.md.nolink)               | 指定したキーで要素を探す                   | C++23 |
+| [`find`](flat_map/find.md)               | 指定したキーで要素を探す                   | C++23 |
 | [`contains`](flat_map/contains.md.nolink)       | 指定したキーの要素が含まれているかを判定する | C++23 |
 | [`equal_range`](flat_map/equal_range.md.nolink) | 指定したキーにマッチする要素範囲を取得する | C++23 |
 | [`lower_bound`](flat_map/lower_bound.md.nolink) | 与えられた値より小さくない最初の要素へのイテレータを取得する | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at -- flat_map : findを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/at.html"/>
      <id>a43bd165f7c77b915000e79e11396d825ec7b0bd:reference/flat_map/flat_map/at.md</id>
      <updated>2023-05-18T15:28:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/at.md b/reference/flat_map/flat_map/at.md
index 593666b50..00317087d 100644
--- a/reference/flat_map/flat_map/at.md
+++ b/reference/flat_map/flat_map/at.md
@@ -95,4 +95,4 @@ exception std::out_of_range
 
 ## 関連項目
 - [`operator[]`](op_at.md)
-- [`find()`](find.md.nolink)
+- [`find()`](find.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- flat_map : findを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/find.html"/>
      <id>a43bd165f7c77b915000e79e11396d825ec7b0bd:reference/flat_map/flat_map/find.md</id>
      <updated>2023-05-18T15:28:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/find.md b/reference/flat_map/flat_map/find.md
new file mode 100644
index 000000000..81be7eaa7
--- /dev/null
+++ b/reference/flat_map/flat_map/find.md
@@ -0,0 +1,97 @@
+# find
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+iterator find(const key_type&amp;amp; x);             // (1) C++23
+
+template &amp;lt;class K&amp;gt;
+iterator find(const K&amp;amp; x);                    // (2) C++23
+
+const_iterator find(const key_type&amp;amp; x) const; // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+const_iterator find(const K&amp;amp; x) const;        // (4) C++23
+```
+
+## 概要
+`x`と等価なキーの要素を検索する。
+
+- (1), (3) : クラスのテンプレートパラメータ`key_type`型のキーを受け取って検索する。
+- (2), (4) : `key_type`と比較可能な`K`型のキーを受け取って検索する。
+
+
+## テンプレートパラメータ制約
+- (2), (4) : `key_compare::is_transparent`が妥当な式であること
+
+
+## 戻り値
+- (1), (3) : `x`と等価なキーの要素が見つかった場合は、見つかった要素へのイテレータを返す。そうでない場合は、 [`end()`](end.md.nolink) を返す。
+- (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが等価か判定する式`!c(k, x) &amp;amp;&amp;amp; !c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md.nolink) を返す。
+
+
+## 計算量
+[`size`](size.md.nolink) について対数時間。
+
+
+## 備考
+- (2), (4) :
+    - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
+    - これらのオーバーロードは、`map&amp;lt;string, int&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  // (1)
+  {
+    std::flat_map&amp;lt;std::string, int&amp;gt; fm = {
+      {&amp;#34;Alice&amp;#34;, 3},
+      {&amp;#34;Bob&amp;#34;,   1},
+      {&amp;#34;Carol&amp;#34;, 4}
+    };
+
+    decltype(fm)::iterator it = fm.find(&amp;#34;Bob&amp;#34;);
+    if (it != fm.end()) { // 見つかった
+      std::cout &amp;lt;&amp;lt; it-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+    }
+  }
+
+  // (2)
+  {
+    std::flat_map&amp;lt;std::string, int, std::less&amp;lt;&amp;gt;&amp;gt; fm = {
+      {&amp;#34;Alice&amp;#34;, 3},
+      {&amp;#34;Bob&amp;#34;,   1},
+      {&amp;#34;Carol&amp;#34;, 4}
+    };
+
+    // std::lessのvoidに対する特殊化を使用することで、
+    // 文字列リテラルをfind()関数の引数として渡した際に、
+    // std::string型の一時オブジェクトが生成されない。
+    decltype(fm)::iterator it = fm.find(&amp;#34;Bob&amp;#34;);
+    if (it != fm.end()) { // 見つかった
+      std::cout &amp;lt;&amp;lt; it-&amp;gt;second &amp;lt;&amp;lt; std::endl;
+    }
+  }
+}
+```
+* find[color ff0000]
+* std::less[link /reference/functional/less.md]
+
+### 出力
+```
+1
+1
+```
+
+## 関連項目
+- [`contains()`](contains.md.nolink)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- (multi)set|mapのfind : 透過的な検索の仕様をひな形に合わせた</title>
      <link href="https://cpprefjp.github.io/reference/map/map/find.html"/>
      <id>1702da3257cf6123abd2378255bd48554eb4a1bf:reference/map/map/find.md</id>
      <updated>2023-05-18T15:23:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/find.md b/reference/map/map/find.md
index cbfe40cc2..10e96c93a 100644
--- a/reference/map/map/find.md
+++ b/reference/map/map/find.md
@@ -23,6 +23,10 @@ const_iterator find(const K&amp;amp; x) const;        // (4) C++14
 - (2), (4) : `key_type`と比較可能な`K`型のキーを受け取って検索する。
 
 
+## テンプレートパラメータ制約
+- (2), (4) : `key_compare::is_transparent`が妥当な式であること
+
+
 ## 戻り値
 - (1), (3) : `x`と等価なキーの要素が見つかった場合は、見つかった要素へのイテレータを返す。そうでない場合は、 [`end()`](/reference/map/map/end.md) を返す。
 - (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが等価か判定する式`!c(k, x) &amp;amp;&amp;amp; !c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](/reference/map/map/end.md) を返す。
@@ -33,7 +37,7 @@ const_iterator find(const K&amp;amp; x) const;        // (4) C++14
 
 
 ## 備考
-- (2), (4) : `key_compare::is_transparent`が妥当な式である場合のみ、この関数はオーバーロード解決に参加する。
+- (2), (4) :
     - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
     - これらのオーバーロードは、`map&amp;lt;string, int&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- (multi)set|mapのfind : 透過的な検索の仕様をひな形に合わせた</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/find.html"/>
      <id>1702da3257cf6123abd2378255bd48554eb4a1bf:reference/map/multimap/find.md</id>
      <updated>2023-05-18T15:23:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/find.md b/reference/map/multimap/find.md
index 112b83a4d..0a8913961 100644
--- a/reference/map/multimap/find.md
+++ b/reference/map/multimap/find.md
@@ -23,6 +23,10 @@ const_iterator find(const K&amp;amp; x) const;        // (4) C++14
 - (2), (4) : `key_type`と比較可能な`K`型のキーを受け取って検索する。
 
 
+## テンプレートパラメータ制約
+- (2), (4) : `key_compare::is_transparent`が妥当な式であること
+
+
 ## 戻り値
 - (1), (3) : `x`と等価なキーの要素が見つかった場合は、見つかった要素へのイテレータを返す。そうでない場合は、 [`end()`](/reference/map/map/end.md) を返す。
 - (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが等価か判定する式`!c(k, x) &amp;amp;&amp;amp; !c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](/reference/map/map/end.md) を返す。
@@ -35,7 +39,7 @@ const_iterator find(const K&amp;amp; x) const;        // (4) C++14
 
 
 ## 備考
-- (2), (4) : `key_compare::is_transparent`が妥当な式である場合のみ、この関数はオーバーロード解決に参加する。
+- (2), (4) :
     - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
     - これらのオーバーロードは、`map&amp;lt;string, int&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- (multi)set|mapのfind : 透過的な検索の仕様をひな形に合わせた</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/find.html"/>
      <id>1702da3257cf6123abd2378255bd48554eb4a1bf:reference/set/multiset/find.md</id>
      <updated>2023-05-18T15:23:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/find.md b/reference/set/multiset/find.md
index fb8f217c8..ae74d6658 100644
--- a/reference/set/multiset/find.md
+++ b/reference/set/multiset/find.md
@@ -23,6 +23,10 @@ const_iterator find(const K&amp;amp; x) const;        // (4) C++14
 - (2), (4) : `key_type`と比較可能な`K`型のキーを受け取って検索する。
 
 
+## テンプレートパラメータ制約
+- (2), (4) : `key_compare::is_transparent`が妥当な式であること
+
+
 ## 戻り値
 - (1), (3) : `x`と等価なキーの要素が見つかった場合は、見つかった要素へのイテレータを返す。そうでない場合は、 [`end()`](end.md) を返す。
 - (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが等価か判定する式`!c(k, x) &amp;amp;&amp;amp; !c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md) を返す。
@@ -33,7 +37,7 @@ const_iterator find(const K&amp;amp; x) const;        // (4) C++14
 
 
 ## 備考
-- (2), (4) : `key_compare::is_transparent`が妥当な式である場合のみ、この関数はオーバーロード解決に参加する。
+- (2), (4) :
     - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
     - これらのオーバーロードは、`multiset&amp;lt;string&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- (multi)set|mapのfind : 透過的な検索の仕様をひな形に合わせた</title>
      <link href="https://cpprefjp.github.io/reference/set/set/find.html"/>
      <id>1702da3257cf6123abd2378255bd48554eb4a1bf:reference/set/set/find.md</id>
      <updated>2023-05-18T15:23:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/find.md b/reference/set/set/find.md
index 4b201706d..f8765cdd5 100644
--- a/reference/set/set/find.md
+++ b/reference/set/set/find.md
@@ -23,6 +23,10 @@ const_iterator find(const K&amp;amp; x) const;        // (4) C++14
 - (2), (4) : `key_type`と比較可能な`K`型のキーを受け取って検索する。
 
 
+## テンプレートパラメータ制約
+- (2), (4) : `key_compare::is_transparent`が妥当な式であること
+
+
 ## 戻り値
 - (1), (3) : `x`と等価なキーの要素が見つかった場合は、見つかった要素へのイテレータを返す。そうでない場合は、 [`end()`](end.md) を返す。
 - (2), (4) : `key_compare`型の関数オブジェクトを`c`、コンテナ内の各要素が持つキーを`k`として、キーが等価か判定する式`!c(k, x) &amp;amp;&amp;amp; !c(x, k)`が`true`となる要素へのイテレータを返す。そのような要素がない場合は、[`end()`](end.md) を返す。
@@ -33,7 +37,7 @@ const_iterator find(const K&amp;amp; x) const;        // (4) C++14
 
 
 ## 備考
-- (2), (4) : `key_compare::is_transparent`が妥当な式である場合のみ、この関数はオーバーロード解決に参加する。
+- (2), (4) :
     - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
     - これらのオーバーロードは、`set&amp;lt;string&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at -- flat_map::at : 透過的な検索オーバーロードを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/at.html"/>
      <id>c84d47b429f528700f37e1ba4d22f8b7e5bfdd61:reference/flat_map/flat_map/at.md</id>
      <updated>2023-05-18T15:18:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/at.md b/reference/flat_map/flat_map/at.md
index 824caed0c..593666b50 100644
--- a/reference/flat_map/flat_map/at.md
+++ b/reference/flat_map/flat_map/at.md
@@ -7,13 +7,31 @@
 
 ```cpp
 mapped_type&amp;amp; at(const key_type&amp;amp; x);             // (1) C++23
-const mapped_type&amp;amp; at(const key_type&amp;amp; x) const; // (2) C++23
+
+template &amp;lt;class K&amp;gt;
+mapped_type&amp;amp; at(const K&amp;amp; x);                    // (2) C++23
+
+const mapped_type&amp;amp; at(const key_type&amp;amp; x) const; // (3) C++23
+
+template &amp;lt;class K&amp;gt;
+const mapped_type&amp;amp; at(const K&amp;amp; x) const;        // (4) C++23
 ```
 
 ## 概要
 指定したキーを持つ要素を取得する。  
 要素を取り出す際にキーの存在チェックをする。
 
+- (1), (3) : クラスのテンプレートパラメータ`key_type`型のキーを受け取る
+- (2), (4) : `key_type`と比較可能な`K`型のキーを受け取る
+
+
+## テンプレートパラメータ制約
+- (2), (4) : `key_compare::is_transparent`が妥当な式であること
+
+
+## 事前条件
+- (2), (4) : `find(x)`という式が妥当であり、動作が明確に定義されていること
+
 
 ## 戻り値
 キー`x`に対応する値を返す。対応する要素が存在しないときは、[`out_of_range`](/reference/stdexcept.md)例外を投げる。
@@ -23,6 +41,12 @@ const mapped_type&amp;amp; at(const key_type&amp;amp; x) const; // (2) C++23
 要素数に対して対数時間
 
 
+## 備考
+- (2), (4) :
+    - `is_transparent`は、標準ライブラリの[`std::less`](/reference/functional/less.md)、[`std::greater`](/reference/functional/greater.md)といった関数オブジェクトの、`void`に対する特殊化で定義される。それ以外のテンプレートパラメータで`is_transparent`が定義されないのは、互換性のためである。
+    - これらのオーバーロードは、`flat_map&amp;lt;string, int&amp;gt;`のようなコンテナに対し、検索操作で文字列リテラルを渡した際に、キー型の一時オブジェクトが生成されるコストを減らすためにある。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-01-02T15:58:12.996662</updated>
  <id>9fb59ee7-0a67-455e-b2d9-ab5127416e73</id>

  
    <entry>
      <title>max_size -- Merge pull request #1225 from Joseph0304/fix-typo</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator_traits/max_size.html"/>
      <id>881079e55b22a968f57f87774757df1c2000f577:reference/memory/allocator_traits/max_size.md</id>
      <updated>2024-01-03T00:54:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator_traits/max_size.md b/reference/memory/allocator_traits/max_size.md
index 130c9e1f3..12e5ad433 100644
--- a/reference/memory/allocator_traits/max_size.md
+++ b/reference/memory/allocator_traits/max_size.md
@@ -8,7 +8,7 @@
 ```cpp
 static size_type max_size(Alloc&amp;amp; a);                            // C++11
 static size_type max_size(const Alloc&amp;amp; a) noexcept;             // C++14 から C++ 17 まで
-static constepx size_type max_size(const Alloc&amp;amp; a) noexcept;    // C++20 から
+static constexpr size_type max_size(const Alloc&amp;amp; a) noexcept;    // C++20 から
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_size -- typo修正</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator_traits/max_size.html"/>
      <id>10bce870608d979addbb7a98fa4a4b1d20b7cab3:reference/memory/allocator_traits/max_size.md</id>
      <updated>2023-12-31T11:11:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator_traits/max_size.md b/reference/memory/allocator_traits/max_size.md
index 130c9e1f3..12e5ad433 100644
--- a/reference/memory/allocator_traits/max_size.md
+++ b/reference/memory/allocator_traits/max_size.md
@@ -8,7 +8,7 @@
 ```cpp
 static size_type max_size(Alloc&amp;amp; a);                            // C++11
 static size_type max_size(const Alloc&amp;amp; a) noexcept;             // C++14 から C++ 17 まで
-static constepx size_type max_size(const Alloc&amp;amp; a) noexcept;    // C++20 から
+static constexpr size_type max_size(const Alloc&amp;amp; a) noexcept;    // C++20 から
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>joseph0304</name>
        <email>joseph0304.drdr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/assign.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/deque/deque/assign.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/assign.md b/reference/deque/deque/assign.md
index 21c062e0d..e69c1c85f 100644
--- a/reference/deque/deque/assign.md
+++ b/reference/deque/deque/assign.md
@@ -21,7 +21,7 @@ void assign(initializer_list&amp;lt;T&amp;gt; init);                // (3) C++11
 ## 効果
 - (1) : `*this`の全ての要素を解放し、イテレータ範囲`[first, last)`の要素のコピーを`*this`にコピーする。
 - (2) : `*this`の全ての要素が解放され、`t`オブジェクトの`n`個のコピーから`*this`を再構築する。
-- (3) : `*this`の全ての要素を解放し、`x`の全ての要素を`*this`にコピーする。
+- (3) : `*this`の全ての要素を解放し、`init`の全ての要素を`*this`にコピーする。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_assign.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/deque/deque/op_assign.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_assign.md b/reference/deque/deque/op_assign.md
index a3398fcd9..0e214ced8 100644
--- a/reference/deque/deque/op_assign.md
+++ b/reference/deque/deque/op_assign.md
@@ -6,7 +6,7 @@
 
 ```cpp
 deque&amp;amp; operator=(const deque&amp;amp; x);           // (1) C++03
-deque&amp;amp; operator=(deque&amp;amp;&amp;amp; y);                // (2) C++11
+deque&amp;amp; operator=(deque&amp;amp;&amp;amp; x);                // (2) C++11
 deque&amp;amp; operator=(deque&amp;amp;&amp;amp; x)
   noexcept(allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);  // (2) C++17
 deque&amp;amp; operator=(initializer_list&amp;lt;T&amp;gt; init); // (3) C++11
@@ -22,7 +22,7 @@ deque&amp;amp; operator=(initializer_list&amp;lt;T&amp;gt; init); // (3) C++11
 ## 効果
 - (1) : 同じテンプレートパラメータを持つ`deque`クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にコピーされる。
 - (2) : 同じテンプレートパラメータを持つ`deque`クラスのオブジェクトをムーブ代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にムーブされる。
-- (3) : 同じ要素型を持つ[`initializer_list`](/reference/initializer_list/initializer_list.md)クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にコピーされる。
+- (3) : 同じ要素型を持つ[`initializer_list`](/reference/initializer_list/initializer_list.md)クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`init`の全ての要素が`*this`にコピーされる。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/map/map/insert.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/map/map/insert.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/insert.md b/reference/map/map/insert.md
index 259a068cb..f5a846253 100644
--- a/reference/map/map/insert.md
+++ b/reference/map/map/insert.md
@@ -82,7 +82,7 @@ iterator           insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh); // (10) C++17
 - (8) : `insert(init.begin(), init.end())`と等価。
 - (9) : `nh`が空の場合、効果はない。
 それ以外の場合、`nh.key()`と等価のキーを持つ要素がコンテナにない場合に限り、`nh`が所有する要素を挿入する。
-- (10) : `nh`が空の場合、効果はなく、`(*this).end()`を返す。それ以外の場合、`nh.key()`と等価のキーを持つ要素がコンテナにない場合に限り、`nh`が所有する要素を挿入する。`nh.key()`と等価のキーの要素を指すイテレータを常に返す。要素は、`p`の直前の位置のできるだけ近くに挿入される。
+- (10) : `nh`が空の場合、効果はなく、`(*this).end()`を返す。それ以外の場合、`nh.key()`と等価のキーを持つ要素がコンテナにない場合に限り、`nh`が所有する要素を挿入する。`nh.key()`と等価のキーの要素を指すイテレータを常に返す。要素は、`hint`の直前の位置のできるだけ近くに挿入される。
 
 
 ## 戻り値
@@ -105,7 +105,7 @@ iterator           insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh); // (10) C++17
 - (7), (8) : 一般に N log(size + N)。（ただし、備考も参照）
     - ここで、 `N` は `first` と `last` の間の距離であり `size` は挿入前のコンテナの [`size()`](size.md) を表す。
 - (9) : 対数時間
-- (10) : 一般に対数時間だが、指定された新たな要素が `position` が指す要素の直前に挿入された場合は償却定数時間。
+- (10) : 一般に対数時間だが、指定された新たな要素が `hint` が指す要素の直前に挿入された場合は償却定数時間。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_assign.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/map/map/op_assign.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_assign.md b/reference/map/map/op_assign.md
index 4a7058cef..da17e632a 100644
--- a/reference/map/map/op_assign.md
+++ b/reference/map/map/op_assign.md
@@ -6,7 +6,7 @@
 
 ```cpp
 map&amp;amp; operator=(const map&amp;amp; x);                      // (1) C++03
-map&amp;amp; operator=(map&amp;amp;&amp;amp; y);                           // (2) C++11
+map&amp;amp; operator=(map&amp;amp;&amp;amp; x);                           // (2) C++11
 map&amp;amp; operator=(map&amp;amp;&amp;amp; x)
   noexcept(allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value
             &amp;amp;&amp;amp; is_nothrow_move_assignable&amp;lt;Compare&amp;gt;::value); (2) // C++17
@@ -22,7 +22,7 @@ map&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; init); // (3) C++11
 ## 効果
 - (1) : 同じテンプレートパラメータを持つ`map`クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にコピーされる。
 - (2) : 同じテンプレートパラメータを持つ`map`クラスのオブジェクトをムーブ代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にムーブされる。
-- (3) : 同じテンプレートパラメータを持つ`initializer_list`クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にコピーされる。
+- (3) : 同じテンプレートパラメータを持つ`initializer_list`クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`init`の全ての要素が`*this`にコピーされる。
 
 
 ## 戻り値
@@ -32,7 +32,7 @@ map&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; init); // (3) C++11
 ## 事後条件
 - (1) : `*this == x`
 - (2) : `*this`は元々の`x`と等値となる
-- (3) : `*this == x`
+- (3) : `*this == map{init}`
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>multimap -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/map/multimap.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap.md b/reference/map/multimap.md
index 180e5c2c0..f5aa9fd9d 100644
--- a/reference/map/multimap.md
+++ b/reference/map/multimap.md
@@ -159,7 +159,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`swap`](multimap/swap_free.md) | 2つの`map`オブジェクトを入れ替える | |
+| [`swap`](multimap/swap_free.md) | 2つの`multimap`オブジェクトを入れ替える | |
 
 
 ### 要素削除
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/insert.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/map/multimap/insert.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/insert.md b/reference/map/multimap/insert.md
index 946a11c84..11af3b64d 100644
--- a/reference/map/multimap/insert.md
+++ b/reference/map/multimap/insert.md
@@ -56,7 +56,7 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (10) C++17
 - (7) : イテレータ範囲`[first, last)`の各要素を`*this`の要素として挿入する。
 - (8) : `insert(init.begin(), init.end())`と等価（(7)へ委譲）。
 - (9) : `nh`が空の場合、効果はない。そうでなければ、`nh`によって所有されている要素を挿入する。`nh.key()` と等価なキーを持つ要素を含む範囲がコンテナ内に存在する場合、要素はその範囲の終端に挿入される。
-- (10) : `nh`が空の場合、効果はない。そうでなければ、`nh` によって所有されている要素を`p`より前の出来るだけ近い位置に挿入する。 `nh.key()` と等価なキーを持つ要素を含む範囲がコンテナ内に存在する場合、要素はその範囲の終端に挿入される。
+- (10) : `nh`が空の場合、効果はない。そうでなければ、`nh` によって所有されている要素を`hint`より前の出来るだけ近い位置に挿入する。 `nh.key()` と等価なキーを持つ要素を含む範囲がコンテナ内に存在する場合、要素はその範囲の終端に挿入される。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_assign.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/map/multimap/op_assign.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_assign.md b/reference/map/multimap/op_assign.md
index 96e60ee0a..b3c7f12f2 100644
--- a/reference/map/multimap/op_assign.md
+++ b/reference/map/multimap/op_assign.md
@@ -6,7 +6,7 @@
 
 ```cpp
 multimap&amp;amp; operator=(const multimap&amp;amp; x);                 // (1) C++03
-multimap&amp;amp; operator=(multimap&amp;amp;&amp;amp; y);                      // (2) C++11
+multimap&amp;amp; operator=(multimap&amp;amp;&amp;amp; x);                      // (2) C++11
 multimap&amp;amp; operator=(multimap&amp;amp;&amp;amp; x)
   noexcept(allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value
             &amp;amp;&amp;amp; is_nothrow_move_assignable&amp;lt;Compare&amp;gt;::value) // (2) C++17
@@ -22,7 +22,7 @@ multimap&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; init); // (3) C++11
 ## 効果
 - (1) : 同じテンプレートパラメータを持つ`multimap`クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にコピーされる。
 - (2) : 同じテンプレートパラメータを持つ`multimap`クラスのオブジェクトをムーブ代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にムーブされる。
-- (3) : 同じテンプレートパラメータを持つ`initializer_list`クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にコピーされる。
+- (3) : 同じテンプレートパラメータを持つ`initializer_list`クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`init`の全ての要素が`*this`にコピーされる。
 
 
 ## 戻り値
@@ -32,7 +32,7 @@ multimap&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; init); // (3) C++11
 ## 事後条件
 - (1) : `*this == x`
 - (2) : `*this`は元々の`x`と等値となる
-- (3) : `*this == x`
+- (3) : `*this == multimap{init}`
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_shared -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_shared.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/memory/make_shared.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_shared.md b/reference/memory/make_shared.md
index 617cdd664..3519a46bc 100644
--- a/reference/memory/make_shared.md
+++ b/reference/memory/make_shared.md
@@ -75,7 +75,7 @@ namespace std {
 - ユーザーによるオブジェクトの生成
 - 内部的な参照カウンタの生成
 
-`make_shared()` 内部的にオブジェクトを生成するため、オブジェクトの生成と参照カウンタの生成を、1つの大きなブロックとしてメモリを確保するため、より効率的になる。
+`make_shared()` は内部的にオブジェクトを生成するため、オブジェクトの生成と参照カウンタの生成を、1つの大きなブロックとしてメモリを確保するため、より効率的になる。
 
 メモリの確保にユーザー定義のアロケータを使用したい場合には、 [`allocate_shared()`](allocate_shared.md) を使用する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>node_handle -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle.md b/reference/node_handle/node_handle.md
index 8ea8b0b1d..c2cd8cce4 100644
--- a/reference/node_handle/node_handle.md
+++ b/reference/node_handle/node_handle.md
@@ -1,7 +1,7 @@
 # node_handle
 * cpp17[meta cpp]
 * node_handle[meta category]
-* class[meta id-type]
+* class template[meta id-type]
 
 
 ```cpp
@@ -51,8 +51,8 @@ class node_handle;
 | 名前 | 説明 | 対応バージョン |
 |----------------------------------------------|------------------------------|-------|
 | [`value`](node_handle/value.md)(set) | 要素アクセス | C++17 |
-| [`key`](node_handle/key.md)(map) | Keyアクセス | C++17 |
-| [`mapped`](node_handle/mapped.md)(map) | 要素アクセス | C++17 |
+| [`key`](node_handle/key.md)(map) | キーアクセス | C++17 |
+| [`mapped`](node_handle/mapped.md)(map) | 値アクセス | C++17 |
 | [`get_allocator`](node_handle/get_allocator.md) | アロケータオブジェクトの取得 | C++17 |
 | [`operator bool`](node_handle/op_bool.md) | ノードハンドルが空であるかどうかを調べる | C++17 |
 | [`empty`](node_handle/empty.md) | ノードハンドルが空であるかどうかを調べる | C++17 |
@@ -69,9 +69,9 @@ class node_handle;
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| `key_type` | テンプレートパラメータ `Key`。 | C++17 |
-| `value_type`(set) | テンプレートパラメータ `Key`。 | C++17 |
-| `value_type`(map) | 要素の型。`std::`[`pair`](/reference/utility/pair.md)`&amp;lt;const Key, T&amp;gt;`。 | C++17 |
+| `key_type` | テンプレートパラメータ `K`。 | C++17 |
+| `value_type`(set) | テンプレートパラメータ `K`。 | C++17 |
+| `value_type`(map) | 要素の型。`std::`[`pair`](/reference/utility/pair.md)`&amp;lt;const K, T&amp;gt;`。 | C++17 |
 | `mapped_type`(map) | 値の型。テンプレートパラメータ `T`。 | C++17 |
 | `allocator_type` | アロケータの型。 | C++17 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/empty.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle/empty.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/empty.md b/reference/node_handle/node_handle/empty.md
index 7ab4a8ab7..080dedc71 100644
--- a/reference/node_handle/node_handle/empty.md
+++ b/reference/node_handle/node_handle/empty.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 * node_handle[meta category]
 * node_handle[meta class]
-* function template[meta id-type]
+* function[meta id-type]
 * [meta namespace]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_allocator -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/get_allocator.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle/get_allocator.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/get_allocator.md b/reference/node_handle/node_handle/get_allocator.md
index 49f9ba918..95f23a4e5 100644
--- a/reference/node_handle/node_handle/get_allocator.md
+++ b/reference/node_handle/node_handle/get_allocator.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 * node_handle[meta category]
 * node_handle[meta class]
-* function template[meta id-type]
+* function[meta id-type]
 * [meta namespace]
 
 ```cpp
@@ -27,7 +27,6 @@ allocator_type get_allocator() const;
 
 ## 例
 ```cpp example
-#include &amp;lt;iostream&amp;gt;
 #include &amp;lt;set&amp;gt;
 
 int main()
@@ -42,7 +41,6 @@ int main()
 
 ### 出力
 ```
-0
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>key -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/key.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle/key.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/key.md b/reference/node_handle/node_handle/key.md
index 236c83838..7f01972bc 100644
--- a/reference/node_handle/node_handle/key.md
+++ b/reference/node_handle/node_handle/key.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 * node_handle[meta category]
 * node_handle[meta class]
-* function template[meta id-type]
+* function[meta id-type]
 * [meta namespace]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapped -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/mapped.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle/mapped.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/mapped.md b/reference/node_handle/node_handle/mapped.md
index 66e5e3c56..207f49718 100644
--- a/reference/node_handle/node_handle/mapped.md
+++ b/reference/node_handle/node_handle/mapped.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 * node_handle[meta category]
 * node_handle[meta class]
-* function template[meta id-type]
+* function[meta id-type]
 * [meta namespace]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/op_assign.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle/op_assign.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/op_assign.md b/reference/node_handle/node_handle/op_assign.md
index 0e8106e44..95040bf84 100644
--- a/reference/node_handle/node_handle/op_assign.md
+++ b/reference/node_handle/node_handle/op_assign.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 * node_handle[meta category]
 * node_handle[meta class]
-* function template[meta id-type]
+* function[meta id-type]
 * [meta namespace]
 
 ```cpp
@@ -47,6 +47,7 @@ int main()
   std::set&amp;lt;int&amp;gt;::node_type nh;
   // std::set&amp;lt;int&amp;gt;::node_type nh2 = nh;         // コピー構築はできない
   std::set&amp;lt;int&amp;gt;::node_type nh2 = std::move(nh);
+  std::cout &amp;lt;&amp;lt; static_cast&amp;lt;bool&amp;gt;(nh2);
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/op_bool.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle/op_bool.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/op_bool.md b/reference/node_handle/node_handle/op_bool.md
index e1b1e7204..bec471285 100644
--- a/reference/node_handle/node_handle/op_bool.md
+++ b/reference/node_handle/node_handle/op_bool.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 * node_handle[meta category]
 * node_handle[meta class]
-* function template[meta id-type]
+* function[meta id-type]
 * [meta namespace]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/op_constructor.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle/op_constructor.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/op_constructor.md b/reference/node_handle/node_handle/op_constructor.md
index 5f1762ac2..86daaffd7 100644
--- a/reference/node_handle/node_handle/op_constructor.md
+++ b/reference/node_handle/node_handle/op_constructor.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 * node_handle[meta category]
 * node_handle[meta class]
-* function template[meta id-type]
+* function[meta id-type]
 * [meta namespace]
 
 ```cpp
@@ -33,6 +33,7 @@ int main()
   std::set&amp;lt;int&amp;gt;::node_type nh;                  // (1)
   // std::set&amp;lt;int&amp;gt;::node_type nh2 = nh;         // コピー構築はできない
   std::set&amp;lt;int&amp;gt;::node_type nh2 = std::move(nh); // (2)
+  std::cout &amp;lt;&amp;lt; static_cast&amp;lt;bool&amp;gt;(nh2);
 }
 ```
 * node_type[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/op_destructor.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle/op_destructor.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/op_destructor.md b/reference/node_handle/node_handle/op_destructor.md
index 1241bd238..0dfe5b025 100644
--- a/reference/node_handle/node_handle/op_destructor.md
+++ b/reference/node_handle/node_handle/op_destructor.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 * node_handle[meta category]
 * node_handle[meta class]
-* function template[meta id-type]
+* function[meta id-type]
 * [meta namespace]
 
 ```cpp
@@ -23,7 +23,6 @@
 
 ## 例
 ```cpp example
-#include &amp;lt;iostream&amp;gt;
 #include &amp;lt;set&amp;gt;
 
 int main()
@@ -34,7 +33,6 @@ int main()
 
 ### 出力
 ```
-0
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/swap.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle/swap.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/swap.md b/reference/node_handle/node_handle/swap.md
index f3c6306ef..e243fb0c2 100644
--- a/reference/node_handle/node_handle/swap.md
+++ b/reference/node_handle/node_handle/swap.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 * node_handle[meta category]
 * node_handle[meta class]
-* function template[meta id-type]
+* function[meta id-type]
 * [meta namespace]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/swap_free.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle/swap_free.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/swap_free.md b/reference/node_handle/node_handle/swap_free.md
index e1366fc74..b5ed9a4d6 100644
--- a/reference/node_handle/node_handle/swap_free.md
+++ b/reference/node_handle/node_handle/swap_free.md
@@ -1,7 +1,7 @@
 # swap (非メンバ関数)
 * cpp17[meta cpp]
 * node_handle[meta category]
-* function template[meta id-type]
+* function[meta id-type]
 * [meta namespace]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/node_handle/node_handle/value.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/node_handle/node_handle/value.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/node_handle/node_handle/value.md b/reference/node_handle/node_handle/value.md
index 877c82d2e..e38f5c41e 100644
--- a/reference/node_handle/node_handle/value.md
+++ b/reference/node_handle/node_handle/value.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 * node_handle[meta category]
 * node_handle[meta class]
-* function template[meta id-type]
+* function[meta id-type]
 * [meta namespace]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/insert.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/set/multiset/insert.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/insert.md b/reference/set/multiset/insert.md
index c0124bbb4..0a45de240 100644
--- a/reference/set/multiset/insert.md
+++ b/reference/set/multiset/insert.md
@@ -36,7 +36,7 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (8) C++17
 - (5) : イテレータ範囲`[first, last)`の要素を挿入する
 - (6) : 初期化子リスト`init`の要素を挿入する
 - (7) : `nh`が空の場合、効果はない。そうでなければ、`nh`が所有する要素を挿入し、新しく挿入された要素を指すイテレータを返す。`nh.key()` と等価なキーを持つ要素を含む範囲がコンテナ内に存在する場合、要素はその範囲の終端に挿入される。`nh` が空でなく、`(*this).get_allocator() == nh.get_allocator()`であれば、動作は未定義である。
-- (8) : `nh`が空の場合、効果はなく、`(*this).end()`を返す。そうでなければ、 `nh` によって所有されている要素をコンテナに挿入し、 `nh.key()` と等価なキーを持つ要素を指すイテレータを返す。 `nh.key()` と等しいキーを持つ要素を含む範囲がコンテナ内に存在する場合、要素はその範囲の終端に挿入される。要素は、`p`の直前の位置のできるだけ近くに挿入される。`nh` が空でなく、`(*this).get_allocator() == nh.get_allocator()`であれば、動作は未定義である。
+- (8) : `nh`が空の場合、効果はなく、`(*this).end()`を返す。そうでなければ、 `nh` によって所有されている要素をコンテナに挿入し、 `nh.key()` と等価なキーを持つ要素を指すイテレータを返す。 `nh.key()` と等しいキーを持つ要素を含む範囲がコンテナ内に存在する場合、要素はその範囲の終端に挿入される。要素は、`hint`の直前の位置のできるだけ近くに挿入される。`nh` が空でなく、`(*this).get_allocator() == nh.get_allocator()`であれば、動作は未定義である。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_assign.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/set/multiset/op_assign.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_assign.md b/reference/set/multiset/op_assign.md
index ba93738df..f96d89024 100644
--- a/reference/set/multiset/op_assign.md
+++ b/reference/set/multiset/op_assign.md
@@ -23,7 +23,7 @@ multiset&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; init);      // (3) C++11
 ## 効果
 - (1) : 同じテンプレートパラメータを持つ `multiset` クラスのオブジェクトをコピー代入する。`*this` の全ての要素が解放され、`x` の全ての要素が `*this` にコピーされる。
 - (2) : 同じテンプレートパラメータを持つ `multiset` クラスのオブジェクトをムーブ代入する。`*this` の全ての要素が解放され、`x` の全ての要素が `*this` にムーブされる。
-- (3) : 同じテンプレートパラメータを持つ `initializer_list` クラスのオブジェクトをコピー代入する。`*this` の全ての要素が解放され、`x` の全ての要素が `*this` にコピーされる。
+- (3) : 同じテンプレートパラメータを持つ `initializer_list` クラスのオブジェクトをコピー代入する。`*this` の全ての要素が解放され、`init` の全ての要素が `*this` にコピーされる。
 
 
 ## 戻り値
@@ -33,7 +33,7 @@ multiset&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; init);      // (3) C++11
 ## 事後条件
 - (1) : `*this == x`
 - (2) : `*this`は元々の`x`と等値となる
-- (3) : `*this == x`
+- (3) : `*this == multiset{init}`
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/set/set/insert.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/set/set/insert.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/insert.md b/reference/set/set/insert.md
index 714e104f1..c572100ea 100644
--- a/reference/set/set/insert.md
+++ b/reference/set/set/insert.md
@@ -39,7 +39,7 @@ iterator           insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh); // (8) C++17
 - (7) : `nh`が空の場合、効果はない。
 それ以外の場合、`nh.key()`と等価のキーを持つ要素がコンテナにない場合に限り、`nh`が所有する要素を挿入する。
 - (8) : `nh`が空の場合、効果はなく、`(*this).end()`を返す。
-それ以外の場合、`nh.key()`と等価のキーを持つ要素がコンテナにない場合に限り、`nh`が所有する要素を挿入する。 `nh.key()`と同等のキーの要素を指すイテレータを常に返す。要素は、`p`の直前の位置のできるだけ近くに挿入される。
+それ以外の場合、`nh.key()`と等価のキーを持つ要素がコンテナにない場合に限り、`nh`が所有する要素を挿入する。 `nh.key()`と同等のキーの要素を指すイテレータを常に返す。要素は、`hint`の直前の位置のできるだけ近くに挿入される。
 
 
 ## 戻り値
@@ -58,7 +58,7 @@ iterator           insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh); // (8) C++17
 - (5), (6) : 一般に N log(size + N)
     - ※ ここで `N` は `first` と `last` の間の距離であり `size` は挿入前のコンテナの [`size()`](size.md)
 - (7) : 対数時間
-- (8) : 一般に対数時間だが、指定された新たな要素が `position` が指す要素の直前に挿入された場合は償却定数時間。
+- (8) : 一般に対数時間だが、指定された新たな要素が `hint` が指す要素の直前に挿入された場合は償却定数時間。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_assign.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/set/set/op_assign.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_assign.md b/reference/set/set/op_assign.md
index f84066b91..ea6aabf4a 100644
--- a/reference/set/set/op_assign.md
+++ b/reference/set/set/op_assign.md
@@ -23,7 +23,7 @@ set&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; init); // (3) C++11
 ## 効果
 - (1) : 同じテンプレートパラメータを持つ `set` クラスのオブジェクトをコピー代入する。`*this` の全ての要素が解放され、`x` の全ての要素が `*this` にコピーされる。
 - (2) : 同じテンプレートパラメータを持つ `set` クラスのオブジェクトをムーブ代入する。`*this` の全ての要素が解放され、`x` の全ての要素が `*this` にムーブされる。
-- (3) : 同じテンプレートパラメータを持つ `initializer_list` クラスのオブジェクトをコピー代入する。`*this` の全ての要素が解放され、`x` の全ての要素が `*this` にコピーされる。
+- (3) : 同じテンプレートパラメータを持つ `initializer_list` クラスのオブジェクトをコピー代入する。`*this` の全ての要素が解放され、`init` の全ての要素が `*this` にコピーされる。
 
 
 ## 戻り値
@@ -33,7 +33,7 @@ set&amp;amp; operator=(initializer_list&amp;lt;value_type&amp;gt; init); // (3) C++11
 ## 事後条件
 - (1) : `*this == x`
 - (2) : `*this`は元々の`x`と等値となる
-- (3) : `*this == x`
+- (3) : `*this == set{init}`
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/assign.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/string/basic_string/assign.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/assign.md b/reference/string/basic_string/assign.md
index cb7ef5d7c..fc55fcb48 100644
--- a/reference/string/basic_string/assign.md
+++ b/reference/string/basic_string/assign.md
@@ -42,8 +42,8 @@ constexpr basic_string&amp;amp;
   assign(InputIterator first,
          InputIterator last);  // (7) C++20
 
-basic_string&amp;amp; assign(initializer_list&amp;lt;charT&amp;gt;);           // (8) C++11
-constexpr basic_string&amp;amp; assign(initializer_list&amp;lt;charT&amp;gt;); // (8) C++20
+basic_string&amp;amp; assign(initializer_list&amp;lt;charT&amp;gt; il);           // (8) C++11
+constexpr basic_string&amp;amp; assign(initializer_list&amp;lt;charT&amp;gt; il); // (8) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/unordered_map/unordered_map/insert.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_map/insert.md b/reference/unordered_map/unordered_map/insert.md
index 3abc7efe2..390f67e24 100644
--- a/reference/unordered_map/unordered_map/insert.md
+++ b/reference/unordered_map/unordered_map/insert.md
@@ -71,7 +71,7 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (10) C++17
 - (10) :
     - `nh`が空の場合、効果はなく、`(*this).end()`を返す
     - それ以外の場合、`nh.key()`と等価のキーを持つ要素がコンテナにない場合に限り、`nh`が所有する要素を挿入する。`nh.key()`と等価のキーの要素を指すイテレータを常に返す
-    - 要素は、`p`の直前の位置のできるだけ近くに挿入される
+    - 要素は、`hint`の直前の位置のできるだけ近くに挿入される
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/insert.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/unordered_map/unordered_multimap/insert.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_map/unordered_multimap/insert.md b/reference/unordered_map/unordered_multimap/insert.md
index b0e30bd35..d60870c88 100644
--- a/reference/unordered_map/unordered_multimap/insert.md
+++ b/reference/unordered_map/unordered_multimap/insert.md
@@ -71,7 +71,7 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (10) C++17
 - (10) :
     - `nh`が空の場合、効果はなく、`(*this).end()`を返す
     - そうでなければ、 `nh` によって所有されている要素をコンテナに挿入し、 `nh.key()` と等価なキーを持つ要素を指すイテレータを返す
-    - `nh.key()` と等しいキーを持つ要素を含む範囲がコンテナ内に存在する場合、要素はその範囲の終端に挿入される。要素は、`p`の直前の位置のできるだけ近くに挿入される
+    - `nh.key()` と等しいキーを持つ要素を含む範囲がコンテナ内に存在する場合、要素はその範囲の終端に挿入される。要素は、`hint`の直前の位置のできるだけ近くに挿入される
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/insert.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/unordered_set/unordered_multiset/insert.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/insert.md b/reference/unordered_set/unordered_multiset/insert.md
index 422261a0d..09d2f8b21 100644
--- a/reference/unordered_set/unordered_multiset/insert.md
+++ b/reference/unordered_set/unordered_multiset/insert.md
@@ -60,7 +60,7 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (6) C++17
 - (3) : イテレータ範囲 `[first, last)` のすべての要素 `t` に対して、(1)の形式の `insert(t)` を呼び出した場合と等価である。
 - (4) : (3)の形式を `insert(il.begin(), il.end())` として呼び出した場合と等価である。
 - (5) : `nh`が空の場合、効果はない。そうでなければ、`nh`が所有する要素を挿入し、新しく挿入された要素を指すイテレータを返す。`nh.key()` と等価なキーを持つ要素を含む範囲がコンテナ内に存在する場合、要素はその範囲の終端に挿入される。
-- (6) : `nh`が空の場合、効果はなく、`(*this).end()`を返す。そうでなければ、 `nh` によって所有されている要素をコンテナに挿入し、 `nh.key()` と等価なキーを持つ要素を指すイテレータを返す。 `nh.key()` と等しいキーを持つ要素を含む範囲がコンテナ内に存在する場合、要素はその範囲の終端に挿入される。要素は、`p`の直前の位置のできるだけ近くに挿入される。
+- (6) : `nh`が空の場合、効果はなく、`(*this).end()`を返す。そうでなければ、 `nh` によって所有されている要素をコンテナに挿入し、 `nh.key()` と等価なキーを持つ要素を指すイテレータを返す。 `nh.key()` と等しいキーを持つ要素を含む範囲がコンテナ内に存在する場合、要素はその範囲の終端に挿入される。要素は、`hint`の直前の位置のできるだけ近くに挿入される。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>count -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/count.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/unordered_set/unordered_set/count.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/count.md b/reference/unordered_set/unordered_set/count.md
index d38174485..925ac8195 100644
--- a/reference/unordered_set/unordered_set/count.md
+++ b/reference/unordered_set/unordered_set/count.md
@@ -13,7 +13,7 @@ size_type count(const K&amp;amp; k) const;        // (2) C++20
 ```
 
 ## 概要
-キーを検索し、コンテナ内に見つかった要素の数を返す。`set` コンテナはキーの重複を許さないため、この関数は実際には要素が見つかったときに 1 を、そうでないときに 0 を返す。
+キーを検索し、コンテナ内に見つかった要素の数を返す。`unordered_set` コンテナはキーの重複を許さないため、この関数は実際には要素が見つかったときに 1 を、そうでないときに 0 を返す。
 
 - (1) : キー`x`を検索し、合致する要素数を取得する
 - (2) : キー`k`を透過的に検索し、合致する要素数を取得する
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extract -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/extract.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/unordered_set/unordered_set/extract.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/extract.md b/reference/unordered_set/unordered_set/extract.md
index b1d0a69f1..d123a2fba 100644
--- a/reference/unordered_set/unordered_set/extract.md
+++ b/reference/unordered_set/unordered_set/extract.md
@@ -58,7 +58,7 @@ auto my_hash = [](my_struct const&amp;amp; s) noexcept -&amp;gt; std::size_t
 
 int main()
 {
-  // ムーブオンリーな型をキーとして扱う multiset
+  // ムーブオンリーな型をキーとして扱う unordered_set
   std::unordered_set&amp;lt;my_struct, decltype(my_hash)&amp;gt; s;
 
   // 挿入
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/unordered_set/unordered_set/insert.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_set/insert.md b/reference/unordered_set/unordered_set/insert.md
index 20e168442..525f2a215 100644
--- a/reference/unordered_set/unordered_set/insert.md
+++ b/reference/unordered_set/unordered_set/insert.md
@@ -64,7 +64,7 @@ iterator insert(const_iterator hint, node_type&amp;amp;&amp;amp; nh);          // (6) C++17
 それ以外の場合、`nh.key()`と等価のキーを持つ要素がコンテナにない場合に限り、`nh`が所有する要素を挿入する。
 - (6) : `nh`が空の場合、効果はなく、`(*this).end()`を返す。
 それ以外の場合、`nh.key()`と等価のキーを持つ要素がコンテナにない場合に限り、`nh`が所有する要素を挿入する。`nh.key()`と等価のキーの要素を指すイテレータを常に返す。
-要素は、`p`の直前の位置のできるだけ近くに挿入される。
+要素は、`hint`の直前の位置のできるだけ近くに挿入される。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/assign.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/vector/vector/assign.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/assign.md b/reference/vector/vector/assign.md
index 677211063..38cecc062 100644
--- a/reference/vector/vector/assign.md
+++ b/reference/vector/vector/assign.md
@@ -10,11 +10,11 @@ void assign(InputIterator first, InputIterator last);           // (1) C++03
 template &amp;lt;class InputIterator&amp;gt;
 constexpr void assign(InputIterator first, InputIterator last); // (1) C++20
 
-void assign(size_type n, const T&amp;amp; u);           // (2) C++03
-constexpr void assign(size_type n, const T&amp;amp; u); // (2) C++20
+void assign(size_type n, const T&amp;amp; t);           // (2) C++03
+constexpr void assign(size_type n, const T&amp;amp; t); // (2) C++20
 
-void assign(initializer_list&amp;lt;T&amp;gt;);           // (3) C++11
-constexpr void assign(initializer_list&amp;lt;T&amp;gt;); // (3) C++20
+void assign(initializer_list&amp;lt;T&amp;gt; il);           // (3) C++11
+constexpr void assign(initializer_list&amp;lt;T&amp;gt; il); // (3) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -28,12 +28,12 @@ constexpr void assign(initializer_list&amp;lt;T&amp;gt;); // (3) C++20
 
 ## 要件
 - (1) : 型`T`は`*first`から`X`に対してEmplaceConstructibleでなければならない。イテレータがForward iterators の要件を満たさない場合、型`T`は`X`に対してMoveInsertableでなければならない。`[first, last)`の範囲のそれぞれのイテレータは１回だけ間接参照される。`first`, `last`は自身のイテレータであってはならない。
-- (2) : `u`は`*this`の要素への参照であってはならない。
+- (2) : `t`は`*this`の要素への参照であってはならない。
 
 
 ## 効果
 - (1) : イテレータ範囲`[first, last)`の要素のコピーで`*this`の要素を置き換える。
-- (2) : `*this`の要素をすべて`n`個の`u`のコピーに置き換える。
+- (2) : `*this`の要素をすべて`n`個の`t`のコピーに置き換える。
 - (3) : `assign(il.begin(), il.end())`と等価。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- fix some minor typo</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_assign.html"/>
      <id>6b3f0cbc936ee694601043dffe4d1fa6272a6cba:reference/vector/vector/op_assign.md</id>
      <updated>2023-12-30T01:05:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_assign.md b/reference/vector/vector/op_assign.md
index 4ac758454..df387153d 100644
--- a/reference/vector/vector/op_assign.md
+++ b/reference/vector/vector/op_assign.md
@@ -16,8 +16,8 @@ constexpr vector&amp;amp; operator=(vector&amp;amp;&amp;amp; x) noexcept(
   allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value
     || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value); // (2) C++20
 
-vector&amp;amp; operator=(initializer_list&amp;lt;T&amp;gt;);           // (3) C++11
-constexpr vector&amp;amp; operator=(initializer_list&amp;lt;T&amp;gt;); // (3) C++20
+vector&amp;amp; operator=(initializer_list&amp;lt;T&amp;gt; init);           // (3) C++11
+constexpr vector&amp;amp; operator=(initializer_list&amp;lt;T&amp;gt; init); // (3) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 * allocator_traits[link /reference/memory/allocator_traits.md]
@@ -35,7 +35,7 @@ constexpr vector&amp;amp; operator=(initializer_list&amp;lt;T&amp;gt;); // (3) C++20
 ## 効果
 - (1) : 同じテンプレートパラメータを持つ`vector`クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にコピーされる。
 - (2) : 同じテンプレートパラメータを持つ`vector`クラスのオブジェクトをムーブ代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にムーブされる。
-- (3) : 同じテンプレートパラメータを持つ`initializer_list`クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`x`の全ての要素が`*this`にコピーされる。
+- (3) : 同じテンプレートパラメータを持つ`initializer_list`クラスのオブジェクトをコピー代入する。`*this`の全ての要素が解放され、`init`の全ての要素が`*this`にコピーされる。
 
 
 ## 戻り値
@@ -45,7 +45,7 @@ constexpr vector&amp;amp; operator=(initializer_list&amp;lt;T&amp;gt;); // (3) C++20
 ## 事後条件
 - (1) : `*this == x`
 - (2) : `*this`は元々の`x`と等値となる
-- (3) : `*this == x`
+- (3) : `*this == vector{init}`
 
 
 ## 計算量
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extract -- fix expression of extract() of multimap and multiset</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/extract.html"/>
      <id>04ff4ade9e1f9c18ec95cc7a9b3711812f0180f9:reference/map/multimap/extract.md</id>
      <updated>2023-12-30T00:18:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/extract.md b/reference/map/multimap/extract.md
index 280b5cee4..a4fd6d89e 100644
--- a/reference/map/multimap/extract.md
+++ b/reference/map/multimap/extract.md
@@ -18,7 +18,7 @@ node_type extract(K&amp;amp;&amp;amp; x);                   // (3) C++23
 指定された要素を`*this`から切り離し、その要素を所有する[ノードハンドル](/reference/node_handle/node_handle.md)を取得する。
 
 - (1) : `position`が指すノードを切り離す
-- (2) : `x`と等価なキーをもつノードをすべて切り離す
+- (2) : `x`と等価なキーをもつノードを切り離す
 - (3) : `key_type`と比較可能な`x`と等価なキーをもつノードをすべて切り離す
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extract -- fix expression of extract() of multimap and multiset</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/extract.html"/>
      <id>04ff4ade9e1f9c18ec95cc7a9b3711812f0180f9:reference/set/multiset/extract.md</id>
      <updated>2023-12-30T00:18:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/extract.md b/reference/set/multiset/extract.md
index 960f6ac4e..84ab53b62 100644
--- a/reference/set/multiset/extract.md
+++ b/reference/set/multiset/extract.md
@@ -18,7 +18,7 @@ node_type extract(K&amp;amp;&amp;amp; x);                   // (3) C++23
 指定された要素を`*this`から切り離し、その要素を所有する[ノードハンドル](/reference/node_handle/node_handle.md)を取得する。
 
 - (1) : `position`が指すノードを切り離す
-- (2) : `x`と等価なキーをもつノードをすべて切り離す
+- (2) : `x`と等価なキーをもつノードを切り離す
 - (3) : `key_type`と比較可能な`x`と等価なキーをもつノードをすべて切り離す
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
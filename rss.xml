<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-07T10:29:52.619304</updated>
  <id>583057ee-73d8-46a7-bb30-7d4718012e9b</id>

  
    <entry>
      <title>generator -- generator: 例示コード拡充</title>
      <link href="https://cpprefjp.github.io/reference/generator/generator.html"/>
      <id>09c61f94ef2e5795801b131449073c34e47f4995:reference/generator/generator.md</id>
      <updated>2023-01-07T19:25:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/generator/generator.md b/reference/generator/generator.md
index db468a516..c7e1c9d10 100644
--- a/reference/generator/generator.md
+++ b/reference/generator/generator.md
@@ -82,12 +82,13 @@ using yielded =
 
 
 ## 例
+### 例1: 単一値の生成
 ```cpp example
 #include &amp;lt;generator&amp;gt;
 #include &amp;lt;ranges&amp;gt;
 #include &amp;lt;iostream&amp;gt;
 
-// 偶数値列を(無限に)生成するコルーチン
+// 偶数値列を無限生成するコルーチン
 std::generator&amp;lt;int&amp;gt; evens()
 {
   int n = 0;
@@ -110,7 +111,7 @@ int main()
 * co_yield[link /lang/cpp20/coroutines.md]
 * std::views::take[link /reference/ranges/take_view.md]
 
-### 出力
+#### 出力
 ```
 0
 2
@@ -119,6 +120,104 @@ int main()
 8
 ```
 
+### 例2: レンジ要素値の逐次生成
+```cpp example
+#include &amp;lt;generator&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+// レンジの要素値を逐次生成するコルーチン
+std::generator&amp;lt;int&amp;gt; ints()
+{
+  int arr[] = {1, 2, 3};
+  co_yield std::ranges::elements_of(arr);
+  std::vector&amp;lt;int&amp;gt; vec = {4, 5, 6};
+  co_yield std::ranges::elements_of(vec);
+  std::list&amp;lt;int&amp;gt; lst = {7, 8, 9};
+  co_yield std::ranges::elements_of(lst);
+}
+
+int main()
+{
+  for (int n : ints())) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
+  }
+}
+```
+* std::generator[color ff0000]
+* co_yield[link /lang/cpp20/coroutines.md]
+* std::ranges::elements_of[link /reference/ranges/elements_of.md]
+
+#### 出力
+```
+1 2 3 4 5 6 7 8 9 
+```
+
+### 例3: ジェネレータのネスト
+```cpp example
+#include &amp;lt;generator&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;memory&amp;gt;
+
+// 二分木ノード
+struct node {
+  int value;
+  std::unique_ptr&amp;lt;node&amp;gt; left = nullptr;
+  std::unique_ptr&amp;lt;node&amp;gt; right = nullptr;
+};
+
+// 二分木を幅優先走査: 左(left)→自ノード→右(right)
+std::generator&amp;lt;int&amp;gt; traverse(const node&amp;amp; e)
+{
+  if (e.left) {
+    co_yield std::ranges::elements_of(traverse(*e.left));
+  }
+  co_yield e.value;
+  if (e.right) {
+    co_yield std::ranges::elements_of(traverse(*e.right));
+  }
+}
+
+int main()
+{
+  // tree:
+  //    2
+  //   / ¥
+  //  1   4
+  //     / ¥
+  //    3   5
+  node tree = {
+    2,
+    std::make_unique&amp;lt;node&amp;gt;(1),
+    std::make_unique&amp;lt;node&amp;gt;(
+      4,
+      std::make_unique&amp;lt;node&amp;gt;(3),
+      std::make_unique&amp;lt;node&amp;gt;(5)
+    ),
+  };
+
+  for (int n: traverse(tree)) {
+    std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::generator[color ff0000]
+* co_yield[link /lang/cpp20/coroutines.md]
+* std::ranges::elements_of[link /reference/ranges/elements_of.md]
+* std::make_unique[link /reference/memory/make_unique.md]
+
+#### 出力
+```
+1
+2
+3
+4
+5
+```
+
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>NULL -- NULL: C++03 の規定について実際の規格と合致しない記述を修正</title>
      <link href="https://cpprefjp.github.io/reference/cstddef/null.html"/>
      <id>533c54260230bc66ece67eda846b3412bdd38ee7:reference/cstddef/null.md</id>
      <updated>2023-01-07T13:33:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstddef/null.md b/reference/cstddef/null.md
index d84b66cee..4626fc22b 100644
--- a/reference/cstddef/null.md
+++ b/reference/cstddef/null.md
@@ -22,9 +22,12 @@
 
 
 ## 備考
-C++03において、「ヌルポインタ定数」は「値が0の整数リテラル」と定義されていた。したがって、マクロ`NULL`の値として`0`や`0L`は規格に適合する定義だが、`(void*)0`はリテラルではなく式であるため不正である。
+C++03において、「ヌルポインタ定数」は「値が0になる整数定数式」と定義されていた。したがって、マクロ`NULL`の値として`0`や`0L`は規格に適合するが、`(void*)0`は整数定数式ではないため適合しない。
 
-C++11では、「ヌルポインタ定数」の定義に「[`std::nullptr_t`](/reference/cstddef/nullptr_t.md)型のprvalue」が追加されたため、`nullptr`も規格に適合する。しかし、`NULL`の値の型が変わるとコードの互換性を損なうことから、当面の間 `NULL` の定義は整数リテラルであると思われる。C++11以降は`NULL`ではなく[`nullptr`](/lang/cpp11/nullptr.md)を使用するとよい。
+C++11では、「ヌルポインタ定数」の定義に「[`std::nullptr_t`](/reference/cstddef/nullptr_t.md)型のprvalue」が追加されたため、`nullptr`も規格に適合する。しかし、`NULL`の値の型が変わるとコードの互換性を損なうことから、当面の間`NULL`の値は整数定数式であると思われる。C++11以降は`NULL`ではなく[`nullptr`](/lang/cpp11/nullptr.md)を使用するとよい。
 
 ## 関連項目
 - [C++11 `nullptr`](/lang/cpp11/nullptr.md)
+
+## 参照
+- [Does any major C++ implementation actually define `NULL` as `nullptr`? - Stack Overflow](https://stackoverflow.com/questions/61699775/does-any-major-c-implementation-actually-define-null-as-nullptr)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Kazutoshi SATODA</name>
        <email>k_satoda@f2.dion.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;=&gt; -- add result of sample</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_compare_3way.html"/>
      <id>5df0bc418e92e87d9450b1137168865a0c4c2589:reference/string/basic_string/op_compare_3way.md</id>
      <updated>2023-01-07T13:02:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_compare_3way.md b/reference/string/basic_string/op_compare_3way.md
index de311f999..59450a1dd 100644
--- a/reference/string/basic_string/op_compare_3way.md
+++ b/reference/string/basic_string/op_compare_3way.md
@@ -65,6 +65,7 @@ int main()
 
 ### 出力
 ```
+equal
 ```
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexprの制限緩和 -- Merge pull request #1016 from cpprefjp/fix-cxx14-constexpr</title>
      <link href="https://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html"/>
      <id>932e5078638bcf39f9282e7c022e3bf3d4526a27:lang/cpp14/relaxing_constraints_on_constexpr.md</id>
      <updated>2023-01-05T18:05:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp14/relaxing_constraints_on_constexpr.md b/lang/cpp14/relaxing_constraints_on_constexpr.md
index b3cdb1a3f..943cc064d 100644
--- a/lang/cpp14/relaxing_constraints_on_constexpr.md
+++ b/lang/cpp14/relaxing_constraints_on_constexpr.md
@@ -10,8 +10,9 @@ C++11で、汎用定数式の機能である[`constexpr`](/lang/cpp11/constexpr.
 - `if`文と`switch`文を許可
 - 全てのループ文を許可(`for`文、範囲`for`文、`while`文、`do-while`文)
 - 変数の書き換えを許可
-- 戻り値型(リテラル型)として、`void`を許可
+- 戻り値型(リテラル型)として、`void`を許可 / 戻り値型や関数引数で非`const`参照を許可
 - `constexpr`非静的メンバ関数の、暗黙の`const`修飾を削除
+- `constexpr`コンストラクタがbodyを持てるようになった
 
 
 ## 仕様
@@ -137,11 +138,13 @@ constexpr int square(int n)
 ```
 
 
-### `constexpr`関数の戻り値型として、`void`を許可
+### `constexpr`関数の戻り値型として、`void`を許可 / 戻り値型や関数引数で非`const`参照を許可
 `constexpr`関数での、パラメータの型、および戻り値の型は、[リテラル型](/reference/type_traits/is_literal_type.md)に分類される型に限定される。
 
 C++14では、[リテラル型](/reference/type_traits/is_literal_type.md)に分類される型に、`void`が追加された。
 
+また、戻り値型や関数引数で非`const`参照を使うことが許可された。
+
 これにより、`constexpr`関数の戻り値型を`void`とし、非`const`参照のパラメータを書き換えて結果を返す、という操作が許可された。
 
 ```cpp
@@ -173,6 +176,19 @@ C++14ではこの仕様が削除され、`const`か非`const`かを、明示的
 ※この変更によって、既存コードの互換性は壊れない。
 
 
+### `constexpr`コンストラクタがbodyを持てるようになった
+C++11では、`constexpr`コンストラクタのbodyには以下の要素しか持たせることを許されていなかった：
+
+- ヌル文
+- `static_assert`
+- クラスや列挙型を定義しない、別の型名定義
+- `using`宣言と、`using`ディレクティブ
+
+これは事実上`constexpr`コンストラクタのbodyが空でなければいけないことを意味している。
+
+C++14では`constexpr`コンストラクタのbodyに関する制約は一般の`constexpr`関数に従うようになったため、body内でローカル変数を定義したり引数に応じたメンバ変数の書き換えを行ったりすることが許可された。
+
+
 ## この機能が必要になった背景・経緯
 C++は直交性を重視して設計されており、直接関係ない機能同士を組み合わせて使用できる。しかし、C++11での`constexpr`は、その制限によって、ほかの機能(インスタンス、`for`ループ、変数書き換え、例外等)とうまく組み合わせられなかった。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/emplace.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/emplace.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/emplace.md b/reference/variant/variant/emplace.md
index ef1b24907..c8529d306 100644
--- a/reference/variant/variant/emplace.md
+++ b/reference/variant/variant/emplace.md
@@ -7,18 +7,28 @@
 
 ```cpp
 template &amp;lt;class T, class... Args&amp;gt;
-T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                              // (1)
+T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                                        // (1) C++17
+template &amp;lt;class T, class... Args&amp;gt;
+constexpr T&amp;amp; emplace(Args&amp;amp;&amp;amp;... args);                              // (1) C++23
 
 template &amp;lt;class T, class U, class... Args&amp;gt;
-T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (2)
+T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);           // (2) C++17
+template &amp;lt;class T, class U, class... Args&amp;gt;
+constexpr T&amp;amp; emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (2) C++23
 
 template &amp;lt;std::size_t I, class... Args&amp;gt;
 variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
-  emplace(Args&amp;amp;&amp;amp;... args);                               // (3)
+  emplace(Args&amp;amp;&amp;amp;... args);                                         // (3) C++17
+template &amp;lt;std::size_t I, class... Args&amp;gt;
+constexpr variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
+  emplace(Args&amp;amp;&amp;amp;... args);                                         // (3) C++23
 
 template &amp;lt;std::size_t I, class U, class... Args&amp;gt;
 variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
-  emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);  // (4)
+  emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);            // (4) C++17
+template &amp;lt;std::size_t I, class U, class... Args&amp;gt;
+constexpr variant_alternative_t&amp;lt;I, variant&amp;lt;Types...&amp;gt;&amp;gt;&amp;amp;
+  emplace(std::initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);            // (4) C++23
 ```
 * variant_alternative_t[link /reference/variant/variant_alternative.md]
 
@@ -177,3 +187,6 @@ int main()
 - [Clang](/implementation.md#clang): 4.0.1
 - [GCC](/implementation.md#gcc): 7.3
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_assign.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/op_assign.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_assign.md b/reference/variant/variant/op_assign.md
index b98f075a9..24293b012 100644
--- a/reference/variant/variant/op_assign.md
+++ b/reference/variant/variant/op_assign.md
@@ -10,7 +10,9 @@ constexpr variant&amp;amp; operator=(const variant&amp;amp; rhs);              // (1)
 constexpr variant&amp;amp; operator=(variant&amp;amp;&amp;amp; t) noexcept(see below); // (2)
 
 template &amp;lt;class T&amp;gt;
-variant&amp;amp; operator=(T&amp;amp;&amp;amp; rhs) noexcept(see below);               // (3)
+variant&amp;amp; operator=(T&amp;amp;&amp;amp; rhs) noexcept(see below);               // (3) C++17
+template &amp;lt;class T&amp;gt;
+constexpr variant&amp;amp; operator=(T&amp;amp;&amp;amp; rhs) noexcept(see below);     // (3) C++23
 ```
 
 ## 概要
@@ -193,3 +195,4 @@ int main()
 ## 参照
 - [P0608R3 A sane variant converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
 - [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_constructor.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/op_constructor.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_constructor.md b/reference/variant/variant/op_constructor.md
index 280ea9f56..a578926e8 100644
--- a/reference/variant/variant/op_constructor.md
+++ b/reference/variant/variant/op_constructor.md
@@ -30,57 +30,11 @@ template &amp;lt;size_t I, class U, class... Args&amp;gt;
 constexpr explicit variant(in_place_index_t&amp;lt;I&amp;gt;,
                            initializer_list&amp;lt;U&amp;gt; il,
                            Args&amp;amp;&amp;amp;... args);              // (8)
-
-template &amp;lt;class Alloc&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a);                                 // (9)
-
-template &amp;lt;class Alloc&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        const variant&amp;amp; other);                           // (10)
-
-template &amp;lt;class Alloc&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        variant&amp;amp;&amp;amp; other);                                // (11)
-
-template &amp;lt;class Alloc, class T&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        T&amp;amp;&amp;amp; x);                                          // (12)
-
-template &amp;lt;class Alloc, class T, class... Args&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        in_place_type_t&amp;lt;T&amp;gt; il,
-        Args&amp;amp;&amp;amp;... args);                                 // (13)
-
-template &amp;lt;class Alloc, class T, class U, class... Args&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        in_place_type_t&amp;lt;T&amp;gt;,
-        initializer_list&amp;lt;U&amp;gt; il,
-        Args&amp;amp;&amp;amp;... args);                                 // (14)
-
-template &amp;lt;class Alloc, size_t I, class... Args&amp;gt;
-variant(allocator_arg_t,
-       const Alloc&amp;amp; a,
-       in_place_index_t&amp;lt;I&amp;gt;,
-       Args&amp;amp;&amp;amp;... args);                                  // (15)
-
-template &amp;lt;class Alloc, size_t I, class U, class... Args&amp;gt;
-variant(allocator_arg_t,
-        const Alloc&amp;amp; a,
-        in_place_index_t&amp;lt;I&amp;gt;,
-        initializer_list&amp;lt;U&amp;gt; il,
-        Args&amp;amp;&amp;amp;... args);                                 // (16)
 ```
 * size_t[link /reference/cstddef/size_t.md]
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 * in_place_type_t[link /reference/utility/in_place_type_t.md]
 * in_place_index_t[link /reference/utility/in_place_index_t.md]
-* allocator_arg_t[link /reference/memory/allocator_arg_t.md]
 
 ## 概要
 `variant`オブジェクトを構築する。
@@ -93,7 +47,6 @@ variant(allocator_arg_t,
 - (6) : 候補型のうち、指定した型のコンストラクタ引数`il`と`args...`を受け取ってコンストラクタ内でそのオブジェクトを構築して保持する
 - (7) : 候補型のうち、指定したインデックスの型のコンストラクタ引数を受け取ってコンストラクタ内でそのオブジェクトを構築して保持する
 - (8) : 候補型のうち、指定したインデックスの型のコンストラクタ引数`il`と`args...`を受け取ってコンストラクタ内でそのオブジェクトを構築して保持する
-- (9)-(16) : (1)-(8)のuses-allocator構築版
 
 
 ## テンプレートパラメータ制約
@@ -146,8 +99,6 @@ variant(allocator_arg_t,
     - [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`をコンストラクタ引数として`Ti`型オブジェクトを直接構築して`*this`に保持する
 - (8) :
     - `il`と[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`をコンストラクタ引数として`Ti`型オブジェクトを直接構築して`*this`に保持する
-- (9)-(16) :
-    - uses-allocator構築すること以外は、対応するコンストラクタと等価
 
 
 ## 事後条件
@@ -410,5 +361,6 @@ int main()
 
 
 ## 参照
+- [LWG Issue 2901 Variants cannot properly support allocators](https://cplusplus.github.io/LWG/issue2901)
 - [P0608R3 A sane variant converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
 - [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_destructor.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/op_destructor.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_destructor.md b/reference/variant/variant/op_destructor.md
index 39bd9ebaa..9a5b3eb0a 100644
--- a/reference/variant/variant/op_destructor.md
+++ b/reference/variant/variant/op_destructor.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-~variant();
+~variant();            // C++17
+constexpr ~variant();  // C++23
 ```
 
 ## 概要
@@ -34,3 +35,6 @@
 
 ## 関連項目
 - [`std::is_trivially_destructible`](/reference/type_traits/is_trivially_destructible.md)
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/swap.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/swap.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/swap.md b/reference/variant/variant/swap.md
index b7b6aaeb7..a905630c2 100644
--- a/reference/variant/variant/swap.md
+++ b/reference/variant/variant/swap.md
@@ -6,7 +6,8 @@
 * cpp17[meta cpp]
 
 ```cpp
-void swap(variant&amp;amp; rhs) noexcept(see below);
+void swap(variant&amp;amp; rhs) noexcept(see below);            // C++17
+constexpr void swap(variant&amp;amp; rhs) noexcept(see below);  // C++23
 ```
 
 ## 概要
@@ -69,3 +70,6 @@ int main()
 - [Clang](/implementation.md#clang): 4.0.1
 - [GCC](/implementation.md#gcc): 7.3
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- Merge pull request #1015 from cpprefjp/fix-variant</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/swap_free.html"/>
      <id>d32229bcdcc4821f94f0f3357aa8e64aa82daf5b:reference/variant/variant/swap_free.md</id>
      <updated>2023-01-05T18:05:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/swap_free.md b/reference/variant/variant/swap_free.md
index fbf2fa6a0..a1961ca33 100644
--- a/reference/variant/variant/swap_free.md
+++ b/reference/variant/variant/swap_free.md
@@ -7,7 +7,9 @@
 ```cpp
 namespace std {
   template &amp;lt;class... Types&amp;gt;
-  void swap(variant&amp;lt;Types...&amp;gt;&amp;amp; x, variant&amp;lt;Types...&amp;gt;&amp;amp; y) noexcept(see below);
+  void swap(variant&amp;lt;Types...&amp;gt;&amp;amp; x, variant&amp;lt;Types...&amp;gt;&amp;amp; y) noexcept(see below);            // C++17
+  template &amp;lt;class... Types&amp;gt;
+  constexpr void swap(variant&amp;lt;Types...&amp;gt;&amp;amp; x, variant&amp;lt;Types...&amp;gt;&amp;amp; y) noexcept(see below);  // C++23
 }
 ```
 
@@ -71,3 +73,6 @@ int main()
 - [Clang](/implementation.md#clang): 4.0.1
 - [GCC](/implementation.md#gcc): 7.3
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [P2231R1 Missing `constexpr` in `std::optional` and `std::variant`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2231r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>1091761+wx257osn2@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-05-22T14:33:33.445047</updated>
  <id>ea8aec5c-20e6-4cd7-98ac-17a5a94bf67b</id>

  
    <entry>
      <title>equal_range -- map::equal_range : コードにリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/map/map/equal_range.html"/>
      <id>0787abbb191da0fa2fb02fe6f9cc339bfec0d0ba:reference/map/map/equal_range.md</id>
      <updated>2015-05-22 14:33:16 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class map&#34;&gt;map::&lt;/span&gt;equal_range&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;const_iterator, const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;const_iterator, const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内の、&lt;code&gt;x&lt;/code&gt; と等しいキー要素を全て含む範囲の境界を返す。&lt;code&gt;map&lt;/code&gt; コンテナではキーの重複は無いため、この範囲は最大一つの要素を含む。 &lt;/p&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは &lt;code&gt;x&lt;/code&gt; より大きく最も近い値を指す。そうでない場合、&lt;code&gt;x&lt;/code&gt; がコンテナ内の全ての要素よりも大きい場合は &lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; を指す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : &lt;code&gt;key_type&lt;/code&gt;型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;この関数は &lt;code&gt;pair&lt;/code&gt; を返す。ここで &lt;code&gt;pair::first&lt;/code&gt; は &lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x)&lt;/code&gt; が返すであろう値と同じ値で範囲の下境界にあたり、&lt;code&gt;pair::second&lt;/code&gt; は &lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x)&lt;/code&gt; が返すであろう値と同じ値で範囲の上境界にあたる。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; について対数時間。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2), (4) : この関数がオーバーロード解決に参加する条件は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数の備考欄を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; iterator &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ret &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;equal_range&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ret.first; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; ret.second; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;B,1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/count.html&#34;&gt;&lt;code&gt;map::count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;&lt;code&gt;map::lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値より小さくない最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/upper_bound.html&#34;&gt;&lt;code&gt;map::upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;map::find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_range -- map::equal_range : C++14対応として、メンバ関数テンプレート版を追加</title>
      <link href="http://cpprefjp.github.io/reference/map/map/equal_range.html"/>
      <id>d5f0c099b9814e782ee0e498b9601d2177ffc972:reference/map/map/equal_range.md</id>
      <updated>2015-05-22 14:28:58 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class map&#34;&gt;map::&lt;/span&gt;equal_range&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;const_iterator, const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
pair&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;const_iterator, const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  equal_range(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;コンテナ内の、&lt;code&gt;x&lt;/code&gt; と等しいキー要素を全て含む範囲の境界を返す。&lt;code&gt;map&lt;/code&gt; コンテナではキーの重複は無いため、この範囲は最大一つの要素を含む。 &lt;/p&gt;
&lt;p&gt;もし &lt;code&gt;x&lt;/code&gt; がコンテナ内のどのキーともマッチしなかった場合、戻り値の範囲は長さ 0 になり、両方のイテレータは &lt;code&gt;x&lt;/code&gt; より大きく最も近い値を指す。そうでない場合、&lt;code&gt;x&lt;/code&gt; がコンテナ内の全ての要素よりも大きい場合は &lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/end.html&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; を指す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : &lt;code&gt;key_type&lt;/code&gt;型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取り、そのキーと等価なキー要素を全て含むイテレータ範囲を取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;この関数は &lt;code&gt;pair&lt;/code&gt; を返す。ここで &lt;code&gt;pair::first&lt;/code&gt; は &lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x)&lt;/code&gt; が返すであろう値と同じ値で範囲の下境界にあたり、&lt;code&gt;pair::second&lt;/code&gt; は &lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(x)&lt;/code&gt; が返すであろう値と同じ値で範囲の上境界にあたる。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size&lt;/code&gt;&lt;/a&gt; について対数時間。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2), (4) : この関数がオーバーロード解決に参加する条件は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数の備考欄を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
    {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}
  };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; iterator &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator;
  &lt;a href=&#34;http://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;pair&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;iterator, iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ret &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;equal_range&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ret.first; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; ret.second; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;B,1
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/count.html&#34;&gt;&lt;code&gt;map::count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;&lt;code&gt;map::lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値より小さくない最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/upper_bound.html&#34;&gt;&lt;code&gt;map::upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;map::find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_bound -- multimap::upper_bound : C++14対応として、メンバ関数テンプレート版を追加</title>
      <link href="http://cpprefjp.github.io/reference/map/multimap/upper_bound.html"/>
      <id>1a552c79afc730484b41f89fdd59c42a17f1cb8e:reference/map/multimap/upper_bound.md</id>
      <updated>2015-05-21 14:21:13 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class multimap&#34;&gt;multimap::&lt;/span&gt;upper_bound&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;upper_bound&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator upper_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

const_iterator upper_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
const_iterator upper_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; より大きいキーを持つコンテナ内の最初の要素を指すイテレータを返す（コンテナの比較オブジェクトを使う）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound()&lt;/code&gt;&lt;/a&gt; と異なり、このメンバ関数は &lt;code&gt;x&lt;/code&gt; と等しいときは要素へのイテレータを返さず、それは大きい場合にのみ要素へのイテレータを返す。&lt;/p&gt;
&lt;p&gt;内部的に、&lt;code&gt;multimap&lt;/code&gt; コンテナ内の全ての要素は常に比較オブジェクトで定義された基準に従って並ぶため、この関数が返す値に続く全ての要素は &lt;code&gt;x&lt;/code&gt; より大きいことに注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : &lt;code&gt;key_type&lt;/code&gt;型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : キー&lt;code&gt;x&lt;/code&gt;より大きい最初の要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;を返す。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_compare&lt;/code&gt;型の関数オブジェクトを&lt;code&gt;c&lt;/code&gt;、コンテナ内の各要素が持つキーを&lt;code&gt;k&lt;/code&gt;として、キーが小さくないか判定する式&lt;code&gt;c(x, k)&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;となる要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt; を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2), (4) : この関数がオーバーロード解決に参加する条件は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数の備考欄を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}
    };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// B以上D以下の範囲を取得&lt;/span&gt;
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/lower_bound.html&#34;&gt;lower_bound&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;upper_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
    }
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}
    };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;のvoidに対する特殊化を使用することで、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列リテラルを&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/lower_bound.html&#34;&gt;lower_bound&lt;/a&gt;()関数の引数として渡した際に、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;型の一時オブジェクトが生成されない。&lt;/span&gt;
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/lower_bound.html&#34;&gt;lower_bound&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;upper_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;B,1
B,2
C,4
D,5

B,1
B,2
C,4
D,5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値よりも小さくない最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素範囲を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- multimap::lower_bound : メンバ関数テンプレート版がオーバーロード解決に参加する条件を記載</title>
      <link href="http://cpprefjp.github.io/reference/map/multimap/lower_bound.html"/>
      <id>7ade86bcf4dc680375989f4ec8d8603cae010051:reference/map/multimap/lower_bound.md</id>
      <updated>2015-05-20 16:16:40 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class multimap&#34;&gt;multimap::&lt;/span&gt;lower_bound&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;lower_bound&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator lower_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

const_iterator lower_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
const_iterator lower_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; を右辺とする &lt;code&gt;&amp;lt;&lt;/code&gt; 演算が成り立たない最初の要素を指すイテレータを返す（コンテナの比較オブジェクトが使われる）。すなわちこれは &lt;code&gt;&amp;gt;=&lt;/code&gt; 演算にあたる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound()&lt;/code&gt;&lt;/a&gt; とは異なり、このメンバ関数は &lt;code&gt;x&lt;/code&gt; より大きいだけでなく、&lt;code&gt;x&lt;/code&gt; と等しい場合であってもその要素へのイテレータを返す。&lt;/p&gt;
&lt;p&gt;内部的には &lt;code&gt;multimap&lt;/code&gt; コンテナ内の全ての要素は常に比較オブジェクトが定義する基準に沿って並んでいるため、この関数が返すいずれかの後に続く全ての要素が &lt;code&gt;x&lt;/code&gt; より大きいか等しいことに注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : &lt;code&gt;key_type&lt;/code&gt;型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取り、そのキーより小さくない最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : コンテナ内で &lt;code&gt;x&lt;/code&gt; を右辺とする &lt;code&gt;&amp;lt;&lt;/code&gt; 演算が成り立たない最初の要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;を返す。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_compare&lt;/code&gt;型の関数オブジェクトを&lt;code&gt;c&lt;/code&gt;、コンテナ内の各要素が持つキーを&lt;code&gt;k&lt;/code&gt;として、キーが小さくないか判定する式&lt;code&gt;!c(k, x)&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;となる要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt; を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2), (4) : この関数がオーバーロード解決に参加する条件は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数の備考欄を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}
    };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// B以上D以下の範囲を取得&lt;/span&gt;
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;lower_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/upper_bound.html&#34;&gt;upper_bound&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
    }
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}
    };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;のvoidに対する特殊化を使用することで、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列リテラルを&lt;span style=&#34;color:#ff0000&#34;&gt;lower_bound&lt;/span&gt;()関数の引数として渡した際に、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;型の一時オブジェクトが生成されない。&lt;/span&gt;
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;lower_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/upper_bound.html&#34;&gt;upper_bound&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;B,1
B,2
C,4
D,5

B,1
B,2
C,4
D,5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/upper_bound.html&#34;&gt;&lt;code&gt;upper_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;特定の値よりも大きい最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素範囲を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/multimap/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>upper_bound -- map::upper_bound : C++14対応として、メンバ関数テンプレート版を追加</title>
      <link href="http://cpprefjp.github.io/reference/map/map/upper_bound.html"/>
      <id>758fb7c956108327554cd4b05eb35a11c62a8554:reference/map/map/upper_bound.md</id>
      <updated>2015-05-20 14:26:23 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;map&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class map&#34;&gt;map::&lt;/span&gt;upper_bound&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;iterator &lt;span style=&#34;color: #0000FF&#34;&gt;upper_bound&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);             &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
iterator upper_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++14&lt;/span&gt;

const_iterator upper_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; key_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
const_iterator upper_bound(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; K&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt;;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4) C++14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; より大きいキーを持つコンテナ内の最初の要素を指すイテレータを返す（コンテナの比較オブジェクトを使う）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound()&lt;/code&gt;&lt;/a&gt; と異なり、このメンバ関数は &lt;code&gt;x&lt;/code&gt; と等しいときは要素へのイテレータを返さず、それは大きい場合にのみ要素へのイテレータを返す。&lt;/p&gt;
&lt;p&gt;内部的に、&lt;code&gt;map&lt;/code&gt; コンテナ内の全ての要素は常に比較オブジェクトで定義された基準に従って並ぶため、この関数が返す値に続く全ての要素は &lt;code&gt;x&lt;/code&gt; より大きいことに注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : &lt;code&gt;key_type&lt;/code&gt;型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_type&lt;/code&gt;と比較可能な&lt;code&gt;K&lt;/code&gt;型のキーを受け取り、そのキーより大きい最初の要素へのイテレータを取得する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1), (3) : キー&lt;code&gt;x&lt;/code&gt;より大きい最初の要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt;を返す。&lt;/li&gt;
&lt;li&gt;(2), (4) : &lt;code&gt;key_compare&lt;/code&gt;型の関数オブジェクトを&lt;code&gt;c&lt;/code&gt;、コンテナ内の各要素が持つキーを&lt;code&gt;k&lt;/code&gt;として、キーが小さくないか判定する式&lt;code&gt;c(x, k)&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;となる要素へのイテレータを返す。そのような要素がない場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/end.html&#34;&gt;&lt;code&gt;end()&lt;/code&gt;&lt;/a&gt; を返す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/size.html&#34;&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/a&gt; について対数時間。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(2), (4) : この関数がオーバーロード解決に参加する条件は、&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt;メンバ関数の備考欄を参照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}
    };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// B以上D以下の範囲を取得&lt;/span&gt;
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;lower_bound&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;upper_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
    }
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;, &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;less&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;A&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;},
      {&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;}
    };

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/functional/less.html&#34;&gt;std::less&lt;/a&gt;のvoidに対する特殊化を使用することで、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列リテラルを&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;lower_bound&lt;/a&gt;()関数の引数として渡した際に、&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::string&lt;/a&gt;型の一時オブジェクトが生成されない。&lt;/span&gt;
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;lower_bound&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;B&#34;&lt;/span&gt;);
    decltype(m)&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;iterator last &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; m.&lt;span style=&#34;color:#ff0000&#34;&gt;upper_bound&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;D&#34;&lt;/span&gt;);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last) {
      &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
      &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it;
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;B,1
C,4
D,5

B,1
C,4
D,5
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/lower_bound.html&#34;&gt;&lt;code&gt;lower_bound&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;与えられた値よりも小さくない最初の要素へのイテレータを返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/equal_range.html&#34;&gt;&lt;code&gt;equal_range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素範囲を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/find.html&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーで要素を探す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/map/map/count.html&#34;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定したキーにマッチする要素の数を返す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3657.htm&#34; target=&#34;_blank&#34;&gt;N3657 Adding heterogeneous comparison lookup to associative containers (rev 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
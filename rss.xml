<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-09-28T23:19:23.806983</updated>
  <id>f65cfcc4-651a-4302-a31a-1394beda09be</id>

  
    <entry>
      <title>counted_iterator -- &lt;ranges&gt; countedを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator.html"/>
      <id>10917342ca47f0e85687faa17c87db106552c871:reference/iterator/counted_iterator.md</id>
      <updated>2021-09-29T08:13:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator.md b/reference/iterator/counted_iterator.md
index a75053774..e5f100af1 100644
--- a/reference/iterator/counted_iterator.md
+++ b/reference/iterator/counted_iterator.md
@@ -131,7 +131,7 @@ int main() {
 
 ## 関連項目
 
-- [`views::counted`](/reference/ranges/counted.md.nolink)
+- [`views::counted`](/reference/ranges/counted.md)
 - [`take_view`](/reference/ranges/take_view.md)
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt; countedを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>10917342ca47f0e85687faa17c87db106552c871:reference/ranges.md</id>
      <updated>2021-09-29T08:13:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 6d2f62026..718b4336a 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -234,9 +234,9 @@ range | adaptor(args...)
 
 ### counted view
 
-| 名前                                  | 説明           | 対応バージョン |
-|---------------------------------------|----------------|----------------|
-| [`counted`](ranges/counted.md.nolink) | イテレータを指定した数だけ進めるビューを生成する (customization point object)  | C++20          |
+| 名前                           | 説明                                                                                          | 対応バージョン |
+|--------------------------------|-----------------------------------------------------------------------------------------------|----------------|
+| [`counted`](ranges/counted.md) | イテレータから指定した数の範囲をRangeとして扱うビューを生成する (customization point object)  | C++20          |
 
 ### common view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>counted -- &lt;ranges&gt; countedを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/counted.html"/>
      <id>10917342ca47f0e85687faa17c87db106552c871:reference/ranges/counted.md</id>
      <updated>2021-09-29T08:13:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/counted.md b/reference/ranges/counted.md
new file mode 100644
index 000000000..337216ba2
--- /dev/null
+++ b/reference/ranges/counted.md
@@ -0,0 +1,84 @@
+# counted
+* ranges[meta header]
+* std::ranges[meta namespace]
+* cpo[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  namespace ranges {
+    namespace views {
+      inline constexpr /*unspecified*/ counted = /*unspecified*/;
+    }
+  }
+
+  namespace views = ranges::views;
+}
+```
+
+## 概要
+イテレータ`i`と数`n`に対して、範囲`[i, i + n)`をRangeとして扱う[`view`](view.md)を生成するカスタマイゼーションポイントオブジェクト。実際に生成するのは[`subrange`](subrange.md)か[`span`](/reference/span/span.md)である。
+
+`counted`は、手元にイテレータだけがあるとき、そこから指定個数までの範囲をRangeとして扱うために使用できる。これは、ポインタと個数で定まる範囲を[`contiguous_range`](contiguous_range.md)として扱う[`span`](/reference/span/span.md)を、一般のイテレータに拡張したものである。
+
+`counted`はRangeアダプタオブジェクトではないので、パイプライン記法は使用できない。
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+| ○       | ○    | ※     | ※    | ※      | ※            | ※            | ※         | ※     | ○       | ○   |
+
+※ イテレータに従う
+
+## 効果
+
+式`E`をイテレータ、式`F`を進める数、イテレータ型`T`を[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;`[`decltype`](/lang/cpp11/decltype.md)`((E))&amp;gt;`、イテレータの差の型`D`を[`iter_difference_t`](/reference/iterator/iter_difference_t.md)`&amp;lt;T&amp;gt;`とする。式`views::counted(E, F)`の効果は以下の通り。
+
+- [`decltype`](/lang/cpp11/decltype.md)`((F))`が[`convertible_to`](/reference/concepts/convertible_to.md)`&amp;lt;D&amp;gt;`のモデルでなければ、呼び出しは不適格。
+- `T`が[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)のモデルであれば、[`span`](/reference/span/span.md)`{`[`to_address`](/reference/memory/to_address.md)`(E), static_cast&amp;lt;D&amp;gt;(F)}`と等しい。
+- `T`が[`random_access_iterator`](/reference/iterator/random_access_iterator.md)のモデルであれば、[`subrange`](subrange.md)`{E, E + static_cast&amp;lt;D&amp;gt;(F)}`と等しい。
+- それ以外のとき、[`subrange`](subrange.md)`{`[`counted_iterator`](/reference/iterator/counted_iterator.md)`{E, F}, `[`default_sentinel`](/reference/iterator/default_sentinel_t.md)`}`と等しい。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  vector&amp;lt;int&amp;gt; v;
+  
+
+  for (int i = 0; auto&amp;amp; elem : views::counted(back_inserter(v), 5)) {
+    elem = i++;
+  }
+
+  for(int elem : v) {
+    cout &amp;lt;&amp;lt; elem;
+  }
+}
+```
+* views::counted[color ff0000]
+* back_inserter[link /reference/iterator/back_inserter.md]
+
+### 出力
+```
+01234
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>output_range -- &lt;ranges&gt; countedを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/output_range.html"/>
      <id>10917342ca47f0e85687faa17c87db106552c871:reference/ranges/output_range.md</id>
      <updated>2021-09-29T08:13:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/output_range.md b/reference/ranges/output_range.md
index 5b690747c..d0eef1bf1 100644
--- a/reference/ranges/output_range.md
+++ b/reference/ranges/output_range.md
@@ -42,7 +42,7 @@ int main() {
 }
 ```
 * ranges::output_range[color ff0000]
-* views::counted[link counted.md.nolink]
+* views::counted[link counted.md]
 * ostream_iterator[link /reference/iterator/ostream_iterator.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_view -- common_view 説明を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view.html"/>
      <id>6c0273c0adb748874068b70ac37319d4959e820a:reference/ranges/common_view.md</id>
      <updated>2021-09-29T08:00:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view.md b/reference/ranges/common_view.md
index 42c78838b..8c97120fe 100644
--- a/reference/ranges/common_view.md
+++ b/reference/ranges/common_view.md
@@ -1,4 +1,4 @@
-# ref_view
+# common_view
 * ranges[meta header]
 * std::ranges[meta namespace]
 * class template[meta id-type]
@@ -42,7 +42,7 @@ namespace std {
 ## テンプレートパラメータ制約
 
 - [`view`](view.md)`&amp;lt;V&amp;gt;`
-- ![`common_range`](common_range.md)`&amp;lt;V&amp;gt;`
+- `!`[`common_range`](common_range.md)`&amp;lt;V&amp;gt;`
 - [`copyable`](/reference/concepts/copyable.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_range -- &lt;ranges&gt; common_rangeの説明を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_range.html"/>
      <id>4f7bf0a49e8959fa137bd582969053fd25af06a9:reference/ranges/common_range.md</id>
      <updated>2021-09-29T03:53:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_range.md b/reference/ranges/common_range.md
index 67999d9ce..7725434f3 100644
--- a/reference/ranges/common_range.md
+++ b/reference/ranges/common_range.md
@@ -39,6 +39,13 @@ namespace std::ranges {
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
 
+## 関連項目
+
+- [C++17 範囲 for ループの制限緩和](/lang/cpp17/generalizing_the_range-based_for_loop.md)  
+  範囲for文は、C++17の時点で先行して`common_range`ではない範囲を扱えるようになっている
+- [`views::common`](common_view.md)  
+  任意の範囲を`common_range`に変換するRangeアダプタオブジェクト
+
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_iterator -- &lt;ranges&gt; common_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator.html"/>
      <id>730d4474b4fc544fc54653a76ca59d4bf7e70c8e:reference/iterator/common_iterator.md</id>
      <updated>2021-09-29T03:51:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator.md b/reference/iterator/common_iterator.md
index 28f9ad745..bfe04e2ad 100644
--- a/reference/iterator/common_iterator.md
+++ b/reference/iterator/common_iterator.md
@@ -142,7 +142,7 @@ int main() {
 ## 関連項目
 
 - [`common_range`](/reference/ranges/common_range.md)
-- [`common_view`](/reference/ranges/common_view.md.nolink)
+- [`common_view`](/reference/ranges/common_view.md)
 
 ## 参照
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt; common_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>730d4474b4fc544fc54653a76ca59d4bf7e70c8e:reference/ranges.md</id>
      <updated>2021-09-29T03:51:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 15c61ee3d..6d2f62026 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -240,10 +240,10 @@ range | adaptor(args...)
 
 ### common view
 
-| 名前                                          | 説明           | 対応バージョン |
-|-----------------------------------------------|----------------|----------------|
-| [`common_view`](ranges/common_view.md.nolink) | `common_range`にしたビュー (class template)     | C++20          |
-| [`common`](ranges/common.md.nolink)           | `common_range`なビューを生成する (customization point object)  | C++20          |
+| 名前                                   | 説明                                                          | 対応バージョン |
+|----------------------------------------|---------------------------------------------------------------|----------------|
+| [`common_view`](ranges/common_view.md) | `common_range`にしたビュー (class template)                   | C++20          |
+| [`common`](ranges/common_view.md)      | `common_range`なビューを生成する (customization point object) | C++20          |
 
 ### reverse view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ref_view -- &lt;ranges&gt; common_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/common_view.html"/>
      <id>730d4474b4fc544fc54653a76ca59d4bf7e70c8e:reference/ranges/common_view.md</id>
      <updated>2021-09-29T03:51:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/common_view.md b/reference/ranges/common_view.md
new file mode 100644
index 000000000..42c78838b
--- /dev/null
+++ b/reference/ranges/common_view.md
@@ -0,0 +1,126 @@
+# ref_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  namespace ranges {
+    template&amp;lt;view V&amp;gt;
+    requires (!common_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; copyable&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt;)
+    class common_view : public view_interface&amp;lt;common_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
+
+    namespace views {
+      inline constexpr /*unspecified*/ common = /*unspecified*/;     // (2)
+    }
+  }
+
+  namespace views = ranges::views;
+}
+```
+* view[link view.md]
+* common_range[link common_range.md]
+* is_object_v[link /reference/type_traits/is_object.md]
+* copyable[link /reference/concepts/copyable.md]
+* iterator_t[link iterator_t.md]
+
+## 概要
+- (1): 任意のRangeを[`common_range`](common_range.md)にする[`view`](view.md)
+- (2): `common_view`または同じ効果を実現する[`view`](view.md)を生成するRangeアダプタオブジェクト
+
+同じ型のイテレータペアを受け取るレガシーなアルゴリズム関数に対して、[`common_range`](common_range.md)ではない範囲を渡したい場合、`common`を使用することで同じ型のイテレータペアを取得できるようになる。
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+| ○       | ※    | ※     | ※    | ※      | ※            | ※            | ※         | ○     | ○       | ○   |
+
+※ 参照先のRangeに従う
+
+## テンプレートパラメータ制約
+
+- [`view`](view.md)`&amp;lt;V&amp;gt;`
+- ![`common_range`](common_range.md)`&amp;lt;V&amp;gt;`
+- [`copyable`](/reference/concepts/copyable.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+
+## 効果
+
+- (2): 式`views::common(E)`の効果は次の通り
+    - [`decltype`](/lang/cpp11/decltype.md)`((E))`が[`common_range`](common_range.md)のモデルであり、[`views::all`](ref_view.md)`(E)`が有効な式であれば、[`views::all`](ref_view.md)`(E)`と等しい
+    - それ以外のとき、`common_view{E}`と等しい
+
+## メンバ関数
+
+| 名前                                             | 説明                              | 対応バージョン |
+|--------------------------------------------------|-----------------------------------|----------------|
+| [`(constructor)`](ref_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
+| [`base`](ref_view/base.md.nolink)                     | `R`の参照を取得する               | C++20          |
+| [`begin`](ref_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
+| [`end`](ref_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
+| [`size`](ref_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
+
+`r`を参照先のRangeとする。`size`は、[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`data`](view_interface/data.md)             | Rangeの先頭へのポインタを取得する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](ref_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main() {
+  using namespace std;
+
+  // 無限長のiotaはcommon_rangeではない
+  static_assert(!ranges::common_range&amp;lt;decltype(views::iota(0))&amp;gt;);
+  // commonを適用するとcommon_rangeになる
+  static_assert(ranges::common_range&amp;lt;decltype(views::iota(0) | views::common)&amp;gt;);
+
+  // 元からcommon_rangeなviewに適用しても型は変わらない
+  static_assert(same_as&amp;lt;decltype(string_view{} | views::common), string_view&amp;gt;);
+}
+```
+* views::common[color ff0000]
+* views::iota[link iota_view.md]
+* same_as[link /reference/concepts/same_as.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 関連項目
+
+- [C++17 範囲 for ループの制限緩和](/lang/cpp17/generalizing_the_range-based_for_loop.md)  
+  範囲for文は、C++17の時点で先行して[`common_range`](common_range.md)ではない範囲を扱えるようになっている。
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- &lt;ranges&gt; take_while_view, drop_while_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>2608fd39c2a3caff02b5ccc06a7901b7d8df5b89:reference/ranges.md</id>
      <updated>2021-09-28T07:53:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 8200dca1a..15c61ee3d 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -199,10 +199,10 @@ range | adaptor(args...)
 
 ### take while view
 
-| 名前                                                  | 説明           | 対応バージョン |
-|-------------------------------------------------------|----------------|----------------|
-| [`take_while_view`](ranges/take_while_view.md.nolink) | 先頭から指定した条件を満たす範囲を取り出すビュー (class template)     | C++20          |
-| [`take_while`](ranges/take_while.md.nolink)           | 先頭から指定した条件を満たす範囲を取り出すビューを生成する (customization point object)  | C++20          |
+| 名前                                           | 説明                                                              | 対応バージョン |
+|------------------------------------------------|-------------------------------------------------------------------|----------------|
+| [`take_while_view`](ranges/take_while_view.md) | 先頭から指定した条件を満たす範囲を取り出すビュー (class template) | C++20          |
+| [`take_while`](ranges/take_while_view.md)      | `take_while_view`を生成する (customization point object)          | C++20          |
 
 ### drop view
 
@@ -213,10 +213,10 @@ range | adaptor(args...)
 
 ### drop while view
 
-| 名前                                                  | 説明           | 対応バージョン |
-|-------------------------------------------------------|----------------|----------------|
-| [`drop_while_view`](ranges/drop_while_view.md.nolink) | 先頭から指定した条件を満たす範囲を除外するビュー (class template)     | C++20          |
-| [`drop_while`](ranges/drop_while.md.nolink)           | 先頭から指定した条件を満たす範囲を除外するビューを生成する (customization point object)  | C++20          |
+| 名前                                           | 説明                                                              | 対応バージョン |
+|------------------------------------------------|-------------------------------------------------------------------|----------------|
+| [`drop_while_view`](ranges/drop_while_view.md) | 先頭から指定した条件を満たす範囲を除外するビュー (class template) | C++20          |
+| [`drop_while`](ranges/drop_while_view.md)      | `drop_while_view`を生成する (customization point object)          | C++20          |
 
 ### join view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>drop_while_view -- &lt;ranges&gt; take_while_view, drop_while_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_while_view.html"/>
      <id>2608fd39c2a3caff02b5ccc06a7901b7d8df5b89:reference/ranges/drop_while_view.md</id>
      <updated>2021-09-28T07:53:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_while_view.md b/reference/ranges/drop_while_view.md
new file mode 100644
index 000000000..fc42aadec
--- /dev/null
+++ b/reference/ranges/drop_while_view.md
@@ -0,0 +1,112 @@
+# drop_while_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  namespace ranges {
+    template&amp;lt;view V, class Pred&amp;gt;
+    requires input_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt; &amp;amp;&amp;amp; indirect_unary_predicate&amp;lt;const Pred, iterator_t&amp;lt;V&amp;gt;&amp;gt;
+    class drop_while_view : public view_interface&amp;lt;drop_while_view&amp;lt;V, Pred&amp;gt;&amp;gt; { …… }; // (1)
+
+    namespace views {
+      inline constexpr /*unspecified*/ drop_while = /*unspecified*/;     // (2)
+    }
+  }
+
+  namespace views = ranges::views;
+}
+```
+* view[link view.md]
+* input_range[link input_range.md]
+* is_object_v[link /reference/type_traits/is_object.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* iterator_t[link iterator_t.md]
+* view_interface[link view_interface.md]
+
+## 概要
+- (1): 元のRangeの先頭から指定した条件を連続して満たす範囲を除外する[`view`](view.md)
+- (2): `drop_while_view`を生成するRangeアダプタオブジェクト
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+|          |       | (1)    | (1)   | (1)     | (1)           | (1)           | (1)        |        | ○       | ○   |
+
+- (1): `V`に従う
+
+## テンプレートパラメータ制約
+
+- [`view`](view.md)`&amp;lt;V&amp;gt;`
+- [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
+- [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;Pred&amp;gt;`
+- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred, `[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+
+## 効果
+
+- (2): 式`views::drop_while(E, F)`の効果は`drop_while_view{E, F}`と等しい
+
+## メンバ関数
+
+| 名前                                                         | 説明                             | 対応バージョン |
+|--------------------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](drop_while_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
+| [`base`](drop_while_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
+| [`pred`](drop_while_view/pred.md.nolink)                     | 述語を取得する                   | C++20          |
+| [`begin`](drop_while_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](drop_while_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`data`](view_interface/data.md)             | Rangeの先頭へのポインタを取得する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](drop_while_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+
+  for (int i : views::iota(1, 10) | views::drop_while([](int x){ return x &amp;lt; 5; })) {
+    cout &amp;lt;&amp;lt; i;
+  }
+}
+```
+* views::drop_while[color ff0000]
+* views::iota[link iota_view.md]
+
+### 出力
+```
+56789
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_while_view -- &lt;ranges&gt; take_while_view, drop_while_viewを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view.html"/>
      <id>2608fd39c2a3caff02b5ccc06a7901b7d8df5b89:reference/ranges/take_while_view.md</id>
      <updated>2021-09-28T07:53:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view.md b/reference/ranges/take_while_view.md
new file mode 100644
index 000000000..0b29bd9ce
--- /dev/null
+++ b/reference/ranges/take_while_view.md
@@ -0,0 +1,112 @@
+# take_while_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  namespace ranges {
+    template&amp;lt;view V, class Pred&amp;gt;
+    requires input_range&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt; &amp;amp;&amp;amp; indirect_unary_predicate&amp;lt;const Pred, iterator_t&amp;lt;V&amp;gt;&amp;gt;
+    class take_while_view : public view_interface&amp;lt;take_while_view&amp;lt;V, Pred&amp;gt;&amp;gt; { …… }; // (1)
+
+    namespace views {
+      inline constexpr /*unspecified*/ take_while = /*unspecified*/;     // (2)
+    }
+  }
+
+  namespace views = ranges::views;
+}
+```
+* view[link view.md]
+* input_range[link input_range.md]
+* is_object_v[link /reference/type_traits/is_object.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* iterator_t[link iterator_t.md]
+* view_interface[link view_interface.md]
+
+## 概要
+- (1): 元のRangeの先頭から指定した条件を連続して満たす範囲を取り出す[`view`](view.md)
+- (2): `take_while_view`を生成するRangeアダプタオブジェクト
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+|          |       | (1)    | (1)   | (1)     | (1)           | (1)           | (1)        |        | ○       | ○   |
+
+- (1): `V`に従う
+
+## テンプレートパラメータ制約
+
+- [`view`](view.md)`&amp;lt;V&amp;gt;`
+- [`input_range`](input_range.md)`&amp;lt;V&amp;gt;`
+- [`is_object_v`](/reference/type_traits/is_object.md)`&amp;lt;Pred&amp;gt;`
+- [`indirect_unary_predicate`](/reference/iterator/indirect_unary_predicate.md)`&amp;lt;Pred, `[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+
+## 効果
+
+- (2): 式`views::take_while(E, F)`の効果は`take_while_view{E, F}`と等しい
+
+## メンバ関数
+
+| 名前                                                         | 説明                             | 対応バージョン |
+|--------------------------------------------------------------|----------------------------------|----------------|
+| [`(constructor)`](take_while_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
+| [`base`](take_while_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
+| [`pred`](take_while_view/pred.md.nolink)                     | 述語を取得する                   | C++20          |
+| [`begin`](take_while_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](take_while_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`data`](view_interface/data.md)             | Rangeの先頭へのポインタを取得する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](take_while_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+
+  for (int i : views::iota(1) | views::take_while([](int x){ return x &amp;lt; 5; })) {
+    cout &amp;lt;&amp;lt; i;
+  }
+}
+```
+* views::take_while[color ff0000]
+* views::iota[link iota_view.md]
+
+### 出力
+```
+1234
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
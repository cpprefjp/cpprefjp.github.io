<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++ Reference Site</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2014-12-24T02:01:12.439615</updated>
  <id>06957490-cb48-4b37-8310-57aeec018de3</id>

  
    <entry>
      <title>int_fast16_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/int_fast16_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/int_fast16_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;int_fast16_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;signed&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int_fast16_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;16ビット以上の、通常最も高速に処理される符号付き整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/int16_t.html&#34;&gt;&lt;code&gt;int16_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>int_fast32_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/int_fast32_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/int_fast32_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;int_fast32_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;signed&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int_fast32_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;32ビット以上の、通常最も高速に処理される符号付き整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/int32_t.html&#34;&gt;&lt;code&gt;int32_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>int_fast64_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/int_fast64_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/int_fast64_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;int_fast64_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;signed&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int_fast64_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;64ビット以上の、通常最も高速に処理される符号付き整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/int64_t.html&#34;&gt;&lt;code&gt;int64_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>int_fast8_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/int_fast8_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/int_fast8_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;int_fast8_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;signed&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int_fast8_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;8ビット以上の、通常最も高速に処理される符号付き整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/int8_t.html&#34;&gt;&lt;code&gt;int8_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>int_least16_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/int_least16_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/int_least16_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;int_least16_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;signed&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int_least16_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;16ビット以上の、最も小さい符号付き整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/int16_t.html&#34;&gt;&lt;code&gt;int16_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>int_least32_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/int_least32_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/int_least32_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;int_least32_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;signed&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int_least32_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;32ビット以上の、最も小さい符号付き整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/int32_t.html&#34;&gt;&lt;code&gt;int32_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>int_least64_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/int_least64_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/int_least64_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;int_least64_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;signed&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int_least64_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;64ビット以上の、最も小さい符号付き整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/int64_t.html&#34;&gt;&lt;code&gt;int64_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>int_least8_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/int_least8_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/int_least8_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;int_least8_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;signed&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int_least8_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;8ビット以上の、最も小さい符号付き整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/int8_t.html&#34;&gt;&lt;code&gt;int8_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uint_fast16_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/uint_fast16_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/uint_fast16_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;uint_fast16_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unsigned&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;uint_fast16_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;16ビット以上の、通常最も高速に処理される符号なし整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint16_t.html&#34;&gt;&lt;code&gt;uint16_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uint_fast32_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/uint_fast32_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;uint_fast32_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unsigned&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;uint_fast32_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;32ビット以上の、通常最も高速に処理される符号なし整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint32_t.html&#34;&gt;&lt;code&gt;uint32_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uint_fast64_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/uint_fast64_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;uint_fast64_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unsigned&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;uint_fast64_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;64ビット以上の、通常最も高速に処理される符号なし整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint64_t.html&#34;&gt;&lt;code&gt;uint64_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uint_fast8_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/uint_fast8_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/uint_fast8_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;uint_fast8_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unsigned&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;uint_fast8_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;8ビット以上の、通常最も高速に処理される符号なし整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint8_t.html&#34;&gt;&lt;code&gt;uint8_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uint_least16_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/uint_least16_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/uint_least16_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;uint_least16_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unsigned&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;uint_least16_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;16ビット以上の、最も小さい符号なし整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint16_t.html&#34;&gt;&lt;code&gt;uint16_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uint_least32_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/uint_least32_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/uint_least32_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;uint_least32_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unsigned&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;uint_least32_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;32ビット以上の、最も小さい符号なし整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint32_t.html&#34;&gt;&lt;code&gt;uint32_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uint_least64_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/uint_least64_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/uint_least64_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;uint_least64_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unsigned&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;uint_least64_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;64ビット以上の、最も小さい符号なし整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint64_t.html&#34;&gt;&lt;code&gt;uint64_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uint_least8_t (C++11) -- [u]int_[fast | least][8 | 16 | 32 | 64]_t : この型を使用する必要がある状況を記載</title>
      <link href="http://cpprefjp.github.io/reference/cstdint/uint_least8_t.html"/>
      <id>b51c48ee2c1e88ce44566f04374fda212d7b26ac:reference/cstdint/uint_least8_t.md</id>
      <updated>2014-12-24 02:00:59 +0900</updated>
      
        <content type="html">&lt;h1&gt;uint_least8_t (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;unsigned&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;integer&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;type&lt;/i&gt; &lt;span style=&#34;color: #B00040&#34;&gt;uint_least8_t&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;8ビット以上の、最も小さい符号なし整数型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint8_t.html&#34;&gt;&lt;code&gt;uint8_t&lt;/code&gt;&lt;/a&gt;型が環境によっては定義されないため、そのような状況でこの型を使用する。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>knuth_b (C++11) -- パラメータ設定済みの擬似乱数生成器に、シードと生成される値の型を記載。</title>
      <link href="http://cpprefjp.github.io/reference/random/knuth_b.html"/>
      <id>fcad3d613c073379b846bbf4ebd63913d87cd893:reference/random/knuth_b.md</id>
      <updated>2014-12-24 01:51:37 +0900</updated>
      
        <content type="html">&lt;h1&gt;knuth_b (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/shuffle_order_engine.html&#34;&gt;shuffle_order_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;minstd_rand0&lt;/a&gt;, &lt;span style=&#34;color: #666666&#34;&gt;256&amp;gt;&lt;/span&gt;
  knuth_b;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;knuth_b&lt;/code&gt;は、MINSTD最小標準乱数生成器である&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;&lt;code&gt;minstd_rand0&lt;/code&gt;&lt;/a&gt;の生成順を並び替えた乱数生成法である。  &lt;/p&gt;
&lt;p&gt;Donald Knuth氏の著書『The Art of Computer Programming, Second Edition, Volume 2, Seminumerical Algorithms』で考案された、リオーダーアルゴリズムBがそれだ。  &lt;/p&gt;
&lt;p&gt;このアルゴリズムは、Microsoft .NET Frameworkの&lt;a href=&#34;http://msdn.microsoft.com/ja-jp/library/system.random.aspx&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;System.Random&lt;/code&gt;&lt;/a&gt;クラスにも、実装として使用されている。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;knuth_b&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;1112339016&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;不明(Boost.Randomのドキュメントより)&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;&lt;code&gt;uint_fast32_t&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;knuth_b engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1626011263
899717059
1316478681
732866635
512074444
354532979
2021640279
2002307542
2064026990
375634814
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1933.pdf&#34; target=&#34;_blank&#34;&gt;N1933 Improvements to TR1&#39;s Facility for Random Number Generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minstd_rand (C++11) -- パラメータ設定済みの擬似乱数生成器に、シードと生成される値の型を記載。</title>
      <link href="http://cpprefjp.github.io/reference/random/minstd_rand.html"/>
      <id>fcad3d613c073379b846bbf4ebd63913d87cd893:reference/random/minstd_rand.md</id>
      <updated>2014-12-24 01:51:37 +0900</updated>
      
        <content type="html">&lt;h1&gt;minstd_rand (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;linear_congruential_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;, &lt;span style=&#34;color: #666666&#34;&gt;48271&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2147483647&amp;gt;&lt;/span&gt;
  minstd_rand;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最小標準MINSTD乱数生成器。  &lt;/p&gt;
&lt;p&gt;これは線形合同法に、より良いパラメータを設定したものである。&lt;/p&gt;
&lt;p&gt;オリジナルのMINSTDパラメータは、&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;&lt;code&gt;std::minstd_rand0&lt;/code&gt;&lt;/a&gt;の方で、1988年にStephen K. ParkとKeith W. Millerによって考案された。この&lt;code&gt;minstd_rand&lt;/code&gt;はパラメータ改良版で、1993年にStephen K. Park、Keith W. Miller、Paul K. Stockmeyerによって推奨された。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;C言語標準ライブラリの&lt;code&gt;rand()&lt;/code&gt;関数は、実装によっては問題のある&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;線形合同法&lt;/a&gt;のパラメータが設定されていた。たとえば、実装によっては以下のような問題が発生していた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成される値の最下位ビットは、&lt;code&gt;0&lt;/code&gt;と&lt;code&gt;1&lt;/code&gt;が交互に生成されていた。これにより、生成される値は偶数と奇数が交互になっていた。&lt;/li&gt;
&lt;li&gt;生成される値の最大値が非常に小さく、&lt;code&gt;RAND_MAX&lt;/code&gt;の値が&lt;code&gt;32767&lt;/code&gt;となっていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MINSTDでは、このような問題は発生しない。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;minstd_rand&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;399268537&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;2&lt;sup&gt;31&lt;/sup&gt; - 2&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;&lt;code&gt;uint_fast32_t&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minstd_rand engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;634377512
1067559179
1131536097
1279860489
1336107623
2022183129
1080129221
162161378
113984123
274497719
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Lehmer_random_number_generator&#34; target=&#34;_blank&#34;&gt;Lehmer random number generator - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://random.mat.sbg.ac.at/results/karl/server/node4.html#SECTION00042000000000000000&#34; target=&#34;_blank&#34;&gt;MINSTD - Classical LSGs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&#34;Random Number Generators: Good ones are hard to find&#34;, Stephen K. Park and Keith W. Miller, Communications of the ACM, Vol. 31, No. 10, October 1988, pp. 1192-1201&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minstd_rand0 (C++11) -- パラメータ設定済みの擬似乱数生成器に、シードと生成される値の型を記載。</title>
      <link href="http://cpprefjp.github.io/reference/random/minstd_rand0.html"/>
      <id>fcad3d613c073379b846bbf4ebd63913d87cd893:reference/random/minstd_rand0.md</id>
      <updated>2014-12-24 01:51:37 +0900</updated>
      
        <content type="html">&lt;h1&gt;minstd_rand0 (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;linear_congruential_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;, &lt;span style=&#34;color: #666666&#34;&gt;16807&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2147483647&amp;gt;&lt;/span&gt;
  minstd_rand0;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最小標準MINSTD乱数生成器。&lt;/p&gt;
&lt;p&gt;これは線形合同法に、より良いパラメータを設定したものである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;minstd_rand0&lt;/code&gt;は、オリジナルのMINSTDパラメータであり、1988年にStephen K. ParkとKeith W. Millerによって考案された。&lt;/p&gt;
&lt;p&gt;1993年にStephen K. Park、Keith W. Miller、Paul K. Stockmeyerによって推奨された、パラメータ改良版である&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand.html&#34;&gt;&lt;code&gt;minstd_rand&lt;/code&gt;&lt;/a&gt;もまた定義されている。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;C言語標準ライブラリの&lt;code&gt;rand()&lt;/code&gt;関数は、実装によっては問題のある&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;線形合同法&lt;/a&gt;のパラメータが設定されていた。たとえば、実装によっては以下のような問題が発生していた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成される値の最下位ビットは、&lt;code&gt;0&lt;/code&gt;と&lt;code&gt;1&lt;/code&gt;が交互に生成されていた。これにより、生成される値は偶数と奇数が交互になっていた。&lt;/li&gt;
&lt;li&gt;生成される値の最大値が非常に小さく、&lt;code&gt;RAND_MAX&lt;/code&gt;の値が&lt;code&gt;32767&lt;/code&gt;となっていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MINSTDでは、このような問題は発生しない。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;minstd_rand0&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;1043618065&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;2&lt;sup&gt;31&lt;/sup&gt; - 2&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;&lt;code&gt;uint_fast32_t&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minstd_rand0 engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;888393797
1928232235
123456768
468696774
416663422
2065444334
1997251430
487897753
1004970425
579049320
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Lehmer_random_number_generator&#34; target=&#34;_blank&#34;&gt;Lehmer random number generator - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.firstpr.com.au/dsp/rand31/p1192-park.pdf&#34; target=&#34;_blank&#34;&gt;Stephen K. Park and Keith W. Miller (1988). &#34;Random Number Generators: Good Ones Are Hard To Find&#34;. Communications of the ACM 31 (10): 1192–1201. doi:10.1145/63039.63042.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://random.mat.sbg.ac.at/results/karl/server/node4.html#SECTION00042000000000000000&#34; target=&#34;_blank&#34;&gt;MINSTD - Classical LSGs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A pseudo-random number generator for the System/360, P.A. Lewis, A.S. Goodman, J.M. Miller, IBM Systems Journal, Vol. 8, No. 2, 1969, pp. 136-146&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mt19937 (C++11) -- パラメータ設定済みの擬似乱数生成器に、シードと生成される値の型を記載。</title>
      <link href="http://cpprefjp.github.io/reference/random/mt19937.html"/>
      <id>fcad3d613c073379b846bbf4ebd63913d87cd893:reference/random/mt19937.md</id>
      <updated>2014-12-24 01:51:37 +0900</updated>
      
        <content type="html">&lt;h1&gt;mt19937 (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;mersenne_twister_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      &lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;624&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;397&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;31&lt;/span&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;0x9908b0df&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0xffffffff&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;0x9d2c5680&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0xefc60000&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1812433253&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  mt19937;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;パラメータ設定済みの&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;&lt;code&gt;mersenne_twister_engine&lt;/code&gt;&lt;/a&gt;。&lt;br /&gt;
32ビット版のメルセンヌ・ツイスター。64ビット版は&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937_64.html&#34;&gt;&lt;code&gt;mt19937_64&lt;/code&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;19937という名称は、メルセンヌ・ツイスター法によって生成される乱数列の周期から来ている(2&lt;sup&gt;19937&lt;/sup&gt; - 1)。  &lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mt19937&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;4123659995&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;2&lt;sup&gt;19937&lt;/sup&gt; - 1&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;&lt;code&gt;uint_fast32_t&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937 engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;187052875
1658563244
2429782613
1877839754
2940926841
869137381
1607700369
747874684
3520793428
1774920624
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mt19937_64 (C++11) -- パラメータ設定済みの擬似乱数生成器に、シードと生成される値の型を記載。</title>
      <link href="http://cpprefjp.github.io/reference/random/mt19937_64.html"/>
      <id>fcad3d613c073379b846bbf4ebd63913d87cd893:reference/random/mt19937_64.md</id>
      <updated>2014-12-24 01:51:37 +0900</updated>
      
        <content type="html">&lt;h1&gt;mt19937_64 (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;mersenne_twister_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;
      &lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html&#34;&gt;uint_fast64_t&lt;/a&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;312&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;156&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;31&lt;/span&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;0xb5026f5aa96619e9&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0x5555555555555555&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;17&lt;/span&gt;,
      &lt;span style=&#34;color: #666666&#34;&gt;0x71d67fffeda60000&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0xfff7eee000000000&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;6364136223846793005&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  mt19937_64;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;パラメータ設定済みの&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;&lt;code&gt;mersenne_twister_engine&lt;/code&gt;&lt;/a&gt;。&lt;br /&gt;
64ビット版のメルセンヌ・ツイスター。32ビット版は&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937.html&#34;&gt;&lt;code&gt;mt19937&lt;/code&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;19937という名称は、メルセンヌ・ツイスター法によって生成される乱数列の周期から来ている(2&lt;sup&gt;19937&lt;/sup&gt; - 1)。  &lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mt19937_64&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;9981545732273789042&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;2&lt;sup&gt;19937&lt;/sup&gt; - 1&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html&#34;&gt;&lt;code&gt;uint_fast64_t&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937_64 engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1621025592805379139
4514793392314528655
4543694396077351855
3612539632838912606
2625719985131503282
3238788996565779147
3317678171748965379
12700229574828234289
8869797388973705309
9625202625077775903
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux24 (C++11) -- パラメータ設定済みの擬似乱数生成器に、シードと生成される値の型を記載。</title>
      <link href="http://cpprefjp.github.io/reference/random/ranlux24.html"/>
      <id>fcad3d613c073379b846bbf4ebd63913d87cd893:reference/random/ranlux24.md</id>
      <updated>2014-12-24 01:51:37 +0900</updated>
      
        <content type="html">&lt;h1&gt;ranlux24 (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/discard_block_engine.html&#34;&gt;discard_block_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux24_base.html&#34;&gt;ranlux24_base&lt;/a&gt;, &lt;span style=&#34;color: #666666&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;23&amp;gt;&lt;/span&gt;
  ranlux24;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux24&lt;/code&gt;は、贅沢さレベル3のRANLUX(LUXury RANdom numbers)法エンジンである。&lt;br /&gt;
RANLUX法は、以下の特徴を持つ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低速だが、高品質な乱数を生成する&lt;/li&gt;
&lt;li&gt;異なるシードのジェネレータ間では、乱数列が重複しない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RANLUX法は、0から4までの贅沢さレベル(luxury level)が選択可能である。&lt;br /&gt;
レベルを高くするほど低速になるが、乱数の品質は高くなる。レベル4が最高品質となる。&lt;br /&gt;
標準では、レベル3の&lt;code&gt;ranlux24&lt;/code&gt;および、レベル4の&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux48.html&#34;&gt;&lt;code&gt;ranlux48&lt;/code&gt;&lt;/a&gt;が定義される。  &lt;/p&gt;
&lt;p&gt;モンテカルロ法によるシミュレーションに、よく使用される。  &lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux24&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;9901578&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;10&lt;sup&gt;171&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;&lt;code&gt;uint_fast32_t&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ranlux24 engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;14989051
4145629
9009933
15957878
252315
15191713
10652539
8111899
16296385
3893002
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html&#34; target=&#34;_blank&#34;&gt;N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/v115/top.html&#34; target=&#34;_blank&#34;&gt;Uniform Random Numbers of Guaranteed Quality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux24_base (C++11) -- パラメータ設定済みの擬似乱数生成器に、シードと生成される値の型を記載。</title>
      <link href="http://cpprefjp.github.io/reference/random/ranlux24_base.html"/>
      <id>fcad3d613c073379b846bbf4ebd63913d87cd893:reference/random/ranlux24_base.md</id>
      <updated>2014-12-24 01:51:37 +0900</updated>
      
        <content type="html">&lt;h1&gt;ranlux24_base (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html&#34;&gt;subtract_with_carry_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;, &lt;span style=&#34;color: #666666&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;24&amp;gt;&lt;/span&gt;
  ranlux24_base;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;パラメータ設定済みの&lt;a href=&#34;http://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html&#34;&gt;&lt;code&gt;subtract_with_carry_engine&lt;/code&gt;&lt;/a&gt;。&lt;br /&gt;
&lt;code&gt;ranlux24_base&lt;/code&gt;は、贅沢さレベル4のRANLUX法エンジンである&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;&lt;code&gt;ranlux24&lt;/code&gt;&lt;/a&gt;を定義するために使用する型である。  &lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux24_base&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;7937952&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;10&lt;sup&gt;171&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;&lt;code&gt;uint_fast32_t&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux48 (C++11) -- パラメータ設定済みの擬似乱数生成器に、シードと生成される値の型を記載。</title>
      <link href="http://cpprefjp.github.io/reference/random/ranlux48.html"/>
      <id>fcad3d613c073379b846bbf4ebd63913d87cd893:reference/random/ranlux48.md</id>
      <updated>2014-12-24 01:51:37 +0900</updated>
      
        <content type="html">&lt;h1&gt;ranlux48 (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/discard_block_engine.html&#34;&gt;discard_block_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux48_base.html&#34;&gt;ranlux48_base&lt;/a&gt;, &lt;span style=&#34;color: #666666&#34;&gt;389&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;11&amp;gt;&lt;/span&gt;
  ranlux48;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux48&lt;/code&gt;は、贅沢さレベル4のRANLUX(LUXury RANdom numbers)法エンジンである。&lt;br /&gt;
RANLUX法は、以下の特徴を持つ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低速だが、高品質な乱数を生成する&lt;/li&gt;
&lt;li&gt;異なるシードのジェネレータ間では、乱数列が重複しない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RANLUX法は、0から4までの贅沢さレベル(luxury level)が選択可能である。&lt;br /&gt;
レベルを高くするほど低速になるが、乱数の品質は高くなる。レベル4が最高品質となる。&lt;br /&gt;
標準では、レベル3の&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;&lt;code&gt;ranlux24&lt;/code&gt;&lt;/a&gt;および、レベル4の&lt;code&gt;ranlux48&lt;/code&gt;が定義される。  &lt;/p&gt;
&lt;p&gt;モンテカルロ法によるシミュレーションに、よく使用される。  &lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux48&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;249142670248501&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;10&lt;sup&gt;171&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html&#34;&gt;&lt;code&gt;uint_fast64_t&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ranlux48 engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;150487143042812
271824176483188
144262504480630
41969914011396
182011784013906
108124382624549
17607643147140
165775445584215
85439168429936
199504771218332
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html&#34; target=&#34;_blank&#34;&gt;N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/v115/top.html&#34; target=&#34;_blank&#34;&gt;Uniform Random Numbers of Guaranteed Quality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranlux48_base (C++11) -- パラメータ設定済みの擬似乱数生成器に、シードと生成される値の型を記載。</title>
      <link href="http://cpprefjp.github.io/reference/random/ranlux48_base.html"/>
      <id>fcad3d613c073379b846bbf4ebd63913d87cd893:reference/random/ranlux48_base.md</id>
      <updated>2014-12-24 01:51:37 +0900</updated>
      
        <content type="html">&lt;h1&gt;ranlux48_base (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html&#34;&gt;subtract_with_carry_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html&#34;&gt;uint_fast64_t&lt;/a&gt;, &lt;span style=&#34;color: #666666&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;12&amp;gt;&lt;/span&gt;
  ranlux48_base;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;パラメータ設定済みの&lt;a href=&#34;http://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html&#34;&gt;&lt;code&gt;subtract_with_carry_engine&lt;/code&gt;&lt;/a&gt;。&lt;br /&gt;
&lt;code&gt;ranlux48_base&lt;/code&gt;は、贅沢さレベル4のRANLUX法エンジンである&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux48.html&#34;&gt;&lt;code&gt;ranlux48&lt;/code&gt;&lt;/a&gt;を定義するために使用する型である。  &lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ranlux48_base&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;61839128582725&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;10&lt;sup&gt;171&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;シード、および生成される値の型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast64_t.html&#34;&gt;&lt;code&gt;uint_fast64_t&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minstd_rand (C++11) -- 改行調整</title>
      <link href="http://cpprefjp.github.io/reference/random/minstd_rand.html"/>
      <id>4446613fd94200ff4e3dcd8be448a7ce88eb4974:reference/random/minstd_rand.md</id>
      <updated>2014-12-24 01:44:17 +0900</updated>
      
        <content type="html">&lt;h1&gt;minstd_rand (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;linear_congruential_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;, &lt;span style=&#34;color: #666666&#34;&gt;48271&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2147483647&amp;gt;&lt;/span&gt;
  minstd_rand;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最小標準MINSTD乱数生成器。  &lt;/p&gt;
&lt;p&gt;これは線形合同法に、より良いパラメータを設定したものである。&lt;/p&gt;
&lt;p&gt;オリジナルのMINSTDパラメータは、&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;&lt;code&gt;std::minstd_rand0&lt;/code&gt;&lt;/a&gt;の方で、1988年にStephen K. ParkとKeith W. Millerによって考案された。この&lt;code&gt;minstd_rand&lt;/code&gt;はパラメータ改良版で、1993年にStephen K. Park、Keith W. Miller、Paul K. Stockmeyerによって推奨された。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;C言語標準ライブラリの&lt;code&gt;rand()&lt;/code&gt;関数は、実装によっては問題のある&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;線形合同法&lt;/a&gt;のパラメータが設定されていた。たとえば、実装によっては以下のような問題が発生していた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成される値の最下位ビットは、&lt;code&gt;0&lt;/code&gt;と&lt;code&gt;1&lt;/code&gt;が交互に生成されていた。これにより、生成される値は偶数と奇数が交互になっていた。&lt;/li&gt;
&lt;li&gt;生成される値の最大値が非常に小さく、&lt;code&gt;RAND_MAX&lt;/code&gt;の値が&lt;code&gt;32767&lt;/code&gt;となっていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MINSTDでは、このような問題は発生しない。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;minstd_rand&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;399268537&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;2&lt;sup&gt;31&lt;/sup&gt; - 2&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minstd_rand engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;634377512
1067559179
1131536097
1279860489
1336107623
2022183129
1080129221
162161378
113984123
274497719
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Lehmer_random_number_generator&#34; target=&#34;_blank&#34;&gt;Lehmer random number generator - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://random.mat.sbg.ac.at/results/karl/server/node4.html#SECTION00042000000000000000&#34; target=&#34;_blank&#34;&gt;MINSTD - Classical LSGs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&#34;Random Number Generators: Good ones are hard to find&#34;, Stephen K. Park and Keith W. Miller, Communications of the ACM, Vol. 31, No. 10, October 1988, pp. 1192-1201&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random (C++11) -- MINSTDを再調査し、説明を改良した。 線形合同法の説明として、「単純な剰余演算のため、均等分布しない」とあったが、linear_congruential_engineクラスはC++標準ライブラリにより一様乱数生成器(uniform random number generator)として定義され、範囲内の値全てが等確率で分布することが定められているので、この記述を削除した。 また、「下位ビットのランダム性が低い」というのは、線形合同法自体ではなくパラメータによるものであるため、線形合同法の説明からは削除し、MINSTDの方に、その問題がないことを備考として記載した。</title>
      <link href="http://cpprefjp.github.io/reference/random.html"/>
      <id>b6ad30882e5ed60054bf84dfcf9bcd13ec581cff:reference/random.md</id>
      <updated>2014-12-24 01:30:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;random (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;random&amp;gt;&lt;/code&gt;ヘッダは、擬似乱数を取り扱うための乱数生成器 (Random Number Generator) や分布生成器 (Distribution) 、非決定的な乱数生成器、及び関連する一連のクラス・関数を定義する乱数ライブラリである。&lt;/p&gt;
&lt;h2&gt;擬似乱数生成器&lt;/h2&gt;
&lt;p&gt;擬似乱数生成器は、ソフトウェアで乱雑な値のシーケンスを生成するクラスである。&lt;br /&gt;
多くのユーザーにとっては、以下に挙げる生の乱数生成器テンプレートクラスそのものよりも、後述するパラメータ定義済みの乱数生成器クラスを使用すれば十分である。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;&lt;code&gt;linear_congruential_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;線形合同法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine.html&#34;&gt;&lt;code&gt;mersenne_twister_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスター法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html&#34;&gt;&lt;code&gt;subtract_with_carry_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャリー付き減算法(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;生成器アダプタ&lt;/h2&gt;
&lt;p&gt;生成器アダプタは、他の乱数生成器の乱数列を調整するクラスである。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discard_block_engine.html&#34;&gt;&lt;code&gt;discard_block_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;部分的に乱数列を破棄する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/independent_bits_engine.html&#34;&gt;&lt;code&gt;independent_bits_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乱数生成器が生成するビットを変更する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/shuffle_order_engine.html&#34;&gt;&lt;code&gt;shuffle_order_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乱数の生成順をシャッフルする(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;パラメータ定義済み擬似乱数生成器&lt;/h2&gt;
&lt;p&gt;先に挙げた乱数生成器に対し一般的なパラメータを定義し、使いやすいように用意された乱数生成器クラス。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;&lt;code&gt;minstd_rand0&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小標準MINSTD(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand.html&#34;&gt;&lt;code&gt;minstd_rand&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;最小標準MINSTDのパラメータ改良版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937.html&#34;&gt;&lt;code&gt;mt19937&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスターの32ビット版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937_64.html&#34;&gt;&lt;code&gt;mt19937_64&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メルセンヌツイスターの64ビット版(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux24_base.html&#34;&gt;&lt;code&gt;ranlux24_base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法の&lt;code&gt;ranlux24&lt;/code&gt;を定義するための型(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux48_base.html&#34;&gt;&lt;code&gt;ranlux48_base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法の&lt;code&gt;ranlux48&lt;/code&gt;を定義するための型(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux24.html&#34;&gt;&lt;code&gt;ranlux24&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法のレベル3(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/ranlux48.html&#34;&gt;&lt;code&gt;ranlux48&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;RANLUX法のレベル4(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/knuth_b.html&#34;&gt;&lt;code&gt;knuth_b&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;KnuthのリオーダーアルゴリズムB(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/default_random_engine.html&#34;&gt;&lt;code&gt;default_random_engine&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非専門用途でデフォルト使用する擬似乱数生成器(typedef)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非決定的な乱数生成器&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/random_device.html&#34;&gt;&lt;code&gt;random_device&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;予測不能な乱数生成器(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;シード数列&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/seed_seq.html&#34;&gt;&lt;code&gt;seed_seq&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;疑似乱数エンジンの為のシード数列(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;分布生成器&lt;/h2&gt;
&lt;h3&gt;一様分布&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_int_distribution.html&#34;&gt;&lt;code&gt;uniform_int_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様整数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_real_distribution.html&#34;&gt;&lt;code&gt;uniform_real_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一様実数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ベルヌーイ分布(Bernoulli Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/bernoulli_distribution.html&#34;&gt;&lt;code&gt;bernoulli_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ベルヌーイ分布(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/binomial_distribution.html&#34;&gt;&lt;code&gt;binomial_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;二項分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/geometric_distribution.html&#34;&gt;&lt;code&gt;geometric_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;幾何分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/negative_binomial_distribution.html&#34;&gt;&lt;code&gt;negative_binomial_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;負の二項分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ポワソン分布(Poisson Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/poisson_distribution.html&#34;&gt;&lt;code&gt;poisson_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ポワソン分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/exponential_distribution.html&#34;&gt;&lt;code&gt;exponential_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指数分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/gamma_distribution.html&#34;&gt;&lt;code&gt;gamma_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ガンマ分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/weibull_distribution.html&#34;&gt;&lt;code&gt;weibull_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ワイブル分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/extreme_value_distribution.html&#34;&gt;&lt;code&gt;extreme_value_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;極値分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;正規分布(Normal Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution.html&#34;&gt;&lt;code&gt;normal_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;正規分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/lognormal_distribution.html&#34;&gt;&lt;code&gt;lognormal_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;対数正規分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/chi_squared_distribution.html&#34;&gt;&lt;code&gt;chi_squared_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;カイ二乗分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/cauchy_distribution.html&#34;&gt;&lt;code&gt;cauchy_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コーシー分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/fisher_f_distribution.html&#34;&gt;&lt;code&gt;fisher_f_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;フィッシャーのF分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/student_t_distribution.html&#34;&gt;&lt;code&gt;student_t_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ステューデントのt分布(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;標本分布(Sampling Distribution)&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discrete_distribution.html&#34;&gt;&lt;code&gt;discrete_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;整数のインデックスごとに離散した確率分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_constant_distribution.html&#34;&gt;&lt;code&gt;piecewise_constant_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;区間ごとの重み付けを定数値とした分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_linear_distribution.html&#34;&gt;&lt;code&gt;piecewise_linear_distribution&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;区間ごとの重み付けを線形に接続した分布生成器(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/generate_canonical.html&#34;&gt;&lt;code&gt;generate_canonical&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;実数区間[0.0-1.0)に展開（事実上正規化）された一様分布乱数を得る(function template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;以下に示す例では、C++11の標準の乱数ライブラリを用いてランダムデバイスから初期化数列を取得してメルセンヌツイスタエンジンを初期化、単精度浮動少数型で[-1.0f - 1.0f]の一様分布及び&lt;code&gt;1.0f&lt;/code&gt;を中心として標準偏差&lt;code&gt;0.5f&lt;/code&gt;の正規分布に基づく擬似乱数を1メガ個生成し&#34;random.tsv&#34;にタブ区切り形式のファイルとして結果を保存する。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// メルセンヌ・ツイスター法による擬似乱数生成器を、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ハードウェア乱数をシードにして初期化&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;mt19937 engine(seed_gen());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 一様実数分布&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [-1.0, 1.0)の値の範囲で、等確率に実数を生成する&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;uniform_real_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; dist1(&lt;span style=&#34;color: #666666&#34;&gt;-1.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 正規分布&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 平均1.0、標準偏差0.5で分布させる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;normal_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; dist2(&lt;span style=&#34;color: #666666&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0.5&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ofstream file(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;random.tsv&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1000*1000&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 各分布法に基いて乱数を生成&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; r1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dist1(engine);
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; r2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dist2(engine);

    file &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; r1 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; r2 &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;

この例である時得られた &lt;a href=&#34;https://github.com/cpprefjp/image/raw/master/reference/random/random.tsv.xz&#34; target=&#34;_blank&#34;&gt;random.tsv&lt;/a&gt; (ファイルサイズが大きいので添付する上では random.tsv.xz に圧縮) を元に、得られたデータの密度を図示すると、以下のような図が得られた。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/reference/random/random.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;破線は dist1 (一様分布; min=-1.0f, max=1.0f) 、実線は dist2 (正規分布; mean=1.0f, stdev=0.5f) 、横軸は値、縦軸は密度(値の件数を区間ごとに数えたヒストグラムを全体に占める割合で表したもの)である。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.biwako.shiga-u.ac.jp/sensei/mnaka/ut/statdist.html&#34; target=&#34;_blank&#34;&gt;さまざまな確率分布 (probability distributions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/techdmba/distribution&#34; target=&#34;_blank&#34;&gt;確率変数－種々の分布の特徴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/1993/N0352.asc&#34; target=&#34;_blank&#34;&gt;N0352 Proposal for Standardization of Random Number Generators in C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1398.html&#34; target=&#34;_blank&#34;&gt;N1398 A Proposal to Add an Extensible Random Number Facility to the Standard Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1588.pdf&#34; target=&#34;_blank&#34;&gt;N1588 On Random-Number Distributions for C++0x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3551.pdf&#34; target=&#34;_blank&#34;&gt;N3551 Random Number Generation in C++11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;編集者向けの参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/editors_doc/random_figure.html&#34;&gt;乱数分布の図を作る方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>knuth_b (C++11) -- MINSTDを再調査し、説明を改良した。 線形合同法の説明として、「単純な剰余演算のため、均等分布しない」とあったが、linear_congruential_engineクラスはC++標準ライブラリにより一様乱数生成器(uniform random number generator)として定義され、範囲内の値全てが等確率で分布することが定められているので、この記述を削除した。 また、「下位ビットのランダム性が低い」というのは、線形合同法自体ではなくパラメータによるものであるため、線形合同法の説明からは削除し、MINSTDの方に、その問題がないことを備考として記載した。</title>
      <link href="http://cpprefjp.github.io/reference/random/knuth_b.html"/>
      <id>b6ad30882e5ed60054bf84dfcf9bcd13ec581cff:reference/random/knuth_b.md</id>
      <updated>2014-12-24 01:30:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;knuth_b (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/shuffle_order_engine.html&#34;&gt;shuffle_order_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;minstd_rand0&lt;/a&gt;, &lt;span style=&#34;color: #666666&#34;&gt;256&amp;gt;&lt;/span&gt;
  knuth_b;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;knuth_b&lt;/code&gt;は、MINSTD最小標準乱数生成器である&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;&lt;code&gt;minstd_rand0&lt;/code&gt;&lt;/a&gt;の生成順を並び替えた乱数生成法である。  &lt;/p&gt;
&lt;p&gt;Donald Knuth氏の著書『The Art of Computer Programming, Second Edition, Volume 2, Seminumerical Algorithms』で考案された、リオーダーアルゴリズムBがそれだ。  &lt;/p&gt;
&lt;p&gt;このアルゴリズムは、Microsoft .NET Frameworkの&lt;a href=&#34;http://msdn.microsoft.com/ja-jp/library/system.random.aspx&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;System.Random&lt;/code&gt;&lt;/a&gt;クラスにも、実装として使用されている。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;knuth_b&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;1112339016&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;不明(Boost.Randomのドキュメントより)&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;knuth_b engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint64_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1626011263
899717059
1316478681
732866635
512074444
354532979
2021640279
2002307542
2064026990
375634814
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1933.pdf&#34; target=&#34;_blank&#34;&gt;N1933 Improvements to TR1&#39;s Facility for Random Number Generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>linear_congruential_engine (C++11) -- MINSTDを再調査し、説明を改良した。 線形合同法の説明として、「単純な剰余演算のため、均等分布しない」とあったが、linear_congruential_engineクラスはC++標準ライブラリにより一様乱数生成器(uniform random number generator)として定義され、範囲内の値全てが等確率で分布することが定められているので、この記述を削除した。 また、「下位ビットのランダム性が低い」というのは、線形合同法自体ではなくパラメータによるものであるため、線形合同法の説明からは削除し、MINSTDの方に、その問題がないことを備考として記載した。</title>
      <link href="http://cpprefjp.github.io/reference/random/linear_congruential_engine.html"/>
      <id>b6ad30882e5ed60054bf84dfcf9bcd13ec581cff:reference/random/linear_congruential_engine.md</id>
      <updated>2014-12-24 01:30:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;linear_congruential_engine (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;UIntType&lt;/span&gt;, UIntType A, UIntType C, UIntType M&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;linear_congruential_engine&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;minstd_rand0&lt;/a&gt;;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;…&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand.html&#34;&gt;minstd_rand&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;linear_congruential_engine&lt;/code&gt;クラスは、線形合同法による擬似乱数生成エンジンである。&lt;br /&gt;
前の擬似乱数と定数A、定数B、定数Mを保持し、以下の漸化式により次の擬似乱数を生成する。 &lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://raw.github.com/cpprefjp/image/master/reference/random/linear_congruential_engine/linear_congruential.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;線形合同法は、以下の特徴を持つ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;省メモリで高速&lt;/li&gt;
&lt;li&gt;周期が短い(2&lt;sup&gt;31&lt;/sup&gt;-1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;省メモリで高速という点から、多くの言語で、標準の乱数生成法として使用されている。&lt;br /&gt;
C言語から引き継いだ標準ライブラリ関数&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/rand.html&#34;&gt;&lt;code&gt;std::rand()&lt;/code&gt;&lt;/a&gt;の乱数生成法は実装定義だが、多くの実装で線形合同法が使用されている。&lt;/p&gt;
&lt;p&gt;しかし、メモリ使用量がそれほど問題にならないのであれば、メルセンヌ・ツイスター(&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mt19937.html&#34;&gt;&lt;code&gt;mt19937&lt;/code&gt;&lt;/a&gt;)の使用を検討した方がいいだろう。&lt;/p&gt;
&lt;p&gt;標準にはないが、メモリ使用量が少なく、高速で、周期も長い(メルセンヌ・ツイスターほどではない)、xorshiftという乱数生成法も存在する。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・シード&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/linear_congruential_engine.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~linear_congruential_engine() = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/seed.html&#34;&gt;&lt;code&gt;seed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;シードを設定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;生成&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/op_call.html&#34;&gt;&lt;code&gt;operator()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;擬似乱数を生成する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/discard.html&#34;&gt;&lt;code&gt;discard&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;指定した回数だけ擬似乱数を生成し、内部状態を進める&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;静的メンバ関数&lt;/h2&gt;
&lt;h3&gt;エンジンの特性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/min.html&#34;&gt;&lt;code&gt;min&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;生成する範囲の最小値を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/max.html&#34;&gt;&lt;code&gt;max&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;生成する範囲の最大値を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;result_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;擬似乱数生成結果の符号なし整数型 &lt;code&gt;UIntType&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ定数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;定数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr result_type multiplier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乗項A。テンプレートパラメータ&lt;code&gt;A&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr result_type increment&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;増分項C。状態シーケンスの要素数。テンプレートパラメータ&lt;code&gt;C&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr result_type modulus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;剰余項M。テンプレートパラメータ&lt;code&gt;M&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static constexpr result_type default_seed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトのシード値。&lt;code&gt;1u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/op_ostream.html&#34;&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ストリームへの出力&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/op_istream.html&#34;&gt;&lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ストリームからの入力&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// linear_congruential_engineのパラメータ設定済みtypedefであるminstd_randを使用する。&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ランダムなシードを使用して初期化&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minstd_rand engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 乱数を生成&lt;/span&gt;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;822915164
932862885
1787211539
1775131785
641394788
496072749
1485002929
1719732546
81869534
554365234
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: &lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minstd_rand (C++11) -- MINSTDを再調査し、説明を改良した。 線形合同法の説明として、「単純な剰余演算のため、均等分布しない」とあったが、linear_congruential_engineクラスはC++標準ライブラリにより一様乱数生成器(uniform random number generator)として定義され、範囲内の値全てが等確率で分布することが定められているので、この記述を削除した。 また、「下位ビットのランダム性が低い」というのは、線形合同法自体ではなくパラメータによるものであるため、線形合同法の説明からは削除し、MINSTDの方に、その問題がないことを備考として記載した。</title>
      <link href="http://cpprefjp.github.io/reference/random/minstd_rand.html"/>
      <id>b6ad30882e5ed60054bf84dfcf9bcd13ec581cff:reference/random/minstd_rand.md</id>
      <updated>2014-12-24 01:30:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;minstd_rand (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;linear_congruential_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;, &lt;span style=&#34;color: #666666&#34;&gt;48271&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2147483647&amp;gt;&lt;/span&gt;
  minstd_rand;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最小標準MINSTD乱数生成器。  &lt;/p&gt;
&lt;p&gt;これは線形合同法に、より良いパラメータを設定したものである。&lt;/p&gt;
&lt;p&gt;オリジナルのMINSTDパラメータは、&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand0.html&#34;&gt;&lt;code&gt;std::minstd_rand0&lt;/code&gt;&lt;/a&gt;の方で、1988年にStephen K. ParkとKeith W. Millerによって考案された。この&lt;code&gt;minstd_rand&lt;/code&gt;はパラメータ改良版で、1993年にStephen K. Park、Keith W. Miller、Paul K. Stockmeyerによって推奨された。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;C言語標準ライブラリの&lt;code&gt;rand()&lt;/code&gt;関数は、実装によっては問題のある&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;線形合同法&lt;/a&gt;のパラメータが設定されていた。たとえば、実装によっては以下のような問題が発生していた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成される値の最下位ビットは、&lt;code&gt;0&lt;/code&gt;と&lt;code&gt;1&lt;/code&gt;が交互に生成されていた。これにより、生成される値は偶数と奇数が交互になっていた。&lt;/li&gt;
&lt;li&gt;生成される値の最大値が非常に小さく、&lt;code&gt;RAND_MAX&lt;/code&gt;の値が&lt;code&gt;32767&lt;/code&gt;となっていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MINSTDでは、このような問題は発生しない。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;minstd_rand&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;399268537&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;2&lt;sup&gt;31&lt;/sup&gt; - 2&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minstd_rand engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;634377512
1067559179
1131536097
1279860489
1336107623
2022183129
1080129221
162161378
113984123
274497719
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Lehmer_random_number_generator&#34; target=&#34;_blank&#34;&gt;Lehmer random number generator - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://random.mat.sbg.ac.at/results/karl/server/node4.html#SECTION00042000000000000000&#34; target=&#34;_blank&#34;&gt;MINSTD - Classical LSGs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&#34;Random Number Generators: Good ones are hard to find&#34;, Stephen K. Park and Keith W. Miller, Communications of the ACM, Vol. 31, No. 10, October 1988, pp. 1192-1201&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>minstd_rand0 (C++11) -- MINSTDを再調査し、説明を改良した。 線形合同法の説明として、「単純な剰余演算のため、均等分布しない」とあったが、linear_congruential_engineクラスはC++標準ライブラリにより一様乱数生成器(uniform random number generator)として定義され、範囲内の値全てが等確率で分布することが定められているので、この記述を削除した。 また、「下位ビットのランダム性が低い」というのは、線形合同法自体ではなくパラメータによるものであるため、線形合同法の説明からは削除し、MINSTDの方に、その問題がないことを備考として記載した。</title>
      <link href="http://cpprefjp.github.io/reference/random/minstd_rand0.html"/>
      <id>b6ad30882e5ed60054bf84dfcf9bcd13ec581cff:reference/random/minstd_rand0.md</id>
      <updated>2014-12-24 01:30:57 +0900</updated>
      
        <content type="html">&lt;h1&gt;minstd_rand0 (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt;
    &lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;linear_congruential_engine&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdint/uint_fast32_t.html&#34;&gt;uint_fast32_t&lt;/a&gt;, &lt;span style=&#34;color: #666666&#34;&gt;16807&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2147483647&amp;gt;&lt;/span&gt;
  minstd_rand0;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;最小標準MINSTD乱数生成器。&lt;/p&gt;
&lt;p&gt;これは線形合同法に、より良いパラメータを設定したものである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;minstd_rand0&lt;/code&gt;は、オリジナルのMINSTDパラメータであり、1988年にStephen K. ParkとKeith W. Millerによって考案された。&lt;/p&gt;
&lt;p&gt;1993年にStephen K. Park、Keith W. Miller、Paul K. Stockmeyerによって推奨された、パラメータ改良版である&lt;a href=&#34;http://cpprefjp.github.io/reference/random/minstd_rand.html&#34;&gt;&lt;code&gt;minstd_rand&lt;/code&gt;&lt;/a&gt;もまた定義されている。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;C言語標準ライブラリの&lt;code&gt;rand()&lt;/code&gt;関数は、実装によっては問題のある&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine.html&#34;&gt;線形合同法&lt;/a&gt;のパラメータが設定されていた。たとえば、実装によっては以下のような問題が発生していた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成される値の最下位ビットは、&lt;code&gt;0&lt;/code&gt;と&lt;code&gt;1&lt;/code&gt;が交互に生成されていた。これにより、生成される値は偶数と奇数が交互になっていた。&lt;/li&gt;
&lt;li&gt;生成される値の最大値が非常に小さく、&lt;code&gt;RAND_MAX&lt;/code&gt;の値が&lt;code&gt;32767&lt;/code&gt;となっていた。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MINSTDでは、このような問題は発生しない。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;minstd_rand0&lt;/code&gt;型オブジェクトをデフォルト構築した場合、10000番目に生成される擬似乱数の値は&lt;code&gt;1043618065&lt;/code&gt;であること。&lt;/p&gt;
&lt;h2&gt;乱数列の周期&lt;/h2&gt;
&lt;p&gt;2&lt;sup&gt;31&lt;/sup&gt; - 2&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;minstd_rand0 engine(seed_gen());

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;uint32_t&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; engine();
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;888393797
1928232235
123456768
468696774
416663422
2065444334
1997251430
487897753
1004970425
579049320
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Lehmer_random_number_generator&#34; target=&#34;_blank&#34;&gt;Lehmer random number generator - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.firstpr.com.au/dsp/rand31/p1192-park.pdf&#34; target=&#34;_blank&#34;&gt;Stephen K. Park and Keith W. Miller (1988). &#34;Random Number Generators: Good Ones Are Hard To Find&#34;. Communications of the ACM 31 (10): 1192–1201. doi:10.1145/63039.63042.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://random.mat.sbg.ac.at/results/karl/server/node4.html#SECTION00042000000000000000&#34; target=&#34;_blank&#34;&gt;MINSTD - Classical LSGs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A pseudo-random number generator for the System/360, P.A. Lewis, A.S. Goodman, J.M. Miller, IBM Systems Journal, Vol. 8, No. 2, 1969, pp. 136-146&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>normal_distribution (C++11) -- normal_distribution : Boost.Randomでの実装に使われているアルゴリズムを記載。</title>
      <link href="http://cpprefjp.github.io/reference/random/normal_distribution.html"/>
      <id>a870e42b9d2db2e49a53933876c31bd6fa2726cd:reference/random/normal_distribution.md</id>
      <updated>2014-12-23 01:12:19 +0900</updated>
      
        <content type="html">&lt;h1&gt;normal_distribution (C++11)&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;RealType&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;normal_distribution&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;normal_distribution&lt;/code&gt;は、平均μ、標準偏差σの正規分布にしたがった乱数を生成するクラスである。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/reference/random/normal_distribution/normal.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;テンプレートパラメータは、以下を意味する：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RealType&lt;/code&gt; : 生成する実数の型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正規分布は、以下のような用途に使用できる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平均身長170cm、標準偏差5cmというパラメータから、平均付近の身長データを作成する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・リセット&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/normal_distribution.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~normal_distribution() = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/reset.html&#34;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;状態をリセットする&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;生成&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/op_call.html&#34;&gt;&lt;code&gt;operator()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;乱数を生成する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;プロパティ&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/mean.html&#34;&gt;&lt;code&gt;mean&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタで指定された平均を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/stddev.html&#34;&gt;&lt;code&gt;stddev&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタで指定された標準偏差を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/param.html&#34;&gt;&lt;code&gt;param&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;分布のパラメータを取得／設定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/min.html&#34;&gt;&lt;code&gt;min&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;生成する範囲の最小値を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/max.html&#34;&gt;&lt;code&gt;max&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;生成する範囲の最大値を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;result_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乱数生成結果の実数型 &lt;code&gt;RealType&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;param_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分布パラメータの型。未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/op_ostream.html&#34;&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ストリームへの出力&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/op_istream.html&#34;&gt;&lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ストリームからの入力&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;random&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;fstream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;random_device seed_gen;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;default_random_engine engine(seed_gen());

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 平均100、標準偏差20で分布させる&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;normal_distribution&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; dist(&lt;span style=&#34;color: #666666&#34;&gt;100.0&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;20.0&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ofstream file(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;normal_distribution.tsv&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; n &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; n &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;256&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;n) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 正規分布で乱数を生成する&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dist(engine);
    file &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\t\n&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
このプログラムによってある時に得られた結果（&lt;a href=&#34;https://github.com/cpprefjp/image/raw/master/reference/random/normal_distribution/normal_distribution.tsv.7z&#34; target=&#34;_blank&#34;&gt;normal_distribution.tsv.7z&lt;/a&gt;）を図示する。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://github.com/cpprefjp/image/raw/master/reference/random/normal_distribution/normal_distribution.png&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F%E5%88%86%E5%B8%83&#34; target=&#34;_blank&#34;&gt;正規分布 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Marsaglia_polar_method&#34; target=&#34;_blank&#34;&gt;Marsaglia polar method - Wikipedia&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;GCC 4.9時点においてlibstdc++で使用されているアルゴリズム&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%EF%BC%9D%E3%83%9F%E3%83%A5%E3%83%A9%E3%83%BC%E6%B3%95&#34; target=&#34;_blank&#34;&gt;ボックス＝ミュラー法 - Wikipedia&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Boost 1.55.0以前まで、Boost.Randomの&lt;code&gt;normal_distribution&lt;/code&gt;の実装に使われていたアルゴリズム。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Ziggurat_algorithm&#34; target=&#34;_blank&#34;&gt;Ziggurat sampling - Wikipedia&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Boost 1.56.0以降で、Boost.Randomの&lt;code&gt;normal_distribution&lt;/code&gt;の実装に使われているアルゴリズム。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
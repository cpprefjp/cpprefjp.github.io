<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-09-01T17:40:03.105853</updated>
  <id>227a21ba-05a6-4f98-b8c3-e76b88ddfaae</id>

  
    <entry>
      <title>ranges -- &lt;ranges&gt; view_interfaceを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>f97344d6133ab2c7d5d8e8ffab2b7a403643109c:reference/ranges.md</id>
      <updated>2021-09-02T02:34:57+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ranges&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt; では、イテレータの組ではなく、コンテナや配列、部分的なコンテナなどを扱う範囲ライブラリを提供する。&lt;/p&gt;
&lt;p&gt;C++17までは、標準アルゴリズム関数はイテレータの組を扱い、範囲を直接扱ってはいなかった。
範囲ライブラリはBoost.Rangeやrange-v3などで実績があり、C++標準にも取り込まれることになった。&lt;/p&gt;
&lt;h2&gt;範囲アクセス&lt;/h2&gt;
&lt;p&gt;これらの機能は従来&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;でフリー関数として提供されていた。
C++20では関数によるカスタマイゼーションポイントの問題点を解消するため、関数オブジェクトとして再実装されている。
互換性を維持するために従来の関数も残っているが、これらのカスタマイゼーションポイントオブジェクトを使用することが推奨される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/begin.html&#34;&gt;begin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指すイテレータを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/end.html&#34;&gt;end&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指すイテレータもしくは番兵を取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/cbegin.html&#34;&gt;cbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭を指す読み取り専用イテレータを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/cend.html&#34;&gt;cend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾の次を指す読み取り専用イテレータもしくは番兵を取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/rbegin.html&#34;&gt;rbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す逆イテレータを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/rend.html&#34;&gt;rend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す逆イテレータもしくは番兵を取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/crbegin.html&#34;&gt;crbegin&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の末尾を指す読み取り専用逆イテレータを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/crend.html&#34;&gt;crend&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の先頭の前を指す読み取り専用逆イテレータもしくは番兵を取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/size.html&#34;&gt;size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素数を取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/ssize.html&#34;&gt;ssize&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素数を、符号付き整数型で取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/empty.html&#34;&gt;empty&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲が空かどうかを判定する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/data.html&#34;&gt;data&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素配列へのポインタを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/cdata.html&#34;&gt;cdata&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素配列への読み取り専用ポインタを取得する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;範囲に関連する型へのアクセス&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/iterator_t.html&#34;&gt;iterator_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲のイテレータ型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/sentinel_t.html&#34;&gt;sentinel_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の番兵型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_difference_t.html&#34;&gt;range_difference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲のイテレータの差の型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_size_t.html&#34;&gt;range_size_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲のサイズの型を取得する(alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_value_t.html&#34;&gt;range_value_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素の型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_reference_t.html&#34;&gt;range_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素の参照型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range_rvalue_reference_t.html&#34;&gt;range_rvalue_reference_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素の右辺値参照型を取得する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;範囲コンセプト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/range.html&#34;&gt;range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を定義するコンセプト (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/borrowed_range.html&#34;&gt;borrowed_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所有権を持たない範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/sized_range.html&#34;&gt;sized_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サイズを一定時間で求められる範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/view.html&#34;&gt;view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビューである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/output_range.html&#34;&gt;output_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータが出力イテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/input_range.html&#34;&gt;input_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータが入力イテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/forward_range.html&#34;&gt;forward_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータが前進イテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/bidirectional_range.html&#34;&gt;bidirectional_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータが双方向イテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/random_access_range.html&#34;&gt;random_access_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータがランダムアクセスイテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/contiguous_range.html&#34;&gt;contiguous_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータが隣接イテレータである範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/common_range.html&#34;&gt;common_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータと番兵の型が等しい範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/viewable_range.html&#34;&gt;viewable_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビューに変換できる範囲 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;カスタマイゼーションポイント&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/enable_borrowed_range.html&#34;&gt;enable_borrowed_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を&lt;code&gt;borrowed_range&lt;/code&gt;にする (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/enable_view.html&#34;&gt;enable_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を&lt;code&gt;view&lt;/code&gt;にする (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/disable_sized_range.html&#34;&gt;disable_sized_range&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を&lt;code&gt;sized_range&lt;/code&gt;にならないようにする (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ビューインターフェース&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/view_base.html&#34;&gt;view_base&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;基底クラスとすることで&lt;code&gt;view&lt;/code&gt;となるタグ型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/view_interface.html&#34;&gt;view_interface&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ビューの基底クラスとして推奨されるクラス (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;部分範囲&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/subrange_kind.md.nolink&#34;&gt;subrange_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;部分範囲の種類を表す列挙体 (enum class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/subrange.md.nolink&#34;&gt;subrange&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータペアを範囲として扱う (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ダングリングイテレータハンドリング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/dangling.html&#34;&gt;dangling&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ダングリングイテレータ、ダングリング範囲を表す型 (class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/borrowed_iterator_t.html&#34;&gt;borrowed_iterator_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲が&lt;code&gt;borrowed_range&lt;/code&gt;ではないとき&lt;code&gt;dangling&lt;/code&gt;となるイテレータ (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/borrowed_subrange_t.html&#34;&gt;borrowed_subrange_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲が&lt;code&gt;borrowed_range&lt;/code&gt;ではないとき&lt;code&gt;dangling&lt;/code&gt;となる部分範囲 (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;範囲ファクトリ&lt;/h2&gt;
&lt;h3&gt;empty view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/empty_view.md.nolink&#34;&gt;empty_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空の範囲 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/empty_view.md.nolink&#34;&gt;empty&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;empty_view&lt;/code&gt;を生成する (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;single view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/single_view.md.nolink&#34;&gt;single_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した値1つからなる範囲 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/single.md.nolink&#34;&gt;single&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;single_view&lt;/code&gt;を生成する (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;iota view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/iota_view.md.nolink&#34;&gt;iota_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単調増加列である範囲 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/iota.md.nolink&#34;&gt;iota&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iota_view&lt;/code&gt;を生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;istream view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/basic_istream_view.md.nolink&#34;&gt;basic_istream_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入力ストリームから値を読む範囲 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/istream_view.md.nolink&#34;&gt;istream_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;basic_istream_view&lt;/code&gt;を生成する (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;範囲アダプタ&lt;/h2&gt;
&lt;h3&gt;all view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/ref_view.md.nolink&#34;&gt;ref_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲への参照として振る舞うビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/all.md.nolink&#34;&gt;all&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲への参照として振る舞うビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/all_t.md.nolink&#34;&gt;all_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;all&lt;/code&gt;の戻り値型 (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;filter view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/filter_view.md.nolink&#34;&gt;filter_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した条件を満たす要素だけを集めるビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/filter.md.nolink&#34;&gt;filter&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した条件を満たす要素だけを集めるビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;transform view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/transform_view.md.nolink&#34;&gt;transform_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した関数で各要素を変換するビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/transform.md.nolink&#34;&gt;transform&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した関数で各要素を変換するビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;take view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/take_view.md.nolink&#34;&gt;take_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した個数だけ取り出すビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/take.md.nolink&#34;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した個数だけ取り出すビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;take while view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/take_while_view.md.nolink&#34;&gt;take_while_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した条件を満たす範囲を取り出すビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/take_while.md.nolink&#34;&gt;take_while&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した条件を満たす範囲を取り出すビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;drop view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/drop_view.md.nolink&#34;&gt;drop_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した個数だけ除外するビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/drop.md.nolink&#34;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した個数だけ除外するビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;drop while view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/drop_while_view.md.nolink&#34;&gt;drop_while_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した条件を満たす範囲を除外するビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/drop_while.md.nolink&#34;&gt;drop_while&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;先頭から指定した条件を満たす範囲を除外するビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;join view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/join_view.md.nolink&#34;&gt;join_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ネストされた範囲を平坦にするビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/join.md.nolink&#34;&gt;join&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ネストされた範囲を平坦にするビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;split view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/split_view.md.nolink&#34;&gt;split_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を指定したデリミタで分割するビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/split.md.nolink&#34;&gt;split&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を指定したデリミタで分割するビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;counted view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/counted.md.nolink&#34;&gt;counted&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;イテレータを指定した数だけ進めるビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;common view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/common_view.md.nolink&#34;&gt;common_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;common_range&lt;/code&gt;にしたビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/common.md.nolink&#34;&gt;common&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;common_range&lt;/code&gt;なビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;reverse view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/reverse_view.md.nolink&#34;&gt;reverse_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆順のビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/reverse.md.nolink&#34;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逆順のビューを生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;elements view&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/elements_view.md.nolink&#34;&gt;elements_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第n要素を集めたビュー (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/keys_view.md.nolink&#34;&gt;keys_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第0要素を集めたビュー (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/values_view.md.nolink&#34;&gt;values_view&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第1要素を集めたビュー (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/elements.md.nolink&#34;&gt;elements&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;elements_view&lt;/code&gt;を生成する (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/keys.md.nolink&#34;&gt;keys&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;keys_view&lt;/code&gt;を生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/values.md.nolink&#34;&gt;values&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;values_view&lt;/code&gt;を生成する (customization point object)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: 13.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 10.1.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: 2019 Update 10&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator.html&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts.html&#34;&gt;&amp;lt;concepts&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4861/ranges&#34; target=&#34;_blank&#34;&gt;N4861 24 Ranges library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techbookfest.org/product/5134506308665344&#34; target=&#34;_blank&#34;&gt;C++20 ranges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>view_interface -- &lt;ranges&gt; view_interfaceを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface.html"/>
      <id>f97344d6133ab2c7d5d8e8ffab2b7a403643109c:reference/ranges/view_interface.md</id>
      <updated>2021-09-02T02:34:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface.md b/reference/ranges/view_interface.md
new file mode 100644
index 000000000..ac2285aea
--- /dev/null
+++ b/reference/ranges/view_interface.md
@@ -0,0 +1,48 @@
+# view_interface
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class D&amp;gt;
+  requires is_class_v&amp;lt;D&amp;gt; &amp;amp;&amp;amp; same_as&amp;lt;D, remove_cv_t&amp;lt;D&amp;gt;&amp;gt;
+  class view_interface : public view_base { …… };
+}
+```
+* is_class_v[link /reference/type_traits/is_class.md]
+* same_as[link /reference/concepts/same_as.md]
+* remove_cv_t[link /reference/type_traits/remove_cv.md]
+
+## 概要
+
+`view_interface`は、[`view`](view.md)を実装する際に便利なクラステンプレートである。使用するときは、派生クラスを`view_interface`のテンプレート引数にする(CRTP)。
+
+## メンバ関数
+
+これらのメンバ関数は、`std::ranges`以下のカスタマイゼーションポイントオブジェクトを使って実装されており、テンプレート引数として渡された範囲型に対して該当する呼び出しが可能な場合のみオーバーロード解決に参加する。
+
+| 名前                                         | 説明                             | 対応バージョン |
+|----------------------------------------------|----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | 範囲が空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | 範囲が空でないかどうかを判定する | C++20          |
+| [`data`](view_interface/data.md)             | 配列の先頭へのポインタを取得する | C++20          |
+| [`size`](view_interface/size.md)             | 要素数を取得する                 | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する       | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する       | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素アクセス                     | C++20          |
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>back -- &lt;ranges&gt; view_interfaceを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/back.html"/>
      <id>f97344d6133ab2c7d5d8e8ffab2b7a403643109c:reference/ranges/view_interface/back.md</id>
      <updated>2021-09-02T02:34:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/back.md b/reference/ranges/view_interface/back.md
new file mode 100644
index 000000000..957278b20
--- /dev/null
+++ b/reference/ranges/view_interface/back.md
@@ -0,0 +1,53 @@
+# back
+* ranges[meta header]
+* std::ranges[meta namespace]
+* view_interface[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr decltype(auto) back() requires bidirectional_range&amp;lt;D&amp;gt; &amp;amp;&amp;amp; common_range&amp;lt;D&amp;gt;;                   // (1)
+constexpr decltype(auto) back() const requires bidirectional_range&amp;lt;const D&amp;gt; &amp;amp;&amp;amp; common_range&amp;lt;const D&amp;gt;; // (2)
+```
+* bidirectional_range[link ../bidirectional_range.md]
+* common_range[link ../common_range.md]
+
+## 概要
+範囲の末尾の要素を取得する。
+
+## テンプレートパラメータ制約
+[`view_interface`](../view_interface.md)`&amp;lt;D&amp;gt;`に対して、
+
+- (1): `D`が[`bidirectional_range`](../bidirectional_range.md)かつ[`common_range`](../common_range.md)であること。
+- (2): `const D`が[`bidirectional_range`](../bidirectional_range.md)かつ[`common_range`](../common_range.md)であること。
+
+## 事前条件
+`!`[`empty`](empty.md)`()`
+
+## 戻り値
+(1)、(2)共に、以下と等価：
+
+```cpp
+*ranges​::​prev(ranges​::​end(derived()))
+```
+* ranges::​end[link ../begin.md]
+* ranges::​prev[link /reference/iterator/ranges_prev.md]
+* derived[italic]
+* derived[link derived.md]
+
+## 計算量
+償却定数時間
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- &lt;ranges&gt; view_interfaceを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/data.html"/>
      <id>f97344d6133ab2c7d5d8e8ffab2b7a403643109c:reference/ranges/view_interface/data.md</id>
      <updated>2021-09-02T02:34:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/data.md b/reference/ranges/view_interface/data.md
new file mode 100644
index 000000000..e1f48517e
--- /dev/null
+++ b/reference/ranges/view_interface/data.md
@@ -0,0 +1,50 @@
+# data
+* ranges[meta header]
+* std::ranges[meta namespace]
+* view_interface[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto data() requires contiguous_iterator&amp;lt;iterator_t&amp;lt;D&amp;gt;&amp;gt;;             // (1) 
+constexpr auto data() const requires contiguous_iterator&amp;lt;iterator_t&amp;lt;const D&amp;gt;&amp;gt;; // (2)
+```
+* contiguous_iterator[link /reference/iterator/contiguous_iterator.md]
+* iterator_t[link ../iterator_t.md]
+
+## 概要
+範囲の要素へのポインタを取得する。
+
+## テンプレートパラメータ制約
+[`view_interface`](../view_interface.md)`&amp;lt;D&amp;gt;`に対して、
+
+- (1): `D`のイテレータが[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)であること。
+- (2): `const D`のイテレータが[`contiguous_iterator`](/reference/iterator/contiguous_iterator.md)であること。
+
+## 戻り値
+(1)、(2)共に、以下と等価：
+
+```cpp
+to_address(ranges::begin(derived()));
+```
+* to_address[link /reference/memory/to_address.md]
+* ranges::begin[link ../begin.md]
+* derived[italic]
+* derived[link derived.md]
+
+## 計算量
+償却定数時間
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>derived -- &lt;ranges&gt; view_interfaceを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/derived.html"/>
      <id>f97344d6133ab2c7d5d8e8ffab2b7a403643109c:reference/ranges/view_interface/derived.md</id>
      <updated>2021-09-02T02:34:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/derived.md b/reference/ranges/view_interface/derived.md
new file mode 100644
index 000000000..f4b708289
--- /dev/null
+++ b/reference/ranges/view_interface/derived.md
@@ -0,0 +1,30 @@
+# derived
+* ranges[meta header]
+* std::ranges[meta namespace]
+* view_interface[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr D&amp;amp; derived() noexcept {                   // exposition only
+  return static_cast&amp;lt;D&amp;amp;&amp;gt;(*this);
+}
+
+constexpr const D&amp;amp; derived() const noexcept {       // exposition only
+  return static_cast&amp;lt;const D&amp;amp;&amp;gt;(*this);
+}
+```
+* derived[italic]
+
+## 概要
+派生クラスの参照にダウンキャストする説明用の`private`メンバー関数。
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- &lt;ranges&gt; view_interfaceを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/empty.html"/>
      <id>f97344d6133ab2c7d5d8e8ffab2b7a403643109c:reference/ranges/view_interface/empty.md</id>
      <updated>2021-09-02T02:34:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/empty.md b/reference/ranges/view_interface/empty.md
new file mode 100644
index 000000000..93f842b22
--- /dev/null
+++ b/reference/ranges/view_interface/empty.md
@@ -0,0 +1,49 @@
+# empty
+* ranges[meta header]
+* std::ranges[meta namespace]
+* view_interface[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr bool empty() requires forward_range&amp;lt;D&amp;gt;;             // (1) 
+constexpr bool empty() const requires forward_range&amp;lt;const D&amp;gt;; // (2)
+```
+* forward_range[link ../forward_range.md]
+
+## 概要
+範囲が空かどうかを判定する。
+
+## テンプレートパラメータ制約
+[`view_interface`](../view_interface.md)`&amp;lt;D&amp;gt;`に対して、
+
+- (1): `D`が[`forward_range`](../forward_range.md)であること。
+- (2): `const D`が[`forward_range`](../forward_range.md)であること。
+
+## 戻り値
+(1)、(2)共に、以下と等価：
+
+```cpp
+ranges::begin(derived()) == ranges::end(derived())
+```
+* ranges::begin[link ../begin.md]
+* ranges::end[link ../end.md]
+* derived[italic]
+* derived[link derived.md]
+
+## 計算量
+償却定数時間
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>front -- &lt;ranges&gt; view_interfaceを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/front.html"/>
      <id>f97344d6133ab2c7d5d8e8ffab2b7a403643109c:reference/ranges/view_interface/front.md</id>
      <updated>2021-09-02T02:34:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/front.md b/reference/ranges/view_interface/front.md
new file mode 100644
index 000000000..a8cbe9f5b
--- /dev/null
+++ b/reference/ranges/view_interface/front.md
@@ -0,0 +1,51 @@
+# front
+* ranges[meta header]
+* std::ranges[meta namespace]
+* view_interface[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr decltype(auto) front() requires forward_range&amp;lt;D&amp;gt;;             // (1)
+constexpr decltype(auto) front() const requires forward_range&amp;lt;const D&amp;gt;; // (2)
+```
+* forward_range[link ../forward_range.md]
+
+## 概要
+範囲の先頭の要素を取得する。
+
+## テンプレートパラメータ制約
+[`view_interface`](../view_interface.md)`&amp;lt;D&amp;gt;`に対して、
+
+- (1): `D`が[`forward_range`](../forward_range.md)であること。
+- (2): `const D`が[`forward_range`](../forward_range.md)であること。
+
+## 事前条件
+`!`[`empty`](empty.md)`()`
+
+## 戻り値
+(1)、(2)共に、以下と等価：
+
+```cpp
+*ranges​::​begin(derived())
+```
+* ranges::begin[link ../begin.md]
+* derived[italic]
+* derived[link derived.md]
+
+## 計算量
+償却定数時間
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator [] -- &lt;ranges&gt; view_interfaceを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/op_at.html"/>
      <id>f97344d6133ab2c7d5d8e8ffab2b7a403643109c:reference/ranges/view_interface/op_at.md</id>
      <updated>2021-09-02T02:34:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/op_at.md b/reference/ranges/view_interface/op_at.md
new file mode 100644
index 000000000..ac4aeb759
--- /dev/null
+++ b/reference/ranges/view_interface/op_at.md
@@ -0,0 +1,51 @@
+# operator []
+* ranges[meta header]
+* std::ranges[meta namespace]
+* view_interface[meta class]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+template&amp;lt;random_access_range R = D&amp;gt;
+constexpr decltype(auto) operator[](range_difference_t&amp;lt;R&amp;gt; n)       // (1)
+
+template&amp;lt;random_access_range R = const D&amp;gt;
+constexpr decltype(auto) operator[](range_difference_t&amp;lt;R&amp;gt; n) const // (2)
+```
+* random_access_range[link ../random_access_range.md]
+* range_difference_t[link ../range_difference_t.md]
+* derived[italic]
+* derived[link derived.md]
+
+## 概要
+範囲の要素にアクセスする。
+
+## テンプレートパラメータ制約
+`R`が[`random_access_range`](../random_access_range.md)であること。
+
+## 戻り値
+(1)、(2)共に、以下と等価：
+
+```cpp
+ranges::begin(derived())[n];
+```
+* ranges::begin[link ../empty.md]
+* derived[italic]
+* derived[link derived.md]
+
+## 計算量
+償却定数時間
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool -- &lt;ranges&gt; view_interfaceを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/op_bool.html"/>
      <id>f97344d6133ab2c7d5d8e8ffab2b7a403643109c:reference/ranges/view_interface/op_bool.md</id>
      <updated>2021-09-02T02:34:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/op_bool.md b/reference/ranges/view_interface/op_bool.md
new file mode 100644
index 000000000..e567bec9c
--- /dev/null
+++ b/reference/ranges/view_interface/op_bool.md
@@ -0,0 +1,47 @@
+# operator bool
+* ranges[meta header]
+* std::ranges[meta namespace]
+* view_interface[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+    constexpr explicit operator bool() requires requires { ranges::empty(derived()); };       // (1)
+    constexpr explicit operator bool() const requires requires { ranges::empty(derived()); }; // (2)
+```
+* ranges::empty[link ../empty.md]
+* derived[italic]
+* derived[link derived.md]
+
+## 概要
+範囲が空かどうかを判定する。
+
+## テンプレートパラメータ制約
+式[`ranges::empty`](../empty.md)`(`[`derived`](derived.md)`)`が有効であること。
+
+## 戻り値
+(1)、(2)共に、以下と等価：
+
+```cpp
+!ranges::empty(derived())
+```
+* ranges::empty[link ../empty.md]
+* derived[italic]
+* derived[link derived.md]
+
+## 計算量
+償却定数時間
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- &lt;ranges&gt; view_interfaceを追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/view_interface/size.html"/>
      <id>f97344d6133ab2c7d5d8e8ffab2b7a403643109c:reference/ranges/view_interface/size.md</id>
      <updated>2021-09-02T02:34:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/view_interface/size.md b/reference/ranges/view_interface/size.md
new file mode 100644
index 000000000..aa2e7bb5d
--- /dev/null
+++ b/reference/ranges/view_interface/size.md
@@ -0,0 +1,52 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* view_interface[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto size() requires forward_range&amp;lt;D&amp;gt; &amp;amp;&amp;amp; sized_sentinel_for&amp;lt;sentinel_t&amp;lt;D&amp;gt;, iterator_t&amp;lt;D&amp;gt;&amp;gt;;                         // (1) 
+constexpr auto size() const requires forward_range&amp;lt;const D&amp;gt; &amp;amp;&amp;amp; sized_sentinel_for&amp;lt;sentinel_t&amp;lt;const D&amp;gt;, iterator_t&amp;lt;const D&amp;gt;&amp;gt;; // (2)
+```
+* forward_range[link ../forward_range.md]
+* sentinel_t[link ../sentinel_t.md]
+* iterator_t[link ../iterator_t.md]
+* sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
+
+## 概要
+範囲の大きさを取得する。
+
+## テンプレートパラメータ制約
+[`view_interface`](../view_interface.md)`&amp;lt;D&amp;gt;`に対して、
+
+- (1): `D`が[`forward_range`](../forward_range.md)であり、`D`のイテレータ`I`と番兵`S`が[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`(I, S)`を満たすこと。
+- (2): `const D`が[`forward_range`](../forward_range.md)であり、`const D`のイテレータ`I`と番兵`S`が[`sized_sentinel_for`](/reference/iterator/sized_sentinel_for.md)`(I, S)`を満たすこと。
+
+## 戻り値
+(1)、(2)共に、以下と等価：
+
+```cpp
+ranges::end(derived()) - ranges::begin(derived());
+```
+* ranges::begin[link ../begin.md]
+* ranges::end[link ../end.md]
+* derived[italic]
+* derived[link derived.md]
+
+## 計算量
+償却定数時間
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bidirectional_range -- &lt;ranges&gt; 例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/bidirectional_range.html"/>
      <id>074f55b75dea77c0c4504b99ff83f48f170f03a8:reference/ranges/bidirectional_range.md</id>
      <updated>2021-09-02T02:25:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/bidirectional_range.md b/reference/ranges/bidirectional_range.md
index 2ca1f8b9f..69099cd43 100644
--- a/reference/ranges/bidirectional_range.md
+++ b/reference/ranges/bidirectional_range.md
@@ -21,10 +21,26 @@ namespace std::ranges {
 型`T`が`bidirectional_range`のモデルとなるのは、`T`が[`forward_range`](forward_range.md)のモデルであり、かつそのイテレータが[`bidirectional_iterator`](/reference/iterator/bidirectional_iterator.md)のモデルである場合である。
 
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;forward_list&amp;gt;
+#include &amp;lt;list&amp;gt;
+
+int main() {
+  using namespace std;
+  // listはbidirectional_range
+  static_assert(ranges::bidirectional_range&amp;lt;list&amp;lt;int&amp;gt;&amp;gt;);
+
+  // forward_listはbidirectional_rangeではなく、forward_range
+  static_assert(!ranges::bidirectional_range&amp;lt;forward_list&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(ranges::forward_range&amp;lt;forward_list&amp;lt;int&amp;gt;&amp;gt;);
+}
+```
+* ranges::bidirectional_range[link random_access_range.md]
 
 ### 出力
-(執筆中)
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forward_range -- &lt;ranges&gt; 例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/forward_range.html"/>
      <id>074f55b75dea77c0c4504b99ff83f48f170f03a8:reference/ranges/forward_range.md</id>
      <updated>2021-09-02T02:25:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/forward_range.md b/reference/ranges/forward_range.md
index 583c9aa75..d68fed342 100644
--- a/reference/ranges/forward_range.md
+++ b/reference/ranges/forward_range.md
@@ -21,10 +21,27 @@ namespace std::ranges {
 型`T`が`forward_range`のモデルとなるのは、`T`が[`input_range`](input_range.md)のモデルであり、かつそのイテレータが[`forward_iterator`](/reference/iterator/forward_iterator.md)のモデルである場合である。
 
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;forward_list&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  // forward_listはforward_range
+  static_assert(ranges::forward_range&amp;lt;forward_list&amp;lt;int&amp;gt;&amp;gt;);
+
+  // istream_viewはforward_rangeではなく、input_range
+  static_assert(!ranges::forward_range&amp;lt;decltype(ranges::istream_view&amp;lt;int&amp;gt;(cin))&amp;gt;);
+  static_assert(ranges::input_range&amp;lt;decltype(ranges::istream_view&amp;lt;int&amp;gt;(cin))&amp;gt;);
+}
+```
+* ranges::input_range[link input_range.md]
+* ranges::istream_view[link istream_view.md.nolink]
 
 ### 出力
-(執筆中)
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contiguous_range -- &lt;ranges&gt; 例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/contiguous_range.html"/>
      <id>9d999421d7877974e3a84d406141dba2c3decbac:reference/ranges/contiguous_range.md</id>
      <updated>2021-09-01T02:52:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/contiguous_range.md b/reference/ranges/contiguous_range.md
index f73067664..0c51cfded 100644
--- a/reference/ranges/contiguous_range.md
+++ b/reference/ranges/contiguous_range.md
@@ -33,22 +33,22 @@ namespace std::ranges {
 ## 例
 ```cpp example
 #include &amp;lt;ranges&amp;gt;
-#include &amp;lt;list&amp;gt;
-#include &amp;lt;set&amp;gt;
 #include &amp;lt;vector&amp;gt;
 
-int main()
-{
+int main() {
+  using namespace std;
   // vectorはcontiguous_range
-  static_assert(std::ranges::contiguous_range&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(ranges::contiguous_range&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;);
 
-  // listはcontiguous_rangeではない
-  static_assert(!std::ranges::contiguous_range&amp;lt;std::list&amp;lt;int&amp;gt;&amp;gt;);
-
-  // setはcontiguous_rangeではない
-  static_assert(!std::ranges::contiguous_range&amp;lt;std::set&amp;lt;int&amp;gt;&amp;gt;);
+  // vectorから作ったelements_viewはcontiguous_rangeではない
+  using view_t = ranges::elements_view&amp;lt;ranges::views::all_t&amp;lt;vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;amp;&amp;gt;, 0&amp;gt;;
+  static_assert(ranges::random_access_range&amp;lt;view_t&amp;gt;);
+  static_assert(!ranges::contiguous_range&amp;lt;view_t&amp;gt;);
 }
 ```
+* elements_view[link elements_view.md.nolink]
+* all_t[link all_t.md.nolink]
+* ranges::random_access_range[link random_access_range.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>output_range -- &lt;ranges&gt; 例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/output_range.html"/>
      <id>9d999421d7877974e3a84d406141dba2c3decbac:reference/ranges/output_range.md</id>
      <updated>2021-09-01T02:52:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/output_range.md b/reference/ranges/output_range.md
index 51c21a40c..963146f59 100644
--- a/reference/ranges/output_range.md
+++ b/reference/ranges/output_range.md
@@ -21,10 +21,24 @@ namespace std::ranges {
 型`T`が`output_range`のモデルとなるのは、`T`が[`range`](range.md)のモデルであり、かつそのイテレータが[`output_iterator`](/reference/iterator/output_iterator.md)のモデルである場合である。
 
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  ostream_iterator&amp;lt;int&amp;gt; osi(cout);
+  static_assert(ranges::output_range&amp;lt;decltype(views::counted(osi, 5)), int&amp;gt;);
+}
+```
+* ranges::output_range[color ff0000]
+* views::counted[link counted.md.nolink]
 
 ### 出力
-(執筆中)
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random_access_range -- &lt;ranges&gt; 例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/random_access_range.html"/>
      <id>9d999421d7877974e3a84d406141dba2c3decbac:reference/ranges/random_access_range.md</id>
      <updated>2021-09-01T02:52:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/random_access_range.md b/reference/ranges/random_access_range.md
index 210b72848..eeb1fcf05 100644
--- a/reference/ranges/random_access_range.md
+++ b/reference/ranges/random_access_range.md
@@ -21,10 +21,28 @@ namespace std::ranges {
 型`T`が`random_access_range`のモデルとなるのは、`T`が[`bidirectional_range`](bidirectional_range.md)のモデルであり、かつそのイテレータが[`random_access_iterator`](/reference/iterator/random_access_iterator.md)のモデルである場合である。
 
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;list&amp;gt;
+#include &amp;lt;set&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main()
+{
+  // vectorはrandom_access_range
+  static_assert(std::ranges::random_access_range&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;);
+
+  // listはrandom_access_rangeではない
+  static_assert(!std::ranges::random_access_range&amp;lt;std::list&amp;lt;int&amp;gt;&amp;gt;);
+
+  // setはrandom_access_rangeではない
+  static_assert(!std::ranges::random_access_range&amp;lt;std::set&amp;lt;int&amp;gt;&amp;gt;);
+}
+```
 
 ### 出力
-(執筆中)
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式での*thisのコピーキャプチャ -- Merge pull request #895 from norisio/fixtypo_lambda_capture_of_this_by_value</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html"/>
      <id>0d201ff5aff301b8db39bb613ec1ad68c0aad9f7:lang/cpp17/lambda_capture_of_this_by_value.md</id>
      <updated>2021-08-31T17:32:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_capture_of_this_by_value.md b/lang/cpp17/lambda_capture_of_this_by_value.md
index 6066bf760..2f6b1b87c 100644
--- a/lang/cpp17/lambda_capture_of_this_by_value.md
+++ b/lang/cpp17/lambda_capture_of_this_by_value.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 
 ## 概要
-C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が付きている場合がある。
+C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が尽きている場合がある。
 
 C++17では`[*this]`のようにキャプチャすることで、キャプチャ時点での`*this`オブジェクトをコピーできるようになった。
 
@@ -11,7 +11,7 @@ C++17では`[*this]`のようにキャプチャすることで、キャプチャ
 
 ## 備考
 - `[*this]`でコピーキャプチャしたオブジェクトは、デフォルトで`const`になるので注意。`[this]`はポインタであるため書き換えができ、非`const`メンバ関数を呼び出せる。しかし、`[*this]`はオブジェクトをコピーして`const`となるため、ラムダ式に`mutable`を付けない限り、非`const`メンバ関数を呼び出せない。
-- ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタの寿命が付きる場合があることが正しい状況では、依然として[`std::weak_ptr`](/reference/memory/weak_ptr.md)のような機能を使用して、生死監視をする必要がある。
+- ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタの寿命が尽きる場合があることが正しい状況では、依然として[`std::weak_ptr`](/reference/memory/weak_ptr.md)のような機能を使用して、生死監視をする必要がある。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>ラムダ式での*thisのコピーキャプチャ -- Typo修正: 付きる -&gt; 尽きる</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/lambda_capture_of_this_by_value.html"/>
      <id>85b1d945be1fba2f99d788c3112fd5c386f04e06:lang/cpp17/lambda_capture_of_this_by_value.md</id>
      <updated>2021-08-31T17:10:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/lambda_capture_of_this_by_value.md b/lang/cpp17/lambda_capture_of_this_by_value.md
index 6066bf760..2f6b1b87c 100644
--- a/lang/cpp17/lambda_capture_of_this_by_value.md
+++ b/lang/cpp17/lambda_capture_of_this_by_value.md
@@ -2,7 +2,7 @@
 * cpp17[meta cpp]
 
 ## 概要
-C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が付きている場合がある。
+C++14までラムダ式で`[this]`のようにキャプチャをすると、`this`ポインタがコピーされていた。その場合、非同期処理のような状況で、ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタが指すオブジェクトの寿命が尽きている場合がある。
 
 C++17では`[*this]`のようにキャプチャすることで、キャプチャ時点での`*this`オブジェクトをコピーできるようになった。
 
@@ -11,7 +11,7 @@ C++17では`[*this]`のようにキャプチャすることで、キャプチャ
 
 ## 備考
 - `[*this]`でコピーキャプチャしたオブジェクトは、デフォルトで`const`になるので注意。`[this]`はポインタであるため書き換えができ、非`const`メンバ関数を呼び出せる。しかし、`[*this]`はオブジェクトをコピーして`const`となるため、ラムダ式に`mutable`を付けない限り、非`const`メンバ関数を呼び出せない。
-- ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタの寿命が付きる場合があることが正しい状況では、依然として[`std::weak_ptr`](/reference/memory/weak_ptr.md)のような機能を使用して、生死監視をする必要がある。
+- ラムダ式の関数オブジェクトが呼び出されたときに、`this`ポインタの寿命が尽きる場合があることが正しい状況では、依然として[`std::weak_ptr`](/reference/memory/weak_ptr.md)のような機能を使用して、生死監視をする必要がある。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Naoya Sakabe</name>
        <email>k.exa.apostrophe@gmail.com</email>
      </author>
    </entry>
  
</feed>
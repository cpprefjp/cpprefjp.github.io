<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-17T14:49:06.994872</updated>
  <id>048558ba-ca81-4e09-a1da-9cbd004179e4</id>

  
    <entry>
      <title>read_env -- improve std::execution::read_env()</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/read_env.html"/>
      <id>10d613142bb65190d6d5c25169d768e0d2bbf10d:reference/execution/execution/read_env.md</id>
      <updated>2025-06-17T20:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/read_env.md b/reference/execution/execution/read_env.md
index d494bedbd..db4146dee 100644
--- a/reference/execution/execution/read_env.md
+++ b/reference/execution/execution/read_env.md
@@ -67,9 +67,9 @@ int main()
 * ex::read_env[color ff0000]
 * ex::sender[link sender.md]
 * ex::get_scheduler[link get_scheduler.md]
-* ex::let_value[lin let_value.md]
+* ex::let_value[link let_value.md]
 * ex::starts_on[link starts_on.md]
-* ex::just[lin just.md]
+* ex::just[link just.md]
 * std::this_thread::sync_wait[link ../this_thread/sync_wait.md]
 * value()[link /reference/optional/optional/value.md]
 
@@ -91,7 +91,7 @@ int main()
 
 
 ## 関連項目
-- [`execution::get_env`](read_env.md)
+- [`execution::get_env`](get_env.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ssize -- checked gcc version for std::ssize()</title>
      <link href="https://cpprefjp.github.io/reference/iterator/ssize.html"/>
      <id>1434e2d7e07d1078914fdcea7c7a6bd7d40b33b1:reference/iterator/ssize.md</id>
      <updated>2025-06-14T18:18:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/ssize.md b/reference/iterator/ssize.md
index 263580943..24e2488d2 100644
--- a/reference/iterator/ssize.md
+++ b/reference/iterator/ssize.md
@@ -65,7 +65,7 @@ int main()
 
 ### 処理系
 - [Clang](/implementation.md#clang): 9.0 [mark verified]
-- [GCC](/implementation.md#gcc):
+- [GCC](/implementation.md#gcc): 12.3.0 [mark verified]
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- improve chrono::format</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>8bd1a9a9826c76307f017ea4560de0ca49533f8f:reference/chrono/format.md</id>
      <updated>2025-06-14T17:37:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index 491b7d90c..e93ea0d14 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -53,8 +53,8 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 | `%g` | ISOの週ベースのうしろ2桁10進数の年。結果が1桁の場合、先頭に`0`がつく | `&amp;#34;20&amp;#34;` |
 | `%G` | ISOの週ベースの10進数の年。結果が4桁未満の場合、4桁になるよう左が`0`で埋められる | `&amp;#34;2020&amp;#34;` |
 | `%h` | `%b`と等価 | `&amp;#34;Jan&amp;#34;`, `&amp;#34;4月&amp;#34;` |
-| `%H` | 24時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OH`を指定知ると、ロケール依存の異なる表現を出力する | `&amp;#34;17&amp;#34;` |
-| `%I` | 12時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OI`を指定知ると、ロケール依存の異なる表現を出力する | `&amp;#34;05&amp;#34;` |
+| `%H` | 24時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OH`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;17&amp;#34;` |
+| `%I` | 12時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OI`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;05&amp;#34;` |
 | `%j` | 10進数での年の日。1月1日は`001`が出力される。結果が3桁未満の場合、3桁になるよう左が`0`で埋められる。[`duration`](duration.md)の特殊化が与えられた場合、[`days`](duration_aliases.md)の10進数値として0埋めなしで書式化される | `&amp;#34;115&amp;#34;` |
 | `%m` | 10進数での月。1月は`01`が出力される。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%Om`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;04&amp;#34;` |
 | `%M` | 10進数での分。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%OM`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;14&amp;#34;` |
@@ -107,12 +107,11 @@ int main()
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;2. {:%H時%M分%S秒}&amp;#34;, now) &amp;lt;&amp;lt; std::endl;
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;3. {:%H時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4. {:%p %I時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;4. {:%p %I時%M分%S秒}&amp;#34;, now_sec) &amp;lt;&amp;lt; std::endl;
 
   // その他要素
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6. {:%C}&amp;#34;, now) &amp;lt;&amp;lt; std::endl; // 世紀 (100で割って切り下げた値)
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7. {:%a}&amp;#34;, now) &amp;lt;&amp;lt; std::endl; // 曜日の略称
-  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;8. {:%A}&amp;#34;, now) &amp;lt;&amp;lt; std::endl; // 曜日の完全名
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;5. {:%C}&amp;#34;, now) &amp;lt;&amp;lt; std::endl; // 世紀 (100で割って切り下げた値)
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;6. {:%a}&amp;#34;, now) &amp;lt;&amp;lt; std::endl; // 曜日の略称
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;7. {:%A}&amp;#34;, now) &amp;lt;&amp;lt; std::endl; // 曜日の完全名
 }
 ```
 * std::chrono::system_clock[link /reference/chrono/system_clock.md]
@@ -125,9 +124,9 @@ int main()
 2. 08時27分28.1822610秒
 3. 08時27分28秒
 4. AM 08時27分28秒
-6. 20
-7. Tue
-8. Tuesday
+5. 20
+6. Tue
+7. Tuesday
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contracts -- removed nolink</title>
      <link href="https://cpprefjp.github.io/reference/contracts.html"/>
      <id>3c65924b17eb8f2e7f19b5e937dcbcb82390179b:reference/contracts.md</id>
      <updated>2025-06-13T12:11:41+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;contracts&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;contracts&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;contracts&amp;gt;&lt;/code&gt;ヘッダでは、C++における契約プログラミングのサポートを提供する。&lt;/p&gt;
&lt;p&gt;契約プログラミングは、関数やクラスの前提条件、事後条件、およびアサーションを明示的に指定するプログラミング手法である。これらの条件が満たされない場合、プログラムは契約違反を報告する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/assertion_kind.html&#34;&gt;assertion_kind&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの種類 (enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/evaluation_semantic.html&#34;&gt;evaluation_semantic&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;アサーションの評価の種類(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/detection_mode.html&#34;&gt;detection_mode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反の検出モード(enum)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/contract_violation.html&#34;&gt;contract_violation&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;契約違反に関する情報 (class)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;contracts/invoke_default_contract_violation_handler.html&#34;&gt;invoke_default_contract_violation_handler&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトcontract_violationハンドラー&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../lang/future/contract-based_programming.html&#34;&gt;契約に基づくプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../lang/cpp26/contracts.html&#34;&gt;契約プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0542r5.html&#34; target=&#34;_blank&#34;&gt;P0542R5 Support for contract based programming in C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>invoke_default_contract_violation_handler -- new page `invoke_default_contract_violation_handler.md` (#1419)</title>
      <link href="https://cpprefjp.github.io/reference/contracts/invoke_default_contract_violation_handler.html"/>
      <id>7491d107336f24890601534ce11122b7beae2f44:reference/contracts/invoke_default_contract_violation_handler.md</id>
      <updated>2025-06-13T12:06:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/invoke_default_contract_violation_handler.md b/reference/contracts/invoke_default_contract_violation_handler.md
new file mode 100644
index 000000000..844f31814
--- /dev/null
+++ b/reference/contracts/invoke_default_contract_violation_handler.md
@@ -0,0 +1,37 @@
+# invoke_default_contract_violation_handler
+* contracts[meta header]
+* std::contracts[meta namespace]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::contracts {
+  void invoke_default_contract_violation_handler(const contract_violation&amp;amp; violation);
+}
+```
+
+## 概要
+契約違反が発生した際に呼び出されるデフォルトのハンドラー関数。
+
+この関数は、契約違反が発生した際に、[`contract_violation`](contract_violation.md)オブジェクトを受け取り、デフォルトの処理を実行する。
+
+## 効果
+契約違反の情報を標準エラー出力に出力し、[`std::terminate()`](/reference/exception/terminate.md)を呼び出す。
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ?
+- [GCC](/implementation.md#gcc): ?
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): ?
+
+## 関連項目
+- [契約に基づくプログラミング](/lang/future/contract-based_programming.md)
+- [契約プログラミング](/lang/cpp26/contracts.md)
+- [`contract_violation`](contract_violation.md)
+
+## 参照
+- [P2900R14 Contracts for C++](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2900r14.pdf) 
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
</feed>
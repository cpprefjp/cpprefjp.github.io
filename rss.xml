<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-11-26T12:15:50.933041</updated>
  <id>2c164aa3-4476-4d9d-974f-33baede5e731</id>

  
    <entry>
      <title>lazy_split_view -- lazy_split : ヘッダの追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view.html"/>
      <id>07751c0825760ca0ff4782c998fe7a25c566701b:reference/ranges/lazy_split_view.md</id>
      <updated>2021-11-26T11:36:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view.md b/reference/ranges/lazy_split_view.md
index 96a61d7ea..812cf2a9a 100644
--- a/reference/ranges/lazy_split_view.md
+++ b/reference/ranges/lazy_split_view.md
@@ -136,6 +136,7 @@ int main() {
 #include &amp;lt;ranges&amp;gt;
 #include &amp;lt;vector&amp;gt;
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
 
 int main() {
   using namespace std;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lazy_split_view -- lazy_split_view : サンプルコードの修正と整理</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view.html"/>
      <id>79eba48ebff0496a5079ad93c1c19c68d7bad616:reference/ranges/lazy_split_view.md</id>
      <updated>2021-11-26T11:34:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view.md b/reference/ranges/lazy_split_view.md
index c4efa63ce..96a61d7ea 100644
--- a/reference/ranges/lazy_split_view.md
+++ b/reference/ranges/lazy_split_view.md
@@ -99,18 +99,20 @@ concept tiny-range = sized_range&amp;lt;R&amp;gt; &amp;amp;&amp;amp;
 | [`(deduction_guide)`](lazy_split_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
+
+### `range`による`range`の分割
+
 ```cpp example
 #include &amp;lt;ranges&amp;gt;
 #include &amp;lt;vector&amp;gt;
 #include &amp;lt;iostream&amp;gt;
-#include &amp;lt;sstream&amp;gt;
 
 int main() {
   using namespace std;
-  auto iss = istringstream{&amp;#34;1 2 3 4 5 6 7 8 9&amp;#34;};
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6, 7, 8, 9};
   std::vector&amp;lt;int&amp;gt; pattern = {4, 5};
 
-  for (auto inner_range : views::istream_view&amp;lt;int&amp;gt;(iss) | views::lazy_split(views::all(pattern))) {
+  for (auto inner_range : v | views::lazy_split(pattern)) {
     for (int n : inner_range) {
       std::cout &amp;lt;&amp;lt; n;
     }
@@ -126,6 +128,37 @@ int main() {
 6789
 ```
 
+### `input_range`の分割
+
+この場合はデリミタは1要素でなければならず、`range`による分割はできない。
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std;
+  auto iss = istringstream{&amp;#34;1 2 3 1 4 5 6 1 7 8 1 9 1&amp;#34;};
+
+  for (auto inner_range : ranges::istream_view&amp;lt;int&amp;gt;(iss) | views::lazy_split(1)) {
+    for (int n : inner_range) {
+      std::cout &amp;lt;&amp;lt; n;
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* views::lazy_split[color ff0000]
+
+### 出力
+```
+23
+456
+78
+9
+```
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- リンク修正 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>2a965d04f1e0046cd475e446b77b331b7a6521c2:reference/algorithm.md</id>
      <updated>2021-11-26T02:03:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 13a8ea404..e245251e5 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -141,8 +141,8 @@ inline constexpr f_impl f; // f は変数名なのでADLで発見されない
 | [`ranges::find_if`](algorithm/ranges_find_if.md.nolink)             | 条件を満たす最初の要素を検索する                     | C++20 |
 | [`ranges::find_if_not`](algorithm/ranges_find_if_not.md.nolink)     | 条件を満たしていない最初の要素を検索する             | C++20 |
 | [`ranges::find_end`](algorithm/ranges_find_end.md.nolink)           | 指定された最後のサブシーケンスを検索する             | C++20 |
-| [`ranges::find_first_of`](algorithm/ra.nolinknges_find_first_of.md) | ある集合の1つとマッチする最初の要素を検索する        | C++20 |
-| [`ranges::adjacent_find`](algorithm/ra.nolinknges_adjacent_find.md) | 隣接する要素で条件を満たしている最初の要素を検索する | C++20 |
+| [`ranges::find_first_of`](algorithm/ra.nolinknges_find_first_of.md.nolink) | ある集合の1つとマッチする最初の要素を検索する        | C++20 |
+| [`ranges::adjacent_find`](algorithm/ra.nolinknges_adjacent_find.md.nolink) | 隣接する要素で条件を満たしている最初の要素を検索する | C++20 |
 | [`ranges::count`](algorithm/ranges_count.md.nolink)                 | 指定された値である要素の数を数える                   | C++20 |
 | [`ranges::count_if`](algorithm/ranges_count_if.md.nolink)           | 条件を満たしている要素の数を数える                   | C++20 |
 | [`ranges::mismatch`](algorithm/ranges_mismatch.md.nolink)           | 2つの範囲が一致していない場所を検索する              | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- all_of/any_of/none_ofの説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>31699fb3e5a5622c79b5a1f9df2c65a618bc52ba:reference/algorithm.md</id>
      <updated>2021-11-26T01:47:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index bee047e68..13a8ea404 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -132,9 +132,9 @@ inline constexpr f_impl f; // f は変数名なのでADLで発見されない
 | [`equal`](algorithm/equal.md)                 | 2つの範囲を等値比較する | |
 | [`search`](algorithm/search.md)               | 指定された最初のサブシーケンスを検索する | |
 | [`search_n`](algorithm/search_n.md)           | 指定された最初のサブシーケンスを検索する | |
-| [`ranges::all_of`](algorithm/ranges_all_of.md.nolink)               | 全ての要素が条件を満たしているかを調べる             | C++20 |
-| [`ranges::any_of`](algorithm/ranges_any_of.md.nolink)               | どれかの要素が条件を満たしているかを調べる           | C++20 |
-| [`ranges::none_of`](algorithm/ranges_none_of.md.nolink)             | 全ての要素が条件を満たしていないかを調べる           | C++20 |
+| [`ranges::all_of`](algorithm/ranges_all_of.md)               | 全ての要素が条件を満たしているかを調べる             | C++20 |
+| [`ranges::any_of`](algorithm/ranges_any_of.md)               | どれかの要素が条件を満たしているかを調べる           | C++20 |
+| [`ranges::none_of`](algorithm/ranges_none_of.md)             | 全ての要素が条件を満たしていないかを調べる           | C++20 |
 | [`ranges::for_each`](algorithm/ranges_for_each.md.nolink)           | 全ての要素に対して処理を行う                         | C++20 |
 | [`ranges::for_each_n`](algorithm/ranges_for_each_n.md.nolink)       | 範囲の先頭N個の要素に対して処理を行う                | C++20 |
 | [`ranges::find`](algorithm/ranges_find.md.nolink)                   | 指定された値を検索する                               | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all_of -- all_of/any_of/none_ofの説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_all_of.html"/>
      <id>31699fb3e5a5622c79b5a1f9df2c65a618bc52ba:reference/algorithm/ranges_all_of.md</id>
      <updated>2021-11-26T01:47:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_all_of.md b/reference/algorithm/ranges_all_of.md
new file mode 100644
index 000000000..3ce539297
--- /dev/null
+++ b/reference/algorithm/ranges_all_of.md
@@ -0,0 +1,115 @@
+# all_of
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool all_of(I first, S last, Pred pred, Proj proj = {}); // (1)
+
+  template&amp;lt;input_range R, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool all_of(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});           // (2)
+}
+```
+- input_iterator[link /reference/iterator/input_iterator.md]
+- sentinel_for[link /reference/iterator/sentinel_for.md]
+- identity[link /reference/functional/identity.md]
+- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+- input_range[link /reference/ranges/input_range.md]
+- projected[link /reference/iterator/projected.md]
+
+## 概要
+範囲の全ての要素が条件を満たすかを判定する。
+
+## テンプレートパラメータ制約
+- (1):
+    - `I`が[`input_iterator`](/reference/iterator/input_iterator.md)である
+    - `S`が[`I`に対する番兵](/reference/iterator/sentinel_for.md)である
+    - `Pred`は`I`を`Proj`で射影した値を[参照で渡すことができる1引数の述語](/reference/iterator/indirect_unary_predicate.md)である
+- (2):
+    - `R`が[`input_range`](/reference/ranges/input_range.md)である
+    - `Pred`は`R`のイテレータを`Proj`で射影した値を[参照で渡すことができる1引数の述語](/reference/iterator/indirect_unary_predicate.md)である
+
+## 戻り値
+`[first,last)` あるいは `r` が空であったり、その範囲内の全てのイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `true` である場合は `true` を返し、そうでない場合は `false` を返す。
+
+## 計算量
+最大で `last - first` 回 `proj` と `pred` を実行する。
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;array&amp;gt;
+
+int main() {
+  constexpr std::array v = { 3, 1, 4 };
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  // 全ての要素が 5 より小さいか
+  constexpr bool result1 = std::ranges::all_of(v, [](int x) { return x &amp;lt; 5; });
+  std::cout &amp;lt;&amp;lt; result1 &amp;lt;&amp;lt; std::endl;
+
+  // 全ての要素が 1 であるか
+  constexpr bool result2 = std::ranges::all_of(v, [](int x) { return x == 1; });
+  std::cout &amp;lt;&amp;lt; result2 &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::all_of[color ff0000]
+
+### 出力
+```
+true
+false
+```
+
+## 実装例
+```cpp
+struct all_of_impl {
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool operator()(I first, S last, Pred pred, Proj proj = {}) {
+    for (; first != last; ++first)
+      if (!invoke(pred, invoke(proj, *first))) return false;
+    return true;
+  }
+
+  template&amp;lt;input_range R, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool operator()(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {}) {
+    return (*this)(begin(r), end(r), ref(pred), ref(proj));
+  }
+}
+
+inline constexpr all_of_impl all_of;
+```
+- input_iterator[link /reference/iterator/input_iterator.md]
+- sentinel_for[link /reference/iterator/sentinel_for.md]
+- identity[link /reference/functional/identity.md]
+- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+- input_range[link /reference/ranges/input_range.md]
+- projected[link /reference/iterator/projected.md]
+- invoke[link /reference/functional/invoke.md]
+- begin[link /reference/ranges/begin.md]
+- end[link /reference/ranges/end.md]
+- ref[link /reference/functional/ref.md]
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+
+## 関連項目
+- [`all_of`](/reference/algorithm/any_of.md)
+- [`ranges::any_of`](/reference/algorithm/ranges_any_of.md)
+- [`ranges::none_of`](/reference/algorithm/ranges_none_of.md)
+
+## 参照
+- [N4821 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>any_of -- all_of/any_of/none_ofの説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_any_of.html"/>
      <id>31699fb3e5a5622c79b5a1f9df2c65a618bc52ba:reference/algorithm/ranges_any_of.md</id>
      <updated>2021-11-26T01:47:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_any_of.md b/reference/algorithm/ranges_any_of.md
new file mode 100644
index 000000000..6ae6e813d
--- /dev/null
+++ b/reference/algorithm/ranges_any_of.md
@@ -0,0 +1,118 @@
+# any_of
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool any_of(I first, S last, Pred pred, Proj proj = {}); // (1)
+
+  template&amp;lt;input_range R, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool any_of(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});           // (2)
+}
+```
+- input_iterator[link /reference/iterator/input_iterator.md]
+- sentinel_for[link /reference/iterator/sentinel_for.md]
+- identity[link /reference/functional/identity.md]
+- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+- input_range[link /reference/ranges/input_range.md]
+- projected[link /reference/iterator/projected.md]
+
+## 概要
+範囲のいずれかの要素が条件を満たすかを判定する。
+
+## テンプレートパラメータ制約
+- (1):
+    - `I`が[`input_iterator`](/reference/iterator/input_iterator.md)である
+    - `S`が[`I`に対する番兵](/reference/iterator/sentinel_for.md)である
+    - `Pred`は`I`を`Proj`で射影した値を[参照で渡すことができる1引数の述語](/reference/iterator/indirect_unary_predicate.md)である
+- (2):
+    - `R`が[`input_range`](/reference/ranges/input_range.md)である
+    - `Pred`は`R`のイテレータを`Proj`で射影した値を[参照で渡すことができる1引数の述語](/reference/iterator/indirect_unary_predicate.md)である
+
+
+## 戻り値
+`[first,last)` あるいは `r` 内のイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `true` になるような要素があれば`true`を返し、そうでなければ`false`を返す。
+`[first,last)` あるいは `r` の範囲が空の場合は`false`を返す。
+
+## 計算量
+最大で `last - first` 回 `pred` を実行する。
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;array&amp;gt;
+
+int main() {
+  constexpr std::array v = { 3, 1, 4 };
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  // 5 以上の要素が存在するかどうか
+  constexpr bool result1 = std::ranges::any_of(v, [](int x) { return x &amp;gt;= 5; });
+  std::cout &amp;lt;&amp;lt; result1 &amp;lt;&amp;lt; std::endl;
+
+  // 1 の要素が存在するかどうか
+  constexpr bool result2 = std::ranges::any_of(v, [](int x) { return x == 1; });
+  std::cout &amp;lt;&amp;lt; result2 &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::any_of[color ff0000]
+
+### 出力
+```
+false
+true
+```
+
+## 実装例
+```cpp
+struct any_of_impl {
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool operator()(I first, S last, Pred pred, Proj proj = {}) {
+    for ( ; first != last; ++first)
+      if (invoke(pred, invoke(proj, *first))) return true;
+    return false;
+  }
+
+  template&amp;lt;input_range R, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool operator()(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {}) {
+    return (*this)(begin(r), end(r), ref(pred), ref(proj));
+  }
+}
+
+inline constexpr any_of_impl any_of;
+```
+- input_iterator[link /reference/iterator/input_iterator.md]
+- sentinel_for[link /reference/iterator/sentinel_for.md]
+- identity[link /reference/functional/identity.md]
+- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+- input_range[link /reference/ranges/input_range.md]
+- projected[link /reference/iterator/projected.md]
+- invoke[link /reference/functional/invoke.md]
+- begin[link /reference/ranges/begin.md]
+- end[link /reference/ranges/end.md]
+- ref[link /reference/functional/ref.md]
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+
+## 関連項目
+- [`any_of`](/reference/algorithm/any_of.md)
+- [`ranges::all_of`](/reference/algorithm/ranges_all_of.md)
+- [`ranges::none_of`](/reference/algorithm/ranges_none_of.md)
+
+
+## 参照
+- [N4821 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>none_of -- all_of/any_of/none_ofの説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_none_of.html"/>
      <id>31699fb3e5a5622c79b5a1f9df2c65a618bc52ba:reference/algorithm/ranges_none_of.md</id>
      <updated>2021-11-26T01:47:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_none_of.md b/reference/algorithm/ranges_none_of.md
new file mode 100644
index 000000000..55417b2c7
--- /dev/null
+++ b/reference/algorithm/ranges_none_of.md
@@ -0,0 +1,130 @@
+# none_of
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool none_of(I first, S last, Pred pred, Proj proj = {}); // (1)
+
+  template&amp;lt;input_range R, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool none_of(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});           // (2)
+}
+```
+- input_iterator[link /reference/iterator/input_iterator.md]
+- sentinel_for[link /reference/iterator/sentinel_for.md]
+- identity[link /reference/functional/identity.md]
+- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+- input_range[link /reference/ranges/input_range.md]
+- projected[link /reference/iterator/projected.md]
+
+## 概要
+範囲の全ての要素が条件を満たさないかを判定する。
+
+## テンプレートパラメータ制約
+- (1):
+    - `I`が[`input_iterator`](/reference/iterator/input_iterator.md)である
+    - `S`が[`I`に対する番兵](/reference/iterator/sentinel_for.md)である
+    - `Pred`は`I`を`Proj`で射影した値を[参照で渡すことができる1引数の述語](/reference/iterator/indirect_unary_predicate.md)である
+- (2):
+    - `R`が[`input_range`](/reference/ranges/input_range.md)である
+    - `Pred`は`R`のイテレータを`Proj`で射影した値を[参照で渡すことができる1引数の述語](/reference/iterator/indirect_unary_predicate.md)である
+
+## 戻り値
+`[first,last)` あるいは `r` が空であったり、範囲内の全てのイテレータ `i` について [`invoke`](/reference/functional/invoke.md)`(pred, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` が `false` である場合は `true` を返し、そうでない場合は `false` を返す。
+
+
+## 計算量
+最大で `last - first` 回 `pred` を実行する。
+
+
+### 備考
+この関数は
+
+```cpp
+all_of(first, last, not_fn(pred));
+```
+* all_of[link /reference/algorithm/ranges_all_of.md]
+* not_fn[link /reference/functional/not_fn.md]
+
+とほぼ同じであるが、全ての要素が条件を満たしていないということを明示したい場合は `none_of()` を使う方が意図が伝わりやすい。
+
+
+## 例
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;array&amp;gt;
+
+int main() {
+  constexpr std::array v = { 3, 1, 4 };
+
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
+
+  // 全ての要素が 3 以上であるか
+  constexpr bool result1 = std::ranges::none_of(v, [](int x) { return x &amp;lt; 3; });
+  std::cout &amp;lt;&amp;lt; result1 &amp;lt;&amp;lt; std::endl;
+
+  // 全ての要素が 0 以外であるか
+  constexpr bool result2 = std::ranges::none_of(v, [](int x) { return x == 0; });
+  std::cout &amp;lt;&amp;lt; result2 &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ranges::none_of[color ff0000]
+
+### 出力
+```
+false
+true
+```
+
+## 実装例
+```cpp
+struct none_of_impl {
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool operator()(I first, S last, Pred pred, Proj proj = {}) {
+    for ( ; first != last; ++first)
+      if (invoke(pred, invoke(proj, *first))) return false;
+    return true;
+  }
+
+  template&amp;lt;input_range R, class Proj = identity, indirect_unary_predicate&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Pred&amp;gt;
+  constexpr bool operator()(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {}) {
+    return (*this)(begin(r), end(r), ref(pred), ref(proj));
+  }
+}
+
+inline constexpr none_of_impl none_of;
+```
+- input_iterator[link /reference/iterator/input_iterator.md]
+- sentinel_for[link /reference/iterator/sentinel_for.md]
+- identity[link /reference/functional/identity.md]
+- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+- input_range[link /reference/ranges/input_range.md]
+- projected[link /reference/iterator/projected.md]
+- invoke[link /reference/functional/invoke.md]
+- begin[link /reference/ranges/begin.md]
+- end[link /reference/ranges/end.md]
+- ref[link /reference/functional/ref.md]
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+
+## 関連項目
+- [`none_of`](/reference/algorithm/none_of.md)
+- [`ranges::all_of`](/reference/algorithm/ranges_all_of.md)
+- [`ranges::any_of`](/reference/algorithm/ranges_any_of.md)
+
+
+## 参照
+- [N4821 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
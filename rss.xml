<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-08-03T04:47:53.383204</updated>
  <id>30316c9a-507c-4075-b802-1fc466956c12</id>

  
    <entry>
      <title>random -- Merge pull request #1164 from yknishidate/remove-conversion</title>
      <link href="https://cpprefjp.github.io/reference/random.html"/>
      <id>2f7d33b23420b6c92960f5d1df1a73a780e08566:reference/random.md</id>
      <updated>2023-08-03T13:43:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random.md b/reference/random.md
index 15257500b..857ce52f6 100644
--- a/reference/random.md
+++ b/reference/random.md
@@ -170,8 +170,8 @@ int main()
   std::ofstream file(&amp;#34;random.tsv&amp;#34;);
   for (size_t i = 0; i &amp;lt; 1000*1000; ++i) {
     // 各分布法に基いて乱数を生成
-    double r1 = dist1(engine);
-    double r2 = dist2(engine);
+    float r1 = dist1(engine);
+    float r2 = dist2(engine);
 
     file &amp;lt;&amp;lt; r1 &amp;lt;&amp;lt; &amp;#34;\t&amp;#34; &amp;lt;&amp;lt; r2 &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
   }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random -- 生成した乱数のimplicit conversionを削除</title>
      <link href="https://cpprefjp.github.io/reference/random.html"/>
      <id>e279f872bff98b0808beec6ee224d5c7ea009811:reference/random.md</id>
      <updated>2023-08-03T01:24:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random.md b/reference/random.md
index 15257500b..857ce52f6 100644
--- a/reference/random.md
+++ b/reference/random.md
@@ -170,8 +170,8 @@ int main()
   std::ofstream file(&amp;#34;random.tsv&amp;#34;);
   for (size_t i = 0; i &amp;lt; 1000*1000; ++i) {
     // 各分布法に基いて乱数を生成
-    double r1 = dist1(engine);
-    double r2 = dist2(engine);
+    float r1 = dist1(engine);
+    float r2 = dist2(engine);
 
     file &amp;lt;&amp;lt; r1 &amp;lt;&amp;lt; &amp;#34;\t&amp;#34; &amp;lt;&amp;lt; r2 &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
   }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>nishidate-yuki</name>
        <email>yuki18425@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- P2418R2対応 : 関数のインターフェースと事前条件の部分の変更のみ適用 BasicFormatter要件への変更とかのところは未適用</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>5539a0217b51ce272b48b1514c7631256927cac0:reference/format/format.md</id>
      <updated>2023-08-02T15:57:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 875d62741..a8f22404d 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -8,16 +8,16 @@
 ```cpp
 namespace std {
   template&amp;lt;class... Args&amp;gt;
-  string format(format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args);                      // (1)
+  string format(format_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args);                      // (1)
 
   template&amp;lt;class... Args&amp;gt;
-  wstring format(wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args);                    // (2)
+  wstring format(wformat_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args);                    // (2)
 
   template&amp;lt;class... Args&amp;gt;
-  string format(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args);   // (3)
+  string format(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args);   // (3)
 
   template&amp;lt;class... Args&amp;gt;
-  wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (4)
+  wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args); // (4)
 }
 ```
 * string[link /reference/string/basic_string.md]
@@ -615,3 +615,4 @@ wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... ar
 - [［C++］ std::formatあるいは{fmt}のコンパイル時フォーマット文字列チェックの魔術 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2021/07/01/195912)
 - [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
     - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
+- [P2418R2 Add support for `std::generator`-like types to `std::format`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2418r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to -- P2418R2対応 : 関数のインターフェースと事前条件の部分の変更のみ適用 BasicFormatter要件への変更とかのところは未適用</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to.html"/>
      <id>5539a0217b51ce272b48b1514c7631256927cac0:reference/format/format_to.md</id>
      <updated>2023-08-02T15:57:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to.md b/reference/format/format_to.md
index d9f82b0c1..03cc3bc5c 100644
--- a/reference/format/format_to.md
+++ b/reference/format/format_to.md
@@ -8,16 +8,16 @@
 ```cpp
 namespace std {
   template&amp;lt;class Out, class... Args&amp;gt;
-  Out format_to(Out out, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (1)
+  Out format_to(Out out, format_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args); // (1)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  Out format_to(Out out, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (2)
+  Out format_to(Out out, wformat_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args); // (2)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  Out format_to(Out out, const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (3)
+  Out format_to(Out out, const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args); // (3)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  Out format_to(Out out, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (4)
+  Out format_to(Out out, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args); // (4)
 }
 ```
 * format_string[link basic_format_string.md]
@@ -158,3 +158,5 @@ wstring format_to(Out out, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const
 * [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
 * [P2216R3 std::format improvements](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html)
 * [［C++］ std::formatあるいは{fmt}のコンパイル時フォーマット文字列チェックの魔術 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2021/07/01/195912)
+* [P2418R2 Add support for `std::generator`-like types to `std::format`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2418r2.html)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to_n -- P2418R2対応 : 関数のインターフェースと事前条件の部分の変更のみ適用 BasicFormatter要件への変更とかのところは未適用</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to_n.html"/>
      <id>5539a0217b51ce272b48b1514c7631256927cac0:reference/format/format_to_n.md</id>
      <updated>2023-08-02T15:57:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to_n.md b/reference/format/format_to_n.md
index 043e0b96e..59b29c5eb 100644
--- a/reference/format/format_to_n.md
+++ b/reference/format/format_to_n.md
@@ -12,14 +12,14 @@ namespace std {
     format_to_n(Out out,
                 iter_difference_t&amp;lt;Out&amp;gt; n,
                 format_string&amp;lt;Args...&amp;gt; fmt,
-                const Args&amp;amp;... args);       // (1)
+                Args&amp;amp;&amp;amp;... args);       // (1)
 
   template&amp;lt;class Out, class... Args&amp;gt;
   format_to_n_result&amp;lt;Out&amp;gt;
     format_to_n(Out out,
                 iter_difference_t&amp;lt;Out&amp;gt; n,
                 wformat_string&amp;lt;Args...&amp;gt; fmt,
-                const Args&amp;amp;... args);       // (2)
+                Args&amp;amp;&amp;amp;... args);       // (2)
 
   template&amp;lt;class Out, class... Args&amp;gt;
   format_to_n_result&amp;lt;Out&amp;gt;
@@ -27,7 +27,7 @@ namespace std {
                 iter_difference_t&amp;lt;Out&amp;gt; n,
                 const locale&amp;amp; loc,
                 format_string&amp;lt;Args...&amp;gt; fmt,
-                const Args&amp;amp;... args);       // (3)
+                Args&amp;amp;&amp;amp;... args);       // (3)
 
   template&amp;lt;class Out, class... Args&amp;gt;
   format_to_n_result&amp;lt;Out&amp;gt;
@@ -35,7 +35,7 @@ namespace std {
                 iter_difference_t&amp;lt;Out&amp;gt; n,
                 const locale&amp;amp; loc,
                 wformat_string&amp;lt;Args...&amp;gt; fmt,
-                const Args&amp;amp;... args);       // (4)
+                Args&amp;amp;&amp;amp;... args);       // (4)
 }
 ```
 * format_string[link basic_format_string.md]
@@ -77,7 +77,7 @@ cout &amp;lt;&amp;lt; buffer; // The answer is 42.
 `charT`を`decltype(fmt)::value_type`として、
 
 * `out`は`OutputIterator&amp;lt;const charT&amp;amp;&amp;gt;`を満たす型の有効なオブジェクトである。
-* `Args`のそれぞれの引数`Ti`に対応するフォーマッター`formatter&amp;lt;Ti, charT&amp;gt;`が`Formatter`要件を満たす。
+* `Args`のそれぞれの引数`Ti`に対応するフォーマッター`formatter&amp;lt;remove_cvref_t&amp;lt;Ti&amp;gt;, charT&amp;gt;`が`BasicFormatter`要件を満たす。
 
 ## 戻り値
 
@@ -127,3 +127,4 @@ The answer is 42.
 * [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
 * [P2216R3 std::format improvements](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html)
 * [［C++］ std::formatあるいは{fmt}のコンパイル時フォーマット文字列チェックの魔術 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2021/07/01/195912)
+* [P2418R2 Add support for `std::generator`-like types to `std::format`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2418r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatted_size -- P2418R2対応 : 関数のインターフェースと事前条件の部分の変更のみ適用 BasicFormatter要件への変更とかのところは未適用</title>
      <link href="https://cpprefjp.github.io/reference/format/formatted_size.html"/>
      <id>5539a0217b51ce272b48b1514c7631256927cac0:reference/format/formatted_size.md</id>
      <updated>2023-08-02T15:57:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatted_size.md b/reference/format/formatted_size.md
index ee62d3d40..0229779fa 100644
--- a/reference/format/formatted_size.md
+++ b/reference/format/formatted_size.md
@@ -8,16 +8,16 @@
 ```cpp
 namespace std {
   template&amp;lt;class... Args&amp;gt;
-  size_t formatted_size(format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (1)
+  size_t formatted_size(format_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args); // (1)
 
   template&amp;lt;class... Args&amp;gt;
-  size_t formatted_size(wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (2)
+  size_t formatted_size(wformat_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args); // (2)
 
   template&amp;lt;class... Args&amp;gt;
-  size_t formatted_size(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (3)
+  size_t formatted_size(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args); // (3)
 
   template&amp;lt;class... Args&amp;gt;
-  size_t formatted_size(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (4)
+  size_t formatted_size(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args); // (4)
 }
 ```
 * format_string[link basic_format_string.md]
@@ -48,7 +48,7 @@ formatted_size(&amp;#34;The answer is {}.&amp;#34;, 42); // =&amp;gt; 17
 
 `charT`を`decltype(fmt)::value_type`として、
 
-* `Args`のそれぞれの引数`Ti`に対応するフォーマッター`formatter&amp;lt;Ti, charT&amp;gt;`が`Formatter`要件を満たす。
+* `Args`のそれぞれの引数`Ti`に対応するフォーマッター`formatter&amp;lt;remove_cvref_t&amp;lt;Ti&amp;gt;, charT&amp;gt;`が`BasicFormatter`要件を満たす。
 
 ## 戻り値
 
@@ -94,3 +94,4 @@ int main()
 * [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
 * [P2216R3 std::format improvements](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html)
 * [［C++］ std::formatあるいは{fmt}のコンパイル時フォーマット文字列チェックの魔術 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2021/07/01/195912)
+* [P2418R2 Add support for `std::generator`-like types to `std::format`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2418r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_format_args -- P2418R2対応 : 関数のインターフェースと事前条件の部分の変更のみ適用 BasicFormatter要件への変更とかのところは未適用</title>
      <link href="https://cpprefjp.github.io/reference/format/make_format_args.html"/>
      <id>5539a0217b51ce272b48b1514c7631256927cac0:reference/format/make_format_args.md</id>
      <updated>2023-08-02T15:57:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/make_format_args.md b/reference/format/make_format_args.md
index 211858abc..b8b852c5c 100644
--- a/reference/format/make_format_args.md
+++ b/reference/format/make_format_args.md
@@ -8,10 +8,10 @@
 ```cpp
 namespace std {
   template&amp;lt;class Context = format_context, class... Args&amp;gt;
-  format_arg_store&amp;lt;Context, Args...&amp;gt; make_format_args(const Args&amp;amp;... args); // (1)
+  format_arg_store&amp;lt;Context, Args...&amp;gt; make_format_args(Args&amp;amp;&amp;amp;... args); // (1)
 
   template&amp;lt;class... Args&amp;gt;
-  format_arg_store&amp;lt;wformat_context, Args...&amp;gt; make_wformat_args(const Args&amp;amp;... args); // (2)
+  format_arg_store&amp;lt;wformat_context, Args...&amp;gt; make_wformat_args(Args&amp;amp;&amp;amp;... args); // (2)
 }
 ```
 * format_arg_store[italic]
@@ -166,3 +166,4 @@ namespace std {
 ## 参照
 
 * [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
+* [P2418R2 Add support for `std::generator`-like types to `std::format`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2418r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- 表示の調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_decrement.html"/>
      <id>4e2bdcd9d523a6f4c59fd4bdb762e19da36c8cc0:reference/iterator/basic_const_iterator/op_decrement.md</id>
      <updated>2023-08-02T13:20:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_decrement.md b/reference/iterator/basic_const_iterator/op_decrement.md
index e0e0c24df..d53aef4f5 100644
--- a/reference/iterator/basic_const_iterator/op_decrement.md
+++ b/reference/iterator/basic_const_iterator/op_decrement.md
@@ -28,6 +28,7 @@ constexpr basic_const_iterator operator--(int) requires bidirectional_iterator&amp;lt;I
     --current_;
     return *this;
     ```
+
 - (2) : 以下と等価  
     ```cpp
     auto tmp = *this;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- 表示の調整</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_increment.html"/>
      <id>4e2bdcd9d523a6f4c59fd4bdb762e19da36c8cc0:reference/iterator/basic_const_iterator/op_increment.md</id>
      <updated>2023-08-02T13:20:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_increment.md b/reference/iterator/basic_const_iterator/op_increment.md
index 635fcaf4f..6a67cbc7e 100644
--- a/reference/iterator/basic_const_iterator/op_increment.md
+++ b/reference/iterator/basic_const_iterator/op_increment.md
@@ -17,8 +17,8 @@ constexpr basic_const_iterator operator++(int) requires forward_iterator&amp;lt;Iterato
 
 イテレータをインクリメントする。
 
-- (1) : 前置デクリメント
-- (2)(3) : 後置デクリメント
+- (1) : 前置インクリメント
+- (2)(3) : 後置インクリメント
 
 ## 効果
 
@@ -29,7 +29,9 @@ constexpr basic_const_iterator operator++(int) requires forward_iterator&amp;lt;Iterato
     ++current_;
     return *this;
     ```
+
 - (2) : `++current_;`
+
 - (3) : 以下と等価  
     ```cpp
     auto tmp = *this;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- コード修飾等の修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_decrement.html"/>
      <id>ea6381e681e5e706f23d38d721cfbfc361003d24:reference/iterator/basic_const_iterator/op_decrement.md</id>
      <updated>2023-08-02T12:48:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_decrement.md b/reference/iterator/basic_const_iterator/op_decrement.md
index 7448315d9..e0e0c24df 100644
--- a/reference/iterator/basic_const_iterator/op_decrement.md
+++ b/reference/iterator/basic_const_iterator/op_decrement.md
@@ -10,7 +10,7 @@ constexpr basic_const_iterator&amp;amp; operator--() requires bidirectional_iterator&amp;lt;Ite
 
 constexpr basic_const_iterator operator--(int) requires bidirectional_iterator&amp;lt;Iterator&amp;gt;;   // (2)
 ```
-* bidirectional_iterator[link ./bidirectional_iterator.md]
+* bidirectional_iterator[link /reference/iterator/bidirectional_iterator.md]
 
 ## 概要
 
@@ -55,8 +55,8 @@ int main() {
   
 }
 ```
-* --ci[color ff0000]
-* ci--[color ff0000]
+* --cit[color ff0000]
+* cit--[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- コード修飾等の修正</title>
      <link href="https://cpprefjp.github.io/reference/iterator/basic_const_iterator/op_increment.html"/>
      <id>ea6381e681e5e706f23d38d721cfbfc361003d24:reference/iterator/basic_const_iterator/op_increment.md</id>
      <updated>2023-08-02T12:48:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/basic_const_iterator/op_increment.md b/reference/iterator/basic_const_iterator/op_increment.md
index 6e70a7f50..635fcaf4f 100644
--- a/reference/iterator/basic_const_iterator/op_increment.md
+++ b/reference/iterator/basic_const_iterator/op_increment.md
@@ -11,7 +11,7 @@ constexpr basic_const_iterator&amp;amp; operator++();   // (1)
 constexpr void operator++(int);                 // (2)
 constexpr basic_const_iterator operator++(int) requires forward_iterator&amp;lt;Iterator&amp;gt;; // (3)
 ```
-* forward_iterator[link ./forward_iterator.md]
+* forward_iterator[link /reference/iterator/forward_iterator.md]
 
 ## 概要
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
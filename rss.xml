<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-11-29T14:38:06.853755</updated>
  <id>4f3e23c9-969f-4a50-907a-59858986a97b</id>

  
    <entry>
      <title>for_each -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_for_each.html"/>
      <id>ddc27e78f3030deeefb3b129cef9363a3e2f42dc:reference/algorithm/ranges_for_each.md</id>
      <updated>2021-11-27T16:43:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_for_each.md b/reference/algorithm/ranges_for_each.md
index bdd95e71d..6855ffc61 100644
--- a/reference/algorithm/ranges_for_each.md
+++ b/reference/algorithm/ranges_for_each.md
@@ -19,6 +19,7 @@ namespace std::ranges {
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * identity[link /reference/functional/identity.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * indirectly_unary_invocable[link /reference/iterator/indirectly_unary_invocable.md]
 * input_range[link /reference/ranges/input_range.md]
 * borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
@@ -124,6 +125,7 @@ inline constexpr for_each_impl for_each;
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * identity[link /reference/functional/identity.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * indirectly_unary_invocable[link /reference/iterator/indirectly_unary_invocable.md]
 * copy_constructible[link /reference/concepts/copy_constructible.md]
 * input_range[link /reference/ranges/input_range.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for_each -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_for_each.html"/>
      <id>68dfa0b1183c2ec209c1466283a985863861c454:reference/algorithm/ranges_for_each.md</id>
      <updated>2021-11-27T16:03:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_for_each.md b/reference/algorithm/ranges_for_each.md
index 09d5fddab..bdd95e71d 100644
--- a/reference/algorithm/ranges_for_each.md
+++ b/reference/algorithm/ranges_for_each.md
@@ -21,7 +21,7 @@ namespace std::ranges {
 * identity[link /reference/functional/identity.md]
 * indirectly_unary_invocable[link /reference/iterator/indirectly_unary_invocable.md]
 * input_range[link /reference/ranges/input_range.md]
-* borrowed_iterator_t[link /reference/iterator/borrowed_iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
 * projected[link /reference/iterator/projected.md]
 * in_fun_result[link /reference/algorithm/ranges_in_fun_result.md.nolink]
 
@@ -38,7 +38,7 @@ namespace std::ranges {
     - `R`が[`input_range`](/reference/ranges/input_range.md)である
     - `Fun`は`R`のイテレータを`Proj`で射影した値を[参照で渡すことができる1引数の`invocable`](/reference/iterator/indirectly_unary_invocable.md)である
 
-この他にFunは[`copy_­constructible`](/reference/concepts/copy_­constructible.md)のモデルであることが要求される。
+この他にFunは[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであることが要求される。
 
 ## 効果
 `[first,last)` 内の全てのイテレータ `i` に [`invoke`](/reference/functional/invoke.md)`(f, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` という操作を行う。`first` から順番に処理し、`last - 1` まで行う。
@@ -48,7 +48,7 @@ namespace std::ranges {
 
 ## 戻り値
 
-`{last, std​::​move(f)}`
+`{last, std::move(f)}`
 
 ## 計算量
 正確に `f` を `last - first` 回適用する
@@ -104,7 +104,7 @@ int main() {
 ```cpp
 struct for_each_impl {
   template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity, indirectly_unary_invocable&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Fun&amp;gt;
-    requires copy_­constructible&amp;lt;Fun&amp;gt;
+    requires copy_constructible&amp;lt;Fun&amp;gt;
   constexpr for_each_result&amp;lt;I, Fun&amp;gt; operator()(I first, S last, Fun f, Proj proj = {}) {
     for (; first != last; ++first) {
       invoke(f, invoke(proj, *first));
@@ -113,7 +113,7 @@ struct for_each_impl {
   }
 
   template&amp;lt;input_range R, class Proj = identity, indirectly_unary_invocable&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Fun&amp;gt;
-    requires copy_­constructible&amp;lt;Fun&amp;gt;
+    requires copy_constructible&amp;lt;Fun&amp;gt;
   constexpr for_each_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, Fun&amp;gt; operator()(R&amp;amp;&amp;amp; r, Fun f, Proj proj = {}) {
     return (*this)(begin(r), end(r), move(f), ref(proj));
   }
@@ -125,9 +125,9 @@ inline constexpr for_each_impl for_each;
 * sentinel_for[link /reference/iterator/sentinel_for.md]
 * identity[link /reference/functional/identity.md]
 * indirectly_unary_invocable[link /reference/iterator/indirectly_unary_invocable.md]
-* copy_­constructible[link /reference/concepts/copy_­constructible.md]
+* copy_constructible[link /reference/concepts/copy_constructible.md]
 * input_range[link /reference/ranges/input_range.md]
-* borrowed_iterator_t[link /reference/iterator/borrowed_iterator_t.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
 * projected[link /reference/iterator/projected.md]
 * ref[link /reference/functional/ref.md]
 * move[link /reference/utility/move.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for_each_n -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_for_each_n.html"/>
      <id>68dfa0b1183c2ec209c1466283a985863861c454:reference/algorithm/ranges_for_each_n.md</id>
      <updated>2021-11-27T16:03:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_for_each_n.md b/reference/algorithm/ranges_for_each_n.md
index cf7aeb004..83b3c0cd7 100644
--- a/reference/algorithm/ranges_for_each_n.md
+++ b/reference/algorithm/ranges_for_each_n.md
@@ -27,7 +27,7 @@ namespace std::ranges {
 - `I`が[`input_iterator`](/reference/iterator/input_iterator.md)である
 - `Fun`は`I`を`Proj`で射影した値を[参照で渡すことができる1引数の`invocable`](/reference/iterator/indirectly_unary_invocable.md)である
 
-この他にFunは[`copy_­constructible`](/reference/concepts/copy_­constructible.md)のモデルであることが要求される。
+この他にFunは[`copy_constructible`](/reference/concepts/copy_constructible.md)のモデルであることが要求される。
 
 
 ## 事前条件
@@ -39,7 +39,7 @@ namespace std::ranges {
 このアルゴリズムはその他のアルゴリズムと違い、[`invoke`](/reference/functional/invoke.md)`(proj, *i)` が書き換え可能な参照であれば、関数 `f` の内部でその値を書き換えても構わない。
 
 ## 戻り値
-`{first + n, std​::​move(f)}`
+`{first + n, std::move(f)}`
 
 ## 備考
 - 関数 `f` に戻り値がある場合、それは単に無視される
@@ -90,7 +90,7 @@ int main()
 ```cpp
 struct for_each_n_impl {
   template&amp;lt;input_iterator I, class Proj = identity, indirectly_unary_invocable&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Fun&amp;gt;
-    requires copy_­constructible&amp;lt;Fun&amp;gt;
+    requires copy_constructible&amp;lt;Fun&amp;gt;
   constexpr for_each_n_result&amp;lt;I, Fun&amp;gt; for_each_n(I first, iter_difference_t&amp;lt;I&amp;gt; n, Fun f, Proj proj = {}) {
     for (iter_difference_t&amp;lt;I&amp;gt; i = 0; i &amp;lt; n; ++i) {
       invoke(f, invoke(proj, *first));
@@ -105,7 +105,7 @@ inline constexpr for_each_n_impl for_each_n;
 * input_iterator[link /reference/iterator/input_iterator.md]
 * identity[link /reference/functional/identity.md]
 * indirectly_unary_invocable[link /reference/iterator/indirectly_unary_invocable.md]
-* copy_­constructible[link /reference/concepts/copy_­constructible.md]
+* copy_constructible[link /reference/concepts/copy_constructible.md]
 * projected[link /reference/iterator/projected.md]
 * iter_difference_t[link /reference/iterator/iter_difference_t.md]
 * move[link /reference/utility/move.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- for_each/for_each_nの説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>73848163abbef6fcb5b63ba8b0c4244f8dee00a8:reference/algorithm.md</id>
      <updated>2021-11-27T13:16:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index e245251e5..8bd494692 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -135,8 +135,8 @@ inline constexpr f_impl f; // f は変数名なのでADLで発見されない
 | [`ranges::all_of`](algorithm/ranges_all_of.md)               | 全ての要素が条件を満たしているかを調べる             | C++20 |
 | [`ranges::any_of`](algorithm/ranges_any_of.md)               | どれかの要素が条件を満たしているかを調べる           | C++20 |
 | [`ranges::none_of`](algorithm/ranges_none_of.md)             | 全ての要素が条件を満たしていないかを調べる           | C++20 |
-| [`ranges::for_each`](algorithm/ranges_for_each.md.nolink)           | 全ての要素に対して処理を行う                         | C++20 |
-| [`ranges::for_each_n`](algorithm/ranges_for_each_n.md.nolink)       | 範囲の先頭N個の要素に対して処理を行う                | C++20 |
+| [`ranges::for_each`](algorithm/ranges_for_each.md)           | 全ての要素に対して処理を行う                         | C++20 |
+| [`ranges::for_each_n`](algorithm/ranges_for_each_n.md)       | 範囲の先頭N個の要素に対して処理を行う                | C++20 |
 | [`ranges::find`](algorithm/ranges_find.md.nolink)                   | 指定された値を検索する                               | C++20 |
 | [`ranges::find_if`](algorithm/ranges_find_if.md.nolink)             | 条件を満たす最初の要素を検索する                     | C++20 |
 | [`ranges::find_if_not`](algorithm/ranges_find_if_not.md.nolink)     | 条件を満たしていない最初の要素を検索する             | C++20 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for_each -- for_each/for_each_nの説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_for_each.html"/>
      <id>73848163abbef6fcb5b63ba8b0c4244f8dee00a8:reference/algorithm/ranges_for_each.md</id>
      <updated>2021-11-27T13:16:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_for_each.md b/reference/algorithm/ranges_for_each.md
new file mode 100644
index 000000000..09d5fddab
--- /dev/null
+++ b/reference/algorithm/ranges_for_each.md
@@ -0,0 +1,137 @@
+# for_each
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class I, class F&amp;gt;
+  using for_each_result = in_fun_result&amp;lt;I, F&amp;gt;;
+
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity, indirectly_unary_invocable&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Fun&amp;gt;
+  constexpr for_each_result&amp;lt;I, Fun&amp;gt; for_each(I first, S last, Fun f, Proj proj = {});                     // (1)
+
+  template&amp;lt;input_range R, class Proj = identity, indirectly_unary_invocable&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Fun&amp;gt;
+  constexpr for_each_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, Fun&amp;gt; for_each(R&amp;amp;&amp;amp; r, Fun f, Proj proj = {});          // (2)
+}
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_unary_invocable[link /reference/iterator/indirectly_unary_invocable.md]
+* input_range[link /reference/ranges/input_range.md]
+* borrowed_iterator_t[link /reference/iterator/borrowed_iterator_t.md]
+* projected[link /reference/iterator/projected.md]
+* in_fun_result[link /reference/algorithm/ranges_in_fun_result.md.nolink]
+
+
+## 概要
+範囲の全ての要素に、指定された関数を適用する。
+
+## テンプレートパラメータ制約
+- (1):
+    - `I`が[`input_iterator`](/reference/iterator/input_iterator.md)である
+    - `S`が[`I`に対する番兵](/reference/iterator/sentinel_for.md)である
+    - `Fun`は`I`を`Proj`で射影した値を[参照で渡すことができる1引数の`invocable`](/reference/iterator/indirectly_unary_invocable.md)である
+- (2):
+    - `R`が[`input_range`](/reference/ranges/input_range.md)である
+    - `Fun`は`R`のイテレータを`Proj`で射影した値を[参照で渡すことができる1引数の`invocable`](/reference/iterator/indirectly_unary_invocable.md)である
+
+この他にFunは[`copy_­constructible`](/reference/concepts/copy_­constructible.md)のモデルであることが要求される。
+
+## 効果
+`[first,last)` 内の全てのイテレータ `i` に [`invoke`](/reference/functional/invoke.md)`(f, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` という操作を行う。`first` から順番に処理し、`last - 1` まで行う。
+
+このアルゴリズムはその他のアルゴリズムと違い、[`invoke`](/reference/functional/invoke.md)`(proj, *i)` が書き換え可能な参照であれば、関数 `f` の内部でその値を書き換えても構わない。
+
+
+## 戻り値
+
+`{last, std​::​move(f)}`
+
+## 計算量
+正確に `f` を `last - first` 回適用する
+
+
+## 備考
+- `f` に戻り値がある場合、それは単に無視される
+
+
+## 例
+
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+int main() {
+  constexpr std::array v = { 3, 1, 4 };
+
+  // vの全ての要素にラムダ式を適用する
+  std::ranges::for_each(v, [](int x) { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; });
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;----&amp;#34; &amp;lt;&amp;lt; std::endl;
+
+  // 要素の内容を書き換えても構わないし、呼び出し順序に依存した処理を書いても構わない
+  int n = 0;
+  std::ranges::for_each(v, [n](int&amp;amp; x) mutable { x += n++; });
+  std::ranges::for_each(v, [](int x) { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; });
+}
+```
+* std::ranges::for_each[color ff0000]
+
+#### 出力
+```
+3
+1
+4
+----
+3
+2
+6
+```
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+
+## 実装例
+```cpp
+struct for_each_impl {
+  template&amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S, class Proj = identity, indirectly_unary_invocable&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Fun&amp;gt;
+    requires copy_­constructible&amp;lt;Fun&amp;gt;
+  constexpr for_each_result&amp;lt;I, Fun&amp;gt; operator()(I first, S last, Fun f, Proj proj = {}) {
+    for (; first != last; ++first) {
+      invoke(f, invoke(proj, *first));
+    }
+    return {move(first), move(f)};
+  }
+
+  template&amp;lt;input_range R, class Proj = identity, indirectly_unary_invocable&amp;lt;projected&amp;lt;iterator_t&amp;lt;R&amp;gt;, Proj&amp;gt;&amp;gt; Fun&amp;gt;
+    requires copy_­constructible&amp;lt;Fun&amp;gt;
+  constexpr for_each_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, Fun&amp;gt; operator()(R&amp;amp;&amp;amp; r, Fun f, Proj proj = {}) {
+    return (*this)(begin(r), end(r), move(f), ref(proj));
+  }
+};
+
+inline constexpr for_each_impl for_each;
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_unary_invocable[link /reference/iterator/indirectly_unary_invocable.md]
+* copy_­constructible[link /reference/concepts/copy_­constructible.md]
+* input_range[link /reference/ranges/input_range.md]
+* borrowed_iterator_t[link /reference/iterator/borrowed_iterator_t.md]
+* projected[link /reference/iterator/projected.md]
+* ref[link /reference/functional/ref.md]
+* move[link /reference/utility/move.md]
+
+
+## 参照
+- [N4821 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>for_each_n -- for_each/for_each_nの説明を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_for_each_n.html"/>
      <id>73848163abbef6fcb5b63ba8b0c4244f8dee00a8:reference/algorithm/ranges_for_each_n.md</id>
      <updated>2021-11-27T13:16:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_for_each_n.md b/reference/algorithm/ranges_for_each_n.md
new file mode 100644
index 000000000..cf7aeb004
--- /dev/null
+++ b/reference/algorithm/ranges_for_each_n.md
@@ -0,0 +1,115 @@
+# for_each_n
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class I, class F&amp;gt;
+  using for_each_n_result = in_fun_result&amp;lt;I, F&amp;gt;;
+
+  template&amp;lt;input_iterator I, class Proj = identity, indirectly_unary_invocable&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Fun&amp;gt;
+  constexpr for_each_n_result&amp;lt;I, Fun&amp;gt; for_each_n(I first, iter_difference_t&amp;lt;I&amp;gt; n, Fun f, Proj proj = {});
+}
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_unary_invocable[link /reference/iterator/indirectly_unary_invocable.md]
+* projected[link /reference/iterator/projected.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* in_fun_result[link /reference/algorithm/ranges_in_fun_result.md.nolink]
+
+## 概要
+範囲の先頭N個の要素に、指定された関数を適用する。
+
+## テンプレートパラメータ制約
+- `I`が[`input_iterator`](/reference/iterator/input_iterator.md)である
+- `Fun`は`I`を`Proj`で射影した値を[参照で渡すことができる1引数の`invocable`](/reference/iterator/indirectly_unary_invocable.md)である
+
+この他にFunは[`copy_­constructible`](/reference/concepts/copy_­constructible.md)のモデルであることが要求される。
+
+
+## 事前条件
+`n &amp;gt;= 0`
+
+## 効果
+範囲`[first, first + n)` 内の全てのイテレータ `i` に [`invoke`](/reference/functional/invoke.md)`(f, `[`invoke`](/reference/functional/invoke.md)`(proj, *i))` という操作を行う。
+
+このアルゴリズムはその他のアルゴリズムと違い、[`invoke`](/reference/functional/invoke.md)`(proj, *i)` が書き換え可能な参照であれば、関数 `f` の内部でその値を書き換えても構わない。
+
+## 戻り値
+`{first + n, std​::​move(f)}`
+
+## 備考
+- 関数 `f` に戻り値がある場合、それは単に無視される
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;array&amp;gt;
+
+void f(int&amp;amp; x)
+{
+  x *= 2;
+}
+
+int main()
+{
+  constexpr std::array&amp;lt;int&amp;gt; v = {3, 1, 4, 5, 2};
+
+  // コンテナvの先頭3要素に、関数f()を適用する。
+  // 関数f()は要素の変更を行う
+  std::ranges::for_each_n(v.begin(), 3, f);
+
+  // コンテナvの先頭3要素に、ラムダ式で記述した関数オブジェクトを適用する
+  std::ranges::for_each_n(v.begin(), 3, [](int x) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  });
+}
+```
+* std::ranges::for_each_n[color ff0000]
+
+### 出力
+```
+6
+2
+8
+```
+
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+
+## 実装例
+```cpp
+struct for_each_n_impl {
+  template&amp;lt;input_iterator I, class Proj = identity, indirectly_unary_invocable&amp;lt;projected&amp;lt;I, Proj&amp;gt;&amp;gt; Fun&amp;gt;
+    requires copy_­constructible&amp;lt;Fun&amp;gt;
+  constexpr for_each_n_result&amp;lt;I, Fun&amp;gt; for_each_n(I first, iter_difference_t&amp;lt;I&amp;gt; n, Fun f, Proj proj = {}) {
+    for (iter_difference_t&amp;lt;I&amp;gt; i = 0; i &amp;lt; n; ++i) {
+      invoke(f, invoke(proj, *first));
+      ++first;
+    }
+    return {move(first), move(f)};
+  }
+};
+
+inline constexpr for_each_n_impl for_each_n;
+```
+* input_iterator[link /reference/iterator/input_iterator.md]
+* identity[link /reference/functional/identity.md]
+* indirectly_unary_invocable[link /reference/iterator/indirectly_unary_invocable.md]
+* copy_­constructible[link /reference/concepts/copy_­constructible.md]
+* projected[link /reference/iterator/projected.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+* move[link /reference/utility/move.md]
+
+
+## 参照
+- [N4821 25 Algorithms library](https://timsong-cpp.github.io/cppwp/n4861/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all_of -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_all_of.html"/>
      <id>05dd794530134365703b80e84f02b1e228924f8d:reference/algorithm/ranges_all_of.md</id>
      <updated>2021-11-27T11:33:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_all_of.md b/reference/algorithm/ranges_all_of.md
index eb54bc7e4..0d8605693 100644
--- a/reference/algorithm/ranges_all_of.md
+++ b/reference/algorithm/ranges_all_of.md
@@ -80,12 +80,13 @@ struct all_of_impl {
   constexpr bool operator()(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {}) {
     return (*this)(begin(r), end(r), ref(pred), ref(proj));
   }
-}
+};
 
 inline constexpr all_of_impl all_of;
 ```
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * identity[link /reference/functional/identity.md]
 * indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
 * input_range[link /reference/ranges/input_range.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>any_of -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_any_of.html"/>
      <id>05dd794530134365703b80e84f02b1e228924f8d:reference/algorithm/ranges_any_of.md</id>
      <updated>2021-11-27T11:33:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_any_of.md b/reference/algorithm/ranges_any_of.md
index c7e8ebd83..c35dd1e82 100644
--- a/reference/algorithm/ranges_any_of.md
+++ b/reference/algorithm/ranges_any_of.md
@@ -82,12 +82,13 @@ struct any_of_impl {
   constexpr bool operator()(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {}) {
     return (*this)(begin(r), end(r), ref(pred), ref(proj));
   }
-}
+};
 
 inline constexpr any_of_impl any_of;
 ```
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * identity[link /reference/functional/identity.md]
 * indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
 * input_range[link /reference/ranges/input_range.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>none_of -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_none_of.html"/>
      <id>05dd794530134365703b80e84f02b1e228924f8d:reference/algorithm/ranges_none_of.md</id>
      <updated>2021-11-27T11:33:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_none_of.md b/reference/algorithm/ranges_none_of.md
index 63c4cd8e3..81b63dfd4 100644
--- a/reference/algorithm/ranges_none_of.md
+++ b/reference/algorithm/ranges_none_of.md
@@ -94,12 +94,13 @@ struct none_of_impl {
   constexpr bool operator()(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {}) {
     return (*this)(begin(r), end(r), ref(pred), ref(proj));
   }
-}
+};
 
 inline constexpr none_of_impl none_of;
 ```
 * input_iterator[link /reference/iterator/input_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
 * identity[link /reference/functional/identity.md]
 * indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
 * input_range[link /reference/ranges/input_range.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all_of -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_all_of.html"/>
      <id>8099ba591bbd04604a600f293d37c576af5e3283:reference/algorithm/ranges_all_of.md</id>
      <updated>2021-11-27T09:58:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_all_of.md b/reference/algorithm/ranges_all_of.md
index 3ce539297..eb54bc7e4 100644
--- a/reference/algorithm/ranges_all_of.md
+++ b/reference/algorithm/ranges_all_of.md
@@ -13,12 +13,12 @@ namespace std::ranges {
   constexpr bool all_of(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});           // (2)
 }
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
 
 ## 概要
 範囲の全ての要素が条件を満たすかを判定する。
@@ -84,16 +84,16 @@ struct all_of_impl {
 
 inline constexpr all_of_impl all_of;
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 ## バージョン
 ### 言語
@@ -107,7 +107,7 @@ inline constexpr all_of_impl all_of;
 
 
 ## 関連項目
-- [`all_of`](/reference/algorithm/any_of.md)
+- [`all_of`](/reference/algorithm/all_of.md)
 - [`ranges::any_of`](/reference/algorithm/ranges_any_of.md)
 - [`ranges::none_of`](/reference/algorithm/ranges_none_of.md)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>any_of -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_any_of.html"/>
      <id>8099ba591bbd04604a600f293d37c576af5e3283:reference/algorithm/ranges_any_of.md</id>
      <updated>2021-11-27T09:58:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_any_of.md b/reference/algorithm/ranges_any_of.md
index 6ae6e813d..c7e8ebd83 100644
--- a/reference/algorithm/ranges_any_of.md
+++ b/reference/algorithm/ranges_any_of.md
@@ -13,12 +13,12 @@ namespace std::ranges {
   constexpr bool any_of(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});           // (2)
 }
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
 
 ## 概要
 範囲のいずれかの要素が条件を満たすかを判定する。
@@ -86,16 +86,16 @@ struct any_of_impl {
 
 inline constexpr any_of_impl any_of;
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>none_of -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_none_of.html"/>
      <id>8099ba591bbd04604a600f293d37c576af5e3283:reference/algorithm/ranges_none_of.md</id>
      <updated>2021-11-27T09:58:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_none_of.md b/reference/algorithm/ranges_none_of.md
index 55417b2c7..63c4cd8e3 100644
--- a/reference/algorithm/ranges_none_of.md
+++ b/reference/algorithm/ranges_none_of.md
@@ -13,12 +13,12 @@ namespace std::ranges {
   constexpr bool none_of(R&amp;amp;&amp;amp; r, Pred pred, Proj proj = {});           // (2)
 }
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
 
 ## 概要
 範囲の全ての要素が条件を満たさないかを判定する。
@@ -98,16 +98,16 @@ struct none_of_impl {
 
 inline constexpr none_of_impl none_of;
 ```
-- input_iterator[link /reference/iterator/input_iterator.md]
-- sentinel_for[link /reference/iterator/sentinel_for.md]
-- identity[link /reference/functional/identity.md]
-- indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-- input_range[link /reference/ranges/input_range.md]
-- projected[link /reference/iterator/projected.md]
-- invoke[link /reference/functional/invoke.md]
-- begin[link /reference/ranges/begin.md]
-- end[link /reference/ranges/end.md]
-- ref[link /reference/functional/ref.md]
+* input_iterator[link /reference/iterator/input_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* identity[link /reference/functional/identity.md]
+* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
+* input_range[link /reference/ranges/input_range.md]
+* projected[link /reference/iterator/projected.md]
+* invoke[link /reference/functional/invoke.md]
+* begin[link /reference/ranges/begin.md]
+* end[link /reference/ranges/end.md]
+* ref[link /reference/functional/ref.md]
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
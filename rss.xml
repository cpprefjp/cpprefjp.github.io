<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-07-04T14:12:20.335625</updated>
  <id>92560627-9408-458c-b79f-9601f1d40cb6</id>

  
    <entry>
      <title>contract_violation -- fixed path</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation.html"/>
      <id>082105297497b2c96530d944b8b1d1d08e817ee5:reference/contracts/contract_violation.md</id>
      <updated>2025-07-04T23:08:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation.md b/reference/contracts/contract_violation.md
index 725310048..8c82af079 100644
--- a/reference/contracts/contract_violation.md
+++ b/reference/contracts/contract_violation.md
@@ -26,13 +26,13 @@ namespace std::contracts {
 ## メンバ関数
 | 名前 | 説明 | 対応バージョン |
 | ---- | ---- | ---- |
-| [`comment`](contracts/contract_violation/comment.md) | 契約違反の詳細を記録したchar列を返す | C++26 |
-| [`detection_mode`](contracts/contract_violation/detection_mode.md) | 契約違反が特定された方法を返す | C++26 |
-| [`evaluation_exception`](contracts/contract_violation/evaluation_exception.md) | 契約が例外を飛ばしたことによって終了した場合の例外へのポインタ | C++26 |
-| [`is_terminating`](contracts/contract_violation/is_terminating.md) | 契約違反によってプログラムがターミネートされるかを返す | C++26|
-| [`kind`](contracts/contract_violation/kind.md) | 違反した契約の種類 | C++26|
-| [`location`](contracts/contract_violation/location.md) | 契約違反が発生したソースコードの位置 | C++26|
-| [`semantic`](contracts/contract_violation/semantic.md) | 契約の評価方法 | C++26|
+| [`comment`](contract_violation/comment.md) | 契約違反の詳細を記録したchar列を返す | C++26 |
+| [`detection_mode`](contract_violation/detection_mode.md) | 契約違反が特定された方法を返す | C++26 |
+| [`evaluation_exception`](contract_violation/evaluation_exception.md) | 契約が例外を飛ばしたことによって終了した場合の例外へのポインタ | C++26 |
+| [`is_terminating`](contract_violation/is_terminating.md) | 契約違反によってプログラムがターミネートされるかを返す | C++26|
+| [`kind`](contract_violation/kind.md) | 違反した契約の種類 | C++26|
+| [`location`](contract_violation/location.md) | 契約違反が発生したソースコードの位置 | C++26|
+| [`semantic`](contract_violation/semantic.md) | 契約の評価方法 | C++26|
 
 ## 参照
 - [Contracts for C++](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2900r14.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contract_violation -- new page `reference/contracts/contract_violation/semantic.md`(#1419)</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation.html"/>
      <id>a4157064c381f8af2b9e42ec9186b8a6c518892a:reference/contracts/contract_violation.md</id>
      <updated>2025-07-04T23:00:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation.md b/reference/contracts/contract_violation.md
index 8146794a5..725310048 100644
--- a/reference/contracts/contract_violation.md
+++ b/reference/contracts/contract_violation.md
@@ -32,7 +32,7 @@ namespace std::contracts {
 | [`is_terminating`](contracts/contract_violation/is_terminating.md) | 契約違反によってプログラムがターミネートされるかを返す | C++26|
 | [`kind`](contracts/contract_violation/kind.md) | 違反した契約の種類 | C++26|
 | [`location`](contracts/contract_violation/location.md) | 契約違反が発生したソースコードの位置 | C++26|
-| [`semantic`](contracts/contract_violation/semantic.md.nolink) | 契約の評価方法 | C++26|
+| [`semantic`](contracts/contract_violation/semantic.md) | 契約の評価方法 | C++26|
 
 ## 参照
 - [Contracts for C++](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2900r14.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>semantic -- new page `reference/contracts/contract_violation/semantic.md`(#1419)</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation/semantic.html"/>
      <id>a4157064c381f8af2b9e42ec9186b8a6c518892a:reference/contracts/contract_violation/semantic.md</id>
      <updated>2025-07-04T23:00:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation/semantic.md b/reference/contracts/contract_violation/semantic.md
new file mode 100644
index 000000000..56abd9b98
--- /dev/null
+++ b/reference/contracts/contract_violation/semantic.md
@@ -0,0 +1,30 @@
+# semantic
+* contracts[meta header]
+* std::contracts[meta namespace]
+* function[meta id-type]
+* cpp26[meta cpp]
+* contract_violation[meta class]
+
+```cpp
+evaluation_semantic semantic() const noexcept;
+```
+
+## 概要
+契約の評価方法を返す。
+
+## 戻り値
+契約の評価方法を表す`evaluation_semantic`型
+
+## 例外
+投げない
+
+## バージョン
+- C++26
+
+## 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [Contracts for C++](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2900r14.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contract_violation -- new page `reference/contracts/contract_violation/location.md`(#1419)</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation.html"/>
      <id>8769b4027780008cda07d6fbcd97b1afc3cd67a0:reference/contracts/contract_violation.md</id>
      <updated>2025-07-04T22:57:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation.md b/reference/contracts/contract_violation.md
index b09bc37e7..8146794a5 100644
--- a/reference/contracts/contract_violation.md
+++ b/reference/contracts/contract_violation.md
@@ -31,7 +31,7 @@ namespace std::contracts {
 | [`evaluation_exception`](contracts/contract_violation/evaluation_exception.md) | 契約が例外を飛ばしたことによって終了した場合の例外へのポインタ | C++26 |
 | [`is_terminating`](contracts/contract_violation/is_terminating.md) | 契約違反によってプログラムがターミネートされるかを返す | C++26|
 | [`kind`](contracts/contract_violation/kind.md) | 違反した契約の種類 | C++26|
-| [`location`](contracts/contract_violation/location.md.nolink) | 契約違反が発生したソースコードの位置 | C++26|
+| [`location`](contracts/contract_violation/location.md) | 契約違反が発生したソースコードの位置 | C++26|
 | [`semantic`](contracts/contract_violation/semantic.md.nolink) | 契約の評価方法 | C++26|
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>location -- new page `reference/contracts/contract_violation/location.md`(#1419)</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation/location.html"/>
      <id>8769b4027780008cda07d6fbcd97b1afc3cd67a0:reference/contracts/contract_violation/location.md</id>
      <updated>2025-07-04T22:57:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation/location.md b/reference/contracts/contract_violation/location.md
new file mode 100644
index 000000000..e3357943e
--- /dev/null
+++ b/reference/contracts/contract_violation/location.md
@@ -0,0 +1,35 @@
+# location
+* contracts[meta header]
+* std::contracts[meta namespace]
+* function[meta id-type]
+* cpp26[meta cpp]
+* contract_violation[meta class]
+
+```cpp
+source_location location() const noexcept;
+```
+
+## 概要
+契約違反が発生したソースコードの場所を返す。
+
+厳密にはどの場所を返すかは規定されていない。
+
+`precondition`違反の場合は関数の宣言の場所、それ以外では契約が記述された場所を返すことが推奨されている。
+
+## 戻り値
+契約違反が発生したソースコードの場所を返す（ただし厳密には定義されていない）。
+
+## 例外
+投げない
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [Contracts for C++](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2900r14.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contract_violation -- new page `reference/contracts/contract_violation/kind.md`(#1419)</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation.html"/>
      <id>95dd140110e07179b5cf35afbaa200cbd784f898:reference/contracts/contract_violation.md</id>
      <updated>2025-07-04T22:54:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation.md b/reference/contracts/contract_violation.md
index b3c9f1a12..b09bc37e7 100644
--- a/reference/contracts/contract_violation.md
+++ b/reference/contracts/contract_violation.md
@@ -30,7 +30,7 @@ namespace std::contracts {
 | [`detection_mode`](contracts/contract_violation/detection_mode.md) | 契約違反が特定された方法を返す | C++26 |
 | [`evaluation_exception`](contracts/contract_violation/evaluation_exception.md) | 契約が例外を飛ばしたことによって終了した場合の例外へのポインタ | C++26 |
 | [`is_terminating`](contracts/contract_violation/is_terminating.md) | 契約違反によってプログラムがターミネートされるかを返す | C++26|
-| [`kind`](contracts/contract_violation/kind.md.nolink) | 違反した契約の種類 | C++26|
+| [`kind`](contracts/contract_violation/kind.md) | 違反した契約の種類 | C++26|
 | [`location`](contracts/contract_violation/location.md.nolink) | 契約違反が発生したソースコードの位置 | C++26|
 | [`semantic`](contracts/contract_violation/semantic.md.nolink) | 契約の評価方法 | C++26|
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>kind -- new page `reference/contracts/contract_violation/kind.md`(#1419)</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation/kind.html"/>
      <id>95dd140110e07179b5cf35afbaa200cbd784f898:reference/contracts/contract_violation/kind.md</id>
      <updated>2025-07-04T22:54:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation/kind.md b/reference/contracts/contract_violation/kind.md
new file mode 100644
index 000000000..b2a995aa9
--- /dev/null
+++ b/reference/contracts/contract_violation/kind.md
@@ -0,0 +1,31 @@
+# kind
+* contracts[meta header]
+* std::contracts[meta namespace]
+* function[meta id-type]
+* cpp26[meta cpp]
+* contract_violation[meta class]
+
+```cpp
+assertion_kind kind() const noexcept;
+```
+
+## 概要
+契約違反の種類を返す。
+
+## 戻り値
+契約違反の種類を表す`assertion_kind`型
+
+## 例外
+投げない
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [Contracts for C++](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2900r14.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contract_violation -- new page `reference/contracts/contract_violation/is_terminating.md`(#1419)</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation.html"/>
      <id>6ae914490e3b30efda80be539784bd5e0a895dc7:reference/contracts/contract_violation.md</id>
      <updated>2025-07-04T22:51:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation.md b/reference/contracts/contract_violation.md
index 91a3020c2..b3c9f1a12 100644
--- a/reference/contracts/contract_violation.md
+++ b/reference/contracts/contract_violation.md
@@ -29,7 +29,7 @@ namespace std::contracts {
 | [`comment`](contracts/contract_violation/comment.md) | 契約違反の詳細を記録したchar列を返す | C++26 |
 | [`detection_mode`](contracts/contract_violation/detection_mode.md) | 契約違反が特定された方法を返す | C++26 |
 | [`evaluation_exception`](contracts/contract_violation/evaluation_exception.md) | 契約が例外を飛ばしたことによって終了した場合の例外へのポインタ | C++26 |
-| [`is_terminating`](contracts/contract_violation/is_terminating.md.nolink) | 契約違反によってプログラムがターミネートされるかを返す | C++26|
+| [`is_terminating`](contracts/contract_violation/is_terminating.md) | 契約違反によってプログラムがターミネートされるかを返す | C++26|
 | [`kind`](contracts/contract_violation/kind.md.nolink) | 違反した契約の種類 | C++26|
 | [`location`](contracts/contract_violation/location.md.nolink) | 契約違反が発生したソースコードの位置 | C++26|
 | [`semantic`](contracts/contract_violation/semantic.md.nolink) | 契約の評価方法 | C++26|
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_terminating -- new page `reference/contracts/contract_violation/is_terminating.md`(#1419)</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation/is_terminating.html"/>
      <id>6ae914490e3b30efda80be539784bd5e0a895dc7:reference/contracts/contract_violation/is_terminating.md</id>
      <updated>2025-07-04T22:51:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation/is_terminating.md b/reference/contracts/contract_violation/is_terminating.md
new file mode 100644
index 000000000..4c56ad323
--- /dev/null
+++ b/reference/contracts/contract_violation/is_terminating.md
@@ -0,0 +1,31 @@
+# is_terminating
+* contracts[meta header]
+* std::contracts[meta namespace]
+* function[meta id-type]
+* cpp26[meta cpp]
+* contract_violation[meta class]
+
+```cpp
+bool is_terminating() const noexcept;
+```
+
+## 概要
+契約違反によってプログラムが終了するかどうかを返す。
+
+## 戻り値
+契約違反によってプログラムが終了する場合は`true`、そうでない場合は`false`を返す
+
+## 例外
+投げない
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [Contracts for C++](https://open-std.org/jtc1/sc22/wg21/docs/papers/2025/p2900r14.pdf)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-09-22T14:39:15.685847</updated>
  <id>5e2e291a-5dc8-492c-bb94-af3bfb683f6d</id>

  
    <entry>
      <title>コンストラクタ -- 箇条書きの表示崩れを修正</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_real_distribution/op_constructor.html"/>
      <id>dee2ab32078f385fb64fecae9cb0b6bcb7f767b7:reference/random/uniform_real_distribution/op_constructor.md</id>
      <updated>2024-09-20T09:10:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_real_distribution/op_constructor.md b/reference/random/uniform_real_distribution/op_constructor.md
index b2dc13309..990146a3d 100644
--- a/reference/random/uniform_real_distribution/op_constructor.md
+++ b/reference/random/uniform_real_distribution/op_constructor.md
@@ -84,4 +84,4 @@ int main()
 
 - [P0935R0 Eradicating unnecessarily explicit default constructors from the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html)
 - [C++ の std::uniform_real_distribution はあまり信用できない。](https://qiita.com/Nabetani/items/b6b5f80c77b92ff8bd9f)
-    -　a ≤ x &amp;lt; b なるx を返すはずであるが、その範囲外の値が返ってくるライブラリ実装が存在することの指摘。
+    - a ≤ x &amp;lt; b なるx を返すはずであるが、その範囲外の値が返ってくるライブラリ実装が存在することの指摘。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>if文とswitch文の条件式と初期化を分離 [P0305R1] -- コードの誤りを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/selection_statements_with_initializer.html"/>
      <id>caa8159c251909eb1e20da5620c4acbac1bd1039:lang/cpp17/selection_statements_with_initializer.md</id>
      <updated>2024-09-20T02:16:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/selection_statements_with_initializer.md b/lang/cpp17/selection_statements_with_initializer.md
index 5e6a59a6e..56dc5108b 100644
--- a/lang/cpp17/selection_statements_with_initializer.md
+++ b/lang/cpp17/selection_statements_with_initializer.md
@@ -32,7 +32,7 @@ if (status_code c = bar(); c != SUCCESS) {
   …
   return c;
 } else {
-  //ステータスコード C が成功だったら、何かして、処理を続行する
+  //ステータスコード c が成功だったら、何かして、処理を続行する
   …
 }
 //この時点で c は無効
@@ -160,7 +160,7 @@ status_code foo() {
   int n = get_value();
 
   {
-    status_code C = bar(n);
+    status_code c = bar(n);
     if (c != status_code::SUCCESS) { return c; }
   }
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>lpha</name>
        <email>sphenocorona@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gamma_distribution -- 不自然な日本語を修正</title>
      <link href="https://cpprefjp.github.io/reference/random/gamma_distribution.html"/>
      <id>51384f5095416ae5a11286ed603d7f69ff145e3c:reference/random/gamma_distribution.md</id>
      <updated>2024-09-20T02:15:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/gamma_distribution.md b/reference/random/gamma_distribution.md
index 89f0e08c1..cbcf21a88 100644
--- a/reference/random/gamma_distribution.md
+++ b/reference/random/gamma_distribution.md
@@ -25,7 +25,7 @@ $$ p(x \mid \alpha, \beta) = \frac{e^{-x/\beta}}{\beta^{\alpha} \cdot \Gamma(\al
 ガンマ分布は、以下のような用途に使用できる：
 
 - 均一に忙しいコールセンターに10回電話をかけ、つながるまでの時間の統計を求める
-- 放射性物質の大きなボディが、1000回原子核崩壊するのを観察する
+- 放射性物質の大きな塊があるとき、1000回原子核崩壊するまでにかかる時間を観察する
 
 
 テンプレートパラメータは、以下を意味する：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>lpha</name>
        <email>sphenocorona@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- uniform_real_distribution: 範囲外が出ることがある件の参照追加</title>
      <link href="https://cpprefjp.github.io/reference/random/uniform_real_distribution/op_constructor.html"/>
      <id>1cb0ea1982be0f8c765149be0aa2d4d832e1245b:reference/random/uniform_real_distribution/op_constructor.md</id>
      <updated>2024-02-01T01:42:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/uniform_real_distribution/op_constructor.md b/reference/random/uniform_real_distribution/op_constructor.md
index d64649495..b2dc13309 100644
--- a/reference/random/uniform_real_distribution/op_constructor.md
+++ b/reference/random/uniform_real_distribution/op_constructor.md
@@ -82,4 +82,6 @@ int main()
 
 ## 参照
 
-- [P0935R0 Eradicating unnecessarily explicit default constructors from the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html)
\ No newline at end of file
+- [P0935R0 Eradicating unnecessarily explicit default constructors from the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html)
+- [C++ の std::uniform_real_distribution はあまり信用できない。](https://qiita.com/Nabetani/items/b6b5f80c77b92ff8bd9f)
+    -　a ≤ x &amp;lt; b なるx を返すはずであるが、その範囲外の値が返ってくるライブラリ実装が存在することの指摘。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>lpha</name>
        <email>sphenocorona@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>debugging -- fix typo</title>
      <link href="https://cpprefjp.github.io/reference/debugging.html"/>
      <id>d9d9c67a6159d03bc09fd61e50d4b802a36aae64:reference/debugging.md</id>
      <updated>2024-09-19T22:47:18+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;debugging&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;debugging&lt;/span&gt;&lt;span class=&#34;cpp cpp26&#34; title=&#34;C++26で追加&#34;&gt;(C++26)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;debugging&amp;gt;&lt;/code&gt;ヘッダでは、プログラムのデバッグ実行をサポートする機能を提供する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;debugging/breakpoint.html&#34;&gt;breakpoint&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ブレークポイントを設置する (functional)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;debugging/breakpoint_if_debugging.html&#34;&gt;breakpoint_if_debugging&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デバッガ実行時のみブレークポイントを設置する (functional)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;debugging/is_debugger_present.html&#34;&gt;is_debugger_present&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デバッガ実行中か判定する (functional)&lt;/td&gt;
&lt;td&gt;C++26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;この機能が必要になった背景・経緯&lt;/h2&gt;
&lt;p&gt;開発プラットフォームによってデバッガやブレークポイントの機能は提供されているが、本ライブラリのようにプログラム中に明示的にブレークポイントを設置し、プログラムとデバッガを対話させることでデバッグ体験が向上することがある。&lt;/p&gt;
&lt;p&gt;実装経験としては以下のようなものがあり、これらをこのライブラリで標準化した：&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;開発環境&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Microsoft C/C++ Optimizing Compiler&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__debugbreak()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Win32 API&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IsDebuggerPresent()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LLVM Clang&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__builtin_debugtrap()&lt;/code&gt;組み込み関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arm Keil, ARM Compiler&lt;/td&gt;
&lt;td&gt;&lt;code&gt;__breakpoint()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Portable Snippetsライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;psnip_trap()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Debug Breakライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;debug_break()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boost.Testライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;debugger_break()&lt;/code&gt;関数 (無条件ブレークポイント)&lt;br /&gt; &lt;code&gt;under_debugger()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EASTLライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;EASTL_DEBUG_BREAK()&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Catch2ライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;CATCH_TRAP&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;br /&gt; &lt;code&gt;CATCH_BREAK_INTO_DEBUGGER&lt;/code&gt;マクロ (条件付きブレークポイント)&lt;br /&gt; &lt;code&gt;isDebuggerActive()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JUCEライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;JUCE_BREAK_IN_DEBUGGER&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;br /&gt; &lt;code&gt;juce_isRunningUnderDebugger()&lt;/code&gt;関数、&lt;code&gt;Process::isRunningUnderDebugger()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ImGuiライブラリ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IM_DEBUG_BREAK()&lt;/code&gt;マクロ (無条件ブレークポイント)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS C SDK&lt;/td&gt;
&lt;td&gt;&lt;code&gt;aws_debug_break()&lt;/code&gt;関数 (条件付きブレークポイント)&lt;br /&gt; &lt;code&gt;aws_is_debugger_present()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnrealEngine&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UE_DEBUG_BREAK&lt;/code&gt;マクロ (条件付きブレークポイント)&lt;br /&gt; &lt;code&gt;IsDebuggerPresent()&lt;/code&gt;関数 (デバッガ実行中か判定)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++26&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2546r5.html&#34; target=&#34;_blank&#34;&gt;P2546R5 Debugging Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
</feed>
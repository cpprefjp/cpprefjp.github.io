<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-07-03T18:55:38.443041</updated>
  <id>7ee99bb4-2203-47d1-9fea-5a7f9d4b12af</id>

  
    <entry>
      <title>即時関数 -- Update immediate_functions.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/immediate_functions.html"/>
      <id>510381911c512e5079908695954578c55d34845e:lang/cpp20/immediate_functions.md</id>
      <updated>2021-07-04T03:50:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/immediate_functions.md b/lang/cpp20/immediate_functions.md
index e035386e0..a857c63b3 100644
--- a/lang/cpp20/immediate_functions.md
+++ b/lang/cpp20/immediate_functions.md
@@ -46,6 +46,21 @@ Int2Int *pf = sqr; // エラー
 ```
 * P1073R3[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1073r3.html]
 
+定数式として評価できない部分があっても、実行されなければエラーとならない。
+
+```cpp example
+consteval void f(int n) {
+  if(n &amp;lt; 0) {
+    throw &amp;#34;n should not be negative&amp;#34;;
+  }
+}
+
+int main() {
+  f(10); // OK
+  f(-1); // エラー
+}
+```
+
 ## 例
 ```cpp example
 // P1073R3より引用
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_format_args -- formatのP2216R3対応</title>
      <link href="https://cpprefjp.github.io/reference/format/basic_format_args.html"/>
      <id>709409a1d6d8a30eda41ed8ceaa9fccce6a43055:reference/format/basic_format_args.md</id>
      <updated>2021-07-04T03:43:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/basic_format_args.md b/reference/format/basic_format_args.md
index 5d8efac3c..746edb502 100644
--- a/reference/format/basic_format_args.md
+++ b/reference/format/basic_format_args.md
@@ -11,25 +11,19 @@ namespace std {
 
   using format_args = basic_format_args&amp;lt;format_context&amp;gt;; // (2)
   using wformat_args = basic_format_args&amp;lt;wformat_context&amp;gt;; // (3)
-
-  template&amp;lt;class Out, class charT&amp;gt;
-  using format_args_t = basic_format_args&amp;lt;basic_format_context&amp;lt;Out, charT&amp;gt;&amp;gt;; // (4)
-
 }
 ```
-* basic_format_context[link /reference/format/basic_format_context.md]
 * format_context[link /reference/format/basic_format_context.md]
 * wformat_context[link /reference/format/basic_format_context.md]
 
 ## 概要
-フォーマット引数列を保持する型。
-
-* (2): マルチバイト文字列版、[`vformat`](vformat.md)のマルチバイト文字列版の引数に使う
-* (3): ワイド文字列版、[`vformat`](vformat.md)のワイド文字列版の引数に使う
-* (4): [`vformat_to`](vformat_to.md)の引数に使う
-
+フォーマット引数列を保持する型。[`vformat`](vformat.md)や[`vformat_to`](vformat_to.md)の引数で使用する。
 この型のオブジェクトは、[`make_format_args`](make_format_args.md)の戻り値から構築する。
 
+* (1): クラステンプレートの定義
+* (2): マルチバイト文字列版の特殊化
+* (3): ワイド文字列版の特殊化
+
 ## メンバ関数
 
 | 名前                                                   | 説明                              | 対応バージョン |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- formatのP2216R3対応</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>709409a1d6d8a30eda41ed8ceaa9fccce6a43055:reference/format/format.md</id>
      <updated>2021-07-04T03:43:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index ad8e59a80..6d2133557 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -8,23 +8,23 @@
 ```cpp
 namespace std {
   template&amp;lt;class... Args&amp;gt;
-  string format(string_view fmt, const Args&amp;amp;... args);                      // (1)
+  string format(format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args);                      // (1)
 
   template&amp;lt;class... Args&amp;gt;
-  wstring format(wstring_view fmt, const Args&amp;amp;... args);                    // (2)
+  wstring format(wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args);                    // (2)
 
   template&amp;lt;class... Args&amp;gt;
-  string format(const locale&amp;amp; loc, string_view fmt, const Args&amp;amp;... args);   // (3)
+  string format(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args);   // (3)
 
   template&amp;lt;class... Args&amp;gt;
-  wstring format(const locale&amp;amp; loc, wstring_view fmt, const Args&amp;amp;... args); // (4)
+  wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (4)
 }
 ```
 * string[link /reference/string/basic_string.md]
 * wstring[link /reference/string/basic_string.md]
-* string_view[link /reference/string_view/basic_string_view.md]
-* wstring_view[link /reference/string_view/basic_string_view.md]
 * locale[link /reference/locale/locale.md]
+* format_string[italic]
+* wformat_string[italic]
 
 ## 概要
 
@@ -40,6 +40,8 @@ string message = format(&amp;#34;The answer is {}.&amp;#34;, 42); // =&amp;gt; &amp;#34;The answer is 42.&amp;#34;
 ```
 * string[link /reference/string/basic_string.md]
 
+書式文字列は定数式でなければならず、コンパイル時にチェックされる。実行時に決まるフォーマット文字列を使用したい場合、[`vformat`](vformat.md)を使用できる。
+
 ### 書式文字列
 
 書式文字列中では、`{`と`}`で囲まれた範囲が置換フィールドとなる(エスケープシーケンスは`{{`と`}}`)。
@@ -174,19 +176,54 @@ format(&amp;#34;{0:#x} {0:#X}&amp;#34;, 42);           // &amp;#34;0x2a 0X2A&amp;#34;
 format(&amp;#34;{:n}&amp;#34;, 1234);                  // &amp;#34;1,234&amp;#34; (ロケールによる)
 ```
 
+### コンパイル時の書式文字列チェック
+
+_`format_string`_ および _`basic_format_string`_ は次のように定義される。ただし、クラス名は規定されない。
+
+```cpp
+namespace std {
+  template&amp;lt;class charT, class... Args&amp;gt; struct basic_format_string { // exposition only
+  private:
+    basic_string_view&amp;lt;charT&amp;gt; str; // exposition only
+
+  public:
+    template&amp;lt;class T&amp;gt; consteval basic_format_string(const T&amp;amp; s): str(s) {
+      /*何らかのコンパイル時書式文字列チェック*/
+    }
+  };
+
+  template&amp;lt;class... Args&amp;gt; using format_string
+    = basic_format_string&amp;lt;char, type_identity_t&amp;lt;Args&amp;gt;...&amp;gt;; // exposition only
+
+  template&amp;lt;class... Args&amp;gt; using wformat_string
+    = basic_format_string&amp;lt;wchar_t, type_identity_t&amp;lt;Args&amp;gt;...&amp;gt;; // exposition only
+```
+
+_`basic_format_string`_ のコンストラクタは[即時関数](/lang/cpp20/immediate_functions.md)であり、書式文字列が正しい場合にのみ定数式として評価できるように実装される。即時関数であるため、定数式として評価できない場合はエラーとなる。
+
+書式文字列チェックをエラーがあった場合に例外を投げるような実装をすれば、`throw`は定数式として評価できないため、コンパイルエラーとすることが可能である。
+
+## 適格要件
+
+* 書式文字列は定数式であり、[`string_view`](/reference/string_view/basic_string_view.md)(ワイド文字列版は[`wstring_view`](/reference/string_view/basic_string_view.md))に暗黙変換できること。
+* 書式文字列にエラーがないこと。例えば、
+    * 閉じていないカッコなどの構文エラーがないこと。
+    * 実際に渡している引数の型が書式文字列中の置換フィールドが要求する型に合うこと。
+
 ## 効果
 
 以下のコードと等しい。
 
 ```cpp
-return vformat(fmt, {make_format_args(args...)});  // (1)
-return vformat(fmt, {make_wformat_args(args...)}); // (2)
-return vformat(loc, fmt, {make_format_args(args...)}); // (3)
-return vformat(loc, fmt, {make_wformat_args(args...)}); // (4)
+return vformat(fmt.str, make_format_args(args...));  // (1)
+return vformat(fmt.str, make_wformat_args(args...)); // (2)
+return vformat(loc, fmt.str, make_format_args(args...)); // (3)
+return vformat(loc, fmt.str, make_wformat_args(args...)); // (4)
 ```
 * vformat[link vformat.md]
 * make_format_args[link make_format_args.md]
 * make_wformat_args[link make_format_args.md]
+* str[italic]
 
 ## 戻り値
 
@@ -194,7 +231,7 @@ return vformat(loc, fmt, {make_wformat_args(args...)}); // (4)
 
 ## 例外
 
-書式文字列が正しくなかったり、フォーマット実行時に失敗したりした場合、[`format_error`](format_error.md)を投げる。
+フォーマット実行時に失敗した場合、[`format_error`](format_error.md)を投げる。ただし、書式文字列に問題がある場合はコンパイルエラーとなる。
 
 ## 備考
 
@@ -224,33 +261,34 @@ The answer is 42.
 ## 実装例
 ```cpp
 template&amp;lt;class... Args&amp;gt;
-string format(string_view fmt, const Args&amp;amp;... args)
+string format(format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
-  return vformat(fmt, {make_format_args(args...)});
+  return vformat(fmt.str, make_format_args(args...));
 }
 
 template&amp;lt;class... Args&amp;gt;
-wstring format(wstring_view fmt, const Args&amp;amp;... args)
+wstring format(wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
-  return vformat(fmt, {make_wformat_args(args...)});
+  return vformat(fmt.str, make_wformat_args(args...));
 }
 
 template&amp;lt;class... Args&amp;gt;
-string format(const locale&amp;amp; loc, string_view fmt, const Args&amp;amp;... args)
+string format(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
-  return vformat(loc, fmt, {make_format_args(args...)});
+  return vformat(loc, fmt.str, make_format_args(args...));
 }
 
 template&amp;lt;class... Args&amp;gt;
-wstring format(const locale&amp;amp; loc, wstring_view fmt, const Args&amp;amp;... args)
+wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
-  return vformat(loc, fmt, {make_wformat_args(args...)});
+  return vformat(loc, fmt.str, make_wformat_args(args...));
 }
 ```
 * string[link /reference/string/basic_string.md]
 * wstring[link /reference/string/basic_string.md]
-* string_view[link /reference/string_view/basic_string_view.md]
-* wstring_view[link /reference/string_view/basic_string_view.md]
+* format_string[italic]
+* wformat_string[italic]
+* str[italic]
 * vformat[link vformat.md]
 * make_format_args[link make_format_args.md]
 * make_wformat_args[link make_format_args.md]
@@ -271,3 +309,5 @@ wstring format(const locale&amp;amp; loc, wstring_view fmt, const Args&amp;amp;... args)
 * [Working Draft, Standard for Programming Language C++ [format]](https://timsong-cpp.github.io/cppwp/format)
 * [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
 * [P1652R1 Printf corner cases in std::format](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1652r1.html)
+* [P2216R3 std::format improvements](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html)
+* [［C++］ std::formatあるいは{fmt}のコンパイル時フォーマット文字列チェックの魔術 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2021/07/01/195912)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to -- formatのP2216R3対応</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to.html"/>
      <id>709409a1d6d8a30eda41ed8ceaa9fccce6a43055:reference/format/format_to.md</id>
      <updated>2021-07-04T03:43:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to.md b/reference/format/format_to.md
index 4db294677..bfb437091 100644
--- a/reference/format/format_to.md
+++ b/reference/format/format_to.md
@@ -8,20 +8,20 @@
 ```cpp
 namespace std {
   template&amp;lt;class Out, class... Args&amp;gt;
-  Out format_to(Out out, string_view fmt, const Args&amp;amp;... args); // (1)
+  Out format_to(Out out, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (1)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  Out format_to(Out out, wstring_view fmt, const Args&amp;amp;... args); // (2)
+  Out format_to(Out out, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (2)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  Out format_to(Out out, const locale&amp;amp; loc, string_view fmt, const Args&amp;amp;... args); // (3)
+  Out format_to(Out out, const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (3)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  Out format_to(Out out, const locale&amp;amp; loc, wstring_view fmt, const Args&amp;amp;... args); // (4)
+  Out format_to(Out out, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (4)
 }
 ```
-* string_view[link /reference/string_view/basic_string_view.md]
-* wstring_view[link /reference/string_view/basic_string_view.md]
+* format_string[italic]
+* wformat_string[italic]
 * locale[link /reference/locale/locale.md]
 
 ## 概要
@@ -38,6 +38,15 @@ string buffer;
 format_to(back_inserter(buffer), &amp;#34;The answer is {}.&amp;#34;, 42);
 ```
 
+書式文字列は定数式でなければならず、コンパイル時にチェックされる。実行時に決まるフォーマット文字列を使用したい場合、[`vformat_to`](vformat_to.md)を使用できる。
+
+## 適格要件
+
+* 書式文字列は定数式であり、[`string_view`](/reference/string_view/basic_string_view.md)(ワイド文字列版は[`wstring_view`](/reference/string_view/basic_string_view.md))に暗黙変換できること。
+* 書式文字列にエラーがないこと。例えば、
+    * 閉じていないカッコなどの構文エラーがないこと。
+    * 実際に渡している引数の型が書式文字列中の置換フィールドが要求する型に合うこと。
+
 ## テンプレートパラメータ制約
 
 `Out`は以下の制約を満たす。
@@ -57,11 +66,10 @@ format_to(back_inserter(buffer), &amp;#34;The answer is {}.&amp;#34;, 42);
 以下のコードと等しい。
 
 ```cpp
-using context = basic_format_context&amp;lt;Out, decltype(fmt)::value_type&amp;gt;;
 // (1), (2)
-return vformat_to(out, fmt, {make_format_args&amp;lt;context&amp;gt;(args...)});
+return vformat_to(out, fmt.str, make_format_args(args...));
 // (3), (4)
-return vformat_to(out, loc, fmt, {make_format_args&amp;lt;context&amp;gt;(args...)});
+return vformat_to(out, loc, fmt.str, make_wformat_args(args...));
 ```
 * basic_format_context[link basic_format_context.md]
 * vformat_to[link vformat_to.md]
@@ -73,7 +81,7 @@ return vformat_to(out, loc, fmt, {make_format_args&amp;lt;context&amp;gt;(args...)});
 
 ## 例外
 
-書式文字列が正しくなかったり、フォーマット実行時に失敗したりした場合、[`format_error`](format_error.md)を投げる。
+フォーマット実行時に失敗した場合、[`format_error`](format_error.md)を投げる。
 
 ## 備考
 
@@ -101,35 +109,35 @@ The answer is 42.
 ## 実装例
 ```cpp
 template&amp;lt;class Out, class... Args&amp;gt;
-string format_to(Out out, string_view fmt, const Args&amp;amp;... args)
+string format_to(Out out, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
-  using context = basic_format_context&amp;lt;Out, decltype(fmt)::value_type&amp;gt;;
-  return vformat_to(out, fmt, {make_format_args&amp;lt;context&amp;gt;(args...)});
+  return vformat_to(out, fmt.str, {make_format_args&amp;gt;(args...)});
 }
 
 template&amp;lt;class Out, class... Args&amp;gt;
-wstring format_to(Out out, wstring_view fmt, const Args&amp;amp;... args)
+wstring format_to(Out out, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
   using context = basic_format_context&amp;lt;Out, decltype(fmt)::value_type&amp;gt;;
-  return vformat_to(out, fmt, {make_format_args&amp;lt;context&amp;gt;(args...)});
+  return vformat_to(out, fmt.str, {make_format_args&amp;lt;context&amp;gt;(args...)});
 }
 
 template&amp;lt;class Out, class... Args&amp;gt;
-string format_to(Out out, const locale&amp;amp; loc, string_view fmt, const Args&amp;amp;... args)
+string format_to(Out out, const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
   using context = basic_format_context&amp;lt;Out, decltype(fmt)::value_type&amp;gt;;
-  return vformat_to(out, loc, fmt, {make_format_args&amp;lt;context&amp;gt;(args...)});
+  return vformat_to(out, loc, fmt.str, {make_format_args&amp;lt;context&amp;gt;(args...)});
 }
 
 template&amp;lt;class Out, class... Args&amp;gt;
-wstring format_to(Out out, const locale&amp;amp; loc, wstring_view fmt, const Args&amp;amp;... args)
+wstring format_to(Out out, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args)
 {
   using context = basic_format_context&amp;lt;Out, decltype(fmt)::value_type&amp;gt;;
-  return vformat_to(out, loc, fmt, {make_format_args&amp;lt;context&amp;gt;(args...)});
+  return vformat_to(out, loc, fmt.str, {make_format_args&amp;lt;context&amp;gt;(args...)});
 }
 ```
-* string_view[link /reference/string_view/basic_string_view.md]
-* wstring_view[link /reference/string_view/basic_string_view.md]
+* format_string[italic]
+* wformat_string[italic]
+* str[italic]
 * basic_format_context[link basic_format_context.md]
 * vformat_to[link vformat.md]
 * make_format_args[link make_format_args.md]
@@ -149,3 +157,5 @@ wstring format_to(Out out, const locale&amp;amp; loc, wstring_view fmt, const Args&amp;amp;... a
 
 * [Working Draft, Standard for Programming Language C++ [format]](https://timsong-cpp.github.io/cppwp/format)
 * [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
+* [P2216R3 std::format improvements](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html)
+* [［C++］ std::formatあるいは{fmt}のコンパイル時フォーマット文字列チェックの魔術 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2021/07/01/195912)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format_to_n -- formatのP2216R3対応</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to_n.html"/>
      <id>709409a1d6d8a30eda41ed8ceaa9fccce6a43055:reference/format/format_to_n.md</id>
      <updated>2021-07-04T03:43:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to_n.md b/reference/format/format_to_n.md
index d1ead0c51..7ba92f7d9 100644
--- a/reference/format/format_to_n.md
+++ b/reference/format/format_to_n.md
@@ -8,20 +8,20 @@
 ```cpp
 namespace std {
   template&amp;lt;class Out, class... Args&amp;gt;
-  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, string_view fmt, const Args&amp;amp;... args); // (1)
+  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (1)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, wstring_view fmt, const Args&amp;amp;... args); // (2)
+  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (2)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, const locale&amp;amp; loc, string_view fmt, const Args&amp;amp;... args); // (3)
+  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (3)
 
   template&amp;lt;class Out, class... Args&amp;gt;
-  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, const locale&amp;amp; loc, wstring_view fmt, const Args&amp;amp;... args); // (4)
+  format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (4)
 }
 ```
-* string_view[link /reference/string_view/basic_string_view.md]
-* wstring_view[link /reference/string_view/basic_string_view.md]
+* format_string[italic]
+* wformat_string[italic]
 * format_to_n_result[link format_to_n_result.md]
 * locale[link /reference/locale/locale.md]
 
@@ -41,6 +41,13 @@ auto [end, n] = format_to_n(buffer, size(buffer)-1, &amp;#34;The answer is {}.&amp;#34;, 42);
 cout &amp;lt;&amp;lt; buffer; // The answer is 42.
 ```
 
+## 適格要件
+
+* 書式文字列は定数式であり、[`string_view`](/reference/string_view/basic_string_view.md)(ワイド文字列版は[`wstring_view`](/reference/string_view/basic_string_view.md))に暗黙変換できること。
+* 書式文字列にエラーがないこと。例えば、
+    * 閉じていないカッコなどの構文エラーがないこと。
+    * 実際に渡している引数の型が書式文字列中の置換フィールドが要求する型に合うこと。
+
 ## テンプレートパラメータ制約
 
 `charT`を`decltype(fmt)::value_type`として、
@@ -60,7 +67,7 @@ cout &amp;lt;&amp;lt; buffer; // The answer is 42.
 
 ## 例外
 
-書式文字列が正しくなかったり、フォーマット実行時に失敗したりした場合、[`format_error`](format_error.md)を投げる。
+フォーマット実行時に失敗した場合、[`format_error`](format_error.md)を投げる。
 
 ## 備考
 
@@ -100,3 +107,5 @@ The answer is 42.
 
 * [Working Draft, Standard for Programming Language C++ [format]](https://timsong-cpp.github.io/cppwp/format)
 * [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
+* [P2216R3 std::format improvements](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html)
+* [［C++］ std::formatあるいは{fmt}のコンパイル時フォーマット文字列チェックの魔術 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2021/07/01/195912)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatted_size -- formatのP2216R3対応</title>
      <link href="https://cpprefjp.github.io/reference/format/formatted_size.html"/>
      <id>709409a1d6d8a30eda41ed8ceaa9fccce6a43055:reference/format/formatted_size.md</id>
      <updated>2021-07-04T03:43:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatted_size.md b/reference/format/formatted_size.md
index 535ecfabf..b6fef7077 100644
--- a/reference/format/formatted_size.md
+++ b/reference/format/formatted_size.md
@@ -8,20 +8,20 @@
 ```cpp
 namespace std {
   template&amp;lt;class... Args&amp;gt;
-  size_t formatted_size(string_view fmt, const Args&amp;amp;... args); // (1)
+  size_t formatted_size(format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (1)
 
   template&amp;lt;class... Args&amp;gt;
-  size_t formatted_size(wstring_view fmt, const Args&amp;amp;... args); // (2)
+  size_t formatted_size(wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (2)
 
   template&amp;lt;class... Args&amp;gt;
-  size_t formatted_size(const locale&amp;amp; loc, string_view fmt, const Args&amp;amp;... args); // (3)
+  size_t formatted_size(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (3)
 
   template&amp;lt;class... Args&amp;gt;
-  size_t formatted_size(const locale&amp;amp; loc, wstring_view fmt, const Args&amp;amp;... args); // (4)
+  size_t formatted_size(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args); // (4)
 }
 ```
-* string_view[link /reference/string_view/basic_string_view.md]
-* wstring_view[link /reference/string_view/basic_string_view.md]
+* format_string[italic]
+* wformat_string[italic]
 * locale[link /reference/locale/locale.md]
 
 ## 概要
@@ -37,6 +37,13 @@ namespace std {
 formatted_size(&amp;#34;The answer is {}.&amp;#34;, 42); // =&amp;gt; 17
 ```
 
+## 適格要件
+
+* 書式文字列は定数式であり、[`string_view`](/reference/string_view/basic_string_view.md)(ワイド文字列版は[`wstring_view`](/reference/string_view/basic_string_view.md))に暗黙変換できること。
+* 書式文字列にエラーがないこと。例えば、
+    * 閉じていないカッコなどの構文エラーがないこと。
+    * 実際に渡している引数の型が書式文字列中の置換フィールドが要求する型に合うこと。
+
 ## 事前条件
 
 `charT`を`decltype(fmt)::value_type`として、
@@ -85,3 +92,5 @@ int main()
 
 * [Working Draft, Standard for Programming Language C++ [format]](https://timsong-cpp.github.io/cppwp/format)
 * [P0645R10 Text Formatting](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html)
+* [P2216R3 std::format improvements](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2216r3.html)
+* [［C++］ std::formatあるいは{fmt}のコンパイル時フォーマット文字列チェックの魔術 - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2021/07/01/195912)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat -- formatのP2216R3対応</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat.html"/>
      <id>709409a1d6d8a30eda41ed8ceaa9fccce6a43055:reference/format/vformat.md</id>
      <updated>2021-07-04T03:43:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat.md b/reference/format/vformat.md
index cf32cacd8..0d2f9fc87 100644
--- a/reference/format/vformat.md
+++ b/reference/format/vformat.md
@@ -42,7 +42,7 @@ namespace std {
 
 ## 例外
 
-書式文字列が正しくなかったり、フォーマット実行時に失敗したりした場合、[`format_error`](format_error.md)を投げる。
+フォーマット実行時に失敗した場合、[`format_error`](format_error.md)を投げる。
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat_to -- formatのP2216R3対応</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat_to.html"/>
      <id>709409a1d6d8a30eda41ed8ceaa9fccce6a43055:reference/format/vformat_to.md</id>
      <updated>2021-07-04T03:43:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat_to.md b/reference/format/vformat_to.md
index 6b6e6ca63..c87eb9f3c 100644
--- a/reference/format/vformat_to.md
+++ b/reference/format/vformat_to.md
@@ -7,16 +7,16 @@
 
 ```cpp
 namespace std {
-  template&amp;lt;class Out, class... Args&amp;gt;
+  template&amp;lt;class Out&amp;gt;
   Out vformat_to(Out out, string_view fmt, format_args args); // (1)
 
-  template&amp;lt;class Out, class... Args&amp;gt;
+  template&amp;lt;class Out&amp;gt;
   Out vformat_to(Out out, wstring_view fmt, wformat_args args); // (2)
 
-  template&amp;lt;class Out, class... Args&amp;gt;
+  template&amp;lt;class Out&amp;gt;
   Out vformat_to(Out out, const locale&amp;amp; loc, string_view fmt, format_args args); // (3)
 
-  template&amp;lt;class Out, class... Args&amp;gt;
+  template&amp;lt;class Out&amp;gt;
   Out vformat_to(Out out, const locale&amp;amp; loc, wstring_view fmt, wformat_args args); // (4)
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>declare_no_pointers -- declare_no_pointers : サイズ計算の間違いを修正</title>
      <link href="https://cpprefjp.github.io/reference/memory/declare_no_pointers.html"/>
      <id>154140fb9a2fb3b24594d21e3a56019bdff9e232:reference/memory/declare_no_pointers.md</id>
      <updated>2021-07-01T10:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/declare_no_pointers.md b/reference/memory/declare_no_pointers.md
index 40a2e0eb8..ca1e73253 100644
--- a/reference/memory/declare_no_pointers.md
+++ b/reference/memory/declare_no_pointers.md
@@ -58,7 +58,7 @@ int main()
 {
   size_t const size = 10;
   ptr = new intptr_t[size];
-  std::declare_no_pointers(ptr, sizeof(intptr_t) + size);
+  std::declare_no_pointers(ptr, sizeof(intptr_t) * size);
 
   // 以下のような間接参照は例え領域の型がintptr_tであってもしてはならない
   // *reinterpret_cast&amp;lt;int*&amp;gt;(ptr[10]);
@@ -74,7 +74,7 @@ int main()
     std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
   }
 
-  std::undeclare_no_pointers(ptr, sizeof(intptr_t) + size);
+  std::undeclare_no_pointers(ptr, sizeof(intptr_t) * size);
 
   return EXIT_SUCCESS;
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>random_access_iterator -- random_access_iterator : 修正とリンク追加</title>
      <link href="https://cpprefjp.github.io/reference/iterator/random_access_iterator.html"/>
      <id>8b71460719c6bd1d66703565991c63d85f8c59bf:reference/iterator/random_access_iterator.md</id>
      <updated>2021-06-26T19:02:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/random_access_iterator.md b/reference/iterator/random_access_iterator.md
index f182706fd..960b1aea5 100644
--- a/reference/iterator/random_access_iterator.md
+++ b/reference/iterator/random_access_iterator.md
@@ -40,7 +40,7 @@ namespace std {
 
 ## モデル
 
-`iter_reference_t&amp;lt;I&amp;gt;`の示す型`D`、`D`の値`n`、型`I`の有効なイテレータ`a`と`++a`を`n`回適用したイテレータ`b`について次の条件を満たす場合に限って、型`I`は`random_access_iterator`のモデルである。
+[`iter_difference_t&amp;lt;I&amp;gt;`](/reference/iterator/iter_difference_t.md)の示す型`D`、`D`の値`n`、型`I`の有効なイテレータ`a`と`++a`を`n`回適用したイテレータ`b`について次の条件を満たす場合に限って、型`I`は`random_access_iterator`のモデルである。
 
 - `(a += n)`は`b`と等値（*equal*）
 - `addressof(a += n)`は`addressof(a)`と等値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>一様初期化 -- 更新されている規格番号を追加した(uniform initialization)</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/uniform_initialization.html"/>
      <id>4ab30a8b97ee60b74255e9f6c336ae8a3b7c8de4:lang/cpp11/uniform_initialization.md</id>
      <updated>2021-06-25T12:47:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/uniform_initialization.md b/lang/cpp11/uniform_initialization.md
index 82121cdcf..4a3e17a93 100644
--- a/lang/cpp11/uniform_initialization.md
+++ b/lang/cpp11/uniform_initialization.md
@@ -198,5 +198,6 @@ int main()
 - [N2532 Uniform initialization design choices (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2532.pdf)
 - [N2575 Initializer Lists - Alternative Mechanism and Rationale](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2575.pdf)
 - [N2640 Initializer Lists - Alternative Mechanism and Rationale (v. 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf)
+- [N2672 Initializer List proposed wording](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm)
 - [CWG Issue 1030. Evaluation order in initializer-lists used in aggregate initialization](http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1030)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
</feed>
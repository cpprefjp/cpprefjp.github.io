<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-05-02T02:45:58.108976</updated>
  <id>cff236a4-6415-40a7-ac24-7e0295b346b9</id>

  
    <entry>
      <title>デストラクタ -- コード例の一行の長さを短く</title>
      <link href="https://cpprefjp.github.io/reference/future/promise/op_destructor.html"/>
      <id>b9d4a50c1206393ba88cd6366d39fb3aace4d8b9:reference/future/promise/op_destructor.md</id>
      <updated>2024-05-02T01:01:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/promise/op_destructor.md b/reference/future/promise/op_destructor.md
index a922bd7d3..a4b55f036 100644
--- a/reference/future/promise/op_destructor.md
+++ b/reference/future/promise/op_destructor.md
@@ -39,7 +39,8 @@ int main()
   std::thread t(calc, std::move(p));
 
   try {
-    std::cout &amp;lt;&amp;lt; f.get() &amp;lt;&amp;lt; std::endl; // 上で書き込まれた例外が送出される
+    // 上で書き込まれた例外が送出される
+    std::cout &amp;lt;&amp;lt; f.get() &amp;lt;&amp;lt; std::endl;
   }
   catch (std::future_error&amp;amp; e) {
     std::cout &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- promiseデストラクタが例外を格納するコード例を作成 #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/promise/op_destructor.html"/>
      <id>8e854b8d24bb6774f4e3622c881edc0addde5614:reference/future/promise/op_destructor.md</id>
      <updated>2024-05-01T00:29:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/promise/op_destructor.md b/reference/future/promise/op_destructor.md
index 6203910d3..a922bd7d3 100644
--- a/reference/future/promise/op_destructor.md
+++ b/reference/future/promise/op_destructor.md
@@ -18,11 +18,44 @@
 2. 共有状態を解放する。
 
 ## 例
-```cpp
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;future&amp;gt;
+#include &amp;lt;thread&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+void calc(std::promise&amp;lt;int&amp;gt; p)
+{
+  // 通常行う p.set_value() をしなかったとする
+
+  // ここで promise のデストラクタが例外オブジェクトを書き込む
+}
+
+int main()
+{
+  std::promise&amp;lt;int&amp;gt; p;
+  std::future&amp;lt;int&amp;gt; f = p.get_future();
+
+  std::thread t(calc, std::move(p));
+
+  try {
+    std::cout &amp;lt;&amp;lt; f.get() &amp;lt;&amp;lt; std::endl; // 上で書き込まれた例外が送出される
+  }
+  catch (std::future_error&amp;amp; e) {
+    std::cout &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
+  }
+
+  t.join();
+}
 ```
+* std::future[link /reference/future/future.md]
+* p.get_future()[link get_future.md]
+* std::move[link /reference/utility/move.md]
+* f.get()[link /reference/future/future/get.md]
 
-### 出力
+### 出力例
 ```
+std::future_error: Broken promise
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- 共有状態を放棄するとき例外を格納する動作を追記（規格に明記された3メソッド） #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/packaged_task/op_destructor.html"/>
      <id>eddd59506ba4c79f2d70a711cf8ba43c26c847a2:reference/future/packaged_task/op_destructor.md</id>
      <updated>2024-04-30T23:24:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/packaged_task/op_destructor.md b/reference/future/packaged_task/op_destructor.md
index 8efda1a00..a2bdd4ee8 100644
--- a/reference/future/packaged_task/op_destructor.md
+++ b/reference/future/packaged_task/op_destructor.md
@@ -14,8 +14,8 @@
 
 
 ## 効果
-共有状態を放棄する
-
+1. まず共有状態が準備完了状態([`future_status::ready`](../future_status.md))でなければ、error conditionとして[`broken_promise`](../future_errc.md)を持つ[`future_error`](../future_error.md)例外オブジェクトを格納したのち、準備完了状態にする。
+2. 共有状態を解放する。
 
 ## 例
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- 共有状態を放棄するとき例外を格納する動作を追記（規格に明記された3メソッド） #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/promise/op_assign.html"/>
      <id>eddd59506ba4c79f2d70a711cf8ba43c26c847a2:reference/future/promise/op_assign.md</id>
      <updated>2024-04-30T23:24:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/promise/op_assign.md b/reference/future/promise/op_assign.md
index 7d81f22b8..fc5d42a35 100644
--- a/reference/future/promise/op_assign.md
+++ b/reference/future/promise/op_assign.md
@@ -16,8 +16,10 @@ promise&amp;amp; operator=(const promise&amp;amp; rhs) = delete; // (2)
 
 
 ## 効果
-- (1) : 現在の共有状態を放棄し、`promise(std::`[`move`](/reference/utility/move.md)`(rhs)).swap(*this)`する。
-
+- (1) :
+    1. まず現在の共有状態が準備完了状態([`future_status::ready`](../future_status.md))でなければ、error conditionとして[`broken_promise`](../future_errc.md)を持つ[`future_error`](../future_error.md)例外オブジェクトを格納したのち、準備完了状態にする。
+    2. 現在の共有状態を解放する。
+    3. `promise(std::`[`move`](/reference/utility/move.md)`(rhs)).swap(*this)`する。
 
 ## 戻り値
 - (1) : `*this`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- 共有状態を放棄するとき例外を格納する動作を追記（規格に明記された3メソッド） #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/promise/op_destructor.html"/>
      <id>eddd59506ba4c79f2d70a711cf8ba43c26c847a2:reference/future/promise/op_destructor.md</id>
      <updated>2024-04-30T23:24:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/promise/op_destructor.md b/reference/future/promise/op_destructor.md
index 0d07b50f5..6203910d3 100644
--- a/reference/future/promise/op_destructor.md
+++ b/reference/future/promise/op_destructor.md
@@ -14,8 +14,8 @@
 
 
 ## 効果
-- 共有状態を持っていればそれを解放する。
-- ただし、持っている共有状態が準備完了状態([`future_status::ready`](../future_status.md))でなければ、error conditionとして[`broken_promise`](../future_errc.md)を持つ[`future_error`](../future_error.md)例外オブジェクトを格納して、準備完了状態にしたのち、それを解放する。
+1. まず共有状態が準備完了状態([`future_status::ready`](../future_status.md))でなければ、error conditionとして[`broken_promise`](../future_errc.md)を持つ[`future_error`](../future_error.md)例外オブジェクトを格納したのち、準備完了状態にする。
+2. 共有状態を解放する。
 
 ## 例
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- Update formatter.md</title>
      <link href="https://cpprefjp.github.io/reference/format/formatter.html"/>
      <id>33fdff4259aba54e5639229f70eea4743e48432c:reference/format/formatter.md</id>
      <updated>2024-04-29T19:32:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatter.md b/reference/format/formatter.md
index 800229fdd..1f02015d1 100644
--- a/reference/format/formatter.md
+++ b/reference/format/formatter.md
@@ -109,7 +109,6 @@ namespace std {
 typename FC::template formatter_type&amp;lt;T&amp;gt; f;
 pc.advance_to(f.parse(pc));      // オプションを解析し状態を保存する
 fc.advance_to(f.format(u, fc));  // 状態をもとにフォーマットを行う
-assert(pc.begin() == pc.end() || *pc.begin() == &amp;#39;}&amp;#39;);
 ```
 * pc.advance_to[link /reference/format/basic_format_parse_context/advance_to.md]
 * fc.advance_to[link /reference/format/basic_format_context/advance_to.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- promiseデストラクタの効果に例外を格納する動作を追記 #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/promise/op_destructor.html"/>
      <id>4796c01cbd893195591f4f637f2f966066f550bf:reference/future/promise/op_destructor.md</id>
      <updated>2024-04-28T12:31:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/promise/op_destructor.md b/reference/future/promise/op_destructor.md
index 98de6b511..0d07b50f5 100644
--- a/reference/future/promise/op_destructor.md
+++ b/reference/future/promise/op_destructor.md
@@ -14,8 +14,8 @@
 
 
 ## 効果
-共有状態を放棄する
-
+- 共有状態を持っていればそれを解放する。
+- ただし、持っている共有状態が準備完了状態([`future_status::ready`](../future_status.md))でなければ、error conditionとして[`broken_promise`](../future_errc.md)を持つ[`future_error`](../future_error.md)例外オブジェクトを格納して、準備完了状態にしたのち、それを解放する。
 
 ## 例
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
</feed>
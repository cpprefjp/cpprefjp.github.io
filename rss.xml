<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-09-01T00:12:28.093809</updated>
  <id>7318b87a-2029-4c9b-8e10-34bb9a924f3a</id>

  
    <entry>
      <title>get -- Merge pull request #261 from wx257osn2/patch-1
</title>
      <link href="http://cpprefjp.github.io/reference/istream/basic_istream/get.html"/>
      <id>4f9b252a380aeb5dd5afc78c080c4e96804e9bbc:reference/istream/basic_istream/get.md</id>
      <updated>2015-08-31 23:44:27 +0900
</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;istream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_istream&#34;&gt;basic_istream::&lt;/span&gt;get&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1文字&lt;/span&gt;
int_type &lt;span style=&#34;color: #0000FF&#34;&gt;get&lt;/span&gt;();
basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; get(char_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列&lt;/span&gt;
basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; get(char_type&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s, streamsize n);
basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; get(char_type&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s, streamsize n, char_type delim);
basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; get(basic_streambuf&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;char_type, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; sb);
basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; get(basic_streambuf&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;char_type, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; sb, char_type delim);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;（非書式化入力関数）ストリームから文字または文字列を入力する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上2つの多重定義は1文字のみの入力を行う。&lt;/li&gt;
&lt;li&gt;残りの多重定義は&lt;code&gt;delim&lt;/code&gt;または改行までの文字を入力する。入力した文字の受け取り先に応じてさらに多重定義されている。&lt;ul&gt;
&lt;li&gt;配列要素へのポインタ&lt;code&gt;s&lt;/code&gt;（要素数&lt;code&gt;n&lt;/code&gt;）へ書き込むもの。&lt;/li&gt;
&lt;li&gt;ストリームバッファ&lt;code&gt;sb&lt;/code&gt;へ書き込むもの。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;h3&gt;1文字&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;ストリームバッファから1文字入力を行う。&lt;/li&gt;
&lt;li&gt;入力が行えなかった場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;（引数&lt;code&gt;c&lt;/code&gt;を受け取るもののみ）入力した文字を&lt;code&gt;c&lt;/code&gt;に代入する。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;p&gt;仮引数&lt;code&gt;delim&lt;/code&gt;を持たない2つの多重定義は、それぞれ以下を実行する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get(s, n, widen(&#39;\n&#39;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get(sb, n, widen(&#39;\n&#39;))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仮引数&lt;code&gt;delim&lt;/code&gt;を持つ残りの2つは以下の処理を実行する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;以下のいずれかを満たすまで、文字を入力して書き込む。&lt;ul&gt;
&lt;li&gt;配列要素へのポインタ&lt;code&gt;s&lt;/code&gt;を引数に取るもの&lt;ul&gt;
&lt;li&gt;引数&lt;code&gt;n&lt;/code&gt;文字より1文字少ない文字数まで入力した。&lt;/li&gt;
&lt;li&gt;EOFに達した。この場合、&lt;code&gt;setstate(eofbit)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;次に入力する文字を&lt;code&gt;c&lt;/code&gt;として、&lt;code&gt;Traits::eq_int_type(Traits::to_int_type(c), delim)&lt;/code&gt;が真となった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ストリームバッファへのポインタ&lt;code&gt;sb&lt;/code&gt;を引数に取るもの&lt;ul&gt;
&lt;li&gt;EOFに達した。この場合、&lt;code&gt;setstate(eofbit)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sb&lt;/code&gt;への出力処理に失敗した。&lt;/li&gt;
&lt;li&gt;次に入力する文字を&lt;code&gt;c&lt;/code&gt;として、&lt;code&gt;Traits::eq_int_type(Traits::to_int_type(c), delim)&lt;/code&gt;が真となった。&lt;/li&gt;
&lt;li&gt;例外が送出された（例外は捕捉され、再送出されることはない）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;str&lt;/code&gt;に1文字も入力が行われなかった場合、&lt;code&gt;is.setstate(ios_base::failbit)&lt;/code&gt;が呼び出される。&lt;/p&gt;
&lt;p&gt;配列要素へのポインタ&lt;code&gt;s&lt;/code&gt;を引数に取るものについては、入力の如何に関わらず末尾にヌル文字を書き込む処理が行われる。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int_type&lt;/code&gt;を返すものについては入力した文字。入力が行われなければ&lt;code&gt;Traits::eof()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp;&lt;/code&gt;を返すものについては&lt;code&gt;*this&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例（文字）&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;locale&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cin.get();
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; EOF) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;to_char_type(x) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; y;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cin.get(y)) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;入力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;12
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf.html&#34;&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi
</name>
        <email>faithandbrave@gmail.com
</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- fix basic_istream::get interfaces</title>
      <link href="http://cpprefjp.github.io/reference/istream/basic_istream/get.html"/>
      <id>ca8780ebc5bfc47b18666292884dcc24ce67f877:reference/istream/basic_istream/get.md</id>
      <updated>2015-08-31 22:16:55 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;istream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_istream&#34;&gt;basic_istream::&lt;/span&gt;get&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1文字&lt;/span&gt;
int_type &lt;span style=&#34;color: #0000FF&#34;&gt;get&lt;/span&gt;();
basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; get(char_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; c);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列&lt;/span&gt;
basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; get(char_type&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s, streamsize n);
basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; get(char_type&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s, streamsize n, char_type delim);
basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; get(basic_streambuf&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;char_type, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; sb);
basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; get(basic_streambuf&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;char_type, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; sb, char_type delim);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;（非書式化入力関数）ストリームから文字または文字列を入力する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上2つの多重定義は1文字のみの入力を行う。&lt;/li&gt;
&lt;li&gt;残りの多重定義は&lt;code&gt;delim&lt;/code&gt;または改行までの文字を入力する。入力した文字の受け取り先に応じてさらに多重定義されている。&lt;ul&gt;
&lt;li&gt;配列要素へのポインタ&lt;code&gt;s&lt;/code&gt;（要素数&lt;code&gt;n&lt;/code&gt;）へ書き込むもの。&lt;/li&gt;
&lt;li&gt;ストリームバッファ&lt;code&gt;sb&lt;/code&gt;へ書き込むもの。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;h3&gt;1文字&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;ストリームバッファから1文字入力を行う。&lt;/li&gt;
&lt;li&gt;入力が行えなかった場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;（引数&lt;code&gt;c&lt;/code&gt;を受け取るもののみ）入力した文字を&lt;code&gt;c&lt;/code&gt;に代入する。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;p&gt;仮引数&lt;code&gt;delim&lt;/code&gt;を持たない2つの多重定義は、それぞれ以下を実行する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get(s, n, widen(&#39;\n&#39;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get(sb, n, widen(&#39;\n&#39;))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仮引数&lt;code&gt;delim&lt;/code&gt;を持つ残りの2つは以下の処理を実行する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;以下のいずれかを満たすまで、文字を入力して書き込む。&lt;ul&gt;
&lt;li&gt;配列要素へのポインタ&lt;code&gt;s&lt;/code&gt;を引数に取るもの&lt;ul&gt;
&lt;li&gt;引数&lt;code&gt;n&lt;/code&gt;文字より1文字少ない文字数まで入力した。&lt;/li&gt;
&lt;li&gt;EOFに達した。この場合、&lt;code&gt;setstate(eofbit)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;次に入力する文字を&lt;code&gt;c&lt;/code&gt;として、&lt;code&gt;Traits::eq_int_type(Traits::to_int_type(c), delim)&lt;/code&gt;が真となった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ストリームバッファへのポインタ&lt;code&gt;sb&lt;/code&gt;を引数に取るもの&lt;ul&gt;
&lt;li&gt;EOFに達した。この場合、&lt;code&gt;setstate(eofbit)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sb&lt;/code&gt;への出力処理に失敗した。&lt;/li&gt;
&lt;li&gt;次に入力する文字を&lt;code&gt;c&lt;/code&gt;として、&lt;code&gt;Traits::eq_int_type(Traits::to_int_type(c), delim)&lt;/code&gt;が真となった。&lt;/li&gt;
&lt;li&gt;例外が送出された（例外は捕捉され、再送出されることはない）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;str&lt;/code&gt;に1文字も入力が行われなかった場合、&lt;code&gt;is.setstate(ios_base::failbit)&lt;/code&gt;が呼び出される。&lt;/p&gt;
&lt;p&gt;配列要素へのポインタ&lt;code&gt;s&lt;/code&gt;を引数に取るものについては、入力の如何に関わらず末尾にヌル文字を書き込む処理が行われる。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int_type&lt;/code&gt;を返すものについては入力した文字。入力が行われなければ&lt;code&gt;Traits::eof()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp;&lt;/code&gt;を返すものについては&lt;code&gt;*this&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例（文字）&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;locale&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cin.get();
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; EOF) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;to_char_type(x) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; y;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cin.get(y)) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; y &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;入力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;12
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;1
2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf.html&#34;&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>seekg -- seekgとseekpが何の略称かを記載。</title>
      <link href="http://cpprefjp.github.io/reference/istream/basic_istream/seekg.html"/>
      <id>69150d94ca5e32cdc0b9a5e771f4452fbf10cf0f:reference/istream/basic_istream/seekg.md</id>
      <updated>2015-08-31 16:31:06 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;istream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_istream&#34;&gt;basic_istream::&lt;/span&gt;seekg&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; seekg(pos_type pos);
basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; seekg(off_type off, seekdir dir);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;（非書式化入力関数）ストリームバッファに対し、読み取り位置の移動を指示する。&lt;/p&gt;
&lt;p&gt;非書式化入力関数であるが、後続の&lt;code&gt;gcount()&lt;/code&gt;呼び出しに影響を及ぼさない点が通常と異なる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;seekg&lt;/code&gt;は、&lt;code&gt;seek get&lt;/code&gt;の略称。「読み取り用の位置の移動」を意味する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;（&lt;code&gt;pos_type&lt;/code&gt;を引数に取るもののみ）初めにeofbitを消去する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;与えられた実引数により、以下のいずれかを実行する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rdbuf()-&amp;gt;pubseekpos(pos, ios_base::in)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rdbuf()-&amp;gt;pubseekoff(off, dir, ios_base::in)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;失敗した場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;以下は、&lt;code&gt;off_type&lt;/code&gt;と&lt;code&gt;seekdir&lt;/code&gt;を使用する例。
&lt;code&gt;pos_type&lt;/code&gt;のみを引数に取る多重定義の例は、&lt;a href=&#34;http://cpprefjp.github.io/reference/istream/basic_istream/tellg.html&#34;&gt;&lt;code&gt;tellg&lt;/code&gt;&lt;/a&gt;を参照。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;sstream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;istringstream is(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABC&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; x;

  is &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  is.seekg(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;beg);
  is &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;A
A
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; seekg(pos_type pos) {
  iostate state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; goodbit;
  try {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;clear(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;rdstate() &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;eofbit);
    sentry &lt;span style=&#34;color: #0000FF&#34;&gt;s&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (s) {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;rdbuf()&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;pubseekpos(pos, ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;in) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;) {
        state &lt;span style=&#34;color: #666666&#34;&gt;|=&lt;/span&gt; failbit;
      }
    }
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (...) {
    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;例外を投げずに&lt;/span&gt;badbit&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;を設定する&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;exceptions() &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; badbit) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
    }
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;setstate(state);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
}

basic_istream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; seekg(off_type off, seekdir dir) {
  iostate state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; goodbit;
  try {
    sentry s(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (s) {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;rdbuf()&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;pubseekoff(off, dir, ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;in) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;) {
        state &lt;span style=&#34;color: #666666&#34;&gt;|=&lt;/span&gt; failbit;
      }
    }
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (...) {
    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;例外を投げずに&lt;/span&gt;badbit&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;を設定する&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;exceptions() &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; badbit) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
    }
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;setstate(state);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/istream/basic_istream/tellg.html&#34;&gt;&lt;code&gt;basic_istream::tellg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf::pubseekpos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf::pubseekoff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf::seekpos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf::seekoff&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>seekp -- seekgとseekpが何の略称かを記載。</title>
      <link href="http://cpprefjp.github.io/reference/ostream/basic_ostream/seekp.html"/>
      <id>69150d94ca5e32cdc0b9a5e771f4452fbf10cf0f:reference/ostream/basic_ostream/seekp.md</id>
      <updated>2015-08-31 16:31:06 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_ostream&#34;&gt;basic_ostream::&lt;/span&gt;seekp&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; seekp(pos_type pos);
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; seekp(off_type off, seekdir dir);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ストリームバッファに対し、書き込み位置の移動を指示する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;seekp&lt;/code&gt;は、&lt;code&gt;seek put&lt;/code&gt;の略称。「書き込み用の位置の移動」を意味する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;与えられた実引数により、以下のいずれかを実行する。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rdbuf()-&amp;gt;pubseekpos(pos, ios_base::out)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rdbuf()-&amp;gt;pubseekoff(off, dir, ios_base::out)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;失敗した場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;以下は、&lt;code&gt;off_type&lt;/code&gt;と&lt;code&gt;seekdir&lt;/code&gt;を使用する例。
&lt;code&gt;pos_type&lt;/code&gt;のみを引数に取る多重定義の例は、&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/tellp.html&#34;&gt;&lt;code&gt;tellp&lt;/code&gt;&lt;/a&gt;を参照。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;sstream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ostringstream os;
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;12345&#34;&lt;/span&gt;;
  os.seekp(&lt;span style=&#34;color: #666666&#34;&gt;-2&lt;/span&gt;, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cur);
  os &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ABC&#34;&lt;/span&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; os.str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;123ABC
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; seekp(pos_type pos) {
  iostate state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; goodbit;
  try {
    sentry s(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (s) {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;rdbuf()&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;pubseekpos(pos, ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;out) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;) {
        state &lt;span style=&#34;color: #666666&#34;&gt;|=&lt;/span&gt; failbit;
      }
    }
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (...) {
    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;例外を投げずに&lt;/span&gt;badbit&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;を設定する&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;exceptions() &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; badbit) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
    }
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;setstate(state);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
}

basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; seekp(off_type off, seekdir dir) {
  iostate state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; goodbit;
  try {
    sentry s(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (s) {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;rdbuf()&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;pubseekoff(off, dir, ios_base&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;out) &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;) {
        state &lt;span style=&#34;color: #666666&#34;&gt;|=&lt;/span&gt; failbit;
      }
    }
  } &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (...) {
    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;例外を投げずに&lt;/span&gt;badbit&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;を設定する&lt;/span&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;exceptions() &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; badbit) &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
    }
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt;setstate(state);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/tellp.html&#34;&gt;&lt;code&gt;basic_ostream::tellp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf::pubseekpos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf::pubseekoff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf::seekpos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf::seekoff&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exit -- exit : atexitで登録された関数の呼び出し順を明記</title>
      <link href="http://cpprefjp.github.io/reference/cstdlib/exit.html"/>
      <id>5b316931d260f0ccf91e6cd656c7b5a1e2d0d89c:reference/cstdlib/exit.md</id>
      <updated>2015-08-31 16:12:31 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;exit&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; exit(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; status);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03&lt;/span&gt;
  [[noreturn]] &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; exit(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; status); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;プログラムを終了させる。&lt;/p&gt;
&lt;p&gt;パラメータとして渡された&lt;code&gt;status&lt;/code&gt;は、プログラムの終了コードとして使用される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プログラムを正常終了させたい場合は、&lt;code&gt;0&lt;/code&gt;もしくは&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;&lt;code&gt;EXIT_SUCCESS&lt;/code&gt;&lt;/a&gt;をパラメータ&lt;code&gt;status&lt;/code&gt;に設定する。&lt;/li&gt;
&lt;li&gt;プログラムを異常終了させたい場合は、&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;&lt;code&gt;EXIT_FAILURE&lt;/code&gt;&lt;/a&gt;をパラメータ&lt;code&gt;status&lt;/code&gt;に設定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この関数でプログラムを終了させた場合、生存しているオブジェクトおよびストリームは、自動的に破棄される。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;スレッド生存期間を持つオブジェクトが破棄される。&lt;/li&gt;
&lt;li&gt;静的生存期間を持つオブジェクトが破棄される。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;&lt;code&gt;atexit()&lt;/code&gt;&lt;/a&gt;関数で登録された関数が、逆順に呼び出される。&lt;ul&gt;
&lt;li&gt;登録された関数で例外が送出された場合、&lt;a href=&#34;http://cpprefjp.github.io/exception/terminate.html&#34;&gt;&lt;code&gt;std::terminate()&lt;/code&gt;&lt;/a&gt;関数が呼び出され、プログラムが異常終了する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全てのCストリームが破棄される。&lt;ul&gt;
&lt;li&gt;まだ書き出されていないバッファリングされたデータはフラッシュされる。&lt;/li&gt;
&lt;li&gt;ストリームが閉じられる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdio/tmpfile.md.nolink&#34;&gt;&lt;code&gt;tmpfile()&lt;/code&gt;&lt;/a&gt;関数の呼び出しで作成された一時ファイルが削除される。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ホスト環境に制御が戻される。&lt;ul&gt;
&lt;li&gt;パラメータ&lt;code&gt;status&lt;/code&gt;の値が&lt;code&gt;0&lt;/code&gt;もしくは&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;&lt;code&gt;EXIT_SUCCESS&lt;/code&gt;&lt;/a&gt;であった場合、実装依存の正常終了値が返る。&lt;/li&gt;
&lt;li&gt;パラメータ&lt;code&gt;status&lt;/code&gt;の値が&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;&lt;code&gt;EXIT_FAILURE&lt;/code&gt;&lt;/a&gt;であった場合、実装依存の異常終了値が返る。&lt;/li&gt;
&lt;li&gt;それ以外の場合には、実装依存の値が返る。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;この関数は決して返らない。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;f&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;exit(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// プログラムを正常終了させる&lt;/span&gt;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  f();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;&lt;code&gt;quick_exit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atexit -- atexit : 登録数の「32個以上」は、実装に対する推奨ではなく要求だった。</title>
      <link href="http://cpprefjp.github.io/reference/cstdlib/atexit.html"/>
      <id>58ca3da0847a6b7a3d823ce81466206406bb776d:reference/cstdlib/atexit.md</id>
      <updated>2015-08-31 14:36:36 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;atexit&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; atexit(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;f)(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;));          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C&#34;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; atexit(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;f)(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;)) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C++&#34;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; atexit(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;f)(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;));          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++03&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C++&#34;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; atexit(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;f)(&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;)) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;この関数に指定した関数は、以下の条件のときに呼び出される：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main()&lt;/code&gt;関数が返る。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;&lt;code&gt;std::exit()&lt;/code&gt;&lt;/a&gt;関数が呼び出される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指定された関数は、プログラムの終了処理において、&lt;code&gt;static&lt;/code&gt;変数の破棄が行われる前に呼び出される。&lt;/p&gt;
&lt;p&gt;指定された関数の中で例外が送出された場合、&lt;a href=&#34;http://cpprefjp.github.io/exception/terminate.html&#34;&gt;&lt;code&gt;std::terminate()&lt;/code&gt;&lt;/a&gt;関数が呼び出され、プログラムが異常終了する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;関数の登録に成功した場合は&lt;code&gt;0&lt;/code&gt;が返り、失敗した場合は非&lt;code&gt;0&lt;/code&gt;が返る。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;この関数では、複数の関数を登録できる。&lt;/p&gt;
&lt;p&gt;登録できる上限数は実装定義だが、32個以上は登録できることが実装に要求される。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;on_exit&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;on exit&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;atexit(on_exit);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;on exit
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;exit&lt;/code&gt;関数でプログラムが終了するときに呼ばれる関数を指定する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
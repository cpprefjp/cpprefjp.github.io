<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-05-24T01:23:51.023219</updated>
  <id>267ef4a4-1042-48ca-b7de-f62be1745d59</id>

  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>08336f86b2116d3a028fddf69431ada5a36bab17:lang/cpp20/modules.md</id>
      <updated>2021-05-24T03:39:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 9a6dc20d4..bbb8725e1 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -122,6 +122,8 @@ int baz() { return 30; }
 ```
 * P1103R3[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf]
 
+モジュール宣言はプリプロセッサで生成してはならない。これは、`#if`などによる切り替え、`#include`、`#define`による置換などによるものを含む。
+
 #### モジュール名の詳細
 
 モジュール名は、識別子または識別子をドットで繋いだもの(例えば、`foo`や`std.core`)である。
@@ -183,6 +185,7 @@ export module foo;  // モジュールの宣言(この上の行までがグロ
 * グローバルモジュールフラグメント内の宣言や定義は、後続のモジュールではなくグローバルモジュールに属する。
 * グローバルモジュールフラグメントにはプリプロセッサディレクティブ以外を書くことはできない。
 * グローバルモジュールフラグメント内の宣言は、後続のモジュールに属する宣言から参照されていない場合は、**破棄**(discard)される。
+* グローバルモジュールフラグメントの宣言はプリプロセッサで生成してはならない。
 
 ### エクスポート
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>b568b88143ceaf886d75d10875854fbeaa7b2071:lang/cpp20/modules.md</id>
      <updated>2021-05-24T03:36:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 04dd4e08e..9a6dc20d4 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -156,7 +156,6 @@ module :private;
 
 プライベートモジュールフラグメントを記述する場合、そのモジュールは翻訳単位(必然的にモジュールインターフェースユニット)を1つしか持つことができない。
 
-
 #### グローバルモジュール
 
 C++20では、名前のあるモジュールに属していない宣言はグローバルモジュールに属している。
@@ -169,6 +168,22 @@ C++20では、名前のあるモジュールに属していない宣言はグロ
 
 グローバルモジュールとは、要するに従来通りの、モジュールではないコードのことである。C++20では、`main`関数はグローバルモジュールに属していなければならない。
 
+#### グローバルモジュールフラグメント
+
+モジュール宣言の前にグローバルモジュールの実装を書ける。これをグローバルモジュールフラグメントという。
+
+```cpp
+module;             // グローバルモジュールフラグメントの宣言
+
+#include &amp;#34;lib.h&amp;#34;
+
+export module foo;  // モジュールの宣言(この上の行までがグローバルモジュールフラグメント)
+```
+
+* グローバルモジュールフラグメント内の宣言や定義は、後続のモジュールではなくグローバルモジュールに属する。
+* グローバルモジュールフラグメントにはプリプロセッサディレクティブ以外を書くことはできない。
+* グローバルモジュールフラグメント内の宣言は、後続のモジュールに属する宣言から参照されていない場合は、**破棄**(discard)される。
+
 ### エクスポート
 
 宣言の前に`export`キーワードを付加することでその宣言をエクスポートできる。
@@ -261,6 +276,8 @@ import lib; // libのインポート
 マクロや`using namespace`はエクスポートできないので、インポートによって取り込まれることはない。
 ヘッダーファイル中での `using namespace` はしばしば避けられるが、モジュールでは問題なく使うことができる。
 
+モジュールユニットの中では、インポート宣言はモジュールユニットの本体(グローバルモジュールフラグメントではない部分)の先頭で行わなければならない。
+
 #### 再エクスポート
 
 インポート宣言もエクスポートできる。これを再エクスポートという。
@@ -330,14 +347,9 @@ C++20までは到達可能という用語はなかったが、前者の条件を
 この例外はヘッダーファイルにクラス定義などを書いてインクルードした際にODR違反にならないための規定である。
 モジュールを定義する場合はヘッダーファイルは使わないから、実質的な影響はない。
 
-## 後方互換性のための機能
-
-### グローバルモジュールフラグメント
+複数のモジュールが`#include`で同じ宣言を取り込んだ場合はODR違反となってしまうので、基本的に名前のあるモジュールの本体で`#include`を使用してはならない。
 
-モジュール内ではODRの例外が働かないため、複数のモジュールが`#include`で同じ宣言を取り込んだ場合、ODR違反となってしまう。
-このため、モジュール内では基本的に`#include`を使用することはできない。
-
-しかし、それでは従来のライブラリが利用できないため、モジュール宣言の前にグローバルモジュールの実装を書けるようになっている。これをグローバルモジュールフラグメントという。
+モジュールユニットの中で`#include`を使用したい場合、グローバルモジュールフラグメント内で行えば従来通りにODRの例外となる。
 
 ```cpp
 module;             // グローバルモジュールフラグメントの宣言
@@ -349,13 +361,6 @@ export module foo;  // モジュールの宣言(この上の行までがグロ
 #include &amp;#34;lib.h&amp;#34;    // &amp;#34;lib.h&amp;#34;中の宣言がモジュールfooに含まれてしまう(ODRの例外なし = ODR違反の可能性大)。
 ```
 
-モジュールユニットでの`#include`はグローバルモジュールフラグメントで行うべきである。
-
-グローバルモジュールフラグメントにはプリプロセッサディレクティブのみ記述できる。
-翻訳フェーズ4(=プリプロセッサ実行時)以前の段階でそれ以外の記述がある場合は、エラーとなる。
-
-グローバルモジュールフラグメント内の宣言は、後続のモジュールに属する宣言から参照されていない場合は、**破棄**(discard)される。
-
 ### ヘッダーユニット
 
 一部のヘッダーファイルは、モジュールとしてインポートすることができる。この機能およびヘッダーファイルから生成される翻訳単位をヘッダーユニットという。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>8aab7698e2911eb03078316fbc0198cfaea98b7c:lang/cpp20/modules.md</id>
      <updated>2021-05-24T02:59:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 073b333ed..04dd4e08e 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -239,8 +239,8 @@ export {
 
 C++20では、新たにモジュールリンケージが追加された。
 
+* エクスポートしている名前は外部リンケージを持つ。
 * 名前のあるモジュールに属していてエクスポートしていない名前は、モジュールリンケージを持つ。
-    * エクスポートしている名前は外部リンケージを持つ。
 * モジュールリンケージを持つ名前は、同一モジュール内で参照できる。
 
 ### インポート
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>3e5362a9044ef243a7e723def5ddcda0be51dc8a:lang/cpp20/modules.md</id>
      <updated>2021-05-24T02:53:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index aa8b95f6f..073b333ed 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -253,7 +253,7 @@ import lib; // libのインポート
 
 モジュールインポート宣言は、モジュールのインターフェースユニットをインポートする。
 
-- モジュール実装ユニットはモジュールインターフェースユニットを暗黙的にインポートする。ソースファイルと同名のヘッダーファイルをインクルードすることは多いが、これを自動化したものである。
+- モジュール本体の実装ユニットはプライマリーモジュールインターフェースユニットを暗黙的にインポートする。ソースファイルと同名のヘッダーファイルをインクルードすることは多いが、これを自動化したものである。
 
 インポートされた翻訳単位でエクスポートされている名前は、インポート宣言を記述した翻訳単位において**可視**(visible)となる。
 名前が可視であるとき、かつそのときに限り、名前は名前探索の候補となる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cout -- chore(cout): use archive URL</title>
      <link href="https://cpprefjp.github.io/reference/iostream/cout.html"/>
      <id>2f81026abfb8140518f84a4d581e58cd01798c97:reference/iostream/cout.md</id>
      <updated>2021-05-24T01:16:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iostream/cout.md b/reference/iostream/cout.md
index 5d8b1e527..ed878e357 100644
--- a/reference/iostream/cout.md
+++ b/reference/iostream/cout.md
@@ -109,7 +109,7 @@ Windowsでは`wchar_t`型といえばUTF-16でエンコードされた文字を
 ## 参照
 
 - [使用できるロケール文字列](../../article/platform/locales.md)
-- [標準出力に書き込む | 株式会社きじねこ](http://www.kijineko.co.jp/tech/cppsamples/stdout.html)
+- [標準出力に書き込む | 株式会社きじねこ](https://web.archive.org/web/20191011112040/http://www.kijineko.co.jp/tech/cppsamples/stdout.html)
 - [c++で日本語の処理（ロケール周り） 7/8追記 - nullnull7の日記](http://nullnull.hatenablog.com/entry/20120629/1340935277)
 - [std::locale constructor modifies global locale via &amp;#34;setlocale()&amp;#34; | Microsoft Connect](http://web.archive.org/web/20100328154628/http://connect.microsoft.com:80/VisualStudio/feedback/details/492128/std-locale-constructor-modifies-global-locale-via-setlocale)
 - [ASCII.jp：Windows 10に“まとも”に使えるコンソール「WindowsTerminal」が登場する (2/2)](https://ascii.jp/elem/000/001/868/1868623/2/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
</feed>
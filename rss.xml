<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-01T08:38:56.712459</updated>
  <id>b4c71999-0c34-4c23-b444-932d9067138d</id>

  
    <entry>
      <title>day -- day : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/day.html"/>
      <id>53d901bd4383174d153e80dd0517cc690f9cc8f8:reference/chrono/day.md</id>
      <updated>2020-06-01T17:35:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/day.md b/reference/chrono/day.md
index 388bb88a4..c663ce7b6 100644
--- a/reference/chrono/day.md
+++ b/reference/chrono/day.md
@@ -102,6 +102,13 @@ namespace std::chrono {
 | [`d`](day/op_d.md) | 日リテラル | C++20 |
 
 
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](day/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- day : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/day/formatter.html"/>
      <id>53d901bd4383174d153e80dd0517cc690f9cc8f8:reference/chrono/day/formatter.md</id>
      <updated>2020-06-01T17:35:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/day/formatter.md b/reference/chrono/day/formatter.md
new file mode 100644
index 000000000..645cda1ef
--- /dev/null
+++ b/reference/chrono/day/formatter.md
@@ -0,0 +1,53 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::day, charT&amp;gt;;
+}
+```
+
+## 概要
+`day`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::day{3}) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%d}&amp;#34;, chrono::day{3}) &amp;lt;&amp;lt; std::endl;
+}
+```
+- std::format[link /reference/chrono/format.md]
+
+### 出力
+```
+3
+3
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- durationのformatter : どこにも出力していなかった</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/formatter.html"/>
      <id>88198981b812852181c6b7f94c5302723b44d19d:reference/chrono/duration/formatter.md</id>
      <updated>2020-06-01T17:34:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/formatter.md b/reference/chrono/duration/formatter.md
index 882b3fd19..7b0925dbf 100644
--- a/reference/chrono/duration/formatter.md
+++ b/reference/chrono/duration/formatter.md
@@ -31,16 +31,17 @@ namespace chrono = std::chrono;
 int main()
 {
   // デフォルトフォーマットは、operator&amp;lt;&amp;lt;で出力されるものと同じ
-  std::format(&amp;#34;{}&amp;#34;, chrono::seconds{3});
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::seconds{3}) &amp;lt;&amp;lt; std::endl;
 
   // フォーマット指定子を使用した場合、サフィックスは出力されない
-  std::format(&amp;#34;seconds : {:%S}&amp;#34;, chrono::seconds{3});
-  std::format(&amp;#34;minutes : {:%M}&amp;#34;, chrono::minutes{3});
-  std::format(&amp;#34;24-hours : {:%H}&amp;#34;, chrono::hours{15});
-  std::format(&amp;#34;12-hours : {:%I}&amp;#34;, chrono::hours{15});
-  std::format(&amp;#34;AM/PM : {:%p %I:00}&amp;#34;, chrono::hours{15});
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;seconds : {:%S}&amp;#34;, chrono::seconds{3}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;minutes : {:%M}&amp;#34;, chrono::minutes{3}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;24-hours : {:%H}&amp;#34;, chrono::hours{15}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;12-hours : {:%I}&amp;#34;, chrono::hours{15}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;AM/PM : {:%p %I:00}&amp;#34;, chrono::hours{15}) &amp;lt;&amp;lt; std::endl;
 }
 ```
+- std::format[link /reference/chrono/format.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>duration -- duration : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration.html"/>
      <id>ed526a7b9444a46063caba839454d3e7b165ec15:reference/chrono/duration.md</id>
      <updated>2020-06-01T17:03:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration.md b/reference/chrono/duration.md
index b73513227..fa7579015 100644
--- a/reference/chrono/duration.md
+++ b/reference/chrono/duration.md
@@ -143,11 +143,13 @@ namespace chrono {
 | [`h`](duration/op_h.md)     | 時リテラル         | C++14 |
 
 
-### common_type特殊化
+## 特殊化
 
 | 名前  | 説明               | 対応バージョン |
 |-------|--------------------|----------------|
-| [`common_type`](common_type.md)   | 異なる`duration`間の共通の型を求める | C++11 |
+| [`common_type`](common_type.md) | 異なる`duration`間の共通の型を求める | C++11 |
+| [`formatter`](duration/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化。文字列フォーマットの許可 | C++20 |
+
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- duration : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/formatter.html"/>
      <id>ed526a7b9444a46063caba839454d3e7b165ec15:reference/chrono/duration/formatter.md</id>
      <updated>2020-06-01T17:03:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/formatter.md b/reference/chrono/duration/formatter.md
new file mode 100644
index 000000000..882b3fd19
--- /dev/null
+++ b/reference/chrono/duration/formatter.md
@@ -0,0 +1,66 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class Rep, class Period, class charT&amp;gt;
+  struct formatter&amp;lt;chrono::duration&amp;lt;Rep, Period&amp;gt;, charT&amp;gt;;
+}
+```
+
+## 概要
+`duration`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+
+## 備考
+- `Rep`が浮動小数点数である場合のみ、フォーマットとして浮動小数点数の精度を指定でき、そうでない場合に指定すると[`std::format_error`](/reference/format/format_error.md)例外が送出される
+- `duration`に対するフォーマットは深夜0時からの経過時間として扱われ、一日内の時間として出力される (例として`&amp;#34;%H&amp;#34;`, `&amp;#34;%I&amp;#34;`, `&amp;#34;%p&amp;#34;`など)
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // デフォルトフォーマットは、operator&amp;lt;&amp;lt;で出力されるものと同じ
+  std::format(&amp;#34;{}&amp;#34;, chrono::seconds{3});
+
+  // フォーマット指定子を使用した場合、サフィックスは出力されない
+  std::format(&amp;#34;seconds : {:%S}&amp;#34;, chrono::seconds{3});
+  std::format(&amp;#34;minutes : {:%M}&amp;#34;, chrono::minutes{3});
+  std::format(&amp;#34;24-hours : {:%H}&amp;#34;, chrono::hours{15});
+  std::format(&amp;#34;12-hours : {:%I}&amp;#34;, chrono::hours{15});
+  std::format(&amp;#34;AM/PM : {:%p %I:00}&amp;#34;, chrono::hours{15});
+}
+```
+
+### 出力
+```
+3s
+seconds : 03
+minutes : 03
+24-hours : 15
+12-hours : 03
+AM/PM : PM 03:00
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>duration -- duration : operator&lt;&lt;を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration.html"/>
      <id>59481128b4a5a1346c674ad515d45b9b9ecbbfb0:reference/chrono/duration.md</id>
      <updated>2020-06-01T16:42:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration.md b/reference/chrono/duration.md
index d589d660d..b73513227 100644
--- a/reference/chrono/duration.md
+++ b/reference/chrono/duration.md
@@ -127,7 +127,7 @@ namespace chrono {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator&amp;lt;&amp;lt;`](duration/op_ostream.md.nolink) | ストリームへの出力 | C++20 |
+| [`operator&amp;lt;&amp;lt;`](duration/op_ostream.md) | ストリームへの出力 | C++20 |
 | [`from_stream`](duration/from_stream.md.nolink) | フォーマットを指定してストリームから入力 | C++20 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- duration : operator&lt;&lt;を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/duration/op_ostream.html"/>
      <id>59481128b4a5a1346c674ad515d45b9b9ecbbfb0:reference/chrono/duration/op_ostream.md</id>
      <updated>2020-06-01T16:42:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/duration/op_ostream.md b/reference/chrono/duration/op_ostream.md
new file mode 100644
index 000000000..c7a7792d5
--- /dev/null
+++ b/reference/chrono/duration/op_ostream.md
@@ -0,0 +1,108 @@
+# operator&amp;lt;&amp;lt;
+* chrono[meta header]
+* std::chrono[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::chrono {
+  template &amp;lt;class charT, class traits, class Rep, class Period&amp;gt;
+  basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os,
+               const duration&amp;lt;Rep, Period&amp;gt;&amp;amp; d);  // (1) C++20
+}
+```
+
+## 概要
+`duration`オブジェクトを出力ストリームに出力する。
+
+
+## 適格要件
+- `Rep`は、整数変換ランクが`short`以上の整数型か、浮動小数点数型であること
+- `charT`は`char`か`wchar_t`であること
+
+
+## 効果
+- `charT`が`char`の場合は[`to_string()`](/reference/string/to_string.md)、`wchar_t`の場合は[`to_wstring()`](/reference/string/to_wstring.md)を使用して[`d.count()`](count.md)から[`basic_string`](/reference/string/basic_string.md)`&amp;lt;charT, traits&amp;gt;`を構築し、以下で述べるサフィックスを追加して`os`に出力する：
+
+| `Period::type`単位型 | サフィックス |
+|----------------------|--------------|
+| [`atto`](/reference/ratio/si_prefix.md)       | `&amp;#34;as&amp;#34;` |
+| [`femto`](/reference/ratio/si_prefix.md)      | `&amp;#34;fs&amp;#34;` |
+| [`pico`](/reference/ratio/si_prefix.md)       | `&amp;#34;ps&amp;#34;` |
+| [`nano`](/reference/ratio/si_prefix.md)       | `&amp;#34;ns&amp;#34;` |
+| [`micro`](/reference/ratio/si_prefix.md)      | `&amp;#34;µs&amp;#34;` (`&amp;#34;\u00b5\u0073&amp;#34;`) |
+| [`milli`](/reference/ratio/si_prefix.md)      | `&amp;#34;ms&amp;#34;` |
+| [`centi`](/reference/ratio/si_prefix.md)      | `&amp;#34;cs&amp;#34;` |
+| [`deci`](/reference/ratio/si_prefix.md)       | `&amp;#34;ds&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;1&amp;gt;`     | `&amp;#34;s&amp;#34;` |
+| [`deca`](/reference/ratio/si_prefix.md)       | `&amp;#34;das&amp;#34;` |
+| [`hecto`](/reference/ratio/si_prefix.md)      | `&amp;#34;hs&amp;#34;` |
+| [`kilo`](/reference/ratio/si_prefix.md)       | `&amp;#34;ks&amp;#34;` |
+| [`mega`](/reference/ratio/si_prefix.md)       | `&amp;#34;Ms&amp;#34;` |
+| [`giga`](/reference/ratio/si_prefix.md)       | `&amp;#34;Gs&amp;#34;` |
+| [`tera`](/reference/ratio/si_prefix.md)       | `&amp;#34;Ts&amp;#34;` |
+| [`peta`](/reference/ratio/si_prefix.md)       | `&amp;#34;Ps&amp;#34;` |
+| [`exa`](/reference/ratio/si_prefix.md)        | `&amp;#34;Es&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;60&amp;gt;`    | `&amp;#34;min&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;3600&amp;gt;`  | `&amp;#34;h&amp;#34;` |
+| [`ratio`](/reference/ratio/ratio.md)`&amp;lt;86400&amp;gt;` | `&amp;#34;d&amp;#34;` |
+
+値`num`を`Period::type::num`、値`den`を`Period::type::den`をゼロ埋めなしの10進数で文字列化したものであるとして、
+
+- `Period::type::den == 1`である場合、サフィックス&amp;#34;[num]s&amp;#34;
+- いずれにもあてはまらない場合、サフィックスは`&amp;#34;[num/den]s&amp;#34;`
+
+マイクロ秒として`&amp;#34;µs&amp;#34;`が表現できないエンコーディングの場合、代わりに`&amp;#34;us&amp;#34;`が使用される。
+
+
+## 戻り値
+```cpp
+return os;
+```
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;nano sec : &amp;#34; &amp;lt;&amp;lt; chrono::nanoseconds{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;milli sec : &amp;#34; &amp;lt;&amp;lt; chrono::milliseconds{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;seconds : &amp;#34; &amp;lt;&amp;lt; chrono::seconds{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;minutes : &amp;#34; &amp;lt;&amp;lt; chrono::minutes{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;hours : &amp;#34; &amp;lt;&amp;lt; chrono::hours{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;days : &amp;#34; &amp;lt;&amp;lt; chrono::days{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;weeks : &amp;#34; &amp;lt;&amp;lt; chrono::weeks{3} &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;1/3 seconds : &amp;#34; &amp;lt;&amp;lt; chrono::duration&amp;lt;int, std::ratio&amp;lt;1, 3&amp;gt;&amp;gt;{3} &amp;lt;&amp;lt; std::endl;
+
+  using float_seconds = chrono::duration&amp;lt;float, std::ratio&amp;lt;1&amp;gt;&amp;gt;;
+  std::cout &amp;lt;&amp;lt; &amp;#34;float sec : &amp;#34; &amp;lt;&amp;lt; float_seconds{1.23f} &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+nano sec : 3ns
+milli sec : 3ms
+seconds : 3s
+minutes : 3min
+hours : 3h
+days : 3d
+weeks : 3[604800]s
+1/3 seconds : 3[1/3]s
+float sec : 1.23s
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>u8path -- u8path : fix typo</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/u8path.html"/>
      <id>fe9573a0682342437a243dbe20db2783af085f55:reference/filesystem/u8path.md</id>
      <updated>2020-06-01T15:39:26+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/u8path.md b/reference/filesystem/u8path.md
index c4c5e84a7..7f1b63ede 100644
--- a/reference/filesystem/u8path.md
+++ b/reference/filesystem/u8path.md
@@ -22,8 +22,8 @@ namespace std::filesystem {
 ## 概要
 UTF-8エンコードされた文字列からパスオブジェクトを構築する。
 
-- (1) : UTF-8エンコードされた`char`(C++20移行は`char8_t`も)配列、[`std::string`](/reference/string/basic_string.md)、[`std::string_view`](/reference/string_view/basic_string_view.md)オブジェクトからパスオブジェクトを構築する
-- (2) : UTF-8エンコードされた`char`(C++20移行は`char8_t`も)要素の範囲から、パスオブジェクトを構築する
+- (1) : UTF-8エンコードされた`char`(C++20以降は`char8_t`も)配列、[`std::string`](/reference/string/basic_string.md)、[`std::string_view`](/reference/string_view/basic_string_view.md)オブジェクトからパスオブジェクトを構築する
+- (2) : UTF-8エンコードされた`char`(C++20以降は`char8_t`も)要素の範囲から、パスオブジェクトを構築する
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
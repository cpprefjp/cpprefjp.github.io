<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-01-23T08:45:37.910171</updated>
  <id>7bad2237-5289-43e7-9c9a-823709cc052c</id>

  
    <entry>
      <title>const_iterator_t -- LWG Issue 3946対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/ranges/const_iterator_t.html"/>
      <id>cfedf6d21d4ee52c2aa645e7fb9f75b3e8c75ba7:reference/ranges/const_iterator_t.md</id>
      <updated>2024-01-23T17:42:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/const_iterator_t.md b/reference/ranges/const_iterator_t.md
index d2ecc3fd7..183bca235 100644
--- a/reference/ranges/const_iterator_t.md
+++ b/reference/ranges/const_iterator_t.md
@@ -7,12 +7,12 @@
 ```cpp
 namespace std::ranges {
   template&amp;lt;range R&amp;gt;
-  using const_iterator_t = const_iterator&amp;lt;iterator_t&amp;lt;R&amp;gt;&amp;gt;;
+  using const_iterator_t = decltype(ranges::cbegin(declval&amp;lt;R&amp;amp;&amp;gt;()));
 }
 ```
 * range[link range.md]
-* const_iterator[link /reference/iterator/const_iterator.md]
-* iterator_t[link iterator_t.md]
+* cbegin[link cbegin.md]
+* declval[link /reference/utility/declval.md]
 
 ## 概要
 
@@ -47,3 +47,4 @@ int main() {
 ## 参照
 
 - [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
+- [LWG Issue 3946. The definition of `const_iterator_t` should be reworked](https://cplusplus.github.io/LWG/issue3946)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const_sentinel_t -- LWG Issue 3946対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/ranges/const_sentinel_t.html"/>
      <id>cfedf6d21d4ee52c2aa645e7fb9f75b3e8c75ba7:reference/ranges/const_sentinel_t.md</id>
      <updated>2024-01-23T17:42:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/const_sentinel_t.md b/reference/ranges/const_sentinel_t.md
index 086fe5e1b..e0ef6c9c8 100644
--- a/reference/ranges/const_sentinel_t.md
+++ b/reference/ranges/const_sentinel_t.md
@@ -7,12 +7,12 @@
 ```cpp
 namespace std::ranges {
   template&amp;lt;range R&amp;gt;
-  using const_sentinel_t = const_sentinel&amp;lt;sentinel_t&amp;lt;R&amp;gt;&amp;gt;;
+  using const_sentinel_t = decltype(ranges::cend(declval&amp;lt;R&amp;amp;&amp;gt;()));
 }
 ```
 * range[link range.md]
-* const_sentinel[link /reference/iterator/const_sentinel.md]
-* sentinel_t[link sentinel_t.md]
+* cend[link cend.md]
+* declval[link /reference/utility/declval.md]
 
 ## 概要
 
@@ -51,3 +51,4 @@ int main() {
 ## 参照
 
 - [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
+- [LWG Issue 3946. The definition of `const_iterator_t` should be reworked](https://cplusplus.github.io/LWG/issue3946)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- LWG Issue 3897対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/memory/inout_ptr_t/op_destructor.html"/>
      <id>ce48adc1e50a85ee72cf65a5846f4717e575c4d2:reference/memory/inout_ptr_t/op_destructor.md</id>
      <updated>2024-01-23T17:29:18+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/inout_ptr_t/op_destructor.md b/reference/memory/inout_ptr_t/op_destructor.md
index 80c1d2c3d..e7428512a 100644
--- a/reference/memory/inout_ptr_t/op_destructor.md
+++ b/reference/memory/inout_ptr_t/op_destructor.md
@@ -34,10 +34,8 @@
 - [`is_pointer_v`](/reference/type_traits/is_pointer.md)`&amp;lt;Smart&amp;gt;`が`true`ならば、
 
     ```cpp
-    if (p) {
-      apply([&amp;amp;](auto&amp;amp;&amp;amp;... args) {
-        s = Smart(static_cast&amp;lt;SP&amp;gt;(p), std::forward&amp;lt;Args&amp;gt;(args)...); }, std::move(a));
-    }
+    apply([&amp;amp;](auto&amp;amp;&amp;amp;... args) {
+      s = Smart(static_cast&amp;lt;SP&amp;gt;(p), std::forward&amp;lt;Args&amp;gt;(args)...); }, std::move(a));
     ```
 
 - 式 `s.reset(static_cast&amp;lt;SP&amp;gt;(p),` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...)` が適格ならば、
@@ -85,3 +83,4 @@
 
 ## 参照
 - [P1132R8 out_ptr - a scalable output pointer abstraction](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1132r8.html)
+- [LWG Issue 3897. `inout_ptr` will not update raw pointer to 0](https://cplusplus.github.io/LWG/issue3897)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>common_iterator -- LWG Issue 3749対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator.html"/>
      <id>2ed0e77dd4664cc1371fbb07d3ac4bd8bc4d8599:reference/iterator/common_iterator.md</id>
      <updated>2024-01-23T17:15:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator.md b/reference/iterator/common_iterator.md
index 22eefeb3f..9b94324ea 100644
--- a/reference/iterator/common_iterator.md
+++ b/reference/iterator/common_iterator.md
@@ -25,7 +25,7 @@ namespace std {
   template&amp;lt;input_iterator I, class S&amp;gt;
   struct iterator_traits&amp;lt;common_iterator&amp;lt;I, S&amp;gt;&amp;gt; {
     using iterator_concept = /*see below*/;
-    using iterator_category = /*see below*/;
+    using iterator_category = /*see below*/;  // 定義されない場合がある
     using value_type = iter_value_t&amp;lt;I&amp;gt;;
     using difference_type = iter_difference_t&amp;lt;I&amp;gt;;
     using pointer = /*see below*/;
@@ -80,6 +80,7 @@ namespace std {
 | `pointer` | `void` &amp;lt;br/&amp;gt; ただし、[`operator-&amp;gt;`](common_iterator/op_arrow.md)が利用可能である場合はその戻り値型 | C++20 |
 | `reference` | [`iter_reference_t`](/reference/iterator/iter_reference_t.md)`&amp;lt;I&amp;gt;`  | C++20 |
 
+- `iterator_category`は`iter_difference_t&amp;lt;I&amp;gt;`が組み込みの整数型の場合にのみ定義される（[*integer-class*](/reference/iterator/is_integer_like.md)型の場合には定義されない）
 
 ## 例
 
@@ -147,3 +148,4 @@ int main() {
 ## 参照
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
 - [Hidden Friends - yohhoyの日記](https://yohhoy.hatenadiary.jp/entry/20190531/p1)
+- [LWG Issue 3749. `common_iterator` should handle integer-class difference types](https://cplusplus.github.io/LWG/issue3749)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>any_cast -- LWG Issue 3305適用（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/any/any_cast.html"/>
      <id>c44afe1f24b02b373dc591f64569073f61302882:reference/any/any_cast.md</id>
      <updated>2024-01-23T17:09:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/any/any_cast.md b/reference/any/any_cast.md
index 1ed3b6b12..74593c4b4 100644
--- a/reference/any/any_cast.md
+++ b/reference/any/any_cast.md
@@ -31,13 +31,14 @@ namespace std {
 - (4), (5) : `std::any`オブジェクトが保持している型を指定して、その値を指すポインタを取得する。型の指定を間違った場合はヌルポインタが返る
 
 
-## 要件
+## 適格要件
 `using U =` [`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;T&amp;gt;&amp;gt;;`であるとして、
 
 - (1) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, const U&amp;amp;&amp;gt; == true`であること。そうでない場合、プログラムは不適格となる
 - (2) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, U&amp;amp;&amp;gt; == true`であること。そうでない場合、プログラムは不適格となる
 - (3) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, U&amp;gt; == true`であること。そうでない場合、プログラムは不適格となる
-
+- (4)(5) : [`is_void_v`](/reference/type_traits/is_void.md)`&amp;lt;T&amp;gt; == false`であること
+    - C++26から
 
 ## 効果
 `using U =` [`remove_cv_t`](/reference/type_traits/remove_cv.md)`&amp;lt;`[`remove_reference_t`](/reference/type_traits/remove_reference.md)`&amp;lt;T&amp;gt;&amp;gt;;`であるとして、
@@ -148,3 +149,7 @@ int main()
 - [Clang](/implementation.md#clang): 4.0.1
 - [GCC](/implementation.md#gcc): 7.3
 - [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+
+- [LWG Issue 3305. `any_cast&amp;lt;void&amp;gt;`](https://cplusplus.github.io/LWG/issue3305)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++26 -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/lang/cpp26.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:lang/cpp26.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++26&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++26とは、2026年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2cと呼ばれることがある。「(2020年代の3つ目のバージョンが) 202c年にリリースされる」という伏せ字として「c」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/static_storage_for_braced_initializers.md.nolink&#34;&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;の配列を静的ストレージに配置する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::vector v = {1, 2, 3};&lt;/code&gt;のような初期化で初期化子リストを静的ストレージに配置することで無駄なコピーをなくす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/nice_placeholder_with_no_name.md.nolink&#34;&gt;宣言のみで使用しない変数の名前として&lt;code&gt;_&lt;/code&gt;をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数名&lt;code&gt;_&lt;/code&gt;は暗黙で&lt;code&gt;[[maybe_unused]]&lt;/code&gt;が指定される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/remove_deprecated_arithmetic_conversion_on_enumerations.md.nolink&#34;&gt;非推奨となっていた列挙値から算術型への暗黙変換を削除&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++20から非推奨となっていた列挙値への算術演算で算術型に暗黙変換される仕様を削除&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/making_non-encodable_string_literals_ill-formed.md.nolink&#34;&gt;文字列リテラルの文字エンコーディング失敗を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルのエンコーディング時に文字表現が失われる場合にコンパイルエラーにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/unevaluated_strings.md.nolink&#34;&gt;コンパイル時にのみ使用される文字列の扱いを明確化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などで使用されるコンパイル時の文字列について、文字コードの指定を禁止し、実行時エンコーディングが行われないことを規定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/on_the_ignorability_of_standard_attributes.md.nolink&#34;&gt;属性の無視性を見直し&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構文として適格な属性のみを無視できるようにし、そうでない属性の使用を&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;とする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;テンプレート&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/pack_indexing.md.nolink&#34;&gt;パラメータパックへのインデックスアクセスを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;可変引数テンプレートのパラメータパックに添字アクセスできるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/constexpr_cast_from_voidptr.md.nolink&#34;&gt;定数式での&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型消去のために&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/user-generated_static_assert_messages.md.nolink&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt;の診断メッセージにユーザーが生成した文字列の指定を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;な&lt;code&gt;S.size()&lt;/code&gt;と&lt;code&gt;S.data()&lt;/code&gt;メンバ関数をもつオブジェクトをコンパイル時文字列として指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ソースコード&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/add_atsign_dollar_graveaccent_to_the_basic_character_set.md.nolink&#34;&gt;基本文字集合に@、$、`を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C言語との互換性のためにこれらの文字を基本文字集合に追加&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文字列エンコーディングを識別するライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/text_encoding.md.nolink&#34;&gt;&amp;lt;text_encoding&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;並行処理におけるデータの参照・更新を行うRCU (Read Copy Update) のライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/rcu.md.nolink&#34;&gt;&amp;lt;rcu&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;並行処理において参照中のデータが更新されないよう保護するハザードポインタのライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/hazard_pointer.md.nolink&#34;&gt;&amp;lt;hazard_pointer&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;デバッグサポートのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/debugging.md.nolink&#34;&gt;&amp;lt;debugging&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;線形代数ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/linalg.md.nolink&#34;&gt;&amp;lt;linalg&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;std::mdspan&lt;/a&gt;&lt;/code&gt;のサブ配列版として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/submdspan.md.nolink&#34;&gt;std::submdspan&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span/span.html&#34;&gt;std::span&lt;/a&gt;&lt;/code&gt;に、以下を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/initializer_list/initializer_list.html&#34;&gt;std::initializer_list&lt;/a&gt;&lt;/code&gt;をとるコンストラクタ&lt;/li&gt;
&lt;li&gt;インデックスアクセスのための&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span/span/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;メンバ関数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;連想コンテナの以下のメンバ関数に、一時オブジェクトが生成されるコストを抑える拡張を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/op_at.html&#34;&gt;operator[]&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/try_emplace.html&#34;&gt;try_emplace()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/insert_or_assign.html&#34;&gt;insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_at.html&#34;&gt;operator[]&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/try_emplace.html&#34;&gt;try_emplace()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert_or_assign.html&#34;&gt;insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set.html&#34;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html&#34;&gt;insert()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下のアルゴリズムを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/stable_sort.html&#34;&gt;std::stable_sort()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_stable_sort.html&#34;&gt;std::ranges::stable_sort()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/stable_partition.html&#34;&gt;std::stable_partition()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_stable_partition.html&#34;&gt;std::ranges::stable_partition()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/inplace_merge.html&#34;&gt;std::inplace_merge()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_inplace_merge.html&#34;&gt;std::ranges::stable_partition()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rangeアルゴリズムが完全型を要求しないようにするため、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/projected.html&#34;&gt;std::projected&lt;/a&gt;&lt;/code&gt;の制約を緩和&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有権を保持しない&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function_ref.html&#34;&gt;std::function_ref&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/move_only_function.html&#34;&gt;std::move_only_function&lt;/a&gt;&lt;/code&gt;のコピー可能版として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/copyable_function.html&#34;&gt;std::copyable_function&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_back.md.nolink&#34;&gt;std::bind_back()&lt;/a&gt;&lt;/code&gt;に、非型テンプレート引数として関数を指定するオーバーロードを追加&lt;ul&gt;
&lt;li&gt;関連して、非型テンプレート引数の関数オブジェクトを反転させられるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.html&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;に非型テンプレート引数版のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;の変換結果&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/to_chars_result.html&#34;&gt;std::to_chars_result&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/from_chars_result.html&#34;&gt;std::from_chars_result&lt;/a&gt;&lt;/code&gt;に、変換が正しく完了したかを判定する&lt;code&gt;operator bool&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/to_string.html&#34;&gt;std::to_string()&lt;/a&gt;&lt;/code&gt;の仕様が&lt;code&gt;std::sprintf()&lt;/code&gt;で説明されていたが、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;で定義するよう仕様を変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/sstream/basic_istringstream.html&#34;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/sstream/basic_ostringstream.html&#34;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;のコンストラクタおよび&lt;code&gt;str()&lt;/code&gt;メンバ関数に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;を受け取るオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;に、以下の改善を導入&lt;ul&gt;
&lt;li&gt;ポインタ出力のサポートを追加&lt;/li&gt;
&lt;li&gt;幅と精度を動的に指定した場合でも型の検証がコンパイル時に行われるよう仕様を見直し&lt;/li&gt;
&lt;li&gt;コンパイル時の書式文字列だけでなく、実行時の書式文字列を渡せるよう仕様修正&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファイル&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ファイルのネイティブハンドルを取得できるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_filebuf.html&#34;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_ifstream.html&#34;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_ofstream.html&#34;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_fstream.html&#34;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt;クラスに、以下のメンバを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;native_handle_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;native_handle()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行・並列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;オブジェクトに対する2つの値の最大値・最小値を取得する関数として、メンバ関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/fetch_max.md.nolink&#34;&gt;fetch_max()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/fetch_min.md.nolink&#34;&gt;fetch_min()&lt;/a&gt;&lt;/code&gt;、非メンバ関数として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_max.md.nolink&#34;&gt;std::atomic_fetch_max&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_max_explicit.md.nolink&#34;&gt;std::atomic_fetch_max_explicit&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_min.md.nolink&#34;&gt;std::atomic_fetch_min&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_min_explicit.md.nolink&#34;&gt;std::atomic_fetch_min_explicit&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;を非順序連想コンテナのキーとして使用できるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に所有権ベースのハッシュ値を取得する関数オブジェクト&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_hash.md.nolink&#34;&gt;std::owner_hash&lt;/a&gt;&lt;/code&gt;、および所有権ベースの等値比較を行う関数オブジェクト&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_equal.md.nolink&#34;&gt;std::owner_equal&lt;/a&gt;&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;関連して、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;クラスのメンバ関数として、&lt;code&gt;owner_hash()&lt;/code&gt;と&lt;code&gt;owner_equal()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;日付・時間&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下のクラスに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;std::hash&lt;/a&gt;&lt;/code&gt;のサポートを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/day.html&#34;&gt;std::chrono::day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month.html&#34;&gt;std::chrono::month&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year.html&#34;&gt;std::chrono::year&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday.html&#34;&gt;std::chrono::weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_indexed.html&#34;&gt;std::chrono::weekday_indexed&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_last.html&#34;&gt;std::chrono::weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_day.html&#34;&gt;std::chrono::month_day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_day_last.html&#34;&gt;std::chrono::month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_weekday.html&#34;&gt;std::chrono::month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_weekday_last.html&#34;&gt;std::chrono::month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month.html&#34;&gt;std::chrono::year_month&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_day.html&#34;&gt;std::chrono::year_month_day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_day_last.html&#34;&gt;std::chrono::year_month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_weekday.html&#34;&gt;std::chrono::year_month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_weekday_last.html&#34;&gt;std::chrono::year_month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/zoned_time.html&#34;&gt;std::chrono::zoned_time&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/leap_second.html&#34;&gt;std::chrono::leap_second&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数値&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric.html&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/a&gt;&lt;/code&gt;に、飽和演算 (Saturation Arithmetic) として、型の表現可能な範囲で演算を行う以下の関数を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/add_sat.md.nolink&#34;&gt;std::add_sat()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/sub_sat.md.nolink&#34;&gt;std::sub_sat()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/mul_sat.md.nolink&#34;&gt;std::mul_sat()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/div_sat.md.nolink&#34;&gt;std::div_sat()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/saturation_cast.md.nolink&#34;&gt;std::saturation_cast()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の関数を、&lt;code&gt;constexpr&lt;/code&gt;に対応 (特殊関数と、グローバルの丸めモードに依存する丸め関数以外の全て)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cos.html&#34;&gt;std::cos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sin.html&#34;&gt;std::sin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tan.html&#34;&gt;std::tan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cosh.html&#34;&gt;std::cosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sinh.html&#34;&gt;std::sinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tanh.html&#34;&gt;std::tanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/acos.html&#34;&gt;std::acos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/asin.html&#34;&gt;std::asin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan.html&#34;&gt;std::atan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan2.html&#34;&gt;std::atan2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/acosh.html&#34;&gt;std::acosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/asinh.html&#34;&gt;std::asinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atanh.html&#34;&gt;std::atanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/exp.html&#34;&gt;std::exp()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/exp2.html&#34;&gt;std::exp2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/expm1.html&#34;&gt;std::expm1()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log.html&#34;&gt;std::log()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log10.html&#34;&gt;std::log10()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log1p.html&#34;&gt;std::log1p()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log2.html&#34;&gt;std::log2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/pow.html&#34;&gt;std::pow()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sqrt.html&#34;&gt;std::sqrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cbrt.html&#34;&gt;std::cbrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/hypot.html&#34;&gt;std::hypot()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/erf.html&#34;&gt;std::erf()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/erfc.html&#34;&gt;std::erfc()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/lgamma.html&#34;&gt;std::lgamma()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tgamma.html&#34;&gt;std::tgamma()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の関数を、&lt;code&gt;constexpr&lt;/code&gt;に対応 (すべて)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/abs.html&#34;&gt;std::abs()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/arg.html&#34;&gt;std::arg()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/proj.html&#34;&gt;std::proj()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/polar.html&#34;&gt;std::polar()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/cos.html&#34;&gt;std::cos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sin.html&#34;&gt;std::sin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/tan.html&#34;&gt;std::tan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/cosh.html&#34;&gt;std::cosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sinh.html&#34;&gt;std::sinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/tanh.html&#34;&gt;std::tanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/acos.html&#34;&gt;std::acos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/asin.html&#34;&gt;std::asin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/atan.html&#34;&gt;std::atan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/acosh.html&#34;&gt;std::acosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/asinh.html&#34;&gt;std::asinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/atanh.html&#34;&gt;std::atanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/exp.html&#34;&gt;std::exp()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/log.html&#34;&gt;std::log()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/log10.html&#34;&gt;std::log10()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/pow.html&#34;&gt;std::pow()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sqrt.html&#34;&gt;std::sqrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/norm.html&#34;&gt;std::norm()&lt;/a&gt;&lt;/code&gt; (算術型オーバーロード)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/conj.html&#34;&gt;std::conj()&lt;/a&gt;&lt;/code&gt; (算術型オーバーロード)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/imag_free.html&#34;&gt;std::imag()&lt;/a&gt;&lt;/code&gt; (算術型オーバーロード)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/real_free.html&#34;&gt;std::real()&lt;/a&gt;&lt;/code&gt; (算術型オーバーロード)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex.html&#34;&gt;std::complex&lt;/a&gt;&lt;/code&gt;を構造化束縛や、将来のパターンマッチで使用できるようタプルインタフェースの特殊化を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random.html&#34;&gt;&amp;lt;random&amp;gt;&lt;/a&gt;&lt;/code&gt;の範囲&lt;code&gt;[0, 1)&lt;/code&gt;の乱数を生成する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/random/generate_canonical.html&#34;&gt;std::generate_canonical()&lt;/a&gt;&lt;/code&gt;を、望ましい統計的性質を保証するようアルゴリズムと制約を変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;クラスに、メンバ関数版の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant/visit.md.nolink&#34;&gt;visit()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;に、新たなSI接頭辞として、以下を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;ronna&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;27&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;ronto&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;−27&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;quetta&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;30&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;quecto&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;−30&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デバッグ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cassert/assert.html&#34;&gt;assert&lt;/a&gt;&lt;/code&gt;マクロの引数としてカンマを含む式を指定できるよう、可変引数化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;共用体のどのメンバがアクティブかを判定するための関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_within_lifetime.md.nolink&#34;&gt;std::is_within_lifetime()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bitset/bitset.html&#34;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;を受け取るコンストラクタを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20から非推奨となっていた、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;::&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/reserve.html&#34;&gt;reserve()&lt;/a&gt;&lt;/code&gt;のパラメータなしのオーバーロードを削除&lt;/li&gt;
&lt;li&gt;C++23から非推奨となっていた、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;のメンバ型&lt;code&gt;is_always_equal&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;C++17から非推奨となっていたUnicode変換ライブラリ&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/codecvt.html&#34;&gt;&amp;lt;codecvt&amp;gt;&lt;/a&gt;&lt;/code&gt;を削除&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acos -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/acos.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/acos.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/acos.md b/reference/cmath/acos.md
index 6ae027aec..a1a6723d7 100644
--- a/reference/cmath/acos.md
+++ b/reference/cmath/acos.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float acos(float x);              // (1) C++03からC++20まで
-  double acos(double x);            // (2) C++03からC++20まで
-  long double acos(long double x);  // (3) C++03からC++20まで
+  float acos(float x);             // (1) C++03からC++20まで
+  double acos(double x);           // (2) C++03からC++20まで
+  long double acos(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    acos(floating-point-type x);    // (4) C++23
-
-  double acos(Integral x);          // (5) C++11
-
-  float acosf(float x);             // (6) C++17
-  long double acosl(long double x); // (7) C++17
+    acos(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    acos(floating-point-type x);   // (4) C++26
+
+  double
+    acos(Integral x);              // (5) C++11
+  constexpr double
+    acos(Integral x);              // (5) C++26
+
+  float
+    acosf(float x);                // (6) C++17
+  constexpr float
+    acosf(float x);                // (6) C++26
+
+  long double
+    acosl(long double x);          // (7) C++17
+  constexpr long double
+    acosl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -92,7 +104,7 @@ acos(-1.0) = 3.141593
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -111,3 +123,5 @@ $$ \mathrm{Arccos}~x = \frac{\pi}{2} - \mathrm{Arcsin}~x \quad \mathrm{for} \; |
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acosh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/acosh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/acosh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/acosh.md b/reference/cmath/acosh.md
index 8e072d9bf..580f40969 100644
--- a/reference/cmath/acosh.md
+++ b/reference/cmath/acosh.md
@@ -7,17 +7,29 @@
 
 ```cpp
 namespace std {
-  float acosh(float x);              // (1) C++11からC++20まで
-  double acosh(double x);            // (2) C++11からC++20まで
-  long double acosh(long double x);  // (3) C++11からC++20まで
+  float acosh(float x);             // (1) C++11からC++20まで
+  double acosh(double x);           // (2) C++11からC++20まで
+  long double acosh(long double x); // (3) C++11からC++20まで
 
   floating-point-type
-    acosh(floating-point-type x);    // (4) C++23
-
-  double acosh(Integral x);          // (5) C++11
-
-  float acoshf(float x);             // (6) C++17
-  long double acoshl(long double x); // (7) C++17
+    acosh(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    acosh(floating-point-type x);   // (4) C++26
+
+  double
+    acosh(Integral x);              // (5) C++11
+  constexpr double
+    acosh(Integral x);              // (5) C++26
+
+  float
+    acoshf(float x);                // (6) C++17
+  constexpr float
+    acoshf(float x);                // (6) C++26
+
+  long double
+    acoshl(long double x);          // (7) C++17
+  constexpr long double
+    acoshl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -83,7 +95,7 @@ acosh(∞)  = inf
 - [GCC](/implementation.md#gcc): 4.3.4, 4.4.5, 4.5.2, 4.6.1, 4.7.0
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -96,3 +108,5 @@ $$ \mathrm{arcosh}~x = \log_e \left(x + \sqrt{x^2-1}\right) \quad \mathrm{for} \
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>asin -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/asin.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/asin.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/asin.md b/reference/cmath/asin.md
index 132bd53a1..dc4d99d8e 100644
--- a/reference/cmath/asin.md
+++ b/reference/cmath/asin.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float asin(float x);                // (1) C++03からC++20まで
-  double asin(double x);              // (2) C++03からC++20まで
-  long double asin(long double x);    // (3) C++03からC++20まで
+  float asin(float x);             // (1) C++03からC++20まで
+  double asin(double x);           // (2) C++03からC++20まで
+  long double asin(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    asin(floating-point-type x);      // (4) C++23
-
-  double asin(Integral x);            // (5) C++11
-
-  float asinf(float x);               // (6) C++17
-  long double asinl(long double x);   // (7) C++17
+    asin(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    asin(floating-point-type x);   // (4) C++26
+
+  double
+    asin(Integral x);              // (5) C++11
+  constexpr double
+    asin(Integral x);              // (5) C++26
+
+  float
+    asinf(float x);                // (6) C++17
+  constexpr float
+    asinf(float x);                // (6) C++26
+
+  long double
+    asinl(long double x);          // (7) C++17
+  constexpr long double
+    asinl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -88,7 +100,7 @@ asin(1.0)   = 1.570796
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -107,3 +119,5 @@ $$ \mathrm{Arcsin}~x = \frac{\pi}{2} - \mathrm{Arccos}~x = \frac{\pi}{2} - \math
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>asinh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/asinh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/asinh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/asinh.md b/reference/cmath/asinh.md
index c18b0fa46..2ce92c89d 100644
--- a/reference/cmath/asinh.md
+++ b/reference/cmath/asinh.md
@@ -7,17 +7,29 @@
 
 ```cpp
 namespace std {
-  float asinh(float x);              // (1) C++11からC++20まで
-  double asinh(double x);            // (2) C++11からC++20まで
-  long double asinh(long double x);  // (3) C++11からC++20まで
+  float asinh(float x);             // (1) C++11からC++20まで
+  double asinh(double x);           // (2) C++11からC++20まで
+  long double asinh(long double x); // (3) C++11からC++20まで
 
   floating-point-type
-    asinh(floating-point-type x);    // (4) C++23
-
-  double asinh(Integral x);          // (5) C++11
-
-  float asinhf(float x);             // (6) C++17
-  long double asinhl(long double x); // (7) C++17
+    asinh(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    asinh(floating-point-type x);   // (4) C++26
+
+  double
+    asinh(Integral x);              // (5) C++11
+  constexpr double
+    asinh(Integral x);              // (5) C++26
+
+  float
+    asinhf(float x);                // (6) C++17
+  constexpr float
+    asinhf(float x);                // (6) C++26
+
+  long double
+    asinhl(long double x);          // (7) C++17
+  constexpr long double
+    asinhl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -78,7 +90,7 @@ asinh(1.0)  = 0.881374
 
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -97,3 +109,5 @@ $$ \mathrm{arsinh}~x = \log_e \left(x + \sqrt{x^2+1}\right) \quad \mathrm{for~al
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atan -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/atan.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/atan.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/atan.md b/reference/cmath/atan.md
index a82f0ba13..457d83f3c 100644
--- a/reference/cmath/atan.md
+++ b/reference/cmath/atan.md
@@ -12,6 +12,8 @@ namespace std {
 
   floating-point-type
     atan(floating-point-type x);      // (4) C++23
+  constexpr floating-point-type
+    atan(floating-point-type x);      // (4) C++26
 
   double atan(Integral x);            // (5) C++11
 
@@ -89,7 +91,7 @@ atan(∞)    = 1.570796
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -115,3 +117,5 @@ $$ \mathrm{Arctan}~x = \frac{\pi}{4} + \mathrm{Arctan}~\frac{x - 1}{x + 1} \quad
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atan2 -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/atan2.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/atan2.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/atan2.md b/reference/cmath/atan2.md
index 4878498a1..fcbcf0421 100644
--- a/reference/cmath/atan2.md
+++ b/reference/cmath/atan2.md
@@ -14,15 +14,26 @@ namespace std {
   floating-point-type
     atan2(floating-point-type y,
           floating-point-type x);         // (4) C++23
+  constexpr floating-point-type
+    atan2(floating-point-type y,
+          floating-point-type x);         // (4) C++26
 
   Promoted
     atan2(Arithmetic1 y,
           Arithmetic2 x);                 // (5) C++11
+  constexpr Promoted
+    atan2(Arithmetic1 y,
+          Arithmetic2 x);                 // (5) C++26
 
   float
     atan2f(float y, float x);             // (6) C++17
+  constexpr float
+    atan2f(float y, float x);             // (6) C++26
+
   long double
     atan2l(long double y, long double x); // (7) C++17
+  constexpr long double
+    atan2l(long double y, long double x); // (7) C++26
 }
 ```
 * Promoted[italic]
@@ -116,7 +127,7 @@ atan2(-1.0, 1.0)  = -0.785398
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -136,3 +147,5 @@ $$
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atanh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/atanh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/atanh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/atanh.md b/reference/cmath/atanh.md
index 78e3a266d..6e3bb5445 100644
--- a/reference/cmath/atanh.md
+++ b/reference/cmath/atanh.md
@@ -7,17 +7,29 @@
 
 ```cpp
 namespace std {
-  float atanh(float x);              // (1) C++11からC++20まで
-  double atanh(double x);            // (2) C++11からC++20まで
-  long double atanh(long double x);  // (3) C++11からC++20まで
+  float atanh(float x);             // (1) C++11からC++20まで
+  double atanh(double x);           // (2) C++11からC++20まで
+  long double atanh(long double x); // (3) C++11からC++20まで
 
   floating-point-type
-    atanh(floating-point-type x);    // (4) C++23
-
-  double atanh(Integral x);          // (5) C++11
-
-  float atanhf(float x);             // (6) C++17
-  long double atanhl(long double x); // (7) C++17
+    atanh(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    atanh(floating-point-type x);   // (4) C++26
+
+  double
+    atanh(Integral x);              // (5) C++11
+  constexpr double
+    atanh(Integral x);              // (5) C++26
+
+  float
+    atanhf(float x);                // (6) C++17
+  constexpr float
+    atanhf(float x);                // (6) C++26
+
+  long double
+    atanhl(long double x);          // (7) C++17
+  constexpr long double
+    atanhl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -85,7 +97,7 @@ atanh(1.0)  = inf
 - [GCC](/implementation.md#gcc): 4.3.4, 4.4.5, 4.5.2, 4.6.1, 4.7.0
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -104,3 +116,5 @@ $$ \mathrm{artanh}~x = \frac{1}{2} \log_e \frac{1 + x}{1 - x} \quad \mathrm{for}
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbrt -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cbrt.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/cbrt.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cbrt.md b/reference/cmath/cbrt.md
index f5c879de3..8ae164345 100644
--- a/reference/cmath/cbrt.md
+++ b/reference/cmath/cbrt.md
@@ -7,17 +7,29 @@
 
 ```cpp
 namespace std {
-  float cbrt(float x);              // (1) C++11からC++20まで
-  double cbrt(double x);            // (2) C++11からC++20まで
-  long double cbrt(long double x);  // (3) C++11からC++20まで
+  float cbrt(float x);             // (1) C++11からC++20まで
+  double cbrt(double x);           // (2) C++11からC++20まで
+  long double cbrt(long double x); // (3) C++11からC++20まで
 
   floating-point-type
-    cbrt(floating-point-type x);    // (4) C++23
-
-  double cbrt(Integral x);          // (5) C++11
-
-  float cbrtf(float x);             // (6) C++17
-  long double cbrtl(long double x); // (7) C++17
+    cbrt(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    cbrt(floating-point-type x);   // (4) C++26
+
+  double
+    cbrt(Integral x);              // (5) C++11
+  constexpr double
+    cbrt(Integral x);              // (5) C++26
+
+  float
+    cbrtf(float x);                // (6) C++17
+  constexpr float
+    cbrtf(float x);                // (6) C++26
+
+  long double
+    cbrtl(long double x);          // (7) C++17
+  constexpr long double
+    cbrtl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -85,7 +97,7 @@ cbrt(-1.0) = -1.000000
 - [GCC](/implementation.md#gcc): 4.3.4, 4.4.5, 4.5.2, 4.6.1, 4.7.0
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -93,3 +105,5 @@ cbrt(-1.0) = -1.000000
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cos -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cos.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/cos.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cos.md b/reference/cmath/cos.md
index 0f68b806d..8c79ac589 100644
--- a/reference/cmath/cos.md
+++ b/reference/cmath/cos.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float cos(float x);              // (1) C++03からC++20まで
-  double cos(double x);            // (2) C++03からC++20まで
-  long double cos(long double x);  // (3) C++03からC++20まで
+  float cos(float x);             // (1) C++03からC++20まで
+  double cos(double x);           // (2) C++03からC++20まで
+  long double cos(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    cos(floating-point-type x);    // (4) C++23
-
-  double cos(Integral x);          // (5) C++11
-
-  float cosf(float x);             // (6) C++17
-  long double cosl(long double x); // (7) C++17
+    cos(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    cos(floating-point-type x);   // (4) C++26
+
+  double
+    cos(Integral x);              // (5) C++11
+  constexpr double
+    cos(Integral x);              // (5) C++26
+
+  float
+    cosf(float x);                // (6) C++17
+  constexpr float
+    cosf(float x);                // (6) C++26
+
+  long double
+    cosl(long double x);          // (7) C++17
+  constexpr long double
+    cosl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -108,7 +120,7 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -126,3 +138,5 @@ $$ \cos x = \sum_{n = 0}^{\infty} \frac{(-1)^n}{(2n)!} x^{2n} \quad \mathrm{for~
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cosh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cosh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/cosh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cosh.md b/reference/cmath/cosh.md
index 3218f93c7..283d8afb1 100644
--- a/reference/cmath/cosh.md
+++ b/reference/cmath/cosh.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float cosh(float x);              // (1) C++03からC++20まで
-  double cosh(double x);            // (2) C++03からC++20まで
-  long double cosh(long double x);  // (3) C++03からC++20まで
+  float cosh(float x);             // (1) C++03からC++20まで
+  double cosh(double x);           // (2) C++03からC++20まで
+  long double cosh(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    cosh(floating-point-type x);    // (4) C++23
-
-  double cosh(Integral x);          // (5) C++11
-
-  float coshf(float x);             // (6) C++17
-  long double coshl(long double x); // (7) C++17
+    cosh(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    cosh(floating-point-type x);   // (4) C++26
+
+  double
+    cosh(Integral x);              // (5) C++11
+  constexpr double
+    cosh(Integral x);              // (5) C++26
+
+  float
+    coshf(float x);                // (6) C++17
+  constexpr float
+    coshf(float x);                // (6) C++26
+
+  long double
+    coshl(long double x);          // (7) C++17
+  constexpr long double
+    coshl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -81,7 +93,7 @@ cosh(1.0)  = 1.543081
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -95,3 +107,5 @@ $$ \cosh x = \sum_{n = 0}^{\infty} \frac{1}{(2n)!} x^{2n} \quad \mathrm{for~all}
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erf -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/erf.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/erf.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/erf.md b/reference/cmath/erf.md
index 138fa4d5f..b492184f8 100644
--- a/reference/cmath/erf.md
+++ b/reference/cmath/erf.md
@@ -7,17 +7,29 @@
 
 ```cpp
 namespace std {
-  float erf(float x);              // (1) C++11からC++20まで
-  double erf(double x);            // (2) C++11からC++20まで
-  long double erf(long double x);  // (3) C++11からC++20まで
+  float erf(float x);             // (1) C++11からC++20まで
+  double erf(double x);           // (2) C++11からC++20まで
+  long double erf(long double x); // (3) C++11からC++20まで
 
   floating-point-type
-    erf(floating-point-type x);    // (4) C++23
-
-  double erf(Integral x);          // (5) C++11
-
-  float erff(float x);             // (6) C++17
-  long double erfl(long double x); // (7) C++17
+    erf(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    erf(floating-point-type x);   // (4) C++26
+
+  double
+    erf(Integral x);              // (5) C++11
+  constexpr double
+    erf(Integral x);              // (5) C++26
+
+  float
+    erff(float x);                // (6) C++17
+  constexpr float
+    erff(float x);                // (6) C++26
+
+  long double
+    erfl(long double x);          // (7) C++17
+  constexpr long double
+    erfl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -84,7 +96,7 @@ erf(+∞) = 1.000000
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -92,3 +104,5 @@ erf(+∞) = 1.000000
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erfc -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/erfc.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/erfc.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/erfc.md b/reference/cmath/erfc.md
index 8f1698870..88aa1bf73 100644
--- a/reference/cmath/erfc.md
+++ b/reference/cmath/erfc.md
@@ -7,17 +7,29 @@
 
 ```cpp
 namespace std {
-  float erfc(float x);              // (1) C++11からC++20まで
-  double erfc(double x);            // (2) C++11からC++20まで
-  long double erfc(long double x);  // (3) C++11からC++20まで
+  float erfc(float x);             // (1) C++11からC++20まで
+  double erfc(double x);           // (2) C++11からC++20まで
+  long double erfc(long double x); // (3) C++11からC++20まで
 
   floating-point-type
-    erfc(floating-point-type x);    // (4) C++23
-
-  double erfc(Integral x);          // (5) C++11
-
-  float erfcf(float x);             // (6) C++17
-  long double erfcl(long double x); // (7) C++17
+    erfc(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    erfc(floating-point-type x);   // (4) C++26
+
+  double
+    erfc(Integral x);              // (5) C++11
+  constexpr double
+    erfc(Integral x);              // (5) C++26
+
+  float
+    erfcf(float x);                // (6) C++17
+  constexpr float
+    erfcf(float x);                // (6) C++26
+
+  long double
+    erfcl(long double x);          // (7) C++17
+  constexpr long double
+    erfcl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -84,7 +96,7 @@ erfc(+∞) = 0.000000
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -92,3 +104,5 @@ erfc(+∞) = 0.000000
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exp -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/exp.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/exp.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/exp.md b/reference/cmath/exp.md
index 1d080b751..6622248ac 100644
--- a/reference/cmath/exp.md
+++ b/reference/cmath/exp.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float exp(float x);              // (1) C++03からC++20まで
-  double exp(double x);            // (2) C++03からC++20まで
-  long double exp(long double x);  // (3) C++03からC++20まで
+  float exp(float x);             // (1) C++03からC++20まで
+  double exp(double x);           // (2) C++03からC++20まで
+  long double exp(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    exp(floating-point-type x);    // (4) C++23
-
-  double exp(Integral x);          // (5) C++11
-
-  float expf(float x);             // (6) C++17
-  long double expl(long double x); // (7) C++17
+    exp(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    exp(floating-point-type x);   // (4) C++26
+
+  double
+    exp(Integral x);              // (5) C++11
+  constexpr double
+    exp(Integral x);              // (5) C++26
+
+  float
+    expf(float x);                // (6) C++17
+  constexpr float
+    expf(float x);                // (6) C++26
+
+  long double
+    expl(long double x);          // (7) C++17
+  constexpr long double
+    expl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -86,7 +98,7 @@ exp(-∞) = 0.000000
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -100,3 +112,5 @@ $$ e^x = \sum_{n = 0}^{\infty} \frac{x^n}{n!} \quad \mathrm{for~all} \; x $$
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exp2 -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/exp2.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/exp2.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/exp2.md b/reference/cmath/exp2.md
index 44b28dc80..35f918b38 100644
--- a/reference/cmath/exp2.md
+++ b/reference/cmath/exp2.md
@@ -7,17 +7,29 @@
 
 ```cpp
 namespace std {
-  float exp2(float x);              // (1) C++11からC++20まで
-  double exp2(double x);            // (2) C++11からC++20まで
-  long double exp2(long double x);  // (3) C++11からC++20まで
+  float exp2(float x);             // (1) C++11からC++20まで
+  double exp2(double x);           // (2) C++11からC++20まで
+  long double exp2(long double x); // (3) C++11からC++20まで
 
   floating-point-type
-    exp2(floating-point-type x);    // (4) C++23
-
-  double exp2(Integral x);          // (5) C++11
-
-  float exp2f(float x);             // (6) C++17
-  long double exp2l(long double x); // (7) C++17
+    exp2(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    exp2(floating-point-type x);   // (4) C++26
+
+  double
+    exp2(Integral x);              // (5) C++11
+  constexpr double
+    exp2(Integral x);              // (5) C++26
+
+  float
+    exp2f(float x);                // (6) C++17
+  float
+    exp2f(float x);                // (6) C++26
+
+  long double
+    exp2l(long double x);          // (7) C++17
+  constexpr long double
+    exp2l(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -107,7 +119,7 @@ namespace std {
 - [GCC](/implementation.md#gcc): 4.3.4, 4.4.5, 4.5.2, 4.6.1, 4.7.0
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -121,3 +133,5 @@ $$ 2^x = e^{x \log_e 2} \quad \mathrm{for~all} \; x $$
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expm1 -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/expm1.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/expm1.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/expm1.md b/reference/cmath/expm1.md
index cf40c790d..eea6930d5 100644
--- a/reference/cmath/expm1.md
+++ b/reference/cmath/expm1.md
@@ -7,17 +7,29 @@
 
 ```cpp
 namespace std {
-  float expm1(float x);              // (1) C++11からC++20まで
-  double expm1(double x);            // (2) C++11からC++20まで
-  long double expm1(long double x);  // (3) C++11からC++20まで
+  float expm1(float x);             // (1) C++11からC++20まで
+  double expm1(double x);           // (2) C++11からC++20まで
+  long double expm1(long double x); // (3) C++11からC++20まで
 
   floating-point-type
-    expm1(floating-point-type x);    // (4) C++23
-
-  double expm1(Integral x);          // (5) C++11
-
-  float expm1f(float x);             // (6) C++17
-  long double expm1l(long double x); // (7) C++17
+    expm1(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    expm1(floating-point-type x);   // (4) C++26
+
+  double
+    expm1(Integral x);              // (5) C++11
+  constexpr double
+    expm1(Integral x);              // (5) C++26
+
+  float
+    expm1f(float x);                // (6) C++17
+  constexpr float
+    expm1f(float x);                // (6) C++26
+
+  long double
+    expm1l(long double x);          // (7) C++17
+  constexpr long double
+    expm1l(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -88,7 +100,7 @@ expm1(-∞)  = -1.000000
 - [GCC](/implementation.md#gcc): 4.3.4, 4.4.5, 4.5.2, 4.6.1, 4.7.0
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -96,3 +108,5 @@ expm1(-∞)  = -1.000000
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>hypot -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/hypot.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/hypot.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/hypot.md b/reference/cmath/hypot.md
index 340bddcd1..96700b2ce 100644
--- a/reference/cmath/hypot.md
+++ b/reference/cmath/hypot.md
@@ -7,35 +7,74 @@
 
 ```cpp
 namespace std {
-  float hypot(float x, float y);                    // (1) C++11からC++20まで
-  double hypot(double x, double y);                 // (2) C++11からC++20まで
-  long double hypot(long double x, long double y);  // (3) C++11からC++20まで
+  float
+    hypot(float x,
+          float y);               // (1) C++11からC++20まで
+  double
+    hypot(double x,
+          double y);              // (2) C++11からC++20まで
+  long double
+    hypot(long double x,
+          long double y);         // (3) C++11からC++20まで
 
   floating-point-type
     hypot(floating-point-type x,
-          floating-point-type y);                   // (4) C++23
+          floating-point-type y); // (4) C++23
+  constexpr floating-point-type
+    hypot(floating-point-type x,
+          floating-point-type y); // (4) C++26
 
-  Promoted hypot(Arithmetic1 x, Arithmetic2 y);     // (5) C++11
+  Promoted
+    hypot(Arithmetic1 x,
+          Arithmetic2 y);         // (5) C++11
+  constexpr Promoted
+    hypot(Arithmetic1 x,
+          Arithmetic2 y);         // (5) C++26
 
-  float hypotf(float x, float y);                   // (6) C++17
-  long double hypotl(long double x, long double y); // (7) C++17
+  float
+    hypotf(float x,
+           float y);              // (6) C++17
+  constexpr float
+    hypotf(float x,
+           float y);              // (6) C++26
 
-  float hypot(float x, float y, float z);           // (8) C++17からC++20まで
-  double hypot(double x, double y, double z);       // (9) C++17からC++20まで
+  long double
+    hypotl(long double x,
+           long double y);        // (7) C++17
+  constexpr long double
+    hypotl(long double x,
+           long double y);        // (7) C++26
+
+  float
+    hypot(float x,
+          float y,
+          float z);               // (8) C++17からC++20まで
+  double
+    hypot(double x,
+          double y,
+          double z);              // (9) C++17からC++20まで
   long double
     hypot(long double x,
           long double y,
-          long double z);                           // (10) C++17からC++20まで
+          long double z);         // (10) C++17からC++20まで
 
   floating-point-type
     hypot(floating-point-type x,
           floating-point-type y,
-          floating-point-type z);                   // (11) C++23
+          floating-point-type z); // (11) C++23
+  constexpr floating-point-type
+    hypot(floating-point-type x,
+          floating-point-type y,
+          floating-point-type z); // (11) C++26
 
   Promoted
     hypot(Arithmetic1 x,
           Arithmetic2 y,
-          Arithmetic3 z);                           // (12) C++17
+          Arithmetic3 z);         // (12) C++17
+  constexpr Promoted
+    hypot(Arithmetic1 x,
+          Arithmetic2 y,
+          Arithmetic3 z);         // (12) C++26
 }
 ```
 * Promoted[italic]
@@ -189,7 +228,7 @@ int main()
     - 2013以降、`_hypotl`と`hypotl`は関数として定義されている。
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -204,3 +243,5 @@ $$ \sqrt{x^2 + y^2} = \left| u \right| \sqrt{1 + \left( \frac{v}{u} \right)^2} \
 - [P0030R1 Proposal to Introduce a 3-Argument Overload to `std::hypot`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0030r1.pdf)
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lgamma -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/lgamma.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/lgamma.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/lgamma.md b/reference/cmath/lgamma.md
index ace61255b..57a08370c 100644
--- a/reference/cmath/lgamma.md
+++ b/reference/cmath/lgamma.md
@@ -7,17 +7,29 @@
 
 ```cpp
 namespace std {
-  float lgamma(float x);              // (1) C++11からC++20まで
-  double lgamma(double x);            // (2) C++11からC++20まで
-  long double lgamma(long double x);  // (3) C++11からC++20まで
+  float lgamma(float x);             // (1) C++11からC++20まで
+  double lgamma(double x);           // (2) C++11からC++20まで
+  long double lgamma(long double x); // (3) C++11からC++20まで
 
   floating-point-type
-    lgamma(floating-point-type x);    // (4) C++23
-
-  double lgamma(Integral x);          // (5) C++11
-
-  float lgammaf(float x);             // (6) C++17
-  long double lgammal(long double x); // (7) C++17
+    lgamma(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    lgamma(floating-point-type x);   // (4) C++26
+
+  double
+    lgamma(Integral x);              // (5) C++11
+  constexpr double
+    lgamma(Integral x);              // (5) C++26
+
+  float
+    lgammaf(float x);                // (6) C++17
+  constexpr float
+    lgammaf(float x);                // (6) C++26
+
+  long double
+    lgammal(long double x);          // (7) C++17
+  constexpr long double
+    lgammal(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -91,7 +103,7 @@ lgamma(+∞)  = inf
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -99,3 +111,5 @@ lgamma(+∞)  = inf
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/log.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log.md b/reference/cmath/log.md
index de3f1ebe7..3da518e8a 100644
--- a/reference/cmath/log.md
+++ b/reference/cmath/log.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float log(float x);              // (1) C++03からC++20まで
-  double log(double x);            // (2) C++03からC++20まで
-  long double log(long double x);  // (3) C++03からC++20まで
+  float log(float x);             // (1) C++03からC++20まで
+  double log(double x);           // (2) C++03からC++20まで
+  long double log(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    log(floating-point-type x);    // (4) C++23
-
-  double log(Integral x);          // (5) C++11
-
-  float logf(float x);             // (6) C++17
-  long double logl(long double x); // (7) C++17
+    log(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    log(floating-point-type x);   // (4) C++26
+
+  double
+    log(Integral x);              // (5) C++11
+  constexpr double
+    log(Integral x);              // (5) C++26
+
+  float
+    logf(float x);                // (6) C++17
+  constexpr float
+    logf(float x);                // (6) C++26
+
+  long double
+    logl(long double x);          // (7) C++17
+  constexpr long double
+    logl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -88,7 +100,7 @@ log(-1.0) = nan
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -102,3 +114,5 @@ $$ \log_e (1 + x) = \sum_{n = 1}^{\infty} \frac{(-1)^{n + 1}}{n} x^n \quad \math
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log10 -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log10.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/log10.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log10.md b/reference/cmath/log10.md
index b2abb65ab..1bdbb66a0 100644
--- a/reference/cmath/log10.md
+++ b/reference/cmath/log10.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float log10(float x);              // (1) C++03からC++20まで
-  double log10(double x);            // (2) C++03からC++20まで
-  long double log10(long double x);  // (3) C++03からC++20まで
+  float log10(float x);             // (1) C++03からC++20まで
+  double log10(double x);           // (2) C++03からC++20まで
+  long double log10(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    log10(floating-point-type x);    // (4) C++23
-
-  double log10(Integral x);          // (5) C++11
-
-  float log10f(float x);             // (6) C++17
-  long double log10l(long double x); // (7) C++17
+    log10(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    log10(floating-point-type x);   // (4) C++26
+
+  double
+    log10(Integral x);              // (5) C++11
+  constexpr double
+    log10(Integral x);              // (5) C++26
+
+  float
+    log10f(float x);                // (6) C++17
+  constexpr float
+    log10f(float x);                // (6) C++26
+
+  long double
+    log10l(long double x);          // (7) C++17
+  constexpr long double
+    log10l(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -121,7 +133,7 @@ log10(100000000.000000) : 8.000000
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -135,3 +147,5 @@ $$ \log_{10} x = \frac{\log_e x}{\log_e 10}$$
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log1p -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log1p.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/log1p.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log1p.md b/reference/cmath/log1p.md
index 4cabef440..26813a70a 100644
--- a/reference/cmath/log1p.md
+++ b/reference/cmath/log1p.md
@@ -7,17 +7,29 @@
 
 ```cpp
 namespace std {
-  float log1p(float x);              // (1) C++11からC++20まで
-  double log1p(double x);            // (2) C++11からC++20まで
-  long double log1p(long double x);  // (3) C++11からC++20まで
+  float log1p(float x);             // (1) C++11からC++20まで
+  double log1p(double x);           // (2) C++11からC++20まで
+  long double log1p(long double x); // (3) C++11からC++20まで
 
   floating-point-type
-    log1p(floating-point-type x);    // (4) C++23
-
-  double log1p(Integral x);          // (5) C++11
-
-  float log1pf(float x);             // (6) C++17
-  long double log1pl(long double x); // (7) C++17
+    log1p(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    log1p(floating-point-type x);   // (4) C++26
+
+  double
+    log1p(Integral x);              // (5) C++11
+  constexpr double
+    log1p(Integral x);              // (5) C++26
+
+  float
+    log1pf(float x);                // (6) C++17
+  constexpr float
+    log1pf(float x);                // (6) C++26
+
+  long double
+    log1pl(long double x);          // (7) C++17
+  constexpr long double
+    log1pl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -94,7 +106,7 @@ log1p(-2.0) = -nan
 - [GCC](/implementation.md#gcc): 4.3.4, 4.4.5, 4.5.2, 4.6.1, 4.7.0
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -102,3 +114,5 @@ log1p(-2.0) = -nan
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log2 -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/log2.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/log2.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/log2.md b/reference/cmath/log2.md
index a2e051fce..e57ff5ab2 100644
--- a/reference/cmath/log2.md
+++ b/reference/cmath/log2.md
@@ -7,17 +7,29 @@
 
 ```cpp
 namespace std {
-  float log2(float x);              // (1) C++11からC++20まで
-  double log2(double x);            // (2) C++11からC++20まで
-  long double log2(long double x);  // (3) C++11からC++20まで
+  float log2(float x);             // (1) C++11からC++20まで
+  double log2(double x);           // (2) C++11からC++20まで
+  long double log2(long double x); // (3) C++11からC++20まで
 
   floating-point-type
-    log2(floating-point-type x);    // (4) C++23
-
-  double log2(Integral x);          // (5) C++11
-
-  float log2f(float x);             // (6) C++17
-  long double log2l(long double x); // (7) C++17
+    log2(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    log2(floating-point-type x);   // (4) C++26
+
+  double
+    log2(Integral x);              // (5) C++11
+  constexpr double
+    log2(Integral x);              // (5) C++26
+
+  float
+    log2f(float x);                // (6) C++17
+  constexpr float
+    log2f(float x);                // (6) C++26
+
+  long double
+    log2l(long double x);          // (7) C++17
+  constexpr long double
+    log2l(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -148,7 +160,7 @@ log2(32) : 5, power of 2
 - [GCC](/implementation.md#gcc): 4.3.4, 4.4.5, 4.5.2, 4.6.1, 4.7.0
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -162,3 +174,5 @@ $$ \log_2 x = \frac{\log_e x}{\log_e 2}$$
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pow -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/pow.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/pow.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/pow.md b/reference/cmath/pow.md
index 2fc052767..786a5d4c7 100644
--- a/reference/cmath/pow.md
+++ b/reference/cmath/pow.md
@@ -6,22 +6,53 @@
 
 ```cpp
 namespace std {
-  float pow(float x, float y);                    // (1) C++03からC++20まで
-  double pow(double x, double y);                 // (2) C++03からC++20まで
-  long double pow(long double x, long double y);  // (3) C++03からC++20まで
-
-  float pow(float x, int y);                      // (4) C++03まで
-  double pow(double x, int y);                    // (5) C++03まで
-  long double pow(long double x, int y);          // (6) C++03まで
+  float
+    pow(float x,
+        float y);               // (1) C++03からC++20まで
+  double
+    pow(double x,
+        double y);              // (2) C++03からC++20まで
+  long double
+    pow(long double x,
+        long double y);         // (3) C++03からC++20まで
+
+  float
+    pow(float x,
+        int y);                 // (4) C++03まで
+  double
+    pow(double x,
+        int y);                 // (5) C++03まで
+  long double
+    pow(long double x,
+        int y);                 // (6) C++03まで
 
   floating-point-type
     pow(floating-point-type x,
-        floating-point-type y);                   // (7) C++23
-
-  Promoted pow(Arithmetic1 x, Arithmetic2 y);     // (8) C++11
-
-  float powf(float x, float y);                   // (9) C++17
-  long double powl(long double x, long double y); // (10) C++17
+        floating-point-type y); // (7) C++23
+  constexpr floating-point-type
+    pow(floating-point-type x,
+        floating-point-type y); // (7) C++26
+
+  Promoted
+    pow(Arithmetic1 x,
+        Arithmetic2 y);         // (8) C++11
+  constexpr Promoted
+    pow(Arithmetic1 x,
+        Arithmetic2 y);         // (8) C++26
+
+  float
+    powf(float x,
+         float y);              // (9) C++17
+  constexpr float
+    powf(float x,
+         float y);              // (9) C++26
+
+  long double
+    powl(long double x,
+         long double y);        // (10) C++17
+  constexpr long double
+    powl(long double x,
+         long double y);        // (10) C++26
 }
 ```
 * Promoted[italic]
@@ -125,7 +156,7 @@ pow(2.0, -∞)   = 0.000000
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -140,3 +171,5 @@ $$ x^y = e^{y \log_e x} $$
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sin -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sin.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/sin.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sin.md b/reference/cmath/sin.md
index 3b9d23e24..f149abfca 100644
--- a/reference/cmath/sin.md
+++ b/reference/cmath/sin.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float sin(float x);              // (1) C++03からC++20まで
-  double sin(double x);            // (2) C++03からC++20まで
-  long double sin(long double x);  // (3) C++03からC++20まで
+  float sin(float x);             // (1) C++03からC++20まで
+  double sin(double x);           // (2) C++03からC++20まで
+  long double sin(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    sin(floating-point-type x);    // (4) C++23
-
-  double sin(Integral x);          // (5) C++11
-
-  float sinf(float x);             // (6) C++17
-  long double sinl(long double x); // (7) C++17
+    sin(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    sin(floating-point-type x);   // (4) C++26
+
+  double
+    sin(Integral x);              // (5) C++11
+  constexpr double
+    sin(Integral x);              // (5) C++26
+
+  float
+    sinf(float x);                // (6) C++17
+  constexpr float
+    sinf(float x);                // (6) C++26
+
+  long double
+    sinl(long double x);          // (7) C++17
+  constexpr long double
+    sinl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -108,7 +120,7 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -126,3 +138,5 @@ $$ \sin x = \sum_{n = 0}^{\infty} \frac{(-1)^n}{(2n + 1)!} x^{2n + 1} \quad \mat
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sinh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sinh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/sinh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sinh.md b/reference/cmath/sinh.md
index 48337b7b6..0be344546 100644
--- a/reference/cmath/sinh.md
+++ b/reference/cmath/sinh.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float sinh(float x);              // (1) C++03からC++20まで
-  double sinh(double x);            // (2) C++03からC++20まで
-  long double sinh(long double x);  // (3) C++03からC++20まで
+  float sinh(float x);             // (1) C++03からC++20まで
+  double sinh(double x);           // (2) C++03からC++20まで
+  long double sinh(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    sinh(floating-point-type x);    // (4) C++23
-
-  double sinh(Integral x);          // (5) C++11
-
-  float sinhf(float x);             // (6) C++17
-  long double sinhl(long double x); // (7) C++17
+    sinh(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    sinh(floating-point-type x);   // (4) C++26
+
+  double
+    sinh(Integral x);              // (5) C++11
+  constexpr double
+    sinh(Integral x);              // (5) C++26
+
+  float
+    sinhf(float x);                // (6) C++17
+  constexpr float
+    sinhf(float x);                // (6) C++26
+
+  long double
+    sinhl(long double x);          // (7) C++17
+  constexpr long double
+    sinhl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -81,7 +93,7 @@ sinh(1.0)  = 1.175201
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -95,3 +107,5 @@ $$ \sinh x = \sum_{n = 0}^{\infty} \frac{1}{(2n + 1)!} x^{2n + 1} \quad \mathrm{
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sqrt.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/sqrt.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sqrt.md b/reference/cmath/sqrt.md
index b46859851..0b7fe0c50 100644
--- a/reference/cmath/sqrt.md
+++ b/reference/cmath/sqrt.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float sqrt(float x);              // (1) C++03からC++20まで
-  double sqrt(double x);            // (2) C++03からC++20まで
-  long double sqrt(long double x);  // (3) C++03からC++20まで
+  float sqrt(float x);             // (1) C++03からC++20まで
+  double sqrt(double x);           // (2) C++03からC++20まで
+  long double sqrt(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    sqrt(floating-point-type x);    // (4) C++23
-
-  double sqrt(Integral x);          // (5) C++11
-
-  float sqrtf(float x);             // (6) C++17
-  long double sqrtl(long double x); // (7) C++17
+    sqrt(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    sqrt(floating-point-type x);   // (4) C++26
+
+  double
+    sqrt(Integral x);              // (5) C++11
+  constexpr double
+    sqrt(Integral x);              // (5) C++26
+
+  float
+    sqrtf(float x);                // (6) C++17
+  constexpr float
+    sqrtf(float x);                // (6) C++26
+
+  long double
+    sqrtl(long double x);          // (7) C++17
+  constexpr long double
+    sqrtl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -96,7 +108,7 @@ sqrt(-1.0) = -nan
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -112,3 +124,5 @@ $$ a_{n + 1} = \frac{\frac{x}{a_n} + a_n}{2} \quad \mathrm{for} \; x \geq 0 $$
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tan -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tan.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/tan.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tan.md b/reference/cmath/tan.md
index 18b7e1e63..657ad185f 100644
--- a/reference/cmath/tan.md
+++ b/reference/cmath/tan.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float tan(float x);              // (1) C++03からC++20まで
-  double tan(double x);            // (2) C++03からC++20まで
-  long double tan(long double x);  // (3) C++03からC++20まで
+  float tan(float x);             // (1) C++03からC++20まで
+  double tan(double x);           // (2) C++03からC++20まで
+  long double tan(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    tan(floating-point-type x);    // (4) C++23
-
-  double tan(Integral x);          // (5) C++11
-
-  float tanf(float x);             // (6) C++17
-  long double tanl(long double x); // (7) C++17
+    tan(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    tan(floating-point-type x);   // (4) C++26
+
+  double
+    tan(Integral x);              // (5) C++11
+  constexpr double
+    tan(Integral x);              // (5) C++26
+
+  float
+    tanf(float x);                // (6) C++17
+  constexpr float
+    tanf(float x);                // (6) C++26
+
+  long double
+    tanl(long double x);          // (7) C++17
+  constexpr long double
+    tanl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -83,7 +95,7 @@ tan(pi/2) = 16331239353195370.000000
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -101,3 +113,5 @@ $$ \tan x = \frac{\sin x}{\cos x} $$
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tanh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tanh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/tanh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tanh.md b/reference/cmath/tanh.md
index d2ae4edd8..3c618ea0b 100644
--- a/reference/cmath/tanh.md
+++ b/reference/cmath/tanh.md
@@ -6,17 +6,29 @@
 
 ```cpp
 namespace std {
-  float tanh(float x);              // (1) C++03からC++20まで
-  double tanh(double x);            // (2) C++03からC++20まで
-  long double tanh(long double x);  // (3) C++03からC++20まで
+  float tanh(float x);             // (1) C++03からC++20まで
+  double tanh(double x);           // (2) C++03からC++20まで
+  long double tanh(long double x); // (3) C++03からC++20まで
 
   floating-point-type
-    tanh(floating-point-type x);    // (4) C++23
-
-  double tanh(Integral x);          // (5) C++11
-
-  float tanhf(float x);             // (6) C++17
-  long double tanhl(long double x); // (7) C++17
+    tanh(floating-point-type x);   // (4) C++23
+  constexpr floating-point-type
+    tanh(floating-point-type x);   // (4) C++26
+
+  double
+    tanh(Integral x);              // (5) C++11
+  constexpr double
+    tanh(Integral x);              // (5) C++26
+
+  float
+    tanhf(float x);                // (6) C++17
+  constexpr float
+    tanhf(float x);                // (6) C++26
+
+  long double
+    tanhl(long double x);          // (7) C++17
+  constexpr long double
+    tanhl(long double x);          // (7) C++26
 }
 ```
 * Integral[italic]
@@ -78,7 +90,8 @@ tanh(1.0)  = 0.761594
 - [Visual C++](/implementation.md#visual_cpp): 2003, 2005, 2008, 2010
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
+
 - GCC 4.6.1 以上
 
 ## 実装例
@@ -94,3 +107,5 @@ $$ \tanh x = \frac{\sinh x}{\cosh x} $$
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tgamma -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tgamma.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/cmath/tgamma.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tgamma.md b/reference/cmath/tgamma.md
index 0ed6c691b..f50e84668 100644
--- a/reference/cmath/tgamma.md
+++ b/reference/cmath/tgamma.md
@@ -13,11 +13,23 @@ namespace std {
 
   floating-point-type
     tgamma(floating-point-type x);    // (4) C++23
-
-  double tgamma(Integral x);          // (5) C++11
-
-  float tgammaf(float x);             // (6) C++17
-  long double tgammal(long double x); // (7) C++17
+  constexpr floating-point-type
+    tgamma(floating-point-type x);    // (4) C++26
+
+  double
+    tgamma(Integral x);               // (5) C++11
+  constexpr double
+    tgamma(Integral x);               // (5) C++11
+
+  float
+    tgammaf(float x);                 // (6) C++17
+  constexpr float
+    tgammaf(float x);                 // (6) C++26
+
+  long double
+    tgammal(long double x);           // (7) C++17
+  constexpr long double
+    tgammal(long double x);           // (7) C++26
 }
 ```
 * Integral[italic]
@@ -94,7 +106,7 @@ tgamma(+∞)  = inf
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 #### 備考
-特定の環境で `constexpr` 指定されている場合がある。（独自拡張）
+特定の環境では、早期に `constexpr` 対応されている場合がある：
 
 - GCC 4.6.1 以上
 
@@ -102,3 +114,5 @@ tgamma(+∞)  = inf
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/abs.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/abs.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/abs.md b/reference/complex/complex/abs.md
index 69f779ae0..d49ea11fb 100644
--- a/reference/complex/complex/abs.md
+++ b/reference/complex/complex/abs.md
@@ -6,7 +6,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  T abs(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  T
+    abs(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr T
+    abs(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -90,3 +94,8 @@ abs( (1,2) ) = 2.23607
 | [`abs`](/reference/cmath/abs.md)   | 絶対値を得る。（浮動小数点版）         |
 | [`fabs`](/reference/cmath/fabs.md) | 絶対値を得る。（浮動小数点版）         |
 | [`abs`](/reference/cstdlib/abs.md) | 絶対値を得る。（整数版）               |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acos -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/acos.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/acos.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/acos.md b/reference/complex/complex/acos.md
index 46d9c9e82..cce0c2b23 100644
--- a/reference/complex/complex/acos.md
+++ b/reference/complex/complex/acos.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; acos(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    acos(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++11
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    acos(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -110,3 +114,8 @@ acos( (1,2) ) = (1.14372,-1.52857)
 | [`tan`](tan.md)                    | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                  | 複素数の双曲線正接を求める。              |
 | [`acos`](/reference/cmath/acos.md) | 実数の逆余弦を求める。                    |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>acosh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/acosh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/acosh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/acosh.md b/reference/complex/complex/acosh.md
index 777195d80..4d21c8906 100644
--- a/reference/complex/complex/acosh.md
+++ b/reference/complex/complex/acosh.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; acosh(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    acosh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++11
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    acosh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -108,3 +112,8 @@ acosh( (1,2) ) = (1.52857,1.14372)
 | [`tan`](tan.md)                      | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                    | 複素数の双曲線正接を求める。              |
 | [`acosh`](/reference/cmath/acosh.md) | 実数の逆双曲線余弦を求める。              |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>arg -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/arg.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/arg.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/arg.md b/reference/complex/complex/arg.md
index b02461bf7..1dc6749ff 100644
--- a/reference/complex/complex/arg.md
+++ b/reference/complex/complex/arg.md
@@ -6,9 +6,16 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  T arg(const complex&amp;lt;T&amp;gt;&amp;amp; x);          // (1) C++03
+  T
+    arg(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr T
+    arg(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 
-  complex&amp;lt;Promoted&amp;gt; arg(Arithmetic x); // (2) C++11 追加のオーバーロード
+  complex&amp;lt;Promoted&amp;gt;
+    arg(Arithmetic x);        // (2) C++11
+  constexpr complex&amp;lt;Promoted&amp;gt;
+    arg(Arithmetic x);        // (2) C++26
 }
 ```
 * Promoted[italic]
@@ -88,3 +95,5 @@ arg( (1,2) ) = 1.10715
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で拡張浮動小数点数型への対応が行われ、整数型も考慮されるようになった
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>asin -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/asin.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/asin.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/asin.md b/reference/complex/complex/asin.md
index a431d7678..bb9144bf8 100644
--- a/reference/complex/complex/asin.md
+++ b/reference/complex/complex/asin.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; asin(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    asin(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++11
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    asin(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -90,3 +94,8 @@ asin( (1,2) ) = (0.427079,1.52857)
 | [`tan`](tan.md)                    | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                  | 複素数の双曲線正接を求める。              |
 | [`asin`](/reference/cmath/asin.md) | 実数の逆正弦を求める。                    |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>asinh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/asinh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/asinh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/asinh.md b/reference/complex/complex/asinh.md
index f6b792eb5..573d5735c 100644
--- a/reference/complex/complex/asinh.md
+++ b/reference/complex/complex/asinh.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; asinh(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    asinh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++11
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    asinh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -107,3 +111,8 @@ asinh( (1,2) ) = (1.46935,1.06344)
 | [`tan`](tan.md)                      | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                    | 複素数の双曲線正接を求める。              |
 | [`asinh`](/reference/cmath/asinh.md) | 実数の逆双曲線正弦を求める。              |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atan -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/atan.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/atan.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/atan.md b/reference/complex/complex/atan.md
index f118cfcfb..5ef964f86 100644
--- a/reference/complex/complex/atan.md
+++ b/reference/complex/complex/atan.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; atan(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    atan(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++11
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    atan(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -90,3 +94,8 @@ atan( (1,2) ) = (1.33897,0.402359)
 | [`tan`](tan.md)                    | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                  | 複素数の双曲線正接を求める。              |
 | [`atan`](/reference/cmath/atan.md) | 実数の逆正接を求める。                    |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atanh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/atanh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/atanh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/atanh.md b/reference/complex/complex/atanh.md
index 568f5b052..647d3a854 100644
--- a/reference/complex/complex/atanh.md
+++ b/reference/complex/complex/atanh.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; atanh(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    atanh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++11
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    atanh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -108,3 +112,8 @@ atanh( (1,2) ) = (0.173287,1.1781)
 | [`tan`](tan.md)                      | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                    | 複素数の双曲線正接を求める。              |
 | [`atanh`](/reference/cmath/atanh.md) | 実数の逆双曲線正接を求める。              |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>conj -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/conj.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/conj.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/conj.md b/reference/complex/complex/conj.md
index 6f3502a6e..ef7443fa5 100644
--- a/reference/complex/complex/conj.md
+++ b/reference/complex/complex/conj.md
@@ -6,12 +6,16 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; conj(const complex&amp;lt;T&amp;gt;&amp;amp; x);           // (1) C++03
-
+  complex&amp;lt;T&amp;gt;
+    conj(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
   template &amp;lt;class T&amp;gt;
-  constexpr complex&amp;lt;T&amp;gt; conj(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++20
+  constexpr complex&amp;lt;T&amp;gt;
+    conj(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++20
 
-  complex&amp;lt;Promoted&amp;gt; conj(Arithmetic x);           // (2) C++11 追加のオーバーロード
+  complex&amp;lt;Promoted&amp;gt;
+    conj(Arithmetic x);        // (2) C++11
+  constexpr complex&amp;lt;Promoted&amp;gt;
+    conj(Arithmetic x);        // (2) C++26
 }
 ```
 * Promoted[italic]
@@ -84,3 +88,5 @@ conj( (1,2) ) = (1,-2)
 - [P0415R1 Constexpr for `std::complex`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0415r1.html)
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で拡張浮動小数点数型への対応が行われ、整数型も考慮されるようになった
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で(2)が`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cos -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/cos.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/cos.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/cos.md b/reference/complex/complex/cos.md
index d57026ec7..23e94c54e 100644
--- a/reference/complex/complex/cos.md
+++ b/reference/complex/complex/cos.md
@@ -6,7 +6,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; cos(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    cos(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    cos(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -85,3 +89,8 @@ cos( (1,2) ) = (2.03272,-3.0519)
 | [`tan`](tan.md)                    | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                  | 複素数の双曲線正接を求める。              |
 | [`cos`](/reference/cmath/cos.md)   | 実数の余弦を求める。                      |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cosh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/cosh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/cosh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/cosh.md b/reference/complex/complex/cosh.md
index ac5945fa4..7c5a5b3c8 100644
--- a/reference/complex/complex/cosh.md
+++ b/reference/complex/complex/cosh.md
@@ -6,7 +6,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; cosh(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    cosh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    cosh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -102,3 +106,8 @@ cosh( (1,2) ) = (-0.642148,1.06861)
 | [`tan`](tan.md)                    | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                  | 複素数の双曲線正接を求める。              |
 | [`cosh`](/reference/cmath/cosh.md) | 実数の双曲線余弦を求める。                |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exp -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/exp.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/exp.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/exp.md b/reference/complex/complex/exp.md
index 4b9a7858d..e41786c5b 100644
--- a/reference/complex/complex/exp.md
+++ b/reference/complex/complex/exp.md
@@ -6,7 +6,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; exp(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    exp(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    exp(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -104,3 +108,8 @@ exp( (1,2) ) = (-1.1312,2.47173)
 | [`tan`](tan.md)                    | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                  | 複素数の双曲線正接を求める。              |
 | [`exp`](/reference/cmath/exp.md)   | 自然対数の底 e の累乗（実数）を求める。   |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>imag (非メンバ関数) -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/imag_free.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/imag_free.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/imag_free.md b/reference/complex/complex/imag_free.md
index 98a3e498b..486c8f8f7 100644
--- a/reference/complex/complex/imag_free.md
+++ b/reference/complex/complex/imag_free.md
@@ -11,9 +11,9 @@ namespace std {
   constexpr T imag(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++14
 
   complex&amp;lt;Promoted&amp;gt;
-    imag(Arithmetic x);                 // (2) C++11 追加のオーバーロード
+    imag(Arithmetic x);                 // (2) C++11
   constexpr complex&amp;lt;Promoted&amp;gt;
-    imag(Arithmetic x);                 // (2) C++14 追加のオーバーロード
+    imag(Arithmetic x);                 // (2) C++26
 }
 ```
 * Promoted[italic]
@@ -99,3 +99,5 @@ int main()
 - [N3302 Constexpr Library Additions: complex, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3302.html)
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で拡張浮動小数点数型への対応が行われ、整数型も考慮されるようになった
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で(2)が`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/log.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/log.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/log.md b/reference/complex/complex/log.md
index 33bf4de58..d8ae51087 100644
--- a/reference/complex/complex/log.md
+++ b/reference/complex/complex/log.md
@@ -6,7 +6,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; log(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    log(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    log(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -106,3 +110,8 @@ log( (1,2) ) = (0.804719,1.10715)
 | [`tan`](tan.md)                    | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                  | 複素数の双曲線正接を求める。              |
 | [`log`](/reference/cmath/log.md)   | 実数の自然対数を求める。                  |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log10 -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/log10.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/log10.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/log10.md b/reference/complex/complex/log10.md
index de363ba30..97c43987f 100644
--- a/reference/complex/complex/log10.md
+++ b/reference/complex/complex/log10.md
@@ -6,7 +6,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; log10(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    log10(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    log10(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -84,3 +88,8 @@ log10( (1,2) ) = (0.349485,0.480829)
 | [`tan`](tan.md)                      | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                    | 複素数の双曲線正接を求める。              |
 | [`log10`](/reference/cmath/log10.md) | 実数の常用対数を求める。                  |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>norm -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/norm.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/norm.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/norm.md b/reference/complex/complex/norm.md
index 6406d40f8..244cb4675 100644
--- a/reference/complex/complex/norm.md
+++ b/reference/complex/complex/norm.md
@@ -6,12 +6,16 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  T norm(const complex&amp;lt;T&amp;gt;&amp;amp; x);           // (1) C++03
-
+  T
+    norm(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
   template &amp;lt;class T&amp;gt;
-  constexpr T norm(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++20
+  constexpr T
+    norm(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++20
 
-  complex&amp;lt;Promoted&amp;gt; norm(Arithmetic x);  // (2) C++11 追加のオーバーロード
+  complex&amp;lt;Promoted&amp;gt;
+    norm(Arithmetic x);        // (2) C++11
+  constexpr complex&amp;lt;Promoted&amp;gt;
+    norm(Arithmetic x);        // (2) C++26
 }
 ```
 * Promoted[italic]
@@ -91,3 +95,5 @@ norm( (1,2) ) = 5
 - [P0415R1 Constexpr for `std::complex`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0415r1.html)
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で拡張浮動小数点数型への対応が行われ、整数型も考慮されるようになった
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で(2)が`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>polar -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/polar.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/polar.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/polar.md b/reference/complex/complex/polar.md
index 158cc5674..7d9f91bba 100644
--- a/reference/complex/complex/polar.md
+++ b/reference/complex/complex/polar.md
@@ -6,7 +6,13 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; polar(const T&amp;amp; rho, const T&amp;amp; theta = 0);
+  complex&amp;lt;T&amp;gt;
+    polar(const T&amp;amp; rho,
+          const T&amp;amp; theta = 0); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    polar(const T&amp;amp; rho,
+          const T&amp;amp; theta = 0); // (1) C++26
 }
 ```
 
@@ -70,3 +76,8 @@ polar(1.0, pi / 4.0) = (0.707107,0.707107)
 | [`norm`](norm.md)                  | 複素数体のノルムを得る。               |
 | [`conj`](conj.md)                  | 共役複素数を得る。                     |
 | [`proj`](proj.md)                  | リーマン球面への射影を得る。           |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pow -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/pow.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/pow.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/pow.md b/reference/complex/complex/pow.md
index ada29ac86..b5352ff2b 100644
--- a/reference/complex/complex/pow.md
+++ b/reference/complex/complex/pow.md
@@ -9,16 +9,28 @@ namespace std {
   complex&amp;lt;T&amp;gt;
     pow(const complex&amp;lt;T&amp;gt;&amp;amp; x,
         const complex&amp;lt;T&amp;gt;&amp;amp; y);    // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    pow(const complex&amp;lt;T&amp;gt;&amp;amp; x,
+        const complex&amp;lt;T&amp;gt;&amp;amp; y);    // (1) C++26
 
   template &amp;lt;class T&amp;gt;
   complex&amp;lt;T&amp;gt;
     pow(const complex&amp;lt;T&amp;gt;&amp;amp; x,
         const T&amp;amp; y);             // (2) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    pow(const complex&amp;lt;T&amp;gt;&amp;amp; x,
+        const T&amp;amp; y);             // (2) C++26
 
   template &amp;lt;class T&amp;gt;
   complex&amp;lt;T&amp;gt;
     pow(const T&amp;amp; x,
         const complex&amp;lt;T&amp;gt;&amp;amp; y);    // (3) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    pow(const T&amp;amp; x,
+        const complex&amp;lt;T&amp;gt;&amp;amp; y);    // (3) C++26
 
   template &amp;lt;class T&amp;gt;
   complex&amp;lt;T&amp;gt;
@@ -27,7 +39,10 @@ namespace std {
 
   complex&amp;lt;Promoted&amp;gt;
     pow(ArithmeticOrComplex1 x,
-        ArithmeticOrComplex2 y); // (5) C++11 追加のオーバーロード
+        ArithmeticOrComplex2 y); // (5) C++11
+  constexpr complex&amp;lt;Promoted&amp;gt;
+    pow(ArithmeticOrComplex1 x,
+        ArithmeticOrComplex2 y); // (5) C++26
 }
 ```
 * Promoted[italic]
@@ -138,3 +153,5 @@ pow( (1,2), (3,4) ) = (0.12901,0.0339241)
 ## 参照
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で拡張浮動小数点数型への対応が行われた
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>proj -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/proj.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/proj.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/proj.md b/reference/complex/complex/proj.md
index e2d811944..e395b6bc1 100644
--- a/reference/complex/complex/proj.md
+++ b/reference/complex/complex/proj.md
@@ -7,9 +7,16 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; proj(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++11
+  complex&amp;lt;T&amp;gt;
+    proj(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++11
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    proj(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 
-  complex&amp;lt;Promoted&amp;gt; proj(Arithmetic x); // (2) C++11 追加のオーバーロード
+  complex&amp;lt;Promoted&amp;gt;
+    proj(Arithmetic x);        // (2) C++11
+  constexpr complex&amp;lt;Promoted&amp;gt;
+    proj(Arithmetic x);        // (2) C++26
 }
 ```
 * Promoted[italic]
@@ -119,3 +126,5 @@ proj( (nan,-inf) ) = (inf,-0)
 - [LWG Issue 781. `std::complex` should add missing C99 functions](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#781)
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で拡張浮動小数点数型への対応が行われ、整数型も考慮されるようになった
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>real (非メンバ関数) -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/real_free.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/real_free.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/real_free.md b/reference/complex/complex/real_free.md
index bd5f8876c..24508361a 100644
--- a/reference/complex/complex/real_free.md
+++ b/reference/complex/complex/real_free.md
@@ -6,14 +6,16 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  T real(const complex&amp;lt;T&amp;gt;&amp;amp; x);           // (1) C++03
+  T
+    real(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
   template &amp;lt;class T&amp;gt;
-  constexpr T real(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++14
+  constexpr T
+    real(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++14
 
   complex&amp;lt;Promoted&amp;gt;
-    real(Arithmetic x);           // (2) C++11 追加のオーバーロード
+    real(Arithmetic x);        // (2) C++11
   constexpr complex&amp;lt;Promoted&amp;gt;
-    real(Arithmetic x);           // (2) C++14 追加のオーバーロード
+    real(Arithmetic x);        // (2) C++26
 }
 ```
 * Promoted[italic]
@@ -99,3 +101,5 @@ int main()
 - [N3302 Constexpr Library Additions: complex, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3302.html)
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
     - C++23で拡張浮動小数点数型への対応が行われ、整数型も考慮されるようになった
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で(2)が`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sin -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/sin.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/sin.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/sin.md b/reference/complex/complex/sin.md
index 4c261b602..f33626e48 100644
--- a/reference/complex/complex/sin.md
+++ b/reference/complex/complex/sin.md
@@ -6,7 +6,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; sin(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    sin(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    sin(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -85,3 +89,8 @@ sin( (1,2) ) = (3.16578,1.9596)
 | [`tan`](tan.md)                    | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                  | 複素数の双曲線正接を求める。              |
 | [`sin`](/reference/cmath/sin.md)   | 実数の正弦を求める。                      |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sinh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/sinh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/sinh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/sinh.md b/reference/complex/complex/sinh.md
index 83c6b8004..180e77b34 100644
--- a/reference/complex/complex/sinh.md
+++ b/reference/complex/complex/sinh.md
@@ -6,7 +6,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; sinh(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    sinh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    sinh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -102,3 +106,8 @@ sinh( (1,2) ) = (-0.489056,1.40312)
 | [`tan`](tan.md)                    | 複素数の正接を求める。                    |
 | [`tanh`](tanh.md)                  | 複素数の双曲線正接を求める。              |
 | [`sinh`](/reference/cmath/sinh.md) | 実数の双曲線正弦を求める。                |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/sqrt.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/sqrt.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/sqrt.md b/reference/complex/complex/sqrt.md
index e1715b6d0..f1e1034df 100644
--- a/reference/complex/complex/sqrt.md
+++ b/reference/complex/complex/sqrt.md
@@ -7,7 +7,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; sqrt(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    sqrt(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    sqrt(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -125,3 +129,8 @@ sqrt(-1.0 - 1.0i) = (0.45509,-1.09868)
 | [`tan`](tan.md)                    | 複素数の正接を求める。         |
 | [`tanh`](tanh.md)                  | 複素数の双曲線正接を求める。   |
 | [`sqrt`](/reference/cmath/sqrt.md) | 実数の平方根を求める。         |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tan -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/tan.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/tan.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/tan.md b/reference/complex/complex/tan.md
index 95be8f736..bc3a34bd2 100644
--- a/reference/complex/complex/tan.md
+++ b/reference/complex/complex/tan.md
@@ -6,7 +6,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; tan(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    tan(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    tan(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -85,3 +89,8 @@ tan( (1,2) ) = (0.0338128,1.01479)
 | [`sqrt`](sqrt.md)                  | 複素数の平方根を求める。                  |
 | [`tanh`](tanh.md)                  | 複素数の双曲線正接を求める。              |
 | [`tan`](/reference/cmath/tan.md)   | 実数の正接を求める。                      |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tanh -- &lt;cmath&gt;と&lt;complex&gt;のconstexpr対応 (close #1198)</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/tanh.html"/>
      <id>617a9416409eb88df55edf6cd8b9437cb8c4c67f:reference/complex/complex/tanh.md</id>
      <updated>2024-01-23T15:16:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/tanh.md b/reference/complex/complex/tanh.md
index 7934cdba8..ee06c23dd 100644
--- a/reference/complex/complex/tanh.md
+++ b/reference/complex/complex/tanh.md
@@ -6,7 +6,11 @@
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  complex&amp;lt;T&amp;gt; tanh(const complex&amp;lt;T&amp;gt;&amp;amp; x);
+  complex&amp;lt;T&amp;gt;
+    tanh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++03
+  template &amp;lt;class T&amp;gt;
+  constexpr complex&amp;lt;T&amp;gt;
+    tanh(const complex&amp;lt;T&amp;gt;&amp;amp; x); // (1) C++26
 }
 ```
 
@@ -100,3 +104,8 @@ tanh( (1,2) ) = (1.16674,-0.243458)
 | [`sqrt`](sqrt.md)                  | 複素数の平方根を求める。       |
 | [`tan`](tan.md)                    | 複素数の正接を求める。         |
 | [`tanh`](/reference/cmath/tanh.md) | 実数の双曲線正接を求める。     |
+
+
+## 参照
+- [P1383R2 More constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;complex&amp;gt;`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p1383r2.pdf)
+    - C++26で`constexpr`対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-05-18T11:37:45.886703</updated>
  <id>fe39915f-b70c-428d-a4f1-8c190a6f6da3</id>

  
    <entry>
      <title>lcm -- lcm : オーバーフローの例が説明不足だったので、説明例を追加</title>
      <link href="https://cpprefjp.github.io/reference/numeric/lcm.html"/>
      <id>8bc82fcaa611e576f085d190d399713903dc785e:reference/numeric/lcm.md</id>
      <updated>2020-05-18T20:33:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/lcm.md b/reference/numeric/lcm.md
index a4d3a10da..41e8738b0 100644
--- a/reference/numeric/lcm.md
+++ b/reference/numeric/lcm.md
@@ -57,17 +57,25 @@ int main() {
   assert(std::lcm(std::lcm(3, 4), 6) == 12);
 
   std::vector&amp;lt;int&amp;gt; v = {3, 4, 6};
-  int r = std::accumulate(v.begin() + 1, v.end(), v.front(), [](int m, int n) {
+  int r = std::accumulate(v.begin(), v.end(), 1, [](int m, int n) {
     return std::lcm(m, n);
   });
   assert(r == 12);
 
-  // オーバーフローする例
-  auto m = std::numeric_limits&amp;lt;std::uint32_t&amp;gt;::max();
-  auto n = m - 1;
-  std::cout &amp;lt;&amp;lt; &amp;#34;lcm(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;)      &amp;#34; &amp;lt;&amp;lt; std::lcm(m, n) &amp;lt;&amp;lt; std::endl;
-  auto g = std::gcd(m, n);  // 1
-  std::cout &amp;lt;&amp;lt; &amp;#34;true lcm(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;) &amp;#34; &amp;lt;&amp;lt; std::fabs(m) * std::fabs(n / g) &amp;lt;&amp;lt; std::endl;
+  // 以下、オーバーフローしやすい例
+  uint16_t m = 20000;
+  uint16_t n = 40000;
+
+  // 標準std::lcm()の動作は実装定義
+  std::cout &amp;lt;&amp;lt; &amp;#34;std::lcm(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;)     &amp;#34; &amp;lt;&amp;lt; std::lcm(m, n) &amp;lt;&amp;lt; std::endl;
+
+  // 公式通りのオーバーフローしやすい最小公倍数の実装
+  volatile uint16_t t = m * n; // 最適化回避のための変数
+  std::cout &amp;lt;&amp;lt; &amp;#34;formal lcm(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;)   &amp;#34; &amp;lt;&amp;lt; (t / std::gcd(m, n)) &amp;lt;&amp;lt; std::endl;
+
+  // オーバーフローしにくいよう公式を改良した実装
+  auto g = std::gcd(m, n);
+  std::cout &amp;lt;&amp;lt; &amp;#34;improved lcm(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;) &amp;#34; &amp;lt;&amp;lt; m * (n / g) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::lcm[color ff0000]
@@ -79,8 +87,9 @@ int main() {
 
 ### 出力例
 ```
-lcm(4294967295, 4294967294)      2
-true lcm(4294967295, 4294967294) 1.84467e+19
+std::lcm(20000, 40000)     40000
+formal lcm(20000, 40000)   0
+improved lcm(20000, 40000) 40000
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gcd -- gcd, lcm : サンプルコードに単純なケース、3つ以上のケースを追加</title>
      <link href="https://cpprefjp.github.io/reference/numeric/gcd.html"/>
      <id>8ee97741a8088f504276120d042404d6e15651f5:reference/numeric/gcd.md</id>
      <updated>2020-05-18T19:52:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/gcd.md b/reference/numeric/gcd.md
index 66ddbee3a..975c39bcc 100644
--- a/reference/numeric/gcd.md
+++ b/reference/numeric/gcd.md
@@ -36,29 +36,47 @@ namespace std {
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 #include &amp;lt;limits&amp;gt;
 #include &amp;lt;numeric&amp;gt;
-#include &amp;lt;type_traits&amp;gt;
+#include &amp;lt;vector&amp;gt;
 
 int main() {
+  assert(std::gcd(12, 42) == 6);
+  assert(std::gcd(42, 12) == 6);
+
+  // コンパイル時に最大公約数を求めることもできる
   static_assert(std::gcd(0, 0) == 0);
   static_assert(std::gcd(3u, -7l) == 1);
 
-  // 符号付き整数の場合戻り値が負になることがある
-  using T = int32_t;
+  // 3つの値の最大公約数を求める
+  assert(std::gcd(std::gcd(12, 42), 72) == 6);
+
+  std::vector&amp;lt;int&amp;gt; v = {12, 42, 72};
+  int r = std::accumulate(v.begin() + 1, v.end(), v.front(), [](int m, int n) {
+    return std::gcd(m, n);
+  });
+  assert(r == 6);
+
+  // 符号付き整数の場合、戻り値が負になることがある
+  using T = std::int32_t;
   constexpr auto m = std::numeric_limits&amp;lt;T&amp;gt;::min();
   const auto gs = std::gcd&amp;lt;T, T&amp;gt;(m, m);  // -m が int32_t で表せないと m &amp;lt; 0 になる
   std::cout &amp;lt;&amp;lt; &amp;#34;gcd&amp;lt;int32_t, int32_t&amp;gt;(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;)   &amp;#34; &amp;lt;&amp;lt; gs &amp;lt;&amp;lt; std::endl;
 
-  // 符号なし整数にすれば戻り値は正
-  using U = std::make_unsigned&amp;lt;T&amp;gt;::type;  // uint32_t
+  // 符号なし整数にすれば戻り値は正になる
+  using U = std::uint32_t;
   const auto gu = std::gcd&amp;lt;U, U&amp;gt;(m, m);
   std::cout &amp;lt;&amp;lt; &amp;#34;gcd&amp;lt;uint32_t, uint32_t&amp;gt;(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;) &amp;#34; &amp;lt;&amp;lt; gu &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::gcd[color ff0000]
 * min[link /reference/limits/numeric_limits/min.md]
-* std::make_unsigned[link /reference/type_traits/make_unsigned.md]
+* std::int32_t[link /reference/cstdint/int32_t.md]
+* std::uint32_t[link /reference/cstdint/uint32_t.md]
+* std::accumulate[link accumulate.md]
+* v.front()[link /reference/vector/vector/front.md]
 
 ### 出力例
 ```
@@ -79,12 +97,12 @@ gcd&amp;lt;uint32_t, uint32_t&amp;gt;(-2147483648, -2147483648) 2147483648
 
 ### 備考
 #### Clang (libc++)
-要件 2 を満たすかどうかチェックしないが、戻り値を `constexpr` 指定するとオーバーフロー時にコンパイルエラーとなることがある。
-要件 2 を満たさない場合、オーバーフローにより戻り値が負になることがある。
+- 要件 2 を満たすかどうかチェックしないが、戻り値を `constexpr` 指定するとオーバーフロー時にコンパイルエラーとなることがある。
+- 要件 2 を満たさない場合、オーバーフローにより戻り値が負になることがある。
 
 #### GCC (libstdc++)
-要件 2 を満たすかどうかチェックしないが、戻り値を `constexpr` 指定するとオーバーフロー時にコンパイルエラーとなることがある。
-要件 2 を満たさない場合、オーバーフローにより戻り値が負になることがある。
+- 要件 2 を満たすかどうかチェックしないが、戻り値を `constexpr` 指定するとオーバーフロー時にコンパイルエラーとなることがある。
+- 要件 2 を満たさない場合、オーバーフローにより戻り値が負になることがある。
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lcm -- gcd, lcm : サンプルコードに単純なケース、3つ以上のケースを追加</title>
      <link href="https://cpprefjp.github.io/reference/numeric/lcm.html"/>
      <id>8ee97741a8088f504276120d042404d6e15651f5:reference/numeric/lcm.md</id>
      <updated>2020-05-18T19:52:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/lcm.md b/reference/numeric/lcm.md
index 010ffd9c2..a4d3a10da 100644
--- a/reference/numeric/lcm.md
+++ b/reference/numeric/lcm.md
@@ -39,15 +39,31 @@ namespace std {
 ```cpp example
 #include &amp;lt;cmath&amp;gt;
 #include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;cstdint&amp;gt;
 #include &amp;lt;limits&amp;gt;
 #include &amp;lt;numeric&amp;gt;
+#include &amp;lt;vector&amp;gt;
 
 int main() {
+  assert(std::lcm(3, 4) == 12);
+  assert(std::lcm(4, 3) == 12);
+
+  // コンパイル時に最小公倍数を求めることもできる
   static_assert(std::lcm(0, 1) == 0);
   static_assert(std::lcm(4u, -6l) == 12);
 
+  // 3つの値の最小公倍数を求める
+  assert(std::lcm(std::lcm(3, 4), 6) == 12);
+
+  std::vector&amp;lt;int&amp;gt; v = {3, 4, 6};
+  int r = std::accumulate(v.begin() + 1, v.end(), v.front(), [](int m, int n) {
+    return std::lcm(m, n);
+  });
+  assert(r == 12);
+
   // オーバーフローする例
-  auto m = std::numeric_limits&amp;lt;uint32_t&amp;gt;::max();
+  auto m = std::numeric_limits&amp;lt;std::uint32_t&amp;gt;::max();
   auto n = m - 1;
   std::cout &amp;lt;&amp;lt; &amp;#34;lcm(&amp;#34; &amp;lt;&amp;lt; m &amp;lt;&amp;lt; &amp;#34;, &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; &amp;#34;)      &amp;#34; &amp;lt;&amp;lt; std::lcm(m, n) &amp;lt;&amp;lt; std::endl;
   auto g = std::gcd(m, n);  // 1
@@ -56,7 +72,10 @@ int main() {
 ```
 * std::lcm[color ff0000]
 * max[link /reference/limits/numeric_limits/max.md]
+* std::uint32_t[link /reference/cstdint/uint32_t.md]
 * std::fabs[link /reference/cmath/fabs.md]
+* std::accumulate[link accumulate.md]
+* v.front()[link /reference/vector/vector/front.md]
 
 ### 出力例
 ```
@@ -77,16 +96,14 @@ true lcm(4294967295, 4294967294) 1.84467e+19
 
 ### 備考
 #### Clang (libc++)
-要件 2 を満たすかどうかチェックしない。
-
-[`_LIBCPP_DEBUG`](http://releases.llvm.org/5.0.0/projects/libcxx/docs/DesignDocs/DebugMode.html#using-debug-mode) マクロが
-`0` 以上の場合、要件 3 を満たさなければ [`abort`](/reference/cstdlib/abort.md) する。
-ただし 4 系では [`&amp;lt;limits&amp;gt;`](/reference/limits.md) を `&amp;lt;numeric&amp;gt;` より先に include しなければならない。
-それ以外の場合（デフォルト）、オーバーフローにより戻り値が不正になることがある。
+- 要件 2 を満たすかどうかチェックしない。
+- [`_LIBCPP_DEBUG`](http://releases.llvm.org/5.0.0/projects/libcxx/docs/DesignDocs/DebugMode.html#using-debug-mode) マクロが`0` 以上の場合、要件 3 を満たさなければ [`abort`](/reference/cstdlib/abort.md) する。
+    - ただしバージョン 4 系では [`&amp;lt;limits&amp;gt;`](/reference/limits.md) を `&amp;lt;numeric&amp;gt;` より先に include しなければならない。
+    - それ以外の場合（デフォルト）、オーバーフローにより戻り値が不正になることがある。
 
 #### GCC (libstdc++)
-要件 2, 3 を満たすかどうかチェックしない。
-要件 3 を満たさない場合、オーバーフローにより戻り値が不正になることがある。
+- 要件 2, 3 を満たすかどうかチェックしない。
+- 要件 3 を満たさない場合、オーバーフローにより戻り値が不正になることがある。
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>e -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/e.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/e.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/e.md b/reference/numbers/e.md
index 5426dacda..e622ce856 100644
--- a/reference/numbers/e.md
+++ b/reference/numbers/e.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T e_v = unspecified;    // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>egamma -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/egamma.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/egamma.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/egamma.md b/reference/numbers/egamma.md
index 454675759..637ee50ee 100644
--- a/reference/numbers/egamma.md
+++ b/reference/numbers/egamma.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T egamma_v = unspecified;         // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inv_pi -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/inv_pi.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/inv_pi.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/inv_pi.md b/reference/numbers/inv_pi.md
index 82d498033..deca18da9 100644
--- a/reference/numbers/inv_pi.md
+++ b/reference/numbers/inv_pi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T inv_pi_v = unspecified;         // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inv_sqrt3 -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/inv_sqrt3.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/inv_sqrt3.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/inv_sqrt3.md b/reference/numbers/inv_sqrt3.md
index 43f21b4c3..a480ed450 100644
--- a/reference/numbers/inv_sqrt3.md
+++ b/reference/numbers/inv_sqrt3.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T inv_sqrt3_v = unspecified;            // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inv_sqrtpi -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/inv_sqrtpi.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/inv_sqrtpi.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/inv_sqrtpi.md b/reference/numbers/inv_sqrtpi.md
index 2e79d6980..608522cec 100644
--- a/reference/numbers/inv_sqrtpi.md
+++ b/reference/numbers/inv_sqrtpi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T inv_sqrtpi_v = unspecified;             // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ln10 -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/ln10.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/ln10.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/ln10.md b/reference/numbers/ln10.md
index 1595c0d21..eedebb9ec 100644
--- a/reference/numbers/ln10.md
+++ b/reference/numbers/ln10.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T ln10_v = unspecified;      // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ln2 -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/ln2.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/ln2.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/ln2.md b/reference/numbers/ln2.md
index a55e513c7..2f7d3aedd 100644
--- a/reference/numbers/ln2.md
+++ b/reference/numbers/ln2.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T ln2_v = unspecified;      // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log10e -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/log10e.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/log10e.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/log10e.md b/reference/numbers/log10e.md
index 8fdec6eaf..52b94f1d4 100644
--- a/reference/numbers/log10e.md
+++ b/reference/numbers/log10e.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T log10e_v = unspecified;         // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>log2e -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/log2e.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/log2e.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/log2e.md b/reference/numbers/log2e.md
index f44a53b3b..2de00153c 100644
--- a/reference/numbers/log2e.md
+++ b/reference/numbers/log2e.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T log2e_v = unspecified;        // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>phi -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/phi.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/phi.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/phi.md b/reference/numbers/phi.md
index 1ccd1f0d6..b9c34a54d 100644
--- a/reference/numbers/phi.md
+++ b/reference/numbers/phi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T phi_v = unspecified;      // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pi -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/pi.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/pi.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/pi.md b/reference/numbers/pi.md
index b7645061f..7d8bab157 100644
--- a/reference/numbers/pi.md
+++ b/reference/numbers/pi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T pi_v = unspecified;     // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt2 -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/sqrt2.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/sqrt2.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/sqrt2.md b/reference/numbers/sqrt2.md
index 7b9ffec5a..cdd55ca99 100644
--- a/reference/numbers/sqrt2.md
+++ b/reference/numbers/sqrt2.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T sqrt2_v = unspecified;        // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt3 -- Merge pull request #760 from cpprefjp/fix-namespace-for-numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/sqrt3.html"/>
      <id>95b8959d7a4dc3452370c6aa2b08eefc0f1bab84:reference/numbers/sqrt3.md</id>
      <updated>2020-05-18T15:29:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/sqrt3.md b/reference/numbers/sqrt3.md
index b21512793..71de3ecfb 100644
--- a/reference/numbers/sqrt3.md
+++ b/reference/numbers/sqrt3.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T sqrt3_v = unspecified;        // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>e -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/e.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/e.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/e.md b/reference/numbers/e.md
index 5426dacda..e622ce856 100644
--- a/reference/numbers/e.md
+++ b/reference/numbers/e.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T e_v = unspecified;    // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>egamma -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/egamma.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/egamma.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/egamma.md b/reference/numbers/egamma.md
index 454675759..637ee50ee 100644
--- a/reference/numbers/egamma.md
+++ b/reference/numbers/egamma.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T egamma_v = unspecified;         // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>inv_pi -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/inv_pi.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/inv_pi.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/inv_pi.md b/reference/numbers/inv_pi.md
index 82d498033..deca18da9 100644
--- a/reference/numbers/inv_pi.md
+++ b/reference/numbers/inv_pi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T inv_pi_v = unspecified;         // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>inv_sqrt3 -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/inv_sqrt3.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/inv_sqrt3.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/inv_sqrt3.md b/reference/numbers/inv_sqrt3.md
index 43f21b4c3..a480ed450 100644
--- a/reference/numbers/inv_sqrt3.md
+++ b/reference/numbers/inv_sqrt3.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T inv_sqrt3_v = unspecified;            // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>inv_sqrtpi -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/inv_sqrtpi.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/inv_sqrtpi.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/inv_sqrtpi.md b/reference/numbers/inv_sqrtpi.md
index 2e79d6980..608522cec 100644
--- a/reference/numbers/inv_sqrtpi.md
+++ b/reference/numbers/inv_sqrtpi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T inv_sqrtpi_v = unspecified;             // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>ln10 -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/ln10.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/ln10.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/ln10.md b/reference/numbers/ln10.md
index 1595c0d21..eedebb9ec 100644
--- a/reference/numbers/ln10.md
+++ b/reference/numbers/ln10.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T ln10_v = unspecified;      // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>ln2 -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/ln2.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/ln2.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/ln2.md b/reference/numbers/ln2.md
index a55e513c7..2f7d3aedd 100644
--- a/reference/numbers/ln2.md
+++ b/reference/numbers/ln2.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T ln2_v = unspecified;      // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>log10e -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/log10e.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/log10e.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/log10e.md b/reference/numbers/log10e.md
index 8fdec6eaf..52b94f1d4 100644
--- a/reference/numbers/log10e.md
+++ b/reference/numbers/log10e.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T log10e_v = unspecified;         // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>log2e -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/log2e.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/log2e.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/log2e.md b/reference/numbers/log2e.md
index f44a53b3b..2de00153c 100644
--- a/reference/numbers/log2e.md
+++ b/reference/numbers/log2e.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T log2e_v = unspecified;        // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>phi -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/phi.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/phi.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/phi.md b/reference/numbers/phi.md
index 1ccd1f0d6..b9c34a54d 100644
--- a/reference/numbers/phi.md
+++ b/reference/numbers/phi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T phi_v = unspecified;      // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>pi -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/pi.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/pi.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/pi.md b/reference/numbers/pi.md
index b7645061f..7d8bab157 100644
--- a/reference/numbers/pi.md
+++ b/reference/numbers/pi.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T pi_v = unspecified;     // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt2 -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/sqrt2.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/sqrt2.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/sqrt2.md b/reference/numbers/sqrt2.md
index 7b9ffec5a..cdd55ca99 100644
--- a/reference/numbers/sqrt2.md
+++ b/reference/numbers/sqrt2.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T sqrt2_v = unspecified;        // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt3 -- std -&gt; std::numbers</title>
      <link href="https://cpprefjp.github.io/reference/numbers/sqrt3.html"/>
      <id>44e2b374b7f444259bc7bdd26a960fc9abb4f1d8:reference/numbers/sqrt3.md</id>
      <updated>2020-05-18T15:25:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/sqrt3.md b/reference/numbers/sqrt3.md
index b21512793..71de3ecfb 100644
--- a/reference/numbers/sqrt3.md
+++ b/reference/numbers/sqrt3.md
@@ -5,7 +5,7 @@
 * cpp20[meta cpp]
 
 ```cpp
-namespace std {
+namespace std::numbers {
   template &amp;lt;class T&amp;gt;
   inline constexpr T sqrt3_v = unspecified;        // (1)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>I</name>
        <email>wx257osn2@yahoo.co.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>評価されない文脈でのラムダ式 -- 評価されない文脈でのラムダ式 : リンク追加</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.html"/>
      <id>103fb43d9ad99f3c6f684a1c1c028bc0387f6276:lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md</id>
      <updated>2020-05-17T01:28:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
index 3399bf046..1429ec81f 100644
--- a/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
+++ b/lang/cpp20/wording_for_lambdas_in_unevaluated_contexts.md
@@ -118,7 +118,7 @@ f(0);   // error!
 
 ## 例
 
-「[状態を持たないラムダ式を、デフォルト構築可能、代入可能とする](/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md.nolink)」のサンプルコードを参照。
+「[状態を持たないラムダ式を、デフォルト構築可能、代入可能とする](/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md)」のサンプルコードを参照。
 
 ## この機能が必要になった背景・経緯
 
@@ -131,7 +131,7 @@ C++17までは、ラムダ式をSFINAEの文脈で用いて擬似的なコンセ
 ただし、ラムダ式が外部リンケージを持つエンティティのシグネチャに現れる事は相変わらず禁止されている。ラムダ式を用いてSFINAEするなど、そのような事がしたい場合には[コンセプト](./concepts.md)を用いる事でより容易に目的を達成できる。
 
 ## 関連項目
-- [状態を持たないラムダ式を、デフォルト構築可能、代入可能とする](/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md.nolink)
+- [状態を持たないラムダ式を、デフォルト構築可能、代入可能とする](/lang/cpp20/default_constructible_and_assignable_stateless_lambdas.md)
 
 ## 参照
 - [P0315R0 Wording for lambdas in unevaluated contexts](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0315r0.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
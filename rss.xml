<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-05-15T03:29:39.995743</updated>
  <id>fe4dc8a0-fd28-4cb0-9ea2-43929f6f37e6</id>

  
    <entry>
      <title>format -- format : C++26対応としてポインタ値を大文字で出力するPオプションを追加 (close #1187)</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>0b3b945a6d99aa56c955e2abbc367af09a3fa85c:reference/format/format.md</id>
      <updated>2024-05-15T12:25:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 8745522d7..2f280f494 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -155,9 +155,10 @@ string s3 = format(&amp;#34;{} {1}&amp;#34;,  &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // コンパイルエラー
 
 #### ポインタの場合
 
-| type       | 意味               | 効果                                                                                                            |
-|:-----------|:-------------------|:----------------------------------------------------------------------------------------------------------------|
-| p          | アドレスを出力する | `0x` につづいて、`to_chars(first, last, reinterpret_cast&amp;lt;uintptr_t&amp;gt;(value), 16)` の結果を出力する               |
+| type | 意味               | 効果                                                                                              | 対応バージョン |
+|:-----|:-------------------|:--------------------------------------------------------------------------------------------------|----------------|
+| p    | アドレスを出力する | `0x` につづいて、`to_chars(first, last, reinterpret_cast&amp;lt;uintptr_t&amp;gt;(value), 16)` の結果を出力する | C++20 |
+| P    | アドレスを出力する | pと基本的に同じだが、9桁を超える場合に大文字にし、先頭に`0X`をつける | C++26 |
 
 デフォルトは `p`。
 
@@ -682,3 +683,5 @@ wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... ar
 - [P2286R8 Formatting Ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2286r8.html)
     - C++23から、Range・コンテナ、`pair`、`tuple`のフォーマット出力、および文字・文字列のデバッグ指定 (`&amp;#34;?&amp;#34;`) が追加された
 - [P2418R2 Add support for `std::generator`-like types to `std::format`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2418r2.html)
+- [P2510R3 Formatting pointers](https://open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2510r3.pdf)
+    - C++26から、ポインタ値を大文字で出力する`P`オプションが追加された
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stacktrace -- basic_stacktrace : libstdc++は実装としてシグナル安全であることを記載</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace.html"/>
      <id>8f62ba9a9a6848dfc540d39796ad29fc2ffc3d26:reference/stacktrace/basic_stacktrace.md</id>
      <updated>2024-05-14T14:43:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace.md b/reference/stacktrace/basic_stacktrace.md
index 49bad48e2..9b92d325f 100644
--- a/reference/stacktrace/basic_stacktrace.md
+++ b/reference/stacktrace/basic_stacktrace.md
@@ -27,9 +27,11 @@ namespace std {
 
 
 ### 備考
-- このクラスは、シグナル安全ではない
+- このクラスは、仕様としてシグナル安全ではない
     - 元となった[Boost.Stacktraceライブラリ](https://boost.org/libs/stacktrace)の実装はシグナルハンドラ中でもスタックトレースを出力できる機能を提供するが、標準の本機能はその機能を提供しない
     - そのような機能は一部のプラットフォームでは実装できないためである
+    - ただし、実装がシグナル安全である場合がある
+        - GCC (libstdc++) が内部で使用している[libbacktrace](https://github.com/ianlancetaylor/libbacktrace)ライブラリは、シグナル安全である。ただしlibstdc++の実装仕様としてシグナル安全であるという明記はない
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stacktrace_entry -- stacktrace_entry : 概要文章を追加。C++23の&lt;stacktrace&gt;は完了</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/stacktrace_entry.html"/>
      <id>43fb601fc298ae3c3467adbac399598a87c486ee:reference/stacktrace/stacktrace_entry.md</id>
      <updated>2024-05-14T14:01:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/stacktrace_entry.md b/reference/stacktrace/stacktrace_entry.md
index 7f419f5cf..fd95a8859 100644
--- a/reference/stacktrace/stacktrace_entry.md
+++ b/reference/stacktrace/stacktrace_entry.md
@@ -11,7 +11,9 @@ namespace std {
 ```
 
 ## 概要
+`stacktrace_entry`は、スタックトレースの各エントリ (行) を表すクラスであり、各エントリの情報を問い合せる操作を提供する。
 
+このクラスは、[`regular`](/reference/concepts/regular.md)および[`three_way_comparable`](/reference/compare/three_way_comparable.md)`&amp;lt;`[`strong_ordering`](/reference/compare/strong_ordering.md)`&amp;gt;`のモデルである。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stacktrace_entry -- stacktrace_entry : 残りのメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/stacktrace_entry.html"/>
      <id>29081528d7c6ff6087cc1ed28f3bd04a9ec0c515:reference/stacktrace/stacktrace_entry.md</id>
      <updated>2024-05-14T13:55:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/stacktrace_entry.md b/reference/stacktrace/stacktrace_entry.md
index 8412dcdbc..7f419f5cf 100644
--- a/reference/stacktrace/stacktrace_entry.md
+++ b/reference/stacktrace/stacktrace_entry.md
@@ -19,9 +19,9 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](stacktrace_entry/op_constructor.md.nolink) | コンストラクタ | C++23 |
+| [`(constructor)`](stacktrace_entry/op_constructor.md) | コンストラクタ | C++23 |
 | `~stacktrace_entry();` | デストラクタ | C++23 |
-| [`operator=`](stacktrace_entry/op_assign.md.nolink) | 代入演算子 | C++23 |
+| `constexpr stacktrace_entry&amp;amp; operator=(const stacktrace_entry&amp;amp; other) noexcept;` | 代入演算子 | C++23 |
 
 
 ### 観測
@@ -53,23 +53,23 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator&amp;lt;&amp;lt;`](stacktrace_entry/op_ostream.md.nolink) | 出力ストリームに出力する | C++23 |
+| [`operator&amp;lt;&amp;lt;`](stacktrace_entry/op_ostream.md) | 出力ストリームに出力する | C++23 |
 
 
 ### 文字列への変換
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`to_string`](stacktrace_entry/to_string.md.nolink) | 文字列に変換する | C++23 |
+| [`to_string`](stacktrace_entry/to_string.md) | 文字列に変換する | C++23 |
 
 
 ### 比較演算子
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator==`](stacktrace_entry/op_equal.md.nolink) | 等値比較を行う | C++23 |
+| [`operator==`](stacktrace_entry/op_equal.md) | 等値比較を行う | C++23 |
 | `bool operator!=(const stacktrace_entry&amp;amp;, const stacktrace_entry&amp;amp;) noexcept;` | 非等値比較を行う (`==`により使用可能) | C++23 |
-| [`operator&amp;lt;=&amp;gt;`](stacktrace_entry/op_compare_3way.md.nolink) | 三方比較を行う | C++23 |
+| `friend constexpr strong_ordering operator&amp;lt;=&amp;gt;(const stacktrace_entry&amp;amp; x, const stacktrace_entry&amp;amp; y) noexcept;` | 三方比較を行う | C++23 |
 | `strong_ordering operator&amp;lt;(const stacktrace_entry&amp;amp;, const stacktrace_entry&amp;amp;) noexcept;` | 左辺が右辺より小さいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
 | `strong_ordering operator&amp;lt;=(const stacktrace_entry&amp;amp;, const stacktrace_entry&amp;amp;) noexcept;` | 左辺が右辺以下かを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
 | `strong_ordering operator&amp;gt;(const stacktrace_entry&amp;amp;, const stacktrace_entry&amp;amp;) noexcept;` | 左辺が右辺より大きいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- stacktrace_entry : 残りのメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/stacktrace_entry/op_constructor.html"/>
      <id>29081528d7c6ff6087cc1ed28f3bd04a9ec0c515:reference/stacktrace/stacktrace_entry/op_constructor.md</id>
      <updated>2024-05-14T13:55:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/stacktrace_entry/op_constructor.md b/reference/stacktrace/stacktrace_entry/op_constructor.md
new file mode 100644
index 000000000..7780923e2
--- /dev/null
+++ b/reference/stacktrace/stacktrace_entry/op_constructor.md
@@ -0,0 +1,33 @@
+# コンストラクタ
+* stacktrace[meta header]
+* std[meta namespace]
+* stacktrace_entry[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr stacktrace_entry() noexcept;                    // (1) C++23
+
+constexpr
+stacktrace_entry(const stacktrace_entry&amp;amp; other) noexcept; // (2) C++23
+```
+
+## 概要
+`stacktrace_entry`オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : コピー構築
+
+
+## 事後条件
+- (1) : `*this`が空になること
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 12
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- stacktrace_entry : 残りのメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/stacktrace_entry/op_equal.html"/>
      <id>29081528d7c6ff6087cc1ed28f3bd04a9ec0c515:reference/stacktrace/stacktrace_entry/op_equal.md</id>
      <updated>2024-05-14T13:55:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/stacktrace_entry/op_equal.md b/reference/stacktrace/stacktrace_entry/op_equal.md
new file mode 100644
index 000000000..5d29430fa
--- /dev/null
+++ b/reference/stacktrace/stacktrace_entry/op_equal.md
@@ -0,0 +1,67 @@
+# operator==
+* stacktrace[meta header]
+* std[meta namespace]
+* stacktrace_entry[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+friend bool operator==(const stacktrace_entry&amp;amp; x,
+                       const stacktrace_entry&amp;amp; y) noexcept;
+```
+
+## 概要
+`stacktrace_entry`同士の等値比較を行う。
+
+
+## 戻り値
+`x`と`y`が同じスタックトレースエントリを表すか、両方が空の場合のみ`true`を返す。
+
+
+## 備考
+- この演算子により、`operator!=`が使用可能になる
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::stacktrace st = std::stacktrace::current();
+  std::stacktrace_entry a = st[0];
+  std::stacktrace_entry b = st[0];
+  std::stacktrace_entry c = st[1];
+
+  assert(a == b);
+  assert(a != c);
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* std::stacktrace[link /reference/stacktrace/basic_stacktrace.md]
+* current[link /reference/stacktrace/basic_stacktrace/current.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 12
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [Hidden Friends](/article/lib/hidden_friends.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- stacktrace_entry : 残りのメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/stacktrace_entry/op_ostream.html"/>
      <id>29081528d7c6ff6087cc1ed28f3bd04a9ec0c515:reference/stacktrace/stacktrace_entry/op_ostream.md</id>
      <updated>2024-05-14T13:55:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/stacktrace_entry/op_ostream.md b/reference/stacktrace/stacktrace_entry/op_ostream.md
new file mode 100644
index 000000000..a7c215306
--- /dev/null
+++ b/reference/stacktrace/stacktrace_entry/op_ostream.md
@@ -0,0 +1,62 @@
+# operator&amp;lt;&amp;lt;
+* stacktrace[meta header]
+* std[meta namespace]
+* stacktrace_entry[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT, class traits&amp;gt;
+  basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
+    operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os,
+               const stacktrace_entry&amp;amp; f);
+```
+
+## 概要
+出力ストリームに出力する。
+
+
+## 効果
+以下と等価：
+
+```cpp
+return os &amp;lt;&amp;lt; to_string(f);
+```
+* to_string[link to_string.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::cout &amp;lt;&amp;lt; std::stacktrace::current()[0] &amp;lt;&amp;lt; std::endl;
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* std::stacktrace[link /reference/stacktrace/basic_stacktrace.md]
+* current[link /reference/stacktrace/basic_stacktrace/current.md]
+
+### 出力例 (GCC)
+```
+ g() at /app/example.cpp:5
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 12
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to_string -- stacktrace_entry : 残りのメンバ関数を追加</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/stacktrace_entry/to_string.html"/>
      <id>29081528d7c6ff6087cc1ed28f3bd04a9ec0c515:reference/stacktrace/stacktrace_entry/to_string.md</id>
      <updated>2024-05-14T13:55:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/stacktrace_entry/to_string.md b/reference/stacktrace/stacktrace_entry/to_string.md
new file mode 100644
index 000000000..105e00ca4
--- /dev/null
+++ b/reference/stacktrace/stacktrace_entry/to_string.md
@@ -0,0 +1,62 @@
+# to_string
+* stacktrace[meta header]
+* std[meta namespace]
+* stacktrace_entry[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  string to_string(const stacktrace_entry&amp;amp; f);
+}
+```
+* string[link /reference/string/basic_string.md]
+
+## 概要
+文字列化する。
+
+
+## 戻り値
+`f`のスタックトレースエントリ情報を説明する文字列を返す。
+
+
+## 備考
+- 実装への推奨として、説明文字列は、[`f.source_file()`](source_file.md)および[`f.source_line()`](source_line.md)の評価を含む情報を提供すべきである
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;stacktrace&amp;gt;
+
+void g() {
+  std::string entry = std::to_string(std::stacktrace::current()[0]);
+  std::cout &amp;lt;&amp;lt; entry &amp;lt;&amp;lt; std::endl;
+}
+
+void f() {
+  g();
+}
+
+int main() {
+  f();
+}
+```
+* std::to_string[color ff0000]
+* std::stacktrace[link /reference/stacktrace/basic_stacktrace.md]
+* current[link /reference/stacktrace/basic_stacktrace/current.md]
+
+### 出力例 (GCC)
+```
+ g() at /app/example.cpp:5
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 12
+- [Visual C++](/implementation.md#visual_cpp): ??
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_assertの診断メッセージにユーザーが生成した文字列の指定を許可 -- Update user-generated_static_assert_messages.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp26/user-generated_static_assert_messages.html"/>
      <id>1522cffa6522fbf69a64b0afc6602b0ff74bd481:lang/cpp26/user-generated_static_assert_messages.md</id>
      <updated>2024-05-14T13:00:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp26/user-generated_static_assert_messages.md b/lang/cpp26/user-generated_static_assert_messages.md
index 576d51655..e05ce729d 100644
--- a/lang/cpp26/user-generated_static_assert_messages.md
+++ b/lang/cpp26/user-generated_static_assert_messages.md
@@ -4,7 +4,7 @@
 ## 概要
 C++26では、[`static_assert`](/lang/cpp11/static_assert.md)に指定する表明失敗時の診断メッセージとして、文字列リテラルだけでなくユーザー定義型の文字列オブジェクトも指定できるようになる。
 
-例として、[`std::format()`](/reference/format/format.md)関数によって作られた[`std::string`](/reference/string/basic_string.md)オブジェクトも診断メッセージとして使用できる。
+例えば、将来的に[`std::format()`](/reference/format/format.md)関数が`constexpr`対応した場合、それによって作られた[`std::string`](/reference/string/basic_string.md)オブジェクトを診断メッセージとして使用できる。
 
 ```cpp example
 #include &amp;lt;cstdint&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
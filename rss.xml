<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-05-01T21:49:43.917890</updated>
  <id>61264d73-6497-4374-bdbc-ca0627309eb8</id>

  
    <entry>
      <title>__has_include -- __has_include: typo修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/has_include.html"/>
      <id>569a939b7ad55dcc0ca61c89cee18098c57d84fe:lang/cpp17/has_include.md</id>
      <updated>2021-05-02T06:44:44+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/has_include.md b/lang/cpp17/has_include.md
index ba82fcb8f..f1c370de7 100644
--- a/lang/cpp17/has_include.md
+++ b/lang/cpp17/has_include.md
@@ -95,4 +95,4 @@ has_include.cpp:23:4: warning: &amp;#34;fuga&amp;#34; is not found [-W#warnings]
 ```
 
 ## 参照
-- [PR0061R1 __has_include for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0061r1.html)
+- [P0061R1 __has_include for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0061r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akiko Kawai</name>
        <email>haruka.sao@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_shared -- Merge pull request #864 from takehirokj/fix_make_shared_example</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_shared.html"/>
      <id>ec54cae315fd396f28abde0f715141a5775a34e5:reference/memory/make_shared.md</id>
      <updated>2021-04-24T09:58:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_shared.md b/reference/memory/make_shared.md
index db2d2115e..8c8e64a84 100644
--- a/reference/memory/make_shared.md
+++ b/reference/memory/make_shared.md
@@ -85,7 +85,7 @@ namespace std {
 #include &amp;lt;iostream&amp;gt;
 
 int main() {
-  std::shared_ptr&amp;lt;int&amp;gt; sp = std::make_shared&amp;lt;int&amp;gt;();
+  std::shared_ptr&amp;lt;int&amp;gt; sp = std::make_shared&amp;lt;int&amp;gt;(42);
   if(sp) {
     std::cout &amp;lt;&amp;lt; *sp &amp;lt;&amp;lt; std::endl;
   }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>make_shared -- サンプルコードの結果が出力と合うように修正</title>
      <link href="https://cpprefjp.github.io/reference/memory/make_shared.html"/>
      <id>e6ea46fc9d5414fb21f66be706ed779aca5856b7:reference/memory/make_shared.md</id>
      <updated>2021-04-23T15:58:36-07:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/make_shared.md b/reference/memory/make_shared.md
index db2d2115e..8c8e64a84 100644
--- a/reference/memory/make_shared.md
+++ b/reference/memory/make_shared.md
@@ -85,7 +85,7 @@ namespace std {
 #include &amp;lt;iostream&amp;gt;
 
 int main() {
-  std::shared_ptr&amp;lt;int&amp;gt; sp = std::make_shared&amp;lt;int&amp;gt;();
+  std::shared_ptr&amp;lt;int&amp;gt; sp = std::make_shared&amp;lt;int&amp;gt;(42);
   if(sp) {
     std::cout &amp;lt;&amp;lt; *sp &amp;lt;&amp;lt; std::endl;
   }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Takehiro Kajihara</name>
        <email>takehiro6021@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- basic_string::operator[]: 説明を修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_at.html"/>
      <id>157d79c53cf6f8c1c70d2e8cbc87bcb0bfcd2793:reference/string/basic_string/op_at.md</id>
      <updated>2021-04-23T17:14:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_at.md b/reference/string/basic_string/op_at.md
index 758c1de41..677688a51 100644
--- a/reference/string/basic_string/op_at.md
+++ b/reference/string/basic_string/op_at.md
@@ -13,7 +13,7 @@ reference operator[](size_type pos) noexcept;             // (2) C++11
 ```
 
 ## 概要
-`pos` 番目目の要素への参照を取得する。
+`pos` 番目の要素への参照を取得する。
 
 
 ## 要件
@@ -23,13 +23,14 @@ reference operator[](size_type pos) noexcept;             // (2) C++11
 ## 戻り値
 - C++03
     - `pos &amp;lt;` [`size()`](size.md) の場合、`*(`[`begin()`](begin.md) `+ pos)` を返す。
-    - `pos ==` [`size()`](size.md)の場合、`charT()` の値を持ったオブジェクトへの参照を返す。
+    - `pos ==` [`size()`](size.md) の場合、(1) は `charT()` の値を持ったオブジェクトへの参照を返す。
     - それ以外の場合は、未定義動作。
 
 - C++11以降
     - `pos &amp;lt;` [`size()`](size.md) の場合、`*(`[`begin()`](begin.md) `+ pos)` を返す。
-    - そうでない場合は、`charT()` の値を持ったオブジェクトへの参照を返す。
-    - 後者の場合、参照を変更するべきではない。
+    - `pos ==` [`size()`](size.md) の場合、`charT()` の値を持ったオブジェクトへの参照を返す。
+    - それ以外の場合は、未定義動作。
+    - (2) において、`pos ==` [`size()`](size.md) の場合に返された参照を `charT()` 以外の値に書き換えた場合の動作は未定義。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Ryo Suzuki</name>
        <email>reputeless+github@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ほとんどの`volatile`を非推奨化 -- Merge pull request #863 from cpprefjp/tweak-depr-volatile</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecating_volatile.html"/>
      <id>c0f9470603d7229e8a9aec9de856a7844f951f30:lang/cpp20/deprecating_volatile.md</id>
      <updated>2021-04-22T19:21:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/deprecating_volatile.md b/lang/cpp20/deprecating_volatile.md
index 66537ae43..7ed5700a4 100644
--- a/lang/cpp20/deprecating_volatile.md
+++ b/lang/cpp20/deprecating_volatile.md
@@ -8,7 +8,7 @@ C++20より、`volatile`の本来の役割に照らして不正確、あるい
 非推奨となるのは次のもの
 
 1. `volatile`値に対する複合代入演算子（算術型・ポインタ型のみ）
-2. `volatile`値に対するインクリメント演算子（算術型・ポインタ型のみ）
+2. `volatile`値に対するインクリメント／デクリメント演算子（算術型・ポインタ型のみ）
 3. 間に`volatile`値がある場合の連鎖した代入演算子（非クラス型のみ）
 4. 関数引数のトップレベル`volatile`修飾
 5. 関数戻り値型のトップレベル`volatile`修飾
@@ -28,7 +28,7 @@ C++20より、`volatile`の本来の役割に照らして不正確、あるい
 
 そして、非`volatile`領域と`volatile`領域へのアクセスの間の相対的な順序が前後しない事まで保証していない。すなわち、`volatile`変数へのアクセスと通常の変数へのアクセスは順番が入れ替わりうる。
 
-また、`volatile`はC++メモリモデルの一部ではなく、`volatile`領域へのアクセス順序とはC++メモリモデルにおける観測可能な順序を意味しない。プロセッサはC++コード上での順序で読み取った`volatile`領域へのアクセス命令を、アウトオブオーダーで発行・実行することができる。メモリモデルにおいて動作が保証されている同期機構を用いない場合、あるコアにおける命令の実行順は、他のコア（あるいはプロセッサの外部）からは異なった順序で実行されたかのように観測されうる。
+また、`volatile`はマルチスレッドプログラムの実行順を規定するC++メモリモデルとは直接的な関係性を持たず、`volatile`領域へのアクセス順序とはC++メモリモデルにおける観測可能な順序を意味しない。プロセッサはC++コード上での順序で読み取った`volatile`領域へのアクセス命令を、アウトオブオーダーで発行・実行することができる。C++メモリモデルにおいて動作が保証されている同期機構を用いない場合、あるコアにおける命令の実行順は、他のコア（あるいはプロセッサの外部）からは異なった順序で実行されたかのように観測されうる。
 
 `volatile`は主として、プログラムの実行環境のハードウェアなどのプログラム外部の環境との通信手段の一つとして利用され、スレッド間のやりとりなどプログラム内部での通信の手段としては適さない。そのような`volatile`の正しい用法によるメモリの読み書きは、他のどの手段よりも移植性があり機能的にも優れており、言語機能として有用なものである。
 
@@ -38,7 +38,7 @@ C++20より、`volatile`の本来の役割に照らして不正確、あるい
 
 複合代入演算子とは`*= /= %=  += -= &amp;gt;&amp;gt;= &amp;lt;&amp;lt;= &amp;amp;= ^= |=`の10個の演算子のことで、ある操作とその結果の代入をまとめて行うような演算子のことである。
 
-複合代入演算子およびインクリメント演算子は、「読み出し - 更新（処理） - 書き込み」という3つの操作を1文で行う。
+複合代入演算子およびインクリメント演算子`++`とデクリメント演算子`--`は、「読み出し - 更新（処理） - 書き込み」という3つの操作を1文で行う。（簡素化のため、以降は`++`/`--`をまとめてインクリメント演算子と表記する。）
 
 ```cpp
 volatile int a = 0;
@@ -223,7 +223,7 @@ auto&amp;amp;&amp;amp; [a, b, c] = f();  // OK、一時オブジェクト内各要素へのバ
 
 `volatile`なアクセスは不可分ではなく、順序保証がなく、各バイトに正確に一度だけアクセスされ、コンパイラの最適化の対象とならない。
 
-*atomic*なアクセスは不可分であり（原子性が保証され）、メモリモデルによってその順序が保証され、ループによって処理される可能性があり（各バイト一度だけのアクセスは保証されない）、コンパイラの最適化の対象となりえる。
+*atomic*なアクセスは不可分であり（原子性が保証され）、C++メモリモデルによってその順序が保証され、ループによって処理される可能性があり（各バイト一度だけのアクセスは保証されない）、コンパイラの最適化の対象となりえる。
 
 `volatile std::atomic&amp;lt;T&amp;gt;`はこれらの性質を組み合わせたものとなる事が期待されるが、そうなっていない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-03-22T20:12:30.477136</updated>
  <id>782bd0dd-62a4-477e-8694-8188827d55d9</id>

  
    <entry>
      <title>iota -- C++バージョンを修正</title>
      <link href="https://cpprefjp.github.io/reference/numeric/ranges_iota.html"/>
      <id>9a3b8540a502b01d7439d2d2aa9d1cc4f3349d73:reference/numeric/ranges_iota.md</id>
      <updated>2022-03-23T05:07:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/ranges_iota.md b/reference/numeric/ranges_iota.md
index f84d1aa58..fb394b4c7 100644
--- a/reference/numeric/ranges_iota.md
+++ b/reference/numeric/ranges_iota.md
@@ -2,7 +2,7 @@
 * numeric[meta header]
 * std::ranges[meta namespace]
 * function template[meta id-type]
-* cpp13[meta cpp]
+* cpp23[meta cpp]
 
 ```cpp
 namespace std::ranges {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iota -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/numeric/ranges_iota.html"/>
      <id>0081fc999ce54fd1740f72b6869cc087def42507:reference/numeric/ranges_iota.md</id>
      <updated>2022-03-23T04:57:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/ranges_iota.md b/reference/numeric/ranges_iota.md
index 56ff2ded5..f84d1aa58 100644
--- a/reference/numeric/ranges_iota.md
+++ b/reference/numeric/ranges_iota.md
@@ -22,7 +22,7 @@ namespace std::ranges {
 * indirectly_writable[link /reference/iterator/indirectly_writable.md]
 * output_range[link /reference/ranges/output_range.md]
 * borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
-* iota_result[link /reference/algorithm/out_value_result.md]
+* iota_result[link /reference/algorithm/ranges_out_value_result.md]
 
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- リンク修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>9aa342559d767b167b218e694e34820d3d0418eb:reference/algorithm.md</id>
      <updated>2022-03-23T04:55:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index 1da373fe2..cbd0376a7 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -416,6 +416,7 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`ranges::in_out_out_result`](algorithm/ranges_in_out_out_result.md) | 3つのイテレータを格納する型              | C++20          |
 | [`ranges::min_max_result`](algorithm/ranges_min_max_result.md)       | 2つの値または参照を格納する型            | C++20          |
 | [`ranges::in_found_result`](algorithm/ranges_in_found_result.md)     | イテレータとbool値を格納する型           | C++20          |
+| [`ranges::out_value_result`](algorithm/ranges_out_value_result.md)   | イテレータと値を格納する型               | C++23          |
 
 ## 関連項目
 - [`&amp;lt;numeric&amp;gt;`](/reference/numeric.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>out_value_result -- ranges::iotaの説明を追加</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_out_value_result.html"/>
      <id>6645ce377460d60b00166d3da0ec4fe81b74e4b1:reference/algorithm/ranges_out_value_result.md</id>
      <updated>2022-03-23T03:42:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_out_value_result.md b/reference/algorithm/ranges_out_value_result.md
new file mode 100644
index 000000000..7433145f3
--- /dev/null
+++ b/reference/algorithm/ranges_out_value_result.md
@@ -0,0 +1,79 @@
+# out_value_result
+* algorithm[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;class O, class T&amp;gt;
+  struct out_value_result {
+    [[no_unique_address]] O out;
+    [[no_unique_address]] T value;
+ 
+    template&amp;lt;class O2, class T2&amp;gt;
+      requires convertible_to&amp;lt;const O&amp;amp;, O2&amp;gt; &amp;amp;&amp;amp; convertible_to&amp;lt;const T&amp;amp;, T2&amp;gt;
+    constexpr operator out_value_result&amp;lt;O2, T2&amp;gt;() const &amp;amp; {
+      return {out, value};
+    }
+ 
+    template&amp;lt;class O2, class T2&amp;gt;
+      requires convertible_to&amp;lt;O, O2&amp;gt; &amp;amp;&amp;amp; convertible_to&amp;lt;T, T2&amp;gt;
+    constexpr operator out_value_result&amp;lt;O2, T2&amp;gt;() &amp;amp;&amp;amp; {
+      return {std::move(out), std::move(value)};
+    }
+  };
+
+  // (2)
+  template&amp;lt; class O, class T &amp;gt;
+  using iota_result = out_value_result&amp;lt;O, T&amp;gt;;
+}
+```
+* no_unique_address[link /lang/cpp20/language_support_for_empty_objects.md]
+* convertible_to[link /reference/concepts/convertible_to.md]
+* std::move[link /reference/utility/move.md]
+
+## 概要
+* (1): イテレータと値を格納する型
+* (2): [`ranges::iota`](/reference/numeric/ranges_iota.md)で使用するエイリアス
+
+この型は、関数が出力用に範囲を受け取る場合に、処理した範囲の末尾と、それとは別の出力を返すために使用される。
+
+標準アルゴリズム関数ではこの型を直接返す代わりに、関数毎にエイリアスを定義している。
+
+
+## メンバ変数
+
+| 名前                            | 説明                 | 対応バージョン |
+|---------------------------------|----------------------|----------------|
+| `[[no_unique_address]] O out`   | 出力した範囲の末尾   | C++23          |
+| `[[no_unique_address]] T value` | イテレータとは別の値 | C++23          |
+
+
+## メンバ関数
+
+| 名前                                | 説明           | 対応バージョン |
+|-------------------------------------|----------------|----------------|
+| `operator out_value_result&amp;lt;O2, T2&amp;gt;` | 変換演算子     | C++23          |
+
+変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
+
+## 例
+(執筆中)
+
+### 出力
+(執筆中)
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [N4901 25 Algorithms library](https://timsong-cpp.github.io/cppwp/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>numeric -- ranges::iotaの説明を追加</title>
      <link href="https://cpprefjp.github.io/reference/numeric.html"/>
      <id>6645ce377460d60b00166d3da0ec4fe81b74e4b1:reference/numeric.md</id>
      <updated>2022-03-23T03:42:11+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;numeric&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt; ヘッダは数値のシーケンスの処理に特化したアルゴリズムを定義する。&lt;/p&gt;
&lt;h2&gt;集計&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/accumulate.html&#34;&gt;accumulate&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を集計する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/reduce.html&#34;&gt;reduce&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲を集計する&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/transform_reduce.html&#34;&gt;transform_reduce&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素を変換しながら集計する&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;内積&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/inner_product.html&#34;&gt;inner_product&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのシーケンスの内積を計算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;部分和&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/partial_sum.html&#34;&gt;partial_sum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の部分和を計算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/inclusive_scan.html&#34;&gt;inclusive_scan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の部分和を計算する (i番目の部分和にi番目の要素を含む)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/exclusive_scan.html&#34;&gt;exclusive_scan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の部分和を計算する (i番目の部分和にi番目の要素を含めない)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/transform_inclusive_scan.html&#34;&gt;transform_inclusive_scan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素を変換しながら部分和を計算する (i番目の部分和にi番目の要素を含む)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/transform_exclusive_scan.html&#34;&gt;transform_exclusive_scan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の要素を変換しながら部分和を計算する (i番目の部分和にi番目の要素を含めない)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;数列&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/adjacent_difference.html&#34;&gt;adjacent_difference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隣接する要素間の差を計算する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/iota.html&#34;&gt;iota&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された値から始まる整数列を生成する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/ranges_iota.html&#34;&gt;ranges::iota&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定された値から始まる整数列を生成する&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;最大公約数と最小公倍数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/gcd.html&#34;&gt;gcd&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最大公約数を求める&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/lcm.html&#34;&gt;lcm&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最小公倍数を求める&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;中点&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/numeric/midpoint.html&#34;&gt;midpoint&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値とポインタの中点を求める&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;より汎用的なアルゴリズム&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iota -- ranges::iotaの説明を追加</title>
      <link href="https://cpprefjp.github.io/reference/numeric/ranges_iota.html"/>
      <id>6645ce377460d60b00166d3da0ec4fe81b74e4b1:reference/numeric/ranges_iota.md</id>
      <updated>2022-03-23T03:42:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/ranges_iota.md b/reference/numeric/ranges_iota.md
new file mode 100644
index 000000000..56ff2ded5
--- /dev/null
+++ b/reference/numeric/ranges_iota.md
@@ -0,0 +1,102 @@
+# iota
+* numeric[meta header]
+* std::ranges[meta namespace]
+* function template[meta id-type]
+* cpp13[meta cpp]
+
+```cpp
+namespace std::ranges {
+  // (1)
+  template&amp;lt;input_or_output_iterator O, sentinel_for&amp;lt;O&amp;gt; S, weakly_incrementable T&amp;gt;
+    requires indirectly_writable&amp;lt;O, const T&amp;amp;&amp;gt;
+  constexpr iota_result&amp;lt;O, T&amp;gt; iota(O first, S last, T value);
+
+  // (2)
+  template&amp;lt;weakly_incrementable T, output_range&amp;lt;const T&amp;amp;&amp;gt; R&amp;gt;
+  constexpr iota_result&amp;lt;borrowed_iterator_t&amp;lt;R&amp;gt;, T&amp;gt; iota(R&amp;amp;&amp;amp; r, T value);
+}
+```
+* input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
+* weakly_incrementable[link /reference/iterator/weakly_incrementable.md]
+* indirectly_writable[link /reference/iterator/indirectly_writable.md]
+* output_range[link /reference/ranges/output_range.md]
+* borrowed_iterator_t[link /reference/ranges/borrowed_iterator_t.md]
+* iota_result[link /reference/algorithm/out_value_result.md]
+
+
+## 概要
+指定された値から始まる、インクリメント演算子による増加列を生成する。
+
+* (1): イテレータペアで範囲を指定する
+* (2): 範囲を直接指定する
+
+`iota()`関数は、値の範囲`[value, value + (last - first))`を前から順番に範囲`[first, last)`の各要素に代入する。
+
+これは、連続した値のシーケンスが必要な場合に使用する。
+
+
+## 効果
+範囲`[first, last)`の各要素`it`について、先頭から順番に `*it = value; ++value;` を行う
+
+
+## 戻り値
+`{ .out = last, .value = value + (last - first) }`
+
+
+## 計算量
+範囲`[first, last)`の要素数をnとして、n回のインクリメントと代入が行われる。
+
+
+## 備考
+この関数は、APL言語の「原始関数ι（イオタ）」に由来する。
+
+
+## 例
+```cpp example
+#include &amp;lt;numeric&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;array&amp;gt;
+
+int main()
+{
+  // 0から始まる10要素のシーケンスを作成する。
+  // iota()関数に与えるシーケンスの要素数分だけ値が生成されるため、
+  // 可変長のコンテナを与える場合には、事前に必要な要素数に
+  // リサイズしておく必要がある
+  std::array&amp;lt;int, 10&amp;gt; ar;
+  std::ranges::iota(ar, 0);
+
+  for (int x : ar) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::ranges::iota[color ff0000]
+
+### 出力
+```
+0
+1
+2
+3
+4
+5
+6
+7
+8
+9
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+## 参照
+- [N4901 25 Algorithms library](https://timsong-cpp.github.io/cppwp/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_found_result -- 例を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_found_result.html"/>
      <id>0445fb298ed9b767f0a25d13ff41f2ebfc1d1c7b:reference/algorithm/ranges_in_found_result.md</id>
      <updated>2022-03-23T03:25:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_found_result.md b/reference/algorithm/ranges_in_found_result.md
index cce0455d0..d910039f0 100644
--- a/reference/algorithm/ranges_in_found_result.md
+++ b/reference/algorithm/ranges_in_found_result.md
@@ -63,8 +63,29 @@ namespace std::ranges {
 
 変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
 
+
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+int main ()
+{
+  std::array&amp;lt;int, 3&amp;gt; v = {1, 2, 3};
+
+  const std::ranges::in_found_result result = std::ranges::next_permutation(v);
+
+  assert(result.in == v.end());
+  assert(result.found == true);
+}
+```
+* std::ranges::in_found_result[color ff0000]
+* std::ranges::next_permutation[link ranges_next_permutation.md]
+
+### 出力
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_fun_result -- 例を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_fun_result.html"/>
      <id>0445fb298ed9b767f0a25d13ff41f2ebfc1d1c7b:reference/algorithm/ranges_in_fun_result.md</id>
      <updated>2022-03-23T03:25:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_fun_result.md b/reference/algorithm/ranges_in_fun_result.md
index a741ed87e..e75df5361 100644
--- a/reference/algorithm/ranges_in_fun_result.md
+++ b/reference/algorithm/ranges_in_fun_result.md
@@ -65,7 +65,33 @@ namespace std::ranges {
 変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
 
 ## 例
-(執筆中)
+
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+int main() {
+  std::array v = { 3, 1, 4 };
+
+  const std::ranges::in_fun_result result = std::ranges::for_each(v, [](int&amp;amp; x) { ++x; });
+
+  assert(result.in == v.end());
+
+  // funは、渡した関数オブジェクト
+  int x = 10;
+  result.fun(x);
+
+  // 渡した関数オブジェクトの効果で1増えている
+  assert(x == 11);
+}
+```
+* std::ranges::in_fun_result[color ff0000]
+* std::ranges::for_each[link ranges_for_each.md]
+
+### 出力
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_in_out_result -- 例を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_in_out_result.html"/>
      <id>0445fb298ed9b767f0a25d13ff41f2ebfc1d1c7b:reference/algorithm/ranges_in_in_out_result.md</id>
      <updated>2022-03-23T03:25:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_in_out_result.md b/reference/algorithm/ranges_in_in_out_result.md
index 6b4fd2bb0..0b36c8627 100644
--- a/reference/algorithm/ranges_in_in_out_result.md
+++ b/reference/algorithm/ranges_in_in_out_result.md
@@ -85,8 +85,33 @@ namespace std::ranges {
 
 変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
 
+
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;cassert&amp;gt;
+
+int main() {
+  std::vector&amp;lt;char&amp;gt; v1 = { &amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;d&amp;#39;,&amp;#39;e&amp;#39; };
+  std::vector&amp;lt;int&amp;gt; v2 = { 3,1,4 };
+  std::vector&amp;lt;std::string&amp;gt; outs(3);
+
+  // v1[n] の文字を v2[n] 回繰り返した文字列を返す
+  const std::ranges::in_in_out_result result = std::ranges::transform(v1, v2, outs.begin(), [](char a, int b) { return std::string(b, a); });
+
+  assert(result.in1 == v1.begin() + 3);
+  assert(result.in2 == v2.begin() + 3);
+  assert(result.out == outs.begin() + 3);
+}
+```
+* std::ranges::in_in_out_result[color ff0000]
+* std::ranges::transform[link ranges_transform.md]
+
+### 出力
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_in_result -- 例を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_in_result.html"/>
      <id>0445fb298ed9b767f0a25d13ff41f2ebfc1d1c7b:reference/algorithm/ranges_in_in_result.md</id>
      <updated>2022-03-23T03:25:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_in_result.md b/reference/algorithm/ranges_in_in_result.md
index 38c8d49c2..db53b6812 100644
--- a/reference/algorithm/ranges_in_in_result.md
+++ b/reference/algorithm/ranges_in_in_result.md
@@ -65,7 +65,29 @@ namespace std::ranges {
 変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
 
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;array&amp;gt;
+
+int main() {
+  const std::vector&amp;lt;int&amp;gt;   v  = { 1,2,3,4,3,2 };
+  const std::array&amp;lt;int, 6&amp;gt; v2 = { 1,2,4,3,2,1 };
+
+  // v と v2 で異なる場所を探す
+  const std::ranges::in_in_result result = std::ranges::mismatch(v, v2);
+
+  assert(result.in1 == v.begin() + 2);
+  assert(result.in2 == v2.begin() + 2);
+}
+```
+* std::ranges::in_in_result[color ff0000]
+* std::ranges::mismatch[link ranges_mismatch.md]
+
+### 出力
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_out_out_result -- 例を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_out_out_result.html"/>
      <id>0445fb298ed9b767f0a25d13ff41f2ebfc1d1c7b:reference/algorithm/ranges_in_out_out_result.md</id>
      <updated>2022-03-23T03:25:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_out_out_result.md b/reference/algorithm/ranges_in_out_out_result.md
index 3a28d31f6..44f050245 100644
--- a/reference/algorithm/ranges_in_out_out_result.md
+++ b/reference/algorithm/ranges_in_out_out_result.md
@@ -66,7 +66,40 @@ namespace std::ranges {
 変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
 
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+bool is_even(int x) { return x % 2 == 0; }
+
+int main()
+{
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5};
+
+  // 偶数グループと奇数グループに分ける
+  std::vector&amp;lt;int&amp;gt; evens(5);
+  std::vector&amp;lt;int&amp;gt; odds(5);
+  const std::ranges::in_out_out_result result = std::ranges::partition_copy(v, evens.begin(), odds.begin(), is_even);
+
+  assert(result.in == v.end());
+  assert(result.out1 == evens.begin() + 2);
+  assert(result.out2 == odds.begin() + 3);
+
+  // 出力した範囲の後ろを削除する
+  evens.erase(result.out1, evens.end());
+  odds.erase(result.out2, odds.end());
+
+  assert(evens.size() == 2);
+  assert(odds.size() == 3);
+}
+```
+* std::ranges::in_out_out_result[color ff0000]
+* std::ranges::partition_copy[link ranges_partition_copy.md]
+
+### 出力
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>in_out_result -- 例を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_in_out_result.html"/>
      <id>0445fb298ed9b767f0a25d13ff41f2ebfc1d1c7b:reference/algorithm/ranges_in_out_result.md</id>
      <updated>2022-03-23T03:25:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_in_out_result.md b/reference/algorithm/ranges_in_out_result.md
index 26ba26cde..60a20ad34 100644
--- a/reference/algorithm/ranges_in_out_result.md
+++ b/reference/algorithm/ranges_in_out_result.md
@@ -135,7 +135,27 @@ namespace std::ranges {
 変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
 
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = { 1, 2, 3 };
+  std::vector&amp;lt;int&amp;gt; v2(5);
+
+  const std::ranges::in_out_result result = std::ranges::copy(v, v2.begin());
+
+  assert(result.in == v.end());
+  assert(result.out == v2.begin() + 3);
+}
+```
+* std::ranges::in_out_result[color ff0000]
+* std::ranges::copy[link ranges_copy.md]
+
+### 出力
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>min_max_result -- 例を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_min_max_result.html"/>
      <id>0445fb298ed9b767f0a25d13ff41f2ebfc1d1c7b:reference/algorithm/ranges_min_max_result.md</id>
      <updated>2022-03-23T03:25:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_min_max_result.md b/reference/algorithm/ranges_min_max_result.md
index 26a90ee37..00bb96df5 100644
--- a/reference/algorithm/ranges_min_max_result.md
+++ b/reference/algorithm/ranges_min_max_result.md
@@ -65,7 +65,22 @@ namespace std::ranges {
 変換演算子は、各テンプレートパラメーターが変換できる場合のみオーバーロード解決に参加する。
 
 ## 例
-(執筆中)
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;algorithm&amp;gt;
+
+int main()
+{
+  const std::ranges::min_max_result result = std::ranges::minmax({1, 2, 3});
+  assert(result.min == 1 &amp;amp;&amp;amp; result.max == 3);
+}
+```
+* std::ranges::min_max_result[color ff0000]
+* std::ranges::minmax[link ranges_minmax.md]
+
+### 出力
+```
+```
 
 ## バージョン
 ### 言語
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mismatch -- 例を追加 #919</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_mismatch.html"/>
      <id>0445fb298ed9b767f0a25d13ff41f2ebfc1d1c7b:reference/algorithm/ranges_mismatch.md</id>
      <updated>2022-03-23T03:25:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_mismatch.md b/reference/algorithm/ranges_mismatch.md
index 7ba4fbd53..bf6754050 100644
--- a/reference/algorithm/ranges_mismatch.md
+++ b/reference/algorithm/ranges_mismatch.md
@@ -84,14 +84,13 @@ int main() {
   std::cout &amp;lt;&amp;lt; std::endl;
 
   // v と v3 で異なる場所を探す。
-  // v.size() &amp;gt; v3.size() なので mismatch(v.begin(), v.end(), v3.begin()) とやってはいけない。
   {
-    auto [i1, i2] = std::mismatch(v3.begin(), v3.end(), v.begin());
+    auto [i1, i2] = std::ranges::mismatch(v3, v);
     print_mismatch_value(v3, v, i1, i2);
   }
 }
 ```
-* std::mismatch[color ff0000]
+* std::ranges::mismatch[color ff0000]
 * std::to_string[link /reference/string/to_string.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
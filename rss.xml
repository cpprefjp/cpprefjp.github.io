<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-01T09:01:07.027873</updated>
  <id>72361e65-853f-4da1-a8df-198818da2543</id>

  
    <entry>
      <title>month -- month : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month.html"/>
      <id>1beab768859ea9455f4c1794fef916c4e3af2cb3:reference/chrono/month.md</id>
      <updated>2020-06-01T17:57:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month.md b/reference/chrono/month.md
index 970a8e533..6f779fcf9 100644
--- a/reference/chrono/month.md
+++ b/reference/chrono/month.md
@@ -94,6 +94,13 @@ namespace std::chrono {
 | [`from_stream`](month/from_stream.md) | フォーマット指定して入力ストリームから入力する | C++20 |
 
 
+## 文字列フォーマット
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`formatter`](month/formatter.md) | [`std::formatter`](/reference/format/formatter.md)クラスの特殊化 | C++20 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- month : formatterを追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month/formatter.html"/>
      <id>1beab768859ea9455f4c1794fef916c4e3af2cb3:reference/chrono/month/formatter.md</id>
      <updated>2020-06-01T17:57:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month/formatter.md b/reference/chrono/month/formatter.md
new file mode 100644
index 000000000..baa8b63dc
--- /dev/null
+++ b/reference/chrono/month/formatter.md
@@ -0,0 +1,73 @@
+# formatter
+* chrono[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class charT&amp;gt;
+  struct formatter&amp;lt;chrono::month, charT&amp;gt;;
+}
+```
+
+## 概要
+`month`クラスに対する[`std::formatter`](/reference/format/formatter.md)クラステンプレートの特殊化。
+
+フォーマット指定子としては、以下を使用できる：
+
+| フォーマット指定子 | 説明 |
+|--------------------|------|
+| `%b` | ロケール依存の月の省略名 |
+| `%B` | ロケール依存の月の完全名 |
+| `%h` | `%b`と等価 |
+| `%m` | 10進数での月。2桁0埋め |
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;chrono&amp;gt;
+#include &amp;lt;format&amp;gt;
+
+namespace chrono = std::chrono;
+
+int main()
+{
+  // デフォルトフォーマットはoperator&amp;lt;&amp;lt;と同じ
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%b}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl; // 省略名
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%B}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl; // 完全名
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%m}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl; // 完全名
+
+  // ロケール依存の出力
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;&amp;#34;ja_JP.UTF-8&amp;#34;&amp;#34;), &amp;#34;{:%b}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;&amp;#34;ja_JP.UTF-8&amp;#34;&amp;#34;), &amp;#34;{:%B}&amp;#34;, chrono::April) &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::format[link /reference/chrono/format.md]
+* chrono::April[link /reference/chrono/month_constants.md]
+
+### 出力
+```
+Apr
+Apr
+April
+04
+4月
+4月
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): (9.0時点で実装なし)
+- [GCC](/implementation.md#gcc): (9.2時点で実装なし)
+- [Visual C++](/implementation.md#visual_cpp): (2019 Update 3時点で実装なし)
+
+
+## 関連項目
+- [chronoの`std::format()`](/reference/chrono/format.md) (フォーマットの詳細)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>local_time -- zoned_time, local_time : 構文エラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/local_time.html"/>
      <id>c36e582b0f55eb33a39703d2806991189e6e71cd:reference/chrono/local_time.md</id>
      <updated>2020-06-01T17:51:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/local_time.md b/reference/chrono/local_time.md
index ffcc9a48c..047cac222 100644
--- a/reference/chrono/local_time.md
+++ b/reference/chrono/local_time.md
@@ -206,7 +206,7 @@ int main()
 
   // 12時間時計で出力
   // (%pでロケール固有の「午前」「午後」を出力するには、日本のロケールを指定する必要がある)
-  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;&amp;#34;ja_JP.UTF-8&amp;#34;&amp;#34;),
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;),
                            &amp;#34;8 : %Y年%m月%d日 %p %I時%M分%S秒&amp;#34;,
                            lt) &amp;lt;&amp;lt; std::endl;
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- zoned_time, local_time : 構文エラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/zoned_time/formatter.html"/>
      <id>c36e582b0f55eb33a39703d2806991189e6e71cd:reference/chrono/zoned_time/formatter.md</id>
      <updated>2020-06-01T17:51:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/zoned_time/formatter.md b/reference/chrono/zoned_time/formatter.md
index 9ab9d07e8..79f51cad6 100644
--- a/reference/chrono/zoned_time/formatter.md
+++ b/reference/chrono/zoned_time/formatter.md
@@ -61,7 +61,7 @@ int main()
 
   // 12時間時計で出力
   // (%pでロケール固有の「午前」「午後」を出力するには、日本のロケールを指定する必要がある)
-  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;&amp;#34;ja_JP.UTF-8&amp;#34;&amp;#34;), &amp;#34;9 : %Y年%m月%d日 %p %I時%M分%S秒&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(std::locale(&amp;#34;ja_JP.UTF-8&amp;#34;), &amp;#34;9 : %Y年%m月%d日 %p %I時%M分%S秒&amp;#34;, zt_sec) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * chrono::system_clock[link /reference/chrono/system_clock.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatter -- dayのformatter : 出力例が間違っていたのと、フォーマット指定子の例示を追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/day/formatter.html"/>
      <id>e586b15dd5ffad8a43dafba09d55f716f7276f51:reference/chrono/day/formatter.md</id>
      <updated>2020-06-01T17:47:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/day/formatter.md b/reference/chrono/day/formatter.md
index 645cda1ef..c864b580a 100644
--- a/reference/chrono/day/formatter.md
+++ b/reference/chrono/day/formatter.md
@@ -29,14 +29,16 @@ int main()
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{}&amp;#34;, chrono::day{3}) &amp;lt;&amp;lt; std::endl;
 
   std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%d}&amp;#34;, chrono::day{3}) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::format(&amp;#34;{:%e}&amp;#34;, chrono::day{3}) &amp;lt;&amp;lt; std::endl;
 }
 ```
 - std::format[link /reference/chrono/format.md]
 
 ### 出力
 ```
-3
-3
+03
+03
+ 3
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- chronoのformat : %eの例が間違っていた。2桁スペース埋め</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>0dfa343e9837736a1c33cd6027b1da33a4d43be6:reference/chrono/format.md</id>
      <updated>2020-06-01T17:45:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index 92a727a22..bfc548167 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -32,7 +32,7 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 | `%C` | 100で切り下げ除算した年 (世紀)。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%EC`を指定すると、ロケール依存の世紀の異なる表現を出力する | `&amp;#34;21&amp;#34;`&amp;lt;br/&amp;gt; `%EC`では`&amp;#34;令和&amp;#34;` (元号) |
 | `%d` | 10進数での月の日。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%0d`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;24&amp;#34;` |
 | `%D` | `%m/%d/%y`と等価 | `&amp;#34;04/24/20&amp;#34;` |
-| `%e` | 10進数での月の日。結果が10進数で1桁の場合、先頭にスペースがつく。改良コマンド`%0e`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;01&amp;#34;` |
+| `%e` | 10進数での月の日。結果が10進数で1桁の場合、先頭にスペースがつく。改良コマンド`%0e`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34; 1&amp;#34;` |
 | `%F` | `%Y-%m-%d`と等価 | `&amp;#34;2020-04-24&amp;#34;` |
 | `%g` | ISOの週ベースのうしろ2桁10進数の年。結果が1桁の場合、先頭に`0`がつく | `&amp;#34;20&amp;#34;` |
 | `%G` | ISOの週ベースの10進数の年。結果が4桁未満の場合、4桁になるよう左が`0`で埋められる | `&amp;#34;2020&amp;#34;` |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>format -- chronoのformat : 出力例をコード修飾し、出力内容の範囲を明確化</title>
      <link href="https://cpprefjp.github.io/reference/chrono/format.html"/>
      <id>9d04b1e47994d7d26b0dd17e0b8c5686f8556e5c:reference/chrono/format.md</id>
      <updated>2020-06-01T17:45:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/format.md b/reference/chrono/format.md
index e00ef09fd..92a727a22 100644
--- a/reference/chrono/format.md
+++ b/reference/chrono/format.md
@@ -24,45 +24,45 @@ chronoライブラリではこれに加え、たとえばデフォルトでは
 
 | フォーマット指定子 | 説明 | 例 |
 |--------------------|------|----|
-| `%a` | ロケール依存の曜日の省略名。&amp;lt;br/&amp;gt; 値に有効な曜日が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | Fri, 金 |
-| `%A` | ロケール依存の曜日の完全名。&amp;lt;br/&amp;gt; 値に有効な曜日が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | Friday, 金曜日 |
-| `%b` | ロケール依存の月の省略名。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | Apr, 4月 |
-| `%B` | ロケール依存の月の完全名。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | April, 4月 |
-| `%c` | ロケール依存の日付・時間の表現。改良コマンド`%Ec`を指定すると、異なる表現を出力する | Fri Apr 24 17:14:44 2020&amp;lt;br/&amp;gt; 2020年04月24日 17時14分44秒&amp;lt;br/&amp;gt; `%Ec`では令和02年04月24日 17時14分44秒 |
-| `%C` | 100で切り下げ除算した年 (世紀)。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%EC`を指定すると、ロケール依存の世紀の異なる表現を出力する | 21&amp;lt;br/&amp;gt; `%EC`では令和 (元号) |
-| `%d` | 10進数での月の日。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%0d`を指定すると、ロケール依存の異なる表現を出力する | 24 |
-| `%D` | `%m/%d/%y`と等価 | 04/24/20 |
-| `%e` | 10進数での月の日。結果が10進数で1桁の場合、先頭にスペースがつく。改良コマンド`%0e`を指定すると、ロケール依存の異なる表現を出力する | 01 |
-| `%F` | `%Y-%m-%d`と等価 | 2020-04-24 |
-| `%g` | ISOの週ベースのうしろ2桁10進数の年。結果が1桁の場合、先頭に`0`がつく | 20 |
-| `%G` | ISOの週ベースの10進数の年。結果が4桁未満の場合、4桁になるよう左が`0`で埋められる | 2020 |
-| `%h` | `%b`と等価 | Jan, 4月 |
-| `%H` | 24時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0H`を指定知ると、ロケール依存の異なる表現を出力する | 17 |
-| `%I` | 12時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0I`を指定知ると、ロケール依存の異なる表現を出力する | 05 |
-| `%j` | 10進数での年の日。1月1日は`001`が出力される。結果が3桁未満の場合、3桁になるよう左が`0`で埋められる | 115 |
-| `%m` | 10進数での月。1月は`01`が出力される。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0m`を指定すると、ロケール依存の異なる表現を出力する | 04 |
-| `%M` | 10進数での分。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0M`を指定すると、ロケール依存の異なる表現を出力する | 14 |
+| `%a` | ロケール依存の曜日の省略名。&amp;lt;br/&amp;gt; 値に有効な曜日が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Fri&amp;#34;`, `&amp;#34;金&amp;#34;` |
+| `%A` | ロケール依存の曜日の完全名。&amp;lt;br/&amp;gt; 値に有効な曜日が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Friday&amp;#34;`, `&amp;#34;金曜日&amp;#34;` |
+| `%b` | ロケール依存の月の省略名。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;Apr&amp;#34;`, `&amp;#34;4月&amp;#34;` |
+| `%B` | ロケール依存の月の完全名。&amp;lt;br/&amp;gt; 値に有効な月が含まれていない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;April&amp;#34;`, `&amp;#34;4月&amp;#34;` |
+| `%c` | ロケール依存の日付・時間の表現。改良コマンド`%Ec`を指定すると、異なる表現を出力する | `&amp;#34;Fri Apr 24 17:14:44 2020&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;2020年04月24日 17時14分44秒&amp;#34;`&amp;lt;br/&amp;gt; `%Ec`では`&amp;#34;令和02年04月24日 17時14分44秒&amp;#34;` |
+| `%C` | 100で切り下げ除算した年 (世紀)。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%EC`を指定すると、ロケール依存の世紀の異なる表現を出力する | `&amp;#34;21&amp;#34;`&amp;lt;br/&amp;gt; `%EC`では`&amp;#34;令和&amp;#34;` (元号) |
+| `%d` | 10進数での月の日。結果が10進数で1桁の場合、先頭に`0`がつく。改良コマンド`%0d`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;24&amp;#34;` |
+| `%D` | `%m/%d/%y`と等価 | `&amp;#34;04/24/20&amp;#34;` |
+| `%e` | 10進数での月の日。結果が10進数で1桁の場合、先頭にスペースがつく。改良コマンド`%0e`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;01&amp;#34;` |
+| `%F` | `%Y-%m-%d`と等価 | `&amp;#34;2020-04-24&amp;#34;` |
+| `%g` | ISOの週ベースのうしろ2桁10進数の年。結果が1桁の場合、先頭に`0`がつく | `&amp;#34;20&amp;#34;` |
+| `%G` | ISOの週ベースの10進数の年。結果が4桁未満の場合、4桁になるよう左が`0`で埋められる | `&amp;#34;2020&amp;#34;` |
+| `%h` | `%b`と等価 | `&amp;#34;Jan&amp;#34;`, `&amp;#34;4月&amp;#34;` |
+| `%H` | 24時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0H`を指定知ると、ロケール依存の異なる表現を出力する | `&amp;#34;17&amp;#34;` |
+| `%I` | 12時間時計での10進数の時。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0I`を指定知ると、ロケール依存の異なる表現を出力する | `&amp;#34;05&amp;#34;` |
+| `%j` | 10進数での年の日。1月1日は`001`が出力される。結果が3桁未満の場合、3桁になるよう左が`0`で埋められる | `&amp;#34;115&amp;#34;` |
+| `%m` | 10進数での月。1月は`01`が出力される。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0m`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;04&amp;#34;` |
+| `%M` | 10進数での分。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0M`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;14&amp;#34;` |
 | `%n` | 改行文字 | |
-| `%p` | 12時間時計でのロケール依存の午前・午後の表現 | PM, 午後 |
-| `%q` | [`duration`](duration.md)単位ごとのサフィックス。[`duration`](duration.md)の[`operator&amp;lt;&amp;lt;`](duration/op_ostream.md.nolink)で出力されるサフィックスと等価 | s |
-| `%Q` | [`duration`](duration.md)の数値。[`.count()`](duration/count.md)で取得した値 | 44 |
-| `%r` | 12時間時計でのロケール依存の時間 | 05:14:44 PM&amp;lt;br/&amp;gt; 午後05時14分44秒 |
-| `%R` | `%H:%M`と等価 | 17:14 |
-| `%S` | 10進数での秒。10秒未満の場合、先頭に`0`がつく。入力が秒の精度と正確に一致しない場合、浮動小数点フォーマットで出力される。10進数の浮動小数点数で小数点以下18桁以内で表現できない場合、マイクロ秒で出力される。改良コマンド`%0S`を指定すると、ロケール依存の異なる表現を出力する | 44&amp;lt;br/&amp;gt; 44.123 |
+| `%p` | 12時間時計でのロケール依存の午前・午後の表現 | `&amp;#34;PM&amp;#34;`, `&amp;#34;午後&amp;#34;` |
+| `%q` | [`duration`](duration.md)単位ごとのサフィックス。[`duration`](duration.md)の[`operator&amp;lt;&amp;lt;`](duration/op_ostream.md.nolink)で出力されるサフィックスと等価 | `&amp;#34;s&amp;#34;` |
+| `%Q` | [`duration`](duration.md)の数値。[`.count()`](duration/count.md)で取得した値 | `&amp;#34;44&amp;#34;` |
+| `%r` | 12時間時計でのロケール依存の時間 | `&amp;#34;05:14:44 PM&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;午後05時14分44秒&amp;#34;` |
+| `%R` | `%H:%M`と等価 | `&amp;#34;17:14&amp;#34;` |
+| `%S` | 10進数での秒。10秒未満の場合、先頭に`0`がつく。入力が秒の精度と正確に一致しない場合、浮動小数点フォーマットで出力される。10進数の浮動小数点数で小数点以下18桁以内で表現できない場合、マイクロ秒で出力される。改良コマンド`%0S`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;44&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;44.123&amp;#34;` |
 | `%t` | 水平タブ文字 | |
-| `%T` | `%H:%M:%S`と等価 | 17:14:44.123 |
-| `%u` | 10進数での月曜を1とするISO曜日番号 (1-7)。改良コマンド`%0u`を指定すると、ロケール依存の異なる表現を出力する | 5 |
-| `%U` | 10進数での年の週番号。年の最初の日曜日が最初の曜日であるとして`01`、同年のそれより前の日は`00`となる。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0U`を指定すると、ロケール依存の異なる表現を出力する | 16 |
-| `%V` | 10進数でのISO週ベースの週番号。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0V`を指定すると、ロケール依存の異なる表現を出力する | 17 |
-| `%w` | 10進数での日曜を0とする曜日番号 (0-6)。改良コマンド`%0w`を指定すると、ロケール依存の異なる表現を出力する | 5 |
-| `%W` | 10進数での年の週番号。年の最初の月曜日が最初の曜日であるとして`01`、同年のそれより前の日は`00`となる。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0W`を指定すると、ロケール依存の異なる表現を出力する | 16 |
-| `%x` | ロケール依存の日付表現。改良コマンド`%Ex`を指定すると、ロケール依存の異なる表現が出力される | 04/24/20&amp;lt;br/&amp;gt; 2020年04月24日&amp;lt;br/&amp;gt; `%Ex`では令和02年04月24日 |
-| `%X` | ロケール依存の時間表現。改良コマンド`%EX`を指定すると、ロケール依存の異なる表現が出力される | 17:14:44&amp;lt;br/&amp;gt; 17時14分44秒 |
-| `%y` | 10進数での年のうしろ2桁。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0y`を指定すると、ロケール依存の異なる表現を出力する。改良コマンド`%Ey`を指定すると、`%EC`からのオフセットとしてロケール依存の異なる表現を出力する。 | 20&amp;lt;br/&amp;gt; `%Ey`では02 |
-| `%Y` | 10進数での年。結果が4桁未満の場合、4桁になるよう左が`0`で埋められる。改良コマンド`%EY`を指定すると、ロケール依存の異なる表現の完全な年を出力する | 2020&amp;lt;br/&amp;gt; `%EY`では令和02年 |
-| `%z` | ISO 8601フォーマットでのUTCからのオフセット。例として`-0430`はUTCから4時間30分遅れていることを表す。オフセットがゼロの場合は`+0000`が使用される。改良コマンド`%Ez`と`%0z`を指定すると、時と分の間にコロン (`:`) が挿入される。オフセット情報が利用可能でない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | +0900&amp;lt;br/&amp;gt;`%Ez`では+09:00 |
-| `%Z` | タイムゾーンの省略名。タイムゾーンの省略名が利用可能でない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | JST |
-| `%%` | 文字`%` | |
+| `%T` | `%H:%M:%S`と等価 | `&amp;#34;17:14:44.123&amp;#34;` |
+| `%u` | 10進数での月曜を1とするISO曜日番号 (1-7)。改良コマンド`%0u`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;5&amp;#34;` |
+| `%U` | 10進数での年の週番号。年の最初の日曜日が最初の曜日であるとして`01`、同年のそれより前の日は`00`となる。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0U`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;16&amp;#34;` |
+| `%V` | 10進数でのISO週ベースの週番号。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0V`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;17&amp;#34;` |
+| `%w` | 10進数での日曜を0とする曜日番号 (0-6)。改良コマンド`%0w`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;5&amp;#34;` |
+| `%W` | 10進数での年の週番号。年の最初の月曜日が最初の曜日であるとして`01`、同年のそれより前の日は`00`となる。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0W`を指定すると、ロケール依存の異なる表現を出力する | `&amp;#34;16&amp;#34;` |
+| `%x` | ロケール依存の日付表現。改良コマンド`%Ex`を指定すると、ロケール依存の異なる表現が出力される | `&amp;#34;04/24/20&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;2020年04月24日&amp;#34;`&amp;lt;br/&amp;gt; `%Ex`では`&amp;#34;令和02年04月24日&amp;#34;` |
+| `%X` | ロケール依存の時間表現。改良コマンド`%EX`を指定すると、ロケール依存の異なる表現が出力される | `&amp;#34;17:14:44&amp;#34;`&amp;lt;br/&amp;gt; `&amp;#34;17時14分44秒&amp;#34;` |
+| `%y` | 10進数での年のうしろ2桁。結果が1桁の場合、先頭に`0`がつく。改良コマンド`%0y`を指定すると、ロケール依存の異なる表現を出力する。改良コマンド`%Ey`を指定すると、`%EC`からのオフセットとしてロケール依存の異なる表現を出力する。 | `&amp;#34;20&amp;#34;`&amp;lt;br/&amp;gt; `%Ey`では`&amp;#34;02&amp;#34;` |
+| `%Y` | 10進数での年。結果が4桁未満の場合、4桁になるよう左が`0`で埋められる。改良コマンド`%EY`を指定すると、ロケール依存の異なる表現の完全な年を出力する | `&amp;#34;2020&amp;#34;`&amp;lt;br/&amp;gt; `%EY`では`&amp;#34;令和02年&amp;#34;` |
+| `%z` | ISO 8601フォーマットでのUTCからのオフセット。例として`-0430`はUTCから4時間30分遅れていることを表す。オフセットがゼロの場合は`+0000`が使用される。改良コマンド`%Ez`と`%0z`を指定すると、時と分の間にコロン (`:`) が挿入される。オフセット情報が利用可能でない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;+0900&amp;#34;`&amp;lt;br/&amp;gt;`%Ez`では`&amp;#34;+09:00&amp;#34;` |
+| `%Z` | タイムゾーンの省略名。タイムゾーンの省略名が利用可能でない場合、[`std::format_error`](/reference/format/format_error.md)例外を送出する | `&amp;#34;JST&amp;#34;` |
+| `%%` | 文字`%` | `&amp;#34;%&amp;#34;` |
 
 
 ### chronoライブラリの各クラスのデフォルトフォーマット
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
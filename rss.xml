<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-08-28T14:39:38.569142</updated>
  <id>66e2482c-3603-4e65-bd5c-df682327b326</id>

  
    <entry>
      <title>cdata -- 範囲アクセス関数のP2278R4対応 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cdata.html"/>
      <id>e37ef9b695f6bb5e02f5153a9fa4281980f60e22:reference/ranges/cdata.md</id>
      <updated>2023-08-25T12:32:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cdata.md b/reference/ranges/cdata.md
index 34ca0ed78..4bf0e27bf 100644
--- a/reference/ranges/cdata.md
+++ b/reference/ranges/cdata.md
@@ -16,10 +16,19 @@ namespace std::ranges {
 Rangeの要素が格納されたメモリ領域へのポインタを取得する関数オブジェクト。
 
 ## 効果
-部分式`E`の型を`T`とする。このとき、式`ranges::cdata(E)`の効果は以下の式と等しい。
+部分式`E`の型を`T`、`E`の評価結果オブジェクトを示す左辺値を`t`とする。このとき、式`ranges::cdata(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges::data`](data.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges::data`](data.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++20まで
+    1. `E`がlvalueであれば、[`ranges::data`](data.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+    2. それ以外の場合、[`ranges::data`](data.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++23から
+    1. `E`が右辺値であり、[`enable_borrowed_range`](./enable_borrowed_range.md)`&amp;lt;remove_cv_t&amp;lt;T&amp;gt;&amp;gt;`が`false`となる場合、`ranges::cdata(E)`は不適格
+    2. それ以外の場合、`as-const-pointer(`[`ranges::data`](data.md)`(`[`possibly-const-range`](./possibly-const-range.md)`(t)))`
+        - `as-const-pointer`は次のような説明専用関数テンプレートである
+          ```cpp
+          template&amp;lt;class T&amp;gt;
+          constexpr auto as-const-pointer(const T* p) { return p; }
+          ```
 
 ## 戻り値
 Rangeの要素が格納されたメモリ領域へのポインタ。
@@ -28,7 +37,7 @@ Rangeの要素が格納されたメモリ領域へのポインタ。
 Rangeが`const`な場合について[`ranges::data`](data.md)をカスタマイズすることで、`ranges::cdata`をカスタマイズできる。
 
 ## 備考
-`ranges::cdata(E)`が有効な式であるとき、その型はオブジェクトへのポインタである。
+`ranges::cdata(E)`が有効な式であるとき、その型はオブジェクトへのポインタである（C++23以降、このポインタは定数ポインタである）。
 
 ## 例
 ```cpp example
@@ -71,3 +80,4 @@ array size:1 at 0x556ec23ba2b0
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- 範囲アクセス関数のP2278R4対応 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cend.html"/>
      <id>e37ef9b695f6bb5e02f5153a9fa4281980f60e22:reference/ranges/cend.md</id>
      <updated>2023-08-25T12:32:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cend.md b/reference/ranges/cend.md
index 355272484..dbbcbe1d1 100644
--- a/reference/ranges/cend.md
+++ b/reference/ranges/cend.md
@@ -16,10 +16,14 @@ namespace std::ranges {
 Rangeから、最後尾要素の次を指す読み取り専用イテレータもしくは番兵を取得する関数オブジェクト。
 
 ## 効果
-部分式`E`の型を`T`とする。このとき、式`ranges::cend(E)`の効果は以下の式と等しい。
+部分式`E`の型を`T`、`E`の評価結果オブジェクトを示す左辺値を`t`とする。このとき、式`ranges::cend(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++20まで
+    1. `E`がlvalueであれば、[`ranges::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+    2. それ以外の場合、[`ranges::end`](end.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++23から
+    1. `E`が右辺値であり、[`enable_borrowed_range`](./enable_borrowed_range.md)`&amp;lt;remove_cv_t&amp;lt;T&amp;gt;&amp;gt;`が`false`となる場合、`ranges::cend(E)`は不適格
+    2. それ以外の場合、式`U`を[`ranges::end`](end.md)`(`[`possibly-const-range`](./possibly-const-range.md)`(t))`とすると、[`const_sentinel`](/reference/iterator/const_sentinel.md)`&amp;lt;decltype(U)&amp;gt;(U)`
 
 ## 戻り値
 最後尾要素の次を指す読み取り専用イテレータもしくは番兵。
@@ -28,7 +32,7 @@ Rangeから、最後尾要素の次を指す読み取り専用イテレータも
 Rangeが`const`な場合について[`ranges::end`](end.md)をカスタマイズすることで、`ranges::cend`をカスタマイズできる。
 
 ## 備考
-`ranges::cend(E)`が有効な式であるとき、`ranges::cend(E)`の型`S`、[`ranges::cbegin`](cbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
+`ranges::cend(E)`が有効な式であるとき、`ranges::cend(E)`の型`S`、[`ranges::cbegin`](cbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。C++23以降はさらに、`S`が`input_iterator`のモデルならば`S`は[`constant-iterator`](/reference/iterator/constant-iterator.md)のモデルである。
 
 ## 例
 ```cpp example
@@ -75,3 +79,4 @@ int main()
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- 範囲アクセス関数のP2278R4対応 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/crbegin.html"/>
      <id>e37ef9b695f6bb5e02f5153a9fa4281980f60e22:reference/ranges/crbegin.md</id>
      <updated>2023-08-25T12:32:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/crbegin.md b/reference/ranges/crbegin.md
index 650f0632b..fe119a51d 100644
--- a/reference/ranges/crbegin.md
+++ b/reference/ranges/crbegin.md
@@ -16,10 +16,14 @@ namespace std::ranges {
 Rangeの末尾を指す読み取り専用逆イテレータを取得する関数オブジェクト。
 
 ## 効果
-部分式`E`の型を`T`とする。このとき、式`ranges::crbegin(E)`の効果は以下の式と等しい。
+部分式`E`の型を`T`、`E`の評価結果オブジェクトを示す左辺値を`t`とする。このとき、式`ranges::crbegin(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges::rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges::rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++20まで
+    1. `E`がlvalueであれば、[`ranges::rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+    2. それ以外の場合、[`ranges::rbegin`](rbegin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++23から
+    1. `E`が右辺値であり、[`enable_borrowed_range`](./enable_borrowed_range.md)`&amp;lt;remove_cv_t&amp;lt;T&amp;gt;&amp;gt;`が`false`となる場合、`ranges::crbegin(E)`は不適格
+    2. それ以外の場合、式`U`を[`ranges::rbegin`](rbegin.md)`(`[`possibly-const-range`](./possibly-const-range.md)`(t))`とすると、[`const_iterator`](/reference/iterator/const_iterator.md)`&amp;lt;decltype(U)&amp;gt;(U)`
 
 ## 戻り値
 Rangeの末尾を指す読み取り専用逆イテレータ。
@@ -27,6 +31,9 @@ Rangeの末尾を指す読み取り専用逆イテレータ。
 ## カスタマイゼーションポイント
 Rangeが`const`な場合について[`ranges::rbegin`](rbegin.md)をカスタマイズすることで、`ranges::crbegin`をカスタマイズできる。
 
+## 備考
+`ranges::crbegin`の呼び出しが有効な式であるとき、その型は[`input_or_output_iterator`](/reference/iterator/input_or_output_iterator.md)のモデルであり、C++23以降はさらに[`constant-iterator`](/reference/iterator/constant-iterator.md)のモデルである。
+
 ## 例
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -101,3 +108,4 @@ int main()
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- 範囲アクセス関数のP2278R4対応 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/crend.html"/>
      <id>e37ef9b695f6bb5e02f5153a9fa4281980f60e22:reference/ranges/crend.md</id>
      <updated>2023-08-25T12:32:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/crend.md b/reference/ranges/crend.md
index e96891978..bd3393e11 100644
--- a/reference/ranges/crend.md
+++ b/reference/ranges/crend.md
@@ -16,10 +16,14 @@ namespace std::ranges {
 Rangeの先頭の前を指す、読み取り専用逆イテレータもしくは番兵を取得する関数オブジェクト。
 
 ## 効果
-部分式`E`の型を`T`とする。このとき、式`ranges::crend(E)`の効果は以下の式と等しい。
+部分式`E`の型を`T`、`E`の評価結果オブジェクトを示す左辺値を`t`とする。このとき、式`ranges::crend(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++20まで
+    1. `E`がlvalueであれば、[`ranges::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+    2. それ以外の場合、[`ranges::rend`](rend.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++23から
+    1. `E`が右辺値であり、[`enable_borrowed_range`](./enable_borrowed_range.md)`&amp;lt;remove_cv_t&amp;lt;T&amp;gt;&amp;gt;`が`false`となる場合、`ranges::crend(E)`は不適格
+    2. それ以外の場合、式`U`を[`ranges::rend`](rend.md)`(`[`possibly-const-range`](./possibly-const-range.md)`(t))`とすると、[`const_sentinel`](/reference/iterator/const_sentinel.md)`&amp;lt;decltype(U)&amp;gt;(U)`
 
 ## 戻り値
 Rangeの先頭の前を指す、読み取り専用逆イテレータもしくは番兵。
@@ -28,7 +32,7 @@ Rangeの先頭の前を指す、読み取り専用逆イテレータもしくは
 Rangeが`const`な場合について[`ranges::rend`](rend.md)をカスタマイズすることで、`ranges::crend`をカスタマイズできる。
 
 ## 備考
-`ranges::crend(E)`が有効な式であるとき、`ranges::crend(E)`の型`S`、[`ranges::crbegin`](crbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。
+`ranges::crend(E)`が有効な式であるとき、`ranges::crend(E)`の型`S`、[`ranges::crbegin`](crbegin.md)`(E)`の型`I`は[`sentinel_for`](/reference/iterator/sentinel_for.md)`&amp;lt;S, I&amp;gt;`のモデルである。C++23以降はさらに、`S`が`input_iterator`のモデルならば`S`は[`constant-iterator`](/reference/iterator/constant-iterator.md)のモデルである。
 
 ## 例
 ```cpp example
@@ -104,3 +108,4 @@ int main()
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_const_reference_t -- range_const_reference_t追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/iterator/iter_const_reference_t.html"/>
      <id>4e3f803c205c62d5f0d09e3684e12536eaa58704:reference/iterator/iter_const_reference_t.md</id>
      <updated>2023-08-25T11:49:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/iter_const_reference_t.md b/reference/iterator/iter_const_reference_t.md
index 47a79a25f..459eb5016 100644
--- a/reference/iterator/iter_const_reference_t.md
+++ b/reference/iterator/iter_const_reference_t.md
@@ -21,9 +21,9 @@ namespace std {
 
 ## 型の決定
 
-`iter_value_t&amp;lt;It&amp;gt;`が非参照型であり`iter_reference_t&amp;lt;It&amp;gt;`から修飾を除いた型であるとすると、`iter_reference_t&amp;lt;It&amp;gt;`に対して`iter_const_reference_t&amp;lt;It&amp;gt;`は基本的には次のようになる
+`iter_value_t&amp;lt;It&amp;gt;`が非参照型であり`iter_reference_t&amp;lt;It&amp;gt;`から修飾を除いた型であるとすると、`iter_reference_t&amp;lt;It&amp;gt;`に対して`iter_const_reference_t&amp;lt;It&amp;gt;`は基本的には次のようになる（`T`を任意の修飾なしの型とする）
 
-|`iter_reference_t`|`iter_const_reference_t&amp;lt;It&amp;gt;`|
+|`iter_reference_t&amp;lt;It&amp;gt;`|`iter_const_reference_t&amp;lt;It&amp;gt;`|
 |---|---|
 |`T&amp;amp;`|`const T&amp;amp;`|
 |`T&amp;amp;&amp;amp;`|`const T&amp;amp;&amp;amp;`|
@@ -32,7 +32,7 @@ namespace std {
 |`T`|`T`|
 |`const T`|`T`|
 
-`It`に対して`iterator_traits`の特殊化が存在する場合や、`const iter_value_t&amp;lt;It&amp;gt;&amp;amp;&amp;amp;`と`iter_reference_t&amp;lt;It&amp;gt;`について`common_reference`が特殊化されている場合はこれと異なる結果となりうる。標準ライブラリにあるそのようなイテレータ型を持つものについて一部例を示すと、次のようになる
+`iter_value_t&amp;lt;It&amp;gt;`に対して`iter_reference_t&amp;lt;It&amp;gt;`が修飾以外も異なる型となる場合や、`It`に対して`iterator_traits`の特殊化が存在する場合、`const iter_value_t&amp;lt;It&amp;gt;&amp;amp;&amp;amp;`と`iter_reference_t&amp;lt;It&amp;gt;`について`common_reference`が特殊化されている場合などはこれと異なる結果となりうる。標準ライブラリにあるそのようなイテレータ型を持つものについて一部例を示すと、次のようになる
 
 |`It`の取得元の範囲|`iter_value_t&amp;lt;It&amp;gt;`|`iter_reference_t&amp;lt;It&amp;gt;`|`iter_const_reference_t&amp;lt;It&amp;gt;`|
 |---|---|---|---|
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- range_const_reference_t追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>4e3f803c205c62d5f0d09e3684e12536eaa58704:reference/ranges.md</id>
      <updated>2023-08-25T11:49:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index e61744fe2..c7b99a06f 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -66,12 +66,12 @@ C++20では関数によるカスタマイゼーションポイントの問題点
 | [`iterator_t`](ranges/iterator_t.md)                             | イテレータ型を取得する (alias template)        | C++20          |
 | [`sentinel_t`](ranges/sentinel_t.md)                             | 番兵型を取得する (alias template)              | C++20          |
 | [`const_iterator_t`](ranges/const_iterator_t.md)                 | 定数イテレータ型を取得する (alias template)        | C++23          |
-| [`const_sentinel_t`](ranges/const_sentinel_t.md)          | 定数番兵型を取得する (alias template)        | C++23          |
+| [`const_sentinel_t`](ranges/const_sentinel_t.md)                 | 定数番兵型を取得する (alias template)        | C++23          |
 | [`range_difference_t`](ranges/range_difference_t.md)             | イテレータの差の型を取得する (alias template)  | C++20          |
 | [`range_size_t`](ranges/range_size_t.md)                         | サイズの型を取得する(alias template)           | C++20          |
 | [`range_value_t`](ranges/range_value_t.md)                       | 要素の型を取得する (alias template)            | C++20          |
 | [`range_reference_t`](ranges/range_reference_t.md)               | 要素の参照型を取得する (alias template)        | C++20          |
-| [`range_const_reference_t`](ranges/range_const_reference_t.md.nolink)| 要素の定数参照型を取得する (alias template) | C++23          |
+| [`range_const_reference_t`](ranges/range_const_reference_t.md)   | 要素の定数参照型を取得する (alias template)    | C++23          |
 | [`range_rvalue_reference_t`](ranges/range_rvalue_reference_t.md) | 要素の右辺値参照型を取得する (alias template)  | C++20          |
 
 ## Rangeコンセプト
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>range_const_reference_t -- range_const_reference_t追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/range_const_reference_t.html"/>
      <id>4e3f803c205c62d5f0d09e3684e12536eaa58704:reference/ranges/range_const_reference_t.md</id>
      <updated>2023-08-25T11:49:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/range_const_reference_t.md b/reference/ranges/range_const_reference_t.md
new file mode 100644
index 000000000..ae2fe2e01
--- /dev/null
+++ b/reference/ranges/range_const_reference_t.md
@@ -0,0 +1,49 @@
+# range_const_reference_t
+* ranges[meta header]
+* std::ranges[meta namespace]
+* type-alias[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;range R&amp;gt;
+  using range_const_reference_t = iter_const_reference_t&amp;lt;iterator_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+* range[link range.md]
+* iter_const_reference_t[link /reference/iterator/iter_const_reference_t.md]
+* iterator_t[link iterator_t.md]
+
+## 概要
+
+任意のRange型`R`から、そのRangeの要素への`const`参照型を取得する。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  static_assert(std::same_as&amp;lt;std::ranges::range_const_reference_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt; , const int&amp;amp;&amp;gt;);
+  static_assert(std::same_as&amp;lt;std::ranges::range_const_reference_t&amp;lt;std::vector&amp;lt;bool&amp;gt;&amp;gt;, bool&amp;gt;);
+}
+```
+* std::ranges::range_const_reference_t[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- ranges::cbegin : P2278R4適用 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cbegin.html"/>
      <id>99a88c1134be17442149de2b693a93f654af17c9:reference/ranges/cbegin.md</id>
      <updated>2023-08-24T15:48:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cbegin.md b/reference/ranges/cbegin.md
index be8218130..0953d768e 100644
--- a/reference/ranges/cbegin.md
+++ b/reference/ranges/cbegin.md
@@ -16,10 +16,14 @@ namespace std::ranges {
 Rangeから先頭要素への読み取り専用イテレータを取得する関数オブジェクト。
 
 ## 効果
-部分式`E`の型を`T`とする。このとき、式`ranges::cbegin(E)`の効果は以下の式と等しい。
+部分式`E`の型を`T`、`E`の評価結果オブジェクトを示す左辺値を`t`とする。このとき、式`ranges::cbegin(E)`の効果は以下の式と等しい。
 
-1. `E`がlvalueであれば、[`ranges::begin`](begin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
-2. それ以外の場合、[`ranges::begin`](begin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++20まで
+    1. `E`がlvalueであれば、[`ranges::begin`](begin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;gt;(E))`
+    2. それ以外の場合、[`ranges::begin`](begin.md)`(static_cast&amp;lt;const T&amp;amp;&amp;amp;&amp;gt;(E))`
+- C++23から
+    1. `E`が右辺値であり、[`enable_borrowed_range`](./enable_borrowed_range.md)`&amp;lt;remove_cv_t&amp;lt;T&amp;gt;&amp;gt;`が`false`となる場合、`ranges::cbegin(E)`は不適格
+    2. それ以外の場合、式`U`を[`ranges::begin`](begin.md)`(`[`possibly-const-range`](./possibly-const-range.md)`(t))`とすると、[`const_iterator`](/reference/iterator/const_iterator.md)`&amp;lt;decltype(U)&amp;gt;(U)`
 
 ## 戻り値
 先頭要素への読み取り専用イテレータ。
@@ -28,7 +32,9 @@ Rangeから先頭要素への読み取り専用イテレータを取得する関
 Rangeが`const`な場合について[`ranges::begin`](begin.md)をカスタマイズすることで、`ranges::cbegin`をカスタマイズできる。
 
 ## 備考
-`ranges::cbegin`の呼び出しが有効な式であるとき、その型は[`input_or_output_iterator`](/reference/iterator/input_or_output_iterator.md)のモデルである。
+`ranges::cbegin`の呼び出しが有効な式であるとき、その型は[`input_or_output_iterator`](/reference/iterator/input_or_output_iterator.md)のモデルであり、C++23以降はさらに[`constant-iterator`](/reference/iterator/constant-iterator.md)のモデルである。
+
+C++20までは`range`型`R`の`begin()`の`const`オーバーロードを呼び出してていたため得られたイテレータは必ずしも定数イテレータではない場合があったが、C++23からはそこから定数イテレータが得られない場合に[`basic_const_iterator`](/reference/iterator/basic_const_iterator.md)を使用することで確実に定数イテレータを取得する。
 
 ## 例
 ```cpp example
@@ -75,3 +81,4 @@ int main()
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- constant_rangeとpossibly-const-range追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>bf5c611427dcc7915ec8a49a6d6cdd962eadcd55:reference/ranges.md</id>
      <updated>2023-08-24T15:48:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index adda7dbb9..e61744fe2 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -90,7 +90,7 @@ C++20では関数によるカスタマイゼーションポイントの問題点
 | [`contiguous_range`](ranges/contiguous_range.md)       | イテレータが隣接イテレータであるRange (concept)             | C++20          |
 | [`common_range`](ranges/common_range.md)               | イテレータと番兵の型が等しいRange (concept)                 | C++20          |
 | [`viewable_range`](ranges/viewable_range.md)           | ビューに変換できるRange (concept)                           | C++20          |
-| [`constant_range`](ranges/constant_range.md.nolink)    | 要素が定数なRange (concept)                           | C++23          |
+| [`constant_range`](ranges/constant_range.md)           | 要素が定数なRange (concept)                           | C++23          |
 
 ## カスタマイゼーションポイント
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constant_range -- constant_rangeとpossibly-const-range追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/constant_range.html"/>
      <id>bf5c611427dcc7915ec8a49a6d6cdd962eadcd55:reference/ranges/constant_range.md</id>
      <updated>2023-08-24T15:48:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/constant_range.md b/reference/ranges/constant_range.md
new file mode 100644
index 000000000..4843aa153
--- /dev/null
+++ b/reference/ranges/constant_range.md
@@ -0,0 +1,51 @@
+# constant_range
+* ranges[meta header]
+* concept[meta id-type]
+* std::ranges[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class T&amp;gt;
+  concept constant_range = input_range&amp;lt;T&amp;gt; &amp;amp;&amp;amp; constant-iterator&amp;lt;iterator_t&amp;lt;T&amp;gt;&amp;gt;;
+}
+```
+* input_range[link input_range.md]
+* constant-iterator[link /reference/iterator/constant-iterator.md]
+* iterator_t[link iterator_t.md]
+
+## 概要
+
+`constant_range`は、その要素が変更不可能な`range`を表すコンセプトである。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  static_assert(not std::ranges::constant_range&amp;lt;      std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::ranges::constant_range&amp;lt;const std::vector&amp;lt;int&amp;gt;&amp;gt;);
+
+  static_assert(std::ranges::constant_range&amp;lt;std::ranges::iota_view&amp;lt;int&amp;gt;&amp;gt;);
+}
+```
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.1
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 6
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>possibly-const-range -- constant_rangeとpossibly-const-range追加 #1084</title>
      <link href="https://cpprefjp.github.io/reference/ranges/possibly-const-range.html"/>
      <id>bf5c611427dcc7915ec8a49a6d6cdd962eadcd55:reference/ranges/possibly-const-range.md</id>
      <updated>2023-08-24T15:48:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/possibly-const-range.md b/reference/ranges/possibly-const-range.md
new file mode 100644
index 000000000..8a921c7fd
--- /dev/null
+++ b/reference/ranges/possibly-const-range.md
@@ -0,0 +1,35 @@
+# possibly-const-range
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_range R&amp;gt;
+  constexpr auto&amp;amp; possibly-const-range(R&amp;amp; r) {
+    if constexpr (constant_range&amp;lt;const R&amp;gt; &amp;amp;&amp;amp; !constant_range&amp;lt;R&amp;gt;) {
+      return const_cast&amp;lt;const R&amp;amp;&amp;gt;(r);
+    } else {
+      return r;
+    }
+  }
+}
+```
+* input_range[link /reference/ranges/input_range.md]
+* constant_range[link /reference/ranges/constant_range.md]
+
+## 概要
+
+`possibly-const-range`は入力の`input_range`オブジェクト`r`を、可能なら要素が定数化された`range`へ変換するものである。
+
+主に、`ranges::cbegin()`など定数イテレータを取得したい場所で、イテレータ取得前の段階で`range`型の簡単な変換のみで定数イテレータを取得できるかを試行するのに使用される。
+
+
+## バージョン
+### 言語
+- C++23
+
+## 参照
+
+- [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_constant_evaluated -- is_constant_evaluated : C++23 if constevalへのリンクを追加</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_constant_evaluated.html"/>
      <id>a2837c4112998a57257d08838c7e4412876c5826:reference/type_traits/is_constant_evaluated.md</id>
      <updated>2023-08-23T19:07:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_constant_evaluated.md b/reference/type_traits/is_constant_evaluated.md
index 1cd386e9a..09482f82d 100644
--- a/reference/type_traits/is_constant_evaluated.md
+++ b/reference/type_traits/is_constant_evaluated.md
@@ -134,6 +134,7 @@ int main()
 
 ## 関連項目
 - [C++20 コンパイル時初期化を強制する`constinit`キーワードを追加](/lang/cpp20/constinit.md)
+- [C++23 `if consteval`](/lang/cpp23/if_consteval.md.nolink)
 
 ## 参照
 - [P0595R2 `std::is_constant_evaluated()`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0595r2.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
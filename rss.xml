<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-25T07:04:18.583739</updated>
  <id>277824ea-9d87-4573-9615-0eb4f40d3d43</id>

  
    <entry>
      <title>コルーチン -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:lang/cpp20/coroutines.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index e2889988a..7593e5c33 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -173,7 +173,7 @@ int main() {
 }
 ```
 
-コルーチンの終端まで制御が到達、またはコルーチンを指すコルーチンハンドルの[`destroy`](/reference/coroutine/coroutine_handle/destroy.md.nolink)メンバ関数が呼び出されると、コルーチン・ステートは破棄される。
+コルーチンの終端まで制御が到達、またはコルーチンを指すコルーチンハンドルの[`destroy`](/reference/coroutine/coroutine_handle/destroy.md)メンバ関数が呼び出されると、コルーチン・ステートは破棄される。
 
 メモリ解放関数はPromise型のスコープで名前探索が行われる。
 名前探索に失敗した場合は、グローバルスコープで探索が行われる。
@@ -230,7 +230,7 @@ Await式は式 _await-resume_ と同じ型、同じ値カテゴリを持つ。
 Await式は式 _o_ と式 _await-resume_ を評価し、続いて：
 
 - _await-ready_ の結果が`false`の場合、コルーチンは中断状態とみなされる。その後に：
-    - _await-suspend_ の型が[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)の場合、_await-suspend_[`.resume()`](/reference/coroutine/coroutine_handle/resume.md.nolink)が評価される。
+    - _await-suspend_ の型が[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)の場合、_await-suspend_[`.resume()`](/reference/coroutine/coroutine_handle/resume.md)が評価される。
     - そうではなく _await-suspend_ の型が`bool`の場合、_await-suspend_ が評価され、その結果が`false`であればコルーチンは再開する。
     - それ以外の場合、_await-suspend_ が評価される。
 - _await-suspend_ の評価が例外で終了した場合、例外が捕捉されてコルーチンが再開し、その例外は即座に再スローされる。そうでなければ、スコープ終了をともなわずに現在のコルーチンの呼出元もしくは再開元へ制御フローを戻す。
@@ -483,10 +483,10 @@ int main()
 * std::terminate()[link /reference/exception/terminate.md]
 * std::coroutine_handle[link /reference/coroutine/coroutine_handle.md]
 * std::suspend_always[link /reference/coroutine/suspend_always.md]
-* resume()[link /reference/coroutine/coroutine_handle/resume.md.nolink]
-* done()[link /reference/coroutine/coroutine_handle/done.md.nolink]
-* from_promise[link /reference/coroutine/coroutine_handle/from_promise.md.nolink]
-* promise()[link /reference/coroutine/coroutine_handle/promise.md.nolink]
+* resume()[link /reference/coroutine/coroutine_handle/resume.md]
+* done()[link /reference/coroutine/coroutine_handle/done.md]
+* from_promise[link /reference/coroutine/coroutine_handle/from_promise.md]
+* promise()[link /reference/coroutine/coroutine_handle/promise.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_handle -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle.md b/reference/coroutine/coroutine_handle.md
index bc4d6fea2..6902e71ab 100644
--- a/reference/coroutine/coroutine_handle.md
+++ b/reference/coroutine/coroutine_handle.md
@@ -27,43 +27,43 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`(constructor)`](coroutine_handle/op_constructor.md.nolink) | コンストラクタ | C++20 |
-| [`operator=`](coroutine_handle/op_assign.md.nolink) | 代入演算子 | C++20 |
+| [`(constructor)`](coroutine_handle/op_constructor.md) | コンストラクタ | C++20 |
+| [`operator=`](coroutine_handle/op_assign.md) | 代入演算子 | C++20 |
 
 ### エクスポート
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`address`](coroutine_handle/address.md.nolink) | コルーチンハンドルに対応するアドレス値 | C++20 |
+| [`address`](coroutine_handle/address.md) | コルーチンハンドルに対応するアドレス値 | C++20 |
 
 ### 観測
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`operator bool`](coroutine_handle/op_bool.md.nolink) | 有効なコルーチンかを確認 | C++20 |
-| [`done`](coroutine_handle/done.md.nolink) | 最終サスペンドポイントで中断状態にあるか確認 | C++20 |
+| [`operator bool`](coroutine_handle/op_bool.md) | 有効なコルーチンか確認 | C++20 |
+| [`done`](coroutine_handle/done.md) | 最終サスペンドポイントで中断状態にあるか確認 | C++20 |
 
 ### 再開
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`operator()`](coroutine_handle/resume.md.nolink) | 中断状態にあるコルーチンを再開 | C++20 |
-| [`resume`](coroutine_handle/resume.md.nolink)     | 中断状態にあるコルーチンを再開 | C++20 |
-| [`destroy`](coroutine_handle/destroy.md.nolink)   | 中断状態にあるコルーチンを破棄 | C++20 |
+| [`operator()`](coroutine_handle/resume.md) | 中断状態にあるコルーチンを再開 | C++20 |
+| [`resume`](coroutine_handle/resume.md)     | 中断状態にあるコルーチンを再開 | C++20 |
+| [`destroy`](coroutine_handle/destroy.md)   | 中断状態にあるコルーチンを破棄 | C++20 |
 
 ### Promiseアクセス
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`promise`](coroutine_handle/promise.md.nolink) | Promiseオブジェクトの参照 | C++20 |
+| [`promise`](coroutine_handle/promise.md) | Promiseオブジェクトの参照 | C++20 |
 
 
 ## 静的メンバ関数
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`from_promise`](coroutine_handle/from_promise.md.nolink) | Promiseオブジェクトから対応するコルーチンハンドルへ変換 | C++20 |
-| [`from_address`](coroutine_handle/from_address.md.nolink) | アドレス値から対応するコルーチンハンドルへ変換 | C++20 |
+| [`from_promise`](coroutine_handle/from_promise.md) | Promiseオブジェクトから対応するコルーチンハンドルへ変換 | C++20 |
+| [`from_address`](coroutine_handle/from_address.md) | アドレス値から対応するコルーチンハンドルへ変換 | C++20 |
 
 
 ## 非メンバ関数
@@ -86,7 +86,7 @@ namespace std {
 | `bool operator&amp;gt;(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);`  | 左辺が右辺より大きいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
 | `bool operator&amp;gt;=(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 左辺が右辺以上かを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
 
-`coroutine_handle`同士の比較は、[`address`](coroutine_handle/address.md.nolink)が返すアドレス値を用いて比較演算が行われる。
+`coroutine_handle`同士の比較は、[`address`](coroutine_handle/address.md)が返すアドレス値を用いて比較演算が行われる。
 
 
 ## 例
@@ -147,10 +147,10 @@ int main()
 * std::coroutine_handle&amp;lt;promise_type&amp;gt;[color ff0000]
 * std::suspend_never[link suspend_never.md]
 * std::suspend_always[link suspend_always.md]
-* resume()[link coroutine_handle/resume.md.nolink]
-* done()[link coroutine_handle/done.md.nolink]
-* from_promise[link coroutine_handle/from_promise.md.nolink]
-* promise()[link coroutine_handle/promise.md.nolink]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
 * std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>address -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/address.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/address.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/address.md b/reference/coroutine/coroutine_handle/address.md
new file mode 100644
index 000000000..d51dba102
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/address.md
@@ -0,0 +1,54 @@
+# address
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr void* address() const noexcept;
+```
+
+## 概要
+コルーチンハンドルに対応するアドレス値を返す。
+
+
+## 戻り値
+コルーチンハンドルに対応するアドレス値。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;coroutine&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  assert(h.address() == nullptr);
+}
+```
+* address()[color ff0000]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`from_address`](from_address.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>destroy -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/destroy.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/destroy.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/destroy.md b/reference/coroutine/coroutine_handle/destroy.md
new file mode 100644
index 000000000..6d2473fc5
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/destroy.md
@@ -0,0 +1,45 @@
+# destroy
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void destroy() const;
+```
+
+## 概要
+中断状態にあるコルーチンを明示的に破棄する。
+
+
+## 事前条件
+`*this`が中断状態のコルーチンを指すこと。
+
+
+## 効果
+コルーチンを破棄する。
+
+
+## 備考
+最終サスペンドポイントにてコルーチンを中断していなければ、該当コルーチンは暗黙に破棄される。
+
+[`std::thread`](/refernce/thread/thread.md)や[`std::jthread`](/refernce/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを破棄する場合、その振る舞いは処理系定義とされる。
+
+
+## 例
+### 出力
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`done`](done.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>done -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/done.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/done.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/done.md b/reference/coroutine/coroutine_handle/done.md
new file mode 100644
index 000000000..c283ef14f
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/done.md
@@ -0,0 +1,38 @@
+# done
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+bool done() const;
+```
+
+## 概要
+最終サスペンドポイントで中断状態にあること、つまりコルーチン本体の終端到達済みか確認する。
+
+
+## 事前条件
+`*this`が中断状態のコルーチンを指すこと。
+
+
+## 戻り値
+コルーチンが最終サスペンドポイントで中断状態にあれば`true`を返す。
+それ以外の箇所で中断状態にあれば`false`を返す。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`resume`](resume.md)
+- [`destroy`](destroy.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_address -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/from_address.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/from_address.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/from_address.md b/reference/coroutine/coroutine_handle/from_address.md
new file mode 100644
index 000000000..bc5826886
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/from_address.md
@@ -0,0 +1,44 @@
+# from_address
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr coroutine_handle&amp;lt;&amp;gt;
+coroutine_handle&amp;lt;&amp;gt;::from_address(void* addr);        // (1)
+
+static constexpr coroutine_handle&amp;lt;Promise&amp;gt;
+coroutine_handle&amp;lt;Promise&amp;gt;::from_address(void* addr); // (2)
+```
+
+## 概要
+アドレス値から対応するコルーチンハンドルを取得する。
+
+
+## 事前条件
+`addr`は[`address()`](address.md)呼び出しで得られたアドレス値であること。
+
+
+## 戻り値
+コルーチンを参照するコルーチンハンドル。
+
+
+## 事後条件
+`from_address(`[`address()`](address.md)`) == *this`
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`address`](address.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_promise -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/from_promise.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/from_promise.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/from_promise.md b/reference/coroutine/coroutine_handle/from_promise.md
new file mode 100644
index 000000000..33429e41a
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/from_promise.md
@@ -0,0 +1,40 @@
+# from_promise
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static coroutine_handle from_promise(Promise&amp;amp; p);
+```
+
+## 概要
+Promiseオブジェクトから対応するコルーチンハンドルを取得する。
+
+
+## 事前条件
+`p`はコルーチンのPromiseオブジェクトへの参照。
+
+
+## 戻り値
+コルーチンを参照するコルーチンハンドル(`h`)。
+
+
+## 事後条件
+[`addressof`](/reference/memory/addressof.md)`(h.`[`promise()`](promise.md)`) ==` [`addressof`](/reference/memory/addressof.md)`(p)`
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`promise`](promise.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>代入演算子 -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/op_assign.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/op_assign.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/op_assign.md b/reference/coroutine/coroutine_handle/op_assign.md
new file mode 100644
index 000000000..81c76e7e0
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/op_assign.md
@@ -0,0 +1,59 @@
+# 代入演算子
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+coroutine_handle&amp;amp; operator=(nullptr_t) noexcept;
+```
+
+## 概要
+コルーチンハンドルをリセットし、有効なコルーチンを指さない状態にする。
+
+
+## 戻り値
+`*this`
+
+
+## 事後条件
+[`address()`](address.md) `== nullptr`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;coroutine&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  h = nullptr;
+  assert(h.address() == nullptr);
+}
+```
+* = nullptr[color ff0000]
+* address()[link address.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/op_bool.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/op_bool.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/op_bool.md b/reference/coroutine/coroutine_handle/op_bool.md
new file mode 100644
index 000000000..2dc9da05a
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/op_bool.md
@@ -0,0 +1,58 @@
+# operator bool
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr explicit operator bool() const noexcept;
+```
+
+## 概要
+コルーチンハンドルが有効なコルーチンを指すかを確認する。
+
+
+## 戻り値
+[`address()`](address.md) `!= nullptr`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  if (h) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;vaild coroutine&amp;#34; &amp;lt;&amp;lt; std::endl;
+  } else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;empty coroutine&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* if (h)[color ff0000]
+
+### 出力
+```
+empty coroutine
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/op_constructor.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/op_constructor.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/op_constructor.md b/reference/coroutine/coroutine_handle/op_constructor.md
new file mode 100644
index 000000000..445a9e9ea
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/op_constructor.md
@@ -0,0 +1,59 @@
+# コンストラクタ
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr coroutine_handle() noexcept;           // (1)
+constexpr coroutine_handle(nullptr_t) noexcept;  // (2)
+```
+
+## 概要
+有効なコルーチンを指さないコルーチンハンドルを構築する。
+
+実際のコルーチンを指す`coroutine_handle`は、静的メンバ関数[`from_promise`](from_promise.md)／[`from_address`](from_address.md)を利用する。
+
+
+## 事後条件
+[`address()`](address.md) `== nullptr`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;coroutine&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  assert(h.address() == nullptr);
+}
+```
+* std::coroutine_handle[color ff0000]
+* address()[link address.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`from_promise`](from_promise.md)
+- [`from_address`](from_address.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>promise -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/promise.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/promise.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/promise.md b/reference/coroutine/coroutine_handle/promise.md
new file mode 100644
index 000000000..61351b821
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/promise.md
@@ -0,0 +1,36 @@
+# promise
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+Promise&amp;amp; promise() const;
+```
+
+## 概要
+コルーチンのPromiseオブジェクトへの参照を返す。
+
+
+## 事前条件
+`*this`が有効なコルーチンを指すこと。
+
+
+## 戻り値
+コルーチンのPromiseオブジェクトへの参照。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [from_promise](form_promise.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resume -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/resume.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/resume.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/resume.md b/reference/coroutine/coroutine_handle/resume.md
new file mode 100644
index 000000000..466357a55
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/resume.md
@@ -0,0 +1,41 @@
+# resume
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void operator()() const;
+void resume() const;
+```
+
+## 概要
+中断状態にあるコルーチンの実行を再開する。
+
+
+## 事前条件
+`*this`が中断状態のコルーチンを指し、かつ最終サスペンドポイントで中断状態にないこと。
+
+
+## 効果
+コルーチンの実行を再開する。
+
+
+## 備考
+[`std::thread`](/refernce/thread/thread.md)や[`std::jthread`](/refernce/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを再開する場合、その振る舞いは処理系定義とされる。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`done`](done.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_traits -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_traits.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_traits.md b/reference/coroutine/coroutine_traits.md
index b5f3b03fc..dcb32b485 100644
--- a/reference/coroutine/coroutine_traits.md
+++ b/reference/coroutine/coroutine_traits.md
@@ -100,9 +100,9 @@ int main()
 * std::suspend_never[link suspend_never.md]
 * std::suspend_always[link suspend_always.md]
 * std::coroutine_handle[link coroutine_handle.md]
-* resume()[link coroutine_handle/resume.md.nolink]
-* done()[link coroutine_handle/done.md.nolink]
-* from_promise[link coroutine_handle/from_promise.md.nolink]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
 * std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/noop_coroutine.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine.md b/reference/coroutine/noop_coroutine.md
index dd1844fb2..22c6b7bff 100644
--- a/reference/coroutine/noop_coroutine.md
+++ b/reference/coroutine/noop_coroutine.md
@@ -115,10 +115,10 @@ int main()
 * std::noop_coroutine()[color ff0000]
 * std::suspend_always[link suspend_always.md]
 * std::coroutine_handle[link coroutine_handle.md]
-* resume()[link coroutine_handle/resume.md.nolink]
-* done()[link coroutine_handle/done.md.nolink]
-* from_promise[link coroutine_handle/from_promise.md.nolink]
-* promise()[link coroutine_handle/promise.md.nolink]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
 * std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine_handle -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/noop_coroutine_handle.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine_handle.md b/reference/coroutine/noop_coroutine_handle.md
index 34afc8ccb..d09c8b664 100644
--- a/reference/coroutine/noop_coroutine_handle.md
+++ b/reference/coroutine/noop_coroutine_handle.md
@@ -81,6 +81,7 @@ namespace std {
 
 ## 関連項目
 - [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`coroutine_handle`](coroutine_handle.md)
 - [`noop_coroutine`](noop_coroutine.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_always -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_always.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/suspend_always.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_always.md b/reference/coroutine/suspend_always.md
index 56f37cf0b..7b266c7f0 100644
--- a/reference/coroutine/suspend_always.md
+++ b/reference/coroutine/suspend_always.md
@@ -93,10 +93,10 @@ int main()
 ```
 * std::suspend_always[color ff0000]
 * std::coroutine_handle[link coroutine_handle.md]
-* resume()[link coroutine_handle/resume.md.nolink]
-* done()[link coroutine_handle/done.md.nolink]
-* from_promise[link coroutine_handle/from_promise.md.nolink]
-* promise()[link coroutine_handle/promise.md.nolink]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
 * std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_never -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_never.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/suspend_never.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_never.md b/reference/coroutine/suspend_never.md
index 4d79d70c5..b2345392d 100644
--- a/reference/coroutine/suspend_never.md
+++ b/reference/coroutine/suspend_never.md
@@ -94,10 +94,10 @@ int main()
 * std::suspend_never[color ff0000]
 * std::suspend_always[link suspend_always.md]
 * std::coroutine_handle[link coroutine_handle.md]
-* resume()[link coroutine_handle/resume.md.nolink]
-* done()[link coroutine_handle/done.md.nolink]
-* from_promise[link coroutine_handle/from_promise.md.nolink]
-* promise()[link coroutine_handle/promise.md.nolink]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
 * std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- coroutine_handle: クラス説明</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>9faa18dc4374b02e5a61d856c046cfa37580c767:lang/cpp20/coroutines.md</id>
      <updated>2020-06-25T11:28:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index d9aa64309..e2889988a 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -220,9 +220,9 @@ Await式の評価では、次のような補助的な型、式、オブジェク
     - 適合する関数が見つからない場合、_o_ を _a_ とする。
     - オーバーロード解決が曖昧な場合、プログラムは不適格となる。
 - _e_ を、_o_ の評価結果を参照する左辺値とする。
-- _h_ を、同Await式を含むコルーチンを参照する[`std::coroutine_handle&amp;lt;P&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)型のオブジェクトとする。
+- _h_ を、同Await式を含むコルーチンを参照する[`std::coroutine_handle&amp;lt;P&amp;gt;`](/reference/coroutine/coroutine_handle.md)型のオブジェクトとする。
 - _await-ready_ を、`bool`に変換されうる式 _e_`.await_ready()`とする。
-- _await-suspend_ を、式 _e_`.await_suspend(` _h_ `)`とする。この式（の結果）は`void`であるか、`bool`または任意の型`Z`に対する[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)型のprvalueであるべき。
+- _await-suspend_ を、式 _e_`.await_suspend(` _h_ `)`とする。この式（の結果）は`void`であるか、`bool`または任意の型`Z`に対する[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)型のprvalueであるべき。
 - _await-resume_ を、式 _e_`.await_resume()`とする。
 
 Await式は式 _await-resume_ と同じ型、同じ値カテゴリを持つ。
@@ -230,7 +230,7 @@ Await式は式 _await-resume_ と同じ型、同じ値カテゴリを持つ。
 Await式は式 _o_ と式 _await-resume_ を評価し、続いて：
 
 - _await-ready_ の結果が`false`の場合、コルーチンは中断状態とみなされる。その後に：
-    - _await-suspend_ の型が[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)の場合、_await-suspend_[`.resume()`](/reference/coroutine/coroutine_handle/resume.md.nolink)が評価される。
+    - _await-suspend_ の型が[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)の場合、_await-suspend_[`.resume()`](/reference/coroutine/coroutine_handle/resume.md.nolink)が評価される。
     - そうではなく _await-suspend_ の型が`bool`の場合、_await-suspend_ が評価され、その結果が`false`であればコルーチンは再開する。
     - それ以外の場合、_await-suspend_ が評価される。
 - _await-suspend_ の評価が例外で終了した場合、例外が捕捉されてコルーチンが再開し、その例外は即座に再スローされる。そうでなければ、スコープ終了をともなわずに現在のコルーチンの呼出元もしくは再開元へ制御フローを戻す。
@@ -481,7 +481,7 @@ int main()
 * co_yield[color ff0000]
 * std::exchange[link /reference/utility/exchange.md]
 * std::terminate()[link /reference/exception/terminate.md]
-* std::coroutine_handle[link /reference/coroutine/coroutine_handle.md.nolink]
+* std::coroutine_handle[link /reference/coroutine/coroutine_handle.md]
 * std::suspend_always[link /reference/coroutine/suspend_always.md]
 * resume()[link /reference/coroutine/coroutine_handle/resume.md.nolink]
 * done()[link /reference/coroutine/coroutine_handle/done.md.nolink]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine -- coroutine_handle: クラス説明</title>
      <link href="https://cpprefjp.github.io/reference/coroutine.html"/>
      <id>9faa18dc4374b02e5a61d856c046cfa37580c767:reference/coroutine.md</id>
      <updated>2020-06-25T11:28:58+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;coroutine&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;coroutine&amp;gt;&lt;/code&gt;ヘッダでは、&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;の制御に関する機能を提供する。&lt;/p&gt;
&lt;h2&gt;コルーチントレイト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html&#34;&gt;coroutine_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Promise型導出トレイト(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コルーチンハンドル&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html&#34;&gt;coroutine_handle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コルーチンハンドル(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;何もしないコルーチン&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html&#34;&gt;noop_coroutine_promise&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンPromise型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html&#34;&gt;noop_coroutine_handle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンのハンドル(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html&#34;&gt;noop_coroutine&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンのハンドルを取得(function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;トリビアルAwaitable型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/suspend_never.html&#34;&gt;suspend_never&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に中断しないAwaitable型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/suspend_always.html&#34;&gt;suspend_always&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に中断するAwaitable型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 11.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;C++20 コルーチン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_handle -- coroutine_handle: クラス説明</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html"/>
      <id>9faa18dc4374b02e5a61d856c046cfa37580c767:reference/coroutine/coroutine_handle.md</id>
      <updated>2020-06-25T11:28:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle.md b/reference/coroutine/coroutine_handle.md
new file mode 100644
index 000000000..bc4d6fea2
--- /dev/null
+++ b/reference/coroutine/coroutine_handle.md
@@ -0,0 +1,175 @@
+# coroutine_handle
+* coroutine[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Promise = void&amp;gt;
+  struct coroutine_handle;
+
+  constexpr bool operator==(coroutine_handle&amp;lt;&amp;gt; x, coroutine_handle&amp;lt;&amp;gt; y) noexcept;
+  constexpr strong_ordering operator&amp;lt;=&amp;gt;(coroutine_handle&amp;lt;&amp;gt; x, coroutine_handle&amp;lt;&amp;gt; y) noexcept;
+
+  template&amp;lt;class T&amp;gt; struct hash;
+  template&amp;lt;class P&amp;gt; struct hash&amp;lt;coroutine_handle&amp;lt;P&amp;gt;&amp;gt;;
+}
+```
+* hash[link /reference/functional/hash.md]
+
+## 概要
+コルーチンに対応するコルーチンハンドル。
+
+
+## メンバ関数
+### 構築・リセット
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`(constructor)`](coroutine_handle/op_constructor.md.nolink) | コンストラクタ | C++20 |
+| [`operator=`](coroutine_handle/op_assign.md.nolink) | 代入演算子 | C++20 |
+
+### エクスポート
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`address`](coroutine_handle/address.md.nolink) | コルーチンハンドルに対応するアドレス値 | C++20 |
+
+### 観測
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`operator bool`](coroutine_handle/op_bool.md.nolink) | 有効なコルーチンかを確認 | C++20 |
+| [`done`](coroutine_handle/done.md.nolink) | 最終サスペンドポイントで中断状態にあるか確認 | C++20 |
+
+### 再開
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`operator()`](coroutine_handle/resume.md.nolink) | 中断状態にあるコルーチンを再開 | C++20 |
+| [`resume`](coroutine_handle/resume.md.nolink)     | 中断状態にあるコルーチンを再開 | C++20 |
+| [`destroy`](coroutine_handle/destroy.md.nolink)   | 中断状態にあるコルーチンを破棄 | C++20 |
+
+### Promiseアクセス
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`promise`](coroutine_handle/promise.md.nolink) | Promiseオブジェクトの参照 | C++20 |
+
+
+## 静的メンバ関数
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`from_promise`](coroutine_handle/from_promise.md.nolink) | Promiseオブジェクトから対応するコルーチンハンドルへ変換 | C++20 |
+| [`from_address`](coroutine_handle/from_address.md.nolink) | アドレス値から対応するコルーチンハンドルへ変換 | C++20 |
+
+
+## 非メンバ関数
+### ハッシュサポート
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `template&amp;lt;class T&amp;gt; struct hash` | 先行宣言(class template) | C++20 |
+| `template&amp;lt;class P&amp;gt; struct hash&amp;lt;coroutine_handle&amp;lt;P&amp;gt;&amp;gt;` | `hash`の`coroutine_handle&amp;lt;P&amp;gt;`に対する特殊化 | C++20 |
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|-----|-----|-----|
+| `bool operator==(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 等値比較 | C++20 |
+| `bool operator!=(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 非等値比較 (`==`により使用可能) | C++20 |
+| `strong_ordering operator&amp;lt;=&amp;gt;(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 三方比較 | C++20 |
+| `bool operator&amp;lt;(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);`  | 左辺が右辺より小さいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;lt;=(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 左辺が右辺以下を判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);`  | 左辺が右辺より大きいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+| `bool operator&amp;gt;=(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 左辺が右辺以上かを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
+
+`coroutine_handle`同士の比較は、[`address`](coroutine_handle/address.md.nolink)が返すアドレス値を用いて比較演算が行われる。
+
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct task {
+  struct promise_type {
+    int value_;
+    auto get_return_object() { return task{*this}; }
+    auto initial_suspend() { return std::suspend_never{}; }
+    auto final_suspend() { return std::suspend_always{}; }
+    void return_value(int x) { value_ = x; }
+    void unhandled_exception() { std::terminate(); }
+  };
+
+  ~task()
+  {
+    if (coro_)
+      coro_.destroy();
+  }
+
+  task(task const&amp;amp;) = delete;
+  task(task&amp;amp;&amp;amp; rhs)
+    : coro_(std::exchange(rhs.coro_, nullptr)) {}
+
+  int get()
+  {
+    if (!coro_.done()) {
+      coro_.resume();
+    }
+    return coro_.promise().value_;
+  }
+
+private:
+  explicit task(promise_type&amp;amp; p)
+    : coro_(std::coroutine_handle&amp;lt;promise_type&amp;gt;::from_promise(p)) {}
+
+  std::coroutine_handle&amp;lt;promise_type&amp;gt; coro_;
+};
+
+task f()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;coroutine&amp;#34; &amp;lt;&amp;lt; std::endl;
+  co_return 42;
+}
+
+int main()
+{
+  auto c = f();
+  std::cout &amp;lt;&amp;lt; &amp;#34;main&amp;#34; &amp;lt;&amp;lt; std::endl;
+  int r = c.get();
+  std::cout &amp;lt;&amp;lt; &amp;#34;result=&amp;#34; &amp;lt;&amp;lt; r &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::coroutine_handle&amp;lt;promise_type&amp;gt;[color ff0000]
+* std::suspend_never[link suspend_never.md]
+* std::suspend_always[link suspend_always.md]
+* resume()[link coroutine_handle/resume.md.nolink]
+* done()[link coroutine_handle/done.md.nolink]
+* from_promise[link coroutine_handle/from_promise.md.nolink]
+* promise()[link coroutine_handle/promise.md.nolink]
+* std::exchange[link /reference/utility/exchange.md]
+
+### 出力
+```
+coroutine
+main
+result=42
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_traits -- coroutine_handle: クラス説明</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html"/>
      <id>9faa18dc4374b02e5a61d856c046cfa37580c767:reference/coroutine/coroutine_traits.md</id>
      <updated>2020-06-25T11:28:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_traits.md b/reference/coroutine/coroutine_traits.md
index 0915ffa37..b5f3b03fc 100644
--- a/reference/coroutine/coroutine_traits.md
+++ b/reference/coroutine/coroutine_traits.md
@@ -99,7 +99,7 @@ int main()
 * std::coroutine_traits[color ff0000]
 * std::suspend_never[link suspend_never.md]
 * std::suspend_always[link suspend_always.md]
-* std::coroutine_handle[link coroutine_handle.md.nolink]
+* std::coroutine_handle[link coroutine_handle.md]
 * resume()[link coroutine_handle/resume.md.nolink]
 * done()[link coroutine_handle/done.md.nolink]
 * from_promise[link coroutine_handle/from_promise.md.nolink]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine -- coroutine_handle: クラス説明</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html"/>
      <id>9faa18dc4374b02e5a61d856c046cfa37580c767:reference/coroutine/noop_coroutine.md</id>
      <updated>2020-06-25T11:28:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine.md b/reference/coroutine/noop_coroutine.md
index 61c30d9b3..dd1844fb2 100644
--- a/reference/coroutine/noop_coroutine.md
+++ b/reference/coroutine/noop_coroutine.md
@@ -114,7 +114,7 @@ int main()
 ```
 * std::noop_coroutine()[color ff0000]
 * std::suspend_always[link suspend_always.md]
-* std::coroutine_handle[link coroutine_handle.md.nolink]
+* std::coroutine_handle[link coroutine_handle.md]
 * resume()[link coroutine_handle/resume.md.nolink]
 * done()[link coroutine_handle/done.md.nolink]
 * from_promise[link coroutine_handle/from_promise.md.nolink]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine_handle -- coroutine_handle: クラス説明</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html"/>
      <id>9faa18dc4374b02e5a61d856c046cfa37580c767:reference/coroutine/noop_coroutine_handle.md</id>
      <updated>2020-06-25T11:28:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine_handle.md b/reference/coroutine/noop_coroutine_handle.md
index 884382d9e..34afc8ccb 100644
--- a/reference/coroutine/noop_coroutine_handle.md
+++ b/reference/coroutine/noop_coroutine_handle.md
@@ -29,8 +29,8 @@ namespace std {
   using noop_coroutine_handle = coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt;;
 }
 ```
-* coroutine_handle&amp;lt;&amp;gt;[link coroutine_handle.md.nolink]
-* coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt;[link coroutine_handle.md.nolink]
+* coroutine_handle&amp;lt;&amp;gt;[link coroutine_handle.md]
+* coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt;[link coroutine_handle.md]
 * unspecified[italic]
 
 
@@ -66,7 +66,7 @@ namespace std {
 
 | 名前      | 説明           | 対応バージョン |
 |-----------|----------------|----------------|
-| `address` | コルーチンハンドルに対応するポインタ値を返す | C++20 |
+| `address` | コルーチンハンドルに対応するアドレス値を返す | C++20 |
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_always -- coroutine_handle: クラス説明</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_always.html"/>
      <id>9faa18dc4374b02e5a61d856c046cfa37580c767:reference/coroutine/suspend_always.md</id>
      <updated>2020-06-25T11:28:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_always.md b/reference/coroutine/suspend_always.md
index 344affaac..56f37cf0b 100644
--- a/reference/coroutine/suspend_always.md
+++ b/reference/coroutine/suspend_always.md
@@ -13,7 +13,7 @@ namespace std {
   };
 }
 ```
-* coroutine_handle&amp;lt;&amp;gt;[link coroutine_handle.md.nolink]
+* coroutine_handle&amp;lt;&amp;gt;[link coroutine_handle.md]
 
 ## 概要
 コルーチンを中断させる、トリビアルAwaitable型。
@@ -92,7 +92,7 @@ int main()
 }
 ```
 * std::suspend_always[color ff0000]
-* std::coroutine_handle[link coroutine_handle.md.nolink]
+* std::coroutine_handle[link coroutine_handle.md]
 * resume()[link coroutine_handle/resume.md.nolink]
 * done()[link coroutine_handle/done.md.nolink]
 * from_promise[link coroutine_handle/from_promise.md.nolink]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_never -- coroutine_handle: クラス説明</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_never.html"/>
      <id>9faa18dc4374b02e5a61d856c046cfa37580c767:reference/coroutine/suspend_never.md</id>
      <updated>2020-06-25T11:28:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_never.md b/reference/coroutine/suspend_never.md
index 695764c76..4d79d70c5 100644
--- a/reference/coroutine/suspend_never.md
+++ b/reference/coroutine/suspend_never.md
@@ -13,7 +13,7 @@ namespace std {
   };
 }
 ```
-* coroutine_handle&amp;lt;&amp;gt;[link coroutine_handle.md.nolink]
+* coroutine_handle&amp;lt;&amp;gt;[link coroutine_handle.md]
 
 ## 概要
 コルーチンを中断させない、トリビアルAwaitable型。
@@ -93,7 +93,7 @@ int main()
 ```
 * std::suspend_never[color ff0000]
 * std::suspend_always[link suspend_always.md]
-* std::coroutine_handle[link coroutine_handle.md.nolink]
+* std::coroutine_handle[link coroutine_handle.md]
 * resume()[link coroutine_handle/resume.md.nolink]
 * done()[link coroutine_handle/done.md.nolink]
 * from_promise[link coroutine_handle/from_promise.md.nolink]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_copyable -- Merge pull request #768 from cpprefjp/fix/trivially_copyable_def</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/is_trivially_copyable.html"/>
      <id>976b48055ba5c394f05a2007b13612871257fe53:reference/type_traits/is_trivially_copyable.md</id>
      <updated>2020-06-25T01:49:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/is_trivially_copyable.md b/reference/type_traits/is_trivially_copyable.md
index 28ab18210..7cb491a8c 100644
--- a/reference/type_traits/is_trivially_copyable.md
+++ b/reference/type_traits/is_trivially_copyable.md
@@ -24,9 +24,101 @@ namespace std {
 
 
 ## 効果
+
 `is_trivially_copyable`は、`T`がトリビアルコピー可能な型であるならば[`true_type`](true_type.md)から派生し、そうでなければ[`false_type`](false_type.md)から派生する。
 
-「トリビアルコピー可能な型」とは、「`std::memcpy()`可能な型である」と言い換えることもできる。これに分類される型は、以下の全ての条件を満たす必要がある：
+「トリビアルコピー可能な型」とは、「`std::memcpy()`可能な型である」と言い換えることもできる。
+
+トリビアルコピー可能な型の定義はこれまで2回変更されている。[CWG issue 1734](https://wg21.cmeerw.net/cwg/issue1734)による変更と、C++20での変更の2つだ。  
+CWG issue 1734は2013年8月9日に報告されている。つまりC++14に対応した処理系はこれに対応している可能性があり、すくなくともC++17時点で規格書に修正が取り込まれている。
+
+### 前提となる用語
+
+`user-provided`な関数とは、`= default`/`= delete`指定されていない、ユーザーによって宣言された関数である。
+
+### C++20
+
+#### 資格のある特殊メンバ関数
+
+資格のある特殊メンバ関数とは、特殊メンバ関数のうち、次の条件を満たすものを言う。
+
+- `= delete`指定されていない
+- 制約されている場合、それを満たしている
+- 同じ種類の特殊メンバ関数の中でもっとも強く制約されている
+
+同じ種類の特殊メンバ関数とは簡単に言うと、制約を除いて同一の宣言となる特殊メンバ関数のことである。
+
+制約の詳細については[コンセプト](/lang/cpp20/concepts.md)にある解説を参照のこと。
+
+例えば下の例を見てほしい。`optional`クラスは2つのコピーコンストラクタを持っている(#1と#2)。  
+これらは最初の引数の型が等しいので、2つの同じ種類のコピーコンストラクタを持っているといえる。  
+これらはいずれも`= delete`指定されていない。
+
+`T=std::unique_ptr&amp;lt;int&amp;gt;`の場合、#1と#2はどちらも制約を満たさないので資格のあるコピーコンストラクタを持たない。  
+`T=std::string`の場合、#2のみ制約を満たすので#2だけが資格のあるコピーコンストラクタである。  
+`T=int`の場合、#1と#2はどちらも制約を満たすが、#1のほうが#2より強く制約されているので、#1だけが資格のあるコピーコンストラクタである。
+
+```cpp example
+#include &amp;lt;type_traits&amp;gt;
+template &amp;lt;typename T&amp;gt;
+concept trivially_copy_constructible = std::is_trivially_copy_constructible_v&amp;lt;T&amp;gt;;
+template &amp;lt;typename T&amp;gt;
+struct optional {
+    // #1
+    optional(optional const&amp;amp;)
+        requires trivially_copy_constructible&amp;lt;T&amp;gt; &amp;amp;&amp;amp; std::copy_constructible&amp;lt;T&amp;gt;
+        = default;
+    // #2
+    optional(optional const&amp;amp; rhs)
+            requires copy_constructible&amp;lt;T&amp;gt;;
+};
+```
+* std::is_trivially_copy_constructible_v[link /reference/type_traits/is_trivially_copy_constructible.md]
+* std::copy_constructible[link /reference/concepts/copy_constructible.md]
+
+#### トリビアルコピー可能な型
+
+トリビアルコピー可能な型とは、次の条件を満たすものをいう。
+
+1. 少なくとも１つの資格のあるコピー/ムーブ コンストラクタ/代入演算子がある
+2. 資格のあるコピー/ムーブ コンストラクタ/代入演算子それぞれはtrivialである
+3. trivialで`= delete`指定されていないデストラクタを持つ
+
+これをもうすこし具体的に解釈する。
+
+まずそのクラス自体に対して次の条件を満たす必要がある。
+
+- デストラクタはvirtualではない
+- デストラクタは`= delete`指定されていない
+- デストラクタと全ての**資格のある**コピー/ムーブ コンストラクタ/代入演算子は`user-provided`ではない
+- virtual関数を持たず、virtual基本クラスも持たない
+- 少なくとも１つの**資格のある**コピー/ムーブ コンストラクタ/代入演算子がある
+
+対象となるクラスの非静的メンバ変数及び全ての基底クラスもトリビアルコピー可能でなければならない
+
+### C++17もしくは[CWG issue 1734](https://wg21.cmeerw.net/cwg/issue1734)が適用された処理系
+
+トリビアルコピー可能な型とは、次の条件を満たすものをいう。
+
+- 全てのコピー/ムーブ コンストラクタ/代入演算子はtrivialもしくは`= delete`指定されている
+- コピー/ムーブ コンストラクタ/代入演算子のうち少なくとも1つは`= delete`指定されていない
+- trivialで`= delete`指定されていないデストラクタを持つ
+
+これをもうすこし具体的に解釈する。
+
+まずそのクラス自体に対して次の条件を満たす必要がある。
+
+- デストラクタはvirtualではない
+- デストラクタは`= delete`指定されていない
+- デストラクタと全てのコピー/ムーブ コンストラクタ/代入演算子は`user-provided`ではない
+- virtual関数を持たず、virtual基本クラスも持たない
+- コピー/ムーブ コンストラクタ/代入演算子のうち少なくとも1つは`= delete`指定されていない
+
+対象となるクラスの非静的メンバ変数及び全ての基底クラスもトリビアルコピー可能でなければならない
+
+### [CWG issue 1734](https://wg21.cmeerw.net/cwg/issue1734)が適用されていないC++14以前の処理系
+
+トリビアルコピー可能な型とは、次の条件を満たすものをいう。
 
 - 非トリビアルなコピーコンストラクタを持っていないこと
 - 非トリビアルなムーブコンストラクタを持っていないこと
@@ -34,13 +126,24 @@ namespace std {
 - 非トリビアルなムーブ代入演算子を持っていないこと
 - トリビアルなデストラクタを持っていること
 
-トリビアル(trivial)な特殊関数(コンストラクタ、代入演算子、デストラクタ)とは、「ユーザー定義されない特殊関数」のことを意味する。
+これをもうすこし具体的に解釈する。
+
+まずそのクラス自体に対して次の条件を満たす必要がある。
+
+- デストラクタはvirtualではない
+- デストラクタと全てのコピー/ムーブ コンストラクタ/代入演算子は`user-provided`ではない
+- virtual関数を持たず、virtual基本クラスも持たない
 
+対象となるクラスの非静的メンバ変数及び全ての基底クラスもトリビアルコピー可能でなければならない
+
+しかし、デストラクタが削除されていてもトリビアルコピー可能となる問題があった。
 
 ## 例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
-
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;string&amp;gt;
 struct C1 {
   // 非トリビアルな特殊関数を持っていない
 
@@ -49,21 +152,68 @@ struct C1 {
 };
 
 struct C2 {
-  // 非トリビアルな特殊関数(デストラクタ)を持っている
+  // デストラクタはuser-provided
   ~C2() {}
 };
 
+struct TrivialDestructor {
+  // デストラクタはdefault指定されており、user-providedではない
+  ~TrivialDestructor() = default;
+};
+
+struct DeletedDestructor {
+  // デストラクタはdeleteされている
+  ~DeletedDestructor() = delete;
+};
+#ifdef __cpp_concepts
+template &amp;lt;typename T&amp;gt;
+concept trivially_copy_constructible = std::is_trivially_copy_constructible_v&amp;lt;T&amp;gt;;
+template &amp;lt;typename T&amp;gt;
+struct optional {
+  alignas(T) std::byte value[sizeof(T)];
+  bool engaged;
+  // #1: default指定されており、user-providedではない
+  optional(optional const&amp;amp;)
+      requires trivially_copy_constructible&amp;lt;T&amp;gt; &amp;amp;&amp;amp; std::copy_constructible&amp;lt;T&amp;gt;
+      = default;
+
+  // #2: user-providedなコピーコンストラクタ
+  optional(optional const&amp;amp; rhs)
+          requires std::copy_constructible&amp;lt;T&amp;gt;
+      : engaged(rhs.engaged)
+  {
+      if (engaged) {
+          new (value) T(rhs.value);
+      }
+  }
+};
+#endif
 // 組み込み型は全てトリビアルコピー可能
 static_assert(std::is_trivially_copyable&amp;lt;int&amp;gt;::value == true, &amp;#34;int is trivially copyable&amp;#34;);
 static_assert(std::is_trivially_copyable&amp;lt;int*&amp;gt;::value == true, &amp;#34;int* is trivially copyable&amp;#34;);
 
-// ユーザー定義型は、ユーザー定義の特殊関数を持っていなければトリビアルコピー可能
+// ユーザー定義型
 static_assert(std::is_trivially_copyable&amp;lt;C1&amp;gt;::value == true, &amp;#34;C1 is trivially copyable&amp;#34;);
 static_assert(std::is_trivially_copyable&amp;lt;C2&amp;gt;::value == false, &amp;#34;C2 isn&amp;#39;t trivially copyable&amp;#34;);
-
+static_assert(std::is_trivially_copyable&amp;lt;TrivialDestructor&amp;gt;::value == true, &amp;#34;TrivialDestructor is trivially copyable&amp;#34;);
+
+// CWG issue 1734が適用された環境ではトリビアルコピー可能ではない
+static_assert(std::is_trivially_copyable&amp;lt;DeletedDestructor&amp;gt;::value == false, &amp;#34;DeletedDestructor isn&amp;#39;t trivially copyable&amp;#34;);
+
+#ifdef __cpp_concepts
+// #1も#2も資格のあるコピーコンストラクタではなく、他に資格のあるコピー/ムーブ コンストラクタ/代入演算子がないためトリビアルコピー可能ではない
+static_assert(std::is_trivially_copyable&amp;lt;optional&amp;lt;std::unique_ptr&amp;lt;int&amp;gt;&amp;gt;&amp;gt;::value == false, &amp;#34;std::unique_ptr&amp;lt;int&amp;gt; isn&amp;#39;t trivially copyable&amp;#34;);
+// #2が資格のあるコピーコンストラクタであるが、user-proviedであるためトリビアルコピー可能ではない
+static_assert(std::is_trivially_copyable&amp;lt;optional&amp;lt;std::string&amp;gt;&amp;gt;::value == false, &amp;#34;optional&amp;lt;std::string&amp;gt; isn&amp;#39;t trivially copyable&amp;#34;);
+// #1が資格のあるコピーコンストラクタであるのでトリビアルコピー可能
+static_assert(std::is_trivially_copyable&amp;lt;optional&amp;lt;int&amp;gt;&amp;gt;::value == true, &amp;#34;optional&amp;lt;int&amp;gt; is trivially copyable&amp;#34;);
+#endif
 int main() {}
 ```
 * std::is_trivially_copyable[color ff0000]
+* std::is_trivially_copy_constructible_v[link /reference/type_traits/is_trivially_copy_constructible.md]
+* std::copy_constructible[link /reference/concepts/copy_constructible.md]
+* std::byte[link /reference/cstddef/byte.md]
 
 ### 出力
 ```
@@ -84,3 +234,5 @@ int main() {}
 - [LWG Issue 2015. Incorrect pre-conditions for some type traits](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2015)
     - C++11では要件が「型`T`は完全型であるか、`const`/`volatile`修飾された(あるいはされていない)`void`か、要素数不明の配列型でなければならない。」だったが、これは間違いであるため、C++14で「型[`remove_all_extents`](remove_all_extents.md)`&amp;lt;T&amp;gt;::type`は、完全型か、`const`/`volatile`修飾された(あるいはされていない)`void`でなければならない。」に変更された。
 - [P0006R0 Adopt Type Traits Variable Templates from Library Fundamentals TS for C++17](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0006r0.html)
+- [CWG issue 1734. Nontrivial deleted copy functions](https://wg21.cmeerw.net/cwg/issue1734)
+- [P0848R3 Conditionally Trivial Special Member Functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0848r3.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- Merge pull request #768 from cpprefjp/fix/trivially_copyable_def</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>976b48055ba5c394f05a2007b13612871257fe53:working_style.md</id>
      <updated>2020-06-25T01:49:30+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;スタイル&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;本サイトで作業を行う上でのスタイルです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「である」調&lt;/li&gt;
&lt;li&gt;句読点は「、」「。」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型修飾のスタイル：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A) const T &amp;amp;v&lt;/li&gt;
&lt;li&gt;B) const T&amp;amp; v&lt;/li&gt;
&lt;li&gt;C) const T &amp;amp; v&lt;/li&gt;
&lt;li&gt;D) T const &amp;amp;v&lt;/li&gt;
&lt;li&gt;E) T const&amp;amp; v&lt;/li&gt;
&lt;li&gt;F) T const &amp;amp; v&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本サイトでは、Bのスタイルで型修飾を行います。&lt;/p&gt;
&lt;h2&gt;バージョンの表記&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;p&gt;C++11以降対応については対応バージョンを明記します。バージョン表記が省略されている場合、C++03、C++98対応であることを表します。&lt;/p&gt;
&lt;h4&gt;例&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;C++17&lt;/li&gt;
&lt;li&gt;C++14&lt;/li&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;li&gt;C++03&lt;/li&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;p&gt;開発環境の表記がない場合は、C++98対応のあらゆる環境で使用できるものとします。 
処理系の記載は、作業者が確認できたものを記載します。&lt;/p&gt;
&lt;h4&gt;例&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Clang: 2.1, 2.8&lt;/li&gt;
&lt;li&gt;GCC: 4.3.4, 4.4.3, 4.4.4, 4.5.2&lt;/li&gt;
&lt;li&gt;IBM XL C/C++ Enterprise Edition, V11.1.0.0&lt;/li&gt;
&lt;li&gt;Intel: 10.1, 11.0, 11.1, 12.0&lt;/li&gt;
&lt;li&gt;PathScale: 3.2&lt;/li&gt;
&lt;li&gt;QCC&lt;/li&gt;
&lt;li&gt;Visual C++: 2003, 2008, 2010&lt;/li&gt;
&lt;li&gt;pgCC: 11.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それと、訳語表を随時更新していってください。&lt;/p&gt;
&lt;h3&gt;訳語表&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;日本語&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abstract class&lt;/td&gt;
&lt;td&gt;抽象クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;aggregate&lt;/td&gt;
&lt;td&gt;集成体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alignment&lt;/td&gt;
&lt;td&gt;アライメント (表示位置ではなくメモリの文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apply, application&lt;/td&gt;
&lt;td&gt;適用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arithmetic type&lt;/td&gt;
&lt;td&gt;算術型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;associative container(s)&lt;/td&gt;
&lt;td&gt;連想コンテナ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base class&lt;/td&gt;
&lt;td&gt;基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bidirectional iterator&lt;/td&gt;
&lt;td&gt;双方向イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bucket&lt;/td&gt;
&lt;td&gt;バケット&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complexity&lt;/td&gt;
&lt;td&gt;計算量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compound type&lt;/td&gt;
&lt;td&gt;複合型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const iterator&lt;/td&gt;
&lt;td&gt;読み取り専用イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;const reverse iterator&lt;/td&gt;
&lt;td&gt;読み取り専用逆イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;covariant&lt;/td&gt;
&lt;td&gt;共変的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dereference&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dereferenceable&lt;/td&gt;
&lt;td&gt;間接参照可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;derived class&lt;/td&gt;
&lt;td&gt;派生クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;direct base class&lt;/td&gt;
&lt;td&gt;直接基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;effects&lt;/td&gt;
&lt;td&gt;効果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;emplace&lt;/td&gt;
&lt;td&gt;直接構築&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;empty&lt;/td&gt;
&lt;td&gt;空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equal&lt;/td&gt;
&lt;td&gt;等値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equivalence class&lt;/td&gt;
&lt;td&gt;同値分類 (数学的文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equivalence relation&lt;/td&gt;
&lt;td&gt;同値関係 (数学的文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equivalent&lt;/td&gt;
&lt;td&gt;同値 (数学的文脈)、等価 (その他文脈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forward iterator&lt;/td&gt;
&lt;td&gt;前方向イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fundamental type&lt;/td&gt;
&lt;td&gt;単純型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ill-formed&lt;/td&gt;
&lt;td&gt;不適格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;implementation-defined&lt;/td&gt;
&lt;td&gt;処理系定義&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indirect base class&lt;/td&gt;
&lt;td&gt;間接基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inherited&lt;/td&gt;
&lt;td&gt;継承&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input iterator&lt;/td&gt;
&lt;td&gt;入力イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iterator&lt;/td&gt;
&lt;td&gt;イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;literal type&lt;/td&gt;
&lt;td&gt;リテラル型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;load factor&lt;/td&gt;
&lt;td&gt;負荷率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lvalue reference&lt;/td&gt;
&lt;td&gt;左辺値参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max load factor&lt;/td&gt;
&lt;td&gt;最大負荷率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;member&lt;/td&gt;
&lt;td&gt;メンバ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;move&lt;/td&gt;
&lt;td&gt;(std::move 的な意味で)ムーブ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;move assignment&lt;/td&gt;
&lt;td&gt;ムーブ代入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;move constructor&lt;/td&gt;
&lt;td&gt;ムーブコンストラクタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mutable iterator&lt;/td&gt;
&lt;td&gt;可変イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;non-virtual base class&lt;/td&gt;
&lt;td&gt;非仮想基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;note&lt;/td&gt;
&lt;td&gt;注&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;output iterator&lt;/td&gt;
&lt;td&gt;出力イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overload&lt;/td&gt;
&lt;td&gt;オーバーロード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;partial ordering&lt;/td&gt;
&lt;td&gt;半順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;partition&lt;/td&gt;
&lt;td&gt;区分化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pointer&lt;/td&gt;
&lt;td&gt;ポインタ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;polymorphic&lt;/td&gt;
&lt;td&gt;多相的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;power of N&lt;/td&gt;
&lt;td&gt;Nの累乗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;predicate&lt;/td&gt;
&lt;td&gt;述語&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;propagation, propagate&lt;/td&gt;
&lt;td&gt;伝播&lt;br /&gt; (伝搬は誤用が広まったものなので使わない)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pure virtual function&lt;/td&gt;
&lt;td&gt;純粋仮想関数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;random access iterator&lt;/td&gt;
&lt;td&gt;ランダムアクセスイテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;range&lt;/td&gt;
&lt;td&gt;範囲&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;remarks&lt;/td&gt;
&lt;td&gt;備考&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requires&lt;/td&gt;
&lt;td&gt;要件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;returns&lt;/td&gt;
&lt;td&gt;戻り値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reverse iterator&lt;/td&gt;
&lt;td&gt;逆イテレータ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rvalue reference&lt;/td&gt;
&lt;td&gt;右辺値参照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sequence container(s)&lt;/td&gt;
&lt;td&gt;シーケンスコンテナ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;signed&lt;/td&gt;
&lt;td&gt;符号付き&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop request&lt;/td&gt;
&lt;td&gt;停止要求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop state&lt;/td&gt;
&lt;td&gt;停止状態&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spurious Failure&lt;/td&gt;
&lt;td&gt;見かけ上の失敗&lt;br /&gt; &lt;a href=&#34;https://togetter.com/li/430770&#34; target=&#34;_blank&#34;&gt;https://togetter.com/li/430770&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strict weak ordering&lt;/td&gt;
&lt;td&gt;狭義の弱順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strong ordering&lt;/td&gt;
&lt;td&gt;全順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;synchronization&lt;/td&gt;
&lt;td&gt;同期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;total ordering relationalship&lt;/td&gt;
&lt;td&gt;全順序関係&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trailing return type&lt;/td&gt;
&lt;td&gt;後置戻り値型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trait&lt;/td&gt;
&lt;td&gt;トレイト&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;trivial&lt;/td&gt;
&lt;td&gt;自明 (逆は非自明)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;underlying type&lt;/td&gt;
&lt;td&gt;基底型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unordered associative container(s)&lt;/td&gt;
&lt;td&gt;非順序連想コンテナ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unspecified&lt;/td&gt;
&lt;td&gt;未規定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;virtual base class&lt;/td&gt;
&lt;td&gt;仮想基底クラス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;weak ordering&lt;/td&gt;
&lt;td&gt;弱順序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;well-formed&lt;/td&gt;
&lt;td&gt;適格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eligible&lt;/td&gt;
&lt;td&gt;資格のある&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine -- noop_coroutine: サンプルコード追加</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html"/>
      <id>860a4d36cd6ab37a14ec03f523f55e8f4cd63d3e:reference/coroutine/noop_coroutine.md</id>
      <updated>2020-06-25T01:14:08+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine.md b/reference/coroutine/noop_coroutine.md
index 56f4b6ba8..61c30d9b3 100644
--- a/reference/coroutine/noop_coroutine.md
+++ b/reference/coroutine/noop_coroutine.md
@@ -28,6 +28,117 @@ noop_coroutine_handle noop_coroutine() noexcept;
 （両者は等しいかもしれないし、等しくないかもしれない。）
 
 
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct task {
+  struct promise_type {
+    std::coroutine_handle&amp;lt;&amp;gt; next_;
+    auto get_return_object() { return task{*this}; }
+    auto initial_suspend() { return std::suspend_always{}; }
+    auto final_suspend() { return std::suspend_always{}; }
+    auto yield_value(bool cont)
+    {
+      struct awaiter {
+        std::coroutine_handle&amp;lt;&amp;gt; next_;
+        bool await_ready() { return false; }
+        auto await_suspend(std::coroutine_handle&amp;lt;&amp;gt;) { return next_; }
+        void await_resume() {}
+      };
+      // 継続条件condを満たす場合は次コルーチンnext_に制御を移し、
+      // そうでない場合は再開元に制御を戻すAwaiterオブジェクトを返す。
+      return awaiter{cont ? next_ : std::noop_coroutine()};
+    }
+    void return_void() {}
+    void unhandled_exception() { std::terminate(); }
+  };
+
+  using coro_handle = std::coroutine_handle&amp;lt;promise_type&amp;gt;;
+
+  ~task()
+  {
+    if (coro_)
+      coro_.destroy();
+  }
+
+  task(task const&amp;amp;) = delete;
+  task(task&amp;amp;&amp;amp; rhs)
+    : coro_(std::exchange(rhs.coro_, nullptr)) {}
+
+  void set_next(task&amp;amp; t)
+  {
+    coro_.promise().next_ = t.coro_;
+  }
+
+  void start()
+  {
+    if (!coro_.done())
+      coro_.resume();
+  }
+
+private:
+  explicit task(promise_type&amp;amp; p)
+    : coro_(coro_handle::from_promise(p)) {}
+
+  coro_handle coro_;
+};
+
+task coro(int id)
+{
+  int n = id * 10;
+  for (;;) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;coro#&amp;#34; &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
+    // 継続条件(0 &amp;lt; n)を満たす間はco_yield式により
+    // 自コルーチンを中断して次のコルーチンを再開する。
+    co_yield (0 &amp;lt; n);
+    n /= 2;
+  }
+}
+
+int main()
+{
+  // コルーチン3個の巡回グラフ(c1→c2→c3→c1...)を構成する
+  auto c1 = coro(1);
+  auto c2 = coro(2);
+  auto c3 = coro(3);
+  c1.set_next(c2);
+  c2.set_next(c3);
+  c3.set_next(c1);
+
+  // コルーチン動作を開始
+  c1.start();
+}
+```
+* std::noop_coroutine()[color ff0000]
+* std::suspend_always[link suspend_always.md]
+* std::coroutine_handle[link coroutine_handle.md.nolink]
+* resume()[link coroutine_handle/resume.md.nolink]
+* done()[link coroutine_handle/done.md.nolink]
+* from_promise[link coroutine_handle/from_promise.md.nolink]
+* promise()[link coroutine_handle/promise.md.nolink]
+* std::exchange[link /reference/utility/exchange.md]
+
+### 出力
+```
+coro#1 10
+coro#2 20
+coro#3 30
+coro#1 5
+coro#2 10
+coro#3 15
+coro#1 2
+coro#2 5
+coro#3 7
+coro#1 1
+coro#2 2
+coro#3 3
+coro#1 0
+```
+
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:lang/cpp20/coroutines.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 9b2e49288..d9aa64309 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -73,7 +73,7 @@ task&amp;lt;void&amp;gt; g3(int a, ...) { // エラー: 可変引数リストは許可され
 コルーチンのPromise型は、コルーチンの戻り値型`R`と引数リスト`P1`, `P2`, ..., `Pn`から決定されるクラス型である。
 
 - デフォルト動作では`R::protmise_type`がPromise型となる。
-- ユーザプログラム中で[`std::coroutine_traits`](/reference/coroutine/coroutine_traits.md.nolink)トレイトを特殊化した場合は、`coroutine_traits&amp;lt;R, P1, P2, ..., Pn&amp;gt;::protmise_type`がPromise型となる。
+- ユーザプログラム中で[`std::coroutine_traits`](/reference/coroutine/coroutine_traits.md)トレイトを特殊化した場合は、`coroutine_traits&amp;lt;R, P1, P2, ..., Pn&amp;gt;::protmise_type`がPromise型となる。
 - コルーチンがクラスの非静的メンバの場合、`P1`は暗黙のオブジェクトパラメータ(`*this`の型)となる。
 
 コルーチンは、その本体 _function-body_ が下記の通り置き換えられたかのように動作する：
@@ -220,9 +220,9 @@ Await式の評価では、次のような補助的な型、式、オブジェク
     - 適合する関数が見つからない場合、_o_ を _a_ とする。
     - オーバーロード解決が曖昧な場合、プログラムは不適格となる。
 - _e_ を、_o_ の評価結果を参照する左辺値とする。
-- _h_ を、同Await式を含むコルーチンを参照する[`std:::coroutine_handle&amp;lt;P&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)型のオブジェクトとする。
+- _h_ を、同Await式を含むコルーチンを参照する[`std::coroutine_handle&amp;lt;P&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)型のオブジェクトとする。
 - _await-ready_ を、`bool`に変換されうる式 _e_`.await_ready()`とする。
-- _await-suspend_ を、式 _e_`.await_suspend(` _h_ `)`とする。この式（の結果）は`void`であるか、`bool`または任意の型`Z`に対する[`std:::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)型のprvalueであるべき。
+- _await-suspend_ を、式 _e_`.await_suspend(` _h_ `)`とする。この式（の結果）は`void`であるか、`bool`または任意の型`Z`に対する[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)型のprvalueであるべき。
 - _await-resume_ を、式 _e_`.await_resume()`とする。
 
 Await式は式 _await-resume_ と同じ型、同じ値カテゴリを持つ。
@@ -230,7 +230,7 @@ Await式は式 _await-resume_ と同じ型、同じ値カテゴリを持つ。
 Await式は式 _o_ と式 _await-resume_ を評価し、続いて：
 
 - _await-ready_ の結果が`false`の場合、コルーチンは中断状態とみなされる。その後に：
-    - _await-suspend_ の型が[`std:::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)の場合、_await-suspend_[`.resume()`](/reference/coroutine/coroutine_handle/resume.md.nolink)が評価される。
+    - _await-suspend_ の型が[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md.nolink)の場合、_await-suspend_[`.resume()`](/reference/coroutine/coroutine_handle/resume.md.nolink)が評価される。
     - そうではなく _await-suspend_ の型が`bool`の場合、_await-suspend_ が評価され、その結果が`false`であればコルーチンは再開する。
     - それ以外の場合、_await-suspend_ が評価される。
 - _await-suspend_ の評価が例外で終了した場合、例外が捕捉されてコルーチンが再開し、その例外は即座に再スローされる。そうでなければ、スコープ終了をともなわずに現在のコルーチンの呼出元もしくは再開元へ制御フローを戻す。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/reference/coroutine.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:reference/coroutine.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;coroutine&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;coroutine&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;coroutine&amp;gt;&lt;/code&gt;ヘッダでは、&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;コルーチン&lt;/a&gt;の制御に関する機能を提供する。&lt;/p&gt;
&lt;h2&gt;コルーチントレイト&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html&#34;&gt;coroutine_traits&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Promise型導出トレイト(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;コルーチンハンドル&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/coroutine_handle.md.nolink&#34;&gt;coroutine_handle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コルーチンハンドル(class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;何もしないコルーチン&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html&#34;&gt;noop_coroutine_promise&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンPromise型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html&#34;&gt;noop_coroutine_handle&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンのハンドル(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html&#34;&gt;noop_coroutine&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何もしないコルーチンのハンドルを取得(function)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;トリビアルAwaitable型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/suspend_never.html&#34;&gt;suspend_never&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に中断しないAwaitable型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/coroutine/suspend_always.html&#34;&gt;suspend_always&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に中断するAwaitable型(class)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++20&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: 11.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20/coroutines.html&#34;&gt;C++20 コルーチン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_traits -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:reference/coroutine/coroutine_traits.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_traits.md b/reference/coroutine/coroutine_traits.md
new file mode 100644
index 000000000..0915ffa37
--- /dev/null
+++ b/reference/coroutine/coroutine_traits.md
@@ -0,0 +1,128 @@
+# coroutine_traits
+* coroutine[meta header]
+* std[meta namespace]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class R, class... ArgTypes&amp;gt;
+  struct coroutine_traits;
+}
+```
+
+## 概要
+コルーチンのPromise型を指定するためのトレイト。
+
+- `ArgTypes`が型のパラメータパックかつ非修飾の`R::promise_type`が有効な型を表すとき、`coroutine_traits&amp;lt;R,ArgTypes...&amp;gt;`は下記の公開アクセスメンバを持つ。
+```cpp
+using promise_type = typename R::promise_type;
+```
+
+- それ以外では、`coroutine_traits&amp;lt;R,ArgTypes...&amp;gt;`はメンバを持たない。
+
+このクラステンプレートをプログラム定義型で特殊化する場合、`promise_type`は公開アクセスのネスト型とする必要がある。
+
+
+## メンバ型
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| `promise_type` | コルーチンのPromise型 | C++20 |
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct task;
+
+struct task_promise {
+  task get_return_object();
+  auto initial_suspend() { return std::suspend_never{}; }
+  auto final_suspend() { return std::suspend_always{}; }
+  auto yield_value(int) { return std::suspend_always{}; }
+  void return_void() {}
+  void unhandled_exception() { std::terminate(); }
+};
+
+struct task {
+  using coro_handle = std::coroutine_handle&amp;lt;task_promise&amp;gt;;
+  explicit task(task_promise&amp;amp; p)
+    : coro_(coro_handle::from_promise(p)) {}
+  task(task const&amp;amp;) = delete;
+  task(task&amp;amp;&amp;amp; rhs)
+    : coro_(std::exchange(rhs.coro_, nullptr)) {}
+  ~task()
+  {
+    if (coro_)
+      coro_.destroy();
+  }
+
+  void next()
+  {
+    if (!coro_.done())
+      coro_.resume();
+  }
+
+private:
+  coro_handle coro_;
+};
+
+task task_promise::get_return_object()
+{
+  return task{*this};
+}
+
+// 戻り値taskの関数をコルーチンにアダプトする
+template &amp;lt;typename... ArgTypes&amp;gt;
+struct std::coroutine_traits&amp;lt;task, ArgTypes...&amp;gt; {
+  using promise_type = task_promise;
+};
+
+task coro()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;coro#1&amp;#34; &amp;lt;&amp;lt; std::endl;
+  co_yield {};
+  std::cout &amp;lt;&amp;lt; &amp;#34;coro#2&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+
+int main()
+{
+  auto t = coro();
+  std::cout &amp;lt;&amp;lt; &amp;#34;main#1&amp;#34; &amp;lt;&amp;lt; std::endl;
+  t.next();
+  std::cout &amp;lt;&amp;lt; &amp;#34;main#2&amp;#34; &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::coroutine_traits[color ff0000]
+* std::suspend_never[link suspend_never.md]
+* std::suspend_always[link suspend_always.md]
+* std::coroutine_handle[link coroutine_handle.md.nolink]
+* resume()[link coroutine_handle/resume.md.nolink]
+* done()[link coroutine_handle/done.md.nolink]
+* from_promise[link coroutine_handle/from_promise.md.nolink]
+* std::exchange[link /reference/utility/exchange.md]
+
+### 出力
+```
+coro#1
+main#1
+coro#2
+main#2
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:reference/coroutine/noop_coroutine.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine.md b/reference/coroutine/noop_coroutine.md
new file mode 100644
index 000000000..56f4b6ba8
--- /dev/null
+++ b/reference/coroutine/noop_coroutine.md
@@ -0,0 +1,46 @@
+# noop_coroutine
+* coroutine[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+noop_coroutine_handle noop_coroutine() noexcept;
+```
+* noop_coroutine_handle[link noop_coroutine_handle.md]
+
+## 概要
+中断／再開時に何もしないコルーチンへのハンドルを取得する。
+
+「何もしないコルーチン」は、非対称コルーチン動作と対称コルーチン動作を実行時に制御するケースで利用される。
+
+
+## 戻り値
+中断／再開時に何もしないコルーチンへのハンドル
+
+
+## 例外
+投げない
+
+
+## 備考
+`noop_coroutine()`が返したハンドルと、別の`noop_coroutine()`呼び出しで返されたハンドルとの等値性は規定されない。
+（両者は等しいかもしれないし、等しくないかもしれない。）
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+
+
+## 参照
+- [P0913R1 Add symmetric coroutine control transfer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0913r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine_handle -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:reference/coroutine/noop_coroutine_handle.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine_handle.md b/reference/coroutine/noop_coroutine_handle.md
new file mode 100644
index 000000000..884382d9e
--- /dev/null
+++ b/reference/coroutine/noop_coroutine_handle.md
@@ -0,0 +1,88 @@
+# noop_coroutine_handle
+* coroutine[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std {
+  struct noop_coroutine_promise {};
+
+  template&amp;lt;&amp;gt;
+  struct coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt; : coroutine_handle&amp;lt;&amp;gt;
+  {
+    constexpr explicit operator bool() const noexcept;
+    constexpr bool done() const noexcept;
+
+    constexpr void operator()() const noexcept;
+    constexpr void resume() const noexcept;
+    constexpr void destroy() const noexcept;
+
+    noop_coroutine_promise&amp;amp; promise() const noexcept;
+
+    constexpr void* address() const noexcept;
+
+  private:
+    coroutine_handle(unspecified);
+  };
+
+  using noop_coroutine_handle = coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt;;
+}
+```
+* coroutine_handle&amp;lt;&amp;gt;[link coroutine_handle.md.nolink]
+* coroutine_handle&amp;lt;noop_coroutine_promise&amp;gt;[link coroutine_handle.md.nolink]
+* unspecified[italic]
+
+
+## 概要
+中断／再開時に何もしないコルーチンへのハンドル。
+
+「何もしないコルーチン」は、非対称コルーチン動作と対称コルーチン動作を実行時に制御するケースで利用される。
+
+
+## メンバ関数
+### 観測
+
+| 名前            | 説明          | 対応バージョン |
+|-----------------|---------------|----------------|
+| `operator bool` | `true`を返す  | C++20 |
+| `done`          | `false`を返す | C++20 |
+
+### 再開
+
+| 名前         | 説明       | 対応バージョン |
+|--------------|------------|----------------|
+| `operator()` | 何もしない | C++20 |
+| `resume`     | 何もしない | C++20 |
+| `destroy`    | 何もしない | C++20 |
+
+### Promiseアクセス
+
+| 名前      | 説明           | 対応バージョン |
+|-----------|----------------|----------------|
+| `promise` | Promiseオブジェクトへの参照を返す | C++20 |
+
+### アドレス
+
+| 名前      | 説明           | 対応バージョン |
+|-----------|----------------|----------------|
+| `address` | コルーチンハンドルに対応するポインタ値を返す | C++20 |
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`noop_coroutine`](noop_coroutine.md)
+
+
+## 参照
+- [P0913R1 Add symmetric coroutine control transfer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0913r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_always -- cpp20/coroutine: coroutine_traits, noop_coroutine</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_always.html"/>
      <id>64ce321234d16c7c498cd771e3feae0dc9b70c30:reference/coroutine/suspend_always.md</id>
      <updated>2020-06-25T00:18:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_always.md b/reference/coroutine/suspend_always.md
index 2888acb20..344affaac 100644
--- a/reference/coroutine/suspend_always.md
+++ b/reference/coroutine/suspend_always.md
@@ -99,7 +99,6 @@ int main()
 * promise()[link coroutine_handle/promise.md.nolink]
 * std::exchange[link /reference/utility/exchange.md]
 
-
 ### 出力
 ```
 main
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
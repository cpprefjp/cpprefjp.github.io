<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-08-18T10:26:19.099910</updated>
  <id>04dff07e-edf7-485e-b5c9-9add1cf427b2</id>

  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 -- Merge pull request #890 from naritan/patch-1</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>7d2b951e034e3e166a01d10a2120656b9f07e2b6:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2021-08-18T19:21:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 548a00acf..90ee72a45 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -14,9 +14,9 @@ C++17では`bool`型に対する前置および後置の`operator ++`を削除
 int main()
 {
   bool b = false;
-  const b1 = ++b;
+  const bool b1 = ++b;
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
-  const b2 = ++b;
+  const bool b2 = ++b;
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 -- boolが抜けていたので修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>41cc6040ebdc3a3277a85db30b78a08e97f3e415:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2021-08-18T19:07:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index 548a00acf..90ee72a45 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -14,9 +14,9 @@ C++17では`bool`型に対する前置および後置の`operator ++`を削除
 int main()
 {
   bool b = false;
-  const b1 = ++b;
+  const bool b1 = ++b;
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
-  const b2 = ++b;
+  const bool b2 = ++b;
   std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; b1 &amp;lt;&amp;lt; std::endl; // =&amp;gt; true
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>naritan</name>
        <email>yuuki@naritan.net</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- P0602R4対応</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_assign.html"/>
      <id>956915d4e7be5f44bc41a7650885bf1e245ea99f:reference/optional/optional/op_assign.md</id>
      <updated>2021-08-18T12:25:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_assign.md b/reference/optional/optional/op_assign.md
index a4bd6fc19..9ef8badaf 100644
--- a/reference/optional/optional/op_assign.md
+++ b/reference/optional/optional/op_assign.md
@@ -73,6 +73,10 @@ optional&amp;amp; operator=(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);                  // (6)
 - (2) : 型`T`がコピー構築可能でなく、コピー代入可能でもないこと
 - (3) : 型`T`がムーブ構築可能でなく、ムーブ代入可能でもないこと
 
+## トリビアルに定義される条件
+
+- (2) : 型`T`が、[トリビアルにコピー構築可能](/reference/type_traits/is_trivially_copy_constructible.md)であり[トリビアルにコピー代入可能](/reference/type_traits/is_trivially_copy_assignable.md)かつ、[トリビアルに破棄可能](/reference/type_traits/is_trivially_destructible.md)である
+- (3) : 型`T`が、[トリビアルにムーブ構築可能](/reference/type_traits/is_trivially_move_constructible.md)であり[トリビアルにムーブ代入可能](/reference/type_traits/is_nothrow_move_assignable.md)かつ、[トリビアルに破棄可能](/reference/type_traits/is_trivially_destructible.md)である
 
 ## 例
 ```cpp example
@@ -165,3 +169,4 @@ int main()
 
 ## 参照
 - [LWG Issue 2756. `optional&amp;lt;T&amp;gt;` should `forward` `T`&amp;#39;s implicit conversions](https://wg21.cmeerw.net/lwg/issue2756)
+- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- P0602R4対応</title>
      <link href="https://cpprefjp.github.io/reference/optional/optional/op_constructor.html"/>
      <id>956915d4e7be5f44bc41a7650885bf1e245ea99f:reference/optional/optional/op_constructor.md</id>
      <updated>2021-08-18T12:25:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/optional/optional/op_constructor.md b/reference/optional/optional/op_constructor.md
index 5b6ba7db2..3046ccd0e 100644
--- a/reference/optional/optional/op_constructor.md
+++ b/reference/optional/optional/op_constructor.md
@@ -85,12 +85,16 @@ explicit(see below) optional(optional&amp;lt;U&amp;gt;&amp;amp;&amp;amp; rhs);         // (9) C++20
 
 
 ## 定数式に評価される条件
-- (3) : 型`T`がトリビアルにコピー構築可能であること
-- (4) : 型`T`がトリビアルにムーブ構築可能であること
+- (3) : 型`T`が[トリビアルにコピー構築可能](/reference/type_traits/is_trivially_copy_constructible.md)であること
+- (4) : 型`T`が[トリビアルにムーブ構築可能](/reference/type_traits/is_trivially_move_constructible.md)であること
 - (5) : 型`T`の選択されたコンストラクタが`constexpr`であること
 - (6) : 型`T`の選択されたコンストラクタが`constexpr`であること
 - (7) : 型`T`の選択されたコンストラクタが`constexpr`であること
 
+## トリビアルに定義される条件
+
+- (3) : 型`T`が[トリビアルにコピー構築可能](/reference/type_traits/is_trivially_copy_constructible.md)であること
+- (4) : 型`T`が[トリビアルにムーブ構築可能](/reference/type_traits/is_trivially_move_constructible.md)であること
 
 ## explicitになる条件
 - (7) : 型`U`から型`T`に暗黙的に型変換ができる場合、このオーバーロードは非`explicit`となる。型`U`から型`T`に明示的な型変換ならできる場合、このオーバーロードは`explicit`となる
@@ -219,3 +223,4 @@ int main()
 - [LWG Issue 2900. The copy and move constructors of `optional` are not `constexpr`](https://wg21.cmeerw.net/lwg/issue2900)
 - [P0892R2 `explicit(bool)`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html)
     - C++20での`explicit(bool)`構文への対応
+- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- P0602R4対応</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_assign.html"/>
      <id>956915d4e7be5f44bc41a7650885bf1e245ea99f:reference/variant/variant/op_assign.md</id>
      <updated>2021-08-18T12:25:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_assign.md b/reference/variant/variant/op_assign.md
index d868cff32..b98f075a9 100644
--- a/reference/variant/variant/op_assign.md
+++ b/reference/variant/variant/op_assign.md
@@ -192,3 +192,4 @@ int main()
 
 ## 参照
 - [P0608R3 A sane variant converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
+- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- P0602R4対応</title>
      <link href="https://cpprefjp.github.io/reference/variant/variant/op_constructor.html"/>
      <id>956915d4e7be5f44bc41a7650885bf1e245ea99f:reference/variant/variant/op_constructor.md</id>
      <updated>2021-08-18T12:25:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/variant/variant/op_constructor.md b/reference/variant/variant/op_constructor.md
index af17c4292..280ea9f56 100644
--- a/reference/variant/variant/op_constructor.md
+++ b/reference/variant/variant/op_constructor.md
@@ -411,3 +411,4 @@ int main()
 
 ## 参照
 - [P0608R3 A sane variant converting constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html)
+- [P0602R4 `variant` and `optional` should propagate copy/move triviality](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- fix typo s/P1245R4/P1425R4/</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue/op_constructor.html"/>
      <id>7edf98562655bcb131929e6540f1302b85a7ff58:reference/queue/queue/op_constructor.md</id>
      <updated>2021-08-17T18:59:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue/op_constructor.md b/reference/queue/queue/op_constructor.md
index d454d958d..a4edc8e84 100644
--- a/reference/queue/queue/op_constructor.md
+++ b/reference/queue/queue/op_constructor.md
@@ -87,5 +87,5 @@ int main() {
 ## 参照
 - [P0935R0 Eradicating unnecessarily explicit default constructors from the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html)
     - C++20でのデフォルトコンストラクタの分離
-- [P1245R4 Iterators pair constructors for stack and queue](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r4.pdf)
+- [P1425R4 Iterators pair constructors for stack and queue](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r4.pdf)
     - C++23でのイテレータペアへの対応
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- fix typo s/P1245R4/P1425R4/</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue/op_deduction_guide.html"/>
      <id>7edf98562655bcb131929e6540f1302b85a7ff58:reference/queue/queue/op_deduction_guide.md</id>
      <updated>2021-08-17T18:59:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue/op_deduction_guide.md b/reference/queue/queue/op_deduction_guide.md
index 9e0326ee7..0d2a04eb5 100644
--- a/reference/queue/queue/op_deduction_guide.md
+++ b/reference/queue/queue/op_deduction_guide.md
@@ -81,5 +81,5 @@ int main()
 
 ## 参照
 - [P0433R2 Toward a resolution of US7 and US14: Integrating template deduction for class templates into the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0433r2.html)
-- [P1245R4 Iterators pair constructors for stack and queue](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r4.pdf)
+- [P1425R4 Iterators pair constructors for stack and queue](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r4.pdf)
     - C++23でのイテレータペアへの対応
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- fix typo s/P1245R4/P1425R4/</title>
      <link href="https://cpprefjp.github.io/reference/stack/stack/op_constructor.html"/>
      <id>7edf98562655bcb131929e6540f1302b85a7ff58:reference/stack/stack/op_constructor.md</id>
      <updated>2021-08-17T18:59:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stack/stack/op_constructor.md b/reference/stack/stack/op_constructor.md
index 50e71fb16..b8a412392 100644
--- a/reference/stack/stack/op_constructor.md
+++ b/reference/stack/stack/op_constructor.md
@@ -104,5 +104,5 @@ int main()
 ## 参照
 - [P0935R0 Eradicating unnecessarily explicit default constructors from the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html)
     - C++20でのデフォルトコンストラクタの分離
-- [P1245R4 Iterators pair constructors for stack and queue](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r4.pdf)
+- [P1425R4 Iterators pair constructors for stack and queue](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r4.pdf)
     - C++23でのイテレータペアへの対応
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- fix typo s/P1245R4/P1425R4/</title>
      <link href="https://cpprefjp.github.io/reference/stack/stack/op_deduction_guide.html"/>
      <id>7edf98562655bcb131929e6540f1302b85a7ff58:reference/stack/stack/op_deduction_guide.md</id>
      <updated>2021-08-17T18:59:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stack/stack/op_deduction_guide.md b/reference/stack/stack/op_deduction_guide.md
index 5daad1fe8..53fd601ae 100644
--- a/reference/stack/stack/op_deduction_guide.md
+++ b/reference/stack/stack/op_deduction_guide.md
@@ -81,5 +81,5 @@ int main()
 
 ## 参照
 - [P0433R2 Toward a resolution of US7 and US14: Integrating template deduction for class templates into the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0433r2.html)
-- [P1245R4 Iterators pair constructors for stack and queue](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r4.pdf)
+- [P1425R4 Iterators pair constructors for stack and queue](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r4.pdf)
     - C++23でのイテレータペアへの対応
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- queue: C++23 P1245R4対応</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue/op_constructor.html"/>
      <id>711615cfddc6dcb776d6a60bfdddc5257865b671:reference/queue/queue/op_constructor.md</id>
      <updated>2021-08-17T18:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue/op_constructor.md b/reference/queue/queue/op_constructor.md
index f35c3b7d9..d454d958d 100644
--- a/reference/queue/queue/op_constructor.md
+++ b/reference/queue/queue/op_constructor.md
@@ -5,15 +5,29 @@
 * function[meta id-type]
 
 ```cpp
-explicit queue(const Container&amp;amp; other = Container());
-
-// C++11から追加されたコンストラクタ
-explicit queue(Container&amp;amp;&amp;amp; other = Container());
-template &amp;lt;class Alloc&amp;gt; explicit queue(const Alloc&amp;amp; alloc);
-template &amp;lt;class Alloc&amp;gt; queue(const Container&amp;amp; other, const Alloc&amp;amp; alloc);
-template &amp;lt;class Alloc&amp;gt; queue(Container&amp;amp;&amp;amp; other, const Alloc&amp;amp; alloc);
-template &amp;lt;class Alloc&amp;gt; queue(const queue&amp;amp; que, const Alloc&amp;amp; alloc);
-template &amp;lt;class Alloc&amp;gt; queue(queue&amp;amp;&amp;amp; que, const Alloc&amp;amp; alloc);
+// C++03まで
+explicit queue(const Container&amp;amp; other = Container());  // (1),(2)
+
+// C++11以降 C++17まで
+explicit queue(const Container&amp;amp; other);           // (2)
+explicit queue(Container&amp;amp;&amp;amp; other = Container());  // (1),(3)
+
+// C++20以降
+queue: queue(Container()) {}             // (1)
+explicit queue(const Container&amp;amp; other);  // (2)
+explicit queue(Container&amp;amp;&amp;amp; other);       // (3)
+
+template&amp;lt;class InputIterator&amp;gt;
+queue(InputIterator first, InputIterator last);  // (4) C++23
+
+template &amp;lt;class Alloc&amp;gt; explicit queue(const Alloc&amp;amp; alloc);                // (5) C++11
+template &amp;lt;class Alloc&amp;gt; queue(const Container&amp;amp; other, const Alloc&amp;amp; alloc); // (6) C++11
+template &amp;lt;class Alloc&amp;gt; queue(Container&amp;amp;&amp;amp; other, const Alloc&amp;amp; alloc);      // (7) C++11
+template &amp;lt;class Alloc&amp;gt; queue(const queue&amp;amp; que, const Alloc&amp;amp; alloc);       // (8) C++11
+template &amp;lt;class Alloc&amp;gt; queue(queue&amp;amp;&amp;amp; que, const Alloc&amp;amp; alloc);            // (9) C++11
+
+template&amp;lt;class InputIterator, class Alloc&amp;gt;
+queue(InputIterator first, InputIterator last, const Alloc&amp;amp;);  // (10) C++23
 ```
 
 ## 概要
@@ -26,6 +40,7 @@ template &amp;lt;class Alloc&amp;gt; queue(queue&amp;amp;&amp;amp; que, const Alloc&amp;amp; alloc);
 `other`: 初期化に用いるコンテナオブジェクト
 `alloc`: 内部のコンテナで使用するアロケータオブジェクト
 `que`: コピー・ムーブ元の`queue`オブジェクト
+`first`, `last`: 初期化に用いるイテレータのペア
 
 ## 計算量
 線形 O(n)。
@@ -70,5 +85,7 @@ int main() {
 ```
 
 ## 参照
-
-
+- [P0935R0 Eradicating unnecessarily explicit default constructors from the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html)
+    - C++20でのデフォルトコンストラクタの分離
+- [P1245R4 Iterators pair constructors for stack and queue](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r4.pdf)
+    - C++23でのイテレータペアへの対応
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- queue: C++23 P1245R4対応</title>
      <link href="https://cpprefjp.github.io/reference/queue/queue/op_deduction_guide.html"/>
      <id>711615cfddc6dcb776d6a60bfdddc5257865b671:reference/queue/queue/op_deduction_guide.md</id>
      <updated>2021-08-17T18:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/queue/queue/op_deduction_guide.md b/reference/queue/queue/op_deduction_guide.md
index 8d04672d4..9e0326ee7 100644
--- a/reference/queue/queue/op_deduction_guide.md
+++ b/reference/queue/queue/op_deduction_guide.md
@@ -10,11 +10,21 @@ namespace std {
   queue(Container)
     -&amp;gt; queue&amp;lt;typename Container::value_type, Container&amp;gt;; // (1)
 
+  template&amp;lt;class InputIterator&amp;gt;
+  queue(InputIterator, InputIterator)
+    -&amp;gt; queue&amp;lt;&amp;lt;InputIterator&amp;gt;&amp;gt;;  // (2) C++23
+
   template &amp;lt;class Container, class Allocator&amp;gt;
   queue(Container, Allocator)
-    -&amp;gt; queue&amp;lt;typename Container::value_type, Container&amp;gt;; // (2)
+    -&amp;gt; queue&amp;lt;typename Container::value_type, Container&amp;gt;; // (3)
+
+  template&amp;lt;class InputIterator, class Allocator&amp;gt;
+  queue(InputIterator, InputIterator, Allocator)
+    -&amp;gt; queue&amp;lt;iter-value-type&amp;lt;InputIterator&amp;gt;, deque&amp;lt;iter-value-type&amp;lt;InputIterator&amp;gt;,
+             Allocator&amp;gt;&amp;gt;;  // (4) C++23
 }
 ```
+* iter-value-type[italic]
 
 ## 概要
 `std::queue`クラステンプレートの型推論補助。元となるコンテナから推論する。
@@ -71,4 +81,5 @@ int main()
 
 ## 参照
 - [P0433R2 Toward a resolution of US7 and US14: Integrating template deduction for class templates into the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0433r2.html)
-
+- [P1245R4 Iterators pair constructors for stack and queue](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r4.pdf)
+    - C++23でのイテレータペアへの対応
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
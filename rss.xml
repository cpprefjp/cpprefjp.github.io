<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-06-25T08:54:27.141884</updated>
  <id>4512659e-0c60-40f9-b1dd-df1009de7b2d</id>

  
    <entry>
      <title>month_day -- month_day : カレンダー構文演算子を表に追加</title>
      <link href="https://cpprefjp.github.io/reference/chrono/month_day.html"/>
      <id>3eee4692501f5b6ec0fa2fb98cf1f7f939f712d6:reference/chrono/month_day.md</id>
      <updated>2020-06-25T17:49:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/month_day.md b/reference/chrono/month_day.md
index fbea5dd49..6918c1f3a 100644
--- a/reference/chrono/month_day.md
+++ b/reference/chrono/month_day.md
@@ -43,6 +43,13 @@ namespace std::chrono {
 
 
 ## 非メンバ関数
+### カレンダー構文演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator/`](month_day/op_append.md.nolink) | カレンダー要素同士をつなぎ合わせる | C++20 |
+
+
 ### 比較演算
 
 | 名前 | 説明 | 対応バージョン |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- cpp20/coroutines: &#34;背景・経緯&#34;，&#34;選択肢&#34;セクションを記述</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>79514211fa117cd5f76a8c0b365b16eb153b7404:lang/cpp20/coroutines.md</id>
      <updated>2020-06-25T17:32:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 0d1fecae5..8da43d14f 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -508,11 +508,26 @@ int main()
 
 
 ## この機能が必要になった背景・経緯
-(執筆中)
+
+多くのプログラミング言語で対応されており広い実績のあるコルーチン機能を、C++言語でも使えるよう[2013年頃](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3708.pdf)から検討が始まっている。
+
+2017年には [ISO/IEC TS 22277 C++ Extensions for Coroutines](https://www.iso.org/standard/73008.html)（通称&amp;#34;Coroutines TS&amp;#34;） として正式発効され、いくつかの追加の仕様修正をへてC++20言語仕様本体への統合が決定された。
+
+C++言語仕様へのコルーチン導入によって、ジェネレータの協調的マルチタスクのサポート、ファイルやネットワークなど非同期I/Oライブラリとの統合が期待されている。
 
 
 ## 検討されたほかの選択肢
-(執筆中)
+
+C++20コルーチンはスタックレスコルーチンとして導入されたが、スタックフル(Stackful)コルーチン＝ファイバー(Fiber)の導入検討も長らく行われてきた。
+スタックフルコルーチンは将来のC++仕様導入に向けて引き続き検討されている。
+（本ページ執筆時点では[提案文書P0876R10](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0876r10.pdf)が最新）
+
+C++20コルーチンでは、コルーチン・ステートのために動的メモリ確保が行われる可能性がある。
+一定条件を満たせばコンパイラ最適化によって動的メモリ確保が省略されるとしているが、言語仕様として動的メモリ確保を避ける仕様も検討された（通称&amp;#34;Core Coroutines&amp;#34;)。
+最終的には既に実績のあるCoroutinesTS（発案者の名前にちなみ&amp;#34;Gor-routines&amp;#34;と呼ばれた）ベースのコルーチン仕様が採用されることになった。
+
+C++20コルーチンに関するキーワードは、いずれも接頭辞`co_`が付与されている。
+何度かの改名提案（[P0071R0](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0071r0.html)、[P1485R1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1485r1.html)）も提出されたが、いずれも否決されてC++20仕様に落ち着いた。
 
 
 ## 関連項目
@@ -520,7 +535,7 @@ int main()
 
 
 ## 参照
-- [N4680 C++ Extensions for Coroutines(Coroutine TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4680.pdf)
+- [N4680 C++ Extensions for Coroutines(Coroutines TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4680.pdf)
 - [P0911R1 Rebase the Coroutines TS onto the C++17 Standard](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0911r1.html)
 - [P0913R1 Add symmetric coroutine control transfer](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0913r1.html)
 - [P0914R1 Add parameter preview to coroutine promise constructor](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0914r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- cpp20/coroutines: 例示コードへリンク付与</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>2d6497c83f8c676c1c679ed2fe56750ba14fd0a0:lang/cpp20/coroutines.md</id>
      <updated>2020-06-25T16:49:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index 7593e5c33..0d1fecae5 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -172,6 +172,14 @@ int main() {
   while (g.move_next()) std::cout &amp;lt;&amp;lt; g.current_value() &amp;lt;&amp;lt; std::endl;
 }
 ```
+* std::coroutine_handle&amp;lt;promise_type&amp;gt;[link /reference/coroutine/coroutine_handle.md]
+* from_promise[link /reference/coroutine/coroutine_handle/from_promise.md]
+* resume()[link /reference/coroutine/coroutine_handle/resume.md]
+* done()[link /reference/coroutine/coroutine_handle/done.md]
+* promise()[link /reference/coroutine/coroutine_handle/promise.md]
+* destroy()[link /reference/coroutine/coroutine_handle/destroy.md]
+* suspend_always[link /reference/coroutine/suspend_always.md]
+* std::terminate[link /reference/exception/terminate.md]
 
 コルーチンの終端まで制御が到達、またはコルーチンを指すコルーチンハンドルの[`destroy`](/reference/coroutine/coroutine_handle/destroy.md)メンバ関数が呼び出されると、コルーチン・ステートは破棄される。
 
@@ -272,6 +280,7 @@ my_future&amp;lt;void&amp;gt; g() {
 auto f(int x = co_await h()); // エラー: await式は関数中断ポイントの外
 int a[] = { co_await h() };   // エラー: await式は関数中断ポイントの外
 ```
+* std::coroutine_handle&amp;lt;&amp;gt;[link /reference/coroutine/coroutine_handle.md]
 
 ### Yield式
 `co_yield`式は、コルーチンから値を生成(yield)するときに用いる。
@@ -319,6 +328,10 @@ int main() {
   assert(std::equal(r1.begin(), r1.end(), r2.begin(), r2.end()));
 }
 ```
+* std::suspend_always[link /reference/coroutine/suspend_always.md]
+* std::move[link /reference/utility/move.md]
+* pair[link /reference/utility/pair.md]
+* make_pair[link /reference/utility/make_pair.md]
 
 ## co_return文
 `co_return`文は、コルーチンを終了し呼出元へ制御を戻すために用いる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>destroy -- coroutine_handle: fix inner links</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/destroy.html"/>
      <id>fa273ea59696df593576b1af772d6cc62825bcfc:reference/coroutine/coroutine_handle/destroy.md</id>
      <updated>2020-06-25T16:08:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/destroy.md b/reference/coroutine/coroutine_handle/destroy.md
index 6d2473fc5..7db1ac968 100644
--- a/reference/coroutine/coroutine_handle/destroy.md
+++ b/reference/coroutine/coroutine_handle/destroy.md
@@ -24,7 +24,7 @@ void destroy() const;
 ## 備考
 最終サスペンドポイントにてコルーチンを中断していなければ、該当コルーチンは暗黙に破棄される。
 
-[`std::thread`](/refernce/thread/thread.md)や[`std::jthread`](/refernce/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを破棄する場合、その振る舞いは処理系定義とされる。
+[`std::thread`](/reference/thread/thread.md)や[`std::jthread`](/reference/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを破棄する場合、その振る舞いは処理系定義とされる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>promise -- coroutine_handle: fix inner links</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/promise.html"/>
      <id>fa273ea59696df593576b1af772d6cc62825bcfc:reference/coroutine/coroutine_handle/promise.md</id>
      <updated>2020-06-25T16:08:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/promise.md b/reference/coroutine/coroutine_handle/promise.md
index 61351b821..eb97ba9a2 100644
--- a/reference/coroutine/coroutine_handle/promise.md
+++ b/reference/coroutine/coroutine_handle/promise.md
@@ -33,4 +33,4 @@ Promise&amp;amp; promise() const;
 
 ## 関連項目
 - [C++20 コルーチン](/lang/cpp20/coroutines.md)
-- [from_promise](form_promise.md)
+- [from_promise](from_promise.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resume -- coroutine_handle: fix inner links</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/resume.html"/>
      <id>fa273ea59696df593576b1af772d6cc62825bcfc:reference/coroutine/coroutine_handle/resume.md</id>
      <updated>2020-06-25T16:08:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/resume.md b/reference/coroutine/coroutine_handle/resume.md
index 466357a55..82de03d2f 100644
--- a/reference/coroutine/coroutine_handle/resume.md
+++ b/reference/coroutine/coroutine_handle/resume.md
@@ -23,7 +23,7 @@ void resume() const;
 
 
 ## 備考
-[`std::thread`](/refernce/thread/thread.md)や[`std::jthread`](/refernce/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを再開する場合、その振る舞いは処理系定義とされる。
+[`std::thread`](/reference/thread/thread.md)や[`std::jthread`](/reference/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを再開する場合、その振る舞いは処理系定義とされる。
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コルーチン -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/coroutines.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:lang/cpp20/coroutines.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/coroutines.md b/lang/cpp20/coroutines.md
index e2889988a..7593e5c33 100644
--- a/lang/cpp20/coroutines.md
+++ b/lang/cpp20/coroutines.md
@@ -173,7 +173,7 @@ int main() {
 }
 ```
 
-コルーチンの終端まで制御が到達、またはコルーチンを指すコルーチンハンドルの[`destroy`](/reference/coroutine/coroutine_handle/destroy.md.nolink)メンバ関数が呼び出されると、コルーチン・ステートは破棄される。
+コルーチンの終端まで制御が到達、またはコルーチンを指すコルーチンハンドルの[`destroy`](/reference/coroutine/coroutine_handle/destroy.md)メンバ関数が呼び出されると、コルーチン・ステートは破棄される。
 
 メモリ解放関数はPromise型のスコープで名前探索が行われる。
 名前探索に失敗した場合は、グローバルスコープで探索が行われる。
@@ -230,7 +230,7 @@ Await式は式 _await-resume_ と同じ型、同じ値カテゴリを持つ。
 Await式は式 _o_ と式 _await-resume_ を評価し、続いて：
 
 - _await-ready_ の結果が`false`の場合、コルーチンは中断状態とみなされる。その後に：
-    - _await-suspend_ の型が[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)の場合、_await-suspend_[`.resume()`](/reference/coroutine/coroutine_handle/resume.md.nolink)が評価される。
+    - _await-suspend_ の型が[`std::coroutine_handle&amp;lt;Z&amp;gt;`](/reference/coroutine/coroutine_handle.md)の場合、_await-suspend_[`.resume()`](/reference/coroutine/coroutine_handle/resume.md)が評価される。
     - そうではなく _await-suspend_ の型が`bool`の場合、_await-suspend_ が評価され、その結果が`false`であればコルーチンは再開する。
     - それ以外の場合、_await-suspend_ が評価される。
 - _await-suspend_ の評価が例外で終了した場合、例外が捕捉されてコルーチンが再開し、その例外は即座に再スローされる。そうでなければ、スコープ終了をともなわずに現在のコルーチンの呼出元もしくは再開元へ制御フローを戻す。
@@ -483,10 +483,10 @@ int main()
 * std::terminate()[link /reference/exception/terminate.md]
 * std::coroutine_handle[link /reference/coroutine/coroutine_handle.md]
 * std::suspend_always[link /reference/coroutine/suspend_always.md]
-* resume()[link /reference/coroutine/coroutine_handle/resume.md.nolink]
-* done()[link /reference/coroutine/coroutine_handle/done.md.nolink]
-* from_promise[link /reference/coroutine/coroutine_handle/from_promise.md.nolink]
-* promise()[link /reference/coroutine/coroutine_handle/promise.md.nolink]
+* resume()[link /reference/coroutine/coroutine_handle/resume.md]
+* done()[link /reference/coroutine/coroutine_handle/done.md]
+* from_promise[link /reference/coroutine/coroutine_handle/from_promise.md]
+* promise()[link /reference/coroutine/coroutine_handle/promise.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_handle -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle.md b/reference/coroutine/coroutine_handle.md
index bc4d6fea2..6902e71ab 100644
--- a/reference/coroutine/coroutine_handle.md
+++ b/reference/coroutine/coroutine_handle.md
@@ -27,43 +27,43 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`(constructor)`](coroutine_handle/op_constructor.md.nolink) | コンストラクタ | C++20 |
-| [`operator=`](coroutine_handle/op_assign.md.nolink) | 代入演算子 | C++20 |
+| [`(constructor)`](coroutine_handle/op_constructor.md) | コンストラクタ | C++20 |
+| [`operator=`](coroutine_handle/op_assign.md) | 代入演算子 | C++20 |
 
 ### エクスポート
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`address`](coroutine_handle/address.md.nolink) | コルーチンハンドルに対応するアドレス値 | C++20 |
+| [`address`](coroutine_handle/address.md) | コルーチンハンドルに対応するアドレス値 | C++20 |
 
 ### 観測
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`operator bool`](coroutine_handle/op_bool.md.nolink) | 有効なコルーチンかを確認 | C++20 |
-| [`done`](coroutine_handle/done.md.nolink) | 最終サスペンドポイントで中断状態にあるか確認 | C++20 |
+| [`operator bool`](coroutine_handle/op_bool.md) | 有効なコルーチンか確認 | C++20 |
+| [`done`](coroutine_handle/done.md) | 最終サスペンドポイントで中断状態にあるか確認 | C++20 |
 
 ### 再開
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`operator()`](coroutine_handle/resume.md.nolink) | 中断状態にあるコルーチンを再開 | C++20 |
-| [`resume`](coroutine_handle/resume.md.nolink)     | 中断状態にあるコルーチンを再開 | C++20 |
-| [`destroy`](coroutine_handle/destroy.md.nolink)   | 中断状態にあるコルーチンを破棄 | C++20 |
+| [`operator()`](coroutine_handle/resume.md) | 中断状態にあるコルーチンを再開 | C++20 |
+| [`resume`](coroutine_handle/resume.md)     | 中断状態にあるコルーチンを再開 | C++20 |
+| [`destroy`](coroutine_handle/destroy.md)   | 中断状態にあるコルーチンを破棄 | C++20 |
 
 ### Promiseアクセス
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`promise`](coroutine_handle/promise.md.nolink) | Promiseオブジェクトの参照 | C++20 |
+| [`promise`](coroutine_handle/promise.md) | Promiseオブジェクトの参照 | C++20 |
 
 
 ## 静的メンバ関数
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|----------------|
-| [`from_promise`](coroutine_handle/from_promise.md.nolink) | Promiseオブジェクトから対応するコルーチンハンドルへ変換 | C++20 |
-| [`from_address`](coroutine_handle/from_address.md.nolink) | アドレス値から対応するコルーチンハンドルへ変換 | C++20 |
+| [`from_promise`](coroutine_handle/from_promise.md) | Promiseオブジェクトから対応するコルーチンハンドルへ変換 | C++20 |
+| [`from_address`](coroutine_handle/from_address.md) | アドレス値から対応するコルーチンハンドルへ変換 | C++20 |
 
 
 ## 非メンバ関数
@@ -86,7 +86,7 @@ namespace std {
 | `bool operator&amp;gt;(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);`  | 左辺が右辺より大きいかを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
 | `bool operator&amp;gt;=(coroutine_handle&amp;lt;&amp;gt;, coroutine_handle&amp;lt;&amp;gt;);` | 左辺が右辺以上かを判定する (`&amp;lt;=&amp;gt;`により使用可能) | C++20 |
 
-`coroutine_handle`同士の比較は、[`address`](coroutine_handle/address.md.nolink)が返すアドレス値を用いて比較演算が行われる。
+`coroutine_handle`同士の比較は、[`address`](coroutine_handle/address.md)が返すアドレス値を用いて比較演算が行われる。
 
 
 ## 例
@@ -147,10 +147,10 @@ int main()
 * std::coroutine_handle&amp;lt;promise_type&amp;gt;[color ff0000]
 * std::suspend_never[link suspend_never.md]
 * std::suspend_always[link suspend_always.md]
-* resume()[link coroutine_handle/resume.md.nolink]
-* done()[link coroutine_handle/done.md.nolink]
-* from_promise[link coroutine_handle/from_promise.md.nolink]
-* promise()[link coroutine_handle/promise.md.nolink]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
 * std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>address -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/address.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/address.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/address.md b/reference/coroutine/coroutine_handle/address.md
new file mode 100644
index 000000000..d51dba102
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/address.md
@@ -0,0 +1,54 @@
+# address
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr void* address() const noexcept;
+```
+
+## 概要
+コルーチンハンドルに対応するアドレス値を返す。
+
+
+## 戻り値
+コルーチンハンドルに対応するアドレス値。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;coroutine&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  assert(h.address() == nullptr);
+}
+```
+* address()[color ff0000]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`from_address`](from_address.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>destroy -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/destroy.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/destroy.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/destroy.md b/reference/coroutine/coroutine_handle/destroy.md
new file mode 100644
index 000000000..6d2473fc5
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/destroy.md
@@ -0,0 +1,45 @@
+# destroy
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void destroy() const;
+```
+
+## 概要
+中断状態にあるコルーチンを明示的に破棄する。
+
+
+## 事前条件
+`*this`が中断状態のコルーチンを指すこと。
+
+
+## 効果
+コルーチンを破棄する。
+
+
+## 備考
+最終サスペンドポイントにてコルーチンを中断していなければ、該当コルーチンは暗黙に破棄される。
+
+[`std::thread`](/refernce/thread/thread.md)や[`std::jthread`](/refernce/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを破棄する場合、その振る舞いは処理系定義とされる。
+
+
+## 例
+### 出力
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`done`](done.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>done -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/done.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/done.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/done.md b/reference/coroutine/coroutine_handle/done.md
new file mode 100644
index 000000000..c283ef14f
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/done.md
@@ -0,0 +1,38 @@
+# done
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+bool done() const;
+```
+
+## 概要
+最終サスペンドポイントで中断状態にあること、つまりコルーチン本体の終端到達済みか確認する。
+
+
+## 事前条件
+`*this`が中断状態のコルーチンを指すこと。
+
+
+## 戻り値
+コルーチンが最終サスペンドポイントで中断状態にあれば`true`を返す。
+それ以外の箇所で中断状態にあれば`false`を返す。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`resume`](resume.md)
+- [`destroy`](destroy.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_address -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/from_address.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/from_address.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/from_address.md b/reference/coroutine/coroutine_handle/from_address.md
new file mode 100644
index 000000000..bc5826886
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/from_address.md
@@ -0,0 +1,44 @@
+# from_address
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static constexpr coroutine_handle&amp;lt;&amp;gt;
+coroutine_handle&amp;lt;&amp;gt;::from_address(void* addr);        // (1)
+
+static constexpr coroutine_handle&amp;lt;Promise&amp;gt;
+coroutine_handle&amp;lt;Promise&amp;gt;::from_address(void* addr); // (2)
+```
+
+## 概要
+アドレス値から対応するコルーチンハンドルを取得する。
+
+
+## 事前条件
+`addr`は[`address()`](address.md)呼び出しで得られたアドレス値であること。
+
+
+## 戻り値
+コルーチンを参照するコルーチンハンドル。
+
+
+## 事後条件
+`from_address(`[`address()`](address.md)`) == *this`
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`address`](address.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>from_promise -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/from_promise.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/from_promise.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/from_promise.md b/reference/coroutine/coroutine_handle/from_promise.md
new file mode 100644
index 000000000..33429e41a
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/from_promise.md
@@ -0,0 +1,40 @@
+# from_promise
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+static coroutine_handle from_promise(Promise&amp;amp; p);
+```
+
+## 概要
+Promiseオブジェクトから対応するコルーチンハンドルを取得する。
+
+
+## 事前条件
+`p`はコルーチンのPromiseオブジェクトへの参照。
+
+
+## 戻り値
+コルーチンを参照するコルーチンハンドル(`h`)。
+
+
+## 事後条件
+[`addressof`](/reference/memory/addressof.md)`(h.`[`promise()`](promise.md)`) ==` [`addressof`](/reference/memory/addressof.md)`(p)`
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`promise`](promise.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>代入演算子 -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/op_assign.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/op_assign.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/op_assign.md b/reference/coroutine/coroutine_handle/op_assign.md
new file mode 100644
index 000000000..81c76e7e0
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/op_assign.md
@@ -0,0 +1,59 @@
+# 代入演算子
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+coroutine_handle&amp;amp; operator=(nullptr_t) noexcept;
+```
+
+## 概要
+コルーチンハンドルをリセットし、有効なコルーチンを指さない状態にする。
+
+
+## 戻り値
+`*this`
+
+
+## 事後条件
+[`address()`](address.md) `== nullptr`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;coroutine&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  h = nullptr;
+  assert(h.address() == nullptr);
+}
+```
+* = nullptr[color ff0000]
+* address()[link address.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/op_bool.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/op_bool.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/op_bool.md b/reference/coroutine/coroutine_handle/op_bool.md
new file mode 100644
index 000000000..2dc9da05a
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/op_bool.md
@@ -0,0 +1,58 @@
+# operator bool
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr explicit operator bool() const noexcept;
+```
+
+## 概要
+コルーチンハンドルが有効なコルーチンを指すかを確認する。
+
+
+## 戻り値
+[`address()`](address.md) `!= nullptr`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;coroutine&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  if (h) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;vaild coroutine&amp;#34; &amp;lt;&amp;lt; std::endl;
+  } else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;empty coroutine&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* if (h)[color ff0000]
+
+### 出力
+```
+empty coroutine
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/op_constructor.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/op_constructor.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/op_constructor.md b/reference/coroutine/coroutine_handle/op_constructor.md
new file mode 100644
index 000000000..445a9e9ea
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/op_constructor.md
@@ -0,0 +1,59 @@
+# コンストラクタ
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr coroutine_handle() noexcept;           // (1)
+constexpr coroutine_handle(nullptr_t) noexcept;  // (2)
+```
+
+## 概要
+有効なコルーチンを指さないコルーチンハンドルを構築する。
+
+実際のコルーチンを指す`coroutine_handle`は、静的メンバ関数[`from_promise`](from_promise.md)／[`from_address`](from_address.md)を利用する。
+
+
+## 事後条件
+[`address()`](address.md) `== nullptr`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;coroutine&amp;gt;
+
+int main()
+{
+  std::coroutine_handle&amp;lt;&amp;gt; h;
+  assert(h.address() == nullptr);
+}
+```
+* std::coroutine_handle[color ff0000]
+* address()[link address.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`from_promise`](from_promise.md)
+- [`from_address`](from_address.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>promise -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/promise.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/promise.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/promise.md b/reference/coroutine/coroutine_handle/promise.md
new file mode 100644
index 000000000..61351b821
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/promise.md
@@ -0,0 +1,36 @@
+# promise
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+Promise&amp;amp; promise() const;
+```
+
+## 概要
+コルーチンのPromiseオブジェクトへの参照を返す。
+
+
+## 事前条件
+`*this`が有効なコルーチンを指すこと。
+
+
+## 戻り値
+コルーチンのPromiseオブジェクトへの参照。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [from_promise](form_promise.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resume -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_handle/resume.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_handle/resume.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_handle/resume.md b/reference/coroutine/coroutine_handle/resume.md
new file mode 100644
index 000000000..466357a55
--- /dev/null
+++ b/reference/coroutine/coroutine_handle/resume.md
@@ -0,0 +1,41 @@
+# resume
+* coroutine[meta header]
+* std[meta namespace]
+* coroutine_handle[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+void operator()() const;
+void resume() const;
+```
+
+## 概要
+中断状態にあるコルーチンの実行を再開する。
+
+
+## 事前条件
+`*this`が中断状態のコルーチンを指し、かつ最終サスペンドポイントで中断状態にないこと。
+
+
+## 効果
+コルーチンの実行を再開する。
+
+
+## 備考
+[`std::thread`](/refernce/thread/thread.md)や[`std::jthread`](/refernce/thread/jthread.md)のインスタンス、もしくはメインスレッド以外からコルーチンを再開する場合、その振る舞いは処理系定義とされる。
+
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 11.0
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`done`](done.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>coroutine_traits -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/coroutine_traits.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/coroutine_traits.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/coroutine_traits.md b/reference/coroutine/coroutine_traits.md
index b5f3b03fc..dcb32b485 100644
--- a/reference/coroutine/coroutine_traits.md
+++ b/reference/coroutine/coroutine_traits.md
@@ -100,9 +100,9 @@ int main()
 * std::suspend_never[link suspend_never.md]
 * std::suspend_always[link suspend_always.md]
 * std::coroutine_handle[link coroutine_handle.md]
-* resume()[link coroutine_handle/resume.md.nolink]
-* done()[link coroutine_handle/done.md.nolink]
-* from_promise[link coroutine_handle/from_promise.md.nolink]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
 * std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/noop_coroutine.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine.md b/reference/coroutine/noop_coroutine.md
index dd1844fb2..22c6b7bff 100644
--- a/reference/coroutine/noop_coroutine.md
+++ b/reference/coroutine/noop_coroutine.md
@@ -115,10 +115,10 @@ int main()
 * std::noop_coroutine()[color ff0000]
 * std::suspend_always[link suspend_always.md]
 * std::coroutine_handle[link coroutine_handle.md]
-* resume()[link coroutine_handle/resume.md.nolink]
-* done()[link coroutine_handle/done.md.nolink]
-* from_promise[link coroutine_handle/from_promise.md.nolink]
-* promise()[link coroutine_handle/promise.md.nolink]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
 * std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>noop_coroutine_handle -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/noop_coroutine_handle.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/noop_coroutine_handle.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/noop_coroutine_handle.md b/reference/coroutine/noop_coroutine_handle.md
index 34afc8ccb..d09c8b664 100644
--- a/reference/coroutine/noop_coroutine_handle.md
+++ b/reference/coroutine/noop_coroutine_handle.md
@@ -81,6 +81,7 @@ namespace std {
 
 ## 関連項目
 - [C++20 コルーチン](/lang/cpp20/coroutines.md)
+- [`coroutine_handle`](coroutine_handle.md)
 - [`noop_coroutine`](noop_coroutine.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_always -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_always.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/suspend_always.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_always.md b/reference/coroutine/suspend_always.md
index 56f37cf0b..7b266c7f0 100644
--- a/reference/coroutine/suspend_always.md
+++ b/reference/coroutine/suspend_always.md
@@ -93,10 +93,10 @@ int main()
 ```
 * std::suspend_always[color ff0000]
 * std::coroutine_handle[link coroutine_handle.md]
-* resume()[link coroutine_handle/resume.md.nolink]
-* done()[link coroutine_handle/done.md.nolink]
-* from_promise[link coroutine_handle/from_promise.md.nolink]
-* promise()[link coroutine_handle/promise.md.nolink]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
 * std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>suspend_never -- coroutine_handle: 全メンバ関数</title>
      <link href="https://cpprefjp.github.io/reference/coroutine/suspend_never.html"/>
      <id>0204f68bdc822e8ddcf36ad03bdeed7e79cfbcb5:reference/coroutine/suspend_never.md</id>
      <updated>2020-06-25T15:58:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/coroutine/suspend_never.md b/reference/coroutine/suspend_never.md
index 4d79d70c5..b2345392d 100644
--- a/reference/coroutine/suspend_never.md
+++ b/reference/coroutine/suspend_never.md
@@ -94,10 +94,10 @@ int main()
 * std::suspend_never[color ff0000]
 * std::suspend_always[link suspend_always.md]
 * std::coroutine_handle[link coroutine_handle.md]
-* resume()[link coroutine_handle/resume.md.nolink]
-* done()[link coroutine_handle/done.md.nolink]
-* from_promise[link coroutine_handle/from_promise.md.nolink]
-* promise()[link coroutine_handle/promise.md.nolink]
+* resume()[link coroutine_handle/resume.md]
+* done()[link coroutine_handle/done.md]
+* from_promise[link coroutine_handle/from_promise.md]
+* promise()[link coroutine_handle/promise.md]
 * std::exchange[link /reference/utility/exchange.md]
 
 ### 出力
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
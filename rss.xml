<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-11-05T11:02:09.777960</updated>
  <id>585fc538-262c-49ad-8a86-5c579351a5fd</id>

  
    <entry>
      <title>llround -- NGワードチェック : &#34;型](link)型&#34;をNGワードに登録 #1211</title>
      <link href="https://cpprefjp.github.io/reference/cmath/llround.html"/>
      <id>f9a0fdd70a42ec9b262b93cc8796d9e5f1b802b0:reference/cmath/llround.md</id>
      <updated>2023-11-05T19:57:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/llround.md b/reference/cmath/llround.md
index fe26bc96e..468961a05 100644
--- a/reference/cmath/llround.md
+++ b/reference/cmath/llround.md
@@ -46,13 +46,13 @@ namespace std {
 
 
 ## 戻り値
-引数 `x` を四捨五入により丸めた整数値を、[`long long`型](/lang/cpp11/long_long_type.md)型の範囲に収めて返す。
+引数 `x` を四捨五入により丸めた整数値を、[`long long`型](/lang/cpp11/long_long_type.md)の範囲に収めて返す。
 
 
 ## 備考
 - 本関数は、C99 の規格にある `llround`（より正確には `math.h` ヘッダの `llround`、`llroundf`、`llroundl` の 3 つ。それぞれ C++ の `double`、`float`、`long double` バージョンに相当）と等価である。
 - [`round`](round.md)関数と違い、本関数において戻り値が非整数型引数 `x` と異なる場合に、例外 [`FE_INEXACT`](/reference/cfenv/fe_inexact.md) を発生させる必要はない。
-- 戻り値が[`long long`型](/lang/cpp11/long_long_type.md)型の範囲を超えた場合、定義域エラーが起こる可能性がある。その際の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
+- 戻り値が[`long long`型](/lang/cpp11/long_long_type.md)の範囲を超えた場合、定義域エラーが起こる可能性がある。その際の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 - なお、本関数の挙動は、現在の丸めモードには依存しない。
 - C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_align_t -- NGワードチェック : &#34;型](link)型&#34;をNGワードに登録 #1211</title>
      <link href="https://cpprefjp.github.io/reference/cstddef/max_align_t.html"/>
      <id>f9a0fdd70a42ec9b262b93cc8796d9e5f1b802b0:reference/cstddef/max_align_t.md</id>
      <updated>2023-11-05T19:57:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstddef/max_align_t.md b/reference/cstddef/max_align_t.md
index 1c58821d9..6ea08a277 100644
--- a/reference/cstddef/max_align_t.md
+++ b/reference/cstddef/max_align_t.md
@@ -13,7 +13,7 @@ namespace std {
 ## 概要
 `std::max_align_t`は、どのスカラー型よりも大きいアライメントを必要とする型である。
 
-この型は、C++11では[POD型](/reference/type_traits/is_pod.md)、C++20では[トリビアル型](/reference/type_traits/is_trivial.md)型に分類される。
+この型は、C++11では[POD型](/reference/type_traits/is_pod.md)、C++20では[トリビアル型](/reference/type_traits/is_trivial.md)に分類される。
 
 `alignas`指示子により、`std::max_align_t`のアライメントより大きいサイズのアライメントを指定できるかどうかは、実装依存である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exchange -- Merge pull request #1210 from cpprefjp/tshino-fix-exchange</title>
      <link href="https://cpprefjp.github.io/reference/utility/exchange.html"/>
      <id>1d9efe41ffa19e7ef2298f09db571821a9f85cbe:reference/utility/exchange.md</id>
      <updated>2023-11-05T19:53:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/exchange.md b/reference/utility/exchange.md
index 5f14d9212..873660959 100644
--- a/reference/utility/exchange.md
+++ b/reference/utility/exchange.md
@@ -24,7 +24,7 @@ namespace std {
 
 
 ## 効果
-第1パラメータ`obj`で受け取った変数への参照に、第2パラメータ`new_val`の値をムーブ代入し、代入前の`obj`の状態を返す。
+第1パラメータ`obj`で受け取った変数への参照に、第2パラメータ`new_val`の値をコピー代入または可能ならムーブ代入し、代入前の`obj`の状態を返す。
 
 以下と等価の効果を持つ：
 
@@ -215,4 +215,4 @@ Hello 0x7ffc560ca4cc
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
 - [`std::exchange` Patterns: Fast, Safe, Expressive, and Probably Underused](https://www.fluentcpp.com/2020/09/25/stdexchange-patterns-fast-safe-expressive-and-probably-underused/)
 - [`std::exchange`によるmoveしてリセットするイディオムの御紹介](https://onihusube.hatenablog.com/entry/2020/10/31/163244)
-- [P2401R0 Add a conditional noexcept specification to std::exchange](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2401r0.html)
\ No newline at end of file
+- [P2401R0 Add a conditional noexcept specification to std::exchange](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2401r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>PODを非推奨化 -- Merge pull request #1211 from suzuki-kei/fix-typo-on-lang-cpp20-deprecate_pod</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_pod.html"/>
      <id>0b7710f00b0c9829be31cb02c0e570e6237c807f:lang/cpp20/deprecate_pod.md</id>
      <updated>2023-11-05T19:50:22+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;PODを非推奨化&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pod.html&#34;&gt;POD (Plain Old Data) という型の分類&lt;/a&gt;は、C++11において&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivial.html&#34;&gt;トリビアル型&lt;/a&gt;と&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_standard_layout.html&#34;&gt;スタンダードレイアウト型&lt;/a&gt;に用語が分割された。&lt;/p&gt;
&lt;p&gt;C++20では規格の文面に残っていた「POD」の使用をやめ、スタンダードレイアウト型などのほかの型分類に置き換えた。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pod.html&#34;&gt;is_pod&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;aligned_storage&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;aligned_union&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/max_align_t.html&#34;&gt;max_align_t&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;P0767R1 Deprecate POD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2342.htm&#34; target=&#34;_blank&#34;&gt;N2342 POD&#39;s Revisited; Resolving Core Issue 568 (Revision 5)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/20081127/1227777378&#34; target=&#34;_blank&#34;&gt;C++0x POD再考 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11においてPODという用語が分割された文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>PODを非推奨化 -- typo を修正: &#34;スタンダードレイアウト型型&#34; -&gt; &#34;スタンダードレイアウト型&#34;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_pod.html"/>
      <id>7e37ab27d5f03221181f8282d1385efe68658864:lang/cpp20/deprecate_pod.md</id>
      <updated>2023-11-05T08:45:00+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;PODを非推奨化&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pod.html&#34;&gt;POD (Plain Old Data) という型の分類&lt;/a&gt;は、C++11において&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivial.html&#34;&gt;トリビアル型&lt;/a&gt;と&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_standard_layout.html&#34;&gt;スタンダードレイアウト型&lt;/a&gt;に用語が分割された。&lt;/p&gt;
&lt;p&gt;C++20では規格の文面に残っていた「POD」の使用をやめ、スタンダードレイアウト型などのほかの型分類に置き換えた。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pod.html&#34;&gt;is_pod&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;aligned_storage&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;aligned_union&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/max_align_t.html&#34;&gt;max_align_t&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;P0767R1 Deprecate POD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2342.htm&#34; target=&#34;_blank&#34;&gt;N2342 POD&#39;s Revisited; Resolving Core Issue 568 (Revision 5)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/20081127/1227777378&#34; target=&#34;_blank&#34;&gt;C++0x POD再考 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11においてPODという用語が分割された文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>SUZUKI Kei</name>
        <email>todokimasen@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exchange -- std::exchangeが常にムーブ代入するような記述の修正</title>
      <link href="https://cpprefjp.github.io/reference/utility/exchange.html"/>
      <id>05ee2e647ca2e59498eb1743056925969eeb6e7f:reference/utility/exchange.md</id>
      <updated>2023-11-04T19:40:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/exchange.md b/reference/utility/exchange.md
index 5f14d9212..873660959 100644
--- a/reference/utility/exchange.md
+++ b/reference/utility/exchange.md
@@ -24,7 +24,7 @@ namespace std {
 
 
 ## 効果
-第1パラメータ`obj`で受け取った変数への参照に、第2パラメータ`new_val`の値をムーブ代入し、代入前の`obj`の状態を返す。
+第1パラメータ`obj`で受け取った変数への参照に、第2パラメータ`new_val`の値をコピー代入または可能ならムーブ代入し、代入前の`obj`の状態を返す。
 
 以下と等価の効果を持つ：
 
@@ -215,4 +215,4 @@ Hello 0x7ffc560ca4cc
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
 - [`std::exchange` Patterns: Fast, Safe, Expressive, and Probably Underused](https://www.fluentcpp.com/2020/09/25/stdexchange-patterns-fast-safe-expressive-and-probably-underused/)
 - [`std::exchange`によるmoveしてリセットするイディオムの御紹介](https://onihusube.hatenablog.com/entry/2020/10/31/163244)
-- [P2401R0 Add a conditional noexcept specification to std::exchange](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2401r0.html)
\ No newline at end of file
+- [P2401R0 Add a conditional noexcept specification to std::exchange](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2401r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
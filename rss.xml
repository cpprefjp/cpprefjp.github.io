<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-03-10T01:46:03.693242</updated>
  <id>1a4ebd40-8985-40a8-8603-15a1511bacc6</id>

  
    <entry>
      <title>operator new[] -- operator new[]: 例を修正</title>
      <link href="http://cpprefjp.github.io/reference/new/op_new[].html"/>
      <id>d93a0d0e895721945adddfeee9ca1870cf80b5ce:reference/new/op_new[].md</id>
      <updated>2015-03-10 01:44:17 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;new&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;operator new[]&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 単純な配列の記憶域の確保&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt;);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size);                                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 単純な配列の記憶域の確保（例外をスローしない）&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;();          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) noexcept;         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 配置newによる配列の記憶域の確保&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;();                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr) noexcept;                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;配列オブジェクトのために動的に記憶域を確保する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size)&lt;/code&gt; を呼び出す。&lt;/li&gt;
&lt;li&gt;(2) C++03 までと C++11 からで異なる。  &lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;&lt;code&gt;nothrow&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; を呼び出す。  &lt;/li&gt;
&lt;li&gt;C++11 から：(1) の形式を &lt;code&gt;operator new[](size)&lt;/code&gt; で呼び出す。ただし、記憶域の確保に失敗しても例外をスローしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3) 何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) 確保した記憶域の先頭アドレスを指すポインタ（&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size)&lt;/code&gt; の戻り値）。&lt;/li&gt;
&lt;li&gt;(2) 記憶域を確保できた場合、確保した記憶域の先頭アドレスを指すポインタ。確保できなかった場合、ヌルポインタ。&lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;&lt;code&gt;nothrow&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; の戻り値&lt;/li&gt;
&lt;li&gt;C++11 から：&lt;code&gt;operator new[](size)&lt;/code&gt; の戻り値。ただし、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;&lt;code&gt;bad_alloc&lt;/code&gt;&lt;/a&gt; 例外がスローされた場合には、ヌルポインタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3) 引数 &lt;code&gt;ptr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)、および、(2) の形式は、&lt;code&gt;size&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; でも他の確保済みの記憶域と異なるアドレスを返す。&lt;br /&gt;
    ただし、記憶域の確保に失敗する可能性もあり、また、成功しても当該ポインタを間接参照した場合の結果は未定義である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1)、および、(2) の形式は、利用者がこれらとおなじシグネチャの関数を用意することで、標準ライブラリの提供している関数を置き換えることができる。&lt;br /&gt;
    なお、(3) の形式については、置き換えることはできない（許可されていない）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1) の形式の &lt;code&gt;operator new[]&lt;/code&gt; を呼び出すだけであれば、（&lt;code&gt;new&lt;/code&gt; 式から間接的に呼ばれる場合も含めて）&lt;code&gt;new&lt;/code&gt; ヘッダをインクルードする必要はない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式の挙動の C++03 までと C++11 からの差は、利用者が &lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;、あるいは &lt;code&gt;operator new[]&lt;/code&gt; を置き換えていない場合には顕在化しない。&lt;br /&gt;
    しかし、例えば利用者が (1) の形式のみを置き換えた場合、C++03 までは (2) の形式を呼び出しても置き換えられたバージョンは呼び出されずに、間接的に&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt; の (2) の形式を呼び出す。&lt;br /&gt;
&lt;code&gt;new&lt;/code&gt; 式と異なり、&lt;code&gt;delete&lt;/code&gt; 式には配置構文が存在しないため、(2) の形式で確保した記憶域も通常の &lt;code&gt;delete&lt;/code&gt; 式で開放する事になる（コンストラクタで例外がスローされた場合を除く。&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_delete[].html&#34;&gt;&lt;code&gt;operator delete[]&lt;/code&gt;&lt;/a&gt; も参照）。&lt;br /&gt;
    従って、C++03 までの場合、(1) の形式を利用者提供の関数で置き換える場合は、(2) の形式も (1) の形式と同様の記憶域確保を行う利用者提供の関数で置き換えるべきである。その場合、C++11 の (2) の形式のように、(1) を呼び出した上で例外ハンドリングする方法が安全確実な方法である。&lt;br /&gt;
    なお、C++11 からは (2) の形式は (1) を呼び出すことになっているため、 (1) の形式のみを置き換えれば問題はないが、C++03 までのバージョンでも同様に動くようにするため、あるいは、標準ライブラリのバグで (2) の形式が (1) の形式を呼び出していない可能性もあるため、(2) の形式も提供した方が良いかもしれない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) の形式は、実質何もしていない。この形式は、記憶域を確保した上でそこに新たなオブジェクトを構築するのではなく、あらかじめ確保されている記憶域上に新たなオブジェクトを構築するのに用いられる。&lt;br /&gt;
    しかし、配列版 &lt;code&gt;new&lt;/code&gt; 式では、指定した配列が必要とする記憶域のサイズをあらかじめ予測することが極めて困難であるため（下記を参照）、配列版 &lt;code&gt;new&lt;/code&gt; 式の配置形式は使用すべきではない。&lt;br /&gt;
    どうしても、あらかじめ確保されている記憶域上に配列を構築したい場合には、ループで単一オブジェクト版の配置 &lt;code&gt;new&lt;/code&gt; を使用するなどして構築すること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配列版 &lt;code&gt;new&lt;/code&gt; 式は &lt;code&gt;operator new[]&lt;/code&gt; を呼び出すだけではない事に注意。&lt;br /&gt;
    配列版 &lt;code&gt;new&lt;/code&gt; 式は、&lt;code&gt;operator new[]&lt;/code&gt; を呼び出した後、確保された記憶域上にオブジェクトを構築する（つまり、コンストラクタを呼び出す）。&lt;br /&gt;
    特に、(2) の形式を使用するために &lt;code&gt;new&lt;/code&gt; 式を &lt;code&gt;new(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;&lt;code&gt;nothrow&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; のようにしても、依然としてコンストラクタが例外をスローする可能性はあるため、&lt;code&gt;new&lt;/code&gt; 式が例外をスローしないとは限らない。&lt;br /&gt;
    また、配列版 &lt;code&gt;new&lt;/code&gt; 式は、C++11 以降、配列の要素数の指定によっては &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_array_new_length.html&#34;&gt;&lt;code&gt;bad_array_new_length&lt;/code&gt;&lt;/a&gt; をスローする可能性もある。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;size&lt;/code&gt; は、配列版 &lt;code&gt;new&lt;/code&gt; 式で指定されている配列の合計サイズより大きい可能性がある。&lt;br /&gt;
    これは、配列版 &lt;code&gt;delete&lt;/code&gt; 式を実行する際に、全要素に対してデストラクタを呼び出す等のために、配列要素そのもの以外の情報を格納することがあるためである。&lt;br /&gt;
    なお、このオーバーヘッドのサイズは、実装によって異なるだけでなく、同一の実装でも場合によって異なる可能性があり、あらかじめこのサイズを知ることは極めて困難である。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new.html&#34;&gt;new&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;complex&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;using&lt;/span&gt; cl &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex.html&#34;&gt;complex&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;;

  try {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) 3 要素の cl 型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 確保失敗時に &lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt; 例外が送出される&lt;/span&gt;
    cl&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p1 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/new.html&#34;&gt;new&lt;/a&gt; cl[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;[] p1;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) 3 要素の cl 型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 確保失敗時にヌルポインタが返される&lt;/span&gt;
    cl&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p2 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/new.html&#34;&gt;new&lt;/a&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow&lt;/a&gt;) cl[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;[] p2;    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 配置 delete と言うものはないので、通常の delete 式で記憶域を解放する&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) char 配列のスタック領域に、3 要素の cl 型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ただし、危険なため、使用してはいけない&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//alignas(cl[3]) char array_field[sizeof(cl) * 3] = {};&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//cl* p3 = &lt;a href=&#34;http://cpprefjp.github.io/reference/new.html&#34;&gt;new&lt;/a&gt;(array_field) cl[3];&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//for (std::size_t i = 3; i &amp;gt; 0; ) {    // ループでデストラクタを呼び出す&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  --i;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//  p3[i].~cl();&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//}&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 参考 char 配列のスタック領域に、3 要素の cl 型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) の形式ではなく、ループでオブジェクトを構築&lt;/span&gt;
    alignas(cl[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;]) &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; array_field[&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(cl) &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
    cl&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;cl&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(array_field);
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;i) {   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ループで配置 &lt;a href=&#34;http://cpprefjp.github.io/reference/new.html&#34;&gt;new&lt;/a&gt; を呼び出す&lt;/span&gt;
      &lt;a href=&#34;http://cpprefjp.github.io/reference/new.html&#34;&gt;new&lt;/a&gt;(p3 &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; i) cl();
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; ) {  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ループでデストラクタを呼び出す&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;--&lt;/span&gt;i;
      p3[i].&lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;cl();
    }
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator new[] -- operator new[]: 備考に記載を追加</title>
      <link href="http://cpprefjp.github.io/reference/new/op_new[].html"/>
      <id>27cd0777c456f93561b1e33221be79c64f0b7073:reference/new/op_new[].md</id>
      <updated>2015-03-08 22:40:33 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;new&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;operator new[]&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 単純な配列の記憶域の確保&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt;);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size);                                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 単純な配列の記憶域の確保（例外をスローしない）&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;();          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) noexcept;         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 配置newによる配列の記憶域の確保&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;();                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr) noexcept;                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;配列オブジェクトのために動的に記憶域を確保する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size)&lt;/code&gt; を呼び出す。&lt;/li&gt;
&lt;li&gt;(2) C++03 までと C++11 からで異なる。  &lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;&lt;code&gt;nothrow&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; を呼び出す。  &lt;/li&gt;
&lt;li&gt;C++11 から：(1) の形式を &lt;code&gt;operator new[](size)&lt;/code&gt; で呼び出す。ただし、記憶域の確保に失敗しても例外をスローしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3) 何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) 確保した記憶域の先頭アドレスを指すポインタ（&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size)&lt;/code&gt; の戻り値）。&lt;/li&gt;
&lt;li&gt;(2) 記憶域を確保できた場合、確保した記憶域の先頭アドレスを指すポインタ。確保できなかった場合、ヌルポインタ。&lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;&lt;code&gt;nothrow&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; の戻り値&lt;/li&gt;
&lt;li&gt;C++11 から：&lt;code&gt;operator new[](size)&lt;/code&gt; の戻り値。ただし、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;&lt;code&gt;bad_alloc&lt;/code&gt;&lt;/a&gt; 例外がスローされた場合には、ヌルポインタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3) 引数 &lt;code&gt;ptr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1)、および、(2) の形式は、&lt;code&gt;size&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; でも他の確保済みの記憶域と異なるアドレスを返す。&lt;br /&gt;
    ただし、記憶域の確保に失敗する可能性もあり、また、成功しても当該ポインタを間接参照した場合の結果は未定義である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1)、および、(2) の形式は、利用者がこれらとおなじシグネチャの関数を用意することで、標準ライブラリの提供している関数を置き換えることができる。&lt;br /&gt;
    なお、(3) の形式については、置き換えることはできない（許可されていない）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1) の形式の &lt;code&gt;operator new[]&lt;/code&gt; を呼び出すだけであれば、（&lt;code&gt;new&lt;/code&gt; 式から間接的に呼ばれる場合も含めて）&lt;code&gt;new&lt;/code&gt; ヘッダをインクルードする必要はない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) の形式の挙動の C++03 までと C++11 からの差は、利用者が &lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;、あるいは &lt;code&gt;operator new[]&lt;/code&gt; を置き換えていない場合には顕在化しない。&lt;br /&gt;
    しかし、例えば利用者が (1) の形式のみを置き換えた場合、C++03 までは (2) の形式を呼び出しても置き換えられたバージョンは呼び出されずに、間接的に&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt; の (2) の形式を呼び出す。&lt;br /&gt;
&lt;code&gt;new&lt;/code&gt; 式と異なり、&lt;code&gt;delete&lt;/code&gt; 式には配置構文が存在しないため、(2) の形式で確保した記憶域も通常の &lt;code&gt;delete&lt;/code&gt; 式で開放する事になる（コンストラクタで例外がスローされた場合を除く。&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_delete[].html&#34;&gt;&lt;code&gt;operator delete[]&lt;/code&gt;&lt;/a&gt; も参照）。&lt;br /&gt;
    従って、C++03 までの場合、(1) の形式を利用者提供の関数で置き換える場合は、(2) の形式も (1) の形式と同様の記憶域確保を行う利用者提供の関数で置き換えるべきである。その場合、C++11 の (2) の形式のように、(1) を呼び出した上で例外ハンドリングする方法が安全確実な方法である。&lt;br /&gt;
    なお、C++11 からは (2) の形式は (1) を呼び出すことになっているため、 (1) の形式のみを置き換えれば問題はないが、C++03 までのバージョンでも同様に動くようにするため、あるいは、標準ライブラリのバグで (2) の形式が (1) の形式を呼び出していない可能性もあるため、(2) の形式も提供した方が良いかもしれない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) の形式は、実質何もしていない。この形式は、記憶域を確保した上でそこに新たなオブジェクトを構築するのではなく、あらかじめ確保されている記憶域上に新たなオブジェクトを構築するのに用いられる。&lt;br /&gt;
    しかし、配列版 &lt;code&gt;new&lt;/code&gt; 式では、指定した配列が必要とする記憶域のサイズをあらかじめ予測することが極めて困難であるため（下記を参照）、配列版 &lt;code&gt;new&lt;/code&gt; 式の配置形式は使用すべきではない。&lt;br /&gt;
    どうしても、あらかじめ確保されている記憶域上に配列を構築したい場合には、ループで単一オブジェクト版の配置 &lt;code&gt;new&lt;/code&gt; を使用するなどして構築すること。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配列版 &lt;code&gt;new&lt;/code&gt; 式は &lt;code&gt;operator new[]&lt;/code&gt; を呼び出すだけではない事に注意。&lt;br /&gt;
    配列版 &lt;code&gt;new&lt;/code&gt; 式は、&lt;code&gt;operator new[]&lt;/code&gt; を呼び出した後、確保された記憶域上にオブジェクトを構築する（つまり、コンストラクタを呼び出す）。&lt;br /&gt;
    特に、(2) の形式を使用するために &lt;code&gt;new&lt;/code&gt; 式を &lt;code&gt;new(std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;&lt;code&gt;nothrow&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; のようにしても、依然としてコンストラクタが例外をスローする可能性はあるため、&lt;code&gt;new&lt;/code&gt; 式が例外をスローしないとは限らない。&lt;br /&gt;
    また、配列版 &lt;code&gt;new&lt;/code&gt; 式は、C++11 以降、配列の要素数の指定によっては &lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_array_new_length.html&#34;&gt;&lt;code&gt;bad_array_new_length&lt;/code&gt;&lt;/a&gt; をスローする可能性もある。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引数 &lt;code&gt;size&lt;/code&gt; は、配列版 &lt;code&gt;new&lt;/code&gt; 式で指定されている配列の合計サイズより大きい可能性がある。&lt;br /&gt;
    これは、配列版 &lt;code&gt;delete&lt;/code&gt; 式を実行する際に、全要素に対してデストラクタを呼び出す等のために、配列要素そのもの以外の情報を格納することがあるためである。&lt;br /&gt;
    なお、このオーバーヘッドのサイズは、実装によって異なるだけでなく、同一の実装でも場合によって異なる可能性があり、あらかじめこのサイズを知ることは極めて困難である。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;new&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  try {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3要素のint型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 確保失敗時にbad_alloc例外が送出される&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;[] p3;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3要素のint型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 確保失敗時にヌルポインタが返される&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;nothrow) &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;[] p4;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// char配列のスタック領域に、3要素のint型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; array_field[&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p6 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;(array_field) &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;];
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bad_alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_stringbufクラスはムーブコンストラクタを持たないので、削除(#239)</title>
      <link href="http://cpprefjp.github.io/reference/streambuf/basic_streambuf/op_constructor.html"/>
      <id>67c08fd24b4b438112f64b8f076697ea0c236f5a:reference/streambuf/basic_streambuf/op_constructor.md</id>
      <updated>2015-03-09 17:22:43 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;streambuf&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_streambuf&#34;&gt;basic_streambuf::&lt;/span&gt;コンストラクタ&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; char_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;basic_streambuf&lt;/span&gt; {
  &lt;span style=&#34;color: #A0A000&#34;&gt;protected:&lt;/span&gt;
    basic_streambuf();

    &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;……&lt;/span&gt;
  };
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;オブジェクトを構築する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;入力部分列・出力部分列の各ポインタをヌルにする。&lt;/li&gt;
&lt;li&gt;現在のグローバルロケールを&lt;code&gt;locale&lt;/code&gt;デフォルトコンストラクタで取得し、&lt;code&gt;getloc()&lt;/code&gt;の初期値とする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;事後条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gptr()&lt;/code&gt; == &lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;egptr()&lt;/code&gt; == &lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pptr()&lt;/code&gt; == &lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;epptr()&lt;/code&gt; == &lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eback()&lt;/code&gt; == &lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gptr()&lt;/code&gt; == &lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;egptr()&lt;/code&gt; == &lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getloc()&lt;/code&gt; == &lt;code&gt;locale()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator new[] -- operator new[]: 効果、および、戻り値を形式毎に記載</title>
      <link href="http://cpprefjp.github.io/reference/new/op_new[].html"/>
      <id>694d8745ee6e0f2670bd1d6b2e3e917ea7a14834:reference/new/op_new[].md</id>
      <updated>2015-03-05 23:28:57 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;new&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;operator new[]&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 単純な配列の記憶域の確保&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt;);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size);                                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 単純な配列の記憶域の確保（例外をスローしない）&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;();          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) noexcept;         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2) C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 配置newによる配列の記憶域の確保&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;();                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr) noexcept;                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3) C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;配列オブジェクトのために動的に記憶域を確保する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size)&lt;/code&gt; を呼び出す。&lt;/li&gt;
&lt;li&gt;(2) C++03 までと C++11 からで異なる。  &lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;&lt;code&gt;nothrow&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; を呼び出す。  &lt;/li&gt;
&lt;li&gt;C++11 から：(1) の形式を &lt;code&gt;operator new[](size)&lt;/code&gt; で呼び出す。ただし、記憶域の確保に失敗しても例外をスローしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3) 何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) 確保した記憶域の先頭アドレスを指すポインタ（&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size)&lt;/code&gt; の戻り値）。&lt;/li&gt;
&lt;li&gt;(2) 記憶域を確保できた場合、確保した記憶域の先頭アドレスを指すポインタ。確保できなかった場合、ヌルポインタ。&lt;ul&gt;
&lt;li&gt;C++03 まで：&lt;a href=&#34;http://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;&lt;code&gt;operator new&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(size, std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;&lt;code&gt;nothrow&lt;/code&gt;&lt;/a&gt;&lt;code&gt;)&lt;/code&gt; の戻り値&lt;/li&gt;
&lt;li&gt;C++11 から：&lt;code&gt;operator new[](size)&lt;/code&gt; の戻り値。ただし、&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;&lt;code&gt;bad_alloc&lt;/code&gt;&lt;/a&gt; 例外がスローされた場合には、ヌルポインタ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(3) 引数 &lt;code&gt;ptr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;一般にプログラム実行中の記憶域の動的確保は処理系がOSからヒープを割り当てるのに対し、placement-new では既にプログラムに割り当て済みの任意の記憶域を新たに確保を求められた際に便宜上割り当てる手法で、上手く使った場合は new / delete を大量に繰り返す必要のある処理を高速に実現しうる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;new&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  try {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3要素のint型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 確保失敗時にbad_alloc例外が送出される&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;[] p3;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3要素のint型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 確保失敗時にヌルポインタが返される&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;nothrow) &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;[] p4;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// char配列のスタック領域に、3要素のint型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; array_field[&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p6 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;(array_field) &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;];
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bad_alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator new[] -- operator new[]: 概要を追加</title>
      <link href="http://cpprefjp.github.io/reference/new/op_new[].html"/>
      <id>a64934f5c2bce100969594541b29e1751bc8613e:reference/new/op_new[].md</id>
      <updated>2015-03-05 23:26:04 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;new&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;operator new[]&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 単純な配列の記憶域の確保&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bad_alloc);                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size);                                         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 単純な配列の記憶域の確保（例外をスローしない）&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;();          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow_t&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;) noexcept;         &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 配置newによる配列の記憶域の確保&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;();                      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++03 まで&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;[](std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;size_t&lt;/span&gt; size, &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; ptr) noexcept;                     &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11 から&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;配列オブジェクトのために動的に記憶域を確保する。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;プログラムが動的に記憶域を確保する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;確保した記憶域の先頭アドレスを指すポインタ。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;一般にプログラム実行中の記憶域の動的確保は処理系がOSからヒープを割り当てるのに対し、placement-new では既にプログラムに割り当て済みの任意の記憶域を新たに確保を求められた際に便宜上割り当てる手法で、上手く使った場合は new / delete を大量に繰り返す必要のある処理を高速に実現しうる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;new&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  try {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3要素のint型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 確保失敗時にbad_alloc例外が送出される&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p3 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;[] p3;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3要素のint型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 確保失敗時にヌルポインタが返される&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p4 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;nothrow) &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;delete&lt;/span&gt;[] p4;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// char配列のスタック領域に、3要素のint型配列を動的に作成&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; array_field[&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
    &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p6 &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt;(array_field) &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;];
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;bad_alloc&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; e) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e.what() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
</feed>
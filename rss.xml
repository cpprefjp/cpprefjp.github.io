<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-12-20T08:09:45.749597</updated>
  <id>af764316-52a5-46f5-bdba-33ed14de6503</id>

  
    <entry>
      <title>uninitialized_copy -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_copy.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/ranges_uninitialized_copy.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_copy.md b/reference/memory/ranges_uninitialized_copy.md
index 34796e6d2..6c7e94829 100644
--- a/reference/memory/ranges_uninitialized_copy.md
+++ b/reference/memory/ranges_uninitialized_copy.md
@@ -13,12 +13,35 @@ namespace std::ranges {
             no-throw-forward-iterator O, no-throw-sentinel&amp;lt;O&amp;gt; S2&amp;gt;
   requires constructible_from&amp;lt;iter_value_t&amp;lt;O&amp;gt;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;
   uninitialized_copy_result&amp;lt;I, O&amp;gt;
-    uninitialized_copy(I ifirst, S1 ilast, O ofirst, S2 olast); // (1) C++20
+    uninitialized_copy(I ifirst,
+                       S1 ilast,
+                       O ofirst,
+                       S2 olast);       // (1) C++20
+  template &amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S1,
+            no-throw-forward-iterator O, no-throw-sentinel&amp;lt;O&amp;gt; S2&amp;gt;
+  requires constructible_from&amp;lt;iter_value_t&amp;lt;O&amp;gt;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;
+  constexpr uninitialized_copy_result&amp;lt;I, O&amp;gt;
+    uninitialized_copy(I ifirst,
+                       S1 ilast,
+                       O ofirst,
+                       S2 olast);       // (1) C++26
 
   template &amp;lt;input_range IR, no-throw-forward-range OR&amp;gt;
   requires constructible_from&amp;lt;range_value_t&amp;lt;OR&amp;gt;, range_reference_t&amp;lt;IR&amp;gt;&amp;gt;
-  uninitialized_copy_result&amp;lt;borrowed_iterator_t&amp;lt;IR&amp;gt;, borrowed_iterator_t&amp;lt;OR&amp;gt;&amp;gt;
-    uninitialized_copy(IR&amp;amp;&amp;amp; in_range, OR&amp;amp;&amp;amp; out_range);          // (2) C++20
+  uninitialized_copy_result&amp;lt;
+    borrowed_iterator_t&amp;lt;IR&amp;gt;,
+    borrowed_iterator_t&amp;lt;OR&amp;gt;
+  &amp;gt;
+    uninitialized_copy(IR&amp;amp;&amp;amp; in_range,
+                       OR&amp;amp;&amp;amp; out_range); // (2) C++20
+  template &amp;lt;input_range IR, no-throw-forward-range OR&amp;gt;
+  requires constructible_from&amp;lt;range_value_t&amp;lt;OR&amp;gt;, range_reference_t&amp;lt;IR&amp;gt;&amp;gt;
+  constexpr uninitialized_copy_result&amp;lt;
+    borrowed_iterator_t&amp;lt;IR&amp;gt;,
+    borrowed_iterator_t&amp;lt;OR&amp;gt;
+  &amp;gt;
+    uninitialized_copy(IR&amp;amp;&amp;amp; in_range,
+                       OR&amp;amp;&amp;amp; out_range); // (2) C++26
 }
 ```
 * in_out_result[link /reference/algorithm/ranges_in_out_result.md]
@@ -152,3 +175,5 @@ int main()
 
 ## 参照
 - [P9896R4 The One Ranges Proposal](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_copy_n -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_copy_n.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/ranges_uninitialized_copy_n.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_copy_n.md b/reference/memory/ranges_uninitialized_copy_n.md
index a6ab82f5d..aabbeee86 100644
--- a/reference/memory/ranges_uninitialized_copy_n.md
+++ b/reference/memory/ranges_uninitialized_copy_n.md
@@ -20,6 +20,17 @@ namespace std::ranges {
       O ofirst,
       S olast
     );                               // (1) C++20
+  template &amp;lt;input_iterator I,
+            no-throw-forward-iterator O,
+            no-throw-sentinel&amp;lt;O&amp;gt; S&amp;gt;
+  requires constructible_from&amp;lt;iter_value_t&amp;lt;O&amp;gt;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;
+  constexpr uninitialized_copy_n_result&amp;lt;I, O&amp;gt;
+    uninitialized_copy_n(
+      I ifirst,
+      iter_difference_t&amp;lt;I&amp;gt; n,
+      O ofirst,
+      S olast
+    );                               // (1) C++26
 }
 ```
 * in_out_result[link /reference/algorithm/ranges_in_out_result.md]
@@ -131,3 +142,5 @@ int main()
 
 ## 参照
 - [P9896R4 The One Ranges Proposal](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_default_construct.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/ranges_uninitialized_default_construct.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_default_construct.md b/reference/memory/ranges_uninitialized_default_construct.md
index 732025acc..ba4a0f852 100644
--- a/reference/memory/ranges_uninitialized_default_construct.md
+++ b/reference/memory/ranges_uninitialized_default_construct.md
@@ -8,11 +8,21 @@
 namespace std::ranges {
   template &amp;lt;no-throw-forward-iterator I, no-throw-sentinel&amp;lt;I&amp;gt; S&amp;gt;
     requires default_initializable&amp;lt;iter_value_t&amp;lt;I&amp;gt;&amp;gt;
-  I uninitialized_default_construct(I first, S last);            // (1) C++20
+  I
+    uninitialized_default_construct(I first, S last); // (1) C++20
+  template &amp;lt;no-throw-forward-iterator I, no-throw-sentinel&amp;lt;I&amp;gt; S&amp;gt;
+    requires default_initializable&amp;lt;iter_value_t&amp;lt;I&amp;gt;&amp;gt;
+  constexpr I
+    uninitialized_default_construct(I first, S last); // (1) C++26
 
   template &amp;lt;no-throw-forward-range R&amp;gt;
     requires default_initializable&amp;lt;range_value_t&amp;lt;R&amp;gt;&amp;gt;
-  borrowed_iterator_t&amp;lt;R&amp;gt; uninitialized_default_construct(R&amp;amp;&amp;amp; r); // (2) C++20
+  borrowed_iterator_t&amp;lt;R&amp;gt;
+    uninitialized_default_construct(R&amp;amp;&amp;amp; r);           // (2) C++20
+  template &amp;lt;no-throw-forward-range R&amp;gt;
+    requires default_initializable&amp;lt;range_value_t&amp;lt;R&amp;gt;&amp;gt;
+  constexpr borrowed_iterator_t&amp;lt;R&amp;gt;
+    uninitialized_default_construct(R&amp;amp;&amp;amp; r);           // (2) C++26
 }
 ```
 * no-throw-forward-iterator[link no-throw-forward-iterator.md]
@@ -135,3 +145,6 @@ int main()
 
 ## 参照
 - [P9896R4 The One Ranges Proposal](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+- [P3369R0 `constexpr` for `uninitialized_default_construct`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3369r0.html)
+    - 上記2文書で、C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct_n -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_default_construct_n.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/ranges_uninitialized_default_construct_n.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_default_construct_n.md b/reference/memory/ranges_uninitialized_default_construct_n.md
index 92c66aaa2..fbc01f39e 100644
--- a/reference/memory/ranges_uninitialized_default_construct_n.md
+++ b/reference/memory/ranges_uninitialized_default_construct_n.md
@@ -8,7 +8,14 @@
 namespace std::ranges {
   template &amp;lt;no-throw-forward-iterator I&amp;gt;
     requires default_initializable&amp;lt;iter_value_t&amp;lt;I&amp;gt;&amp;gt;
-  I uninitialized_default_construct_n(I first, iter_difference_t&amp;lt;I&amp;gt; n); // (1) C++20
+  I
+    uninitialized_default_construct_n(I first,
+                                      iter_difference_t&amp;lt;I&amp;gt; n); // (1) C++20
+  template &amp;lt;no-throw-forward-iterator I&amp;gt;
+    requires default_initializable&amp;lt;iter_value_t&amp;lt;I&amp;gt;&amp;gt;
+  constexpr I
+    uninitialized_default_construct_n(I first,
+                                      iter_difference_t&amp;lt;I&amp;gt; n); // (1) C++26
 }
 ```
 * no-throw-forward-iterator[link no-throw-forward-iterator.md]
@@ -105,3 +112,6 @@ int main()
 
 ## 参照
 - [P9896R4 The One Ranges Proposal](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+- [P3369R0 `constexpr` for `uninitialized_default_construct`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3369r0.html)
+    - 上記2文書で、C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_fill -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_fill.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/ranges_uninitialized_fill.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_fill.md b/reference/memory/ranges_uninitialized_fill.md
index c75b8ac4a..024335ecd 100644
--- a/reference/memory/ranges_uninitialized_fill.md
+++ b/reference/memory/ranges_uninitialized_fill.md
@@ -10,12 +10,23 @@ namespace std::ranges {
             no-throw-sentinel&amp;lt;I&amp;gt; S,
             class T&amp;gt;
     requires constructible_from&amp;lt;iter_value_t&amp;lt;I&amp;gt;, const T&amp;amp;&amp;gt;
-  I uninitialized_fill(I first, S last, const T&amp;amp; x);            // (1) C++20
+  I uninitialized_fill(I first, S last, const T&amp;amp; x); // (1) C++20
+  template &amp;lt;no-throw-forward-iterator I,
+            no-throw-sentinel&amp;lt;I&amp;gt; S,
+            class T&amp;gt;
+    requires constructible_from&amp;lt;iter_value_t&amp;lt;I&amp;gt;, const T&amp;amp;&amp;gt;
+  I uninitialized_fill(I first, S last, const T&amp;amp; x); // (1) C++26
 
   template &amp;lt;no-throw-forward-range R,
             class T&amp;gt;
     requires constructible_from&amp;lt;range_value_t&amp;lt;R&amp;gt;, const T&amp;amp;&amp;gt;
-  borrowed_iterator_t&amp;lt;R&amp;gt; uninitialized_fill(R&amp;amp;&amp;amp; r, const T&amp;amp; x); // (2) C++20
+  borrowed_iterator_t&amp;lt;R&amp;gt;
+    uninitialized_fill(R&amp;amp;&amp;amp; r, const T&amp;amp; x);           // (2) C++20
+  template &amp;lt;no-throw-forward-range R,
+            class T&amp;gt;
+    requires constructible_from&amp;lt;range_value_t&amp;lt;R&amp;gt;, const T&amp;amp;&amp;gt;
+  constexpr borrowed_iterator_t&amp;lt;R&amp;gt;
+    uninitialized_fill(R&amp;amp;&amp;amp; r, const T&amp;amp; x);           // (2) C++26
 }
 ```
 * no-throw-forward-iterator[link no-throw-forward-iterator.md]
@@ -130,3 +141,5 @@ int main()
 
 ## 参照
 - [P9896R4 The One Ranges Proposal](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_fill_n -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_fill_n.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/ranges_uninitialized_fill_n.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_fill_n.md b/reference/memory/ranges_uninitialized_fill_n.md
index 77209759b..ec97fd181 100644
--- a/reference/memory/ranges_uninitialized_fill_n.md
+++ b/reference/memory/ranges_uninitialized_fill_n.md
@@ -8,7 +8,16 @@
 namespace std::ranges {
   template &amp;lt;no-throw-forward-iterator I, class T&amp;gt;
     requires constructible_from&amp;lt;iter_value_t&amp;lt;I&amp;gt;, const T&amp;amp;&amp;gt;
-  I uninitialized_fill_n(I first, iter_difference_t&amp;lt;I&amp;gt; n, const T&amp;amp; x); // (1) C++20
+  I
+    uninitialized_fill_n(I first,
+                         iter_difference_t&amp;lt;I&amp;gt; n,
+                         const T&amp;amp; x);            // (1) C++20
+  template &amp;lt;no-throw-forward-iterator I, class T&amp;gt;
+    requires constructible_from&amp;lt;iter_value_t&amp;lt;I&amp;gt;, const T&amp;amp;&amp;gt;
+  constexpr I
+    uninitialized_fill_n(I first,
+                         iter_difference_t&amp;lt;I&amp;gt; n,
+                         const T&amp;amp; x);            // (1) C++26
 }
 ```
 * no-throw-forward-iterator[link no-throw-forward-iterator.md]
@@ -100,3 +109,5 @@ int main()
 
 ## 参照
 - [P9896R4 The One Ranges Proposal](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_move -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_move.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/ranges_uninitialized_move.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_move.md b/reference/memory/ranges_uninitialized_move.md
index 36604fd06..1e0e7f4f3 100644
--- a/reference/memory/ranges_uninitialized_move.md
+++ b/reference/memory/ranges_uninitialized_move.md
@@ -14,11 +14,26 @@ namespace std::ranges {
   requires constructible_from&amp;lt;iter_value_t&amp;lt;O&amp;gt;, iter_rvalue_reference_t&amp;lt;I&amp;gt;&amp;gt;
   uninitialized_move_result&amp;lt;I, O&amp;gt;
     uninitialized_move(I ifirst, S1 ilast, O ofirst, S2 olast); // (1) C++20
+  template &amp;lt;input_iterator I, sentinel_for&amp;lt;I&amp;gt; S1,
+            no-throw-forward-iterator O, no-throw-sentinel&amp;lt;O&amp;gt; S2&amp;gt;
+  requires constructible_from&amp;lt;iter_value_t&amp;lt;O&amp;gt;, iter_rvalue_reference_t&amp;lt;I&amp;gt;&amp;gt;
+  constexpr uninitialized_move_result&amp;lt;I, O&amp;gt;
+    uninitialized_move(I ifirst, S1 ilast, O ofirst, S2 olast); // (1) C++26
 
   template &amp;lt;input_range IR, no-throw-forward-range OR&amp;gt;
   requires constructible_from&amp;lt;range_value_t&amp;lt;OR&amp;gt;, range_rvalue_reference_t&amp;lt;IR&amp;gt;&amp;gt;
-  uninitialized_move_result&amp;lt;borrowed_iterator_t&amp;lt;IR&amp;gt;, borrowed_iterator_t&amp;lt;OR&amp;gt;&amp;gt;
+  uninitialized_move_result&amp;lt;
+    borrowed_iterator_t&amp;lt;IR&amp;gt;,
+    borrowed_iterator_t&amp;lt;OR&amp;gt;
+  &amp;gt;
     uninitialized_move(IR&amp;amp;&amp;amp; in_range, OR&amp;amp;&amp;amp; out_range);          // (2) C++20
+  template &amp;lt;input_range IR, no-throw-forward-range OR&amp;gt;
+  requires constructible_from&amp;lt;range_value_t&amp;lt;OR&amp;gt;, range_rvalue_reference_t&amp;lt;IR&amp;gt;&amp;gt;
+  constexpr uninitialized_move_result&amp;lt;
+    borrowed_iterator_t&amp;lt;IR&amp;gt;,
+    borrowed_iterator_t&amp;lt;OR&amp;gt;
+  &amp;gt;
+    uninitialized_move(IR&amp;amp;&amp;amp; in_range, OR&amp;amp;&amp;amp; out_range);          // (2) C++26
 }
 ```
 * in_out_result[link /reference/algorithm/ranges_in_out_result.md]
@@ -154,3 +169,5 @@ int main()
 
 ## 参照
 - [P9896R4 The One Ranges Proposal](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_move_n -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_move_n.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/ranges_uninitialized_move_n.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_move_n.md b/reference/memory/ranges_uninitialized_move_n.md
index 1107df6b1..72b98746f 100644
--- a/reference/memory/ranges_uninitialized_move_n.md
+++ b/reference/memory/ranges_uninitialized_move_n.md
@@ -20,6 +20,17 @@ namespace std::ranges {
       O ofirst,
       S olast
     );                               // (1) C++20
+  template &amp;lt;input_iterator I,
+            no-throw-forward-iterator O,
+            no-throw-sentinel&amp;lt;O&amp;gt; S&amp;gt;
+  requires constructible_from&amp;lt;iter_value_t&amp;lt;O&amp;gt;, iter_rvalue_reference_t&amp;lt;I&amp;gt;&amp;gt;
+  constexpr uninitialized_move_n_result&amp;lt;I, O&amp;gt;
+    uninitialized_move_n(
+      I ifirst,
+      iter_difference_t&amp;lt;I&amp;gt; n,
+      O ofirst,
+      S olast
+    );                               // (1) C++26
 }
 ```
 * in_out_result[link /reference/algorithm/ranges_in_out_result.md]
@@ -132,3 +143,5 @@ int main()
 
 ## 参照
 - [P9896R4 The One Ranges Proposal](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_value_construct -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_value_construct.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/ranges_uninitialized_value_construct.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_value_construct.md b/reference/memory/ranges_uninitialized_value_construct.md
index 6be80bdb4..f33cd17f7 100644
--- a/reference/memory/ranges_uninitialized_value_construct.md
+++ b/reference/memory/ranges_uninitialized_value_construct.md
@@ -8,11 +8,21 @@
 namespace std::ranges {
   template &amp;lt;no-throw-forward-iterator I, no-throw-sentinel&amp;lt;I&amp;gt; S&amp;gt;
     requires default_initializable&amp;lt;iter_value_t&amp;lt;I&amp;gt;&amp;gt;
-  I uninitialized_value_construct(I first, S last);            // (1) C++20
+  I
+    uninitialized_value_construct(I first, S last);  // (1) C++20
+  template &amp;lt;no-throw-forward-iterator I, no-throw-sentinel&amp;lt;I&amp;gt; S&amp;gt;
+    requires default_initializable&amp;lt;iter_value_t&amp;lt;I&amp;gt;&amp;gt;
+  constexpr I
+    uninitialized_value_construct(I first, S last);  // (1) C++26
 
   template &amp;lt;no-throw-forward-range R&amp;gt;
     requires default_initializable&amp;lt;range_value_t&amp;lt;R&amp;gt;&amp;gt;
-  borrowed_iterator_t&amp;lt;R&amp;gt; uninitialized_value_construct(R&amp;amp;&amp;amp; r); // (2) C++20
+  borrowed_iterator_t&amp;lt;R&amp;gt;
+    uninitialized_value_construct(R&amp;amp;&amp;amp; r);            // (2) C++20
+  template &amp;lt;no-throw-forward-range R&amp;gt;
+    requires default_initializable&amp;lt;range_value_t&amp;lt;R&amp;gt;&amp;gt;
+  constexpr borrowed_iterator_t&amp;lt;R&amp;gt;
+    uninitialized_value_construct(R&amp;amp;&amp;amp; r);            // (2) C++26
 }
 ```
 * no-throw-forward-iterator[link no-throw-forward-iterator.md]
@@ -131,3 +141,5 @@ int main()
 
 ## 参照
 - [P9896R4 The One Ranges Proposal](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_value_construct_n -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/ranges_uninitialized_value_construct_n.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/ranges_uninitialized_value_construct_n.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/ranges_uninitialized_value_construct_n.md b/reference/memory/ranges_uninitialized_value_construct_n.md
index b550410ae..caac190e3 100644
--- a/reference/memory/ranges_uninitialized_value_construct_n.md
+++ b/reference/memory/ranges_uninitialized_value_construct_n.md
@@ -8,7 +8,14 @@
 namespace std::ranges {
   template &amp;lt;no-throw-forward-iterator I&amp;gt;
     requires default_initializable&amp;lt;iter_value_t&amp;lt;I&amp;gt;&amp;gt;
-  I uninitialized_value_construct_n(I first, iter_difference_t&amp;lt;I&amp;gt; n); // (1) C++20
+  I
+    uninitialized_value_construct_n(I first,
+                                    iter_difference_t&amp;lt;I&amp;gt; n); // (1) C++20
+  template &amp;lt;no-throw-forward-iterator I&amp;gt;
+    requires default_initializable&amp;lt;iter_value_t&amp;lt;I&amp;gt;&amp;gt;
+  constexpr I
+    uninitialized_value_construct_n(I first,
+                                    iter_difference_t&amp;lt;I&amp;gt; n); // (1) C++26
 }
 ```
 * no-throw-forward-iterator[link no-throw-forward-iterator.md]
@@ -106,3 +113,5 @@ int main()
 
 ## 参照
 - [P9896R4 The One Ranges Proposal](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_copy -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_copy.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/uninitialized_copy.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_copy.md b/reference/memory/uninitialized_copy.md
index 0f985d872..5f3863130 100644
--- a/reference/memory/uninitialized_copy.md
+++ b/reference/memory/uninitialized_copy.md
@@ -10,6 +10,11 @@ namespace std {
     uninitialized_copy(InputIterator first,
                        InputIterator last,
                        ForwardIterator result); // (1) C++03
+  template &amp;lt;class InputIterator, class ForwardIterator&amp;gt;
+  constexpr ForwardIterator
+    uninitialized_copy(InputIterator first,
+                       InputIterator last,
+                       ForwardIterator result); // (1) C++26
 
   template &amp;lt;class ExecutionPolicy, class InputIterator, class ForwardIterator&amp;gt;
   ForwardIterator
@@ -112,3 +117,5 @@ int main()
 
 ## 参照
 - [LWG Issue 2433 `uninitialized_copy()`/etc. should tolerate overloaded `operator&amp;amp;`](https://wg21.cmeerw.net/lwg/issue2433)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_copy_n -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_copy_n.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/uninitialized_copy_n.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_copy_n.md b/reference/memory/uninitialized_copy_n.md
index 3e5b4fba2..54f76dcd3 100644
--- a/reference/memory/uninitialized_copy_n.md
+++ b/reference/memory/uninitialized_copy_n.md
@@ -6,13 +6,25 @@
 
 ```cpp
 namespace std {
-  template &amp;lt;class InputIterator, class Size, class ForwardIterator&amp;gt;
+  template &amp;lt;class InputIterator,
+            class Size,
+            class ForwardIterator&amp;gt;
   ForwardIterator
     uninitialized_copy_n(InputIterator first,
                          Size n,
                          ForwardIterator result); // (1) C++11
+  template &amp;lt;class InputIterator,
+            class Size,
+            class ForwardIterator&amp;gt;
+  constexpr ForwardIterator
+    uninitialized_copy_n(InputIterator first,
+                         Size n,
+                         ForwardIterator result); // (1) C++26
 
-  template &amp;lt;class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator&amp;gt;
+  template &amp;lt;class ExecutionPolicy,
+            class InputIterator,
+            class Size,
+            class ForwardIterator&amp;gt;
   ForwardIterator
     uninitialized_copy_n(ExecutionPolicy&amp;amp;&amp;amp; exec,
                          InputIterator first,
@@ -123,3 +135,5 @@ int main()
 - [N2569 More STL algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf)
 - [N2666 More STL algorithms (revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2666.pdf)
 - [LWG Issue 2433 `uninitialized_copy()`/etc. should tolerate overloaded `operator&amp;amp;`](https://wg21.cmeerw.net/lwg/issue2433)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_default_construct.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/uninitialized_default_construct.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_default_construct.md b/reference/memory/uninitialized_default_construct.md
index bd9133eb8..af0a5a9e2 100644
--- a/reference/memory/uninitialized_default_construct.md
+++ b/reference/memory/uninitialized_default_construct.md
@@ -7,13 +7,19 @@
 ```cpp
 namespace std {
   template &amp;lt;class ForwardIterator&amp;gt;
-  void uninitialized_default_construct(ForwardIterator first,
-                                       ForwardIterator last); // (1)
+  void
+    uninitialized_default_construct(ForwardIterator first,
+                                    ForwardIterator last); // (1) C++17
+  template &amp;lt;class ForwardIterator&amp;gt;
+  constexpr void
+    uninitialized_default_construct(ForwardIterator first,
+                                    ForwardIterator last); // (1) C++26
 
   template &amp;lt;class ExecutionPolicy, class ForwardIterator&amp;gt;
-  void uninitialized_default_construct(ExecutionPolicy&amp;amp;&amp;amp; exec,
-                                       ForwardIterator first,
-                                       ForwardIterator last); // (2)
+  void
+    uninitialized_default_construct(ExecutionPolicy&amp;amp;&amp;amp; exec,
+                                    ForwardIterator first,
+                                    ForwardIterator last); // (2) C++17
 }
 ```
 
@@ -110,3 +116,6 @@ int main()
 
 ## 参照
 - [P0040R3 Extending memory management tools](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0040r3.html)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+- [P3369R0 `constexpr` for `uninitialized_default_construct`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3369r0.html)
+    - 上記2文書で、C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_default_construct_n -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_default_construct_n.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/uninitialized_default_construct_n.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_default_construct_n.md b/reference/memory/uninitialized_default_construct_n.md
index c489c0e84..6797859c1 100644
--- a/reference/memory/uninitialized_default_construct_n.md
+++ b/reference/memory/uninitialized_default_construct_n.md
@@ -9,13 +9,17 @@ namespace std {
   template &amp;lt;class ForwardIterator, class Size&amp;gt;
   ForwardIterator
     uninitialized_default_construct_n(ForwardIterator first,
-                                      Size n); // (1)
+                                      Size n); // (1) C++17
+  template &amp;lt;class ForwardIterator, class Size&amp;gt;
+  constexpr ForwardIterator
+    uninitialized_default_construct_n(ForwardIterator first,
+                                      Size n); // (1) C++26
 
   template &amp;lt;class ExecutionPolicy, class ForwardIterator, class Size&amp;gt;
   ForwardIterator
     uninitialized_default_construct_n(ExecutionPolicy&amp;amp;&amp;amp; exec,
                                       ForwardIterator first,
-                                      Size n); // (2)
+                                      Size n); // (2) C++17
 }
 ```
 
@@ -110,3 +114,6 @@ int main()
 
 ## 参照
 - [P0040R3 Extending memory management tools](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0040r3.html)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+- [P3369R0 `constexpr` for `uninitialized_default_construct`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3369r0.html)
+    - 上記2文書で、C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_fill -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_fill.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/uninitialized_fill.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_fill.md b/reference/memory/uninitialized_fill.md
index ec93f3fb3..2d0d42871 100644
--- a/reference/memory/uninitialized_fill.md
+++ b/reference/memory/uninitialized_fill.md
@@ -6,15 +6,22 @@
 ```cpp
 namespace std {
   template &amp;lt;class ForwardIterator, class T&amp;gt;
-  void uninitialized_fill(ForwardIterator first,
-                          ForwardIterator last,
-                          const T&amp;amp; x);           // (1) C++03
+  void
+    uninitialized_fill(ForwardIterator first,
+                       ForwardIterator last,
+                       const T&amp;amp; x);           // (1) C++03
+  template &amp;lt;class ForwardIterator, class T&amp;gt;
+  constexpr void
+    uninitialized_fill(ForwardIterator first,
+                       ForwardIterator last,
+                       const T&amp;amp; x);           // (1) C++26
 
   template &amp;lt;class ExecutionPolicy, class ForwardIterator, class T&amp;gt;
-  void uninitialized_fill(ExecutionPolicy&amp;amp;&amp;amp; exec,
-                          ForwardIterator first,
-                          ForwardIterator last,
-                          const T&amp;amp; x);           // (2) C++17
+  void
+    uninitialized_fill(ExecutionPolicy&amp;amp;&amp;amp; exec,
+                       ForwardIterator first,
+                       ForwardIterator last,
+                       const T&amp;amp; x);           // (2) C++17
 }
 ```
 
@@ -102,3 +109,5 @@ int main()
 
 ## 参照
 - [LWG Issue 2433 `uninitialized_copy()`/etc. should tolerate overloaded `operator&amp;amp;`](https://wg21.cmeerw.net/lwg/issue2433)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_fill_n -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_fill_n.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/uninitialized_fill_n.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_fill_n.md b/reference/memory/uninitialized_fill_n.md
index 03dd5c848..4ca220cd2 100644
--- a/reference/memory/uninitialized_fill_n.md
+++ b/reference/memory/uninitialized_fill_n.md
@@ -10,6 +10,11 @@ namespace std {
     uninitialized_fill_n(ForwardIterator first,
                          Size n,
                          const T&amp;amp; x);           // (1) C++03
+  template &amp;lt;class ForwardIterator, class Size, class T&amp;gt;
+  constexpr ForwardIterator
+    uninitialized_fill_n(ForwardIterator first,
+                         Size n,
+                         const T&amp;amp; x);           // (1) C++26
 
   template &amp;lt;class ExecutionPolicy, class ForwardIterator, class Size, class T&amp;gt;
   ForwardIterator
@@ -104,3 +109,5 @@ int main()
 
 ## 参照
 - [LWG Issue 2433 `uninitialized_copy()`/etc. should tolerate overloaded `operator&amp;amp;`](https://wg21.cmeerw.net/lwg/issue2433)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_move -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_move.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/uninitialized_move.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_move.md b/reference/memory/uninitialized_move.md
index ac90325b3..c227b5f96 100644
--- a/reference/memory/uninitialized_move.md
+++ b/reference/memory/uninitialized_move.md
@@ -10,14 +10,19 @@ namespace std {
   ForwardIterator
     uninitialized_move(InputIterator first,
                        InputIterator last,
-                       ForwardIterator result); // (1)
+                       ForwardIterator result); // (1) C++17
+  template &amp;lt;class InputIterator, class ForwardIterator&amp;gt;
+  constexpr ForwardIterator
+    uninitialized_move(InputIterator first,
+                       InputIterator last,
+                       ForwardIterator result); // (1) C++26
 
   template &amp;lt;class ExecutionPolicy, class InputIterator, class ForwardIterator&amp;gt;
   ForwardIterator
     uninitialized_move(ExecutionPolicy&amp;amp;&amp;amp; exec,
                        InputIterator first,
                        InputIterator last,
-                       ForwardIterator result); // (2)
+                       ForwardIterator result); // (2) C++17
 }
 ```
 
@@ -114,3 +119,5 @@ int main()
 
 ## 参照
 - [P0040R3 Extending memory management tools](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0040r3.html)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_move_n -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_move_n.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/uninitialized_move_n.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_move_n.md b/reference/memory/uninitialized_move_n.md
index 174645b7d..5f24b9ac8 100644
--- a/reference/memory/uninitialized_move_n.md
+++ b/reference/memory/uninitialized_move_n.md
@@ -10,14 +10,19 @@ namespace std {
   pair&amp;lt;InputIterator, ForwardIterator&amp;gt;
     uninitialized_move_n(InputIterator first,
                          Size n,
-                         ForwardIterator result); // (1)
+                         ForwardIterator result); // (1) C++17
+  template &amp;lt;class InputIterator, class Size, class ForwardIterator&amp;gt;
+  constexpr pair&amp;lt;InputIterator, ForwardIterator&amp;gt;
+    uninitialized_move_n(InputIterator first,
+                         Size n,
+                         ForwardIterator result); // (1) C++26
 
   template &amp;lt;class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator&amp;gt;
   pair&amp;lt;InputIterator, ForwardIterator&amp;gt;
     uninitialized_move_n(ExecutionPolicy&amp;amp;&amp;amp; exec,
                          InputIterator first,
                          Size n,
-                         ForwardIterator result); // (2)
+                         ForwardIterator result); // (2) C++17
 }
 ```
 
@@ -115,3 +120,5 @@ int main()
 
 ## 参照
 - [P0040R3 Extending memory management tools](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0040r3.html)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_value_construct -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_value_construct.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/uninitialized_value_construct.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_value_construct.md b/reference/memory/uninitialized_value_construct.md
index e0d530b55..828ae8cb9 100644
--- a/reference/memory/uninitialized_value_construct.md
+++ b/reference/memory/uninitialized_value_construct.md
@@ -7,13 +7,19 @@
 ```cpp
 namespace std {
   template &amp;lt;class ForwardIterator&amp;gt;
-  void uninitialized_value_construct(ForwardIterator first,
-                                     ForwardIterator last); // (1)
+  void
+    uninitialized_value_construct(ForwardIterator first,
+                                  ForwardIterator last); // (1) C++17
+  template &amp;lt;class ForwardIterator&amp;gt;
+  constexpr void
+    uninitialized_value_construct(ForwardIterator first,
+                                  ForwardIterator last); // (1) C++26
 
   template &amp;lt;class ExecutionPolicy, class ForwardIterator&amp;gt;
-  void uninitialized_value_construct(ExecutionPolicy&amp;amp;&amp;amp; exec,
-                                     ForwardIterator first,
-                                     ForwardIterator last); // (2)
+  void
+    uninitialized_value_construct(ExecutionPolicy&amp;amp;&amp;amp; exec,
+                                  ForwardIterator first,
+                                  ForwardIterator last); // (2) C++17
 }
 ```
 
@@ -105,3 +111,5 @@ int main()
 
 ## 参照
 - [P0040R3 Extending memory management tools](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0040r3.html)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>uninitialized_value_construct_n -- C++26対応として、未初期化領域アルゴリズムをconstexpr対応 (close #1389)</title>
      <link href="https://cpprefjp.github.io/reference/memory/uninitialized_value_construct_n.html"/>
      <id>6f2372b6ebad86b8688436b1f0d39a213f0430d5:reference/memory/uninitialized_value_construct_n.md</id>
      <updated>2024-12-20T17:06:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/uninitialized_value_construct_n.md b/reference/memory/uninitialized_value_construct_n.md
index 2dc93acf2..3c0dd5590 100644
--- a/reference/memory/uninitialized_value_construct_n.md
+++ b/reference/memory/uninitialized_value_construct_n.md
@@ -9,13 +9,17 @@ namespace std {
   template &amp;lt;class ForwardIterator, class Size&amp;gt;
   ForwardIterator
     uninitialized_value_construct_n(ForwardIterator first,
-                                    Size n); // (1)
+                                    Size n); // (1) C++17
+  template &amp;lt;class ForwardIterator, class Size&amp;gt;
+  constexpr ForwardIterator
+    uninitialized_value_construct_n(ForwardIterator first,
+                                    Size n); // (1) C++26
 
   template &amp;lt;class ExecutionPolicy, class ForwardIterator, class Size&amp;gt;
   ForwardIterator
     uninitialized_value_construct_n(ExecutionPolicy&amp;amp;&amp;amp; exec,
                                     ForwardIterator first,
-                                    Size n); // (2)
+                                    Size n); // (2) C++17
 }
 ```
 
@@ -105,3 +109,5 @@ int main()
 
 ## 参照
 - [P0040R3 Extending memory management tools](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0040r3.html)
+- [P3508R0 Wording for &amp;#34;constexpr for specialized memory algorithms&amp;#34;](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3508r0.html)
+    - C++26から`constexpr`がついた
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>philox_engine -- philox_engine : インデントを4 → 2スペースに修正</title>
      <link href="https://cpprefjp.github.io/reference/random/philox_engine.html"/>
      <id>a628ac49c4338523b830934d5d40d21dc591b139:reference/random/philox_engine.md</id>
      <updated>2024-12-20T16:35:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox_engine.md b/reference/random/philox_engine.md
index 4fa2ae4b5..e664d1dc1 100644
--- a/reference/random/philox_engine.md
+++ b/reference/random/philox_engine.md
@@ -224,9 +224,9 @@ int main()
         std::uniform_real_distribution&amp;lt;float&amp;gt; dist{0, 1.0};
 
         Vector vec {
-            dist(engine),
-            dist(engine),
-            dist(engine)
+          dist(engine),
+          dist(engine),
+          dist(engine)
         };
         std::println(&amp;#34;{},{},{}&amp;#34;, vec.x, vec.y, vec.z);
       }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_counter -- philox_engine : インデントを4 → 2スペースに修正</title>
      <link href="https://cpprefjp.github.io/reference/random/philox_engine/set_counter.html"/>
      <id>a628ac49c4338523b830934d5d40d21dc591b139:reference/random/philox_engine/set_counter.md</id>
      <updated>2024-12-20T16:35:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox_engine/set_counter.md b/reference/random/philox_engine/set_counter.md
index ab3a5d976..ac662971a 100644
--- a/reference/random/philox_engine/set_counter.md
+++ b/reference/random/philox_engine/set_counter.md
@@ -27,14 +27,14 @@ void set_counter(const array&amp;lt;result_type, n&amp;gt;&amp;amp; c); // (1) C++26
 ```cpp
 uint32_t global_seed = 999;
 for (uint32_t time_step = 0; time_step &amp;lt; time_steps_num; ++time_step) {
-    for (uint32_t atom_id = 0; atom_id &amp;lt; atoms_num; ++atom_id) {
-        philox4x32 eng(global_seed);
-        eng.set_counter({atom_id, time_step, 0, 0});
-        normal_distribution&amp;lt;&amp;gt; nd;
-        auto n1 = nd(eng);
-        auto n2 = nd(eng);
-        // …
-    }
+  for (uint32_t atom_id = 0; atom_id &amp;lt; atoms_num; ++atom_id) {
+    philox4x32 eng(global_seed);
+    eng.set_counter({atom_id, time_step, 0, 0});
+    normal_distribution&amp;lt;&amp;gt; nd;
+    auto n1 = nd(eng);
+    auto n2 = nd(eng);
+    // …
+  }
 }
 ```
 * uint32_t[link /reference/cstdint/uint32_t.md]
@@ -87,9 +87,9 @@ int main()
         std::uniform_real_distribution&amp;lt;float&amp;gt; dist{0, 1.0};
 
         Vector vec {
-            dist(engine),
-            dist(engine),
-            dist(engine)
+          dist(engine),
+          dist(engine),
+          dist(engine)
         };
         std::println(&amp;#34;{},{},{}&amp;#34;, vec.x, vec.y, vec.z);
       }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>処理系 -- implementation.mdにVisual Studio 2022 version 17.12.3の情報を追記</title>
      <link href="https://cpprefjp.github.io/implementation.html"/>
      <id>cafe5303b8bff55772ea0cec664ef4f3ec2a7de8:implementation.md</id>
      <updated>2024-12-20T16:14:41+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;処理系&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#clang&#34;&gt;Clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gcc&#34;&gt;GNU Compiler Collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#icc&#34;&gt;Intel C++ Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visual_cpp&#34;&gt;Microsoft Visual C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;本サイトにおける処理系バージョンに記載&lt;/h2&gt;
&lt;p&gt;本サイトのリファレンスページでは、「処理系」の項目にバージョン番号を記載している。これは、処理系がその機能をサポート開始した厳密なバージョンではなく、リファレンス執筆者が動作確認できたバージョンである。&lt;/p&gt;
&lt;p&gt;古くからサポートされている機能だが、古い処理系を入手することが難しい場合などがあるため、本サイトではこのようなルールになっている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;#clang&#34; id=&#34;clang&#34;&gt;Clang&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは Clang と呼ぶ。「クラン(グ)」と読む。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://clang.llvm.org/&#34; target=&#34;_blank&#34;&gt;&#34;clang&#34; C Language Family Frontend for LLVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;clang&lt;/li&gt;
&lt;li&gt;clang++&lt;/li&gt;
&lt;li&gt;Apple LLVMコンパイラ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-std=c++11&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clang 3.2から3.4までは、&lt;code&gt;-std=c++1y&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1y&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 3.5以降は、&lt;code&gt;-std=c++14&lt;/code&gt;オプションを使用する(以前までのオプションも使用できる)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++14&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 6.0以降は、C++14がデフォルトとなる。デフォルトバージョンのコンパイルオプションは&lt;code&gt;-std=gnu++14&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clang 3.5から4.0までは、&lt;code&gt;-std=c++1z&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1z&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 5.0以降は、&lt;code&gt;-std=c++17&lt;/code&gt;オプションを使用する(以前までのオプションも使用できる)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++17&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 16.0以降はC++17がデフォルトとなる。デフォルトバージョンのコンパイルオプションは&lt;code&gt;-std=gnu++17&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++20の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clang 6.0以降は、&lt;code&gt;-std=c++2a&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++2a&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 11.0以降は、&lt;code&gt;-std=c++20&lt;/code&gt;オプションを使用する(以前までのオプションも使用できる)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++20&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++23の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clang 12.0以降は、&lt;code&gt;-std=c++2b&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++2b&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clang 17.0以降は、&lt;code&gt;-std=c++23&lt;/code&gt;オプションを使用する(以前までのオプションも使用できる)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++23&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++26の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clang 17.0以降は、&lt;code&gt;-std=c++2c&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++2c&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#gcc&#34; id=&#34;gcc&#34;&gt;GNU Compiler Collection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは GCC と呼ぶ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34; target=&#34;_blank&#34;&gt;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mingw-w64.org/&#34; target=&#34;_blank&#34;&gt;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.equation.com/servlet/equation.cmd?fa=fortran&#34; target=&#34;_blank&#34;&gt;Fortran, C, C++ for Windows&lt;/a&gt; (MinGW バイナリ)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;gcc&lt;/li&gt;
&lt;li&gt;g++&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.3から4.6までは、&lt;code&gt;-std=c++0x&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++0x&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 4.7以降は、&lt;code&gt;-std=c++11&lt;/code&gt;オプションを使用する (旧オプションは非推奨)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++11&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 4.8から4.9までは、&lt;code&gt;-std=c++1y&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1y&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 5.1以降は、&lt;code&gt;-std=c++14&lt;/code&gt;オプションを使用する (旧オプションは非推奨)。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++14&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 6.1以降は、C++14がデフォルトとなる。デフォルトバージョンのコンパイルオプションは&lt;code&gt;-std=gnu++14&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 6.1以降は、&lt;code&gt;-std=c++1z&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++1z&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 7.1以降は、&lt;code&gt;-std=c++17&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++17&lt;/code&gt;オプションもある (旧オプションは非推奨)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 11.1以降は、C++17がデフォルトとなる。デフォルトバージョンのコンパイルオプションは&lt;code&gt;-std=gnu++17&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++20の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 8.1以降は、&lt;code&gt;-std=c++2a&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++2a&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCC 10.1以降は、&lt;code&gt;-std=c++20&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++20&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++23の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GCC 11.1以降は、&lt;code&gt;-std=c++23&lt;/code&gt;オプションもしくは仮称バージョンの&lt;code&gt;-std=c++2b&lt;/code&gt;オプションを使用する。&lt;ul&gt;
&lt;li&gt;GNU拡張を有効にする&lt;code&gt;-std=gnu++23&lt;/code&gt;および&lt;code&gt;-std=gnu++2b&lt;/code&gt;オプションもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#icc&#34; id=&#34;icc&#34;&gt;Intel C++ Compiler&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは ICC と呼ぶ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xlsoft.com/jp/products/intel/compilers/ccl/index.html?tab=0&#34; target=&#34;_blank&#34;&gt;XLsoft エクセルソフト : インテル C++ Composer XE Linux 版/インテル C++ コンパイラー XE Linux 版 製品紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xlsoft.com/jp/products/intel/compilers/ccl/index.html?tab=0&#34; target=&#34;_blank&#34;&gt;XLsoft エクセルソフト : インテル C++ Composer XE Mac OS 版/インテル C++ コンパイラー XE Mac OS 版 製品紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xlsoft.com/jp/products/intel/compilers/ccw/index.html?tab=0&#34; target=&#34;_blank&#34;&gt;XLsoft エクセルソフト : インテル C++ Composer XE Windows 版/インテル C++ コンパイラー XE Windows 版 製品紹介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ICC&lt;/li&gt;
&lt;li&gt;ICL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Windowsでは&lt;code&gt;/Qstd:c++11&lt;/code&gt;、Linux/macOSでは&lt;code&gt;-std=c++11&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ICC 16.0からは、Windowsでは&lt;code&gt;/Qstd:c++14&lt;/code&gt;オプション、Linux/macOSでは&lt;code&gt;-std=c++14&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ICC 17.0からは、Windowsでは&lt;code&gt;/Qstd:c++17&lt;/code&gt;オプション、Linux/macOSでは&lt;code&gt;-std=c++17&lt;/code&gt;オプションを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;#visual_cpp&#34; id=&#34;visual_cpp&#34;&gt;Microsoft Visual C++&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;このサイトでは Visual C++ と呼ぶ。Visual Studio 2012 以降、Visual C++は独立した製品名ではなくなり製品Visual Studioのみに含まれるようになったが、当サイトでは製品に含まれているコンポーネント名としてのVisual C++を採用する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/ja-jp/visual-studio-homepage-vs.aspx&#34; target=&#34;_blank&#34;&gt;Visual Studio - Microsoft Developer Tools&lt;/a&gt;: Visual C++を含む統合開発環境。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/ja/downloads/&#34; target=&#34;_blank&#34;&gt;Build Tools for Visual Studio&lt;/a&gt;: コマンドラインのみからコンパイルするために必要な環境を構築するもの。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;別名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VC&lt;/li&gt;
&lt;li&gt;VC++&lt;/li&gt;
&lt;li&gt;MSVC&lt;/li&gt;
&lt;li&gt;cl&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;#visual_cpp_ver&#34; id=&#34;visual_cpp_ver&#34;&gt;バージョンの表記&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下に当サイトにおけるバージョン表記と、製品・バージョン等の対応を示す。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表記&lt;/th&gt;
&lt;th&gt;製品名 [Visual Studio バージョン] &lt;sup&gt;&lt;a href=&#34;#note-t1-1&#34; id=&#34;note_ref-t1-1&#34;&gt;†1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;VC++ バージョン &lt;sup&gt;&lt;a href=&#34;#note-t1-2&#34; id=&#34;note_ref-t1-2&#34;&gt;†2&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;_MSC_VER&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;_MSC_FULL_VER&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 12&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.12.3&lt;/td&gt;
&lt;td&gt;14.42&lt;/td&gt;
&lt;td&gt;1942&lt;/td&gt;
&lt;td&gt;194234435&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 11&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.11.0&lt;/td&gt;
&lt;td&gt;14.41&lt;/td&gt;
&lt;td&gt;1941&lt;/td&gt;
&lt;td&gt;194134120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 10&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.10.5&lt;/td&gt;
&lt;td&gt;14.40&lt;/td&gt;
&lt;td&gt;1939&lt;/td&gt;
&lt;td&gt;194033811&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.9.2&lt;/td&gt;
&lt;td&gt;14.39&lt;/td&gt;
&lt;td&gt;1939&lt;/td&gt;
&lt;td&gt;193933521&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 8&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.8.3&lt;/td&gt;
&lt;td&gt;14.38&lt;/td&gt;
&lt;td&gt;1938&lt;/td&gt;
&lt;td&gt;193833133&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.7.0&lt;/td&gt;
&lt;td&gt;14.37&lt;/td&gt;
&lt;td&gt;1937&lt;/td&gt;
&lt;td&gt;193732822&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.6.2&lt;/td&gt;
&lt;td&gt;14.36&lt;/td&gt;
&lt;td&gt;1936&lt;/td&gt;
&lt;td&gt;193632532&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.5.4&lt;/td&gt;
&lt;td&gt;??&lt;/td&gt;
&lt;td&gt;1935&lt;/td&gt;
&lt;td&gt;193532217&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.4.9&lt;/td&gt;
&lt;td&gt;??&lt;/td&gt;
&lt;td&gt;1934&lt;/td&gt;
&lt;td&gt;193431944&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.3.6&lt;/td&gt;
&lt;td&gt;14.33&lt;/td&gt;
&lt;td&gt;1933&lt;/td&gt;
&lt;td&gt;193331630&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.2.2&lt;/td&gt;
&lt;td&gt;14.32&lt;/td&gt;
&lt;td&gt;1932&lt;/td&gt;
&lt;td&gt;193231329&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022 Update 1&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.0.2&lt;/td&gt;
&lt;td&gt;14.30&lt;/td&gt;
&lt;td&gt;1930&lt;/td&gt;
&lt;td&gt;193030706&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;td&gt;Visual Studio 2022 version 17.0.1&lt;/td&gt;
&lt;td&gt;14.30&lt;/td&gt;
&lt;td&gt;1930&lt;/td&gt;
&lt;td&gt;193030705&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 11&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.11.2&lt;/td&gt;
&lt;td&gt;14.28&lt;/td&gt;
&lt;td&gt;1929&lt;/td&gt;
&lt;td&gt;192930133&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.9.2&lt;/td&gt;
&lt;td&gt;14.28&lt;/td&gt;
&lt;td&gt;1928&lt;/td&gt;
&lt;td&gt;192829913&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.8.2&lt;/td&gt;
&lt;td&gt;14.28&lt;/td&gt;
&lt;td&gt;1928&lt;/td&gt;
&lt;td&gt;192829334&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 8&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.8.1&lt;/td&gt;
&lt;td&gt;14.28&lt;/td&gt;
&lt;td&gt;1928&lt;/td&gt;
&lt;td&gt;192829333&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.7&lt;/td&gt;
&lt;td&gt;14.27&lt;/td&gt;
&lt;td&gt;1927&lt;/td&gt;
&lt;td&gt;192729112&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.6.2&lt;/td&gt;
&lt;td&gt;14.26&lt;/td&gt;
&lt;td&gt;1926&lt;/td&gt;
&lt;td&gt;192628806&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.5.1&lt;/td&gt;
&lt;td&gt;14.25&lt;/td&gt;
&lt;td&gt;1925&lt;/td&gt;
&lt;td&gt;192528611&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.4.0&lt;/td&gt;
&lt;td&gt;14.24&lt;/td&gt;
&lt;td&gt;1924&lt;/td&gt;
&lt;td&gt;192428314&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.3.2&lt;/td&gt;
&lt;td&gt;14.23&lt;/td&gt;
&lt;td&gt;1923&lt;/td&gt;
&lt;td&gt;192328105&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.2.3&lt;/td&gt;
&lt;td&gt;14.22&lt;/td&gt;
&lt;td&gt;1922&lt;/td&gt;
&lt;td&gt;192227905&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019 Update 1&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.1.2&lt;/td&gt;
&lt;td&gt;14.21&lt;/td&gt;
&lt;td&gt;1921&lt;/td&gt;
&lt;td&gt;192127702&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;td&gt;Visual Studio 2019 バージョン 16.0.0&lt;/td&gt;
&lt;td&gt;14.20&lt;/td&gt;
&lt;td&gt;1920&lt;/td&gt;
&lt;td&gt;192027508&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.11&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;191627030&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.7&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;191627027&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.5&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;191627026&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.4&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;191627025&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.1&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;191627023&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 9&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.9.0&lt;/td&gt;
&lt;td&gt;14.16&lt;/td&gt;
&lt;td&gt;1916&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 8&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.8.0&lt;/td&gt;
&lt;td&gt;14.15&lt;/td&gt;
&lt;td&gt;1915&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.7.5&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;1914&lt;/td&gt;
&lt;td&gt;191426433&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.7.3&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;1914&lt;/td&gt;
&lt;td&gt;191426430&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.7.2&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;1914&lt;/td&gt;
&lt;td&gt;191426429&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 7&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.7.1&lt;/td&gt;
&lt;td&gt;14.14&lt;/td&gt;
&lt;td&gt;1914&lt;/td&gt;
&lt;td&gt;191426428&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.7&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326132&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.6&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326131&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.4&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326129&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.3&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326129&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.2&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.1&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 6&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.6.0&lt;/td&gt;
&lt;td&gt;14.13&lt;/td&gt;
&lt;td&gt;1913&lt;/td&gt;
&lt;td&gt;191326128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.7&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225835&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.6&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225835&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.4&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225834&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.3&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225834&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.5.2&lt;/td&gt;
&lt;td&gt;14.12&lt;/td&gt;
&lt;td&gt;1912&lt;/td&gt;
&lt;td&gt;191225831&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.4.5&lt;/td&gt;
&lt;td&gt;14.11&lt;/td&gt;
&lt;td&gt;1911&lt;/td&gt;
&lt;td&gt;191125547&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.4.4&lt;/td&gt;
&lt;td&gt;14.11&lt;/td&gt;
&lt;td&gt;1911&lt;/td&gt;
&lt;td&gt;191125542&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.3.3&lt;/td&gt;
&lt;td&gt;14.11&lt;/td&gt;
&lt;td&gt;1911&lt;/td&gt;
&lt;td&gt;191125507&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 2 &lt;sup&gt;&lt;a href=&#34;#note-t1-3&#34; id=&#34;note_ref-t1-3-a&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.2&lt;/td&gt;
&lt;td&gt;14.10&lt;/td&gt;
&lt;td&gt;1910&lt;/td&gt;
&lt;td&gt;191025017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017 Update 1 &lt;sup&gt;&lt;a href=&#34;#note-t1-3&#34; id=&#34;note_ref-t1-3-b&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.1&lt;/td&gt;
&lt;td&gt;14.10&lt;/td&gt;
&lt;td&gt;1910&lt;/td&gt;
&lt;td&gt;191025017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;Visual Studio 2017 バージョン 15.0&lt;/td&gt;
&lt;td&gt;14.10 &lt;sup&gt;&lt;a href=&#34;#note-t1-4&#34; id=&#34;note_ref-t1-4&#34;&gt;†4&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;1910&lt;/td&gt;
&lt;td&gt;191025017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2015 Update 3 [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190024210&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2015 Update 2 [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190023918&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015 Update 1&lt;/td&gt;
&lt;td&gt;Visual Studio 2015 Update 1 [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190023506&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;Visual Studio 2015          [14.0]&lt;/td&gt;
&lt;td&gt;14.0&lt;/td&gt;
&lt;td&gt;1900&lt;/td&gt;
&lt;td&gt;190023026&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 5&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 5 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180040629&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 4 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180031101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 3 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180030723&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 2 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180030501&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013 Update 1 &lt;sup&gt;&lt;a href=&#34;#note-t1-3&#34; id=&#34;note_ref-t1-3-c&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 2013 Update 1 [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180021005&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;Visual Studio 2013          [12.0]&lt;/td&gt;
&lt;td&gt;12.0&lt;/td&gt;
&lt;td&gt;1800&lt;/td&gt;
&lt;td&gt;180021005&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 4&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 4 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170061030&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 3&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 3 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170060610&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 2&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 2 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170060315&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012 Update 1&lt;/td&gt;
&lt;td&gt;Visual Studio 2012 Update 1 [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170051106&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;td&gt;Visual Studio 2012          [11.0]&lt;/td&gt;
&lt;td&gt;11.0&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;170050727&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2010 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio 2010 SP1      [10.0]&lt;br /&gt;Visual C++ 2010 SP1     [10.0]&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;td&gt;160040219&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;td&gt;Visual Studio 2010          [10.0]&lt;br /&gt;Visual C++ 2010         [10.0]&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;1600&lt;/td&gt;
&lt;td&gt;160030319&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2008 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio 2008 SP1      [9.0] &lt;br /&gt;Visual C++ 2008 SP1     [9.0]&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;150030729&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2008&lt;/td&gt;
&lt;td&gt;Visual Studio 2008          [9.0] &lt;br /&gt;Visual C++ 2008         [9.0]&lt;/td&gt;
&lt;td&gt;9.0&lt;/td&gt;
&lt;td&gt;1500&lt;/td&gt;
&lt;td&gt;150021022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2005 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio 2005 SP1      [8.0] &lt;br /&gt;Visual C++ 2005 SP1     [8.0]&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;td&gt;140050727&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;td&gt;Visual Studio 2005          [8.0] &lt;br /&gt;Visual C++ 2005         [8.0]&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;td&gt;140050320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows Server 2003 SP1 DDK (for AMD64)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1400&lt;/td&gt;
&lt;td&gt;140040310&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2003 SP1&lt;/td&gt;
&lt;td&gt;Visual Studio .NET 2003 SP1 [7.1]&lt;br /&gt;Visual C++ .NET 2003 SP1 [7.1]&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13106030&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows Server 2003 SP1 DDK&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13104035&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2003&lt;/td&gt;
&lt;td&gt;Visual Studio .NET 2003     [7.1]&lt;br /&gt;Visual C++ .NET 2003     [7.1]&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13103077&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio Toolkit 2003  [7.1]&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13103052&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows Server 2003 DDK&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1310&lt;/td&gt;
&lt;td&gt;13102179&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2002&lt;/td&gt;
&lt;td&gt;Visual Studio .NET 2002     [7.0]&lt;br /&gt;Visual C++ .NET 2002     [7.0]&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;td&gt;13009466&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Windows XP SP1 DDK&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;td&gt;13009176&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.0 SP6&lt;/td&gt;
&lt;td&gt;Visual Studio 6.0 SP6&lt;br /&gt;Visual C++ 6.0 SP6&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;1200&lt;/td&gt;
&lt;td&gt;12008804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.0 SP5&lt;/td&gt;
&lt;td&gt;Visual Studio 6.0 SP5&lt;br /&gt;Visual C++ 6.0 SP5&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;1200&lt;/td&gt;
&lt;td&gt;12008804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual Studio 97 [5.0]&lt;br /&gt;Visual C++ 5.0&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 4.2&lt;/td&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;1020&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 4.1&lt;/td&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;td&gt;1010&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 4.0&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 2.0&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Visual C++ 1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Microsoft C/C++ 7.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Microsoft C 6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#note_ref-t1-1&#34; id=&#34;note-t1-1&#34;&gt;^&lt;/a&gt;&lt;/strong&gt; 製品名の列にはVisual C++コンパイラを含む実際に入手する製品の名称を示す。製品のエディション (Express/Standard/Professional/Enterprise/Community 他) は省略する。Visual Studioの製品バージョンは、製品名に現れていないときは &lt;code&gt;[ ～ ]&lt;/code&gt; 内に記す。製品バージョンは、2017以降、メインメニューの [ヘルプ]-[Microsoft Visual Studio のバージョン情報] から確認できるものを指す。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;#note_ref-t1-2&#34; id=&#34;note-t1-2&#34;&gt;^&lt;/a&gt;&lt;/strong&gt; VC++バージョンの列にはVisual C++ツールセットのバージョンを記述する。この表では特にVisual C++を入れた時に既定で選択されるツールセットのみについて扱う。Visual Studio 2022においては&lt;code&gt;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC&lt;/code&gt;配下のフォルダ名(&lt;code&gt;14.39.33519&lt;/code&gt;など)で確認できる。&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;note-t1-3&#34;&gt;^&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;#note_ref-t1-3-a&#34;&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;&lt;a href=&#34;#note_ref-t1-3-b&#34;&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;&lt;a href=&#34;#note_ref-t1-3-c&#34;&gt;&lt;strong&gt;c&lt;/strong&gt;&lt;/a&gt;&lt;/sup&gt; IDEのみ修正され、コンパイラ、ヘッダー、ライブラリ等は変更されなかった。&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2017/08/11/c17-features-and-stl-fixes-in-vs-2017-15-3/&#34; target=&#34;_blank&#34;&gt;C++17 Features And STL Fixes In VS 2017 15.3 | Visual C++ Team Blog&lt;/a&gt; - &#34;&lt;em&gt;After VS 2017 RTM, the 15.1 and 15.2 updates improved the IDE. The 15.3 update improves both the IDE and the toolset.&lt;/em&gt;&#34;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/en-us/help/2911573/description-of-visual-studio-2013-update-1&#34; target=&#34;_blank&#34;&gt;Description of Visual Studio 2013 Update 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;#note_ref-t1-4&#34; id=&#34;note-t1-4&#34;&gt;^&lt;/a&gt;&lt;/strong&gt; 2017は2015とバイナリ互換が保たれているためメジャーバージョンアップは行われなかった。その結果、製品バージョンとVisual C++バージョンが一致しなくなった。
  &lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2017/03/07/binary-compatibility-and-pain-free-upgrade-why-moving-to-visual-studio-2017-is-almost-too-easy/&#34; target=&#34;_blank&#34;&gt;Binary Compatibility and Pain-free Upgrade: Why Moving to Visual Studio 2017 is almost “too easy”&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2015以降、Visual Studioの既定のインストールではVisual C++は入らなくなった。Visual StudioのインストーラでVisual C++コンポーネントを選択する必要がある。
  &lt;a href=&#34;https://docs.microsoft.com/ja-JP/previous-versions/60k1461a(v=vs.140)?redirectedfrom=MSDN&#34; target=&#34;_blank&#34;&gt;Visual Studio 2015 の Visual C++&lt;/a&gt; の [警告] を参照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;2017 Update 5からside-by-sideがサポートされ、一つの製品内で同時に複数のVisual C++ツールセットを選択できるようになった。
  &lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2017/11/15/side-by-side-minor-version-msvc-toolsets-in-visual-studio-2017/&#34; target=&#34;_blank&#34;&gt;Side-by-side minor version MSVC toolsets in Visual Studio 2017 | Visual C++ Team Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;C++11の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11は常に有効である&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++14の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++14は常に有効である&lt;/li&gt;
&lt;li&gt;2015 Update 3から&lt;code&gt;/std:c++14&lt;/code&gt;オプションが導入されたが既定値でありC++14を無効化する機能は提供されていない。&lt;code&gt;_MSVC_LANG&lt;/code&gt;マクロの値は&lt;code&gt;201402&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++17の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2015 Update 2以前に実装された機能については、互換性の観点から常に有効である&lt;/li&gt;
&lt;li&gt;2015 Update 3以降に実装された機能については、&lt;code&gt;/std:c++17&lt;/code&gt;オプションを使用する。&lt;code&gt;_MSVC_LANG&lt;/code&gt;マクロの値は&lt;code&gt;201703&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C++20の機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2019以降に実装された機能については、&lt;code&gt;/std:c++latest&lt;/code&gt;オプションを使用する&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;最新バージョンの言語機能を有効にする&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2015 Update 3以降は&lt;code&gt;/std:c++latest&lt;/code&gt;オプションを使用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/build/reference/std-specify-language-standard-version&#34; target=&#34;_blank&#34;&gt;-std (Specify Language Standard Version) | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros&#34; target=&#34;_blank&#34;&gt;Predefined Macros | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/vcblog/2016/06/07/standards-version-switches-in-the-compiler/&#34; target=&#34;_blank&#34;&gt;Standards version switches in the compiler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Yuhki Ogasawara</name>
        <email>y121516@gmail.com</email>
      </author>
    </entry>
  
</feed>
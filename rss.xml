<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-05-31T14:54:23.796959</updated>
  <id>c4d618d4-eece-46ae-8110-3652b343cd26</id>

  
    <entry>
      <title>find_last_not_of -- Merge pull request #872 from pit-ray/master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_not_of.html"/>
      <id>55e77f59ad6e052dc31863ff25492160148948c1:reference/string/basic_string/find_last_not_of.md</id>
      <updated>2021-05-31T10:56:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_not_of.md b/reference/string/basic_string/find_last_not_of.md
index 97c39b8d8..58bf19fbc 100644
--- a/reference/string/basic_string/find_last_not_of.md
+++ b/reference/string/basic_string/find_last_not_of.md
@@ -32,10 +32,10 @@ size_type find_last_not_of(const T&amp;amp; t, size_type pos = npos) const noexcept(see
 
 
 ## 効果
-- (1) `pos` より前で最後に `str` 内に存在しない文字の位置を返す。
-- (2) `pos` より前で最後に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (1) `pos` 以前で最後に `str` 内に存在しない文字の位置を返す。
+- (2) `pos` 以前で最後に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` より前で最後に `c` と一致しない文字の位置を返す。
+- (4) `pos` 以前で最後に `c` と一致しない文字の位置を返す。
 - (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在しない文字の位置を返す。
 
 
@@ -71,13 +71,13 @@ int main()
   const std::string s(&amp;#34;Hello, world. Welcome to C++ world.&amp;#34;);
   const std::string str(&amp;#34;world&amp;#34;);
 
-  // 1 つめの &amp;#34;world&amp;#34; の &amp;#34;d&amp;#34; より前で &amp;#34;world&amp;#34; を検索すると、最初の空白が見つかる
+  // 1 つめの &amp;#34;world&amp;#34; の &amp;#34;d&amp;#34; 以前で &amp;#34;world&amp;#34; を検索すると、最初の空白が見つかる
   std::cout &amp;lt;&amp;lt; s.find_last_not_of(str, 11) &amp;lt;&amp;lt; std::endl;
 
   // &amp;#34;Welcome to C++ world.&amp;#34; を検索すると、&amp;#34;,&amp;#34; が見つかる
   std::cout &amp;lt;&amp;lt; s.find_last_not_of(&amp;#34;Welcome to C++ world.&amp;#34;) &amp;lt;&amp;lt; std::endl;
 
-  // &amp;#34;C++&amp;#34; の 2 つめの &amp;#34;+&amp;#34; より前で &amp;#39;+&amp;#39; を検索すると &amp;#34;C&amp;#34; が見つかる
+  // &amp;#34;C++&amp;#34; の 2 つめの &amp;#34;+&amp;#34; 以前で &amp;#39;+&amp;#39; を検索すると &amp;#34;C&amp;#34; が見つかる
   std::cout &amp;lt;&amp;lt; s.find_last_not_of(&amp;#39;+&amp;#39;, 27) &amp;lt;&amp;lt; std::endl;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_of -- Merge pull request #872 from pit-ray/master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_of.html"/>
      <id>55e77f59ad6e052dc31863ff25492160148948c1:reference/string/basic_string/find_last_of.md</id>
      <updated>2021-05-31T10:56:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_of.md b/reference/string/basic_string/find_last_of.md
index 417a5ef65..7c520f9f1 100644
--- a/reference/string/basic_string/find_last_of.md
+++ b/reference/string/basic_string/find_last_of.md
@@ -32,10 +32,10 @@ size_type find_last_of(const T&amp;amp; t, size_type pos = npos) const noexcept(see belo
 
 
 ## 効果
-- (1) `pos` より前で最後に `str` 内に存在する文字の位置を返す。
-- (2) `pos` より前で最後に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (1) `pos` 以前で最後に `str` 内に存在する文字の位置を返す。
+- (2) `pos` 以前で最後に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` より前で最後に `c` と一致する文字の位置を返す。
+- (4) `pos` 以前で最後に `c` と一致する文字の位置を返す。
 - (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在する文字の位置を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rfind -- Merge pull request #872 from pit-ray/master</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/rfind.html"/>
      <id>55e77f59ad6e052dc31863ff25492160148948c1:reference/string/basic_string/rfind.md</id>
      <updated>2021-05-31T10:56:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/rfind.md b/reference/string/basic_string/rfind.md
index ec2dcbfc9..20632d4c6 100644
--- a/reference/string/basic_string/rfind.md
+++ b/reference/string/basic_string/rfind.md
@@ -31,10 +31,10 @@ size_type rfind(const T&amp;amp; t, size_type pos = npos) const noexcept(see below);   /
 
 
 ## 効果
-- (1) `pos` より前で最後に `str` と一致する位置を返す。
-- (2) `pos` より前で最後に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (1) `pos` 以前で最後に `str` と一致する位置を返す。
+- (2) `pos` 以前で最後に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` より前で最後に `c` と一致する位置を返す。
+- (4) `pos` 以前で最後に `c` と一致する位置を返す。
 - (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` と一致する位置を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_not_of -- 対象を含む「より前」を「以前」に修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_not_of.html"/>
      <id>9f4cacdca6b51520cba739ba99bb5113d127104a:reference/string/basic_string/find_last_not_of.md</id>
      <updated>2021-05-30T21:22:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_not_of.md b/reference/string/basic_string/find_last_not_of.md
index 97c39b8d8..58bf19fbc 100644
--- a/reference/string/basic_string/find_last_not_of.md
+++ b/reference/string/basic_string/find_last_not_of.md
@@ -32,10 +32,10 @@ size_type find_last_not_of(const T&amp;amp; t, size_type pos = npos) const noexcept(see
 
 
 ## 効果
-- (1) `pos` より前で最後に `str` 内に存在しない文字の位置を返す。
-- (2) `pos` より前で最後に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (1) `pos` 以前で最後に `str` 内に存在しない文字の位置を返す。
+- (2) `pos` 以前で最後に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` より前で最後に `c` と一致しない文字の位置を返す。
+- (4) `pos` 以前で最後に `c` と一致しない文字の位置を返す。
 - (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在しない文字の位置を返す。
 
 
@@ -71,13 +71,13 @@ int main()
   const std::string s(&amp;#34;Hello, world. Welcome to C++ world.&amp;#34;);
   const std::string str(&amp;#34;world&amp;#34;);
 
-  // 1 つめの &amp;#34;world&amp;#34; の &amp;#34;d&amp;#34; より前で &amp;#34;world&amp;#34; を検索すると、最初の空白が見つかる
+  // 1 つめの &amp;#34;world&amp;#34; の &amp;#34;d&amp;#34; 以前で &amp;#34;world&amp;#34; を検索すると、最初の空白が見つかる
   std::cout &amp;lt;&amp;lt; s.find_last_not_of(str, 11) &amp;lt;&amp;lt; std::endl;
 
   // &amp;#34;Welcome to C++ world.&amp;#34; を検索すると、&amp;#34;,&amp;#34; が見つかる
   std::cout &amp;lt;&amp;lt; s.find_last_not_of(&amp;#34;Welcome to C++ world.&amp;#34;) &amp;lt;&amp;lt; std::endl;
 
-  // &amp;#34;C++&amp;#34; の 2 つめの &amp;#34;+&amp;#34; より前で &amp;#39;+&amp;#39; を検索すると &amp;#34;C&amp;#34; が見つかる
+  // &amp;#34;C++&amp;#34; の 2 つめの &amp;#34;+&amp;#34; 以前で &amp;#39;+&amp;#39; を検索すると &amp;#34;C&amp;#34; が見つかる
   std::cout &amp;lt;&amp;lt; s.find_last_not_of(&amp;#39;+&amp;#39;, 27) &amp;lt;&amp;lt; std::endl;
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>pit-ray</name>
        <email>pit-ray@outlook.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_of -- 対象を含む「より前」を「以前」に修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_of.html"/>
      <id>9f4cacdca6b51520cba739ba99bb5113d127104a:reference/string/basic_string/find_last_of.md</id>
      <updated>2021-05-30T21:22:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_of.md b/reference/string/basic_string/find_last_of.md
index 417a5ef65..7c520f9f1 100644
--- a/reference/string/basic_string/find_last_of.md
+++ b/reference/string/basic_string/find_last_of.md
@@ -32,10 +32,10 @@ size_type find_last_of(const T&amp;amp; t, size_type pos = npos) const noexcept(see belo
 
 
 ## 効果
-- (1) `pos` より前で最後に `str` 内に存在する文字の位置を返す。
-- (2) `pos` より前で最後に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (1) `pos` 以前で最後に `str` 内に存在する文字の位置を返す。
+- (2) `pos` 以前で最後に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` より前で最後に `c` と一致する文字の位置を返す。
+- (4) `pos` 以前で最後に `c` と一致する文字の位置を返す。
 - (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在する文字の位置を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>pit-ray</name>
        <email>pit-ray@outlook.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rfind -- 対象を含む「より前」を「以前」に修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/rfind.html"/>
      <id>9f4cacdca6b51520cba739ba99bb5113d127104a:reference/string/basic_string/rfind.md</id>
      <updated>2021-05-30T21:22:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/rfind.md b/reference/string/basic_string/rfind.md
index ec2dcbfc9..20632d4c6 100644
--- a/reference/string/basic_string/rfind.md
+++ b/reference/string/basic_string/rfind.md
@@ -31,10 +31,10 @@ size_type rfind(const T&amp;amp; t, size_type pos = npos) const noexcept(see below);   /
 
 
 ## 効果
-- (1) `pos` より前で最後に `str` と一致する位置を返す。
-- (2) `pos` より前で最後に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
+- (1) `pos` 以前で最後に `str` と一致する位置を返す。
+- (2) `pos` 以前で最後に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
-- (4) `pos` より前で最後に `c` と一致する位置を返す。
+- (4) `pos` 以前で最後に `c` と一致する位置を返す。
 - (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` と一致する位置を返す。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>pit-ray</name>
        <email>pit-ray@outlook.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>db24ffc4e7f08f45499622556f0d15b8094e6e78:lang/cpp20/modules.md</id>
      <updated>2021-05-30T07:35:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index d8ef88ab0..31e2f140a 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -122,7 +122,7 @@ int baz() { return 30; }
 ```
 * P1103R3[link http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf]
 
-モジュール宣言はプリプロセッサで生成してはならない。これは、`#if`などによる切り替え、`#include`、`#define`による置換などによるものを含む。
+モジュール宣言は1行で書く必要があり、プリプロセッサで生成してはならない。これは、`#if`などによる切り替え、`#include`、`#define`による置換などによるものを含む。後述のグローバルモジュールフラグメントを記述する場合を除き、モジュール宣言の前にトークンがあってはならない。
 
 #### モジュール名の詳細
 
@@ -185,7 +185,7 @@ export module foo;  // モジュールの宣言(この上の行までがグロ
 * グローバルモジュールフラグメント内の宣言や定義は、後続のモジュールではなくグローバルモジュールに属する。
 * グローバルモジュールフラグメントにはプリプロセッサディレクティブ以外を書くことはできない。
 * グローバルモジュールフラグメント内の宣言は、後続のモジュールに属する宣言から参照されていない場合は、**破棄**(discard)される。
-* グローバルモジュールフラグメントの宣言はプリプロセッサで生成してはならない。
+* グローバルモジュールフラグメントの宣言は1行で書く必要があり、プリプロセッサで生成してはならない。これは、`#if`などによる切り替え、`#include`、`#define`による置換などによるものを含む。グローバルモジュールフラグメントの前にトークンがあってはならない。
 
 ### エクスポート
 
@@ -263,13 +263,13 @@ C++20では、新たにモジュールリンケージが追加された。
 
 ### インポート
 
-モジュールインポート宣言は次のようになる：
+インポート宣言は次のようになる：
 
 ```cpp
-import lib; // libのインポート
+export(opt) import lib; // libのインポート
 ```
 
-モジュールインポート宣言は、モジュールのインターフェースユニットをインポートする。
+インポート宣言は、モジュールのインターフェースユニットをインポートする。
 
 - モジュール本体の実装ユニットはプライマリーモジュールインターフェースユニットを暗黙的にインポートする。ソースファイルと同名のヘッダーファイルをインクルードすることは多いが、これを自動化したものである。
 
@@ -281,15 +281,13 @@ import lib; // libのインポート
 
 モジュールユニットの中では、インポート宣言はモジュールユニットの本体(グローバルモジュールフラグメントではない部分)の先頭で行わなければならない。
 
-#### 再エクスポート
+インポート宣言は1行で書く必要があり、`import`キーワードや`export`キーワードをプリプロセッサで生成してはならない。また、モジュールユニット内では`#include`の結果としてインポート宣言を生成してはならない。
 
-インポート宣言もエクスポートできる。これを再エクスポートという。
+#### 再エクスポート
 
-```cpp
-export import lib; // libの再エクスポート
-```
+インポート宣言に`export`キーワードを付けることで、モジュールを再エクスポートできる。
 
-モジュールをインポートすると、そのモジュールが再エクスポートしているモジュールも同時にインポートする。
+モジュールをインポートすると、そのモジュールが再エクスポートしているモジュールも同時にインポートする。再エクスポートは、モジュールインターフェースでしかできない。
 
 #### パーティションのインポート
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>bccc742918af99585238af4e0acbf5fc2ec376df:lang/cpp20/modules.md</id>
      <updated>2021-05-30T06:58:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index 89363b35c..d8ef88ab0 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -377,9 +377,9 @@ import &amp;lt;foo.h&amp;gt;; // foo.hをヘッダーユニットとしてインポート
 * C++ライブラリヘッダー([C++標準ライブラリヘッダー](/reference.md)のうち、[C言語標準ライブラリヘッダーに由来するもの](/reference.md#clib-facilities)(`&amp;lt;cstdio&amp;gt;`など)以外)
 * その他、処理系定義のヘッダー
 
-ヘッダーユニットをインポートしてもその内容が展開されることはないが、`#include`とほぼ同じ効果が得られる(そのようなヘッダーファイルだけがインポータブルヘッダーに指定されるともいえる)。
+ヘッダーユニットをインポートしてもその内容が展開されることはないが、マクロを取り込めるなど、`#include`とほぼ同じ効果が得られる。
 
-プリプロセッサは、インポータブルヘッダーに対する`#include`ディレクティブを`import`宣言に置換できる。ただし、実際に行われるかは処理系定義である。
+プリプロセッサは、非モジュールユニットに現れるインポータブルヘッダーに対する`#include`ディレクティブを`import`宣言に置換してもよいことになっている。モジュールユニットにおいては、明示的に`import`宣言をするほうがよい。
 
 #### モジュールとの違い
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>モジュール -- Update modules.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/modules.html"/>
      <id>7a8d058d2c8049bf91c0840ce6fc18148df78e21:lang/cpp20/modules.md</id>
      <updated>2021-05-29T01:59:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/modules.md b/lang/cpp20/modules.md
index bbb8725e1..89363b35c 100644
--- a/lang/cpp20/modules.md
+++ b/lang/cpp20/modules.md
@@ -483,6 +483,7 @@ int main() {
 モジュールは、以上のような問題のないプログラム分割の仕組みとして導入された。
 
 ## 参照
+- [［C++］C++20モジュールの変遷 - Module TSからC++20DISまで - 地面を見下ろす少年の足蹴にされる私](https://onihusube.hatenablog.com/entry/2021/05/28/214612)
 - [P1103R3 Merging Modules](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf)
 - [P1502R1
 Standard library header units for C++20](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1502r1.html)  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-01-23T09:20:55.261389</updated>
  <id>37b5b8f0-742e-4c6d-9245-b3e8ee286e55</id>

  
    <entry>
      <title>iter_move -- LWG Issue 3953対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/iterator/common_iterator/iter_move.html"/>
      <id>013028f2cef7509570f8018a8192190eb75711bb:reference/iterator/common_iterator/iter_move.md</id>
      <updated>2024-01-23T18:17:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/common_iterator/iter_move.md b/reference/iterator/common_iterator/iter_move.md
index 6dd5a362d..f2afd766a 100644
--- a/reference/iterator/common_iterator/iter_move.md
+++ b/reference/iterator/common_iterator/iter_move.md
@@ -10,7 +10,7 @@ namespace std {
   template&amp;lt;input_or_output_iterator I, sentinel_for&amp;lt;I&amp;gt; S&amp;gt;
   class common_iterator {
 
-    friend iter_rvalue_reference_t&amp;lt;I&amp;gt; iter_move(const common_iterator&amp;amp; i)
+    friend decltype(auto) iter_move(const common_iterator&amp;amp; i)
       noexcept(noexcept(ranges::iter_move(declval&amp;lt;const I&amp;amp;&amp;gt;())))
         requires input_iterator&amp;lt;I&amp;gt;;
   };
@@ -18,7 +18,6 @@ namespace std {
 ```
 * input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
 * sentinel_for[link /reference/iterator/sentinel_for.md]
-* iter_rvalue_reference_t[link /reference/iterator/iter_rvalue_reference_t.md]
 * ranges::iter_move[link /reference/iterator/iter_move.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 
@@ -94,3 +93,4 @@ int main() {
 
 ## 参照
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [LWG Issue 3953. `iter_move` for `common_iterator` and `counted_iterator` should return `decltype(auto)`](https://cplusplus.github.io/LWG/issue3953)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iter_move (非メンバ関数) -- LWG Issue 3953対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/iterator/counted_iterator/iter_move.html"/>
      <id>013028f2cef7509570f8018a8192190eb75711bb:reference/iterator/counted_iterator/iter_move.md</id>
      <updated>2024-01-23T18:17:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/counted_iterator/iter_move.md b/reference/iterator/counted_iterator/iter_move.md
index 9b949231c..6a19d7416 100644
--- a/reference/iterator/counted_iterator/iter_move.md
+++ b/reference/iterator/counted_iterator/iter_move.md
@@ -6,12 +6,11 @@
 
 ```cpp
 namespace std {
-  friend constexpr iter_rvalue_reference_t&amp;lt;I&amp;gt;
+  friend constexpr decltype(auto)
     iter_move(const counted_iterator&amp;amp; i) noexcept(noexcept(ranges::iter_move(i.current)))
       requires input_iterator&amp;lt;I&amp;gt;;
 }
 ```
-* iter_rvalue_reference_t[link /reference/iterator/iter_rvalue_reference_t.md]
 * ranges::iter_move[link /reference/iterator/iter_move.md]
 * input_iterator[link /reference/iterator/input_iterator.md]
 
@@ -87,3 +86,4 @@ int main() {
 ## 参照
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
 - [LWG Issue 3472. `counted_iterator` is missing preconditions](https://cplusplus.github.io/LWG/issue3472)
+- [LWG Issue 3953. `iter_move` for `common_iterator` and `counted_iterator` should return `decltype(auto)`](https://cplusplus.github.io/LWG/issue3953)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>codecvt -- C++26対応として&lt;codecvt&gt;ライブラリを削除 (close #1243)</title>
      <link href="https://cpprefjp.github.io/reference/codecvt.html"/>
      <id>52a8ab142e76e8f530f5397d3e544503e01a8182:reference/codecvt.md</id>
      <updated>2024-01-23T18:14:07+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;codecvt&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;codecvt&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;span class=&#34;cpp cpp17deprecated text-warning&#34; title=&#34;C++17で非推奨&#34;&gt;(C++17で非推奨)&lt;/span&gt;&lt;span class=&#34;cpp cpp26removed text-danger&#34; title=&#34;C++26で削除&#34;&gt;(C++26で削除)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;codecvt&amp;gt;&lt;/code&gt;ヘッダでは、文字コード変換のためのファセットクラスを定義する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/codecvt/codecvt_mode.html&#34;&gt;codecvt_mode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字コード変換の設定をするための列挙型(enum)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt;C++17から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/codecvt/codecvt_utf8.html&#34;&gt;codecvt_utf8&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTF-8への文字コード変換(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt;C++17から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/codecvt/codecvt_utf16.html&#34;&gt;codecvt_utf16&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTF-16への文字コード変換(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt;C++17から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/codecvt/codecvt_utf8_utf16.html&#34;&gt;codecvt_utf8_utf16&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTF-8とUTF-16間での文字コード変換(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;br /&gt;C++17から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非推奨・削除の詳細&lt;/h2&gt;
&lt;p&gt;Unicodeの文字コード変換を行うこれらのクラスは、不正なコードポイントに対する安全なエラー処理の方法を提供していなかったため、セキュリティ上の欠陥があった。&lt;/p&gt;
&lt;p&gt;仕様もあいまいであったため、不正なコードポイントに対してどのように振る舞うかも不明であった。&lt;/p&gt;
&lt;p&gt;Unicode以外のShift_JISやBig5といった文字コードの利用は急激に減少している。標準ライブラリでの現代的なUnicodeの変換機能は非常に必要とされているが、&lt;code&gt;&amp;lt;codecvt&amp;gt;&lt;/code&gt;の設計はお粗末なものだった。将来より良いものを作るために、これらの機能は非推奨・削除とする。&lt;/p&gt;
&lt;p&gt;標準ライブラリにUnicodeの文字コード変換をする代替機能はないため、他の専門特化した文字コード変換のライブラリを使用すること。&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0618r0.html&#34; target=&#34;_blank&#34;&gt;P0618R0 Deprecating &lt;code&gt;&amp;lt;codecvt&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2871r3.pdf&#34; target=&#34;_blank&#34;&gt;P2871R3 Remove Deprecated Unicode Conversion Facets from C++26&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>codecvt_mode -- C++26対応として&lt;codecvt&gt;ライブラリを削除 (close #1243)</title>
      <link href="https://cpprefjp.github.io/reference/codecvt/codecvt_mode.html"/>
      <id>52a8ab142e76e8f530f5397d3e544503e01a8182:reference/codecvt/codecvt_mode.md</id>
      <updated>2024-01-23T18:14:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/codecvt/codecvt_mode.md b/reference/codecvt/codecvt_mode.md
index fcc7d069a..241143f53 100644
--- a/reference/codecvt/codecvt_mode.md
+++ b/reference/codecvt/codecvt_mode.md
@@ -4,6 +4,7 @@
 * enum[meta id-type]
 * cpp11[meta cpp]
 * cpp17deprecated[meta cpp]
+* cpp26removed[meta cpp]
 
 ```cpp
 namespace std {
@@ -31,12 +32,12 @@ namespace std {
 - [`codecvt_utf8_utf16`](codecvt_utf8_utf16.md)
 
 
-## 非推奨の詳細
+## 非推奨・削除の詳細
 Unicodeの文字コード変換を行うこれらのクラスは、不正なコードポイントに対する安全なエラー処理の方法を提供していなかったため、セキュリティ上の欠陥があった。
 
 仕様もあいまいであったため、不正なコードポイントに対してどのように振る舞うかも不明であった。
 
-Unicode以外のShift_JISやBig5といった文字コードの利用が急激に減少している。標準ライブラリでの現代的なUnicodeの変換機能は非常に必要とされているが、`&amp;lt;codecvt&amp;gt;`の設計はお粗末なものだった。将来より良いものを作るために、これらの機能は非推奨とする。
+Unicode以外のShift_JISやBig5といった文字コードの利用が急激に減少している。標準ライブラリでの現代的なUnicodeの変換機能は非常に必要とされているが、`&amp;lt;codecvt&amp;gt;`の設計はお粗末なものだった。将来より良いものを作るために、これらの機能は非推奨・削除とする。
 
 標準ライブラリにUnicodeの文字コード変換をする代替機能はないため、他の専門特化した文字コード変換のライブラリを使用すること。
 
@@ -53,3 +54,4 @@ Unicode以外のShift_JISやBig5といった文字コードの利用が急激に
 
 ## 参照
 - [P0618R0 Deprecating `&amp;lt;codecvt&amp;gt;`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0618r0.html)
+- [P2871R3 Remove Deprecated Unicode Conversion Facets from C++26](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2871r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>codecvt_utf16 -- C++26対応として&lt;codecvt&gt;ライブラリを削除 (close #1243)</title>
      <link href="https://cpprefjp.github.io/reference/codecvt/codecvt_utf16.html"/>
      <id>52a8ab142e76e8f530f5397d3e544503e01a8182:reference/codecvt/codecvt_utf16.md</id>
      <updated>2024-01-23T18:14:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/codecvt/codecvt_utf16.md b/reference/codecvt/codecvt_utf16.md
index c16c19952..0ee5fa8be 100644
--- a/reference/codecvt/codecvt_utf16.md
+++ b/reference/codecvt/codecvt_utf16.md
@@ -4,6 +4,7 @@
 * class template[meta id-type]
 * cpp11[meta cpp]
 * cpp17deprecated[meta cpp]
+* cpp26removed[meta cpp]
 
 ```cpp
 namespace std {
@@ -26,12 +27,12 @@ UTF-16との変換を行うファセットクラス。`char`列と`Elem`列と
 BOMの有無やエンディアンなどを[`codecvt_mode`](codecvt_mode.md)で指定できる。
 
 
-## 非推奨の詳細
+## 非推奨・削除の詳細
 Unicodeの文字コード変換を行うこれらのクラスは、不正なコードポイントに対する安全なエラー処理の方法を提供していなかったため、セキュリティ上の欠陥があった。
 
 仕様もあいまいであったため、不正なコードポイントに対してどのように振る舞うかも不明であった。
 
-Unicode以外のShift_JISやBig5といった文字コードの利用が急激に減少している。標準ライブラリでの現代的なUnicodeの変換機能は非常に必要とされているが、`&amp;lt;codecvt&amp;gt;`の設計はお粗末なものだった。将来より良いものを作るために、これらの機能は非推奨とする。
+Unicode以外のShift_JISやBig5といった文字コードの利用が急激に減少している。標準ライブラリでの現代的なUnicodeの変換機能は非常に必要とされているが、`&amp;lt;codecvt&amp;gt;`の設計はお粗末なものだった。将来より良いものを作るために、これらの機能は非推奨・削除とする。
 
 標準ライブラリにUnicodeの文字コード変換をする代替機能はないため、他の専門特化した文字コード変換のライブラリを使用すること。
 
@@ -92,3 +93,4 @@ int main()
 ## 参照
 - [N2401 Code Conversion Facets for the Standard C++ Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2401.htm)
 - [P0618R0 Deprecating `&amp;lt;codecvt&amp;gt;`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0618r0.html)
+- [P2871R3 Remove Deprecated Unicode Conversion Facets from C++26](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2871r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>codecvt_utf8 -- C++26対応として&lt;codecvt&gt;ライブラリを削除 (close #1243)</title>
      <link href="https://cpprefjp.github.io/reference/codecvt/codecvt_utf8.html"/>
      <id>52a8ab142e76e8f530f5397d3e544503e01a8182:reference/codecvt/codecvt_utf8.md</id>
      <updated>2024-01-23T18:14:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/codecvt/codecvt_utf8.md b/reference/codecvt/codecvt_utf8.md
index a3c6fc717..0f6edc1df 100644
--- a/reference/codecvt/codecvt_utf8.md
+++ b/reference/codecvt/codecvt_utf8.md
@@ -4,6 +4,7 @@
 * class template[meta id-type]
 * cpp11[meta cpp]
 * cpp17deprecated[meta cpp]
+* cpp26removed[meta cpp]
 
 ```cpp
 namespace std {
@@ -26,12 +27,12 @@ UTF-8との変換を行うファセットクラス。`char`列と`Elem`列との
 BOMの有無を[`codecvt_mode`](codecvt_mode.md)で指定できる。
 
 
-## 非推奨の詳細
+## 非推奨・削除の詳細
 Unicodeの文字コード変換を行うこれらのクラスは、不正なコードポイントに対する安全なエラー処理の方法を提供していなかったため、セキュリティ上の欠陥があった。
 
 仕様もあいまいであったため、不正なコードポイントに対してどのように振る舞うかも不明であった。
 
-Unicode以外のShift_JISやBig5といった文字コードの利用が急激に減少している。標準ライブラリでの現代的なUnicodeの変換機能は非常に必要とされているが、`&amp;lt;codecvt&amp;gt;`の設計はお粗末なものだった。将来より良いものを作るために、これらの機能は非推奨とする。
+Unicode以外のShift_JISやBig5といった文字コードの利用が急激に減少している。標準ライブラリでの現代的なUnicodeの変換機能は非常に必要とされているが、`&amp;lt;codecvt&amp;gt;`の設計はお粗末なものだった。将来より良いものを作るために、これらの機能は非推奨・削除とする。
 
 標準ライブラリにUnicodeの文字コード変換をする代替機能はないため、他の専門特化した文字コード変換のライブラリを使用すること。
 
@@ -92,3 +93,4 @@ int main()
 ## 参照
 - [N2401 Code Conversion Facets for the Standard C++ Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2401.htm)
 - [P0618R0 Deprecating `&amp;lt;codecvt&amp;gt;`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0618r0.html)
+- [P2871R3 Remove Deprecated Unicode Conversion Facets from C++26](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2871r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>codecvt_utf8_utf16 -- C++26対応として&lt;codecvt&gt;ライブラリを削除 (close #1243)</title>
      <link href="https://cpprefjp.github.io/reference/codecvt/codecvt_utf8_utf16.html"/>
      <id>52a8ab142e76e8f530f5397d3e544503e01a8182:reference/codecvt/codecvt_utf8_utf16.md</id>
      <updated>2024-01-23T18:14:07+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/codecvt/codecvt_utf8_utf16.md b/reference/codecvt/codecvt_utf8_utf16.md
index 045c11122..4095d4a89 100644
--- a/reference/codecvt/codecvt_utf8_utf16.md
+++ b/reference/codecvt/codecvt_utf8_utf16.md
@@ -4,6 +4,7 @@
 * class template[meta id-type]
 * cpp11[meta cpp]
 * cpp17deprecated[meta cpp]
+* cpp26removed[meta cpp]
 
 ```cpp
 namespace std {
@@ -26,12 +27,12 @@ UTF-8とUTF-16との変換を行うファセットクラス。`char`列と`Elem`
 UTF-8文字列におけるBOMの有無を[`codecvt_mode`](codecvt_mode.md)で指定できる。
 
 
-## 非推奨の詳細
+## 非推奨・削除の詳細
 Unicodeの文字コード変換を行うこれらのクラスは、不正なコードポイントに対する安全なエラー処理の方法を提供していなかったため、セキュリティ上の欠陥があった。
 
 仕様もあいまいであったため、不正なコードポイントに対してどのように振る舞うかも不明であった。
 
-Unicode以外のShift_JISやBig5といった文字コードの利用が急激に減少している。標準ライブラリでの現代的なUnicodeの変換機能は非常に必要とされているが、`&amp;lt;codecvt&amp;gt;`の設計はお粗末なものだった。将来より良いものを作るために、これらの機能は非推奨とする。
+Unicode以外のShift_JISやBig5といった文字コードの利用が急激に減少している。標準ライブラリでの現代的なUnicodeの変換機能は非常に必要とされているが、`&amp;lt;codecvt&amp;gt;`の設計はお粗末なものだった。将来より良いものを作るために、これらの機能は非推奨・削除とする。
 
 標準ライブラリにUnicodeの文字コード変換をする代替機能はないため、他の専門特化した文字コード変換のライブラリを使用すること。
 
@@ -92,3 +93,4 @@ int main()
 ## 参照
 - [N2401 Code Conversion Facets for the Standard C++ Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2401.htm)
 - [P0618R0 Deprecating `&amp;lt;codecvt&amp;gt;`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0618r0.html)
+- [P2871R3 Remove Deprecated Unicode Conversion Facets from C++26](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2871r3.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cdata -- LWG Issue 3948対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/ranges/cdata.html"/>
      <id>06c0c0060793e5d72690a5cc69ceaa7340439743:reference/ranges/cdata.md</id>
      <updated>2024-01-23T18:08:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/cdata.md b/reference/ranges/cdata.md
index 4bf0e27bf..139920917 100644
--- a/reference/ranges/cdata.md
+++ b/reference/ranges/cdata.md
@@ -27,7 +27,7 @@ Rangeの要素が格納されたメモリ領域へのポインタを取得する
         - `as-const-pointer`は次のような説明専用関数テンプレートである
           ```cpp
           template&amp;lt;class T&amp;gt;
-          constexpr auto as-const-pointer(const T* p) { return p; }
+          constexpr auto as-const-pointer(const T* p) noexcept { return p; }
           ```
 
 ## 戻り値
@@ -81,3 +81,4 @@ array size:1 at 0x556ec23ba2b0
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
 - [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
+- [LWG Issue 3948. `possibly-const-range` and `as-const-pointer` should be `noexcept`](https://cplusplus.github.io/LWG/issue3948)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>possibly-const-range -- LWG Issue 3948対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/ranges/possibly-const-range.html"/>
      <id>06c0c0060793e5d72690a5cc69ceaa7340439743:reference/ranges/possibly-const-range.md</id>
      <updated>2024-01-23T18:08:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/possibly-const-range.md b/reference/ranges/possibly-const-range.md
index 8a921c7fd..5911d11bf 100644
--- a/reference/ranges/possibly-const-range.md
+++ b/reference/ranges/possibly-const-range.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std::ranges {
   template&amp;lt;input_range R&amp;gt;
-  constexpr auto&amp;amp; possibly-const-range(R&amp;amp; r) {
+  constexpr auto&amp;amp; possibly-const-range(R&amp;amp; r) noexcept {
     if constexpr (constant_range&amp;lt;const R&amp;gt; &amp;amp;&amp;amp; !constant_range&amp;lt;R&amp;gt;) {
       return const_cast&amp;lt;const R&amp;amp;&amp;gt;(r);
     } else {
@@ -33,3 +33,4 @@ namespace std::ranges {
 ## 参照
 
 - [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
+- [LWG Issue 3948. `possibly-const-range` and `as-const-pointer` should be `noexcept`](https://cplusplus.github.io/LWG/issue3948)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>subtract_with_carry_engine -- LWG Issue 3809対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine.html"/>
      <id>fdb5ec5326df252b737be4aa9f6c276943949470:reference/random/subtract_with_carry_engine.md</id>
      <updated>2024-01-23T18:05:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine.md b/reference/random/subtract_with_carry_engine.md
index d3b8d04a8..241dbef1c 100644
--- a/reference/random/subtract_with_carry_engine.md
+++ b/reference/random/subtract_with_carry_engine.md
@@ -83,6 +83,7 @@ namespace std {
 | `static constexpr size_t short_lag` | 短いラグ。進める要素数。テンプレートパラメータ`s`。 | C++11 |
 | `static constexpr size_t long_lag`  | 長いラグ。オペランドの値間の距離。テンプレートパラメータ`r`。 | C++11 |
 | `static constexpr result_type default_seed` | デフォルトのシード値。`19780503u` | C++11 |
+| `static constexpr uint_least32_t default_seed` | デフォルトのシード値。`19780503u` | C++26 |
 
 
 ## 非メンバ関数
@@ -150,3 +151,4 @@ int main()
 - [Subtract with carry - Wikipedia](https://en.wikipedia.org/wiki/Subtract_with_carry)
 - [A New Class of Random Number Generators](http://projecteuclid.org/DPubS?service=UI&amp;amp;version=1.0&amp;amp;verb=Display&amp;amp;handle=euclid.aoap/1177005878), George Marsaglia and Arif Zaman, The Annals of Applied Probability, Vol. 1, No. 3, 1991
 - [M. Matsumoto, et al., Common Defects in Initialization of Pseudorandom Number Generators, *ACM Trans. Model. Comput. Simul.* **17**, 15 (2007)](https://doi.org/10.1145/1276927.1276928)
+- [LWG Issue 3809. Is `std::subtract_with_carry_engine&amp;lt;uint16_t&amp;gt;` supposed to work?](https://cplusplus.github.io/LWG/issue3809)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- LWG Issue 3809対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_constructor.html"/>
      <id>fdb5ec5326df252b737be4aa9f6c276943949470:reference/random/subtract_with_carry_engine/op_constructor.md</id>
      <updated>2024-01-23T18:05:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine/op_constructor.md b/reference/random/subtract_with_carry_engine/op_constructor.md
index 647aa85bf..355dce826 100644
--- a/reference/random/subtract_with_carry_engine/op_constructor.md
+++ b/reference/random/subtract_with_carry_engine/op_constructor.md
@@ -9,6 +9,7 @@
 ```cpp
 explicit subtract_with_carry_engine(result_type value = default_seed);     // (1)
 subtract_with_carry_engine() : subtract_with_carry_engine(default_seed) {} // (1) C++20
+subtract_with_carry_engine() : subtract_with_carry_engine(0u) {}           // (1) C++26
 
 explicit subtract_with_carry_engine(result_type value);                    // (2) C++20
 
@@ -23,8 +24,10 @@ subtract_with_carry_engine(subtract_with_carry_engine&amp;amp;&amp;amp; e) = default;      // (5
 - (1) : デフォルトコンストラクタ
     - C++17まで：シード値が指定されない場合はデフォルトのシード値 (`subtract_with_carry_engine::default_seed`) で構築される
       - [`linear_congruential_engine`](../linear_congruential_engine.md) を $n = \lceil 32 / \mathtt{w} \rceil$ 回 (`w` は `subtract_with_carry_engine::word_size`) 呼び出して内部状態を初期化する
-    - C++20 : デフォルトのシード値 (`mersenne_twister_engine::default_seed`) で(2)に委譲
+    - C++20から : デフォルトのシード値 (`subtract_with_carry_engine::default_seed`) で(2)に委譲
+    - C++26から : シード値を`0u`として(2)に委譲
 - (2) : シード値を受け取って状態シーケンスを構築する
+    - `value == 0`なら、デフォルトのシード値 (`subtract_with_carry_engine::default_seed`) が使用される
     - [`linear_congruential_engine`](../linear_congruential_engine.md) を $n = \lceil 32 / \mathtt{w} \rceil$ 回 (`w` は `subtract_with_carry_engine::word_size`) 呼び出して内部状態を初期化する
 - (3) : シードのシーケンスを受け取って状態シーケンスを構築する
 - (4) : コピーコンストラクタ。状態シーケンスをコピーする
@@ -108,4 +111,5 @@ int main()
 
 ## 参照
 
-- [P0935R0 Eradicating unnecessarily explicit default constructors from the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html)
\ No newline at end of file
+- [P0935R0 Eradicating unnecessarily explicit default constructors from the standard library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html)
+- [LWG Issue 3809. Is `std::subtract_with_carry_engine&amp;lt;uint16_t&amp;gt;` supposed to work?](https://cplusplus.github.io/LWG/issue3809)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>seed -- LWG Issue 3809対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/random/subtract_with_carry_engine/seed.html"/>
      <id>fdb5ec5326df252b737be4aa9f6c276943949470:reference/random/subtract_with_carry_engine/seed.md</id>
      <updated>2024-01-23T18:05:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/subtract_with_carry_engine/seed.md b/reference/random/subtract_with_carry_engine/seed.md
index a3ed4efcb..07a5699e5 100644
--- a/reference/random/subtract_with_carry_engine/seed.md
+++ b/reference/random/subtract_with_carry_engine/seed.md
@@ -7,7 +7,10 @@
 
 ```cpp
 void seed(result_type value = default_seed); // (1)
-template&amp;lt;class Sseq&amp;gt; void seed(Sseq&amp;amp; q);     // (2)
+void seed(result_type value = 0u);           // (1) C++26
+
+template&amp;lt;class Sseq&amp;gt;
+void seed(Sseq&amp;amp; q);     // (2)
 ```
 
 ## 概要
@@ -109,4 +112,4 @@ int main()
 
 ## 参照
 
-
+- [LWG Issue 3809. Is `std::subtract_with_carry_engine&amp;lt;uint16_t&amp;gt;` supposed to work?](https://cplusplus.github.io/LWG/issue3809)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const_iterator_t -- LWG Issue 3946対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/ranges/const_iterator_t.html"/>
      <id>cfedf6d21d4ee52c2aa645e7fb9f75b3e8c75ba7:reference/ranges/const_iterator_t.md</id>
      <updated>2024-01-23T17:42:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/const_iterator_t.md b/reference/ranges/const_iterator_t.md
index d2ecc3fd7..183bca235 100644
--- a/reference/ranges/const_iterator_t.md
+++ b/reference/ranges/const_iterator_t.md
@@ -7,12 +7,12 @@
 ```cpp
 namespace std::ranges {
   template&amp;lt;range R&amp;gt;
-  using const_iterator_t = const_iterator&amp;lt;iterator_t&amp;lt;R&amp;gt;&amp;gt;;
+  using const_iterator_t = decltype(ranges::cbegin(declval&amp;lt;R&amp;amp;&amp;gt;()));
 }
 ```
 * range[link range.md]
-* const_iterator[link /reference/iterator/const_iterator.md]
-* iterator_t[link iterator_t.md]
+* cbegin[link cbegin.md]
+* declval[link /reference/utility/declval.md]
 
 ## 概要
 
@@ -47,3 +47,4 @@ int main() {
 ## 参照
 
 - [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
+- [LWG Issue 3946. The definition of `const_iterator_t` should be reworked](https://cplusplus.github.io/LWG/issue3946)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const_sentinel_t -- LWG Issue 3946対応（P3040R0）</title>
      <link href="https://cpprefjp.github.io/reference/ranges/const_sentinel_t.html"/>
      <id>cfedf6d21d4ee52c2aa645e7fb9f75b3e8c75ba7:reference/ranges/const_sentinel_t.md</id>
      <updated>2024-01-23T17:42:24+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/const_sentinel_t.md b/reference/ranges/const_sentinel_t.md
index 086fe5e1b..e0ef6c9c8 100644
--- a/reference/ranges/const_sentinel_t.md
+++ b/reference/ranges/const_sentinel_t.md
@@ -7,12 +7,12 @@
 ```cpp
 namespace std::ranges {
   template&amp;lt;range R&amp;gt;
-  using const_sentinel_t = const_sentinel&amp;lt;sentinel_t&amp;lt;R&amp;gt;&amp;gt;;
+  using const_sentinel_t = decltype(ranges::cend(declval&amp;lt;R&amp;amp;&amp;gt;()));
 }
 ```
 * range[link range.md]
-* const_sentinel[link /reference/iterator/const_sentinel.md]
-* sentinel_t[link sentinel_t.md]
+* cend[link cend.md]
+* declval[link /reference/utility/declval.md]
 
 ## 概要
 
@@ -51,3 +51,4 @@ int main() {
 ## 参照
 
 - [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
+- [LWG Issue 3946. The definition of `const_iterator_t` should be reworked](https://cplusplus.github.io/LWG/issue3946)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
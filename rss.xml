<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-05-17T06:48:19.650378</updated>
  <id>c19d2f3e-32d8-4320-8bd3-2dcd6af462e2</id>

  
    <entry>
      <title>at -- flat_map::at : 不要なコードを削除</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/at.html"/>
      <id>e87272b9c0f629393dfa20826eca548e99628237:reference/flat_map/flat_map/at.md</id>
      <updated>2023-05-17T15:43:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/at.md b/reference/flat_map/flat_map/at.md
index 211fe1af3..10f24b160 100644
--- a/reference/flat_map/flat_map/at.md
+++ b/reference/flat_map/flat_map/at.md
@@ -29,7 +29,6 @@ const mapped_type&amp;amp; at(const key_type&amp;amp; x) const; // (2) C++23
 #include &amp;lt;flat_map&amp;gt;
 #include &amp;lt;stdexcept&amp;gt;
 
-namespace stdx = flat_map;
 template&amp;lt;class Container, class T&amp;gt;
 void at_wrap(Container&amp;amp; c, T v)
 {
@@ -43,7 +42,7 @@ void at_wrap(Container&amp;amp; c, T v)
 
 int main()
 {
-  stdx::flat_map&amp;lt;int,char&amp;gt; fm;
+  std::flat_map&amp;lt;int,char&amp;gt; fm;
   fm.insert(std::make_pair(1, &amp;#39;a&amp;#39;));
 
   at_wrap(fm, 1);
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : atを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>5e0410386479b6cbb938010164128996c2f18876:reference/flat_map/flat_map.md</id>
      <updated>2023-05-17T14:31:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index 191a70e6c..4f6db7f7d 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -75,7 +75,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |---------------------------------------|--------------------------------------------|-------|
 | [`operator[]`](flat_map/op_at.md.nolink)        | 指定したキーを持つ要素を取得する           | C++23 |
-| [`at`](flat_map/at.md.nolink)                   | 指定したキーを持つ要素を取得する           | C++23 |
+| [`at`](flat_map/at.md)                   | 指定したキーを持つ要素を取得する           | C++23 |
 | [`count`](flat_map/count.md.nolink)             | 指定したキーにマッチする要素の数を取得する | C++23 |
 | [`find`](flat_map/find.md.nolink)               | 指定したキーで要素を探す                   | C++23 |
 | [`contains`](flat_map/contains.md.nolink)       | 指定したキーの要素が含まれているかを判定する | C++23 |
@@ -175,7 +175,7 @@ int main()
   }
 }
 ```
-* fm.at[link flat_map/at.md.nolink]
+* fm.at[link flat_map/at.md]
 
 #### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at -- flat_map : atを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/at.html"/>
      <id>5e0410386479b6cbb938010164128996c2f18876:reference/flat_map/flat_map/at.md</id>
      <updated>2023-05-17T14:31:46+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/at.md b/reference/flat_map/flat_map/at.md
new file mode 100644
index 000000000..211fe1af3
--- /dev/null
+++ b/reference/flat_map/flat_map/at.md
@@ -0,0 +1,75 @@
+# at
+* flat_map[meta header]
+* std[meta namespace]
+* flat_map[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+mapped_type&amp;amp; at(const key_type&amp;amp; x);             // (1) C++23
+const mapped_type&amp;amp; at(const key_type&amp;amp; x) const; // (2) C++23
+```
+
+## 概要
+指定したキーを持つ要素を取得する。  
+要素を取り出す際にキーの存在チェックをする。
+
+
+## 戻り値
+キー`x`に対応する値を返す。対応する要素が存在しないときは、[`out_of_range`](/reference/stdexcept.md)例外を投げる。
+
+
+## 計算量
+要素数に対して対数時間
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+#include &amp;lt;stdexcept&amp;gt;
+
+namespace stdx = flat_map;
+template&amp;lt;class Container, class T&amp;gt;
+void at_wrap(Container&amp;amp; c, T v)
+{
+  try {
+    std::cout &amp;lt;&amp;lt; c.at(v) &amp;lt;&amp;lt; std::endl;
+  }
+  catch(std::out_of_range&amp;amp;) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;exception std::out_of_range&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+
+int main()
+{
+  stdx::flat_map&amp;lt;int,char&amp;gt; fm;
+  fm.insert(std::make_pair(1, &amp;#39;a&amp;#39;));
+
+  at_wrap(fm, 1);
+  at_wrap(fm, 2);
+}
+```
+* c.at[color ff0000]
+* fm.insert[link insert.md.nolink]
+* std::out_of_range[link /reference/stdexcept.md]
+
+### 出力
+```
+a
+exception std::out_of_range
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`operator[]`](op_at.md.nolink)
+- [`find()`](find.md.nolink)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>flat_map -- flat_map : クラスページのサンプルコードを追加 #1078</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map.html"/>
      <id>9d64bb3992e4f626b57dc749cb4fc05e36dad532:reference/flat_map/flat_map.md</id>
      <updated>2023-05-15T14:25:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map.md b/reference/flat_map/flat_map.md
index ac96b9be4..191a70e6c 100644
--- a/reference/flat_map/flat_map.md
+++ b/reference/flat_map/flat_map.md
@@ -151,18 +151,154 @@ namespace std {
 
 ## 例
 ### 基本的な使い方
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+int main()
+{
+  // stringをキー、intを値として扱う連想配列
+  std::flat_map&amp;lt;std::string, int&amp;gt; fm = {
+    {&amp;#34;Carol&amp;#34;, 4},
+    {&amp;#34;Alice&amp;#34;, 3},
+    {&amp;#34;Bob&amp;#34;, 1}
+  };
+
+  // 検索 : キー(string)を指定し、値(int)を得る
+  int r = fm.at(&amp;#34;Alice&amp;#34;);
+  std::cout &amp;lt;&amp;lt; r &amp;lt;&amp;lt; std::endl;
+
+  // 全体を出力する
+  for (const auto&amp;amp; [key, value] : fm) {
+    std::cout &amp;lt;&amp;lt; key &amp;lt;&amp;lt; &amp;#34; : &amp;#34; &amp;lt;&amp;lt; value &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* fm.at[link flat_map/at.md.nolink]
 
 #### 出力
+```
+3
+Alice : 3
+Bob : 1
+Carol : 4
+```
 
 
 
 ### ユーザー定義型をキーとして使用する (`operator&amp;lt;=&amp;gt;`を定義)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+// 要素がひとつの場合
+struct MyInt {
+  int value;
+
+  friend auto operator&amp;lt;=&amp;gt;(const MyInt&amp;amp; a, const MyInt&amp;amp; b) noexcept {
+    return a.value &amp;lt;=&amp;gt; b.value;
+  }
+};
+
+// 要素が複数の場合
+struct Person {
+  int id;
+  int age;
+  std::string name;
+
+  friend auto operator&amp;lt;=&amp;gt;(const Person&amp;amp; a, const Person&amp;amp; b) noexcept {
+    if (auto comp = a.id &amp;lt;=&amp;gt; b.id; comp != 0) {
+      return comp;
+    }
+    if (auto comp = a.age &amp;lt;=&amp;gt; b.age; comp != 0) {
+      return comp;
+    }
+    return a.name &amp;lt;=&amp;gt; b.name;
+  }
+};
+
+int main()
+{
+  std::flat_map&amp;lt;MyInt, int&amp;gt; fm1 {
+    {MyInt{1}, 3},
+    {MyInt{2}, 1},
+    {MyInt{3}, 4},
+  };
+  std::cout &amp;lt;&amp;lt; fm1[MyInt{2}] &amp;lt;&amp;lt; std::endl;
+
+  std::flat_map&amp;lt;Person, int&amp;gt; fm2 {
+    {Person{1, 18, &amp;#34;Alice&amp;#34;}, 3},
+    {Person{2, 30, &amp;#34;Bob&amp;#34;}, 1},
+    {Person{3, 30, &amp;#34;Carol&amp;#34;}, 4},
+  };
+  std::cout &amp;lt;&amp;lt; fm2[Person{2, 30, &amp;#34;Bob&amp;#34;}] &amp;lt;&amp;lt; std::endl;
+}
+```
 
 #### 出力
+```
+1
+1
+```
 
 
 ### ユーザー定義型をキーとして使用する (大小比較の関数オブジェクトを定義)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;tuple&amp;gt;
+#include &amp;lt;flat_map&amp;gt;
+
+// 要素がひとつの場合
+struct MyInt {
+  int value;
+};
+
+struct MyIntLess {
+  bool operator()(const MyInt&amp;amp; a, const MyInt&amp;amp; b) const noexcept {
+    return a.value &amp;lt; b.value;
+  }
+};
+
+// 要素が複数の場合
+struct Person {
+  int id;
+  int age;
+  std::string name;
+};
+
+struct PersonLess {
+  bool operator()(const Person&amp;amp; a, const Person&amp;amp; b) const noexcept {
+    // キーとして比較したい要素を列挙する
+    return std::tie(a.id, a.age, a.name) &amp;lt; std::tie(b.id, b.age, b.name);
+  }
+};
+
+int main()
+{
+  std::flat_map&amp;lt;MyInt, int, MyIntLess&amp;gt; fm1 {
+    {MyInt{1}, 3},
+    {MyInt{2}, 1},
+    {MyInt{3}, 4},
+  };
+  std::cout &amp;lt;&amp;lt; fm1[MyInt{2}] &amp;lt;&amp;lt; std::endl;
+
+  std::flat_map&amp;lt;Person, int, PersonLess&amp;gt; fm2 {
+    {Person{1, 18, &amp;#34;Alice&amp;#34;}, 3},
+    {Person{2, 30, &amp;#34;Bob&amp;#34;}, 1},
+    {Person{3, 30, &amp;#34;Carol&amp;#34;}, 4},
+  };
+  std::cout &amp;lt;&amp;lt; fm2[Person{2, 30, &amp;#34;Bob&amp;#34;}] &amp;lt;&amp;lt; std::endl;
+}
+```
+
 #### 出力
+```
+1
+1
+```
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
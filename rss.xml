<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-09T07:33:00.334153</updated>
  <id>b30cef62-6ce7-4de3-92e9-6458d51d33fc</id>

  
    <entry>
      <title>expected -- expected/expected: swap非メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>31bdb1a09601084f8113969e64a899383cc8e142:reference/expected/expected.md</id>
      <updated>2023-02-09T16:27:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index 94ecaf8a8..8e3940398 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -130,6 +130,14 @@ namespace std {
 | `template&amp;lt;class U&amp;gt; rebind` | `expected&amp;lt;U, error_type&amp;gt;` | C++23 |
 
 
+## 非メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|-------|
+| [`swap`](expected/swap_free.md) | 2つの`expected&amp;lt;T, E&amp;gt;`オブジェクトを入れ替える | C++23 |
+| [`swap`](expected.void/swap_free.md) | 2つの`expected&amp;lt;cv void, E&amp;gt;`オブジェクトを入れ替える | C++23 |
+
+
 ## 例
 ```cpp example
 #include &amp;lt;expected&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- expected/expected: swap非メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/swap_free.html"/>
      <id>31bdb1a09601084f8113969e64a899383cc8e142:reference/expected/expected.void/swap_free.md</id>
      <updated>2023-02-09T16:27:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/swap_free.md b/reference/expected/expected.void/swap_free.md
new file mode 100644
index 000000000..02b0d1375
--- /dev/null
+++ b/reference/expected/expected.void/swap_free.md
@@ -0,0 +1,67 @@
+# swap (非メンバ関数)
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+friend constexpr void swap(expected&amp;amp; x, expected&amp;amp; y)
+  noexcept(noexcept(x.swap(y)));
+```
+* swap[link swap.md]
+
+## 概要
+2つの`expected`オブジェクトを入れ替える。
+
+
+## 効果
+```cpp
+x.swap(y);
+```
+* swap[link swap.md]
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;void, int&amp;gt; x;
+  std::expected&amp;lt;void, int&amp;gt; y = std::unexpected{42};
+  assert(x.has_value() &amp;amp;&amp;amp; y.error() == 42);
+
+  std::swap(x, y);
+  assert(x.error() == 42 &amp;amp;&amp;amp; y.has_value());
+}
+```
+* std::swap[color ff0000]
+* has_value()[link has_value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- expected/expected: swap非メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/swap_free.html"/>
      <id>31bdb1a09601084f8113969e64a899383cc8e142:reference/expected/expected/swap_free.md</id>
      <updated>2023-02-09T16:27:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/swap_free.md b/reference/expected/expected/swap_free.md
new file mode 100644
index 000000000..634e59c33
--- /dev/null
+++ b/reference/expected/expected/swap_free.md
@@ -0,0 +1,67 @@
+# swap (非メンバ関数)
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+friend constexpr void swap(expected&amp;amp; x, expected&amp;amp; y)
+  noexcept(noexcept(x.swap(y)));
+```
+* swap[link swap.md]
+
+## 概要
+2つの`expected`オブジェクトを入れ替える。
+
+
+## 効果
+```cpp
+x.swap(y);
+```
+* swap[link swap.md]
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; x = 42;
+  std::expected&amp;lt;int, std::string&amp;gt; y = std::unexpected{&amp;#34;ERR&amp;#34;};
+  assert(x.value() == 42 &amp;amp;&amp;amp; y.error() == &amp;#34;ERR&amp;#34;);
+
+  std::swap(x, y);
+  assert(x.error() == &amp;#34;ERR&amp;#34; &amp;amp;&amp;amp; y.value() == 42);
+}
+```
+* std::swap[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index 935410167..94ecaf8a8 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -86,38 +86,38 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|-------|
-| [`operator=`](expected.void/op_assign.md.nolink) | 代入演算子 | C++23 |
-| [`emplace`](expected.void/emplace.md.nolink) | 正常値型のコンストラクタ引数から直接構築する | C++23 |
-| [`swap`](expected.void/swap.md.nolink) | 他の`expected`オブジェクトとデータを入れ替える | C++23 |
+| [`operator=`](expected.void/op_assign.md) | 代入演算子 | C++23 |
+| [`emplace`](expected.void/emplace.md) | 正常値を保持する | C++23 |
+| [`swap`](expected.void/swap.md) | 他の`expected`オブジェクトとデータを入れ替える | C++23 |
 
 ### 値の観測
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|-------|
-| [`operator*`](expected.void/op_deref.md.nolink) | 正常値への間接参照 | C++23 |
-| [`operator bool`](expected.void/op_bool.md.nolink) | 正常値を保持しているかを判定する | C++23 |
-| [`has_value`](expected.void/has_value.md.nolink) | 正常値を保持しているかを判定する | C++23 |
-| [`value`](expected.void/value.md.nolink) | 正常値を取得する | C++23 |
-| [`error`](expected.void/error.md.nolink) | エラー値を取得する | C++23 |
-| [`error_or`](expected.void/error_or.md.nolink) | エラー値もしくは指定された値を取得する | C++23 |
+| [`operator*`](expected.void/op_deref.md) | 正常値への間接参照 | C++23 |
+| [`operator bool`](expected.void/op_bool.md) | 正常値を保持しているかを判定する | C++23 |
+| [`has_value`](expected.void/has_value.md) | 正常値を保持しているかを判定する | C++23 |
+| [`value`](expected.void/value.md) | 正常値を取得する | C++23 |
+| [`error`](expected.void/error.md) | エラー値を取得する | C++23 |
+| [`error_or`](expected.void/error_or.md) | エラー値もしくは指定された値を取得する | C++23 |
 
-（`expected&amp;lt;cv void, E&amp;gt;` 部分特殊化では、演算子オーバーロード`operator-&amp;gt;`およびメンバ関数`value`は提供されない。）
+（`expected&amp;lt;cv void, E&amp;gt;` 部分特殊化では、演算子オーバーロード`operator-&amp;gt;`およびメンバ関数`value_or`は提供されない。）
 
 ### モナド操作
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`and_then`](expected.void/and_then.md.nolink) | 正常値に対して関数を適用する | C++23 |
-| [`or_else`](expected.void/or_else.md.nolink) | エラー値に対して関数を適用する | C++23 |
-| [`transform`](expected.void/transform.md.nolink) | 正常値を変換する | C++23 |
-| [`transform_error`](expected.void/transform_error.md.nolink) | エラー値を変換する | C++23 |
+| [`and_then`](expected.void/and_then.md) | 正常値に対して関数を適用する | C++23 |
+| [`or_else`](expected.void/or_else.md) | エラー値に対して関数を適用する | C++23 |
+| [`transform`](expected.void/transform.md) | 正常値を変換する | C++23 |
+| [`transform_error`](expected.void/transform_error.md) | エラー値を変換する | C++23 |
 
 ### 比較
 
 | 名前         | 説明       | 対応バージョン |
 |--------------|------------|-------|
-| [`operator==`](expected.void/op_equal.md.nolink) | 等値比較 | C++23 |
-| [`operator!=`](expected.void/op_not_equal.md.nolink) | 非等値比較 | C++23 |
+| [`operator==`](expected.void/op_equal.md) | 等値比較 | C++23 |
+| [`operator!=`](expected.void/op_not_equal.md) | 非等値比較 | C++23 |
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected.void -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void.md b/reference/expected/expected.void.md
index 982d00f7f..0081c5728 100644
--- a/reference/expected/expected.void.md
+++ b/reference/expected/expected.void.md
@@ -21,4 +21,4 @@ namespace std {
 
 このページは`expected&amp;lt;cv void, E&amp;gt;`部分特殊化テンプレートに対応するプレースホルダです。
 
-`expected`クラスの説明は[`expected&amp;lt;E, E&amp;gt;`プライマリテンプレート](expected.md)ページを参照してください。
+`expected`クラスの説明は[`expected&amp;lt;T, E&amp;gt;`プライマリテンプレート](expected.md)ページを参照してください。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>and_then -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/and_then.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/and_then.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/and_then.md b/reference/expected/expected.void/and_then.md
new file mode 100644
index 000000000..47c6b5f6d
--- /dev/null
+++ b/reference/expected/expected.void/and_then.md
@@ -0,0 +1,136 @@
+# and_then
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto and_then(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+正常値を保持していれば、`f`の呼び出し結果を`expected`として返す。
+エラー値を保持していれば、そのまま返す。
+
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`and_then`へは、引数をとらず`std::expected&amp;lt;Return, E&amp;gt;`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;cv void, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;Return, E&amp;gt; and_then(function&amp;lt;std::expected&amp;lt;Return, E&amp;gt;()&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;U::error_type, E&amp;gt; == true`
+- (3), (4) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;U::error_type, E&amp;gt; == true`
+
+
+## 効果
+- (1), (2) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return invoke(std::forward&amp;lt;F&amp;gt;(f));
+    else
+      return U(unexpect, error());
+    ```
+    * has_value[link has_value.md]
+    * error()[link error.md]
+    * unexpect[link ../unexpect_t.md]
+    * invoke[link /reference/functional/invoke.md]
+    * std::forward[link /reference/utility/forward.md]
+
+- (3), (4) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return invoke(std::forward&amp;lt;F&amp;gt;(f));
+    else
+      return U(unexpect, std::move(error()));
+    ```
+    * has_value[link has_value.md]
+    * error()[link error.md]
+    * unexpect[link ../unexpect_t.md]
+    * invoke[link /reference/functional/invoke.md]
+    * std::forward[link /reference/utility/forward.md]
+    * std::move[link /reference/utility/move.md]
+
+
+## 備考
+`and_then`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+std::expected&amp;lt;void, std::string&amp;gt; ok()
+{
+  return {};
+}
+
+std::expected&amp;lt;void, std::string&amp;gt; ng()
+{
+  return std::unexpected{&amp;#34;ng&amp;#34;};
+}
+
+int main()
+{
+  std::expected&amp;lt;void, std::string&amp;gt; v1;
+  assert(v1.and_then(ok).has_value());
+
+  std::expected&amp;lt;void, std::string&amp;gt; v2;
+  assert(v2.and_then(ng).error() == &amp;#34;ng&amp;#34;);
+
+  std::expected&amp;lt;void, std::string&amp;gt; e1 = std::unexpected{&amp;#34;empty&amp;#34;};
+  assert(e1.and_then(ng).error() == &amp;#34;empty&amp;#34;);
+}
+```
+* and_then[color ff0000]
+* has_value()[link has_value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`or_else()`](or_else.md)
+- [`transform()`](transform.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/emplace.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/emplace.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/emplace.md b/reference/expected/expected.void/emplace.md
new file mode 100644
index 000000000..bffef043e
--- /dev/null
+++ b/reference/expected/expected.void/emplace.md
@@ -0,0 +1,55 @@
+# emplace
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+constexpr void emplace() noexcept;
+```
+
+## 概要
+正常値を保持する。
+
+
+## 効果
+正常値を保持していたら、何もしない。
+エラー値を保持していたら、エラー値を破棄して正常値を保持する。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;void, int&amp;gt; x = std::unexpected{42};
+  x.emplace();
+  assert(x.has_value());
+}
+```
+* emplace[color ff0000]
+* has_value()[link has_value.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/error.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/error.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/error.md b/reference/expected/expected.void/error.md
new file mode 100644
index 000000000..36d7ca92c
--- /dev/null
+++ b/reference/expected/expected.void/error.md
@@ -0,0 +1,75 @@
+# error
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+constexpr const E&amp;amp; error() const &amp;amp; noexcept;   // (1)
+constexpr E&amp;amp; error() &amp;amp; noexcept;               // (2)
+constexpr const E&amp;amp;&amp;amp; error() const &amp;amp;&amp;amp; noexcept; // (3)
+constexpr E&amp;amp;&amp;amp; error() &amp;amp;&amp;amp; noexcept;             // (4)
+```
+
+## 概要
+エラー値を取得する。
+
+
+## 事前条件
+[`has_value()`](has_value.md) `== false`
+
+
+## 戻り値
+動作説明用のメンバ変数として、エラー値を保持する`unex`を導入する。
+
+- (1), (2) : エラー値を保持していたら、`unex`
+- (3), (4) : エラー値を保持していたら、[`std::move`](/reference/utility/move.md)`(unex)`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;void, std::string&amp;gt; x = std::unexpected{&amp;#34;ERR&amp;#34;};
+  assert(not x.has_value());
+  std::cout &amp;lt;&amp;lt; x.error() &amp;lt;&amp;lt; std::endl;
+}
+```
+* error()[color ff0000]
+* has_value()[link has_value.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+ERR
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`error_or`](error_or.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>error_or -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/error_or.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/error_or.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/error_or.md b/reference/expected/expected.void/error_or.md
new file mode 100644
index 000000000..e40c4ecdb
--- /dev/null
+++ b/reference/expected/expected.void/error_or.md
@@ -0,0 +1,69 @@
+# error_or
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+template&amp;lt;class G = E&amp;gt; constexpr T error_or(G&amp;amp;&amp;amp; e) const &amp;amp;; // (1)
+template&amp;lt;class G = E&amp;gt; constexpr T error_or(G&amp;amp;&amp;amp; e) &amp;amp;&amp;amp;;      // (2)
+```
+
+## 概要
+エラー値もしくは指定された値を取得する。
+
+
+## 適格要件
+- (1) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true &amp;amp;&amp;amp;` [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;G, E&amp;gt; == true`
+- (2) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true &amp;amp;&amp;amp;` [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;G, E&amp;gt; == true`
+
+
+## 戻り値
+- (1) : [`has_value()`](has_value.md) `?` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e) :` [`error()`](error.md)
+- (2) : [`has_value()`](has_value.md) `?` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e) :` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`)`
+
+
+## 例
+```cpp example
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;void, std::string&amp;gt; x;
+  std::cout &amp;lt;&amp;lt; x.error_or(&amp;#34;-&amp;#34;) &amp;lt;&amp;lt; std::endl;
+
+  std::expected&amp;lt;void, std::string&amp;gt; y = std::unexpected{&amp;#34;ERR&amp;#34;};
+  std::cout &amp;lt;&amp;lt; y.error_or(&amp;#34;-&amp;#34;) &amp;lt;&amp;lt; std::endl;
+}
+```
+* error_or[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+-
+ERR
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`error()`](error.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>has_value -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/has_value.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/has_value.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/has_value.md b/reference/expected/expected.void/has_value.md
new file mode 100644
index 000000000..a75f83285
--- /dev/null
+++ b/reference/expected/expected.void/has_value.md
@@ -0,0 +1,65 @@
+# has_value
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+constexpr bool has_value() const noexcept;
+```
+
+## 概要
+正常値を保持しているかを判定する。
+
+
+## 戻り値
+正常値を保持しているなら`true`を返し、エラー値を保持しているなら`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;void, int&amp;gt; x;
+  std::cout &amp;lt;&amp;lt; x.has_value() &amp;lt;&amp;lt; std::endl;
+
+  std::expected&amp;lt;void, int&amp;gt; y = std::unexpected{42};
+  std::cout &amp;lt;&amp;lt; y.has_value() &amp;lt;&amp;lt; std::endl;
+}
+```
+* has_value[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+1
+0
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`operator bool`](op_bool.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_assign.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/op_assign.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_assign.md b/reference/expected/expected.void/op_assign.md
new file mode 100644
index 000000000..5b49a231f
--- /dev/null
+++ b/reference/expected/expected.void/op_assign.md
@@ -0,0 +1,171 @@
+# operator=
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+constexpr expected&amp;amp; operator=(const expected&amp;amp; rhs);    // (1)
+
+constexpr expected&amp;amp; operator=(expected&amp;amp;&amp;amp; rhs) noexcept(see below); // (2)
+
+template&amp;lt;class G&amp;gt;
+constexpr expected&amp;amp; operator=(const unexpected&amp;lt;G&amp;gt;&amp;amp; e); // (3)
+
+template&amp;lt;class G&amp;gt;
+constexpr expected&amp;amp; operator=(unexpected&amp;lt;G&amp;gt;&amp;amp;&amp;amp; e);      // (4)
+```
+* see below[italic]
+* unexpected[link ../unexpected.md]
+
+## 概要
+- (1) : コピー代入。
+- (2) : ムーブ代入。
+- (3) : 変換可能な[`unexpected`](../unexpected.md)オブジェクトから、エラー値としてコピー代入。
+- (4) : 変換可能な[`unexpected`](../unexpected.md)オブジェクトから、エラー値としてムーブ代入。
+
+
+動作説明用の`expected`クラスメンバ変数として、下記を導入する。
+
+- `unex` : `E`型のエラー値。
+- `has_val` : `bool`型のフラグ変数。正常値を保持する場合は`true`に、エラー値を保持する場合は`false`となる。
+
+
+## テンプレートパラメータ制約
+- (3) : 次の制約を全て満たすこと
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, const G&amp;amp;&amp;gt; == true`
+    - [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;E&amp;amp;, const G&amp;amp;&amp;gt; == true`
+- (4) : 次の制約を全て満たすこと
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, G&amp;gt; == true`
+    - [`is_assignable_v`](/reference/type_traits/is_assignable.md)`&amp;lt;E&amp;amp;, G&amp;gt; == true`
+
+
+## 効果
+- (1) : 次の処理と等価
+    - `this`と`rhs`が共に正常値を保持していたら、なにもしない
+    - `this`が正常値を保持し、`rhs`がエラー値を保持していたら、[`construct_at`](/reference/memory/construct_at.md)`(`[`addressof`](/reference/memory/addressof.md)`(unex), rhs.unex); has_value = false;`
+    - `this`がエラーを保持し、`rhs`が正常値を保持していたら、`unex`を破棄し`has_value = true;`
+    - `this`と`rhs`が共にエラー値を保持していたら、`unex = rhs.`[`error()`](error.md)
+- (2) : 次の処理と等価
+    - `this`と`rhs`が共に正常値を保持していたら、なにもしない
+    - `this`が正常値を保持し、`rhs`がエラー値を保持していたら、[`construct_at`](/reference/memory/construct_at.md)`(`[`addressof`](/reference/memory/addressof.md)`(unex),` [`std::move`](/reference/utility/move.md)`(rhs.unex)); has_value = false;`
+    - `this`がエラーを保持し、`rhs`が正常値を保持していたら、`unex`を破棄し`has_value = true;`
+    - `this`と`rhs`が共にエラー値を保持していたら、`unex =` [`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md)`)`
+- (3) : 次の処理と等価
+    - `this`が正常値を保持していたら、[`construct_at`](/reference/memory/construct_at.md)`(`[`addressof`](/reference/memory/addressof.md)`(unex), val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`));
+has_val = false;`
+    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`);`
+- (4) : 次の処理と等価
+    - `this`が正常値を保持していたら、[`construct_at`](/reference/memory/construct_at.md)`(`[`addressof`](/reference/memory/addressof.md)`(unex), val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`));
+has_val = false;`
+    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`);`
+
+
+## 戻り値
+`*this`
+
+
+## 例外
+- (2) : ムーブ代入演算子のnoexcept例外指定は、次の式に従う
+    [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_move_assignable_v`](/reference/type_traits/is_nothrow_move_assignable.md)`&amp;lt;E&amp;gt;`
+
+
+## delete定義される条件
+- (1) : 下記いずれか1つでも満たされないとき、コピー代入演算子はdelete定義される。
+    - [`is_copy_assignable_v`](/reference/type_traits/is_copy_assignable.md)`&amp;lt;E&amp;gt; == true`
+    - [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;memory&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;tuple&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+// std::pair型から2要素std::tuple型へはコピー代入可能
+using IntPair  = std::pair&amp;lt;int, int&amp;gt;;
+using IntTuple = std::tuple&amp;lt;int, int&amp;gt;;
+
+// std::unique_ptr型からstd::shared_ptr型へはムーブ代入可能
+using UniquePtr = std::unique_ptr&amp;lt;int&amp;gt;;
+using SharedPtr = std::shared_ptr&amp;lt;int&amp;gt;;
+
+int main()
+{
+  // (1) コピー代入
+  {
+    std::expected&amp;lt;void, int&amp;gt; srcV;
+    std::expected&amp;lt;void, int&amp;gt; dstV;
+    dstV = srcV;
+    assert(srcV.has_value() &amp;amp;&amp;amp; dstV.has_value());
+
+    std::expected&amp;lt;void, int&amp;gt; srcE = std::unexpected{42};
+    std::expected&amp;lt;void, int&amp;gt; dstE;
+    dstE = srcE;
+    assert(!srcE.has_value() &amp;amp;&amp;amp; !dstE.has_value());
+    assert(srcE.error() == 42 &amp;amp;&amp;amp; dstE.error() == 42);
+  }
+
+  // (2) ムーブ代入
+  {
+    std::expected&amp;lt;void, std::string&amp;gt; srcV;
+    std::expected&amp;lt;void, std::string&amp;gt; dstV;
+    dstV = std::move(srcV);
+    assert(srcV.has_value() &amp;amp;&amp;amp; dstV.has_value());
+
+    std::expected&amp;lt;void, std::string&amp;gt; srcE = std::unexpected{&amp;#34;Oops&amp;#34;};
+    std::expected&amp;lt;void, std::string&amp;gt; dstE;
+    dstE = std::move(srcE);
+    assert(!srcE.has_value() &amp;amp;&amp;amp; !dstE.has_value());
+    assert(dstE.error() == &amp;#34;Oops&amp;#34;);
+    // srcE.error()はstd::stringムーブ後の未規定の値
+  }
+
+  // (3) エラー値の変換コピー代入
+  {
+    std::unexpected&amp;lt;IntPair&amp;gt; src{IntPair{1, 2}};
+    std::expected&amp;lt;void, IntTuple&amp;gt; dst;
+    dst = src;
+    assert(not dst.has_value());
+    assert((dst.error() == IntTuple{1, 2}));
+  }
+
+  // (4) エラー値の変換ムーブ代入
+  {
+    std::unexpected&amp;lt;UniquePtr&amp;gt; src{std::make_unique&amp;lt;int&amp;gt;(42)};
+    std::expected&amp;lt;void, SharedPtr&amp;gt; dst;
+    dst = std::move(src);
+    assert(not dst.has_value());
+    assert(*dst.error() == 42);
+  }
+}
+```
+* has_value[link has_value.md]
+* value[link value.md]
+* error[link error.md]
+* std::unexpected[link ../unexpected.md]
+* std::make_unique[link /reference/memory/make_unique.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_bool.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/op_bool.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_bool.md b/reference/expected/expected.void/op_bool.md
new file mode 100644
index 000000000..0e30c76dd
--- /dev/null
+++ b/reference/expected/expected.void/op_bool.md
@@ -0,0 +1,75 @@
+# operator bool
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+constexpr explicit operator bool() const noexcept;
+```
+
+## 概要
+正常値を保持しているかを判定する。
+
+
+## 戻り値
+正常値を保持しているなら`true`を返し、エラー値を保持しているなら`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;void, int&amp;gt; x;
+  if (x) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;has_value&amp;#34; &amp;lt;&amp;lt; std::endl;
+  } else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;unex=&amp;#34; &amp;lt;&amp;lt; x.error() &amp;lt;&amp;lt; std::endl;
+  }
+
+  std::expected&amp;lt;void, int&amp;gt; y = std::unexpected{42};
+  if (y) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;has_value&amp;#34; &amp;lt;&amp;lt; std::endl;
+  } else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;unex=&amp;#34; &amp;lt;&amp;lt; y.error() &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* (x)[color ff0000]
+* (y)[color ff0000]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+has_value
+unex=42
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`has_value()`](has_value.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_constructor.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/op_constructor.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_constructor.md b/reference/expected/expected.void/op_constructor.md
index 0559dcb3f..a1e4ad4f1 100644
--- a/reference/expected/expected.void/op_constructor.md
+++ b/reference/expected/expected.void/op_constructor.md
@@ -71,10 +71,10 @@ constexpr explicit expected(unexpect_t, initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);
 
 ## 効果
 - (1) : 正常値を保持する。
-- (2) : `rhs`がエラー値を保持していれば、`rhs.`[`error()`](error.md.nolink)でエラー値を直接非リスト初期化する。
-- (3) : `rhs`がエラー値を保持していれば、[`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
-- (4) : `rhs`がエラー値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
-- (5) : `rhs`がエラー値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (2) : `rhs`がエラー値を保持していれば、`rhs.`[`error()`](error.md)でエラー値を直接非リスト初期化する。
+- (3) : `rhs`がエラー値を保持していれば、[`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md)`)`でエラー値を直接非リスト初期化する。
+- (4) : `rhs`がエラー値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(rhs.`[`error()`](error.md)`)`でエラー値を直接非リスト初期化する。
+- (5) : `rhs`がエラー値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(rhs.`[`error()`](error.md)`)`でエラー値を直接非リスト初期化する。
 - (6) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`)`でエラー値を直接非リスト初期化する。
 - (7) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`)`でエラー値を直接非リスト初期化する。
 - (9) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`でエラー値を直接非リスト初期化する。
@@ -84,8 +84,8 @@ constexpr explicit expected(unexpect_t, initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args);
 ## 事後条件
 - (1) : 正常値を保持している。
 - (2) : `rhs`が正常値を保持する場合は`*this`も正常値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。
-- (3) : `rhs`が正常値を保持する場合は`*this`も正常値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。`rhs.`[`has_value()`](has_value.md.nolink)は変化しない。
-- (4), (5) : `rhs`が正常値を保持する場合は`*this`も正常値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。`rhs.`[`has_value()`](has_value.md.nolink)は変化しない。
+- (3) : `rhs`が正常値を保持する場合は`*this`も正常値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。`rhs.`[`has_value()`](has_value.md)は変化しない。
+- (4), (5) : `rhs`が正常値を保持する場合は`*this`も正常値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。`rhs.`[`has_value()`](has_value.md)は変化しない。
 - (6), (7) : エラー値を保持している。
 - (8) : 正常値を保持している。
 - (9), (10) : エラー値を保持している。
@@ -231,9 +231,9 @@ int main()
   }
 }
 ```
-* has_value()[link has_value.md.nolink]
-* value()[link value.md.nolink]
-* error()[link error.md.nolink]
+* has_value()[link has_value.md]
+* value()[link value.md]
+* error()[link error.md]
 * std::unexpected[link ../unexpected.md]
 * std::unexpect[link ../unexpect_t.md]
 * std::in_place[link /reference/utility/in_place_t.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_deref.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/op_deref.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_deref.md b/reference/expected/expected.void/op_deref.md
new file mode 100644
index 000000000..429ee518f
--- /dev/null
+++ b/reference/expected/expected.void/op_deref.md
@@ -0,0 +1,67 @@
+# operator*
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+constexpr void operator*() const noexcept;
+```
+
+## 概要
+正常値(`void`)を取得する。
+
+
+## 事前条件
+[`has_value()`](has_value.md) `== true`
+
+
+## 戻り値
+なし
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;void, int&amp;gt; x;
+  *x;
+
+  std::expected&amp;lt;void, int&amp;gt; y = std::unexpected{42};
+//*y;
+  // エラー値を保持する y に対する operator* 呼び出しは未定義動作
+}
+```
+* *x[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`value()`](value.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_equal.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/op_equal.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_equal.md b/reference/expected/expected.void/op_equal.md
new file mode 100644
index 000000000..7707374e7
--- /dev/null
+++ b/reference/expected/expected.void/op_equal.md
@@ -0,0 +1,82 @@
+# operator==
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+template&amp;lt;class T2, class E2&amp;gt; requires is_void_v&amp;lt;T2&amp;gt;
+friend constexpr bool operator==(const expected&amp;amp; x, const expected&amp;lt;T2, E2&amp;gt;&amp;amp; y); // (1)
+
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator==(const expected&amp;amp; x, const unexpected&amp;lt;E2&amp;gt;&amp;amp; e);   // (2)
+// (2)により、下記オーバーロードが使用可能になる
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator==(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x);   // (3)
+```
+* is_void_v[link /reference/type_traits/is_void.md]
+* unexpected[link ../unexpected.md]
+
+## 概要
+- (1) : `unexpected`オブジェクト同士の等値比較を行う。
+- (2), (3) : `unexpected`オブジェクトとエラー値の等値比較を行う。
+
+
+## 適格要件
+- (1) : 式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、その結果を`bool`へ変換可能であること。
+- (2), (3) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)が適格であり、その結果を`bool`へ変換可能であること。
+
+
+## 戻り値
+- (1) : 次の値を返す
+    - `x.`[`has_value()`](has_value.md)と`y.`[`has_value()`](has_value.md)が異なるとき、`false`
+    - そうでなければ、`x.`[`has_value()`](has_value.md) `|| static_cast&amp;lt;bool&amp;gt;(x.`[`error()`](error.md) `== y.`[`error()`](error.md)`)`
+- (2), (3) : `!x.`[`has_value()`](has_value.md) `&amp;amp;&amp;amp; static_cast&amp;lt;bool&amp;gt;(x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)`)`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;void, long&amp;gt;  x1;
+  std::expected&amp;lt;void, short&amp;gt; y1;
+  std::expected&amp;lt;void, long&amp;gt;  x2 = std::unexpected{1};
+  std::expected&amp;lt;void, short&amp;gt; y2 = std::unexpected{1};
+
+  // (1)
+  assert(x1 == y1);
+  assert(x2 == y2);
+  assert(not (x1 == y2));
+  assert(not (x2 == y1));
+
+  // (2), (3)
+  assert(x2 == std::unexpected{1});
+  assert(std::unexpected{1} == x2);
+}
+```
+* ==[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_not_equal.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/op_not_equal.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_not_equal.md b/reference/expected/expected.void/op_not_equal.md
new file mode 100644
index 000000000..e27d344ac
--- /dev/null
+++ b/reference/expected/expected.void/op_not_equal.md
@@ -0,0 +1,81 @@
+# operator!=
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+// operator==により、下記オーバーロードが使用可能になる
+template&amp;lt;class T2, class E2&amp;gt; requires is_void_v&amp;lt;T2&amp;gt;
+friend constexpr bool operator!=(const expected&amp;amp; x, const expected&amp;lt;T2, E2&amp;gt;&amp;amp; y); // (1)
+
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator!=(const expected&amp;amp; x, const unexpected&amp;lt;E2&amp;gt;&amp;amp; e);   // (2)
+template&amp;lt;class E2&amp;gt;
+friend constexpr bool operator!=(const unexpected&amp;lt;E2&amp;gt;&amp;amp; e, const expected&amp;amp; x);   // (3)
+```
+* operator==[link op_equal.md]
+* is_void_v[link /reference/type_traits/is_void.md]
+* unexpected[link ../unexpected.md]
+
+## 概要
+- (1) : `unexpected`オブジェクト同士の非等値比較を行う。
+- (2), (3) : `unexpected`オブジェクトとエラー値の非等値比較を行う。
+
+
+## 適格要件
+- (1) : 式`x.`[`error()`](error.md) `== y.`[`error()`](error.md)が適格であり、その結果を`bool`へ変換可能であること。
+- (2), (3) : 式`x.`[`error()`](error.md) `== e.`[`error()`](../unexpected/error.md.nolink)が適格であり、その結果を`bool`へ変換可能であること。
+
+
+## 戻り値
+- (1) : `!`[`(x == y)`](op_equal.md)
+- (2), (3) : `!`[`(x == e)`](op_equal.md)
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;void, long&amp;gt;  x1;
+  std::expected&amp;lt;void, short&amp;gt; y1;
+  std::expected&amp;lt;void, long&amp;gt;  x2 = std::unexpected{1};
+  std::expected&amp;lt;void, short&amp;gt; y2 = std::unexpected{100};
+
+  // (1)
+  assert(not (x1 != y1));
+  assert(x2 != y2);
+  assert(x1 != y2);
+  assert(x2 != y1);
+
+  // (2), (3)
+  assert(x2 != std::unexpected{2});
+  assert(std::unexpected{2} != x2);
+}
+```
+* !=[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>or_else -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/or_else.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/or_else.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/or_else.md b/reference/expected/expected.void/or_else.md
new file mode 100644
index 000000000..6b73a22c2
--- /dev/null
+++ b/reference/expected/expected.void/or_else.md
@@ -0,0 +1,130 @@
+# or_else
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto or_else(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`として返す。
+正常値を保持していれば、そのまま返す。
+
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`or_else`へは、引数リストに1個の`E`型をとり`std::expected&amp;lt;T, Return&amp;gt;`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;cv void, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;cv void, Return&amp;gt; or_else(function&amp;lt;std::expected&amp;lt;cv void, Return&amp;gt;(E)&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
+
+## 適格要件
+- (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`error()`](error.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;G::value_type, T&amp;gt; == true`
+- (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の特殊化である
+    - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;G::value_type, T&amp;gt; == true`
+
+
+## 効果
+- (1), (2) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return G();
+    else
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), error());
+    ```
+    * has_value()[link has_value.md]
+    * error()[link error.md]
+    * invoke[link /reference/functional/invoke.md]
+    * in_place[link /reference/utility/in_place_t.md]
+    * std::forward[link /reference/utility/forward.md]
+
+- (3), (4) : 次の処理と等価
+    ```cpp
+    if (has_value())
+      return G();
+    else
+      return invoke(std::forward&amp;lt;F&amp;gt;(f), std::move(error()));
+    ```
+    * has_value()[link has_value.md]
+    * error()[link error.md]
+    * invoke[link /reference/functional/invoke.md]
+    * in_place[link /reference/utility/in_place_t.md]
+    * std::forward[link /reference/utility/forward.md]
+    * std::move[link /reference/utility/move.md]
+
+
+## 備考
+`or_else`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+std::expected&amp;lt;void, std::string&amp;gt; validate(int code)
+{
+  if (0 &amp;lt;= code) {
+    return {};
+  } else {
+    return std::unexpected{&amp;#34;bad code&amp;#34;};
+  }
+}
+
+int main()
+{
+  std::expected&amp;lt;void, int&amp;gt; v1;
+  assert(v1.or_else(validate).has_value());
+
+  std::expected&amp;lt;void, int&amp;gt; e1 = std::unexpected{42};
+  assert(e1.or_else(validate).has_value());
+
+  std::expected&amp;lt;void, int&amp;gt; e2 = std::unexpected{-100};
+  assert(e2.or_else(validate).error() == &amp;#34;bad code&amp;#34;);
+}
+```
+* or_else[color ff0000]
+* has_value()[link has_value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`transform()`](transform.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/swap.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/swap.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/swap.md b/reference/expected/expected.void/swap.md
new file mode 100644
index 000000000..4a5025475
--- /dev/null
+++ b/reference/expected/expected.void/swap.md
@@ -0,0 +1,98 @@
+# swap
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+constexpr void swap(expected&amp;amp; rhs) noexcept(see below);
+```
+* see below[italic]
+
+## 概要
+他の`expected`オブジェクトとデータを入れ替える。
+
+動作説明用の`expected`クラスメンバ変数として、下記を導入する。
+
+- `unex` : `E`型のエラー値。
+- `has_val` : `bool`型のフラグ変数。正常値を保持する場合は`true`に、エラー値を保持する場合は`false`となる。
+
+
+## テンプレートパラメータ制約
+次の制約を全て満たすこと
+
+- [`is_swappable_v`](/reference/type_traits/is_swappable.md)`&amp;lt;E&amp;gt; == true`
+- [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
+
+
+## 効果
+`*this`と`rhs`それぞれが正常値／エラー値いずれを保持しているかに応じて、以下の効果を持つ。
+
+- `*this`と`rhs`ともに正常値を保持していれば、なにもしない
+- `*this`と`rhs`ともにエラー値を保持していれば、次と等価 : `using` [`std::swap`](/reference/utility/swap.md)`; swap(unex, rhs.unex);`
+- `*this`がエラー値を`rhs`が正常値を保持していれば、次と等価 : `rhs.swap(*this);`
+- `*this`が正常値を`rhs`がエラー値を保持していれば、次と等価 :
+    ```cpp
+    construct_at(addressof(unex), std::move(rhs.unex));
+    destroy_at(addressof(rhs.unex));
+    has_val = false;
+    rhs.has_val = true;
+    ```
+    * addressof[link /reference/memory/addressof.md]
+    * construct_at[link /reference/memory/construct_at.md]
+    * destroy_at[link /reference/memory/destroy_at.md]
+    * std::move[link /reference/utility/move.md]
+
+
+## 戻り値
+なし
+
+
+## 例外
+noexcept例外指定は次の式に従う :
+
+[`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;E&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;E&amp;gt;`
+
+noexcept例外指定が`false`の場合、上記の「効果」による処理からの例外がスローされる。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;void, int&amp;gt; x;
+  std::expected&amp;lt;void, int&amp;gt; y = std::unexpected{42};
+  assert(x.has_value() &amp;amp;&amp;amp; y.error() == 42);
+
+  x.swap(y);
+  assert(x.error() == 42 &amp;amp;&amp;amp; y.has_value());
+}
+```
+* swap[color ff0000]
+* has_value()[link has_value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/transform.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/transform.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/transform.md b/reference/expected/expected.void/transform.md
new file mode 100644
index 000000000..d8214747d
--- /dev/null
+++ b/reference/expected/expected.void/transform.md
@@ -0,0 +1,110 @@
+# transform
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto transform(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+正常値を保持していれば、`f`の呼び出し結果を`expected`の正常値として格納して返す。
+エラー値を保持していれば、そのまま返す。
+
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`transform`へは、引数をとらず`Return`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;cv void, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;Return, E&amp;gt; transform(function&amp;lt;Return()&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
+
+## テンプレートパラメータ制約
+- (1), (2) : [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;E&amp;gt; == true`
+- (3), (4) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
+
+
+## 適格要件
+- (1), (2) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の有効な正常値型である
+    - `U`が（CV修飾された）`void`ではないとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)));`が妥当である
+- (3), (4) : 型`U`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `U`が`expected`の有効な正常値型である
+    - `U`が（CV修飾された）`void`ではないとき、宣言`U u(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)));`が妥当である
+
+
+## 効果
+- (1), (2) : 次の効果をもつ
+    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`error()`](error.md)`)`を返す。
+    - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f))`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
+    - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f))`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
+- (3), (4) : 次の効果をもつ
+    - エラー値を保持していたら、`expected&amp;lt;U, E&amp;gt;(`[`unexpect`](../unexpect_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`を返す。
+    - 型`U`が（CV修飾された）`void`でなければ、正常値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f))`で非直接リスト初期化した`expected&amp;lt;U, E&amp;gt;`オブジェクトを返す。
+    - そうでなければ、[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f))`を評価し、`expected&amp;lt;U, E&amp;gt;()`を返す。
+
+
+## 備考
+`transform`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int get_answer()
+{
+  return 42;
+}
+
+int main()
+{
+  std::expected&amp;lt;void, std::string&amp;gt; v1;
+  assert(v1.transform(get_answer).value() == 42);
+
+  std::expected&amp;lt;void, std::string&amp;gt; e1 = std::unexpected{&amp;#34;galaxy&amp;#34;};
+  assert(e1.transform(get_answer).error() == &amp;#34;galaxy&amp;#34;);
+}
+```
+* transform[color ff0000]
+* value()[link value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`or_else()`](or_else.md)
+- [`transform_error()`](transform_error.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_error -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/transform_error.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/transform_error.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/transform_error.md b/reference/expected/expected.void/transform_error.md
new file mode 100644
index 000000000..07369cab1
--- /dev/null
+++ b/reference/expected/expected.void/transform_error.md
@@ -0,0 +1,104 @@
+# transform_error
+* expected[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) &amp;amp;;        // (1)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;;  // (2)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) &amp;amp;&amp;amp;;       // (3)
+template&amp;lt;class F&amp;gt; constexpr auto transform_error(F&amp;amp;&amp;amp; f) const &amp;amp;&amp;amp;; // (4)
+```
+
+## 概要
+エラー値を保持していれば、エラー値に対して`f`を適用した結果を`expected`のエラー値として格納して返す。
+正常値を保持していれば、そのまま返す。
+
+実際には複数オーバーロードが提供されるが、大まかには下記シグニチャのようにみなせる。
+`transform_error`へは、引数リストに1個の`E`型をとり`Return`型を返す関数や関数オブジェクトを与える。
+
+```cpp
+template &amp;lt;cv void, class E&amp;gt;
+class expected {
+  template &amp;lt;class Return&amp;gt;
+  std::expected&amp;lt;cv void, Return&amp;gt; transform_error(function&amp;lt;Return(E)&amp;gt; func);
+};
+```
+* function[link /reference/functional/function.md]
+
+
+## 適格要件
+- (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`error()`](error.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の有効なエラー値型である
+    - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`));`が妥当である
+- (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+    - `G`が`expected`の有効なエラー値型である
+    - 宣言`G g(`[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`)));`が妥当である
+
+
+## 効果
+- (1), (2) : 次の効果をもつ
+    - 正常値を保持していたら、`expected&amp;lt;T, G&amp;gt;()`を返す。
+    - そうでなければ、エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`)`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+- (3), (4) : 次の効果をもつ
+    - 正常値を保持していたら、`expected&amp;lt;T, G&amp;gt;()`を返す。
+    - そうでなければ、エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+
+
+## 備考
+`transform_error`は、メソッドチェーンをサポートするモナド風(monadic)操作として導入された。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;format&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+std::string int2str(int n)
+{
+  return std::format(&amp;#34;({})&amp;#34;, n);
+}
+
+int main()
+{
+  std::expected&amp;lt;void, int&amp;gt; v1;
+  assert(v1.transform_error(int2str).has_value());
+
+  std::expected&amp;lt;void, int&amp;gt; e1 = std::unexpected{42};
+  assert(e1.transform_error(int2str).error() == &amp;#34;(42)&amp;#34;);
+}
+```
+* transform_error[color ff0000]
+* has_value()[link has_value.md]
+* error()[link error.md]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): 13.0
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`and_then()`](and_then.md)
+- [`or_else()`](or_else.md)
+- [`transform()`](transform.md)
+
+
+## 参照
+- [P2505R5 Monadic Functions for `std::expected`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2505r5.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>value -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/value.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected.void/value.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/value.md b/reference/expected/expected.void/value.md
new file mode 100644
index 000000000..ba7a593f7
--- /dev/null
+++ b/reference/expected/expected.void/value.md
@@ -0,0 +1,72 @@
+# value
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected.void[meta class]
+* cpp23[meta cpp]
+
+```cpp
+// expected&amp;lt;cv void, E&amp;gt;部分特殊化
+constexpr void value() const &amp;amp;; // (1)
+constexpr void value() &amp;amp;&amp;amp;;      // (2)
+```
+
+## 概要
+正常値(`void`)を取得する。
+
+
+## 戻り値
+なし
+
+
+## 例外
+- (1) : エラー値を保持していたら、例外[`bad_expected_access`](../bad_expected_access.md)`(`[`error()`](error.md)`)`をスローする
+- (2) : エラー値を保持していたら、例外[`bad_expected_access`](../bad_expected_access.md)`(`[`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`をスローする
+
+
+## 例
+```cpp example
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;void, int&amp;gt; x;
+  x.value();
+
+  std::expected&amp;lt;void, int&amp;gt; y = std::unexpected{42};
+  try {
+    y.value();
+  } catch (const std::bad_expected_access&amp;lt;int&amp;gt;&amp;amp; ex) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;throw:&amp;#34; &amp;lt;&amp;lt; ex.error() &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* value()[color ff0000]
+* error()[link ../unexpected/error.md.nolink]
+* std::unexpected[link ../unexpected.md]
+* std::bad_expected_access[link ../bad_expected_access.md]
+
+### 出力
+```
+throw:42
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`operator*`](op_deref.md)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/emplace.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected/emplace.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/emplace.md b/reference/expected/expected/emplace.md
index 2faa79e85..31871cd0a 100644
--- a/reference/expected/expected/emplace.md
+++ b/reference/expected/expected/emplace.md
@@ -15,8 +15,8 @@ constexpr T&amp;amp; emplace(initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args) noexcept; // (2)
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
 ## 概要
-- (1) : 正常値型`T`のコンストラクタ引数として任意個の引数を受け取って、型`T`のオブジェクトを有効値として生成し、保持する。
-- (2) : 正常値型`T`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、型`T`のオブジェクトを有効値として生成し、保持する。
+- (1) : 正常値型`T`のコンストラクタ引数として任意個の引数を受け取って、型`T`のオブジェクトを正常値として生成し、保持する。
+- (2) : 正常値型`T`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、型`T`のオブジェクトを正常値として生成し、保持する。
 
 
 動作説明用の`expected`クラスメンバ変数として、下記を導入する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_assign.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected/op_assign.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_assign.md b/reference/expected/expected/op_assign.md
index d9763a4b9..a2094bc79 100644
--- a/reference/expected/expected/op_assign.md
+++ b/reference/expected/expected/op_assign.md
@@ -102,7 +102,7 @@ constexpr void reinit-expected(T&amp;amp; newval, U&amp;amp; oldval, Args&amp;amp;&amp;amp;... args) {
     - `this`と`rhs`が共に正常値を保持していたら、`val =` [`std::move`](/reference/utility/move.md)`(`[`*rhs`](op_deref.md)`)`
     - `this`が正常値を保持し、`rhs`がエラー値を保持していたら、`reinit-expected(unex, val,` [`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md)`))`
     - `this`がエラーを保持し、`rhs`が正常値を保持していたら、`reinit-expected(val, unex,` [`std::move`](/reference/utility/move.md)`(`[`*rhs`](op_deref.md)`))`
-    - `this`と`rhs`が共にエラー値を保持していたら、`unex` [`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md)`)`
+    - `this`と`rhs`が共にエラー値を保持していたら、`unex =` [`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md)`)`
 - (3) : 次の処理と等価
     - `this`が正常値を保持していたら、`val =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v)`
     - `this`がエラー値を保持していたら、`reinit-expected(val, unex,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v)); has_val = true;`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_bool.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected/op_bool.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_bool.md b/reference/expected/expected/op_bool.md
index 684f32e4b..e7cee7513 100644
--- a/reference/expected/expected/op_bool.md
+++ b/reference/expected/expected/op_bool.md
@@ -70,7 +70,7 @@ unex=42
 
 
 ## 関連項目
-- [`operator bool`](op_bool.md)
+- [`has_value()`](has_value.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>or_else -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/or_else.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected/or_else.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/or_else.md b/reference/expected/expected/or_else.md
index 8c7b08d78..bd4680b7b 100644
--- a/reference/expected/expected/or_else.md
+++ b/reference/expected/expected/or_else.md
@@ -35,10 +35,10 @@ class expected {
 
 
 ## 適格要件
-- (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`value()`](value.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+- (1), (2) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`error()`](error.md)`)&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
     - `G`が`expected`の特殊化である
     - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;G::value_type, T&amp;gt; == true`
-- (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
+- (3), (4) : 型`G`を[`remove_cvref_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;`[`invoke_result_t`](/reference/type_traits/invoke_result.md)`&amp;lt;F, decltype(`[`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))&amp;gt;&amp;gt;`としたとき、次を全て満たすこと
     - `G`が`expected`の特殊化である
     - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;G::value_type, T&amp;gt; == true`
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/swap.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected/swap.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/swap.md b/reference/expected/expected/swap.md
index 8df15366e..ac5f63df2 100644
--- a/reference/expected/expected/swap.md
+++ b/reference/expected/expected/swap.md
@@ -105,8 +105,6 @@ int main()
 
 ### 出力
 ```
-42
-0
 ```
 
 
@@ -121,11 +119,5 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
-## 関連項目
-- [`operator-&amp;gt;`](op_arrow.md)
-- [`operator*`](op_deref.md)
-- [`value()`](value.md)
-
-
 ## 参照
 - [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_error -- expected/expected.void: 全メンバ関数(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/transform_error.html"/>
      <id>d55ed2f5f2abc2de1e69da1ed1f94cea6167738a:reference/expected/expected/transform_error.md</id>
      <updated>2023-02-09T16:00:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/transform_error.md b/reference/expected/expected/transform_error.md
index 100e135d1..e9edfd948 100644
--- a/reference/expected/expected/transform_error.md
+++ b/reference/expected/expected/transform_error.md
@@ -46,10 +46,10 @@ class expected {
 ## 効果
 - (1), (2) : 次の効果をもつ
     - 正常値を保持していたら、`expected&amp;lt;T, G&amp;gt;(`[`in_place`](/reference/utility/in_place_t.md)`,` [`value()`](value.md)`)`を返す。
-    - エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`)`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+    - そうでなければ、エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`error()`](error.md)`)`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
 - (3), (4) : 次の効果をもつ
     - 正常値を保持していたら、`expected&amp;lt;T, G&amp;gt;(`[`in_place`](/reference/utility/in_place_t.md)`,` [`std::move`](/reference/utility/move.md)`(`[`value()`](value.md)`))`を返す。
-    - エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
+    - そうでなければ、エラー値を[`invoke`](/reference/functional/invoke.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f),` [`std::move`](/reference/utility/move.md)`(`[`error()`](error.md)`))`で非直接リスト初期化した`expected&amp;lt;T, G&amp;gt;`オブジェクトを返す。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected.void -- expected/expected.void: ページタイトルを修正(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void.html"/>
      <id>7c00cbcb2ff088824321a079167205680fb812b6:reference/expected/expected.void.md</id>
      <updated>2023-02-09T13:21:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void.md b/reference/expected/expected.void.md
index 1b909048f..982d00f7f 100644
--- a/reference/expected/expected.void.md
+++ b/reference/expected/expected.void.md
@@ -1,4 +1,4 @@
-# expected&amp;lt;cv void, E&amp;gt;
+# expected.void
 * expected[meta header]
 * class template[meta id-type]
 * std[meta namespace]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected/expected.void: meta classを修正(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_constructor.html"/>
      <id>dbb5c926307857ac6baca67048ee5407893d7531:reference/expected/expected.void/op_constructor.md</id>
      <updated>2023-02-09T13:13:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_constructor.md b/reference/expected/expected.void/op_constructor.md
index 68eca5a47..0559dcb3f 100644
--- a/reference/expected/expected.void/op_constructor.md
+++ b/reference/expected/expected.void/op_constructor.md
@@ -2,7 +2,7 @@
 * expected[meta header]
 * function[meta id-type]
 * std[meta namespace]
-* expected&amp;lt;void,E&amp;gt;[meta class]
+* expected.void[meta class]
 * cpp23[meta cpp]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- expected/expected.void: meta classを修正(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_destructor.html"/>
      <id>dbb5c926307857ac6baca67048ee5407893d7531:reference/expected/expected.void/op_destructor.md</id>
      <updated>2023-02-09T13:13:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_destructor.md b/reference/expected/expected.void/op_destructor.md
index aa71c726d..9696d45f1 100644
--- a/reference/expected/expected.void/op_destructor.md
+++ b/reference/expected/expected.void/op_destructor.md
@@ -2,7 +2,7 @@
 * expected[meta header]
 * function[meta id-type]
 * std[meta namespace]
-* expected&amp;lt;void,E&amp;gt;[meta class]
+* expected.void[meta class]
 * cpp23[meta cpp]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected&lt;cv void, E&gt; -- expected/expected.void: ページ構造を調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void.html"/>
      <id>a97b34fc918f85ea6c1705856c12e04491d1b978:reference/expected/expected.void.md</id>
      <updated>2023-02-09T11:47:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void.md b/reference/expected/expected.void.md
new file mode 100644
index 000000000..1b909048f
--- /dev/null
+++ b/reference/expected/expected.void.md
@@ -0,0 +1,24 @@
+# expected&amp;lt;cv void, E&amp;gt;
+* expected[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  // プライマリテンプレート
+  template&amp;lt;class T, class E&amp;gt;
+  class expected;
+
+  // T=cv void 部分特殊化テンプレート
+  template&amp;lt;class T, class E&amp;gt;
+    requires is_void_v&amp;lt;T&amp;gt;
+  class expected&amp;lt;T, E&amp;gt;;
+}
+```
+* expected[link expected.md]
+* is_void_v[link /reference/type_traits/is_void.md]
+
+このページは`expected&amp;lt;cv void, E&amp;gt;`部分特殊化テンプレートに対応するプレースホルダです。
+
+`expected`クラスの説明は[`expected&amp;lt;E, E&amp;gt;`プライマリテンプレート](expected.md)ページを参照してください。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected/expected.void: ページ構造を調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_constructor.html"/>
      <id>a97b34fc918f85ea6c1705856c12e04491d1b978:reference/expected/expected.void/op_constructor.md</id>
      <updated>2023-02-09T11:47:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_constructor.md b/reference/expected/expected.void/op_constructor.md
index 778760f7a..68eca5a47 100644
--- a/reference/expected/expected.void/op_constructor.md
+++ b/reference/expected/expected.void/op_constructor.md
@@ -2,7 +2,7 @@
 * expected[meta header]
 * function[meta id-type]
 * std[meta namespace]
-* expected[meta class]
+* expected&amp;lt;void,E&amp;gt;[meta class]
 * cpp23[meta cpp]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- expected/expected.void: ページ構造を調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.void/op_destructor.html"/>
      <id>a97b34fc918f85ea6c1705856c12e04491d1b978:reference/expected/expected.void/op_destructor.md</id>
      <updated>2023-02-09T11:47:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.void/op_destructor.md b/reference/expected/expected.void/op_destructor.md
index 9e18dce50..aa71c726d 100644
--- a/reference/expected/expected.void/op_destructor.md
+++ b/reference/expected/expected.void/op_destructor.md
@@ -2,7 +2,7 @@
 * expected[meta header]
 * function[meta id-type]
 * std[meta namespace]
-* expected[meta class]
+* expected&amp;lt;void,E&amp;gt;[meta class]
 * cpp23[meta cpp]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
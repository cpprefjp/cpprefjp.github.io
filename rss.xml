<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-01-08T13:38:49.451091</updated>
  <id>093657ea-4ab5-4d7a-bf08-9d54bdc44c5c</id>

  
    <entry>
      <title>extents -- mdspan/extents: refinements(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents.html"/>
      <id>d862f0ab454aeab0a7659295980f7915b346cf72:reference/mdspan/extents.md</id>
      <updated>2024-01-08T22:35:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents.md b/reference/mdspan/extents.md
index 730d8c84b..3851a56db 100644
--- a/reference/mdspan/extents.md
+++ b/reference/mdspan/extents.md
@@ -16,14 +16,28 @@ namespace std {
 * see below[italic]
 
 ## 概要
-`extents`は、多次元配列の次元数、各次元の要素数、要素数が静的（コンパイル時）または動的（プログラム実行時）いずれのタイミングで指定されるかを表現する。
+`extents`は、多次元配列の次元数(rank)と各次元の要素数(extent)を表現する。
 多次元配列ビュー[`std::mdspan`](mdspan.md)に対して、多次元配列のサイズを指示するために用いる。
 
+`extents`の特殊化は[`regular`](/reference/concepts/regular.md)のモデルであり、かつ[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)である。
+
+### 要素数の動的／静的指定
+多次元配列における次元の要素数が静的（コンパイル時）または動的（プログラム実行時）いずれのタイミングで決定するかを、各次元毎に指定する。
+
 - 多次元配列の次元数は`sizeof...(Extents)`に等しい
-- `Extents`要素のうち[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しい次元は、動的要素数(dynamic extent)となる
-- それ以外の`Extents`要素の次元は、静的要素数(static extent)となる
+- `Extents`要素が[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しい次元は、動的要素数(dynamic extent)となる
+- `Extents`要素がコンパイル時に整数値指定された次元は、静的要素数(static extent)となる
 
-`extents`の特殊化は[`regular`](/reference/concepts/regular.md)のモデルであり、かつ[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)である。
+`extents`は、下記の説明専用メンバ変数を保持する。
+
+```cpp
+array&amp;lt;IndexType, rank_dynamic()&amp;gt; dynamic-extents;
+```
+* array[link /reference/array/array.md]
+* rank_dynamic()[link extents/rank_dynamic.md]
+
+`extents`オブジェクトサイズ最小化のため、動的要素数次元のサイズ情報のみを`IndexType`型配列として管理する。
+動的要素数次元のサイズ情報は非型テンプレートパラメータとして型情報に埋め込まれるため、プログラム実行時のメモリ使用量には影響しない。
 
 ### エイリアステンプレート
 エイリアステンプレート`dextents`は、次元数`Rank`かつ全次元が動的要素数で指定される`extents`を生成する。
@@ -53,7 +67,7 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `index_type` | `IndexType` | C++23 |
-| `size_type`  | [`make_unsigned_t`](/reference/type_traits/make_unsigned.md)`&amp;lt;index_type&amp;gt;` | C++23 |
+| `size_type`  | [`make_unsigned_t`](/reference/type_traits/make_unsigned.md)`&amp;lt;IndexType&amp;gt;` | C++23 |
 | `rank_type`  | `size_t` | C++23 |
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extent -- mdspan/extents: refinements(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/extent.html"/>
      <id>d862f0ab454aeab0a7659295980f7915b346cf72:reference/mdspan/extents/extent.md</id>
      <updated>2024-01-08T22:35:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/extent.md b/reference/mdspan/extents/extent.md
index 88ac76094..d27bd5596 100644
--- a/reference/mdspan/extents/extent.md
+++ b/reference/mdspan/extents/extent.md
@@ -14,7 +14,7 @@ constexpr index_type extent(rank_type i) const noexcept;
 
 
 ## 事前条件
-`i &amp;lt;` [`rank()`](rank.md)が`true`
+`i &amp;lt;` [`rank()`](rank.md)
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/extents: refinements(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_constructor.html"/>
      <id>d862f0ab454aeab0a7659295980f7915b346cf72:reference/mdspan/extents/op_constructor.md</id>
      <updated>2024-01-08T22:35:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_constructor.md b/reference/mdspan/extents/op_constructor.md
index 2a0487d24..09e213fd7 100644
--- a/reference/mdspan/extents/op_constructor.md
+++ b/reference/mdspan/extents/op_constructor.md
@@ -88,7 +88,7 @@ constexpr explicit(N != rank_dynamic())
 #include &amp;lt;span&amp;gt;
 
 using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
-using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extents&amp;gt;;
+using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
 
 int main()
 {
@@ -127,6 +127,8 @@ int main()
   }
 }
 ```
+* std::extents[link ../extents.md]
+* std::span[link /reference/span/span.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- mdspan/extents: refinements(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_deduction_guide.html"/>
      <id>d862f0ab454aeab0a7659295980f7915b346cf72:reference/mdspan/extents/op_deduction_guide.md</id>
      <updated>2024-01-08T22:35:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_deduction_guide.md b/reference/mdspan/extents/op_deduction_guide.md
index 7dce8c13c..29d65744b 100644
--- a/reference/mdspan/extents/op_deduction_guide.md
+++ b/reference/mdspan/extents/op_deduction_guide.md
@@ -22,7 +22,7 @@ namespace std {
 
 ## 例
 ```cpp example
-#include &amp;lt;concept&amp;gt;
+#include &amp;lt;concepts&amp;gt;
 #include &amp;lt;mdspan&amp;gt;
 
 int main()
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan/extents: refinements(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_equal.html"/>
      <id>d862f0ab454aeab0a7659295980f7915b346cf72:reference/mdspan/extents/op_equal.md</id>
      <updated>2024-01-08T22:35:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_equal.md b/reference/mdspan/extents/op_equal.md
index cf11302ba..d59fa4319 100644
--- a/reference/mdspan/extents/op_equal.md
+++ b/reference/mdspan/extents/op_equal.md
@@ -23,7 +23,7 @@ friend constexpr bool operator!=(
 
 
 ## 戻り値
-`lhs`と`rhs`の次元数が等しく、かつ全事前の要素数が等しいときに`true`を返す。そうでなければ`false`を返す。
+`lhs`と`rhs`の次元数[`rank`](rank.md)が等しく、かつ全次元の要素数[`extent`](extent.md)が等しいときに`true`を返す。そうでなければ`false`を返す。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_extent -- mdspan/extents: refinements(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/static_extent.html"/>
      <id>d862f0ab454aeab0a7659295980f7915b346cf72:reference/mdspan/extents/static_extent.md</id>
      <updated>2024-01-08T22:35:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/static_extent.md b/reference/mdspan/extents/static_extent.md
index 5c324a3a9..d8cbe1b13 100644
--- a/reference/mdspan/extents/static_extent.md
+++ b/reference/mdspan/extents/static_extent.md
@@ -14,7 +14,7 @@ static constexpr size_t static_extent(rank_type i) noexcept;
 
 
 ## 事前条件
-`i &amp;lt;` [`rank()`](rank.md)が`true`
+`i &amp;lt;` [`rank()`](rank.md)
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan/extents: refinements(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>d862f0ab454aeab0a7659295980f7915b346cf72:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-08T22:35:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
index 773767c47..1163ecf4d 100644
--- a/reference/mdspan/layout_stride.md
+++ b/reference/mdspan/layout_stride.md
@@ -16,7 +16,7 @@ namespace std {
 * mapping[link mapping.md.nolink]
 
 ## 概要
-`layout_right`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定したレイアウトマッピングを表現するポリシークラスである。
+`layout_stride`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定したレイアウトマッピングを表現するポリシークラスである。
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extent -- mdspan/extents: some fixes(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/extent.html"/>
      <id>1ddfc8dbf8651be1d6fd1045c0513e9defac386d:reference/mdspan/extents/extent.md</id>
      <updated>2024-01-08T18:46:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/extent.md b/reference/mdspan/extents/extent.md
index 1c9827b18..88ac76094 100644
--- a/reference/mdspan/extents/extent.md
+++ b/reference/mdspan/extents/extent.md
@@ -47,8 +47,8 @@ int main()
   assert(ext2.extent(1) == 10);
 }
 ```
-* extent()[color ff0000]
-* static_extent()[link static_extent.md]
+* extent[color ff0000]
+* static_extent[link static_extent.md]
 * std::extents[link ../extents.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- mdspan/extents: some fixes(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_deduction_guide.html"/>
      <id>1ddfc8dbf8651be1d6fd1045c0513e9defac386d:reference/mdspan/extents/op_deduction_guide.md</id>
      <updated>2024-01-08T18:46:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_deduction_guide.md b/reference/mdspan/extents/op_deduction_guide.md
index 753582403..7dce8c13c 100644
--- a/reference/mdspan/extents/op_deduction_guide.md
+++ b/reference/mdspan/extents/op_deduction_guide.md
@@ -29,11 +29,7 @@ int main()
 {
   // 動的要素数 3x3 の2次元配列サイズ
   std::extents ext3x3{3, 3};
-
-  static_assert(std::same_as&amp;lt;
-    decltype(ext3x3),
-    std::dextens&amp;lt;2, std::dynamic_extent, std::dynamic_extent&amp;gt;
-  &amp;gt;);
+  static_assert(std::same_as&amp;lt;decltype(ext3x3), std::dextents&amp;lt;size_t, 2&amp;gt;&amp;gt;);
 }
 ```
 * std::extents[link ../extents.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_extent -- mdspan/extents: some fixes(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/static_extent.html"/>
      <id>1ddfc8dbf8651be1d6fd1045c0513e9defac386d:reference/mdspan/extents/static_extent.md</id>
      <updated>2024-01-08T18:46:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/static_extent.md b/reference/mdspan/extents/static_extent.md
index 40dcde801..5c324a3a9 100644
--- a/reference/mdspan/extents/static_extent.md
+++ b/reference/mdspan/extents/static_extent.md
@@ -47,8 +47,8 @@ int main()
   assert(ext2.extent(1) == 10);
 }
 ```
-* static_extent()[color ff0000]
-* extent()[link extent.md]
+* static_extent[color ff0000]
+* extent[link extent.md]
 * std::extents[link ../extents.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extents -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents.md b/reference/mdspan/extents.md
index 776ae8633..730d8c84b 100644
--- a/reference/mdspan/extents.md
+++ b/reference/mdspan/extents.md
@@ -17,7 +17,7 @@ namespace std {
 
 ## 概要
 `extents`は、多次元配列の次元数、各次元の要素数、要素数が静的（コンパイル時）または動的（プログラム実行時）いずれのタイミングで指定されるかを表現する。
-多次元配列ビュー[`std::mdspan`](mdspan.md)に対して、多次元配列のサイズを指示するために用いられる。
+多次元配列ビュー[`std::mdspan`](mdspan.md)に対して、多次元配列のサイズを指示するために用いる。
 
 - 多次元配列の次元数は`sizeof...(Extents)`に等しい
 - `Extents`要素のうち[`dynamic_extent`](/reference/span/dynamic_extent.md)に等しい次元は、動的要素数(dynamic extent)となる
@@ -25,7 +25,8 @@ namespace std {
 
 `extents`の特殊化は[`regular`](/reference/concepts/regular.md)のモデルであり、かつ[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)である。
 
-エイリアステンプレート`dextents`は、全次元が動的要素数で指定される`extents`を生成する。
+### エイリアステンプレート
+エイリアステンプレート`dextents`は、次元数`Rank`かつ全次元が動的要素数で指定される`extents`を生成する。
 例えば`dextents&amp;lt;size_t, 2&amp;gt;`は`extents&amp;lt;size_t, dynamic_extent, dynamic_extent&amp;gt;`の略記となる。
 
 
@@ -39,12 +40,12 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](extents/op_constructor.md.nolink) | コンストラクタ | C++23 |
+| [`(constructor)`](extents/op_constructor.md) | コンストラクタ | C++23 |
 | `(destructor)`  | デストラクタ   | C++23 |
-| [`rank`](extents/rank.md.nolink) | 多次元配列の次元数を取得する | C++23 |
-| [`rank_dynamic`](extents/rank_dynamic.md.nolink) | 多次元配列のうち動的要素数に指定された次元数を取得する | C++23 |
-| [`static_extent`](extents/static_extent.md.nolink) | 指定次元の静的要素数を取得する | C++23 |
-| [`extent`](extents/extent.md.nolink) | 指定次元の要素数を取得する | C++23 |
+| [`rank`](extents/rank.md) | 多次元配列の次元数を取得する | C++23 |
+| [`rank_dynamic`](extents/rank_dynamic.md) | 多次元配列のうち動的要素数に指定された次元数を取得する | C++23 |
+| [`static_extent`](extents/static_extent.md) | 指定次元の静的要素数を取得する | C++23 |
+| [`extent`](extents/extent.md) | 指定次元の要素数を取得する | C++23 |
 
 
 ## メンバ型
@@ -60,15 +61,15 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`operator==`](extents/op_equal.md.nolink) | 等値比較 | C++23 |
-| [`operator!=`](extents/op_equal.md.nolink) | 非等値比較 (`==`により使用可能) | C++23 |
+| [`operator==`](extents/op_equal.md) | 等値比較 | C++23 |
+| [`operator!=`](extents/op_equal.md) | 非等値比較 (`==`により使用可能) | C++23 |
 
 
 ## 推論補助
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(deduction_guide)`](extents/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23 |
+| [`(deduction_guide)`](extents/op_deduction_guide.md) | クラステンプレートの推論補助 | C++23 |
 
 
 ## 例
@@ -77,21 +78,19 @@ namespace std {
 
 int main()
 {
-  // 固定サイズ 3x3 の2次元配列サイズ
-  std::extents&amp;lt;size_t, 2, 3, 3&amp;gt; ext3x3;
+  // 固定要素数 3x3 の2次元配列サイズ
+  std::extents&amp;lt;size_t, 3, 3&amp;gt; ext3x3;
 
-  // 動的サイズをもつ2次元配列サイズを 4x2 で初期化
-  using Ext2D = std::dextents&amp;lt;size_t, 2&amp;gt;;
-  Ext2D ext2d{4, 2};
+  // 動的要素数からなる2次元配列サイズを 4x2 で初期化
+  std::dextents&amp;lt;size_t, 2&amp;gt; ext2d{4, 2};
 
-  // 2個の動的次元(高さ,幅)と固定次元(RGBA;4)からなる3次元配列サイズ
+  // 2個の動的要素数(高さ,幅)と静的要素数(RGBA=4)からなる3次元配列サイズ
   using ColorImageExt = std::extents&amp;lt;size_t, std::dynamic_extent, std::dynamic_extent, 4&amp;gt;;
   ColorImageExt image_ext{128, 128};
 }
 ```
 * std::extents[color ff0000]
 * std::dextents[color ff0000]
-* std::dynamic_extent[link /reference/span/dynamic_extent.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extent -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/extent.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/extent.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/extent.md b/reference/mdspan/extents/extent.md
new file mode 100644
index 000000000..1c9827b18
--- /dev/null
+++ b/reference/mdspan/extents/extent.md
@@ -0,0 +1,76 @@
+# extent
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr index_type extent(rank_type i) const noexcept;
+```
+
+## 概要
+多次元配列サイズのうち`i`番目次元の要素数を取得する。
+
+
+## 事前条件
+`i &amp;lt;` [`rank()`](rank.md)が`true`
+
+
+## 戻り値
+`i`番目次元の要素数。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  static_assert(Ext3x4::static_extent(0) == 3);
+  static_assert(Ext3x4::static_extent(1) == 4);
+  Ext3x4 ext1;
+  assert(ext1.extent(0) == 3);
+  assert(ext1.extent(1) == 4);
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  static_assert(Ext3xN::static_extent(0) == 3);
+  static_assert(Ext3xN::static_extent(1) == std::dynamic_extent);
+  Ext3xN ext2{10};
+  assert(ext2.extent(0) == 3);
+  assert(ext2.extent(1) == 10);
+}
+```
+* extent()[color ff0000]
+* static_extent()[link static_extent.md]
+* std::extents[link ../extents.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`static_extent`](static_extent.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_constructor.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/op_constructor.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_constructor.md b/reference/mdspan/extents/op_constructor.md
new file mode 100644
index 000000000..2a0487d24
--- /dev/null
+++ b/reference/mdspan/extents/op_constructor.md
@@ -0,0 +1,149 @@
+# コンストラクタ
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr extents() noexcept = default;  // (1)
+
+template&amp;lt;class OtherIndexType, size_t... OtherExtents&amp;gt;
+constexpr explicit(see below)
+  extents(const extents&amp;lt;OtherIndexType, OtherExtents...&amp;gt;&amp;amp; other) noexcept;  // (2)
+
+template&amp;lt;class... OtherIndexTypes&amp;gt;
+constexpr explicit extents(OtherIndexTypes... exts) noexcept;  // (3)
+
+template&amp;lt;class OtherIndexType, size_t N&amp;gt;
+constexpr explicit(N != rank_dynamic())
+  extents(span&amp;lt;OtherIndexType, N&amp;gt; exts) noexcept;  // (4)
+
+template&amp;lt;class OtherIndexType, size_t N&amp;gt;
+constexpr explicit(N != rank_dynamic())
+  extents(const array&amp;lt;OtherIndexType, N&amp;gt;&amp;amp; exts) noexcept;  // (5)
+```
+* see below[italic]
+* rank_dynamic()[link rank_dynamic.md]
+* span[link /reference/span/span.md]
+* array[link /reference/array/array.md]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : 他`extents`からの変換コンストラクタ
+- (3) : 要素数を値リストで設定するコンストラクタ
+- (4) : 要素数を`span`で設定するコンストラクタ
+- (5) : 要素数を`array`で設定するコンストラクタ
+
+
+## テンプレートパラメータ制約
+- (2) :
+    - `sizeof...(OtherExtents) ==` [`rank()`](rank.md)が`ture`、かつ
+    - `((OtherExtents == dynamic_extent || Extents == dynamic_extent || OtherExtents == Extents) &amp;amp;&amp;amp; ...)`が`ture`であること
+- (3) : `N`を`sizeof...(OtherIndexTypes)`、`exts_arr`を[`array`](/reference/array/array.md)`&amp;lt;index_type, N&amp;gt;{static_cast&amp;lt;index_type&amp;gt;(std:move(exts))...}`としたとき
+    - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherIndexTypes, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`ture`、かつ
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, OtherIndexTypes&amp;gt; &amp;amp;&amp;amp; ...)`が`ture`、かつ
+    - `N ==` [`rank_dynamic()`](rank_dynamic.md) `|| N ==` [`rank()`](rank.md)が`true`であること
+- (4), (5) :
+    - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const OtherIndexTypes&amp;amp;, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`ture`、かつ
+    - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_convertible.md)`&amp;lt;index_type, const OtherIndexTypes&amp;amp;&amp;gt; &amp;amp;&amp;amp; ...)`が`ture`、かつ
+    - `N ==` [`rank_dynamic()`](rank_dynamic.md) `|| N ==` [`rank()`](rank.md)が`true`であること
+
+
+## 事前条件
+- (2) : それぞれ`r`番目の次元が静的要素数に対して要素数が`other.`[`extent`](extent.md)`(r)`と等しく、かつ
+    - `sizeof...(OtherExtents) == 0`、もしくは
+    - `other`の全ての次元`r`において`other.extent(r)`が`index_type`型で表現可能な値であること
+- (3) : `N`を`sizeof...(OtherIndexTypes)`、`exts_arr`を[`array`](/reference/array/array.md)`&amp;lt;index_type, N&amp;gt;{static_cast&amp;lt;index_type&amp;gt;(std:move(exts))...}`としたとき
+    - `N !=` [`rank_dynamic()`](rank_dynamic.md)ならば、それぞれ`r`番目の次元が静的要素数に対して要素数が`exts_arr[r]`と等しく、かつ
+    - `sizeof...(exts) == 0`もしくは`exts`の各要素が`index_type`型で表現可能な値であること
+- (4), (5) : `N !=` [`rank_dynamic()`](rank_dynamic.md)ならば、それぞれ`r`番目の次元が静的要素数に対して要素数が`exts[r]`と等しく、かつ
+    - `N == 0`、もしくは
+    - `exts`の各要素が`index_type`型で表現可能な値であること
+
+
+## 効果
+- (4), (5) : 動的要素数に指定された各次元の要素数を`exts`の値を用いて初期化する。
+
+
+## 事後条件
+- (2) : `*this == other`
+- (3) : `exts_arr`を[`array`](/reference/array/array.md)`&amp;lt;index_type, N&amp;gt;{static_cast&amp;lt;index_type&amp;gt;(std:move(exts))...}`としたとき、`*this == extents(exts_arr)`（オーバーロード(5)の効果を参照）
+
+
+## 例外
+投げない
+
+
+## explicitになる条件
+- (2) : `(((Extents != dynamic_extent) &amp;amp;&amp;amp; (OtherExtents == dynamic_extent)) || ... ) || (numeric_limits&amp;lt;index_type&amp;gt;::max() &amp;lt; numeric_limits&amp;lt;OtherIndexType&amp;gt;::max())`
+- (4), (5) : `N !=` [`rank_dynamic()`](rank_dynamic.md)
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;span&amp;gt;
+
+using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extents&amp;gt;;
+
+int main()
+{
+  // (1) : デフォルトコンストラクタ
+  {
+    Ext3x4 ext1_3x4;
+    Ext3xN ext1_3xN;
+  }
+  // (2) : 変換コンストラクタ
+  {
+    Ext3x4 ext1_3x4;
+    Ext3xN ext1_3xN = ext1_3x4;
+    assert(ext1_3xN.extent(1) == 4);
+  }
+  // (3) : 要素数を値リストで設定するコンストラクタ
+  {
+    Ext3xN ext3_all{3, 4};  // 全次元を設定
+    Ext3xN ext3_dyn{4};     // 動的要素数のみ設定
+    assert(ext3_all == ext3_dyn);
+  }
+  // (4) : 要素数をspanで設定するコンストラクタ
+  {
+    int exts_all[] = {3, 4};
+    int exts_dyn[] = {4};
+    Ext3xN ext4_all{ std::span{exts_all} };  // 全次元を設定(explicit)
+    Ext3xN ext4_dyn = std::span{exts_dyn};   // 動的要素数のみ設定
+    assert(ext4_all == ext4_dyn);
+  }
+  // (5) : 要素数をarrayで設定するコンストラクタ
+  {
+    std::array exts_all{3, 4};
+    std::array exts_dyn{4};
+    Ext3xN ext5_all{ exts_all };  // 全次元を設定(explicit)
+    Ext3xN ext5_dyn = exts_dyn;   // 動的要素数のみ設定
+    assert(ext5_all == ext5_dyn);
+  }
+}
+```
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [P2599R2 `index_type` &amp;amp; `size_type` in `mdspan`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2599r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_deduction_guide.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/op_deduction_guide.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_deduction_guide.md b/reference/mdspan/extents/op_deduction_guide.md
new file mode 100644
index 000000000..753582403
--- /dev/null
+++ b/reference/mdspan/extents/op_deduction_guide.md
@@ -0,0 +1,59 @@
+# 推論補助
+* mdspan[meta header]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class... Integrals&amp;gt;
+  explicit extents(Integrals...) -&amp;gt; see below;
+}
+```
+* see below[italic]
+
+## 概要
+`std::extents`クラステンプレートの型推論補助。多次元配列の動的要素数リストから[`std::dextents`](../extents.md)`&amp;lt;size_t, sizeof...(Integrals)&amp;gt;`型を推論する。
+
+
+## テンプレートパラメータ制約
+[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Integrals, size_t&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+
+
+## 例
+```cpp example
+#include &amp;lt;concept&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  // 動的要素数 3x3 の2次元配列サイズ
+  std::extents ext3x3{3, 3};
+
+  static_assert(std::same_as&amp;lt;
+    decltype(ext3x3),
+    std::dextens&amp;lt;2, std::dynamic_extent, std::dynamic_extent&amp;gt;
+  &amp;gt;);
+}
+```
+* std::extents[link ../extents.md]
+* std::dextents[link ../extents.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_equal.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/op_equal.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_equal.md b/reference/mdspan/extents/op_equal.md
new file mode 100644
index 000000000..cf11302ba
--- /dev/null
+++ b/reference/mdspan/extents/op_equal.md
@@ -0,0 +1,70 @@
+# operator==
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class OtherIndexType, size_t... OtherExtents&amp;gt;
+friend constexpr bool operator==(
+  const extents&amp;amp; lhs,
+  const extents&amp;lt;OtherIndexType, OtherExtents...&amp;gt;&amp;amp; rhs) noexcept;
+
+//operator==により、以下のオーバーロードが使用可能になる        
+template&amp;lt;class OtherIndexType, size_t... OtherExtents&amp;gt;
+friend constexpr bool operator!=(
+  const extents&amp;amp; lhs,
+  const extents&amp;lt;OtherIndexType, OtherExtents...&amp;gt;&amp;amp; rhs) noexcept;
+```
+
+## 概要
+`extents`の等値比較を行う。
+
+
+## 戻り値
+`lhs`と`rhs`の次元数が等しく、かつ全事前の要素数が等しいときに`true`を返す。そうでなければ`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  Ext3x4 ext1;
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  Ext3xN ext2{4};
+
+  assert(ext1 == ext2);
+}
+```
+* ==[color ff0000]
+* std::extents[link ../extents.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rank -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/rank.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/rank.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/rank.md b/reference/mdspan/extents/rank.md
new file mode 100644
index 000000000..fc1e9e5ad
--- /dev/null
+++ b/reference/mdspan/extents/rank.md
@@ -0,0 +1,65 @@
+# rank
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+static constexpr rank_type rank() noexcept;
+```
+
+## 概要
+多次元配列サイズの次元数を取得する。
+
+
+## 戻り値
+`sizeof...(Extents)`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  static_assert(Ext3x4::rank() == 2);
+  static_assert(Ext3x4::rank_dynamic() == 0);
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  static_assert(Ext3xN::rank() == 2);
+  static_assert(Ext3xN::rank_dynamic() == 1);
+}
+```
+* rank()[color ff0000]
+* rank_dynamic()[link rank_dynamic.md]
+* std::extents[link ../extents.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`rank_dynamic`](rank_dynamic.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rank_dynamic -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/rank_dynamic.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/rank_dynamic.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/rank_dynamic.md b/reference/mdspan/extents/rank_dynamic.md
new file mode 100644
index 000000000..a5b2fdcda
--- /dev/null
+++ b/reference/mdspan/extents/rank_dynamic.md
@@ -0,0 +1,65 @@
+# rank_dynamic
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+static constexpr rank_type rank_dynamic() noexcept;
+```
+
+## 概要
+多次元配列サイズの次元数うち、動的要素数に指定された次元数を取得する。
+
+
+## 戻り値
+動的要素数に指定された次元数
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  static_assert(Ext3x4::rank() == 2);
+  static_assert(Ext3x4::rank_dynamic() == 0);
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  static_assert(Ext3xN::rank() == 2);
+  static_assert(Ext3xN::rank_dynamic() == 1);
+}
+```
+* rank_dynamic()[color ff0000]
+* rank()[link rank.md]
+* std::extents[link ../extents.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`rank`](rank.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>static_extent -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/static_extent.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/extents/static_extent.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/static_extent.md b/reference/mdspan/extents/static_extent.md
new file mode 100644
index 000000000..40dcde801
--- /dev/null
+++ b/reference/mdspan/extents/static_extent.md
@@ -0,0 +1,76 @@
+# static_extent
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+static constexpr size_t static_extent(rank_type i) noexcept;
+```
+
+## 概要
+多次元配列サイズのうち`i`番目次元の静的要素数を取得する。
+
+
+## 事前条件
+`i &amp;lt;` [`rank()`](rank.md)が`true`
+
+
+## 戻り値
+`i`番目次元の静的要素数。同次元が動的要素数の場合は[`std::dynamic_extent`](/reference/span/dynamic_extent.md)を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  static_assert(Ext3x4::static_extent(0) == 3);
+  static_assert(Ext3x4::static_extent(1) == 4);
+  Ext3x4 ext1;
+  assert(ext1.extent(0) == 3);
+  assert(ext1.extent(1) == 4);
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  static_assert(Ext3xN::static_extent(0) == 3);
+  static_assert(Ext3xN::static_extent(1) == std::dynamic_extent);
+  Ext3xN ext2{10};
+  assert(ext2.extent(0) == 3);
+  assert(ext2.extent(1) == 10);
+}
+```
+* static_extent()[color ff0000]
+* extent()[link extent.md]
+* std::extents[link ../extents.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`extent`](extent.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/layout_left.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left.md b/reference/mdspan/layout_left.md
index 39a9078ad..2c01a5492 100644
--- a/reference/mdspan/layout_left.md
+++ b/reference/mdspan/layout_left.md
@@ -38,8 +38,8 @@ int main()
   double arr[] = {1, 4, 2, 5, 3, 6};
 
   // 要素数2x3の2次元配列／列優先レイアウト
-  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
-  std::mdspan&amp;lt;double, Dim2x3, std::layout_left&amp;gt; mat{arr};
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  std::mdspan&amp;lt;double, Ext2x3, std::layout_left&amp;gt; mat{arr};
 
   for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
     for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/layout_right.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right.md b/reference/mdspan/layout_right.md
index a01e392bf..67c72013b 100644
--- a/reference/mdspan/layout_right.md
+++ b/reference/mdspan/layout_right.md
@@ -38,8 +38,8 @@ int main()
   double arr[] = {1, 2, 3, 4, 5, 6};
 
   // 要素数2x3の2次元配列／行優先レイアウト
-  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
-  std::mdspan&amp;lt;double, Dim2x3, std::layout_right&amp;gt; mat{arr};
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  std::mdspan&amp;lt;double, Ext2x3, std::layout_right&amp;gt; mat{arr};
 
   for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
     for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan/extents: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>dc7da61b6fb966c11bc2363fdb4f46b683c78a63:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-08T18:38:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
index d83612403..773767c47 100644
--- a/reference/mdspan/layout_stride.md
+++ b/reference/mdspan/layout_stride.md
@@ -37,10 +37,10 @@ int main()
   double arr[] = {1, 2, 3, 0, 4, 5, 6, 0};
 
   // 要素数2x3の2次元配列／行優先かつパディングありレイアウト
-  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
   std::array&amp;lt;int, 2&amp;gt; strides{4, 1};
-  std::layout_stride::mapping&amp;lt;Dim2x3&amp;gt; mapping{{}, strides};
-  std::mdspan&amp;lt;double, Dim2x3, std::layout_stride&amp;gt; mat{arr, mapping};
+  std::layout_stride::mapping&amp;lt;Ext2x3&amp;gt; mapping{{}, strides};
+  std::mdspan&amp;lt;double, Ext2x3, std::layout_stride&amp;gt; mat{arr, mapping};
 
   for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
     for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_left.html&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(Fortran/Matlabスタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_right.html&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(C/C++スタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_stride.html&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;汎用ストライド配置レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_accessor -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/default_accessor.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/default_accessor.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/default_accessor.md b/reference/mdspan/default_accessor.md
index fd0a6d58f..9af53cfc5 100644
--- a/reference/mdspan/default_accessor.md
+++ b/reference/mdspan/default_accessor.md
@@ -43,6 +43,12 @@ namespace std {
 ### 言語
 - C++23
 
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
 
 ## 関連項目
 - [`mdspan`](mdspan.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extents -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/extents.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents.md b/reference/mdspan/extents.md
index 4e42d1044..776ae8633 100644
--- a/reference/mdspan/extents.md
+++ b/reference/mdspan/extents.md
@@ -85,7 +85,7 @@ int main()
   Ext2D ext2d{4, 2};
 
   // 2個の動的次元(高さ,幅)と固定次元(RGBA;4)からなる3次元配列サイズ
-  using ColorImageExt = std::dextents&amp;lt;size_t, std::dynamic_extent, std::dynamic_extent, 4&amp;gt;;
+  using ColorImageExt = std::extents&amp;lt;size_t, std::dynamic_extent, std::dynamic_extent, 4&amp;gt;;
   ColorImageExt image_ext{128, 128};
 }
 ```
@@ -102,6 +102,12 @@ int main()
 ### 言語
 - C++23
 
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
 
 ## 関連項目
 - [`mdspan`](mdspan.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/layout_left.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left.md b/reference/mdspan/layout_left.md
new file mode 100644
index 000000000..39a9078ad
--- /dev/null
+++ b/reference/mdspan/layout_left.md
@@ -0,0 +1,80 @@
+# layout_left
+* mdspan[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct layout_left {
+    template&amp;lt;class Extents&amp;gt;
+    class mapping;
+  };
+}
+```
+* Extents[link extents.md]
+* mapping[link mapping.md.nolink]
+
+## 概要
+`layout_left`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、FortranやMatlab多次元配列と互換性のある列優先(column major)レイアウトマッピングを表現するポリシークラスである。
+
+ポリシークラス名の由来は、多次元配列インデクスのうち最左次元が隣接配置（ストライド=1）されるところから来ている。
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`mapping`](mapping.md.nolink) | レイアウトマッピング | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 4, 2, 5, 3, 6};
+
+  // 要素数2x3の2次元配列／列優先レイアウト
+  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  std::mdspan&amp;lt;double, Dim2x3, std::layout_left&amp;gt; mat{arr};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::cout &amp;lt;&amp;lt; (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;) &amp;lt;&amp;lt; mat[i, j];
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* std::layout_left[color ff0000]
+* std::mdspan[link mdspan.md]
+* std::extents[link extents.md]
+
+### 出力
+```
+1 2 3
+4 5 6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_right`](layout_right.md)
+- [`layout_stride`](layout_stride.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/layout_right.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right.md b/reference/mdspan/layout_right.md
new file mode 100644
index 000000000..a01e392bf
--- /dev/null
+++ b/reference/mdspan/layout_right.md
@@ -0,0 +1,80 @@
+# layout_right
+* mdspan[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct layout_right {
+    template&amp;lt;class Extents&amp;gt;
+    class mapping;
+  };
+}
+```
+* Extents[link extents.md]
+* mapping[link mapping.md.nolink]
+
+## 概要
+`layout_right`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、C/C++多次元配列と互換性のある行優先(row major)レイアウトマッピングを表現するポリシークラスである。
+
+ポリシークラス名の由来は、多次元配列インデクスのうち最右次元が隣接配置（ストライド=1）されるところから来ている。
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`mapping`](mapping.md.nolink) | レイアウトマッピング | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 3, 4, 5, 6};
+
+  // 要素数2x3の2次元配列／行優先レイアウト
+  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  std::mdspan&amp;lt;double, Dim2x3, std::layout_right&amp;gt; mat{arr};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::cout &amp;lt;&amp;lt; (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;) &amp;lt;&amp;lt; mat[i, j];
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* std::layout_right[color ff0000]
+* std::mdspan[link mdspan.md]
+* std::extents[link extents.md]
+
+### 出力
+```
+1 2 3
+4 5 6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_left`](layout_left.md)
+- [`layout_stride`](layout_stride.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
new file mode 100644
index 000000000..d83612403
--- /dev/null
+++ b/reference/mdspan/layout_stride.md
@@ -0,0 +1,81 @@
+# layout_stride
+* mdspan[meta header]
+* class[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct layout_stride {
+    template&amp;lt;class Extents&amp;gt;
+    class mapping;
+  };
+}
+```
+* Extents[link extents.md]
+* mapping[link mapping.md.nolink]
+
+## 概要
+`layout_right`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定したレイアウトマッピングを表現するポリシークラスである。
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`mapping`](mapping.md.nolink) | レイアウトマッピング | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 3, 0, 4, 5, 6, 0};
+
+  // 要素数2x3の2次元配列／行優先かつパディングありレイアウト
+  using Dim2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  std::array&amp;lt;int, 2&amp;gt; strides{4, 1};
+  std::layout_stride::mapping&amp;lt;Dim2x3&amp;gt; mapping{{}, strides};
+  std::mdspan&amp;lt;double, Dim2x3, std::layout_stride&amp;gt; mat{arr, mapping};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::cout &amp;lt;&amp;lt; (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;) &amp;lt;&amp;lt; mat[i, j];
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* std::layout_stride[color ff0000]
+* std::mdspan[link mdspan.md]
+* std::extents[link extents.md]
+
+### 出力
+```
+1 2 3
+4 5 6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_left`](layout_left.md)
+- [`layout_right`](layout_right.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan/layout_*: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>6342d39bda99117b7e12ea563c26cbafb24a9058:reference/mdspan/mdspan.md</id>
      <updated>2024-01-08T15:46:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
index 96090e5f6..dc612051b 100644
--- a/reference/mdspan/mdspan.md
+++ b/reference/mdspan/mdspan.md
@@ -13,7 +13,7 @@ namespace std {
   class mdspan;
 }
 ```
-* layout_right[link layout_right.md.nolink]
+* layout_right[link layout_right.md]
 * default_accessor[link default_accessor.md]
 
 ## 概要
@@ -150,10 +150,17 @@ int main()
 4 5 6 
 ```
 
+
 ## バージョン
 ### 言語
 - C++23
 
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
 
 ## 関連項目
 - [`extents`](extents.md)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan/default_accessor: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>40ff58769d30e3b1b7b8d3fad48dfe98fb92dd7f:reference/mdspan.md</id>
      <updated>2024-01-08T00:18:00+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_left.md.nolink&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最左次元が隣接するレイアウトマッピング (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_right.md.nolink&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最右次元が隣接するレイアウトマッピング (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_stride.md.nolink&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;汎用ストライド配置レイアウトマッピング (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_accessor -- mdspan/default_accessor: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/default_accessor.html"/>
      <id>40ff58769d30e3b1b7b8d3fad48dfe98fb92dd7f:reference/mdspan/default_accessor.md</id>
      <updated>2024-01-08T00:18:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/default_accessor.md b/reference/mdspan/default_accessor.md
new file mode 100644
index 000000000..fd0a6d58f
--- /dev/null
+++ b/reference/mdspan/default_accessor.md
@@ -0,0 +1,53 @@
+# default_accessor
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class ElementType&amp;gt;
+  class default_accessor;
+}
+```
+
+## 概要
+`default_accessor`は、多次元配列ビュー[`mdspan`](mdspan.md)の要素アクセスデフォルト動作を定義する。
+
+`ElementType`は抽象クラス型もしくは配列型のいずれでもない完全型であること。
+
+`default_accessor`はアクセサポリシー要件を満たす。
+また`default_accessor`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`semiregular`](/reference/concepts/semiregular.md)のモデルである。
+
+## メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](default_accessor/op_constructor.md.nolink) | コンストラクタ | C++23 |
+| `(destructor)` | デストラクタ | C++23 |
+| [`access`](default_accessor/access.md.nolink) | 指定オフセット位置にある要素へアクセスする | C++23 |
+| [`offset`](default_accessor/offset.md.nolink) | 指定オフセット位置のハンドルを取得する | C++23 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `offset_policy`    | `default_accessor` | C++23 |
+| `element_type`     | `ElementType`  | C++23 |
+| `reference`        | `ElementType&amp;amp;` | C++23 |
+| `data_handle_type` | `ElementType*` | C++23 |
+
+
+## バージョン
+### 言語
+- C++23
+
+
+## 関連項目
+- [`mdspan`](mdspan.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [Reddit - Why is mdspan::offset_policy needed?](https://www.reddit.com/r/cpp/comments/cgc37m/why_is_mdspanoffset_policy_needed/)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan/default_accessor: 概要(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>40ff58769d30e3b1b7b8d3fad48dfe98fb92dd7f:reference/mdspan/mdspan.md</id>
      <updated>2024-01-08T00:18:00+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
index 20a2d6117..96090e5f6 100644
--- a/reference/mdspan/mdspan.md
+++ b/reference/mdspan/mdspan.md
@@ -14,7 +14,7 @@ namespace std {
 }
 ```
 * layout_right[link layout_right.md.nolink]
-* default_accessor[link default_accessor.md.nolink]
+* default_accessor[link default_accessor.md]
 
 ## 概要
 `mdspan`は、任意のメモリブロックに対して多次元配列のようにアクセスする機能を提供するクラスである。
@@ -23,7 +23,7 @@ namespace std {
 
 - [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_move_constructible.md)`&amp;lt;MDS&amp;gt;`が`true`、かつ
 - [`is_nothrow_move_assignable_v`](/reference/type_traits/is_nothrow_move_assignable.md)`&amp;lt;MDS&amp;gt;`が`true`、かつ
-- [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;MDS&amp;gt;`が1`true`となる。
+- [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;MDS&amp;gt;`が`true`となる。
 
 そのメンバ型`accessor_type`, `mapping_type`, `pointer`が[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であるとき、`mdspan`の特殊化もトリビアルコピー可能である。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
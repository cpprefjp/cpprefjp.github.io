<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-02-26T15:25:45.010210</updated>
  <id>2da9a9f5-c364-4a94-aa3e-e9df38d5c892</id>

  
    <entry>
      <title>コンパイル時アサート -- fix: 単にCWG 2518が適用された環境という (#1257)</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_assert.html"/>
      <id>49f914073a7b69b19b48acb6c0fb4c3d612a4b09:lang/cpp11/static_assert.md</id>
      <updated>2024-02-27T00:22:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_assert.md b/lang/cpp11/static_assert.md
index 5d4a674b9..c1369a8b8 100644
--- a/lang/cpp11/static_assert.md
+++ b/lang/cpp11/static_assert.md
@@ -28,7 +28,7 @@ static_assert(定数式, 文字列リテラル);
 - この宣言は、名前空間スコープ、ブロックスコープ、メンバ宣言といった場所で記述できる
 - 定数式が真であると評価された場合は何も効果がない。定数式が偽であると評価された場合は、指定された文字列リテラルを含む診断メッセージがコンパイラによって問題報告される。ただし、基本ソース文字集合に含まれない文字集合は、診断メッセージに表示することはコンパイラに要求されない
 - `static_assert`宣言では、新たな型やオブジェクトは宣言しない。また、実行時にサイズや時間コストは発生しない
-- (C++23以降 or CWG 2518が適用された環境): template文(もしくは適切な特殊化や[C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)の中の文)が実際にインスタンス化されるまで、`static_assert`文の宣言は遅延される。
+- (CWG 2518が適用された環境): template文(もしくは適切な特殊化や[C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)の中の文)が実際にインスタンス化されるまで、`static_assert`文の宣言は遅延される。
   - [C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)の解説を参照
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 -- fix: 単にCWG 2518が適用された環境という (#1257)</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>49f914073a7b69b19b48acb6c0fb4c3d612a4b09:lang/cpp17/if_constexpr.md</id>
      <updated>2024-02-27T00:22:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index 9b7f4953e..2b218c451 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -164,7 +164,7 @@ int main()
 }
 ```
 
-### (C++23以降 or CWG 2518が適用された環境) `static_assert`文に関する例外
+### (CWG 2518が適用された環境) `static_assert`文に関する例外
 
 上に述べたように、`constexpr if`文の中の文は廃棄文においても、非依存名の検証を行う。このため特に`static_assert`文を使う時に直感的ではない挙動を示していた。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>ends_with -- 一部リンクをN4950へのリンクに修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_ends_with.html"/>
      <id>95a829945546cc7d9e7871d69f54fc4e6f2d9add:reference/algorithm/ranges_ends_with.md</id>
      <updated>2024-02-26T02:15:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_ends_with.md b/reference/algorithm/ranges_ends_with.md
index e5cd294ea..87d51752d 100644
--- a/reference/algorithm/ranges_ends_with.md
+++ b/reference/algorithm/ranges_ends_with.md
@@ -156,4 +156,4 @@ inline constexpr ends_with_impl ends_with;
 
 
 ## 参照
-- [N4892 25 Algorithms library](https://timsong-cpp.github.io/cppwp/algorithms)
+- [N4950 27 Algorithms library](https://timsong-cpp.github.io/cppwp/n4950/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>starts_with -- 一部リンクをN4950へのリンクに修正</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_starts_with.html"/>
      <id>95a829945546cc7d9e7871d69f54fc4e6f2d9add:reference/algorithm/ranges_starts_with.md</id>
      <updated>2024-02-26T02:15:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_starts_with.md b/reference/algorithm/ranges_starts_with.md
index 562269501..42d002821 100644
--- a/reference/algorithm/ranges_starts_with.md
+++ b/reference/algorithm/ranges_starts_with.md
@@ -127,4 +127,4 @@ inline constexpr starts_with_impl starts_with;
 
 
 ## 参照
-- [N4892 25 Algorithms library](https://timsong-cpp.github.io/cppwp/algorithms)
+- [N4950 27 Algorithms library](https://timsong-cpp.github.io/cppwp/n4950/algorithms)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- 一部リンクをN4950へのリンクに修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>95a829945546cc7d9e7871d69f54fc4e6f2d9add:reference/ranges.md</id>
      <updated>2024-02-26T02:15:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 5f09f144f..0df15fe7a 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -430,5 +430,6 @@ range | adaptor(args...)
 
 ## 参照
 - [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
 - [P2278R4 `cbegin` should always return a constant iterator](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2278r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_rvalue_view -- 一部リンクをN4950へのリンクに修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_rvalue_view.html"/>
      <id>95a829945546cc7d9e7871d69f54fc4e6f2d9add:reference/ranges/as_rvalue_view.md</id>
      <updated>2024-02-26T02:15:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_rvalue_view.md b/reference/ranges/as_rvalue_view.md
index b849c1b65..68f163a31 100644
--- a/reference/ranges/as_rvalue_view.md
+++ b/reference/ranges/as_rvalue_view.md
@@ -180,4 +180,4 @@ constexpr explicit as_rvalue_view(V base);
 - [Visual C++](/implementation.md#visual_cpp): ?
 
 ## 参照
-- [N4950 24 Ranges library](https://timsong-cpp.github.io/cppwp/ranges)
+- [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join_with_view -- 一部リンクをN4950へのリンクに修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/join_with_view.html"/>
      <id>95a829945546cc7d9e7871d69f54fc4e6f2d9add:reference/ranges/join_with_view.md</id>
      <updated>2024-02-26T02:15:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/join_with_view.md b/reference/ranges/join_with_view.md
index bb7de3076..7e0fcfb80 100644
--- a/reference/ranges/join_with_view.md
+++ b/reference/ranges/join_with_view.md
@@ -161,4 +161,4 @@ hello-C++23-world
 - [`join_view`](join_view.md)
 
 ## 参照
-- [N4950 24 Ranges library](https://timsong-cpp.github.io/cppwp/ranges)
+- [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>repeat_view -- 一部リンクをN4950へのリンクに修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/repeat_view.html"/>
      <id>95a829945546cc7d9e7871d69f54fc4e6f2d9add:reference/ranges/repeat_view.md</id>
      <updated>2024-02-26T02:15:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/repeat_view.md b/reference/ranges/repeat_view.md
index 0f2af5d76..07c75def5 100644
--- a/reference/ranges/repeat_view.md
+++ b/reference/ranges/repeat_view.md
@@ -105,4 +105,4 @@ int main() {
 - [Visual C++](/implementation.md#visual_cpp): ?
 
 ## 参照
-- [N4917 26 Ranges library](https://timsong-cpp.github.io/cppwp/ranges)
+- [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- 一部リンクをN4950へのリンクに修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/repeat_view/iterator.html"/>
      <id>95a829945546cc7d9e7871d69f54fc4e6f2d9add:reference/ranges/repeat_view/iterator.md</id>
      <updated>2024-02-26T02:15:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/repeat_view/iterator.md b/reference/ranges/repeat_view/iterator.md
index 621a15c90..950dadf8f 100644
--- a/reference/ranges/repeat_view/iterator.md
+++ b/reference/ranges/repeat_view/iterator.md
@@ -130,4 +130,4 @@ namespace std::ranges {
 - [Visual C++](/implementation.md#visual_cpp): ?
 
 ## 参照
-- [N4917 26 Ranges library](https://timsong-cpp.github.io/cppwp/ranges)
+- [N4950 26 Ranges library](https://timsong-cpp.github.io/cppwp/n4950/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>to -- 一部リンクをN4950へのリンクに修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/to.html"/>
      <id>95a829945546cc7d9e7871d69f54fc4e6f2d9add:reference/ranges/to.md</id>
      <updated>2024-02-26T02:15:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/to.md b/reference/ranges/to.md
index 5edbbf82d..11cc00f23 100644
--- a/reference/ranges/to.md
+++ b/reference/ranges/to.md
@@ -214,4 +214,4 @@ int main() {
 
 ## 参照
 
-- [26.5.7.2 ranges::to](https://timsong-cpp.github.io/cppwp/range.utility.conv.to)
+- [26.5.7.2 ranges::to](https://timsong-cpp.github.io/cppwp/n4950/range.utility.conv.to)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_view -- transform_view: 例を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/transform_view.html"/>
      <id>badecd6938de5ed0c497e7ce6e9c50768e4d4040:reference/ranges/transform_view.md</id>
      <updated>2024-02-26T02:06:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/transform_view.md b/reference/ranges/transform_view.md
index 928b74277..fd2d1accb 100644
--- a/reference/ranges/transform_view.md
+++ b/reference/ranges/transform_view.md
@@ -104,6 +104,40 @@ int main() {
 149
 ```
 
+## 例 特定のメンバを選択する
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+struct Record {
+  int id = 0;
+  std::string name;
+};
+
+int main() {
+  using namespace std;
+  Record records[] = {
+    {1, &amp;#34;Alice&amp;#34;},
+    {2, &amp;#34;Bob&amp;#34;},
+    {3, &amp;#34;Charlie&amp;#34;}
+  };
+
+  for (int id : records | views::transform(&amp;amp;Record::id)) {
+    cout &amp;lt;&amp;lt; id &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* views::transform[color ff0000]
+
+### 出力
+```
+1
+2
+3
+```
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 -- chore: s/破棄文/廃棄文/ (#1257)</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>5ae498212b279218f89ee9a21bd0e901ce9a716c:lang/cpp17/if_constexpr.md</id>
      <updated>2024-02-26T00:04:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index a44aff7fb..9b7f4953e 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -166,7 +166,7 @@ int main()
 
 ### (C++23以降 or CWG 2518が適用された環境) `static_assert`文に関する例外
 
-上に述べたように、`constexpr if`文の中の文は破棄文においても、非依存名の検証を行う。このため特に`static_assert`文を使う時に直感的ではない挙動を示していた。
+上に述べたように、`constexpr if`文の中の文は廃棄文においても、非依存名の検証を行う。このため特に`static_assert`文を使う時に直感的ではない挙動を示していた。
 
 C++23以降、もしくはCWG 2518が適用された環境においては、template文(もしくは適切な特殊化や`constexpr if`文の中の文)が実際にインスタンス化されるまで、`static_assert`文の宣言は遅延される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時アサート -- fix: CWG 2518/P2593R1 を反映 (#1257)</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/static_assert.html"/>
      <id>79fc60a46544883f2f132639a33ff68adb99e3d4:lang/cpp11/static_assert.md</id>
      <updated>2024-02-25T20:16:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/static_assert.md b/lang/cpp11/static_assert.md
index ea9cab600..5d4a674b9 100644
--- a/lang/cpp11/static_assert.md
+++ b/lang/cpp11/static_assert.md
@@ -28,7 +28,8 @@ static_assert(定数式, 文字列リテラル);
 - この宣言は、名前空間スコープ、ブロックスコープ、メンバ宣言といった場所で記述できる
 - 定数式が真であると評価された場合は何も効果がない。定数式が偽であると評価された場合は、指定された文字列リテラルを含む診断メッセージがコンパイラによって問題報告される。ただし、基本ソース文字集合に含まれない文字集合は、診断メッセージに表示することはコンパイラに要求されない
 - `static_assert`宣言では、新たな型やオブジェクトは宣言しない。また、実行時にサイズや時間コストは発生しない
-
+- (C++23以降 or CWG 2518が適用された環境): template文(もしくは適切な特殊化や[C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)の中の文)が実際にインスタンス化されるまで、`static_assert`文の宣言は遅延される。
+  - [C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)の解説を参照
 
 ## 例
 ```cpp example
@@ -79,6 +80,7 @@ Boost Static Assertion Libraryが開発されたときに、コンパイル時
 
 ## 関連項目
 - [C++17 `static_assert`のメッセージ省略を許可](/lang/cpp17/extending_static_assert.md)
+- [C++17 constexpr if 文](/lang/cpp17/if_constexpr.md)
 - [C++23 定数式の文脈での`bool`への縮小変換を許可](/lang/cpp23/narrowing_contextual_conversions_to_bool.md)
 
 
@@ -87,4 +89,5 @@ Boost Static Assertion Libraryが開発されたときに、コンパイル時
 - [N1604 Proposal to Add Static Assertions to the Core Language (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1604.html)
 - [N1617 Proposal to Add Static Assertions to the Core Language (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1617.html)
 - [N1720 Proposal to Add Static Assertions to the Core Language (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html)
-
+- [P2593R1: Allowing static_assert(false)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2593r1.html)
+- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 -- fix: CWG 2518/P2593R1 を反映 (#1257)</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>79fc60a46544883f2f132639a33ff68adb99e3d4:lang/cpp17/if_constexpr.md</id>
      <updated>2024-02-25T20:16:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index ae6cd312b..a44aff7fb 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -164,6 +164,30 @@ int main()
 }
 ```
 
+### (C++23以降 or CWG 2518が適用された環境) `static_assert`文に関する例外
+
+上に述べたように、`constexpr if`文の中の文は破棄文においても、非依存名の検証を行う。このため特に`static_assert`文を使う時に直感的ではない挙動を示していた。
+
+C++23以降、もしくはCWG 2518が適用された環境においては、template文(もしくは適切な特殊化や`constexpr if`文の中の文)が実際にインスタンス化されるまで、`static_assert`文の宣言は遅延される。
+
+```cpp example
+#include &amp;lt;cstdint&amp;gt;
+template &amp;lt;class T&amp;gt;
+void f(T t) {
+  if constexpr (sizeof(T) == sizeof(std::int32_t)) {
+    use(t);
+  } else {
+    static_assert(false, &amp;#34;must be 32bit&amp;#34;);
+  }
+}
+
+void g(std::int8_t c) {
+  std::int32_t n = 0;
+  f(n); // OK: nはstd::int32_t型なので`use(t);`のほうがインスタンス化されるために、static_assert文は宣言されない。
+  f(c); // error: cはstd::int8_t型なので、static_assert文は宣言され、&amp;#34;must be 32bit&amp;#34;とコンパイラが診断メッセージを出力する
+}
+```
+
 ### 類似機能との比較
 
 `constexpr if`文の導入によってC++の`if`系の条件分岐は3種類になった。
@@ -429,6 +453,7 @@ template &amp;lt;int arg, typename ... Args&amp;gt; int do_something(Args... args) {
 - [P0292R1: constexpr if: A slightly different syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0292r1.html)
 - [P0292R2: constexpr if: A slightly different syntax](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0292r2.html)
 - [N4603 Editor&amp;#39;s Report -- Committee Draft, Standard for Programming Language C++](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/n4603.html)
+- [P2593R1: Allowing static_assert(false)](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2593r1.html)
 
 ### 2段階名前探索における注意点について
 
@@ -439,7 +464,9 @@ template &amp;lt;int arg, typename ... Args&amp;gt; int do_something(Args... args) {
 
 ### その他
 
+- [C++11 コンパイル時アサート](/lang/cpp11/static_assert.md)
 - [Static If I Had a Hammer - Andrei Alexandrescu](http://web.archive.org/web/20201202042515/https://channel9.msdn.com/Events/GoingNative/GoingNative-2012/Static-If-I-Had-a-Hammer)
 - [C++1z if constexpr文 - Faith and Brave - C++で遊ぼう](https://faithandbrave.hateblo.jp/entry/2016/12/22/171238)
 - [[cfe-dev] Clang getting involved](https://lists.llvm.org/pipermail/cfe-dev/2014-March/035801.html)
 - [`__if_exists` Statement | Microsoft Docs](https://docs.microsoft.com/ja-jp/cpp/cpp/if-exists-statement)
+- [Issue 2518: Conformance requirements and #error/#warning - WG21 CWG Issues](https://wg21.cmeerw.net/cwg/issue2518)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
</feed>
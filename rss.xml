<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2016-02-11T01:53:19.017910</updated>
  <id>b74ac816-4bc3-44fd-9ca2-844403c198ad</id>

  
    <entry>
      <title>assert -- assert: 有効な場合でも文法要素としては式となることを明記</title>
      <link href="http://cpprefjp.github.io/reference/cassert/assert.html"/>
      <id>8664d0219b402a9286b81155dc024b509838a858:reference/cassert/assert.md</id>
      <updated>2016-02-11 01:15:09 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cassert&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;assert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#if !defined(NDEBUG)&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ignore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;式が真であることを表明する。&lt;/p&gt;
&lt;p&gt;このマクロは、開発時に除去できるバグを見つけるために使用できる。「関数の引数がある範囲内の値でなければならない」「ある状態でこの関数を呼び出してはならない」といったことを表明することで、その関数を呼び出すユーザーに対する要件として設定できる。&lt;/p&gt;
&lt;p&gt;このマクロは、直前の&lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;（または&lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt;）のインクルード時点でマクロ&lt;code&gt;NDEBUG&lt;/code&gt;が定義されていなかった場合に有効となり、&lt;code&gt;NDEBUG&lt;/code&gt;が定義されていた場合は無効となる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;パラメータの式の型はスカラ型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有効な場合:&lt;ul&gt;
&lt;li&gt;パラメータの式を評価し、偽であった場合（&lt;code&gt;0&lt;/code&gt;と等しい場合）、式をテキスト化したものに加え&lt;code&gt;__FILE__&lt;/code&gt;, &lt;code&gt;__LINE__&lt;/code&gt;, &lt;code&gt;__func__&lt;/code&gt;の値を標準エラー出力に処理系定義の書式で書き込み、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort()&lt;/a&gt;&lt;/code&gt;関数を呼び出してプログラムを異常終了させる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無効な場合:&lt;ul&gt;
&lt;li&gt;パラメータの式は評価はされず、何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;有効・無効に関わらず&lt;code&gt;void&lt;/code&gt;型の式となる（文などにはならない）ので、カンマ演算子と組み合わせるなどして、式が書けるところならどこにでも記述することができる。&lt;/p&gt;
&lt;p&gt;マクロ&lt;code&gt;NDEBUG&lt;/code&gt;は、標準C++の言語およびライブラリでは定義しない。開発環境やユーザーが定義することとなる。&lt;code&gt;NDEBUG&lt;/code&gt;を定義せず&lt;code&gt;assert&lt;/code&gt;を有効にした設定を「デバッグビルド」、&lt;code&gt;NDEBUG&lt;/code&gt;を定義して&lt;code&gt;assert&lt;/code&gt;を無効にした設定を「リリースビルド」などととして複数のビルド設定を持つ開発環境がある。&lt;/p&gt;
&lt;p&gt;マクロ&lt;code&gt;NDEBUG&lt;/code&gt;の定義の状態を変えて&lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;をインクルードしなおすことで翻訳単位中で有効・無効を切り替えることも可能である。&lt;/p&gt;
&lt;p&gt;実行環境や入力によって起こりえるエラーに対するエラー処理としてこのマクロを使用すると無効化された場合に意図しない動作となることがあるので、別な手段として、例外、&lt;code&gt;bool&lt;/code&gt;型の返却値などを検討すること。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// パラメータxは、正数でなければならない&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// …xを使った処理…&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// プログラムが異常終了する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;prog.exe: prog.cc:6: void f(int): Assertion `x &amp;gt;= 0&#39; failed.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++14 - 19.3 [assertions]
  ただしC++としての規定はほとんど無く、ほぼ参照規格であるISO C 7.2の規定によるものとなっている。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/a/isocpp.org/d/topic/std-discussion/6EHDRo1A2EE/discussion&#34; target=&#34;_blank&#34;&gt;What does it mean for C++ that assert takes a scalar argument?&lt;/a&gt;
  パラメータの式の型についての要件は参照規格であるCの規定によるものであり、「スカラ型」が&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_scalar.html&#34;&gt;C++におけるスカラ型&lt;/a&gt;となるのか、あるいはCにおけるスカラ型の範囲に限定されるのか、少なくともC++14時点でははっきりしていない。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kazutoshi SATODA</name>
        <email>k_satoda@f2.dion.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>assert -- assert: パラメータの式の型についての要件を追記</title>
      <link href="http://cpprefjp.github.io/reference/cassert/assert.html"/>
      <id>fa2805723996c0a32a56dc1228876d167b78f214:reference/cassert/assert.md</id>
      <updated>2016-02-11 01:05:55 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cassert&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;assert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#if !defined(NDEBUG)&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ignore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;式が真であることを表明する。&lt;/p&gt;
&lt;p&gt;このマクロは、開発時に除去できるバグを見つけるために使用できる。「関数の引数がある範囲内の値でなければならない」「ある状態でこの関数を呼び出してはならない」といったことを表明することで、その関数を呼び出すユーザーに対する要件として設定できる。&lt;/p&gt;
&lt;p&gt;このマクロは、直前の&lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;（または&lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt;）のインクルード時点でマクロ&lt;code&gt;NDEBUG&lt;/code&gt;が定義されていなかった場合に有効となり、&lt;code&gt;NDEBUG&lt;/code&gt;が定義されていた場合は無効となる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;パラメータの式の型はスカラ型でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有効な場合:&lt;ul&gt;
&lt;li&gt;パラメータの式を評価し、偽であった場合（&lt;code&gt;0&lt;/code&gt;と等しい場合）、式をテキスト化したものに加え&lt;code&gt;__FILE__&lt;/code&gt;, &lt;code&gt;__LINE__&lt;/code&gt;, &lt;code&gt;__func__&lt;/code&gt;の値を標準エラー出力に処理系定義の書式で書き込み、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort()&lt;/a&gt;&lt;/code&gt;関数を呼び出してプログラムを異常終了させる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無効な場合:&lt;ul&gt;
&lt;li&gt;パラメータの式は評価はされず、何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;マクロ&lt;code&gt;NDEBUG&lt;/code&gt;は、標準C++の言語およびライブラリでは定義しない。開発環境やユーザーが定義することとなる。&lt;code&gt;NDEBUG&lt;/code&gt;を定義せず&lt;code&gt;assert&lt;/code&gt;を有効にした設定を「デバッグビルド」、&lt;code&gt;NDEBUG&lt;/code&gt;を定義して&lt;code&gt;assert&lt;/code&gt;を無効にした設定を「リリースビルド」などととして複数のビルド設定を持つ開発環境がある。&lt;/p&gt;
&lt;p&gt;マクロ&lt;code&gt;NDEBUG&lt;/code&gt;の定義の状態を変えて&lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;をインクルードしなおすことで翻訳単位中で有効・無効を切り替えることも可能である。&lt;/p&gt;
&lt;p&gt;実行環境や入力によって起こりえるエラーに対するエラー処理としてこのマクロを使用すると無効化された場合に意図しない動作となることがあるので、別な手段として、例外、&lt;code&gt;bool&lt;/code&gt;型の返却値などを検討すること。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// パラメータxは、正数でなければならない&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// …xを使った処理…&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// プログラムが異常終了する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;prog.exe: prog.cc:6: void f(int): Assertion `x &amp;gt;= 0&#39; failed.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++14 - 19.3 [assertions]
  ただしC++としての規定はほとんど無く、ほぼ参照規格であるISO C 7.2の規定によるものとなっている。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/a/isocpp.org/d/topic/std-discussion/6EHDRo1A2EE/discussion&#34; target=&#34;_blank&#34;&gt;What does it mean for C++ that assert takes a scalar argument?&lt;/a&gt;
  パラメータの式の型についての要件は参照規格であるCの規定によるものであり、「スカラ型」が&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/is_scalar.html&#34;&gt;C++におけるスカラ型&lt;/a&gt;となるのか、あるいはCにおけるスカラ型の範囲に限定されるのか、少なくともC++14時点でははっきりしていない。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kazutoshi SATODA</name>
        <email>k_satoda@f2.dion.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>assert -- assert: 効果の記述を詳細化</title>
      <link href="http://cpprefjp.github.io/reference/cassert/assert.html"/>
      <id>52c1bfdd4af1d125850256a7fbe717ead2569fbc:reference/cassert/assert.md</id>
      <updated>2016-02-11 00:56:14 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cassert&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;assert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#if !defined(NDEBUG)&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ignore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;式が真であることを表明する。&lt;/p&gt;
&lt;p&gt;このマクロは、開発時に除去できるバグを見つけるために使用できる。「関数の引数がある範囲内の値でなければならない」「ある状態でこの関数を呼び出してはならない」といったことを表明することで、その関数を呼び出すユーザーに対する要件として設定できる。&lt;/p&gt;
&lt;p&gt;このマクロは、直前の&lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;（または&lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt;）のインクルード時点でマクロ&lt;code&gt;NDEBUG&lt;/code&gt;が定義されていなかった場合に有効となり、&lt;code&gt;NDEBUG&lt;/code&gt;が定義されていた場合は無効となる。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有効な場合:&lt;ul&gt;
&lt;li&gt;パラメータの式を評価し、偽であった場合（&lt;code&gt;0&lt;/code&gt;と等しい場合）、式をテキスト化したものに加え&lt;code&gt;__FILE__&lt;/code&gt;, &lt;code&gt;__LINE__&lt;/code&gt;, &lt;code&gt;__func__&lt;/code&gt;の値を標準エラー出力に処理系定義の書式で書き込み、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort()&lt;/a&gt;&lt;/code&gt;関数を呼び出してプログラムを異常終了させる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無効な場合:&lt;ul&gt;
&lt;li&gt;パラメータの式は評価はされず、何もしない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;マクロ&lt;code&gt;NDEBUG&lt;/code&gt;は、標準C++の言語およびライブラリでは定義しない。開発環境やユーザーが定義することとなる。&lt;code&gt;NDEBUG&lt;/code&gt;を定義せず&lt;code&gt;assert&lt;/code&gt;を有効にした設定を「デバッグビルド」、&lt;code&gt;NDEBUG&lt;/code&gt;を定義して&lt;code&gt;assert&lt;/code&gt;を無効にした設定を「リリースビルド」などととして複数のビルド設定を持つ開発環境がある。&lt;/p&gt;
&lt;p&gt;マクロ&lt;code&gt;NDEBUG&lt;/code&gt;の定義の状態を変えて&lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;をインクルードしなおすことで翻訳単位中で有効・無効を切り替えることも可能である。&lt;/p&gt;
&lt;p&gt;実行環境や入力によって起こりえるエラーに対するエラー処理としてこのマクロを使用すると無効化された場合に意図しない動作となることがあるので、別な手段として、例外、&lt;code&gt;bool&lt;/code&gt;型の返却値などを検討すること。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// パラメータxは、正数でなければならない&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// …xを使った処理…&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// プログラムが異常終了する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;prog.exe: prog.cc:6: void f(int): Assertion `x &amp;gt;= 0&#39; failed.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++14 - 19.3 [assertions]
  ただしC++としての規定はほとんど無く、ほぼ参照規格であるISO C 7.2の規定によるものとなっている。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kazutoshi SATODA</name>
        <email>k_satoda@f2.dion.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>assert -- assert: エラー処理としての使用について中立的な記述とする</title>
      <link href="http://cpprefjp.github.io/reference/cassert/assert.html"/>
      <id>e29d2ab3f1c460f4fd1227e33c52563f2a95a54a:reference/cassert/assert.md</id>
      <updated>2016-02-11 00:48:51 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cassert&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;assert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#if !defined(NDEBUG)&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ignore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;式が真であることを表明する。&lt;/p&gt;
&lt;p&gt;このマクロは、開発時に除去できるバグを見つけるために使用できる。「関数の引数がある範囲内の値でなければならない」「ある状態でこの関数を呼び出してはならない」といったことを表明することで、その関数を呼び出すユーザーに対する要件として設定できる。&lt;/p&gt;
&lt;p&gt;このマクロは、直前の&lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;（または&lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt;）のインクルード時点でマクロ&lt;code&gt;NDEBUG&lt;/code&gt;が定義されていなかった場合に有効となり、&lt;code&gt;NDEBUG&lt;/code&gt;が定義されていた場合は無効となる。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有効な場合には：&lt;ul&gt;
&lt;li&gt;パラメータの式が偽であった場合、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort()&lt;/a&gt;&lt;/code&gt;関数を呼び出してプログラムを異常終了させる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無効な場合は、何もしない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;マクロ&lt;code&gt;NDEBUG&lt;/code&gt;は、標準C++の言語およびライブラリでは定義しない。開発環境やユーザーが定義することとなる。&lt;code&gt;NDEBUG&lt;/code&gt;を定義せず&lt;code&gt;assert&lt;/code&gt;を有効にした設定を「デバッグビルド」、&lt;code&gt;NDEBUG&lt;/code&gt;を定義して&lt;code&gt;assert&lt;/code&gt;を無効にした設定を「リリースビルド」などととして複数のビルド設定を持つ開発環境がある。&lt;/p&gt;
&lt;p&gt;マクロ&lt;code&gt;NDEBUG&lt;/code&gt;の定義の状態を変えて&lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;をインクルードしなおすことで翻訳単位中で有効・無効を切り替えることも可能である。&lt;/p&gt;
&lt;p&gt;実行環境や入力によって起こりえるエラーに対するエラー処理としてこのマクロを使用すると無効化された場合に意図しない動作となることがあるので、別な手段として、例外、&lt;code&gt;bool&lt;/code&gt;型の返却値などを検討すること。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// パラメータxは、正数でなければならない&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// …xを使った処理…&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// プログラムが異常終了する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;prog.exe: prog.cc:6: void f(int): Assertion `x &amp;gt;= 0&#39; failed.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++14 - 19.3 [assertions]
  ただしC++としての規定はほとんど無く、ほぼ参照規格であるISO C 7.2の規定によるものとなっている。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kazutoshi SATODA</name>
        <email>k_satoda@f2.dion.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>assert -- assert: 有効・無効の条件を正確化</title>
      <link href="http://cpprefjp.github.io/reference/cassert/assert.html"/>
      <id>cfe79c1cbfb85cb7dbb785ab60caabd0e4959e06:reference/cassert/assert.md</id>
      <updated>2016-02-10 22:08:27 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;macro&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;cassert&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;assert&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#if !defined(NDEBUG)&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defined&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
  &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ignore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;式が真であることを表明する。&lt;/p&gt;
&lt;p&gt;このマクロは、開発時に除去できるバグを見つけるために使用できる。「関数の引数がある範囲内の値でなければならない」「ある状態でこの関数を呼び出してはならない」といったことを表明することで、その関数を呼び出すユーザーに対する要件として設定できる。&lt;/p&gt;
&lt;p&gt;このマクロは、直前の&lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;（または&lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt;）のインクルード時点でマクロ&lt;code&gt;NDEBUG&lt;/code&gt;が定義されていなかった場合に有効となり、&lt;code&gt;NDEBUG&lt;/code&gt;が定義されていた場合は無効となる。&lt;/p&gt;
&lt;p&gt;実行環境や入力によって起こりえるエラーにはこのマクロは使用できないので、別な手段として、例外、&lt;code&gt;bool&lt;/code&gt;型の返却値などを検討すること。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有効な場合には：&lt;ul&gt;
&lt;li&gt;パラメータの式が偽であった場合、&lt;code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort()&lt;/a&gt;&lt;/code&gt;関数を呼び出してプログラムを異常終了させる。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;無効な場合は、何もしない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;マクロ&lt;code&gt;NDEBUG&lt;/code&gt;は、標準C++の言語およびライブラリでは定義しない。開発環境やユーザーが定義することとなる。&lt;code&gt;NDEBUG&lt;/code&gt;を定義せず&lt;code&gt;assert&lt;/code&gt;を有効にした設定を「デバッグビルド」、&lt;code&gt;NDEBUG&lt;/code&gt;を定義して&lt;code&gt;assert&lt;/code&gt;を無効にした設定を「リリースビルド」などととして複数のビルド設定を持つ開発環境がある。&lt;/p&gt;
&lt;p&gt;マクロ&lt;code&gt;NDEBUG&lt;/code&gt;の定義の状態を変えて&lt;code&gt;&amp;lt;cassert&amp;gt;&lt;/code&gt;をインクルードしなおすことで翻訳単位中で有効・無効を切り替えることも可能である。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;cassert&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// パラメータxは、正数でなければならない&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// …xを使った処理…&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// OK&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// プログラムが異常終了する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;prog.exe: prog.cc:6: void f(int): Assertion `x &amp;gt;= 0&#39; failed.
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++14 - 19.3 [assertions]
  ただしC++としての規定はほとんど無く、ほぼ参照規格であるISO C 7.2の規定によるものとなっている。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Kazutoshi SATODA</name>
        <email>k_satoda@f2.dion.ne.jp</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-03-07T14:41:04.620459</updated>
  <id>e701e30e-130f-4a65-8a2d-356403d6c806</id>

  
    <entry>
      <title>operator&lt; -- リンクミスを修正</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_less.html"/>
      <id>9c5a30d512fb946896a5cfb59ea342b5fb0ef4e8:reference/forward_list/forward_list/op_less.md</id>
      <updated>2022-03-07T16:17:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_less.md b/reference/forward_list/forward_list/op_less.md
index 979a07fa7..15e6aa914 100644
--- a/reference/forward_list/forward_list/op_less.md
+++ b/reference/forward_list/forward_list/op_less.md
@@ -31,7 +31,7 @@ lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
 
 
 ## 計算量
-[`size()`](size.md) に対して線形時間。
+要素数に対して線形時間。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- コンテナのoperator&lt; : lexcographical_compareに関する記述を統一</title>
      <link href="https://cpprefjp.github.io/reference/array/array/op_less.html"/>
      <id>29daeccf9437744f755e951210d84c7d10e17379:reference/array/array/op_less.md</id>
      <updated>2022-03-07T16:15:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/op_less.md b/reference/array/array/op_less.md
index 2649d8b51..f0781c91d 100644
--- a/reference/array/array/op_less.md
+++ b/reference/array/array/op_less.md
@@ -23,11 +23,16 @@ namespace std {
 
 
 ## 戻り値
-[`lexicographical_compare`](/reference/algorithm/lexicographical_compare.md)`(x.`[`begin`](begin.md)`(), x.`[`end`](end.md)`(), y.`[`begin`](begin.md)`(), y.`[`end`](end.md)`());`
+```cpp
+lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
+```
+* lexicographical_compare[link /reference/algorithm/lexicographical_compare.md]
+* begin()[link begin.md]
+* end()[link end.md]
 
 
 ## 計算量
-線形時間
+[`size()`](size.md) に対して線形時間。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- コンテナのoperator&lt; : lexcographical_compareに関する記述を統一</title>
      <link href="https://cpprefjp.github.io/reference/deque/deque/op_less.html"/>
      <id>29daeccf9437744f755e951210d84c7d10e17379:reference/deque/deque/op_less.md</id>
      <updated>2022-03-07T16:15:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/deque/deque/op_less.md b/reference/deque/deque/op_less.md
index c7d505ddf..00eab92d9 100644
--- a/reference/deque/deque/op_less.md
+++ b/reference/deque/deque/op_less.md
@@ -28,7 +28,7 @@ lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
 
 
 ## 計算量
-線形時間
+[`size()`](size.md) に対して線形時間。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- コンテナのoperator&lt; : lexcographical_compareに関する記述を統一</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/op_less.html"/>
      <id>29daeccf9437744f755e951210d84c7d10e17379:reference/forward_list/forward_list/op_less.md</id>
      <updated>2022-03-07T16:15:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/op_less.md b/reference/forward_list/forward_list/op_less.md
index fd5c131e1..979a07fa7 100644
--- a/reference/forward_list/forward_list/op_less.md
+++ b/reference/forward_list/forward_list/op_less.md
@@ -31,7 +31,7 @@ lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
 
 
 ## 計算量
-線形時間
+[`size()`](size.md) に対して線形時間。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- コンテナのoperator&lt; : lexcographical_compareに関する記述を統一</title>
      <link href="https://cpprefjp.github.io/reference/list/list/op_less.html"/>
      <id>29daeccf9437744f755e951210d84c7d10e17379:reference/list/list/op_less.md</id>
      <updated>2022-03-07T16:15:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/op_less.md b/reference/list/list/op_less.md
index 6cc967fd5..8c852ffd3 100644
--- a/reference/list/list/op_less.md
+++ b/reference/list/list/op_less.md
@@ -21,11 +21,16 @@ namespace std {
 
 
 ## 戻り値
-[`lexicographical_compare`](/reference/algorithm/lexicographical_compare.md)`(x.`[`begin`](begin.md)`(), x.`[`end`](end.md)`(), y.`[`begin`](begin.md)`(), y.`[`end`](end.md)`());`
+```cpp
+lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
+```
+* lexicographical_compare[link /reference/algorithm/lexicographical_compare.md]
+* begin()[link begin.md]
+* end()[link end.md]
 
 
 ## 計算量
-線形時間
+[`size()`](size.md) に対して線形時間。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- コンテナのoperator&lt; : lexcographical_compareに関する記述を統一</title>
      <link href="https://cpprefjp.github.io/reference/map/map/op_less.html"/>
      <id>29daeccf9437744f755e951210d84c7d10e17379:reference/map/map/op_less.md</id>
      <updated>2022-03-07T16:15:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/map/op_less.md b/reference/map/map/op_less.md
index 23089ad79..bc55e71d0 100644
--- a/reference/map/map/op_less.md
+++ b/reference/map/map/op_less.md
@@ -11,7 +11,7 @@ namespace std {
 ```
 
 ## 概要
-`x` が `y` より小さいかどうかの判定を行う。
+`map`において、左辺が右辺より小さいかの判定を行う。
 
 
 ## パラメータ
@@ -20,11 +20,16 @@ namespace std {
 
 
 ## 戻り値
-`x` が `y` より小さい場合に `true`, そうでない場合に `false`。
+```cpp
+lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
+```
+* lexicographical_compare[link /reference/algorithm/lexicographical_compare.md]
+* begin()[link begin.md]
+* end()[link end.md]
 
 
 ## 計算量
-[`size()`](/reference/map/map/size.md) に対して線形時間。
+[`size()`](size.md) に対して線形時間。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- コンテナのoperator&lt; : lexcographical_compareに関する記述を統一</title>
      <link href="https://cpprefjp.github.io/reference/map/multimap/op_less.html"/>
      <id>29daeccf9437744f755e951210d84c7d10e17379:reference/map/multimap/op_less.md</id>
      <updated>2022-03-07T16:15:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/map/multimap/op_less.md b/reference/map/multimap/op_less.md
index 0e62f5c6c..765121af8 100644
--- a/reference/map/multimap/op_less.md
+++ b/reference/map/multimap/op_less.md
@@ -9,7 +9,7 @@ bool operator&amp;lt; (const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x, const multimap&amp;lt;Key,T
 ```
 
 ## 概要
-`x` が `y` より小さいかどうかの判定を行う。
+`multimap`において、左辺が右辺より小さいかの判定を行う。
 
 
 ## パラメータ
@@ -18,11 +18,16 @@ bool operator&amp;lt; (const multimap&amp;lt;Key,T,Compare,Allocator&amp;gt;&amp;amp; x, const multimap&amp;lt;Key,T
 
 
 ## 戻り値
-`x` が `y` より小さい場合に `true`, そうでない場合に `false`。
+```cpp
+lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
+```
+* lexicographical_compare[link /reference/algorithm/lexicographical_compare.md]
+* begin()[link begin.md]
+* end()[link end.md]
 
 
 ## 計算量
-[`size()`](/reference/map/multimap/size.md) に対して線形時間。
+[`size()`](size.md) に対して線形時間。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- コンテナのoperator&lt; : lexcographical_compareに関する記述を統一</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/op_less.html"/>
      <id>29daeccf9437744f755e951210d84c7d10e17379:reference/set/multiset/op_less.md</id>
      <updated>2022-03-07T16:15:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/op_less.md b/reference/set/multiset/op_less.md
index dfa8fa387..eed8554a7 100644
--- a/reference/set/multiset/op_less.md
+++ b/reference/set/multiset/op_less.md
@@ -11,7 +11,7 @@ namespace std {
 ```
 
 ## 概要
-`x` が `y` より小さいかどうかの判定を行う。
+`multiset`において、左辺が右辺より小さいかの判定を行う。
 
 
 ## パラメータ
@@ -20,7 +20,12 @@ namespace std {
 
 
 ## 戻り値
-`x` が `y` より小さい場合に `true`, そうでない場合に `false`。
+```cpp
+lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
+```
+* lexicographical_compare[link /reference/algorithm/lexicographical_compare.md]
+* begin()[link begin.md]
+* end()[link end.md]
 
 
 ## 計算量
@@ -32,26 +37,19 @@ namespace std {
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;set&amp;gt;
 
-int main()
+int main ()
 {
-  std::multiset&amp;lt;int&amp;gt; s1, s2;
-  s1.insert(10);
-  s1.insert(20);
-  s1.insert(30);
-  s2 = s1;
-
-  std::cout &amp;lt;&amp;lt; (s1 &amp;lt; s2) &amp;lt;&amp;lt; std::endl;
+  std::multiset&amp;lt;int&amp;gt; s1 = {1, 2, 3};
+  std::multiset&amp;lt;int&amp;gt; s2 = {4, 5, 6};
 
-  s2.insert(40);
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
 
   std::cout &amp;lt;&amp;lt; (s1 &amp;lt; s2) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * &amp;lt;[color ff0000]
-* insert[link insert.md]
 
 ### 出力
 ```
-0
-1
+true
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- コンテナのoperator&lt; : lexcographical_compareに関する記述を統一</title>
      <link href="https://cpprefjp.github.io/reference/set/set/op_less.html"/>
      <id>29daeccf9437744f755e951210d84c7d10e17379:reference/set/set/op_less.md</id>
      <updated>2022-03-07T16:15:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/set/op_less.md b/reference/set/set/op_less.md
index 3570371b8..1d13f37ef 100644
--- a/reference/set/set/op_less.md
+++ b/reference/set/set/op_less.md
@@ -11,7 +11,7 @@ namespace std {
 ```
 
 ## 概要
-`x` が `y` より小さいかどうかの判定を行う。
+`set`において、左辺が右辺より小さいかの判定を行う。
 
 
 ## パラメータ
@@ -20,11 +20,16 @@ namespace std {
 
 
 ## 戻り値
-`x` が `y` より小さい場合に `true`, そうでない場合に `false`。
+```cpp
+lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
+```
+* lexicographical_compare[link /reference/algorithm/lexicographical_compare.md]
+* begin()[link begin.md]
+* end()[link end.md]
 
 
 ## 計算量
-[`size()`](size.md) に対して線形時間。
+[`size()`](size.md) に対して線形時間
 
 
 ## 例
@@ -32,26 +37,19 @@ namespace std {
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;set&amp;gt;
 
-int main()
+int main ()
 {
-  std::set&amp;lt;int&amp;gt; s1, s2;
-  s1.insert(10);
-  s1.insert(20);
-  s1.insert(30);
-  s2 = s1;
-
-  std::cout &amp;lt;&amp;lt; (s1 &amp;lt; s2) &amp;lt;&amp;lt; std::endl;
+  std::set&amp;lt;int&amp;gt; s1 = {1, 2, 3};
+  std::set&amp;lt;int&amp;gt; s2 = {4, 5, 6};
 
-  s2.insert(40);
+  std::cout &amp;lt;&amp;lt; std::boolalpha;
 
   std::cout &amp;lt;&amp;lt; (s1 &amp;lt; s2) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * &amp;lt;[color ff0000]
-* insert[link insert.md]
 
 ### 出力
 ```
-0
-1
+true
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- コンテナのoperator&lt; : lexcographical_compareに関する記述を統一</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_less.html"/>
      <id>29daeccf9437744f755e951210d84c7d10e17379:reference/vector/vector/op_less.md</id>
      <updated>2022-03-07T16:15:17+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_less.md b/reference/vector/vector/op_less.md
index 73dbf320e..617fe23d1 100644
--- a/reference/vector/vector/op_less.md
+++ b/reference/vector/vector/op_less.md
@@ -19,11 +19,16 @@ namespace std {
 
 
 ## 戻り値
-[`lexicographical_compare`](/reference/algorithm/lexicographical_compare.md)`(x.`[`begin`](begin.md)`(), x.`[`end`](end.md)`(), y.`[`begin`](begin.md)`(), y.`[`end`](end.md)`());`
+```cpp
+lexicographical_compare(x.begin(), x.end(), y.begin(), y.end());
+```
+* lexicographical_compare[link /reference/algorithm/lexicographical_compare.md]
+* begin()[link begin.md]
+* end()[link end.md]
 
 
 ## 計算量
-線形時間
+[`size()`](size.md) に対して線形時間
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>movable -- Merge pull request #947 from cpprefjp/refine-movable-desc</title>
      <link href="https://cpprefjp.github.io/reference/concepts/movable.html"/>
      <id>f76e39f455f01c2537f92390ddc4075824afeaea:reference/concepts/movable.md</id>
      <updated>2022-03-03T14:37:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/movable.md b/reference/concepts/movable.md
index e68e1920c..a27836457 100644
--- a/reference/concepts/movable.md
+++ b/reference/concepts/movable.md
@@ -24,9 +24,9 @@ namespace std {
 
 ## 備考
 
-`move_constructible`かつ`assignable_from`であれば結果として必然的に`swap`可能となるにもかかわらず、本コンセプト定義に[`swappable`](/reference/concepts/swappable.md)が含まれているのは、オブジェクトの基本操作として`swap`可能という性質がもっとも原始的なものであるため。
+意味論上はムーブ構築可能(`move_constructible&amp;lt;T&amp;gt;`)かつムーブ代入可能(`assignable_from&amp;lt;T&amp;amp;, T&amp;gt;`)であれば結果として必然的に[`swap`](/reference/concepts/swap.md)可能となるにもかかわらず、本コンセプト定義の制約式は[`swappable`](/reference/concepts/swappable.md)コンセプトを明示的に含んでいる。
 
-また、`swappable`を定義に含むことで、そのような「`swap`可能-&amp;gt;ムーブ可能-&amp;gt;コピー可能」というオブジェクトに対する基本操作の関係性を、コンセプトにおける包摂関係として表現している。
+オブジェクトに対する基本操作としては「`swap`可能」がもっとも原始的と考えられるため、ムーブ可能を表すコンセプトの制約式に`swappable`コンセプトを含めることで、そのような「`swap`可能-&amp;gt;ムーブ可能-&amp;gt;コピー可能」という基本操作の関係性を、コンセプトにおける包摂関係として表現している。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++国際標準規格 -- 国際標準規格 : C++23の最新Working Draftを更新 #912</title>
      <link href="https://cpprefjp.github.io/international-standard.html"/>
      <id>4b863a776f31e478051cd2c8b5333f7dac96d5fa:international-standard.md</id>
      <updated>2022-03-03T13:42:51+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++国際標準規格&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#summary&#34; id=&#34;summary&#34;&gt;概要&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++ の標準規格の実例として ISO/IEC による&lt;strong&gt;国際標準規格&lt;/strong&gt; (international standard) がある。
最新の国際標準規格は「ISO/IEC 14882:2020 Programming Languages -- C++」(通称 C++20) である。
C++ の標準規格は、他にも各国の規格化団体によって国際標準規格に等価なものが定められている。
日本では日本工業標準調査会 (JISC) により「JIS X 3014:2003 プログラム言語C++」が定められているが古い (C++03 相当)。
ここでは特に国際標準規格について取り扱う。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#list-of-iso-cpp&#34; id=&#34;list-of-iso-cpp&#34;&gt;国際標準規格の一覧&lt;/a&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;通称&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-1&#34; id=&#34;note_ref-t1-1&#34;&gt;†1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;参照する規格案&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-2&#34; id=&#34;note_ref-t1-2&#34;&gt;†2&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;規格案・原案&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;code&gt;__cplusplus&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23.html&#34;&gt;C++23&lt;/a&gt; (C++2b)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2023 (予定)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4901(&lt;a href=&#34;http://open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4901.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4901 N4892 N4885 N4878 N4871&lt;br /&gt;N4861&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;--&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp20.html&#34;&gt;C++20&lt;/a&gt; (C++2a)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2020&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4861&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-3&#34; id=&#34;note_ref-t1-3&#34;&gt;†3&lt;/a&gt;&lt;/sup&gt;(&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4861/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4860 N4849 N4842 N4835 N4830&lt;br /&gt;N4820 N4810 N4800 N4791 &lt;del&gt;N4788&lt;/del&gt;&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-4&#34; id=&#34;note_ref-t1-4&#34;&gt;†4&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;N4778 N4762 N4750 N4741 N4727&lt;br /&gt;N4713 N4700 N4687&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;202002L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp17.html&#34;&gt;C++17&lt;/a&gt; (C++1z)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2017&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4659(&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4659/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4660 N4659 N4640 N4618 N4606&lt;br /&gt;N4594 N4582 N4567 N4527 N4431&lt;br /&gt;N4296&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201703L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp14.html&#34;&gt;C++14&lt;/a&gt; (C++1y)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2014&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4140(&lt;a href=&#34;https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf?raw=true&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4140/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N4141 N4140 N3937 N3936 N3797&lt;br /&gt;N3691 N3690 N3485 N3376 N3337&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201402L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp11.html&#34;&gt;C++11&lt;/a&gt; (C++0x)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N3337&lt;sup&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note-t1-5&#34; id=&#34;note_ref-t1-5&#34;&gt;†5&lt;/a&gt;&lt;/sup&gt;(&lt;a href=&#34;https://wg21.link/std11&#34; target=&#34;_blank&#34;&gt;PDF&lt;/a&gt;/&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n3337/&#34; target=&#34;_blank&#34;&gt;HTML&lt;/a&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N3291 N3290 N3242 N3225 N3126&lt;br /&gt;N3090 N3035 N3000 N2960 N2914&lt;br /&gt;N2857 N2798 N2723 N2691 N2606&lt;br /&gt;N2588 N2521 N2461 N2369 N2315&lt;br /&gt;N2284 N2134 N2009 N1905 N1804&lt;br /&gt;N1733 N1655&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;201103L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C++03&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:2003&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N1577&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N1577 ?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;199711L&lt;/code&gt;&lt;br /&gt;(C++98 と同じ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C++98&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ISO/IEC 14882:1998&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;199711L&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-1&#34; id=&#34;note-t1-1&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; 括弧内は策定時・標準化前に一時的に用いられた通称&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-2&#34; id=&#34;note-t1-2&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; 最終国際規格案はPDFやHTMLなどの形で一般公開されていないため、それにほぼ同一の内容の規格案を参照する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-3&#34; id=&#34;note-t1-3&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N4861 は、C++20 DISであるN4860に対するデザインレベルの差とC++17との相互参照がない以外の差はないため、事実上 N4861 が C++20 を参照する時に用いられる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-4&#34; id=&#34;note-t1-4&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N4788 は政治的事情により撤回された (参照 N4792)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#note_ref-t1-5&#34; id=&#34;note-t1-5&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/a&gt; N3337 は、C++11規格に対する編集レベルの修正のみが適用された仕様案であるため、事実上 N3337 が C++11 を参照する時に用いられる。C++11規格からN3337への変更点は、&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3338.html&#34; target=&#34;_blank&#34;&gt;N3338&lt;/a&gt;を参照。&lt;br /&gt;
(それより前の公開されているC++11向け仕様案であるN3242からC++11規格に対しては、機能的な変更がいくつかあるため、C++11規格として参照するには適さない)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最新のDraftのHTML版は以下で公開されている。&lt;br /&gt;
&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/&#34; target=&#34;_blank&#34;&gt;Draft C++ Standard: Contents&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;標準規格の文章はtexで書かれており、そのソースコードは以下で2011年8月16日以降のものについて(つまりN3291より後、N3337より前)公開されている。&lt;br /&gt;
&lt;a href=&#34;https://github.com/cplusplus/draft&#34; target=&#34;_blank&#34;&gt;cplusplus/draft: C++ standards drafts&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#iso-cpp-committee&#34; id=&#34;iso-cpp-committee&#34;&gt;用語: 国際標準規格を定める組織&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C++標準化委員会&lt;/strong&gt; (C++ Standards Committee): C++ の国際標準規格を策定する団体。
  組織としての位置づけはISO/IEC JTC1/SC22/WG21になる。
  &lt;strong&gt;国際標準化機構&lt;/strong&gt; (ISO; international organization for standardization) および&lt;strong&gt;国際電気標準会議&lt;/strong&gt; (IEC; International Electronics Commission) はそれぞれ様々な規格の標準化団体である。
  &lt;strong&gt;第一合同技術委員会&lt;/strong&gt; (JTC1; Joint Technical Committee 1) は ISO/IEC の下で情報技術の標準化を行う団体である。
  下部組織の SC22 はプログラム言語の標準化を行う&lt;strong&gt;副委員会&lt;/strong&gt; (SC; subcommittee) である。
  C++標準化委員会は WG21 という&lt;strong&gt;作業グループ&lt;/strong&gt; (WG; working group) である。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CWG&lt;/strong&gt; (Core working group): C++標準化委員会の内、コア言語機能の策定を行う作業グループ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LWG&lt;/strong&gt; (Library working group): C++標準化委員会の内、標準ライブラリ機能の策定を行う作業グループ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NB&lt;/strong&gt; (national body) または&lt;strong&gt;MB/NC&lt;/strong&gt; (member body/national committee): C++標準化委員会の正会員つまり各国から派遣される団体のこと。本来は member body は ISO での名称で、national committee は IEC での名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://cpprefjp.github.io/international-standard.html#iso-cpp-documents&#34; id=&#34;iso-cpp-documents&#34;&gt;用語: 国際標準規格の文書&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提案&lt;/strong&gt; (proposal): 標準規格の変更についての提案文書&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;問題&lt;/strong&gt; (issue): C++標準規格の問題や課題のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠陥&lt;/strong&gt; (defect): C++標準規格に含まれるいわば &#34;バグ&#34; のこと&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DR&lt;/strong&gt; (defect report, defect resolution): 委員会で承認された欠陥の報告または欠陥の修正のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NAD&lt;/strong&gt; (not a defect): 委員会により標準規格の欠陥ではないとされた問題のこと&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DRWP&lt;/strong&gt;: 最新の規格原案に取り込み済みの DR のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WD&lt;/strong&gt; (working draft): 作業原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CD&lt;/strong&gt; (committee draft): 委員会原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FCD&lt;/strong&gt; (final committee draft): 最終委員会原案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DIS&lt;/strong&gt; (draft international standard): 国際規格案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FDIS&lt;/strong&gt; (final draft international standard): 最終国際規格案&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IS&lt;/strong&gt; (international standard): 国際規格&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TR&lt;/strong&gt; (technical report): 技術報告書。用例: TR1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TS&lt;/strong&gt; (technical specifications): 技術仕様書。用例: Concepts TS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;標準規格&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/79358.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2020 - Programming languages — C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/68564.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2017 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/64029.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2014 - Information technology -- Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/50372.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2011 - Information technology -- Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/38110.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:2003 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iso.org/standard/25845.html&#34; target=&#34;_blank&#34;&gt;ISO/IEC 14882:1998 - Programming languages -- C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://webdesk.jsa.or.jp/books/W11M0090/index/?bunsyo_id=JIS%20X%203014:2003&#34; target=&#34;_blank&#34;&gt;JIS X 3014:2003 プログラム言語Ｃ＋＋／Information Technology -- Programming languages -- C++ 日本規格協会 JSA Webdesk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.cppreference.com/w/cpp/experimental&#34; target=&#34;_blank&#34;&gt;Experimental C++ Features - cppreference.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/29115656/which-draft-is-closest-to-the-c14-standard&#34; target=&#34;_blank&#34;&gt;c++ - Which draft is closest to the C++14 standard? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/81656/where-do-i-find-the-current-c-or-c-standard-documents&#34; target=&#34;_blank&#34;&gt;Where do I find the current C or C++ standard documents? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/11053960/how-are-the-cplusplus-directive-defined-in-various-compilers&#34; target=&#34;_blank&#34;&gt;c++ - How are the __cplusplus directive defined in various compilers? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC1/SC22/WG21 - The C++ Standards Committee - ISOCPP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%9B%BD%E9%9A%9B%E6%A8%99%E6%BA%96%E5%8C%96%E6%A9%9F%E6%A7%8B&#34; target=&#34;_blank&#34;&gt;国際標準化機構 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%9B%BD%E9%9A%9B%E9%9B%BB%E6%B0%97%E6%A8%99%E6%BA%96%E4%BC%9A%E8%AD%B0&#34; target=&#34;_blank&#34;&gt;国際電気標準会議 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/ISO/IEC_JTC_1&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC 1 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/ISO/IEC_JTC_1/SC_22&#34; target=&#34;_blank&#34;&gt;ISO/IEC JTC 1/SC 22 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>movable -- movable: 制約式にswappableを含む理由説明の調整</title>
      <link href="https://cpprefjp.github.io/reference/concepts/movable.html"/>
      <id>5195ab08115f29003ca72ba49b17b1aaccac58da:reference/concepts/movable.md</id>
      <updated>2022-03-03T11:48:33+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/movable.md b/reference/concepts/movable.md
index e68e1920c..a27836457 100644
--- a/reference/concepts/movable.md
+++ b/reference/concepts/movable.md
@@ -24,9 +24,9 @@ namespace std {
 
 ## 備考
 
-`move_constructible`かつ`assignable_from`であれば結果として必然的に`swap`可能となるにもかかわらず、本コンセプト定義に[`swappable`](/reference/concepts/swappable.md)が含まれているのは、オブジェクトの基本操作として`swap`可能という性質がもっとも原始的なものであるため。
+意味論上はムーブ構築可能(`move_constructible&amp;lt;T&amp;gt;`)かつムーブ代入可能(`assignable_from&amp;lt;T&amp;amp;, T&amp;gt;`)であれば結果として必然的に[`swap`](/reference/concepts/swap.md)可能となるにもかかわらず、本コンセプト定義の制約式は[`swappable`](/reference/concepts/swappable.md)コンセプトを明示的に含んでいる。
 
-また、`swappable`を定義に含むことで、そのような「`swap`可能-&amp;gt;ムーブ可能-&amp;gt;コピー可能」というオブジェクトに対する基本操作の関係性を、コンセプトにおける包摂関係として表現している。
+オブジェクトに対する基本操作としては「`swap`可能」がもっとも原始的と考えられるため、ムーブ可能を表すコンセプトの制約式に`swappable`コンセプトを含めることで、そのような「`swap`可能-&amp;gt;ムーブ可能-&amp;gt;コピー可能」という基本操作の関係性を、コンセプトにおける包摂関係として表現している。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
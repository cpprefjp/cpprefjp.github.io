<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-08-29T09:39:04.434166</updated>
  <id>e02e80b2-ccc9-4d4a-89d8-3fc2c34a3716</id>

  
    <entry>
      <title>accumulate -- accumulate : クラスの一部のメンバ変数を集計する例を追加</title>
      <link href="https://cpprefjp.github.io/reference/numeric/accumulate.html"/>
      <id>7cada5875ec9b3952f642f097a24a3595f7ff59b:reference/numeric/accumulate.md</id>
      <updated>2022-08-29T18:33:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/accumulate.md b/reference/numeric/accumulate.md
index 0e014ffdb..55fafa2c1 100644
--- a/reference/numeric/accumulate.md
+++ b/reference/numeric/accumulate.md
@@ -60,6 +60,7 @@ namespace std{
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;vector&amp;gt;
@@ -95,7 +96,7 @@ int main()
 ```
 * std::accumulate[color ff0000]
 
-### 出力
+#### 出力
 ```
 sum : 15
 sum_ll : 15
@@ -104,6 +105,40 @@ product : 120
 ```
 
 
+### クラスの一部のメンバ変数を集計する
+```cpp
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;numeric&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+struct X {
+  int value;
+  std::string name;
+};
+
+int main() {
+  std::vector&amp;lt;X&amp;gt; v = {
+    {1, &amp;#34;AAA&amp;#34;},
+    {2, &amp;#34;BBB&amp;#34;},
+    {3, &amp;#34;CCC&amp;#34;}
+  };
+
+  int sum = std::accumulate(v.begin(), v.end(), 0, [](int acc, const X&amp;amp; x) {
+    return acc + x.value;
+  });
+
+  std::cout &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::accumulate[color ff0000]
+
+#### 出力
+```
+6
+```
+
+
 ## 実装例
 ```cpp
 // (1)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>new -- fix typo in &lt;new&gt;</title>
      <link href="https://cpprefjp.github.io/reference/new.html"/>
      <id>392743c191e0ee5f13d3a5d07ebb5b102fcc564a:reference/new.md</id>
      <updated>2022-08-06T20:50:45+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;new&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;new&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;new&amp;gt;&lt;/code&gt;ヘッダは、プログラムが動的に記憶域を確保し、管理するための機能を定義し、記憶域の管理のエラー報告（例外の送出）についても定義する。このヘッダはグローバルネームスペースの&lt;code&gt;new&lt;/code&gt;演算子および&lt;code&gt;delete&lt;/code&gt;演算子をオーバーロードする。placement new を行いたい場合などに用いる。&lt;/p&gt;
&lt;h2&gt;型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_alloc.html&#34;&gt;bad_alloc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何らかの理由で記憶域の動的確保に失敗するなど、&lt;code&gt;get_new_handler()&lt;/code&gt;が&lt;code&gt;nullptr&lt;/code&gt;を返した場合にスローされる例外(class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/bad_array_new_length.html&#34;&gt;bad_array_new_length&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;動的に記憶域を確保しようとする配列の長さが0未満または処理系の最大値以上の場合にスローされる例外(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/align_val_t.html&#34;&gt;align_val_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルトよりも大きなアライメントを要求するとき、&lt;code&gt;new&lt;/code&gt; に渡されるアライメント値の型&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/nothrow_t.html&#34;&gt;nothrow_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外をスローしないための&lt;code&gt;std::nothrow&lt;/code&gt;の型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/new_handler.html&#34;&gt;new_handler&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;new&lt;/code&gt;失敗時に呼ばれる関数の型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/get_new_handler.html&#34;&gt;get_new_handler&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;new&lt;/code&gt;失敗時に呼ばれる関数を取得する(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/launder.html&#34;&gt;launder&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;置き換えられたオブジェクトに適格にアクセスする(function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/set_new_handler.html&#34;&gt;set_new_handler&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;new&lt;/code&gt;失敗時に呼ばれる関数を設定する(function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new.html&#34;&gt;operator new&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;動的に記憶域を確保する(function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_new[].html&#34;&gt;operator new[]&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;動的に配列の記憶域を確保する(function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_delete.html&#34;&gt;operator delete&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;動的に確保した記憶域を解放する(function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/op_delete[].html&#34;&gt;operator delete[]&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;動的に確保した配列の記憶域を解放する(function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;干渉サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/hardware_destructive_interference_size.html&#34;&gt;hardware_destructive_interference_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのオブジェクトに並行アクセスする際に、パフォーマンス低下を避けられる最小アライメントサイズ (variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/new/hardware_constructive_interference_size.html&#34;&gt;hardware_constructive_interference_size&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2つのオブジェクトに一時局所的にアクセスできる最大サイズ (variable)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extract -- fix typo in unordered_multiset::extract()</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/extract.html"/>
      <id>16f25afda258aa7b2ab26788dd5eb3ed67ed73b3:reference/unordered_set/unordered_multiset/extract.md</id>
      <updated>2022-08-06T20:46:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset/extract.md b/reference/unordered_set/unordered_multiset/extract.md
index a45bbf302..1b01a7a47 100644
--- a/reference/unordered_set/unordered_multiset/extract.md
+++ b/reference/unordered_set/unordered_multiset/extract.md
@@ -2,7 +2,7 @@
 * unordered_set[meta header]
 * function[meta id-type]
 * std[meta namespace]
-* unordered_miltiset[meta class]
+* unordered_multiset[meta class]
 * cpp17[meta cpp]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unordered_multiset -- fix typo in unordered_miltiset.md</title>
      <link href="https://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html"/>
      <id>93df6601a884622da3343024d21b57eded490835:reference/unordered_set/unordered_multiset.md</id>
      <updated>2022-08-06T20:35:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/unordered_set/unordered_multiset.md b/reference/unordered_set/unordered_multiset.md
index 60ba88209..620a65564 100644
--- a/reference/unordered_set/unordered_multiset.md
+++ b/reference/unordered_set/unordered_multiset.md
@@ -30,7 +30,7 @@ namespace std {
 
 一般的には `hash multiset` と呼ばれるコンテナであるが、標準への採用が遅かったことから、既に存在する各種コンテナとの名前の衝突を避けるため、`unordered_multiset` と名付けられた。
 
-`hash_multiset` の特徴は以下の通りである。
+`unordered_multiset` の特徴は以下の通りである。
 
 
 - 連想  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator new -- fix minor typo in op_new.md of &lt;new&gt;</title>
      <link href="https://cpprefjp.github.io/reference/new/op_new.html"/>
      <id>4f2fac80fa778c1ea750aedf12ad1deb3324420b:reference/new/op_new.md</id>
      <updated>2022-08-06T20:30:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/new/op_new.md b/reference/new/op_new.md
index fd34c58b7..89b286a5e 100644
--- a/reference/new/op_new.md
+++ b/reference/new/op_new.md
@@ -25,7 +25,7 @@ void* operator new(std::size_t size,
                    const std::nothrow_t&amp;amp;) noexcept;                 // (4) C++17
 [[nodiscard]]void* operator new(std::size_t size,
                                 std::align_val_t alignment,
-                                const std::nothrow_t&amp;amp;) noexcept;    // (4) C++17
+                                const std::nothrow_t&amp;amp;) noexcept;    // (4) C++20
 
 void* operator new(std::size_t size, void* ptr) throw();            // (5) C++03
 void* operator new(std::size_t size, void* ptr) noexcept;           // (5) C++11
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
</feed>
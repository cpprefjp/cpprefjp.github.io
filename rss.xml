<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-01-16T15:20:33.527637</updated>
  <id>3caa43ba-eb8b-44a0-81e3-e9ef48f31858</id>

  
    <entry>
      <title>mdspan -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;mdspan&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mdspan&amp;gt;&lt;/code&gt;ヘッダでは、任意のメモリブロックに対して多次元配列のようにアクセスする機能を定義する。&lt;/p&gt;
&lt;h2&gt;多次元配列サイズ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;extents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列のサイズを表す値 (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/extents.html&#34;&gt;dextents&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全次元が動的な多次元配列のサイズを表す値 (alias template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;レイアウトマッピング&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_left.html&#34;&gt;layout_left&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列優先(Fortran/Matlabスタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_right.html&#34;&gt;layout_right&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;行優先(C/C++スタイル)レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/layout_stride.html&#34;&gt;layout_stride&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ストライド幅指定レイアウトマッピングポリシー (class)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;要素アクセサ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デフォルト要素アクセサ (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;多次元配列ビュー&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;多次元配列ビュー (class template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++20 &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/span.html&#34;&gt;&amp;lt;span&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMapping -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
index 6ad40ba1a..add212197 100644
--- a/reference/mdspan/LayoutMapping.md
+++ b/reference/mdspan/LayoutMapping.md
@@ -11,7 +11,7 @@ LayoutMappingは、多次元配列ビュー[`mdspan`](mdspan.md)において多
 LayoutMappingを満たすユーザ定義型`layout_custom::mapping&amp;lt;E&amp;gt;`は、常に[レイアウトマッピングポリシー](LayoutMappingPolicy.md)を満たす`layout_custom`の公開メンバ`mapping`クラステンプレートとして定義される。
 
 ```cpp
-// レイアウトマッピングポリシーs
+// レイアウトマッピングポリシー
 struct layout_custom {
   // レイアウトマッピング
   template&amp;lt;class Extents&amp;gt;
@@ -31,7 +31,7 @@ struct layout_custom {
 
 - Unique特性 : 異なる多次元インデクス値であれば、互いに異なる要素位置へと変換される。
 - Exhaustive特性 : 取りうる全ての多次元インデクス値に対応する要素位置を考えたとき、アクセスされうる要素位置に隙間が生じない。
-- Strided特性 : 要素位置は多次元インデクス値と各次元ストライド幅のみを用いて計算できる。
+- Strided特性 : 多次元インデクス値`I_n`と各次元ストライド幅`S_n`を用いて、要素位置を式`(I_i * S_i) + ...`により計算できる。
 
 例えば、多次元配列ビュー[`mdspan`](mdspan.md)のデフォルトレイアウトポリシー[`layout_right`](layout_right.md)は3つの特性を全て満たす。
 要素数3×2の2次元配列ビュー`mat3x2`における有効な多次元インデクス値`i,j`は`0,0`, `0,1`, `1,0`, `1,1`, `2,0`, `2,1`の6パターンとなり、それぞれ参照先メモリブロック`a`の要素位置`a[0]`, `a[1]`, `a[2]`, `a[3]`, `a[4]`, `a[5]`に対応する。
@@ -45,7 +45,7 @@ std::mdspan&amp;lt;int, Extents&amp;gt; mat3x2{a};
 
 - Unique特性 : 異なる多次元インデクス値は、異なる要素位置に対応する。参照先が重複することはない。
 - Exhaustive特性 : 全ての多次元インデクス値に対応する要素位置は連続している。
-- Strided特性 : 多次元インデクス値`i,j`に対応する要素位置は、ストライド幅`2,1`を用いて`(i*2+j)*1`と計算できる。
+- Strided特性 : 多次元インデクス値`i,j`に対応する要素位置は、ストライド幅`2,1`を用いて`i*2+j*1`と計算できる。
 
 
 ## 要件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_constructor.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan/extents/op_constructor.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_constructor.md b/reference/mdspan/extents/op_constructor.md
index 09e213fd7..8da24f6ae 100644
--- a/reference/mdspan/extents/op_constructor.md
+++ b/reference/mdspan/extents/op_constructor.md
@@ -96,6 +96,7 @@ int main()
   {
     Ext3x4 ext1_3x4;
     Ext3xN ext1_3xN;
+    assert(ext1_3xN.extent(1) == 0);
   }
   // (2) : 変換コンストラクタ
   {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/op_equal.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan/extents/op_equal.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/op_equal.md b/reference/mdspan/extents/op_equal.md
index d59fa4319..834c44bcf 100644
--- a/reference/mdspan/extents/op_equal.md
+++ b/reference/mdspan/extents/op_equal.md
@@ -1,6 +1,6 @@
 # operator==
 * mdspan[meta header]
-* function[meta id-type]
+* function template[meta id-type]
 * std[meta namespace]
 * extents[meta class]
 * cpp23[meta cpp]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan/layout_left.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left.md b/reference/mdspan/layout_left.md
index 91c040cbc..791be790c 100644
--- a/reference/mdspan/layout_left.md
+++ b/reference/mdspan/layout_left.md
@@ -20,7 +20,7 @@ namespace std {
 
 `layout_left`は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
 
-ポリシークラス名の由来は、多次元インデクスのうち最左次元が隣接配置（ストライド=1）され、インデクス次元の左から右の順にストライドが増大するところから来ている。
+ポリシークラス名の由来は、多次元インデクスのうち最左次元が隣接配置（ストライド幅=1）され、インデクス次元の左から右の順にストライド幅が増大するところから来ている。
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan/layout_right.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right.md b/reference/mdspan/layout_right.md
index 9d514db34..cd9e6e9a4 100644
--- a/reference/mdspan/layout_right.md
+++ b/reference/mdspan/layout_right.md
@@ -13,21 +13,21 @@ namespace std {
 }
 ```
 * Extents[link extents.md]
-* mapping[link mapping.md.nolink]
+* mapping[link layout_right/mapping.md]
 
 ## 概要
 `layout_right`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、C/C++多次元配列と互換性のある行優先(row major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
 
 `layout_right`は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
 
-ポリシークラス名の由来は、多次元インデクスのうち最右次元が隣接配置（ストライド=1）され、インデクス次元の右から左の順にストライドが増大するところから来ている。
+ポリシークラス名の由来は、多次元インデクスのうち最右次元が隣接配置（ストライド幅=1）され、インデクス次元の右から左の順にストライド幅が増大するところから来ている。
 
 
 ## メンバ型
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`mapping`](mapping.md.nolink) | レイアウトマッピング | C++23 |
+| [`mapping`](layout_right/mapping.md) | レイアウトマッピング | C++23 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan/layout_right/mapping.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping.md b/reference/mdspan/layout_right/mapping.md
new file mode 100644
index 000000000..7873890cc
--- /dev/null
+++ b/reference/mdspan/layout_right/mapping.md
@@ -0,0 +1,134 @@
+# mapping
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* mdspan[meta class]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  struct layout_right {
+    template&amp;lt;class Extents&amp;gt;
+    class mapping;
+  };
+}
+```
+* layout_right[link ../layout_right.md]
+* Extents[link ../extents.md]
+
+## 概要
+`layout_right::mapping&amp;lt;E&amp;gt;`は、[`extents`](../extents.md)型の多次元配列サイズ`E`をパラメータとして、C/C++多次元配列と互換性のある行優先(row major)[レイアウトマッピング](../LayoutMapping.md)を表現するクラスである。
+
+`layout_right::mapping&amp;lt;E&amp;gt;`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`regular`](/reference/concepts/regular.md)のモデルである。
+
+### 説明専用メンバ変数
+`layout_right::mapping`クラステンプレートは、下記の説明専用メンバ変数を保持する。
+
+- `extents_` : `extents_type`型の[多次元配列サイズ情報](../extents.md)
+
+
+## 適格要件
+- `Extents`は[`extents`](../extents.md)の特殊化であること。
+- [`Extents::rank_dynamic()`](../extents/rank_dynamic.md) `== 0`が`true`のとき、多次元インデクス空間`Extents()`のサイズが`Extents::index_type`型で表現できること。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](mapping/op_constructor.md) | コンストラクタ | C++23 |
+| `(destructor)` | デストラクタ | C++23 |
+| `operator=`    | コピー代入演算子 | C++23 |
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents` | 多次元配列のサイズ`extents_`を取得する | C++23 |
+| [`required_span_size`](mapping/required_span_size.md) | 要素アクセス範囲を取得する | C++23 |
+| [`operator()`](mapping/op_call.md) | 多次元配列インデクスから要素位置へ変換する | C++23 |
+| [`stride`](mapping/stride.md) | 指定次元のストライド幅を取得する | C++23 |
+
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `is_always_unique`     | `true`を返す | C++23 |
+| `is_always_exhaustive` | `true`を返す | C++23 |
+| `is_always_strided`    | `true`を返す | C++23 |
+| `is_unique`     | `true`を返す | C++23 |
+| `is_exhaustive` | `true`を返す | C++23 |
+| `is_strided`    | `true`を返す | C++23 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents_type` | [`Extents`](../extents.md) | C++23 |
+| `index_type` | [`Extents::index_type`](../extents.md) | C++23 |
+| `size_type` | [`Extents::size_type`](../extents.md) | C++23 |
+| `rank_type` | [`Extents::rank_type`](../extents.md) | C++23 |
+| `layout_type` | [`layout_right`](../layout_right.md) | C++23 |
+
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](mapping/op_equal.md) | 等値比較 | C++23 |
+| [`operator!=`](mapping/op_equal.md) | 非等値比較 (`==`により使用可能) | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 3, 4, 5, 6};
+
+  // 要素数2x3の2次元配列／行優先レイアウト
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  using Mapping = std::layout_right::mapping&amp;lt;Ext2x3&amp;gt;;
+  std::mdspan mat{arr, Mapping{}};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::cout &amp;lt;&amp;lt; (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;) &amp;lt;&amp;lt; mat[i, j];
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* std::layout_right::mapping[color ff0000]
+* std::mdspan[link ../mdspan.md]
+* std::extents[link ../extents.md]
+
+### 出力
+```
+1 2 3
+4 5 6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`mdspan`](../mdspan.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_call.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan/layout_right/mapping/op_call.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_call.md b/reference/mdspan/layout_right/mapping/op_call.md
new file mode 100644
index 000000000..6117f05ae
--- /dev/null
+++ b/reference/mdspan/layout_right/mapping/op_call.md
@@ -0,0 +1,76 @@
+# operator()
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class... Indices&amp;gt;
+constexpr index_type operator()(Indices... i) const noexcept;
+```
+
+## 概要
+多次元インデクス値`i...`に対応する要素位置を求める。
+
+
+## テンプレートパラメータ制約
+- `sizeof...(Indices) ==` [`extents_tyoe::rank()`](../../extents/rank.md)が`true`、かつ
+- `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+- `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+
+
+## 事前条件
+多次元インデクス値`i...`は、多次元配列サイズ`extents_`における有効なインデクスであること。
+
+
+## 戻り値
+説明用のパラメータパック`P`において、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`index_sequence_for`](/reference/utility/index_sequence_for.md)`&amp;lt;Indices...&amp;gt;,` [`index_sequence`](/reference/utility/index_sequence.md)`&amp;lt;P...&amp;gt;&amp;gt;`が`true`となるとき、以下と等価。
+
+```cpp
+return ((static_cast&amp;lt;index_type&amp;gt;(Indices...) * stride(P)) + ... + 0);
+```
+* stride[link stride.md]
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map;
+  assert(map(0,0) == 0);
+  assert(map(0,1) == 1);
+  assert(map(1,0) == 4);
+  assert(map(2,3) == 11);
+}
+```
+* std::extents[link ../../extents.md]
+* std::layout_right::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
new file mode 100644
index 000000000..c695df515
--- /dev/null
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -0,0 +1,149 @@
+# コンストラクタ
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr mapping() noexcept = default;  // (1)
+
+constexpr mapping(const mapping&amp;amp;) noexcept = default;  // (2)
+
+constexpr mapping(const extents_type&amp;amp; e) noexcept;  // (3)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
+  mapping(const mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (4)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
+  mapping(const layout_left::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (5)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(extents_type::rank() &amp;gt; 0)
+  mapping(const layout_stride::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (6)
+```
+* is_convertible_v[link /reference/type_traits/is_convertible.md]
+* rank()[link ../../extents/rank.md]
+* layout_left::mapping[link ../../layout_left/mapping.md.nolink]
+* layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : コピーコンストラクタ
+- (3) : [`extents`](../../extents.md)からの変換コンストラクタ
+- (4) : 他`layout_right::mapping`からの変換コンストラクタ
+- (5) : [`layout_left::mapping`](../../layout_left/mapping.md.nolink)からの変換コンストラクタ
+- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)からの変換コンストラクタ
+
+
+## テンプレートパラメータ制約
+- (4) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (5) :
+    - `extents_type​::​`[`rank()`](../../extents/rank.md) `&amp;lt;= 1`、かつ
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (6) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+
+
+## 事前条件
+- (3) : `e`の多次元インデクス空間のサイズを、`index_type`型で表現できること。
+- (4) : `other.`[`required_span_size()`](required_span_size.md)を、`index_type`型で表現できること。
+- (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+- (6) :
+    - `extents_type​::​`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_right::mapping`相当の制約](stride.md)をもつこと。
+    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+
+
+## 効果
+- (3) : `e`を用いて`extents_`を直接非リスト初期化する。
+- (4), (5), (6) : `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+
+
+## 例外
+投げない
+
+
+## explicitになる条件
+- (4), (5) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherExtents, extents_type&amp;gt;`
+- (6) : [`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+
+using Mapping3x4 = std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;;
+using Mapping3xN = std::layout_right::mapping&amp;lt;Ext3xN&amp;gt;;
+
+int main()
+{
+  // (1) : デフォルトコンストラクタ
+  {
+    Mapping3x4 map1_3x4;
+    Mapping3xN map1_3xN;
+    assert(map1_3x4.required_span_size() == 12);
+    assert(map1_3xN.required_span_size() == 0);
+  }
+  // (2) : コピーコンストラクタ
+  {
+    Mapping3xN map2_a;
+    Mapping3xN map2_b = map2_a;
+    assert(map2_a == map2_b);
+  }
+  // (3) : extentsからの変換コンストラクタ
+  {
+    Ext3xN ext{4};
+    Mapping3xN map3 = ext;
+    assert(map3.extents() == ext);
+  }
+  // (4) : layout_right::mappingからの変換コンストラクタ
+  {
+    Mapping3x4 map4_3x4;
+    Mapping3xN map4_3xN = map4_3x4;
+    assert(map4_3x4 == map4_3xN);
+  }
+  // (5) : layout_left::mappingからの変換コンストラクタ
+  {
+    using Ext1D = std::dextents&amp;lt;size_t, 1&amp;gt;;
+    std::layout_left::mapping&amp;lt;Ext1D&amp;gt;  src5{Ext1D{5}};
+    std::layout_right::mapping&amp;lt;Ext1D&amp;gt; dst5 = src5;
+  }
+  // (6) : layout_stride::mappingからの変換コンストラクタ
+  {
+    std::array strides{4, 1};
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; src6{{}, strides};
+    std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;  dst6{src6};  // (explicit)
+  }
+}
+```
+* std::extents[link ../../extents.md]
+* std::dextents[link ../../extents.md]
+* std::layout_right::mapping[link ../mapping.md]
+* std::layout_left::mapping[link ../../layout_left/mapping.md.nolink]
+* std::layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+* required_span_size()[link required_span_size.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_equal.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan/layout_right/mapping/op_equal.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_equal.md b/reference/mdspan/layout_right/mapping/op_equal.md
new file mode 100644
index 000000000..1fff45a89
--- /dev/null
+++ b/reference/mdspan/layout_right/mapping/op_equal.md
@@ -0,0 +1,75 @@
+# operator==
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class OtherExtents&amp;gt;
+friend constexpr bool operator==(
+  const mapping&amp;amp; x, const mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; y) noexcept;
+
+//operator==により、以下のオーバーロードが使用可能になる        
+template&amp;lt;class OtherExtents&amp;gt;
+friend constexpr bool operator!=(
+  const mapping&amp;amp; x, const mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; y) noexcept;
+```
+
+## 概要
+`mapping`の等値比較を行う。
+
+
+## テンプレートパラメータ制約
+`extents_type::`[`rank()`](../../extents/rank.md) `== OtherExtents::`[`rank()`](../../extents/rank.md)
+
+
+## 戻り値
+[`x.extents() == y.extents()`](../../extents/op_equal.md)
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map1;
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  using Mapping3xN = std::layout_right::mapping&amp;lt;Ext3xN&amp;gt;;
+  Mapping3xN map2{Ext3xN{4}};
+
+  assert(map1 == map2);
+}
+```
+* ==[color ff0000]
+* std::extents[link ../../extents.md]
+* std::layout_right::mapping[link ../mapping.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/required_span_size.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan/layout_right/mapping/required_span_size.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/required_span_size.md b/reference/mdspan/layout_right/mapping/required_span_size.md
new file mode 100644
index 000000000..6984b90c7
--- /dev/null
+++ b/reference/mdspan/layout_right/mapping/required_span_size.md
@@ -0,0 +1,65 @@
+# required_span_size
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+index_type required_span_size() const noexcept;
+```
+
+## 概要
+メモリブロックに対する要素アクセス範囲を取得する。
+
+
+## 戻り値
+多次元配列サイズ[`extents()`](../mapping.md)に対して、全次元の要素数を乗算した値。
+次元数が0の場合は、値1を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map1{};
+  assert(map1.required_span_size() == 12);
+
+  using Ext3D = std::dextents&amp;lt;size_t, 3&amp;gt;;
+  using Mapping3D = std::layout_right::mapping&amp;lt;Ext3D&amp;gt;;
+  Mapping3D map2{Ext3D{4, 3, 2}};
+  assert(map2.required_span_size() == 24);
+}
+```
+* required_span_size()[color ff0000]
+* std::extents[link ../../extents.md]
+* std::dextents[link ../../extents.md]
+* std::layout_right::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/stride.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:reference/mdspan/layout_right/mapping/stride.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/stride.md b/reference/mdspan/layout_right/mapping/stride.md
new file mode 100644
index 000000000..fc5a641b7
--- /dev/null
+++ b/reference/mdspan/layout_right/mapping/stride.md
@@ -0,0 +1,78 @@
+# stride
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr index_type stride(rank_type i) const noexcept;
+```
+
+## 概要
+`i`番目次元のストライド幅を取得する。
+
+
+## テンプレートパラメータ制約
+[`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+
+
+## 事前条件
+`i &amp;lt;` [`extents_type::rank()`](../../extents/rank.md)
+
+
+## 戻り値
+多次元配列サイズの次元数`R =` [`extents_type::rank()`](../../extents/rank.md)としたとき
+
+- `i + 1 &amp;lt; R`のとき、`i + 1`番目次元から最右次元(`R-1`番目)までの要素数を乗算した値を返す。
+- `i + 1 == R`のとき、値1を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map1;
+  assert(map1.stride(0) == 4);
+  assert(map1.stride(1) == 1);
+
+  using Ext3D = std::dextents&amp;lt;size_t, 3&amp;gt;;
+  using Mapping3D = std::layout_right::mapping&amp;lt;Ext3D&amp;gt;;
+  Mapping3D map2{Ext3D{4, 3, 2}};
+  assert(map2.stride(0) == 6);
+  assert(map2.stride(1) == 2);
+  assert(map2.stride(2) == 1);
+}
+```
+* stride[color ff0000]
+* std::extents[link ../../extents.md]
+* std::dextents[link ../../extents.md]
+* std::layout_right::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- mdspan/layout_right/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>5f397d4e59163b4df42c530b175b2474805e073e:working_style.md</id>
      <updated>2024-01-17T00:16:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index 05f738d96..592a43d0c 100644
--- a/working_style.md
+++ b/working_style.md
@@ -125,6 +125,7 @@ C++11以降対応については対応バージョンを明記します。バー
 | stop state                         | 停止状態                     |
 | Spurious Failure                   | 見かけ上の失敗&amp;lt;br/&amp;gt; [https://togetter.com/li/430770](https://togetter.com/li/430770) |
 | strict weak ordering               | 狭義の弱順序                 |
+| stride                             | (std::mdspanの) ストライド幅 |
 | strong ordering                    | 全順序                       |
 | structural type                    | 構造的型                     |
 | synchronization                    | 同期                         |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>AccsessorPolicy -- mdspanの名前付き要件のメタ指定修正 #1229</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/AccessorPolicy.html"/>
      <id>5fcf82919d1763672f494acfc3a2eb1ed0d19b42:reference/mdspan/AccessorPolicy.md</id>
      <updated>2024-01-15T18:49:52+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;named requirement&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;mdspan&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace &#34;&gt;::&lt;/span&gt;&lt;span class=&#34;token&#34;&gt;AccsessorPolicy&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;AccsessorPolicyは、多次元配列ビュー&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;を介した要素アクセス動作を定義するクラスが満たすべき要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;AccsessorPolicyを満たす型&lt;code&gt;A&lt;/code&gt;は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;は&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/copyable.html&#34;&gt;copyable&lt;/a&gt;&lt;/code&gt;のモデルであり、かつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_constructible.html&#34;&gt;is_nothrow_move_constructible_v&lt;/a&gt;&amp;lt;A&amp;gt;&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;であり、かつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_move_assignable.html&#34;&gt;is_nothrow_move_assignable_v&lt;/a&gt;&amp;lt;A&amp;gt;&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;であり、かつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_swappable.html&#34;&gt;is_nothrow_swappable_v&lt;/a&gt;&amp;lt;A&amp;gt;&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;であること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型&lt;code&gt;A&lt;/code&gt;は下記のメンバ型を持つこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A::element_type&lt;/code&gt; : 要素型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A::data_handle_type&lt;/code&gt; : メモリブロックのポインタ型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A::reference&lt;/code&gt; : 要素への参照型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A::offset_policy&lt;/code&gt; : &lt;code&gt;offset&lt;/code&gt;適用後のアクセサポリシー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;説明用の変数&lt;code&gt;a&lt;/code&gt;を&lt;code&gt;(const) A&lt;/code&gt;の値、&lt;code&gt;p&lt;/code&gt;を&lt;code&gt;(const) A::data_handle_type&lt;/code&gt;の値、&lt;code&gt;i&lt;/code&gt;を&lt;code&gt;size_t&lt;/code&gt;の値としたとき、下記の式が妥当であること&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.access(p, i)&lt;/code&gt; : &lt;code&gt;A::reference&lt;/code&gt;を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.offset(p, i)&lt;/code&gt; : &lt;code&gt;A::offset_policy::data_handle_type&lt;/code&gt;を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;AccessorPolicy&lt;/code&gt;に該当する型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2604r0.html&#34; target=&#34;_blank&#34;&gt;P2604R0 &lt;code&gt;mdspan&lt;/code&gt;: rename &lt;code&gt;pointer&lt;/code&gt; and &lt;code&gt;contiguous&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMapping -- mdspanの名前付き要件のメタ指定修正 #1229</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>5fcf82919d1763672f494acfc3a2eb1ed0d19b42:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-01-15T18:49:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
index 680c4ebf6..6ad40ba1a 100644
--- a/reference/mdspan/LayoutMapping.md
+++ b/reference/mdspan/LayoutMapping.md
@@ -1,6 +1,8 @@
 # LayoutMapping
-* named requirement[meta id-type]
 * cpp23[meta cpp]
+* mdspan[meta header]
+* named requirement[meta id-type]
+* [meta namespace]
 
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMappingPolicy -- mdspanの名前付き要件のメタ指定修正 #1229</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMappingPolicy.html"/>
      <id>5fcf82919d1763672f494acfc3a2eb1ed0d19b42:reference/mdspan/LayoutMappingPolicy.md</id>
      <updated>2024-01-15T18:49:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMappingPolicy.md b/reference/mdspan/LayoutMappingPolicy.md
index 5a6be231a..3ba9ecd17 100644
--- a/reference/mdspan/LayoutMappingPolicy.md
+++ b/reference/mdspan/LayoutMappingPolicy.md
@@ -1,6 +1,8 @@
 # LayoutMappingPolicy
-* named requirement[meta id-type]
 * cpp23[meta cpp]
+* mdspan[meta header]
+* named requirement[meta id-type]
+* [meta namespace]
 
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMapping --  mdspan/LayoutMapping: remove forbidden chars(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>c38cacd6357c780e1cdc98f0d8e161b21146c7d1:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-01-14T20:16:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
index e3fd173e4..680c4ebf6 100644
--- a/reference/mdspan/LayoutMapping.md
+++ b/reference/mdspan/LayoutMapping.md
@@ -63,11 +63,11 @@ LayoutMappingを満たす型`M`は
 
 説明用の変数`m`を`(const) M`の値、パック`i`を[`M::extents_type::rank()`](extents/rank.md)個からなる整数値、変数`r`を多次元の次元番号としたとき、下記の式が妥当であること
 
-- `m.extents()` : `const M​::​extents_type&amp;amp;`型を返すこと。
-- `m(i...)` : `M​::​index_type`型を返すこと。
+- `m.extents()` : `const M::extents_type&amp;amp;`型を返すこと。
+- `m(i...)` : `M::index_type`型を返すこと。
     - 戻り値 : 非負整数値
 - `m(i...) == m(static_cast&amp;lt;M::index_type&amp;gt;(i)...)` : `true`となること。
-- `m.required_span_size()` : `M​::​index_type`型を返すこと。
+- `m.required_span_size()` : `M::index_type`型を返すこと。
     - 戻り値 : `m.extents()`の多次元インデクス空間サイズが0のときは値`0`。そうでなければ、レイアウトマッピングによりアクセスする可能性のあるメモリブロック範囲の最大値に`1`を足した値。
 - `m.is_unique()` : `bool`型を返すこと。
     - 戻り値 : Unique特性を満たすときに限り`true`。
@@ -75,7 +75,7 @@ LayoutMappingを満たす型`M`は
     - 戻り値 : Exhaustive特性を満たすときに限り`true`。
 - `m.is_strided()` : `bool`型を返すこと。
     - 戻り値 : Strided特性を満たすときに限り`true`。
-- `m.stride(r)` : `M​::​index_type`型を返すこと。
+- `m.stride(r)` : `M::index_type`型を返すこと。
     - 前提条件 : `m.is_strided() == true`
     - 戻り値 : `r`番目次元のストライド幅
 - `M::is_always_unique()` : `bool`型の定数式となること。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>AccsessorPolicy -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/AccessorPolicy.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/AccessorPolicy.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;named requirement&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;AccsessorPolicy&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;AccsessorPolicyは、多次元配列ビュー&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;を介した要素アクセス動作を定義するクラスが満たすべき要件である。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;AccsessorPolicyを満たす型&lt;code&gt;A&lt;/code&gt;は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;は&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/copyable.html&#34;&gt;copyable&lt;/a&gt;&lt;/code&gt;のモデルであり、かつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_constructible.html&#34;&gt;is_nothrow_move_constructible_v&lt;/a&gt;&amp;lt;A&amp;gt;&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;であり、かつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_move_assignable.html&#34;&gt;is_nothrow_move_assignable_v&lt;/a&gt;&amp;lt;A&amp;gt;&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;であり、かつ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_nothrow_swappable.html&#34;&gt;is_nothrow_swappable_v&lt;/a&gt;&amp;lt;A&amp;gt;&lt;/code&gt;は&lt;code&gt;true&lt;/code&gt;であること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型&lt;code&gt;A&lt;/code&gt;は下記のメンバ型を持つこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A::element_type&lt;/code&gt; : 要素型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A::data_handle_type&lt;/code&gt; : メモリブロックのポインタ型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A::reference&lt;/code&gt; : 要素への参照型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A::offset_policy&lt;/code&gt; : &lt;code&gt;offset&lt;/code&gt;適用後のアクセサポリシー&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;説明用の変数&lt;code&gt;a&lt;/code&gt;を&lt;code&gt;(const) A&lt;/code&gt;の値、&lt;code&gt;p&lt;/code&gt;を&lt;code&gt;(const) A::data_handle_type&lt;/code&gt;の値、&lt;code&gt;i&lt;/code&gt;を&lt;code&gt;size_t&lt;/code&gt;の値としたとき、下記の式が妥当であること&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.access(p, i)&lt;/code&gt; : &lt;code&gt;A::reference&lt;/code&gt;を返す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a.offset(p, i)&lt;/code&gt; : &lt;code&gt;A::offset_policy::data_handle_type&lt;/code&gt;を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;AccessorPolicy&lt;/code&gt;に該当する型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/default_accessor.html&#34;&gt;default_accessor&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++23&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.html&#34;&gt;mdspan&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html&#34; target=&#34;_blank&#34;&gt;P0009R18 MDSPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2604r0.html&#34; target=&#34;_blank&#34;&gt;P2604R0 &lt;code&gt;mdspan&lt;/code&gt;: rename &lt;code&gt;pointer&lt;/code&gt; and &lt;code&gt;contiguous&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMapping -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
new file mode 100644
index 000000000..e3fd173e4
--- /dev/null
+++ b/reference/mdspan/LayoutMapping.md
@@ -0,0 +1,109 @@
+# LayoutMapping
+* named requirement[meta id-type]
+* cpp23[meta cpp]
+
+
+## 概要
+LayoutMappingは、多次元配列ビュー[`mdspan`](mdspan.md)において多次元インデクスから参照先メモリブロック位置への対応関係（レイアウトマッピング）を定めるクラスが満たすべき要件である。
+
+LayoutMappingを満たすユーザ定義型`layout_custom::mapping&amp;lt;E&amp;gt;`は、常に[レイアウトマッピングポリシー](LayoutMappingPolicy.md)を満たす`layout_custom`の公開メンバ`mapping`クラステンプレートとして定義される。
+
+```cpp
+// レイアウトマッピングポリシーs
+struct layout_custom {
+  // レイアウトマッピング
+  template&amp;lt;class Extents&amp;gt;
+  class mapping {
+  public:
+    using layout_type = layout_custom;
+    using extent_type = Extents;
+    // ...
+  };
+};
+```
+* Extents[link extents.md]
+
+### レイアウトマッピング特性
+
+レイアウトマッピングによる多次元インデクスからメモリブロック位置への変換は、次の3種類の特性によって記述される。
+
+- Unique特性 : 異なる多次元インデクス値であれば、互いに異なる要素位置へと変換される。
+- Exhaustive特性 : 取りうる全ての多次元インデクス値に対応する要素位置を考えたとき、アクセスされうる要素位置に隙間が生じない。
+- Strided特性 : 要素位置は多次元インデクス値と各次元ストライド幅のみを用いて計算できる。
+
+例えば、多次元配列ビュー[`mdspan`](mdspan.md)のデフォルトレイアウトポリシー[`layout_right`](layout_right.md)は3つの特性を全て満たす。
+要素数3×2の2次元配列ビュー`mat3x2`における有効な多次元インデクス値`i,j`は`0,0`, `0,1`, `1,0`, `1,1`, `2,0`, `2,1`の6パターンとなり、それぞれ参照先メモリブロック`a`の要素位置`a[0]`, `a[1]`, `a[2]`, `a[3]`, `a[4]`, `a[5]`に対応する。
+
+```cpp
+int a[6] = {0, 1, 2, 3, 4, 5};
+
+using Extents = std::extents&amp;lt;size_t, 3, 2&amp;gt;;
+std::mdspan&amp;lt;int, Extents&amp;gt; mat3x2{a};
+```
+
+- Unique特性 : 異なる多次元インデクス値は、異なる要素位置に対応する。参照先が重複することはない。
+- Exhaustive特性 : 全ての多次元インデクス値に対応する要素位置は連続している。
+- Strided特性 : 多次元インデクス値`i,j`に対応する要素位置は、ストライド幅`2,1`を用いて`(i*2+j)*1`と計算できる。
+
+
+## 要件
+LayoutMappingを満たす型`M`は
+
+- `M`は[`copyable`](/reference/concepts/copyable.md)および[`equality_comparable`](/reference/concepts/equality_comparable.md)のモデルであり、かつ
+- [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;M&amp;gt;`は`true`であり、かつ
+- [`is_nothrow_move_assignable_v`](/reference/type_traits/is_nothrow_move_assignable.md)`&amp;lt;M&amp;gt;`は`true`であり、かつ
+- [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;M&amp;gt;`は`true`であること
+
+型`M`は下記のメンバ型を持つこと
+
+- `M::extents_type` : [`extents`](extents.md)の特殊化
+- `M::index_type` : [`extents_type::index_type`](extents.md)
+- `M::rank_type` : [`extents_type::rank_type`](extents.md)
+- `M::layout_type` : 自クラスを提供する[レイアウトマッピングポリシー型](LayoutMappingPolicy.md)
+
+説明用の変数`m`を`(const) M`の値、パック`i`を[`M::extents_type::rank()`](extents/rank.md)個からなる整数値、変数`r`を多次元の次元番号としたとき、下記の式が妥当であること
+
+- `m.extents()` : `const M​::​extents_type&amp;amp;`型を返すこと。
+- `m(i...)` : `M​::​index_type`型を返すこと。
+    - 戻り値 : 非負整数値
+- `m(i...) == m(static_cast&amp;lt;M::index_type&amp;gt;(i)...)` : `true`となること。
+- `m.required_span_size()` : `M​::​index_type`型を返すこと。
+    - 戻り値 : `m.extents()`の多次元インデクス空間サイズが0のときは値`0`。そうでなければ、レイアウトマッピングによりアクセスする可能性のあるメモリブロック範囲の最大値に`1`を足した値。
+- `m.is_unique()` : `bool`型を返すこと。
+    - 戻り値 : Unique特性を満たすときに限り`true`。
+- `m.is_exhaustive()` : `bool`型を返すこと。
+    - 戻り値 : Exhaustive特性を満たすときに限り`true`。
+- `m.is_strided()` : `bool`型を返すこと。
+    - 戻り値 : Strided特性を満たすときに限り`true`。
+- `m.stride(r)` : `M​::​index_type`型を返すこと。
+    - 前提条件 : `m.is_strided() == true`
+    - 戻り値 : `r`番目次元のストライド幅
+- `M::is_always_unique()` : `bool`型の定数式となること。
+    - 戻り値 : 型`M`のあらゆるオブジェクトにおいてUnique特性を満たすときに`true`。
+- `M::is_always_exhaustive()` : `bool`型の定数となること。
+    - 戻り値 : 型`M`のあらゆるオブジェクトにおいてExhaustive特性を満たすときに`true`。
+- `M::is_always_strided()` : `bool`型の定数となること。
+    - 戻り値 : 型`M`のあらゆるオブジェクトにおいてStrided特性を満たすときに`true`。
+
+
+## `LayoutMapping`に該当する型
+
+- `layout_left::mapping&amp;lt;E&amp;gt;`
+- `layout_right::mapping&amp;lt;E&amp;gt;`
+- `layout_stride::mapping&amp;lt;E&amp;gt;`
+
+
+## バージョン
+### 言語
+- C++23
+
+
+## 関連項目
+- [`mdspan`](mdspan.md)
+- [`extents`](extents.md)
+- [LayoutMappingPolicy](LayoutMappingPolicy.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [P2604R0 `mdspan`: rename `pointer` and `contiguous`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2604r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>LayoutMappingPolicy -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMappingPolicy.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/LayoutMappingPolicy.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMappingPolicy.md b/reference/mdspan/LayoutMappingPolicy.md
new file mode 100644
index 000000000..5a6be231a
--- /dev/null
+++ b/reference/mdspan/LayoutMappingPolicy.md
@@ -0,0 +1,55 @@
+# LayoutMappingPolicy
+* named requirement[meta id-type]
+* cpp23[meta cpp]
+
+
+## 概要
+LayoutMappingPolicyは、多次元配列ビュー[`mdspan`](mdspan.md)において多次元インデクスから参照先メモリブロック位置へと変換する[レイアウトマッピング](LayoutMapping.md)を定めるクラスが満たすべき要件である。
+
+LayoutMappingPolicyを満たすユーザ定義`layout_custom`ポリシークラスは、下記の構造で定義される。
+
+```cpp
+// レイアウトマッピングポリシー
+struct layout_custom {
+  // レイアウトマッピング
+  template&amp;lt;class Extents&amp;gt;
+  class mapping {
+  public:
+    using layout_type = layout_custom;
+    using extent_type = Extents;
+    // ...
+  };
+};
+```
+* Extents[link extents.md]
+
+
+## 要件
+LayoutMappingPolicyを満たす型`MP`は
+
+- [`extents`](extents.md)の特殊化`E`に対して`MP::mapping&amp;lt;E&amp;gt;`が有効であり、かつ
+- その型`X`が[レイアウトマッピング要件](LayoutMapping.md)を満たし、かつ
+- メンバ型`X::layout_type`が型`MP`を表しており、かつ
+- メンバ型`X::extent_type`が型`E`を表すこと。
+
+
+## `LayoutMappingPolicy`に該当する型
+
+- [`layout_left`](layout_left.md)
+- [`layout_right`](layout_right.md)
+- [`layout_stride`](layout_stride.md)
+
+
+## バージョン
+### 言語
+- C++23
+
+
+## 関連項目
+- [`mdspan`](mdspan.md)
+- [`extents`](extents.md)
+- [LayoutMapping](LayoutMapping.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_accessor -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/default_accessor.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/default_accessor.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/default_accessor.md b/reference/mdspan/default_accessor.md
index ed76a8268..a14f5ef0d 100644
--- a/reference/mdspan/default_accessor.md
+++ b/reference/mdspan/default_accessor.md
@@ -18,27 +18,7 @@ namespace std {
 
 `default_accessor`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`semiregular`](/reference/concepts/semiregular.md)のモデルである。
 
-### アクセサポリシー要件
-`default_accessor`は、下記のアクセサポリシー要件を満たす。
-
-説明用の型`A`をアクセサポリシーとしたとき
-
-- `A`は[`copyable`](/reference/concepts/copyable.md)のモデルであり、かつ
-- [`is_nothrow_move_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;A&amp;gt;`は`true`であり、かつ
-- [`is_nothrow_move_assignable_v`](/reference/type_traits/is_nothrow_move_assignable.md)`&amp;lt;A&amp;gt;`は`true`であり、かつ
-- [`is_nothrow_swappable_v`](/reference/type_traits/is_nothrow_swappable.md)`&amp;lt;A&amp;gt;`は`true`であること
-
-型`A`は下記のメンバ型を持つこと
-
-- `A::element_type` : 要素型
-- `A::data_handle_type` : メモリブロックのポインタ型
-- `A::reference` : 要素への参照型
-- `A::offset_policy` : `offset`適用後のアクセサポリシー
-
-説明用の変数`a`を`(const) A`の値、`p`を`(const) A::data_handle_type`の値、`i`を`size_t`の値としたとき、下記の式が妥当であること
-
-- `a.access(p, i)` : `A::eference`を返す
-- `a.offset(p, i)` : `A::offset_policy::data_handle_type`を返す
+`default_accessor`は[アクセサポリシー要件](AccessorPolicy.md)を満たす。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/layout_left.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left.md b/reference/mdspan/layout_left.md
index 2c01a5492..91c040cbc 100644
--- a/reference/mdspan/layout_left.md
+++ b/reference/mdspan/layout_left.md
@@ -16,9 +16,11 @@ namespace std {
 * mapping[link mapping.md.nolink]
 
 ## 概要
-`layout_left`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、FortranやMatlab多次元配列と互換性のある列優先(column major)レイアウトマッピングを表現するポリシークラスである。
+`layout_left`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、FortranやMatlab多次元配列と互換性のある列優先(column major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
 
-ポリシークラス名の由来は、多次元配列インデクスのうち最左次元が隣接配置（ストライド=1）されるところから来ている。
+`layout_left`は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
+
+ポリシークラス名の由来は、多次元インデクスのうち最左次元が隣接配置（ストライド=1）され、インデクス次元の左から右の順にストライドが増大するところから来ている。
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_right -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/layout_right.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right.md b/reference/mdspan/layout_right.md
index 67c72013b..9d514db34 100644
--- a/reference/mdspan/layout_right.md
+++ b/reference/mdspan/layout_right.md
@@ -16,9 +16,11 @@ namespace std {
 * mapping[link mapping.md.nolink]
 
 ## 概要
-`layout_right`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、C/C++多次元配列と互換性のある行優先(row major)レイアウトマッピングを表現するポリシークラスである。
+`layout_right`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、C/C++多次元配列と互換性のある行優先(row major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
 
-ポリシークラス名の由来は、多次元配列インデクスのうち最右次元が隣接配置（ストライド=1）されるところから来ている。
+`layout_right`は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
+
+ポリシークラス名の由来は、多次元インデクスのうち最右次元が隣接配置（ストライド=1）され、インデクス次元の右から左の順にストライドが増大するところから来ている。
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
index 1163ecf4d..875850089 100644
--- a/reference/mdspan/layout_stride.md
+++ b/reference/mdspan/layout_stride.md
@@ -16,7 +16,9 @@ namespace std {
 * mapping[link mapping.md.nolink]
 
 ## 概要
-`layout_stride`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定したレイアウトマッピングを表現するポリシークラスである。
+`layout_stride`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定した[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
+
+`layout_stride`は、[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たす[トリビアル型](/reference/type_traits/is_trivial.md)である。
 
 
 ## メンバ型
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mdspan -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/mdspan.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:reference/mdspan/mdspan.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/mdspan.md b/reference/mdspan/mdspan.md
index 2938e5749..3ab404ac7 100644
--- a/reference/mdspan/mdspan.md
+++ b/reference/mdspan/mdspan.md
@@ -14,6 +14,9 @@ namespace std {
   class mdspan;
 }
 ```
+* Extents[link extents.md]
+* LayoutPolicy[link LayoutMappingPolicy.md]
+* AccessorPolicy[link AccessorPolicy.md]
 * layout_right[link layout_right.md]
 * default_accessor[link default_accessor.md]
 
@@ -31,8 +34,8 @@ namespace std {
 ### 説明専用メンバ変数
 `mdspan`クラスは、下記の説明専用メンバ変数を保持する。
 
-- `acc_` : `accessor_type`型の要素アクセサ
-- `map_` : `mapping_type`型のレイアウトマッピング
+- `acc_` : `accessor_type`型の[要素アクセサ](AccessorPolicy.md)
+- `map_` : `mapping_type`型の[レイアウトマッピング](LayoutMapping.md)
 - `ptr_` : `data_handle_type`型のメモリブロックへのハンドル（ポインタ）
 
 
@@ -41,7 +44,7 @@ namespace std {
 - `Extents`は[`extents`](extents.md)の特殊化であり、かつ
 - [`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;ElementType, typename AccessorPolicy::element_type&amp;gt;`が`true`であること。
 
-`LayoutPolicy`はレイアウトマッピングポリシー要件を満たし、かつ`AccessorPolicy`はアクセサポリシー要件を満たすこと。
+`LayoutPolicy`は[レイアウトマッピングポリシー要件](LayoutMappingPolicy.md)を満たし、かつ`AccessorPolicy`は[アクセサポリシー要件](AccessorPolicy.md)を満たすこと。
 
 
 ## メンバ関数
@@ -83,13 +86,13 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| `is_always_unique()`     | `mapping_type::is_always_unique()`     | C++23 |
-| `is_always_exhaustive()` | `mapping_type::is_always_exhaustive()` | C++23 |
-| `is_always_strided()`    | `mapping_type::is_always_strided()`    | C++23 |
-| `is_unique()`     | `map_.is_unique()`     | C++23 |
-| `is_exhaustive()` | `map_.is_exhaustive()` | C++23 |
-| `is_strided()`    | `map_.is_strided()`    | C++23 |
-| `stride(rank_type r)` | `map_.stride(r)`   | C++23 |
+| `is_always_unique()`     | [`mapping_type::is_always_unique()`](LayoutMapping.md)     | C++23 |
+| `is_always_exhaustive()` | [`mapping_type::is_always_exhaustive()`](LayoutMapping.md) | C++23 |
+| `is_always_strided()`    | [`mapping_type::is_always_strided()`](LayoutMapping.md)    | C++23 |
+| `is_unique()`         | [`map_.is_unique()`](LayoutMapping.md)     | C++23 |
+| `is_exhaustive()`     | [`map_.is_exhaustive()`](LayoutMapping.md) | C++23 |
+| `is_strided()`        | [`map_.is_strided()`](LayoutMapping.md)    | C++23 |
+| `stride(rank_type r)` | [`map_.stride(r)`](LayoutMapping.md)       | C++23 |
 
 
 ## メンバ型
@@ -97,15 +100,15 @@ namespace std {
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | `extents_type`  | 多次元配列サイズ型[`Extents`](extents.md) | C++23 |
-| `layout_type`   | レイアウトマッピングポリシー`LayoutPolicy` | C++23 |
-| `accessor_type` | アクセサポリシー`AccessorPolicy` | C++23 |
-| `mapping_type` | レイアウトマッピング`LayoutPolicy::mapping&amp;lt;Extents&amp;gt;` | C++23 |
+| `layout_type`   | [レイアウトマッピングポリシー型`LayoutPolicy`](LayoutMappingPolicy.md) | C++23 |
+| `accessor_type` | [アクセサポリシー型`AccessorPolicy`](AccessorPolicy.md) | C++23 |
+| `mapping_type` | [レイアウトマッピング型`LayoutPolicy::mapping&amp;lt;Extents&amp;gt;`](LayoutMapping.md) | C++23 |
 | `element_type` | 要素型`ElementType` | C++23 |
 | `value_type`   | 要素の値型[`remove_cv_t`](/reference/type_traits/remove_cvref.md)`&amp;lt;ElementType&amp;gt;` | C++23 |
 | `size_type` | [`Extents::size_type`](extents.md) | C++23 |
 | `rank_type` | [`Extents::rank_type`](extents.md) | C++23 |
-| `pointer`   | `AccessorPolicy::pointer` | C++23 |
-| `reference` | `AccessorPolicy::reference` | C++23 |
+| `pointer`   | [`AccessorPolicy::pointer`](AccessorPolicy.md) | C++23 |
+| `reference` | [`AccessorPolicy::reference`](AccessorPolicy.md) | C++23 |
 
 
 ## 非メンバ（*Hidden friends*）関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- mdspan: (名前付き)要件(#1077)</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>deacb4747cde3308b630297f3a192df504c55dd3:working_style.md</id>
      <updated>2024-01-14T19:55:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index 07f729d4a..05f738d96 100644
--- a/working_style.md
+++ b/working_style.md
@@ -71,6 +71,7 @@ C++11以降対応については対応バージョンを明記します。バー
 | derived class                      | 派生クラス                   |
 | direct base class                  | 直接基底クラス               |
 | delegate                           | 委譲                         |
+| dynamic extent                     | (std::mdspanの) 動的要素数   |
 | effects                            | 効果                         |
 | emplace                            | 直接構築                     |
 | empty                              | 空                           |
@@ -94,6 +95,8 @@ C++11以降対応については対応バージョンを明記します。バー
 | move                               | (std::move 的な意味で)ムーブ |
 | move assignment                    | ムーブ代入                   |
 | move constructor                   | ムーブコンストラクタ         |
+| multidimensional index             | 多次元インデクス             |
+| multidimensional index space       | 多次元インデクス空間         |
 | mutable iterator                   | 可変イテレータ               |
 | non-virtual base class             | 非仮想基底クラス             |
 | note                               | 注                           |
@@ -117,6 +120,7 @@ C++11以降対応については対応バージョンを明記します。バー
 | rvalue reference                   | 右辺値参照                   |
 | sequence container(s)              | シーケンスコンテナ           |
 | signed                             | 符号付き                     |
+| static extent                      | (std::mdspanの) 静的要素数   |
 | stop request                       | 停止要求                     |
 | stop state                         | 停止状態                     |
 | Spurious Failure                   | 見かけ上の失敗&amp;lt;br/&amp;gt; [https://togetter.com/li/430770](https://togetter.com/li/430770) |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
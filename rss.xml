<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-11-05T10:56:52.584425</updated>
  <id>46c1a491-ca38-476e-abd4-089b9b689069</id>

  
    <entry>
      <title>exchange -- Merge pull request #1210 from cpprefjp/tshino-fix-exchange</title>
      <link href="https://cpprefjp.github.io/reference/utility/exchange.html"/>
      <id>1d9efe41ffa19e7ef2298f09db571821a9f85cbe:reference/utility/exchange.md</id>
      <updated>2023-11-05T19:53:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/exchange.md b/reference/utility/exchange.md
index 5f14d9212..873660959 100644
--- a/reference/utility/exchange.md
+++ b/reference/utility/exchange.md
@@ -24,7 +24,7 @@ namespace std {
 
 
 ## 効果
-第1パラメータ`obj`で受け取った変数への参照に、第2パラメータ`new_val`の値をムーブ代入し、代入前の`obj`の状態を返す。
+第1パラメータ`obj`で受け取った変数への参照に、第2パラメータ`new_val`の値をコピー代入または可能ならムーブ代入し、代入前の`obj`の状態を返す。
 
 以下と等価の効果を持つ：
 
@@ -215,4 +215,4 @@ Hello 0x7ffc560ca4cc
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
 - [`std::exchange` Patterns: Fast, Safe, Expressive, and Probably Underused](https://www.fluentcpp.com/2020/09/25/stdexchange-patterns-fast-safe-expressive-and-probably-underused/)
 - [`std::exchange`によるmoveしてリセットするイディオムの御紹介](https://onihusube.hatenablog.com/entry/2020/10/31/163244)
-- [P2401R0 Add a conditional noexcept specification to std::exchange](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2401r0.html)
\ No newline at end of file
+- [P2401R0 Add a conditional noexcept specification to std::exchange](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2401r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>PODを非推奨化 -- Merge pull request #1211 from suzuki-kei/fix-typo-on-lang-cpp20-deprecate_pod</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_pod.html"/>
      <id>0b7710f00b0c9829be31cb02c0e570e6237c807f:lang/cpp20/deprecate_pod.md</id>
      <updated>2023-11-05T19:50:22+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;PODを非推奨化&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pod.html&#34;&gt;POD (Plain Old Data) という型の分類&lt;/a&gt;は、C++11において&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivial.html&#34;&gt;トリビアル型&lt;/a&gt;と&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_standard_layout.html&#34;&gt;スタンダードレイアウト型&lt;/a&gt;に用語が分割された。&lt;/p&gt;
&lt;p&gt;C++20では規格の文面に残っていた「POD」の使用をやめ、スタンダードレイアウト型などのほかの型分類に置き換えた。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pod.html&#34;&gt;is_pod&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;aligned_storage&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;aligned_union&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/max_align_t.html&#34;&gt;max_align_t&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;P0767R1 Deprecate POD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2342.htm&#34; target=&#34;_blank&#34;&gt;N2342 POD&#39;s Revisited; Resolving Core Issue 568 (Revision 5)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/20081127/1227777378&#34; target=&#34;_blank&#34;&gt;C++0x POD再考 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11においてPODという用語が分割された文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>PODを非推奨化 -- typo を修正: &#34;スタンダードレイアウト型型&#34; -&gt; &#34;スタンダードレイアウト型&#34;</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/deprecate_pod.html"/>
      <id>7e37ab27d5f03221181f8282d1385efe68658864:lang/cpp20/deprecate_pod.md</id>
      <updated>2023-11-05T08:45:00+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;PODを非推奨化&lt;/span&gt;&lt;span class=&#34;cpp cpp20&#34; title=&#34;C++20で追加&#34;&gt;(C++20)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pod.html&#34;&gt;POD (Plain Old Data) という型の分類&lt;/a&gt;は、C++11において&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_trivial.html&#34;&gt;トリビアル型&lt;/a&gt;と&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_standard_layout.html&#34;&gt;スタンダードレイアウト型&lt;/a&gt;に用語が分割された。&lt;/p&gt;
&lt;p&gt;C++20では規格の文面に残っていた「POD」の使用をやめ、スタンダードレイアウト型などのほかの型分類に置き換えた。&lt;/p&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_pod.html&#34;&gt;is_pod&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;aligned_storage&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;aligned_union&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/max_align_t.html&#34;&gt;max_align_t&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html&#34; target=&#34;_blank&#34;&gt;P0767R1 Deprecate POD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2342.htm&#34; target=&#34;_blank&#34;&gt;N2342 POD&#39;s Revisited; Resolving Core Issue 568 (Revision 5)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/20081127/1227777378&#34; target=&#34;_blank&#34;&gt;C++0x POD再考 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C++11においてPODという用語が分割された文書&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>SUZUKI Kei</name>
        <email>todokimasen@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>exchange -- std::exchangeが常にムーブ代入するような記述の修正</title>
      <link href="https://cpprefjp.github.io/reference/utility/exchange.html"/>
      <id>05ee2e647ca2e59498eb1743056925969eeb6e7f:reference/utility/exchange.md</id>
      <updated>2023-11-04T19:40:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/exchange.md b/reference/utility/exchange.md
index 5f14d9212..873660959 100644
--- a/reference/utility/exchange.md
+++ b/reference/utility/exchange.md
@@ -24,7 +24,7 @@ namespace std {
 
 
 ## 効果
-第1パラメータ`obj`で受け取った変数への参照に、第2パラメータ`new_val`の値をムーブ代入し、代入前の`obj`の状態を返す。
+第1パラメータ`obj`で受け取った変数への参照に、第2パラメータ`new_val`の値をコピー代入または可能ならムーブ代入し、代入前の`obj`の状態を返す。
 
 以下と等価の効果を持つ：
 
@@ -215,4 +215,4 @@ Hello 0x7ffc560ca4cc
 - [P0202R3 Add Constexpr Modifiers to Functions in `&amp;lt;algorithm&amp;gt;` and `&amp;lt;utility&amp;gt;` Headers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html)
 - [`std::exchange` Patterns: Fast, Safe, Expressive, and Probably Underused](https://www.fluentcpp.com/2020/09/25/stdexchange-patterns-fast-safe-expressive-and-probably-underused/)
 - [`std::exchange`によるmoveしてリセットするイディオムの御紹介](https://onihusube.hatenablog.com/entry/2020/10/31/163244)
-- [P2401R0 Add a conditional noexcept specification to std::exchange](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2401r0.html)
\ No newline at end of file
+- [P2401R0 Add a conditional noexcept specification to std::exchange](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2401r0.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>はじめてのコントリビュート -- Merge pull request #1202 from cpprefjp/contribution_point</title>
      <link href="https://cpprefjp.github.io/start_editing.html"/>
      <id>04357d60200ca41ed984870aca07ba97918047fd:start_editing.md</id>
      <updated>2023-11-04T05:41:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing.md b/start_editing.md
index 6f28be5be..6108cde98 100644
--- a/start_editing.md
+++ b/start_editing.md
@@ -262,3 +262,87 @@ C++の次のバージョンで入ることが決まった機能については
 
 これらはタスクissueにもできていませんが、手が足りず作業できていません。
 
+
+## &amp;lt;a name=&amp;#34;point&amp;#34; href=&amp;#34;#point&amp;#34;&amp;gt;貢献ポイント&amp;lt;/a&amp;gt;
+cpprefjpおよびboostjpでの作業は、以下のように貢献ポイントを割り振った上で、年間の貢献 (12月から翌年11月) を集計して収益をコントリビューターの方々に分配します。
+
+分配の手順は以下のようになります：
+
+1. コアメンバーが集計用のPull Requestを立てる
+2. コントリビューターの方々からの追加・修正の指摘を募集する
+3. 各コントリビューターの年間貢献ポイントと分配率を仮決定
+4. 貢献ポイントの追加・修正指摘、および分配の受け入れ、または辞退の申し出を受け付ける (1週間程度)
+    - 期間内に分配の受け入れ申し出がない場合は、貢献ポイントを次年繰り越す (前年まで保持)
+5. 辞退者を除いて分配率および分配額を決定する
+6. 入金先の情報をコアメンバー宛に伝える
+    - cpprefjpの銀行口座から支払う場合は、Googleフォームを用意する予定
+    - Open Collectiveから支払う場合は、後述する手順で経費申請する
+
+お金での分配を辞退された方にも、ステッカーの配布などでお返しができればと考えています。
+
+なお、マージされずにクローズされたPull Requestについては貢献ポイントの対象外とさせていただきます。
+
+また、masterブランチにマージされずオープンなままのPull Requestについては、マージされた年に貢献ポイントをつけさせていただきます。
+
+### cpprefjp
+
+| タグ | ポイント | 説明 |
+|-----|---------|------|
+| cpprefjp/typo     |  1 | 誤字・脱字の修正 (ページ単位) |
+| cpprefjp/link     |  2 | 関連項目・参照リンクなどの追加 (ページ単位) |
+| cpprefjp/addref   | 20 | リファレンスを1ページ追加 |
+| cpprefjp/addlang  | 20 | 言語機能を1ページ追加 |
+| cpprefjp/fixs     |  2 | 既存ページへの修正 : small 軽微な修正 (ページ単位) |
+| cpprefjp/fixm     |  5 | 既存ページへの修正 : medium 追加説明、サンプルコード追加 (ページ単位) |
+| cpprefjp/fixl     | 10 | 既存ページへの修正 : large 仕様変更への対応 (ページ単位) |
+| cpprefjp/compiler |  2 | 動作確認できたコンパイラバージョンの記載 (ページ単位) |
+
+### boostjp
+
+| タグ | ポイント | 説明 |
+|-----|---------|------|
+| boostjp/typo     |  1 | 誤字・脱字の修正 (ページ単位 |
+| boostjp/releases |  2 | Boostリリースノート1件追加 small : maintenance workなどの小さなリリースノート |
+| boostjp/releasem |  5 | Boostリリースノートページを準備 |
+| boostjp/releasem | 10 | Boostリリースノート 1件追加 medium : 10行以下の中程度の大きさ |
+| boostjp/releasel | 20 | Boostリリースノート 1件追加 large : mediumを超える大きさ |
+| boostjp/addrefs  | 10 | Boost逆引きリファレンス : small (1例追加) |
+| boostjp/addrefm  | 20 | Boost逆引きリファレンス : medium (標準C++のバージョンアップ対応1例単位、Boostのバージョンアップ対応1例単位) |
+| boostjp/boosts   | 5 | Boostへの貢献 small (typoの修正など) |
+
+### ツール類
+
+CIスクリプト、site_generator、kunaiなど。
+
+| タグ | ポイント | 説明 |
+|-----|---------|------|
+| tool/fixbug     | 30 | バグ修正 |
+| tool/improves   | 10 | コード改善 : small |
+| tool/improvem   | 30 | コード改善 : medium |
+| tool/improvem   | 50 | コード改善 : large |
+| tool/updatelib  | 20 | 依存ライブラリのアップデート (直接使用のライブラリ単位) |
+| tool/updatelang | 10 | 使用言語のアップデート : small (とくにコード変更なく更新できた) |
+| tool/updatelang | 30 | 使用言語のアップデート : medium (多少のコード修正で更新できた) |
+| tool/updatelang | 50 | 使用言語のアップデート : large (大きいまたはむずかしいコード修正をして更新できた) |
+| tool/adds       | 30 | 新たな仕組みの導入 small : (C++バージョン追加、カテゴリ追加など) |
+| tool/addm       | 50 | 新たな仕組みの導入 medium |
+| tool/addl       | 100〜 | 新たな仕組みの導入 large : キーワード自動リンク、相対リンク対応など |
+
+### Open Collectiveでの経費申請
+1. Open Collectiveのcpprefjpページに行く
+2. 画面右側の「アクション」から「経費を申請」をクリック
+3. ご自身の住所・氏名などを入力
+4. 支払い方法を入力
+    - 通貨はUSDを選択
+    - 送金先の国はJapanを選択
+    - 「bank account (銀行口座)」または「PayPal」を選択
+    - bank accountであれば、口座情報として銀行のSWIFT / BIC CODEおよびIBANを調べて入力する
+        - Google検索で「(銀行名) BIC CODE」などで検索
+        - 三菱UFC銀行なら「BOTKJPJT」
+        - bank accountのIBAN (International Bank Account Number) は、支店番号 + 口座番号を連続で記載する
+    - PayPalであれば、ご自身のPayPalアカウントを入力する
+    - ご自身の住所を英語で入力する
+    - 請求金額および請求の説明を記載して送信する
+        - 説明欄にGitHubアカウントを書いてもらえると、だれの申請かがわかりやすくて助かる
+5. cpprefjpから経費の承認がされれば、支払われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
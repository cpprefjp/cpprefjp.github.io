<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-11-03T20:44:35.756435</updated>
  <id>f84554d8-aade-4eea-b9f0-eccf3b2b4a9b</id>

  
    <entry>
      <title>はじめてのコントリビュート -- Merge pull request #1202 from cpprefjp/contribution_point</title>
      <link href="https://cpprefjp.github.io/start_editing.html"/>
      <id>04357d60200ca41ed984870aca07ba97918047fd:start_editing.md</id>
      <updated>2023-11-04T05:41:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/start_editing.md b/start_editing.md
index 6f28be5be..6108cde98 100644
--- a/start_editing.md
+++ b/start_editing.md
@@ -262,3 +262,87 @@ C++の次のバージョンで入ることが決まった機能については
 
 これらはタスクissueにもできていませんが、手が足りず作業できていません。
 
+
+## &amp;lt;a name=&amp;#34;point&amp;#34; href=&amp;#34;#point&amp;#34;&amp;gt;貢献ポイント&amp;lt;/a&amp;gt;
+cpprefjpおよびboostjpでの作業は、以下のように貢献ポイントを割り振った上で、年間の貢献 (12月から翌年11月) を集計して収益をコントリビューターの方々に分配します。
+
+分配の手順は以下のようになります：
+
+1. コアメンバーが集計用のPull Requestを立てる
+2. コントリビューターの方々からの追加・修正の指摘を募集する
+3. 各コントリビューターの年間貢献ポイントと分配率を仮決定
+4. 貢献ポイントの追加・修正指摘、および分配の受け入れ、または辞退の申し出を受け付ける (1週間程度)
+    - 期間内に分配の受け入れ申し出がない場合は、貢献ポイントを次年繰り越す (前年まで保持)
+5. 辞退者を除いて分配率および分配額を決定する
+6. 入金先の情報をコアメンバー宛に伝える
+    - cpprefjpの銀行口座から支払う場合は、Googleフォームを用意する予定
+    - Open Collectiveから支払う場合は、後述する手順で経費申請する
+
+お金での分配を辞退された方にも、ステッカーの配布などでお返しができればと考えています。
+
+なお、マージされずにクローズされたPull Requestについては貢献ポイントの対象外とさせていただきます。
+
+また、masterブランチにマージされずオープンなままのPull Requestについては、マージされた年に貢献ポイントをつけさせていただきます。
+
+### cpprefjp
+
+| タグ | ポイント | 説明 |
+|-----|---------|------|
+| cpprefjp/typo     |  1 | 誤字・脱字の修正 (ページ単位) |
+| cpprefjp/link     |  2 | 関連項目・参照リンクなどの追加 (ページ単位) |
+| cpprefjp/addref   | 20 | リファレンスを1ページ追加 |
+| cpprefjp/addlang  | 20 | 言語機能を1ページ追加 |
+| cpprefjp/fixs     |  2 | 既存ページへの修正 : small 軽微な修正 (ページ単位) |
+| cpprefjp/fixm     |  5 | 既存ページへの修正 : medium 追加説明、サンプルコード追加 (ページ単位) |
+| cpprefjp/fixl     | 10 | 既存ページへの修正 : large 仕様変更への対応 (ページ単位) |
+| cpprefjp/compiler |  2 | 動作確認できたコンパイラバージョンの記載 (ページ単位) |
+
+### boostjp
+
+| タグ | ポイント | 説明 |
+|-----|---------|------|
+| boostjp/typo     |  1 | 誤字・脱字の修正 (ページ単位 |
+| boostjp/releases |  2 | Boostリリースノート1件追加 small : maintenance workなどの小さなリリースノート |
+| boostjp/releasem |  5 | Boostリリースノートページを準備 |
+| boostjp/releasem | 10 | Boostリリースノート 1件追加 medium : 10行以下の中程度の大きさ |
+| boostjp/releasel | 20 | Boostリリースノート 1件追加 large : mediumを超える大きさ |
+| boostjp/addrefs  | 10 | Boost逆引きリファレンス : small (1例追加) |
+| boostjp/addrefm  | 20 | Boost逆引きリファレンス : medium (標準C++のバージョンアップ対応1例単位、Boostのバージョンアップ対応1例単位) |
+| boostjp/boosts   | 5 | Boostへの貢献 small (typoの修正など) |
+
+### ツール類
+
+CIスクリプト、site_generator、kunaiなど。
+
+| タグ | ポイント | 説明 |
+|-----|---------|------|
+| tool/fixbug     | 30 | バグ修正 |
+| tool/improves   | 10 | コード改善 : small |
+| tool/improvem   | 30 | コード改善 : medium |
+| tool/improvem   | 50 | コード改善 : large |
+| tool/updatelib  | 20 | 依存ライブラリのアップデート (直接使用のライブラリ単位) |
+| tool/updatelang | 10 | 使用言語のアップデート : small (とくにコード変更なく更新できた) |
+| tool/updatelang | 30 | 使用言語のアップデート : medium (多少のコード修正で更新できた) |
+| tool/updatelang | 50 | 使用言語のアップデート : large (大きいまたはむずかしいコード修正をして更新できた) |
+| tool/adds       | 30 | 新たな仕組みの導入 small : (C++バージョン追加、カテゴリ追加など) |
+| tool/addm       | 50 | 新たな仕組みの導入 medium |
+| tool/addl       | 100〜 | 新たな仕組みの導入 large : キーワード自動リンク、相対リンク対応など |
+
+### Open Collectiveでの経費申請
+1. Open Collectiveのcpprefjpページに行く
+2. 画面右側の「アクション」から「経費を申請」をクリック
+3. ご自身の住所・氏名などを入力
+4. 支払い方法を入力
+    - 通貨はUSDを選択
+    - 送金先の国はJapanを選択
+    - 「bank account (銀行口座)」または「PayPal」を選択
+    - bank accountであれば、口座情報として銀行のSWIFT / BIC CODEおよびIBANを調べて入力する
+        - Google検索で「(銀行名) BIC CODE」などで検索
+        - 三菱UFC銀行なら「BOTKJPJT」
+        - bank accountのIBAN (International Bank Account Number) は、支店番号 + 口座番号を連続で記載する
+    - PayPalであれば、ご自身のPayPalアカウントを入力する
+    - ご自身の住所を英語で入力する
+    - 請求金額および請求の説明を記載して送信する
+        - 説明欄にGitHubアカウントを書いてもらえると、だれの申請かがわかりやすくて助かる
+5. cpprefjpから経費の承認がされれば、支払われる
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- move_only_function/op_constructor: fix example</title>
      <link href="https://cpprefjp.github.io/reference/functional/move_only_function/op_constructor.html"/>
      <id>114671911d63eb03ec0284ba4a1992d3b35e1a7a:reference/functional/move_only_function/op_constructor.md</id>
      <updated>2023-10-31T18:27:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/move_only_function/op_constructor.md b/reference/functional/move_only_function/op_constructor.md
index d5bd1e25b..338da0c7b 100644
--- a/reference/functional/move_only_function/op_constructor.md
+++ b/reference/functional/move_only_function/op_constructor.md
@@ -137,21 +137,21 @@ int main()
 
   // (4) 関数ポインタを受け取って構築
   {
-    std::function&amp;lt;int(int)&amp;gt; f = ident_func;
+    std::move_only_function&amp;lt;int(int)&amp;gt; f = ident_func;
 
     int result = f(1);
     std::cout &amp;lt;&amp;lt; &amp;#34;(4) function pointer : &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
   }
   // (4) 関数オブジェクトを受け取って構築
   {
-    std::function&amp;lt;int(int)&amp;gt; f = ident_functor();
+    std::move_only_function&amp;lt;int(int)&amp;gt; f = ident_functor();
 
     int result = f(1);
     std::cout &amp;lt;&amp;lt; &amp;#34;(4) function object : &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
   }
   // (4) メンバ関数ポインタを受け取った構築
   {
-    std::function&amp;lt;int(const X&amp;amp;, int)&amp;gt; f = &amp;amp;X::add_member_func;
+    std::move_only_function&amp;lt;int(const X&amp;amp;, int)&amp;gt; f = &amp;amp;X::add_member_func;
 
     X x{2};
     int result = f(x, 1);
@@ -159,7 +159,7 @@ int main()
   }
   // (4) メンバ変数ポインタを受け取った構築
   {
-    std::function&amp;lt;int(const X&amp;amp;)&amp;gt; f = &amp;amp;X::value;
+    std::move_only_function&amp;lt;int(const X&amp;amp;)&amp;gt; f = &amp;amp;X::value;
     X x{2};
     int result = f(x);
     std::cout &amp;lt;&amp;lt; &amp;#34;(4) member variable pointer : &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++26 -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/lang/cpp26.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:lang/cpp26.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++26&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++26とは、2026年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2cと呼ばれることがある。「(2020年代の3つ目のバージョンが) 202c年にリリースされる」という伏せ字として「c」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;h3&gt;変数&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/static_storage_for_braced_initializers.md.nolink&#34;&gt;&lt;code&gt;std::initializer_list&lt;/code&gt;の配列を静的ストレージに配置する&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;std::vector v = {1, 2, 3};&lt;/code&gt;のような初期化で初期化子リストを静的ストレージに配置することで無駄なコピーをなくす&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/nice_placeholder_with_no_name.md.nolink&#34;&gt;宣言のみで使用しない変数の名前として&lt;code&gt;_&lt;/code&gt;をサポート&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数名&lt;code&gt;_&lt;/code&gt;は暗黙で&lt;code&gt;[[maybe_unused]]&lt;/code&gt;が指定される&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/making_non-encodable_string_literals_ill-formed.md.nolink&#34;&gt;文字列リテラルの文字エンコーディング失敗を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列リテラルのエンコーディング時に文字表現が失われる場合にコンパイルエラーにする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/unevaluated_strings.md.nolink&#34;&gt;コンパイル時にのみ使用される文字列の扱いを明確化&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;static_assert&lt;/code&gt;や&lt;code&gt;[[deprecated]]&lt;/code&gt;などで使用されるコンパイル時の文字列について、文字コードの指定を禁止し、実行時エンコーディングが行われないことを規定&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;属性&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/on_the_ignorability_of_standard_attributes.md.nolink&#34;&gt;属性の無視性を見直し&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;構文として適格な属性のみを無視できるようにし、そうでない属性の使用を&lt;a class=&#34;cpprefjp-defined-word&#34;&gt;不適格&lt;/a&gt;とする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;定数式&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/constexpr_cast_from_voidptr.md.nolink&#34;&gt;定数式での&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;型消去のために&lt;code&gt;void*&lt;/code&gt;からポインタ型へのキャストを許可する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/user-generated_static_assert_messages.md.nolink&#34;&gt;&lt;code&gt;static_assert&lt;/code&gt;の診断メッセージにユーザーが生成した文字列の指定を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;constexpr&lt;/code&gt;な&lt;code&gt;S.size()&lt;/code&gt;と&lt;code&gt;S.data()&lt;/code&gt;メンバ関数をもつオブジェクトをコンパイル時文字列として指定できるようにする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ソースコード&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp26/add_atsign_dollar_graveaccent_to_the_basic_character_set.md.nolink&#34;&gt;基本文字集合に@、$、`を追加&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C言語との互換性のためにこれらの文字を基本文字集合に追加&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文字列エンコーディングを識別するライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/text_encoding.md.nolink&#34;&gt;&amp;lt;text_encoding&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;並行処理におけるデータの参照・更新を行うRCU (Read Copy Update) のライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/rcu.md.nolink&#34;&gt;&amp;lt;rcu&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;並行処理において参照中のデータが更新されないよう保護するハザードポインタのライブラリとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/hazard_pointer.md.nolink&#34;&gt;&amp;lt;hazard_pointer&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/mdspan.md.nolink&#34;&gt;std::mdspan&lt;/a&gt;&lt;/code&gt;のサブ配列版として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/mdspan/submdspan.md.nolink&#34;&gt;std::submdspan&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;連想コンテナの以下のメンバ関数に、一時オブジェクトが生成されるコストを抑える拡張を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map.html&#34;&gt;std::map&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/op_at.html&#34;&gt;operator[]&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/try_emplace.html&#34;&gt;try_emplace()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/map/map/insert_or_assign.html&#34;&gt;insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/set/set.html&#34;&gt;std::set&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/set/set/insert.html&#34;&gt;insert()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map.html&#34;&gt;std::unordered_map&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/op_at.html&#34;&gt;operator[]&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/at.html&#34;&gt;at()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/try_emplace.html&#34;&gt;try_emplace()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/insert_or_assign.html&#34;&gt;insert_or_assign()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_map/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_multimap.html&#34;&gt;std::unordered_multimap&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_map/unordered_multimap/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set.html&#34;&gt;std::unordered_set&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set/insert.html&#34;&gt;insert()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_set/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_multiset.html&#34;&gt;std::unordered_multiset&lt;/a&gt;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/unordered_set/unordered_multiset/bucket.html&#34;&gt;bucket()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以下のアルゴリズムを&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/stable_sort.html&#34;&gt;std::stable_sort()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_stable_sort.html&#34;&gt;std::ranges::stable_sort()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/stable_partition.html&#34;&gt;std::stable_partition()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_stable_partition.html&#34;&gt;std::ranges::stable_partition()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/inplace_merge.html&#34;&gt;std::inplace_merge()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ranges_inplace_merge.html&#34;&gt;std::ranges::stable_partition()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rangeアルゴリズムが完全型を要求しないようにするため、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/projected.html&#34;&gt;std::projected&lt;/a&gt;&lt;/code&gt;の制約を緩和&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有権を保持しない&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function.html&#34;&gt;std::function&lt;/a&gt;&lt;/code&gt;として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/function_ref.md.nolink&#34;&gt;std::function_ref&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/move_only_function.html&#34;&gt;std::move_only_function&lt;/a&gt;&lt;/code&gt;のコピー可能版として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional.html&#34;&gt;&amp;lt;functional&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/copyable_function.html&#34;&gt;std::copyable_function&lt;/a&gt;&lt;/code&gt;クラスを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_front.html&#34;&gt;std::bind_front()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/bind_back.md.nolink&#34;&gt;std::bind_back()&lt;/a&gt;&lt;/code&gt;に、非型テンプレート引数として関数を指定するオーバーロードを追加&lt;ul&gt;
&lt;li&gt;関連して、非型テンプレート引数の関数オブジェクトを反転させられるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/not_fn.html&#34;&gt;not_fn()&lt;/a&gt;&lt;/code&gt;に非型テンプレート引数版のオーバーロードを追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv.html&#34;&gt;&amp;lt;charconv&amp;gt;&lt;/a&gt;&lt;/code&gt;の変換結果&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/to_chars_result.html&#34;&gt;std::to_chars_result&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/charconv/from_chars_result.html&#34;&gt;std::from_chars_result&lt;/a&gt;&lt;/code&gt;に、変換が正しく完了したかを判定する&lt;code&gt;operator bool&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/to_string.html&#34;&gt;std::to_string()&lt;/a&gt;&lt;/code&gt;の仕様が&lt;code&gt;std::sprintf()&lt;/code&gt;で説明されていたが、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;で定義するよう仕様を変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/sstream/basic_istringstream.html&#34;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;および&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/sstream/basic_ostringstream.html&#34;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;のコンストラクタおよび&lt;code&gt;str()&lt;/code&gt;メンバ関数に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;を受け取るオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;に、ポインタ出力のサポートを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/format/format.html&#34;&gt;std::format()&lt;/a&gt;&lt;/code&gt;で幅と精度を動的に指定した場合でも型の検証がコンパイル時に行われるよう仕様を見直し&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ファイル&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ファイルのネイティブハンドルを取得できるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_filebuf.html&#34;&gt;std::basic_filebuf&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_ifstream.html&#34;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_ofstream.html&#34;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/fstream/basic_fstream.html&#34;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt;クラスに、以下のメンバを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;native_handle_type&lt;/code&gt;型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;native_handle()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行・並列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic.html&#34;&gt;std::atomic&lt;/a&gt;&lt;/code&gt;オブジェクトに対する2つの値の最大値・最小値を取得する関数として、メンバ関数&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/fetch_max.md.nolink&#34;&gt;fetch_max()&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic/fetch_min.md.nolink&#34;&gt;fetch_min()&lt;/a&gt;&lt;/code&gt;、非メンバ関数として&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_max.md.nolink&#34;&gt;std::atomic_fetch_max&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_max_explicit.md.nolink&#34;&gt;std::atomic_fetch_max_explicit&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_min.md.nolink&#34;&gt;std::atomic_fetch_min&lt;/a&gt;&lt;/code&gt;、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/atomic/atomic_fetch_min_explicit.md.nolink&#34;&gt;std::atomic_fetch_min_explicit&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;を非順序連想コンテナのキーとして使用できるよう、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に所有権ベースのハッシュ値を取得する関数オブジェクト&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_hash.md.nolink&#34;&gt;std::owner_hash&lt;/a&gt;&lt;/code&gt;、および所有権ベースの等値比較を行う関数オブジェクト&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_equal.md.nolink&#34;&gt;std::owner_equal&lt;/a&gt;&lt;/code&gt;を追加&lt;ul&gt;
&lt;li&gt;関連して、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/shared_ptr.html&#34;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;クラスのメンバ関数として、&lt;code&gt;owner_hash()&lt;/code&gt;と&lt;code&gt;owner_equal()&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;日付・時間&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono.html&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下のクラスに&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/hash.html&#34;&gt;std::hash&lt;/a&gt;&lt;/code&gt;のサポートを追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/duration.html&#34;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/time_point.html&#34;&gt;std::chrono::time_point&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/day.html&#34;&gt;std::chrono::day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month.html&#34;&gt;std::chrono::month&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year.html&#34;&gt;std::chrono::year&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday.html&#34;&gt;std::chrono::weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_indexed.html&#34;&gt;std::chrono::weekday_indexed&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/weekday_last.html&#34;&gt;std::chrono::weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_day.html&#34;&gt;std::chrono::month_day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_day_last.html&#34;&gt;std::chrono::month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_weekday.html&#34;&gt;std::chrono::month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/month_weekday_last.html&#34;&gt;std::chrono::month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month.html&#34;&gt;std::chrono::year_month&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_day.html&#34;&gt;std::chrono::year_month_day&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_day_last.html&#34;&gt;std::chrono::year_month_day_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_weekday.html&#34;&gt;std::chrono::year_month_weekday&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/year_month_weekday_last.html&#34;&gt;std::chrono::year_month_weekday_last&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/zoned_time.html&#34;&gt;std::chrono::zoned_time&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/chrono/leap_second.html&#34;&gt;std::chrono::leap_second&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath.html&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の関数を、&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cos.html&#34;&gt;std::cos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sin.html&#34;&gt;std::sin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tan.html&#34;&gt;std::tan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cosh.html&#34;&gt;std::cosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sinh.html&#34;&gt;std::sinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tanh.html&#34;&gt;std::tanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/acos.html&#34;&gt;std::acos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/asin.html&#34;&gt;std::asin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan.html&#34;&gt;std::atan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atan2.html&#34;&gt;std::atan2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/acosh.html&#34;&gt;std::acosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/asinh.html&#34;&gt;std::asinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/atanh.html&#34;&gt;std::atanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/exp.html&#34;&gt;std::exp()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/exp2.html&#34;&gt;std::exp2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/expm1.html&#34;&gt;std::expm1()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log.html&#34;&gt;std::log()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log10.html&#34;&gt;std::log10()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log1p.html&#34;&gt;std::log1p()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/log2.html&#34;&gt;std::log2()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/pow.html&#34;&gt;std::pow()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/sqrt.html&#34;&gt;std::sqrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/cbrt.html&#34;&gt;std::cbrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/hypot.html&#34;&gt;std::hypot()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/erf.html&#34;&gt;std::erf()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/erfc.html&#34;&gt;std::erfc()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/lgamma.html&#34;&gt;std::lgamma()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cmath/tgamma.html&#34;&gt;std::tgamma()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex.html&#34;&gt;&amp;lt;complex&amp;gt;&lt;/a&gt;&lt;/code&gt;の以下の関数を、&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/abs.html&#34;&gt;std::abs()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/arg.html&#34;&gt;std::arg()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/proj.html&#34;&gt;std::proj()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/polar.html&#34;&gt;std::polar()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/cos.html&#34;&gt;std::cos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sin.html&#34;&gt;std::sin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/tan.html&#34;&gt;std::tan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/cosh.html&#34;&gt;std::cosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sinh.html&#34;&gt;std::sinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/tanh.html&#34;&gt;std::tanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/acos.html&#34;&gt;std::acos()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/asin.html&#34;&gt;std::asin()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/atan.html&#34;&gt;std::atan()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/acosh.html&#34;&gt;std::acosh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/asinh.html&#34;&gt;std::asinh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/atanh.html&#34;&gt;std::atanh()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/exp.html&#34;&gt;std::exp()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/log.html&#34;&gt;std::log()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/log10.html&#34;&gt;std::log10()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/pow.html&#34;&gt;std::pow()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/complex/complex/sqrt.html&#34;&gt;std::sqrt()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;クラスに、メンバ関数版の&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant/visit.md.nolink&#34;&gt;visit()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio.html&#34;&gt;&amp;lt;ratio&amp;gt;&lt;/a&gt;&lt;/code&gt;に、新たなSI接頭辞として、以下を追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;ronna&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;27&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;ronto&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;−27&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;quetta&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;30&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ratio/si_prefix.html&#34;&gt;quecto&lt;/a&gt;&lt;/code&gt; (10&lt;sup&gt;−30&lt;/sup&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;共用体のどのメンバがアクティブかを判定するための関数として、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_within_lifetime.md.nolink&#34;&gt;std::is_within_lifetime()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/bitset/bitset.html&#34;&gt;std::bitset&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;を受け取るコンストラクタを追加&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>functional -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional.md b/reference/functional.md
index de215b83e..3f31d2c93 100644
--- a/reference/functional.md
+++ b/reference/functional.md
@@ -25,7 +25,9 @@ struct doubler {
 |----------------------------------------------------------|----------------------------------------|-------|
 | [`function`](functional/function.md) | 関数・関数オブジェクトの多相的なラッパー(class template) | C++11 |
 | [`bad_function_call`](functional/bad_function_call.md) | 不正な関数呼び出しに関する例外(class)  | C++11 |
-| [`move_only_function`](functional/move_only_function.md) | 関数・関数オブジェクトの多相的な軽量ラッパー(class template) | C++23 |
+| [`move_only_function`](functional/move_only_function.md) | ムーブのみ可能な関数・関数オブジェクトの多相軽量ラッパー(class template) | C++23 |
+| [`copyable_function`](functional/copyable_function.md) | コピー可能な関数・関数オブジェクトの多相軽量ラッパー(class template) | C++26 |
+| [`function_ref`](functional/function_ref.md.nolink) | 関数・関数オブジェクトの多相参照ラッパー(class template) | C++26 |
 
 
 ## 統一的な関数呼び出し
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copyable_function -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional/copyable_function.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function.md b/reference/functional/copyable_function.md
new file mode 100644
index 000000000..40131badd
--- /dev/null
+++ b/reference/functional/copyable_function.md
@@ -0,0 +1,243 @@
+# copyable_function
+* functional[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class... S&amp;gt;
+  class copyable_function; // 宣言のみ
+
+  template&amp;lt;class R, class... ArgTypes&amp;gt;
+  class copyable_function&amp;lt;R(ArgTypes...) /*cv*/ /*ref*/ noexcept(/*noex*/)&amp;gt;;
+}
+```
+
+## 概要
+`copyable_function`クラステンプレートは、パラメータの型リスト`ArgTypes...`、戻り値の型`R`に合致する、あらゆる関数ポインタ、関数オブジェクト、メンバ関数ポインタ、メンバ変数ポインタを保持できるクラスである。
+
+下記全ての組み合わせ（12種類）に対して、クラステンプレートの部分特殊化が提供される。
+
+- CV修飾子 *cv* : `const`, CV修飾無し
+- 参照修飾子 *ref* : `&amp;amp;`, `&amp;amp;&amp;amp;`, 参照修飾無し
+- noexcept例外指定 *noex* : `true`, `false`
+
+### `function`との比較
+[`std::function`](function.md)と比べて、`std::copyable_function`は下記の特徴をもつ。
+
+- 関数型のCV修飾／参照修飾／noexcept例外指定をサポートする。
+    - const性などを正しく伝搬することでバグ発生リスクを軽減する
+- [`target_type`](function/target_type.md)型と[`target()`](function/target.md)を提供しない。
+    - 実行時型情報（RTTI）非依存
+- [関数呼び出し](copyable_function/op_call.md)は強い事前条件を持つ。
+    - 関数呼び出し時のnullチェックが要求されない
+- クラステンプレート引数の[推論補助](/lang/cpp17/type_deduction_for_class_templates.md)を提供しない。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前            | 説明           | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`(constructor)`](copyable_function/op_constructor.md) | コンストラクタ      | C++26 |
+| [`(destructor)`](copyable_function/op_destructor.md) | デストラクタ          | C++26 |
+| [`operator=`](copyable_function/op_assign.md)   | 代入演算子                 | C++26 |
+| [`swap`](copyable_function/swap.md)             | 他の`copyable_function`オブジェクトと中身を入れ替える | C++26 |
+| [`operator bool`](copyable_function/op_bool.md) | 関数呼び出しが可能か調べる | C++26 |
+| [`operator()`](copyable_function/op_call.md)    | 関数呼び出し               | C++26 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|-----------------|----------------|----------------|
+| `result_type` | 関数の戻り値の型(テンプレートパラメータ`R`) | C++26 |
+
+## 非メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|-----------------|----------------|----------------|
+| [`operator==`](copyable_function/op_equal.md)     | 等値比較   | C++26 |
+| [`operator!=`](copyable_function/op_not_equal.md) | 非等値比較 | C++26 |
+| [`swap`](copyable_function/swap_free.md) | 2つの`copyable_function`オブジェクトを入れ替える | C++26 |
+
+
+## 例
+### 例1: 基本の使い方
+```cpp example
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int add(int x) { return x + 1; }
+
+int main()
+{
+  // 関数を代入
+  std::copyable_function&amp;lt;int(int)&amp;gt; f = add;
+
+  // 関数オブジェクトを代入
+  f = [](int x) { return x + 1; };
+
+  // 保持している関数を呼び出す
+  int result = f(1);
+  std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::copyable_function[color ff0000]
+* f(1)[link copyable_function/op_call.md]
+
+#### 出力
+```
+2
+```
+
+### 例2: const性の伝搬
+```cpp
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct Functor {
+  std::string operator()() {
+    return &amp;#34;non-const&amp;#34;;
+  }
+  std::string operator()() const {
+    return &amp;#34;const&amp;#34;;
+  }
+};
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;-- copyable_function&amp;#34; &amp;lt;&amp;lt; std::endl;
+        std::copyable_function&amp;lt;std::string(void)&amp;gt;       mof1 = Functor{};
+  const std::copyable_function&amp;lt;std::string(void)&amp;gt;       mof2 = Functor{}; // (呼び出し時に不適格)
+        std::copyable_function&amp;lt;std::string(void) const&amp;gt; mof3 = Functor{};
+  const std::copyable_function&amp;lt;std::string(void) const&amp;gt; mof4 = Functor{};
+  std::cout &amp;lt;&amp;lt; &amp;#34;mof1: &amp;#34; &amp;lt;&amp;lt; mof1() &amp;lt;&amp;lt; std::endl;
+//std::cout &amp;lt;&amp;lt; &amp;#34;mof2: &amp;#34; &amp;lt;&amp;lt; mof2() &amp;lt;&amp;lt; std::endl; // 不適格
+  std::cout &amp;lt;&amp;lt; &amp;#34;mof3: &amp;#34; &amp;lt;&amp;lt; mof3() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;mof4: &amp;#34; &amp;lt;&amp;lt; mof4() &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;-- function&amp;#34; &amp;lt;&amp;lt; std::endl;
+        std::function&amp;lt;std::string(void)&amp;gt;       fn1 = Functor{};
+  const std::function&amp;lt;std::string(void)&amp;gt;       fn2 = Functor{};
+//      std::function&amp;lt;std::string(void) const&amp;gt; fn3 = Functor{}; // 不適格
+//const std::function&amp;lt;std::string(void) const&amp;gt; fn4 = Functor{}; // 不適格
+  std::cout &amp;lt;&amp;lt; &amp;#34;fn1: &amp;#34; &amp;lt;&amp;lt; fn1() &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;fn2: &amp;#34; &amp;lt;&amp;lt; fn2() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::copyable_function[color ff0000]
+* std::function[link function.md]
+
+#### 出力
+```
+-- copyable_function
+mof1: non-const
+mof3: const
+mof4: const
+-- function
+fn1: non-const
+fn2: non-const
+```
+
+### 例3: 左辺値/右辺値の伝搬
+```cpp example
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct Functor {
+  std::string operator()() &amp;amp; {
+    return &amp;#34;L-val&amp;#34;;
+  }
+  std::string operator()() &amp;amp;&amp;amp; {
+    return &amp;#34;R-val&amp;#34;;
+  }
+};
+
+int main()
+{
+  std::cout &amp;lt;&amp;lt; &amp;#34;-- copyable_function&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::copyable_function&amp;lt;std::string(void)&amp;gt;    mof1 = Functor{};
+  std::copyable_function&amp;lt;std::string(void) &amp;amp;&amp;amp;&amp;gt; mof2 = Functor{};
+  std::cout &amp;lt;&amp;lt; &amp;#34;mof1/L-val: &amp;#34; &amp;lt;&amp;lt; mof1()            &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;mof1/R-val: &amp;#34; &amp;lt;&amp;lt; std::move(mof1)() &amp;lt;&amp;lt; std::endl;
+//std::cout &amp;lt;&amp;lt; &amp;#34;mof2/L-val: &amp;#34; &amp;lt;&amp;lt; mof2()            &amp;lt;&amp;lt; std::endl; // 不適格
+  std::cout &amp;lt;&amp;lt; &amp;#34;mof2/R-val: &amp;#34; &amp;lt;&amp;lt; std::move(mof2)() &amp;lt;&amp;lt; std::endl;
+
+  std::cout &amp;lt;&amp;lt; &amp;#34;-- function&amp;#34; &amp;lt;&amp;lt; std::endl;
+  std::function&amp;lt;std::string(void)&amp;gt;    fn1 = Functor{};
+//std::function&amp;lt;std::string(void) &amp;amp;&amp;amp;&amp;gt; fn2 = Functor{}; // 不適格
+  std::cout &amp;lt;&amp;lt; &amp;#34;fn1/L-val: &amp;#34; &amp;lt;&amp;lt; fn1()            &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;fn1/R-val: &amp;#34; &amp;lt;&amp;lt; std::move(fn1)() &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::copyable_function[color ff0000]
+* std::function[link function.md]
+
+#### 出力
+```
+-- copyable_function
+mof1/L-val: L-val
+mof1/R-val: L-val
+mof2/R-val: R-val
+-- function
+fn1/L-val: L-val
+fn1/R-val: L-val
+```
+
+### 例4: noexcept指定の伝搬
+```cpp example
+#include &amp;lt;functional&amp;gt;
+
+void func() {}
+void func_noex() noexcept {}
+
+int main()
+{
+  std::copyable_function&amp;lt;void(void)&amp;gt;          mof1 = func;
+  std::copyable_function&amp;lt;void(void)&amp;gt;          mof2 = func_noex;
+//std::copyable_function&amp;lt;void(void) noexcept&amp;gt; mof3 = func; // 不適格
+  std::copyable_function&amp;lt;void(void) noexcept&amp;gt; mof4 = func_noex;
+  static_assert(not noexcept(mof1()));
+  static_assert(not noexcept(mof2()));
+  static_assert(    noexcept(mof4()));
+
+  std::function&amp;lt;void(void)&amp;gt;          fn1 = func;
+  std::function&amp;lt;void(void)&amp;gt;          fn2 = func_noex;
+//std::function&amp;lt;void(void) noexcept&amp;gt; fn3 = func;      // 不適格
+//std::function&amp;lt;void(void) noexcept&amp;gt; fn4 = func_noex; // 不適格
+  static_assert(not noexcept(fn1()));
+  static_assert(not noexcept(fn2()));
+}
+```
+* std::copyable_function[color ff0000]
+* std::function[link function.md]
+
+#### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`function`](function.md)
+- [`move_only_function`](move_only_function.md)
+
+
+## 参照
+- [P2548R6 copyable_function](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2548r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function/op_assign.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional/copyable_function/op_assign.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function/op_assign.md b/reference/functional/copyable_function/op_assign.md
new file mode 100644
index 000000000..1c405beb5
--- /dev/null
+++ b/reference/functional/copyable_function/op_assign.md
@@ -0,0 +1,73 @@
+# operator=
+* functional[meta header]
+* std[meta namespace]
+* copyable_function[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+copyable_function&amp;amp; operator=(const copyable_function&amp;amp; f); // (1)
+
+copyable_function&amp;amp; operator=(copyable_function&amp;amp;&amp;amp; f);      // (2)
+
+copyable_function&amp;amp; operator=(nullptr_t); noexcept; // (3)
+
+template&amp;lt;class F&amp;gt;
+copyable_function&amp;amp; operator=(F&amp;amp;&amp;amp; f);               // (4)
+```
+
+## 効果
+
+- (1) : コピー代入。[`copyable_function`](op_constructor.md)`(f).`[`swap`](swap.md)`(*this)`
+- (2) : ムーブ代入。[`copyable_function`](op_constructor.md)`(`[`std::move`](/reference/utility/move.md)`(f)).`[`swap`](swap.md)`(*this)`
+- (3) : `*this`が有効な関数ポインタ、メンバポインタ、もしくは関数オブジェクトを持っている場合、それを解放する。
+- (4) : [`copyable_function`](op_constructor.md)`(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)).`[`swap`](swap.md)`(*this)`
+
+
+## 戻り値
+`*this`
+
+
+## 例外
+- (3) : 投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;functional&amp;gt;
+
+int ident(int x) { return x; }
+
+int main()
+{
+  std::copyable_function&amp;lt;int(int)&amp;gt; f;
+
+  // 関数を代入
+  f = ident;
+
+  int result = f(1);
+  std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+}
+```
+* f(1)[link op_call.md]
+
+### 出力
+```
+1
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2548R6 copyable_function](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2548r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator bool -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function/op_bool.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional/copyable_function/op_bool.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function/op_bool.md b/reference/functional/copyable_function/op_bool.md
new file mode 100644
index 000000000..949114a07
--- /dev/null
+++ b/reference/functional/copyable_function/op_bool.md
@@ -0,0 +1,58 @@
+# operator bool
+* functional[meta header]
+* std[meta namespace]
+* copyable_function[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+explicit operator bool() const noexcept;
+```
+
+## 概要
+関数呼び出しが可能か調べる。
+
+
+## 戻り値
+呼び出す関数を持っていれば`true`、そうでなければ`false`を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;functional&amp;gt;
+
+int ident(int x) { return x; }
+
+int main()
+{
+  std::copyable_function&amp;lt;int(int)&amp;gt; f = ident;
+
+  if (f) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not empty&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;empty&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+not empty
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2548R6 copyable_function](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2548r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function/op_call.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional/copyable_function/op_call.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function/op_call.md b/reference/functional/copyable_function/op_call.md
new file mode 100644
index 000000000..6ffeb23fb
--- /dev/null
+++ b/reference/functional/copyable_function/op_call.md
@@ -0,0 +1,72 @@
+# operator()
+* functional[meta header]
+* std[meta namespace]
+* copyable_function[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+R operator()(ArgTypes... args) /*cv*/ /*ref*/ noexcept(/*noex*/);
+```
+
+## 概要
+関数を呼び出す。
+
+`operator()`のCV修飾子 *cv*, 参照修飾子 *ref*, noexcept例外指定 *noex* は、[`copyable_function`](../copyable_function.md)に指定するテンプレートパラメータ`R(ArgTypes...)`部のものと等しい。
+
+説明用のプレースホルダ *inv-quals* を次のように定義する :
+
+- *ref* が空（参照修飾無し）ならば、*cv*`&amp;amp;`
+- そうでなければ、*cv* *ref*
+
+
+## 事前条件
+`*this`は関数ポインタまたは関数オブジェクトを保持していること。
+
+
+## 効果
+`*this`が保持している`F`型の関数ポインタまたは関数オブジェクト`f`に対して、[`INVOKE&amp;lt;R&amp;gt;`](/reference/concepts/Invoke.md)`(static_cast&amp;lt;F /*inv-quals*/&amp;gt;(f),` [`std::forward`](/reference/utility/forward.md)`&amp;lt;ArgTypes&amp;gt;(args)...)`を行う。
+
+
+## 戻り値
+`R`型が`void`の場合は何も返さない。そうでなければ、関数呼び出しの戻り値を返す。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;functional&amp;gt;
+
+int ident(int x)
+{ return x; }
+
+int main()
+{
+  std::copyable_function&amp;lt;int(int)&amp;gt; f = ident;
+
+  // 関数呼び出し : 保持しているident()関数を呼び出す
+  int result = f(1);
+
+  std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+}
+```
+
+### 出力
+```
+1
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2548R6 copyable_function](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2548r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function/op_constructor.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional/copyable_function/op_constructor.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function/op_constructor.md b/reference/functional/copyable_function/op_constructor.md
new file mode 100644
index 000000000..3db59be24
--- /dev/null
+++ b/reference/functional/copyable_function/op_constructor.md
@@ -0,0 +1,225 @@
+# コンストラクタ
+* functional[meta header]
+* std[meta namespace]
+* copyable_function[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+copyable_function() noexcept;                    // (1)
+copyable_function(nullptr_t) noexcept;           // (2)
+copyable_function(const copyable_function&amp;amp;);     // (3)
+copyable_function(copyable_function&amp;amp;&amp;amp;) noexcept; // (4)
+
+template&amp;lt;class F&amp;gt; copyable_function(F&amp;amp;&amp;amp;);        // (5)
+
+template&amp;lt;class T, class... Args&amp;gt;
+explicit copyable_function(in_place_type_t&amp;lt;T&amp;gt;, Args&amp;amp;&amp;amp;...); // (6)
+
+template&amp;lt;class T, class U, class... Args&amp;gt;
+explicit copyable_function(in_place_type_t&amp;lt;T&amp;gt;, initializer_list&amp;lt;U&amp;gt;, Args&amp;amp;&amp;amp;...); // (7)
+```
+* in_place_type_t[link /reference/utility/in_place_type_t.md]
+
+## 概要
+`copyable_function`オブジェクトを構築する。
+
+
+`copyable_function`クラステンプレートパラメータのCV修飾子 *cv*, 参照修飾子 *ref*, noexcept例外指定 *noex* に応じて、説明用のプレースホルダ *inv-quals* を次のように定義する :
+
+- *ref* が空（参照修飾無し）ならば、*cv*`&amp;amp;`
+- そうでなければ、*cv* *ref*
+
+また、説明用の`bool`型テンプレート定数`is-callable-from&amp;lt;VT&amp;gt;`を下記のように定義する :
+
+- *noex* が`true`のとき : [`is_nothrow_invocable_r_v`](/reference/type_traits/is_nothrow_invocable_r.md)`&amp;lt;R, VT /*cv*/ /*ref*/, ArgTypes...&amp;gt; &amp;amp;&amp;amp;` [`is_nothrow_invocable_r_v`](/reference/type_traits/is_nothrow_invocable_r.md)`&amp;lt;R, VT /*inv-quals*/, ArgTypes...&amp;gt;`
+- *noex* が`false`のとき : [`is_invocable_r_v`](/reference/type_traits/is_invocable_r.md)`&amp;lt;R, VT /*cv*/ /*ref*/, ArgTypes...&amp;gt; &amp;amp;&amp;amp;` [`is_invocable_r_v`](/reference/type_traits/is_invocable_r.md)`&amp;lt;R, VT /*inv-quals*/, ArgTypes...&amp;gt;`
+
+
+## テンプレートパラメータ制約
+- (5) : `VT`型を`decay_t&amp;lt;F&amp;gt;`としたとき
+    - `remove_cvref_t&amp;lt;F&amp;gt;`が`copyable_function`と同一型ではなく、かつ
+    - `remove_cvref_t&amp;lt;F&amp;gt;`が`in_place_type_t`の特殊化ではなく、かつ
+    - `is-callable-from&amp;lt;VT&amp;gt;`が`true`であること
+- (6) : `VT`型を`decay_t&amp;lt;T&amp;gt;`としたとき
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;VT, Args...&amp;gt;`が`true`であり、かつ
+    - `is-callable-from&amp;lt;VT&amp;gt;`が`true`であること
+- (7) : `VT`型を`decay_t&amp;lt;T&amp;gt;`としたとき
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;VT,` [`initializer_list`](/reference/initializer_list/initializer_list.md)`&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt;`が`true`であり、かつ
+    - `is-callable-from&amp;lt;VT&amp;gt;`が`true`であること
+
+
+## 適格要件
+- (5) : `VT`型を`decay_t&amp;lt;F&amp;gt;`としたとき
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;VT, F&amp;gt;`が`true`であり、かつ
+    - [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;VT&amp;gt;`が`true`であること
+- (6), (7) : `VT`型を`decay_t&amp;lt;T&amp;gt;`としたとき
+    - `VT`が`T`と同一型であり、かつ
+    - [`is_copy_constructible_v`](/reference/type_traits/is_copy_constructible.md)`&amp;lt;VT&amp;gt;`が`true`であること
+
+
+## 事前条件
+- (5) : `VT`型を`decay_t&amp;lt;F&amp;gt;`としたとき、`VT`がCpp17Destructible要件およびCpp17CopyConstructible要件を満たすこと。
+- (6), (7) : `VT`型を`decay_t&amp;lt;T&amp;gt;`としたとき、`VT`がCpp17Destructible要件およびCpp17CopyConstructible要件を満たすこと。
+
+
+## 効果
+- (1), (2) : 関数を持たない空の`copyable_function`オブジェクトを構築する。この方法で構築した後、[`operator bool`](op_bool.md)は`false`を返す。
+- (3) : `*this`の格納オブジェクトを
+   - `f`が値を保持していない場合、値を保持しない。
+   - そうでなければ、`f`が保持する値をコピーして保持する。
+- (4) : `f`が保持する状態を`*this`に移動する。移動された後の`f`は、未規定な値を持つ有効な状態となる。
+- (5) : `*this`の格納オブジェクトを
+    - `f`が関数ポインタ型、メンバ関数ポインタ型、メンバ変数ポインタ型いずれかのヌルポインタ値の場合、値を保持しない。
+    - `remove_cvref_t&amp;lt;F&amp;gt;`が`copyable_function`の特殊化であり、かつ値を保持していない場合、値を保持しない。
+    - そうでなければ、`*this`が保持する`VT`型の格納オブジェクトを、`std::forward&amp;lt;F&amp;gt;(f)`で直接非リスト初期化する。
+- (6) : `*this`が保持する`VT`型の格納オブジェクトを、`std::forward&amp;lt;Args&amp;gt;(args)...`で直接非リスト初期化する。
+- (7) : `*this`が保持する`VT`型の格納オブジェクトを、`ilist, std::forward&amp;lt;Args&amp;gt;(args)...`で直接非リスト初期化する。
+
+
+## 例外
+- (1), (2), (4) : 投げない
+- (3) : 格納オブジェクトの初期化から例外が投げられる可能性がある。`bad_alloc`例外が投げられる可能性がある。
+- (5), (6), (7) : 格納オブジェクトの初期化から例外が投げられる可能性がある。`VT`が関数ポインタまたは[`reference_wrapper`](/reference/functional/reference_wrapper.md)の特殊化いずれでもなければ、`bad_alloc`例外が投げられる可能性がある。
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;functional&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;numeric&amp;gt;
+#include &amp;lt;utility&amp;gt;
+
+struct ident_functor {
+  int operator()(int x) const
+  { return x; }
+};
+
+int ident_func(int x)
+{ return x; }
+
+struct X {
+  int value;
+
+  int add_member_func(int x) const
+  { return value + x; }
+};
+
+struct add_functor {
+  int value;
+
+  add_functor(int v) : value(v) {}
+  add_functor(std::initializer_list&amp;lt;int&amp;gt; lst, int iv)
+    : value(std::accumulate(lst.begin(), lst.end(), iv)) {}
+
+  int operator()(int x) const
+  { return value + x; }
+};
+
+
+int main()
+{
+  // (1) デフォルトコンストラクタ
+  // (2) ヌルポインタを受け取るコンストラクタ
+  // 空のcopyable_functionオブジェクトを作る
+  {
+    std::copyable_function&amp;lt;int(int)&amp;gt; f1;
+    assert(!f1);
+    std::copyable_function&amp;lt;int(int)&amp;gt; f2 = nullptr;
+    assert(!f2);
+  }
+
+  // (3) コピー構築
+  {
+    std::copyable_function&amp;lt;int(int)&amp;gt; f = ident_functor();
+    std::copyable_function&amp;lt;int(int)&amp;gt; g = f;
+    assert(g &amp;amp;&amp;amp; f);
+
+    int result = g(1);
+    std::cout &amp;lt;&amp;lt; &amp;#34;(3) : &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+  }
+
+  // (4) ムーブ構築
+  {
+    std::copyable_function&amp;lt;int(int)&amp;gt; f = ident_functor();
+    std::copyable_function&amp;lt;int(int)&amp;gt; g = std::move(f);
+    assert(g &amp;amp;&amp;amp; !f);
+
+    int result = g(1);
+    std::cout &amp;lt;&amp;lt; &amp;#34;(4) : &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+  }
+
+  // (5) 関数ポインタを受け取って構築
+  {
+    std::copyable_function&amp;lt;int(int)&amp;gt; f = ident_func;
+
+    int result = f(1);
+    std::cout &amp;lt;&amp;lt; &amp;#34;(5) function pointer : &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+  }
+  // (5) 関数オブジェクトを受け取って構築
+  {
+    std::copyable_function&amp;lt;int(int)&amp;gt; f = ident_functor();
+
+    int result = f(1);
+    std::cout &amp;lt;&amp;lt; &amp;#34;(5) function object : &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+  }
+  // (5) メンバ関数ポインタを受け取った構築
+  {
+    std::copyable_function&amp;lt;int(const X&amp;amp;, int)&amp;gt; f = &amp;amp;X::add_member_func;
+
+    X x{2};
+    int result = f(x, 1);
+    std::cout &amp;lt;&amp;lt; &amp;#34;(5) member function pointer : &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+  }
+  // (5) メンバ変数ポインタを受け取った構築
+  {
+    std::copyable_function&amp;lt;int(const X&amp;amp;)&amp;gt; f = &amp;amp;X::value;
+    X x{2};
+    int result = f(x);
+    std::cout &amp;lt;&amp;lt; &amp;#34;(5) member variable pointer : &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+  }
+
+  // (6) 引数リストによる直接構築コンストラクタ
+  {
+    std::copyable_function&amp;lt;int(int)&amp;gt; f(std::in_place_type&amp;lt;add_functor&amp;gt;, 2);
+    int result = f(1);
+    std::cout &amp;lt;&amp;lt; &amp;#34;(6) : &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+  }
+
+  // (7) initializer_list＋引数リストによる直接構築コンストラクタ
+  {
+    std::copyable_function&amp;lt;int(int)&amp;gt; f(std::in_place_type&amp;lt;add_functor&amp;gt;, std::initializer_list&amp;lt;int&amp;gt;{1, 2, 3}, 4);
+    int result = f(5);
+    std::cout &amp;lt;&amp;lt; &amp;#34;(7) : &amp;#34; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+* std::move[link /reference/utility/move.md]
+
+### 出力
+```
+(3) : 1
+(4) : 1
+(5) function pointer : 1
+(5) function object : 1
+(5) member function pointer : 3
+(5) member variable pointer : 2
+(6) : 3
+(7) : 15
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2548R6 copyable_function](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2548r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function/op_destructor.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional/copyable_function/op_destructor.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function/op_destructor.md b/reference/functional/copyable_function/op_destructor.md
new file mode 100644
index 000000000..268bddf18
--- /dev/null
+++ b/reference/functional/copyable_function/op_destructor.md
@@ -0,0 +1,36 @@
+# デストラクタ
+* functional[meta header]
+* std[meta namespace]
+* copyable_function[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+~copyable_function();
+```
+
+## 概要
+`copyable_function`オブジェクトを破棄する。
+
+
+## 効果
+`*this`が有効な関数ポインタ、メンバポインタ、もしくは関数オブジェクトを持っている場合、その関数を解放する。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2548R6 copyable_function](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2548r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function/op_equal.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional/copyable_function/op_equal.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function/op_equal.md b/reference/functional/copyable_function/op_equal.md
new file mode 100644
index 000000000..0d88b8ba4
--- /dev/null
+++ b/reference/functional/copyable_function/op_equal.md
@@ -0,0 +1,66 @@
+# operator==
+* functional[meta header]
+* std[meta namespace]
+* copyable_function[meta class]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+friend bool operator==(const copyable_function&amp;amp; f, nullptr_t) noexcept; // (1)
+
+// (1)により、以下のオーバーロードが使用可能になる
+friend bool operator==(nullptr_t, const copyable_function&amp;amp; f) noexcept; // (2)
+```
+* nullptr_t[link /reference/cstddef/nullptr_t.md]
+
+## 概要
+等値比較する。
+
+
+## 戻り値
+`!f`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;functional&amp;gt;
+
+int ident(int x) { return x; }
+
+int main()
+{
+  std::copyable_function&amp;lt;int(int)&amp;gt; f;
+
+  if (f == nullptr) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;empty&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+
+  f = ident;
+  if (f == nullptr) {}
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not empty&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+empty
+not empty
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2548R6 copyable_function](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2548r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function/op_not_equal.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional/copyable_function/op_not_equal.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function/op_not_equal.md b/reference/functional/copyable_function/op_not_equal.md
new file mode 100644
index 000000000..df0b7a6b4
--- /dev/null
+++ b/reference/functional/copyable_function/op_not_equal.md
@@ -0,0 +1,66 @@
+# operator!=
+* functional[meta header]
+* std[meta namespace]
+* copyable_function[meta class]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+// operator==により、以下のオーバーロードが使用可能になる
+bool operator!=(const copyable_function&amp;amp; f, nullptr_t) noexcept; // (1)
+
+bool operator!=(nullptr_t, const copyable_function&amp;amp; f) noexcept; // (2)
+```
+* nullptr_t[link /reference/cstddef/nullptr_t.md]
+
+## 概要
+非等値比較する。
+
+
+## 戻り値
+`static_cast&amp;lt;bool&amp;gt;(f)`
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;functional&amp;gt;
+
+int ident(int x) { return x; }
+
+int main()
+{
+  std::copyable_function&amp;lt;int(int)&amp;gt; f = ident;
+
+  if (f != nullptr) {
+    std::cout &amp;lt;&amp;lt; &amp;#34;not empty&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+
+  f = nullptr;
+  if (f != nullptr) {}
+  else {
+    std::cout &amp;lt;&amp;lt; &amp;#34;empty&amp;#34; &amp;lt;&amp;lt; std::endl;
+  }
+}
+```
+
+### 出力
+```
+not empty
+empty
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2548R6 copyable_function](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2548r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function/swap.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional/copyable_function/swap.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function/swap.md b/reference/functional/copyable_function/swap.md
new file mode 100644
index 000000000..1b78432bb
--- /dev/null
+++ b/reference/functional/copyable_function/swap.md
@@ -0,0 +1,72 @@
+# swap
+* functional[meta header]
+* std[meta namespace]
+* copyable_function[meta class]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+void swap(copyable_function&amp;amp; other) noexcept;
+```
+
+## 概要
+他の`copyable_function`オブジェクトと中身を入れ替える。
+
+
+## 効果
+`*this`が持つ関数と`other`が持つ関数を交換する。
+
+
+## 戻り値
+なし
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;functional&amp;gt;
+
+int ident(int x) { return x; }
+int add(int x) { return x + 1; }
+
+int main()
+{
+  std::copyable_function&amp;lt;int(int)&amp;gt; f = ident;
+  std::copyable_function&amp;lt;int(int)&amp;gt; g = add;
+
+  // fとgを交換
+  f.swap(g);
+
+  std::cout &amp;lt;&amp;lt; f(1) &amp;lt;&amp;lt; std::endl; // add
+  std::cout &amp;lt;&amp;lt; g(1) &amp;lt;&amp;lt; std::endl; // ident
+}
+```
+* swap[color ff0000]
+* f(1)[link op_call.md]
+* g(1)[link op_call.md]
+
+### 出力
+```
+2
+1
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2548R6 copyable_function](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2548r6.pdf)
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional/copyable_function/swap_free.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional/copyable_function/swap_free.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/copyable_function/swap_free.md b/reference/functional/copyable_function/swap_free.md
new file mode 100644
index 000000000..4c12ebb98
--- /dev/null
+++ b/reference/functional/copyable_function/swap_free.md
@@ -0,0 +1,67 @@
+# swap (非メンバ関数)
+* functional[meta header]
+* std[meta namespace]
+* copyable_function[meta class]
+* function template[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+friend void swap(copyable_function&amp;amp; f1, copyable_function&amp;amp; f2) noexcept;
+```
+
+## 概要
+2つの`copyable_function`オブジェクトを入れ替える。
+
+
+## 効果
+`f1.`[`swap`](swap.md)`(f2)`
+
+
+## 戻り値
+なし
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;functional&amp;gt;
+
+int ident(int x) { return x; }
+int add(int x) { return x + 1; }
+
+int main()
+{
+  std::copyable_function&amp;lt;int(int)&amp;gt; f = ident;
+  std::copyable_function&amp;lt;int(int)&amp;gt; g = add;
+
+  // fとgを交換
+  std::swap(f, g);
+
+  std::cout &amp;lt;&amp;lt; f(1) &amp;lt;&amp;lt; std::endl; // add
+  std::cout &amp;lt;&amp;lt; g(1) &amp;lt;&amp;lt; std::endl; // ident
+}
+```
+* std::swap[color ff0000]
+* f(1)[link op_call.md]
+* g(1)[link op_call.md]
+
+### 出力
+```
+2
+1
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P2548R6 copyable_function](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2548r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>function -- P2548R6 copyable_function (#1199)</title>
      <link href="https://cpprefjp.github.io/reference/functional/function.html"/>
      <id>6df7cab6190236bae3307f74ca259ff29892eea4:reference/functional/function.md</id>
      <updated>2023-10-31T18:24:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/function.md b/reference/functional/function.md
index 27f802702..e074d0bcb 100644
--- a/reference/functional/function.md
+++ b/reference/functional/function.md
@@ -115,7 +115,9 @@ int main()
 
 
 ## 関連項目
-- [`move_only_function`](move_only_function.md)
+- C++23 [`move_only_function`](move_only_function.md)
+- C++26 [`copyable_function`](copyable_function.md)
+- C++26 [`function_ref`](function_ref.md.nolink)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>equal_to -- ranges::less 等のサンプルコードのコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/ranges_equal_to.html"/>
      <id>c9a543d972fa76272af7350fe9a3af9e571ab42c:reference/functional/ranges_equal_to.md</id>
      <updated>2023-10-31T11:22:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/ranges_equal_to.md b/reference/functional/ranges_equal_to.md
index fba4e4737..94c0f6abb 100644
--- a/reference/functional/ranges_equal_to.md
+++ b/reference/functional/ranges_equal_to.md
@@ -51,7 +51,7 @@ namespace std::ranges {
 
 int main()
 {
-  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::equal_to&amp;lt;int&amp;gt;()(3, 3) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::equal_to()(3, 3) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::ranges::equal_to[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Ryo Suzuki</name>
        <email>reputeless+github@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>greater -- ranges::less 等のサンプルコードのコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/ranges_greater.html"/>
      <id>c9a543d972fa76272af7350fe9a3af9e571ab42c:reference/functional/ranges_greater.md</id>
      <updated>2023-10-31T11:22:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/ranges_greater.md b/reference/functional/ranges_greater.md
index 6abf76d46..4223b5899 100644
--- a/reference/functional/ranges_greater.md
+++ b/reference/functional/ranges_greater.md
@@ -49,7 +49,7 @@ namespace std::ranges {
 
 int main()
 {
-  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::greater&amp;lt;int&amp;gt;()(3, 2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::greater()(3, 2) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::ranges::greater[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Ryo Suzuki</name>
        <email>reputeless+github@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>greater_equal -- ranges::less 等のサンプルコードのコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/ranges_greater_equal.html"/>
      <id>c9a543d972fa76272af7350fe9a3af9e571ab42c:reference/functional/ranges_greater_equal.md</id>
      <updated>2023-10-31T11:22:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/ranges_greater_equal.md b/reference/functional/ranges_greater_equal.md
index 0a47d6eb4..a0e3337f4 100644
--- a/reference/functional/ranges_greater_equal.md
+++ b/reference/functional/ranges_greater_equal.md
@@ -49,7 +49,7 @@ namespace std::ranges {
 
 int main()
 {
-  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::greater_equal&amp;lt;int&amp;gt;()(3, 2) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::greater_equal()(3, 2) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::ranges::greater_equal[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Ryo Suzuki</name>
        <email>reputeless+github@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>less -- ranges::less 等のサンプルコードのコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/ranges_less.html"/>
      <id>c9a543d972fa76272af7350fe9a3af9e571ab42c:reference/functional/ranges_less.md</id>
      <updated>2023-10-31T11:22:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/ranges_less.md b/reference/functional/ranges_less.md
index 7e3f6323f..5ebebc91c 100644
--- a/reference/functional/ranges_less.md
+++ b/reference/functional/ranges_less.md
@@ -52,7 +52,7 @@ namespace std::ranges {
 
 int main()
 {
-  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::less&amp;lt;int&amp;gt;()(2, 3) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::less()(2, 3) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::ranges::less[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Ryo Suzuki</name>
        <email>reputeless+github@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>less_equal -- ranges::less 等のサンプルコードのコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/ranges_less_equal.html"/>
      <id>c9a543d972fa76272af7350fe9a3af9e571ab42c:reference/functional/ranges_less_equal.md</id>
      <updated>2023-10-31T11:22:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/ranges_less_equal.md b/reference/functional/ranges_less_equal.md
index 580cf3084..96cbc5aa6 100644
--- a/reference/functional/ranges_less_equal.md
+++ b/reference/functional/ranges_less_equal.md
@@ -49,7 +49,7 @@ namespace std::ranges {
 
 int main()
 {
-  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::less_equal&amp;lt;int&amp;gt;()(2, 3) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::less_equal()(2, 3) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::ranges::less_equal[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Ryo Suzuki</name>
        <email>reputeless+github@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>not_equal_to -- ranges::less 等のサンプルコードのコンパイルエラーを修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/ranges_not_equal_to.html"/>
      <id>c9a543d972fa76272af7350fe9a3af9e571ab42c:reference/functional/ranges_not_equal_to.md</id>
      <updated>2023-10-31T11:22:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/ranges_not_equal_to.md b/reference/functional/ranges_not_equal_to.md
index b9ce3e099..5254d6b9d 100644
--- a/reference/functional/ranges_not_equal_to.md
+++ b/reference/functional/ranges_not_equal_to.md
@@ -48,7 +48,7 @@ namespace std::ranges {
 
 int main()
 {
-  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::not_equal_to&amp;lt;int&amp;gt;()(3, 3) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; std::boolalpha &amp;lt;&amp;lt; std::ranges::not_equal_to()(3, 3) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::ranges::not_equal_to[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Ryo Suzuki</name>
        <email>reputeless+github@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>スタイル -- Merge pull request #1208 from ROCKTAKEY/use-source-code-block-to-list-style</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>0f8fbdea31f98bb089a65f432e4c2ab44a533fd3:working_style.md</id>
      <updated>2023-10-30T19:48:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index ee0da6fab..07f729d4a 100644
--- a/working_style.md
+++ b/working_style.md
@@ -7,12 +7,14 @@
 
 型修飾のスタイル：
 
-- A) const T &amp;amp;v
-- B) const T&amp;amp; v
-- C) const T &amp;amp; v
-- D) T const &amp;amp;v
-- E) T const&amp;amp; v
-- F) T const &amp;amp; v
+```cpp
+/* (A) */ const T &amp;amp;v
+/* (B) */ const T&amp;amp; v
+/* (C) */ const T &amp;amp; v
+/* (D) */ T const &amp;amp;v
+/* (E) */ T const&amp;amp; v
+/* (F) */ T const &amp;amp; v
+```
 
 本サイトでは、Bのスタイルで型修飾を行います。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
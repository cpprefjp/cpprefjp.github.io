<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-01-18T15:20:50.755976</updated>
  <id>b85d1919-c0b0-4a49-baa0-65e381656db4</id>

  
    <entry>
      <title>LayoutMapping -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/LayoutMapping.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/LayoutMapping.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/LayoutMapping.md b/reference/mdspan/LayoutMapping.md
index add212197..0516a75fc 100644
--- a/reference/mdspan/LayoutMapping.md
+++ b/reference/mdspan/LayoutMapping.md
@@ -44,7 +44,7 @@ std::mdspan&amp;lt;int, Extents&amp;gt; mat3x2{a};
 ```
 
 - Unique特性 : 異なる多次元インデクス値は、異なる要素位置に対応する。参照先が重複することはない。
-- Exhaustive特性 : 全ての多次元インデクス値に対応する要素位置は連続している。
+- Exhaustive特性 : 全ての多次元インデクス値に対応する要素位置は隣接配置される。
 - Strided特性 : 多次元インデクス値`i,j`に対応する要素位置は、ストライド幅`2,1`を用いて`i*2+j*1`と計算できる。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_call.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_left/mapping/op_call.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_call.md b/reference/mdspan/layout_left/mapping/op_call.md
index 18c58c9ea..7be185998 100644
--- a/reference/mdspan/layout_left/mapping/op_call.md
+++ b/reference/mdspan/layout_left/mapping/op_call.md
@@ -15,7 +15,7 @@ constexpr index_type operator()(Indices... i) const noexcept;
 
 
 ## テンプレートパラメータ制約
-- `sizeof...(Indices) ==` [`extents_tyoe::rank()`](../../extents/rank.md)が`true`、かつ
+- `sizeof...(Indices) ==` [`extents_type::rank()`](../../extents/rank.md)が`true`、かつ
 - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
 - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_constructor.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_left/mapping/op_constructor.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_constructor.md b/reference/mdspan/layout_left/mapping/op_constructor.md
index 2db5d74df..4c4b118cf 100644
--- a/reference/mdspan/layout_left/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left/mapping/op_constructor.md
@@ -27,7 +27,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 * rank()[link ../../extents/rank.md]
 * layout_right::mapping[link ../../layout_right/mapping.md]
-* layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+* layout_stride::mapping[link ../../layout_stride/mapping.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ
@@ -35,7 +35,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (3) : [`extents`](../../extents.md)からの変換コンストラクタ
 - (4) : 他`layout_left::mapping`からの変換コンストラクタ
 - (5) : [`layout_right::mapping`](../../layout_right/mapping.md)からの変換コンストラクタ
-- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)からの変換コンストラクタ
+- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
 
 
 ## テンプレートパラメータ制約
@@ -52,7 +52,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (6) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_left::mapping`相当の制約](stride.md)をもつこと。
-    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
 
 
 ## 効果
@@ -78,34 +78,34 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
 using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
 
-using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
-using Mapping3xN = std::layout_left::mapping&amp;lt;Ext3xN&amp;gt;;
+using Mapping3x4 = ;
+using Mapping3xN = ;
 
 int main()
 {
   // (1) : デフォルトコンストラクタ
   {
-    Mapping3x4 map1_3x4;
-    Mapping3xN map1_3xN;
+    std::layout_left::mapping&amp;lt;Ext3x4&amp;gt; map1_3x4;
+    std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map1_3xN;
     assert(map1_3x4.required_span_size() == 12);
     assert(map1_3xN.required_span_size() == 0);
   }
   // (2) : コピーコンストラクタ
   {
-    Mapping3xN map2_a;
-    Mapping3xN map2_b = map2_a;
+    std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map2_a;
+    std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map2_b = map2_a;
     assert(map2_a == map2_b);
   }
   // (3) : extentsからの変換コンストラクタ
   {
     Ext3xN ext{4};
-    Mapping3xN map3 = ext;
+    std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map3 = ext;
     assert(map3.extents() == ext);
   }
   // (4) : layout_left::mappingからの変換コンストラクタ
   {
-    Mapping3x4 map4_3x4;
-    Mapping3xN map4_3xN = map4_3x4;
+    std::layout_left::mapping&amp;lt;Ext3x4&amp;gt; map4_3x4;
+    std::layout_left::mapping&amp;lt;Ext3xN&amp;gt; map4_3xN = map4_3x4;
     assert(map4_3x4 == map4_3xN);
   }
   // (5) : layout_right::mappingからの変換コンストラクタ
@@ -122,11 +122,11 @@ int main()
   }
 }
 ```
+* std::layout_left::mapping[color ff0000]
 * std::extents[link ../../extents.md]
 * std::dextents[link ../../extents.md]
-* std::layout_left::mapping[link ../mapping.md]
 * std::layout_right::mapping[link ../../layout_right/mapping.md]
-* std::layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+* std::layout_stride::mapping[link ../../layout_stride/mapping.md]
 * required_span_size()[link required_span_size.md]
 
 ### 出力
@@ -147,7 +147,7 @@ int main()
 
 ## 関連項目
 - [`layout_right::mapping`](../../layout_right/mapping.md)
-- [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/required_span_size.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_left/mapping/required_span_size.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/required_span_size.md b/reference/mdspan/layout_left/mapping/required_span_size.md
index 40419fe69..4fdcb6eeb 100644
--- a/reference/mdspan/layout_left/mapping/required_span_size.md
+++ b/reference/mdspan/layout_left/mapping/required_span_size.md
@@ -6,7 +6,7 @@
 * cpp23[meta cpp]
 
 ```cpp
-index_type required_span_size() const noexcept;
+constexpr index_type required_span_size() const noexcept;
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_call.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_right/mapping/op_call.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_call.md b/reference/mdspan/layout_right/mapping/op_call.md
index a8c41860e..42420efa5 100644
--- a/reference/mdspan/layout_right/mapping/op_call.md
+++ b/reference/mdspan/layout_right/mapping/op_call.md
@@ -15,7 +15,7 @@ constexpr index_type operator()(Indices... i) const noexcept;
 
 
 ## テンプレートパラメータ制約
-- `sizeof...(Indices) ==` [`extents_tyoe::rank()`](../../extents/rank.md)が`true`、かつ
+- `sizeof...(Indices) ==` [`extents_type::rank()`](../../extents/rank.md)が`true`、かつ
 - `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
 - `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
 
@@ -45,6 +45,10 @@ return ((static_cast&amp;lt;index_type&amp;gt;(Indices...) * stride(P)) + ... + 0);
 int main()
 {
   using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext2x3&amp;gt;;
+  std::array strides{4, 1};
+  std::mdspan mat{arr, Mapping{{}, strides}};
+
   using Mapping3x4 = std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;;
   Mapping3x4 map;
   assert(map(0,0) == 0);
@@ -54,7 +58,7 @@ int main()
 }
 ```
 * std::extents[link ../../extents.md]
-* std::layout_right::mapping[link ../mapping.md]
+* std::layout_stride::mapping[link ../mapping.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
index 34679786b..72e60c94e 100644
--- a/reference/mdspan/layout_right/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -27,7 +27,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 * rank()[link ../../extents/rank.md]
 * layout_left::mapping[link ../../layout_left/mapping.md]
-* layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+* layout_stride::mapping[link ../../layout_stride/mapping.md]
 
 ## 概要
 - (1) : デフォルトコンストラクタ
@@ -35,7 +35,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (3) : [`extents`](../../extents.md)からの変換コンストラクタ
 - (4) : 他`layout_right::mapping`からの変換コンストラクタ
 - (5) : [`layout_left::mapping`](../../layout_left/mapping.md)からの変換コンストラクタ
-- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)からの変換コンストラクタ
+- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
 
 
 ## テンプレートパラメータ制約
@@ -52,7 +52,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (6) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_right::mapping`相当の制約](stride.md)をもつこと。
-    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
 
 
 ## 効果
@@ -78,34 +78,31 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
 using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
 
-using Mapping3x4 = std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;;
-using Mapping3xN = std::layout_right::mapping&amp;lt;Ext3xN&amp;gt;;
-
 int main()
 {
   // (1) : デフォルトコンストラクタ
   {
-    Mapping3x4 map1_3x4;
-    Mapping3xN map1_3xN;
+    std::layout_right::mapping&amp;lt;Ext3x4&amp;gt; map1_3x4;
+    std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map1_3xN;
     assert(map1_3x4.required_span_size() == 12);
     assert(map1_3xN.required_span_size() == 0);
   }
   // (2) : コピーコンストラクタ
   {
-    Mapping3xN map2_a;
-    Mapping3xN map2_b = map2_a;
+    std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map2_a;
+    std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map2_b = map2_a;
     assert(map2_a == map2_b);
   }
   // (3) : extentsからの変換コンストラクタ
   {
     Ext3xN ext{4};
-    Mapping3xN map3 = ext;
+    std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map3 = ext;
     assert(map3.extents() == ext);
   }
   // (4) : layout_right::mappingからの変換コンストラクタ
   {
-    Mapping3x4 map4_3x4;
-    Mapping3xN map4_3xN = map4_3x4;
+    std::layout_right::mapping&amp;lt;Ext3x4&amp;gt; map4_3x4;
+    std::layout_right::mapping&amp;lt;Ext3xN&amp;gt; map4_3xN = map4_3x4;
     assert(map4_3x4 == map4_3xN);
   }
   // (5) : layout_left::mappingからの変換コンストラクタ
@@ -122,11 +119,11 @@ int main()
   }
 }
 ```
+* std::layout_right::mapping[color ff0000]
 * std::extents[link ../../extents.md]
 * std::dextents[link ../../extents.md]
-* std::layout_right::mapping[link ../mapping.md]
 * std::layout_left::mapping[link ../../layout_left/mapping.md]
-* std::layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+* std::layout_stride::mapping[link ../../layout_stride/mapping.md]
 * required_span_size()[link required_span_size.md]
 
 ### 出力
@@ -147,7 +144,7 @@ int main()
 
 ## 関連項目
 - [`layout_left::mapping`](../../layout_left/mapping.md)
-- [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/required_span_size.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_right/mapping/required_span_size.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/required_span_size.md b/reference/mdspan/layout_right/mapping/required_span_size.md
index 234805799..b6d2e28f0 100644
--- a/reference/mdspan/layout_right/mapping/required_span_size.md
+++ b/reference/mdspan/layout_right/mapping/required_span_size.md
@@ -6,7 +6,7 @@
 * cpp23[meta cpp]
 
 ```cpp
-index_type required_span_size() const noexcept;
+constexpr index_type required_span_size() const noexcept;
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
index a2b9899de..69f790cc4 100644
--- a/reference/mdspan/layout_stride.md
+++ b/reference/mdspan/layout_stride.md
@@ -13,7 +13,7 @@ namespace std {
 }
 ```
 * Extents[link extents.md]
-* mapping[link layout_stride/mapping.md.nolink]
+* mapping[link layout_stride/mapping.md]
 
 ## 概要
 `layout_stride`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定した[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
@@ -25,7 +25,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`mapping`](mapping.md.nolink) | レイアウトマッピング | C++23 |
+| [`mapping`](layout_stride/mapping.md) | レイアウトマッピング | C++23 |
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping.md b/reference/mdspan/layout_stride/mapping.md
new file mode 100644
index 000000000..81d79bf93
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping.md
@@ -0,0 +1,136 @@
+# mapping
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* layout_stride[meta class]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Extents&amp;gt;
+  class layout_stride::mapping;
+}
+```
+* layout_stride[link ../layout_stride.md]
+* Extents[link ../extents.md]
+
+## 概要
+`layout_stride::mapping&amp;lt;E&amp;gt;`は、[`extents`](../extents.md)型の多次元配列サイズ`E`をパラメータとして、次元毎に任意ストライド幅を指定した[レイアウトマッピング](../LayoutMapping.md)を表現するクラスである。
+
+`layout_stride::mapping&amp;lt;E&amp;gt;`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`regular`](/reference/concepts/regular.md)のモデルである。
+
+### 説明専用メンバ変数
+`layout_stride::mapping`クラステンプレートは、下記の説明専用メンバ変数を保持する。
+
+- `extents_` : `extents_type`型の[多次元配列サイズ情報](../extents.md)
+- `strides_` : `array&amp;lt;index_type,` [`extents_type::rank()`](../extents/rank.md)`&amp;gt;`型のストライド幅配列
+
+
+## 適格要件
+- `Extents`は[`extents`](../extents.md)の特殊化であること。
+- [`Extents::rank_dynamic()`](../extents/rank_dynamic.md) `== 0`が`true`のとき、多次元インデクス空間`Extents()`のサイズが`Extents::index_type`型で表現できること。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](mapping/op_constructor.md) | コンストラクタ | C++23 |
+| `(destructor)` | デストラクタ | C++23 |
+| `operator=`    | コピー代入演算子 | C++23 |
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents` | 多次元配列のサイズ`extents_`を取得する | C++23 |
+| `strides` | ストライド配列`strides_`を取得する | C++23 |
+| [`required_span_size`](mapping/required_span_size.md) | 要素アクセス範囲を取得する | C++23 |
+| [`operator()`](mapping/op_call.md) | 多次元配列インデクスから要素位置へ変換する | C++23 |
+| [`is_exhaustive`](mapping/is_exhaustive.md) | [Exhaustive特性](../LayoutMapping.md)を取得する | C++23 |
+| [`stride`](mapping/stride.md) | 指定次元のストライド幅を取得する | C++23 |
+
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `is_always_unique`     | `true`を返す | C++23 |
+| `is_always_exhaustive` | `false`を返す | C++23 |
+| `is_always_strided`    | `true`を返す | C++23 |
+| `is_unique`     | `true`を返す | C++23 |
+| `is_strided`    | `true`を返す | C++23 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents_type` | [`Extents`](../extents.md) | C++23 |
+| `index_type` | [`Extents::index_type`](../extents.md) | C++23 |
+| `size_type` | [`Extents::size_type`](../extents.md) | C++23 |
+| `rank_type` | [`Extents::rank_type`](../extents.md) | C++23 |
+| `layout_type` | [`layout_stride`](../layout_stride.md) | C++23 |
+
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](mapping/op_equal.md) | 等値比較 | C++23 |
+| [`operator!=`](mapping/op_equal.md) | 非等値比較 (`==`により使用可能) | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 3, 0, 4, 5, 6, 0};
+
+  // 要素数2x3の2次元配列／パディングあり行優先レイアウト
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext2x3&amp;gt;;
+  std::array strides{4, 1};
+  std::mdspan mat{arr, Mapping{{}, strides}};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::cout &amp;lt;&amp;lt; (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;) &amp;lt;&amp;lt; mat[i, j];
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* std::layout_stride::mapping[color ff0000]
+* std::mdspan[link ../mdspan.md]
+* std::extents[link ../extents.md]
+
+### 出力
+```
+1 2 3
+4 5 6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`mdspan`](../mdspan.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_exhaustive -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/is_exhaustive.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/is_exhaustive.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/is_exhaustive.md b/reference/mdspan/layout_stride/mapping/is_exhaustive.md
new file mode 100644
index 000000000..22ac4e84e
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/is_exhaustive.md
@@ -0,0 +1,66 @@
+# is_exhaustive
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr bool is_exhaustive() const noexcept;
+```
+
+## 概要
+レイアウトマッピングの[Exhaustive特性](../../LayoutMapping.md)を取得する。
+
+
+## 戻り値
+多次元インデクスの次元数を`rank_`としたとき
+
+- `rank_ == 0`のとき、`true`を返す。
+- そうでなければ、取りうる全ての多次元インデクス値に対応する要素位置を考えたとき、アクセスされうる要素位置に隙間が生じないならば`true`を返す。
+- そうでなければ、`false`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext2x3&amp;gt;;
+
+  Mapping map1{{}, std::array{3, 1}};
+  assert(map1.is_exhaustive());
+
+  Mapping map2{{}, std::array{4, 1}};
+  assert(not map2.is_exhaustive());
+}
+```
+* is_exhaustive()[color ff0000]
+* std::extents[link ../../extents.md]
+* std::layout_stride::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout-mapping-alike -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/layout-mapping-alike.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/layout-mapping-alike.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/layout-mapping-alike.md b/reference/mdspan/layout_stride/mapping/layout-mapping-alike.md
new file mode 100644
index 000000000..ab4ac4ca4
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/layout-mapping-alike.md
@@ -0,0 +1,31 @@
+# layout-mapping-alike
+* mdspan[meta header]
+* concept[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class M&amp;gt;
+concept layout-mapping-alike = requires {  // exposition only
+  requires is-extents&amp;lt;typename M::extents_type&amp;gt;;
+  { M::is_always_strided() } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+  { M::is_always_exhaustive() } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+  { M::is_always_unique() } -&amp;gt; same_as&amp;lt;bool&amp;gt;;
+  bool_constant&amp;lt;M::is_always_strided()&amp;gt;::value;
+  bool_constant&amp;lt;M::is_always_exhaustive()&amp;gt;::value;
+  bool_constant&amp;lt;M::is_always_unique()&amp;gt;::value;
+};
+```
+
+## 概要
+`layout_stride::mapping`動作仕様のための説明専用コンセプトである。
+
+
+## バージョン
+### 言語
+- C++23
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_call.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/op_call.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_call.md b/reference/mdspan/layout_stride/mapping/op_call.md
new file mode 100644
index 000000000..e8ee2367e
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/op_call.md
@@ -0,0 +1,85 @@
+# operator()
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class... Indices&amp;gt;
+constexpr index_type operator()(Indices... i) const noexcept;
+```
+
+## 概要
+多次元インデクス値`i...`に対応する要素位置を求める。
+
+
+## テンプレートパラメータ制約
+- `sizeof...(Indices) ==` [`extents_type::rank()`](../../extents/rank.md)が`true`、かつ
+- `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+- `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+
+
+## 事前条件
+多次元インデクス値[`extents_type::index-cast(i)`](../../extents/index-cast.md)は、多次元配列サイズ`extents_`における有効なインデクスであること。
+
+
+## 戻り値
+説明用のパラメータパック`P`において、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`index_sequence_for`](/reference/utility/index_sequence_for.md)`&amp;lt;Indices...&amp;gt;,` [`index_sequence`](/reference/utility/index_sequence.md)`&amp;lt;P...&amp;gt;&amp;gt;`が`true`となるとき、以下と等価。
+
+```cpp
+return ((static_cast&amp;lt;index_type&amp;gt;(Indices...) * stride(P)) + ... + 0);
+```
+* stride[link stride.md]
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3D = std::dextents&amp;lt;size_t, 3&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext3D&amp;gt;;
+  std::array strides{6, 1, 3};
+  Mapping map{Ext3D{4, 3, 2}, strides};
+  // map(i,j,k):
+  // i=   0  |   1   |   2   |   3
+  //   ------+-------+-------+-------
+  // j/k -&amp;gt;
+  // |  0  3 |  6  9 | 12 15 | 18 21
+  // V  1  4 |  7 10 | 13 16 | 19 22
+  //    2  5 |  8 11 | 14 17 | 20 23
+  assert(map(0,0,0) == 0);
+  assert(map(1,0,0) == 6);
+  assert(map(0,1,0) == 1);
+  assert(map(0,0,1) == 3);
+  assert(map(3,2,1) == 23);
+}
+```
+* std::dextents[link ../../extents.md]
+* std::layout_stride::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_constructor.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/op_constructor.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_constructor.md b/reference/mdspan/layout_stride/mapping/op_constructor.md
new file mode 100644
index 000000000..3de01f41a
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/op_constructor.md
@@ -0,0 +1,167 @@
+# コンストラクタ
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr mapping() noexcept;  // (1)
+
+constexpr mapping(const mapping&amp;amp;) noexcept = default;  // (2)
+
+template&amp;lt;class OtherIndexType&amp;gt;
+  constexpr mapping(const extents_type&amp;amp;, span&amp;lt;OtherIndexType, rank_&amp;gt;) noexcept;  // (3)
+
+template&amp;lt;class OtherIndexType&amp;gt;
+  constexpr mapping(const extents_type&amp;amp;, const array&amp;lt;OtherIndexType, rank_&amp;gt;&amp;amp;) noexcept;  // (4)
+
+template&amp;lt;class StridedLayoutMapping&amp;gt;
+  constexpr explicit(see below) mapping(const StridedLayoutMapping&amp;amp;) noexcept;  // (5)
+```
+* span[link /reference/span/span.md]
+* array[link /reference/array/array.md]
+* rank_[italic]
+* see below[italic]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : コピーコンストラクタ
+- (3), (4) : [`extents`](../../extents.md)とストライド幅からの構築（定数`rank_`は次元数）
+- (5) : [レイアウトマッピング](../../LayoutMapping.md)からの変換コンストラクタ
+
+
+## テンプレートパラメータ制約
+- (3), (4) :
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const OtherIndexType&amp;amp;, index_type&amp;gt;`が`true`、かつ
+    - [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, const OtherIndexType&amp;amp;&amp;gt;`が`true`であること。
+- (5) :
+   - [`layout-mapping-alike`](layout-mapping-alike.md)`&amp;lt;StridedLayoutMapping&amp;gt;`を満たす
+   - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, typename StridedLayoutMapping::extents_type&amp;gt; == true`
+   - `StridedLayoutMapping::is_always_unique() == true`
+   - `StridedLayoutMapping::is_always_strided() == true`
+
+
+## 事前条件
+- (1) : [`layout_right::mapping&amp;lt;extents_type&amp;gt;()`](../../layout_right/mapping.md)`.`[`required_span_size()`](../../layout_right/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (3), (4) :
+    -　半開区間`[0, rank_)`の全ての`i`に対して、`s[i]`を`index_type`へ変換した結果が`0`より大きいこと。
+    - [`REQUIRED-SPAN-SIZE`](required_span_size.md)`(e, s)`を`index_type`型で表現できること。
+    - `rank_`が`0`より大きいとき、半開区間`[1, rank_)`の全ての`i`に対して`j = i-1`として`s[Pi] &amp;gt;= s[Pj] * e.extents(Pj)`を満たすの整数値の組合せ`P`が存在すること。
+- (5) :
+    - `StridedLayoutMapping`が[レイアウトマッピングポリシー](../../LayoutMappingPolicy.md)を満たす
+    - `extents()`の全ての次元`r`に対して`other.stride(r) &amp;gt; 0`
+    - `other.required_span_size()`を`index_type`型で表現できること
+    - [`OFFSET`](op_equal.md)`(other) == 0`
+
+
+## 効果
+- (1) : `extents_type()`で`extents_`を直接非リスト初期化し、全ての次元`d`に対して[`layout_right::mapping&amp;lt;extents_type&amp;gt;()`](../../layout_right/mapping.md)`.`[`stride(d)`](../../layout_right/mapping/stride.md)で`strides_[d]`を直接非リスト初期化する。
+- (3), (4) : `e`で`extents_`を直接非リスト初期化し、全ての次元`d`に対して[`as_const`](/reference/utility/as_const.md)`(s[d])`で`strides_[d]`を直接非リスト初期化する。
+- (5) : `other.extents()`で`extents_`を直接非リスト初期化し、全ての次元`d`に対して`other.stride(d)`で`strides_[d]`を直接非リスト初期化する。
+
+
+## 例外
+投げない
+
+
+## explicitになる条件
+説明専用の変数テンプレート`is-mapping-of`を下記の通り定義する：
+
+```cpp
+template&amp;lt;class Layout, class Mapping&amp;gt;
+constexpr bool is-mapping-of = // exposition only
+  is_same_v&amp;lt;typename Layout::template mapping&amp;lt;typename Mapping::extents_type&amp;gt;, Mapping&amp;gt;;
+```
+* is-mapping-of[italic]
+* is_same_v[link /reference/type_traits/is_same.md]
+
+- (5) : `explicit`指定子の式は以下と等価
+```cpp
+!(is_convertible_v&amp;lt;typename StridedLayoutMapping::extents_type, extents_type&amp;gt; &amp;amp;&amp;amp;
+  (is-mapping-of&amp;lt;layout_left, StridedLayoutMapping&amp;gt; ||
+   is-mapping-of&amp;lt;layout_right, StridedLayoutMapping&amp;gt; ||
+   is-mapping-of&amp;lt;layout_stride, StridedLayoutMapping&amp;gt;))
+```
+* is_convertible_v[link /reference/type_traits/is_convertible.md]
+* is-mapping-of[italic]
+* layout_left[link ../../layout_left.md]
+* layout_right[link ../../layout_right.md]
+* layout_stride[link ../../layout_stride.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;span&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+
+int main()
+{
+  // (1) : デフォルトコンストラクタ
+  {
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map1;
+    std::layout_right::mapping&amp;lt;Ext3x4&amp;gt;  map1R;
+    assert(map1 == map1R);
+  }
+  // (2) : コピーコンストラクタ
+  {
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map2_a;
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map2_b = map2_a;
+    assert(map2_a == map2_b);
+  }
+  // (3) : extentsとストライド幅(span)による構築
+  {
+    int strides[] = {4, 1};
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map3{Ext3x4{}, std::span(strides)};
+    assert(map3.stride(0) == 4);
+    assert(map3.stride(1) == 1);
+  }
+  // (4) : extentsとストライド幅(array)による構築
+  {
+    std::array strides{4, 1};
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map4{Ext3x4{}, strides};
+    assert(map4.stride(0) == 4);
+    assert(map4.stride(1) == 1);
+  }
+  // (5) : レイアウトマッピングからの変換コンストラクタ
+  {
+    std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;   map5L;
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; map5 = map5L;
+    assert(map5 == map5L);
+  }
+}
+```
+* std::layout_stride::mapping[color ff0000]
+* std::extents[link ../../extents.md]
+* std::layout_right::mapping[link ../../layout_right/mapping.md]
+* std::layout_left::mapping[link ../../layout_left/mapping.md]
+* stride[link stride.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_left::mapping`](../../layout_left/mapping.md)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
+- [P2763R1 `layout_stride` static extents default constructor fix](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2763r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/op_equal.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/op_equal.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/op_equal.md b/reference/mdspan/layout_stride/mapping/op_equal.md
new file mode 100644
index 000000000..2bb0b090c
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/op_equal.md
@@ -0,0 +1,92 @@
+# operator==
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class OtherMapping&amp;gt;
+friend constexpr bool operator==(const mapping&amp;amp; x, const OtherMapping&amp;amp; y) noexcept;
+
+//operator==により、以下のオーバーロードが使用可能になる        
+template&amp;lt;class OtherExtents&amp;gt;
+friend constexpr bool operator!=(const mapping&amp;amp; x, const OtherMapping&amp;amp; y) noexcept;
+```
+
+## 概要
+`mapping`の等値比較を行う。
+
+
+## テンプレートパラメータ制約
+- [`layout-mapping-alike`](layout-mapping-alike.md)`&amp;lt;OtherMapping&amp;gt;`を満たすこと。
+- `extents_type::rank() == OtherMapping::extents_type::rank()`
+- `OtherMapping::is_always_strided() == true`
+
+
+## 事前条件
+`OtherMapping`は[レイアウトマッピング要件](../../LayoutMapping.md)を満たすこと。
+
+
+## 戻り値
+説明専用の関数`OFFSET(m)`を下記の通り定義する：
+
+- 多次元インデクスが0次元のとき[`m()`](op_call.md)
+- そうでなければ、多次元インデクス空間のサイズが0のとき値`0`
+- そうでなければ、多次元インデクス値の全要素が0である整数パック`z`を用いて[`m(z...)`](op_call.md)
+
+下記条件を全て満たすとき、`true`を返す。そうでなければ、`false`を返す。
+
+- `x.extents() == y.extents()`
+- `OFFSET(y) == 0`
+- 全ての次元`r`において[`x.stride(r)`](stride.md) `== y.stride(y)`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext4x3x2 = std::extents&amp;lt;size_t, 4, 3, 2&amp;gt;;
+
+  std::layout_stride::mapping&amp;lt;Ext4x3x2&amp;gt; map1{{}, std::array{1, 4, 12}};
+  std::layout_left::mapping&amp;lt;Ext4x3x2&amp;gt;   mapL;
+  assert(map1 == mapL);
+
+  std::layout_stride::mapping&amp;lt;Ext4x3x2&amp;gt; map2{{}, std::array{6, 2, 1}};
+  std::layout_right::mapping&amp;lt;Ext4x3x2&amp;gt;  mapR;
+  assert(map2 == mapR);
+}
+```
+* ==[color ff0000]
+* std::extents[link ../../extents.md]
+* std::layout_stride::mapping[link ../mapping.md]
+* std::layout_left::mapping[link ../../layout_left/mapping.md]
+* std::layout_right::mapping[link ../../layout_right/mapping.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/required_span_size.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/required_span_size.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/required_span_size.md b/reference/mdspan/layout_stride/mapping/required_span_size.md
new file mode 100644
index 000000000..160e925c3
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/required_span_size.md
@@ -0,0 +1,78 @@
+# required_span_size
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr index_type required_span_size() const noexcept;
+```
+
+## 概要
+メモリブロックに対する要素アクセス範囲を取得する。
+
+説明用の関数`REQUIRED-SPAN-SIZE(e, strides)`を次のように定義する
+
+- `e.`[`rank()`](../../extents/rank.md) `== 0`のとき値`1`
+- そうでなければ、多次元インデクス空間`e`のサイズが0のとき値`0`
+- そうでなければ、半開区間`[0, e.rank())`の全ての`r`に対して`(e.`[`extent`](../../extents/extent.md)`(r) - 1)`と[`extents_type::index-cast`](../../extents/index-cast.md)`(strides_[r])`を乗じた値の総和に`1`を加算した値
+
+
+## 戻り値
+説明専用のメンバ変数`extents_`, `strides_`に対して、`REQUIRED-SPAN-SIZE(extents_, strides_)`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext2x3&amp;gt;;
+
+  Mapping map1{{}, std::array{4, 1}};
+  assert(map1.required_span_size() == 7);
+  // map1(i,j):
+  // i/j -&amp;gt;
+  // |  1 2 3 (4)
+  // V  5 6 7  -
+
+  Mapping map2{{}, std::array{2, 3}};
+  assert(map2.required_span_size() == 9);
+  // map2(i,j):
+  // i/j -&amp;gt;
+  // |   1   4   7
+  // V  (2) (5) (8)
+  //     3   6   9
+}
+```
+* required_span_size()[color ff0000]
+* std::extents[link ../../extents.md]
+* std::layout_stride::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- mdspan/layout_stride/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride/mapping/stride.html"/>
      <id>8de03aaa7db47ac31be0d7d5d83546bd8aa07172:reference/mdspan/layout_stride/mapping/stride.md</id>
      <updated>2024-01-19T00:17:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride/mapping/stride.md b/reference/mdspan/layout_stride/mapping/stride.md
new file mode 100644
index 000000000..1ef0867f2
--- /dev/null
+++ b/reference/mdspan/layout_stride/mapping/stride.md
@@ -0,0 +1,62 @@
+# stride
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_stride::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr index_type stride(rank_type i) const noexcept;
+```
+
+## 概要
+`i`番目次元のストライド幅を取得する。
+
+
+## 戻り値
+説明専用のメンバ変数`strides_`を用いて、`strides_[i]`を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3D = std::dextents&amp;lt;size_t, 3&amp;gt;;
+  using Mapping = std::layout_stride::mapping&amp;lt;Ext3D&amp;gt;;
+  std::array strides{6, 1, 3};
+  Mapping map{Ext3D{4, 3, 2}, strides};
+  assert(map.stride(0) == 6);
+  assert(map.stride(1) == 1);
+  assert(map.stride(2) == 3);
+}
+```
+* stride[color ff0000]
+* std::dextents[link ../../extents.md]
+* std::layout_stride::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_left -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left.md b/reference/mdspan/layout_left.md
index 791be790c..0d02cd54d 100644
--- a/reference/mdspan/layout_left.md
+++ b/reference/mdspan/layout_left.md
@@ -13,7 +13,7 @@ namespace std {
 }
 ```
 * Extents[link extents.md]
-* mapping[link mapping.md.nolink]
+* mapping[link layout_left/mapping.md]
 
 ## 概要
 `layout_left`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、FortranやMatlab多次元配列と互換性のある列優先(column major)[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
@@ -27,7 +27,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`mapping`](mapping.md.nolink) | レイアウトマッピング | C++23 |
+| [`mapping`](layout_left/mapping.md) | レイアウトマッピング | C++23 |
 
 
 ## 例
@@ -37,7 +37,7 @@ namespace std {
 
 int main()
 {
-  double arr[] = {1, 4, 2, 5, 3, 6};
+  double arr[] = {1, 2, 3, 4, 5, 6};
 
   // 要素数2x3の2次元配列／列優先レイアウト
   using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
@@ -57,8 +57,8 @@ int main()
 
 ### 出力
 ```
-1 2 3
-4 5 6
+1 3 5
+2 4 6
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping.md b/reference/mdspan/layout_left/mapping.md
new file mode 100644
index 000000000..b6d4264bb
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping.md
@@ -0,0 +1,132 @@
+# mapping
+* mdspan[meta header]
+* class template[meta id-type]
+* std[meta namespace]
+* layout_left[meta class]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template&amp;lt;class Extents&amp;gt;
+  class layout_left::mapping;
+}
+```
+* layout_left[link ../layout_left.md]
+* Extents[link ../extents.md]
+
+## 概要
+`layout_left::mapping&amp;lt;E&amp;gt;`は、[`extents`](../extents.md)型の多次元配列サイズ`E`をパラメータとして、Fortran/Matlab多次元配列と互換性のある列優先(column major)[レイアウトマッピング](../LayoutMapping.md)を表現するクラスである。
+
+`layout_left::mapping&amp;lt;E&amp;gt;`は[トリビアルコピー可能](/reference/type_traits/is_trivially_copyable.md)であり、[`regular`](/reference/concepts/regular.md)のモデルである。
+
+### 説明専用メンバ変数
+`layout_left::mapping`クラステンプレートは、下記の説明専用メンバ変数を保持する。
+
+- `extents_` : `extents_type`型の[多次元配列サイズ情報](../extents.md)
+
+
+## 適格要件
+- `Extents`は[`extents`](../extents.md)の特殊化であること。
+- [`Extents::rank_dynamic()`](../extents/rank_dynamic.md) `== 0`が`true`のとき、多次元インデクス空間`Extents()`のサイズが`Extents::index_type`型で表現できること。
+
+
+## メンバ関数
+### 構築・破棄
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`(constructor)`](mapping/op_constructor.md) | コンストラクタ | C++23 |
+| `(destructor)` | デストラクタ | C++23 |
+| `operator=`    | コピー代入演算子 | C++23 |
+
+### 観測
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents` | 多次元配列のサイズ`extents_`を取得する | C++23 |
+| [`required_span_size`](mapping/required_span_size.md) | 要素アクセス範囲を取得する | C++23 |
+| [`operator()`](mapping/op_call.md) | 多次元配列インデクスから要素位置へ変換する | C++23 |
+| [`stride`](mapping/stride.md) | 指定次元のストライド幅を取得する | C++23 |
+
+
+## 静的メンバ関数
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `is_always_unique`     | `true`を返す | C++23 |
+| `is_always_exhaustive` | `true`を返す | C++23 |
+| `is_always_strided`    | `true`を返す | C++23 |
+| `is_unique`     | `true`を返す | C++23 |
+| `is_exhaustive` | `true`を返す | C++23 |
+| `is_strided`    | `true`を返す | C++23 |
+
+
+## メンバ型
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| `extents_type` | [`Extents`](../extents.md) | C++23 |
+| `index_type` | [`Extents::index_type`](../extents.md) | C++23 |
+| `size_type` | [`Extents::size_type`](../extents.md) | C++23 |
+| `rank_type` | [`Extents::rank_type`](../extents.md) | C++23 |
+| `layout_type` | [`layout_left`](../layout_left.md) | C++23 |
+
+
+### 比較演算子
+
+| 名前 | 説明 | 対応バージョン |
+|------|------|----------------|
+| [`operator==`](mapping/op_equal.md) | 等値比較 | C++23 |
+| [`operator!=`](mapping/op_equal.md) | 非等値比較 (`==`により使用可能) | C++23 |
+
+
+## 例
+```cpp example
+#include &amp;lt;mdspan&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main()
+{
+  double arr[] = {1, 2, 3, 4, 5, 6};
+
+  // 要素数2x3の2次元配列／列優先レイアウト
+  using Ext2x3 = std::extents&amp;lt;size_t, 2, 3&amp;gt;;
+  using Mapping = std::layout_left::mapping&amp;lt;Ext2x3&amp;gt;;
+  std::mdspan mat{arr, Mapping{}};
+
+  for (size_t i = 0; i &amp;lt; mat.extent(0); ++i) {
+    for (size_t j = 0; j &amp;lt; mat.extent(1); ++j) {
+      std::cout &amp;lt;&amp;lt; (j ? &amp;#34; &amp;#34; : &amp;#34;&amp;#34;) &amp;lt;&amp;lt; mat[i, j];
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;;
+  }
+}
+```
+* std::layout_left::mapping[color ff0000]
+* std::mdspan[link ../mdspan.md]
+* std::extents[link ../extents.md]
+
+### 出力
+```
+1 3 5
+2 4 6
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`mdspan`](../mdspan.md)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_call.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping/op_call.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_call.md b/reference/mdspan/layout_left/mapping/op_call.md
new file mode 100644
index 000000000..18c58c9ea
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping/op_call.md
@@ -0,0 +1,76 @@
+# operator()
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_left::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class... Indices&amp;gt;
+constexpr index_type operator()(Indices... i) const noexcept;
+```
+
+## 概要
+多次元インデクス値`i...`に対応する要素位置を求める。
+
+
+## テンプレートパラメータ制約
+- `sizeof...(Indices) ==` [`extents_tyoe::rank()`](../../extents/rank.md)が`true`、かつ
+- `(`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;Indices, index_type&amp;gt; &amp;amp;&amp;amp; ...)`が`true`、かつ
+- `(`[`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, Indices&amp;gt; &amp;amp;&amp;amp; ...)`が`true`であること。
+
+
+## 事前条件
+多次元インデクス値[`extents_type::index-cast(i)`](../../extents/index-cast.md)は、多次元配列サイズ`extents_`における有効なインデクスであること。
+
+
+## 戻り値
+説明用のパラメータパック`P`において、[`is_same_v`](/reference/type_traits/is_same.md)`&amp;lt;`[`index_sequence_for`](/reference/utility/index_sequence_for.md)`&amp;lt;Indices...&amp;gt;,` [`index_sequence`](/reference/utility/index_sequence.md)`&amp;lt;P...&amp;gt;&amp;gt;`が`true`となるとき、以下と等価。
+
+```cpp
+return ((static_cast&amp;lt;index_type&amp;gt;(Indices...) * stride(P)) + ... + 0);
+```
+* stride[link stride.md]
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map;
+  assert(map(0,0) == 0);
+  assert(map(0,1) == 3);
+  assert(map(1,0) == 1);
+  assert(map(2,3) == 11);
+}
+```
+* std::extents[link ../../extents.md]
+* std::layout_left::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_constructor.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping/op_constructor.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_constructor.md b/reference/mdspan/layout_left/mapping/op_constructor.md
new file mode 100644
index 000000000..2db5d74df
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping/op_constructor.md
@@ -0,0 +1,154 @@
+# コンストラクタ
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_left::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr mapping() noexcept = default;  // (1)
+
+constexpr mapping(const mapping&amp;amp;) noexcept = default;  // (2)
+
+constexpr mapping(const extents_type&amp;amp; e) noexcept;  // (3)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
+  mapping(const mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (4)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
+  mapping(const layout_right::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (5)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(extents_type::rank() &amp;gt; 0)
+  mapping(const layout_stride::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other) noexcept;  // (6)
+```
+* is_convertible_v[link /reference/type_traits/is_convertible.md]
+* rank()[link ../../extents/rank.md]
+* layout_right::mapping[link ../../layout_right/mapping.md]
+* layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : コピーコンストラクタ
+- (3) : [`extents`](../../extents.md)からの変換コンストラクタ
+- (4) : 他`layout_left::mapping`からの変換コンストラクタ
+- (5) : [`layout_right::mapping`](../../layout_right/mapping.md)からの変換コンストラクタ
+- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)からの変換コンストラクタ
+
+
+## テンプレートパラメータ制約
+- (4) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (5) :
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;lt;= 1`、かつ
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (6) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+
+
+## 事前条件
+- (3) : `e`の多次元インデクス空間のサイズを、`index_type`型で表現できること。
+- (4) : `other.`[`required_span_size()`](required_span_size.md)を、`index_type`型で表現できること。
+- (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (6) :
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_left::mapping`相当の制約](stride.md)をもつこと。
+    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+
+
+## 効果
+- (3) : `e`を用いて`extents_`を直接非リスト初期化する。
+- (4), (5), (6) : `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+
+
+## 例外
+投げない
+
+
+## explicitになる条件
+- (4), (5) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherExtents, extents_type&amp;gt;`
+- (6) : [`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+
+using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
+using Mapping3xN = std::layout_left::mapping&amp;lt;Ext3xN&amp;gt;;
+
+int main()
+{
+  // (1) : デフォルトコンストラクタ
+  {
+    Mapping3x4 map1_3x4;
+    Mapping3xN map1_3xN;
+    assert(map1_3x4.required_span_size() == 12);
+    assert(map1_3xN.required_span_size() == 0);
+  }
+  // (2) : コピーコンストラクタ
+  {
+    Mapping3xN map2_a;
+    Mapping3xN map2_b = map2_a;
+    assert(map2_a == map2_b);
+  }
+  // (3) : extentsからの変換コンストラクタ
+  {
+    Ext3xN ext{4};
+    Mapping3xN map3 = ext;
+    assert(map3.extents() == ext);
+  }
+  // (4) : layout_left::mappingからの変換コンストラクタ
+  {
+    Mapping3x4 map4_3x4;
+    Mapping3xN map4_3xN = map4_3x4;
+    assert(map4_3x4 == map4_3xN);
+  }
+  // (5) : layout_right::mappingからの変換コンストラクタ
+  {
+    using Ext1D = std::dextents&amp;lt;size_t, 1&amp;gt;;
+    std::layout_right::mapping&amp;lt;Ext1D&amp;gt; src5{Ext1D{5}};
+    std::layout_left::mapping&amp;lt;Ext1D&amp;gt;  dst5 = src5;
+  }
+  // (6) : layout_stride::mappingからの変換コンストラクタ
+  {
+    std::array strides{1, 3};
+    std::layout_stride::mapping&amp;lt;Ext3x4&amp;gt; src6{{}, strides};
+    std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;   dst6{src6};  // (explicit)
+  }
+}
+```
+* std::extents[link ../../extents.md]
+* std::dextents[link ../../extents.md]
+* std::layout_left::mapping[link ../mapping.md]
+* std::layout_right::mapping[link ../../layout_right/mapping.md]
+* std::layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
+* required_span_size()[link required_span_size.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_right::mapping`](../../layout_right/mapping.md)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/op_equal.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping/op_equal.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/op_equal.md b/reference/mdspan/layout_left/mapping/op_equal.md
new file mode 100644
index 000000000..2ac7079ad
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping/op_equal.md
@@ -0,0 +1,75 @@
+# operator==
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* layout_left::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class OtherExtents&amp;gt;
+friend constexpr bool operator==(
+  const mapping&amp;amp; x, const mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; y) noexcept;
+
+//operator==により、以下のオーバーロードが使用可能になる        
+template&amp;lt;class OtherExtents&amp;gt;
+friend constexpr bool operator!=(
+  const mapping&amp;amp; x, const mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; y) noexcept;
+```
+
+## 概要
+`mapping`の等値比較を行う。
+
+
+## テンプレートパラメータ制約
+`extents_type::`[`rank()`](../../extents/rank.md) `== OtherExtents::`[`rank()`](../../extents/rank.md)
+
+
+## 戻り値
+[`x.extents() == y.extents()`](../../extents/op_equal.md)
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map1;
+
+  using Ext3xN = std::extents&amp;lt;size_t, 3, std::dynamic_extent&amp;gt;;
+  using Mapping3xN = std::layout_left::mapping&amp;lt;Ext3xN&amp;gt;;
+  Mapping3xN map2{Ext3xN{4}};
+
+  assert(map1 == map2);
+}
+```
+* ==[color ff0000]
+* std::extents[link ../../extents.md]
+* std::layout_left::mapping[link ../mapping.md]
+
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/required_span_size.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping/required_span_size.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/required_span_size.md b/reference/mdspan/layout_left/mapping/required_span_size.md
new file mode 100644
index 000000000..40419fe69
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping/required_span_size.md
@@ -0,0 +1,65 @@
+# required_span_size
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+index_type required_span_size() const noexcept;
+```
+
+## 概要
+メモリブロックに対する要素アクセス範囲を取得する。
+
+
+## 戻り値
+多次元配列サイズ[`extents()`](../mapping.md)に対して、全次元の要素数を乗算した値。
+次元数が0の場合は、値1を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map1{};
+  assert(map1.required_span_size() == 12);
+
+  using Ext3D = std::dextents&amp;lt;size_t, 3&amp;gt;;
+  using Mapping3D = std::layout_left::mapping&amp;lt;Ext3D&amp;gt;;
+  Mapping3D map2{Ext3D{4, 3, 2}};
+  assert(map2.required_span_size() == 24);
+}
+```
+* required_span_size()[color ff0000]
+* std::extents[link ../../extents.md]
+* std::dextents[link ../../extents.md]
+* std::layout_left::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left/mapping/stride.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_left/mapping/stride.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left/mapping/stride.md b/reference/mdspan/layout_left/mapping/stride.md
new file mode 100644
index 000000000..0e0180b8b
--- /dev/null
+++ b/reference/mdspan/layout_left/mapping/stride.md
@@ -0,0 +1,78 @@
+# stride
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_left::mapping[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr index_type stride(rank_type i) const noexcept;
+```
+
+## 概要
+`i`番目次元のストライド幅を取得する。
+
+
+## テンプレートパラメータ制約
+[`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+
+
+## 事前条件
+`i &amp;lt;` [`extents_type::rank()`](../../extents/rank.md)
+
+
+## 戻り値
+多次元配列サイズの次元数`R =` [`extents_type::rank()`](../../extents/rank.md)としたとき
+
+- `i &amp;gt; 0`のとき、最左次元(`0`番目)から`i - 1`番目次元までの要素数を乗算した値を返す。
+- `i == 0`のとき、値1を返す。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+int main()
+{
+  using Ext3x4 = std::extents&amp;lt;size_t, 3, 4&amp;gt;;
+  using Mapping3x4 = std::layout_left::mapping&amp;lt;Ext3x4&amp;gt;;
+  Mapping3x4 map1;
+  assert(map1.stride(0) == 1);
+  assert(map1.stride(1) == 3);
+
+  using Ext3D = std::dextents&amp;lt;size_t, 3&amp;gt;;
+  using Mapping3D = std::layout_left::mapping&amp;lt;Ext3D&amp;gt;;
+  Mapping3D map2{Ext3D{4, 3, 2}};
+  assert(map2.stride(0) == 1);
+  assert(map2.stride(1) == 4);
+  assert(map2.stride(2) == 12);
+}
+```
+* stride[color ff0000]
+* std::extents[link ../../extents.md]
+* std::dextents[link ../../extents.md]
+* std::layout_left::mapping[link ../mapping.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_right/mapping.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping.md b/reference/mdspan/layout_right/mapping.md
index 5ba076930..149e98222 100644
--- a/reference/mdspan/layout_right/mapping.md
+++ b/reference/mdspan/layout_right/mapping.md
@@ -7,10 +7,8 @@
 
 ```cpp
 namespace std {
-  struct layout_right {
-    template&amp;lt;class Extents&amp;gt;
-    class mapping;
-  };
+  template&amp;lt;class Extents&amp;gt;
+  class layout_right::mapping;
 }
 ```
 * layout_right[link ../layout_right.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
index 13665be4e..34679786b 100644
--- a/reference/mdspan/layout_right/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -26,7 +26,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ```
 * is_convertible_v[link /reference/type_traits/is_convertible.md]
 * rank()[link ../../extents/rank.md]
-* layout_left::mapping[link ../../layout_left/mapping.md.nolink]
+* layout_left::mapping[link ../../layout_left/mapping.md]
 * layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
 
 ## 概要
@@ -34,7 +34,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (2) : コピーコンストラクタ
 - (3) : [`extents`](../../extents.md)からの変換コンストラクタ
 - (4) : 他`layout_right::mapping`からの変換コンストラクタ
-- (5) : [`layout_left::mapping`](../../layout_left/mapping.md.nolink)からの変換コンストラクタ
+- (5) : [`layout_left::mapping`](../../layout_left/mapping.md)からの変換コンストラクタ
 - (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)からの変換コンストラクタ
 
 
@@ -49,7 +49,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ## 事前条件
 - (3) : `e`の多次元インデクス空間のサイズを、`index_type`型で表現できること。
 - (4) : `other.`[`required_span_size()`](required_span_size.md)を、`index_type`型で表現できること。
-- (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
+- (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (6) :
     - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_right::mapping`相当の制約](stride.md)をもつこと。
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
@@ -125,7 +125,7 @@ int main()
 * std::extents[link ../../extents.md]
 * std::dextents[link ../../extents.md]
 * std::layout_right::mapping[link ../mapping.md]
-* std::layout_left::mapping[link ../../layout_left/mapping.md.nolink]
+* std::layout_left::mapping[link ../../layout_left/mapping.md]
 * std::layout_stride::mapping[link ../../layout_stride/mapping.md.nolink]
 * required_span_size()[link required_span_size.md]
 
@@ -146,7 +146,7 @@ int main()
 
 
 ## 関連項目
-- [`layout_left::mapping`](../../layout_left/mapping.md.nolink)
+- [`layout_left::mapping`](../../layout_left/mapping.md)
 - [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>layout_stride -- mdspan/layout_left/mapping: 全メンバ(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_stride.html"/>
      <id>75d3ea39f0136d0e3099e440b36dd023d486bbad:reference/mdspan/layout_stride.md</id>
      <updated>2024-01-17T23:22:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_stride.md b/reference/mdspan/layout_stride.md
index 875850089..a2b9899de 100644
--- a/reference/mdspan/layout_stride.md
+++ b/reference/mdspan/layout_stride.md
@@ -13,7 +13,7 @@ namespace std {
 }
 ```
 * Extents[link extents.md]
-* mapping[link mapping.md.nolink]
+* mapping[link layout_stride/mapping.md.nolink]
 
 ## 概要
 `layout_stride`は、多次元配列ビュー[`mdspan`](mdspan.md)に対して、次元毎に任意ストライド幅を指定した[レイアウトマッピング](LayoutMapping.md)を表現するポリシークラスである。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>all -- std::ranges::views::all ページ上部の名前空間表示を std::ranges から std::ranges::views に修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/all.html"/>
      <id>323fd208be6218fdffd9b27c76bf5cf554f3e3ad:reference/ranges/all.md</id>
      <updated>2024-01-17T11:53:36+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/all.md b/reference/ranges/all.md
index ce8ebd6cd..f0d0da82c 100644
--- a/reference/ranges/all.md
+++ b/reference/ranges/all.md
@@ -1,6 +1,6 @@
 # all
 * ranges[meta header]
-* std::ranges[meta namespace]
+* std::ranges::views[meta namespace]
 * cpo[meta id-type]
 * cpp20[meta cpp]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Hiroyuki Hori</name>
        <email>43978282+hi-hori@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>index-cast -- mdspan/layout_right: メタ情報等を調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/extents/index-cast.html"/>
      <id>14b6cb2d5ab831f062bfb98d369fd25c38caf68d:reference/mdspan/extents/index-cast.md</id>
      <updated>2024-01-17T10:07:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/extents/index-cast.md b/reference/mdspan/extents/index-cast.md
new file mode 100644
index 000000000..c34351766
--- /dev/null
+++ b/reference/mdspan/extents/index-cast.md
@@ -0,0 +1,32 @@
+# index-cast
+* mdspan[meta header]
+* function template[meta id-type]
+* std[meta namespace]
+* extents[meta class]
+* cpp23[meta cpp]
+
+```cpp
+template&amp;lt;class OtherIndexType&amp;gt;
+static constexpr auto index-cast(OtherIndexType&amp;amp;&amp;amp; i) noexcept; // 説明専用
+```
+
+## 概要
+多次元配列のインデクス型へと変換する、説明専用のメンバ関数である。
+
+
+## 戻り値
+- `OtherIndexType`が`bool`型以外の整数型の場合、`return i;`と等価。
+- `OtherIndexType`が`bool`型の場合、`return static_cast&amp;lt;index_type&amp;gt;(i);`と等価。
+
+
+## 例外
+投げない
+
+
+## バージョン
+### 言語
+- C++23
+
+
+## 参照
+- [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- mdspan/layout_right: メタ情報等を調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping.html"/>
      <id>14b6cb2d5ab831f062bfb98d369fd25c38caf68d:reference/mdspan/layout_right/mapping.md</id>
      <updated>2024-01-17T10:07:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping.md b/reference/mdspan/layout_right/mapping.md
index 7873890cc..5ba076930 100644
--- a/reference/mdspan/layout_right/mapping.md
+++ b/reference/mdspan/layout_right/mapping.md
@@ -2,7 +2,7 @@
 * mdspan[meta header]
 * class template[meta id-type]
 * std[meta namespace]
-* mdspan[meta class]
+* layout_right[meta class]
 * cpp23[meta cpp]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator() -- mdspan/layout_right: メタ情報等を調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_call.html"/>
      <id>14b6cb2d5ab831f062bfb98d369fd25c38caf68d:reference/mdspan/layout_right/mapping/op_call.md</id>
      <updated>2024-01-17T10:07:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_call.md b/reference/mdspan/layout_right/mapping/op_call.md
index 6117f05ae..a8c41860e 100644
--- a/reference/mdspan/layout_right/mapping/op_call.md
+++ b/reference/mdspan/layout_right/mapping/op_call.md
@@ -2,7 +2,7 @@
 * mdspan[meta header]
 * function template[meta id-type]
 * std[meta namespace]
-* mapping[meta class]
+* layout_right::mapping[meta class]
 * cpp23[meta cpp]
 
 ```cpp
@@ -21,7 +21,7 @@ constexpr index_type operator()(Indices... i) const noexcept;
 
 
 ## 事前条件
-多次元インデクス値`i...`は、多次元配列サイズ`extents_`における有効なインデクスであること。
+多次元インデクス値[`extents_type::index-cast(i)`](../../extents/index-cast.md)は、多次元配列サイズ`extents_`における有効なインデクスであること。
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_right: メタ情報等を調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>14b6cb2d5ab831f062bfb98d369fd25c38caf68d:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-01-17T10:07:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
index 96a8af7b2..13665be4e 100644
--- a/reference/mdspan/layout_right/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -2,7 +2,7 @@
 * mdspan[meta header]
 * function template[meta id-type]
 * std[meta namespace]
-* mapping[meta class]
+* layout_right::mapping[meta class]
 * cpp23[meta cpp]
 
 ```cpp
@@ -145,5 +145,10 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): ??
 
 
+## 関連項目
+- [`layout_left::mapping`](../../layout_left/mapping.md.nolink)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md.nolink)
+
+
 ## 参照
 - [P0009R18 MDSPAN](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0009r18.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- mdspan/layout_right: メタ情報等を調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_equal.html"/>
      <id>14b6cb2d5ab831f062bfb98d369fd25c38caf68d:reference/mdspan/layout_right/mapping/op_equal.md</id>
      <updated>2024-01-17T10:07:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_equal.md b/reference/mdspan/layout_right/mapping/op_equal.md
index 1fff45a89..7ef766655 100644
--- a/reference/mdspan/layout_right/mapping/op_equal.md
+++ b/reference/mdspan/layout_right/mapping/op_equal.md
@@ -2,7 +2,7 @@
 * mdspan[meta header]
 * function template[meta id-type]
 * std[meta namespace]
-* mapping[meta class]
+* layout_right::mapping[meta class]
 * cpp23[meta cpp]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>required_span_size -- mdspan/layout_right: メタ情報等を調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/required_span_size.html"/>
      <id>14b6cb2d5ab831f062bfb98d369fd25c38caf68d:reference/mdspan/layout_right/mapping/required_span_size.md</id>
      <updated>2024-01-17T10:07:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/required_span_size.md b/reference/mdspan/layout_right/mapping/required_span_size.md
index 6984b90c7..234805799 100644
--- a/reference/mdspan/layout_right/mapping/required_span_size.md
+++ b/reference/mdspan/layout_right/mapping/required_span_size.md
@@ -2,7 +2,7 @@
 * mdspan[meta header]
 * function[meta id-type]
 * std[meta namespace]
-* mapping[meta class]
+* layout_right::mapping[meta class]
 * cpp23[meta cpp]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride -- mdspan/layout_right: メタ情報等を調整(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/stride.html"/>
      <id>14b6cb2d5ab831f062bfb98d369fd25c38caf68d:reference/mdspan/layout_right/mapping/stride.md</id>
      <updated>2024-01-17T10:07:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/stride.md b/reference/mdspan/layout_right/mapping/stride.md
index fc5a641b7..e4ab0bac3 100644
--- a/reference/mdspan/layout_right/mapping/stride.md
+++ b/reference/mdspan/layout_right/mapping/stride.md
@@ -2,7 +2,7 @@
 * mdspan[meta header]
 * function[meta id-type]
 * std[meta namespace]
-* mapping[meta class]
+* layout_right::mapping[meta class]
 * cpp23[meta cpp]
 
 ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- mdspan/layout_right: remove forbidden chars(#1077)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right/mapping/op_constructor.html"/>
      <id>609bb7472628ea5c1b59e36acf610bd6afe02c1f:reference/mdspan/layout_right/mapping/op_constructor.md</id>
      <updated>2024-01-17T00:20:56+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right/mapping/op_constructor.md b/reference/mdspan/layout_right/mapping/op_constructor.md
index c695df515..96a8af7b2 100644
--- a/reference/mdspan/layout_right/mapping/op_constructor.md
+++ b/reference/mdspan/layout_right/mapping/op_constructor.md
@@ -41,7 +41,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 ## テンプレートパラメータ制約
 - (4) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
 - (5) :
-    - `extents_type​::​`[`rank()`](../../extents/rank.md) `&amp;lt;= 1`、かつ
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;lt;= 1`、かつ
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
 - (6) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
 
@@ -51,7 +51,7 @@ constexpr explicit(extents_type::rank() &amp;gt; 0)
 - (4) : `other.`[`required_span_size()`](required_span_size.md)を、`index_type`型で表現できること。
 - (5) : `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
 - (6) :
-    - `extents_type​::​`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_right::mapping`相当の制約](stride.md)をもつこと。
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 0`のとき、`other`における全次元のストライド幅が[`layout_right::mapping`相当の制約](stride.md)をもつこと。
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md.nolink)を、`index_type`型で表現できること。
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
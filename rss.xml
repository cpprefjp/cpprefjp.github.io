<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-01-31T05:40:56.693822</updated>
  <id>6322639f-8f1a-4a98-8b9c-d238a6350a84</id>

  
    <entry>
      <title>format -- &lt;ostream&gt; : print(ln), vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/format/format.html"/>
      <id>0bd721d4509759a70a2f56a2e6f7b77f99df7eaf:reference/format/format.md</id>
      <updated>2023-01-31T14:35:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format.md b/reference/format/format.md
index 5b94a42d8..f8a57a28f 100644
--- a/reference/format/format.md
+++ b/reference/format/format.md
@@ -580,8 +580,8 @@ wstring format(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... ar
     - [`std::print()`](/reference/print/print.md)
     - [`std::println()`](/reference/print/println.md)
 - [`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)
-    - [`std::print()`](/reference/ostream/print.md.nolink)
-    - [`std::println()`](/reference/ostream/println.md.nolink)
+    - [`std::print()`](/reference/ostream/print.md)
+    - [`std::println()`](/reference/ostream/println.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ostream -- &lt;ostream&gt; : print(ln), vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/ostream.html"/>
      <id>0bd721d4509759a70a2f56a2e6f7b77f99df7eaf:reference/ostream.md</id>
      <updated>2023-01-31T14:35:20+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;ostream&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;ostream&amp;gt;&lt;/code&gt;ヘッダでは、出力処理に関するクラスやマニピュレータ（の実体である関数）などが定義されている。&lt;/p&gt;
&lt;h2&gt;型と関数（マニピュレータを除く）&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/basic_ostream.html&#34;&gt;basic_ostream&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出力ストリーム (class template)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マニピュレータ&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;改行を出力し、バッファを出力して空にする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/ends.html&#34;&gt;ends&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ヌル文字を出力する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/flush.html&#34;&gt;flush&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バッファを出力して空にする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/flush_emit.html&#34;&gt;flush_emit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/syncstream/basic_osyncstream.html&#34;&gt;std::basic_osyncstream&lt;/a&gt;&lt;/code&gt;をフラッシュし、保留中の出力を転送する&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/emit_on_flush.html&#34;&gt;emit_on_flush&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/syncstream/basic_osyncstream.html&#34;&gt;std::basic_osyncstream&lt;/a&gt;&lt;/code&gt;の同期時排出ポリシーを&lt;code&gt;true&lt;/code&gt;にする&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/noemit_on_flush.html&#34;&gt;noemit_on_flush&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/syncstream/basic_osyncstream.html&#34;&gt;std::basic_osyncstream&lt;/a&gt;&lt;/code&gt;の同期時排出ポリシーを&lt;code&gt;false&lt;/code&gt;にする&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;print関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/print.html&#34;&gt;print&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で出力する (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/println.html&#34;&gt;println&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で出力する。末尾改行付き (function template)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/vprint_unicode.html&#34;&gt;vprint_unicode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定でUnicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ostream/vprint_nonunicode.html&#34;&gt;vprint_nonunicode&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;書式指定で非Unicode出力する (function)&lt;/td&gt;
&lt;td&gt;C++23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- &lt;ostream&gt; : print(ln), vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/ostream/print.html"/>
      <id>0bd721d4509759a70a2f56a2e6f7b77f99df7eaf:reference/ostream/print.md</id>
      <updated>2023-01-31T14:35:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/print.md b/reference/ostream/print.md
new file mode 100644
index 000000000..507b72ead
--- /dev/null
+++ b/reference/ostream/print.md
@@ -0,0 +1,107 @@
+# print
+* ostream[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class... Args&amp;gt;
+  void print(ostream&amp;amp; os,
+             format_string&amp;lt;Args...&amp;gt; fmt,
+             Args&amp;amp;&amp;amp;... args);             // (1) C++23
+}
+```
+* format_string[link /reference/format/format_string.md.nolink]
+* ostream[link basic_ostream.md]
+
+## 概要
+書式指定で出力する。
+
+書式は[`std::format()`](/reference/format/format.md)関数のページを参照。
+
+この関数は、[`std::printf()`](/reference/cstdio/printf.md.nolink)関数ライクな書式指定で引数を文字列化して出力する。
+
+- (1) : 指定した[`ostream`](basic_ostream.md)に、書式指定で出力する
+
+この関数は、末尾に改行コードが付かないことに注意。改行コードを自動で付けたい場合は、[`std::println()`](println.md)関数を使用すること。
+
+デフォルトの標準出力に出力したい場合は、[`&amp;lt;print&amp;gt;`](/reference/print.md)ヘッダの[`std::print()`](/reference/print/print.md)関数を使用すること。
+
+
+## 効果
+- (1) : 通常の文字列リテラルがUTF-8エンコーディングされている場合、以下と等価：
+    ```cpp
+    vprint_unicode(os, fmt.get(), make_format_args(std::forward&amp;lt;Args&amp;gt;(args)...));
+    ```
+    * vprint_unicode[link vprint_unicode.md]
+    * fmt.get()[link /reference/format/format_string/get.md.nolink]
+    * make_format_args[link /reference/format/make_format_args.md]
+    * std::forward[link /reference/utility/forward.md]
+
+    - そうでなければ、以下と等価：
+    ```cpp
+    vprint_nonunicode(os, fmt.get(), make_format_args(std::forward&amp;lt;Args&amp;gt;(args)...));
+    ```
+    * vprint_nonunicode[link vprint_nonunicode.md]
+    * fmt.get()[link /reference/format/format_string/get.md.nolink]
+    * make_format_args[link /reference/format/make_format_args.md]
+    * std::forward[link /reference/utility/forward.md]
+
+
+## 備考
+- LinuxやmacOSといった環境では、通常の`char`配列の文字列リテラルはUTF-8にエンコーディングされる
+- WindowsのVisual Studioにおいては、ソースコードと実行時文字集合をUTF-8にする[`/utf-8`オプション](https://learn.microsoft.com/en-us/cpp/build/reference/utf-8-set-source-and-executable-character-sets-to-utf-8?view=msvc-170)を使用することで、通常の`char`配列の文字列リテラルがUTF-8にエンコーディングされる
+- 「通常の文字列リテラルがUTF-8エンコーディングされている場合」という仕様は、コードでは以下のように表現できる：
+    ```cpp
+    constexpr bool is_utf8() {
+      const unsigned char micro[] = &amp;#34;\u00B5&amp;#34;;
+      return sizeof(micro) == 3 &amp;amp;&amp;amp; micro[0] == 0xC2 &amp;amp;&amp;amp; micro[1] == 0xB5;
+    }
+
+    template &amp;lt;typename... Args&amp;gt;
+    void print(string_view fmt, const Args&amp;amp;... args) {
+      if (is_utf8())
+        vprint_unicode(fmt, make_format_args(args...));
+      else
+        vprint_nonunicode(fmt, make_format_args(args...));
+    }
+    ```
+    * vprint_unicode[link vprint_unicode.md]
+    * vprint_nonunicode[link vprint_nonunicode.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;ostream&amp;gt;
+
+int main()
+{
+  std::print(std::cout, &amp;#34;Hello {} World\n&amp;#34;, 42);
+}
+```
+* std::print[color ff0000]
+
+### 出力
+```
+Hello 42 World
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::format()`](/reference/format/format.md)
+- [`std::println()`](println.md)
+
+
+## 参照
+- [P2093R14 Formatted output](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>println -- &lt;ostream&gt; : print(ln), vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/ostream/println.html"/>
      <id>0bd721d4509759a70a2f56a2e6f7b77f99df7eaf:reference/ostream/println.md</id>
      <updated>2023-01-31T14:35:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/println.md b/reference/ostream/println.md
new file mode 100644
index 000000000..7924f33b3
--- /dev/null
+++ b/reference/ostream/println.md
@@ -0,0 +1,75 @@
+# println
+* ostream[meta header]
+* std[meta namespace]
+* function template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  template &amp;lt;class... Args&amp;gt;
+  void println(ostream&amp;amp; os,
+               format_string&amp;lt;Args...&amp;gt; fmt,
+               Args&amp;amp;&amp;amp;... args);             // (1) C++23
+}
+```
+* format_string[link /reference/format/format_string.md.nolink]
+* ostream[link basic_ostream.md]
+
+## 概要
+書式指定で出力する。この関数は、出力の末尾に改行コードが自動で付加される。
+
+書式は[`std::format()`](/reference/format/format.md)関数のページを参照。
+
+この関数は、[`std::printf()`](/reference/cstdio/printf.md.nolink)関数ライクな書式指定で引数を文字列化して出力する。
+
+- (1) : 指定した[`ostream`](basic_ostream.md)に、書式指定で出力する
+
+この関数は、末尾に改行コードが付くことに注意。改行コードが不要な場合は、[`std::print()`](print.md)関数を使用すること。
+
+デフォルトの標準出力に出力したい場合は、[`&amp;lt;print&amp;gt;`](/reference/print.md)ヘッダの[`std::println()`](/reference/print/println.md)関数を使用すること。
+
+
+## 効果
+- (1) : 以下と等価：
+    ```cpp
+    print(os, &amp;#34;{}\n&amp;#34;, format(fmt, std::forward&amp;lt;Args&amp;gt;(args)...));
+    ```
+    * print[link print.md]
+    * format[link /reference/format/format.md]
+    * std::forward[link /reference/utility/forward.md]
+
+
+## 例
+```cpp example
+#include &amp;lt;ostream&amp;gt;
+
+int main()
+{
+  std::println(std::cout, &amp;#34;Hello {} World&amp;#34;, 42);
+}
+```
+* std::println[color ff0000]
+
+### 出力
+```
+Hello 42 World
+```
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::format()`](/reference/format/format.md)
+- [`std::print()`](print.md)
+
+
+## 参照
+- [P2093R14 Formatted output](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vprint_nonunicode -- &lt;ostream&gt; : print(ln), vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/ostream/vprint_nonunicode.html"/>
      <id>0bd721d4509759a70a2f56a2e6f7b77f99df7eaf:reference/ostream/vprint_nonunicode.md</id>
      <updated>2023-01-31T14:35:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/vprint_nonunicode.md b/reference/ostream/vprint_nonunicode.md
new file mode 100644
index 000000000..bdc2408f3
--- /dev/null
+++ b/reference/ostream/vprint_nonunicode.md
@@ -0,0 +1,57 @@
+# vprint_nonunicode
+* ostream[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  void vprint_nonunicode(ostream&amp;amp; os,
+                         string_view fmt,
+                         format_args args); // (1) C++23
+}
+```
+* ostream[link basic_ostream.md]
+* format_args[link /reference/format/basic_format_args.md]
+
+## 概要
+書式指定で非Unicode出力する。
+
+- (1) : 指定した[`ostream`](basic_ostream.md)に、書式指定で非Unicode出力する
+
+デフォルトの標準出力に出力したい場合は、[`&amp;lt;print&amp;gt;`](/reference/print.md)ヘッダの[`std::vprint_nonunicode()`](/reference/print/vprint_nonunicode.md)関数を使用すること。
+
+
+## 効果
+- `os`の書式化出力関数として振る舞うが、以下の点が異なる：
+    - 出力の生成失敗は、以下で規定されるように報告される
+    - [`vformat()`](/reference/format/vformat.md)関数よって送出された例外は、[`os.exceptions()`](/reference/ios/basic_ios/exceptions.md)の値に関係なく、また`os`のエラー状態として[`ios_base`](/reference/ios/ios_base.md)`::`[`badbit`](/reference/ios/ios_base/type-iostate.md)をオンにすることなく、伝播される。
+- `sentry`オブジェクトを構築した後、以下のように自動変数を初期化する：
+    ```cpp
+    string out = vformat(fmt, args);
+    ```
+    * string[link /reference/string/basic_string.md]
+    * vformat[link /reference/format/vformat.md]
+
+- 文字シーケンス `[`[`out.begin()`](/reference/string/basic_string/begin.md)`,` [`out.end()`](/reference/string/basic_string/end.md)`)` を `os` に挿入する。端末への書き込みまたは `os` への挿入が失敗した場合、[`os.setstate`](/reference/ios/basic_ios.md)`(`[`ios_base`](/reference/ios/ios_base.md)`::`[`badbit`](/reference/ios/ios_base/type-iostate.md)`)` を呼び出す ([`ios_base`](/reference/ios/ios_base.md)`::`[`failure`](/reference/ios/ios_base/failure.md)が送出される可能性がある)
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::print()`](print.md)
+- [`std::println()`](println.md)
+- [`std::vprint_unicode()`](vprint_nonunicode.md)
+
+
+## 参照
+- [P2093R14 Formatted output](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vprint_unicode -- &lt;ostream&gt; : print(ln), vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/ostream/vprint_unicode.html"/>
      <id>0bd721d4509759a70a2f56a2e6f7b77f99df7eaf:reference/ostream/vprint_unicode.md</id>
      <updated>2023-01-31T14:35:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ostream/vprint_unicode.md b/reference/ostream/vprint_unicode.md
new file mode 100644
index 000000000..ecc6b6f57
--- /dev/null
+++ b/reference/ostream/vprint_unicode.md
@@ -0,0 +1,70 @@
+# vprint_unicode
+* ostream[meta header]
+* std[meta namespace]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std {
+  void vprint_unicode(ostream&amp;amp; os,
+                      string_view fmt,
+                      format_args args); // (1) C++23
+}
+```
+* ostream[link /reference/ostream/basic_ostream.md]
+* format_args[link /reference/format/basic_format_args.md]
+
+## 概要
+書式指定でUnicode出力する。
+
+- (1) : 指定した[`ostream`](basic_ostream.md)に、書式指定でUnicode出力する
+
+デフォルトの標準出力に出力したい場合は、[`&amp;lt;print&amp;gt;`](/reference/print.md)ヘッダの[`std::vprint_unicode()`](/reference/print/vprint_unicode.md)関数を使用すること。
+
+
+## 効果
+- `os`の書式化出力関数として振る舞うが、以下の点が異なる：
+    - 出力の生成失敗は、以下で規定されるように報告される
+    - [`vformat()`](/reference/format/vformat.md)関数よって送出された例外は、[`os.exceptions()`](/reference/ios/basic_ios/exceptions.md)の値に関係なく、また`os`のエラー状態として[`ios_base`](/reference/ios/ios_base.md)`::`[`badbit`](/reference/ios/ios_base/type-iostate.md)をオンにすることなく、伝播される。
+- `sentry`オブジェクトを構築した後、以下のように自動変数を初期化する：
+    ```cpp
+    string out = vformat(fmt, args);
+    ```
+    * string[link /reference/string/basic_string.md]
+    * vformat[link /reference/format/vformat.md]
+
+- `os`が実装定義されたUnicodeを表示できる端末を参照するストリームである場合、ネイティブのUnicode APIを使用して端末に書き出す
+- `out`に無効なコードユニットが含まれる場合、その動作は未定義であり，実装者はそれを診断することが推奨される
+- ネイティブのUnicode APIを使用する場合、この関数は`out`を書き出す前にフラッシュする
+
+
+## 例外
+- [`vformat()`](/reference/format/vformat.md)関数がなんらかの例外を送出する可能性がある
+- 端末かストリームへの書き込みに失敗した場合、[`system_error`](/reference/system_error/system_error.md)を送出する
+- [`bad_alloc`](/reference/new/bad_alloc.md)を送出する可能性がある
+
+
+## 備考
+- 推奨の方式：ネイティブのUnicode APIを呼び出す際に文字コード変換が必要な場合、実装はUnicode標準 (Unicode Standard Version 14.0 - Core Specification, Chapter 3.9) に従って無効なコードユニットを「U+FFFD REPLACEMENT CHARACTER」で置き換える必要がある
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`std::print()`](print.md)
+- [`std::println()`](println.md)
+- [`std::vprint_nonunicode()`](vprint_nonunicode.md)
+
+
+## 参照
+- [P2093R14 Formatted output](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2093r14.html)
+- [P2539R4 Should the output of `std::print` to a terminal be synchronized with the underlying stream?](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2539r4.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- &lt;ostream&gt; : print(ln), vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/print/print.html"/>
      <id>0bd721d4509759a70a2f56a2e6f7b77f99df7eaf:reference/print/print.md</id>
      <updated>2023-01-31T14:35:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/print.md b/reference/print/print.md
index 035692dca..088c0647b 100644
--- a/reference/print/print.md
+++ b/reference/print/print.md
@@ -31,7 +31,7 @@ namespace std {
 
 この関数は、末尾に改行コードが付かないことに注意。改行コードを自動で付けたい場合は、[`std::println()`](println.md)関数を使用すること。
 
-[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::print()`](/reference/ostream/print.md.nolink)関数を使用すること。
+[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::print()`](/reference/ostream/print.md)関数を使用すること。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>println -- &lt;ostream&gt; : print(ln), vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/print/println.html"/>
      <id>0bd721d4509759a70a2f56a2e6f7b77f99df7eaf:reference/print/println.md</id>
      <updated>2023-01-31T14:35:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/println.md b/reference/print/println.md
index 54cc70128..5ecd8f35a 100644
--- a/reference/print/println.md
+++ b/reference/print/println.md
@@ -31,7 +31,7 @@ namespace std {
 
 この関数は、末尾に改行コードが付くことに注意。改行コードが不要な場合は、[`std::print()`](print.md)関数を使用すること。
 
-[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::print()`](/reference/ostream/println.md.nolink)関数を使用すること。
+[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::print()`](/reference/ostream/println.md)関数を使用すること。
 
 
 ## 効果
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vprint_nonunicode -- &lt;ostream&gt; : print(ln), vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/print/vprint_nonunicode.html"/>
      <id>0bd721d4509759a70a2f56a2e6f7b77f99df7eaf:reference/print/vprint_nonunicode.md</id>
      <updated>2023-01-31T14:35:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/vprint_nonunicode.md b/reference/print/vprint_nonunicode.md
index 22f5842c1..cc4d0accc 100644
--- a/reference/print/vprint_nonunicode.md
+++ b/reference/print/vprint_nonunicode.md
@@ -23,7 +23,7 @@ namespace std {
 - (1) : 標準出力に、書式指定で非Unicode出力する
 - (2) : 指定された[`FILE`](/reference/cstdio/file.md.nolink)に、書式指定で非Unicode出力する
 
-[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::vprint_nonunicode()`](/reference/ostream/vprint_nonunicode.md.nolink)関数を使用すること。
+[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::vprint_nonunicode()`](/reference/ostream/vprint_nonunicode.md)関数を使用すること。
 
 
 ## 事前条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vprint_unicode -- &lt;ostream&gt; : print(ln), vprint_(non)unicodeを追加 #1082</title>
      <link href="https://cpprefjp.github.io/reference/print/vprint_unicode.html"/>
      <id>0bd721d4509759a70a2f56a2e6f7b77f99df7eaf:reference/print/vprint_unicode.md</id>
      <updated>2023-01-31T14:35:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/vprint_unicode.md b/reference/print/vprint_unicode.md
index ed2ae9e2b..a231b83ec 100644
--- a/reference/print/vprint_unicode.md
+++ b/reference/print/vprint_unicode.md
@@ -23,7 +23,7 @@ namespace std {
 - (1) : 標準出力に、書式指定でUnicode出力する
 - (2) : 指定された[`FILE`](/reference/cstdio/file.md.nolink)に、書式指定でUnicode出力する
 
-[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::vprint_unicode()`](/reference/ostream/vprint_unicode.md.nolink)関数を使用すること。
+[`std::ostream`](/reference/ostream/basic_ostream.md)から派生したクラスオブジェクトに対して出力したい場合は、[`&amp;lt;ostream&amp;gt;`](/reference/ostream.md)ヘッダの[`std::vprint_unicode()`](/reference/ostream/vprint_unicode.md)関数を使用すること。
 
 
 ## 事前条件
@@ -44,9 +44,9 @@ namespace std {
     * string[link /reference/string/basic_string.md]
     * vformat[link /reference/format/vformat.md]
 
-    - `stream`がUnicodeを表示できる端末を参照している場合、ネイティブのUnicode APIを使用して端末に書き出す。`out`が無効なコードユニットを含んでいる場合、その動作は未定義であり、実装はそれを診断することが望まれる。
+    - `stream`がUnicodeを表示できる端末を参照している場合、ネイティブのUnicode APIを使用して端末に書き出す
     - `out`に無効なコードユニットが含まれる場合、その動作は未定義であり，実装者はそれを診断することが推奨される。それ以外の場合は、変更せずにストリームに書き出します。そうでなければ、変更せず`stream`に`out`を書き出す。
-    - ネイティブのUnicode APIを使用する場合、この関数は`out`に書き出す前にフラッシュする
+    - ネイティブのUnicode APIを使用する場合、この関数は`out`を書き出す前にフラッシュする
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- expected/expected: operator=調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_assign.html"/>
      <id>44e51113a40fd217b00231ee404f8e42649a0666:reference/expected/expected/op_assign.md</id>
      <updated>2023-01-31T14:11:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_assign.md b/reference/expected/expected/op_assign.md
index 103e901f9..0f9011829 100644
--- a/reference/expected/expected/op_assign.md
+++ b/reference/expected/expected/op_assign.md
@@ -6,18 +6,18 @@
 * cpp23[meta cpp]
 
 ```cpp
-constexpr expected&amp;amp; operator=(const expected&amp;amp;);      // (1)
+constexpr expected&amp;amp; operator=(const expected&amp;amp; rhs);    // (1)
 
-constexpr expected&amp;amp; operator=(expected&amp;amp;&amp;amp;) noexcept(see below); // (2)
+constexpr expected&amp;amp; operator=(expected&amp;amp;&amp;amp; rhs) noexcept(see below); // (2)
 
 template&amp;lt;class U = T&amp;gt;
-constexpr expected&amp;amp; operator=(U&amp;amp;&amp;amp;);                  // (3)
+constexpr expected&amp;amp; operator=(U&amp;amp;&amp;amp; v);                  // (3)
 
 template&amp;lt;class G&amp;gt;
-constexpr expected&amp;amp; operator=(const unexpected&amp;lt;G&amp;gt;&amp;amp;); // (4)
+constexpr expected&amp;amp; operator=(const unexpected&amp;lt;G&amp;gt;&amp;amp; e); // (4)
 
 template&amp;lt;class G&amp;gt;
-constexpr expected&amp;amp; operator=(unexpected&amp;lt;G&amp;gt;&amp;amp;&amp;amp;);      // (5)
+constexpr expected&amp;amp; operator=(unexpected&amp;lt;G&amp;gt;&amp;amp;&amp;amp; e);      // (5)
 ```
 * see below[italic]
 * unexpected[link ../unexpected.md]
@@ -65,7 +65,8 @@ constexpr void reinit-expected(T&amp;amp; newval, U&amp;amp; oldval, Args&amp;amp;&amp;amp;... args) {
 * destroy_at[link /reference/memory/destroy_at.md]
 * is_nothrow_constructible_v[link /reference/type_traits/is_nothrow_constructible.md]
 * is_nothrow_move_constructible_v[link /reference/type_traits/is_nothrow_move_constructible.md]
-
+* std::forward[link /reference/utility/forward.md]
+* std::move[link /reference/utility/move.md]
 
 ## テンプレートパラメータ制約
 - (2) : 下記を全て満たすこと
@@ -93,26 +94,26 @@ constexpr void reinit-expected(T&amp;amp; newval, U&amp;amp; oldval, Args&amp;amp;&amp;amp;... args) {
 
 ## 効果
 - (1) : 次の処理を行ったのち、例外が送出されなければ、`has_val = rhs.`[`has_value()`](has_value.md.nolink)`; return *this;`
-    - `this`と`rhs`が共に正常値を保持していたら、`val = *rhs`
+    - `this`と`rhs`が共に正常値を保持していたら、`val =` [`*rhs`](op_deref.md)
     - `this`が正常値を保持し、`rhs`がエラー値を保持していたら、`reinit-expected(unex, val, rhs.`[`error()`](error.md.nolink)`)`
-    - `this`がエラーを保持し、`rhs`が正常値を保持していたら、`reinit-expected(val, unex, *rhs)`
+    - `this`がエラーを保持し、`rhs`が正常値を保持していたら、`reinit-expected(val, unex,` [`*rhs`](op_deref.md)`)`
     - `this`と`rhs`が共にエラー値を保持していたら、`unex = rhs.`[`error()`](error.md.nolink)
 - (2) : 次の処理を行ったのち、例外が送出されなければ、`has_val = rhs.`[`has_value()`](has_value.md.nolink)`; return *this;`
-    - `this`と`rhs`が共に正常値を保持していたら、`val = std::move(*rhs)`
-    - `this`が正常値を保持し、`rhs`がエラー値を保持していたら、`reinit-expected(unex, val, std::move(rhs.`[`error()`](error.md.nolink)`))`
-    - `this`がエラーを保持し、`rhs`が正常値を保持していたら、`reinit-expected(val, unex, std::move(*rhs))`
-    - `this`と`rhs`が共にエラー値を保持していたら、`unex = std::move(rhs.`[`error()`](error.md.nolink)`)`
+    - `this`と`rhs`が共に正常値を保持していたら、`val =` [`std::move`](/reference/utility/move.md)`(`[`*rhs`](op_deref.md)`)`
+    - `this`が正常値を保持し、`rhs`がエラー値を保持していたら、`reinit-expected(unex, val,` [`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md.nolink)`))`
+    - `this`がエラーを保持し、`rhs`が正常値を保持していたら、`reinit-expected(val, unex,` [`std::move`](/reference/utility/move.md)`(`[`*rhs`](op_deref.md)`))`
+    - `this`と`rhs`が共にエラー値を保持していたら、`unex` [`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md.nolink)`)`
 - (3) : 次の処理と等価
-    - `this`が正常値を保持していたら、`val = std::forward&amp;lt;U&amp;gt;(v)`
-    - `this`がエラー値を保持していたら、`reinit-expected(val, unex, std::forward&amp;lt;U&amp;gt;(v)); has_val = true;`
+    - `this`が正常値を保持していたら、`val =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v)`
+    - `this`がエラー値を保持していたら、`reinit-expected(val, unex,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v)); has_val = true;`
 - (4) : 次の処理と等価
-    - `this`が正常値を保持していたら、`reinit-expected(unex, val, std::forward&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](error.md.nolink)`));
+    - `this`が正常値を保持していたら、`reinit-expected(unex, val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpectederror.md.nolink)`));
 has_val = false;`
-    - `this`がエラー値を保持していたら、`unex = std::forward&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](error.md.nolink)`);`
+    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`);`
 - (5) : 次の処理と等価
-    - `this`が正常値を保持していたら、`reinit-expected(unex, val, std::forward&amp;lt;G&amp;gt;(e.`[`error()`](error.md.nolink)`));
+    - `this`が正常値を保持していたら、`reinit-expected(unex, val,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpectederror.md.nolink)`));
 has_val = false;`
-    - `this`がエラー値を保持していたら、`unex = std::forward&amp;lt;G&amp;gt;(e.`[`error()`](error.md.nolink)`);`
+    - `this`がエラー値を保持していたら、`unex =` [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpectederror.md.nolink)`);`
 
 
 ## 戻り値
@@ -224,6 +225,7 @@ int main()
 * value[link value.md.nolink]
 * error[link error.md.nolink]
 * std::unexpected[link ../unexpected.md]
+* std::make_unique[link /reference/memory/make_unique.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected/expected: operator=調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_constructor.html"/>
      <id>44e51113a40fd217b00231ee404f8e42649a0666:reference/expected/expected/op_constructor.md</id>
      <updated>2023-01-31T14:11:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_constructor.md b/reference/expected/expected/op_constructor.md
index d5e086445..b2994975d 100644
--- a/reference/expected/expected/op_constructor.md
+++ b/reference/expected/expected/op_constructor.md
@@ -108,8 +108,8 @@ constexpr bool converts-from-any-cvref =
 - (4) : `rhs`が正常値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const U&amp;amp;&amp;gt;(`[`*rhs`](op_deref.md)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
 - (5) : `rhs`が正常値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(`[`*rhs`](op_deref.md)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
 - (6) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v)`で正常値を直接非リスト初期化する。
-- (7) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
-- (8) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (7) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (8) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(e.`[`error()`](../unexpected/error.md.nolink)`)`でエラー値を直接非リスト初期化する。
 - (9) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で正常値を直接非リスト初期化する。
 - (10) : `il,` [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`で正常値を直接非リスト初期化する。
 - (11) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args)...`でエラー値を直接非リスト初期化する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- expected/expected: コンストラクタ調整(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_constructor.html"/>
      <id>68f67f8140eab1bc2c2e1c9af564314b587c8bce:reference/expected/expected/op_constructor.md</id>
      <updated>2023-01-31T13:45:12+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_constructor.md b/reference/expected/expected/op_constructor.md
index 98779f478..d5e086445 100644
--- a/reference/expected/expected/op_constructor.md
+++ b/reference/expected/expected/op_constructor.md
@@ -6,37 +6,38 @@
 * cpp23[meta cpp]
 
 ```cpp
-constexpr expected();                               // (1)
-constexpr expected(const expected&amp;amp;);                // (2)
-constexpr expected(expected&amp;amp;&amp;amp;) noexcept(see below); // (3)
+constexpr expected();                                   // (1)
+constexpr expected(const expected&amp;amp; rhs);                // (2)
+constexpr expected(expected&amp;amp;&amp;amp; rhs) noexcept(see below); // (3)
 
 template&amp;lt;class U, class G&amp;gt;
-constexpr explicit(see below) expected(const expected&amp;lt;U, G&amp;gt;&amp;amp;); // (4)
+constexpr explicit(see below) expected(const expected&amp;lt;U, G&amp;gt;&amp;amp; rhs); // (4)
 template&amp;lt;class U, class G&amp;gt;
-constexpr explicit(see below) expected(expected&amp;lt;U, G&amp;gt;&amp;amp;&amp;amp;);      // (5)
+constexpr explicit(see below) expected(expected&amp;lt;U, G&amp;gt;&amp;amp;&amp;amp; rhs);      // (5)
 
 template&amp;lt;class U = T&amp;gt;
 constexpr explicit(see below) expected(U&amp;amp;&amp;amp; v);      // (6)
 
 template&amp;lt;class G&amp;gt;
-constexpr explicit(see below) expected(const unexpected&amp;lt;G&amp;gt;&amp;amp;); // (7)
+constexpr explicit(see below) expected(const unexpected&amp;lt;G&amp;gt;&amp;amp; e); // (7)
 template&amp;lt;class G&amp;gt;
-constexpr explicit(see below) expected(unexpected&amp;lt;G&amp;gt;&amp;amp;&amp;amp;);      // (8)
+constexpr explicit(see below) expected(unexpected&amp;lt;G&amp;gt;&amp;amp;&amp;amp; e);      // (8)
 
 template&amp;lt;class... Args&amp;gt;
-constexpr explicit expected(in_place_t, Args&amp;amp;&amp;amp;...); // (9)
+constexpr explicit expected(in_place_t, Args&amp;amp;&amp;amp;... args); // (9)
 template&amp;lt;class U, class... Args&amp;gt;
-constexpr explicit expected(in_place_t, initializer_list&amp;lt;U&amp;gt;, Args&amp;amp;&amp;amp;...); // (10)
+constexpr explicit expected(in_place_t, initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (10)
 
 template&amp;lt;class... Args&amp;gt;
-constexpr explicit expected(unexpect_t, Args&amp;amp;&amp;amp;...); // (11)
+constexpr explicit expected(unexpect_t, Args&amp;amp;&amp;amp;... args); // (11)
 template&amp;lt;class U, class... Args&amp;gt;
-constexpr explicit expected(unexpect_t, initializer_list&amp;lt;U&amp;gt;, Args&amp;amp;&amp;amp;...); // (12)
+constexpr explicit expected(unexpect_t, initializer_list&amp;lt;U&amp;gt; il, Args&amp;amp;&amp;amp;... args); // (12)
 ```
 * see below[italic]
 * unexpected[link ../unexpected.md]
 * unexpect_t[link ../unexpect_t.md]
 * in_place_t[link /reference/utility/in_place_t.md]
+* initializer_list[link /reference/initializer_list/initializer_list.md]
 
 ## 概要
 - (1) : 正常値型`T`を値初期化して保持する。
@@ -47,10 +48,10 @@ constexpr explicit expected(unexpect_t, initializer_list&amp;lt;U&amp;gt;, Args&amp;amp;&amp;amp;...); // (12)
 - (6) : 正常値型`T`に変換可能な型`U`の値を正常値として受け取り、コピーまたはムーブして保持する。
 - (7) : 変換可能な[`unexpected`](../unexpected.md)オブジェクトかエラー値をコピー構築する。
 - (8) : 変換可能な[`unexpected`](../unexpected.md)オブジェクトからエラー値をムーブ構築する。
-- (9) : 正常値型`T`のコンストラクタ引数として任意個の引数を受け取って、コンストラクタ内で型`T`のオブジェクトを有効値として生成し、保持する。
-- (10) : 正常値型`T`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、コンストラクタ内で型`T`のオブジェクトを有効値として生成し、保持する。
-- (11) : エラー値型`E`のコンストラクタ引数として任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトを有効値として生成し、保持する。
-- (12) : エラー値型`E`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトを有効値として生成し、保持する。
+- (9) : 正常値型`T`のコンストラクタ引数として任意個の引数を受け取って、コンストラクタ内で型`T`のオブジェクトを正常値として生成し、保持する。
+- (10) : 正常値型`T`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、コンストラクタ内で型`T`のオブジェクトを正常値として生成し、保持する。
+- (11) : エラー値型`E`のコンストラクタ引数として任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトを正常値として生成し、保持する。
+- (12) : エラー値型`E`のコンストラクタ引数として初期化子リストと任意個の引数を受け取って、コンストラクタ内で型`E`のオブジェクトを正常値として生成し、保持する。
 
 
 説明用のテンプレート変数`converts-from-any-cvref`を次の通り定義する。
@@ -70,7 +71,7 @@ constexpr bool converts-from-any-cvref =
 
 ## テンプレートパラメータ制約
 - (1) : [`is_default_constructible_v`](/reference/type_traits/is_default_constructible.md)`&amp;lt;T&amp;gt; == true`
-- (3) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; == true`[`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
+- (3) : [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;T&amp;gt; == true &amp;amp;&amp;amp;` [`is_move_constructible_v`](/reference/type_traits/is_move_constructible.md)`&amp;lt;E&amp;gt; == true`
 - (4) : 次の制約を全て満たすこと
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, const U&amp;amp;&amp;gt; == true`
     - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, const G&amp;amp;&amp;gt; == true`
@@ -95,17 +96,17 @@ constexpr bool converts-from-any-cvref =
 - (7) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, const G&amp;amp;&amp;gt; == true`
 - (8) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, G&amp;gt; == true`
 - (9) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, Args...&amp;gt; == true`
-- (10) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, initializer_list&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
+- (10) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;T, `[`initializer_list`](/reference/initializer_list/initializer_list.md)`&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
 - (11) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, Args...&amp;gt; == true`
-- (12) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, initializer_list&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
+- (12) : [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;E, `[`initializer_list`](/reference/initializer_list/initializer_list.md)`&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt; == true`
 
 
 ## 効果
 - (1) : 正常値を値初期化して保持する。
-- (2) : `rhs`が正常値を保持していれば、[`*rhs`](op_deref.md.nolink)で正常値を直接非リスト初期化する。そうでなければ、`rhs.`[`error()`](error.md.nolink)でエラー値を直接非リスト初期化する。
-- (3) : `rhs`が正常値を保持していれば、[`std::move`](/reference/utility/move.md)`(`[`*rhs`](op_deref.md.nolink)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
-- (4) : `rhs`が正常値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const U&amp;amp;&amp;gt;(`[`*rhs`](op_deref.md.nolink)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
-- (5) : `rhs`が正常値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(`[`*rhs`](op_deref.md.nolink)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (2) : `rhs`が正常値を保持していれば、[`*rhs`](op_deref.md)で正常値を直接非リスト初期化する。そうでなければ、`rhs.`[`error()`](error.md.nolink)でエラー値を直接非リスト初期化する。
+- (3) : `rhs`が正常値を保持していれば、[`std::move`](/reference/utility/move.md)`(`[`*rhs`](op_deref.md)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::move`](/reference/utility/move.md)`(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (4) : `rhs`が正常値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const U&amp;amp;&amp;gt;(`[`*rhs`](op_deref.md)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
+- (5) : `rhs`が正常値を保持していれば、[`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(`[`*rhs`](op_deref.md)`)`で正常値を直接非リスト初期化する。そうでなければ、[`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
 - (6) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;U&amp;gt;(v)`で正常値を直接非リスト初期化する。
 - (7) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;const G&amp;amp;&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
 - (8) : [`std::forward`](/reference/utility/forward.md)`&amp;lt;G&amp;gt;(rhs.`[`error()`](error.md.nolink)`)`でエラー値を直接非リスト初期化する。
@@ -116,13 +117,13 @@ constexpr bool converts-from-any-cvref =
 
 
 ## 事後条件
-- (1) : 有効値を保持している。
-- (2) : `rhs`が有効値を保持する場合は`*this`も有効値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。
-- (3) : `rhs`が有効値を保持する場合は`*this`も有効値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。`rhs.`[`has_value()`](has_value.md.nolink)は変化しない。
-- (4), (5) : `rhs`が有効値を保持する場合は`*this`も有効値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。`rhs.`[`has_value()`](has_value.md.nolink)は変化しない。
-- (6) : 有効値を保持している。
+- (1) : 正常値を保持している。
+- (2) : `rhs`が正常値を保持する場合は`*this`も正常値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。
+- (3) : `rhs`が正常値を保持する場合は`*this`も正常値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。`rhs.`[`has_value()`](has_value.md.nolink)は変化しない。
+- (4), (5) : `rhs`が正常値を保持する場合は`*this`も正常値を保持し、`rhs`がエラー値を保持する場合は`*this`もエラー値を保持する。`rhs.`[`has_value()`](has_value.md.nolink)は変化しない。
+- (6) : 正常値を保持している。
 - (7), (8) : エラー値を保持している。
-- (9), (10) : 有効値を保持している。
+- (9), (10) : 正常値を保持している。
 - (11), (12) : エラー値を保持している。
 
 
@@ -173,7 +174,7 @@ using IntTuple = std::tuple&amp;lt;int, int&amp;gt;;
 using UniquePtr = std::unique_ptr&amp;lt;int&amp;gt;;
 using SharedPtr = std::shared_ptr&amp;lt;int&amp;gt;;
 
-// 引数リスト または initializer_list＋引数リスト から構築可能な型
+// 引数リスト または 初期化子リスト＋引数リスト から構築可能な型
 struct ComplexType {
   std::string data;
   std::vector&amp;lt;int&amp;gt; seq;
@@ -297,6 +298,9 @@ int main()
 * value[link value.md.nolink]
 * error[link error.md.nolink]
 * std::unexpected[link ../unexpected.md]
+* std::unexpect[link ../unexpect_t.md]
+* std::in_place[link /reference/utility/in_place_t.md]
+* std::make_unique[link /reference/memory/make_unique.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>expected -- expected/expected: operator-&gt;,operator*(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected.html"/>
      <id>05643dc9ac4efe0b623696764045ced26d6010b0:reference/expected/expected.md</id>
      <updated>2023-01-31T13:44:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected.md b/reference/expected/expected.md
index d2177e5fa..990f3020f 100644
--- a/reference/expected/expected.md
+++ b/reference/expected/expected.md
@@ -47,8 +47,8 @@ namespace std {
 
 | 名前            | 説明           | 対応バージョン |
 |-----------------|----------------|-------|
-| [`operator-&amp;gt;`](expected/op_arrow.md.nolink) | メンバアクセス | C++23 |
-| [`operator*`](expected/op_deref.md.nolink) | 間接参照 | C++23 |
+| [`operator-&amp;gt;`](expected/op_arrow.md) | 正常値へのメンバアクセス | C++23 |
+| [`operator*`](expected/op_deref.md) | 正常値への間接参照 | C++23 |
 | [`operator bool`](expected/op_bool.md.nolink) | 正常値を保持しているかを判定する | C++23 |
 | [`has_value`](expected/has_value.md.nolink) | 正常値を保持しているかを判定する | C++23 |
 | [`value`](expected/value.md.nolink) | 正常値を取得する | C++23 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-&gt; -- expected/expected: operator-&gt;,operator*(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_arrow.html"/>
      <id>05643dc9ac4efe0b623696764045ced26d6010b0:reference/expected/expected/op_arrow.md</id>
      <updated>2023-01-31T13:44:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_arrow.md b/reference/expected/expected/op_arrow.md
new file mode 100644
index 000000000..8ee18c8a0
--- /dev/null
+++ b/reference/expected/expected/op_arrow.md
@@ -0,0 +1,71 @@
+# operator-&amp;gt;
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr const T* operator-&amp;gt;() const noexcept;  // (1)
+constexpr T* operator-&amp;gt;() noexcept;              // (2)
+```
+
+## 概要
+保持している正常値のメンバにアクセスする。
+
+
+## 事前条件
+[`has_value()`](has_value.md.nolink) `== true`
+
+
+## 戻り値
+正常値へのポインタ。
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;std::string, int&amp;gt; x = &amp;#34;Hello&amp;#34;;
+  std::cout &amp;lt;&amp;lt; x-&amp;gt;size() &amp;lt;&amp;lt; std::endl;
+
+  std::expected&amp;lt;std::string, int&amp;gt; y = std::unexpected{42};
+//std::cout &amp;lt;&amp;lt; y-&amp;gt;size() &amp;lt;&amp;lt; std::endl;
+  // エラー値を保持する y に対する operator-&amp;gt; 呼び出しは未定義動作
+}
+```
+* x-&amp;gt;[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+5
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`operator*`](op_deref.md)
+- [`value`](value.md.nolink)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* -- expected/expected: operator-&gt;,operator*(#1066)</title>
      <link href="https://cpprefjp.github.io/reference/expected/expected/op_deref.html"/>
      <id>05643dc9ac4efe0b623696764045ced26d6010b0:reference/expected/expected/op_deref.md</id>
      <updated>2023-01-31T13:44:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/expected/expected/op_deref.md b/reference/expected/expected/op_deref.md
new file mode 100644
index 000000000..bbe444512
--- /dev/null
+++ b/reference/expected/expected/op_deref.md
@@ -0,0 +1,76 @@
+# operator*
+* expected[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* expected[meta class]
+* cpp23[meta cpp]
+
+```cpp
+constexpr const T&amp;amp; operator*() const &amp;amp; noexcept;   // (1)
+constexpr T&amp;amp; operator*() &amp;amp; noexcept;               // (2)
+constexpr T&amp;amp;&amp;amp; operator*() &amp;amp;&amp;amp; noexcept;             // (3)
+constexpr const T&amp;amp;&amp;amp; operator*() const &amp;amp;&amp;amp; noexcept; // (4)
+```
+
+## 概要
+正常値を取得する。
+
+
+## 事前条件
+[`has_value()`](has_value.md.nolink) `== true`
+
+
+## 戻り値
+動作説明用のメンバ変数として、正常値を保持する`val`を導入する。
+
+- (1), (2) : `val`
+- (3), (4) : [`std::move`](/reference/utility/move.md)`(val)`
+
+
+## 例外
+投げない
+
+
+## 例
+```cpp example
+#include &amp;lt;expected&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main()
+{
+  std::expected&amp;lt;int, std::string&amp;gt; x = 1;
+  std::cout &amp;lt;&amp;lt; *x &amp;lt;&amp;lt; std::endl;
+
+  std::expected&amp;lt;int, std::string&amp;gt; y = std::unexpected{&amp;#34;ERR&amp;#34;};
+//std::cout &amp;lt;&amp;lt; *y &amp;lt;&amp;lt; std::endl;
+  // エラー値を保持する y に対する operator* 呼び出しは未定義動作
+}
+```
+* *x[color ff0000]
+* std::unexpected[link ../unexpected.md]
+
+### 出力
+```
+1
+```
+
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): 16.0
+- [GCC](/implementation.md#gcc): 12.1
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`operator-&amp;gt;`](op_arrow.md)
+- [`value`](value.md.nolink)
+
+
+## 参照
+- [P0323R12 std::expected](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p0323r12.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>print -- print : コードの言語指定を追加</title>
      <link href="https://cpprefjp.github.io/reference/print/print.html"/>
      <id>e388ca69c6b456116a9cda79e221a8df66454bd2:reference/print/print.md</id>
      <updated>2023-01-30T22:39:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/print/print.md b/reference/print/print.md
index dfa7d6707..035692dca 100644
--- a/reference/print/print.md
+++ b/reference/print/print.md
@@ -65,7 +65,7 @@ namespace std {
 - LinuxやmacOSといった環境では、通常の`char`配列の文字列リテラルはUTF-8にエンコーディングされる
 - WindowsのVisual Studioにおいては、ソースコードと実行時文字集合をUTF-8にする[`/utf-8`オプション](https://learn.microsoft.com/en-us/cpp/build/reference/utf-8-set-source-and-executable-character-sets-to-utf-8?view=msvc-170)を使用することで、通常の`char`配列の文字列リテラルがUTF-8にエンコーディングされる
 - 「通常の文字列リテラルがUTF-8エンコーディングされている場合」という仕様は、コードでは以下のように表現できる：
-    ```
+    ```cpp
     constexpr bool is_utf8() {
       const unsigned char micro[] = &amp;#34;\u00B5&amp;#34;;
       return sizeof(micro) == 3 &amp;amp;&amp;amp; micro[0] == 0xC2 &amp;amp;&amp;amp; micro[1] == 0xB5;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-08-29T13:34:38.516810</updated>
  <id>6a03618e-f865-408a-bc2a-e1baa9606250</id>

  
    <entry>
      <title>operator== -- namespaceを修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_equal.html"/>
      <id>075f072caad0fa47ff97c3cc1b7d666a0ccc7b9e:reference/ranges/filter_view/iterator/op_equal.md</id>
      <updated>2024-08-29T22:31:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_equal.md b/reference/ranges/filter_view/iterator/op_equal.md
index 25fbc4194..c5bc09221 100644
--- a/reference/ranges/filter_view/iterator/op_equal.md
+++ b/reference/ranges/filter_view/iterator/op_equal.md
@@ -1,6 +1,6 @@
 # operator==
 * ranges[meta header]
-* std[meta namespace]
+* std::ranges[meta namespace]
 * filter_view::iterator[meta class]
 * function[meta id-type]
 * cpp20[meta cpp]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- namespaceを修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/sentinel/op_equal.html"/>
      <id>075f072caad0fa47ff97c3cc1b7d666a0ccc7b9e:reference/ranges/filter_view/sentinel/op_equal.md</id>
      <updated>2024-08-29T22:31:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/sentinel/op_equal.md b/reference/ranges/filter_view/sentinel/op_equal.md
index f62b87ca4..0176ae638 100644
--- a/reference/ranges/filter_view/sentinel/op_equal.md
+++ b/reference/ranges/filter_view/sentinel/op_equal.md
@@ -1,6 +1,6 @@
 # operator==
 * ranges[meta header]
-* std[meta namespace]
+* std::ranges[meta namespace]
 * filter_view::sentinel[meta class]
 * function[meta id-type]
 * cpp20[meta cpp]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- meta headerを修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_equal.html"/>
      <id>04b953e1545eb4bc7bf063b5791986edddb9dcb9:reference/ranges/filter_view/iterator/op_equal.md</id>
      <updated>2024-08-29T22:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_equal.md b/reference/ranges/filter_view/iterator/op_equal.md
index 4aceb4181..25fbc4194 100644
--- a/reference/ranges/filter_view/iterator/op_equal.md
+++ b/reference/ranges/filter_view/iterator/op_equal.md
@@ -1,5 +1,5 @@
 # operator==
-* iterator[meta header]
+* ranges[meta header]
 * std[meta namespace]
 * filter_view::iterator[meta class]
 * function[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- meta headerを修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/sentinel/op_equal.html"/>
      <id>04b953e1545eb4bc7bf063b5791986edddb9dcb9:reference/ranges/filter_view/sentinel/op_equal.md</id>
      <updated>2024-08-29T22:16:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/sentinel/op_equal.md b/reference/ranges/filter_view/sentinel/op_equal.md
index a5f8ce27f..f62b87ca4 100644
--- a/reference/ranges/filter_view/sentinel/op_equal.md
+++ b/reference/ranges/filter_view/sentinel/op_equal.md
@@ -1,5 +1,5 @@
 # operator==
-* sentinel[meta header]
+* ranges[meta header]
 * std[meta namespace]
 * filter_view::sentinel[meta class]
 * function[meta id-type]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- 禁止文字を削除</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/begin.html"/>
      <id>256375f89df7bc449ad8b8750c2ae1aeded803dc:reference/ranges/filter_view/begin.md</id>
      <updated>2024-08-29T22:14:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/begin.md b/reference/ranges/filter_view/begin.md
index b632457e5..37761a1b9 100644
--- a/reference/ranges/filter_view/begin.md
+++ b/reference/ranges/filter_view/begin.md
@@ -20,7 +20,7 @@ constexpr iterator begin();
 
 ## 戻り値
 
-`{*this, `[`ranges​::​find_if`](/reference/algorithm/ranges_find_if.md)`(base_, `[`ref`](/reference/functional/ref.md)`(*pred_))}`
+`{*this, `[`ranges::find_if`](/reference/algorithm/ranges_find_if.md)`(base_, `[`ref`](/reference/functional/ref.md)`(*pred_))}`
 
 [`range`](../range.md)のモデルとなるためにはこの関数が償却定数時間で実行できなければならないため、値はキャッシュされる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>filter_view -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view.md b/reference/ranges/filter_view.md
index ff09dcee7..f89fc8ae7 100644
--- a/reference/ranges/filter_view.md
+++ b/reference/ranges/filter_view.md
@@ -15,12 +15,6 @@ namespace std::ranges {
   }
 }
 ```
-* input_range[link input_range.md]
-* indirect_unary_predicate[link /reference/iterator/indirect_unary_predicate.md]
-* iterator_t[link iterator_t.md]
-* view[link view.md]
-* is_object_v[link /reference/type_traits/is_object.md]
-* view_interface[link view_interface.md]
 
 ## 概要
 - (1): 指定された条件`Pred`を満たす要素だけが要素となる[`view`](view.md)
@@ -28,8 +22,9 @@ namespace std::ranges {
 
 元のRangeから条件を満たす要素を探す処理は遅延評価される。
 
-- 初めてメンバ関数[`begin`](filter_view/begin.md.nolink)が呼び出されたときに先頭の要素を決定し、残りはイテレータが進むときに求める。
-- [`begin`](filter_view/begin.md.nolink)は償却定数時間で実行できなければならないため、[`begin`](filter_view/begin.md.nolink)の値はキャッシュされる。
+- 初めてメンバ関数[`begin`](filter_view/begin.md)が呼び出されたときに先頭の要素を決定し、残りはイテレータが進むときに求める。
+    - 探索は [`ranges::find_if`](/reference/algorithm/ranges_find_if.md) と同様に行われる。
+- [`begin`](filter_view/begin.md)は償却定数時間で実行できなければならないため、[`begin`](filter_view/begin.md)の値はキャッシュされる。
 
 `filter_view`の要素を書き換えてもよいが、書き換えた後の要素が`Pred`を満たさない場合は未定義動作となる。
 
@@ -53,33 +48,48 @@ namespace std::ranges {
 
 ## 効果
 
-- (2): 式`views::filter(E, P)`の効果は`filter_view(E, P)`と等しい
+- (2): 式`views::filter(E, P)`の効果は[`filter_view`](filter_view/op_constructor.md)`(E, P)`と等しい
+
+## メンバ変数
+
+| 名前                                            | 説明                               | 対応バージョン        |
+|-------------------------------------------------|------------------------------------|-----------------------|
+| `V base_ = V()`                                 | 元の[`view`](view.md) (説明専用)   | C++20                 |
+| [`copyable-box`](copyable_box.md)`&amp;lt;Pred&amp;gt; pred_` | 述語 (説明専用)                    | C++20&amp;lt;br/&amp;gt;C++23で削除 |
+| [`movable-box`](movable_box.md)`&amp;lt;Pred&amp;gt; pred_`   | 述語 (説明専用)                    | C++23                 |
 
 ## メンバ関数
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](filter_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](filter_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`pred`](filter_view/pred.md.nolink)                     | 述語を取得する                   | C++20          |
-| [`begin`](filter_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](filter_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](filter_view/op_constructor.md) | コンストラクタ                   | C++20          |
+| [`base`](filter_view/base.md)                    | `V`の参照を取得する              | C++20          |
+| [`pred`](filter_view/pred.md)                    | 述語を取得する                   | C++20          |
+| [`begin`](filter_view/begin.md)                  | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](filter_view/end.md)                      | 番兵を取得する                   | C++20          |
 
 ## 継承しているメンバ関数
 
-| 名前                                         | 説明                             | 対応バージョン |
-|----------------------------------------------|----------------------------------|----------------|
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
 | [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する       | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する       | C++20          |
-| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する             | C++23          |
-| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する      | C++23          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
+
+## メンバ型
+
+| 名前                                      | 説明                         | 対応バージョン |
+|-------------------------------------------|------------------------------|----------------|
+| [`iterator`](filter_view/iterator.md)     | イテレータ型(説明専用)       | C++20          |
+| [`sentinel`](filter_view/sentinel.md)     | 番兵型(説明専用)             | C++20          |
 
 ## 推論補助
 
-| 名前                                                  | 説明                         | 対応バージョン |
-|-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](filter_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| 名前                                                     | 説明                         | 対応バージョン |
+|----------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](filter_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
@@ -119,6 +129,6 @@ int main() {
 - [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
 
 ## 参照
-- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
 - [C++20 ranges](https://techbookfest.org/product/5134506308665344)
 - [P2367R0 Remove misuses of list-initialization from Clause 24](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2367r0.html) (本提案文書はC++20に遡って適用されている)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/base.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/base.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/base.md b/reference/ranges/filter_view/base.md
new file mode 100644
index 000000000..d9f3dac03
--- /dev/null
+++ b/reference/ranges/filter_view/base.md
@@ -0,0 +1,70 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp; requires copy_constructible&amp;lt;V&amp;gt;;  // (1)
+constexpr V base() &amp;amp;&amp;amp;;                                      // (2)
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等しい
+- (2) : `return std::move(base_);` と等しい
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::filter_view fv{vec, [](int i) { return i % 2 == 0; }};
+
+  // (1) コピーして取得
+  view auto b1 = fv.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(fv).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+* filter_view[link ../filter_view.md]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/begin.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/begin.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/begin.md b/reference/ranges/filter_view/begin.md
new file mode 100644
index 000000000..b632457e5
--- /dev/null
+++ b/reference/ranges/filter_view/begin.md
@@ -0,0 +1,65 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator begin();
+```
+* iterator[link iterator.md]
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 事前条件
+
+`pred_.`[`has_value`](/reference/optional/optional/has_value.md)`()`が`true`であること。
+
+## 戻り値
+
+`{*this, `[`ranges​::​find_if`](/reference/algorithm/ranges_find_if.md)`(base_, `[`ref`](/reference/functional/ref.md)`(*pred_))}`
+
+[`range`](../range.md)のモデルとなるためにはこの関数が償却定数時間で実行できなければならないため、値はキャッシュされる。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::filter_view fv{vec, [](int i) { return i % 2 == 0; }};
+
+  auto it = fv.begin();
+
+  std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+* filter_view[link ../filter_view.md]
+
+### 出力
+
+```
+2
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/end.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/end.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/end.md b/reference/ranges/filter_view/end.md
new file mode 100644
index 000000000..bbb68419e
--- /dev/null
+++ b/reference/ranges/filter_view/end.md
@@ -0,0 +1,64 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* function[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+constexpr auto end() {
+  if constexpr (common_range&amp;lt;V&amp;gt;)
+    return iterator{*this, ranges::end(base_)};
+  else
+    return sentinel{*this};
+}
+```
+* ranges::end[link ../end.md]
+* iterator[link iterator.md]
+* sentinel[link sentinel.md]
+
+## 概要
+
+番兵を取得する。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::filter_view fv{vec, [](int i) { return i % 2 == 0; }};
+
+  auto e = fv.end();
+
+  --e;
+
+  std::cout &amp;lt;&amp;lt; *e &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* end[color ff0000]
+* filter_view[link ../filter_view.md]
+
+### 出力
+
+```
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>iterator -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator.md b/reference/ranges/filter_view/iterator.md
new file mode 100644
index 000000000..80f79e151
--- /dev/null
+++ b/reference/ranges/filter_view/iterator.md
@@ -0,0 +1,80 @@
+# iterator
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_range V, indirect_unary_predicate&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; Pred&amp;gt;
+    requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt;
+  class filter_view&amp;lt;V, Pred&amp;gt;::iterator { …… };
+}
+```
+* filter_view[link ../filter_view.md]
+
+## 概要
+
+[`filter_view`](../filter_view.md)のイテレータ。
+
+このクラスの名前は規定されておらず、振る舞いのみが規定されている。
+
+このクラスの型を取得したい場合、[`iterator_t`](../iterator_t.md)を使用できる。
+
+このイテレータを通じて値を書き換える場合、その結果が述語の条件を満たさない場合は未定義動作となる。
+
+## メンバ変数
+
+| 名前                                                               | 説明                       | 対応バージョン |
+|--------------------------------------------------------------------|----------------------------|----------------|
+| [`iterator_t`](../iterator_t.md)`&amp;lt;V&amp;gt; current_ = iterator_t&amp;lt;V&amp;gt;();`  | 元のイテレータ(説明専用)   | C++20          |
+| [`filter_view`](../filter_view.md)`* parent_ = nullptr;`           | 参照先のRange(説明専用)    | C++20          |
+
+## メンバ関数
+
+| 名前                                           | 説明                           | 対応バージョン |
+|------------------------------------------------|--------------------------------|----------------|
+| [`(constructor)`](iterator/op_constructor.md)  | コンストラクタ                 | C++20          |
+| [`base`](iterator/base.md)                     | 元のイテレータを取得する       | C++20          |
+| [`operator*`](iterator/op_deref.md)            | 間接参照演算子                 | C++20          |
+| [`operator-&amp;gt;`](iterator/op_arrow.md)           | メンバアクセス演算子           | C++20          |
+| [`operator++`](iterator/op_increment.md)       | イテレータをインクリメントする | C++20          |
+| [`operator--`](iterator/op_decrement.md)       | イテレータをデクリメントする   | C++20          |
+
+## メンバ型
+
+| 名前                                                 | 説明                                                     | 対応バージョン |
+|------------------------------------------------------|----------------------------------------------------------|----------------|
+| [`iterator_concept`](iterator/iterator_concept.md.nolink)   | イテレータコンセプト                                     | C++20          |
+| [`iterator_category`](iterator/iterator_category.md.nolink) | イテレータカテゴリ                                       | C++20          |
+| `value_type`                                         | [`range_value_t&amp;lt;V&amp;gt;`](../range_value_t.md)                | C++20          |
+| `difference_type`                                    | [`range_difference_t&amp;lt;V&amp;gt;`](../range_difference_t.md)      | C++20          |
+
+## 非メンバ（*Hidden friends*）関数
+
+| 名前                                     | 説明                   | 対応バージョン |
+|------------------------------------------|------------------------|----------------|
+| [`iter_move`](iterator/iter_move.md.nolink)     | イテレータの要素の移動 | C++20          |
+| [`iter_swap`](iterator/iter_swap.md.nolink)     | イテレータの要素の交換 | C++20          |
+
+### 比較演算子
+
+| 名前                                 | 説明                            | 対応バージョン |
+|--------------------------------------|---------------------------------|----------------|
+| [`operator==`](iterator/op_equal.md) | 等値比較                        | C++20          |
+| `operator!=`                         | 非等値比較 (`==`により使用可能) | C++20          |
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/base.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/base.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/base.md b/reference/ranges/filter_view/iterator/base.md
new file mode 100644
index 000000000..1843f5f45
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/base.md
@@ -0,0 +1,68 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr const iterator_t&amp;lt;V&amp;gt; base() const &amp;amp; noexcept;  // (1)
+constexpr iterator_t&amp;lt;V&amp;gt; base() &amp;amp;&amp;amp;;                      // (2)
+```
+
+## 概要
+
+元の`view`のイテレータを取得する。
+
+## 効果
+
+入力`view`（`V`）のイテレータを`current_`というメンバに保持するとして
+
+- (1) : `return current_;` と等しい
+- (2) : `return std::move(current_);` と等しい
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::filter_view fv{vec, [](int i) { return i % 2 == 0; }};
+  auto itr = fv.begin();
+
+  // (1) コピーして取得
+  auto b1 = itr.base();
+
+  // (2) ムーブして取得
+  auto b2 = std::move(itr).base();
+
+  static_assert(std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;);
+  static_assert(std::same_as&amp;lt;decltype(b2), std::vector&amp;lt;int&amp;gt;::iterator&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-&gt; -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_arrow.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_arrow.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_arrow.md b/reference/ranges/filter_view/iterator/op_arrow.md
new file mode 100644
index 000000000..9fce302f7
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_arrow.md
@@ -0,0 +1,37 @@
+# operator-&amp;gt;
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator_t&amp;lt;V&amp;gt; operator-&amp;gt;() const requires has-arrow&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; &amp;amp;&amp;amp; copyable&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt;;
+```
+* copyable[link /reference/concepts/copyable.md]
+
+## 概要
+
+イテレータを通じてオブジェクトにアクセスする。
+
+## テンプレートパラメータ制約
+
+元のイテレータがコピー可能であり、アロー演算子を持つこと。
+
+## 効果
+
+`return current_;` と等しい
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_constructor.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_constructor.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_constructor.md b/reference/ranges/filter_view/iterator/op_constructor.md
new file mode 100644
index 000000000..1a84cc040
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_constructor.md
@@ -0,0 +1,66 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+iterator() requires default_initializable&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt; = default;    // (1)
+
+constexpr iterator(filter_view&amp;amp; parent, iterator_t&amp;lt;V&amp;gt; current);        // (2)
+```
+
+## 概要
+
+[`filter_view::iterator`](../iterator.md)オブジェクトを構築する。
+
+## 効果
+
+- (1) : `current_`、`parent_`をデフォルト構築する
+- (2) : `current_`を`std::move(current_)`で、`parent_`を[`addressof`](/reference/memory/addressof.md)`(parent_)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using std::ranges::filter_view;
+  using std::ranges::iterator_t;
+
+  std::vector&amp;lt;int&amp;gt; vec = {0, 1, 2, 3, 4, 5};
+
+  filter_view fv{vec, [](int x){ return x % 2 == 0; }};
+
+  iterator_t&amp;lt;filter_view&amp;gt; i(fv, vec.begin());
+
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+}
+```
+* iterator_t&amp;lt;filter_view&amp;gt;[color ff0000]
+
+### 出力
+```
+0
+2
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator-- -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_decrement.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_decrement.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_decrement.md b/reference/ranges/filter_view/iterator/op_decrement.md
new file mode 100644
index 000000000..c7405e6c7
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_decrement.md
@@ -0,0 +1,81 @@
+# operator--
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator&amp;amp; operator++() requires bidirectional_range&amp;lt;V&amp;gt;;      // (1)
+constexpr iterator operator--(int) requires bidirectional_range&amp;lt;V&amp;gt;;    // (2)
+```
+
+## 概要
+
+イテレータを1つ進める。
+
+## 効果
+
+(1)は、
+
+```cpp
+do
+  --current_;
+while (!invoke(*parent_-&amp;gt;pred_, *current_));
+return *this;
+```
+- invoke[link /reference/functional/invoke.md]
+
+と等しい。
+
+(3)は、
+```cpp
+auto tmp = *this;
+--*this;
+return tmp;
+```
+と等しい。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using std::ranges::filter_view;
+  using std::ranges::iterator_t;
+
+  std::vector&amp;lt;int&amp;gt; vec = {0, 1, 2, 3, 4, 5};
+
+  filter_view fv{vec, [](int x){ return x % 2 == 0; }};
+
+  iterator_t&amp;lt;filter_view&amp;gt; i(fv, vec.begin());
+
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i--;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i--;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+}
+```
+
+### 出力
+```
+0
+2
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator* -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_deref.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_deref.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_deref.md b/reference/ranges/filter_view/iterator/op_deref.md
new file mode 100644
index 000000000..22bf342e6
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_deref.md
@@ -0,0 +1,62 @@
+# operator*
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr range_reference_t&amp;lt;V&amp;gt; operator*() const;
+```
+
+## 概要
+
+イテレータを間接参照する。
+
+## 効果
+
+`return *current_;` と等しい
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using std::ranges::filter_view;
+  using std::ranges::iterator_t;
+
+  std::vector&amp;lt;int&amp;gt; vec = {0, 1, 2, 3, 4, 5};
+
+  filter_view fv{vec, [](int x){ return x % 2 == 0; }};
+
+  iterator_t&amp;lt;filter_view&amp;gt; i(fv, vec.begin());
+
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+}
+```
+
+### 出力
+```
+0
+2
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_equal.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_equal.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_equal.md b/reference/ranges/filter_view/iterator/op_equal.md
new file mode 100644
index 000000000..4aceb4181
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_equal.md
@@ -0,0 +1,48 @@
+# operator==
+* iterator[meta header]
+* std[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+friend constexpr bool operator==(const iterator&amp;amp; x, const iterator&amp;amp; y) requires equality_comparable&amp;lt;iterator_t&amp;lt;V&amp;gt;&amp;gt;;
+```
+* iterator[link ../iterator.md]
+
+## 概要
+
+自身と別のイテレータが同じ要素を指しているかを判定する。
+
+## 効果
+
+ラップしているイテレータを`current_`メンバ変数に保持するとして、以下と等価
+
+```cpp
+return x.current_ == y.current_;
+```
+
+## 戻り値
+
+元のビューの2つのイテレータが等しい場合に`true`を返す。
+
+## 備考
+
+- この演算子により `!=` 演算子が使用可能になる。
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator++ -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/iterator/op_increment.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/iterator/op_increment.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/iterator/op_increment.md b/reference/ranges/filter_view/iterator/op_increment.md
new file mode 100644
index 000000000..c217c2883
--- /dev/null
+++ b/reference/ranges/filter_view/iterator/op_increment.md
@@ -0,0 +1,87 @@
+# operator++
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::iterator[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr iterator&amp;amp; operator++();                             // (1)
+constexpr void operator++(int);                               // (2)
+constexpr iterator operator++(int) requires forward_range&amp;lt;V&amp;gt;; // (3)
+```
+
+## 概要
+
+イテレータを1つ進める。
+
+## 効果
+
+(1)は、
+
+```cpp
+current_ = ranges::find_if(
+  std::move(++current_),
+  ranges::end(parent_-&amp;gt;base_),
+  ref(*parent_-&amp;gt;pred_));
+return *this;
+```
+- ranges::find_if[link /reference/algorithm/ranges_find_if.md]
+- ranges::end[link /reference/ranges/end.md]
+- ref[link /reference/functional/ref.md]
+
+と等しい。
+
+(2)は、`++*this` と等しい。
+
+(3)は、
+```cpp
+auto tmp = *this;
+++*this;
+return tmp;
+```
+と等しい。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using std::ranges::filter_view;
+  using std::ranges::iterator_t;
+
+  std::vector&amp;lt;int&amp;gt; vec = {0, 1, 2, 3, 4, 5};
+
+  filter_view fv{vec, [](int x){ return x % 2 == 0; }};
+
+  iterator_t&amp;lt;filter_view&amp;gt; i(fv, vec.begin());
+
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+  i++;
+  std::cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; `\n`;
+}
+```
+
+### 出力
+```
+0
+2
+4
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/op_constructor.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/op_constructor.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/op_constructor.md b/reference/ranges/filter_view/op_constructor.md
new file mode 100644
index 000000000..f3c4002a5
--- /dev/null
+++ b/reference/ranges/filter_view/op_constructor.md
@@ -0,0 +1,58 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+filter_view() requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp; default_initializable&amp;lt;Pred&amp;gt; = default;    // (1)
+
+constexpr explicit filter_view(V base, Pred pred);                                           // (2)
+```
+
+## 概要
+
+[`filter_view`](../filter_view.md)オブジェクトを構築する。
+
+## 効果
+
+- (1) : `base_`、`pred_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`pred_`を`std::move(pred)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  using std::ranges::filter_view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  // (1) デフォルト構築
+  filter_view&amp;lt;std::views::all_t&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, bool(*)(int)&amp;gt; v1{};
+  
+  // (2) viewを入力して構築
+  filter_view v2{vec, [](int x){ return x % 2 == 0; }};
+}
+```
+* filter_view[color ff0000]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/op_deduction_guide.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/op_deduction_guide.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/op_deduction_guide.md b/reference/ranges/filter_view/op_deduction_guide.md
new file mode 100644
index 000000000..2c8de43f0
--- /dev/null
+++ b/reference/ranges/filter_view/op_deduction_guide.md
@@ -0,0 +1,67 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class Pred&amp;gt;
+  filter_view(R&amp;amp;&amp;amp;, Pred) -&amp;gt; filter_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, Pred&amp;gt;;
+}
+```
+* filter_view[link ../filter_view.md]
+
+## 概要
+
+[`filter_view`](../filter_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、元のRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4};
+
+  auto pred = [](int i) { return i % 2 == 0; };
+
+  std::ranges::filter_view v1{vec, pred};
+  
+  static_assert(std::same_as&amp;lt;
+    decltype(v1),
+    std::ranges::filter_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+
+  std::ranges::filter_view v2{std::vector&amp;lt;int&amp;gt;{1, 2}, pred};
+  
+  static_assert(std::same_as&amp;lt;
+    decltype(v2),
+    std::ranges::filter_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+* ref_view[link /reference/ranges/ref_view.md]
+* owning_view[link /reference/ranges/owning_view.md]
+* filter_view[link ../filter_view.md]
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pred -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/pred.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/pred.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/pred.md b/reference/ranges/filter_view/pred.md
new file mode 100644
index 000000000..6d3978c28
--- /dev/null
+++ b/reference/ranges/filter_view/pred.md
@@ -0,0 +1,62 @@
+# pred
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr const Pred&amp;amp; pred() const;
+```
+
+## 概要
+
+メンバ変数として保持している述語を取得する。
+
+## 戻り値
+
+述語`Pred`のオブジェクトを[`movable-box`](../movable_box.md)(C++20は[`copyable-box`](../copyable_box.md))でラップした `pred_`というメンバに保持するとして
+
+```cpp
+return *pred_;
+```
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5};
+
+  std::ranges::filter_view fv{vec, [](int i) { return i % 2 == 0; }};
+
+  std::cout &amp;lt;&amp;lt; fv.pred()(2) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; fv.pred()(3) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* pred[color ff0000]
+* filter_view[link ../filter_view.md]
+
+### 出力
+
+```
+2
+3
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sentinel -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/sentinel.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/sentinel.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/sentinel.md b/reference/ranges/filter_view/sentinel.md
new file mode 100644
index 000000000..6cbf94292
--- /dev/null
+++ b/reference/ranges/filter_view/sentinel.md
@@ -0,0 +1,59 @@
+# sentinel
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view[meta class]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;input_range V, indirect_unary_predicate&amp;lt;sentinel_t&amp;lt;V&amp;gt;&amp;gt; Pred&amp;gt;
+    requires view&amp;lt;V&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;Pred&amp;gt;
+  class filter_view&amp;lt;V, Pred&amp;gt;::sentinel { …… };
+}
+```
+* filter_view[link ../filter_view.md]
+
+## 概要
+
+[`filter_view`](../filter_view.md)が[`common_range`](../common_range.md)でない場合のみ使用される番兵。
+
+このクラスの名前は規定されておらず、振る舞いのみが規定されている。
+
+このクラスの型を取得したい場合、[`sentinel_t`](../sentinel_t.md)を使用できる。
+
+## メンバ変数
+
+| 名前                                                               | 説明                       | 対応バージョン |
+|--------------------------------------------------------------------|----------------------------|----------------|
+| [`sentinel_t`](../sentinel_t.md)`&amp;lt;V&amp;gt; end_ = sentinel_t&amp;lt;V&amp;gt;();`      | 元の番兵(説明専用)         | C++20          |
+
+## メンバ関数
+
+| 名前                                           | 説明                 | 対応バージョン |
+|------------------------------------------------|----------------------|----------------|
+| [`(constructor)`](sentinel/op_constructor.md)  | コンストラクタ       | C++20          |
+| [`base`](sentinel/base.md)                     | 元の番兵を取得する   | C++20          |
+
+## 非メンバ（*Hidden friends*）関数
+
+### 比較演算子
+
+| 名前                                 | 説明                            | 対応バージョン |
+|--------------------------------------|---------------------------------|----------------|
+| [`operator==`](sentinel/op_equal.md) | 等値比較                        | C++20          |
+| `operator!=`                         | 非等値比較 (`==`により使用可能) | C++20          |
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/sentinel/base.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/sentinel/base.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/sentinel/base.md b/reference/ranges/filter_view/sentinel/base.md
new file mode 100644
index 000000000..10a6aebe8
--- /dev/null
+++ b/reference/ranges/filter_view/sentinel/base.md
@@ -0,0 +1,35 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::sentinel[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr const sentinel_t&amp;lt;V&amp;gt; base() const;
+```
+
+## 概要
+
+元の`view`の番兵を取得する。
+
+## 効果
+
+入力`view`（`V`）の番兵を`end_`というメンバに保持するとして、`return end_;` と等しい
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/sentinel/op_constructor.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/sentinel/op_constructor.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/sentinel/op_constructor.md b/reference/ranges/filter_view/sentinel/op_constructor.md
new file mode 100644
index 000000000..c320f1d1d
--- /dev/null
+++ b/reference/ranges/filter_view/sentinel/op_constructor.md
@@ -0,0 +1,37 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* filter_view::sentinel[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+sentinel() = default;                             // (1)
+constexpr explicit sentinel(filter_view&amp;amp; parent); // (2)
+```
+
+## 概要
+
+[`filter_view::sentinel`](../sentinel.md)オブジェクトを構築する。
+
+## 効果
+
+- (1) : `end_`をデフォルト構築する
+- (2) : `end_`を[`std::ranges::end`](../../end.md)`(parent.base_)`で初期化する
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- filter_view のメンバの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/filter_view/sentinel/op_equal.html"/>
      <id>9a02af6f5c3b6718cbfd8adf032e12f8c3140066:reference/ranges/filter_view/sentinel/op_equal.md</id>
      <updated>2024-08-29T05:41:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/filter_view/sentinel/op_equal.md b/reference/ranges/filter_view/sentinel/op_equal.md
new file mode 100644
index 000000000..a5f8ce27f
--- /dev/null
+++ b/reference/ranges/filter_view/sentinel/op_equal.md
@@ -0,0 +1,49 @@
+# operator==
+* sentinel[meta header]
+* std[meta namespace]
+* filter_view::sentinel[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+friend constexpr bool operator==(const iterator&amp;amp; x, const sentinel&amp;amp; y);
+```
+* iterator[link ../iterator.md]
+* sentinel[link ../sentinel.md]
+
+## 概要
+
+自身と別のイテレータが同じかを判定する。
+
+## 効果
+
+ラップしている番兵を`end_`メンバ変数に保持するとして、以下と等価
+
+```cpp
+return x.current_ == y.end_;
+```
+
+## 戻り値
+
+元のビューのイテレータと番兵が等しい場合に`true`を返す。
+
+## 備考
+
+- この演算子により逆順の `==` 演算子と、それぞれに対応する `!=` 演算子が使用可能になる。
+
+## 例
+(執筆中)
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.4 Filter view](https://timsong-cpp.github.io/cppwp/n4861/range.filter)
+- [N4950 26.7.8 Filter view](https://timsong-cpp.github.io/cppwp/n4950/range.filter)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_right_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_left_padded/mapping/op_constructor.html"/>
      <id>8c041b3bd1aa46282a0dbb33c7671ec30bb385cb:reference/mdspan/layout_left_padded/mapping/op_constructor.md</id>
      <updated>2024-08-26T22:25:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_left_padded/mapping/op_constructor.md b/reference/mdspan/layout_left_padded/mapping/op_constructor.md
index 4a1356666..fab88cd47 100644
--- a/reference/mdspan/layout_left_padded/mapping/op_constructor.md
+++ b/reference/mdspan/layout_left_padded/mapping/op_constructor.md
@@ -35,8 +35,7 @@ constexpr explicit(see below)
 * rank()[link ../../extents/rank.md]
 * layout_left::mapping[link ../../layout_left/mapping.md]
 * layout_stride::mapping[link ../../layout_stride/mapping.md]
-* LayoutLeftPaddedMapping[link ../../layout_left_padded/mapping.md]
-* see below[itaic]
+* see below[italic]
 
 ## 概要
 - (1) : デフォルトコンストラクタ
@@ -72,21 +71,21 @@ constexpr explicit(see below)
 ## 事前条件
 - (3) :
     - `ext`の多次元インデクス空間のサイズを、`index_type`型で表現できること。
-    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.extent(0))`を`index_type`型で表現できること。
-    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.extent(0))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(0))`を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(0))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
 - (4) :
     - `pad`の値を`index_type`型で表現できること。
     - `extetns_type::`[`index-cast`](../../extents/index-cast.md)`(pad) &amp;gt; 0`
-    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.extent(0))`を`index_type`型で表現できること。
-    - `rank_ &amp;gt; 1`のとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(pad, ext.extent(0))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(0))`を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`のとき、半開区間`[1, rank_)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(0))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
     - `padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`padding_value == extetns_type::`[`index-cast`](../../extents/index-cast.md)`(pad)`
 - (5) :
-    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_left/mapping/stride.md))`(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().extent(0)))`
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_left/mapping/stride.md)`(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().`[`extent`](../../extents/extent.md)`(0)))`
     - `other.`[`required_span_size()`](../../layout_left/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (6) :
-    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_left/mapping/stride.md)`(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().extent(0)))`
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_stride/mapping/stride.md)`(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().`[`extent`](../../extents/extent.md)`(0)))`
     - `rank_ &amp;gt; 0`のとき、`other.`[`stride`](../../layout_stride/mapping/stride.md)`(0) == 1`
-    - `rank_ &amp;gt; 2`のとき、半開区間`[2, rank_)`の全ての値`r`に対して`other.stride(r) == (other.extents().fwd-prod-of-extents(r) / other.extents().extent(0)) * other.stride(1)`
+    - `rank_ &amp;gt; 2`のとき、半開区間`[2, rank_)`の全ての値`r`に対して`other.`[`stride`](../../layout_stride/mapping/stride.md)`(r) == (other.extents().fwd-prod-of-extents(r) / other.extents().`[`extent`](../../extents/extent.md)`(0)) * other.stride(1)`
     - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
 - (7) :
     - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.stride(1) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extent(0)))`
@@ -101,11 +100,11 @@ constexpr explicit(see below)
 - (3) :
     - `ext`を用いて`extents_`を直接非リスト初期化する。
     - `rank_ &amp;gt; 1`のとき、次の値を用いて`stride-1`を直接非リスト初期化する。
-        - `padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`ext.extent(0)`
-        - そうでなければ、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.extent(0))`
+        - `padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`ext.`[`extent`](../../extents/extent.md)`(0)`
+        - そうでなければ、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(0))`
 - (4) :
     - `ext`を用いて`extents_`を直接非リスト初期化する。
-    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.extent(0))`を用いて`stride-1`を直接非リスト初期化する。
+    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(0))`を用いて`stride-1`を直接非リスト初期化する。
 - (5) :
     - `mapping(other.extents())`と等価。
 - (6), (7) :
@@ -192,6 +191,7 @@ int main()
 ```
 * std::layout_left_padded&amp;lt;4&amp;gt;::mapping[color ff0000]
 * std::layout_left_padded&amp;lt;&amp;gt;::mapping[color ff0000]
+* std::layout_left::mapping[link ../../layout_left/mapping.md]
 * std::layout_right::mapping[link ../../layout_right/mapping.md]
 * std::layout_stride::mapping[link ../../layout_stride/mapping.md]
 * std::dims[link ../../extents.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>mapping -- layout_right_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping.html"/>
      <id>8c041b3bd1aa46282a0dbb33c7671ec30bb385cb:reference/mdspan/layout_right_padded/mapping.md</id>
      <updated>2024-08-26T22:25:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping.md b/reference/mdspan/layout_right_padded/mapping.md
index 55e170826..97528c06a 100644
--- a/reference/mdspan/layout_right_padded/mapping.md
+++ b/reference/mdspan/layout_right_padded/mapping.md
@@ -61,7 +61,7 @@ namespace std {
 
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
-| [`(constructor)`](mapping/op_constructor.md.nolink) | コンストラクタ | C++26 |
+| [`(constructor)`](mapping/op_constructor.md) | コンストラクタ | C++26 |
 | `(destructor)` | デストラクタ | C++26 |
 | `operator=`    | コピー代入演算子 | C++26 |
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- layout_right_padded/mapping: コンストラクタ(#1341)</title>
      <link href="https://cpprefjp.github.io/reference/mdspan/layout_right_padded/mapping/op_constructor.html"/>
      <id>8c041b3bd1aa46282a0dbb33c7671ec30bb385cb:reference/mdspan/layout_right_padded/mapping/op_constructor.md</id>
      <updated>2024-08-26T22:25:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mdspan/layout_right_padded/mapping/op_constructor.md b/reference/mdspan/layout_right_padded/mapping/op_constructor.md
new file mode 100644
index 000000000..5ae9da9d3
--- /dev/null
+++ b/reference/mdspan/layout_right_padded/mapping/op_constructor.md
@@ -0,0 +1,222 @@
+# コンストラクタ
+* mdspan[meta header]
+* function[meta id-type]
+* std[meta namespace]
+* layout_right_padded::mapping[meta class]
+* cpp26[meta cpp]
+
+```cpp
+constexpr mapping() noexcept;  // (1)
+
+constexpr mapping(const mapping&amp;amp;) noexcept = default;  // (2)
+
+constexpr mapping(const extents_type&amp;amp; ext);  // (3)
+
+template&amp;lt;class OtherIndexType&amp;gt;
+constexpr mapping(const extents_type&amp;amp; ext, OtherIndexType pad);  // (4)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(!is_convertible_v&amp;lt;OtherExtents, extents_type&amp;gt;)
+  mapping(const layout_right::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other);  // (5)
+
+template&amp;lt;class OtherExtents&amp;gt;
+constexpr explicit(rank_ &amp;gt; 0)
+  mapping(const layout_stride::mapping&amp;lt;OtherExtents&amp;gt;&amp;amp; other);  // (6)
+
+template&amp;lt;class LayoutRightPaddedMapping&amp;gt;
+constexpr explicit(see below)
+  mapping(const LayoutRightPaddedMapping&amp;amp; other);  // (7)
+
+template&amp;lt;class LayoutLeftPaddedMapping&amp;gt;
+constexpr explicit(see below)
+  mapping(const LayoutLeftPaddedMapping&amp;amp; other) noexcept;  // (8)
+```
+* is_convertible_v[link /reference/type_traits/is_convertible.md]
+* layout_right::mapping[link ../../layout_right/mapping.md]
+* layout_stride::mapping[link ../../layout_stride/mapping.md]
+* see below[italic]
+
+## 概要
+- (1) : デフォルトコンストラクタ
+- (2) : コピーコンストラクタ
+- (3) : [`extents`](../../extents.md)から構築
+- (4) : [`extents`](../../extents.md)とパディングから構築
+- (5) : [`layout_right::mapping`](../../layout_right/mapping.md)からの変換コンストラクタ
+- (6) : [`layout_stride::mapping`](../../layout_stride/mapping.md)からの変換コンストラクタ
+- (7) : 他`layout_right_padded&amp;lt;S&amp;gt;::mapping`からの変換コンストラクタ
+- (8) : [`layout_left::mapping`](../../layout_left/mapping.md)または[`layout_left_padded&amp;lt;S&amp;gt;::mapping`](../../layout_left_padded/mapping.md)からの変換コンストラクタ
+
+
+## テンプレートパラメータ制約
+- (4) :
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherIndexType, index_type&amp;gt;`が`true`であること。
+    - [`is_nothrow_constructible_v`](/reference/type_traits/is_nothrow_constructible.md)`&amp;lt;index_type, OtherIndexType&amp;gt;`が`true`であること。
+- (5), (6) :
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, OtherExtents&amp;gt;`が`true`であること。
+- (7) :
+    - [`is-layout-right-padded-mapping-of`](../../is-layout-right-padded-mapping-of.md)`&amp;lt;LayoutRightPaddedMapping&amp;gt;`が`true`であること。
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, LayoutRightPaddedMapping::extents_type&amp;gt;`が`true`であること。
+- (8) :
+    - [`is-layout-left-padded-mapping-of`](../../is-layout-left-padded-mapping-of.md)`&amp;lt;LayoutLeftPaddedMapping&amp;gt;`が`true`、または[`is-mapping-of`](../../is-mapping-of.md)`&amp;lt;`[`layout_left`](../../layout_left.md)`, LayoutLeftPaddedMapping&amp;gt;`が`true`であること。
+    - `rank_`が`0`または`1`であること。
+    - [`is_constructible_v`](/reference/type_traits/is_constructible.md)`&amp;lt;extents_type, LayoutLeftPaddedMapping::extents_type&amp;gt;`が`true`であること。
+
+
+## 適格要件
+- (5) : `OhterExtents::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`のとき、`(static-padding-stride ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (OtherExtents::`[`static_extent`](../../extents/static_extent.md)`(rank_ - 1) == dynamic_extent) || (static-padding-stride == OtherExtents::static_extent(rank_ - 1))`が`true`であること。
+- (7) : `rank_ &amp;gt; 1`のとき、`(padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)`) || (LayoutRightPaddedMapping::padding_value == dynamic_extent) || (padding_value == LayoutRightPaddedMapping::padding_value)`が`true`であること。
+
+
+## 事前条件
+- (3) :
+    - `ext`の多次元インデクス空間のサイズを、`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、半開区間`[0, rank_ - 1)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
+- (4) :
+    - `pad`の値を`index_type`型で表現できること。
+    - `extetns_type::`[`index-cast`](../../extents/index-cast.md)`(pad) &amp;gt; 0`
+    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`を`index_type`型で表現できること。
+    - `rank_ &amp;gt; 1`のとき、半開区間`[0, rank_ - 1)`の全ての値`k`に対して`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`と全ての`ext.extent(k)`を乗算した値を`index_type`型で表現できること。
+    - `padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`padding_value == extetns_type::`[`index-cast`](../../extents/index-cast.md)`(pad)`
+- (5) :
+    - `extents_type::`[`rank()`](../../extents/rank.md) `&amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_right/mapping/stride.md)`(rank_ - 2) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().`[`extent`](../../extents/extent.md)`(rank_ - 1)))`
+    - `other.`[`required_span_size()`](../../layout_right/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (6) :
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.`[`stride`](../../layout_stride/mapping/stride.md)`(rank_ - 2) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extents().`[`extent`](../../extents/extent.md)`(rank_ - 1)))`
+    - `rank_ &amp;gt; 0`のとき、`other.`[`stride`](../../layout_stride/mapping/stride.md)`(rank_ - 1) == 1`
+    - `rank_ &amp;gt; 2`のとき、半開区間`[0, rank_ - 2)`の全ての値`r`に対して`other.`[`stride`](../../layout_stride/mapping/stride.md)`(r) == (other.extents().rev-prod-of-extents(r) / other.extents().`[`extent`](../../extents/extent.md)`(rank_ - 1)) * other.stride(rank_ - 2)`
+    - `other.`[`required_span_size()`](../../layout_stride/mapping/required_span_size.md)を、`index_type`型で表現できること。
+- (7) :
+    - `rank_ &amp;gt; 1`かつ`padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`other.stride(rank_ - 2) == LEAST-MULTIPLE-AT-LEAST(padding_value, extents_type::`[`index-cast`](../../extents/index-cast.md)`(other.extent(rank_ - 1)))`
+    - `other.required_span_size()`を、`index_type`型で表現できること。
+- (8) :
+    - `other.required_span_size()`を、`index_type`型で表現できること。
+
+
+## 効果
+- (1) :
+    - `mapping(extents_type{})`と等価。
+- (3) :
+    - `ext`を用いて`extents_`を直接非リスト初期化する。
+    - `rank_ &amp;gt; 1`のとき、次の値を用いて`stride-rm2`を直接非リスト初期化する。
+        - `padding_value ==` [`dynamic_extent`](/reference/span/dynamic_extent.md)のとき、`ext.`[`extent`](../../extents/extent.md)`(rank_ - 1)`
+        - そうでなければ、`LEAST-MULTIPLE-AT-LEAST(padding_value, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`
+- (4) :
+    - `ext`を用いて`extents_`を直接非リスト初期化する。
+    - `rank_ &amp;gt; 1`のとき、`LEAST-MULTIPLE-AT-LEAST(pad, ext.`[`extent`](../../extents/extent.md)`(rank_ - 1))`を用いて`stride-rm2`を直接非リスト初期化する。
+- (5) :
+    - `mapping(other.extents())`と等価。
+- (6), (7) :
+    - `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+    - `rank_ &amp;gt; 1`のとき、`other.stride(rank_ - 1)`を用いて`stride-rm2`を直接非リスト初期化する。
+- (8) :
+    - `other.extents()`を用いて`extents_`を直接非リスト初期化する。
+
+
+## 例外
+- (1), (2), (8) : 投げない
+
+
+## explicitになる条件
+- (5) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;OtherExtents, extents_type&amp;gt;`
+- (6) : [`extents_type::rank()`](../../extents/rank.md) `&amp;gt; 0`
+- (7) : `rank_ &amp;gt; 1 &amp;amp;&amp;amp; (padding_value !=` [`dynamic_extent`](/reference/span/dynamic_extent.md) `|| LayoutRightPaddedMapping::padding_value == dynamic_extent)`
+- (8) : `!`[`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;LayoutLeftPaddedMapping::extents_type, extents_type&amp;gt;`
+
+
+## 例
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;mdspan&amp;gt;
+
+using Ext3x3 = std::extents&amp;lt;size_t, 3, 3&amp;gt;;
+using Ext2D = std::dims&amp;lt;2&amp;gt;;
+
+int main()
+{
+  // (1) : デフォルトコンストラクタ
+  {
+    std::layout_right_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map1s;
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map1d;
+    assert(map1s.stride(0) == 4);
+    assert(map1d.stride(0) == 3);
+  }
+  // (2) : コピーコンストラクタ
+  {
+    std::layout_right_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map2_a;
+    std::layout_right_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; map2_b = map2_a;
+    assert(map2_a == map2_b);
+  }
+  // (3) : extentsから構築
+  {
+    Ext2D ext{3, 3};
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; map3 = ext;
+    assert(map3.extents() == ext);
+  }
+  // (4) : extentsとパディングから構築
+  {
+    Ext2D ext{3, 3};
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; map4{ext, 4};
+    assert(map4.extents() == ext &amp;amp;&amp;amp; map4.stride(0) == 4);
+  }
+  // (5) : layout_right::mappingからの変換コンストラクタ
+  {
+    std::layout_right::mapping src5{Ext3x3{}};
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; dst5 = src5;
+    assert(dst5.stride(0) == 3);
+  }
+  // (6) : layout_stride::mappingからの変換コンストラクタ
+  {
+    std::array&amp;lt;int, 2&amp;gt; strides{4, 1};
+    std::layout_stride::mapping src6{Ext3x3{}, strides};
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; dst6{src6};
+    assert(dst6.stride(0) == 4);
+  }
+  // (7) : 他layout_right_padded::mappingからの変換コンストラクタ
+  {
+    std::layout_right_padded&amp;lt;4&amp;gt;::mapping&amp;lt;Ext3x3&amp;gt; src7;
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext2D&amp;gt; dst7{src7};
+    assert(dst7.extents() == Ext3x3{} &amp;amp;&amp;amp; dst7.stride(0) == 4);
+  }
+  // (8) : layout_left(_padded)::mappingからの変換コンストラクタ
+  {
+    using Ext1D = std::dims&amp;lt;1&amp;gt;;
+    std::layout_left::mapping&amp;lt;Ext1D&amp;gt; src8{Ext1D{5}};
+    std::layout_right_padded&amp;lt;&amp;gt;::mapping&amp;lt;Ext1D&amp;gt; dst8{src8};
+    assert(dst8.extent(0) == 5);
+  }
+}
+```
+* std::layout_right_padded&amp;lt;4&amp;gt;::mapping[color ff0000]
+* std::layout_right_padded&amp;lt;&amp;gt;::mapping[color ff0000]
+* std::layout_right::mapping[link ../../layout_right/mapping.md]
+* std::layout_left::mapping[link ../../layout_left/mapping.md]
+* std::layout_stride::mapping[link ../../layout_stride/mapping.md]
+* std::dims[link ../../extents.md]
+
+### 出力
+```
+```
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`layout_left::mapping`](../../layout_left/mapping.md)
+- [`layout_left_padded::mapping`](../../layout_left_padded/mapping.md)
+- [`layout_right::mapping`](../../layout_right/mapping.md)
+- [`layout_stride::mapping`](../../layout_stride/mapping.md)
+
+
+## 参照
+- [P2642R6 Padded mdspan layouts](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2642r6.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
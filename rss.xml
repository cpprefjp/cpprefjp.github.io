<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-05-13T05:10:36.021509</updated>
  <id>268bfca4-a310-43e9-b5ef-dc14f9495c14</id>

  
    <entry>
      <title>コンストラクタ -- bitset : C++26対応としてstring_viewをとるコンストラクタを追加 (close #1197)</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/op_constructor.html"/>
      <id>bec6a538a9bffb4315f5198e63708f6440258ad1:reference/bitset/bitset/op_constructor.md</id>
      <updated>2024-05-13T14:06:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/op_constructor.md b/reference/bitset/bitset/op_constructor.md
index 1b898c9a8..03fe984b9 100644
--- a/reference/bitset/bitset/op_constructor.md
+++ b/reference/bitset/bitset/op_constructor.md
@@ -17,57 +17,74 @@ explicit bitset(
   typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type pos = 0,
   typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type n =
     basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::npos);  // (3) C++03
-
 template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
 explicit bitset(
   const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; str,
   typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type pos = 0,
   typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type n =
     basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::npos,
-  CharT zero = CharT(&amp;#39;0&amp;#39;), CharT one = CharT(&amp;#39;1&amp;#39;)); // (3) C++11
-
+  CharT zero = CharT(&amp;#39;0&amp;#39;),
+  CharT one = CharT(&amp;#39;1&amp;#39;));                          // (3) C++11
 template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
 constexpr explicit bitset(
   const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; str,
   typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type pos = 0,
   typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type n =
     basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::npos,
-  CharT zero = CharT(&amp;#39;0&amp;#39;), CharT one = CharT(&amp;#39;1&amp;#39;)); // (3) C++23
+  CharT zero = CharT(&amp;#39;0&amp;#39;),
+  CharT one = CharT(&amp;#39;1&amp;#39;));                          // (3) C++23
+
+template &amp;lt;class CharT, class Traits&amp;gt;
+constexpr explicit bitset(
+  basic_string_view&amp;lt;CharT, Traits&amp;gt; str,
+  typename basic_string_view&amp;lt;CharT, Traits&amp;gt;::size_type pos = 0,
+  typename basic_string_view&amp;lt;CharT, Traits&amp;gt;::size_type n =
+    basic_string_view&amp;lt;charT, Traits&amp;gt;::npos,
+  CharT zero = CharT(&amp;#39;0&amp;#39;),
+  CharT one = CharT(&amp;#39;1&amp;#39;));                          // (4) C++26
 
 template &amp;lt;class CharT&amp;gt;
 explicit bitset(
   const CharT* str,
   typename basic_string&amp;lt;CharT&amp;gt;::size_type n = basic_string&amp;lt;CharT&amp;gt;::npos,
-  CharT zero = CharT(&amp;#39;0&amp;#39;), CharT one = CharT(&amp;#39;1&amp;#39;)); // (4) C++11
-
+  CharT zero = CharT(&amp;#39;0&amp;#39;),
+  CharT one = CharT(&amp;#39;1&amp;#39;));                          // (5) C++11
 template &amp;lt;class CharT&amp;gt;
 constexpr explicit bitset(
   const CharT* str,
   typename basic_string&amp;lt;CharT&amp;gt;::size_type n = basic_string&amp;lt;CharT&amp;gt;::npos,
-  CharT zero = CharT(&amp;#39;0&amp;#39;), CharT one = CharT(&amp;#39;1&amp;#39;)); // (4) C++23
+  CharT zero = CharT(&amp;#39;0&amp;#39;),
+  CharT one = CharT(&amp;#39;1&amp;#39;));                          // (5) C++23
+template &amp;lt;class CharT&amp;gt;
+constexpr explicit bitset(
+  const CharT* str,
+  typename basic_string_view&amp;lt;CharT&amp;gt;::size_type n = basic_string_view&amp;lt;CharT&amp;gt;::npos,
+  CharT zero = CharT(&amp;#39;0&amp;#39;),
+  CharT one = CharT(&amp;#39;1&amp;#39;));                          // (5) C++26
 ```
 * basic_string[link /reference/string/basic_string.md]
 
 ## bitsetオブジェクトの構築
-- (1) : デフォルトコンストラクタ。
-- (2) : 整数値を受け取るコンストラクタ。
-- (3) : `&amp;#39;0&amp;#39;`と`&amp;#39;1&amp;#39;`の文字で構成される`basic_string`文字列からビット列を構築する。
-- (4) : `&amp;#39;0&amp;#39;`と`&amp;#39;1&amp;#39;`の文字で構成される文字配列からビット列を構築する。
+- (1) : デフォルトコンストラクタ
+- (2) : 整数値を受け取るコンストラクタ
+- (3) : `&amp;#39;0&amp;#39;`と`&amp;#39;1&amp;#39;`の文字で構成される`basic_string`文字列からビット列を構築する
+- (4) : `&amp;#39;0&amp;#39;と`&amp;#39;1&amp;#39;`の文字で構成される`[`basic_string_view`](/reference/string_view/basic_string_view.md)オブジェクトからビット列を構築する
+- (5) : `&amp;#39;0&amp;#39;`と`&amp;#39;1&amp;#39;`の文字で構成される文字配列からビット列を構築する
 
 
 ## 要件
-- (3) : `pos &amp;lt;= str.`[`size()`](/reference/string/basic_string/size.md)
+- (3), (4) : `pos &amp;lt;= str.`[`size()`](/reference/string/basic_string/size.md)
 
 
 ## 効果
 - (1) : 全てのビットを`0`に初期化する。
 - (2) : 整数値`val`でビット列を初期化する。`bitset`クラスのテンプレートパラメータ`N`と`val`のビット数のうち、小さい方の大きさで表現可能なビット列となる。クラステンプレートパラメータ`N`よりも`val`のビット数の方が小さい場合は、残りのビットを`0`で初期化する。
-- (3) : 文字列`str`でビット列を初期化する。
+- (3), (4) : 文字列`str`でビット列を初期化する。
 	- ビット列として扱う文字列は`str`の`n`文字目以降である。`n == npos`の場合は`str`の全文字列を使用する。対象となる文字列範囲を`rstr`とする。
 	- C++03 : 文字列`rstr`に含まれる文字`CharT(&amp;#39;0&amp;#39;)`をビット値`0`、文字`CharT(&amp;#39;1&amp;#39;)`をビット値`1`と見なし、対応する値でビット列を構築する。
 	- C++11 : 文字列`rstr`に含まれる文字`zero`をビット値`0`、文字`one`をビット値`1`と見なし、対応する値でビット列を構築する。
 	- クラステンプレートパラメータ`N`と文字列`rstr`の長さのうち、小さい方の大きさで表現可能なビット列となる。クラステンプレートパラメータ`N`よりも文字列`rstr`の長さの方が小さい場合は、残りのビットを`0`で初期化する。
-- (4) : 以下のように初期化する：
+- (5) : 以下のように初期化する：
 
 ```cpp
 bitset(
@@ -78,10 +95,10 @@ bitset(
 
 
 ## 例外
-- (3) : `pos &amp;gt; str.`[`size()`](/reference/string/basic_string/size.md)の場合、[`out_of_range`](/reference/stdexcept.md)例外を送出する。
+- (3), (4) : `pos &amp;gt; str.`[`size()`](/reference/string/basic_string/size.md)の場合、[`out_of_range`](/reference/stdexcept.md)例外を送出する。
 	- C++03 : `str`に`&amp;#39;0&amp;#39;`と`&amp;#39;1&amp;#39;`以外の文字が含まれていた場合、[`invalid_argument`](/reference/stdexcept.md)例外を送出する。
 	- C++11 : `str`に`zero`と`one`以外の文字が含まれていた場合、[`invalid_argument`](/reference/stdexcept.md)例外を送出する。
-- (4) : `str`に`zero`と`one`以外の文字が含まれていた場合、[`invalid_argument`](/reference/stdexcept.md)例外を送出する。
+- (5) : `str`に`zero`と`one`以外の文字が含まれていた場合、[`invalid_argument`](/reference/stdexcept.md)例外を送出する。
 
 
 ## 例
@@ -103,17 +120,23 @@ int main()
     std::cout &amp;lt;&amp;lt; &amp;#34;(2) : &amp;#34; &amp;lt;&amp;lt; bs &amp;lt;&amp;lt; std::endl;
   }
 
-  // (3) basic_stringから構築
+  // (3) stringから構築
   {
     std::bitset&amp;lt;4&amp;gt; bs(std::string(&amp;#34;1010&amp;#34;));
     std::cout &amp;lt;&amp;lt; &amp;#34;(3) : &amp;#34; &amp;lt;&amp;lt; bs &amp;lt;&amp;lt; std::endl;
   }
 
-  // (4) 文字配列から構築
+  // (4) string_viewから構築
   {
-    std::bitset&amp;lt;4&amp;gt; bs(&amp;#34;1010&amp;#34;);
+    std::bitset&amp;lt;4&amp;gt; bs{std::string_view(&amp;#34;1010&amp;#34;)};
     std::cout &amp;lt;&amp;lt; &amp;#34;(4) : &amp;#34; &amp;lt;&amp;lt; bs &amp;lt;&amp;lt; std::endl;
   }
+
+  // (5) 文字配列から構築
+  {
+    std::bitset&amp;lt;4&amp;gt; bs(&amp;#34;1010&amp;#34;);
+    std::cout &amp;lt;&amp;lt; &amp;#34;(5) : &amp;#34; &amp;lt;&amp;lt; bs &amp;lt;&amp;lt; std::endl;
+  }
 }
 ```
 
@@ -123,11 +146,12 @@ int main()
 (2) : 1010
 (3) : 1010
 (4) : 1010
+(5) : 1010
 ```
 
 
 ### 処理系
-- (4)のコンストラクタ
+- (5)のコンストラクタ
 	- [Clang](/implementation.md#clang): 3.0
 	- [GCC](/implementation.md#gcc): 4.5.4
 	- [Visual C++](/implementation.md#visual_cpp): 2012, 2013, 2015
@@ -135,5 +159,8 @@ int main()
 
 ## 参照
 - [LWG Issue 778. `std::bitset` does not have any constructor taking a string literal](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#778)
-    - (4)のコンストラクタが追加された経緯となるレポート
+    - (5)のコンストラクタが追加された経緯となるレポート
 - [P2417R2 A more constexpr bitset](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2417r2.pdf)
+- [P2697R1 Interfacing `bitset` with `string_view`](https://open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2697r1.pdf)
+    - C++26から`string_view`を受け取るコンストラクタが追加された
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>nth_element -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/nth_element.html"/>
      <id>4d8ffbea106f17aca2eaa0e822f836f0262e38be:reference/algorithm/nth_element.md</id>
      <updated>2024-05-12T15:58:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/nth_element.md b/reference/algorithm/nth_element.md
index 6c0ddf375..6c8890ac7 100644
--- a/reference/algorithm/nth_element.md
+++ b/reference/algorithm/nth_element.md
@@ -87,7 +87,7 @@ int main()
 ```
 * std::nth_element[color ff0000]
 
-### 出力
+### 出力例
 ```
 2
 1
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>実行ポリシー -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/execution_policy.html"/>
      <id>4d8ffbea106f17aca2eaa0e822f836f0262e38be:reference/execution/execution/execution_policy.md</id>
      <updated>2024-05-12T15:58:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/execution_policy.md b/reference/execution/execution/execution_policy.md
index f1ee35df3..fdc1ea560 100644
--- a/reference/execution/execution/execution_policy.md
+++ b/reference/execution/execution/execution_policy.md
@@ -159,6 +159,8 @@ int main()
   }
 }
 ```
+* std::execution::par[color ff0000]
+* std::execution::par_unseq[color ff0000]
 * count.load[link /reference/atomic/atomic/load.md]
 * is_always_lock_free[link /reference/atomic/atomic/is_always_lock_free.md.nolink]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const_iterator -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/iterator/const_iterator.html"/>
      <id>4d8ffbea106f17aca2eaa0e822f836f0262e38be:reference/iterator/const_iterator.md</id>
      <updated>2024-05-12T15:58:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/const_iterator.md b/reference/iterator/const_iterator.md
index d88d0c17b..91e997fbe 100644
--- a/reference/iterator/const_iterator.md
+++ b/reference/iterator/const_iterator.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std {
   template&amp;lt;input_iterator I&amp;gt;
-  using const_iterator = /*see below*?;
+  using const_iterator = /*see below*/;
 }
 ```
 * input_iterator[link input_iterator.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>const_sentinel -- fix some typo</title>
      <link href="https://cpprefjp.github.io/reference/iterator/const_sentinel.html"/>
      <id>4d8ffbea106f17aca2eaa0e822f836f0262e38be:reference/iterator/const_sentinel.md</id>
      <updated>2024-05-12T15:58:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/const_sentinel.md b/reference/iterator/const_sentinel.md
index 591caab8e..483495e3d 100644
--- a/reference/iterator/const_sentinel.md
+++ b/reference/iterator/const_sentinel.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std {
   template&amp;lt;semiregular S&amp;gt;
-  using const_sentinel = /*see below*?;
+  using const_sentinel = /*see below*/;
 }
 ```
 * semiregular[link /reference/concepts/semiregular.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>Pragma演算子 -- Merge pull request #1272 from Kiterai/patch-1</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/pragma_operator.html"/>
      <id>a741689cf753c09452e6356bfc74c65a65ffe112:lang/cpp11/pragma_operator.md</id>
      <updated>2024-05-07T17:45:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/pragma_operator.md b/lang/cpp11/pragma_operator.md
index 06294806f..ef1727c73 100644
--- a/lang/cpp11/pragma_operator.md
+++ b/lang/cpp11/pragma_operator.md
@@ -43,7 +43,7 @@ int main()
   int b[N] = {1, 2, 3, 4, 5};
   int c[N] = {};
 
-  // OMP_PARALLEL_FORは、 #pragma omp parallel for に展開される
+  // OMP_PARALLEL_FORは、 _Pragma(&amp;#34;omp parallel for&amp;#34;) に展開される
   OMP_PARALLEL_FOR
   for (int i = 0; i &amp;lt; N; ++i) {
     c[i] = a[i] + b[i];
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- packaged_task::resetの実装の動作についても追記 #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/packaged_task/op_assign.html"/>
      <id>2486f062f20953bf9500234b60ca893643f59cc9:reference/future/packaged_task/op_assign.md</id>
      <updated>2024-05-06T15:17:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/packaged_task/op_assign.md b/reference/future/packaged_task/op_assign.md
index 538183840..2dd403be6 100644
--- a/reference/future/packaged_task/op_assign.md
+++ b/reference/future/packaged_task/op_assign.md
@@ -37,7 +37,7 @@ C++11の仕様では、ムーブ代入演算子の効果として古い共有状
 
 「(共有状態を)放棄する(abandon)」とは効果の項(2)の1と2が行われることをいい、「(共有状態を)解放する(release)」とは効果の項(2)の2のみが行われることである。通常、[`promise`](../promise.md)および`packaged_task`は処理結果を提供する側であるため共有状態を所有しなくなるときには前者を行い、[`future`](../future.md)および[`shared_future`](../shared_future.md)は処理結果を受け取る側であるため共有状態を所有しなくなるときには後者を行う。
 
-なお、実際の実装ではClangおよびGCCでは「放棄する(abandon)」の動作になっているが、Visual C++では「解放する(release)」の動作になっている。
+なお、`operator=`の実際の実装では、ClangおよびGCCでは「放棄する(abandon)」の動作になっているが、Visual C++では「解放する(release)」の動作になっている。また、[`reset`](reset.md)では、Clang,GCC,Visual C++のいずれも「放棄する(abandon)」の動作になっている。
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- packaged_taskムーブ代入演算子とresetの効果を追記。備考で実装について補足 #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/packaged_task/op_assign.html"/>
      <id>599f09ff3f94f6c3bb943ef59fa76189808313c6:reference/future/packaged_task/op_assign.md</id>
      <updated>2024-05-06T15:09:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/packaged_task/op_assign.md b/reference/future/packaged_task/op_assign.md
index 2d4f859ff..538183840 100644
--- a/reference/future/packaged_task/op_assign.md
+++ b/reference/future/packaged_task/op_assign.md
@@ -18,7 +18,10 @@ packaged_task&amp;amp; operator=(packaged_task&amp;amp;&amp;amp; rhs) noexcept;  // (2)
 
 
 ## 効果
-- (2) : `*this`の共有状態を解放し、`packaged_task(`[`std::move`](/reference/utility/move.md)`(rhs)).swap(*this)`を行う。
+- (2) :
+    1. まず現在の共有状態が準備完了状態([`future_status::ready`](../future_status.md))でなければ、error conditionとして[`broken_promise`](../future_errc.md)を持つ[`future_error`](../future_error.md)例外オブジェクトを格納したのち、準備完了状態にする。ただし、実装によっては、この動作が行われない場合がある(備考を参照)。
+    2. 現在の共有状態を解放する。
+    3. `packaged_task(`[`std::move`](/reference/utility/move.md)`(rhs)).swap(*this)`を行う。
 
 
 ## 戻り値
@@ -29,6 +32,13 @@ packaged_task&amp;amp; operator=(packaged_task&amp;amp;&amp;amp; rhs) noexcept;  // (2)
 - (2) : 投げない
 
 
+## 備考
+C++11の仕様では、ムーブ代入演算子の効果として古い共有状態は「放棄する(abandon)」ではなく「解放する(release)」となっているが、仕様の他の項目(Shared States, Class template promise, および Class template packaged_task内のvoid reset();)の記載との整合性を欠いており、「放棄する(abandon)」とする方が合理性があるため効果の項にはそのように記載した。
+
+「(共有状態を)放棄する(abandon)」とは効果の項(2)の1と2が行われることをいい、「(共有状態を)解放する(release)」とは効果の項(2)の2のみが行われることである。通常、[`promise`](../promise.md)および`packaged_task`は処理結果を提供する側であるため共有状態を所有しなくなるときには前者を行い、[`future`](../future.md)および[`shared_future`](../shared_future.md)は処理結果を受け取る側であるため共有状態を所有しなくなるときには後者を行う。
+
+なお、実際の実装ではClangおよびGCCでは「放棄する(abandon)」の動作になっているが、Visual C++では「解放する(release)」の動作になっている。
+
 ## 例
 ```cpp example
 #include &amp;lt;future&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reset -- packaged_taskムーブ代入演算子とresetの効果を追記。備考で実装について補足 #1270</title>
      <link href="https://cpprefjp.github.io/reference/future/packaged_task/reset.html"/>
      <id>599f09ff3f94f6c3bb943ef59fa76189808313c6:reference/future/packaged_task/reset.md</id>
      <updated>2024-05-06T15:09:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/packaged_task/reset.md b/reference/future/packaged_task/reset.md
index f4333e7ed..59b2d1d70 100644
--- a/reference/future/packaged_task/reset.md
+++ b/reference/future/packaged_task/reset.md
@@ -21,7 +21,7 @@ void reset();
 ```
 * std::move[link /reference/utility/move.md]
 
-によって、新たに共有状態を作成する。古い共有状態は放棄される。
+によって、新たに共有状態を作成する。古い共有状態は放棄される(詳細は[`operator=`](op_assign.md)を参照)。
 
 `f`はメンバ変数として保持している、非同期実行する関数オブジェクト。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>tshino</name>
        <email>tshino.ssr@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-02T09:32:28.635704</updated>
  <id>629405a1-3f37-419b-8042-f13b06e862f4</id>

  
    <entry>
      <title>concat_view -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view.md b/reference/ranges/concat_view.md
index 769dd0c11..54b39fc32 100644
--- a/reference/ranges/concat_view.md
+++ b/reference/ranges/concat_view.md
@@ -108,28 +108,28 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](concat_view/op_constructor.md.nolink)  | コンストラクタ                   | C++26          |
-| [`begin`](concat_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++26          |
-| [`end`](concat_view/end.md.nolink)                       | 番兵を取得する                   | C++26          |
-| [`size`](concat_view/size.md.nolink)                     | 要素数を取得する                 | C++26          |
+| [`(constructor)`](concat_view/op_constructor.md)  | コンストラクタ                   | C++26          |
+| [`begin`](concat_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++26          |
+| [`end`](concat_view/end.md)                       | 番兵を取得する                   | C++26          |
+| [`size`](concat_view/size.md)                     | 要素数を取得する                 | C++26          |
 
 ## 継承しているメンバ関数
 
 | 名前                                         | 説明                              | 対応バージョン |
 |----------------------------------------------|-----------------------------------|----------------|
-| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
-| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
-| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
-| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
-| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
-| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
-| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++26          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++26          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++26          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++26          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++26          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++26          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++26          |
 
 ## 推論補助
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](concat_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++23          |
+| [`(deduction_guide)`](concat_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++26          |
 
 ## 例
 ```cpp example
@@ -155,10 +155,9 @@ int main() {
 - C++26
 
 ### 処理系
-- [Clang](/implementation.md#clang): ??
-- [GCC](/implementation.md#gcc): ??
-- [ICC](/implementation.md#icc): ??
-- [Visual C++](/implementation.md#visual_cpp): ??
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
 
 ## 参照
 - [26.7.18 Concat view](https://timsong-cpp.github.io/cppwp/range.concat) (2024-08-10)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view/begin.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view/begin.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view/begin.md b/reference/ranges/concat_view/begin.md
new file mode 100644
index 000000000..01986d7ae
--- /dev/null
+++ b/reference/ranges/concat_view/begin.md
@@ -0,0 +1,59 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* concat_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;Views&amp;gt; || ...);       // (1) C++26
+
+constexpr auto begin() const
+  requires (range&amp;lt;const Views&amp;gt; &amp;amp;&amp;amp; ...);        // (2) C++26
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+- (1), (2) : `concat_view`の先頭を指すイテレータを返す。連結されたRangeが空でない場合、最初の非空Rangeの先頭要素を指す。すべてのRangeが空の場合、[`end()`](end.md)と等価なイテレータを返す。
+
+## 例
+
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1{1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2{4, 5};
+  std::array&amp;lt;int, 3&amp;gt; a{6, 7, 8};
+
+  std::ranges::concat_view r{v1, v2, a};
+
+  auto it = r.begin();
+  
+  int x = *it;
+  std::println(&amp;#34;{}&amp;#34;, x);
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+1
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view/end.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view/end.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view/end.md b/reference/ranges/concat_view/end.md
new file mode 100644
index 000000000..992c02a50
--- /dev/null
+++ b/reference/ranges/concat_view/end.md
@@ -0,0 +1,62 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* concat_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;Views&amp;gt; || ...);       // (1) C++26
+
+constexpr auto end() const
+  requires (range&amp;lt;const Views&amp;gt; &amp;amp;&amp;amp; ...);        // (2) C++26
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1), (2) : `concat_view`の番兵を返す
+
+## 例
+
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1{1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2{4, 5};
+  std::array&amp;lt;int, 3&amp;gt; a{6, 7, 8};
+
+  std::ranges::concat_view r{v1, v2, a};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    std::print(&amp;#34;{} &amp;#34;, *it);
+    ++it;
+  }
+  std::println();
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+1 2 3 4 5 6 7 8
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view/op_constructor.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view/op_constructor.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view/op_constructor.md b/reference/ranges/concat_view/op_constructor.md
new file mode 100644
index 000000000..0d1be8934
--- /dev/null
+++ b/reference/ranges/concat_view/op_constructor.md
@@ -0,0 +1,61 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* concat_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+concat_view()
+  requires (default_initializable&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...) = default;  // (1) C++26
+
+constexpr explicit concat_view(Views... views);              // (2) C++26
+```
+
+## 概要
+
+[`concat_view`](../concat_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 連結する複数のviewを指定して構築
+
+## 効果
+
+- (1) : 各`views_`メンバをデフォルト構築する
+- (2) : `views_`を`std::move(views)...`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1{1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2{4, 5};
+  std::array&amp;lt;int, 3&amp;gt; a{6, 7, 8};
+
+  std::ranges::concat_view view{v1, v2, a};
+  
+  for (int i : view) {
+    std::print(&amp;#34;{} &amp;#34;, i);
+  }
+  std::println();
+}
+```
+* concat_view[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 6 7 8
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view/op_deduction_guide.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view/op_deduction_guide.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view/op_deduction_guide.md b/reference/ranges/concat_view/op_deduction_guide.md
new file mode 100644
index 000000000..a82d21f75
--- /dev/null
+++ b/reference/ranges/concat_view/op_deduction_guide.md
@@ -0,0 +1,69 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class... Rs&amp;gt;
+  concat_view(Rs&amp;amp;&amp;amp;...) -&amp;gt; concat_view&amp;lt;views::all_t&amp;lt;Rs&amp;gt;...&amp;gt;;
+}
+```
+
+## 概要
+
+[`concat_view`](../concat_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、渡されたRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;concepts&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1{1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2{4, 5};
+  std::array&amp;lt;int, 3&amp;gt; a{6, 7, 8};
+
+  std::ranges::concat_view r1{v1, v2, a};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::concat_view&amp;lt;
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::ref_view&amp;lt;std::array&amp;lt;int, 3&amp;gt;&amp;gt;
+    &amp;gt;
+  &amp;gt;);
+
+  std::ranges::concat_view r2{
+    std::vector&amp;lt;int&amp;gt;{1, 2, 3},
+    std::vector&amp;lt;int&amp;gt;{4, 5},
+    std::array&amp;lt;int, 3&amp;gt;{6, 7, 8}
+  };
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::concat_view&amp;lt;
+      std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::owning_view&amp;lt;std::array&amp;lt;int, 3&amp;gt;&amp;gt;
+    &amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- concat_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/concat_view/size.html"/>
      <id>f1ce7b622d6fa307ae67bef1b2681de9738b0571:reference/ranges/concat_view/size.md</id>
      <updated>2025-06-02T18:28:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/concat_view/size.md b/reference/ranges/concat_view/size.md
new file mode 100644
index 000000000..8fd66ab5d
--- /dev/null
+++ b/reference/ranges/concat_view/size.md
@@ -0,0 +1,68 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* concat_view[meta class]
+* function[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires (sized_range&amp;lt;Views&amp;gt; &amp;amp;&amp;amp; ...);        // (1) C++26
+
+constexpr auto size() const
+  requires (sized_range&amp;lt;const Views&amp;gt; &amp;amp;&amp;amp; ...);  // (2) C++26
+```
+
+## 概要
+連結されたすべてのRangeの要素数の合計を取得する。
+
+## 制約
+- (1) : `Views...`のすべてが[`sized_range`](../sized_range.md)であること
+- (2) : `const Views...`のすべてが[`sized_range`](../sized_range.md)であること
+
+## 戻り値
+- (1), (2) : 連結されたすべてのRangeの要素数の合計を返す
+
+## 計算量
+- O(1)
+
+## 例
+
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;array&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v1{1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2{4, 5};
+  std::array&amp;lt;int, 3&amp;gt; a{6, 7, 8};
+
+  std::ranges::concat_view r{v1, v2, a};
+
+  std::println(&amp;#34;size: {}&amp;#34;, r.size());
+  
+  // 実際の要素数を確認
+  auto count = std::ranges::distance(r);
+  std::println(&amp;#34;distance: {}&amp;#34;, count);
+}
+```
+* size[color ff0000]
+
+### 出力
+
+```
+size: 8
+distance: 8
+```
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): 20 [mark noimpl]
+- [GCC](/implementation.md#gcc): 15 [mark verified]
+- [Visual C++](/implementation.md#visual_cpp): 2022 Update 14 [mark noimpl]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>split_view -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view.md b/reference/ranges/split_view.md
index 411ef0e7c..bd478450d 100644
--- a/reference/ranges/split_view.md
+++ b/reference/ranges/split_view.md
@@ -62,10 +62,10 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](split_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](split_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`begin`](split_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](split_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](split_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`base`](split_view/base.md)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](split_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](split_view/end.md)                       | 番兵を取得する                   | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -81,7 +81,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](split_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](split_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view/base.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view/base.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view/base.md b/reference/ranges/split_view/base.md
new file mode 100644
index 000000000..8b08080c2
--- /dev/null
+++ b/reference/ranges/split_view/base.md
@@ -0,0 +1,69 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+  using namespace std::literals;
+
+  std::string_view text = &amp;#34;hello,world,split&amp;#34;;
+  std::string_view delimiter = &amp;#34;,&amp;#34;;
+
+  std::ranges::split_view r{text, delimiter};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::string_view&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::string_view&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::string_view&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view/begin.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view/begin.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view/begin.md b/reference/ranges/split_view/begin.md
new file mode 100644
index 000000000..e2f2773f8
--- /dev/null
+++ b/reference/ranges/split_view/begin.md
@@ -0,0 +1,63 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           forward_range&amp;lt;const Pattern&amp;gt;;  // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+- (1), (2) : `split_view`の先頭を指すイテレータを返す。このイテレータは部分Rangeを指し、外側のRangeが空でない場合、最初の部分Rangeを指す。外側のRangeが空の場合、[`end()`](end.md)と等価なイテレータを返す。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std::literals;
+  
+  std::string_view text = &amp;#34;hello,world,split&amp;#34;;
+  std::string_view delimiter = &amp;#34;,&amp;#34;;
+
+  std::ranges::split_view r{text, delimiter};
+
+  auto it = r.begin();
+
+  // 最初の部分Rangeを取得
+  auto first_subrange = *it;
+  std::string_view sv{first_subrange.begin(), first_subrange.end()};
+  std::cout &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+hello
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view/end.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view/end.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view/end.md b/reference/ranges/split_view/end.md
new file mode 100644
index 000000000..dcc5332f7
--- /dev/null
+++ b/reference/ranges/split_view/end.md
@@ -0,0 +1,67 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           forward_range&amp;lt;const Pattern&amp;gt;;  // (2) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1), (2) : `split_view`の番兵を返す
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using namespace std::literals;
+  
+  std::string_view text = &amp;#34;hello,world,split&amp;#34;;
+  std::string_view delimiter = &amp;#34;,&amp;#34;;
+
+  std::ranges::split_view r{text, delimiter};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    auto subrange = *it;
+    std::string_view sv{subrange.begin(), subrange.end()};
+    std::cout &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+    ++it;
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+hello
+world
+split
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view/op_constructor.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view/op_constructor.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view/op_constructor.md b/reference/ranges/split_view/op_constructor.md
new file mode 100644
index 000000000..86679fb97
--- /dev/null
+++ b/reference/ranges/split_view/op_constructor.md
@@ -0,0 +1,66 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+split_view()
+  requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp;
+           default_initializable&amp;lt;Pattern&amp;gt;
+  = default;                                   // (1) C++20
+
+constexpr split_view(V base, Pattern pattern); // (2) C++20
+```
+
+## 概要
+
+[`split_view`](../split_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewとパターンを指定して構築
+
+## 効果
+
+- (1) : `base_`と`pattern_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`pattern_`を`std::move(pattern)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main() {
+  using namespace std::literals;
+  
+  std::string_view text = &amp;#34;hello,world,split&amp;#34;;
+  std::string_view delimiter = &amp;#34;,&amp;#34;;
+
+  std::ranges::split_view view{text, delimiter};
+  
+  for (auto subrange : view) {
+    std::string_view sv{subrange.begin(), subrange.end()};
+    std::cout &amp;lt;&amp;lt; sv &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* split_view[color ff0000]
+
+### 出力
+```
+hello
+world
+split
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/split_view/op_deduction_guide.html"/>
      <id>1ab7976cd1c26cbcb356e1e3a8e4771d802a46e1:reference/ranges/split_view/op_deduction_guide.md</id>
      <updated>2025-06-02T18:11:16+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/split_view/op_deduction_guide.md b/reference/ranges/split_view/op_deduction_guide.md
new file mode 100644
index 000000000..004edda08
--- /dev/null
+++ b/reference/ranges/split_view/op_deduction_guide.md
@@ -0,0 +1,71 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class P&amp;gt;
+  split_view(R&amp;amp;&amp;amp;, P&amp;amp;&amp;amp;)
+    -&amp;gt; split_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, views::all_t&amp;lt;P&amp;gt;&amp;gt;; // (1) C++20
+
+  template&amp;lt;forward_range R&amp;gt;
+  split_view(R&amp;amp;&amp;amp;, range_value_t&amp;lt;R&amp;gt;)
+    -&amp;gt; split_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, single_view&amp;lt;range_value_t&amp;lt;R&amp;gt;&amp;gt;&amp;gt;; // (2) C++20
+}
+```
+
+## 概要
+
+[`split_view`](../split_view.md)クラステンプレートの型推論補助。
+
+- (1) : 元のRangeとパターンが暗黙的に[all view](../all.md)でラップされる
+- (2) : 元のRangeが[all view](../all.md)、区切り要素が[`single_view`](../single_view.md)でラップされる
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;string&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::string_view text = &amp;#34;hello,world,split&amp;#34;;
+  std::string_view delimiter = &amp;#34;,&amp;#34;;
+
+  std::ranges::split_view r1{text, delimiter};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::split_view&amp;lt;
+      std::string_view,
+      std::string_view
+    &amp;gt;
+  &amp;gt;);
+
+  std::ranges::split_view r2{
+    std::string{&amp;#34;hello,world,split&amp;#34;},
+    std::string{&amp;#34;,&amp;#34;}
+  };
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::split_view&amp;lt;
+      std::ranges::owning_view&amp;lt;std::string&amp;gt;,
+      std::ranges::owning_view&amp;lt;std::string&amp;gt;
+    &amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_completion_signatures_of -- execution/transform_completion_signatures_of: fix markup</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/transform_completion_signatures_of.html"/>
      <id>d4f031709a452650ac165782c25b2a0cb3749e56:reference/execution/execution/transform_completion_signatures_of.md</id>
      <updated>2025-06-02T18:02:10+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/transform_completion_signatures_of.md b/reference/execution/execution/transform_completion_signatures_of.md
index a45d97324..84e1c6dbf 100644
--- a/reference/execution/execution/transform_completion_signatures_of.md
+++ b/reference/execution/execution/transform_completion_signatures_of.md
@@ -20,11 +20,12 @@ namespace std::exectution {
       AdditionalSignatures, SetValue, SetError, SetStopped&amp;gt;;
 }
 ```
+* sender[link sender.md]
 * env&amp;lt;&amp;gt;[link env.md]
 * valid-completion-signatures[link completion_signatures.md]
 * completion_signatures[link completion_signatures.md]
 * set_stopped_t()[link set_stopped.md]
-* sender_in[lin sender_in.md]
+* sender_in[link sender_in.md]
 * transform_completion_signatures[link transform_completion_signatures.md]
 * completion_signatures_of_t[link completion_signatures_of_t.md]
 * see below[italic]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>execution -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution.md b/reference/execution/execution.md
index b9cb37594..01255f417 100644
--- a/reference/execution/execution.md
+++ b/reference/execution/execution.md
@@ -143,8 +143,8 @@ Senderコンシューマは名前空間 `std::this_thread` で定義される。
 | 名前 | 説明 | 対応バージョン |
 |------|------|----------------|
 | [`execution::completion_signatures`](execution/completion_signatures.md) | 完了シグネチャ集合を表現する型 (class template) | C++26 |
-| [`execution::transform_completion_signatures`](execution/transform_completion_signatures.md.nolink) | 完了シグネチャを変換 (alias template) | C++26 |
-| [`execution::transform_completion_signatures_of`](execution/transform_completion_signatures_of.md.nolink) | 完了シグネチャを変換 (alias template) | C++26 |
+| [`execution::transform_completion_signatures`](execution/transform_completion_signatures.md) | 完了シグネチャ集合を変換 (alias template) | C++26 |
+| [`execution::transform_completion_signatures_of`](execution/transform_completion_signatures_of.md) | Senderの完了シグネチャ集合を変換 (alias template) | C++26 |
 | [`execution::run_loop`](execution/run_loop.md) | 単一スレッド上でのループ実行 (class) | C++26 |
 
 ### コルーチンユーティリティ
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_awaitable -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/as_awaitable.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/as_awaitable.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/as_awaitable.md b/reference/execution/execution/as_awaitable.md
index eede9fa1b..fa406534a 100644
--- a/reference/execution/execution/as_awaitable.md
+++ b/reference/execution/execution/as_awaitable.md
@@ -95,6 +95,13 @@ namespace std::execution {
 * exception_ptr[link /reference/exception/exception_ptr.md]
 * coroutine_handle[link /reference/coroutine/coroutine_handle.md]
 
+### 式`AS-EXCEPT-PTR`
+説明用の式`err`に対して`decltype((err))`を型`Err`としたとき、式`AS-EXCEPT-PTR(err)`を下記の通り定義する。
+
+- [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;Err&amp;gt;`が[`exception_ptr`](/reference/exception/exception_ptr.md)型と等しければ、`err`となる。このとき、事前条件として`!err == false`であること。
+- そうではなく、[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;Err&amp;gt;`が[`error_code`](/reference/system_error/error_code.md)型と等しければ、[`make_exception_ptr`](/reference/exception/make_exception_ptr.md)`(`[`system_error`](/reference/system_error/system_error.md)`(err))`となる。
+- そうでなければ、[`make_exception_ptr`](/reference/exception/make_exception_ptr.md)`(err)`となる。
+
 ### クラステンプレート`awaitable-receiver`
 説明専用のクラステンプレート`sender-awaitable&amp;lt;Sndr, Promise&amp;gt;::awaitable-receiver`は下記の通り定義される。
 
@@ -135,6 +142,7 @@ struct awaitable-receiver {
     rcvr.result-ptr-&amp;gt;template emplace&amp;lt;2&amp;gt;(AS-EXCEPT-PTR(err));
     rcvr.continuation.resume();
     ```
+    * AS-EXCEPT-PTR[italic]
     * template emplace[link /reference/variant/variant/emplace.md]
     * resume()[link /reference/coroutine/coroutine_handle/resume.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>connect -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/connect.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/connect.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/connect.md b/reference/execution/execution/connect.md
index 079f27adb..346172278 100644
--- a/reference/execution/execution/connect.md
+++ b/reference/execution/execution/connect.md
@@ -111,7 +111,7 @@ namespace std::execution {
 `C`型の`c`と[コルーチンPromise型](/lang/cpp20/coroutines.md)の左辺値`p`に対して、`await-result-type&amp;lt;C, Promise&amp;gt;`を`decltype(`[`GET-AWAITER`](../is-awaitable.md)`(c, p).`[`await_resume()`](/lang/cpp20/coroutines.md)`)`型とする。
 型`V`を`await-result-type&amp;lt;DS, connect-awaitable-promise&amp;gt;`とする。
 
-型`Sigs`を下記の通り定義する。
+[完了シグネチャ集合型](completion_signatures.md)`Sigs`を下記の通り定義する。
 
 ```cpp
 completion_signatures&amp;lt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gather-signatures -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/gather-signatures.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/gather-signatures.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/gather-signatures.md b/reference/execution/execution/gather-signatures.md
index aae12731b..df0e52cc7 100644
--- a/reference/execution/execution/gather-signatures.md
+++ b/reference/execution/execution/gather-signatures.md
@@ -38,6 +38,7 @@ using gather-signatures = /*see below*/
 - [`execution::value_types_of_t`](value_types_of_t.md)
 - [`execution::error_types_of_t`](error_types_of_t.md)
 - [`execution::sends_stopped`](sends_stopped.md)
+- [`execution::transform_completion_signatures`](transform_completion_signatures.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_completion_signatures -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_completion_signatures.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/get_completion_signatures.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_completion_signatures.md b/reference/execution/execution/get_completion_signatures.md
index f8838b3a3..1461fb267 100644
--- a/reference/execution/execution/get_completion_signatures.md
+++ b/reference/execution/execution/get_completion_signatures.md
@@ -46,7 +46,21 @@ namespace std::execution {
 
 ## カスタマイゼーションポイント
 - Sender`sndr`[変換後](transform_sender.md)の`new_sndr`に対して、`new_sndr.get_completion_signatures(env)`が返す型。
-- 変換後Senderの型`NewSndr`に対して、メンバ型`completion_signatures`。
+- 変換後Senderの型`NewSndr`に対して、メンバ型`NewSndr::completion_signatures`
+
+説明用の式`rcvr`を[`receiver`](receiver.md)のモデルである型`Rcvr`の右辺値、型`Sndr`を[`sender_in`](sender_in.md)`&amp;lt;Sndr,` [`env_of_t`](env_of_t.md)`&amp;lt;Rcvr&amp;gt;&amp;gt; == true`となる型とする。
+`Sigs...`を[`completion_signatures_of_t`](completion_signatures_of_t.md)`&amp;lt;Sndr,` [`env_of_t`](env_of_t.md)`&amp;lt;Rcvr&amp;gt;&amp;gt;`による[`completion_signatures`](completion_signatures.md)特殊化のテンプレートパラメータと定義する。
+`CSO`を完了関数とする。
+
+Sender型`Sndr`、もしくは式`CSO(rcvr, args...)`を呼び出す[Operation State](operation_state.md)が潜在的に例外送出するならば、`Sigs...`の完了シグネチャ`Sig`は次の式が`true`となるべき。
+
+```cpp
+MATCHING-SIG(decayed-typeof&amp;lt;CSO&amp;gt;(decltype(args)...), Sig)
+```
+* MATCHING-SIG[italic]
+* decayed-typeof[link /reference/functional/decayed-typeof.md]
+
+説明用の関数型`F1`, `F2`をそれぞれ`R1(Args1...)`, `R2(Args2...)`としたとき、説明専用の式`MATCHING-SIG(F1, F2)`は、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;R1(Args1&amp;amp;&amp;amp;...), R2(Args&amp;amp;&amp;amp;...)&amp;gt; == true`となる場合にかぎって`true`となる。
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>on -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/on.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/on.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/on.md b/reference/execution/execution/on.md
index 134e06588..80fd0b3da 100644
--- a/reference/execution/execution/on.md
+++ b/reference/execution/execution/on.md
@@ -128,7 +128,7 @@ transform_sender(
     * get_env[link get_env.md]
     * query-with-default[link query-with-default.md]
     * write-env[link write-env.md]
-    * SCHED-ENV[link scheduler.nolink]
+    * SCHED-ENV[link scheduler.md]
     * std::move[link /reference/utility/move.md]
 
 説明専用のクラス`not-a-scheduler`を未規定な空のクラス型、`not-a-sender`を下記の通り定義する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>receiver_of -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/receiver_of.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/receiver_of.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/receiver_of.md b/reference/execution/execution/receiver_of.md
index 9371cd1c7..fa3cf9514 100644
--- a/reference/execution/execution/receiver_of.md
+++ b/reference/execution/execution/receiver_of.md
@@ -103,9 +103,9 @@ int main()
 
 ## 関連項目
 - [`execution::receiver`](receiver.md)
-- [`execution::set_value_t`](set_value.md)
-- [`execution::set_error_t`](set_error.md)
-- [`execution::set_stopped_t`](set_stopped.md)
+- [`execution::set_value`](set_value.md)
+- [`execution::set_error`](set_error.md)
+- [`execution::set_stopped`](set_stopped.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/scheduler.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index 959ceaa34..0a456b15a 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -63,6 +63,7 @@ namespace std::execution {
 ```
 * set_value_t[link set_value.md]
 * sender_in[link sender_in.md]
+* MATCHING-SIG[link get_completion_signatures.md]
 * value_types_of_t[link value_types_of_t.md]
 * type_identity_t[link /reference/type_traits/true_type.md]
 
@@ -81,13 +82,13 @@ Scheduler型のデストラクタは、[`schedule`](schedule.md)が返すSender
 
 
 ## 説明専用エンティティ
-### `SCHED-ATTRS`
+### 式`SCHED-ATTRS`
 説明用のScheduler`sch`に対して、式`SCHED-ATTRS(sch)`は[`queryable`](../queryable.md)を満たす型の式`o1`となり、下記を満たす。
 
 - 型`Tag`が[`set_value_t`](set_value.md)もしくは[`set_stopped_t`](set_stopped.md)のとき、式`o1.query(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;Tag&amp;gt;)`の型および値が`sch`と等しい。
 - 式`o1.query(`[`get_domain`](get_domain.md)`)`は`sch.query(`[`get_domain`](get_domain.md)`)`と等価。
 
-### `SCHED-ENV`
+### 式`SCHED-ENV`
 説明用のScheduler`sch`に対して、式`SCHED-ENV(sch)`は[`queryable`](../queryable.md)を満たす型の式`o2`となり、下記を満たす。
 
 - 式`o2.query(`[`get_scheduler`](get_scheduler.md)`)`は、型および値が`sch`と等しい右辺値。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sends_stopped -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/sends_stopped.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/sends_stopped.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/sends_stopped.md b/reference/execution/execution/sends_stopped.md
index 810f929f8..065889e5d 100644
--- a/reference/execution/execution/sends_stopped.md
+++ b/reference/execution/execution/sends_stopped.md
@@ -16,6 +16,7 @@ namespace std::execution {
 ```
 * env&amp;lt;&amp;gt;[link env.md]
 * sender_in[link sender_in.md]
+* type-list[link type-list.md]
 * gather-signatures[link gather-signatures.md]
 * set_stopped_t[link set_stopped.md]
 * completion_signatures_of_t[link completion_signatures_of_t.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_error -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/set_error.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/set_error.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/set_error.md b/reference/execution/execution/set_error.md
index 97867367a..9b67e51c8 100644
--- a/reference/execution/execution/set_error.md
+++ b/reference/execution/execution/set_error.md
@@ -77,8 +77,8 @@ int main()
 
 ## 関連項目
 - [`execution::receiver`](receiver.md)
-- [`execution::set_value_t`](set_value.md)
-- [`execution::set_stopped_t`](set_stopped.md)
+- [`execution::set_value`](set_value.md)
+- [`execution::set_stopped`](set_stopped.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_stopped -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/set_stopped.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/set_stopped.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/set_stopped.md b/reference/execution/execution/set_stopped.md
index 8514e25fe..1dff3b1ba 100644
--- a/reference/execution/execution/set_stopped.md
+++ b/reference/execution/execution/set_stopped.md
@@ -77,8 +77,8 @@ int main()
 
 ## 関連項目
 - [`execution::receiver`](receiver.md)
-- [`execution::set_value_t`](set_value.md)
-- [`execution::set_error_t`](set_error.md)
+- [`execution::set_value`](set_value.md)
+- [`execution::set_error`](set_error.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_value -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/set_value.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/set_value.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/set_value.md b/reference/execution/execution/set_value.md
index e62d9f1af..b404c9aa7 100644
--- a/reference/execution/execution/set_value.md
+++ b/reference/execution/execution/set_value.md
@@ -34,13 +34,13 @@ namespace std::execution {
 
 
 ## 説明専用エンティティ
-### `SET-VALUE`
+### 式`SET-VALUE`
 説明用の式`rcvr`, `expr`に対して、説明専用の式`SET-VALUE(rcvr, expr)`は下記と等価である。
 
 - `expr`の型が`void`のとき、式`(expr, set_value(`[`std::move`](/reference/utility/move.md)`(rcvr)))`
 - そうでなければ、式`set_value(`[`std::move`](/reference/utility/move.md)`(rcvr), expr)`
 
-### `TRY-EVAL`
+### 式`TRY-EVAL`
 説明用の式`rcvr`, `expr`に対して、説明専用の式`TRY-EVAL(rcvr, expr)`は下記と等価である。
 
 - `expr`が潜在的に例外送出するならば、下記と等価。
@@ -58,14 +58,14 @@ namespace std::execution {
 
 - そうでなければ、式`expr`
 
-### `TRY-SET-VALUE`
+### 式`TRY-SET-VALUE`
 説明用の式`rcvr`, `expr`に対して、説明専用の式`TRY-SET-VALUE(rcvr, expr)`は`rcvr`が1回だけ評価されることを除いて、下記と等価。
 
 ```cpp
 TRY-EVAL(rcvr, SET-VALUE(rcvr, expr))
 ```
 
-### `SET-VALUE-SIG`
+### 型`SET-VALUE-SIG`
 説明用の型`T`に対して、説明専用の型`SET-VALUE-SIG(T)`を下記の通り定義する。
 
 - `T`がCV修飾された`void`ならば、型`set_value_t()`
@@ -116,8 +116,8 @@ int main()
 
 ## 関連項目
 - [`execution::receiver`](receiver.md)
-- [`execution::set_error_t`](set_error.md)
-- [`execution::set_stopped_t`](set_stopped.md)
+- [`execution::set_error`](set_error.md)
+- [`execution::set_stopped`](set_stopped.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>split -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/split.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/split.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/split.md b/reference/execution/execution/split.md
index 08b1e35d4..3117c5e3b 100644
--- a/reference/execution/execution/split.md
+++ b/reference/execution/execution/split.md
@@ -105,7 +105,7 @@ void operator()(local-state&amp;lt;Sndr, Rcvr&amp;gt;&amp;amp; state, Rcvr&amp;amp; rcvr) const noexcept;
 
 
 ## 説明専用エンティティ
-### `local-state`クラステンプレート
+### クラステンプレート`local-state`
 
 ```cpp
 namespace std::execution {
@@ -184,8 +184,7 @@ void notify() noexcept override;
     * apply[link /reference/tuple/apply.md]
     * std::move[link /reference/utility/move.md]
 
-
-### `split-receiver`クラステンプレート
+### クラステンプレート`split-receiver`
 
 ```cpp
 namespace std::execution {
@@ -248,8 +247,7 @@ namespace std::execution {
 * get_stop_token_t[link ../get_stop_token.md]
 * get_token()[link /reference/stop_token/inplace_stop_source/get_token.md]
 
-
-### `shared-state`クラステンプレート
+### クラステンプレート`shared-state`
 
 ```cpp
 namespace std::execution {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tag_of_t -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/tag_of_t.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/tag_of_t.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/tag_of_t.md b/reference/execution/execution/tag_of_t.md
index 83d4e4bd4..56ae80990 100644
--- a/reference/execution/execution/tag_of_t.md
+++ b/reference/execution/execution/tag_of_t.md
@@ -10,6 +10,7 @@ namespace std::execution {
   using tag_of_t = see below;
 }
 ```
+* sender[link sender.md]
 * see below[italic]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_completion_signatures -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/transform_completion_signatures.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/transform_completion_signatures.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/transform_completion_signatures.md b/reference/execution/execution/transform_completion_signatures.md
new file mode 100644
index 000000000..072b2da5d
--- /dev/null
+++ b/reference/execution/execution/transform_completion_signatures.md
@@ -0,0 +1,87 @@
+# transform_completion_signatures
+* execution[meta header]
+* std::execution[meta namespace]
+* type-alias[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::exectution {
+  template&amp;lt;
+    valid-completion-signatures InputSignatures,
+    valid-completion-signatures AdditionalSignatures = completion_signatures&amp;lt;&amp;gt;,
+    template&amp;lt;class...&amp;gt; class SetValue = default-set-value,
+    template&amp;lt;class&amp;gt; class SetError = default-set-error,
+    valid-completion-signatures SetStopped = completion_signatures&amp;lt;set_stopped_t()&amp;gt;&amp;gt;
+  using transform_completion_signatures = completion_signatures&amp;lt;see below&amp;gt;;
+}
+```
+* valid-completion-signatures[link completion_signatures.md]
+* completion_signatures[link completion_signatures.md]
+* set_stopped_t()[link set_stopped.md]
+* see below[italic]
+
+## 概要
+[完了シグネチャ集合](completion_signatures.md)から別の完了シグネチャ集合へ変換するエイリアステンプレート。
+
+テンプレートパラメータとして完了シグネチャ集合と、各完了シグネチャに対して型変更を適用する複数のテンプレート引数をとり、[`completion_signatures`](completion_signatures.md)の新しい特殊化を生成する。
+
+- `InputSignatures` : 変換元の入力完了シグネチャ集合
+- `AdditionalSignatures` : 追加される完了シグネチャ集合（下記3種の変換適用後に追加される）
+- `SetValue` : [値完了シグネチャ](set_value.md)集合に適用する型変換メタ操作
+- `SetError` : [エラー完了シグネチャ](set_value.md)集合に適用する型変換メタ操作
+- `SetStopped` : [停止完了シグネチャ](set_stopped.md)を置換する完了シグネチャ集合
+
+
+### 詳細仕様
+説明専用のエイリアステンプレート`default-set-value`, `default-set-error`を次の通り定義する。
+```cpp
+template&amp;lt;class... As&amp;gt;
+using default-set-value =
+  completion_signatures&amp;lt;set_value_t(As...)&amp;gt;;
+
+template&amp;lt;class Err&amp;gt;
+using default-set-error =
+  completion_signatures&amp;lt;set_error_t(Err)&amp;gt;;
+```
+* completion_signatures[link completion_signatures.md]
+* set_value_t[link set_value.md]
+* set_error_t[link set_error.md]
+
+説明用のパック型`As`に対して、エイリアステンプレート`SetValue&amp;lt;As...&amp;gt;`を不適格、もしくは[`valid-completion-signatures`](completion_signatures.md)`&amp;lt;SetValue&amp;lt;As...&amp;gt;&amp;gt;`を満たす型とする。
+説明用の型`Err`に対して、エイリアステンプレート`SetError&amp;lt;Err&amp;gt;`を不適格、もしくは[`valid-completion-signatures`](completion_signatures.md)`&amp;lt;SetError&amp;lt;Error&amp;gt;&amp;gt;`を満たす型とする。
+
+説明用のパック`Vs`を、[`gather-signatures`](gather-signatures.md)`&amp;lt;`[`set_value_t`](set_value.md)`, InputSignatures, SetValue,` [`type-list`](type-list.md)`&amp;gt;`で得られる`type-list`の型パラメータパックとする。
+
+説明用のパック`Es`を、[`gather-signatures`](gather-signatures.md)`&amp;lt;`[`set_error_t`](set_error.md)`, InputSignatures,` [`type_identity_t`](/reference/type_traits/type_identity.md)`, error-list&amp;gt;`で得られる[`type-list`](type-list.md)の型パラメータパックとする。ここでエイリアステンプレート`error-list&amp;lt;Ts...&amp;gt;`は`type-list&amp;lt;SetError&amp;lt;Ts&amp;gt;...&amp;gt;`とする。
+
+[`gather-signatures`](gather-signatures.md)`&amp;lt;`[`set_stopped_t`](set_stopped.md)`, InputSignatures, type-list, type-list&amp;gt;`が[`type-list&amp;lt;&amp;gt;`](type-list.md)となるならば、説明用のパック`Ss`を[`completion_signatures&amp;lt;&amp;gt;`](completion_signatures.md)とする。そうでなければ、`Ss`を`SetStopped`とする。
+
+上記いずれかの型が不適格となる場合、下記は不適格となる。
+
+```cpp
+transform_completion_signatures&amp;lt;
+  InputSignatures, AdditionalSignatures,
+  SetValue, SetError, SetStopped&amp;gt;
+```
+
+そうでなければ、集合`AdditionalSignatures`, `Vs...`, `Es...`, `Ss`に含まれる[`completion_signatures`](completion_signatures.md)特殊化のテンプレート引数型の一意な集合を`Sig...`としたとき、`transform_completion_signatures`は[`completion_signatures`](completion_signatures.md)`&amp;lt;Sigs...&amp;gt;`のエイリアスとなる。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::completion_signatures`](completion_signatures.md)
+- [`execution::transform_completion_signatures_of`](transform_completion_signatures_of.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>transform_completion_signatures_of -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/transform_completion_signatures_of.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/transform_completion_signatures_of.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/transform_completion_signatures_of.md b/reference/execution/execution/transform_completion_signatures_of.md
new file mode 100644
index 000000000..a45d97324
--- /dev/null
+++ b/reference/execution/execution/transform_completion_signatures_of.md
@@ -0,0 +1,53 @@
+# transform_completion_signatures_of
+* execution[meta header]
+* std::execution[meta namespace]
+* type-alias[meta id-type]
+* cpp26[meta cpp]
+
+```cpp
+namespace std::exectution {
+  template&amp;lt;
+    sender Sndr,
+    class Env = env&amp;lt;&amp;gt;,
+    valid-completion-signatures AdditionalSignatures = completion_signatures&amp;lt;&amp;gt;,
+    template&amp;lt;class...&amp;gt; class SetValue = see below,
+    template&amp;lt;class&amp;gt; class SetError = see below,
+    valid-completion-signatures SetStopped = completion_signatures&amp;lt;set_stopped_t()&amp;gt;&amp;gt;
+      requires sender_in&amp;lt;Sndr, Env&amp;gt;
+  using transform_completion_signatures_of =
+    transform_completion_signatures&amp;lt;
+      completion_signatures_of_t&amp;lt;Sndr, Env&amp;gt;,
+      AdditionalSignatures, SetValue, SetError, SetStopped&amp;gt;;
+}
+```
+* env&amp;lt;&amp;gt;[link env.md]
+* valid-completion-signatures[link completion_signatures.md]
+* completion_signatures[link completion_signatures.md]
+* set_stopped_t()[link set_stopped.md]
+* sender_in[lin sender_in.md]
+* transform_completion_signatures[link transform_completion_signatures.md]
+* completion_signatures_of_t[link completion_signatures_of_t.md]
+* see below[italic]
+
+## 概要
+[Sender型](sender.md)`Sndr`が[環境](../queryable.md)`Env`において非同期操作を作成できるとき、Senderの[完了シグネチャ集合](get_completion_signatures.md)から別の完了シグネチャ集合へ変換するエイリアステンプレート。
+
+
+## バージョン
+### 言語
+- C++26
+
+### 処理系
+- [Clang](/implementation.md#clang): ??
+- [GCC](/implementation.md#gcc): ??
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): ??
+
+
+## 関連項目
+- [`execution::get_completion_signatures`](get_completion_signatures.md)
+- [`execution::transform_completion_signatures`](transform_completion_signatures.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>type-list -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/type-list.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/type-list.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/type-list.md b/reference/execution/execution/type-list.md
new file mode 100644
index 000000000..be6b38550
--- /dev/null
+++ b/reference/execution/execution/type-list.md
@@ -0,0 +1,27 @@
+# type-list
+* execution[meta header]
+* class template[meta id-type]
+* std::execution[meta namespace]
+* cpp26[meta cpp]
+
+```cpp
+template&amp;lt;class... Ts&amp;gt;
+struct type-list;  // exposition only
+```
+
+## 備考
+`type-list`は、実行制御ライブラリの仕様定義で用いられる説明専用のクラステンプレートである。
+
+
+## バージョン
+### 言語
+- C++26
+
+
+## 関連項目
+- [`execution::sends_stopped`](sends_stopped.md)
+- [`execution::transform_completion_signatures`](transform_completion_signatures.md)
+
+
+## 参照
+- [P2300R10 `std::execution`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2300r10.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>variant-or-empty -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/variant-or-empty.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/variant-or-empty.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/variant-or-empty.md b/reference/execution/execution/variant-or-empty.md
index 81dbe5e7b..c8efdb028 100644
--- a/reference/execution/execution/variant-or-empty.md
+++ b/reference/execution/execution/variant-or-empty.md
@@ -17,7 +17,7 @@ namespace std::execution {
 
 型`variant-or-empty&amp;lt;Ts...&amp;gt;`は下記の通り定義される。
 
-- `sizeof...(Ts) &amp;gt; 0`ならば、説明用のパック`Us`を[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;Ts&amp;gt;...`から重複削除したものとしたとき、`variant-or-empty&amp;lt;Ts...&amp;gt;`は[`variant`](/reference/variant/variant.md)[`&amp;lt;Us...&amp;gt;`]型となる。
+- `sizeof...(Ts) &amp;gt; 0`ならば、説明用のパック`Us`を[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;Ts&amp;gt;...`から重複削除したものとしたとき、`variant-or-empty&amp;lt;Ts...&amp;gt;`は[`variant`](/reference/variant/variant.md)`&amp;lt;Us...&amp;gt;`型となる。
 - そうでなければ、`variant-or-empty&amp;lt;Ts...&amp;gt;`は下記の説明専用クラス型となる。
 
     ```cpp
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>when_all -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/when_all.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/execution/when_all.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/when_all.md b/reference/execution/execution/when_all.md
index bfa79b04f..31cff92e1 100644
--- a/reference/execution/execution/when_all.md
+++ b/reference/execution/execution/when_all.md
@@ -195,8 +195,7 @@ try {
 
 
 ## 説明専用エンティティ
-説明専用のコンセプト`max-1-sender-in`, 列挙型`disposition`, クラス`make-state`は、それぞれ下記の通り定義される。
-
+### コンセプト`max-1-sender-in`
 ```cpp
 template&amp;lt;class Sndr, class Env&amp;gt;
 concept max-1-sender-in = sender_in&amp;lt;Sndr, Env&amp;gt; &amp;amp;&amp;amp;  // exposition only
@@ -207,10 +206,12 @@ concept max-1-sender-in = sender_in&amp;lt;Sndr, Env&amp;gt; &amp;amp;&amp;amp;  // exposition only
 * tuple_size_v[link /reference/tuple/tuple_size.md]
 * tuple[link /reference/tuple/tuple.md]
 
+### 列挙型`disposition`
 ```cpp
 enum class disposition { started, error, stopped };  // exposition only
 ```
 
+### クラステンプレート`make-state`
 ```cpp
 template&amp;lt;class Rcvr&amp;gt;
 struct make-state {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>queryable -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/queryable.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/queryable.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/queryable.md b/reference/execution/queryable.md
index f0852bfc7..590a415b7 100644
--- a/reference/execution/queryable.md
+++ b/reference/execution/queryable.md
@@ -45,13 +45,13 @@ concept queryable = destructible&amp;lt;T&amp;gt;;
 
 
 ## 説明専用エンティティ
-### `MAKE-ENV`
+### 式`MAKE-ENV`
 説明用のクエリオブジェクト`q`と式`v`に対して、式`MAKE-ENV(q, v)`は`queryable`を満たす型の式`env`となり、下記を満たす。
 
 - `env.query(q)`の結果が`v`と等しい。
 - 明に規定されない限り、`env`が有効の間は`env.query(q)`のオブジェクトも有効である。
 
-### `JOIN-ENV`
+### 式`JOIN-ENV`
 説明用のクエリ可能オブジェクト`env1`, `env2`、クエリオブジェクト`q`、パック式`as`に対して、式`JOIN-ENV(env1, env2)`は`queryable`を満たす型の式`env3`となり、式`env3.query(q, as...)`は下記と等価である。
 
 - 適格であるならば、式`env1.query(q, as...)`
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sync-wait-receiver -- execution: transform_completion_signatures(_of) (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/this_thread/sync-wait-receiver.html"/>
      <id>4ae7b92cd7a2f7d38cc6c2a27ee3bf1136f08c62:reference/execution/this_thread/sync-wait-receiver.md</id>
      <updated>2025-06-02T17:53:13+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/this_thread/sync-wait-receiver.md b/reference/execution/this_thread/sync-wait-receiver.md
index b105d2814..baa38762d 100644
--- a/reference/execution/this_thread/sync-wait-receiver.md
+++ b/reference/execution/this_thread/sync-wait-receiver.md
@@ -69,18 +69,13 @@ template&amp;lt;class Error&amp;gt;
 void set_error(Error&amp;amp;&amp;amp; err) &amp;amp;&amp;amp; noexcept
 ```
 
-説明用の式`err`に対して`decltype((err))`を型`Err`としたとき、式`AS-EXCEPT-PTR(err)`を下記の通り定義する。
-
-- [`decay_t`](/reference/type_traits/decay.md)`&amp;lt;Err&amp;gt;`が[`exception_ptr`](/reference/exception/exception_ptr.md)型と等しければ、`err`となる。このとき、事前条件として`!err == false`であること。
-- そうではなく、[`decay_t`](/reference/type_traits/decay.md)`&amp;lt;Err&amp;gt;`が[`error_code`](/reference/system_error/error_code.md)型と等しければ、[`make_exception_ptr`](/reference/exception/make_exception_ptr.md)`(`[`system_error`](/reference/system_error/system_error.md)`(err))`となる。
-- そうでなければ、[`make_exception_ptr`](/reference/exception/make_exception_ptr.md)`(err)`となる。
-
 効果 : 下記と等価
 
 ```cpp
 state-&amp;gt;error = AS-EXCEPT-PTR(std::forward&amp;lt;Error&amp;gt;(err));
 state-&amp;gt;loop.finish();
 ```
+* AS-EXCEPT-PTR[link ../execution/as_awaitable.md]
 * finish()[link ../execution/run_loop/finish.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lazy_split_view -- lazy_split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view.html"/>
      <id>0f03a4a16538a5448d67af17387b8233e5bc0984:reference/ranges/lazy_split_view.md</id>
      <updated>2025-06-02T17:50:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view.md b/reference/ranges/lazy_split_view.md
index da299f76e..34115a424 100644
--- a/reference/ranges/lazy_split_view.md
+++ b/reference/ranges/lazy_split_view.md
@@ -78,10 +78,10 @@ concept tiny-range = sized_range&amp;lt;R&amp;gt; &amp;amp;&amp;amp;
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](lazy_split_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](lazy_split_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`begin`](lazy_split_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](lazy_split_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](lazy_split_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`base`](lazy_split_view/base.md)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](lazy_split_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](lazy_split_view/end.md)                       | 番兵を取得する                   | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -98,7 +98,7 @@ concept tiny-range = sized_range&amp;lt;R&amp;gt; &amp;amp;&amp;amp;
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](lazy_split_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](lazy_split_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- lazy_split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view/base.html"/>
      <id>0f03a4a16538a5448d67af17387b8233e5bc0984:reference/ranges/lazy_split_view/base.md</id>
      <updated>2025-06-02T17:50:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view/base.md b/reference/ranges/lazy_split_view/base.md
new file mode 100644
index 000000000..fc98d7647
--- /dev/null
+++ b/reference/ranges/lazy_split_view/base.md
@@ -0,0 +1,68 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* lazy_split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+  std::vector&amp;lt;int&amp;gt; pattern = {4, 5};
+
+  std::ranges::lazy_split_view r{v, pattern};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- lazy_split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view/begin.html"/>
      <id>0f03a4a16538a5448d67af17387b8233e5bc0984:reference/ranges/lazy_split_view/begin.md</id>
      <updated>2025-06-02T17:50:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view/begin.md b/reference/ranges/lazy_split_view/begin.md
new file mode 100644
index 000000000..a532da7c7
--- /dev/null
+++ b/reference/ranges/lazy_split_view/begin.md
@@ -0,0 +1,63 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* lazy_split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           forward_range&amp;lt;const Pattern&amp;gt;;  // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+- (1), (2) : `lazy_split_view`の先頭を指すイテレータを返す。このイテレータは部分Rangeを指し、外側のRangeが空でない場合、最初の部分Rangeを指す。外側のRangeが空の場合、[`end()`](end.md)と等価なイテレータを返す。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+  std::vector&amp;lt;int&amp;gt; pattern = {4, 5};
+
+  std::ranges::lazy_split_view r{v, pattern};
+
+  auto it = r.begin();
+
+  // 最初の部分Rangeを取得
+  auto first_subrange = *it;
+  for (int n : first_subrange) {
+    std::cout &amp;lt;&amp;lt; n;
+  }
+  std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+123
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- lazy_split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view/end.html"/>
      <id>0f03a4a16538a5448d67af17387b8233e5bc0984:reference/ranges/lazy_split_view/end.md</id>
      <updated>2025-06-02T17:50:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view/end.md b/reference/ranges/lazy_split_view/end.md
new file mode 100644
index 000000000..5ab73514d
--- /dev/null
+++ b/reference/ranges/lazy_split_view/end.md
@@ -0,0 +1,66 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* lazy_split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           forward_range&amp;lt;const Pattern&amp;gt;;  // (2) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1), (2) : `lazy_split_view`の番兵を返す
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+  std::vector&amp;lt;int&amp;gt; pattern = {4, 5};
+
+  std::ranges::lazy_split_view r{v, pattern};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    auto subrange = *it;
+    for (int n : subrange) {
+      std::cout &amp;lt;&amp;lt; n;
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+    ++it;
+  }
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+123
+6789
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- lazy_split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view/op_constructor.html"/>
      <id>0f03a4a16538a5448d67af17387b8233e5bc0984:reference/ranges/lazy_split_view/op_constructor.md</id>
      <updated>2025-06-02T17:50:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view/op_constructor.md b/reference/ranges/lazy_split_view/op_constructor.md
new file mode 100644
index 000000000..7492de448
--- /dev/null
+++ b/reference/ranges/lazy_split_view/op_constructor.md
@@ -0,0 +1,74 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* lazy_split_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+lazy_split_view()
+  requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp; default_initializable&amp;lt;Pattern&amp;gt; = default; // (1) C++20
+
+constexpr explicit lazy_split_view(V base, Pattern pattern);                      // (2) C++20
+
+template&amp;lt;input_range R&amp;gt;
+  requires constructible_from&amp;lt;V, views::all_t&amp;lt;R&amp;gt;&amp;gt; &amp;amp;&amp;amp; constructible_from&amp;lt;Pattern, single_view&amp;lt;range_value_t&amp;lt;R&amp;gt;&amp;gt;&amp;gt;
+constexpr explicit lazy_split_view(R&amp;amp;&amp;amp; r, range_value_t&amp;lt;R&amp;gt; e);                   // (3) C++20
+```
+
+## 概要
+
+[`lazy_split_view`](../lazy_split_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewとパターンを指定して構築
+- (3) : 元となるRangeと区切り要素を指定して構築
+
+## 効果
+
+- (1) : `base_`と`pattern_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`pattern_`を`std::move(pattern)`で初期化する
+- (3) : `base_`を`views::all(std::forward&amp;lt;R&amp;gt;(r))`で、`pattern_`を`views::single(std::move(e))`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+  std::vector&amp;lt;int&amp;gt; pattern = {4, 5};
+
+  // (2) パターンを指定して構築
+  std::ranges::lazy_split_view view1{v, pattern};
+  
+  // (3) 区切り要素を指定して構築
+  std::ranges::lazy_split_view view2{v, 5};
+
+  for (auto inner_range : view1) {
+    for (int n : inner_range) {
+      std::cout &amp;lt;&amp;lt; n;
+    }
+    std::cout &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  }
+}
+```
+* lazy_split_view[color ff0000]
+
+### 出力
+```
+123
+6789
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- lazy_split_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/lazy_split_view/op_deduction_guide.html"/>
      <id>0f03a4a16538a5448d67af17387b8233e5bc0984:reference/ranges/lazy_split_view/op_deduction_guide.md</id>
      <updated>2025-06-02T17:50:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/lazy_split_view/op_deduction_guide.md b/reference/ranges/lazy_split_view/op_deduction_guide.md
new file mode 100644
index 000000000..5e24f2dd7
--- /dev/null
+++ b/reference/ranges/lazy_split_view/op_deduction_guide.md
@@ -0,0 +1,78 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class P&amp;gt;
+  lazy_split_view(R&amp;amp;&amp;amp;, P&amp;amp;&amp;amp;)
+    -&amp;gt; lazy_split_view&amp;lt;
+         views::all_t&amp;lt;R&amp;gt;,
+         views::all_t&amp;lt;P&amp;gt;
+       &amp;gt;;                  // (1) C++20
+
+  template&amp;lt;input_range R&amp;gt;
+  lazy_split_view(R&amp;amp;&amp;amp;, range_value_t&amp;lt;R&amp;gt;)
+    -&amp;gt; lazy_split_view&amp;lt;
+         views::all_t&amp;lt;R&amp;gt;,
+         single_view&amp;lt;range_value_t&amp;lt;R&amp;gt;&amp;gt;
+       &amp;gt;;                  // (2) C++20
+}
+```
+* single_view[link /reference/ranges/single_view.md]
+
+## 概要
+
+[`lazy_split_view`](../lazy_split_view.md)クラステンプレートの型推論補助。
+
+- (1) : 元のRangeとパターンが暗黙的に[all view](../all.md)でラップされる
+- (2) : 元のRangeが[all view](../all.md)、区切り要素が[`single_view`](../single_view.md)でラップされる
+
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4, 5, 6, 7, 8, 9};
+  std::vector&amp;lt;int&amp;gt; pattern = {4, 5};
+
+  // Rangeとパターン
+  std::ranges::lazy_split_view r1{v, pattern};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::lazy_split_view&amp;lt;
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;
+    &amp;gt;
+  &amp;gt;);
+
+  // Rangeと区切り要素
+  std::ranges::lazy_split_view r2{v, 5};
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::lazy_split_view&amp;lt;
+      std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;,
+      std::ranges::single_view&amp;lt;int&amp;gt;
+    &amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ??
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
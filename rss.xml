<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-09-08T07:03:56.868295</updated>
  <id>24daa309-747e-49c7-8e19-42b89c15e778</id>

  
    <entry>
      <title>weibull_distribution -- weibull_distribution : 参考文献へのリンクを修正 #804</title>
      <link href="https://cpprefjp.github.io/reference/random/weibull_distribution.html"/>
      <id>b12802c268526bce0a16379ee29c0d615cb0f83e:reference/random/weibull_distribution.md</id>
      <updated>2020-09-08T15:59:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/weibull_distribution.md b/reference/random/weibull_distribution.md
index f0cf2ea31..51d0a5e77 100644
--- a/reference/random/weibull_distribution.md
+++ b/reference/random/weibull_distribution.md
@@ -128,5 +128,5 @@ int main()
 ### 参考
 - [ワイブル分布 - Wikipedia](https://ja.wikipedia.org/wiki/ワイブル分布)
 - [ワイブル分布 = NtRand](http://www.ntrand.com/jp/weibull-distribution/)
-- [疲労や破壊現象とワイブル分布](http://www.mogami-wire.co.jp/notes/weibull.html)
+- [疲労や破壊現象とワイブル分布](http://www.mogami.com/notes/weibull.html)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lock_guard -- lock_guard, (unique|shared)_lock : Scoped Lockingパターンのドキュメントへのリンクを修正 #804</title>
      <link href="https://cpprefjp.github.io/reference/mutex/lock_guard.html"/>
      <id>63f721cf1fa3cb2f4e88a16450e167ee7c908855:reference/mutex/lock_guard.md</id>
      <updated>2020-09-08T15:58:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mutex/lock_guard.md b/reference/mutex/lock_guard.md
index d53611b78..6c5effa02 100644
--- a/reference/mutex/lock_guard.md
+++ b/reference/mutex/lock_guard.md
@@ -12,7 +12,7 @@ namespace std {
 ```
 
 ## 概要
-`lock_guard`は、ミューテックスの`lock()`/`unlock()`処理をコンストラクタとデストラクタで確実に実行するためのクラスである。このクラスは通常、メンバ変数もしくはグローバル変数としてもつミューテックスオブジェクトに対し、ブロックスコープの先頭で`lock()`を呼び出し、同ブロックスコープを抜ける際に`unlock()`を確実に呼び出すために使用される。この手法は、[Scoped Locking Pattern](http://www.cs.wustl.edu/~schmidt/PDF/ScopedLocking.pdf)として知られている。
+`lock_guard`は、ミューテックスの`lock()`/`unlock()`処理をコンストラクタとデストラクタで確実に実行するためのクラスである。このクラスは通常、メンバ変数もしくはグローバル変数としてもつミューテックスオブジェクトに対し、ブロックスコープの先頭で`lock()`を呼び出し、同ブロックスコープを抜ける際に`unlock()`を確実に呼び出すために使用される。この手法は、[Scoped Locking Pattern](https://www.dre.vanderbilt.edu/~schmidt/PDF/ScopedLocking.pdf)として知られている。
 
 テンプレートパラメータ`Mutex`は、`lock()`/`unlock()`メンバ関数を持つあらゆるミューテックスクラスを扱うためのものである。ミューテックス型をパラメータ化するScoped Locking手法は、[Strategized Locking Pattern](https://wiki.hsr.ch/PnProg/files/StrategizedLocking.pdf)として知られている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unique_lock -- lock_guard, (unique|shared)_lock : Scoped Lockingパターンのドキュメントへのリンクを修正 #804</title>
      <link href="https://cpprefjp.github.io/reference/mutex/unique_lock.html"/>
      <id>63f721cf1fa3cb2f4e88a16450e167ee7c908855:reference/mutex/unique_lock.md</id>
      <updated>2020-09-08T15:58:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/mutex/unique_lock.md b/reference/mutex/unique_lock.md
index 73b746d47..0bb2c69d7 100644
--- a/reference/mutex/unique_lock.md
+++ b/reference/mutex/unique_lock.md
@@ -14,7 +14,7 @@ namespace std {
 ## 概要
 `unique_lock`は、ミューテックスの`lock()`／`unlock()`処理を、コンストラクタとデストラクタで確実に実行するためのクラスである。
 
-このクラスは通常、メンバ変数もしくはグローバル変数としてもつミューテックスオブジェクトに対し、関数内の先頭で`lock()`、関数を抜ける際に`unlock()`を確実に呼び出すために使用される。この手法は、[Scoped Locking Pattern](http://www.cs.wustl.edu/~schmidt/PDF/ScopedLocking.pdf)として知られている。
+このクラスは通常、メンバ変数もしくはグローバル変数としてもつミューテックスオブジェクトに対し、関数内の先頭で`lock()`、関数を抜ける際に`unlock()`を確実に呼び出すために使用される。この手法は、[Scoped Locking Pattern](https://www.dre.vanderbilt.edu/~schmidt/PDF/ScopedLocking.pdf)として知られている。
 
 テンプレートパラメータ`Mutex`は、`lock()`／`unlock()`メンバ関数を持つあらゆるミューテックスクラスを扱うためのものである。ミューテックス型をパラメータ化するScoped Locking手法は、[Strategized Locking Pattern](https://wiki.hsr.ch/PnProg/files/StrategizedLocking.pdf)として知られている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shared_lock -- lock_guard, (unique|shared)_lock : Scoped Lockingパターンのドキュメントへのリンクを修正 #804</title>
      <link href="https://cpprefjp.github.io/reference/shared_mutex/shared_lock.html"/>
      <id>63f721cf1fa3cb2f4e88a16450e167ee7c908855:reference/shared_mutex/shared_lock.md</id>
      <updated>2020-09-08T15:58:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/shared_mutex/shared_lock.md b/reference/shared_mutex/shared_lock.md
index f08328930..a79cac12a 100644
--- a/reference/shared_mutex/shared_lock.md
+++ b/reference/shared_mutex/shared_lock.md
@@ -19,7 +19,7 @@ namespace std {
 - 排他ロック(書き込みロック、`lock()`／`unlock()`)を自動的に手放すために[`lock_guard`](/reference/mutex/lock_guard.md)クラス、[`unique_lock`](/reference/mutex/unique_lock.md)クラスを使用する。
 - 共有ロック(読み込みロック、`lock_shared()`／`unlock_shared()`)を自動的に手放すために、このクラスを使用する。
 
-このクラスは、メンバ変数で保持しているミューテックスオブジェクトを、メンバ関数のスコープでロック取得し、手放すというようにして使用する。この手法は、[Scoped Locking Pattern](http://www.cs.wustl.edu/~schmidt/PDF/ScopedLocking.pdf)として知られている。
+このクラスは、メンバ変数で保持しているミューテックスオブジェクトを、メンバ関数のスコープでロック取得し、手放すというようにして使用する。この手法は、[Scoped Locking Pattern](https://www.dre.vanderbilt.edu/~schmidt/PDF/ScopedLocking.pdf)として知られている。
 
 テンプレートパラメータ`Mutex`は、`lock_shared()`／`unlock_shared()`メンバ関数を持つあらゆるミューテックスクラスを扱うためのものである。ミューテックス型をパラメータ化するScoped Locking手法は、[Strategized Locking Pattern](https://wiki.hsr.ch/PnProg/files/StrategizedLocking.pdf)として知られている。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>system_error -- &lt;system_error&gt; : Boost.Systemのリンク切れを修正</title>
      <link href="https://cpprefjp.github.io/reference/system_error.html"/>
      <id>7c7fd23105f82b11d1da5af6e145f720ae07fee2:reference/system_error.md</id>
      <updated>2020-09-08T15:55:12+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;system_error&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;system_error&lt;/span&gt;&lt;span class=&#34;cpp cpp11&#34; title=&#34;C++11で追加&#34;&gt;(C++11)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;system_error&amp;gt;&lt;/code&gt;ヘッダでは、OSが出力するエラーを扱う機能を提供する。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_category.html&#34;&gt;error_category&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;エラーを分類するための基底クラス(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/generic_category.html&#34;&gt;generic_category&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;汎用のエラーに関する情報を返す(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/system_category.html&#34;&gt;system_category&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境固有のエラーに関する情報を返す(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_code.html&#34;&gt;error_code&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境依存のエラーコード(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/error_condition.html&#34;&gt;error_condition&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境非依存のエラーコード(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/system_error.html&#34;&gt;system_error&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムエラーの例外クラス(class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/is_error_code_enum.html&#34;&gt;is_error_code_enum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;error_code&lt;/code&gt;の列挙値として見なせる型か判別する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/is_error_condition_enum.html&#34;&gt;is_error_condition_enum&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;error_condition&lt;/code&gt;の列挙値として見なせる型か判別する(class template)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/errc.html&#34;&gt;errc&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;エラー値を表す列挙型(enum class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/make_error_code.html&#34;&gt;make_error_code&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;errc&lt;/code&gt;から&lt;code&gt;error_code&lt;/code&gt;オブジェクトを生成する(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/system_error/make_error_condition.html&#34;&gt;make_error_condition&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;errc&lt;/code&gt;から&lt;code&gt;error_condition&lt;/code&gt;オブジェクトを生成する(function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.think-async.com/search/label/system_error&#34; target=&#34;_blank&#34;&gt;System error support in C++0x part1-5 - Thinking Asynchronously in C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boost.org/libs/system&#34; target=&#34;_blank&#34;&gt;Boost System Library Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2241.html&#34; target=&#34;_blank&#34;&gt;N2241 Diagnostics Enhancements for C++0x (Rev. 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2422.htm&#34; target=&#34;_blank&#34;&gt;N2422 Diagnostics Issues (Rev. 2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 -- C++17 非推奨だった bool 型に対するインクリメント演算子を削除 : 表示崩れを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>15ab164b44537fa6f6648e8b7e4811e4e62c2487:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2020-09-07T23:30:14+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index f48a0edf8..548a00acf 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -158,10 +158,9 @@ C++14で`std::exchange()`が導入されたことにより、唯一使いみち
 - [Core issue 1653: Removing deprecated increment of bool](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4192.html#1653)
 - [N3668: exchange() utility function, revision 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3668)
 - [history - Why does the boolean type in C++ support ++ but not --? - Software Engineering Stack Exchange](https://softwareengineering.stackexchange.com/questions/230928/why-does-the-boolean-type-in-c-support-but-not)
-- Leveson, Nancy G.; Turner, Clark S. (July 1993). [&amp;#34;An Investigation of the Therac-25 Accidents&amp;#34;](https://web.archive.org/web/20041128024227/http://www.cs.umd.edu/class/spring2003/cmsc838p/Misc/therac.pdf) (PDF). IEEE Computer. 26 (7): 18–41. doi:10.1109/MC.1993.274940.
-
-  テキスト起こし
-  1. [An Investigation of Therac-25 Accidents - I](http://web.archive.org/web/20171206153409/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_1.html)
-  2. [Therac-25 - II](http://web.archive.org/web/20171212115910/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_2.html)
-  3. [Therac-25 - III](http://web.archive.org/web/20170215125239/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_3.html)
+- Leveson, Nancy G.; Turner, Clark S. (July 1993). [&amp;#34;An Investigation of the Therac-25 Accidents&amp;#34;](https://web.archive.org/web/20041128024227/http://www.cs.umd.edu/class/spring2003/cmsc838p/Misc/therac.pdf) (PDF). IEEE Computer. 26 (7): 18–41. doi:10.1109/MC.1993.274940.&amp;lt;br/&amp;gt;
+    テキスト起こし
+    1. [An Investigation of Therac-25 Accidents - I](http://web.archive.org/web/20171206153409/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_1.html)
+    2. [Therac-25 - II](http://web.archive.org/web/20171212115910/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_2.html)
+    3. [Therac-25 - III](http://web.archive.org/web/20170215125239/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_3.html)
 - [Therac-25 - Wikipedia](https://en.wikipedia.org/wiki/Therac-25)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>非推奨だった bool 型に対するインクリメント演算子を削除 -- fix(cpp17/remove_deprecated_increment_of_bool): fix link</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/remove_deprecated_increment_of_bool.html"/>
      <id>a9d753ce01226203f057c00ae006d02de8816e45:lang/cpp17/remove_deprecated_increment_of_bool.md</id>
      <updated>2020-09-07T20:35:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/remove_deprecated_increment_of_bool.md b/lang/cpp17/remove_deprecated_increment_of_bool.md
index dc9548963..f48a0edf8 100644
--- a/lang/cpp17/remove_deprecated_increment_of_bool.md
+++ b/lang/cpp17/remove_deprecated_increment_of_bool.md
@@ -158,6 +158,10 @@ C++14で`std::exchange()`が導入されたことにより、唯一使いみち
 - [Core issue 1653: Removing deprecated increment of bool](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4192.html#1653)
 - [N3668: exchange() utility function, revision 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3668)
 - [history - Why does the boolean type in C++ support ++ but not --? - Software Engineering Stack Exchange](https://softwareengineering.stackexchange.com/questions/230928/why-does-the-boolean-type-in-c-support-but-not)
-- [An Investigation of Therac-25 Accidents - I](http://courses.cs.vt.edu/professionalism/Therac_25/Therac_1.html)
-- [Therac-25 - III](http://courses.cs.vt.edu/professionalism/Therac_25/Therac_3.html)
+- Leveson, Nancy G.; Turner, Clark S. (July 1993). [&amp;#34;An Investigation of the Therac-25 Accidents&amp;#34;](https://web.archive.org/web/20041128024227/http://www.cs.umd.edu/class/spring2003/cmsc838p/Misc/therac.pdf) (PDF). IEEE Computer. 26 (7): 18–41. doi:10.1109/MC.1993.274940.
+
+  テキスト起こし
+  1. [An Investigation of Therac-25 Accidents - I](http://web.archive.org/web/20171206153409/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_1.html)
+  2. [Therac-25 - II](http://web.archive.org/web/20171212115910/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_2.html)
+  3. [Therac-25 - III](http://web.archive.org/web/20170215125239/http://courses.cs.vt.edu/professionalism/Therac_25/Therac_3.html)
 - [Therac-25 - Wikipedia](https://en.wikipedia.org/wiki/Therac-25)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
</feed>
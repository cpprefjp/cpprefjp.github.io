<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-02T07:17:42.090297</updated>
  <id>cf1a4f9c-3c75-43c5-b98e-9ccdfbbb119a</id>

  
    <entry>
      <title>drop_view -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view.md b/reference/ranges/drop_view.md
index 0d7fc5891..56a88433f 100644
--- a/reference/ranges/drop_view.md
+++ b/reference/ranges/drop_view.md
@@ -53,11 +53,11 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](drop_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](drop_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`begin`](drop_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](drop_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
-| [`size`](drop_view/size.md.nolink)                     | 要素数を取得する                 | C++20          |
+| [`(constructor)`](drop_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`base`](drop_view/base.md)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](drop_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](drop_view/end.md)                       | 番兵を取得する                   | C++20          |
+| [`size`](drop_view/size.md)                     | 要素数を取得する                 | C++20          |
 
 `r`を元のRangeとする。`size`は[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
 
@@ -78,7 +78,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](drop_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](drop_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/base.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/base.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/base.md b/reference/ranges/drop_view/base.md
new file mode 100644
index 000000000..933c36b6e
--- /dev/null
+++ b/reference/ranges/drop_view/base.md
@@ -0,0 +1,67 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_view r{vec, 5};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/begin.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/begin.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/begin.md b/reference/ranges/drop_view/begin.md
new file mode 100644
index 000000000..0fe7e7fea
--- /dev/null
+++ b/reference/ranges/drop_view/begin.md
@@ -0,0 +1,70 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt;;          // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+入力が[`random_access_range`](../random_access_range.md)かつ[`sized_range`](../sized_range.md)の場合：
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::begin(base_) + min&amp;lt;D&amp;gt;(ranges::size(base_), count_);
+    ```
+    ここで、`D`は[`range_difference_t`](../range_difference_t.md)`&amp;lt;V&amp;gt;`。
+
+それ以外の場合：
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::next(ranges::begin(base_), count_, ranges::end(base_));
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数、`count_`は除去する要素数を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_view r{vec, 5};
+
+  auto it = r.begin();
+
+  int x = *it;
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+6
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/end.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/end.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/end.md b/reference/ranges/drop_view/end.md
new file mode 100644
index 000000000..8a7872dda
--- /dev/null
+++ b/reference/ranges/drop_view/end.md
@@ -0,0 +1,66 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt;;          // (2) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::end(base_);
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_view r{vec, 5};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    int x = *it;
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+    ++it;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+6 7 8 9 10 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/op_constructor.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/op_constructor.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/op_constructor.md b/reference/ranges/drop_view/op_constructor.md
new file mode 100644
index 000000000..778541675
--- /dev/null
+++ b/reference/ranges/drop_view/op_constructor.md
@@ -0,0 +1,59 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+drop_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default;          // (1) C++20
+
+constexpr explicit
+  drop_view(V base, range_difference_t&amp;lt;V&amp;gt; count);        // (2) C++20
+```
+
+## 概要
+
+[`drop_view`](../drop_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewと除去する要素数を指定して構築
+
+## 効果
+
+- (1) : `base_`と`count_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`count_`を`count`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_view view{vec, 5};
+  for (const auto&amp;amp; x : view) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* drop_view[color ff0000]
+
+### 出力
+```
+6 7 8 9 10 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/op_deduction_guide.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/op_deduction_guide.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/op_deduction_guide.md b/reference/ranges/drop_view/op_deduction_guide.md
new file mode 100644
index 000000000..d74629dac
--- /dev/null
+++ b/reference/ranges/drop_view/op_deduction_guide.md
@@ -0,0 +1,55 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  drop_view(R&amp;amp;&amp;amp;, range_difference_t&amp;lt;R&amp;gt;) -&amp;gt; drop_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+
+## 概要
+
+[`drop_view`](../drop_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、元のRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::drop_view r1{vec, 5};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::drop_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+
+  std::ranges::drop_view r2{std::vector&amp;lt;int&amp;gt;{1, 2, 3, 4, 5}, 3};
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::drop_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- drop_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/drop_view/size.html"/>
      <id>23b7fdfde3262c3441b275ef321b034c7be64049:reference/ranges/drop_view/size.md</id>
      <updated>2025-06-02T16:13:42+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/drop_view/size.md b/reference/ranges/drop_view/size.md
new file mode 100644
index 000000000..5860f5afd
--- /dev/null
+++ b/reference/ranges/drop_view/size.md
@@ -0,0 +1,59 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* drop_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++20
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++20
+```
+
+## 概要
+要素数を取得する。
+
+## 効果
+入力`view`（`V`）のオブジェクトを`base_`、除去する要素数を`count_`というメンバに保持するとして、以下と等価：
+
+```cpp
+auto n = ranges::size(base_);
+auto c = static_cast&amp;lt;decltype(n)&amp;gt;(count_);
+return n - min(n, c);
+```
+* min[link /reference/algorithm/min.md]
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+  std::ranges::drop_view r{vec, 5};
+
+  std::size_t n = r.size();
+  std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_while_view -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view.md b/reference/ranges/take_while_view.md
index 4a26432ef..00eb02cc4 100644
--- a/reference/ranges/take_while_view.md
+++ b/reference/ranges/take_while_view.md
@@ -49,11 +49,11 @@ namespace std::ranges {
 
 | 名前                                                         | 説明                             | 対応バージョン |
 |--------------------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](take_while_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](take_while_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`pred`](take_while_view/pred.md.nolink)                     | 述語を取得する                   | C++20          |
-| [`begin`](take_while_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](take_while_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
+| [`(constructor)`](take_while_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`base`](take_while_view/base.md)                     | `V`の参照を取得する              | C++20          |
+| [`pred`](take_while_view/pred.md)                     | 述語を取得する                   | C++20          |
+| [`begin`](take_while_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](take_while_view/end.md)                       | 番兵を取得する                   | C++20          |
 
 ## 継承しているメンバ関数
 
@@ -72,7 +72,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](take_while_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](take_while_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 例
 ```cpp example
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/base.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/base.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/base.md b/reference/ranges/take_while_view/base.md
new file mode 100644
index 000000000..18267e18d
--- /dev/null
+++ b/reference/ranges/take_while_view/base.md
@@ -0,0 +1,67 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_while_view r{vec, [](int x) { return x &amp;lt; 6; }};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/begin.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/begin.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/begin.md b/reference/ranges/take_while_view/begin.md
new file mode 100644
index 000000000..25c138e06
--- /dev/null
+++ b/reference/ranges/take_while_view/begin.md
@@ -0,0 +1,66 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           indirect_unary_predicate&amp;lt;
+             const Pred,
+             iterator_t&amp;lt;const V&amp;gt;
+           &amp;gt;;                        // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::begin(base_);
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_while_view r{vec, [](int x) { return x &amp;lt; 6; }};
+
+  auto it = r.begin();
+
+  int x = *it;
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/end.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/end.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/end.md b/reference/ranges/take_while_view/end.md
new file mode 100644
index 000000000..c01d6fc46
--- /dev/null
+++ b/reference/ranges/take_while_view/end.md
@@ -0,0 +1,70 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt; &amp;amp;&amp;amp;
+           indirect_unary_predicate&amp;lt;
+             const Pred,
+             iterator_t&amp;lt;const V&amp;gt;
+           &amp;gt;;                        // (2) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::end(base_);
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_while_view r{vec, [](int x) { return x &amp;lt; 6; }};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    int x = *it;
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+    ++it;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/op_constructor.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/op_constructor.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/op_constructor.md b/reference/ranges/take_while_view/op_constructor.md
new file mode 100644
index 000000000..b1f3c10d4
--- /dev/null
+++ b/reference/ranges/take_while_view/op_constructor.md
@@ -0,0 +1,60 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+take_while_view()
+  requires default_initializable&amp;lt;V&amp;gt; &amp;amp;&amp;amp;
+           default_initializable&amp;lt;Pred&amp;gt; = default; // (1) C++20
+
+constexpr explicit
+  take_while_view(V base, Pred pred);             // (2) C++20
+```
+
+## 概要
+
+[`take_while_view`](../take_while_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewと述語を指定して構築
+
+## 効果
+
+- (1) : `base_`と`pred_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`pred_`を`std::move(pred)`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_while_view view{vec, [](int x) { return x &amp;lt; 6; }};
+  for (const auto&amp;amp; x : view) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* take_while_view[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/op_deduction_guide.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/op_deduction_guide.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/op_deduction_guide.md b/reference/ranges/take_while_view/op_deduction_guide.md
new file mode 100644
index 000000000..318327942
--- /dev/null
+++ b/reference/ranges/take_while_view/op_deduction_guide.md
@@ -0,0 +1,56 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R, class Pred&amp;gt;
+  take_while_view(R&amp;amp;&amp;amp;, Pred) -&amp;gt; take_while_view&amp;lt;views::all_t&amp;lt;R&amp;gt;, Pred&amp;gt;;
+}
+```
+
+## 概要
+
+[`take_while_view`](../take_while_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、元のRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+  auto pred = [](int x) { return x &amp;lt; 6; };
+
+  std::ranges::take_while_view r1{vec, pred};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::take_while_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, decltype(pred)&amp;gt;
+  &amp;gt;);
+
+  std::ranges::take_while_view r2{std::vector&amp;lt;int&amp;gt;{1, 2, 3, 4, 5}, pred};
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::take_while_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;, decltype(pred)&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pred -- take_while_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_while_view/pred.html"/>
      <id>85980d0f72416acc7e893a120f38db28b76d2cf0:reference/ranges/take_while_view/pred.md</id>
      <updated>2025-06-02T15:56:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_while_view/pred.md b/reference/ranges/take_while_view/pred.md
new file mode 100644
index 000000000..e39dbd2c0
--- /dev/null
+++ b/reference/ranges/take_while_view/pred.md
@@ -0,0 +1,58 @@
+# pred
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_while_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr const Pred&amp;amp; pred() const;
+```
+
+## 概要
+
+メンバ変数として保持している述語を取得する。
+
+## 戻り値
+
+述語`Pred`のオブジェクトを[`movable-box`](../movable_box.md)(C++20は[`copyable-box`](../copyable_box.md))でラップした `pred_`というメンバに保持するとして
+
+```cpp
+return *pred_;
+```
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_while_view twv{vec, [](int i) { return i &amp;lt; 6; }};
+
+  std::cout &amp;lt;&amp;lt; twv.pred()(3) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+  std::cout &amp;lt;&amp;lt; twv.pred()(7) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* pred[color ff0000]
+* take_while_view[link ../take_while_view.md]
+
+### 出力
+
+```
+1
+0
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stride_view -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/stride_view.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/stride_view.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/stride_view.md b/reference/ranges/stride_view.md
index 6f26792ce..7074702f2 100644
--- a/reference/ranges/stride_view.md
+++ b/reference/ranges/stride_view.md
@@ -44,7 +44,7 @@ namespace std::ranges {
 | [`stride`](stride_view/stride.md.nolink)                 | 1回で移動する要素数を取得する    | C++23          |
 | [`begin`](stride_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
 | [`end`](stride_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](take_view/size.md.nolink)                       | 要素数を取得する                 | C++23          |
+| [`size`](stride_view/size.md.nolink)                       | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>take_view -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view.md b/reference/ranges/take_view.md
index c0a154b4f..4be2cc454 100644
--- a/reference/ranges/take_view.md
+++ b/reference/ranges/take_view.md
@@ -53,11 +53,11 @@ namespace std::ranges {
 
 | 名前                                             | 説明                             | 対応バージョン |
 |--------------------------------------------------|----------------------------------|----------------|
-| [`(constructor)`](take_view/op_constructor.md.nolink)  | コンストラクタ                   | C++20          |
-| [`base`](take_view/base.md.nolink)                     | `V`の参照を取得する              | C++20          |
-| [`begin`](take_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++20          |
-| [`end`](take_view/end.md.nolink)                       | 番兵を取得する                   | C++20          |
-| [`size`](take_view/size.md.nolink)                     | 要素数を取得する                 | C++20          |
+| [`(constructor)`](take_view/op_constructor.md)  | コンストラクタ                   | C++20          |
+| [`base`](take_view/base.md)                     | `V`の参照を取得する              | C++20          |
+| [`begin`](take_view/begin.md)                   | 先頭を指すイテレータを取得する   | C++20          |
+| [`end`](take_view/end.md)                       | 番兵を取得する                   | C++20          |
+| [`size`](take_view/size.md)                     | 要素数を取得する                 | C++20          |
 
 `r`を元のRangeとする。`size`は[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
 
@@ -78,7 +78,7 @@ namespace std::ranges {
 
 | 名前                                                  | 説明                         | 対応バージョン |
 |-------------------------------------------------------|------------------------------|----------------|
-| [`(deduction_guide)`](take_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+| [`(deduction_guide)`](take_view/op_deduction_guide.md) | クラステンプレートの推論補助 | C++20          |
 
 ## 使用上の注意
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>base -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/base.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/base.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/base.md b/reference/ranges/take_view/base.md
new file mode 100644
index 000000000..b0303b718
--- /dev/null
+++ b/reference/ranges/take_view/base.md
@@ -0,0 +1,67 @@
+# base
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr V base() const &amp;amp;
+  requires copy_constructible&amp;lt;V&amp;gt;;  // (1) C++20
+
+constexpr V base() &amp;amp;&amp;amp;;             // (2) C++20
+```
+
+## 概要
+
+メンバ変数として保持している、元の`view`を取得する。
+
+## 効果
+
+入力`view`（`V`）のオブジェクトを`base_`というメンバに保持するとして
+
+- (1) : `return base_;` と等価
+- (2) : `return std::move(base_);` と等価
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  using std::ranges::view;
+
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_view r{vec, 5};
+
+  // (1) コピーして取得
+  view auto b1 = r.base();
+
+  // (2) ムーブして取得
+  view auto b2 = std::move(r).base();
+
+  // 得られるのは元のRangeではなく、あくまでview
+  static_assert(not std::same_as&amp;lt;decltype(b1), std::vector&amp;lt;int&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b1), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+  static_assert(    std::same_as&amp;lt;decltype(b2), std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;);
+}
+```
+* base[color ff0000]
+
+### 出力
+
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/begin.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/begin.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/begin.md b/reference/ranges/take_view/begin.md
new file mode 100644
index 000000000..4dd933fbd
--- /dev/null
+++ b/reference/ranges/take_view/begin.md
@@ -0,0 +1,62 @@
+# begin
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto begin()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto begin() const
+  requires range&amp;lt;const V&amp;gt;;          // (2) C++20
+```
+
+## 概要
+
+`view`の先頭要素を指すイテレータを取得する。
+
+## 戻り値
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::begin(base_);
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_view r{vec, 5};
+
+  auto it = r.begin();
+
+  int x = *it;
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+}
+```
+* begin[color ff0000]
+
+### 出力
+
+```
+1
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/end.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/end.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/end.md b/reference/ranges/take_view/end.md
new file mode 100644
index 000000000..3fc578807
--- /dev/null
+++ b/reference/ranges/take_view/end.md
@@ -0,0 +1,74 @@
+# end
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto end()
+  requires (!simple-view&amp;lt;V&amp;gt;);       // (1) C++20
+
+constexpr auto end() const
+  requires range&amp;lt;const V&amp;gt;;          // (2) C++20
+```
+
+## 概要
+番兵を取得する。
+
+## 戻り値
+入力が[`sized_range`](../sized_range.md)かつ[`random_access_range`](../random_access_range.md)の場合：
+- (1), (2) : 以下と等価：
+    ```cpp
+    return ranges::begin(base_) + min&amp;lt;D&amp;gt;(ranges::size(base_), count_);
+    ```
+    ここで、`D`は[`range_difference_t`](../range_difference_t.md)`&amp;lt;V&amp;gt;`。
+
+それ以外の場合：
+- (1), (2) : 以下と等価：
+    ```cpp
+    return counted_iterator{ranges::begin(base_), count_};
+    ```
+
+ただし、`base_`は元の`view`を表すメンバ変数、`count_`は取得する要素数を表すメンバ変数。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_view r{vec, 5};
+
+  auto it = r.begin();
+  auto end_it = r.end();
+  while (it != end_it) {
+    int x = *it;
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+    ++it;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* end[color ff0000]
+* begin[link begin.md]
+
+### 出力
+
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/op_constructor.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/op_constructor.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/op_constructor.md b/reference/ranges/take_view/op_constructor.md
new file mode 100644
index 000000000..1f371354a
--- /dev/null
+++ b/reference/ranges/take_view/op_constructor.md
@@ -0,0 +1,63 @@
+# コンストラクタ
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+take_view()
+  requires default_initializable&amp;lt;V&amp;gt; = default;          // (1) C++20
+
+constexpr explicit
+  take_view(V base, range_difference_t&amp;lt;V&amp;gt; count);        // (2) C++20
+```
+
+## 概要
+
+[`take_view`](../take_view.md)オブジェクトを構築する。
+
+- (1) : デフォルト構築
+- (2) : 元となるviewと取得する要素数を指定して構築
+
+## 効果
+
+- (1) : `base_`と`count_`をデフォルト構築する
+- (2) : `base_`を`std::move(base)`で、`count_`を`count`で初期化する
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_view view{vec, 5};
+  for (const auto&amp;amp; x : view) {
+    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34; &amp;#34;;
+  }
+  std::cout &amp;lt;&amp;lt; std::endl;
+}
+```
+* take_view[color ff0000]
+
+### 出力
+```
+1 2 3 4 5 
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
+
+## 参照
+- [N4861 24.7.10 Take view](https://timsong-cpp.github.io/cppwp/n4861/range.take)
+- [N4950 26.7.14 Take view](https://timsong-cpp.github.io/cppwp/n4950/range.take)
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/op_deduction_guide.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/op_deduction_guide.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/op_deduction_guide.md b/reference/ranges/take_view/op_deduction_guide.md
new file mode 100644
index 000000000..ede2a1683
--- /dev/null
+++ b/reference/ranges/take_view/op_deduction_guide.md
@@ -0,0 +1,55 @@
+# 推論補助
+* ranges[meta header]
+* std::ranges[meta namespace]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;class R&amp;gt;
+  take_view(R&amp;amp;&amp;amp;, range_difference_t&amp;lt;R&amp;gt;) -&amp;gt; take_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+```
+
+## 概要
+
+[`take_view`](../take_view.md)クラステンプレートの型推論補助。
+
+この推論補助によって、元のRangeが暗黙的に[all view](../all.md)でラップされる。
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;concepts&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+
+  std::ranges::take_view r1{vec, 5};
+  static_assert(std::same_as&amp;lt;
+    decltype(r1),
+    std::ranges::take_view&amp;lt;std::ranges::ref_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+
+  std::ranges::take_view r2{std::vector&amp;lt;int&amp;gt;{1, 2, 3, 4, 5}, 3};
+  static_assert(std::same_as&amp;lt;
+    decltype(r2),
+    std::ranges::take_view&amp;lt;std::ranges::owning_view&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
+  &amp;gt;);
+}
+```
+
+### 出力
+```
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/take_view/size.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/take_view/size.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/take_view/size.md b/reference/ranges/take_view/size.md
new file mode 100644
index 000000000..97866e750
--- /dev/null
+++ b/reference/ranges/take_view/size.md
@@ -0,0 +1,60 @@
+# size
+* ranges[meta header]
+* std::ranges[meta namespace]
+* take_view[meta class]
+* function[meta id-type]
+* cpp20[meta cpp]
+
+```cpp
+constexpr auto size()
+  requires sized_range&amp;lt;V&amp;gt;;       // (1) C++20
+
+constexpr auto size() const
+  requires sized_range&amp;lt;const V&amp;gt;; // (2) C++20
+```
+
+## 概要
+要素数を取得する。
+
+## 効果
+入力`view`（`V`）のオブジェクトを`base_`、取得する要素数を`count_`というメンバに保持するとして、以下と等価：
+
+```cpp
+auto n = ranges::size(base_);
+return min&amp;lt;D&amp;gt;(n, static_cast&amp;lt;D&amp;gt;(count_));
+```
+* min[link /reference/algorithm/min.md]
+
+ここで、`D`は`decltype(n)`。
+
+## 例
+
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iostream&amp;gt;
+
+int main() {
+  std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+  std::ranges::take_view r{vec, 5};
+
+  std::size_t n = r.size();
+  std::cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; std::endl;
+}
+```
+* size[color ff0000]
+
+### 出力
+```
+5
+```
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0 [mark verified]
+- [GCC](/implementation.md#gcc): 10.1.0 [mark verified]
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10 [mark verified]
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>zip_transform_view -- take_view : メンバ関数を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/zip_transform_view.html"/>
      <id>e1744f9eb4cc371687222579bbc2276f301fe1e9:reference/ranges/zip_transform_view.md</id>
      <updated>2025-06-02T15:48:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/zip_transform_view.md b/reference/ranges/zip_transform_view.md
index 93a6dda40..314dee467 100644
--- a/reference/ranges/zip_transform_view.md
+++ b/reference/ranges/zip_transform_view.md
@@ -54,7 +54,7 @@ zipするRangeのサイズが異なっている場合、`zip_transform_view`の
 | [`(constructor)`](zip_transform_view/op_constructor.md.nolink)  | コンストラクタ                   | C++23          |
 | [`begin`](zip_transform_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する   | C++23          |
 | [`end`](zip_transform_view/end.md.nolink)                       | 番兵を取得する                   | C++23          |
-| [`size`](take_view/size.md.nolink)                    | 要素数を取得する                 | C++23          |
+| [`size`](zip_transform_view/size.md.nolink)                    | 要素数を取得する                 | C++23          |
 
 ## 継承しているメンバ関数
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>start_lifetime_as -- start_lifetime_as: 戻り値について不正な「ポインタの値は `p`」を削除</title>
      <link href="https://cpprefjp.github.io/reference/memory/start_lifetime_as.html"/>
      <id>a122f1561e407a9c4ee67795af8f045b40d84b99:reference/memory/start_lifetime_as.md</id>
      <updated>2025-06-02T00:09:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/start_lifetime_as.md b/reference/memory/start_lifetime_as.md
index 6edac78b0..13fd0d874 100644
--- a/reference/memory/start_lifetime_as.md
+++ b/reference/memory/start_lifetime_as.md
@@ -38,7 +38,7 @@ const volatile T* start_lifetime_as(const volatile void* p) noexcept; // (4)
 
 
 ## 戻り値
-暗黙的に構築された型 `T` のオブジェクトのポインタを返す。ポインタの値は `p`。
+暗黙的に構築された型 `T` のオブジェクトへのポインタを返す。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Kazutoshi SATODA</name>
        <email>k_satoda@f2.dion.ne.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>bulk -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/bulk.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/bulk.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/bulk.md b/reference/execution/execution/bulk.md
index 3689a9aed..1b90ea800 100644
--- a/reference/execution/execution/bulk.md
+++ b/reference/execution/execution/bulk.md
@@ -71,7 +71,7 @@ namespace std::execution {
   }
 ```
 * set_value_t[link set_value.md]
-* TRY-EVAL[link TRY-EVAL.md.nolink]
+* TRY-EVAL[link set_value.md]
 * std::move[link /reference/utility/move.md]
 * see below[italic]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>connect -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/connect.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/connect.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/connect.md b/reference/execution/execution/connect.md
index f519456cd..079f27adb 100644
--- a/reference/execution/execution/connect.md
+++ b/reference/execution/execution/connect.md
@@ -111,7 +111,6 @@ namespace std::execution {
 `C`型の`c`と[コルーチンPromise型](/lang/cpp20/coroutines.md)の左辺値`p`に対して、`await-result-type&amp;lt;C, Promise&amp;gt;`を`decltype(`[`GET-AWAITER`](../is-awaitable.md)`(c, p).`[`await_resume()`](/lang/cpp20/coroutines.md)`)`型とする。
 型`V`を`await-result-type&amp;lt;DS, connect-awaitable-promise&amp;gt;`とする。
 
-`SET-VALUE-SIG(T)`を、`T`がCV修飾された`void`ならば[`set_value_t`](set_value.md)`()`型、そうでなければ[`set_value_t`](set_value.md)`(T)`型とする。
 型`Sigs`を下記の通り定義する。
 
 ```cpp
@@ -121,10 +120,10 @@ completion_signatures&amp;lt;
   set_stopped_t()&amp;gt;
 ```
 * completion_signatures[link completion_signatures.md]
+* SET-VALUE-SIG[link set_value.md]
 * set_error_t[link set_error.md]
 * set_stopped_t[link set_stopped.md]
 * exception_ptr[link /reference/exception/exception_ptr.md]
-* SET-VALUE-SIG[italic]
 
 説明用の関数テンプレート`suspend-complete`とコルーチン`suspend-awaitable`を下記の通り定義する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>continues_on -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/continues_on.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/continues_on.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/continues_on.md b/reference/execution/execution/continues_on.md
index d320b53ac..917fdd897 100644
--- a/reference/execution/execution/continues_on.md
+++ b/reference/execution/execution/continues_on.md
@@ -47,8 +47,8 @@ namespace std::execution {
 ```
 * impls-for[link impls-for.md]
 * default-impls[link impls-for.md]
-* JOIN-ENV[link JOIN-ENV.md.nolink]
-* SCHED-ATTRS[link SCHED-ATTRS.md.nolink]
+* JOIN-ENV[link ../queryable.md]
+* SCHED-ATTRS[link scheduler.md]
 * FWD-ENV[link ../forwarding_query.md]
 * get_env[link get_env.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_completion_signatures -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/get_completion_signatures.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/get_completion_signatures.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/get_completion_signatures.md b/reference/execution/execution/get_completion_signatures.md
index 4ef53f601..f8838b3a3 100644
--- a/reference/execution/execution/get_completion_signatures.md
+++ b/reference/execution/execution/get_completion_signatures.md
@@ -34,7 +34,7 @@ namespace std::execution {
       set_stopped_t()&amp;gt;
     ```
     * completion_signatures[link completion_signatures.md]
-    * SET-VALUE-SIG[link connect.md]
+    * SET-VALUE-SIG[link set_value.md]
     * await-result-type[link connect.md]
     * env-promise[link env-promise.md]
     * set_error_t[link set_error.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>into_variant -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/into_variant.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/into_variant.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/into_variant.md b/reference/execution/execution/into_variant.md
index d511575a3..2008a4b40 100644
--- a/reference/execution/execution/into_variant.md
+++ b/reference/execution/execution/into_variant.md
@@ -80,6 +80,7 @@ namespace std::execution {
 }
 ```
 * set_value_t[link set_value.md]
+* TRY-SET-VALUE[link set_value.md]
 * decayed-tuple[link decayed-tuple.md]
 * std::move[link /reference/utility/move.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>let_value -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/let_value.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/let_value.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/let_value.md b/reference/execution/execution/let_value.md
index d0b36b088..a8ef9f842 100644
--- a/reference/execution/execution/let_value.md
+++ b/reference/execution/execution/let_value.md
@@ -114,19 +114,19 @@ namespace std::execution {
 ```
 * set_value[link set_value.md]
 * decayed-typeof[link /reference/functional/decayed-typeof.md]
-* TRY-EVAL[link TRY-EVAL.md.nolink]
+* TRY-EVAL[link set_value.md]
 * std::move[link /reference/utility/move.md]
 
 説明用の式`sndr`と`env`に対して、型`Sndr`を`decltype((sndr))`とする。[`sender-for`](sender-for.md)`&amp;lt;Sndr,` [`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;let_value&amp;gt;&amp;gt; == false`のとき、式`let_value.transform_env(sndr, env)`は不適格となる。
 
-そうでなければ、式`let_value.transform_env(sndr, env)`は[`JOIN-ENV`](JOIN-ENV.md.nolink)`(let-env(sndr),` [`FWD-ENV`](../forwarding_query.md)`(env))`と等価。
+そうでなければ、式`let_value.transform_env(sndr, env)`は[`JOIN-ENV`](../queryable.md)`(let-env(sndr),` [`FWD-ENV`](../forwarding_query.md)`(env))`と等価。
 
 
 ## 説明専用エンティティ
 説明用の式`sndr`を用いて、`let-env(sndr)`を下記リストのうち最初に適格となる式と定義する。
 
-- [`SCHED-ENV`](SCHED-ENV.md.nolink)`(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;`[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;`[`set_value`](set_value.md)`&amp;gt;&amp;gt;(`[`get_env`](get_env.md)`(sndr)))`
-- [`MAKE-ENV`](MAKE-ENV.md.nolink)`(`[`get_domain`](get_domain.md)`,` [`get_domain`](get_domain.md)`(`[`get_env`](get_env.md)`(sndr)))`
+- [`SCHED-ENV`](schedule.md)`(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;`[`decayed-typeof`](/reference/functional/decayed-typeof.md)`&amp;lt;`[`set_value`](set_value.md)`&amp;gt;&amp;gt;(`[`get_env`](get_env.md)`(sndr)))`
+- [`MAKE-ENV`](../queryable.md)`(`[`get_domain`](get_domain.md)`,` [`get_domain`](get_domain.md)`(`[`get_env`](get_env.md)`(sndr)))`
 - `(void(sndr),` [`env&amp;lt;&amp;gt;{}`](env.md)`)`
 
 説明専用の`let-bind`テンプレート関数を下記の通り定義する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>on -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/on.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/on.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/on.md b/reference/execution/execution/on.md
index 90c4e0fa7..134e06588 100644
--- a/reference/execution/execution/on.md
+++ b/reference/execution/execution/on.md
@@ -79,8 +79,8 @@ transform_sender(
     }
     ```
     * scheduler[link scheduler.md]
-    * JOIN-ENV[link JOIN-ENV.md.nolink]
-    * SCHED-ENV[link SCHED-ENV.md.nolink]
+    * JOIN-ENV[link ../queryable.md]
+    * SCHED-ENV[link scheduler.md]
     * FWD-ENV[link ../forwarding_query.md]
 
 - 式`on.transform_sender(out_sndr, env)`は下記と等価。
@@ -128,7 +128,7 @@ transform_sender(
     * get_env[link get_env.md]
     * query-with-default[link query-with-default.md]
     * write-env[link write-env.md]
-    * SCHED-ENV[link SCHED-ENV.md.nolink]
+    * SCHED-ENV[link scheduler.nolink]
     * std::move[link /reference/utility/move.md]
 
 説明専用のクラス`not-a-scheduler`を未規定な空のクラス型、`not-a-sender`を下記の通り定義する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>read_env -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/read_env.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/read_env.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/read_env.md b/reference/execution/execution/read_env.md
index e93d649f3..d494bedbd 100644
--- a/reference/execution/execution/read_env.md
+++ b/reference/execution/execution/read_env.md
@@ -39,6 +39,7 @@ namespace std::execution {
 * decayed-typeof[link /reference/functional/decayed-typeof.md]
 * impls-for[link impls-for.md]
 * default-impls[link impls-for.md]
+* TRY-SET-VALUE[link set_value.md]
 * get_env[link get_env.md]
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>schedule_from -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/schedule_from.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/schedule_from.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/schedule_from.md b/reference/execution/execution/schedule_from.md
index 6c3014d2c..eec40b797 100644
--- a/reference/execution/execution/schedule_from.md
+++ b/reference/execution/execution/schedule_from.md
@@ -59,8 +59,8 @@ namespace std::execution {
   return JOIN-ENV(SCHED-ATTRS(data), FWD-ENV(get_env(child)));
 }
 ```
-* JOIN-ENV[link JOIN-ENV.md.nolink]
-* SCHED-ATTRS[link SCHED-ATTRS.md.nolink]
+* JOIN-ENV[link ../queryable.md]
+* SCHED-ATTRS[link scheduler.md]
 * FWD-ENV[link ../forwarding_query.md]
 * get_env[link get_env.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>scheduler -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/scheduler.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/scheduler.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/scheduler.md b/reference/execution/execution/scheduler.md
index f113de558..959ceaa34 100644
--- a/reference/execution/execution/scheduler.md
+++ b/reference/execution/execution/scheduler.md
@@ -80,6 +80,20 @@ namespace std::execution {
 Scheduler型のデストラクタは、[`schedule`](schedule.md)が返すSenderオブジェクトに接続されたReceiverの完了を待機してブロックしてはならない。
 
 
+## 説明専用エンティティ
+### `SCHED-ATTRS`
+説明用のScheduler`sch`に対して、式`SCHED-ATTRS(sch)`は[`queryable`](../queryable.md)を満たす型の式`o1`となり、下記を満たす。
+
+- 型`Tag`が[`set_value_t`](set_value.md)もしくは[`set_stopped_t`](set_stopped.md)のとき、式`o1.query(`[`get_completion_scheduler`](get_completion_scheduler.md)`&amp;lt;Tag&amp;gt;)`の型および値が`sch`と等しい。
+- 式`o1.query(`[`get_domain`](get_domain.md)`)`は`sch.query(`[`get_domain`](get_domain.md)`)`と等価。
+
+### `SCHED-ENV`
+説明用のScheduler`sch`に対して、式`SCHED-ENV(sch)`は[`queryable`](../queryable.md)を満たす型の式`o2`となり、下記を満たす。
+
+- 式`o2.query(`[`get_scheduler`](get_scheduler.md)`)`は、型および値が`sch`と等しい右辺値。
+- 式`o2.query(`[`get_domain`](get_domain.md)`)`は`sch.query(`[`get_domain`](get_domain.md)`)`と等価。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;execution&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_value -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/set_value.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/set_value.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/set_value.md b/reference/execution/execution/set_value.md
index 085ec50f3..e62d9f1af 100644
--- a/reference/execution/execution/set_value.md
+++ b/reference/execution/execution/set_value.md
@@ -33,6 +33,45 @@ namespace std::execution {
 このとき、`noexcept(rcvr.set_value(vs...)) == true`であること。
 
 
+## 説明専用エンティティ
+### `SET-VALUE`
+説明用の式`rcvr`, `expr`に対して、説明専用の式`SET-VALUE(rcvr, expr)`は下記と等価である。
+
+- `expr`の型が`void`のとき、式`(expr, set_value(`[`std::move`](/reference/utility/move.md)`(rcvr)))`
+- そうでなければ、式`set_value(`[`std::move`](/reference/utility/move.md)`(rcvr), expr)`
+
+### `TRY-EVAL`
+説明用の式`rcvr`, `expr`に対して、説明専用の式`TRY-EVAL(rcvr, expr)`は下記と等価である。
+
+- `expr`が潜在的に例外送出するならば、下記と等価。
+
+    ```cpp
+    try {
+      expr;
+    } catch(...) {
+      set_error(std::move(rcvr), current_exception());
+    }
+    ```
+    * set_error[link set_error.md]
+    * std::move[link /reference/utility/move.md]
+    * current_exception()[link /reference/exception/current_exception.md]
+
+- そうでなければ、式`expr`
+
+### `TRY-SET-VALUE`
+説明用の式`rcvr`, `expr`に対して、説明専用の式`TRY-SET-VALUE(rcvr, expr)`は`rcvr`が1回だけ評価されることを除いて、下記と等価。
+
+```cpp
+TRY-EVAL(rcvr, SET-VALUE(rcvr, expr))
+```
+
+### `SET-VALUE-SIG`
+説明用の型`T`に対して、説明専用の型`SET-VALUE-SIG(T)`を下記の通り定義する。
+
+- `T`がCV修飾された`void`ならば、型`set_value_t()`
+- そうでなければ、型`set_value_t(T)`
+
+
 ## 備考
 完了関数`set_value`は[Sender](sender.md)内部実装から呼び出される想定であり、実行制御ライブラリ利用者が直接利用する必要はない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>starts_on -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/starts_on.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/starts_on.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/starts_on.md b/reference/execution/execution/starts_on.md
index 4f23445fb..c82f71db8 100644
--- a/reference/execution/execution/starts_on.md
+++ b/reference/execution/execution/starts_on.md
@@ -44,8 +44,8 @@ transform_sender(
     auto&amp;amp;&amp;amp; [_, sch, _] = out_sndr;
     return JOIN-ENV(SCHED-ENV(sch), FWD-ENV(env));
     ```
-    * JOIN-ENV[link JOIN-ENV.md.nolink]
-    * SCHED-ENV[link SCHED-ENV.md.nolink]
+    * JOIN-ENV[link ../queryable.md]
+    * SCHED-ENV[link scheduler.md]
     * FWD-ENV[link ../forwarding_query.md]
 
 - 式`starts_on.transform_sender(out_sndr, env)`は下記と等価。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>then -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/then.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/then.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/then.md b/reference/execution/execution/then.md
index 22d67d5a4..27187eda4 100644
--- a/reference/execution/execution/then.md
+++ b/reference/execution/execution/then.md
@@ -55,6 +55,7 @@ namespace std::execution {
 * impls-for[link impls-for.md]
 * default-impls[link impls-for.md]
 * set_value[link set_value.md]
+* TRY-SET-VALUE[link set_value.md]
 * invoke[link /reference/functional/invoke.md]
 * std::move[link /reference/utility/move.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>when_all -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/when_all.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/execution/when_all.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/when_all.md b/reference/execution/execution/when_all.md
index 44a365383..bfa79b04f 100644
--- a/reference/execution/execution/when_all.md
+++ b/reference/execution/execution/when_all.md
@@ -73,7 +73,7 @@ namespace std::execution {
 ```
 * default_domain[link default_domain.md]
 * env&amp;lt;&amp;gt;[link env.md]
-* MAKE-ENV[link MAKE-ENV.md.nolink]
+* MAKE-ENV[link ../queryable.md]
 * get_domain[link get_domain.md]
 
 `impls-for&amp;lt;when_all_t&amp;gt;::get-env`メンバは、下記ラムダ式と等価な関数呼び出し可能なオブジェクトで初期化される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>forwarding_query -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/forwarding_query.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/forwarding_query.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/forwarding_query.md b/reference/execution/forwarding_query.md
index 2d72071f7..3f973fabe 100644
--- a/reference/execution/forwarding_query.md
+++ b/reference/execution/forwarding_query.md
@@ -51,7 +51,7 @@ namespace std {
 下記[クエリオブジェクト](queryable.md)に対する問い合わせは、`FWD-ENV`経由で転送されない。
 
 - [`execution::get_env`](execution/get_env.md)
-- [`executoin::get_forward_progress_guarantee`](executionget_forward_progress_guarantee.md.nolink)
+- [`executoin::get_forward_progress_guarantee`](execution/get_forward_progress_guarantee.md)
 
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>queryable -- execution: 説明専用エンティティ (#1384)</title>
      <link href="https://cpprefjp.github.io/reference/execution/queryable.html"/>
      <id>8253efad70efca59c631ec1d2cab56be41c96898:reference/execution/queryable.md</id>
      <updated>2025-06-01T19:59:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/queryable.md b/reference/execution/queryable.md
index b6caabdc0..f0852bfc7 100644
--- a/reference/execution/queryable.md
+++ b/reference/execution/queryable.md
@@ -44,6 +44,21 @@ concept queryable = destructible&amp;lt;T&amp;gt;;
 呼び出し可能オブジェクト`q`と部分式パック`args`に対して、`requires { q(env, args...) }`が`true`であれば、`q(env, args...)`が`q`に課されるセマンティック要件を満たす場合に、`Env`は`queryable`のモデルである。
 
 
+## 説明専用エンティティ
+### `MAKE-ENV`
+説明用のクエリオブジェクト`q`と式`v`に対して、式`MAKE-ENV(q, v)`は`queryable`を満たす型の式`env`となり、下記を満たす。
+
+- `env.query(q)`の結果が`v`と等しい。
+- 明に規定されない限り、`env`が有効の間は`env.query(q)`のオブジェクトも有効である。
+
+### `JOIN-ENV`
+説明用のクエリ可能オブジェクト`env1`, `env2`、クエリオブジェクト`q`、パック式`as`に対して、式`JOIN-ENV(env1, env2)`は`queryable`を満たす型の式`env3`となり、式`env3.query(q, as...)`は下記と等価である。
+
+- 適格であるならば、式`env1.query(q, as...)`
+- そうではなく、適格であるならば、式`env2.query(q, as...)`
+- そうでなければ、式`env3.query(q, as...)`は不適格
+
+
 ## 備考
 [Sender](execution/sender.md)に関連付けられたクエリ可能オブジェクトは「属性(attributes)」と呼ばれるが、実行制御ライブラリの仕様記述では[Receiver](execution/receiver.md)の「環境(environment)」と合わせて`Env`型や識別子名`env`として包括的に言及される。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
</feed>
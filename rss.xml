<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-12T05:58:14.061312</updated>
  <id>12c39296-5149-4dfc-9186-632216bb5809</id>

  
    <entry>
      <title>コンストラクタ -- basic_stringbuf : C++26 string_viewに対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/op_constructor.html"/>
      <id>9ff68ed23110ce265c33182f4f0e6cb074291660:reference/sstream/basic_stringbuf/op_constructor.md</id>
      <updated>2025-06-12T14:54:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/op_constructor.md b/reference/sstream/basic_stringbuf/op_constructor.md
index ed4659c25..3e875f918 100644
--- a/reference/sstream/basic_stringbuf/op_constructor.md
+++ b/reference/sstream/basic_stringbuf/op_constructor.md
@@ -56,6 +56,23 @@ basic_stringbuf(
 
 basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs);                       // (11) C++11
 basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs, const Allocator&amp;amp; a);   // (12) C++20
+
+template&amp;lt;class T&amp;gt;
+explicit
+basic_stringbuf(
+  const T&amp;amp; t,
+  ios_base::openmode which = ios_base::in | ios_base::out);   // (13) C++26
+
+template&amp;lt;class T&amp;gt;
+basic_stringbuf(
+  const T&amp;amp; t,
+  const Allocator&amp;amp; a);                                        // (14) C++26
+
+template&amp;lt;class T&amp;gt;
+basic_stringbuf(
+  const T&amp;amp; t,
+  ios_base::openmode which,
+  const Allocator&amp;amp; a);                                        // (15) C++26
 ```
 * ios_base[link /reference/ios/ios_base.md]
 * basic_string[link /reference/string/basic_string.md]
@@ -63,18 +80,43 @@ basic_stringbuf(basic_stringbuf&amp;amp;&amp;amp; rhs, const Allocator&amp;amp; a);   // (12) C++20
 ## 概要
 `basic_stringbuf`オブジェクトを構築する。
 
+- (1) : デフォルトコンストラクタ
+- (2) : 指定されたモードで構築する
+- (3) : [`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、指定されたモードで構築する
+- (4) : モードとアロケータを指定して構築する
+- (5) : アロケータを指定して構築する
+- (6) : [`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (7) : [`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (8) : `Allocator`に変換可能なアロケータ型をもつ`std::basic_string`オブジェクトのコピーと、指定されたモードで構築する
+- (9) : `Allocator`に変換可能なアロケータ型をもつ`std::basic_string`オブジェクトのコピーと、アロケータを指定して構築する
+- (10) : `Allocator`に変換可能なアロケータ型をもつ`std::basic_string`オブジェクトのコピー、モード、アロケータを指定して構築する
+- (11) : ムーブコンストラクタ
+- (12) : ムーブコンストラクタでアロケータを指定して構築する
+- (13) : [`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を初期化し、モードを設定する
+- (14) : [`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を初期化、アロケータを設定する
+- (15) : [`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を初期化し、モードとアロケータを設定する
+
+
+## テンプレートパラメータ制約
+- (13), (14), (15) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+
+
 ## 効果
 - (1) : 内部の文字列バッファを空にし、モードは`ios_base::in | ios_base::out`に設定する
 - (2) : 内部の文字列バッファを空にし、モードは`which`に設定する
 - (3) : 内部の文字列バッファを`s`のコピー、モードは`which`に設定する
 - (4) : 内部の文字列バッファを`std::move(s)`で、モードは`which`に設定する
 - (5) : 内部の文字列バッファを空にし、モードは`which`、アロケータは`a`に設定する
-- (6), (7), (8), (9), (10), (11) : 各引数は内部状態の初期化に使用される
-- (12) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築する
-- (13) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築し、アロケータは`a`を使用する
+- (6), (7), (8), (9), (10) : 各引数は内部状態の初期化に使用される
+- (11) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築する
+- (12) : `rhs`から`basic_stringbuf`オブジェクトをムーブ構築し、アロケータは`a`を使用する
+- (13) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`に設定する
+- (14) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`ios_base::in | ios_base::out`、アロケータは`a`に設定する
+- (15) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`、アロケータは`a`に設定する
 
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;sstream&amp;gt;
@@ -95,11 +137,37 @@ int main()
 * sputc[link /reference/streambuf/basic_streambuf/sputc.md]
 * str()[link str.md]
 
-### 出力
+#### 出力
 ```
 a
 initial!
 ```
 
+#### string_viewからの構築 (C++26)
+```cpp example
+#include &amp;lt;print&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main()
+{
+  std::string_view sv = &amp;#34;from string literal&amp;#34;;
+  std::stringbuf buf1{sv};
+  std::println(&amp;#34;{}&amp;#34;, buf1.str());
+
+  std::string_view sv2 = &amp;#34;from string_view&amp;#34;;
+  std::stringbuf buf2{sv2};
+  std::println(&amp;#34;{}&amp;#34;, buf2.str());
+}
+```
+
+#### 出力
+```
+from string literal
+from string_view
+```
+
 ## 参照
-- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
\ No newline at end of file
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
+- [P2495R3 Interfacing stringstreams with `string_view`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2495r3.pdf)
+    - C++26で[`std::string_view`](/reference/string_view/basic_string_view.md)に対応した
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>str -- basic_stringbuf : C++26 string_viewに対応 #1186</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf/str.html"/>
      <id>9ff68ed23110ce265c33182f4f0e6cb074291660:reference/sstream/basic_stringbuf/str.md</id>
      <updated>2025-06-12T14:54:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf/str.md b/reference/sstream/basic_stringbuf/str.md
index 3b05fee01..f09ec1573 100644
--- a/reference/sstream/basic_stringbuf/str.md
+++ b/reference/sstream/basic_stringbuf/str.md
@@ -19,21 +19,40 @@ template &amp;lt;class SAlloc&amp;gt;
 void str(const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s);     // (5) C++20
 
 void str(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s); // (6) C++20
+
+template&amp;lt;class T&amp;gt;
+void str(const T&amp;amp; t);                                       // (7) C++26
 ```
 * basic_string[link /reference/string/basic_string.md]
 
 ## 概要
 文字列オブジェクトを取得または設定する。
 
+- (1) : 文字列オブジェクトを取得する
+- (2) : 文字列オブジェクトを取得し、`SAlloc`型のアロケータ`sa`によってメモリ確保する
+- (3) : 保持する文字列オブジェクトをムーブして取得する
+- (4) : 文字列オブジェクト`s`を設定する
+- (5) : `Allocator`に変換可能な`SAlloc`型のアロケータによって確保されているデータをコピーして、文字列オブジェクト`s`を設定する
+- (6) : 与えられた文字列オブジェクト`s`をムーブして設定する
+- (7) : [`basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列を設定する
+
+
+## テンプレートパラメータ制約
+- (7) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+
+
 ## 効果
 - (1) : 文字列オブジェクトを取得する
 - (2) : 文字列オブジェクトを取得して、`SAlloc`型のアロケータ`sa`によって確保する
 - (3) : 保持する文字列オブジェクトをムーブして取得する
 - (4) : 文字列オブジェクト`s`を設定する
-- (5) : `SAlloc`型のアロケータによって確保されているデータをコピーして、文字列オブジェクト`s`を設定する
+- (5) : `Allocator`に変換可能な`SAlloc`型のアロケータによって確保されているデータをコピーして、文字列オブジェクト`s`を設定する
 - (6) : 与えられた文字列オブジェクト`s`をムーブして設定する
+- (7) : [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;CharT, Traits&amp;gt;(t)`から文字列を設定する
+
 
 ## 例
+### 基本的な使い方
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;sstream&amp;gt;
@@ -64,26 +83,82 @@ int main()
   buf.sputc(&amp;#39;Y&amp;#39;);
   std::cout &amp;lt;&amp;lt; &amp;#34;4: After writing: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
   
-  // C++20: ムーブによる設定
-  std::string s = &amp;#34;Move test&amp;#34;;
-  buf.str(std::move(s));
-  std::cout &amp;lt;&amp;lt; &amp;#34;5: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+  // C++26: string_viewから設定
+  // std::string_view sv = &amp;#34;string_view test&amp;#34;;
+  // buf.str(sv);
+  // std::cout &amp;lt;&amp;lt; &amp;#34;6: &amp;#34; &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
   
   // 空文字列でクリア
   buf.str(&amp;#34;&amp;#34;);
-  std::cout &amp;lt;&amp;lt; &amp;#34;6: Empty? &amp;#34; &amp;lt;&amp;lt; (buf.str().empty() ? &amp;#34;yes&amp;#34; : &amp;#34;no&amp;#34;) &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; &amp;#34;7: Empty? &amp;#34; &amp;lt;&amp;lt; (buf.str().empty() ? &amp;#34;yes&amp;#34; : &amp;#34;no&amp;#34;) &amp;lt;&amp;lt; std::endl;
 }
 ```
 * sputn[link /reference/streambuf/basic_streambuf/sputn.md]
 * sbumpc[link /reference/streambuf/basic_streambuf/sbumpc.md]
 * sputc[link /reference/streambuf/basic_streambuf/sputc.md]
 
-### 出力
+#### 出力
 ```
 1: Hello, World!
 2: New content
 3: After reading 2 chars: Read/Write test
 4: After writing: ReXY/Write test
 5: Move test
-6: Empty? yes
+7: Empty? yes
 ```
+
+#### ムーブを使用する例 (C++20)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+
+int main() {
+  std::stringbuf buf;
+
+  // ムーブして文字列を設定
+  std::string s = &amp;#34;Move string&amp;#34;;
+  buf.str(std::move(s));
+  std::cout &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+
+  // ムーブで文字列を取得
+  std::string r = std::move(buf).str();
+  std::cout &amp;lt;&amp;lt; r &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+Move string
+Move string
+```
+
+### string_viewからの設定 (C++26)
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+#include &amp;lt;string_view&amp;gt;
+
+int main() {
+  std::stringbuf buf;
+
+  // 文字列リテラルを設定
+  buf.str(&amp;#34;set from string literal&amp;#34;);
+  std::cout &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+
+  // string_viewを設定
+  std::string_view sv = &amp;#34;set from string_view&amp;#34;;
+  buf.str(sv);
+  std::cout &amp;lt;&amp;lt; buf.str() &amp;lt;&amp;lt; std::endl;
+}
+```
+
+#### 出力
+```
+set from string literal
+set from string_view
+```
+
+## 参照
+- [P0408R7 Efficient Access to `basic_stringbuf`&amp;#39;s Buffer](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf)
+- [P2495R3 Interfacing stringstreams with `string_view`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2495r3.pdf)
+    - C++26で[`std::string_view`](/reference/string_view/basic_string_view.md)に対応した
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_istringstream -- sstream : 各クラスの概要を補強</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream.html"/>
      <id>b30cc4611f87d076bd60fe61f3b2df6c4bebb1ce:reference/sstream/basic_istringstream.md</id>
      <updated>2025-06-12T10:43:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream.md b/reference/sstream/basic_istringstream.md
index 8aa37930c..ebbf02ec1 100644
--- a/reference/sstream/basic_istringstream.md
+++ b/reference/sstream/basic_istringstream.md
@@ -18,7 +18,9 @@ namespace std {
 * basic_istream[link /reference/istream/basic_istream.md]
 
 ## 概要
-バッファに保持された文字列への読み取り操作ができるストリーム
+`std::basic_istringstream`クラスは、文字列を入力元とするストリームであり、文字列からの読み取り操作ができる。
+
+このクラスは、内部バッファに文字列を保持し、ストリーム操作で文字列の内容を解析することができる。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_ostringstream -- sstream : 各クラスの概要を補強</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_ostringstream.html"/>
      <id>b30cc4611f87d076bd60fe61f3b2df6c4bebb1ce:reference/sstream/basic_ostringstream.md</id>
      <updated>2025-06-12T10:43:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_ostringstream.md b/reference/sstream/basic_ostringstream.md
index e14486acb..3e70ab69c 100644
--- a/reference/sstream/basic_ostringstream.md
+++ b/reference/sstream/basic_ostringstream.md
@@ -18,7 +18,9 @@ namespace std {
 * basic_ostream[link /reference/ostream/basic_ostream.md]
 
 ## 概要
-バッファに保持された文字列への書き込み操作ができるストリーム
+`std::basic_ostringstream`クラスは、文字列への書き込み操作ができる出力ストリームである。
+
+このクラスは、内部バッファに文字列を保持し、ストリーム操作で文字列の内容を組み立てることができる。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stringbuf -- sstream : 各クラスの概要を補強</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringbuf.html"/>
      <id>b30cc4611f87d076bd60fe61f3b2df6c4bebb1ce:reference/sstream/basic_stringbuf.md</id>
      <updated>2025-06-12T10:43:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringbuf.md b/reference/sstream/basic_stringbuf.md
index 0c2f2a467..64241ac57 100644
--- a/reference/sstream/basic_stringbuf.md
+++ b/reference/sstream/basic_stringbuf.md
@@ -18,7 +18,7 @@ namespace std {
 * basic_streambuf[link /reference/streambuf/basic_streambuf.md]
 
 ## 概要
-文字列を保持するストリームバッファ
+`std::basic_stringbuf`クラスは、文字列を保持するストリームバッファであり、文字列を読み書きするストレージとして機能する。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_stringstream -- sstream : 各クラスの概要を補強</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream.html"/>
      <id>b30cc4611f87d076bd60fe61f3b2df6c4bebb1ce:reference/sstream/basic_stringstream.md</id>
      <updated>2025-06-12T10:43:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream.md b/reference/sstream/basic_stringstream.md
index 1557bc763..399c3b3b1 100644
--- a/reference/sstream/basic_stringstream.md
+++ b/reference/sstream/basic_stringstream.md
@@ -18,7 +18,9 @@ namespace std {
 * basic_iostream[link /reference/istream/basic_iostream.md]
 
 ## 概要
-バッファに保持された文字列への読み取りおよび書き込み操作ができるストリーム
+`std::basic_stringstream`クラスは、文字列を出力先・入力元とするストリームであり、読み取りと書き込みの両方の操作ができる。
+
+このクラスは、内部バッファに文字列を保持し、ストリーム操作で文字列の内容を組み立てたり、文字列内容を解析したりすることができる。
 
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_exchange_explicit -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_exchange_explicit.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/atomic/atomic_exchange_explicit.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_exchange_explicit.md b/reference/atomic/atomic_exchange_explicit.md
index 47be113b6..abf282734 100644
--- a/reference/atomic/atomic_exchange_explicit.md
+++ b/reference/atomic/atomic_exchange_explicit.md
@@ -37,7 +37,7 @@ namespace std {
       atomic&amp;lt;T&amp;gt;* object,
       typename atomic&amp;lt;T&amp;gt;::value_type desired,
       memory_order order) noexcept;           // (2) C++26
-]
+}
 ```
 * atomic[link atomic.md]
 * memory_order[link memory_order.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reference -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/bitset/bitset/reference.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/bitset/bitset/reference.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/bitset/bitset/reference.md b/reference/bitset/bitset/reference.md
index 76add68b8..13ff26a29 100644
--- a/reference/bitset/bitset/reference.md
+++ b/reference/bitset/bitset/reference.md
@@ -21,6 +21,7 @@ namespace std {
       CONSTEXPR reference&amp;amp; flip() noexcept;
     };
   };
+}
 ```
 * CONSTEXPR[italic]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clock_time_conversion -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/chrono/clock_time_conversion.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/chrono/clock_time_conversion.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/chrono/clock_time_conversion.md b/reference/chrono/clock_time_conversion.md
index 7795ba08d..397054b41 100644
--- a/reference/chrono/clock_time_conversion.md
+++ b/reference/chrono/clock_time_conversion.md
@@ -16,6 +16,7 @@ namespace std::chrono {
     template &amp;lt;class Duration&amp;gt;
     time_point&amp;lt;Clock, Duration&amp;gt;
       operator()(const time_point&amp;lt;Clock, Duration&amp;gt;&amp;amp; t) const;
+  };
 
   // (3) C++20
   template &amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_map/op_deduction_guide.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/flat_map/flat_map/op_deduction_guide.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_map/op_deduction_guide.md b/reference/flat_map/flat_map/op_deduction_guide.md
index 3bb63d4d8..7efe3b1fe 100644
--- a/reference/flat_map/flat_map/op_deduction_guide.md
+++ b/reference/flat_map/flat_map/op_deduction_guide.md
@@ -78,6 +78,7 @@ namespace std {
   template&amp;lt;class Key, class T, class Compare = less&amp;lt;Key&amp;gt;&amp;gt;
   flat_map(sorted_unique_t, initializer_list&amp;lt;pair&amp;lt;Key, T&amp;gt;&amp;gt;, Compare = Compare())
     -&amp;gt; flat_map&amp;lt;Key, T, Compare&amp;gt;;                                                        // (12)
+}
 ```
 * vector[link /reference/vector/vector.md]
 * from_range_t[link ../../ranges/from_range_t.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/flat_map/flat_multimap/op_deduction_guide.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/flat_map/flat_multimap/op_deduction_guide.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_map/flat_multimap/op_deduction_guide.md b/reference/flat_map/flat_multimap/op_deduction_guide.md
index 811665f2a..8d697687e 100644
--- a/reference/flat_map/flat_multimap/op_deduction_guide.md
+++ b/reference/flat_map/flat_multimap/op_deduction_guide.md
@@ -78,6 +78,7 @@ namespace std {
   template&amp;lt;class Key, class T, class Compare = less&amp;lt;Key&amp;gt;&amp;gt;
   flat_multimap(sorted_equivalent_t, initializer_list&amp;lt;pair&amp;lt;Key, T&amp;gt;&amp;gt;, Compare = Compare())
     -&amp;gt; flat_multimap&amp;lt;Key, T, Compare&amp;gt;;                                                        // (12)
+}
 ```
 * vector[link /reference/vector/vector.md]
 * from_range_t[link ../../ranges/from_range_t.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_multiset/op_deduction_guide.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/flat_set/flat_multiset/op_deduction_guide.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_multiset/op_deduction_guide.md b/reference/flat_set/flat_multiset/op_deduction_guide.md
index 2b1a907c9..a075b7ef1 100644
--- a/reference/flat_set/flat_multiset/op_deduction_guide.md
+++ b/reference/flat_set/flat_multiset/op_deduction_guide.md
@@ -66,6 +66,7 @@ namespace std {
   template&amp;lt;class Key, class Compare = less&amp;lt;Key&amp;gt;&amp;gt;
   flat_multiset(sorted_equivalent_t, initializer_list&amp;lt;Key&amp;gt;, Compare = Compare())
     -&amp;gt; flat_multiset&amp;lt;Key, Compare&amp;gt;;                                                     // (12)
+}
 ```
 * vector[link /reference/vector/vector.md]
 * from_range_t[link ../../ranges/from_range_t.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/flat_set/flat_set/op_deduction_guide.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/flat_set/flat_set/op_deduction_guide.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/flat_set/flat_set/op_deduction_guide.md b/reference/flat_set/flat_set/op_deduction_guide.md
index cadaca6b2..22f0caa70 100644
--- a/reference/flat_set/flat_set/op_deduction_guide.md
+++ b/reference/flat_set/flat_set/op_deduction_guide.md
@@ -66,6 +66,7 @@ namespace std {
   template&amp;lt;class Key, class Compare = less&amp;lt;Key&amp;gt;&amp;gt;
   flat_set(sorted_unique_t, initializer_list&amp;lt;Key&amp;gt;, Compare = Compare())
     -&amp;gt; flat_set&amp;lt;Key, Compare&amp;gt;;                                                          // (12)
+}
 ```
 * vector[link /reference/vector/vector.md]
 * from_range_t[link ../../ranges/from_range_t.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formattable -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/format/formattable.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/format/formattable.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formattable.md b/reference/format/formattable.md
index 41989cc60..82eaaf447 100644
--- a/reference/format/formattable.md
+++ b/reference/format/formattable.md
@@ -19,8 +19,7 @@ namespace std {
              basic_format_parse_context&amp;lt;charT&amp;gt; pc) {
       { f.parse(pc) } -&amp;gt; same_as&amp;lt;basic_format_parse_context&amp;lt;charT&amp;gt;::iterator&amp;gt;;
       { cf.format(t, fc) } -&amp;gt; same_as&amp;lt;fmt-iter-for&amp;lt;charT&amp;gt;&amp;gt;;
-    }
-  };
+    };
 }
 ```
 * fmt-iter-for[italic]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is-mdspan -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/linalg/is-mdspan.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/linalg/is-mdspan.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/linalg/is-mdspan.md b/reference/linalg/is-mdspan.md
index 1079ccc94..3ffdf1d96 100644
--- a/reference/linalg/is-mdspan.md
+++ b/reference/linalg/is-mdspan.md
@@ -9,7 +9,6 @@ constexpr bool is-mdspan = false;
 
 template&amp;lt;class ElementType, class Extents, class Layout, class Accessor&amp;gt;
 constexpr bool is-mdspan&amp;lt;mdspan&amp;lt;ElementType, Extents, Layout, Accessor&amp;gt;&amp;gt; = true;
-}
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view/begin.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/ranges/ref_view/begin.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view/begin.md b/reference/ranges/ref_view/begin.md
index dab222e13..93b7a4f55 100644
--- a/reference/ranges/ref_view/begin.md
+++ b/reference/ranges/ref_view/begin.md
@@ -36,6 +36,7 @@ int main() {
   while (it != end) {
     std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
     ++it;
+  }
 }
 ```
 * begin[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/ref_view/end.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/ranges/ref_view/end.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/ref_view/end.md b/reference/ranges/ref_view/end.md
index 4256efda3..2c9d4c7e1 100644
--- a/reference/ranges/ref_view/end.md
+++ b/reference/ranges/ref_view/end.md
@@ -39,6 +39,7 @@ int main() {
   while (it != end) {
     std::cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &amp;#39; &amp;#39;;
     ++it;
+  }
 }
 ```
 * end[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/basic_stacktrace/op_ostream.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/stacktrace/basic_stacktrace/op_ostream.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/basic_stacktrace/op_ostream.md b/reference/stacktrace/basic_stacktrace/op_ostream.md
index 314b09505..a4651dbbf 100644
--- a/reference/stacktrace/basic_stacktrace/op_ostream.md
+++ b/reference/stacktrace/basic_stacktrace/op_ostream.md
@@ -11,6 +11,7 @@ namespace std {
   basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
     operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os,
                const basic_stacktrace&amp;lt;Allocator&amp;gt;&amp;amp; st);
+}
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- 対応しない波カッコを修正</title>
      <link href="https://cpprefjp.github.io/reference/stacktrace/stacktrace_entry/op_ostream.html"/>
      <id>ece3ce92ab8fd0548216b50582023ed6963ac309:reference/stacktrace/stacktrace_entry/op_ostream.md</id>
      <updated>2025-06-11T23:18:15+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/stacktrace/stacktrace_entry/op_ostream.md b/reference/stacktrace/stacktrace_entry/op_ostream.md
index 41769250d..8b4e77cf8 100644
--- a/reference/stacktrace/stacktrace_entry/op_ostream.md
+++ b/reference/stacktrace/stacktrace_entry/op_ostream.md
@@ -11,6 +11,7 @@ namespace std {
   basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp;
     operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;charT, traits&amp;gt;&amp;amp; os,
                const stacktrace_entry&amp;amp; f);
+}
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>overrideとfinal [N2928] -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp11/override_final.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:lang/cpp11/override_final.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp11/override_final.md b/lang/cpp11/override_final.md
index a1d082e0a..17cc8b662 100644
--- a/lang/cpp11/override_final.md
+++ b/lang/cpp11/override_final.md
@@ -42,7 +42,7 @@ class-head:
 ```cpp
 class derived_class final : public base_class {
   ...
-}
+};
 ```
 
 また、メンバ変数やメンバ関数の名前以降（member-declarator）は下記の文法となる：
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>値のコピー省略を保証 [P0135R1] -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/guaranteed_copy_elision.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:lang/cpp17/guaranteed_copy_elision.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/guaranteed_copy_elision.md b/lang/cpp17/guaranteed_copy_elision.md
index c11f847d8..95d86a6a0 100644
--- a/lang/cpp17/guaranteed_copy_elision.md
+++ b/lang/cpp17/guaranteed_copy_elision.md
@@ -25,7 +25,7 @@ Temporary materialization conversion
 例:
 
 ```cpp
-struct X { int n; }
+struct X { int n; };
 int k = X().n; // ok, X() prvalue は xvalue に変換される
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンパイル時初期化を強制する`constinit`キーワードを追加 [P1143R2] -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/constinit.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:lang/cpp20/constinit.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/constinit.md b/lang/cpp20/constinit.md
index 3997d19d8..5f49c34e8 100644
--- a/lang/cpp20/constinit.md
+++ b/lang/cpp20/constinit.md
@@ -77,7 +77,7 @@ int main () {
 ```cpp
 struct S {
   constinit int n;  // NG
-}
+};
 
 int main() {
   constinit int m = 10; // NG
@@ -91,7 +91,7 @@ constinit extern int N; // NG、未定義動作、何も言われない
 
 struct S {
   constinit static int M;
-}
+};
 int S::M = 12;  // NG、constinitはこちらに必要、おそらく警告が発せられる
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>可変サイズをもつコンテナのconstexpr化 [P0784R7] -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp20/more_constexpr_containers.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:lang/cpp20/more_constexpr_containers.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp20/more_constexpr_containers.md b/lang/cpp20/more_constexpr_containers.md
index a693e3c5b..36010cc6e 100644
--- a/lang/cpp20/more_constexpr_containers.md
+++ b/lang/cpp20/more_constexpr_containers.md
@@ -313,7 +313,7 @@ struct sample {
     }
     m_alloc.deallocate(m_p, m_size);
   }
-}
+};
 
 constexpr sample&amp;lt;char&amp;gt; str{&amp;#34;Hello.&amp;#34;};
 // 実行時、strは&amp;#34;Hello&amp;#34;を保持する静的配列を参照するようになる
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>契約に基づくプログラミング -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/lang/future/contract-based_programming.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:lang/future/contract-based_programming.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/future/contract-based_programming.md b/lang/future/contract-based_programming.md
index 4d05db8c7..63857ab27 100644
--- a/lang/future/contract-based_programming.md
+++ b/lang/future/contract-based_programming.md
@@ -247,7 +247,7 @@ struct derived : base {
   int g(int n) override {
     return -1;
   }
-}
+};
 ```
 
 ## この機能が必要になった背景・経緯
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tuple_element -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/array/array/tuple_element.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:reference/array/array/tuple_element.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/array/array/tuple_element.md b/reference/array/array/tuple_element.md
index feeec4060..94b4c2daa 100644
--- a/reference/array/array/tuple_element.md
+++ b/reference/array/array/tuple_element.md
@@ -12,7 +12,7 @@ namespace std {
   struct tuple_element&amp;lt;I, array&amp;lt;T, N&amp;gt;&amp;gt; {
     static_assert(I &amp;lt; N, implementation-defined);
     using type = T;
-  }
+  };
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assertion_kind -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/contracts/assertion_kind.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:reference/contracts/assertion_kind.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/assertion_kind.md b/reference/contracts/assertion_kind.md
index 4388063e7..8b4d2768d 100644
--- a/reference/contracts/assertion_kind.md
+++ b/reference/contracts/assertion_kind.md
@@ -10,7 +10,7 @@ namespace std::contracts {
     pre = 1,
     post = 2,
     assertion = 3
-  }
+  };
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contract_violation -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/contracts/contract_violation.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:reference/contracts/contract_violation.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/contract_violation.md b/reference/contracts/contract_violation.md
index b09eb9335..9f182bd02 100644
--- a/reference/contracts/contract_violation.md
+++ b/reference/contracts/contract_violation.md
@@ -15,7 +15,7 @@ namespace std::contracts {
     assertion_kind kind() const noexcept;
     source_location location() const noexcept;
     evaluation_semantic semantic() const noexcept;
-  }
+  };
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>detection_mode -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/contracts/detection_mode.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:reference/contracts/detection_mode.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/detection_mode.md b/reference/contracts/detection_mode.md
index 6e3c9ecc0..31c740bb2 100644
--- a/reference/contracts/detection_mode.md
+++ b/reference/contracts/detection_mode.md
@@ -9,7 +9,7 @@ namespace std::contracts {
   enum class detection_mode : unspecified {
     predicate_false = 1,
     evaluation_exception = 2
-  }
+  };
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>evaluation_semantic -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/contracts/evaluation_semantic.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:reference/contracts/evaluation_semantic.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/contracts/evaluation_semantic.md b/reference/contracts/evaluation_semantic.md
index 28d381cc2..de7316cd5 100644
--- a/reference/contracts/evaluation_semantic.md
+++ b/reference/contracts/evaluation_semantic.md
@@ -12,7 +12,7 @@ namespace std::contracts {
     enforce = 3,
     quick_enforce = 4 // ,
     // assume = 5 &amp;lt;-- 将来追加予定
-  }
+  };
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>moneypunct_byname -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/locale/moneypunct_byname.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:reference/locale/moneypunct_byname.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/locale/moneypunct_byname.md b/reference/locale/moneypunct_byname.md
index 96b158b31..74ebb768c 100644
--- a/reference/locale/moneypunct_byname.md
+++ b/reference/locale/moneypunct_byname.md
@@ -6,7 +6,7 @@
 ```cpp
 namespace std {
   template &amp;lt;class charT, bool International = false&amp;gt;
-  class moneypunct_byname : public moneypunct&amp;lt;charT, International&amp;gt;
+  class moneypunct_byname : public moneypunct&amp;lt;charT, International&amp;gt;;
 }
 ```
 * moneypunct[link /reference/locale/moneypunct.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>unwrap_reference -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/unwrap_reference.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:reference/type_traits/unwrap_reference.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/unwrap_reference.md b/reference/type_traits/unwrap_reference.md
index a870b356b..70ec485ce 100644
--- a/reference/type_traits/unwrap_reference.md
+++ b/reference/type_traits/unwrap_reference.md
@@ -85,10 +85,10 @@ int main()
 ```cpp
 namespace std {
   template &amp;lt;class T&amp;gt;
-  struct unwrap_reference { using type = T; }
+  struct unwrap_reference { using type = T; };
 
   template &amp;lt;class T&amp;gt;
-  struct unwrap_reference&amp;lt;reference_wrapper&amp;lt;T&amp;gt;&amp;gt; { using type = T&amp;amp;; }
+  struct unwrap_reference&amp;lt;reference_wrapper&amp;lt;T&amp;gt;&amp;gt; { using type = T&amp;amp;; };
 }
 ```
 * reference_wrapper[link /reference/functional/reference_wrapper.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector -- クラス定義の後のセミコロン忘れを修正</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector.html"/>
      <id>919efc3d014f37d4b4de910db6ccf49c8e978575:reference/vector/vector.md</id>
      <updated>2025-06-11T23:15:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector.md b/reference/vector/vector.md
index c98058e9b..3e9eaa8c8 100644
--- a/reference/vector/vector.md
+++ b/reference/vector/vector.md
@@ -193,7 +193,7 @@ public:
   constexpr reference&amp;amp; operator=(const reference&amp;amp; x) noexcept; // vector&amp;lt;bool&amp;gt;のビットからの代入
   constexpr const reference&amp;amp; operator=(bool x) const noexcept; // *thisがconst時のboolからの代入（C++23）
   constexpr void flip() noexcept;                              // ビットの反転
-}
+};
 ```
 
 ### ハッシュサポート
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Raclamusi</name>
        <email>raclamusi@gmail.com</email>
      </author>
    </entry>
  
</feed>
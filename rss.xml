<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-03-23T03:46:04.460289</updated>
  <id>30a80b46-3486-419c-b394-fe69d11ca414</id>

  
    <entry>
      <title>append -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/append.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/append.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/append.md b/reference/string/basic_string/append.md
index a50713ffc..38546d43e 100644
--- a/reference/string/basic_string/append.md
+++ b/reference/string/basic_string/append.md
@@ -26,8 +26,11 @@ basic_string&amp;amp; append(InputIterator first, InputIterator last);  // (6)
 
 basic_string&amp;amp; append(initializer_list&amp;lt;charT&amp;gt; il);               // (7) C++11
 
-basic_string&amp;amp; append(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv); // (8) C++17
-basic_string&amp;amp; append(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
+// string_viewを引数に取るオーバーロード
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp; append(const T&amp;amp; t);                             // (8) C++17
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp; append(const T&amp;amp; t,
                      size_type pos,
                      size_type n = npos);                       // (9) C++17
 ```
@@ -36,6 +39,11 @@ basic_string&amp;amp; append(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 ## 概要
 指定された文字列、文字、あるいは初期化リストを追加する。
 
+## テンプレートパラメータ制約
+
+- (8)(9) : 以下の両方を満たしていること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
 - (2) では、`pos &amp;lt;=` [`size`](size.md)`()` であること。
@@ -70,11 +78,23 @@ basic_string&amp;amp; append(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 
 - (7) 対象オブジェクトの末尾に初期化リスト `il` で表された文字列が追加される。
     * `append(il.begin(), il.end())` と等価。
-- (8) 対象オブジェクトの末尾に、`sv`が参照する範囲の文字列が追加される。
-    * `append(`[`sv.data()`](/reference/string_view/basic_string_view/data.md)`,` [`sv.size()`](/reference/string_view/basic_string_view/size.md)`)` と等価。
-- (9) 対象オブジェクトの末尾に、`sv`の指定された範囲の文字列が追加される。
-    * 文字列の長さ `rlen` は、`n` と [`sv.size()`](/reference/string_view/basic_string_view/size.md)` - pos` の小さい方である。
-    * `append(`[`sv.data()`](/reference/string_view/basic_string_view/data.md) `+ pos, rlen)` を呼び出す。
+- (8) 対象オブジェクトの末尾に、[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`が参照する範囲の文字列が追加される。  
+以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return append(sv.data(), sv.size());
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+  * 
+- (9) 対象オブジェクトの末尾に、[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`の指定された範囲の文字列が追加される。
+    * 文字列の長さ `rlen` は、`n` と [`sv.size()`](/reference/string_view/basic_string_view/size.md)` - pos` の小さい方である。  
+以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return append(sv.substr(pos, n));
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+  * substr[link /reference/string_view/basic_string_view/append.md]
 
 
 ## 戻り値
@@ -169,3 +189,6 @@ Hello, world
 - [LWG ISsue 2268. Setting a default argument in the declaration of a member function `assign` of `std::basic_string`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2268)
     - C++14から(2)のオーバーロードに、`n = npos`のデフォルト引数を追加。
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(8)(9)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/assign.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/assign.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/assign.md b/reference/string/basic_string/assign.md
index c10dea3d0..8e4c05b02 100644
--- a/reference/string/basic_string/assign.md
+++ b/reference/string/basic_string/assign.md
@@ -29,9 +29,11 @@ basic_string&amp;amp; assign(InputIterator first,
 
 basic_string&amp;amp; assign(initializer_list&amp;lt;charT&amp;gt;);                  // (8) C++11
 
-basic_string&amp;amp; assign(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv); // (9) C++17
-
-basic_string&amp;amp; assign(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
+// string_viewを引数に取るオーバーロード
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp; assign(const T&amp;amp; t);                               // (9) C++17
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp; assign(const T&amp;amp; t,
                      size_type pos,
                      size_type n = npos);                       // (10) C++17
 ```
@@ -42,6 +44,11 @@ basic_string&amp;amp; assign(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 
 この関数は、アロケータを除き、`basic_string`クラスのコンストラクタと同様のパラメータを受け取り、再代入を行う。代入演算子が一つのパラメータしか扱えないため、複数パラメータによる代入として使用する。
 
+## テンプレートパラメータ制約
+
+- (9)(10) : 以下の両方を満たしていること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
 - (3) : `pos &amp;lt;= str.`[`size()`](size.md)であること。
@@ -65,11 +72,21 @@ basic_string&amp;amp; assign(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
     - `assign(basic_string(first, last))`と等価。
 - (8) : 文字の初期化子リストから`basic_string`オブジェクトを構築する。
     - `assign(il.begin(), il.end())`を呼び出す。
-- (9) : `std::basic_string_view`オブジェクトが参照する範囲をコピーして、`basic_string`オブジェクトを構築する。
-    - `assign(`[`sv.data()`](/reference/string_view/basic_string_view/data.md)`,` [`sv.size()`](/reference/string_view/basic_string_view/size.md)`)` と等価。
-- (10) : `std::basic_string_view`オブジェクトが参照する文字列を範囲指定でコピーして、`basic_string`オブジェクトを構築する。
-    - 文字列の長さ `rlen` は、`n` と [`sv.size()`](/reference/string_view/basic_string_view/size.md)` - pos` の小さい方である。
-    - `assign(`[`sv.data()`](/reference/string_view/basic_string_view/data.md) `+ pos, rlen)` を呼び出す。
+- (9) : [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`が参照する範囲をコピーして、`basic_string`オブジェクトを構築する。  
+以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return assign(sv.data(), sv.size());
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+- (10) : [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`が参照する文字列を範囲指定でコピーして、`basic_string`オブジェクトを構築する。  
+以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return assign(sv.substr(pos, n));
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+  * substr[link /reference/string_view/basic_string_view/append.md]
 
 
 ## 戻り値
@@ -165,3 +182,6 @@ s10 : Hello
 - [LWG ISsue 2268. Setting a default argument in the declaration of a member function `assign` of `std::basic_string`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2268)
     - C++14から(3)のオーバーロードに、`n = npos`のデフォルト引数を追加。
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(9)(10)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>compare -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/compare.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/compare.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/compare.md b/reference/string/basic_string/compare.md
index 14894446b..237c1c2be 100644
--- a/reference/string/basic_string/compare.md
+++ b/reference/string/basic_string/compare.md
@@ -22,15 +22,17 @@ int compare(size_type pos1, size_type n1,
 int compare(size_type pos1, size_type n1,
             const charT* s, size_type n2) const;                      // (6)
 
-int compare(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv) const noexcept; // (7) C++17
-
+// string_viewを引数に取るオーバーロード
+template&amp;lt;class T&amp;gt;
+int compare(const T&amp;amp; t) const noexcept(/*see below*/);                // (7) C++17
+template&amp;lt;class T&amp;gt;
 int compare(size_type pos1,
             size_type n1,
-            std::basic_string_view&amp;lt;charT, traits&amp;gt; sv) const;          // (8) C++17
-
+            const T&amp;amp; t) const;                                        // (8) C++17
+template&amp;lt;class T&amp;gt;
 int compare(size_type pos1,
             size_type n1,
-            std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
+            const T&amp;amp; t,
             size_type pos2,
             size_type n2 = npos) const;                               // (9) C++17
 ```
@@ -38,6 +40,11 @@ int compare(size_type pos1,
 ## 概要
 他の文字列との比較を行う。
 
+## テンプレートパラメータ制約
+
+- (7)(8)(9) : 以下の両方を満たしていること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 効果
 - (1) 自身の文字列長とパラメータ`str`の文字列長のうち、小さい長さを`rlen`とし、[`traits::compare`](/reference/string/char_traits/compare.md)`(`[`data()`](data.md)`, str.`[`data()`](data.md)`, rlen)`を呼び出す。
@@ -58,10 +65,20 @@ int compare(size_type pos1,
 - (4) `compare(basic_string(s))` と等価
 - (5) `basic_string(*this, pos, n1).compare(basic_string(s))` と等価
 - (6) `basic_string(*this, pos, n1).compare(basic_string(s, n2))` と等価
-- (7) (1)と同様の結果を返す。
-- (8) `basic_string_view&amp;lt;charT, traits&amp;gt;(`[`this.data()`](data.md)`, pos1, n1).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(sv)` と等価
-- (9) `basic_string_view&amp;lt;charT, traits&amp;gt;(`[`this.data()`](data.md)`, pos1, n1).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(sv, pos1, n2)` と等価
+- (7) (1)と同様の結果を返す。`return basic_string_view&amp;lt;charT, traits&amp;gt;(*this).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(t);`と等価。
+- (8) `basic_string_view&amp;lt;charT, traits&amp;gt;(*this).`[`substr`](/reference/string_view/basic_string_view/substr.md)`(pos1, n1).`[`compare`](/reference/string_view/basic_string_view/compare.md)`(t)` と等価
+- (9) 以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; s = *this, sv = t;
+  return s.substr(pos1, n1).compare(sv.substr(pos2, n2));
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+  * substr[link /reference/string_view/basic_string_view/append.md]
+  * compare[link /reference/string_view/basic_string_view/compare.md]
+
+## 例外
 
+- (7) : `noexcept(is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;)`が指定される
 
 ## 例
 ```cpp example
@@ -90,3 +107,6 @@ int main()
 - [LWG ISsue 2268. Setting a default argument in the declaration of a member function `assign` of `std::basic_string`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2268)
     - C++14から(2)のオーバーロードに、`n = npos`のデフォルト引数を追加。
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(7)(8)(9)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/find.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find.md b/reference/string/basic_string/find.md
index 9db6d1734..1f59fa185 100644
--- a/reference/string/basic_string/find.md
+++ b/reference/string/basic_string/find.md
@@ -13,10 +13,9 @@ size_type find(const charT* s, size_type pos = 0) const;                   // (3
 
 size_type find(charT c, size_type pos = 0) const;                          // (4)
 
-size_type find(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
-               size_type pos = 0) const noexcept;                          // (5) C++17
+// string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type find(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);   // (5) C++20
+size_type find(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);   // (5) C++17
 ```
 
 ## 概要
@@ -38,9 +37,7 @@ size_type find(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);   // (5
 - (2) `pos` 以降で最初に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
 - (4) `pos` 以降で最初に `c` と一致する位置を返す。
-- (5) :
-    - C++17 : `pos` 以降で最初に `sv` と一致する位置を返す。
-    - C++20 : `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` と一致する位置を返す。
+- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` と一致する位置を返す。
 
 
 ## 戻り値
@@ -49,9 +46,7 @@ size_type find(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);   // (5
 
 ## 例外
 - (1) 投げない
-- (5) :
-    - C++17 : 投げない
-    - C++20 : `noexcept`内の式は、以下と等価である
+- (5) `noexcept`内の式は、以下と等価である
         ```cpp
         is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
         ```
@@ -131,3 +126,5 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find(charT c, size_type pos =
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [P0758R1 Implicit conversion traits and utility functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0758r1.html)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_not_of -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_first_not_of.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/find_first_not_of.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_first_not_of.md b/reference/string/basic_string/find_first_not_of.md
index 47245908b..0776a19fe 100644
--- a/reference/string/basic_string/find_first_not_of.md
+++ b/reference/string/basic_string/find_first_not_of.md
@@ -13,13 +13,18 @@ size_type find_first_not_of(const charT* s, size_type pos = 0) const;
 
 size_type find_first_not_of(charT c, size_type pos = 0) const;                          // (4)
 
-size_type find_first_not_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
-                            size_type pos = 0) const noexcept;                          // (5) C++17
+// string_viewを引数に取るオーバーロード
+template &amp;lt;class T&amp;gt;
+size_type find_first_not_of(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);  // (5) C++17
 ```
 
 ## 概要
 指定された文字列中のいずれの文字にも一致しない最初の場所を検索する。
 
+## テンプレートパラメータ制約
+- (5) :
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt;`が`true`であること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt;`が`false`であること
 
 ## 要件
 (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
@@ -30,7 +35,7 @@ size_type find_first_not_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 - (2) `pos` 以降で最初に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
 - (4) `pos` 以降で最初に `c` と一致しない文字の位置を返す。
-- (5) `pos` 以降で最初に `sv` 内に存在しない文字の位置を返す。
+- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` 内に存在しない文字の位置を返す。
 
 
 ## 戻り値
@@ -39,7 +44,12 @@ size_type find_first_not_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 
 ## 例外
 - (1) 投げない
-- (5) 投げない
+- (5) `noexcept`内の式は、以下と等価である
+        ```cpp
+        is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
+        ```
+        * is_nothrow_convertible_v[link /reference/type_traits/is_nothrow_convertible.md]
+        * basic_string_view[link /reference/string_view/basic_string_view.md]
 
 
 ## 備考
@@ -108,3 +118,5 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find_first_not_of(charT c, siz
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_of -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_first_of.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/find_first_of.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_first_of.md b/reference/string/basic_string/find_first_of.md
index f2b03593e..4fb35f1c4 100644
--- a/reference/string/basic_string/find_first_of.md
+++ b/reference/string/basic_string/find_first_of.md
@@ -13,13 +13,19 @@ size_type find_first_of(const charT* s, size_type pos = 0) const;
 
 size_type find_first_of(charT c, size_type pos = 0) const;                          // (4)
 
-size_type find_first_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
-                        size_type pos = 0) const noexcept;                          // (5) C++17
+// string_viewを引数に取るオーバーロード
+template &amp;lt;class T&amp;gt;
+size_type find_first_of(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);   // (5) C++17
 ```
 
 ## 概要
 指定された文字列中のいずれかの文字が出現する最初の場所を検索する。
 
+## テンプレートパラメータ制約
+- (5) :
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt;`が`true`であること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt;`が`false`であること
+
 
 ## 要件
 (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
@@ -30,7 +36,7 @@ size_type find_first_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 - (2) `pos` 以降で最初に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
 - (4) `pos` 以降で最初に `c` と一致する文字の位置を返す。
-- (5) `pos` 以降で最初に `sv` 内に存在する文字の位置を返す。
+- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` 以降で最初に `sv` 内に存在する文字の位置を返す。
 
 
 ## 戻り値
@@ -39,7 +45,12 @@ size_type find_first_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 
 ## 例外
 - (1) 投げない
-- (5) 投げない
+- (5) `noexcept`内の式は、以下と等価である
+        ```cpp
+        is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
+        ```
+        * is_nothrow_convertible_v[link /reference/type_traits/is_nothrow_convertible.md]
+        * basic_string_view[link /reference/string_view/basic_string_view.md]
 
 
 ## 備考
@@ -116,3 +127,5 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find_first_of(charT c, size_ty
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_not_of -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_not_of.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/find_last_not_of.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_not_of.md b/reference/string/basic_string/find_last_not_of.md
index 0c3eef18b..97c39b8d8 100644
--- a/reference/string/basic_string/find_last_not_of.md
+++ b/reference/string/basic_string/find_last_not_of.md
@@ -13,13 +13,19 @@ size_type find_last_not_of(const charT* s, size_type pos = npos) const;
 
 size_type find_last_not_of(charT c, size_type pos = npos) const;                          // (4)
 
-size_type find_last_not_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
-                           size_type pos = npos) const noexcept;                          // (5) C++17
+// string_viewを引数に取るオーバーロード
+template &amp;lt;class T&amp;gt;
+size_type find_last_not_of(const T&amp;amp; t, size_type pos = npos) const noexcept(see below);   // (5) C++17
 ```
 
 ## 概要
 指定された文字列中のいずれの文字にも一致しない最後の場所を検索する。
 
+## テンプレートパラメータ制約
+- (5) :
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt;`が`true`であること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt;`が`false`であること
+
 
 ## 要件
 (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
@@ -30,7 +36,7 @@ size_type find_last_not_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 - (2) `pos` より前で最後に `s` 内に存在しない文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
 - (4) `pos` より前で最後に `c` と一致しない文字の位置を返す。
-- (5) `pos` より前で最後に `sv` 内に存在しない文字の位置を返す。
+- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在しない文字の位置を返す。
 
 
 ## 戻り値
@@ -39,7 +45,12 @@ size_type find_last_not_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 
 ## 例外
 - (1) 投げない
-- (5) 投げない
+- (5) `noexcept`内の式は、以下と等価である
+        ```cpp
+        is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
+        ```
+        * is_nothrow_convertible_v[link /reference/type_traits/is_nothrow_convertible.md]
+        * basic_string_view[link /reference/string_view/basic_string_view.md]
 
 
 ## 備考
@@ -108,3 +119,5 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find_last_not_of(charT c, size
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_of -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_of.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/find_last_of.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_of.md b/reference/string/basic_string/find_last_of.md
index ab4989861..417a5ef65 100644
--- a/reference/string/basic_string/find_last_of.md
+++ b/reference/string/basic_string/find_last_of.md
@@ -13,13 +13,19 @@ size_type find_last_of(const charT* s, size_type pos = npos) const;
 
 size_type find_last_of(charT c, size_type pos = npos) const;                          // (4)
 
-size_type find_last_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
-                       size_type pos = npos) const noexcept;                          // (5) C++17
+// string_viewを引数に取るオーバーロード
+template &amp;lt;class T&amp;gt;
+size_type find_last_of(const T&amp;amp; t, size_type pos = npos) const noexcept(see below);   // (5) C++17
 ```
 
 ## 概要
 指定された文字列中のいずれかの文字が出現する最後の場所を検索する。
 
+## テンプレートパラメータ制約
+- (5) :
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt;`が`true`であること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt;`が`false`であること
+
 
 ## 要件
 (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
@@ -30,7 +36,7 @@ size_type find_last_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 - (2) `pos` より前で最後に `s` 内に存在する文字の位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
 - (4) `pos` より前で最後に `c` と一致する文字の位置を返す。
-- (5) `pos` より前で最後に `sv` 内に存在する文字の位置を返す。
+- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` 内に存在する文字の位置を返す。
 
 
 ## 戻り値
@@ -39,7 +45,12 @@ size_type find_last_of(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 
 ## 例外
 - (1) 投げない
-- (5) 投げない
+- (5) `noexcept`内の式は、以下と等価である
+        ```cpp
+        is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
+        ```
+        * is_nothrow_convertible_v[link /reference/type_traits/is_nothrow_convertible.md]
+        * basic_string_view[link /reference/string_view/basic_string_view.md]
 
 
 ## 備考
@@ -108,3 +119,5 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find_last_of(charT c, size_typ
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/insert.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/insert.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/insert.md b/reference/string/basic_string/insert.md
index 0505e5efd..9d8ac86ac 100644
--- a/reference/string/basic_string/insert.md
+++ b/reference/string/basic_string/insert.md
@@ -31,11 +31,13 @@ iterator insert(const_iterator p,
 
 iterator insert(const_iterator p, initializer_list&amp;lt;charT&amp;gt;);       // (9) C++11
 
+// string_viewを引数に取るオーバーロード
+template&amp;lt;class T&amp;gt;
 basic_string&amp;amp; insert(size_type pos1,
-                     std::basic_string_view&amp;lt;charT, traits&amp;gt; sv);   // (10) C++17
-
+                     const T&amp;amp; t);                                 // (10) C++17
+template&amp;lt;class T&amp;gt;
 basic_string&amp;amp; insert(size_type pos1,
-                     std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
+                     const T&amp;amp; t,
                      size_type pos2,
                      size_type n = npos);                         // (11) C++17
 ```
@@ -44,6 +46,11 @@ basic_string&amp;amp; insert(size_type pos1,
 ## 概要
 文字／文字列を挿入する。
 
+## テンプレートパラメータ制約
+
+- (10)(11) : 以下の両方を満たしていること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
 - (1) : `pos &amp;lt;=` [`size()`](size.md)
@@ -67,10 +74,19 @@ basic_string&amp;amp; insert(size_type pos1,
 - (7) : イテレータ`p`が指す要素の前に、文字`c`のコピーを`n`個挿入する。
 - (8) : `insert(p -` [`begin()`](begin.md)`, basic_string(first, last))`と等価の効果を持つ。
 - (9) : `insert(p, il.`[`begin()`](/reference/initializer_list/initializer_list/begin.md)`, il.`[`end()`](/reference/initializer_list/initializer_list/end.md)`)`
-- (10) : `return insert(pos1,` [`sv.data()`](/reference/string_view/basic_string_view/data.md)`,` [`sv.size()`](/reference/string_view/basic_string_view/size.md)`)` と等価の効果を持つ。
-- (11) :
-    - `sv.`[`size()`](/reference/string_view/basic_string_view/size.md) `- pos2`と`n`のうち小さい方を`rlen`とする
-    - `insert(pos1,` [`sv.data()`](/reference/string_view/basic_string_view/data.md) `+ pos2, rlen)` を呼び出す
+- (10) : 以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return insert(pos1, sv.data(), sv.size());
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+- (11) : 以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return insert(pos1, sv.substr(pos2, n));
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+  * substr[link /reference/string_view/basic_string_view/append.md]
 
 
 ## 戻り値
@@ -230,3 +246,6 @@ int main()
 - [LWG ISsue 2268. Setting a default argument in the declaration of a member function `assign` of `std::basic_string`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2268)
     - C++14から(2)のオーバーロードに、`n = npos`のデフォルト引数を追加。
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(10)(11)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_assign.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/op_assign.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_assign.md b/reference/string/basic_string/op_assign.md
index 8b0790062..1a450eee7 100644
--- a/reference/string/basic_string/op_assign.md
+++ b/reference/string/basic_string/op_assign.md
@@ -13,7 +13,10 @@ basic_string&amp;amp; operator=(basic_string&amp;amp;&amp;amp; str) noexcept
 basic_string&amp;amp; operator=(const charT* s);                           // (3)
 basic_string&amp;amp; operator=(charT c);                                  // (4)
 basic_string&amp;amp; operator=(initializer_list&amp;lt;charT&amp;gt; il);               // (5) C++11
-basic_string&amp;amp; operator=(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv); // (6) C++17
+
+// string_viewを引数に取るオーバーロード
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp; operator=(const T&amp;amp; t);                               // (6) C++17
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -23,8 +26,20 @@ basic_string&amp;amp; operator=(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv); // (6) C++17
 - (3) : `*this = basic_string(s);` と等価。
 - (4) : `*this = basic_string(1, c);` と等価。
 - (5) : `*this = basic_string(il);` と等価。
-- (6) : [`std::basic_string_view`](/reference/string_view/basic_string_view.md)オブジェクトからの変換。`return` [`assign`](assign.md)`(sv)` と等価。
+- (6) : [`std::basic_string_view`](/reference/string_view/basic_string_view.md)オブジェクトからの変換。以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return assign(sv);
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+  * assign[link assign.md]
+
+
+## テンプレートパラメータ制約
 
+- (6) : 以下の両方を満たしていること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 効果
 コピーを行った場合と、ムーブ代入を行った場合で効果が異なる
@@ -97,3 +112,5 @@ hello
 - [N2679 Initializer Lists for Standard Containers(Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf)
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(6)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/op_constructor.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_constructor.md b/reference/string/basic_string/op_constructor.md
index 13b830d89..946cf5d09 100644
--- a/reference/string/basic_string/op_constructor.md
+++ b/reference/string/basic_string/op_constructor.md
@@ -52,8 +52,15 @@ basic_string(initializer_list&amp;lt;charT&amp;gt; init,
 basic_string(const basic_string&amp;amp; str, const Allocator&amp;amp;);        // (12) C++11
 basic_string(basic_string&amp;amp;&amp;amp; str, const Allocator&amp;amp;);             // (13) C++11
 
-explicit basic_string(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
+// string_viewから構築するコンストラクタ
+template&amp;lt;class T&amp;gt;
+explicit basic_string(const T&amp;amp; t,
                       const Allocator&amp;amp; a = Allocator());        // (14) C++17
+template&amp;lt;class T&amp;gt;
+         basic_string(const T&amp;amp; t,
+                      size_type pos,
+                      size_type n,
+                      const Allocator&amp;amp; a = Allocator());        // (15) C++17
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -71,7 +78,15 @@ explicit basic_string(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 - (11) : 文字の初期化子リストから`basic_string`オブジェクトを構築する。
 - (12) : アロケータを受け取るコピーコンストラクタ。
 - (13) : アロケータを受け取るムーブコンストラクタ。
-- (14) : [`std::basic_string_view`](/reference/string_view/basic_string_view.md)オブジェクトからの変換コンストラクタ。`sv`が参照する範囲の文字列を`*this`にコピーする
+- (14) : [`std::basic_string_view`](/reference/string_view/basic_string_view.md)オブジェクトからの変換コンストラクタ。[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`が参照する範囲の文字列を`*this`にコピーする。
+- (15) : [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`が参照する範囲の文字列の`pos`番目から`n`文字の部分文字列がコピーされる。`n == npos`の場合、`pos`番目から末尾までの部分文字列がコピーされる。
+
+## テンプレートパラメータ制約
+
+- (14) : 以下の両方を満たしていること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
+- (15) : [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`であること
 
 
 ## 要件
@@ -179,3 +194,7 @@ s14 : Hello
 - [LWG Issue 2583. There is no way to supply an allocator for `basic_string(str, pos)`](https://wg21.cmeerw.net/lwg/issue2583)
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
+- [LWG Issue 2742. Inconsistent string interface taking `string_view`](https://wg21.cmeerw.net/lwg/issue2742)
+    - `string_view`から範囲を指定して構築する(15)を追加
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(14)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus_assign.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/op_plus_assign.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus_assign.md b/reference/string/basic_string/op_plus_assign.md
index 8c15b3498..35b1b4da9 100644
--- a/reference/string/basic_string/op_plus_assign.md
+++ b/reference/string/basic_string/op_plus_assign.md
@@ -133,6 +133,6 @@ Hello, world! :) :)
 - [N2679 Initializer Lists for Standard Containers(Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf)
     - (4)の経緯となる提案文書
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
-- [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2268)
+- [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/replace.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/replace.md b/reference/string/basic_string/replace.md
index 14f47def1..d03f0523d 100644
--- a/reference/string/basic_string/replace.md
+++ b/reference/string/basic_string/replace.md
@@ -51,37 +51,44 @@ basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
 basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
                       initializer_list&amp;lt;charT&amp;gt; il);                  // (11) C++11
 
+// string_viewを引数に取るオーバーロード
+template&amp;lt;class T&amp;gt;
 basic_string&amp;amp; replace(size_type pos1,
                       size_type n1,
-                      std::basic_string_view&amp;lt;charT, traits&amp;gt; sv);    // (12) C++17
-
-basic_string&amp;amp; replace(size_type pos1,
+                      const T&amp;amp; t);                                  // (12) C++17
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp; replace(size_type pos1, 
                       size_type n1,
-                      std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
+                      const T&amp;amp; t,
                       size_type pos2,
                       size_type n2 = npos);                         // (13) C++17
-
+template&amp;lt;class T&amp;gt;
 basic_string&amp;amp; replace(const_iterator i1,
                       const_iterator i2,
-                      std::basic_string_view&amp;lt;charT, traits&amp;gt; sv);    // (14) C++17
+                      const T&amp;amp; t);                                  // (14) C++17
 ```
 
 ## 概要
 文字列の一部を置換する。
 
+## テンプレートパラメータ制約
+
+- (12)(13)(14) : 以下の両方を満たしていること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
 - (1) : `pos1 &amp;lt;=` [`size()`](size.md)
 - (2) : `pos1 &amp;lt;=` [`size()`](size.md)、および`pos2 &amp;lt;= str.`[`size()`](size.md)であること。
 - (3) : `pos1 &amp;lt;=` [`size()`](size.md)、および文字配列へのポインタ`s`が、少なくても`n2`個の要素を持つ配列を指していること。
 - (4) : `pos &amp;lt;=` [`size()`](size.md)、および文字配列へのポインタ`s`が、少なくても[`traits::length`](/reference/string/char_traits/length.md)`(s) + 1`個の要素を指す配列を指していること。
-- (6) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効は範囲であること。
-- (7) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効は範囲であること。また、文字配列へのポインタ`s`が、少なくても`n`個の要素を持つ配列を指していること。
-- (8) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効は範囲であること。および文字配列へのポインタ`s`が、少なくても[`traits::length`](/reference/string/char_traits/length.md)`(s) + 1`個の要素を指す配列を指していること。
-- (9) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効は範囲であること。
-- (10) : `[`[`begin()`](begin.md)`, i1)`、`[i1, i2)`、および`[j1, j2)`が有効は範囲であること。
-- (11) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効は範囲であること。
-- (14) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効は範囲であること。
+- (6) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効な範囲であること。
+- (7) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効な範囲であること。また、文字配列へのポインタ`s`が、少なくても`n`個の要素を持つ配列を指していること。
+- (8) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効な範囲であること。および文字配列へのポインタ`s`が、少なくても[`traits::length`](/reference/string/char_traits/length.md)`(s) + 1`個の要素を指す配列を指していること。
+- (9) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効な範囲であること。
+- (10) : `[`[`begin()`](begin.md)`, i1)`、`[i1, i2)`、および`[j1, j2)`が有効な範囲であること。
+- (11) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効な範囲であること。
+- (14) : `[`[`begin()`](begin.md)`, i1)`および`[i1, i2)`が有効な範囲であること。
 
 
 ## 効果
@@ -98,11 +105,25 @@ basic_string&amp;amp; replace(const_iterator i1,
 - (9) : `replace(i1 -` [`begin()`](begin.md)`, i2 - i1, basic_string(n, c))`を呼び出す。
 - (10) : `replace(i1 -` [`begin()`](begin.md)`, i2 - i1, basic_string(j1, j2))`を呼び出す。
 - (11) : `replace(i1 -` [`begin()`](begin.md)`, i2 - i1, il.`[`begin()`](/reference/initializer_list/initializer_list/begin.md)`, il.`[`size()`](/reference/initializer_list/initializer_list/size.md)`)`を呼び出す。
-- (12) : `return replace(pos1, n1,` [`sv.data()`](/reference/string_view/basic_string_view/data.md)`,` [`sv.size()`](/reference/string_view/basic_string_view/size.md)`);` と等価
-- (13) :
-    - `n2`と`sv.`[`size()`](/reference/string_view/basic_string_view/size.md) `- pos2`のうち小さい方を`rlen`とする。
-    - `replace(pos1, n1,` [`sv.data()`](/reference/string_view/basic_string_view/data.md) `+ pos2, rlen)` を呼び出す
-- (14) : `replace(i1 -` [`begin()`](begin.md)`, i2 - i1, sv)` を呼び出す
+- (12) : 以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return replace(pos1, n1, sv.data(), sv.size());
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+- (13) : 以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return replace(pos1, n1, sv.substr(pos2, n2));
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+  * substr[link /reference/string_view/basic_string_view/append.md]
+- (14) : 以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return replace(i1 - begin(), i2 - i1, sv.data(), sv.size());
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
 
 
 ## 戻り値
@@ -296,3 +317,6 @@ int main()
 - [LWG ISsue 2268. Setting a default argument in the declaration of a member function `assign` of `std::basic_string`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2268)
     - C++14から(2)のオーバーロードに、`n = npos`のデフォルト引数を追加。
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(12)(13)(14)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rfind -- LWG Issue 2758,2946対応</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/rfind.html"/>
      <id>4ae35de439d52c153174b1015948e566d3154110:reference/string/basic_string/rfind.md</id>
      <updated>2020-03-23T12:42:40+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/rfind.md b/reference/string/basic_string/rfind.md
index 6215a4d7f..ec2dcbfc9 100644
--- a/reference/string/basic_string/rfind.md
+++ b/reference/string/basic_string/rfind.md
@@ -13,13 +13,18 @@ size_type rfind(const charT* s, size_type pos = npos) const;                   /
 
 size_type rfind(charT c, size_type pos = npos) const;                          // (4)
 
-size_type rfind(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
-                size_type pos = npos) const noexcept;                          // (5) C++17
+// string_viewを引数に取るオーバーロード
+template &amp;lt;class T&amp;gt;
+size_type rfind(const T&amp;amp; t, size_type pos = npos) const noexcept(see below);   // (5) C++17
 ```
 
 ## 概要
 最後に現れる指定文字列を検索する。
 
+## テンプレートパラメータ制約
+- (5) :
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;,` [`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt;`が`true`であること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt;`が`false`であること
 
 ## 要件
 (3) の形式の場合、`s` は少なくとも `traits_type::length(s) + 1` の要素を持つ `charT` の配列を指していること。
@@ -30,7 +35,7 @@ size_type rfind(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 - (2) `pos` より前で最後に `s` と一致する位置を返す。`s` は長さ `n` の文字列へのポインタである。
 - (3) (2) と同様だが、こちらは NULL 終端の文字列を扱う。
 - (4) `pos` より前で最後に `c` と一致する位置を返す。
-- (5) `pos` より前で最後に `sv` と一致する位置を返す。
+- (5) `basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;`として変数`sv`を作成し、`pos` より前で最後に `sv` と一致する位置を返す。
 
 
 ## 戻り値
@@ -39,7 +44,12 @@ size_type rfind(std::basic_string_view&amp;lt;charT, traits&amp;gt; sv,
 
 ## 例外
 - (1) 投げない
-- (5) 投げない
+- (5) `noexcept`内の式は、以下と等価である
+        ```cpp
+        is_nothrow_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;charT, traits&amp;gt;&amp;gt;
+        ```
+        * is_nothrow_convertible_v[link /reference/type_traits/is_nothrow_convertible.md]
+        * basic_string_view[link /reference/string_view/basic_string_view.md]
 
 
 ## 備考
@@ -117,3 +127,6 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::rfind(charT c, size_type pos =
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>splice_after -- forward_list::splice_after : 文言修正</title>
      <link href="https://cpprefjp.github.io/reference/forward_list/forward_list/splice_after.html"/>
      <id>4e07c21ed10fb09ba488dc86fac9c789ed748b92:reference/forward_list/forward_list/splice_after.md</id>
      <updated>2020-03-22T00:11:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/forward_list/forward_list/splice_after.md b/reference/forward_list/forward_list/splice_after.md
index 657c52202..1f03b056e 100644
--- a/reference/forward_list/forward_list/splice_after.md
+++ b/reference/forward_list/forward_list/splice_after.md
@@ -28,18 +28,15 @@ void splice_after(const_iterator position, forward_list&amp;amp;&amp;amp; x,
 
 
 ## 要件
-- 第1パラメータ`position`が、[`before_begin()`](before_begin.md)もしくは`[`[`begin()`](begin.md)`,` [`end()`](end.md)]の範囲の間接参照可能なイテレータであること。
+- 第1パラメータ`position`が、[`before_begin()`](before_begin.md)もしくは`[`[`begin()`](begin.md)`,` [`end()`](end.md))の範囲の間接参照可能なイテレータであること。
 - `i`, `first`, `last`が、`x`のイテレータであること。
 - [`get_allocator()`](get_allocator.md) `== x.`[`get_allocator()`](get_allocator.md)であること。(C++14)
 
 
 ## 効果
-- (1) : `position`の次の要素の後ろに`x`の全ての要素をコピーする
-- (2) : `position`の次の要素の後ろに`x`の全ての要素を移動する
-- (3) : `position`の次の要素の後ろに、`x`の要素のうち`i`の次の要素をコピーする
-- (4) : `position`の次の要素の後ろに、`x`の要素のうち`i`の次の要素を移動する
-- (5) : `position`の次の要素の後ろに、`x`の要素のうち`(first, last)`の範囲をコピーする
-- (6) : `position`の次の要素の後ろに、`x`の要素のうち`(first, last)`の範囲を移動する
+- (1),(2) : `position`の指す要素の後ろに、`x`の全ての要素を移動する
+- (3),(4) : `position`の指す要素の後ろに、`x`の要素のうち`i`の次の要素を移動する
+- (5),(6) : `position`の指す要素の後ろに、`x`の要素のうち`(first, last)`の範囲を移動する
 
 
 ## 戻り値
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- string::operator+= : string_viewを取るオーバーロードの追記</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus_assign.html"/>
      <id>ea23fac004f3c5b17335d6a2fd10c78fad2b394b:reference/string/basic_string/op_plus_assign.md</id>
      <updated>2020-03-21T21:57:58+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus_assign.md b/reference/string/basic_string/op_plus_assign.md
index 7caf43f0a..8c15b3498 100644
--- a/reference/string/basic_string/op_plus_assign.md
+++ b/reference/string/basic_string/op_plus_assign.md
@@ -12,15 +12,25 @@ basic_string&amp;amp; operator+=(const charT* s);             // (2)
 basic_string&amp;amp; operator+=(charT c);                    // (3)
 
 basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++11 から
+
+// string_viewを引数に取るオーバーロード
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp; operator+=(const T&amp;amp; t);                 // (5) C++17 から
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
 ## 概要
 指定された文字列、文字、あるいは初期化リストを追加する。
 
+## テンプレートパラメータ制約
+
+- (5) : 以下の両方を満たしていること
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, `[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;&amp;gt; == true`
+    - [`is_convertible_v`](/reference/type_traits/is_convertible.md)`&amp;lt;const T&amp;amp;, const charT*&amp;gt; == false`
 
 ## 要件
-`s` は少なくとも `traits_type::length(s) + 1` の長さを持つ `charT` 型の配列を指していること。
+
+- (3) : `s` は少なくとも `traits_type::length(s) + 1` の長さを持つ `charT` 型の配列を指していること。
 
 
 ## 効果
@@ -37,6 +47,15 @@ basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++11 から
 - (4) 対象オブジェクトの末尾に初期化リスト `il` で表された文字列が追加される。  
 	[`append`](append.md)`(il)` と等価。
 
+- (5) 対象オブジェクトの末尾に[`basic_string_view`](/reference/string_view/basic_string_view.md)`&amp;lt;charT, traits&amp;gt;`に変換可能な`t`の参照する文字列が追加される。  
+以下と等価。
+  ```cpp
+  basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
+  return append(sv);
+  ```
+  * basic_string_view[link /reference/string_view/basic_string_view.md]
+  * append[link append.md]
+
 
 ## 戻り値
 `*this`
@@ -51,6 +70,8 @@ basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++11 から
 
 - (4) [`size`](size.md)`() + il.size() &amp;gt;` [`max_size`](max_size.md)`()` の場合、`length_error` が送出される。
 
+- (5) [`size`](size.md)`() + sv.size() &amp;gt;` [`max_size`](max_size.md)`()` の場合、`length_error` が送出される。
+
 
 ## 備考
 本メンバ関数の呼び出しによって、対象オブジェクトの要素への参照、ポインタ、および、イテレータは無効になる可能性がある。
@@ -60,6 +81,7 @@ basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++11 から
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;string&amp;gt;
+#include &amp;lt;string_view&amp;gt;
 
 int main()
 {
@@ -78,6 +100,11 @@ int main()
 
   s1 += { &amp;#39; &amp;#39;, &amp;#39;:&amp;#39;, &amp;#39;)&amp;#39; };
   std::cout &amp;lt;&amp;lt; s1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
+
+  using namespace std::string_view_literals;
+
+  s1 += &amp;#34; :)&amp;#34;sv;
+  std::cout &amp;lt;&amp;lt; s1 &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
 }
 ```
 * +=[color ff0000]
@@ -89,6 +116,7 @@ Hello,
 Hello, world
 Hello, world!
 Hello, world! :)
+Hello, world! :) :)
 ```
 
 ## 関連項目
@@ -104,4 +132,7 @@ Hello, world! :)
 ## 参照
 - [N2679 Initializer Lists for Standard Containers(Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf)
     - (4)の経緯となる提案文書
-
+- [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2268)
+- [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
+    - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>mona-@live.jp</email>
      </author>
    </entry>
  
    <entry>
      <title>splice -- list::splice : 文言修正とサンプル追加</title>
      <link href="https://cpprefjp.github.io/reference/list/list/splice.html"/>
      <id>79cbb0a52b09e28bed9973a0555cb56fa6d315de:reference/list/list/splice.md</id>
      <updated>2020-03-20T23:52:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/list/list/splice.md b/reference/list/list/splice.md
index ee6ba9d8c..24eb8eb62 100644
--- a/reference/list/list/splice.md
+++ b/reference/list/list/splice.md
@@ -30,9 +30,9 @@ void splice(const_iterator position, list&amp;amp;&amp;amp; x,
 ## 概要
 他の`list`オブジェクトから、要素を移動する。
 
-- (1), (2) : `position`の次の要素の前に、`x`の全ての要素を移動する。  
-- (3), (4) : `position`の次の要素の前に、`x`の要素のうち`i`の指す要素を移動する。  
-- (5), (6) : `position`の次の要素の前に、`x`の要素のうち`[first, last)`の範囲を移動する。  
+- (1), (2) : `position`の指す要素の前に、`x`の全ての要素を移動する。  
+- (3), (4) : `position`の指す要素の前に、`x`の要素のうち`i`の指す要素を移動する。  
+- (5), (6) : `position`の指す要素の前に、`x`の要素のうち`[first, last)`の範囲を移動する。  
 
 
 ## 要件
@@ -109,6 +109,15 @@ int main()
 
     xs.splice(xs.begin(), std::move(ys), ys.begin(), std::next(ys.begin(), 2));
 
+    print(xs);
+  }
+  // ysの全ての要素をxsの末尾に移動する
+  {
+    std::list&amp;lt;int&amp;gt; xs = {1, 2, 3};
+    std::list&amp;lt;int&amp;gt; ys = {4, 5, 6};
+
+    xs.splice(xs.end(), std::move(ys));
+
     print(xs);
   }
 }
@@ -122,6 +131,7 @@ int main()
 1 2 3 4 5 6 
 1 4 5 6 
 1 2 4 5 6 
+1 2 3 4 5 6 
 ```
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>identity -- identity : 文言修正</title>
      <link href="https://cpprefjp.github.io/reference/functional/identity.html"/>
      <id>90b675429b27ed2be319c2064a9599b1b7a1180d:reference/functional/identity.md</id>
      <updated>2020-03-19T21:55:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/identity.md b/reference/functional/identity.md
index 57ef8fad5..6433181f6 100644
--- a/reference/functional/identity.md
+++ b/reference/functional/identity.md
@@ -19,7 +19,7 @@ namespace std {
 
 ## 概要
 
-`identity`クラスは、引数に対して恒等変換を行う関数オブジェクトである。この恒等変換はC++意味論においてのものであり、値そのもの及びCV修飾や値カテゴリも含めて引数をそのまま返す。
+`identity`クラスは、受け取った引数をそのまま返す（恒等変換を行う）関数オブジェクトである。この恒等変換はC++の意味論においてのものであり、値そのもの及びCV修飾や値カテゴリも含めて引数をそのまま返す。
 
 この関数オブジェクトは一切のメンバ変数を持たず、状態を保持しない。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
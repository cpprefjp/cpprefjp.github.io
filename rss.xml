<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-12-04T14:39:50.029136</updated>
  <id>a5a6cd37-2cbd-44e5-976a-ddc108250c57</id>

  
    <entry>
      <title>機能テストマクロ -- fold関数リンク追加 #1088</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/feature_test_macros.html"/>
      <id>ac9e77ef97ed26336167fc8af261533ea6d511f8:lang/cpp23/feature_test_macros.md</id>
      <updated>2023-12-04T12:27:50+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;機能テストマクロ&lt;/span&gt;&lt;span class=&#34;cpp cpp23&#34; title=&#34;C++23で追加&#34;&gt;(C++23)&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;h3&gt;言語機能&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;ライブラリの機能テストマクロは全て&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/version.html&#34;&gt;&amp;lt;version&amp;gt;&lt;/a&gt;&lt;/code&gt;でも提供される。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;マクロ名&lt;/th&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;th&gt;ヘッダ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_as_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ranges::cbegin&lt;/code&gt;が常に定数イテレータを返すようにする&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges.html&#34;&gt;&amp;lt;ranges&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;__cpp_lib_ranges_fold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;202207L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fold&lt;/code&gt;アルゴリズム&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations&#34; target=&#34;_blank&#34;&gt;SD-FeatureTest: Feature-Test Macros and Policies - isocpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>algorithm -- fold関数リンク追加 #1088</title>
      <link href="https://cpprefjp.github.io/reference/algorithm.html"/>
      <id>ac9e77ef97ed26336167fc8af261533ea6d511f8:reference/algorithm.md</id>
      <updated>2023-12-04T12:27:50+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm.md b/reference/algorithm.md
index fb2fcc564..71a01885a 100644
--- a/reference/algorithm.md
+++ b/reference/algorithm.md
@@ -420,6 +420,19 @@ ranges::sort(pv, {}, &amp;amp;Parson::name);
 | [`ranges::prev_permutation`](algorithm/ranges_prev_permutation.md) | 前の順列を生成する     | C++20 |
 | [`ranges::is_permutation`](algorithm/ranges_is_permutation.md)     | 範囲が順列かを判定する | C++20 |
 
+### `fold`アルゴリズム
+
+`fold`操作は、初期値及び累積値とともに範囲の各要素について与えられた関数を適用していき、その結果を返すものである。これは、数値集計処理に特化した[`accumulate`](/reference/numeric/accumulate.md)を改善しより汎用的にしたものである。処理を範囲のどちら側から始めるかによって、`foldl`（`fold_left`）と`foldr`（`fold_right`）の2種類がある。
+
+| 名前 | 説明 | 対応バージョン |
+|-------------------------------------------------------|------------------------|-------|
+| [`ranges::fold_left`](algorithm/fold_left.md.nolink)  | 範囲の左（先頭）からの`fold` | C++23 |
+| [`ranges::fold_right`](algorithm/fold_right.md.nolink)| 範囲の右（終端）からの`fold` | C++23 |
+| [`ranges::fold_left_first`](algorithm/fold_left_first.md.nolink)| 範囲の左（先頭）からの`fold`、初期値を省略する | C++23 |
+| [`ranges::fold_right_last`](algorithm/fold_right_last.md.nolink)| 範囲の右（終端）からの`fold`、初期値を省略する | C++23 |
+| [`ranges::fold_left_with_iter`](algorithm/fold_left_with_iter.md.nolink)  | 範囲の左（先頭）からの`fold`、終端イテレータを返す      | C++23 |
+| [`ranges::fold_left_first_with_iter`](algorithm/fold_left_first_with_iter.md.nolink)  | 範囲の左（先頭）からの`fold`、初期値を省略し終端イテレータを返す      | C++23 |
+
 ### 戻り値
 
 これらの型は、複数の値を1つの戻り値として返すために使われる汎用的な型である。構造化束縛で受け取ることが想定されている。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_rvalue_view -- as_rvalue_viewの説明を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_rvalue_view.html"/>
      <id>46c569dccacbaa4d2a1605ea536effe588b239f8:reference/ranges/as_rvalue_view.md</id>
      <updated>2023-12-04T03:08:22+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_rvalue_view.md b/reference/ranges/as_rvalue_view.md
index ffac933cb..b849c1b65 100644
--- a/reference/ranges/as_rvalue_view.md
+++ b/reference/ranges/as_rvalue_view.md
@@ -49,7 +49,7 @@ ranges::copy(words | views::as_rvalue, back_inserter(new_words));
 ## 効果
 
 - (2): 式`views::as_rvalue(E)`はRangeアダプタオブジェクトを表し、その効果は次の通り
-    - 要素がすでに右辺値参照であれば([`same_as`](/reference/concepts/same_as.md)`&amp;lt;`[`range_rvalue_reference_t`](range_rvalue_reference_t.md)`&amp;lt;T&amp;gt;, `[`range_reference_t`](range_reference_t.md)`&amp;lt;T&amp;gt;&amp;gt;`)、[`views::all`](all.md)`(E)`と等しい
+    - 要素がすでに右辺値参照であれば(`T = decltype((E))`として、[`same_as`](/reference/concepts/same_as.md)`&amp;lt;`[`range_rvalue_reference_t`](range_rvalue_reference_t.md)`&amp;lt;T&amp;gt;, `[`range_reference_t`](range_reference_t.md)`&amp;lt;T&amp;gt;&amp;gt;`)、[`views::all`](all.md)`(E)`と等しい
     - それ以外のとき、`as_rvalue_view{E}`と等しい
 
 ## メンバ関数
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_rvalue_view -- as_rvalue_viewの参考リンクを修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_rvalue_view.html"/>
      <id>d590681ab31efacd313d8be0da32f51c252d9080:reference/ranges/as_rvalue_view.md</id>
      <updated>2023-12-04T03:05:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_rvalue_view.md b/reference/ranges/as_rvalue_view.md
index fb731ee54..ffac933cb 100644
--- a/reference/ranges/as_rvalue_view.md
+++ b/reference/ranges/as_rvalue_view.md
@@ -180,6 +180,4 @@ constexpr explicit as_rvalue_view(V base);
 - [Visual C++](/implementation.md#visual_cpp): ?
 
 ## 参照
-- [N4950 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
-- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
-- [P2017R1 Conditionally borrowed ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2017r1.html)
+- [N4950 24 Ranges library](https://timsong-cpp.github.io/cppwp/ranges)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- as_rvalue_viewの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>1736ad68bc5288f5e341cac9eeef887830f0e3ed:reference/ranges.md</id>
      <updated>2023-12-04T02:58:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 37cae2700..dc86669e7 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -224,8 +224,8 @@ range | adaptor(args...)
 
 | 名前                                           | 説明                                                         | 対応バージョン |
 |------------------------------------------------|--------------------------------------------------------------|----------------|
-| [`as_rvalue_view`](ranges/as_rvalue_view.md.nolink)   | 各要素をrvalueにするビュー (class template)                  | C++23          |
-| [`views::as_rvalue`](ranges/as_rvalue.md.nolink)      | `as_rvalue_view`を生成する (customization point object)      | C++23          |
+| [`as_rvalue_view`](ranges/as_rvalue_view.md)   | 各要素をrvalueにするビュー (class template)                  | C++23          |
+| [`views::as_rvalue`](ranges/as_rvalue_view.md) | `as_rvalue_view`を生成する (customization point object)      | C++23          |
 
 ### filter view
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>as_rvalue_view -- as_rvalue_viewの解説を追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_rvalue_view.html"/>
      <id>1736ad68bc5288f5e341cac9eeef887830f0e3ed:reference/ranges/as_rvalue_view.md</id>
      <updated>2023-12-04T02:58:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_rvalue_view.md b/reference/ranges/as_rvalue_view.md
new file mode 100644
index 000000000..fb731ee54
--- /dev/null
+++ b/reference/ranges/as_rvalue_view.md
@@ -0,0 +1,185 @@
+# as_rvalue_view
+* ranges[meta header]
+* std::ranges[meta namespace]
+* class template[meta id-type]
+* cpp23[meta cpp]
+
+```cpp
+namespace std::ranges {
+  template&amp;lt;view V&amp;gt;
+    requires (input_range&amp;lt;V&amp;gt;)
+  class as_rvalue_view : public view_interface&amp;lt;as_rvalue_view&amp;lt;V&amp;gt;&amp;gt; { …… }; // (1)
+
+  namespace views {
+    inline constexpr /*unspecified*/ as_rvalue = /*unspecified*/;      // (2)
+  }
+}
+```
+* view[link view.md]
+* view_interface[link view_interface.md]
+* input_range[link input_range.md]
+
+## 概要
+
+- (1): 要素をrvalueにする[`view`](view.md)
+- (2): `as_rvalue_view`または同じ効果を実現する[`view`](view.md)を生成するRangeアダプタオブジェクト
+
+この[`view`](view.md)は、あるRangeの要素をムーブして別のコンテナに挿入する場合などに利用できる。
+
+```cpp
+vector&amp;lt;string&amp;gt; words = {&amp;#34;the&amp;#34;, &amp;#34;quick&amp;#34;, &amp;#34;brown&amp;#34;, &amp;#34;fox&amp;#34;, &amp;#34;ate&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;pterodactyl&amp;#34;};
+vector&amp;lt;string&amp;gt; new_words;
+ranges::copy(words | views::as_rvalue, back_inserter(new_words));
+```
+
+### Rangeコンセプト
+
+| borrowed | sized | output | input | forward | bidirectional | random_access | contiguous | common | viewable | view |
+|----------|-------|--------|-------|---------|---------------|---------------|------------|--------|----------|------|
+| ※       | ※    | ※     | ※    | ※      | ※            | ※            | ※         | ※     | ○       | ○   |
+
+※ 参照先のRangeに従う
+
+## テンプレートパラメータ制約
+
+- [`view`](view.md)`&amp;lt;V&amp;gt;`
+- `!`[`common_range`](common_range.md)`&amp;lt;V&amp;gt;`
+- [`copyable`](/reference/concepts/copyable.md)`&amp;lt;`[`iterator_t`](iterator_t.md)`&amp;lt;V&amp;gt;&amp;gt;`
+
+## 効果
+
+- (2): 式`views::as_rvalue(E)`はRangeアダプタオブジェクトを表し、その効果は次の通り
+    - 要素がすでに右辺値参照であれば([`same_as`](/reference/concepts/same_as.md)`&amp;lt;`[`range_rvalue_reference_t`](range_rvalue_reference_t.md)`&amp;lt;T&amp;gt;, `[`range_reference_t`](range_reference_t.md)`&amp;lt;T&amp;gt;&amp;gt;`)、[`views::all`](all.md)`(E)`と等しい
+    - それ以外のとき、`as_rvalue_view{E}`と等しい
+
+## メンバ関数
+
+| 名前                                             | 説明                              | 対応バージョン |
+|--------------------------------------------------|-----------------------------------|----------------|
+| [`(constructor)`](as_rvalue_view/op_constructor.md.nolink)  | コンストラクタ                    | C++20          |
+| [`base`](as_rvalue_view/base.md.nolink)                     | `R`の参照を取得する               | C++20          |
+| [`begin`](as_rvalue_view/begin.md.nolink)                   | 先頭を指すイテレータを取得する    | C++20          |
+| [`end`](as_rvalue_view/end.md.nolink)                       | 番兵を取得する                    | C++20          |
+| [`size`](as_rvalue_view/size.md.nolink)                     | 要素数を取得する                  | C++20          |
+
+`r`を参照先のRangeとする。`size`は、[`ranges::size`](size.md)`(r)`が有効な式であるときに定義される。
+
+## 継承しているメンバ関数
+
+| 名前                                         | 説明                              | 対応バージョン |
+|----------------------------------------------|-----------------------------------|----------------|
+| [`empty`](view_interface/empty.md)           | Rangeが空かどうかを判定する       | C++20          |
+| [`operator bool`](view_interface/op_bool.md) | Rangeが空でないかどうかを判定する | C++20          |
+| [`data`](view_interface/data.md)             | Rangeの先頭へのポインタを取得する | C++20          |
+| [`front`](view_interface/front.md)           | 先頭要素への参照を取得する        | C++20          |
+| [`back`](view_interface/back.md)             | 末尾要素への参照を取得する        | C++20          |
+| [`operator[]`](view_interface/op_at.md)      | 要素へアクセスする                | C++20          |
+| [`cbegin`](view_interface/cbegin.md)         | 定数イテレータを取得する          | C++23          |
+| [`cend`](view_interface/cend.md)             | 定数イテレータ（番兵）を取得する  | C++23          |
+
+## 推論補助
+
+| 名前                                                  | 説明                         | 対応バージョン |
+|-------------------------------------------------------|------------------------------|----------------|
+| [`(deduction_guide)`](as_rvalue_view/op_deduction_guide.md.nolink) | クラステンプレートの推論補助 | C++20          |
+
+## 例
+```cpp example
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;vector&amp;gt;
+#include &amp;lt;iterator&amp;gt;
+#include &amp;lt;print&amp;gt;
+
+int main() {
+  using namespace std;
+
+  vector&amp;lt;string&amp;gt; words = {&amp;#34;the&amp;#34;, &amp;#34;quick&amp;#34;, &amp;#34;brown&amp;#34;, &amp;#34;fox&amp;#34;, &amp;#34;ate&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;pterodactyl&amp;#34;};
+  vector&amp;lt;string&amp;gt; new_words;
+  ranges::copy(words | views::as_rvalue, back_inserter(new_words));
+  print(&amp;#34;{}&amp;#34;, new_words);
+}
+```
+* views::as_rvalue[color ff0000]
+* print[link /reference/print/print.md]
+
+### 出力
+```
+[&amp;#34;the&amp;#34;, &amp;#34;quick&amp;#34;, &amp;#34;brown&amp;#34;, &amp;#34;fox&amp;#34;, &amp;#34;ate&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;pterodactyl&amp;#34;]
+```
+
+## 実装例
+```cpp
+namespace std::ranges {
+  template&amp;lt;view V&amp;gt;
+    requires input_range&amp;lt;V&amp;gt;
+  class as_rvalue_view : public view_interface&amp;lt;as_rvalue_view&amp;lt;V&amp;gt;&amp;gt; {
+    V base_ = V();      // exposition only
+
+  public:
+    as_rvalue_view() requires default_initializable&amp;lt;V&amp;gt; = default;
+    constexpr explicit as_rvalue_view(V base);
+
+    constexpr V base() const &amp;amp; requires copy_constructible&amp;lt;V&amp;gt; { return base_; }
+    constexpr V base() &amp;amp;&amp;amp; { return std::move(base_); }
+
+    constexpr auto begin() requires (!simple-view&amp;lt;V&amp;gt;) {
+      return move_iterator(ranges::begin(base_));
+    }
+
+    constexpr auto begin() const requires range&amp;lt;const V&amp;gt; {
+      return move_iterator(ranges::begin(base_));
+    }
+
+    constexpr auto end() requires (!simple-view&amp;lt;V&amp;gt;) {
+      if constexpr (common_range&amp;lt;V&amp;gt;) {
+        return move_iterator(ranges::end(base_));
+      } else {
+        return move_sentinel(ranges::end(base_));
+      }
+    }
+
+    constexpr auto end() const requires range&amp;lt;const V&amp;gt; {
+      if constexpr (common_range&amp;lt;const V&amp;gt;) {
+        return move_iterator(ranges::end(base_));
+      } else {
+        return move_sentinel(ranges::end(base_));
+      }
+    }
+
+    constexpr auto size() requires sized_range&amp;lt;V&amp;gt; { return ranges::size(base_); }
+    constexpr auto size() const requires sized_range&amp;lt;const V&amp;gt; { return ranges::size(base_); }
+  };
+
+  template&amp;lt;class R&amp;gt;
+    as_rvalue_view(R&amp;amp;&amp;amp;) -&amp;gt; as_rvalue_view&amp;lt;views::all_t&amp;lt;R&amp;gt;&amp;gt;;
+}
+
+constexpr explicit as_rvalue_view(V base);
+```
+* view[link view.md]
+* view_interface[link view_interface.md]
+* common_range[link common_range.md]
+* sized_range[link sized_range.md]
+* simple-view[link simple-view.md]
+* default_initializable[link /reference/concepts/default_initializable.md]
+* copy_constructible[link /reference/concepts/copy_constructible.md]
+* move_iterator[link /reference/iterator/move_iterator.md]
+* ranges::begin[link begin.md]
+* ranges::end[link end.md]
+* ranges::size[link size.md]
+* views::all_t[link all.md]
+
+## バージョン
+### 言語
+- C++23
+
+### 処理系
+- [Clang](/implementation.md#clang): ?
+- [GCC](/implementation.md#gcc): ?
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): ?
+
+## 参照
+- [N4950 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
+- [P2017R1 Conditionally borrowed ranges](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2017r1.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
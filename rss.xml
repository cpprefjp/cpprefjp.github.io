<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2021-11-21T14:35:56.187458</updated>
  <id>8c20b109-018e-4e56-a60b-74aa3aab1a50</id>

  
    <entry>
      <title>alignment_of -- Merge pull request #921 from cpprefjp/suomesta-patch1</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/alignment_of.html"/>
      <id>151a8969fbcad7d4d162898fe69b360ad31324de:reference/type_traits/alignment_of.md</id>
      <updated>2021-11-21T16:56:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/alignment_of.md b/reference/type_traits/alignment_of.md
index aaa862782..2ae236185 100644
--- a/reference/type_traits/alignment_of.md
+++ b/reference/type_traits/alignment_of.md
@@ -28,6 +28,10 @@ namespace std {
 `alignof(T)`で得られた[`std::size_t`](/reference/cstddef/size_t.md)型の値を、メンバ定数`value`として定義する。
 
 
+## 備考
+`alignment_of`は[`integral_constant`](integral_constant.md)から派生する。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extent -- Merge pull request #921 from cpprefjp/suomesta-patch1</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/extent.html"/>
      <id>151a8969fbcad7d4d162898fe69b360ad31324de:reference/type_traits/extent.md</id>
      <updated>2021-11-21T16:56:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/extent.md b/reference/type_traits/extent.md
index 1fd0c4343..b23cee144 100644
--- a/reference/type_traits/extent.md
+++ b/reference/type_traits/extent.md
@@ -25,6 +25,10 @@ namespace std {
 - 型`T`が配列型ではない、もしくは配列の次元数が`I`以下の場合、値`0`をメンバ定数`value`として定義する。
 
 
+## 備考
+`extent`は[`integral_constant`](integral_constant.md)から派生する。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rank -- Merge pull request #921 from cpprefjp/suomesta-patch1</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/rank.html"/>
      <id>151a8969fbcad7d4d162898fe69b360ad31324de:reference/type_traits/rank.md</id>
      <updated>2021-11-21T16:56:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/rank.md b/reference/type_traits/rank.md
index 188f58d66..8673a3c15 100644
--- a/reference/type_traits/rank.md
+++ b/reference/type_traits/rank.md
@@ -24,6 +24,10 @@ namespace std {
 型`T`が配列型である場合、配列の次元数となる整数値をメンバ定数`value`の値として定義する。配列型でなければ`0`をメンバ定数`value`の値として定義する。
 
 
+## 備考
+`rank`は[`integral_constant`](integral_constant.md)から派生する。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_element -- Merge pull request #920 from dieu-detruit/patch-1</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/max_element.html"/>
      <id>653a8b4f79b2a4a65be366fd56481cb91d6d6549:reference/algorithm/max_element.md</id>
      <updated>2021-11-21T15:52:33+08:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/max_element.md b/reference/algorithm/max_element.md
index 567d9d242..6099b0efb 100644
--- a/reference/algorithm/max_element.md
+++ b/reference/algorithm/max_element.md
@@ -46,21 +46,28 @@ namespace std {
 
 ## 例
 ```cpp example
-#include &amp;lt;cassert&amp;gt;
 #include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;utility&amp;gt;
 #include &amp;lt;vector&amp;gt;
 
 int main()
 {
-  std::vector&amp;lt;int&amp;gt; v = {3, 1, 4};
+  // (1)
+  std::vector&amp;lt;int&amp;gt; v1 = {3, 1, 4};
+
+  decltype(v1)::iterator v1_max_element = std::max_element(v1.begin(), v1.end());
+  assert(*v1_max_element == 4);
+
 
-  decltype(v)::iterator i = std::max_element(v.begin(), v.end());
-  assert(*i == 4);
+  // (2)
+  std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt;&amp;gt; v2 = {{0, 3}, {1, 1}, {2, 4}};
 
-  decltype(v)::iterator j = std::max_element(v.begin(), v.end(), [](int a, int b) {
-                              return a &amp;gt; b;
-                            });
-  assert(*j == 1);
+  decltype(v2)::iterator v2_max_element = std::max_element(v2.begin(), v2.end(), [](const auto&amp;amp; a, const auto&amp;amp; b) {
+    return a.second &amp;lt; b.second;
+  });
+  assert(v2_max_element-&amp;gt;first == 2);
+  assert(v2_max_element-&amp;gt;second == 4);
 }
 ```
 * std::max_element[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>min_element -- Merge pull request #920 from dieu-detruit/patch-1</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/min_element.html"/>
      <id>653a8b4f79b2a4a65be366fd56481cb91d6d6549:reference/algorithm/min_element.md</id>
      <updated>2021-11-21T15:52:33+08:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/min_element.md b/reference/algorithm/min_element.md
index d31434971..59b85f788 100644
--- a/reference/algorithm/min_element.md
+++ b/reference/algorithm/min_element.md
@@ -45,21 +45,28 @@ namespace std {
 
 ## 例
 ```cpp example
-#include &amp;lt;cassert&amp;gt;
 #include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;utility&amp;gt;
 #include &amp;lt;vector&amp;gt;
 
 int main()
 {
-  std::vector&amp;lt;int&amp;gt; v = {3, 1, 4};
+  // (1)
+  std::vector&amp;lt;int&amp;gt; v1 = {3, 1, 4};
+
+  decltype(v1)::iterator v1_min_element = std::min_element(v1.begin(), v1.end());
+  assert(*v1_min_element == 1);
+
 
-  decltype(v)::iterator i = std::min_element(v.begin(), v.end());
-  assert(*i == 1);
+  // (2)
+  std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt;&amp;gt; v2 = {{0, 3}, {1, 1}, {2, 4}};
 
-  decltype(v)::iterator j = std::min_element(v.begin(), v.end(), [](int a, int b) {
-                              return a &amp;gt; b;
-                            });
-  assert(*j == 4);
+  decltype(v2)::iterator v2_min_element = std::min_element(v2.begin(), v2.end(), [](const auto&amp;amp; a, const auto&amp;amp; b) {
+    return a.second &amp;lt; b.second;
+  });
+  assert(v2_min_element-&amp;gt;first == 1);
+  assert(v2_min_element-&amp;gt;second == 1);
 }
 ```
 * std::min_element[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>alignment_of -- add comments regarding std::integral_constant</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/alignment_of.html"/>
      <id>3a5f965d148fb697f2acba25ff1a57d60359f32e:reference/type_traits/alignment_of.md</id>
      <updated>2021-11-20T13:42:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/alignment_of.md b/reference/type_traits/alignment_of.md
index aaa862782..2ae236185 100644
--- a/reference/type_traits/alignment_of.md
+++ b/reference/type_traits/alignment_of.md
@@ -28,6 +28,10 @@ namespace std {
 `alignof(T)`で得られた[`std::size_t`](/reference/cstddef/size_t.md)型の値を、メンバ定数`value`として定義する。
 
 
+## 備考
+`alignment_of`は[`integral_constant`](integral_constant.md)から派生する。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>extent -- add comments regarding std::integral_constant</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/extent.html"/>
      <id>3a5f965d148fb697f2acba25ff1a57d60359f32e:reference/type_traits/extent.md</id>
      <updated>2021-11-20T13:42:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/extent.md b/reference/type_traits/extent.md
index 1fd0c4343..b23cee144 100644
--- a/reference/type_traits/extent.md
+++ b/reference/type_traits/extent.md
@@ -25,6 +25,10 @@ namespace std {
 - 型`T`が配列型ではない、もしくは配列の次元数が`I`以下の場合、値`0`をメンバ定数`value`として定義する。
 
 
+## 備考
+`extent`は[`integral_constant`](integral_constant.md)から派生する。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rank -- add comments regarding std::integral_constant</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/rank.html"/>
      <id>3a5f965d148fb697f2acba25ff1a57d60359f32e:reference/type_traits/rank.md</id>
      <updated>2021-11-20T13:42:19+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/rank.md b/reference/type_traits/rank.md
index 188f58d66..8673a3c15 100644
--- a/reference/type_traits/rank.md
+++ b/reference/type_traits/rank.md
@@ -24,6 +24,10 @@ namespace std {
 型`T`が配列型である場合、配列の次元数となる整数値をメンバ定数`value`の値として定義する。配列型でなければ`0`をメンバ定数`value`の値として定義する。
 
 
+## 備考
+`rank`は[`integral_constant`](integral_constant.md)から派生する。
+
+
 ## 例
 ```cpp example
 #include &amp;lt;type_traits&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_element -- update the example of std::max_element as well</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/max_element.html"/>
      <id>28e709acdcde15bd2f853fbaf7f994c8510d10cf:reference/algorithm/max_element.md</id>
      <updated>2021-11-18T18:21:59+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/max_element.md b/reference/algorithm/max_element.md
index 567d9d242..6099b0efb 100644
--- a/reference/algorithm/max_element.md
+++ b/reference/algorithm/max_element.md
@@ -46,21 +46,28 @@ namespace std {
 
 ## 例
 ```cpp example
-#include &amp;lt;cassert&amp;gt;
 #include &amp;lt;algorithm&amp;gt;
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;utility&amp;gt;
 #include &amp;lt;vector&amp;gt;
 
 int main()
 {
-  std::vector&amp;lt;int&amp;gt; v = {3, 1, 4};
+  // (1)
+  std::vector&amp;lt;int&amp;gt; v1 = {3, 1, 4};
+
+  decltype(v1)::iterator v1_max_element = std::max_element(v1.begin(), v1.end());
+  assert(*v1_max_element == 4);
+
 
-  decltype(v)::iterator i = std::max_element(v.begin(), v.end());
-  assert(*i == 4);
+  // (2)
+  std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt;&amp;gt; v2 = {{0, 3}, {1, 1}, {2, 4}};
 
-  decltype(v)::iterator j = std::max_element(v.begin(), v.end(), [](int a, int b) {
-                              return a &amp;gt; b;
-                            });
-  assert(*j == 1);
+  decltype(v2)::iterator v2_max_element = std::max_element(v2.begin(), v2.end(), [](const auto&amp;amp; a, const auto&amp;amp; b) {
+    return a.second &amp;lt; b.second;
+  });
+  assert(v2_max_element-&amp;gt;first == 2);
+  assert(v2_max_element-&amp;gt;second == 4);
 }
 ```
 * std::max_element[color ff0000]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Watanabe Takafumi</name>
        <email>dieu.detruit@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>min_element -- Update reference/algorithm/min_element.md</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/min_element.html"/>
      <id>6f10816fd778598a6f148ed7229f62cd9ddf29a9:reference/algorithm/min_element.md</id>
      <updated>2021-11-18T18:11:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/min_element.md b/reference/algorithm/min_element.md
index 39abd8a1f..59b85f788 100644
--- a/reference/algorithm/min_element.md
+++ b/reference/algorithm/min_element.md
@@ -60,7 +60,7 @@ int main()
 
 
   // (2)
-  std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt;&amp;gt; v2 = {std::make_pair(0, 3), std::make_pair(1, 1), std::make_pair(2, 4)};
+  std::vector&amp;lt;std::pair&amp;lt;int, int&amp;gt;&amp;gt; v2 = {{0, 3}, {1, 1}, {2, 4}};
 
   decltype(v2)::iterator v2_min_element = std::min_element(v2.begin(), v2.end(), [](const auto&amp;amp; a, const auto&amp;amp; b) {
     return a.second &amp;lt; b.second;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Takafumi Watanabe</name>
        <email>dieu.detruit@gmail.com</email>
      </author>
    </entry>
  
</feed>
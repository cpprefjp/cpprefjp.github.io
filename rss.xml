<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2020-04-08T03:25:04.309736</updated>
  <id>033ea4f5-5cb9-4f1f-bdaf-d72843518d72</id>

  
    <entry>
      <title>merge -- multiset::merge : 反復子 -&gt; イテレータ</title>
      <link href="https://cpprefjp.github.io/reference/set/multiset/merge.html"/>
      <id>e95a81a4c8def8eb784447707d904646b33e8f83:reference/set/multiset/merge.md</id>
      <updated>2020-04-08T12:21:57+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/set/multiset/merge.md b/reference/set/multiset/merge.md
index d9214ad05..89d70b14d 100644
--- a/reference/set/multiset/merge.md
+++ b/reference/set/multiset/merge.md
@@ -36,7 +36,7 @@ template&amp;lt;class C2&amp;gt;
 
 
 ## 備考
-`source` の転送された要素へのポインタおよび参照は、それらと同じ要素を参照するが、`*this` のメンバとして参照する。また、転送された要素を参照する反復子は、引き続きその要素を参照するが、転送後は `source` ではなく `*this` への反復子として動作する。
+`source` の転送された要素へのポインタおよび参照は、それらと同じ要素を参照するが、`*this` のメンバとして参照する。また、転送された要素を参照するイテレータは、引き続きその要素を参照するが、転送後は `source` ではなく `*this` へのイテレータとして動作する。
 
 
 ## 例外 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_not_of -- string_viewの検索系関数 : 効果が間違っていたのを修正</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/find_last_not_of.html"/>
      <id>dc0ea01c767923144d416284ba07583e4f3cb861:reference/string_view/basic_string_view/find_last_not_of.md</id>
      <updated>2020-04-08T10:59:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/find_last_not_of.md b/reference/string_view/basic_string_view/find_last_not_of.md
index bca4c0c79..abb43beed 100644
--- a/reference/string_view/basic_string_view/find_last_not_of.md
+++ b/reference/string_view/basic_string_view/find_last_not_of.md
@@ -20,10 +20,10 @@ constexpr size_type find_last_not_of(const CharT* s,
 ## 概要
 指定された文字列中のいずれかの文字にも一致しない最後の場所を検索する。
 
-- (1) : 指定した位置`pos`から、文字列`sv`内のいずれかの文字にも一致しない最後の位置を検索する
-- (2) : 指定した位置`pos`から、文字`c`に一致しない最後の位置を検索する
-- (3) : 指定した位置`pos`から、文字列`s`の先頭`n`文字のいずれかの文字にも一致しない最後の位置を検索する
-- (4) : 指定した位置`pos`から、文字列`s`内のいずれかの文字にも一致しない最後の位置を検索する
+- (1) : 指定した位置`pos`より前で、文字列`sv`内のいずれかの文字にも一致しない最後の位置を検索する
+- (2) : 指定した位置`pos`より前で、文字`c`に一致しない最後の位置を検索する
+- (3) : 指定した位置`pos`より前で、文字列`s`の先頭`n`文字のいずれかの文字にも一致しない最後の位置を検索する
+- (4) : 指定した位置`pos`より前で、文字列`s`内のいずれかの文字にも一致しない最後の位置を検索する
 
 
 ## 戻り値
@@ -39,8 +39,8 @@ constexpr size_type find_last_not_of(const CharT* s,
 
 ## 備考
 - 文字列の一致は、文字列の各文字について `traits_type::eq()` を用いて検査される。  
-    例えば、(1) の形式の場合、以下のような条件を満たす最小の `xpos` を求める。
-    * `pos &amp;lt;= xpos` かつ `xpos + sv.size() &amp;lt;= size()`
+    例えば、(1) の形式の場合、以下のような条件を満たす最大の `xpos` を求める。
+    * `xpos &amp;lt;= pos` かつ `xpos + sv.size() &amp;lt;= size()`
     * `0 &amp;lt;= I` かつ `I &amp;lt; sv.size()` を満たす全ての `I` について、`traits_type::eq(at(xpos + I), sv.at(I))`
 - (4) の形式の場合、`s` の文字列長は `traits_type::length(s)` で求められる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_of -- string_viewの検索系関数 : 効果が間違っていたのを修正</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/find_last_of.html"/>
      <id>dc0ea01c767923144d416284ba07583e4f3cb861:reference/string_view/basic_string_view/find_last_of.md</id>
      <updated>2020-04-08T10:59:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/find_last_of.md b/reference/string_view/basic_string_view/find_last_of.md
index b91b18d43..d6580a267 100644
--- a/reference/string_view/basic_string_view/find_last_of.md
+++ b/reference/string_view/basic_string_view/find_last_of.md
@@ -15,10 +15,10 @@ constexpr size_type find_last_of(const CharT* s, size_type pos = npos) const;
 ## 概要
 指定された文字列中のいずれかの文字が出現する最後の場所を検索する。
 
-- (1) : 指定した位置`pos`から、文字列`sv`内のいずれかの文字が最後に現れる位置を検索する
-- (2) : 指定した位置`pos`から、文字`c`が最後に現れる位置を検索する
-- (3) : 指定した位置`pos`から、文字列`s`の先頭`n`文字のいずれかの文字が最後に現れる位置を検索する
-- (4) : 指定した位置`pos`から、文字列`s`内のいずれかの文字が最後に現れる位置を検索する
+- (1) : 指定した位置`pos`より前で、文字列`sv`内のいずれかの文字が最後に現れる位置を検索する
+- (2) : 指定した位置`pos`より前で、文字`c`が最後に現れる位置を検索する
+- (3) : 指定した位置`pos`より前で、文字列`s`の先頭`n`文字のいずれかの文字が最後に現れる位置を検索する
+- (4) : 指定した位置`pos`より前で、文字列`s`内のいずれかの文字が最後に現れる位置を検索する
 
 
 ## 戻り値
@@ -34,8 +34,8 @@ constexpr size_type find_last_of(const CharT* s, size_type pos = npos) const;
 
 ## 備考
 - 文字列の一致は、文字列の各文字について `traits_type::eq()` を用いて検査される。  
-    例えば、(1) の形式の場合、以下のような条件を満たす最小の `xpos` を求める。
-    * `pos &amp;lt;= xpos` かつ `xpos + sv.size() &amp;lt;= size()`
+    例えば、(1) の形式の場合、以下のような条件を満たす最大の `xpos` を求める。
+    * `xpos &amp;lt;= pos` かつ `xpos + sv.size() &amp;lt;= size()`
     * `0 &amp;lt;= I` かつ `I &amp;lt; sv.size()` を満たす全ての `I` について、`traits_type::eq(at(xpos + I), sv.at(I))`
 - (4) の形式の場合、`s` の文字列長は `traits_type::length(s)` で求められる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rfind -- string_viewの検索系関数 : 効果が間違っていたのを修正</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/rfind.html"/>
      <id>dc0ea01c767923144d416284ba07583e4f3cb861:reference/string_view/basic_string_view/rfind.md</id>
      <updated>2020-04-08T10:59:55+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/rfind.md b/reference/string_view/basic_string_view/rfind.md
index 864e9b1bd..c15827767 100644
--- a/reference/string_view/basic_string_view/rfind.md
+++ b/reference/string_view/basic_string_view/rfind.md
@@ -15,10 +15,10 @@ constexpr size_type rfind(const CharT* s, size_type pos = npos) const;
 ## 概要
 最後に現れる指定文字列を検索する。
 
-- (1) : 指定した位置`pos`から、`*this`に含まれる部分文字列`sv`が最後に現れる位置を検索する
-- (2) : 指定した位置`pos`から、`*this`に含まれる文字`c`が最後に現れる位置を検索する
-- (3) : 指定した位置`pos`から、`*this`に含まれる部分文字列`s`の先頭`n`文字が最後に現れる位置を検索する
-- (4) : 指定した位置`pos`から、`*this`に含まれる部分文字列`s`が最後に現れる位置を検索する
+- (1) : 指定した位置`pos`より前で、`*this`に含まれる部分文字列`sv`が最後に現れる位置を検索する
+- (2) : 指定した位置`pos`より前で、`*this`に含まれる文字`c`が最後に現れる位置を検索する
+- (3) : 指定した位置`pos`より前で、`*this`に含まれる部分文字列`s`の先頭`n`文字が最後に現れる位置を検索する
+- (4) : 指定した位置`pos`より前で、`*this`に含まれる部分文字列`s`が最後に現れる位置を検索する
 
 
 ## 戻り値
@@ -35,8 +35,8 @@ constexpr size_type rfind(const CharT* s, size_type pos = npos) const;
 ## 備考
 - `pos` は比較対象となる最後の文字位置では無いことに注意。（例を参照）
 - 文字列の一致は、文字列の各文字について `traits_type::eq()` を用いて検査される。  
-	例えば、(1) の形式の場合、以下のような条件を満たす最小の `xpos` を求める。
-	* `pos &amp;lt;= xpos` かつ `xpos + sv.size() &amp;lt;= size()`
+	例えば、(1) の形式の場合、以下のような条件を満たす最大の `xpos` を求める。
+	* `xpos &amp;lt;= pos` かつ `xpos + sv.size() &amp;lt;= size()`
 	* `0 &amp;lt;= I` かつ `I &amp;lt; sv.size()` を満たす全ての `I` について、`traits_type::eq(at(xpos + I), sv.at(I))`
 - (4) の形式の場合、`s` の文字列長は `traits_type::length(s)` で求められる。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>relation -- fix link</title>
      <link href="https://cpprefjp.github.io/reference/concepts/relation.html"/>
      <id>8c4082b9fecc7d84d44b986e2ee7109e863674ab:reference/concepts/relation.md</id>
      <updated>2020-04-07T16:51:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/relation.md b/reference/concepts/relation.md
index eb903f601..12affba43 100644
--- a/reference/concepts/relation.md
+++ b/reference/concepts/relation.md
@@ -13,7 +13,7 @@ namespace std {
 }
 ```
 * regular_invocable[link /reference/concepts/invocable.md]
-* boolean-testable[link /reference/concepts/boolean.md]
+* boolean-testable[link /reference/concepts/boolean-testable.md]
 * invoke_result_t[link /reference/type_traits/invoke_result.md]
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>totally_ordered -- fix link</title>
      <link href="https://cpprefjp.github.io/reference/concepts/totally_ordered.html"/>
      <id>8c4082b9fecc7d84d44b986e2ee7109e863674ab:reference/concepts/totally_ordered.md</id>
      <updated>2020-04-07T16:51:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/concepts/totally_ordered.md b/reference/concepts/totally_ordered.md
index da55f40c7..ce7eb1bbe 100644
--- a/reference/concepts/totally_ordered.md
+++ b/reference/concepts/totally_ordered.md
@@ -22,7 +22,7 @@ namespace std {
     partially-ordered-with&amp;lt;T, U&amp;gt;;
 }
 ```
-* boolean[link /reference/concepts/boolean.md]
+* boolean[link /reference/concepts/boolean-testable.md]
 * common_reference_with[link /reference/concepts/common_reference_with.md]
 * common_reference_t[link /reference/type_traits/common_reference.md]
 * equality_comparable[link /reference/concepts/equality_comparable.md]
@@ -227,4 +227,4 @@ S2 is not totally ordered with int
 - [P1754R1 Rename concepts to standard_case for C++20, while we still can](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf)
 - [LWG Issue 3329. `totally_ordered_with` both directly and indirectly requires `common_reference_with`](https://wg21.cmeerw.net/lwg/issue3329)
 - [LWG Issue 3331. Define `totally_ordered/_with` in terms of `partially-ordered-with`](https://wg21.cmeerw.net/lwg/issue3331)
-  
\ No newline at end of file
+  
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_searcher -- default_searcher : fix typo</title>
      <link href="https://cpprefjp.github.io/reference/functional/default_searcher.html"/>
      <id>4350d8086afd72176bdf52559e7b2ef39cac0d0a:reference/functional/default_searcher.md</id>
      <updated>2020-04-07T00:42:34+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/default_searcher.md b/reference/functional/default_searcher.md
index 6de31198c..1757d3e37 100644
--- a/reference/functional/default_searcher.md
+++ b/reference/functional/default_searcher.md
@@ -13,7 +13,7 @@ namespace std {
 * equal_to[link equal_to.md]
 
 ## 概要
-`std::default_searcher`は、[`std::search()`](/reference/algorithm/search.md)のデフォルトの検索法で、シーケンス (text) からサブシーケンス (pattern) を検索する関数オブジェクトである。このクラスは、検索器 (searcher) を指定する`[`std::search()`](/reference/algorithm/search.md)のインタフェースに、デフォルトの検索方法を指定するために定義されている。
+`std::default_searcher`は、[`std::search()`](/reference/algorithm/search.md)のデフォルトの検索法で、シーケンス (text) からサブシーケンス (pattern) を検索する関数オブジェクトである。このクラスは、検索器 (searcher) を指定する[`std::search()`](/reference/algorithm/search.md)のインタフェースに、デフォルトの検索方法を指定するために定義されている。
 
 このクラスは、コンストラクタおよびクラステンプレートのテンプレート引数で、検索対象となるサブシーケンス (pattern) を登録し、関数呼び出し演算子で全体のシーケンス (text) を指定して検索を実行する。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>alphya</name>
        <email>merukun1125@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- string::replace : 一部消えていたのを修正</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>79fb8ad495393fb80c39c2c36c756db0174998ae:reference/string/basic_string/replace.md</id>
      <updated>2020-04-06T13:01:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/replace.md b/reference/string/basic_string/replace.md
index 87ed834e1..ec25752e6 100644
--- a/reference/string/basic_string/replace.md
+++ b/reference/string/basic_string/replace.md
@@ -111,6 +111,7 @@ basic_string&amp;amp; replace(const_iterator i1,
   return replace(pos1, n1, sv.data(), sv.size());
   ```
   * basic_string_view[link /reference/string_view/basic_string_view.md]
+
 - (13) : 以下と等価。
   ```cpp
   basic_string_view&amp;lt;charT, traits&amp;gt; sv = t;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-21T01:02:44.854387</updated>
  <id>6595d9a3-bbeb-48ee-bde9-fcb62a845f86</id>

  
    <entry>
      <title>basic_string_view -- string_view: LWG2791 hash特殊化ハッシュ計算はstringと等価</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view.html"/>
      <id>d68f5d6cfdd62eb332354aa14196e11fd4097c54:reference/string_view/basic_string_view.md</id>
      <updated>2023-02-21T09:57:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view.md b/reference/string_view/basic_string_view.md
index 2c3484d7f..083db3f5b 100644
--- a/reference/string_view/basic_string_view.md
+++ b/reference/string_view/basic_string_view.md
@@ -182,6 +182,8 @@ string_view hello = sv.substr(0, 5); // 先頭5文字を抽出する
 | `template &amp;lt;&amp;gt; struct hash&amp;lt;u16string_view&amp;gt;;` | `hash`クラスの`u16string_view`に対する特殊化 | C++17 |
 | `template &amp;lt;&amp;gt; struct hash&amp;lt;u32string_view&amp;gt;;` | `hash`クラスの`u32string_view`に対する特殊化 | C++17 |
 
+上記の各`*string_view`に対する`hash`クラスの特殊化は、それぞれ対応する[`*string`型に対する特殊化](/reference/string.md)と同じハッシュ値を算出する。
+
 
 ## 例
 ### 基本的な使い方
@@ -322,6 +324,7 @@ C
 - [P0254R1 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r1.pdf)
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [P0403R0 Literal suffixes for `basic_string_view`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0403r0.html)
+- [LWG 2791 - `string_view` objects and strings should yield the same hash values](https://cplusplus.github.io/LWG/issue2791)
 - [String literals make bad ranges - Andrzej&amp;#39;s C++ blog](https://akrzemi1.wordpress.com/2019/09/25/string-literals-make-bad-ranges/)
 - [Require `span` &amp;amp; `basic_string_view` to be Trivially Copyable](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2251r1.pdf)
     - C++23から、トリビアルコピー可能が保証される。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remquo -- cmath/remquo: fix link url</title>
      <link href="https://cpprefjp.github.io/reference/cmath/remquo.html"/>
      <id>58d9a1f1730cb69791cd6e5262f424123a867941:reference/cmath/remquo.md</id>
      <updated>2023-02-20T21:40:47+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/remquo.md b/reference/cmath/remquo.md
index 5f47b4578..12002f080 100644
--- a/reference/cmath/remquo.md
+++ b/reference/cmath/remquo.md
@@ -135,7 +135,7 @@ remquo(6, 2) = quotient:3 remainder:0
 
 
 ## 参照
-- [std::remquo purpose and usage? - Stack Overflow](https://stackoverflow.com/q/11074865/684921)
+- [std::remquo purpose and usage? - Stack Overflow](https://stackoverflow.com/questions/11074865/stdremquo-purpose-and-usage)
 - [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
     - C++23での、一部関数の`constexpr`対応
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remquo -- cmath/remquo: 関数の利用目的を追記</title>
      <link href="https://cpprefjp.github.io/reference/cmath/remquo.html"/>
      <id>9fc8d7418c4c64c443038637e34578e7a9428c4c:reference/cmath/remquo.md</id>
      <updated>2023-02-20T21:23:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/remquo.md b/reference/cmath/remquo.md
index 1dd97d8b8..5f47b4578 100644
--- a/reference/cmath/remquo.md
+++ b/reference/cmath/remquo.md
@@ -55,9 +55,9 @@ namespace std {
 * Integral[italic]
 
 ## 概要
-浮動小数点数の剰余と商を求める。remquoは、「remainder (剰余)」と「quotient (商)」と意味する。
+浮動小数点数の剰余と、商の一部を求める。remquoは、「remainder (剰余)」と「quotient (商)」と意味する。
 
-この関数は、浮動小数点数に対して除算を行い、除算の結果(商)と、その余り(剰余)を同時に求める。戻り値として剰余が返され、ポインタ引数`quo`に商の値が書き込まれる。
+この関数は、浮動小数点数に対して除算を行い、除算の結果(商)の一部と、その余り(剰余)を同時に求める。戻り値として剰余が返され、ポインタ引数`quo`に商の値の一部が書き込まれる。
 
 - (1) : `float`に対するオーバーロード
 - (2) : `double`に対するオーバーロード
@@ -70,12 +70,16 @@ namespace std {
 
 ## 戻り値
 - [`remainder()`](remainder.md)関数と同じ方法で剰余を求めて、戻り値として返す。
-- `quo`が指す値は、`x/y`で得られた商と同じ大きさを持ち、`x/y`で得られた符号と同じ符号を持つ
+- `quo`が指す値は、`x/y`で得られる商と下位数ビットが等しく、`x/y`で得られた符号と同じ符号を持つ。
+    - 商と等しくなる有効なビット数nは、少なくとも3以上の処理系定義の値とされる。
 
 `y`がゼロである場合、`quo`が指す値は未規定となる。またその際、定義域エラーを発生させるかゼロを返すかは、実装定義となる。定義域エラーが発生した際の挙動については、[`&amp;lt;cmath&amp;gt;`](../cmath.md) を参照。
 
 
 ## 備考
+`remquo`関数では`x/y`の厳密な商を求めることはできない。
+三角関数のような周期性をもつ数学関数の内部実装において、商の低次ビットを利用した引数の還元(argument reduction)操作で利用する。
+
 - C++23では、(1)、(2)、(3)が(4)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
@@ -131,6 +135,7 @@ remquo(6, 2) = quotient:3 remainder:0
 
 
 ## 参照
+- [std::remquo purpose and usage? - Stack Overflow](https://stackoverflow.com/q/11074865/684921)
 - [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
     - C++23での、一部関数の`constexpr`対応
 - [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cstdlib -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cstdlib&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;ヘッダでは、一般的なユーティリティの関数を定義する。これらの機能は基本的には、&lt;code&gt;std&lt;/code&gt;名前空間に属することを除いてC言語の標準ライブラリ&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;ヘッダと同じである。&lt;/p&gt;
&lt;p&gt;本ヘッダはフリースタンディング環境でも提供される。
フリースタンディング環境の場合、少なくとも&lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;atexit&lt;/code&gt;, &lt;code&gt;at_quick_exit&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, &lt;code&gt;quick_exit&lt;/code&gt;関数がサポートされる。&lt;/p&gt;
&lt;p&gt;ただし、一部の機能には、&lt;code&gt;[[noreturn]]&lt;/code&gt;属性、&lt;code&gt;noexcept&lt;/code&gt;キーワード、スレッドローカルストレージのような、C++特有の言語機能に関する規定がある。&lt;/p&gt;
&lt;h2&gt;数値変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;int&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;float&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;long double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;擬似乱数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RAND_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される値域の最大値を表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される擬似乱数のシードを指定する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;で指定されたシードを元に、擬似乱数を生成する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aligned_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したアライメントでメモリを確保する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;malloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;calloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保し、領域をゼロ初期化する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;realloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを再確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保したメモリを解放する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;プログラムの開始と終了&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;EXIT_FAILURE&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが異常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;EXIT_SUCCESS&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが正常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを異常終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_.html&#34;&gt;_Exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;atexit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quick_exit&lt;/code&gt;関数でプログラムが終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getenv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境変数を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムコマンドを実行する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;検索と並び替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bsearch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二分探索を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;qsort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の並べ替えを行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数に対する算術関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;abs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;labs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;llabs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div_t.html&#34;&gt;div_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div.html&#34;&gt;div&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の除算と剰余算を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/ldiv_t.html&#34;&gt;ldiv_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ldiv&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div.html&#34;&gt;ldiv&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の除算と剰余算を行う (functon)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/lldiv_t.html&#34;&gt;lldiv_t&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;lldiv&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/div.html&#34;&gt;lldiv&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の除算と剰余算を行う (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マルチバイト文字とワイド文字の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MB_CUR_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列の最大サイズを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mblen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字の長さを取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbtowc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字を、ワイド文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wctomb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字を、マルチバイト文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbstowcs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列を、ワイド文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcstombs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列を、マルチバイト文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>div -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/div.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/div.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/div.md b/reference/cstdlib/div.md
new file mode 100644
index 000000000..1940b7e9e
--- /dev/null
+++ b/reference/cstdlib/div.md
@@ -0,0 +1,96 @@
+# div
+* cstdlib[meta header]
+* std[meta namespace]
+* function[meta id-type]
+
+```cpp
+namespace std {
+  div_t
+    div(int numer,
+        int denom);         // (1) C++03
+  constexpr div_t
+    div(int numer,
+        int denom);         // (1) C++23
+
+  ldiv_t
+    div(long numer,
+        long denom);        // (2) C++03
+  constexpr ldiv_t
+    div(long numer,
+        long denom);        // (2) C++23
+
+  lldiv_t
+    div(long long numer,
+        long long denom);   // (3) C++03
+  constexpr lldiv_t
+    div(long long numer,
+        long long denom);   // (3) C++23
+
+  ldiv_t
+    ldiv(long numer,
+         long denom);       // (4) C++03
+  constexpr ldiv_t
+    ldiv(long numer,
+         long denom);       // (4) C++23
+
+  lldiv_t
+    lldiv(long long numer,
+          long long denom); // (5) C++11
+  constexpr lldiv_t
+    lldiv(long long numer,
+          long long denom); // (5) C++23
+}
+```
+* div_t[link div_t.md]
+* ldiv_t[link ldiv_t.md]
+* lldiv_t[link lldiv_t.md]
+
+## 概要
+`number / denom`と`number % denom`の計算をひとつの操作で行う。
+
+- (1) : `int`型のオーバーロード
+- (2) : `long`型のオーバーロード
+- (3) : `long long`型のオーバーロード
+- (4) : `long`型規定
+- (5) : `long long`型規定
+
+
+## 戻り値
+戻り値型となるクラスの`quot`に商、`rem`に剰余を代入して返す。
+
+結果のどちらかが表現できない場合は未定義動作となる。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::div_t x = std::div(5, 2);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::div[color ff0000]
+* std::div_t[link div_t.md]
+
+### 出力
+```
+2
+1
+```
+
+
+### 備考
+特定の環境では、早期に `constexpr` 対応されている場合がある：
+
+- GCC 4.6.1 以上
+
+
+## 参照
+- [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
+    - C++23での、一部関数の`constexpr`対応
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>div_t -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/div_t.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/div_t.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/div_t.md b/reference/cstdlib/div_t.md
new file mode 100644
index 000000000..799dad33a
--- /dev/null
+++ b/reference/cstdlib/div_t.md
@@ -0,0 +1,41 @@
+# div_t
+* cstdlib[meta header]
+* std[meta namespace]
+* class[meta id-type]
+
+```cpp
+namespace std {
+  struct div_t {
+    int quot;
+    int rem;
+  };
+}
+```
+
+## 概要
+[`std::div()`](div.md)関数の戻り値。
+
+`quot`は「quotient (商)」、`rem`は「remainder (剰余)」。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::div_t x = std::div(5, 2);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::div_t[color ff0000]
+* std::div[link div.md]
+
+### 出力
+```
+2
+1
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ldiv_t -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/ldiv_t.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/ldiv_t.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/ldiv_t.md b/reference/cstdlib/ldiv_t.md
new file mode 100644
index 000000000..a9de6511c
--- /dev/null
+++ b/reference/cstdlib/ldiv_t.md
@@ -0,0 +1,41 @@
+# ldiv_t
+* cstdlib[meta header]
+* std[meta namespace]
+* class[meta id-type]
+
+```cpp
+namespace std {
+  struct ldiv_t {
+    long quot;
+    long rem;
+  };
+}
+```
+
+## 概要
+[`std::div()`](div.md)関数の`long`版の戻り値。
+
+`quot`は「quotient (商)」、`rem`は「remainder (剰余)」。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::ldiv_t x = std::div(5L, 2L);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::ldiv_t[color ff0000]
+* std::div[link div.md]
+
+### 出力
+```
+2
+1
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lldiv_t -- &lt;cstdlib&gt; : divを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/lldiv_t.html"/>
      <id>72d23cc651cdd53f0277d10e15bb9b26f0f66155:reference/cstdlib/lldiv_t.md</id>
      <updated>2023-02-20T19:06:32+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/lldiv_t.md b/reference/cstdlib/lldiv_t.md
new file mode 100644
index 000000000..4fc72ed07
--- /dev/null
+++ b/reference/cstdlib/lldiv_t.md
@@ -0,0 +1,42 @@
+# lldiv_t
+* cstdlib[meta header]
+* std[meta namespace]
+* class[meta id-type]
+* cpp11[meta cpp]
+
+```cpp
+namespace std {
+  struct lldiv_t {
+    long long quot;
+    long long rem;
+  };
+}
+```
+
+## 概要
+[`std::div()`](div.md)関数の`long long`版の戻り値。
+
+`quot`は「quotient (商)」、`rem`は「remainder (剰余)」。
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  std::lldiv_t x = std::div(5LL, 2LL);
+  std::cout &amp;lt;&amp;lt; x.quot &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; x.rem &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::lldiv_t[color ff0000]
+* std::div[link div.md]
+
+### 出力
+```
+2
+1
+```
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cmath/abs.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/cmath/abs.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/abs.md b/reference/cmath/abs.md
index 2fd23a231..8ae5febb3 100644
--- a/reference/cmath/abs.md
+++ b/reference/cmath/abs.md
@@ -45,7 +45,7 @@ namespace std {
 ## 戻り値
 引数 `x` の絶対値を返す。
 
-- (1),(2),(3) : `x` が `±∞` だった場合 `+∞` を返す。
+- (1),(2),(3),(4) : `x` が `±∞` だった場合 `+∞` を返す。
 
 
 ## 備考
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/complex/complex/abs.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/complex/complex/abs.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/complex/complex/abs.md b/reference/complex/complex/abs.md
index cf7686b0e..69f779ae0 100644
--- a/reference/complex/complex/abs.md
+++ b/reference/complex/complex/abs.md
@@ -24,21 +24,21 @@ namespace std {
 - 処理系が ISO IEC 60559 に準拠しているかどうかは、C99 の場合はマクロ `__STDC_IEC_559_COMPLEX__` が `1` に定義されている事で判別可能であるが、C++ の規格書には該当する記載を見つける事ができなかった。
 - 絶対値の算出については、一部の算術型、および、[`valarray`](/reference/valarray/valarray.md) クラステンプレートに対しても、他のヘッダで定義されている。  
 
-	| 引数の型                                           | 関数                                          | ヘッダ                               | 備考       |
-	|----------------------------------------------------|-----------------------------------------------|--------------------------------------|------------|
-	| `float`                                            | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       |            |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       |            |
-	| `double`                                           | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       |            |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       |            |
-	| `long double`                                      | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       |            |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       |            |
-	| 任意の整数型                                       | [`abs`](/reference/cmath/abs.md)              | [`cmath`](/reference/cmath.md)       | C++11 から |
-	|                                                    | [`fabs`](/reference/cmath/fabs.md)            | [`cmath`](/reference/cmath.md)       | C++11 から |
-	| `int`                                              | [`abs`](/reference/cstdlib/abs.md.nolink)     | [`cstdlib`](/reference/cstdlib.md)   |            |
-	| `long int`                                         | [`labs`](/reference/cstdlib/labs.md.nolink)   | [`cstdlib`](/reference/cstdlib.md)   |            |
-	|                                                    | [`abs`](/reference/cstdlib/abs.md.nolink)     | [`cstdlib`](/reference/cstdlib.md)   |            |
-	| `long long int`                                    | [`llabs`](/reference/cstdlib/llabs.md.nolink) | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
-	|                                                    | [`abs`](/reference/cstdlib/abs.md.nolink)     | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
+	| 引数の型                                           | 関数                                 | ヘッダ                               | 備考       |
+	|----------------------------------------------------|--------------------------------------|--------------------------------------|------------|
+	| `float`                                            | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       |            |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       |            |
+	| `double`                                           | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       |            |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       |            |
+	| `long double`                                      | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       |            |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       |            |
+	| 任意の整数型                                       | [`abs`](/reference/cmath/abs.md)     | [`cmath`](/reference/cmath.md)       | C++11 から |
+	|                                                    | [`fabs`](/reference/cmath/fabs.md)   | [`cmath`](/reference/cmath.md)       | C++11 から |
+	| `int`                                              | [`abs`](/reference/cstdlib/abs.md)   | [`cstdlib`](/reference/cstdlib.md)   |            |
+	| `long int`                                         | [`labs`](/reference/cstdlib/abs.md)  | [`cstdlib`](/reference/cstdlib.md)   |            |
+	|                                                    | [`abs`](/reference/cstdlib/abs.md)   | [`cstdlib`](/reference/cstdlib.md)   |            |
+	| `long long int`                                    | [`llabs`](/reference/cstdlib/abs.md) | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
+	|                                                    | [`abs`](/reference/cstdlib/abs.md)   | [`cstdlib`](/reference/cstdlib.md)   | C++11 から |
 	| [`valarray`](/reference/valarray/valarray.md)`&amp;lt;T&amp;gt;` | [`abs`](/reference/valarray/valarray/abs.md)  | [`valarray`](/reference/valarray.md) |            |
 
 	なお、上記のうち、任意の整数型に対する [`abs`](/reference/cmath/abs.md) については C++11 で追加されたが、ある種の問題を引き起こすことから、今後削除される可能性がある。[Validity and return type of std::abs(0u) is unclear](http://wg21.cmeerw.net/lwg/issue2192) 参照。  
@@ -89,4 +89,4 @@ abs( (1,2) ) = 2.23607
 | [`polar`](polar.md)                | 指定した絶対値と偏角の複素数値を得る。 |
 | [`abs`](/reference/cmath/abs.md)   | 絶対値を得る。（浮動小数点版）         |
 | [`fabs`](/reference/cmath/fabs.md) | 絶対値を得る。（浮動小数点版）         |
-| [`abs`](/reference/cstdlib/abs.md.nolink) | 絶対値を得る。（整数版）               |
+| [`abs`](/reference/cstdlib/abs.md) | 絶対値を得る。（整数版）               |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cstdlib -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/cstdlib.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;cstdlib&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;ヘッダでは、一般的なユーティリティの関数を定義する。これらの機能は基本的には、&lt;code&gt;std&lt;/code&gt;名前空間に属することを除いてC言語の標準ライブラリ&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;ヘッダと同じである。&lt;/p&gt;
&lt;p&gt;本ヘッダはフリースタンディング環境でも提供される。
フリースタンディング環境の場合、少なくとも&lt;code&gt;abort&lt;/code&gt;, &lt;code&gt;atexit&lt;/code&gt;, &lt;code&gt;at_quick_exit&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, &lt;code&gt;quick_exit&lt;/code&gt;関数がサポートされる。&lt;/p&gt;
&lt;p&gt;ただし、一部の機能には、&lt;code&gt;[[noreturn]]&lt;/code&gt;属性、&lt;code&gt;noexcept&lt;/code&gt;キーワード、スレッドローカルストレージのような、C++特有の言語機能に関する規定がある。&lt;/p&gt;
&lt;h2&gt;数値変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;int&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;atof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoul&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtoull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、基数を指定して&lt;code&gt;unsigned long long&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtof&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;float&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strtold&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列を、&lt;code&gt;long double&lt;/code&gt;型に変換する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;擬似乱数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RAND_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される値域の最大値を表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;関数によって生成される擬似乱数のシードを指定する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;srand&lt;/code&gt;で指定されたシードを元に、擬似乱数を生成する (function)&lt;/td&gt;
&lt;td&gt;C++14から非推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メモリ管理&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aligned_alloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したアライメントでメモリを確保する (function)&lt;/td&gt;
&lt;td&gt;C++17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;malloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;calloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを確保し、領域をゼロ初期化する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;realloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;メモリを再確保する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;確保したメモリを解放する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;プログラムの開始と終了&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_failure.html&#34;&gt;EXIT_FAILURE&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが異常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_success.html&#34;&gt;EXIT_SUCCESS&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが正常終了したことを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abort.html&#34;&gt;abort&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを異常終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit_.html&#34;&gt;_Exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/exit.html&#34;&gt;exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/atexit.html&#34;&gt;atexit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プログラムが通常の方法で終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/quick_exit.html&#34;&gt;quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後処理をせずに、プログラムを終了させる (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/at_quick_exit.html&#34;&gt;at_quick_exit&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;quick_exit&lt;/code&gt;関数でプログラムが終了するときに呼ばれる関数を登録する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getenv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;環境変数を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;system&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;システムコマンドを実行する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;検索と並び替え&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bsearch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二分探索を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;qsort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;範囲の並べ替えを行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;整数に対する算術関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;abs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;labs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstdlib/abs.html&#34;&gt;llabs&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の絶対値を取得する (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;の除算を行う (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ldiv_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ldiv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;の除算を行う (functon)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lldiv_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&lt;/code&gt;関数の戻り値型 (class)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lldiv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;の除算を行う (function)&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;マルチバイト文字とワイド文字の変換&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MB_CUR_MAX&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列の最大サイズを表す整数値マクロ (macro)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mblen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字の長さを取得する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbtowc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字を、ワイド文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wctomb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字を、マルチバイト文字に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mbstowcs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マルチバイト文字列を、ワイド文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcstombs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ワイド文字列を、マルチバイト文字列に変換する (function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>abs -- &lt;cstdlib&gt; : absを追加 #1067 #1022</title>
      <link href="https://cpprefjp.github.io/reference/cstdlib/abs.html"/>
      <id>2d01c561c9be61f02c5bac8113902099b2289481:reference/cstdlib/abs.md</id>
      <updated>2023-02-20T18:33:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cstdlib/abs.md b/reference/cstdlib/abs.md
new file mode 100644
index 000000000..ad61f0b6a
--- /dev/null
+++ b/reference/cstdlib/abs.md
@@ -0,0 +1,100 @@
+# abs
+* cstdlib[meta header]
+* std[meta namespace]
+* function[meta id-type]
+
+```cpp
+namespace std {
+  int
+    abs(int j);         // (1) C++03
+  constexpr int
+    abs(int j);         // (1) C++23
+
+  long
+    int abs(long j);    // (2) C++03
+  constexpr long
+    int abs(long j);    // (2) C++23
+
+  long long
+    abs(long long j);   // (3) C++11
+  constexpr long long
+    abs(long long j);   // (3) C++23
+
+  float
+    abs(float j);               // (4) C++03からC++20まで
+  double
+    abs(double j);              // (5) C++03からC++20まで
+  long double
+    abs(long double j);         // (6) C++03からC++20まで
+
+  floating-point-type
+    abs(floating-point-type j); // (7) C++03からC++20まで
+
+  long
+    labs(long j);       // (8) C++03
+  constexpr long
+    labs(long j);       // (8) C++23
+
+  long long
+    llabs(long long j); // (9) C++11
+  constexpr long long
+    llabs(long long j); // (9) C++23
+}
+```
+
+## 概要
+絶対値を求める。abs は absolute value（絶対値）の略。
+
+- (1) : `int`に対するオーバーロード
+- (2) : `long`に対するオーバーロード
+- (3) : `long long`に対するオーバーロード
+- (4) : `float`に対するオーバーロード
+- (5) : `double`に対するオーバーロード
+- (6) : `long double`に対するオーバーロード
+- (7) : 浮動小数点数型に対するオーバーロード
+- (8) : `long`規定
+- (9) : `long long`規定
+
+
+## 戻り値
+引数 `j` の絶対値を返す。
+
+- (4),(5),(6),(7) : `j` が `±∞` だった場合 `+∞` を返す。
+
+
+## 備考
+- パラメータの型`X`において[`is_unsigned_v`](/reference/type_traits/is_unsigned.md)`&amp;lt;X&amp;gt;`が`true`であり、`X`が整数昇格によって`int`に変換できない場合、プログラムは不適格となる
+    - Cとの互換性のため、`int`に昇格できる符号なし整数型は許可される
+- C++23では、(4)、(5)、(6)が(7)に統合され、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
+
+
+## 例
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;cstdlib&amp;gt;
+
+int main()
+{
+  int x = std::abs(-1);
+  std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
+}
+```
+* std::abs[color ff0000]
+
+### 出力
+```
+1
+```
+
+
+### 備考
+特定の環境では、早期に `constexpr` 対応されている場合がある：
+
+- GCC 4.6.1 以上
+
+
+## 参照
+- [P0533R9 constexpr for `&amp;lt;cmath&amp;gt;` and `&amp;lt;cstdlib&amp;gt;`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0533r9.pdf)
+    - C++23での、一部関数の`constexpr`対応
+- [P1467R9 Extended floating-point types and standard names](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1467r9.html)
+    - C++23で導入された拡張浮動小数点数型への対応として、`float`、`double`、`long double`のオーバーロードを`floating-point-type`のオーバーロードに統合し、拡張浮動小数点数型も扱えるようにした
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
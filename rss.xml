<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-04-17T07:28:52.280575</updated>
  <id>682594c9-a0d3-46b0-847b-9037b9b920d3</id>

  
    <entry>
      <title>comp_ellint_1 -- fix(cmath): 第n種特殊関数間を相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/comp_ellint_1.html"/>
      <id>b4d914dcb056471e2d489660985825742f20d441:reference/cmath/comp_ellint_1.md</id>
      <updated>2024-04-17T16:14:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/comp_ellint_1.md b/reference/cmath/comp_ellint_1.md
index ad96b9631..6ea7c4d0a 100644
--- a/reference/cmath/comp_ellint_1.md
+++ b/reference/cmath/comp_ellint_1.md
@@ -136,6 +136,8 @@ $$
 
 
 ## 関連項目
+- 第2種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md)
+- 第3種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md)
 - 第1種不完全楕円積分 [`ellint_1`](ellint_1.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>comp_ellint_2 -- fix(cmath): 第n種特殊関数間を相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/comp_ellint_2.html"/>
      <id>b4d914dcb056471e2d489660985825742f20d441:reference/cmath/comp_ellint_2.md</id>
      <updated>2024-04-17T16:14:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/comp_ellint_2.md b/reference/cmath/comp_ellint_2.md
index d2d7123d3..50c85c08c 100644
--- a/reference/cmath/comp_ellint_2.md
+++ b/reference/cmath/comp_ellint_2.md
@@ -90,6 +90,8 @@ $$
 
 
 ## 関連項目
+- 第1種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md)
+- 第3種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md)
 - 第2種不完全楕円積分 [`ellint_2`](ellint_2.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>comp_ellint_3 -- fix(cmath): 第n種特殊関数間を相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/comp_ellint_3.html"/>
      <id>b4d914dcb056471e2d489660985825742f20d441:reference/cmath/comp_ellint_3.md</id>
      <updated>2024-04-17T16:14:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/comp_ellint_3.md b/reference/cmath/comp_ellint_3.md
index 8bc30bcc8..aebaa9c0e 100644
--- a/reference/cmath/comp_ellint_3.md
+++ b/reference/cmath/comp_ellint_3.md
@@ -120,7 +120,9 @@ GCC 7.1.0–8.0.0 では
 
 
 ## 関連項目
-* 第3種不完全楕円積分 [`ellint_3`](ellint_3.md)
+- 第1種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md)
+- 第2種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md)
+- 第3種不完全楕円積分 [`ellint_3`](ellint_3.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_bessel_i -- fix(cmath): 第n種特殊関数間を相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_bessel_i.html"/>
      <id>b4d914dcb056471e2d489660985825742f20d441:reference/cmath/cyl_bessel_i.md</id>
      <updated>2024-04-17T16:14:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_bessel_i.md b/reference/cmath/cyl_bessel_i.md
index f74ca282c..658535876 100644
--- a/reference/cmath/cyl_bessel_i.md
+++ b/reference/cmath/cyl_bessel_i.md
@@ -110,8 +110,8 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
-- 第1種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
 - 第2種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
+- 第1種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_bessel_j -- fix(cmath): 第n種特殊関数間を相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_bessel_j.html"/>
      <id>b4d914dcb056471e2d489660985825742f20d441:reference/cmath/cyl_bessel_j.md</id>
      <updated>2024-04-17T16:14:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_bessel_j.md b/reference/cmath/cyl_bessel_j.md
index d4935036e..7d9a796ac 100644
--- a/reference/cmath/cyl_bessel_j.md
+++ b/reference/cmath/cyl_bessel_j.md
@@ -111,9 +111,9 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
+- 第2種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
 - 第1種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
 - 第2種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
-- 第2種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
 - 第1種球ベッセル関数 [`sph_bessel`](sph_bessel.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_1 -- fix(cmath): 第n種特殊関数間を相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_1.html"/>
      <id>b4d914dcb056471e2d489660985825742f20d441:reference/cmath/ellint_1.md</id>
      <updated>2024-04-17T16:14:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_1.md b/reference/cmath/ellint_1.md
index fdfdd04ae..24045d4ec 100644
--- a/reference/cmath/ellint_1.md
+++ b/reference/cmath/ellint_1.md
@@ -111,6 +111,8 @@ GCC 7.1.0–8.0.0 では `|k| == 1 &amp;amp;&amp;amp; |phi| &amp;gt;= π / 2` の場合 `nan` を返す
 
 
 ## 関連項目
+- 第2種不完全楕円積分 [`ellint_2`](ellint_2.md)
+- 第3種不完全楕円積分 [`ellint_3`](ellint_3.md)
 - 第1種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_2 -- fix(cmath): 第n種特殊関数間を相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_2.html"/>
      <id>b4d914dcb056471e2d489660985825742f20d441:reference/cmath/ellint_2.md</id>
      <updated>2024-04-17T16:14:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_2.md b/reference/cmath/ellint_2.md
index 3bd696eaa..e12826425 100644
--- a/reference/cmath/ellint_2.md
+++ b/reference/cmath/ellint_2.md
@@ -106,6 +106,8 @@ ellint_2(1, 0.5 pi) = 1
 
 
 ## 関連項目
+- 第1種不完全楕円積分 [`ellint_1`](ellint_1.md)
+- 第3種不完全楕円積分 [`ellint_3`](ellint_3.md)
 - 第2種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_3 -- fix(cmath): 第n種特殊関数間を相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_3.html"/>
      <id>b4d914dcb056471e2d489660985825742f20d441:reference/cmath/ellint_3.md</id>
      <updated>2024-04-17T16:14:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_3.md b/reference/cmath/ellint_3.md
index ab65fba4c..569f0d90b 100644
--- a/reference/cmath/ellint_3.md
+++ b/reference/cmath/ellint_3.md
@@ -134,6 +134,8 @@ GCC 7.1.0–8.0.0 では `1 - nu * sin^2(phi) &amp;lt; 0` のときに [`std::domain_er
 
 
 ## 関連項目
+- 第1種不完全楕円積分 [`ellint_1`](ellint_1.md)
+- 第2種不完全楕円積分 [`ellint_2`](ellint_2.md)
 - 第3種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sph_bessel -- fix(cmath): 第n種特殊関数間を相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sph_bessel.html"/>
      <id>b4d914dcb056471e2d489660985825742f20d441:reference/cmath/sph_bessel.md</id>
      <updated>2024-04-17T16:14:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sph_bessel.md b/reference/cmath/sph_bessel.md
index ef75c43eb..e9f7413f1 100644
--- a/reference/cmath/sph_bessel.md
+++ b/reference/cmath/sph_bessel.md
@@ -114,6 +114,7 @@ $$
 
 
 ## 関連項目
+- 第2種球ベッセル関数 [`sph_neumann`](sph_neumann.md)
 - 第1種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sph_neumann -- fix(cmath): 第n種特殊関数間を相互リンク</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sph_neumann.html"/>
      <id>b4d914dcb056471e2d489660985825742f20d441:reference/cmath/sph_neumann.md</id>
      <updated>2024-04-17T16:14:53+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sph_neumann.md b/reference/cmath/sph_neumann.md
index 22adb6eac..58ceab4a6 100644
--- a/reference/cmath/sph_neumann.md
+++ b/reference/cmath/sph_neumann.md
@@ -114,6 +114,7 @@ $$
 
 
 ## 関連項目
+- 第1種球ベッセル関数 [`sph_bessel`](sph_bessel.md)
 - 第2種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmath -- style(cmath): Markdown 表組みの横幅揃え</title>
      <link href="https://cpprefjp.github.io/reference/cmath.html"/>
      <id>2f454c118d3a5db38c9f579ebd22e2d122320eca:reference/cmath.md</id>
      <updated>2024-04-17T16:19:29+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath.md b/reference/cmath.md
index 7f1575d21..879e256fa 100644
--- a/reference/cmath.md
+++ b/reference/cmath.md
@@ -216,74 +216,74 @@ C++03 までの場合、[`errno`](cerrno/errno.md) でしか通知されない
 
 ## &amp;lt;a id=&amp;#34;trigonometric-functions&amp;#34; href=&amp;#34;#trigonometric-functions&amp;#34;&amp;gt;三角関数&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|-----------------------------|----------------------------------------------|-------|
-| [`sin`](cmath/sin.md)     | 正弦関数（サイン） | |
-| [`cos`](cmath/cos.md)     | 余弦関数（コサイン） | |
-| [`tan`](cmath/tan.md)     | 正接関数（タンジェント） | |
-| [`asin`](cmath/asin.md)   | 逆正弦関数（アークサイン） | |
-| [`acos`](cmath/acos.md)   | 逆余弦関数（アークコサイン） | |
-| [`atan`](cmath/atan.md)   | 逆正接関数（アークタンジェント） | |
-| [`atan2`](cmath/atan2.md) | 対辺と隣辺からの逆正接関数（アークタンジェント） | |
+| 名前                      | 説明                                             | 対応バージョン |
+|---------------------------|--------------------------------------------------|----------------|
+| [`sin`](cmath/sin.md)     | 正弦関数（サイン）                               |                |
+| [`cos`](cmath/cos.md)     | 余弦関数（コサイン）                             |                |
+| [`tan`](cmath/tan.md)     | 正接関数（タンジェント）                         |                |
+| [`asin`](cmath/asin.md)   | 逆正弦関数（アークサイン）                       |                |
+| [`acos`](cmath/acos.md)   | 逆余弦関数（アークコサイン）                     |                |
+| [`atan`](cmath/atan.md)   | 逆正接関数（アークタンジェント）                 |                |
+| [`atan2`](cmath/atan2.md) | 対辺と隣辺からの逆正接関数（アークタンジェント） |                |
 
 ## &amp;lt;a id=&amp;#34;hyperbolic-functions&amp;#34; href=&amp;#34;#hyperbolic-functions&amp;#34;&amp;gt;双曲線関数&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|-----------------------------|----------------------------------------------|-------|
-| [`sinh`](cmath/sinh.md)   | 双曲線正弦関数（ハイパボリックサイン） | |
-| [`cosh`](cmath/cosh.md)   | 双曲線余弦関数（ハイパボリックコサイン） | |
-| [`tanh`](cmath/tanh.md)   | 双曲線正接関数（ハイパボリックタンジェント） | |
-| [`asinh`](cmath/asinh.md) | 逆双曲線正弦関数（エリアハイパボリックサイン）       | C++11 |
-| [`acosh`](cmath/acosh.md) | 逆双曲線余弦関数（エリアハイパボリックコサイン）     | C++11 |
-| [`atanh`](cmath/atanh.md) | 逆双曲線正接関数（エリアハイパボリックタンジェント） | C++11 |
+| 名前                      | 説明                                                 | 対応バージョン |
+|---------------------------|------------------------------------------------------|----------------|
+| [`sinh`](cmath/sinh.md)   | 双曲線正弦関数（ハイパボリックサイン）               |                |
+| [`cosh`](cmath/cosh.md)   | 双曲線余弦関数（ハイパボリックコサイン）             |                |
+| [`tanh`](cmath/tanh.md)   | 双曲線正接関数（ハイパボリックタンジェント）         |                |
+| [`asinh`](cmath/asinh.md) | 逆双曲線正弦関数（エリアハイパボリックサイン）       | C++11          |
+| [`acosh`](cmath/acosh.md) | 逆双曲線余弦関数（エリアハイパボリックコサイン）     | C++11          |
+| [`atanh`](cmath/atanh.md) | 逆双曲線正接関数（エリアハイパボリックタンジェント） | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;exponential-and-logarithmic-functions&amp;#34; href=&amp;#34;#exponential-and-logarithmic-functions&amp;#34;&amp;gt;指数関数と対数関数&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|-----------------------------|-----------------------------------|-------|
-| [`exp`](cmath/exp.md)     | e (ネイピア数) を底とする指数関数 | |
-| [`exp2`](cmath/exp2.md)   | 2 を底とする指数関数 | C++11 |
-| [`expm1`](cmath/expm1.md) | e (ネイピア数) を底とする指数関数から 1 を引いた値 | C++11 |
-| [`log`](cmath/log.md)     | e (ネイピア数) を底とする自然対数 | |
-| [`log10`](cmath/log10.md) | 10 を底とする常用対数 | |
-| [`log1p`](cmath/log1p.md) | 引数に 1 を足した値の、e (ネイピア数) を底とする自然対数 | C++11 |
-| [`log2`](cmath/log2.md)   | 2 を底とする二進対数 | C++11 |
+| 名前                      | 説明                                                     | 対応バージョン |
+|---------------------------|----------------------------------------------------------|----------------|
+| [`exp`](cmath/exp.md)     | e (ネイピア数) を底とする指数関数                        |                |
+| [`exp2`](cmath/exp2.md)   | 2 を底とする指数関数                                     | C++11          |
+| [`expm1`](cmath/expm1.md) | e (ネイピア数) を底とする指数関数から 1 を引いた値       | C++11          |
+| [`log`](cmath/log.md)     | e (ネイピア数) を底とする自然対数                        |                |
+| [`log10`](cmath/log10.md) | 10 を底とする常用対数                                    |                |
+| [`log1p`](cmath/log1p.md) | 引数に 1 を足した値の、e (ネイピア数) を底とする自然対数 | C++11          |
+| [`log2`](cmath/log2.md)   | 2 を底とする二進対数                                     | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;fraction-and-exponent-functions&amp;#34; href=&amp;#34;#fraction-and-exponent-functions&amp;#34;&amp;gt;仮数と指数&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|-----------|----------------------------------|-------|
-| [`ldexp`](cmath/ldexp.md)     | 2 の累乗との乗算                 | |
-| [`frexp`](cmath/frexp.md)     | 仮数部と 2 の累乗への分解        | |
-| [`ilogb`](cmath/ilogb.md)     | 指数部を符号付き整数値として抽出 | C++11 |
-| [`logb`](cmath/logb.md)       | 指数部を浮動小数点数値として抽出 | C++11 |
-| [`modf`](cmath/modf.md)       | 整数部と小数部への分解           | |
-| [`scalbn`](cmath/scalbn.md)   | 内部表現の基数 (`FLT_RADIX`) の累乗との乗算 | C++11 |
-| [`scalbln`](cmath/scalbln.md) | 内部表現の基数 (`FLT_RADIX`) の累乗との乗算。乗数として`long`をとる | C++11 |
+| 名前                          | 説明                                                                | 対応バージョン |
+|-------------------------------|---------------------------------------------------------------------|----------------|
+| [`ldexp`](cmath/ldexp.md)     | 2 の累乗との乗算                                                    |                |
+| [`frexp`](cmath/frexp.md)     | 仮数部と 2 の累乗への分解                                           |                |
+| [`ilogb`](cmath/ilogb.md)     | 指数部を符号付き整数値として抽出                                    | C++11          |
+| [`logb`](cmath/logb.md)       | 指数部を浮動小数点数値として抽出                                    | C++11          |
+| [`modf`](cmath/modf.md)       | 整数部と小数部への分解                                              |                |
+| [`scalbn`](cmath/scalbn.md)   | 内部表現の基数 (`FLT_RADIX`) の累乗との乗算                         | C++11          |
+| [`scalbln`](cmath/scalbln.md) | 内部表現の基数 (`FLT_RADIX`) の累乗との乗算。乗数として`long`をとる | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;power-and-absolute-value-functions&amp;#34; href=&amp;#34;#power-and-absolute-value-functions&amp;#34;&amp;gt;累乗・冪根と絶対値&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|-----------------------------|----------------|-------|
-| [`pow`](cmath/pow.md)     | 累乗           | |
-| [`sqrt`](cmath/sqrt.md)   | 平方根         | |
-| [`cbrt`](cmath/cbrt.md)   | 立方根         | C++11 |
-| [`hypot`](cmath/hypot.md) | 平方和の平方根 | C++11 |
-| [`abs`](cmath/abs.md)     | 絶対値         | |
-| [`fabs`](cmath/fabs.md)   | 絶対値         | |
+| 名前                      | 説明           | 対応バージョン |
+|---------------------------|----------------|----------------|
+| [`pow`](cmath/pow.md)     | 累乗           |                |
+| [`sqrt`](cmath/sqrt.md)   | 平方根         |                |
+| [`cbrt`](cmath/cbrt.md)   | 立方根         | C++11          |
+| [`hypot`](cmath/hypot.md) | 平方和の平方根 | C++11          |
+| [`abs`](cmath/abs.md)     | 絶対値         |                |
+| [`fabs`](cmath/fabs.md)   | 絶対値         |                |
 
 
 ## &amp;lt;a id=&amp;#34;error-and-gamma-functions&amp;#34; href=&amp;#34;#error-and-gamma-functions&amp;#34;&amp;gt;誤差関数とガンマ関数&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|----------|----------------------|-------|
-| [`erf`](cmath/erf.md)       | 誤差関数             | C++11 |
-| [`erfc`](cmath/erfc.md)     | 相補誤差関数         | C++11 |
-| [`tgamma`](cmath/tgamma.md) | ガンマ関数           | C++11 |
-| [`lgamma`](cmath/lgamma.md) | ガンマ関数の自然対数 | C++11 |
+| 名前                        | 説明                 | 対応バージョン |
+|-----------------------------|----------------------|----------------|
+| [`erf`](cmath/erf.md)       | 誤差関数             | C++11          |
+| [`erfc`](cmath/erfc.md)     | 相補誤差関数         | C++11          |
+| [`tgamma`](cmath/tgamma.md) | ガンマ関数           | C++11          |
+| [`lgamma`](cmath/lgamma.md) | ガンマ関数の自然対数 | C++11          |
 
 ## &amp;lt;a id=&amp;#34;mathematical-special-functions&amp;#34; href=&amp;#34;#mathematical-special-functions&amp;#34;&amp;gt;その他特殊関数&amp;lt;/a&amp;gt;
 
@@ -302,29 +302,29 @@ NaN を返さなければならないが定義域エラーを報告してはな
 
 特記のない限り、以下の関数は全ての有限値と正負の無限大において定義される。
 
-| 名前 | 説明 | 対応バージョン |
-|------|------|----------------|
-| [`assoc_laguerre`](cmath/assoc_laguerre.md) | ラゲール陪多項式        | C++17 |
-| [`assoc_legendre`](cmath/assoc_legendre.md) | ルジャンドル陪関数      | C++17 |
-| [`beta`](cmath/beta.md)                     | ベータ関数              | C++17 |
-| [`comp_ellint_1`](cmath/comp_ellint_1.md)   | 第1種完全楕円積分      | C++17 |
-| [`comp_ellint_2`](cmath/comp_ellint_2.md)   | 第2種完全楕円積分      | C++17 |
-| [`comp_ellint_3`](cmath/comp_ellint_3.md)   | 第3種完全楕円積分      | C++17 |
-| [`cyl_bessel_i`](cmath/cyl_bessel_i.md)     | 第1種変形ベッセル関数  | C++17 |
-| [`cyl_bessel_j`](cmath/cyl_bessel_j.md)     | 第1種ベッセル関数      | C++17 |
-| [`cyl_bessel_k`](cmath/cyl_bessel_k.md)     | 第2種変形ベッセル関数  | C++17 |
-| [`cyl_neumann`](cmath/cyl_neumann.md)       | 第2種ベッセル関数      | C++17 |
-| [`ellint_1`](cmath/ellint_1.md)             | 第1種不完全楕円積分    | C++17 |
-| [`ellint_2`](cmath/ellint_2.md)             | 第2種不完全楕円積分    | C++17 |
-| [`ellint_3`](cmath/ellint_3.md)             | 第3種不完全楕円積分    | C++17 |
-| [`expint`](cmath/expint.md)                 | 指数積分                | C++17 |
-| [`hermite`](cmath/hermite.md)               | エルミート多項式        | C++17 |
-| [`laguerre`](cmath/laguerre.md)             | ラゲール多項式          | C++17 |
-| [`legendre`](cmath/legendre.md)             | ルジャンドル多項式      | C++17 |
-| [`riemann_zeta`](cmath/riemann_zeta.md)     | リーマンのゼータ関数    | C++17 |
-| [`sph_bessel`](cmath/sph_bessel.md)         | 第1種球ベッセル関数    | C++17 |
-| [`sph_legendre`](cmath/sph_legendre.md)     | 球面調和関数の *θ* 成分 | C++17 |
-| [`sph_neumann`](cmath/sph_neumann.md)       | 第2種球ベッセル関数    | C++17 |
+| 名前                                        | 説明                     | 対応バージョン |
+|---------------------------------------------|--------------------------|----------------|
+| [`assoc_laguerre`](cmath/assoc_laguerre.md) | ラゲール陪多項式         | C++17          |
+| [`assoc_legendre`](cmath/assoc_legendre.md) | ルジャンドル陪関数       | C++17          |
+| [`beta`](cmath/beta.md)                     | ベータ関数               | C++17          |
+| [`comp_ellint_1`](cmath/comp_ellint_1.md)   | 第1種完全楕円積分        | C++17          |
+| [`comp_ellint_2`](cmath/comp_ellint_2.md)   | 第2種完全楕円積分        | C++17          |
+| [`comp_ellint_3`](cmath/comp_ellint_3.md)   | 第3種完全楕円積分        | C++17          |
+| [`cyl_bessel_i`](cmath/cyl_bessel_i.md)     | 第1種変形ベッセル関数    | C++17          |
+| [`cyl_bessel_j`](cmath/cyl_bessel_j.md)     | 第1種ベッセル関数        | C++17          |
+| [`cyl_bessel_k`](cmath/cyl_bessel_k.md)     | 第2種変形ベッセル関数    | C++17          |
+| [`cyl_neumann`](cmath/cyl_neumann.md)       | 第2種ベッセル関数        | C++17          |
+| [`ellint_1`](cmath/ellint_1.md)             | 第1種不完全楕円積分      | C++17          |
+| [`ellint_2`](cmath/ellint_2.md)             | 第2種不完全楕円積分      | C++17          |
+| [`ellint_3`](cmath/ellint_3.md)             | 第3種不完全楕円積分      | C++17          |
+| [`expint`](cmath/expint.md)                 | 指数積分                 | C++17          |
+| [`hermite`](cmath/hermite.md)               | エルミート多項式         | C++17          |
+| [`laguerre`](cmath/laguerre.md)             | ラゲール多項式           | C++17          |
+| [`legendre`](cmath/legendre.md)             | ルジャンドル多項式       | C++17          |
+| [`riemann_zeta`](cmath/riemann_zeta.md)     | リーマンのゼータ関数     | C++17          |
+| [`sph_bessel`](cmath/sph_bessel.md)         | 第1種球ベッセル関数      | C++17          |
+| [`sph_legendre`](cmath/sph_legendre.md)     | 球面調和関数の *θ* 成分 | C++17          |
+| [`sph_neumann`](cmath/sph_neumann.md)       | 第2種球ベッセル関数      | C++17          |
 
 ## &amp;lt;a id=&amp;#34;nearest-integer-functions&amp;#34; href=&amp;#34;#nearest-integer-functions&amp;#34;&amp;gt;最近傍整数&amp;lt;/a&amp;gt;
 
@@ -344,114 +344,114 @@ NaN を返さなければならないが定義域エラーを報告してはな
 
 ## &amp;lt;a id=&amp;#34;remainder-functions&amp;#34; href=&amp;#34;#remainder-functions&amp;#34;&amp;gt;剰余&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|-------------|--------------------------|-------|
-| [`fmod`](cmath/fmod.md)           | 浮動小数点剰余           | |
-| [`remainder`](cmath/remainder.md) | 符号付きの浮動小数点剰余 | C++11 |
-| [`remquo`](cmath/remquo.md)       | 商と浮動小数点剰余       | C++11 |
+| 名前                              | 説明                     | 対応バージョン |
+|-----------------------------------|--------------------------|----------------|
+| [`fmod`](cmath/fmod.md)           | 浮動小数点剰余           |                |
+| [`remainder`](cmath/remainder.md) | 符号付きの浮動小数点剰余 | C++11          |
+| [`remquo`](cmath/remquo.md)       | 商と浮動小数点剰余       | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;manipulation-functions&amp;#34; href=&amp;#34;#manipulation-functions&amp;#34;&amp;gt;浮動小数点操作&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|--------------|-------------------------------|-------|
-| [`copysign`](cmath/copysign.md)     | 符号のコピー                  | C++11 |
-| [`nan`](cmath/nanf.md)              | 文字列から quiet NaN への変換 | C++11 |
-| [`nanf`](cmath/nanf.md)             | 文字列から quiet NaN への変換 | C++11 |
-| [`nanl`](cmath/nanf.md)             | 文字列から quiet NaN への変換 | C++11 |
-| [`nextafter`](cmath/nextafter.md)   | 指定方向への次の表現可能な値  | C++11 |
-| [`nexttoward`](cmath/nexttoward.md) | 指定方向への次の表現可能な値  | C++11 |
+| 名前                                | 説明                          | 対応バージョン |
+|-------------------------------------|-------------------------------|----------------|
+| [`copysign`](cmath/copysign.md)     | 符号のコピー                  | C++11          |
+| [`nan`](cmath/nanf.md)              | 文字列から quiet NaN への変換 | C++11          |
+| [`nanf`](cmath/nanf.md)             | 文字列から quiet NaN への変換 | C++11          |
+| [`nanl`](cmath/nanf.md)             | 文字列から quiet NaN への変換 | C++11          |
+| [`nextafter`](cmath/nextafter.md)   | 指定方向への次の表現可能な値  | C++11          |
+| [`nexttoward`](cmath/nexttoward.md) | 指定方向への次の表現可能な値  | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;maximum-minimum-and-positive-difference-functions&amp;#34; href=&amp;#34;#maximum-minimum-and-positive-difference-functions&amp;#34;&amp;gt;最大値・最小値と正の差&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|--------|--------|-------|
-| [`fmax`](cmath/fmax.md) | 最大値 | C++11 |
-| [`fmin`](cmath/fmin.md) | 最小値 | C++11 |
-| [`fdim`](cmath/fdim.md) | 正の差 | C++11 |
+| 名前                    | 説明   | 対応バージョン |
+|-------------------------|--------|----------------|
+| [`fmax`](cmath/fmax.md) | 最大値 | C++11          |
+| [`fmin`](cmath/fmin.md) | 最小値 | C++11          |
+| [`fdim`](cmath/fdim.md) | 正の差 | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;floating-multiply-add&amp;#34; href=&amp;#34;#floating-multiply-add&amp;#34;&amp;gt;乗算-加算&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|-------------------------|------------------|-------|
-| [`fma`](cmath/fma.md) | 乗算と加算の合成 | C++11 |
+| 名前                  | 説明             | 対応バージョン |
+|-----------------------|------------------|----------------|
+| [`fma`](cmath/fma.md) | 乗算と加算の合成 | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;linear-interpolation&amp;#34; href=&amp;#34;#linear-interpolation&amp;#34;&amp;gt;線形補完&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|------|------|----------------|
-| [`lerp`](cmath/lerp.md) | 線形補間 | C++20 |
+| 名前                    | 説明     | 対応バージョン |
+|-------------------------|----------|----------------|
+| [`lerp`](cmath/lerp.md) | 線形補間 | C++20          |
 
 
 ## &amp;lt;a id=&amp;#34;classification-functions&amp;#34; href=&amp;#34;#classification-functions&amp;#34;&amp;gt;数値分類&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|--------------|------------------|-------|
-| [`fpclassify`](cmath/fpclassify.md) | 数値を NaN、無限大、正規化数、非正規化数、0 または他の処理系定義のカテゴリに分類 | C++11 |
-| [`isfinite`](cmath/isfinite.md) | 数値が有限であるか判定      | C++11 |
-| [`isinf`](cmath/isinf.md)       | 数値が無限大であるか判定    | C++11 |
-| [`isnan`](cmath/isnan.md)       | 数値が NaN であるか判定     | C++11 |
-| [`isnormal`](cmath/isnormal.md) | 数値が正規化数であるか判定  | C++11 |
-| [`signbit`](cmath/signbit.md)   | 数値の符号が負であるか判定  | C++11 |
+| 名前                                | 説明                                                                             | 対応バージョン |
+|-------------------------------------|----------------------------------------------------------------------------------|----------------|
+| [`fpclassify`](cmath/fpclassify.md) | 数値を NaN、無限大、正規化数、非正規化数、0 または他の処理系定義のカテゴリに分類 | C++11          |
+| [`isfinite`](cmath/isfinite.md)     | 数値が有限であるか判定                                                           | C++11          |
+| [`isinf`](cmath/isinf.md)           | 数値が無限大であるか判定                                                         | C++11          |
+| [`isnan`](cmath/isnan.md)           | 数値が NaN であるか判定                                                          | C++11          |
+| [`isnormal`](cmath/isnormal.md)     | 数値が正規化数であるか判定                                                       | C++11          |
+| [`signbit`](cmath/signbit.md)       | 数値の符号が負であるか判定                                                       | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;comparison-functions&amp;#34; href=&amp;#34;#comparison-functions&amp;#34;&amp;gt;数値比較&amp;lt;/a&amp;gt;
 
-| 名前             | 説明                                                   | 対応バージョン |
-|------------------|--------------------------------------------------------|----------------|
-| [`isgreater`](cmath/isgreater.md)           | 第 1 引数が第 2 引数より大きいか判定                   | C++11 |
-| [`isgreaterequal`](cmath/isgreaterequal.md) | 第 1 引数が第 2 引数以上か判定                         | C++11 |
-| [`isless`](cmath/isless.md)                 | 第 1 引数が第 2 引数より小さいか判定                   | C++11 |
-| [`islessequal`](cmath/islessequal.md)       | 第 1 引数が第 2 引数以下か判定                         | C++11 |
-| [`islessgreater`](cmath/islessgreater.md)   | 第 1 引数が第 2 引数より小さいか、あるいは大きいか判定 | C++11 |
-| [`isunordered`](cmath/isunordered.md)       | 第 1 引数と第 2 引数が順序付けられていないか判定       | C++11 |
+| 名前                                        | 説明                                                   | 対応バージョン |
+|---------------------------------------------|--------------------------------------------------------|----------------|
+| [`isgreater`](cmath/isgreater.md)           | 第 1 引数が第 2 引数より大きいか判定                   | C++11          |
+| [`isgreaterequal`](cmath/isgreaterequal.md) | 第 1 引数が第 2 引数以上か判定                         | C++11          |
+| [`isless`](cmath/isless.md)                 | 第 1 引数が第 2 引数より小さいか判定                   | C++11          |
+| [`islessequal`](cmath/islessequal.md)       | 第 1 引数が第 2 引数以下か判定                         | C++11          |
+| [`islessgreater`](cmath/islessgreater.md)   | 第 1 引数が第 2 引数より小さいか、あるいは大きいか判定 | C++11          |
+| [`isunordered`](cmath/isunordered.md)       | 第 1 引数と第 2 引数が順序付けられていないか判定       | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;types&amp;#34; href=&amp;#34;#types&amp;#34;&amp;gt;型&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|-----------------------------------|-------------------------------|-------|
-| [`float_t`](cmath/float_t.md)   | `float` 以上の浮動小数点数型  | C++11 |
-| [`double_t`](cmath/double_t.md) | `double` 以上の浮動小数点数型 | C++11 |
+| 名前                            | 説明                          | 対応バージョン |
+|---------------------------------|-------------------------------|----------------|
+| [`float_t`](cmath/float_t.md)   | `float` 以上の浮動小数点数型  | C++11          |
+| [`double_t`](cmath/double_t.md) | `double` 以上の浮動小数点数型 | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;value-macros&amp;#34; href=&amp;#34;#value-macros&amp;#34;&amp;gt;数値のマクロ&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|-------------------------------------|------------------------------|-------|
-| [`HUGE_VAL`](cmath/huge_val.md)   | `double` 型の正の巨大値      | |
-| [`HUGE_VALF`](cmath/huge_valf.md) | `float` 型の正の巨大値       | C++11 |
-| [`HUGE_VALL`](cmath/huge_vall.md) | `long double` 型の正の巨大値 | C++11 |
-| [`INFINITY`](cmath/infinity.md)   | `float` 型の正の無限大       | C++11 |
-| [`NAN`](cmath/nan.md)             | `float` 型の `quiet NaN`     | C++11 |
+| 名前                              | 説明                         | 対応バージョン |
+|-----------------------------------|------------------------------|----------------|
+| [`HUGE_VAL`](cmath/huge_val.md)   | `double` 型の正の巨大値      |                |
+| [`HUGE_VALF`](cmath/huge_valf.md) | `float` 型の正の巨大値       | C++11          |
+| [`HUGE_VALL`](cmath/huge_vall.md) | `long double` 型の正の巨大値 | C++11          |
+| [`INFINITY`](cmath/infinity.md)   | `float` 型の正の無限大       | C++11          |
+| [`NAN`](cmath/nan.md)             | `float` 型の `quiet NaN`     | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;classification-macros&amp;#34; href=&amp;#34;#classification-macros&amp;#34;&amp;gt;数値分類のマクロ&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|-------------------------------------------|---------------------------------------------|-------|
-| [`FP_INFINITE`](cmath/fp_infinite.md)   | 数値分類で無限大を表す整数定数式            | C++11 |
-| [`FP_NAN`](cmath/fp_nan.md)             | 数値分類で `NaN` を表す整数定数式           | C++11 |
-| [`FP_NORMAL`](cmath/fp_normal.md)       | 数値分類で正規化数を表す整数定数式          | C++11 |
-| [`FP_SUBNORMAL`](cmath/fp_subnormal.md) | 数値分類で非正規化数を表す整数定数式        | C++11 |
-| [`FP_ZERO`](cmath/fp_zero.md)           | 数値分類で浮動小数点数の 0 を表す整数定数式 | C++11 |
+| 名前                                    | 説明                                        | 対応バージョン |
+|-----------------------------------------|---------------------------------------------|----------------|
+| [`FP_INFINITE`](cmath/fp_infinite.md)   | 数値分類で無限大を表す整数定数式            | C++11          |
+| [`FP_NAN`](cmath/fp_nan.md)             | 数値分類で `NaN` を表す整数定数式           | C++11          |
+| [`FP_NORMAL`](cmath/fp_normal.md)       | 数値分類で正規化数を表す整数定数式          | C++11          |
+| [`FP_SUBNORMAL`](cmath/fp_subnormal.md) | 数値分類で非正規化数を表す整数定数式        | C++11          |
+| [`FP_ZERO`](cmath/fp_zero.md)           | 数値分類で浮動小数点数の 0 を表す整数定数式 | C++11          |
 
 
 ## &amp;lt;a id=&amp;#34;other-macros&amp;#34; href=&amp;#34;#other-macros&amp;#34;&amp;gt;その他のマクロ&amp;lt;/a&amp;gt;
 
-| 名前 | 説明 | 対応バージョン |
-|-------------------------------------------|---------------------------------------------|-------|
-| [`FP_FAST_FMA`](cmath/fp_fast_fma.md)   | `double` 型の `fma` 関数がより高速な実装であるか | C++11 |
-| [`FP_FAST_FMAF`](cmath/fp_fast_fmaf.md) | `float` 型の `fma` 関数がより高速な実装であるか  | C++11 |
-| [`FP_FAST_FMAL`](cmath/fp_fast_fmal.md) | `long double` 型の `fma` 関数がより高速な実装であるか | C++11 |
-| [`FP_ILOGB0`](cmath/fp_ilogb0.md)       | `ilogb(0)` の戻り値を表す整数定数式 | C++11 |
-| [`FP_ILOGBNAN`](cmath/fp_ilogbnan.md)   | `ilogb(NaN)` の戻り値を表す整数定数式 | C++11 |
-| [`MATH_ERRNO`](cmath/math_errno.md)             | 数学ライブラリ内で`errno`にエラーが設定されたかを表す整数定数 | C++11 |
-| [`MATH_ERREXCEPT`](cmath/math_errexcept.md)     | 数学ライブラリ内で浮動小数点例外が発生したかを表す整数定数 | C++11 |
-| [`math_errhandling`](cmath/math_errhandling.md) | `&amp;lt;cmath&amp;gt;` 内の関数がエラーをどのように取り扱うかを表すマクロ | C++11 |
+| 名前                                            | 説明                                                          | 対応バージョン |
+|-------------------------------------------------|---------------------------------------------------------------|----------------|
+| [`FP_FAST_FMA`](cmath/fp_fast_fma.md)           | `double` 型の `fma` 関数がより高速な実装であるか              | C++11          |
+| [`FP_FAST_FMAF`](cmath/fp_fast_fmaf.md)         | `float` 型の `fma` 関数がより高速な実装であるか               | C++11          |
+| [`FP_FAST_FMAL`](cmath/fp_fast_fmal.md)         | `long double` 型の `fma` 関数がより高速な実装であるか         | C++11          |
+| [`FP_ILOGB0`](cmath/fp_ilogb0.md)               | `ilogb(0)` の戻り値を表す整数定数式                           | C++11          |
+| [`FP_ILOGBNAN`](cmath/fp_ilogbnan.md)           | `ilogb(NaN)` の戻り値を表す整数定数式                         | C++11          |
+| [`MATH_ERRNO`](cmath/math_errno.md)             | 数学ライブラリ内で`errno`にエラーが設定されたかを表す整数定数 | C++11          |
+| [`MATH_ERREXCEPT`](cmath/math_errexcept.md)     | 数学ライブラリ内で浮動小数点例外が発生したかを表す整数定数    | C++11          |
+| [`math_errhandling`](cmath/math_errhandling.md) | `&amp;lt;cmath&amp;gt;` 内の関数がエラーをどのように取り扱うかを表すマクロ  | C++11          |
 
 
 ## 関連項目
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmath -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath.md b/reference/cmath.md
index 1834c1ebf..7f1575d21 100644
--- a/reference/cmath.md
+++ b/reference/cmath.md
@@ -307,24 +307,24 @@ NaN を返さなければならないが定義域エラーを報告してはな
 | [`assoc_laguerre`](cmath/assoc_laguerre.md) | ラゲール陪多項式        | C++17 |
 | [`assoc_legendre`](cmath/assoc_legendre.md) | ルジャンドル陪関数      | C++17 |
 | [`beta`](cmath/beta.md)                     | ベータ関数              | C++17 |
-| [`comp_ellint_1`](cmath/comp_ellint_1.md)   | 第一種完全楕円積分      | C++17 |
-| [`comp_ellint_2`](cmath/comp_ellint_2.md)   | 第二種完全楕円積分      | C++17 |
-| [`comp_ellint_3`](cmath/comp_ellint_3.md)   | 第三種完全楕円積分      | C++17 |
-| [`cyl_bessel_i`](cmath/cyl_bessel_i.md)     | 第一種変形ベッセル関数  | C++17 |
-| [`cyl_bessel_j`](cmath/cyl_bessel_j.md)     | 第一種ベッセル関数      | C++17 |
-| [`cyl_bessel_k`](cmath/cyl_bessel_k.md)     | 第二種変形ベッセル関数  | C++17 |
-| [`cyl_neumann`](cmath/cyl_neumann.md)       | 第二種ベッセル関数      | C++17 |
-| [`ellint_1`](cmath/ellint_1.md)             | 第一種不完全楕円積分    | C++17 |
-| [`ellint_2`](cmath/ellint_2.md)             | 第二種不完全楕円積分    | C++17 |
-| [`ellint_3`](cmath/ellint_3.md)             | 第三種不完全楕円積分    | C++17 |
+| [`comp_ellint_1`](cmath/comp_ellint_1.md)   | 第1種完全楕円積分      | C++17 |
+| [`comp_ellint_2`](cmath/comp_ellint_2.md)   | 第2種完全楕円積分      | C++17 |
+| [`comp_ellint_3`](cmath/comp_ellint_3.md)   | 第3種完全楕円積分      | C++17 |
+| [`cyl_bessel_i`](cmath/cyl_bessel_i.md)     | 第1種変形ベッセル関数  | C++17 |
+| [`cyl_bessel_j`](cmath/cyl_bessel_j.md)     | 第1種ベッセル関数      | C++17 |
+| [`cyl_bessel_k`](cmath/cyl_bessel_k.md)     | 第2種変形ベッセル関数  | C++17 |
+| [`cyl_neumann`](cmath/cyl_neumann.md)       | 第2種ベッセル関数      | C++17 |
+| [`ellint_1`](cmath/ellint_1.md)             | 第1種不完全楕円積分    | C++17 |
+| [`ellint_2`](cmath/ellint_2.md)             | 第2種不完全楕円積分    | C++17 |
+| [`ellint_3`](cmath/ellint_3.md)             | 第3種不完全楕円積分    | C++17 |
 | [`expint`](cmath/expint.md)                 | 指数積分                | C++17 |
 | [`hermite`](cmath/hermite.md)               | エルミート多項式        | C++17 |
 | [`laguerre`](cmath/laguerre.md)             | ラゲール多項式          | C++17 |
 | [`legendre`](cmath/legendre.md)             | ルジャンドル多項式      | C++17 |
 | [`riemann_zeta`](cmath/riemann_zeta.md)     | リーマンのゼータ関数    | C++17 |
-| [`sph_bessel`](cmath/sph_bessel.md)         | 第一種球ベッセル関数    | C++17 |
+| [`sph_bessel`](cmath/sph_bessel.md)         | 第1種球ベッセル関数    | C++17 |
 | [`sph_legendre`](cmath/sph_legendre.md)     | 球面調和関数の *θ* 成分 | C++17 |
-| [`sph_neumann`](cmath/sph_neumann.md)       | 第二種球ベッセル関数    | C++17 |
+| [`sph_neumann`](cmath/sph_neumann.md)       | 第2種球ベッセル関数    | C++17 |
 
 ## &amp;lt;a id=&amp;#34;nearest-integer-functions&amp;#34; href=&amp;#34;#nearest-integer-functions&amp;#34;&amp;gt;最近傍整数&amp;lt;/a&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>comp_ellint_1 -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/comp_ellint_1.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/comp_ellint_1.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/comp_ellint_1.md b/reference/cmath/comp_ellint_1.md
index c26d5595c..ad96b9631 100644
--- a/reference/cmath/comp_ellint_1.md
+++ b/reference/cmath/comp_ellint_1.md
@@ -27,7 +27,7 @@ namespace std {
 
 
 ## 概要
-第一種完全楕円積分 (complete elliptic integral of the first kind) を計算する。
+第1種完全楕円積分 (complete elliptic integral of the first kind) を計算する。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -38,13 +38,13 @@ namespace std {
 
 
 ## 戻り値
-引数 `k` の第一種完全楕円積分
+引数 `k` の第1種完全楕円積分
 $$
 K(k) = F(k, \pi/2) = \int_0^{\pi/2} \frac{\mathrm d\theta}{\sqrt{1 - k^2 \sin^2 \theta}}
 \quad \text{for } |k| \le 1
 $$
 を返す。
-$ F(k, \phi) $ は第一種不完全楕円積分 ([`ellint_1`](ellint_1.md))。
+$ F(k, \phi) $ は第1種不完全楕円積分 ([`ellint_1`](ellint_1.md))。
 
 
 ## 備考
@@ -73,7 +73,7 @@ comp_ellint_1(1)   = nan
 
 ## 単振り子の周期と等時性の破れ
 
-単振り子の周期$ T $は、第一種完全楕円積分$ K $を用いて、$ T = 4 \sqrt{\frac{l}{g}} K(\sin(\frac{\theta}{2})) $と書ける（$ l $は長さ、$ g $は重力加速度）。$ l = 1 [m]$の時の周期 $ T [s]$と、近似値$ T_0 = 2\pi\sqrt{\frac{l}{g}}$との比$T/T_0$を計算する例。
+単振り子の周期$ T $は、第1種完全楕円積分$ K $を用いて、$ T = 4 \sqrt{\frac{l}{g}} K(\sin(\frac{\theta}{2})) $と書ける（$ l $は長さ、$ g $は重力加速度）。$ l = 1 [m]$の時の周期 $ T [s]$と、近似値$ T_0 = 2\pi\sqrt{\frac{l}{g}}$との比$T/T_0$を計算する例。
 
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
@@ -136,7 +136,7 @@ $$
 
 
 ## 関連項目
-- 第一種不完全楕円積分 [`ellint_1`](ellint_1.md)
+- 第1種不完全楕円積分 [`ellint_1`](ellint_1.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>comp_ellint_2 -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/comp_ellint_2.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/comp_ellint_2.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/comp_ellint_2.md b/reference/cmath/comp_ellint_2.md
index 8768d2306..d2d7123d3 100644
--- a/reference/cmath/comp_ellint_2.md
+++ b/reference/cmath/comp_ellint_2.md
@@ -26,7 +26,7 @@ namespace std {
 * Arithmetic[italic]
 
 ## 概要
-第二種完全楕円積分 (complete elliptic integral of the second kind) を計算する。
+第2種完全楕円積分 (complete elliptic integral of the second kind) を計算する。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -37,13 +37,13 @@ namespace std {
 
 
 ## 戻り値
-引数 `k` の第二種完全楕円積分
+引数 `k` の第2種完全楕円積分
 $$
 E(k) = E(k, \pi/2) = \int_0^{\pi/2} \mathrm d\theta ~ \sqrt{1 - k^2 \sin^2 \theta}
 \quad \text{for } |k| \le 1
 $$
 を返す。
-$ E(k, \phi) $ は第二種不完全楕円積分 ([`ellint_2`](ellint_2.md))。
+$ E(k, \phi) $ は第2種不完全楕円積分 ([`ellint_2`](ellint_2.md))。
 
 
 ## 備考
@@ -90,7 +90,7 @@ $$
 
 
 ## 関連項目
-- 第二種不完全楕円積分 [`ellint_2`](ellint_2.md)
+- 第2種不完全楕円積分 [`ellint_2`](ellint_2.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>comp_ellint_3 -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/comp_ellint_3.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/comp_ellint_3.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/comp_ellint_3.md b/reference/cmath/comp_ellint_3.md
index 3a234e503..8bc30bcc8 100644
--- a/reference/cmath/comp_ellint_3.md
+++ b/reference/cmath/comp_ellint_3.md
@@ -32,7 +32,7 @@ namespace std {
 * Arithmetic2[italic]
 
 ## 概要
-第三種完全楕円積分 (complete elliptic integral of the third kind) を計算する。
+第3種完全楕円積分 (complete elliptic integral of the third kind) を計算する。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -43,7 +43,7 @@ namespace std {
 
 
 ## 戻り値
-引数 `k`, `nu` の第三種完全楕円積分
+引数 `k`, `nu` の第3種完全楕円積分
 $$
 \Pi(\nu, k) = \Pi(\nu, k, \pi/2)
 = \int_0^{\pi/2} \frac{\mathrm d\theta}{(1 - \nu \sin^2 \theta) \sqrt{1 - k^2 \sin^2 \theta}}
@@ -51,11 +51,11 @@ $$
 $$
 を返す。
 
-$ \Pi(\nu, k) $ は第三種不完全楕円積分 ([`ellint_3`](ellint_3.md))。
+$ \Pi(\nu, k) $ は第3種不完全楕円積分 ([`ellint_3`](ellint_3.md))。
 
 
 ## 備考
-- $\Pi(0, k) = K(k)$ (第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md))
+- $\Pi(0, k) = K(k)$ (第1種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md))
 - (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
@@ -120,7 +120,7 @@ GCC 7.1.0–8.0.0 では
 
 
 ## 関連項目
-* 第三種不完全楕円積分 [`ellint_3`](ellint_3.md)
+* 第3種不完全楕円積分 [`ellint_3`](ellint_3.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_bessel_i -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_bessel_i.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/cyl_bessel_i.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_bessel_i.md b/reference/cmath/cyl_bessel_i.md
index b6a9ecfad..f74ca282c 100644
--- a/reference/cmath/cyl_bessel_i.md
+++ b/reference/cmath/cyl_bessel_i.md
@@ -32,7 +32,7 @@ namespace std {
 * Arithmetic2[italic]
 
 ## 概要
-第一種変形ベッセル関数 (modified Bessel functions of the first kind) を求める。
+第1種変形ベッセル関数 (modified Bessel functions of the first kind) を求める。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -43,13 +43,13 @@ namespace std {
 
 
 ## 戻り値
-引数 `nu`, `x` の第一種変形ベッセル関数
+引数 `nu`, `x` の第1種変形ベッセル関数
 $$
 I_\nu(x) = i^{-\nu} J_\nu(ix) = \sum_{k=0}^\infty \frac{1}{k! \Gamma(\nu + k + 1)} \left( \frac{x}{2} \right)^{\nu + 2k}
 \quad \text{for } x \ge 0
 $$
 を返す。
-$J$ は第一種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md)) である。
+$J$ は第1種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md)) である。
 
 
 ## 備考
@@ -110,8 +110,8 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
-- 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
-- 第二種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
+- 第1種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
+- 第2種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_bessel_j -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_bessel_j.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/cyl_bessel_j.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_bessel_j.md b/reference/cmath/cyl_bessel_j.md
index 0958d751e..d4935036e 100644
--- a/reference/cmath/cyl_bessel_j.md
+++ b/reference/cmath/cyl_bessel_j.md
@@ -32,7 +32,7 @@ namespace std {
 * Arithmetic2[italic]
 
 ## 概要
-第一種ベッセル関数 (Bessel functions of the first kind) を求める。
+第1種ベッセル関数 (Bessel functions of the first kind) を求める。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -43,7 +43,7 @@ namespace std {
 
 
 ## 戻り値
-引数 `nu`, `x` の第一種ベッセル関数
+引数 `nu`, `x` の第1種ベッセル関数
 $$
 J_\nu(x) = \sum_{k=0}^\infty \frac{(-1)^k}{k! \Gamma(\nu + k + 1)} \left( \frac{x}{2} \right)^{\nu + 2k}
 \quad \text{for } x \ge 0
@@ -111,10 +111,10 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
-- 第一種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
-- 第二種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
-- 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
-- 第一種球ベッセル関数 [`sph_bessel`](sph_bessel.md)
+- 第1種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
+- 第2種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
+- 第2種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
+- 第1種球ベッセル関数 [`sph_bessel`](sph_bessel.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_bessel_k -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_bessel_k.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/cyl_bessel_k.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_bessel_k.md b/reference/cmath/cyl_bessel_k.md
index 8bdb4b930..b6f9f4c55 100644
--- a/reference/cmath/cyl_bessel_k.md
+++ b/reference/cmath/cyl_bessel_k.md
@@ -32,7 +32,7 @@ namespace std {
 * Arithmetic2[italic]
 
 ## 概要
-第二種変形ベッセル関数 (modified Bessel functions of the second kind) を求める。
+第2種変形ベッセル関数 (modified Bessel functions of the second kind) を求める。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -43,7 +43,7 @@ namespace std {
 
 
 ## 戻り値
-引数 `nu`, `x` の第二種変形ベッセル関数
+引数 `nu`, `x` の第2種変形ベッセル関数
 $$
 K_\nu(x) = \frac{\pi}{2} i^{\nu + 1} \left( J_\nu(ix) + i N_\nu(ix) \right)
 = \frac{\pi}{2} \frac{I_{-\nu}(x) - I_{\nu}(x)}{\sin \nu \pi}
@@ -51,9 +51,9 @@ K_\nu(x) = \frac{\pi}{2} i^{\nu + 1} \left( J_\nu(ix) + i N_\nu(ix) \right)
 $$
 を返す。
 $I$, $J$, $N$ はそれぞれ
-第一種変形ベッセル関数 ([`cyl_bessel_i`](cyl_bessel_i.md))、
-第一種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md))、
-第二種ベッセル関数 ([`cyl_neumann`](cyl_neumann.md))
+第1種変形ベッセル関数 ([`cyl_bessel_i`](cyl_bessel_i.md))、
+第1種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md))、
+第2種ベッセル関数 ([`cyl_neumann`](cyl_neumann.md))
 である。
 
 
@@ -115,9 +115,9 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
-- 第一種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
-- 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
-- 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
+- 第1種変形ベッセル関数 [`cyl_bessel_i`](cyl_bessel_i.md)
+- 第1種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
+- 第2種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cyl_neumann -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/cyl_neumann.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/cyl_neumann.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/cyl_neumann.md b/reference/cmath/cyl_neumann.md
index 548ce6881..ae52c163b 100644
--- a/reference/cmath/cyl_neumann.md
+++ b/reference/cmath/cyl_neumann.md
@@ -32,7 +32,7 @@ namespace std {
 * Arithmetic2[italic]
 
 ## 概要
-第二種ベッセル関数 (Bessel functions of the second kind)、ノイマン関数 (Neumann functions) を求める。
+第2種ベッセル関数 (Bessel functions of the second kind)、ノイマン関数 (Neumann functions) を求める。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -43,13 +43,13 @@ namespace std {
 
 
 ## 戻り値
-引数 `x` の第二種ベッセル関数
+引数 `x` の第2種ベッセル関数
 $$
 N_\nu(x) = \frac{J_{\nu}(x) \cos \nu \pi - J_{-\nu}(x)}{\sin \nu \pi}
 \quad \text{for } x \ge 0
 $$
 を返す。
-$J$ は第一種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md)) である。
+$J$ は第1種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md)) である。
 
 
 ## 備考
@@ -112,9 +112,9 @@ GCC 7.1.0–8.0.0 では `nu &amp;lt; 0` のときに [`std::domain_error`](/reference/
 
 
 ## 関連項目
-* 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
-* 第二種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
-* 第二種球ベッセル関数 [`sph_neumann`](sph_neumann.md)
+* 第1種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
+* 第2種変形ベッセル関数 [`cyl_bessel_k`](cyl_bessel_k.md)
+* 第2種球ベッセル関数 [`sph_neumann`](sph_neumann.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_1 -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_1.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/ellint_1.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_1.md b/reference/cmath/ellint_1.md
index 7c47a2c82..fdfdd04ae 100644
--- a/reference/cmath/ellint_1.md
+++ b/reference/cmath/ellint_1.md
@@ -32,7 +32,7 @@ namespace std {
 * Arithmetic2[italic]
 
 ## 概要
-第一種不完全楕円積分 (incomplete elliptic integral of the first kind) を計算する。
+第1種不完全楕円積分 (incomplete elliptic integral of the first kind) を計算する。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -43,7 +43,7 @@ namespace std {
 
 
 ## 戻り値
-引数 `k`, `phi` の第一種不完全楕円積分
+引数 `k`, `phi` の第1種不完全楕円積分
 $$
 F(k, \phi) = \int_0^\phi \frac{\mathrm d\theta}{\sqrt{1 - k^2 \sin^2 \theta}}
 \quad \text{for } |k| \le 1
@@ -52,7 +52,7 @@ $$
 
 
 ## 備考
-- $ F(k, \pi/2) = K(k)$ (第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md))
+- $ F(k, \pi/2) = K(k)$ (第1種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md))
 - (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
@@ -111,7 +111,7 @@ GCC 7.1.0–8.0.0 では `|k| == 1 &amp;amp;&amp;amp; |phi| &amp;gt;= π / 2` の場合 `nan` を返す
 
 
 ## 関連項目
-- 第一種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md)
+- 第1種完全楕円積分 [`comp_ellint_1`](comp_ellint_1.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_2 -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_2.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/ellint_2.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_2.md b/reference/cmath/ellint_2.md
index 041b8c6b0..3bd696eaa 100644
--- a/reference/cmath/ellint_2.md
+++ b/reference/cmath/ellint_2.md
@@ -32,7 +32,7 @@ namespace std {
 * Arithmetic2[italic]
 
 ## 概要
-第二種不完全楕円積分 (incomplete elliptic integral of the second kind) を計算する。
+第2種不完全楕円積分 (incomplete elliptic integral of the second kind) を計算する。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -43,7 +43,7 @@ namespace std {
 
 
 ## 戻り値
-引数 `k`, `phi` の第二種不完全楕円積分
+引数 `k`, `phi` の第2種不完全楕円積分
 $$
 E(k, \phi) = \int_0^\phi \mathrm d\theta ~ \sqrt{1 - k^2 \sin^2 \theta}
 \quad \text{for } |k| \le 1
@@ -52,7 +52,7 @@ $$
 
 
 ## 備考
-- $ E(k, \pi/2) = E(k) $ (第二種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md))
+- $ E(k, \pi/2) = E(k) $ (第2種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md))
 - (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
@@ -106,7 +106,7 @@ ellint_2(1, 0.5 pi) = 1
 
 
 ## 関連項目
-- 第二種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md)
+- 第2種完全楕円積分 [`comp_ellint_2`](comp_ellint_2.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ellint_3 -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/ellint_3.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/ellint_3.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/ellint_3.md b/reference/cmath/ellint_3.md
index b48b69b77..ab65fba4c 100644
--- a/reference/cmath/ellint_3.md
+++ b/reference/cmath/ellint_3.md
@@ -32,7 +32,7 @@ namespace std {
 * Arithmetic2[italic]
 
 ## 概要
-第三種不完全楕円積分 (incomplete elliptic integral of the third kind) を計算する。
+第3種不完全楕円積分 (incomplete elliptic integral of the third kind) を計算する。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -43,7 +43,7 @@ namespace std {
 
 
 ## 戻り値
-引数 `k`, `nu`, `phi` の第三種不完全楕円積分
+引数 `k`, `nu`, `phi` の第3種不完全楕円積分
 $$
 \Pi(\nu, k, \phi)
 = \int_0^\phi \frac{\mathrm d\theta}{(1 - \nu \sin^2 \theta) \sqrt{1 - k^2 \sin^2 \theta}}
@@ -53,8 +53,8 @@ $$
 
 
 ## 備考
-- $ \Pi(\nu, k, \pi/2) = \Pi(\nu, k) $ (第三種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md))
-- $ \Pi(0, k, \phi) = F(k, \phi) $ (第一種不完全楕円積分 [`ellint_1`](ellint_1.md))
+- $ \Pi(\nu, k, \pi/2) = \Pi(\nu, k) $ (第3種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md))
+- $ \Pi(0, k, \phi) = F(k, \phi) $ (第1種不完全楕円積分 [`ellint_1`](ellint_1.md))
 - (1) : C++23では、拡張浮動小数点数型を含む浮動小数点数型へのオーバーロードとして定義された
 
 
@@ -134,7 +134,7 @@ GCC 7.1.0–8.0.0 では `1 - nu * sin^2(phi) &amp;lt; 0` のときに [`std::domain_er
 
 
 ## 関連項目
-- 第三種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md)
+- 第3種完全楕円積分 [`comp_ellint_3`](comp_ellint_3.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sph_bessel -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sph_bessel.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/sph_bessel.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sph_bessel.md b/reference/cmath/sph_bessel.md
index ec9ba8c17..ef75c43eb 100644
--- a/reference/cmath/sph_bessel.md
+++ b/reference/cmath/sph_bessel.md
@@ -31,7 +31,7 @@ namespace std {
 * Arithmetic[italic]
 
 ## 概要
-第一種球ベッセル関数 (spherical Bessel functions of the first kind) を求める。
+第1種球ベッセル関数 (spherical Bessel functions of the first kind) を求める。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -42,13 +42,13 @@ namespace std {
 
 
 ## 戻り値
-引数 `n`, `x` の第一種球ベッセル関数
+引数 `n`, `x` の第1種球ベッセル関数
 $$
 j_n(x) = \sqrt{\frac{\pi}{2x}} J_{n + 1/2}(x)
 \quad \text{for } x \ge 0
 $$
 を返す。
-$J$ は第一種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md))。
+$J$ は第1種ベッセル関数 ([`cyl_bessel_j`](cyl_bessel_j.md))。
 
 
 ## 備考
@@ -114,7 +114,7 @@ $$
 
 
 ## 関連項目
-- 第一種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
+- 第1種ベッセル関数 [`cyl_bessel_j`](cyl_bessel_j.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sph_neumann -- fix(cmath): 特殊関数名において「第一種 → 第1種」のように表記修正</title>
      <link href="https://cpprefjp.github.io/reference/cmath/sph_neumann.html"/>
      <id>1e87ee558aa529cf5c771a119ef36892cfb870b4:reference/cmath/sph_neumann.md</id>
      <updated>2024-04-17T15:57:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/sph_neumann.md b/reference/cmath/sph_neumann.md
index 9eb76458a..22adb6eac 100644
--- a/reference/cmath/sph_neumann.md
+++ b/reference/cmath/sph_neumann.md
@@ -31,7 +31,7 @@ namespace std {
 * Arithmetic[italic]
 
 ## 概要
-第二種球ベッセル関数 (spherical Bessel functions of the second kind)、球ノイマン関数 (spherical Neumann functions) を求める。
+第2種球ベッセル関数 (spherical Bessel functions of the second kind)、球ノイマン関数 (spherical Neumann functions) を求める。
 
 - (1) :
     - C++17 : `double`に対するオーバーロード
@@ -42,13 +42,13 @@ namespace std {
 
 
 ## 戻り値
-引数 `n`, `x` の第二種球ベッセル関数
+引数 `n`, `x` の第2種球ベッセル関数
 $$
 n_n(x) = \sqrt{\frac{\pi}{2x}} N_{n + 1/2}(x)
 \quad \text{for } x \ge 0
 $$
 を返す。
-$N$ は第二種ベッセル関数 ([`cyl_neumann`](cyl_neumann.md))。
+$N$ は第2種ベッセル関数 ([`cyl_neumann`](cyl_neumann.md))。
 
 
 ## 備考
@@ -114,7 +114,7 @@ $$
 
 
 ## 関連項目
-- 第二種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
+- 第2種ベッセル関数 [`cyl_neumann`](cyl_neumann.md)
 
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数が定数実行できない場合でも適格とする -- refactor: simplify explanation of P2448R2</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html"/>
      <id>d9744ca36b456eba18cfe64c461085b490716361:lang/cpp23/relaxing_some_constexpr_restrictions.md</id>
      <updated>2024-04-15T23:57:01+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/relaxing_some_constexpr_restrictions.md b/lang/cpp23/relaxing_some_constexpr_restrictions.md
index 6f909e8d0..205a7e237 100644
--- a/lang/cpp23/relaxing_some_constexpr_restrictions.md
+++ b/lang/cpp23/relaxing_some_constexpr_restrictions.md
@@ -25,7 +25,7 @@ constexpr int g(int x) { return f(x); } // error! fはいかなるxについて
 しかし、多くの標準ライブラリが`constexpr`対応を進めていくようになり、状況が変化した。
 
 例えば、`std::optional`の`reset`メンバメソッドが`constexpr`に対応するのはC++23以降である。
-これは`std::optional`の内部実装が`union`のアクティブメンバを更新しているからであり、[これを定数式内で実行するにはC++20を待たねばならなかった](/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md)。
+これは`std::optional`の内部実装が`union`のアクティブメンバを更新しているからであり、これを定数式内で実行するにはC++20を待たねばならなかった（参考：[定数式内での共用体のアクティブメンバの変更を許可](/lang/cpp20/changing_the_active_member_of_a_union_inside_constexpr.md)）。
 
 よって、以下のコードはC++17では不適格だが、C++23では正しいコードとなる。
 
@@ -37,7 +37,7 @@ constexpr void f(std::optional&amp;lt;T&amp;gt;&amp;amp; opt)
 }
 ```
 
-これを正しく記述するには、`constexpr`指定をするかどうかをマクロで変更しなければならない。
+多くのバージョンで使われることが想定されるライブラリにおいてこれを最大限活用できるよう記述するには、`constexpr`指定するかどうかをマクロで変更しなければならない。
 例えばC++23から`constexpr`になる関数群に対して以下のようなマクロを使うか、
 
 ```cpp
@@ -77,9 +77,9 @@ void f(std::optional&amp;lt;T&amp;gt;&amp;amp; opt)
 このような状況では上記のような解決策を用いてもミスを避けることは容易ではない。
 
 現在、登場時点では定数式内で実行できなかったために`constexpr`されていなかった多くの標準ライブラリ関数が、のちにコア言語機能が追加されて`constexpr`指定されている。
-現時点で`constexpr`されていない関数は次のバージョンで`constexpr`になるかもしれず、よって現在使用されているバージョンである関数が`constexpr`ではないということを指摘することの意味は薄れている。
+そのため、現時点で`constexpr`ではない関数も次のバージョンで`constexpr`になるかもしれず、よって関数が`constexpr`指定されているだけでエラーにする意義は薄れてきた。
 
-以上を鑑みて、`constexpr`関数が定数式実行可能かどうかを判断するのは、実際に定数式内で実行されてからにした方がよいという結論に至った。
+以上から、コンパイル時に実行できない`constexpr`をエラーとするのは、実際にコンパイル時に呼びだされてからでよい、ということになった。
 
 実際に定数式内で実行できない関数が定数式内で呼び出された場合、これは従来通りエラーとするほかない。
 しかし、定数式内で呼び出されていないのならば、定数式内で実行できない関数が存在していてもプログラムを不適格とはしない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr関数が定数実行できない場合でも適格とする -- fix: typo in an example code</title>
      <link href="https://cpprefjp.github.io/lang/cpp23/relaxing_some_constexpr_restrictions.html"/>
      <id>8ed33cbe79c326dec1ea1e0aa6ef48fdd6d8c29a:lang/cpp23/relaxing_some_constexpr_restrictions.md</id>
      <updated>2024-04-15T23:54:27+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp23/relaxing_some_constexpr_restrictions.md b/lang/cpp23/relaxing_some_constexpr_restrictions.md
index 254dec4eb..6f909e8d0 100644
--- a/lang/cpp23/relaxing_some_constexpr_restrictions.md
+++ b/lang/cpp23/relaxing_some_constexpr_restrictions.md
@@ -64,7 +64,7 @@ constexpr
 #endif
 void f(std::optional&amp;lt;T&amp;gt;&amp;amp; opt)
 {
-  o.reset();
+  opt.reset();
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>ToruNiina</name>
        <email>niina.toru.68u@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-12-18T14:43:34.943540</updated>
  <id>bc49924a-ef22-493f-a739-d28a843df9a3</id>

  
    <entry>
      <title>gcd -- gcd, lcmの実装例 : 仕様に合わせて絶対値をとるよう修正</title>
      <link href="https://cpprefjp.github.io/reference/numeric/gcd.html"/>
      <id>5cc3b9e41da3334156c0090b216b916c8804af7c:reference/numeric/gcd.md</id>
      <updated>2024-12-18T22:28:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/gcd.md b/reference/numeric/gcd.md
index 5bf7c51aa..3a5754232 100644
--- a/reference/numeric/gcd.md
+++ b/reference/numeric/gcd.md
@@ -176,14 +176,19 @@ constexpr std::common_type_t&amp;lt;M, N&amp;gt; gcd(M m, N n) {
   if (m == 0 &amp;amp;&amp;amp; n == 0) {
     return 0;
   }
-  while (m != 0 &amp;amp;&amp;amp; n != 0) {
-    if (m &amp;gt; n) {
-      m %= n;
+
+  auto mm = abs(m);
+  auto nn = abs(n);
+  while (mm != 0 &amp;amp;&amp;amp; nn != 0) {
+    if (mm &amp;gt; nn) {
+      mm %= nn;
     }
     else {
-      n %= m;
+      nn %= mm;
     }
   }
-  return m &amp;lt; n ? n : m;
+  return mm &amp;lt; nn ? nn : mm;
 }
 ```
+* abs[link /reference/cstdlib/abs.md]
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lcm -- gcd, lcmの実装例 : 仕様に合わせて絶対値をとるよう修正</title>
      <link href="https://cpprefjp.github.io/reference/numeric/lcm.html"/>
      <id>5cc3b9e41da3334156c0090b216b916c8804af7c:reference/numeric/lcm.md</id>
      <updated>2024-12-18T22:28:05+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/lcm.md b/reference/numeric/lcm.md
index cdea96876..fbab46a02 100644
--- a/reference/numeric/lcm.md
+++ b/reference/numeric/lcm.md
@@ -178,19 +178,24 @@ constexpr std::common_type_t&amp;lt;M, N&amp;gt; gcd(M m, N n) {
   if (m == 0 &amp;amp;&amp;amp; n == 0) {
     return 0;
   }
-  while (m != 0 &amp;amp;&amp;amp; n != 0) {
-    if (m &amp;gt; n) {
-      m %= n;
+
+  auto mm = abs(m);
+  auto nn = abs(n);
+  while (mm != 0 &amp;amp;&amp;amp; nn != 0) {
+    if (mm &amp;gt; nn) {
+      mm %= nn;
     }
     else {
-      n %= m;
+      nn %= mm;
     }
   }
-  return m &amp;lt; n ? n : m;
+  return mm &amp;lt; nn ? nn : mm;
 }
 
 template &amp;lt;class M, class N&amp;gt;
 constexpr std::common_type_t&amp;lt;M, N&amp;gt; lcm(M m, N n) {
-  return m / gcd(m, n) * n;
+  return abs(m) / gcd(m, n) * abs(n);
 }
-```
\ No newline at end of file
+```
+* abs[link /reference/cstdlib/abs.md]
+
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>gcd -- added a sample implementation for gcd and lcm function</title>
      <link href="https://cpprefjp.github.io/reference/numeric/gcd.html"/>
      <id>5b5cd374f837f54793bc5f633d6926211370a230:reference/numeric/gcd.md</id>
      <updated>2024-12-18T16:39:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/gcd.md b/reference/numeric/gcd.md
index 1e2049b6d..5bf7c51aa 100644
--- a/reference/numeric/gcd.md
+++ b/reference/numeric/gcd.md
@@ -129,6 +129,7 @@ int main() {
 ```
 ```
 
+
 ## バージョン
 ### 言語
 - C++17
@@ -167,3 +168,22 @@ $$ \mathrm{gcd}(m, n) = \begin{cases}
   |m| &amp;amp; \text{if } n = 0 \\
   \mathrm{gcd}(n, m \bmod n) &amp;amp; \text{otherwise}
 \end{cases} $$
+
+
+```cpp
+template &amp;lt;class M, class N&amp;gt;
+constexpr std::common_type_t&amp;lt;M, N&amp;gt; gcd(M m, N n) {
+  if (m == 0 &amp;amp;&amp;amp; n == 0) {
+    return 0;
+  }
+  while (m != 0 &amp;amp;&amp;amp; n != 0) {
+    if (m &amp;gt; n) {
+      m %= n;
+    }
+    else {
+      n %= m;
+    }
+  }
+  return m &amp;lt; n ? n : m;
+}
+```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lcm -- added a sample implementation for gcd and lcm function</title>
      <link href="https://cpprefjp.github.io/reference/numeric/lcm.html"/>
      <id>5b5cd374f837f54793bc5f633d6926211370a230:reference/numeric/lcm.md</id>
      <updated>2024-12-18T16:39:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numeric/lcm.md b/reference/numeric/lcm.md
index fb9a9f5c1..cdea96876 100644
--- a/reference/numeric/lcm.md
+++ b/reference/numeric/lcm.md
@@ -171,3 +171,26 @@ int main() {
 
 ## 実装例
 $$ \mathrm{lcm}(m, n) = \frac{|mn|}{\mathrm{gcd}(m, n)} $$
+
+```cpp
+template &amp;lt;class M, class N&amp;gt;
+constexpr std::common_type_t&amp;lt;M, N&amp;gt; gcd(M m, N n) {
+  if (m == 0 &amp;amp;&amp;amp; n == 0) {
+    return 0;
+  }
+  while (m != 0 &amp;amp;&amp;amp; n != 0) {
+    if (m &amp;gt; n) {
+      m %= n;
+    }
+    else {
+      n %= m;
+    }
+  }
+  return m &amp;lt; n ? n : m;
+}
+
+template &amp;lt;class M, class N&amp;gt;
+constexpr std::common_type_t&amp;lt;M, N&amp;gt; lcm(M m, N n) {
+  return m / gcd(m, n) * n;
+}
+```
\ No newline at end of file
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_istringstream -- Merge pull request #1370 from rotarymars/master</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream.html"/>
      <id>f702e61c13ad056112757ce7c82e6a7e4614e189:reference/sstream/basic_istringstream.md</id>
      <updated>2024-12-18T14:16:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream.md b/reference/sstream/basic_istringstream.md
index 82c8acc69..4b8565091 100644
--- a/reference/sstream/basic_istringstream.md
+++ b/reference/sstream/basic_istringstream.md
@@ -53,11 +53,24 @@ namespace std {
 | `allocator_type` | テンプレート仮引数`Allocator` | |
 
 ## 例
-```cpp
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+int main() {
+  std::string text = &amp;#34;ABCDEFG&amp;#34;;
+  std::istringstream stream(text);
+  char c;
+  while (stream &amp;gt;&amp;gt; c) {
+    std::cout&amp;lt;&amp;lt;c&amp;lt;&amp;lt;&amp;#39; &amp;#39;;
+  }
+  std::cout&amp;lt;&amp;lt;std::endl;
+}
 ```
-
+* std::istringstream[color ff0000]
 ### 出力
 ```
+A B C D E F G 
+
 ```
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_istringstream -- new sample code for istringstream</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_istringstream.html"/>
      <id>dbd4b9d90511bfe6df1bf0cdda1798338fc044d1:reference/sstream/basic_istringstream.md</id>
      <updated>2024-12-18T13:33:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_istringstream.md b/reference/sstream/basic_istringstream.md
index 82c8acc69..4b8565091 100644
--- a/reference/sstream/basic_istringstream.md
+++ b/reference/sstream/basic_istringstream.md
@@ -53,11 +53,24 @@ namespace std {
 | `allocator_type` | テンプレート仮引数`Allocator` | |
 
 ## 例
-```cpp
+```cpp example
+#include &amp;lt;iostream&amp;gt;
+#include &amp;lt;sstream&amp;gt;
+int main() {
+  std::string text = &amp;#34;ABCDEFG&amp;#34;;
+  std::istringstream stream(text);
+  char c;
+  while (stream &amp;gt;&amp;gt; c) {
+    std::cout&amp;lt;&amp;lt;c&amp;lt;&amp;lt;&amp;#39; &amp;#39;;
+  }
+  std::cout&amp;lt;&amp;lt;std::endl;
+}
 ```
-
+* std::istringstream[color ff0000]
 ### 出力
 ```
+A B C D E F G 
+
 ```
 
 ## 参照
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>rotarymars</name>
        <email>s.goto2050@gmail.com</email>
      </author>
    </entry>
  
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-06-29T14:44:21.156545</updated>
  <id>d80575ca-886b-4fec-8e0f-72475adb7ec3</id>

  
    <entry>
      <title>推論補助 -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/functional/function/op_deduction_guide.html"/>
      <id>01869e00d13a88d59d7ad18b8890ef091d062420:reference/functional/function/op_deduction_guide.md</id>
      <updated>2025-06-29T16:04:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/function/op_deduction_guide.md b/reference/functional/function/op_deduction_guide.md
index fbda0db09..43f3d4e3a 100644
--- a/reference/functional/function/op_deduction_guide.md
+++ b/reference/functional/function/op_deduction_guide.md
@@ -78,7 +78,7 @@ int main()
 
 ## バージョン
 ### 言語
-- C++20
+- C++17
 
 ### 処理系
 - [Clang](/implementation.md#clang):
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;&gt; -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/random/philox_engine/op_istream.html"/>
      <id>01869e00d13a88d59d7ad18b8890ef091d062420:reference/random/philox_engine/op_istream.md</id>
      <updated>2025-06-29T16:04:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/random/philox_engine/op_istream.md b/reference/random/philox_engine/op_istream.md
index 23384edd0..dae394135 100644
--- a/reference/random/philox_engine/op_istream.md
+++ b/reference/random/philox_engine/op_istream.md
@@ -66,10 +66,6 @@ int main()
 ### 出力
 (未検証)
 
-## バージョン
-### 言語
-- C++11
-
 ## バージョン
 ### 言語
 - C++26
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/ranges/empty_view/end.html"/>
      <id>01869e00d13a88d59d7ad18b8890ef091d062420:reference/ranges/empty_view/end.md</id>
      <updated>2025-06-29T16:04:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/empty_view/end.md b/reference/ranges/empty_view/end.md
index 6ac4b4399..65af00f3b 100644
--- a/reference/ranges/empty_view/end.md
+++ b/reference/ranges/empty_view/end.md
@@ -3,7 +3,7 @@
 * std::ranges[meta namespace]
 * empty_view[meta class]
 * function[meta id-type]
-* cpp23[meta cpp]
+* cpp20[meta cpp]
 
 ```cpp
 static constexpr T* end() noexcept; // (1) C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/ranges/repeat_view/op_deduction_guide.html"/>
      <id>01869e00d13a88d59d7ad18b8890ef091d062420:reference/ranges/repeat_view/op_deduction_guide.md</id>
      <updated>2025-06-29T16:04:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/repeat_view/op_deduction_guide.md b/reference/ranges/repeat_view/op_deduction_guide.md
index 87c87c7cc..5a5bdc18e 100644
--- a/reference/ranges/repeat_view/op_deduction_guide.md
+++ b/reference/ranges/repeat_view/op_deduction_guide.md
@@ -2,7 +2,7 @@
 * ranges[meta header]
 * std::ranges[meta namespace]
 * function[meta id-type]
-* cpp20[meta cpp]
+* cpp23[meta cpp]
 
 ```cpp
 namespace std::ranges {
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>contains -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/string_view/basic_string_view/contains.html"/>
      <id>01869e00d13a88d59d7ad18b8890ef091d062420:reference/string_view/basic_string_view/contains.md</id>
      <updated>2025-06-29T16:04:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string_view/basic_string_view/contains.md b/reference/string_view/basic_string_view/contains.md
index 1cad2cabd..d0e2d4f78 100644
--- a/reference/string_view/basic_string_view/contains.md
+++ b/reference/string_view/basic_string_view/contains.md
@@ -66,7 +66,7 @@ int main() {
 
 ## バージョン
 ### 言語
-- C++20
+- C++23
 
 ### 処理系
 - [Clang](/implementation.md#clang): 12.0 [mark verified]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>FLT_ROUNDS -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/cfloat/flt_rounds.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/cfloat/flt_rounds.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cfloat/flt_rounds.md b/reference/cfloat/flt_rounds.md
index 7aa09e019..d125fcd94 100644
--- a/reference/cfloat/flt_rounds.md
+++ b/reference/cfloat/flt_rounds.md
@@ -41,7 +41,7 @@ int main()
 }
 ```
 * FLT_ROUNDS[color ff0000]
-* std::fesetround[link ../cfenv.md]
+* std::fesetround[link ../cfenv/fesetround.md]
 * FE_TOWARDZERO[link ../cfenv/fe_towardzero.md]
 
 ### 出力例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>run-loop-opstate -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/execution/execution/run_loop/run-loop-opstate.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/execution/execution/run_loop/run-loop-opstate.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/execution/execution/run_loop/run-loop-opstate.md b/reference/execution/execution/run_loop/run-loop-opstate.md
index fb631d051..a629dda3b 100644
--- a/reference/execution/execution/run_loop/run-loop-opstate.md
+++ b/reference/execution/execution/run_loop/run-loop-opstate.md
@@ -54,7 +54,7 @@ struct run-loop-opstate-base {  // exposition only
     }
     ```
     * push-back[link run.md]
-    * set_error[link ../set_value.md]
+    * set_error[link ../set_error.md]
     * addressof[link /reference/memory/addressof.md]
     * std::move[link /reference/utility/move.md]
     * current_exception()[link /reference/exception/current_exception.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>file_time_type -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/filesystem/file_time_type.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/filesystem/file_time_type.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/filesystem/file_time_type.md b/reference/filesystem/file_time_type.md
index 377840dbc..f542e9de8 100644
--- a/reference/filesystem/file_time_type.md
+++ b/reference/filesystem/file_time_type.md
@@ -108,8 +108,8 @@ int main()
   fs::last_write_time(&amp;#34;regular.txt&amp;#34;, fs::file_time_type::clock::now());
 }
 ```
-* fs::last_write_time[color ff0000]
-* fs::file_time_type[link file_time_type.md]
+* fs::file_time_type[color ff0000]
+* fs::last_write_time[link last_write_time.md]
 * fs::create_directory[link create_directory.md]
 * chrono::sys_time[link /reference/chrono/sys_time.md]
 * chrono::file_clock[link /reference/chrono/file_clock.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/format/vformat.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat.md b/reference/format/vformat.md
index 54a2f69bc..27c099b76 100644
--- a/reference/format/vformat.md
+++ b/reference/format/vformat.md
@@ -78,7 +78,7 @@ string vformat(const locale&amp;amp; loc, wstring_view fmt, wformat_args args) {
 * format_args[link /reference/format/basic_format_args.md]
 * wformat_args[link /reference/format/basic_format_args.md]
 * locale[link /reference/locale/locale.md]
-* vformat_to[link vformat.md]
+* vformat_to[link vformat_to.md]
 * back_inserter[link /reference/iterator/back_inserter.md]
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>set_value -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/future/promise/set_value.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/future/promise/set_value.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/promise/set_value.md b/reference/future/promise/set_value.md
index e46e9d720..9ce46eba6 100644
--- a/reference/future/promise/set_value.md
+++ b/reference/future/promise/set_value.md
@@ -198,6 +198,7 @@ int main()
   std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
 }
 ```
+* set_value[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/future/shared_future/get.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/future/shared_future/get.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/future/shared_future/get.md b/reference/future/shared_future/get.md
index 15b1bec70..5f3304722 100644
--- a/reference/future/shared_future/get.md
+++ b/reference/future/shared_future/get.md
@@ -150,7 +150,8 @@ int main()
   x.join();
 }
 ```
-* set_value[color ff0000]
+* get()[color ff0000]
+* p.set_value()[link /reference/future/promise/set_value.md]
 
 ### 出力例
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>inv_sqrt3 -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/numbers/inv_sqrt3.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/numbers/inv_sqrt3.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/inv_sqrt3.md b/reference/numbers/inv_sqrt3.md
index f60f846ed..e6812d42d 100644
--- a/reference/numbers/inv_sqrt3.md
+++ b/reference/numbers/inv_sqrt3.md
@@ -74,7 +74,7 @@ int main()
 ```
 * std::numbers::inv_sqrt3[color ff0000]
 * std::numbers::inv_sqrt3_v[color ff0000]
-* std::sqrt[link /reference/cmath/log.md]
+* std::sqrt[link /reference/cmath/sqrt.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt2 -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/numbers/sqrt2.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/numbers/sqrt2.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/sqrt2.md b/reference/numbers/sqrt2.md
index 32b44749f..e3eaaf80d 100644
--- a/reference/numbers/sqrt2.md
+++ b/reference/numbers/sqrt2.md
@@ -50,7 +50,7 @@ int main()
 ```
 * std::numbers::sqrt2[color ff0000]
 * std::numbers::sqrt2_v[color ff0000]
-* std::sqrt[link /reference/cmath/log.md]
+* std::sqrt[link /reference/cmath/sqrt.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sqrt3 -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/numbers/sqrt3.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/numbers/sqrt3.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/numbers/sqrt3.md b/reference/numbers/sqrt3.md
index 36046a152..28fa567b1 100644
--- a/reference/numbers/sqrt3.md
+++ b/reference/numbers/sqrt3.md
@@ -50,7 +50,7 @@ int main()
 ```
 * std::numbers::sqrt3[color ff0000]
 * std::numbers::sqrt3_v[color ff0000]
-* std::sqrt[link /reference/cmath/log.md]
+* std::sqrt[link /reference/cmath/sqrt.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/ranges/as_rvalue_view/end.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/ranges/as_rvalue_view/end.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/as_rvalue_view/end.md b/reference/ranges/as_rvalue_view/end.md
index 272f11f15..3e01d7821 100644
--- a/reference/ranges/as_rvalue_view/end.md
+++ b/reference/ranges/as_rvalue_view/end.md
@@ -51,8 +51,8 @@ int main() {
   }
 }
 ```
-* begin[color ff0000]
-* end()[link end.md]
+* end[color ff0000]
+* begin()[link begin.md]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>default_error_condition -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_code/default_error_condition.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/system_error/error_code/default_error_condition.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_code/default_error_condition.md b/reference/system_error/error_code/default_error_condition.md
index 8764b48b3..5e15eed4e 100644
--- a/reference/system_error/error_code/default_error_condition.md
+++ b/reference/system_error/error_code/default_error_condition.md
@@ -61,7 +61,7 @@ int main()
 * std::error_condition[link /reference/system_error/error_condition.md]
 * ec.value()[link value.md]
 * ec.category()[link category.md]
-* ec.message()[link category.md]
+* ec.message()[link message.md]
 * name()[link /reference/system_error/error_category/name.md]
 * ed.value()[link /reference/system_error/error_condition/value.md]
 * ed.category()[link /reference/system_error/error_condition/category.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/system_error/error_condition/assign.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/system_error/error_condition/assign.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/system_error/error_condition/assign.md b/reference/system_error/error_condition/assign.md
index ff61f4689..e1a42c7ec 100644
--- a/reference/system_error/error_condition/assign.md
+++ b/reference/system_error/error_condition/assign.md
@@ -8,7 +8,7 @@
 ```cpp
 void assign(int val, const error_category&amp;amp; cat) noexcept;
 ```
-* error_category[link assign.md]
+* error_category[link /reference/system_error/error_category.md]
 
 ## 概要
 エラー値とエラーカテゴリを再設定する。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>disjunction -- fix some links in code</title>
      <link href="https://cpprefjp.github.io/reference/type_traits/disjunction.html"/>
      <id>4e12116e6e998dc265c7ff0859108707c066ae18:reference/type_traits/disjunction.md</id>
      <updated>2025-06-29T15:56:54+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/type_traits/disjunction.md b/reference/type_traits/disjunction.md
index 23df2ea75..39ed7d45d 100644
--- a/reference/type_traits/disjunction.md
+++ b/reference/type_traits/disjunction.md
@@ -70,7 +70,7 @@ int main()
 ```
 * std::disjunction[color ff0000]
 * std::is_pointer[link is_pointer.md]
-* std::is_member_object_pointer[link is_move_assignable.md]
+* std::is_member_object_pointer[link is_member_object_pointer.md]
 * std::is_member_function_pointer[link is_member_function_pointer.md]
 * std::enable_if_t[link enable_if.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fill -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/fill.html"/>
      <id>73ba33097aa97477d9613aaafcb09d19ac338ddb:reference/algorithm/fill.md</id>
      <updated>2025-06-28T11:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/fill.md b/reference/algorithm/fill.md
index 4828c5f28..80b66018c 100644
--- a/reference/algorithm/fill.md
+++ b/reference/algorithm/fill.md
@@ -22,7 +22,7 @@ namespace std {
   constexpr void
     fill(ForwardIterator first,
          ForwardIterator last,
-         const T&amp;amp; value);        // (1) C++20
+         const T&amp;amp; value);        // (1) C++26
 
   template &amp;lt;class ExecutionPolicy,
             class ForwardIterator,
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>lower_bound -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/lower_bound.html"/>
      <id>73ba33097aa97477d9613aaafcb09d19ac338ddb:reference/algorithm/lower_bound.md</id>
      <updated>2025-06-28T11:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/lower_bound.md b/reference/algorithm/lower_bound.md
index 64d79a241..7b3b2e2f0 100644
--- a/reference/algorithm/lower_bound.md
+++ b/reference/algorithm/lower_bound.md
@@ -22,7 +22,7 @@ namespace std {
   constexpr ForwardIterator
     lower_bound(ForwardIterator first,
                 ForwardIterator last,
-                const T&amp;amp; value);       // (1) C++20
+                const T&amp;amp; value);       // (1) C++26
 
   template &amp;lt;class ForwardIterator,
             class T,
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>fold_right -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_fold_right.html"/>
      <id>73ba33097aa97477d9613aaafcb09d19ac338ddb:reference/algorithm/ranges_fold_right.md</id>
      <updated>2025-06-28T11:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_fold_right.md b/reference/algorithm/ranges_fold_right.md
index 89531d1fd..cacc81b10 100644
--- a/reference/algorithm/ranges_fold_right.md
+++ b/reference/algorithm/ranges_fold_right.md
@@ -23,7 +23,7 @@ namespace std::ranges {
     fold_right(I first,
                S last,
                T init,
-               F f);    // (1) C++23
+               F f);    // (1) C++26
 
   template &amp;lt;bidirectional_range R,
             class T,
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_compare_exchange_strong_explicit -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_compare_exchange_strong_explicit.html"/>
      <id>73ba33097aa97477d9613aaafcb09d19ac338ddb:reference/atomic/atomic_compare_exchange_strong_explicit.md</id>
      <updated>2025-06-28T11:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_compare_exchange_strong_explicit.md b/reference/atomic/atomic_compare_exchange_strong_explicit.md
index cd22b992a..d5938a56c 100644
--- a/reference/atomic/atomic_compare_exchange_strong_explicit.md
+++ b/reference/atomic/atomic_compare_exchange_strong_explicit.md
@@ -46,7 +46,7 @@ namespace std {
          typename atomic&amp;lt;T&amp;gt;::value_type* expected,
          typename atomic&amp;lt;T&amp;gt;::value_type desired,
          memory_order success,
-         memory_order failure) noexcept;        // (2) C++17
+         memory_order failure) noexcept;        // (2) C++26
 }
 ```
 * atomic[link atomic.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_fetch_add -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_fetch_add.html"/>
      <id>73ba33097aa97477d9613aaafcb09d19ac338ddb:reference/atomic/atomic_fetch_add.md</id>
      <updated>2025-06-28T11:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_fetch_add.md b/reference/atomic/atomic_fetch_add.md
index 87b5a3547..9532a2e46 100644
--- a/reference/atomic/atomic_fetch_add.md
+++ b/reference/atomic/atomic_fetch_add.md
@@ -31,7 +31,7 @@ namespace std {
   constexpr T
     atomic_fetch_add(
       atomic&amp;lt;T&amp;gt;* object,
-      typename atomic&amp;lt;T&amp;gt;::difference_type operand) noexcept; // (2) C++17
+      typename atomic&amp;lt;T&amp;gt;::difference_type operand) noexcept; // (2) C++26
 }
 ```
 * atomic[link /reference/atomic/atomic.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>atomic_flag_clear -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_flag_clear.html"/>
      <id>73ba33097aa97477d9613aaafcb09d19ac338ddb:reference/atomic/atomic_flag_clear.md</id>
      <updated>2025-06-28T11:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_flag_clear.md b/reference/atomic/atomic_flag_clear.md
index bede0b52a..fcd70f9a5 100644
--- a/reference/atomic/atomic_flag_clear.md
+++ b/reference/atomic/atomic_flag_clear.md
@@ -10,7 +10,7 @@ namespace std {
     atomic_flag_clear(volatile atomic_flag* object) noexcept; // (1) C++11
 
   void
-    atomic_flag_clear(atomic_flag* object) noexcept;          // (2) C++26
+    atomic_flag_clear(atomic_flag* object) noexcept;          // (2) C++11
   constexpr void
     atomic_flag_clear(atomic_flag* object) noexcept;          // (2) C++26
 }
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>notify_all -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/atomic/atomic_ref/notify_all.html"/>
      <id>73ba33097aa97477d9613aaafcb09d19ac338ddb:reference/atomic/atomic_ref/notify_all.md</id>
      <updated>2025-06-28T11:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/atomic_ref/notify_all.md b/reference/atomic/atomic_ref/notify_all.md
index 64feab641..a931b8960 100644
--- a/reference/atomic/atomic_ref/notify_all.md
+++ b/reference/atomic/atomic_ref/notify_all.md
@@ -7,7 +7,7 @@
 
 ```cpp
 void notify_all() const noexcept; // (1) C++20
-constexpr void notify_all() const noexcept; // (1) C++20
+constexpr void notify_all() const noexcept; // (1) C++26
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>tgamma -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/cmath/tgamma.html"/>
      <id>73ba33097aa97477d9613aaafcb09d19ac338ddb:reference/cmath/tgamma.md</id>
      <updated>2025-06-28T11:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/cmath/tgamma.md b/reference/cmath/tgamma.md
index ae4b949ec..3460acee9 100644
--- a/reference/cmath/tgamma.md
+++ b/reference/cmath/tgamma.md
@@ -19,7 +19,7 @@ namespace std {
   double
     tgamma(Integral x);               // (5) C++11
   constexpr double
-    tgamma(Integral x);               // (5) C++11
+    tgamma(Integral x);               // (5) C++26
 
   float
     tgammaf(float x);                 // (6) C++17
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/sstream/basic_stringstream/op_constructor.html"/>
      <id>73ba33097aa97477d9613aaafcb09d19ac338ddb:reference/sstream/basic_stringstream/op_constructor.md</id>
      <updated>2025-06-28T11:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/sstream/basic_stringstream/op_constructor.md b/reference/sstream/basic_stringstream/op_constructor.md
index 06e23a9a9..43a302aa1 100644
--- a/reference/sstream/basic_stringstream/op_constructor.md
+++ b/reference/sstream/basic_stringstream/op_constructor.md
@@ -8,63 +8,63 @@
 basic_stringstream()
   : basic_stringstream(ios_base::in | ios_base::out) {}     // (1) C++11
 explicit basic_stringstream(
-  ios_base::openmode which);                                // (1) C++11
+  ios_base::openmode which);                                // (2) C++11
 explicit basic_stringstream(
   ios_base::openmode which = ios_base::in | ios_base::out); // (1)+(2) C++03
 
 explicit basic_stringstream(
   const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
-  ios_base::openmode which = ios_base::in | ios_base::out); // (2) C++03
+  ios_base::openmode which = ios_base::in | ios_base::out); // (3) C++03
 
 explicit basic_stringstream(
   basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp;&amp;amp; s,
-  ios_base::openmode which = ios_base::in | ios_base::out);       // (3) C++20
+  ios_base::openmode which = ios_base::in | ios_base::out);       // (4) C++20
 
-basic_stringstream(ios_base::openmode which, const Allocator&amp;amp; a); // (4) C++20
+basic_stringstream(ios_base::openmode which, const Allocator&amp;amp; a); // (5) C++20
 
 explicit basic_stringstream(
   const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
   const Allocator&amp;amp; a)
-    : basic_stringstream(s, ios_base::in | ios_base::out, a) {}   // (5) C++20
+    : basic_stringstream(s, ios_base::in | ios_base::out, a) {}   // (6) C++20
 
 explicit basic_stringstream(
   const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; s,
   ios_base::openmode which,
-  const Allocator&amp;amp; a);                                            // (6) C++20
+  const Allocator&amp;amp; a);                                            // (7) C++20
 
 template&amp;lt;class SAlloc&amp;gt;
 explicit basic_stringstream(
   const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
-  ios_base::openmode which = ios_base::in | ios_base::out);       // (7) C++20
+  ios_base::openmode which = ios_base::in | ios_base::out);       // (8) C++20
 
 template&amp;lt;class SAlloc&amp;gt;
 basic_stringstream(
   const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
   const Allocator&amp;amp; a)
-    : basic_stringstream(s, ios_base::in | ios_base::out, a) {}   // (8) C++20
+    : basic_stringstream(s, ios_base::in | ios_base::out, a) {}   // (9) C++20
 
 template&amp;lt;class SAlloc&amp;gt;
 basic_stringstream(
   const basic_string&amp;lt;CharT, Traits, SAlloc&amp;gt;&amp;amp; s,
   ios_base::openmode which,
-  const Allocator&amp;amp; a);                                            // (9) C++20
+  const Allocator&amp;amp; a);                                            // (10) C++20
 
-basic_stringstream(basic_stringstream&amp;amp;&amp;amp; rhs);                     // (10) C++11
+basic_stringstream(basic_stringstream&amp;amp;&amp;amp; rhs);                     // (11) C++11
 
 template&amp;lt;class T&amp;gt;
 explicit basic_stringstream(
   const T&amp;amp; t,
-  ios_base::openmode which = ios_base::in | ios_base::out);       // (11) C++26
+  ios_base::openmode which = ios_base::in | ios_base::out);       // (12) C++26
 
 template&amp;lt;class T&amp;gt;
 basic_stringstream(
   const T&amp;amp; t,
-  const Allocator&amp;amp; a);                                            // (12) C++26
+  const Allocator&amp;amp; a);                                            // (13) C++26
 
 template&amp;lt;class T&amp;gt;
 basic_stringstream(const T&amp;amp; t,
   ios_base::openmode which,
-  const Allocator&amp;amp; a);                                            // (13) C++26
+  const Allocator&amp;amp; a);                                            // (14) C++26
 ```
 * ios_base[link /reference/ios/ios_base.md]
 * basic_string[link /reference/string/basic_string.md]
@@ -77,19 +77,20 @@ basic_stringstream(const T&amp;amp; t,
 - (1) : デフォルトコンストラクタ
 - (2) : 指定されたモードで構築する
 - (3) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーを指定して構築する
-- (4) : 指定されたモードとアロケータで構築する
-- (5) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
-- (6) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
-- (7) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、モードを指定して構築する
-- (8) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
-- (9) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
-- (10) : ムーブコンストラクタ
-- (11) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、モードを指定して構築する
-- (12) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、アロケータを指定して構築する
-- (13) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列、モード、アロケータを指定して構築する
+- (4) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトの右辺値参照を指定して構築する
+- (5) : 指定されたモードとアロケータで構築する
+- (6) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (7) : 初期文字列として[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (8) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、モードを指定して構築する
+- (9) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピーと、アロケータを指定して構築する
+- (10) : 初期文字列として`Allocator`に変換可能なアロケータをもつ[`std::basic_string`](/reference/string/basic_string.md)オブジェクトのコピー、モード、アロケータを指定して構築する
+- (11) : ムーブコンストラクタ
+- (12) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、モードを指定して構築する
+- (13) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列と、アロケータを指定して構築する
+- (14) : 初期文字列として[`std::basic_string_view`](/reference/string_view/basic_string_view.md)に変換可能な文字列、モード、アロケータを指定して構築する
 
 ## テンプレートパラメータ制約
-- (11), (12), (13) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
+- (12), (13), (14) : `is_convertible_v&amp;lt;const T&amp;amp;, basic_string_view&amp;lt;CharT, Traits&amp;gt;&amp;gt;`が`true`であること
 
 ## 効果
 - (1) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(ios_base::in | ios_base::out)`で構築する
@@ -97,11 +98,11 @@ basic_stringstream(const T&amp;amp; t,
 - (3) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(s, which)`で構築する
 - (4) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(std::move(s), which)`で構築する
 - (5) : 内部の`basic_stringbuf`オブジェクトを`basic_stringbuf&amp;lt;CharT, Traits, Allocator&amp;gt;(which, a)`で構築する
-- (6), (7), (8), (9) : 各引数は対応する`basic_stringbuf`のコンストラクタに渡される
-- (10) : `rhs`から`basic_stringstream`オブジェクトをムーブ構築する
-- (11) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`に設定する
-- (12) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`ios_base::in | ios_base::out`、アロケータは`a`に設定する
-- (13) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`、アロケータは`a`に設定する
+- (6), (7), (8), (9), (10) : 各引数は対応する`basic_stringbuf`のコンストラクタに渡される
+- (11) : `rhs`から`basic_stringstream`オブジェクトをムーブ構築する
+- (12) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`に設定する
+- (13) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`ios_base::in | ios_base::out`、アロケータは`a`に設定する
+- (14) : `basic_string_view&amp;lt;CharT, Traits&amp;gt;(t)`で文字列を初期化し、モードは`which`、アロケータは`a`に設定する
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- fix some versions</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>73ba33097aa97477d9613aaafcb09d19ac338ddb:reference/string/basic_string/replace.md</id>
      <updated>2025-06-28T11:55:48+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/replace.md b/reference/string/basic_string/replace.md
index 207ae106d..6aad3304c 100644
--- a/reference/string/basic_string/replace.md
+++ b/reference/string/basic_string/replace.md
@@ -158,7 +158,7 @@ template&amp;lt;class T&amp;gt;
 constexpr basic_string&amp;amp;
   replace(size_type pos1,
           size_type n1,
-          const T&amp;amp; t);    // (12) C++17
+          const T&amp;amp; t);    // (12) C++20
 
 template&amp;lt;class T&amp;gt;
 basic_string&amp;amp;
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>suomesta</name>
        <email>shawn316michaels@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirect_binary_predicate -- iterator: C++26 P2997R1対応(#1309)</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirect_binary_predicate.html"/>
      <id>b7c5b2444e59843e212e7220504fdd552a890047:reference/iterator/indirect_binary_predicate.md</id>
      <updated>2025-06-27T16:27:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirect_binary_predicate.md b/reference/iterator/indirect_binary_predicate.md
index 1afed5536..27cf796ef 100644
--- a/reference/iterator/indirect_binary_predicate.md
+++ b/reference/iterator/indirect_binary_predicate.md
@@ -14,7 +14,16 @@ namespace std {
     predicate&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I1&amp;gt;&amp;amp;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt; &amp;amp;&amp;amp;
     predicate&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_value_t&amp;lt;I2&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
     predicate&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt; &amp;amp;&amp;amp;
-    predicate&amp;lt;F&amp;amp;, iter_common_reference_t&amp;lt;I1&amp;gt;, iter_common_reference_t&amp;lt;I2&amp;gt;&amp;gt;;
+    predicate&amp;lt;F&amp;amp;, iter_common_reference_t&amp;lt;I1&amp;gt;, iter_common_reference_t&amp;lt;I2&amp;gt;&amp;gt;;  // C++20
+
+  template&amp;lt;class F, class I1, class I2&amp;gt;
+  concept indirect_binary_predicate =
+    indirectly_readable&amp;lt;I1&amp;gt; &amp;amp;&amp;amp; indirectly_readable&amp;lt;I2&amp;gt; &amp;amp;&amp;amp;
+    copy_constructible&amp;lt;F&amp;gt; &amp;amp;&amp;amp;
+    predicate&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I1&amp;gt;&amp;amp;, iter_value_t&amp;lt;I2&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    predicate&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I1&amp;gt;&amp;amp;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    predicate&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_value_t&amp;lt;I2&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    predicate&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt;;  // C++26
 }
 ```
 * indirectly_readable[link /reference/iterator/indirectly_readable.md]
@@ -96,3 +105,5 @@ std::istream_iterator&amp;lt;int&amp;gt; and double* is not indirect_binary_predicate int(cons
 ## 参照
 
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P2997R1 Removing the common reference requirement from the indirectly invocable concepts](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2997r1.html)
+    - C++26でイテレータの共通参照要件を削除
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirect_equivalence_relation -- iterator: C++26 P2997R1対応(#1309)</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirect_equivalence_relation.html"/>
      <id>b7c5b2444e59843e212e7220504fdd552a890047:reference/iterator/indirect_equivalence_relation.md</id>
      <updated>2025-06-27T16:27:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirect_equivalence_relation.md b/reference/iterator/indirect_equivalence_relation.md
index e9d63421f..bce074869 100644
--- a/reference/iterator/indirect_equivalence_relation.md
+++ b/reference/iterator/indirect_equivalence_relation.md
@@ -14,7 +14,16 @@ namespace std {
     equivalence_relation&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I1&amp;gt;&amp;amp;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt; &amp;amp;&amp;amp;
     equivalence_relation&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_value_t&amp;lt;I2&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
     equivalence_relation&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt; &amp;amp;&amp;amp;
-    equivalence_relation&amp;lt;F&amp;amp;, iter_common_reference_t&amp;lt;I1&amp;gt;, iter_common_reference_t&amp;lt;I2&amp;gt;&amp;gt;;
+    equivalence_relation&amp;lt;F&amp;amp;, iter_common_reference_t&amp;lt;I1&amp;gt;, iter_common_reference_t&amp;lt;I2&amp;gt;&amp;gt;;  // C++20
+
+  template&amp;lt;class F, class I1, class I2 = I1&amp;gt;
+  concept indirect_equivalence_relation =
+    indirectly_readable&amp;lt;I1&amp;gt; &amp;amp;&amp;amp; indirectly_readable&amp;lt;I2&amp;gt; &amp;amp;&amp;amp;
+    copy_constructible&amp;lt;F&amp;gt; &amp;amp;&amp;amp;
+    equivalence_relation&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I1&amp;gt;&amp;amp;, iter_value_t&amp;lt;I2&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    equivalence_relation&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I1&amp;gt;&amp;amp;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    equivalence_relation&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_value_t&amp;lt;I2&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    equivalence_relation&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt;;  // C++26
 }
 ```
 * indirectly_readable[link /reference/iterator/indirectly_readable.md]
@@ -99,3 +108,5 @@ std::istream_iterator&amp;lt;int&amp;gt; is not indirect_equivalence_relation void(const int&amp;amp;,
 ## 参照
 
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P2997R1 Removing the common reference requirement from the indirectly invocable concepts](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2997r1.html)
+    - C++26でイテレータの共通参照要件を削除
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirect_strict_weak_order -- iterator: C++26 P2997R1対応(#1309)</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirect_strict_weak_order.html"/>
      <id>b7c5b2444e59843e212e7220504fdd552a890047:reference/iterator/indirect_strict_weak_order.md</id>
      <updated>2025-06-27T16:27:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirect_strict_weak_order.md b/reference/iterator/indirect_strict_weak_order.md
index 3605c4e86..8279d3ae9 100644
--- a/reference/iterator/indirect_strict_weak_order.md
+++ b/reference/iterator/indirect_strict_weak_order.md
@@ -14,7 +14,16 @@ namespace std {
     strict_weak_order&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I1&amp;gt;&amp;amp;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt; &amp;amp;&amp;amp;
     strict_weak_order&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_value_t&amp;lt;I2&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
     strict_weak_order&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt; &amp;amp;&amp;amp;
-    strict_weak_order&amp;lt;F&amp;amp;, iter_common_reference_t&amp;lt;I1&amp;gt;, iter_common_reference_t&amp;lt;I2&amp;gt;&amp;gt;;
+    strict_weak_order&amp;lt;F&amp;amp;, iter_common_reference_t&amp;lt;I1&amp;gt;, iter_common_reference_t&amp;lt;I2&amp;gt;&amp;gt;;  // C++20
+
+  template&amp;lt;class F, class I1, class I2 = I1&amp;gt;
+  concept indirect_strict_weak_order =
+    indirectly_readable&amp;lt;I1&amp;gt; &amp;amp;&amp;amp; indirectly_readable&amp;lt;I2&amp;gt; &amp;amp;&amp;amp;
+    copy_constructible&amp;lt;F&amp;gt; &amp;amp;&amp;amp;
+    strict_weak_order&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I1&amp;gt;&amp;amp;, iter_value_t&amp;lt;I2&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    strict_weak_order&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I1&amp;gt;&amp;amp;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    strict_weak_order&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_value_t&amp;lt;I2&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    strict_weak_order&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I1&amp;gt;, iter_reference_t&amp;lt;I2&amp;gt;&amp;gt;;  // C++26
 }
 ```
 * indirectly_readable[link /reference/iterator/indirectly_readable.md]
@@ -98,3 +107,5 @@ std::istream_iterator&amp;lt;int&amp;gt; is not indirect_strict_weak_order void(const int&amp;amp;, co
 ## 参照
 
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P2997R1 Removing the common reference requirement from the indirectly invocable concepts](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2997r1.html)
+    - C++26でイテレータの共通参照要件を削除
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirect_unary_predicate -- iterator: C++26 P2997R1対応(#1309)</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirect_unary_predicate.html"/>
      <id>b7c5b2444e59843e212e7220504fdd552a890047:reference/iterator/indirect_unary_predicate.md</id>
      <updated>2025-06-27T16:27:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirect_unary_predicate.md b/reference/iterator/indirect_unary_predicate.md
index 2b488b36e..ca8f1a9c1 100644
--- a/reference/iterator/indirect_unary_predicate.md
+++ b/reference/iterator/indirect_unary_predicate.md
@@ -12,7 +12,14 @@ namespace std {
     copy_constructible&amp;lt;F&amp;gt; &amp;amp;&amp;amp;
     predicate&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
     predicate&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt; &amp;amp;&amp;amp;
-    predicate&amp;lt;F&amp;amp;, iter_common_reference_t&amp;lt;I&amp;gt;&amp;gt;;
+    predicate&amp;lt;F&amp;amp;, iter_common_reference_t&amp;lt;I&amp;gt;&amp;gt;;  // C++20
+
+  template&amp;lt;class F, class I&amp;gt;
+  concept indirect_unary_predicate =
+    indirectly_readable&amp;lt;I&amp;gt; &amp;amp;&amp;amp;
+    copy_constructible&amp;lt;F&amp;gt; &amp;amp;&amp;amp;
+    predicate&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    predicate&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;;  // C++26
 }
 ```
 * indirectly_readable[link /reference/iterator/indirectly_readable.md]
@@ -96,3 +103,5 @@ std::istream_iterator&amp;lt;int&amp;gt; is not indirect_unary_predicate void(const int&amp;amp;)
 ## 参照
 
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P2997R1 Removing the common reference requirement from the indirectly invocable concepts](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2997r1.html)
+    - C++26でイテレータの共通参照要件を削除
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>indirectly_unary_invocable/indirectly_regular_unary_invocable -- iterator: C++26 P2997R1対応(#1309)</title>
      <link href="https://cpprefjp.github.io/reference/iterator/indirectly_unary_invocable.html"/>
      <id>b7c5b2444e59843e212e7220504fdd552a890047:reference/iterator/indirectly_unary_invocable.md</id>
      <updated>2025-06-27T16:27:11+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/iterator/indirectly_unary_invocable.md b/reference/iterator/indirectly_unary_invocable.md
index a7d8165ce..fd0bdc580 100644
--- a/reference/iterator/indirectly_unary_invocable.md
+++ b/reference/iterator/indirectly_unary_invocable.md
@@ -15,8 +15,18 @@ namespace std {
     invocable&amp;lt;F&amp;amp;, iter_common_reference_t&amp;lt;I&amp;gt;&amp;gt; &amp;amp;&amp;amp;
     common_reference_with&amp;lt;
       invoke_result_t&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I&amp;gt;&amp;amp;&amp;gt;,
-      invoke_result_t&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;&amp;gt;;
-  
+      invoke_result_t&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;&amp;gt;;  // C++20
+
+  template&amp;lt;class F, class I&amp;gt;
+  concept indirectly_unary_invocable =
+    indirectly_readable&amp;lt;I&amp;gt; &amp;amp;&amp;amp;
+    copy_constructible&amp;lt;F&amp;gt; &amp;amp;&amp;amp;
+    invocable&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    invocable&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    common_reference_with&amp;lt;
+      invoke_result_t&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I&amp;gt;&amp;amp;&amp;gt;,
+      invoke_result_t&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;&amp;gt;;  // C++26
+
   template&amp;lt;class F, class I&amp;gt;
   concept indirectly_regular_unary_invocable =
     indirectly_readable&amp;lt;I&amp;gt; &amp;amp;&amp;amp;
@@ -26,7 +36,17 @@ namespace std {
     regular_invocable&amp;lt;F&amp;amp;, iter_common_reference_t&amp;lt;I&amp;gt;&amp;gt; &amp;amp;&amp;amp;
     common_reference_with&amp;lt;
       invoke_result_t&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I&amp;gt;&amp;amp;&amp;gt;,
-      invoke_result_t&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;&amp;gt;;
+      invoke_result_t&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;&amp;gt;;  // C++20
+
+  template&amp;lt;class F, class I&amp;gt;
+  concept indirectly_regular_unary_invocable =
+    indirectly_readable&amp;lt;I&amp;gt; &amp;amp;&amp;amp;
+    copy_constructible&amp;lt;F&amp;gt; &amp;amp;&amp;amp;
+    regular_invocable&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I&amp;gt;&amp;amp;&amp;gt; &amp;amp;&amp;amp;
+    regular_invocable&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt; &amp;amp;&amp;amp;
+    common_reference_with&amp;lt;
+      invoke_result_t&amp;lt;F&amp;amp;, iter_value_t&amp;lt;I&amp;gt;&amp;amp;&amp;gt;,
+      invoke_result_t&amp;lt;F&amp;amp;, iter_reference_t&amp;lt;I&amp;gt;&amp;gt;&amp;gt;;  // C++26
 }
 ```
 * indirectly_readable[link /reference/iterator/indirectly_readable.md]
@@ -117,3 +137,5 @@ std::istream_iterator&amp;lt;int&amp;gt; is not indirectly_unary_invocable int(int&amp;amp;&amp;amp;)
 ## 参照
 
 - [P0896R4 The One Ranges Proposal (was Merging the Ranges TS)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf)
+- [P2997R1 Removing the common reference requirement from the indirectly invocable concepts](https://open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2997r1.html)
+    - C++26でイテレータの共通参照要件を削除
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yoh</name>
        <email>kawasaki.liamg@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>partition -- ranges::(stable_)partition : 計算量のコピペミスで実行ポリシーの計算量が記載されてしまっていた問題を修正 #1458</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_partition.html"/>
      <id>30247c1fff6c4f6389bd61012b23f209308dd11d:reference/algorithm/ranges_partition.md</id>
      <updated>2025-06-27T12:45:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_partition.md b/reference/algorithm/ranges_partition.md
index 32aa4228c..0a9b6ad02 100644
--- a/reference/algorithm/ranges_partition.md
+++ b/reference/algorithm/ranges_partition.md
@@ -58,8 +58,7 @@ namespace std::ranges {
 
 `N = last - first`として
 
-- (1) : `I` が [`bidirectional_iterator`](/reference/iterator/bidirectional_iterator.md)のモデルとなる場合、最大で `N / 2` 回 swap され、そうでない場合、最大で `N` 回 swap される。それに加えて、正確に `N` 回だけ述語が適用される
-- (2) : O(NlogN) 回の swap に加え、述語が O(N) 回適用される
+- (1), (2) : `I` が [`bidirectional_iterator`](/reference/iterator/bidirectional_iterator.md)のモデルとなる場合、最大で `N / 2` 回 swap され、そうでない場合、最大で `N` 回 swap される。それに加えて、正確に `N` 回だけ述語が適用される
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>stable_partition -- ranges::(stable_)partition : 計算量のコピペミスで実行ポリシーの計算量が記載されてしまっていた問題を修正 #1458</title>
      <link href="https://cpprefjp.github.io/reference/algorithm/ranges_stable_partition.html"/>
      <id>30247c1fff6c4f6389bd61012b23f209308dd11d:reference/algorithm/ranges_stable_partition.md</id>
      <updated>2025-06-27T12:45:39+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/algorithm/ranges_stable_partition.md b/reference/algorithm/ranges_stable_partition.md
index 5fd20f295..a15e99860 100644
--- a/reference/algorithm/ranges_stable_partition.md
+++ b/reference/algorithm/ranges_stable_partition.md
@@ -79,8 +79,7 @@ namespace std::ranges {
 ## 計算量
 `N = last - first`として説明する。
 
-- (1) : 最大でN log N回 swap が行われるが、余分なメモリを使って構わないのであれば線形回数の swap になる。それに加えて、正確にN回だけ述語が適用される
-- (2) : O(N log N) 回の swap に加え、述語が O(N) 回適用される
+- (1), (2) : 最大でN log N回 swap が行われるが、余分なメモリを使って構わないのであれば線形回数の swap になる。それに加えて、正確にN回だけ述語が適用される
 
 
 ## 例
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
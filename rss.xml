<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-03-24T03:32:37.528949</updated>
  <id>3453c689-f187-4c9e-86db-3685e9fcfd0c</id>

  
    <entry>
      <title>説明専用ライブラリ -- single_viewの実装例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/exposition-only.html"/>
      <id>22a72e172d7ab46443d6b23ece6c1d0182f33fde:reference/exposition-only.md</id>
      <updated>2022-03-24T08:38:25+09:00</updated>
      
        <content type="html">&lt;div class=&#34;header&#34;&gt;&amp;lt;exposition-only&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;説明専用ライブラリ&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;このページでは、説明専用のライブラリをまとめる。
これらはC++規格の文章中に現れる説明のためのものであり、実際に使うことはできない。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exposition-only/decay-copy.html&#34;&gt;decay-copy&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/decay.html&#34;&gt;decay&lt;/a&gt;&lt;/code&gt;した型にコピーまたはムーブする (function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exposition-only/synth-three-way.md.nolink&#34;&gt;synth-three-way&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/exposition-only/synth-three-way-result.md.nolink&#34;&gt;synth-three-way-result&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;(function template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;concepts&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/concepts/boolean-testable.html&#34;&gt;boolean-testable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;真理値型 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;with-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;型&lt;code&gt;T&lt;/code&gt;に参照を付加する (alias template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;can-reference&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;with-reference&lt;/code&gt;可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/dereferenceable.html&#34;&gt;dereferenceable&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単純な間接参照が可能 (concept)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/is_integer_like.html&#34;&gt;is-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号付整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/iterator/is_integer_like.html&#34;&gt;is-signed-integer-like&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号なし整数型と同等の型か否かを表す (variable template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;&amp;lt;ranges&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/ranges/copyable_box.html&#34;&gt;copyable-box&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コピー可能、または例外なしでムーブ可能な場合のみ値を保持する型 (class template)&lt;/td&gt;
&lt;td&gt;C++20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://timsong-cpp.github.io/cppwp/n4861/expos.only.func&#34; target=&#34;_blank&#34;&gt;N4861 16.4.2.1 Exposition-only functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copyable-box -- single_viewの実装例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/copyable_box.html"/>
      <id>22a72e172d7ab46443d6b23ece6c1d0182f33fde:reference/ranges/copyable_box.md</id>
      <updated>2022-03-24T08:38:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/copyable_box.md b/reference/ranges/copyable_box.md
new file mode 100644
index 000000000..e87eee94a
--- /dev/null
+++ b/reference/ranges/copyable_box.md
@@ -0,0 +1,66 @@
+# copyable-box
+* ranges[meta header]
+* class template[meta id-type]
+* cpp20[meta cpp]
+
+## 概要
+
+`copyable-box` は、規格の文中に現れる説明専用のクラスである。
+
+`copyable-box&amp;lt;T&amp;gt;` は、[`std::optional`](/reference/optional/optional.md)`&amp;lt;T&amp;gt;`とほとんど同じであるものの、
+`T` が `copyable`のモデルであるか、`is_nothrow_move_constructible_v&amp;lt;T&amp;gt; &amp;amp;&amp;amp; is_nothrow_copy_constructible_v&amp;lt;T&amp;gt;`を満たす場合のみ値を保持する。
+
+具体的には以下の差分がある。
+
+### 差分1
+テンプレートパラメーター制約 `copy_constructible&amp;lt;T&amp;gt; &amp;amp;&amp;amp; is_object_v&amp;lt;T&amp;gt;` をもつ。
+
+### 差分2
+`T`が[`copyable`](/reference/concepts/copyable.md)のモデルでない場合、コピー代入演算子は以下のように定義される。
+
+```cpp
+constexpr copyable-box&amp;amp; operator=(const copyable-box&amp;amp; that) noexcept(is_nothrow_copy_constructible_v&amp;lt;T&amp;gt;) {
+  if (this != addressof(that)) {
+    if (that) emplace(*that);
+    else reset();
+  }
+  return *this;
+}
+```
+* copyable-box[italic]
+* is_nothrow_copy_constructible_v[link /reference/type_traits/is_nothrow_copy_constructible.md]
+* addressof[link /reference/memory/addressof.md]
+* emplace[link /reference/optional/optional/emplace.md]
+* reset[link /reference/optional/optional/reset.md]
+
+### 差分3
+`T`が[`copyable`](/reference/optional/copyable.md)のモデルでない場合、ムーブ代入演算子は以下のように定義される。
+
+```cpp
+constexpr copyable-box&amp;amp; operator=(copyable-box&amp;amp;&amp;amp; that) noexcept(is_nothrow_move_constructible_v&amp;lt;T&amp;gt;) {
+  if (this != addressof(that)) {
+    if (that) emplace(std::move(*that));
+    else reset();
+  }
+  return *this;
+}
+```
+* copyable-box[italic]
+* is_nothrow_copy_constructible_v[link /reference/type_traits/is_nothrow_copy_constructible.md]
+* addressof[link /reference/memory/addressof.md]
+* emplace[link /reference/optional/optional/emplace.md]
+* reset[link /reference/optional/optional/reset.md]
+
+## バージョン
+### 言語
+- C++20
+
+### 処理系
+- [Clang](/implementation.md#clang): 13.0.0
+- [GCC](/implementation.md#gcc): 10.1.0
+- [ICC](/implementation.md#icc): ?
+- [Visual C++](/implementation.md#visual_cpp): 2019 Update 10
+
+## 参照
+- [N4861 24 Ranges library](https://timsong-cpp.github.io/cppwp/n4861/ranges)
+- [C++20 ranges](https://techbookfest.org/product/5134506308665344)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>single_view -- single_viewの実装例を追加 #713</title>
      <link href="https://cpprefjp.github.io/reference/ranges/single_view.html"/>
      <id>22a72e172d7ab46443d6b23ece6c1d0182f33fde:reference/ranges/single_view.md</id>
      <updated>2022-03-24T08:38:25+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/single_view.md b/reference/ranges/single_view.md
index b1a36f631..ea366e68c 100644
--- a/reference/ranges/single_view.md
+++ b/reference/ranges/single_view.md
@@ -80,6 +80,60 @@ int main() {
 1
 ```
 
+## 実装例
+```cpp
+namespace std::ranges {
+  template&amp;lt;copy_constructible T&amp;gt;
+    requires is_object_v&amp;lt;T&amp;gt;
+  class single_view : public view_interface&amp;lt;single_view&amp;lt;T&amp;gt;&amp;gt; {
+  private:
+    copyable-box&amp;lt;T&amp;gt; value_;
+
+  public:
+    single_view() requires default_initializable&amp;lt;T&amp;gt; = default;
+    constexpr explicit single_view(const T&amp;amp; t): value_(t) {
+    }
+    constexpr explicit single_view(T&amp;amp;&amp;amp; t): value_(t) {
+    }
+    template&amp;lt;class... Args&amp;gt;
+      requires constructible_from&amp;lt;T, Args...&amp;gt;
+    constexpr explicit single_view(in_place_t, Args&amp;amp;&amp;amp;... args): value_{in_place, forward&amp;lt;Args&amp;gt;(args)...} {
+    }
+
+    constexpr T* begin() noexcept {
+      return data();
+    }
+    constexpr const T* begin() const noexcept {
+      return data();
+    }
+    constexpr T* end() noexcept {
+      return data() + 1;
+    }
+    constexpr const T* end() const noexcept {
+      return data() + 1;
+    }
+    static constexpr size_t size() noexcept {
+      return 1;
+    }
+    constexpr T* data() noexcept {
+      return value_.operator-&amp;gt;();
+    }
+    constexpr const T* data() const noexcept {
+      return value_.operator-&amp;gt;();
+    }
+  };
+
+  template&amp;lt;class T&amp;gt;
+    single_view(T) -&amp;gt; single_view&amp;lt;T&amp;gt;;
+}
+```
+* copy_constructible[link /reference/concepts/copy_constructible.md]
+* default_initializable[link /reference/concepts/default_initializable.md]
+* constructible_from[link /reference/concepts/constructible_from.md]
+* is_object_v[link /reference/type_traits/is_object.md]
+* view_interface[link view_interface.md]
+* copyable-box[link copyable_box.md]
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- 例を修正</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/op_deduction_guide.html"/>
      <id>92f9c1fc4cbb9d6f868b1bb436338b7966ee22e1:reference/ranges/subrange/op_deduction_guide.md</id>
      <updated>2022-03-24T07:58:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/op_deduction_guide.md b/reference/ranges/subrange/op_deduction_guide.md
index bf9feee40..3de916059 100644
--- a/reference/ranges/subrange/op_deduction_guide.md
+++ b/reference/ranges/subrange/op_deduction_guide.md
@@ -46,15 +46,16 @@ namespace std::ranges {
 
 ## 例
 ```cpp example
-#include &amp;lt;utility&amp;gt;
-#include &amp;lt;type_traits&amp;gt;
+#include &amp;lt;ranges&amp;gt;
+#include &amp;lt;concepts&amp;gt;
 
 int main()
 {
-  std::pair p {3, &amp;#34;Hello&amp;#34;};
-  static_assert(std::is_same_v&amp;lt;
-    decltype(p),
-    std::pair&amp;lt;int, const char*&amp;gt;
+  int a[] = {1, 2, 3};
+  std::ranges::subrange sub = a;
+  static_assert(std::same_as&amp;lt;
+    decltype(sub),
+    std::ranges::subrange&amp;lt;int*, int*, std::ranges::subrange_kind::sized&amp;gt;
   &amp;gt;);
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>推論補助 -- リンク追加</title>
      <link href="https://cpprefjp.github.io/reference/ranges/subrange/op_deduction_guide.html"/>
      <id>3a0a0a2db0c02cb6f1206b7b085b02e2e9dde950:reference/ranges/subrange/op_deduction_guide.md</id>
      <updated>2022-03-24T07:55:20+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/subrange/op_deduction_guide.md b/reference/ranges/subrange/op_deduction_guide.md
index eaa292245..bf9feee40 100644
--- a/reference/ranges/subrange/op_deduction_guide.md
+++ b/reference/ranges/subrange/op_deduction_guide.md
@@ -26,10 +26,13 @@ namespace std::ranges {
 * subrange_kind[link /reference/ranges/subrange_kind.md]
 * input_or_output_iterator[link /reference/iterator/input_or_output_iterator.md]
 * borrowed_range[link /reference/ranges/borrowed_range.md]
+* iterator_t[link /reference/ranges/iterator_t.md]
+* sentinel_t[link /reference/ranges/sentinel_t.md]
 * sized_range[link /reference/ranges/sized_range.md]
 * convertible_to[link /reference/concepts/convertible_to.md]
 * iter_difference_t[link /reference/iterator/iter_difference_t.md]
 * sized_sentinel_for[link /reference/iterator/sized_sentinel_for.md]
+* sentinel_for[link /reference/iterator/sentinel_for.md]
 * tuple_element_t[link /reference/tuple/tuple_element.md]
 * StoreSize[italic][link op_constructor.md]
 * iterator-sentinel-pair[italic][link ../subrange.md]
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>basic_istream_view -- basic_istream_viewの定義を更新</title>
      <link href="https://cpprefjp.github.io/reference/ranges/basic_istream_view.html"/>
      <id>1f3ed2a42048d458a91a3dbf7a023605f47fbe27:reference/ranges/basic_istream_view.md</id>
      <updated>2022-03-24T07:49:51+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges/basic_istream_view.md b/reference/ranges/basic_istream_view.md
index 7b33551b1..805780d98 100644
--- a/reference/ranges/basic_istream_view.md
+++ b/reference/ranges/basic_istream_view.md
@@ -6,13 +6,23 @@
 
 ```cpp
 namespace std::ranges {
-  template&amp;lt;movable Val, class CharT, class Traits&amp;gt;
+  // (1)
+  template&amp;lt;movable Val, class CharT, class Traits = char_traits&amp;lt;CharT&amp;gt;&amp;gt;
     requires default_initializable&amp;lt;Val&amp;gt; &amp;amp;&amp;amp; stream-extractable&amp;lt;Val, CharT, Traits&amp;gt;
-  class basic_istream_view : public view_interface&amp;lt;basic_istream_view&amp;lt;Val, CharT, Traits&amp;gt;&amp;gt; { …… }; // (1)
+  class basic_istream_view : public view_interface&amp;lt;basic_istream_view&amp;lt;Val, CharT, Traits&amp;gt;&amp;gt; { …… };
+
+  // (2)
+  template&amp;lt;class Val&amp;gt;
+  using istream_view = basic_istream_view&amp;lt;Val, char&amp;gt;;
+
+  // (3)
+  template&amp;lt;class Val&amp;gt;
+  using wistream_view = basic_istream_view&amp;lt;Val, wchar_t&amp;gt;;
 
   namespace views {
-    template&amp;lt;class Val, class CharT, class Traits&amp;gt;
-    basic_istream_view&amp;lt;Val, CharT, Traits&amp;gt; istream_view(basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; s);  // (2)
+    // (4)
+    template&amp;lt;class T&amp;gt;
+    inline constexpr /*unspecified*/ istream = /*unspecified*/;
   }
 }
 ```
@@ -22,8 +32,10 @@ namespace std::ranges {
 * stream-extractable[italic]
 
 ## 概要
-- (1): 入力ストリームから値を読み取る[`view`](view.md)
-- (2): `basic_istream_view`を生成する関数テンプレート
+- (1): 入力ストリームから`Val`型の値を読み取る[`view`](view.md)
+- (2): `basic_istream_view`の、文字の型を`char`とするエイリアス
+- (2): `basic_istream_view`の、文字の型を`wchar_t`とするエイリアス
+- (4): `basic_istream_view`を生成するカスタマイゼーションポイントオブジェクト
 
 ### Rangeコンセプト
 
@@ -48,7 +60,7 @@ concept stream-extractable = requires(basic_istream&amp;lt;CharT, Traits&amp;gt;&amp;amp; is, Val&amp;amp; t)
 
 ## 効果
 
-- (2): `return basic_istream_view&amp;lt;Val, CharT, Traits&amp;gt;{s};`
+- (4): `istream&amp;lt;T&amp;gt;(e)`の効果は、`U`を`std::remove_reference_t&amp;lt;decltype(e)&amp;gt;`とするとき、`basic_istream_view&amp;lt;T, typename U::char_type, typename U::traits_type&amp;gt;(e);`と等しい。
 
 ## メンバ関数
 
@@ -68,12 +80,12 @@ int main() {
   using namespace std;
   auto iss = istringstream{&amp;#34;1 2 3 4 5&amp;#34;};
 
-  for (int i : views::istream_view&amp;lt;int&amp;gt;(iss)) {
+  for (int i : views::istream&amp;lt;int&amp;gt;(iss)) {
     cout &amp;lt;&amp;lt; i;
   }
 }
 ```
-* views::istream_view[color ff0000]
+* views::istream[color ff0000]
 
 ### 出力
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ranges -- rangesのC++23対応(ヘッダーページのみ)</title>
      <link href="https://cpprefjp.github.io/reference/ranges.html"/>
      <id>995843d1981e1a1e304989792a7610d92b12e1b5:reference/ranges.md</id>
      <updated>2022-03-24T07:36:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/ranges.md b/reference/ranges.md
index 2d4d5effc..5cdb2c27d 100644
--- a/reference/ranges.md
+++ b/reference/ranges.md
@@ -125,31 +125,33 @@ Rangeファクトリは、Rangeではないオブジェクトから[`view`](rang
 
 ### empty view
 
-| 名前                                 | 説明                                       | 対応バージョン |
-|--------------------------------------|--------------------------------------------|----------------|
-| [`empty_view`](ranges/empty_view.md) | 空のRange (class template)                 | C++20          |
+| 名前                                        | 説明                                       | 対応バージョン |
+|---------------------------------------------|--------------------------------------------|----------------|
+| [`empty_view`](ranges/empty_view.md)        | 空のRange (class template)                 | C++20          |
 | [`views::empty`](ranges/empty_view.md)      | `empty_view`を生成する (variable template) | C++20          |
 
 ### single view
 
-| 名前                                   | 説明                                                  | 対応バージョン |
-|----------------------------------------|-------------------------------------------------------|----------------|
-| [`single_view`](ranges/single_view.md) | 指定した値1つからなるRange (class template)           | C++20          |
+| 名前                                          | 説明                                                  | 対応バージョン |
+|-----------------------------------------------|-------------------------------------------------------|----------------|
+| [`single_view`](ranges/single_view.md)        | 指定した値1つからなるRange (class template)           | C++20          |
 | [`views::single`](ranges/single_view.md)      | `single_view`を生成する (customization point object)  | C++20          |
 
 ### iota view
 
-| 名前                               | 説明                                                | 対応バージョン |
-|------------------------------------|-----------------------------------------------------|----------------|
-| [`iota_view`](ranges/iota_view.md) | 単調増加列であるRange (class template)              | C++20          |
+| 名前                                      | 説明                                                | 対応バージョン |
+|-------------------------------------------|-----------------------------------------------------|----------------|
+| [`iota_view`](ranges/iota_view.md)        | 単調増加列であるRange (class template)              | C++20          |
 | [`views::iota`](ranges/iota_view.md)      | `iota_view`を生成する (customization point object)  | C++20          |
 
 ### istream view
 
-| 名前                                                 | 説明                                                | 対応バージョン |
-|------------------------------------------------------|-----------------------------------------------------|----------------|
-| [`basic_istream_view`](ranges/basic_istream_view.md) | 入力ストリームから値を読むRange (class template)    | C++20          |
-| [`views::istream_view`](ranges/basic_istream_view.md)       | `basic_istream_view`を生成する (function template)  | C++20          |
+| 名前                                                   | 説明                                                         | 対応バージョン |
+|--------------------------------------------------------|--------------------------------------------------------------|----------------|
+| [`basic_istream_view`](ranges/basic_istream_view.md)   | 入力ストリームから値を読むRange (class template)             | C++20          |
+| [`istream_view`](ranges/basic_istream_view.md)         | 入力ストリームから値を読むRange (alias template)             | C++20          |
+| [`wistream_view`](ranges/basic_istream_view.md)        | 入力ストリームから値を読むRange (alias template)             | C++20          |
+| [`views::istream`](ranges/basic_istream_view.md)       | `basic_istream_view`を生成する (customization point object)  | C++20          |
 
 ## Rangeアダプタ
 
@@ -194,101 +196,121 @@ range | adaptor(args...)
 
 ### all view
 
-| 名前                             | 説明                                                                     | 対応バージョン |
-|----------------------------------|--------------------------------------------------------------------------|----------------|
-| [`ref_view`](ranges/ref_view.md) | Rangeへの参照として振る舞うビュー (class template)                       | C++20          |
+| 名前                                    | 説明                                                                     | 対応バージョン |
+|-----------------------------------------|--------------------------------------------------------------------------|----------------|
+| [`ref_view`](ranges/ref_view.md)        | Rangeへの参照として振る舞うビュー (class template)                       | C++20          |
 | [`views::all`](ranges/ref_view.md)      | Rangeへの参照として振る舞うビューを生成する (customization point object) | C++20          |
 | [`views::all_t`](ranges/ref_view.md)    | `all`の戻り値型 (alias template)                                         | C++20          |
 
 ### filter view
 
-| 名前                                   | 説明                                                        | 対応バージョン |
-|----------------------------------------|-------------------------------------------------------------|----------------|
-| [`filter_view`](ranges/filter_view.md) | 指定した条件を満たす要素だけを集めるビュー (class template) | C++20          |
+| 名前                                          | 説明                                                        | 対応バージョン |
+|-----------------------------------------------|-------------------------------------------------------------|----------------|
+| [`filter_view`](ranges/filter_view.md)        | 指定した条件を満たす要素だけを集めるビュー (class template) | C++20          |
 | [`views::filter`](ranges/filter_view.md)      | `filter_view`を生成する (customization point object)        | C++20          |
 
 ### transform view
 
-| 名前                                         | 説明                                                     | 対応バージョン |
-|----------------------------------------------|----------------------------------------------------------|----------------|
-| [`transform_view`](ranges/transform_view.md) | 指定した関数で各要素を変換するビュー (class template)    | C++20          |
+| 名前                                                | 説明                                                     | 対応バージョン |
+|-----------------------------------------------------|----------------------------------------------------------|----------------|
+| [`transform_view`](ranges/transform_view.md)        | 指定した関数で各要素を変換するビュー (class template)    | C++20          |
 | [`views::transform`](ranges/transform_view.md)      | `transform_view`を生成する (customization point object)  | C++20          |
 
 ### take view
 
-| 名前                               | 説明                                                                          | 対応バージョン |
-|------------------------------------|-------------------------------------------------------------------------------|----------------|
-| [`take_view`](ranges/take_view.md) | 先頭から指定した個数だけ取り出すビュー (class template)                       | C++20          |
+| 名前                                      | 説明                                                                          | 対応バージョン |
+|-------------------------------------------|-------------------------------------------------------------------------------|----------------|
+| [`take_view`](ranges/take_view.md)        | 先頭から指定した個数だけ取り出すビュー (class template)                       | C++20          |
 | [`views::take`](ranges/take_view.md)      | 先頭から指定した個数だけ取り出すビューを生成する (customization point object) | C++20          |
 
 ### take while view
 
-| 名前                                           | 説明                                                              | 対応バージョン |
-|------------------------------------------------|-------------------------------------------------------------------|----------------|
-| [`take_while_view`](ranges/take_while_view.md) | 先頭から指定した条件を満たす範囲を取り出すビュー (class template) | C++20          |
+| 名前                                                  | 説明                                                              | 対応バージョン |
+|-------------------------------------------------------|-------------------------------------------------------------------|----------------|
+| [`take_while_view`](ranges/take_while_view.md)        | 先頭から指定した条件を満たす範囲を取り出すビュー (class template) | C++20          |
 | [`views::take_while`](ranges/take_while_view.md)      | `take_while_view`を生成する (customization point object)          | C++20          |
 
 ### drop view
 
-| 名前                               | 説明                                                                          | 対応バージョン |
-|------------------------------------|-------------------------------------------------------------------------------|----------------|
-| [`drop_view`](ranges/drop_view.md) | 先頭から指定した個数だけ除外するビュー (class template)                       | C++20          |
+| 名前                                      | 説明                                                                          | 対応バージョン |
+|-------------------------------------------|-------------------------------------------------------------------------------|----------------|
+| [`drop_view`](ranges/drop_view.md)        | 先頭から指定した個数だけ除外するビュー (class template)                       | C++20          |
 | [`views::drop`](ranges/drop_view.md)      | 先頭から指定した個数だけ除外するビューを生成する (customization point object) | C++20          |
 
 ### drop while view
 
-| 名前                                           | 説明                                                              | 対応バージョン |
-|------------------------------------------------|-------------------------------------------------------------------|----------------|
-| [`drop_while_view`](ranges/drop_while_view.md) | 先頭から指定した条件を満たす範囲を除外するビュー (class template) | C++20          |
+| 名前                                                  | 説明                                                              | 対応バージョン |
+|-------------------------------------------------------|-------------------------------------------------------------------|----------------|
+| [`drop_while_view`](ranges/drop_while_view.md)        | 先頭から指定した条件を満たす範囲を除外するビュー (class template) | C++20          |
 | [`views::drop_while`](ranges/drop_while_view.md)      | `drop_while_view`を生成する (customization point object)          | C++20          |
 
 ### join view
 
-| 名前                               | 説明                                                                        | 対応バージョン |
-|------------------------------------|-----------------------------------------------------------------------------|----------------|
-| [`join_view`](ranges/join_view.md) | ネストされたRangeを平坦にするビュー (class template)                        | C++20          |
-| [`views::join`](ranges/join_view.md)      | ネストされたRangeを平坦にするビューを生成する (customization point object)  | C++20          |
+| 名前                                                | 説明                                                                                              | 対応バージョン |
+|-----------------------------------------------------|---------------------------------------------------------------------------------------------------|----------------|
+| [`join_view`](ranges/join_view.md)                  | ネストされたRangeを平坦にするビュー (class template)                                              | C++20          |
+| [`views::join`](ranges/join_view.md)                | ネストされたRangeを平坦にするビューを生成する (customization point object)                        | C++20          |
+| [`join_with_view`](ranges/join_with_view.md.nolink)        | ネストされたRangeをデリミタで区切りながら平坦にするビュー (class template)                        | C++23          |
+| [`views::join_with`](ranges/join_with_view.md.nolink)      | ネストされたRangeをデリミタで区切りながら平坦にするビューを生成する (customization point object)  | C++23          |
 
 ### split view
 
-| 名前                                           | 説明                                                                     | 対応バージョン |
-|------------------------------------------------|--------------------------------------------------------------------------|----------------|
-| [`lazy_split_view`](ranges/lazy_split_view.md) | Rangeを指定したデリミタで分割するビュー (class template)     | C++20          |
+| 名前                                                  | 説明                                                         | 対応バージョン |
+|-------------------------------------------------------|--------------------------------------------------------------|----------------|
+| [`lazy_split_view`](ranges/lazy_split_view.md)        | Rangeを指定したデリミタで分割するビュー (class template)     | C++20          |
 | [`views::lazy_split`](ranges/lazy_split_view.md)      | `lazy_split_view`を生成する (customization point object)     | C++20          |
-| [`split_view`](ranges/split_view.md)           | 文字列分割に特化した`lazy_split_view` (class template)     | C++20          |
+| [`split_view`](ranges/split_view.md)                  | 文字列分割に特化した`lazy_split_view` (class template)       | C++20          |
 | [`views::split`](ranges/split_view.md)                | `split_view`を生成する (customization point object)          | C++20          |
 
 ### counted view
 
-| 名前                           | 説明                                                                                          | 対応バージョン |
-|--------------------------------|-----------------------------------------------------------------------------------------------|----------------|
+| 名前                                  | 説明                                                                                          | 対応バージョン |
+|---------------------------------------|-----------------------------------------------------------------------------------------------|----------------|
 | [`views::counted`](ranges/counted.md) | イテレータから指定した数の範囲をRangeとして扱うビューを生成する (customization point object)  | C++20          |
 
 ### common view
 
-| 名前                                   | 説明                                                          | 対応バージョン |
-|----------------------------------------|---------------------------------------------------------------|----------------|
-| [`common_view`](ranges/common_view.md) | `common_range`にしたビュー (class template)                   | C++20          |
+| 名前                                          | 説明                                                          | 対応バージョン |
+|-----------------------------------------------|---------------------------------------------------------------|----------------|
+| [`common_view`](ranges/common_view.md)        | `common_range`にしたビュー (class template)                   | C++20          |
 | [`views::common`](ranges/common_view.md)      | `common_range`なビューを生成する (customization point object) | C++20          |
 
 ### reverse view
 
-| 名前                                     | 説明                                                 | 対応バージョン |
-|------------------------------------------|------------------------------------------------------|----------------|
-| [`reverse_view`](ranges/reverse_view.md) | 逆順のビュー (class template)                        | C++20          |
+| 名前                                            | 説明                                                 | 対応バージョン |
+|-------------------------------------------------|------------------------------------------------------|----------------|
+| [`reverse_view`](ranges/reverse_view.md)        | 逆順のビュー (class template)                        | C++20          |
 | [`views::reverse`](ranges/reverse_view.md)      | 逆順のビューを生成する (customization point object)  | C++20          |
 
 ### elements view
 
-| 名前                                       | 説明                                                  | 対応バージョン |
-|--------------------------------------------|-------------------------------------------------------|----------------|
-| [`elements_view`](ranges/elements_view.md) | 第n要素を集めたビュー (class template)                 | C++20          |
-| [`keys_view`](ranges/elements_view.md)     | 第0要素を集めたビュー (alias template)                 | C++20          |
-| [`values_view`](ranges/elements_view.md)   | 第1要素を集めたビュー (alias template)                 | C++20          |
+| 名前                                              | 説明                                                   | 対応バージョン |
+|---------------------------------------------------|--------------------------------------------------------|----------------|
+| [`elements_view`](ranges/elements_view.md)        | 第n要素を集めたビュー (class template)                 | C++20          |
+| [`keys_view`](ranges/elements_view.md)            | 第0要素を集めたビュー (alias template)                 | C++20          |
+| [`values_view`](ranges/elements_view.md)          | 第1要素を集めたビュー (alias template)                 | C++20          |
 | [`views::elements`](ranges/elements_view.md)      | `elements_view`を生成する (customization point object) | C++20          |
 | [`views::keys`](ranges/elements_view.md)          | `keys_view`を生成する (customization point object)     | C++20          |
 | [`views::values`](ranges/elements_view.md)        | `values_view`を生成する (customization point object)   | C++20          |
 
+### zip view
+
+| 名前                                                   | 説明                                                                                | 対応バージョン |
+|--------------------------------------------------------|-------------------------------------------------------------------------------------|----------------|
+| [`zip_view`](ranges/zip_view.md.nolink)                       | 2つのシーケンスから値を1つずつ取り出した`tuple`のビュー (class template)            | C++23          |
+| [`views::zip`](ranges/zip_view.md.nolink)                     | `zip_view`を生成する (customization point object)                                   | C++23          |
+| [`zip_transform_view`](ranges/zip_transform_view.md.nolink)   | 2つのシーケンスから値を1つずつ取り出し、関数を適用した結果のビュー (class template) | C++23          |
+| [`views::zip_transform`](ranges/zip_transform_view.md.nolink) | `zip_transform_view`を生成する (customization point object)                         | C++23          |
+
+### adjacent view
+
+| 名前                                                             | 説明                                                                            | 対応バージョン |
+|------------------------------------------------------------------|---------------------------------------------------------------------------------|----------------|
+| [`adjacent_view`](ranges/adjacent_view.md.nolink)                       | シーケンスから値を2つずつ取り出した`tuple`のビュー (class template)             | C++23          |
+| [`views::adjacent`](ranges/adjacent_view.md.nolink)                     | `adjacent_view`を生成する (customization point object)                          | C++23          |
+| [`adjacent_transform_view`](ranges/adjacent_transform_view.md.nolink)   | シーケンスから値を2つずつ取り出し、関数を適用した結果のビュー (class template)  | C++23          |
+| [`views::adjacent_transform`](ranges/adjacent_transform_view.md.nolink) | `adjacent_transform_view`を生成する (customization point object)                | C++23          |
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
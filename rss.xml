<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-09-16T21:46:31.113972</updated>
  <id>f7f230bd-a1d7-43c8-8d15-1e9027efb8b2</id>

  
    <entry>
      <title>basic_ostream -- basic_ostream::operator&lt;&lt; から非メンバ関数を分離</title>
      <link href="http://cpprefjp.github.io/reference/ostream/basic_ostream.html"/>
      <id>c2539e32131bbf6d4050d5ec4e741c8b306d9295:reference/ostream/basic_ostream.md</id>
      <updated>2015-09-16 21:45:36 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;basic_ostream&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;char_traits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;basic_ostream&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios.html&#34;&gt;basic_ios&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; { &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;……&lt;/span&gt; };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; ostream;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wostream;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;basic_ostream&lt;/code&gt;は、出力ストリームを表現するクラスである。
すなわち、&lt;code&gt;rdbuf()&lt;/code&gt;が指し示すストリームバッファオブジェクトに対する書き込み操作を提供する。&lt;/p&gt;
&lt;p&gt;各種の出力関数——特に&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;演算子——がクラスのメンバ関数・非メンバ関数として定義されている。
このため、ユーザーコードで入力処理を実装する際には、&lt;code&gt;basic_ostream&lt;/code&gt;、あるいはそれに対するtypedefである&lt;code&gt;ostream&lt;/code&gt;や&lt;code&gt;wostream&lt;/code&gt;などの型への参照を実引数として受け取るようにすると良い。&lt;/p&gt;
&lt;p&gt;テンプレートパラメータとして文字型を受け取るようになっており、使用を容易にするため、以下のパラメータ設定済みエイリアスが定義されている。
このエイリアスは&lt;code&gt;&amp;lt;ostream&amp;gt;&lt;/code&gt;ヘッダと&lt;code&gt;&amp;lt;iosfwd&amp;gt;&lt;/code&gt;ヘッダで定義されている。&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;エイリアス&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ostream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;型。ASCII、UTF-8等のマルチバイト文字列や、バイナリデータとして使用する。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wostream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;型。ワイド文字列として使用する。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;書式化出力関数と非書式化出力関数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;basic_ostream&lt;/code&gt;での出力操作は、書式化出力関数と非書式化出力関数の2種類に分類される。&lt;/p&gt;
&lt;h3&gt;書式化出力関数と非書式化出力関数の効果&lt;/h3&gt;
&lt;p&gt;注意：書式化出力関数と非書式化出力関数すべてについて、「効果」の項目は以下の処理を前提として記載している。&lt;/p&gt;
&lt;p&gt;書式化出力関数・非書式化出力関数は、出力処理に先立って&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築し、関数から脱出する前に破棄する。
構築した&lt;code&gt;sentry&lt;/code&gt;オブジェクトが&lt;code&gt;explict operator bool&lt;/code&gt;関数で&lt;code&gt;true&lt;/code&gt;に変換できる場合のみ、実際の出力処理（各関数の「効果」として記載した処理）が実行される。&lt;/p&gt;
&lt;p&gt;（書式化出力関数のみ）&lt;code&gt;explict operator bool&lt;/code&gt;関数の結果が&lt;code&gt;false&lt;/code&gt;であったら、&lt;code&gt;setstate(ios_base::bad_bit)&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;p&gt;関数内部で例外が送出された場合、&lt;code&gt;ios_base::bad_bit&lt;/code&gt;をセットする。
そして、&lt;code&gt;(exceptions() &amp;amp; bad_bit) != 0&lt;/code&gt;であれば例外を再送出する。&lt;/p&gt;
&lt;h2&gt;メンバ&lt;/h2&gt;
&lt;p&gt;基底クラスである&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/ios_base.html&#34;&gt;&lt;code&gt;ios_base&lt;/code&gt;&lt;/a&gt;と&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios.html&#34;&gt;&lt;code&gt;basic_ios&lt;/code&gt;&lt;/a&gt;も参照のこと。&lt;/p&gt;
&lt;h3&gt;型&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/sentry.html&#34;&gt;&lt;code&gt;sentry&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;出力操作の前処理・後処理&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/op_constructor.md.nolink&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(destructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ムーブ代入&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;値の交換&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;コピーコンストラクタとコピー代入演算子はdelete定義されている。&lt;/li&gt;
&lt;li&gt;ムーブコンストラクタ・ムーブ代入演算子と&lt;code&gt;swap&lt;/code&gt;はprotectedで定義されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;出力処理&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream.html&#34;&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;書式化出力・マニピュレータの実行&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/put.html&#34;&gt;&lt;code&gt;put&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字の出力&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/write.html&#34;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字列・バイト列の出力&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/flush.md.nolink&#34;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;ストリームバッファのフラッシュ&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;演算子のほとんどは書式化出力関数である。
その他のメンバ関数は非書式化出力関数である。&lt;/p&gt;
&lt;h3&gt;シーク&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/tellp.html&#34;&gt;&lt;code&gt;tellp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;現在の読み取り位置を取得する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/seekp.html&#34;&gt;&lt;code&gt;seekp&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;読み取り位置を移動する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html&#34;&gt;&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;文字・文字列の書式化出力、および、右辺値ストリームへの出力&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基底クラス&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/ios_base.html&#34;&gt;&lt;code&gt;ios_base&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios.html&#34;&gt;&lt;code&gt;basic_ios&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_ostream&amp;lt;&amp;gt;&lt;/code&gt;型のオブジェクト&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;&lt;code&gt;cout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/wcout.md.nolink&#34;&gt;&lt;code&gt;wcout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/clog.html&#34;&gt;&lt;code&gt;clog&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/wclog.md.nolink&#34;&gt;&lt;code&gt;wclog&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cerr.html&#34;&gt;&lt;code&gt;cerr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/wcerr.md.nolink&#34;&gt;&lt;code&gt;wcerr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; -- basic_ostream::operator&lt;&lt; から非メンバ関数を分離</title>
      <link href="http://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream.html"/>
      <id>c2539e32131bbf6d4050d5ec4e741c8b306d9295:reference/ostream/basic_ostream/op_ostream.md</id>
      <updated>2015-09-16 21:45:36 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;&lt;span class=&#34;class&#34; title=&#34;class basic_ostream&#34;&gt;basic_ostream::&lt;/span&gt;operator&amp;lt;&amp;lt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マニピュレータの実行&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3つとも関数へのポインタを引数に取る。&lt;/span&gt;
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;));
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(basic_ios&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;));
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(ios_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;pf)(ios_base&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;));

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// bool値・数値・ポインタの書式化出力&lt;/span&gt;
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; n);
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt; n);
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;short&lt;/span&gt; n);
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n);
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; n);
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n);
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n);
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; n); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// C++11&lt;/span&gt;
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;float&lt;/span&gt; f);
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; f);
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #B00040&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;double&lt;/span&gt; f);
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; p);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ストリームバッファの非書式化出力&lt;/span&gt;
basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_streambuf&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;*&lt;/span&gt; sb);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ストリームへの出力またはマニピュレータの実行を行う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マニピュレータを実行する多重定義それ自体は、書式化出力関数・非書式化出力関数いずれにも該当しない。&lt;/li&gt;
&lt;li&gt;数値型（&lt;code&gt;bool&lt;/code&gt;も含む）と&lt;code&gt;void*&lt;/code&gt;に対する多重定義は、書式化出力関数である。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;に対する多重定義は、非書式化出力関数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;h3&gt;マニピュレータの実行&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pf(*this)&lt;/code&gt;を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;bool値・数値・ポインタの書式化出力&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_put::put&lt;/code&gt;を使用して入力のパース・数値への変換を行う。実引数を渡すに際し、一部の型では以下のように型変換を行う。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;short&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flags()&lt;/code&gt;に&lt;code&gt;hex&lt;/code&gt;または&lt;code&gt;oct&lt;/code&gt;が設定されていれば&lt;code&gt;static_cast&amp;lt;long&amp;gt;(static_cast&amp;lt;unsigned short&amp;gt;(n))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;それ以外では&lt;code&gt;static_cast&amp;lt;long&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flags()&lt;/code&gt;に&lt;code&gt;hex&lt;/code&gt;または&lt;code&gt;oct&lt;/code&gt;が設定されていれば&lt;code&gt;static_cast&amp;lt;long&amp;gt;(static_cast&amp;lt;unsigned int&amp;gt;(n))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;それ以外では&lt;code&gt;static_cast&amp;lt;long&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsigned short&lt;/code&gt;、&lt;code&gt;unsigned int&lt;/code&gt;: &lt;code&gt;static_cast&amp;lt;unsigned long&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;: &lt;code&gt;static_cast&amp;lt;double&amp;gt;(n)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_put::put&lt;/code&gt;から得られた&lt;code&gt;iostate&lt;/code&gt;値を実引数にして&lt;code&gt;setstate&lt;/code&gt;関数を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ストリームバッファの非書式化出力&lt;/h3&gt;
&lt;p&gt;別のストリームバッファからの入力をストリームに出力する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sentry&lt;/code&gt;オブジェクトを構築する。&lt;code&gt;sentry&lt;/code&gt;オブジェクトが失敗を示した場合、何もしない。&lt;/li&gt;
&lt;li&gt;仮引数&lt;code&gt;sb&lt;/code&gt;がヌルポインタの場合、&lt;code&gt;setstate(badbit)&lt;/code&gt;を呼び出して終了する。&lt;/li&gt;
&lt;li&gt;以下のいずれかを満たすまで、&lt;code&gt;sb&lt;/code&gt;から文字を入力して&lt;code&gt;this&lt;/code&gt;へ出力する。&lt;ul&gt;
&lt;li&gt;EOFに達した。&lt;/li&gt;
&lt;li&gt;出力処理に失敗した（この場合、失敗したときの文字は入力側のストリームバッファに戻される）。&lt;/li&gt;
&lt;li&gt;例外が発生した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;入力がなされなかった場合、&lt;code&gt;setstate(failbit)&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力例&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;101
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;li&gt;C++11: &lt;code&gt;long long&lt;/code&gt;、&lt;code&gt;unsigned long long&lt;/code&gt;を実引数として受け取るものが追加された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このほかの&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;演算子関数&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html&#34;&gt;`文字・文字列の書式化出力、および、右辺値ストリームに対する出力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match/op_ostream.html&#34;&gt;&lt;code&gt;std::sub_match&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/op_ostream.html&#34;&gt;&lt;code&gt;std::system_error&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_ostream.html&#34;&gt;&lt;code&gt;std::complex&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/bitset/op_ostream.html&#34;&gt;&lt;code&gt;std::bitset&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_ostream.html&#34;&gt;&lt;code&gt;std::basic_string&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/op_ostream.html&#34;&gt;&lt;code&gt;std::shared_ptr&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/shuffle_order_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::shuffle_order_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/gamma_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::gamma_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/geometric_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::geometric_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/extreme_value_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::extreme_value_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/fisher_f_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::fisher_f_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::mersenne_twister_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/chi_squared_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::chi_squared_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/exponential_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::exponential_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discrete_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::discrete_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::subtract_with_carry_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_constant_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::piecewise_constant_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/poisson_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::poisson_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/student_t_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::student_t_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/bernoulli_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::bernoulli_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/weibull_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::weibull_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/binomial_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::binomial_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_linear_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::piecewise_linear_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_real_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::uniform_real_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/negative_binomial_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::negative_binomial_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discard_block_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::discard_block_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::normal_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/cauchy_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::cauchy_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/lognormal_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::lognormal_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::linear_congruential_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_int_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::uniform_int_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/independent_bits_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::independent_bits_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;出力対象の型&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf.html&#34;&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2114.html&#34; target=&#34;_blank&#34;&gt;N2114 &lt;code&gt;long long&lt;/code&gt; Goes to the Library, Revision 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;&lt; (非メンバ関数) -- basic_ostream::operator&lt;&lt; から非メンバ関数を分離</title>
      <link href="http://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream_free.html"/>
      <id>c2539e32131bbf6d4050d5ec4e741c8b306d9295:reference/ostream/basic_ostream/op_ostream_free.md</id>
      <updated>2015-09-16 21:45:36 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;function template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;operator&amp;lt;&amp;lt; (非メンバ関数)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字の書式化出力&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, CharT c);              &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);                 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (4)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt; c);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (5)&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字列の書式化出力&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; CharT&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);       &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (6)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (7)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (8)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (9)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; s);   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (10)&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 右辺値参照ストリームへの出力 (C++11)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Traits&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(basic_ostream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;CharT, Traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;amp;&amp;amp;&lt;/span&gt; os, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; x);          &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (11) C++11 から&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;ストリームへの出力を行う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字に対する多重定義は、書式化出力関数である。&lt;/li&gt;
&lt;li&gt;文字列に対する多重定義は、書式化出力関数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;h3&gt;(1)～(5) 文字の書式化出力&lt;/h3&gt;
&lt;p&gt;文字 &lt;code&gt;c&lt;/code&gt; を出力ストリーム &lt;code&gt;os&lt;/code&gt; に出力する。この際、&lt;code&gt;os&lt;/code&gt; に設定されている幅、埋め文字、および、整列方向に従う。&lt;br /&gt;
なお、(2) の形式（&lt;code&gt;os&lt;/code&gt; の文字型（&lt;code&gt;char_type&lt;/code&gt;）が &lt;code&gt;char&lt;/code&gt; 以外で &lt;code&gt;c&lt;/code&gt; が &lt;code&gt;char&lt;/code&gt; ）の時は、&lt;code&gt;c&lt;/code&gt; を直接出力するのではなく、&lt;code&gt;os.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/widen.md.nolink&#34;&gt;&lt;code&gt;widen&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(c)&lt;/code&gt; を出力する。&lt;br /&gt;
出力後、幅指定は &lt;code&gt;0&lt;/code&gt; にリセットされる。&lt;/p&gt;
&lt;h3&gt;(6)～(10) 文字列の書式化出力&lt;/h3&gt;
&lt;p&gt;ヌル終端文字列 &lt;code&gt;s&lt;/code&gt; を出力ストリーム &lt;code&gt;os&lt;/code&gt; に出力する。この際、&lt;code&gt;os&lt;/code&gt; に設定されている幅、埋め文字、および、整列方向に従う。&lt;br /&gt;
出力する文字列の長さは以下で求める。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(6) と (8) の形式：&lt;code&gt;Traits::length(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(7) の形式：&lt;code&gt;std::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits.html&#34;&gt;&lt;code&gt;char_traits&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;char&amp;gt;::&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/char_traits/length.html&#34;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(9) と (10) の形式：&lt;code&gt;Traits::length(reinterpret_cast&amp;lt;const char*&amp;gt;(s))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお、(7) の形式（&lt;code&gt;os&lt;/code&gt; の文字型（&lt;code&gt;char_type&lt;/code&gt;）が &lt;code&gt;char&lt;/code&gt; 以外で &lt;code&gt;s&lt;/code&gt; が &lt;code&gt;const char*&lt;/code&gt;）の時は、&lt;code&gt;s&lt;/code&gt; の各文字 &lt;code&gt;c&lt;/code&gt; を直接出力するのではなく、&lt;code&gt;os.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/basic_ios/widen.md.nolink&#34;&gt;&lt;code&gt;widen&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(c)&lt;/code&gt; を出力する。&lt;br /&gt;
出力後、幅指定は &lt;code&gt;0&lt;/code&gt; にリセットされる。&lt;/p&gt;
&lt;h3&gt;(11) 右辺値参照ストリームへの出力 (C++11)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;os &amp;lt;&amp;lt; x&lt;/code&gt;を実行する。&lt;br /&gt;
この多重定義は、一時オブジェクトなどに対して&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;演算子を利用可能にするためのものである。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;os&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(11) の形式は C++11 から追加されたが、より使いやすくするための変更が提案されている。&lt;br /&gt;
&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#1203&#34; target=&#34;_blank&#34;&gt;LWG1203. More useful rvalue stream insertion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(3)、および、(8) の形式は、オーバーロード解決時の曖昧さ解消のために存在する。&lt;br /&gt;
    （これらが存在しないと、&lt;code&gt;CharT&lt;/code&gt; が &lt;code&gt;char&lt;/code&gt; 型の場合に、(1) と (2)、あるいは (6) と (7) が同じ優先順位となりオーバーロード解決に失敗してしまう）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;h3&gt;(1)、(2)、(6)、(7) の例&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip.html&#34;&gt;iomanip&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/wcout.md.nolink&#34;&gt;wcout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/left.html&#34;&gt;left&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setfill.md.nolink&#34;&gt;setfill&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;L&#39;+&#39;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/wcout.md.nolink&#34;&gt;wcout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setw.md.nolink&#34;&gt;setw&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#39;C&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/wcout.md.nolink&#34;&gt;wcout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setw.md.nolink&#34;&gt;setw&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;C&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/wcout.md.nolink&#34;&gt;wcout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setw.md.nolink&#34;&gt;setw&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;L&#34;cpprefjp&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/wcout.md.nolink&#34;&gt;wcout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setw.md.nolink&#34;&gt;setw&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;cpprefjp&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;C+++++++++
C+++++++++
cpprefjp++
cpprefjp++
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;(3)～(5)、(8)～(10) の例&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip.html&#34;&gt;iomanip&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ios/left.html&#34;&gt;left&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setfill.md.nolink&#34;&gt;setfill&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;+&#39;&lt;/span&gt;);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setw.md.nolink&#34;&gt;setw&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;C&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setw.md.nolink&#34;&gt;setw&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;C&#39;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setw.md.nolink&#34;&gt;setw&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;C&#39;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setw.md.nolink&#34;&gt;setw&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;cpprefjp&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setw.md.nolink&#34;&gt;setw&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;cpprefjp&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iomanip/setw.md.nolink&#34;&gt;setw&lt;/a&gt;(&lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;cpprefjp&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;C+++++++++
C+++++++++
C+++++++++
cpprefjp++
cpprefjp++
cpprefjp++
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;(11) の例&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/fstream.html&#34;&gt;fstream&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream.html&#34;&gt;iostream&lt;/a&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/fstream/basic_ofstream.md.nolink&#34;&gt;ofstream&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;test.txt&#34;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;cpprefjp&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string.html&#34;&gt;string&lt;/a&gt; s;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/fstream/basic_ifstream.md.nolink&#34;&gt;ifstream&lt;/a&gt; ifs(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;test.txt&#34;&lt;/span&gt;);
  ifs &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; s;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;endl&lt;/a&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;cpprefjp
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;なお、この例は C++03 でもコンパイル・実行可能だが、その場合は出力に謎の 16 進数が出力される。&lt;br /&gt;
これは、C++03 では &lt;code&gt;&#34;cpprefjp&#34;&lt;/code&gt; の出力の際に &lt;code&gt;operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;char, Traits&amp;gt;&amp;amp;, const char*)&lt;/code&gt; ではなく &lt;code&gt;basic_ostream&amp;lt;char, Traits&amp;gt;::operator&amp;lt;&amp;lt;(const void*)&lt;/code&gt; が呼び出されるためである。&lt;br /&gt;
（&lt;code&gt;operator&amp;lt;&amp;lt;(basic_ostream&amp;lt;char, Traits&amp;gt;&amp;amp;, const char*)&lt;/code&gt; は左辺に &lt;code&gt;const&lt;/code&gt; ではない参照を必要とするため &lt;code&gt;ofstream&lt;/code&gt; の一時オブジェクトを受け取れないが、&lt;code&gt;basic_ostream&amp;lt;char, Traits&amp;gt;::operator&amp;lt;&amp;lt;(const void*)&lt;/code&gt; はメンバ関数であるため &lt;code&gt;ofstream&lt;/code&gt; の一時オブジェクトに対しても呼び出す事が可能）&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++98&lt;/li&gt;
&lt;li&gt;C++11: ストリームへの右辺値参照を実引数として受け取るものが追加された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;関連項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;このほかの&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;演算子関数&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/basic_ostream/op_ostream.html&#34;&gt;`bool値・数値・ポインタ、ストリームバッファ、マニピュレータに対するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match/op_ostream.html&#34;&gt;&lt;code&gt;std::sub_match&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/op_ostream.html&#34;&gt;&lt;code&gt;std::system_error&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/complex/op_ostream.html&#34;&gt;&lt;code&gt;std::complex&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/bitset/op_ostream.html&#34;&gt;&lt;code&gt;std::bitset&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/op_ostream.html&#34;&gt;&lt;code&gt;std::basic_string&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/memory/shared_ptr/op_ostream.html&#34;&gt;&lt;code&gt;std::shared_ptr&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/shuffle_order_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::shuffle_order_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/gamma_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::gamma_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/geometric_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::geometric_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/extreme_value_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::extreme_value_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/fisher_f_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::fisher_f_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/mersenne_twister_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::mersenne_twister_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/chi_squared_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::chi_squared_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/exponential_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::exponential_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discrete_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::discrete_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/subtract_with_carry_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::subtract_with_carry_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_constant_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::piecewise_constant_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/poisson_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::poisson_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/student_t_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::student_t_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/bernoulli_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::bernoulli_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/weibull_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::weibull_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/binomial_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::binomial_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/piecewise_linear_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::piecewise_linear_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_real_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::uniform_real_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/negative_binomial_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::negative_binomial_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/discard_block_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::discard_block_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/normal_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::normal_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/cauchy_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::cauchy_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/lognormal_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::lognormal_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/linear_congruential_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::linear_congruential_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/uniform_int_distribution/op_ostream.html&#34;&gt;&lt;code&gt;std::uniform_int_distribution&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/random/independent_bits_engine/op_ostream.html&#34;&gt;&lt;code&gt;std::independent_bits_engine&lt;/code&gt;に関するもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;出力対象の型&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/streambuf/basic_streambuf.html&#34;&gt;&lt;code&gt;basic_streambuf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>match_flag_type (C++11) -- ^ や $ や \\b がリテラル文字である事を明示するためシングルクォートを追記</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_constants/match_flag_type.html"/>
      <id>46ade7a7c949323f4e219f2d1ff105278f91578b:reference/regex/regex_constants/match_flag_type.md</id>
      <updated>2015-09-16 21:43:43 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;typedef&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std::regex_constants&#34;&gt;std::regex_constants::&lt;/span&gt;match_flag_type (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; regex_constants{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; &lt;i&gt;implementation&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;defined&lt;/i&gt; match_flag_type;
  constexpr match_flag_type match_default &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
  constexpr match_flag_type match_not_bol &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_eol &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_bow &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_eow &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_any &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_not_null &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_continuous &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type match_prev_avail &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type format_default &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {};
  constexpr match_flag_type format_sed &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type format_no_copy &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
  constexpr match_flag_type format_first_only &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;i&gt;unspecified&lt;/i&gt;;
}}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;マッチ条件と書式を表す実装定義のビットマスク型&lt;/p&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空のマッチ条件を表す値。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_bol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最初の文字を、行頭として扱わないようにする。&lt;code&gt;&#39;^&#39;&lt;/code&gt;が&lt;code&gt;[first, first)&lt;/code&gt;にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_eol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最後の文字を、行末として扱わないようにする。&lt;code&gt;&#39;$&#39;&lt;/code&gt;が&lt;code&gt;[last, last)&lt;/code&gt;にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_bow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最初の文字を、単語の開始として扱わないようにする。&lt;code&gt;&#39;\\b&#39;&lt;/code&gt;が、先頭の文字から始まる単語にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_eow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの最後の文字を、単語の終端として扱わないようにする。&lt;code&gt;&#39;\\b&#39;&lt;/code&gt;が、最後の文字で終わる単語にマッチしなくなる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複数のマッチ候補がある場合、その全てをマッチ結果として受け入れる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_null&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空のシーケンスにはマッチしないようにする。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_continuous&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの先頭にマッチするかどうかだけを調べる。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_prev_avail&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シーケンスの先頭の一文字前(&lt;code&gt;--first&lt;/code&gt;)が有効な位置であることを示す。このフラグが設定されると、&lt;code&gt;match_not_bol&lt;/code&gt;と&lt;code&gt;match_not_bow&lt;/code&gt;は無視される。このオブジェクトのビットマスク値は未規定。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ECMAScript形式のルールで置換を行う。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_sed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;POSIXユーティリティのsed形式のルールで置換を行う。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_no_copy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索と置換の操作において、正規表現にマッチしない文字列を出力にコピーしない。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_first_only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索と置換の操作において、最初にマッチしたもののみを扱う。&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 4.9.2, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1450&#34; target=&#34;_blank&#34;&gt;LWG Issue 1450. Contradiction in &lt;code&gt;regex_constants&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_default&lt;/code&gt;と&lt;code&gt;format_default&lt;/code&gt;の2つがデフォルト値&lt;code&gt;0&lt;/code&gt;を持っているが、同じ値を持つビットマスク値が複数含まれていることはビットマスク型の要件と矛盾しているため、C++14でビットマスク型の要件を見なおした。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2053&#34; target=&#34;_blank&#34;&gt;LWG Issue 2053. Errors in regex bitmask types&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;定数定義に不要な&lt;code&gt;static&lt;/code&gt;が付いていたため、C++14で削除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_iterator (C++11) -- regex_iterator, regex_token_iterator : コードブロック中の識別子へのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_iterator.html"/>
      <id>63e082c4d1b529b8abed9a9ab0caaa8916f81d82:reference/regex/regex_iterator.md</id>
      <updated>2015-09-16 19:51:51 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;regex_iterator (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BidirectionalIterator&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;iterator_traits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;BidirectionalIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_traits.html&#34;&gt;regex_traits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;regex_iterator&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; cregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; wcregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sregex_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;wstring&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wsregex_iterator;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は、ある文字列に対して、指定した正規表現で検索した結果を順番に列挙する読み取り専用の前方向イテレータである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトを構築した時、および、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; を呼び出す毎に、当該イテレータは &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; を呼び出して検索し、マッチ結果オブジェクト（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;）を内部に保存する（ただし、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; も参照）。
イテレータが終端まで来たとき（つまり、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_search.html&#34;&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/a&gt; が &lt;code&gt;false&lt;/code&gt; を返したとき）、当該イテレータはシーケンスの終端を示す特別な値となる。
この、シーケンスの終端を示す特別な値は、&lt;code&gt;regex_iterator&lt;/code&gt; オブジェクトをデフォルトコンストラクタにより構築した場合にも生成されるため、この値と比較することによってシーケンスの終端であるか否か（つまり、マッチしなかったか否か）が判別できる。&lt;/p&gt;
&lt;p&gt;シーケンス終端のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt; 演算子適用は未定義である。その他のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt; 演算子適用の結果は &lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&amp;amp;&lt;/code&gt; である。&lt;br /&gt;
同様に、シーケンス終端のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt; 演算子適用は未定義である。その他のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt; 演算子適用の結果は &lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;*&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;なお、本サイトの &lt;code&gt;regex_iterator&lt;/code&gt; の各説明では、規格にならって以下のプライベートなメンバ変数が存在する前提で記載している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;検索対象文字列の開始位置を示すイテレータ &lt;code&gt;begin&lt;/code&gt;（&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;検索対象文字列の終了位置を示すイテレータ &lt;code&gt;end&lt;/code&gt;（&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;検索する正規表現へのポインタ &lt;code&gt;pregex&lt;/code&gt;（&lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;*&lt;/code&gt; 型。正規表現のコピーではないことに注意）&lt;/li&gt;
&lt;li&gt;検索フラグ &lt;code&gt;flags&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/match_flag_type.html&#34;&gt;&lt;code&gt;regex_constants::match_flag_type&lt;/code&gt;&lt;/a&gt; 型）&lt;/li&gt;
&lt;li&gt;最後の検索のマッチ結果オブジェクト &lt;code&gt;match&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&lt;/code&gt; 型）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかし、規格上これらのメンバ変数は説明のためだけに導入されているため、実際の各実装でこれらのメンバ変数が存在するとは限らない事に注意すること。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;regex_iterator&lt;/code&gt; は &lt;code&gt;iterator_category&lt;/code&gt; を &lt;code&gt;forward_iterator_tag&lt;/code&gt; に定義しているため、基本的には前方向イテレータであると考えられるが、実際には前方向イテレータの要件のうち以下の要件を満たしていない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 つの間接参照可能な &lt;code&gt;regex_iterator&lt;/code&gt; オブジェクト &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; がある時、&lt;code&gt;a == b&lt;/code&gt; の場合でも、&lt;code&gt;++a == ++b&lt;/code&gt; とは限らない。&lt;/li&gt;
&lt;li&gt;2 つの間接参照可能な &lt;code&gt;regex_iterator&lt;/code&gt; オブジェクト &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; がある時、&lt;code&gt;a == b&lt;/code&gt; の場合でも、&lt;code&gt;*a&lt;/code&gt; と &lt;code&gt;*b&lt;/code&gt; が同じオブジェクトとは限らない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;比較&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;間接&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;インクリメント&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マッチに使用している正規表現型。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マッチ結果の型（間接参照で返される型）。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 つのイテレータの差を表すための型。&lt;code&gt;ptrdiff_t&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const value_type&lt;/code&gt; へのポインタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const value_type&lt;/code&gt; への参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator_category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;このイテレータのカテゴリを表すタグ。前方向イテレータ（&lt;code&gt;forward_iterator_tag&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;説明用プライベートメンバ変数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索対象文字列の開始位置を示すイテレータ。&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索対象文字列の終了位置を示すイテレータ。&lt;code&gt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pregex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索する正規表現へのポインタ。正規表現のコピーではないことに注意。&lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;*&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;検索フラグ。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_constants/match_flag_type.html&#34;&gt;&lt;code&gt;regex_constants::match_flag_type&lt;/code&gt;&lt;/a&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最後の検索のマッチ結果オブジェクト。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;const char*&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;const wchar_t*&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;string::const_iterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wsregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_iterator&amp;lt;wstring::const_iterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;a01da123456da999d&#34;&lt;/span&gt;);
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;d+&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_iterator&lt;/span&gt; it(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re), end; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;position = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.position() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, length = &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.length() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;position = 1, length = 2, str = &#39;01&#39;
position = 5, length = 6, str = &#39;123456&#39;
position = 13, length = 3, str = &#39;999&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし、Clang と GCC の 4.9.1 までのバージョンには、長さ 0 の文字列にマッチした時の挙動に問題があるため、注意が必要。
（特に、Clang は長さ 0 の文字列にマッチするとそこから先に進まなくなってしまう）&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_token_iterator (C++11) -- regex_iterator, regex_token_iterator : コードブロック中の識別子へのリンクを追加</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_token_iterator.html"/>
      <id>63e082c4d1b529b8abed9a9ab0caaa8916f81d82:reference/regex/regex_token_iterator.md</id>
      <updated>2015-09-16 19:51:51 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;regex_token_iterator (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;BidirectionalIterator&lt;/span&gt;,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;charT&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/iterator/iterator_traits.html&#34;&gt;iterator_traits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;BidirectionalIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type,
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;traits&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_traits.html&#34;&gt;regex_traits&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;charT&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;regex_token_iterator&lt;/span&gt;;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_token_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; cregex_token_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_token_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;&lt;/span&gt; wcregex_token_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_token_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;string&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sregex_token_iterator;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typedef&lt;/span&gt; regex_token_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;wstring&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;const_iterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; wsregex_token_iterator;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_token_iterator&lt;/code&gt; は、ある文字列に対して、指定した正規表現で検索した結果をサブマッチ毎に順番に列挙する読み取り専用の前方向イテレータである。
&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator.html&#34;&gt;&lt;code&gt;regex_iterator&lt;/code&gt;&lt;/a&gt; と違い、マッチ結果（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt;）ではなくサブマッチ（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;）を返す。&lt;/p&gt;
&lt;p&gt;返されるサブマッチはオブジェクトの構築時に複数指定することができる。
返されるサブマッチは、マッチ結果 &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results.html&#34;&gt;&lt;code&gt;match_results&lt;/code&gt;&lt;/a&gt; からサブマッチ &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt; を取得する場合と同様、0（マッチ全体を表す）、および、正規表現内の各グループを表す正の整数で指定する。
加えて、-1 を指定することで、指定した正規表現にマッチしなかった文字列を返すことも可能である。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;regex_token_iterator&lt;/code&gt; オブジェクトを構築した時、当該オブジェクトは &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator.html&#34;&gt;&lt;code&gt;regex_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator, charT, traits&amp;gt;&lt;/code&gt; 型のメンバ変数 &lt;code&gt;position&lt;/code&gt; を構築する。
また、構築時に指定された返すべきサブマッチのリストをメンバ変数 &lt;code&gt;subs&lt;/code&gt; に保持し、現在返すべきサブマッチを識別するカウンタ用のメンバ変数 &lt;code&gt;N&lt;/code&gt; を &lt;code&gt;0&lt;/code&gt; に設定する。&lt;br /&gt;
そして、&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt; が呼び出される毎に、当該イテレータは &lt;code&gt;N&lt;/code&gt; をインクリメントし、&lt;code&gt;N&lt;/code&gt; が &lt;code&gt;subs&lt;/code&gt; のサイズ以上になると、&lt;code&gt;position&lt;/code&gt; をインクリメントして &lt;code&gt;N&lt;/code&gt; を再び &lt;code&gt;0&lt;/code&gt; にリセットする。&lt;br /&gt;
&lt;code&gt;position&lt;/code&gt; が終端まで来た時（つまり、&lt;code&gt;position&lt;/code&gt; がシーケンス終端イテレータとなった時）、&lt;code&gt;subs&lt;/code&gt; に &lt;code&gt;-1&lt;/code&gt; が含まれていて、かつ、&lt;code&gt;position&lt;/code&gt; が直前にマッチした文字列の後ろに文字列が残っている場合（つまり、&lt;code&gt;position.&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/match_results/suffix.html&#34;&gt;&lt;code&gt;suffix&lt;/code&gt;&lt;/a&gt;&lt;code&gt;()&lt;/code&gt; が空文字では無い場合）には、当該文字列を最後のサブマッチとして扱う。この状態になったイテレータを接尾辞イテレータと呼ぶ。&lt;br /&gt;
&lt;code&gt;position&lt;/code&gt; が終端まで来た時に、&lt;code&gt;subs&lt;/code&gt; に &lt;code&gt;-1&lt;/code&gt; が含まれていない、または、&lt;code&gt;position&lt;/code&gt; が直前にマッチした文字列の後ろに文字列が残っていない場合、および、接尾辞イテレータがインクリメントされた場合、当該オブジェクトは、シーケンスの終端を示す特別な値となる。&lt;br /&gt;
この、シーケンスの終端を示す特別な値は、&lt;code&gt;regex_token_iterator&lt;/code&gt; オブジェクトをデフォルトコンストラクタにより構築した場合にも生成されるため、この値と比較することによってシーケンスの終端であるか否か（つまり、マッチしなかったか否か）が判別できる。&lt;/p&gt;
&lt;p&gt;シーケンス終端のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt; 演算子適用は未定義である。その他のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt; 演算子適用の結果は &lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&amp;amp;&lt;/code&gt; である。&lt;br /&gt;
同様に、シーケンス終端のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt; 演算子適用は未定義である。その他のイテレータに対する &lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt; 演算子適用の結果は &lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;*&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;なお、本サイトの &lt;code&gt;regex_token_iterator&lt;/code&gt; の各説明（上記も含む）では、規格にならって以下のプライベートなメンバ変数が存在する前提で記載している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンストラクタで指定した引数から構築された &lt;code&gt;regex_iterator&lt;/code&gt; の &lt;code&gt;position&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator.html&#34;&gt;&lt;code&gt;regex_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator, charT, traits&amp;gt;&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;現在のサブマッチへのポインタ &lt;code&gt;result&lt;/code&gt;（&lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;*&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;接尾辞イテレータとなった際に保持するサブマッチ &lt;code&gt;suffix&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;現在のサブマッチを識別する整数値 &lt;code&gt;N&lt;/code&gt;（&lt;code&gt;size_t&lt;/code&gt; 型）&lt;/li&gt;
&lt;li&gt;返すべきサブマッチのリスト &lt;code&gt;subs&lt;/code&gt;（&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;int&amp;gt;&lt;/code&gt; 型）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかし、規格上これらのメンバ変数は説明のためだけに導入されているため、実際の各実装でこれらのメンバ変数が存在するとは限らない事に注意すること。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;regex_token_iterator&lt;/code&gt; は &lt;code&gt;iterator_category&lt;/code&gt; を &lt;code&gt;forward_iterator_tag&lt;/code&gt; に定義しているため、基本的には前方向イテレータであると考えられるが、実際には前方向イテレータの要件のうち以下の要件を満たしていない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 つの間接参照可能な &lt;code&gt;regex_token_iterator&lt;/code&gt; オブジェクト &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; がある時、&lt;code&gt;a == b&lt;/code&gt; の場合でも、&lt;code&gt;++a == ++b&lt;/code&gt; とは限らない。&lt;/li&gt;
&lt;li&gt;2 つの間接参照可能な &lt;code&gt;regex_token_iterator&lt;/code&gt; オブジェクト &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; がある時、&lt;code&gt;a == b&lt;/code&gt; の場合でも、&lt;code&gt;*a&lt;/code&gt; と &lt;code&gt;*b&lt;/code&gt; が同じオブジェクトとは限らない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_constructor.html&#34;&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_assign.html&#34;&gt;&lt;code&gt;operator=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;比較&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_equal.html&#34;&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_not_equal.html&#34;&gt;&lt;code&gt;operator!=&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;非等値比較&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;間接&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_deref.html&#34;&gt;&lt;code&gt;operator*&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;間接参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_arrow.html&#34;&gt;&lt;code&gt;operator-&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;メンバアクセス&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;インクリメント&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_token_iterator/op_increment.html&#34;&gt;&lt;code&gt;operator++&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;インクリメント&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マッチに使用している正規表現型。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/basic_regex.html&#34;&gt;&lt;code&gt;basic_regex&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;charT, traits&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サブマッチの型（間接参照で返される型）。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2 つのイテレータの差を表すための型。&lt;code&gt;ptrdiff_t&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const value_type&lt;/code&gt; へのポインタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const value_type&lt;/code&gt; への参照&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator_category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;このイテレータのカテゴリを表すタグ。前方向イテレータ（&lt;code&gt;forward_iterator_tag&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;説明用プライベートメンバ変数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;position&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;現在のマッチを指す &lt;code&gt;regex_iterator&lt;/code&gt;。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_iterator.html&#34;&gt;&lt;code&gt;regex_iterator&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator, charT, traits&amp;gt;&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;result&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;現在のサブマッチへのポインタ。&lt;code&gt;const&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;*&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;suffix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;接尾辞イテレータとなった際に保持するサブマッチ。&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/sub_match.html&#34;&gt;&lt;code&gt;sub_match&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;BidirectionalIterator&amp;gt;&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;現在のサブマッチを識別する整数値。&lt;code&gt;size_t&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;subs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返すべきサブマッチを表す整数のリスト。&lt;a href=&#34;http://cpprefjp.github.io/reference/vector.html&#34;&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;int&amp;gt;&lt;/code&gt; 型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;非メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cregex_token_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_token_iterator&amp;lt;const char*&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wcregex_token_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_token_iterator&amp;lt;const wchar_t*&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sregex_token_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_token_iterator&amp;lt;string::const_iterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wsregex_token_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;regex_token_iterator&amp;lt;wstring::const_iterator&amp;gt;&lt;/code&gt; の typedef&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iterator&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;initializer_list&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; f(T submatch)
{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string s(&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;enum E { enumerator1 = value1, enumerator2 = value2, enumerator3 = value3, };&#34;&lt;/span&gt;);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex re(R&lt;span style=&#34;color: #BA2121&#34;&gt;&#34;((\w+)\s*=\s*(\w+))&#34;&lt;/span&gt;);

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;sregex_token_iterator&lt;/span&gt; it(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s), std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;end(s), re, submatch), end; it &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; end; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;it) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;it;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;match range = (&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.first &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;, &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.second &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;begin(s) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;), &#34;&lt;/span&gt;
                 &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;str = &#39;&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m.str() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 列挙子のみ抽出&lt;/span&gt;
  f(&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 値のみ抽出&lt;/span&gt;
  f(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// マッチしない部分のみ抽出&lt;/span&gt;
  f(&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;);

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 列挙子と値の両方を抽出&lt;/span&gt;
  f(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;initializer_list&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;{ &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;match range = (9, 20), str = &#39;enumerator1&#39;
match range = (31, 42), str = &#39;enumerator2&#39;
match range = (53, 64), str = &#39;enumerator3&#39;

match range = (23, 29), str = &#39;value1&#39;
match range = (45, 51), str = &#39;value2&#39;
match range = (67, 73), str = &#39;value3&#39;

match range = (0, 9), str = &#39;enum E { &#39;
match range = (29, 31), str = &#39;, &#39;
match range = (51, 53), str = &#39;, &#39;
match range = (73, 77), str = &#39;, };&#39;

match range = (9, 20), str = &#39;enumerator1&#39;
match range = (23, 29), str = &#39;value1&#39;
match range = (31, 42), str = &#39;enumerator2&#39;
match range = (45, 51), str = &#39;value2&#39;
match range = (53, 64), str = &#39;enumerator3&#39;
match range = (67, 73), str = &#39;value3&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ?&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし、Clang と GCC の 4.9.1 までのバージョンには、長さ 0 の文字列にマッチした時の挙動に問題があるため、注意が必要。
（特に、Clang は長さ 0 の文字列にマッチするとそこから先に進まなくなってしまう）&lt;/p&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_traits (C++11) -- regex_traits : サンプルコードを追加(#214)</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_traits.html"/>
      <id>a1dd0c988edad61af2c5653c02bc9c46ee51a1d7:reference/regex/regex_traits.md</id>
      <updated>2015-09-16 17:23:57 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;regex_traits (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; regex_traits;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_traits&lt;/code&gt;は、正規表現ライブラリ&lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;クラス内で使用される、文字とその変換の規則に関する特性を表すクラスである。&lt;/p&gt;
&lt;p&gt;このクラスと同じインタフェースのクラスを実装することで、特定の文字コードの場合に、正規表現の振る舞いをカスタマイズできる。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~regex_traits() = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_traits&amp;amp; operator=(const regex_traits&amp;amp;) = default;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;regex_traits&amp;amp; operator=(regex_traits&amp;amp;&amp;amp;) = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;変換&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;translate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた文字と同等の文字を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;translate_nocase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた文字列と大文字・小文字を区別せずに同等な文字列を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた範囲を、並べ替えのキーとして使用する、文字のシーケンスに変換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;transform_primary&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた文字の範囲を、並べ替えのキーとして使用する、大文字・小文字を区別しない文字のシーケンスに変換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lookup_collatename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた文字の範囲に対応する照合名を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lookup_classname&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた文字の範囲に対応するクラス名を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;istype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字が特定のクラスに属しているかを判定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字の整数表現を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;imbue&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケールを設定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケールを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;静的メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列の長さを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;char_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータ&lt;code&gt;CharT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char_type&lt;/code&gt;文字を要素とする文字列型 &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;std::basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;char_type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;locale_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール型 &lt;a href=&#34;http://cpprefjp.github.io/reference/locale/locale.html&#34;&gt;&lt;code&gt;std::locale&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;char_class_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現の文字クラス名を表す、実装定義のビットマスク型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;regex&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;regex_traits&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; traits;

  &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;string&lt;/a&gt; class_name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;alnum&#34;&lt;/span&gt;; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 正規表現中で[[:alnum:]]のように入力するクラス名&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 文字&#39;a&#39;がアルファベットと数字のクラスに含まれているかを判定する&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (traits.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_traits/isctype.html&#34;&gt;isctype&lt;/a&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&#39;a&#39;&lt;/span&gt;, traits.&lt;a href=&#34;http://cpprefjp.github.io/reference/regex/regex_traits/lookup_classname.md.nolink&#34;&gt;lookup_classname&lt;/a&gt;(class_name.&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/begin.html&#34;&gt;begin()&lt;/a&gt;, class_name.&lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string/end.html&#34;&gt;end()&lt;/a&gt;))) {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;a&#39; is alpha-numeric class&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    &lt;a href=&#34;http://cpprefjp.github.io/reference/iostream/cout.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout&lt;/a&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;&#39;a&#39; is not alpha-numeric class&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/ostream/endl.html&#34;&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl&lt;/a&gt;;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&#39;a&#39; is alpha-numeric class
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 4.9.2, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>regex_traits (C++11) -- リンクを修正</title>
      <link href="http://cpprefjp.github.io/reference/regex/regex_traits.html"/>
      <id>73c28ef089554c0fa367f6de2c52fb9e8abaa012:reference/regex/regex_traits.md</id>
      <updated>2015-09-16 17:04:31 +0900</updated>
      
        <content type="html">&lt;div class=&#34;identifier-type&#34;&gt;class template&lt;/div&gt;&lt;div class=&#34;header&#34;&gt;&amp;lt;regex&amp;gt;&lt;/div&gt;&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;namespace&#34; title=&#34;namespace std&#34;&gt;std::&lt;/span&gt;regex_traits (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CharT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; regex_traits;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;regex_traits&lt;/code&gt;は、正規表現ライブラリ&lt;code&gt;&amp;lt;regex&amp;gt;&lt;/code&gt;クラス内で使用される、文字とその変換の規則に関する特性を表すクラスである。&lt;/p&gt;
&lt;p&gt;このクラスと同じインタフェースのクラスを実装することで、特定の文字コードの場合に、正規表現の振る舞いをカスタマイズできる。&lt;/p&gt;
&lt;h2&gt;メンバ関数&lt;/h2&gt;
&lt;h3&gt;構築・破棄&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(constructor)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~regex_traits() = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デストラクタ&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_traits&amp;amp; operator=(const regex_traits&amp;amp;) = default;&lt;/code&gt;&lt;br /&gt; &lt;code&gt;regex_traits&amp;amp; operator=(regex_traits&amp;amp;&amp;amp;) = default;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;代入演算子&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;変換&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;translate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた文字と同等の文字を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;translate_nocase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた文字列と大文字・小文字を区別せずに同等な文字列を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた範囲を、並べ替えのキーとして使用する、文字のシーケンスに変換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;transform_primary&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた文字の範囲を、並べ替えのキーとして使用する、大文字・小文字を区別しない文字のシーケンスに変換する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lookup_collatename&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた文字の範囲に対応する照合名を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lookup_classname&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与えられた文字の範囲に対応するクラス名を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;istype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字が特定のクラスに属しているかを判定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字の整数表現を取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;imbue&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケールを設定する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケールを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;静的メンバ関数&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字列の長さを取得する&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;メンバ型&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;対応バージョン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;char_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;テンプレートパラメータ&lt;code&gt;CharT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;char_type&lt;/code&gt;文字を要素とする文字列型 &lt;a href=&#34;http://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;&lt;code&gt;std::basic_string&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;char_type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;locale_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ロケール型 &lt;a href=&#34;http://cpprefjp.github.io/reference/locale/locale.html&#34;&gt;&lt;code&gt;std::locale&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;char_class_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正規表現の文字クラス名を表す、実装定義のビットマスク型&lt;/td&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: -&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 4.9.0, 4.9.1, 4.9.2, 5.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt;: ??&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Mitsuru Kariya</name>
        <email>kariya_mitsuru@hotmail.com</email>
      </author>
    </entry>
  
</feed>
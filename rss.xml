<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2023-02-03T07:47:40.767447</updated>
  <id>18b6a050-ed52-4862-b817-bcdc10f5366f</id>

  
    <entry>
      <title>cmp_equal -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_equal.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_equal.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_equal.md b/reference/utility/cmp_equal.md
index 7bd6d53ce..a0ab1b9cd 100644
--- a/reference/utility/cmp_equal.md
+++ b/reference/utility/cmp_equal.md
@@ -12,15 +12,19 @@ namespace std {
 ```
 
 ## 概要
-整数を安全に等値比較する。
+整数を安全に等値比較（`t == u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
 ```cpp
 std::vector&amp;lt;X&amp;gt; v;
+int N = 0;
 
-// 警告：式`i &amp;lt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
-for (int i = 0; i &amp;lt; v.size(); ++i) {}
+// 警告：式`i == v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
+if (N == v.size()) {}
+
+// OK
+if (std::cmp_equal(N, v.size())) {}
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_greater -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_greater.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_greater.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_greater.md b/reference/utility/cmp_greater.md
index 78e8c92e3..4704f132b 100644
--- a/reference/utility/cmp_greater.md
+++ b/reference/utility/cmp_greater.md
@@ -12,15 +12,19 @@ namespace std {
 ```
 
 ## 概要
-整数に対して安全に、左辺が右辺より大きいかを比較する。
+整数に対して安全に、左辺が右辺より大きいかを比較（`t &amp;gt; u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
 ```cpp
 std::vector&amp;lt;X&amp;gt; v;
+int N = 0;
 
-// 警告：式`i &amp;lt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
-for (int i = 0; i &amp;lt; v.size(); ++i) {}
+// 警告：式`N &amp;gt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
+while (N &amp;gt; v.size()) {}
+
+// OK
+while (std::cmp_greater(N, v.size())) {}
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_greater_equal -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_greater_equal.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_greater_equal.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_greater_equal.md b/reference/utility/cmp_greater_equal.md
index e85ea8eb9..9013db2a8 100644
--- a/reference/utility/cmp_greater_equal.md
+++ b/reference/utility/cmp_greater_equal.md
@@ -12,15 +12,19 @@ namespace std {
 ```
 
 ## 概要
-整数に対して安全に、左辺が右辺以上かを比較する。
+整数に対して安全に、左辺が右辺以上かを比較（`t &amp;gt;= u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
 ```cpp
 std::vector&amp;lt;X&amp;gt; v;
+int N = 0;
 
-// 警告：式`i &amp;lt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
-for (int i = 0; i &amp;lt; v.size(); ++i) {}
+// 警告：式`N &amp;gt;= v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
+while (N &amp;gt;= v.size()) {}
+
+// OK
+while (std::cmp_greater_equal(N, v.size())) {}
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_less -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_less.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_less.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_less.md b/reference/utility/cmp_less.md
index e1e96ce30..3049c2f6b 100644
--- a/reference/utility/cmp_less.md
+++ b/reference/utility/cmp_less.md
@@ -12,7 +12,7 @@ namespace std {
 ```
 
 ## 概要
-整数に対して安全に、左辺が右辺より小さいかを比較する。
+整数に対して安全に、左辺が右辺より小さいかを比較（`t &amp;lt; u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_less_equal -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_less_equal.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_less_equal.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_less_equal.md b/reference/utility/cmp_less_equal.md
index 22b3897bb..1caa8cd4f 100644
--- a/reference/utility/cmp_less_equal.md
+++ b/reference/utility/cmp_less_equal.md
@@ -12,15 +12,18 @@ namespace std {
 ```
 
 ## 概要
-整数に対して安全に、左辺が右辺以下かを比較する。
+整数に対して安全に、左辺が右辺以下かを比較（`t &amp;lt;= u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
 ```cpp
 std::vector&amp;lt;X&amp;gt; v;
 
-// 警告：式`i &amp;lt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
-for (int i = 0; i &amp;lt; v.size(); ++i) {}
+// 警告：式`i &amp;lt;= v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
+for (int i = 0; i &amp;lt;= v.size(); ++i) {}
+
+// OK
+for (int i = 0; cmp_less_equal(i, v.size()); ++i) {}
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cmp_not_equal -- 整数型比較関数の説明と例の改善</title>
      <link href="https://cpprefjp.github.io/reference/utility/cmp_not_equal.html"/>
      <id>991f1aca8f13b5d922ae94a2c51cdf043591c870:reference/utility/cmp_not_equal.md</id>
      <updated>2023-02-03T16:43:28+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/utility/cmp_not_equal.md b/reference/utility/cmp_not_equal.md
index 642235b50..5a6ca5754 100644
--- a/reference/utility/cmp_not_equal.md
+++ b/reference/utility/cmp_not_equal.md
@@ -12,15 +12,19 @@ namespace std {
 ```
 
 ## 概要
-整数を安全に非等値比較する。
+整数を安全に非等値比較（`t != u`）する。
 
 この関数は、型`T`と型`U`がそれぞれ符号付き整数と符号なし整数のどちらであったとしても、安全に比較できる関数である。以下のように符号付き整数のインデックス変数と符号なし整数の配列要素数の比較によってコンパイラに警告が出力されてしまうような状況で使用できる：
 
 ```cpp
 std::vector&amp;lt;X&amp;gt; v;
+int N = 0;
 
-// 警告：式`i &amp;lt; v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
-for (int i = 0; i &amp;lt; v.size(); ++i) {}
+// 警告：式`i != v.size()`で、符号付き整数と符号なし整数の間で比較しようとした
+if (N != v.size()) {}
+
+// OK
+if (std::cmp_not_equal(N, v.size())) {}
 ```
 
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>onihusube</name>
        <email>44743040+onihusube@users.noreply.github.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind -- Merge pull request #1118 from cpprefjp/yumetodo-patch-1</title>
      <link href="https://cpprefjp.github.io/reference/functional/bind.html"/>
      <id>4adfa0ae5a303944a0218f0f04f5f8e526157e18:reference/functional/bind.md</id>
      <updated>2023-02-02T18:29:06+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/bind.md b/reference/functional/bind.md
index 0201f3493..9808b53cc 100644
--- a/reference/functional/bind.md
+++ b/reference/functional/bind.md
@@ -66,16 +66,34 @@ int add(int a, int b, int c)
   return a + b + c;
 }
 
+class Foo {
+public:
+  int n;
+  Foo(int n) : n(n) {}
+  Foo add(int n2) const
+  {
+    return this-&amp;gt;n + n2;
+  }
+};
+
 int main()
 {
   // 第1引数のみを先に渡す
   using namespace std::placeholders;
-  std::function&amp;lt;int(int, int)&amp;gt; f = std::bind(add, 2, _1, _2);
+  std::function&amp;lt;int(int, int)&amp;gt; f1 = std::bind(add, 2, _1, _2);
+
+  // 残りの引数を渡して関数を呼び出す
+  const int result1 = f1(3, 4);
+
+  Foo foo{2};
+
+  // thisにするもののみを先に渡す
+  std::function&amp;lt;Foo(int)&amp;gt; f2 = std::bind(&amp;amp;Foo::add, foo, _1);
 
   // 残りの引数を渡して関数を呼び出す
-  const int result = f(3, 4);
+  const auto result2 = f2(3);
 
-  std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; result1 &amp;lt;&amp;lt; &amp;#39;,&amp;#39; &amp;lt;&amp;lt; result2.n &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::bind[color ff0000]
@@ -84,7 +102,7 @@ int main()
 
 ### 出力
 ```
-9
+9,5
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr ラムダ -- Merge pull request #1119 from cpprefjp/fix-typo-constexpr-lambda</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/constexpr_lambda.html"/>
      <id>647578bc1154692dd21ec146709f969697b698eb:lang/cpp17/constexpr_lambda.md</id>
      <updated>2023-02-02T18:25:23+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/constexpr_lambda.md b/lang/cpp17/constexpr_lambda.md
index ffc7e4cc5..1f5ec0f3a 100644
--- a/lang/cpp17/constexpr_lambda.md
+++ b/lang/cpp17/constexpr_lambda.md
@@ -86,7 +86,7 @@ int main(){
 
 constexpr lambdaはSFINAEの文脈で用いる事はできない。
 
-以下のような記述を許可してしまうとあらゆる文や式が実体化に成功するかをチェックでてしまうため、禁止されている。
+以下のような記述を許可してしまうとあらゆる文や式が実体化に成功するかをチェックできてしまうため、禁止されている。
 
 ```cpp
 // エラー、SFINAEの文脈でconstexprラムダが使われている
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr ラムダ -- fix typo in constexpr_lambda.md</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/constexpr_lambda.html"/>
      <id>40638a63cdf1948f5f77277d07f504a34e7f7974:lang/cpp17/constexpr_lambda.md</id>
      <updated>2023-02-02T17:52:37+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/constexpr_lambda.md b/lang/cpp17/constexpr_lambda.md
index ffc7e4cc5..1f5ec0f3a 100644
--- a/lang/cpp17/constexpr_lambda.md
+++ b/lang/cpp17/constexpr_lambda.md
@@ -86,7 +86,7 @@ int main(){
 
 constexpr lambdaはSFINAEの文脈で用いる事はできない。
 
-以下のような記述を許可してしまうとあらゆる文や式が実体化に成功するかをチェックでてしまうため、禁止されている。
+以下のような記述を許可してしまうとあらゆる文や式が実体化に成功するかをチェックできてしまうため、禁止されている。
 
 ```cpp
 // エラー、SFINAEの文脈でconstexprラムダが使われている
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Kotaro Yoshimoto</name>
        <email>pythagora.yoshimoto@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>bind -- feat: std::bindでメンバー関数を呼び出す方法を例に追加</title>
      <link href="https://cpprefjp.github.io/reference/functional/bind.html"/>
      <id>41369956550951a19b948397109d022c383e7f3d:reference/functional/bind.md</id>
      <updated>2023-02-02T16:08:21+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/functional/bind.md b/reference/functional/bind.md
index 0201f3493..9808b53cc 100644
--- a/reference/functional/bind.md
+++ b/reference/functional/bind.md
@@ -66,16 +66,34 @@ int add(int a, int b, int c)
   return a + b + c;
 }
 
+class Foo {
+public:
+  int n;
+  Foo(int n) : n(n) {}
+  Foo add(int n2) const
+  {
+    return this-&amp;gt;n + n2;
+  }
+};
+
 int main()
 {
   // 第1引数のみを先に渡す
   using namespace std::placeholders;
-  std::function&amp;lt;int(int, int)&amp;gt; f = std::bind(add, 2, _1, _2);
+  std::function&amp;lt;int(int, int)&amp;gt; f1 = std::bind(add, 2, _1, _2);
+
+  // 残りの引数を渡して関数を呼び出す
+  const int result1 = f1(3, 4);
+
+  Foo foo{2};
+
+  // thisにするもののみを先に渡す
+  std::function&amp;lt;Foo(int)&amp;gt; f2 = std::bind(&amp;amp;Foo::add, foo, _1);
 
   // 残りの引数を渡して関数を呼び出す
-  const int result = f(3, 4);
+  const auto result2 = f2(3);
 
-  std::cout &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl;
+  std::cout &amp;lt;&amp;lt; result1 &amp;lt;&amp;lt; &amp;#39;,&amp;#39; &amp;lt;&amp;lt; result2.n &amp;lt;&amp;lt; std::endl;
 }
 ```
 * std::bind[color ff0000]
@@ -84,7 +102,7 @@ int main()
 
 ### 出力
 ```
-9
+9,5
 ```
 
 ## バージョン
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>yumetodo</name>
        <email>yume-wikijp@live.jp</email>
      </author>
    </entry>
  
</feed>
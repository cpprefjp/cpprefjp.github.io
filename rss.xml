<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2024-04-07T05:02:39.499943</updated>
  <id>92f59377-097d-47f0-a87f-3180fc02e1cb</id>

  
    <entry>
      <title>format_to_n -- 実装例を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/format_to_n.html"/>
      <id>8e148d172551919f6053af466778fe544ce9fe97:reference/format/format_to_n.md</id>
      <updated>2024-04-07T13:58:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/format_to_n.md b/reference/format/format_to_n.md
index 59b29c5eb..3647d188f 100644
--- a/reference/format/format_to_n.md
+++ b/reference/format/format_to_n.md
@@ -111,6 +111,74 @@ int main()
 The answer is 42.
 ```
 
+
+## 実装例
+
+```cpp
+template&amp;lt;class CharT, class Out&amp;gt;
+class Wrapper {
+  std::iter_difference_t&amp;lt;Out&amp;gt; count_ = 0;
+  std::iter_difference_t&amp;lt;Out&amp;gt; max_count_;
+  Out out_;
+  
+public:
+  using value_type = CharT;
+
+  Wrapper(Out out, std::iter_difference_t&amp;lt;Out&amp;gt; max_count)
+    : max_count_(max_count)
+    , out_(std::move(out))
+  {}
+
+  constexpr void push_back(const value_type&amp;amp; value) {
+    if (count_ &amp;lt; max_count_) {
+      *out_ = value;
+      ++out_;
+    }
+    ++count_;
+  }
+
+  constexpr std::format_to_n_result&amp;lt;Out&amp;gt; result() const {
+    return {out_, count_};
+  }
+};
+
+template&amp;lt;class Out, class... Args&amp;gt;
+format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, format_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args) {
+  Wrapper&amp;lt;char, Out&amp;gt; wrapper(out, n);
+  format_to(back_inserter(wrapper), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return wrapper.result();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, wformat_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args) {
+  Wrapper&amp;lt;wchar_t, Out&amp;gt; wrapper(out, n);
+  format_to(back_inserter(wrapper), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return wrapper.result();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args) {
+  Wrapper&amp;lt;char, Out&amp;gt; wrapper(out, n);
+  format_to(back_inserter(wrapper), loc, fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return wrapper.result();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+format_to_n_result&amp;lt;Out&amp;gt; format_to_n(Out out, iter_difference_t&amp;lt;Out&amp;gt; n, const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, Args&amp;amp;&amp;amp;... args) {
+  Wrapper&amp;lt;wchar_t, Out&amp;gt; wrapper(out, n);
+  format_to(back_inserter(wrapper), loc, fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return wrapper.result();
+}
+```
+* format_string[link basic_format_string.md]
+* wformat_string[link basic_format_string.md]
+* format_to[link format_to.md]
+* locale[link /reference/locale/locale.md]
+* forward[link /reference/utility/forward.md]
+* back_inserter[link /reference/iterator/back_inserter.md]
+* iter_difference_t[link /reference/iterator/iter_difference_t.md]
+
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>formatted_size -- 実装例を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/formatted_size.html"/>
      <id>8e148d172551919f6053af466778fe544ce9fe97:reference/format/formatted_size.md</id>
      <updated>2024-04-07T13:58:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/formatted_size.md b/reference/format/formatted_size.md
index 0229779fa..5680ed13e 100644
--- a/reference/format/formatted_size.md
+++ b/reference/format/formatted_size.md
@@ -78,6 +78,59 @@ int main()
 17
 ```
 
+## 実装例
+
+```cpp
+template&amp;lt;class CharT&amp;gt;
+class Counter {
+  size_t count_ = 0;
+public:
+  using value_type = CharT;
+
+  constexpr void push_back(const value_type&amp;amp;) {
+    count_++;
+  }
+
+  constexpr size_t size() const {
+    return count_;
+  }
+};
+
+template&amp;lt;class Out, class... Args&amp;gt;
+size_t formatted_size(format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args) {
+  Counter&amp;lt;char&amp;gt; counter;
+  format_to(back_inserter(counter), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return counter.size();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+size_t formatted_size(wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args) {
+  Counter&amp;lt;wchar_t&amp;gt; counter;
+  format_to(back_inserter(counter), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return counter.size();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+size_t formatted_size(const locale&amp;amp; loc, format_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args) {
+  Counter&amp;lt;char&amp;gt; counter;
+  format_to(loc, back_inserter(counter), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return counter.size();
+}
+
+template&amp;lt;class Out, class... Args&amp;gt;
+size_t formatted_size(const locale&amp;amp; loc, wformat_string&amp;lt;Args...&amp;gt; fmt, const Args&amp;amp;... args) {
+  Counter&amp;lt;wchar_t&amp;gt; counter;
+  format_to(loc, back_inserter(counter), fmt, forward&amp;lt;Args&amp;gt;(args)...);
+  return counter.size();
+}
+```
+* format_string[link basic_format_string.md]
+* wformat_string[link basic_format_string.md]
+* format_to[link format_to.md]
+* locale[link /reference/locale/locale.md]
+* forward[link /reference/utility/forward.md]
+* back_inserter[link /reference/iterator/back_inserter.md]
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat -- 実装例を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat.html"/>
      <id>8e148d172551919f6053af466778fe544ce9fe97:reference/format/vformat.md</id>
      <updated>2024-04-07T13:58:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat.md b/reference/format/vformat.md
index 0d2f9fc87..54a2f69bc 100644
--- a/reference/format/vformat.md
+++ b/reference/format/vformat.md
@@ -44,6 +44,43 @@ namespace std {
 
 フォーマット実行時に失敗した場合、[`format_error`](format_error.md)を投げる。
 
+## 実装例
+
+```cpp
+string vformat(string_view fmt, format_args args) {
+  string str;
+  vformat_to(back_inserter(str), fmt.str, args);
+  return str;
+}
+
+string vformat(wstring_view fmt, wformat_args args) {
+  wstring str;
+  vformat_to(back_inserter(str), fmt.str, args);
+  return str;
+}
+
+string vformat(const locale&amp;amp; loc, string_view fmt, format_args args) {
+  string str;
+  vformat_to(loc, back_inserter(str), fmt.str, args);
+  return str;
+}
+
+string vformat(const locale&amp;amp; loc, wstring_view fmt, wformat_args args) {
+  wstring str;
+  vformat_to(loc, back_inserter(str), fmt.str, args);
+  return str;
+}
+```
+* string[link /reference/string/basic_string.md]
+* wstring[link /reference/string/basic_string.md]
+* string_view[link /reference/string_view/basic_string_view.md]
+* wstring_view[link /reference/string_view/basic_string_view.md]
+* format_args[link /reference/format/basic_format_args.md]
+* wformat_args[link /reference/format/basic_format_args.md]
+* locale[link /reference/locale/locale.md]
+* vformat_to[link vformat.md]
+* back_inserter[link /reference/iterator/back_inserter.md]
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat_to -- リンク追加</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat_to.html"/>
      <id>8ca314b28b9137c18bb99d7f1b9c372243606cd4:reference/format/vformat_to.md</id>
      <updated>2024-04-02T07:47:03+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat_to.md b/reference/format/vformat_to.md
index e6a3e14a7..dd565dd0d 100644
--- a/reference/format/vformat_to.md
+++ b/reference/format/vformat_to.md
@@ -154,6 +154,8 @@ Out vformat_to(Out out, std::string_view fmt, std::basic_format_args&amp;lt;Context&amp;gt; ar
 * std::basic_format_parse_context[link /reference/format/basic_format_parse_context.md]
 * std::basic_format_context[link /reference/format/basic_format_context.md]
 * std::basic_format_args[link /reference/format/basic_format_args.md]
+* std::basic_format_arg[link /reference/format/basic_format_arg.md]
+* handle[link /reference/format/basic_format_arg/handle.md]
 * std::visit_format_arg[link /reference/format/visit_format_arg.md]
 * std::from_chars[link /reference/charconv/from_chars.md]
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat_to -- Fix error</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat_to.html"/>
      <id>963ad2b66de478007b52277909109a1f1c770f2b:reference/format/vformat_to.md</id>
      <updated>2024-04-02T07:45:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat_to.md b/reference/format/vformat_to.md
index 78737ce05..e6a3e14a7 100644
--- a/reference/format/vformat_to.md
+++ b/reference/format/vformat_to.md
@@ -90,7 +90,7 @@ struct ArgVisitor {
   }
 };
 
-template&amp;lt;std::output_iterator&amp;lt;char&amp;gt; Out, class Context = basic_format_context&amp;lt;Out, char&amp;gt;&amp;gt;
+template&amp;lt;std::output_iterator&amp;lt;char&amp;gt; Out, class Context = std::basic_format_context&amp;lt;Out, char&amp;gt;&amp;gt;
 Out vformat_to(Out out, std::string_view fmt, std::basic_format_args&amp;lt;Context&amp;gt; args) {
   using ParseContext = std::basic_format_parse_context&amp;lt;decltype(fmt)::value_type&amp;gt;;
   ParseContext pctx{fmt};
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vformat_to -- 実装例を追加</title>
      <link href="https://cpprefjp.github.io/reference/format/vformat_to.html"/>
      <id>5398590e45f46a3ceeebed25fc7e23c6f1c6a893:reference/format/vformat_to.md</id>
      <updated>2024-04-02T07:35:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/format/vformat_to.md b/reference/format/vformat_to.md
index ce3287278..78737ce05 100644
--- a/reference/format/vformat_to.md
+++ b/reference/format/vformat_to.md
@@ -65,6 +65,98 @@ namespace std {
 
 書式文字列が正しくなかったり、フォーマット実行時に失敗したりした場合、[`format_error`](format_error.md)を投げる。
 
+## 実装例
+
+```cpp
+template&amp;lt;class ParseContext, class FormatContext&amp;gt;
+struct ArgVisitor {
+  ParseContext&amp;amp; pctx;
+  FormatContext&amp;amp; fctx;
+
+  void operator()(std::monostate) {
+  }
+
+  using handle = std::basic_format_arg&amp;lt;FormatContext&amp;gt;::handle;
+  void operator()(const handle&amp;amp; handle) {
+    handle.format(pctx, fctx);
+  }
+
+  template&amp;lt;class T&amp;gt;
+  void operator()(const T&amp;amp; arg) {
+    using Formatter = FormatContext::template formatter_type&amp;lt;T&amp;gt;;
+    Formatter formatter;
+    pctx.advance_to(formatter.parse(pctx));
+    fctx.advance_to(formatter.format(arg, fctx));
+  }
+};
+
+template&amp;lt;std::output_iterator&amp;lt;char&amp;gt; Out, class Context = basic_format_context&amp;lt;Out, char&amp;gt;&amp;gt;
+Out vformat_to(Out out, std::string_view fmt, std::basic_format_args&amp;lt;Context&amp;gt; args) {
+  using ParseContext = std::basic_format_parse_context&amp;lt;decltype(fmt)::value_type&amp;gt;;
+  ParseContext pctx{fmt};
+  Context fctx{out, args}; // このコンストラクタの存在は未規定
+  ArgVisitor&amp;lt;ParseContext, Context&amp;gt; visitor{pctx, fctx};
+
+  size_t next_arg_index = 0;
+  while (!std::ranges::empty(pctx)) {
+    auto it = pctx.begin();
+    if (*it == &amp;#39;{&amp;#39;) {
+      ++it;
+      if (it == pctx.end()) {
+        throw std::format_error(&amp;#34;invalid format&amp;#34;);
+      } else if (*it != &amp;#39;{&amp;#39;) {
+        // インデックスを解析する
+        size_t index;
+        if (auto [ptr, ec] = std::from_chars(it, pctx.end(), index); ec == std::errc{}) {
+          it += (ptr - std::to_address(it));
+          pctx.check_arg_id(index);
+        } else {
+          index = next_arg_index;
+          pctx.next_arg_id();
+          ++next_arg_index;
+        }
+        // オプション開始マークを解析する
+        if (it == pctx.end()) {
+          throw std::format_error(&amp;#34;invalid format&amp;#34;);
+        } else if (*it == &amp;#39;:&amp;#39;) {
+          ++it;
+        } else if (*it != &amp;#39;}&amp;#39;) {
+          throw std::format_error(&amp;#34;invalid format&amp;#34;);
+        }
+        pctx.advance_to(it);
+        // フォーマッターを呼び出す
+        std::visit_format_arg(visitor, args.get(index));
+        // 置換フィールドの終端を解析する
+        if (it == pctx.end() || *it != &amp;#39;}&amp;#39;) {
+          throw std::format_error(&amp;#34;invalid format&amp;#34;);
+        }
+        pctx.advance_to(++it);
+        continue;
+      }
+    } else if (*it == &amp;#39;}&amp;#39;) {
+      ++it;
+      if (it == pctx.end() || *it != &amp;#39;}&amp;#39;) {
+        throw std::format_error(&amp;#34;invalid format&amp;#34;);
+      }
+    }
+    *out = *it;
+    pctx.advance_to(++it);
+    fctx.advance_to(++out);
+  }
+  return out;
+}
+```
+* pctx.advance_to[link /reference/format/basic_format_parse_context/advance_to.md]
+* fctx.advance_to[link /reference/format/basic_format_context/advance_to.md]
+* formatter.parse[link /reference/format/formatter/parse.md]
+* formatter.format[link /reference/format/formatter/format.md]
+* std::format_error[link /reference/format/format_error.md]
+* std::basic_format_parse_context[link /reference/format/basic_format_parse_context.md]
+* std::basic_format_context[link /reference/format/basic_format_context.md]
+* std::basic_format_args[link /reference/format/basic_format_args.md]
+* std::visit_format_arg[link /reference/format/visit_format_arg.md]
+* std::from_chars[link /reference/charconv/from_chars.md]
+
 ## バージョン
 ### 言語
 - C++20
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Tetsuro Matsumura</name>
        <email>matsumura.t.lab@gmail.com</email>
      </author>
    </entry>
  
</feed>
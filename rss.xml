<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="http://cpprefjp.github.io" />
  <updated>2015-02-27T15:23:09.621798</updated>
  <id>94291901-6707-483f-8618-1bb27045bd47</id>

  
    <entry>
      <title>is_trivial (C++11) -- is_trivially(_copyable) : C++14に対応し、要件の間違いを修正。 仕様の間違い修正であるため、C++14表記なし。</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_trivial.html"/>
      <id>d8692da65325d0c33eb9ec16e16ad4848b15bc60:reference/type_traits/is_trivial.md</id>
      <updated>2015-02-27 15:22:49 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;is_trivial (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;type_traits[meta header]&lt;/li&gt;
&lt;li&gt;std[meta namespace]&lt;/li&gt;
&lt;li&gt;class template[meta id-type]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_trivial;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がトリビアル型か調べる。自明型は、トリビアルコピー可能、かつトリビアルなデフォルトコンストラクタを持つ型、およびそのcv修飾を含む。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_all_extents.html&#34;&gt;&lt;code&gt;remove_all_extents&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt;は、完全型か、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_trivial&lt;/code&gt;は、型&lt;code&gt;T&lt;/code&gt;がトリビアル型であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;スカラ型は、トリビアル型の要件を満たす。トリビアル型の配列は、トリビアル型の要件を満たす。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == true, int is trivial&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value_type, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value_type == bool&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;type, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;true_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;type == true_type&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;is_trivial&amp;lt;int&amp;gt;() == true&#34;&lt;/span&gt;);

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == false, int&amp;amp; is not trivial&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value_type, &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value_type == bool&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_same&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;type, std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;false_type&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;type == false_type&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;is_trivial&amp;lt;int&amp;amp;&amp;gt;() == false&#34;&lt;/span&gt;);

static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == true, const volatile int is trivial&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == true, int&amp;amp; is not trivial&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;trivial_class&lt;/span&gt;{};
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; non_trivial_class {
  non_trivial_class() {}    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルトコンストラクタが非トリビアル&lt;/span&gt;
};
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;trivial_class&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == true, trivial_class is trivial&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivial&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;non_trivial_class&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value == true, non_trivial_class is not trivial&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;(){}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.3.4, 4.5.3, 4.6.2, 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;備考&lt;/h4&gt;
&lt;p&gt;上の例でコンパイラによってはエラーになる。GCC 4.3.4, 4.5.3, Visual C++ 10.0 は &lt;code&gt;integral_constant&lt;/code&gt; が &lt;code&gt;operator bool()&lt;/code&gt; を持っていないためエラーになる。&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2015&#34; target=&#34;_blank&#34;&gt;LWG Issue 2015. Incorrect pre-conditions for some type traits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11では要件が「型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。」だったが、これは間違いであるため、C++14で「型&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_all_extents.html&#34;&gt;&lt;code&gt;remove_all_extents&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt;は、完全型か、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;でなければならない。」に変更された。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>is_trivially_copyable (C++11) -- is_trivially(_copyable) : C++14に対応し、要件の間違いを修正。 仕様の間違い修正であるため、C++14表記なし。</title>
      <link href="http://cpprefjp.github.io/reference/type_traits/is_trivially_copyable.html"/>
      <id>d8692da65325d0c33eb9ec16e16ad4848b15bc60:reference/type_traits/is_trivially_copyable.md</id>
      <updated>2015-02-27 15:22:49 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;is_trivially_copyable (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;type_traits[meta header]&lt;/li&gt;
&lt;li&gt;std[meta namespace]&lt;/li&gt;
&lt;li&gt;class template[meta id-type]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_trivially_copyable;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;T&lt;/code&gt;がトリビアルコピー可能か調べる。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;型&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_all_extents.html&#34;&gt;&lt;code&gt;remove_all_extents&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt;は、完全型か、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;でなければならない。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;is_trivially_copyable&lt;/code&gt;は、&lt;code&gt;T&lt;/code&gt;がトリビアルコピー可能な型であるならば&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;true_type&lt;/code&gt;&lt;/a&gt;から派生し、そうでなければ&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/integral_constant-true_type-false_type.html&#34;&gt;&lt;code&gt;false_type&lt;/code&gt;&lt;/a&gt;から派生する。&lt;br /&gt;
「トリビアルコピー可能な型」とは、「&lt;code&gt;std::memcpy()&lt;/code&gt;可能な型である」と言い換えることもできる。これに分類される型は、以下の全ての条件を満たす必要がある：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非トリビアルなコピーコンストラクタを持っていないこと&lt;/li&gt;
&lt;li&gt;非トリビアルなムーブコンストラクタを持っていないこと&lt;/li&gt;
&lt;li&gt;非トリビアルなコピー代入演算子を持っていないこと&lt;/li&gt;
&lt;li&gt;非トリビアルなムーブ代入演算子を持っていないこと&lt;/li&gt;
&lt;li&gt;トリビアルなデストラクタを持っていること&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;トリビアル(trivial)な特殊関数(コンストラクタ、代入演算子、デストラクタ)とは、「ユーザー定義されない特殊関数」のことを意味する。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;type_traits&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; C1 {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルな特殊関数を持っていない&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 特殊関数ではないメンバ関数は持っている&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; f(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x; }
};

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; C2 {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// トリビアルな特殊関数(デストラクタ)を持っている&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;~&lt;/span&gt;C2() {}
};

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 組み込み型は全てトリビアルコピー可能&lt;/span&gt;
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copyable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int is trivially copyable&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copyable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;*&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;int* is trivially copyable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ユーザー定義型は、ユーザー定義の特殊関数を持っていなければトリビアルコピー可能&lt;/span&gt;
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copyable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;C1&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C1 is trivially copyable&#34;&lt;/span&gt;);
static_assert(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;is_trivially_copyable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;C2&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;::&lt;/span&gt;value &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;C2 isn&#39;t trivially copyable&#34;&lt;/span&gt;);

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang, C++11 mode&lt;/a&gt;: 3.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++11 mode&lt;/a&gt;: 5.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2015&#34; target=&#34;_blank&#34;&gt;LWG Issue 2015. Incorrect pre-conditions for some type traits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11では要件が「型&lt;code&gt;T&lt;/code&gt;は完全型であるか、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;か、要素数不明の配列型でなければならない。」だったが、これは間違いであるため、C++14で「型&lt;a href=&#34;http://cpprefjp.github.io/reference/type_traits/remove_all_extents.html&#34;&gt;&lt;code&gt;remove_all_extents&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt;は、完全型か、&lt;code&gt;const&lt;/code&gt;/&lt;code&gt;volatile&lt;/code&gt;修飾された(あるいはされていない)&lt;code&gt;void&lt;/code&gt;でなければならない。」に変更された。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>remove_if -- 実装例が同じオブジェクトをmoveする可能性があったので修正</title>
      <link href="http://cpprefjp.github.io/reference/algorithm/remove_if.html"/>
      <id>fab3f2d4acbd87fbf157106400d52d3dae114f39:reference/algorithm/remove_if.md</id>
      <updated>2015-02-27 12:57:03 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;remove_if&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;algorithm[meta header]&lt;/li&gt;
&lt;li&gt;std[meta namespace]&lt;/li&gt;
&lt;li&gt;function template[meta id-type]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
  ForwardIterator remove_if(ForwardIterator first, ForwardIterator last, Predicate pred);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;条件を満たす要素を除ける。&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*first&lt;/code&gt; の型は &lt;code&gt;MoveAssignable&lt;/code&gt; の要件を満たす必要がある&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[first,last)&lt;/code&gt; 内にあるイテレータ &lt;code&gt;i&lt;/code&gt; について、&lt;code&gt;pred(*i) != false&lt;/code&gt; である要素を取り除き、有効な要素を範囲の前に寄せる。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;有効な要素の末尾の次を指すイテレータを返す。&lt;/p&gt;
&lt;h2&gt;計算量&lt;/h2&gt;
&lt;p&gt;正確に &lt;code&gt;last - first&lt;/code&gt; 回の述語の適用を行う&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;安定。&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;p&gt;有効な要素を範囲の前方に集める処理には、ムーブを使用する。&lt;/p&gt;
&lt;p&gt;取り除いた要素の先頭を指すイテレータを&lt;code&gt;ret&lt;/code&gt;とし、範囲&lt;code&gt;[ret, last)&lt;/code&gt;の各要素には、有効な要素からムーブされた値が設定される。それらの値は、「有効だが未規定な値」となる。&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; v &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; };

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#ff0000&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#ff0000&#34;&gt;remove_if&lt;/span&gt;(v.begin(), v.end(),
    [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; x&lt;span style=&#34;color: #666666&#34;&gt;%2&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; });

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [v.begin(),&lt;span style=&#34;color:#ff0000&#34;&gt;result&lt;/span&gt;) の範囲に奇数を除去した結果が入っている&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;for_each(v.begin(), &lt;span style=&#34;color:#ff0000&#34;&gt;result&lt;/span&gt;, [](&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; x) { std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; x &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;,&#34;&lt;/span&gt;; });
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// remove を使ってもコンテナの要素数は変わらないことに注意しよう&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;size before: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [v.begin(),&lt;span style=&#34;color:#ff0000&#34;&gt;result&lt;/span&gt;) の範囲に奇数を除去した結果が入っているので、&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// [&lt;span style=&#34;color:#ff0000&#34;&gt;result&lt;/span&gt;,v.end()) を erase することでサイズも変更することができる&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// （Erase-remove イディオム）&lt;/span&gt;
  &lt;span style=&#34;color:#ff0000&#34;&gt;v.erase(result, v.end());&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;size after: &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v.size() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;2,2,
size before: 5
size after: 2
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;実装例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ForwardIterator&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Predicate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
ForwardIterator remove_if(ForwardIterator first, ForwardIterator last, Predicate pred) {
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;auto&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; first;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; ( ; first &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; last; &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;first)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;pred(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first))
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (first &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; result)
        &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;result;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;result&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; move(&lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;first);
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; result;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;参照&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2110&#34; target=&#34;_blank&#34;&gt;LWG Issue 2110. &lt;code&gt;remove&lt;/code&gt; can&#39;t swap but note says it might&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;C++11までのこのアルゴリズムは、要素の移動にswap操作が行われるかもしれない、と書いていた。だが、このアルゴリズムの要件は&lt;code&gt;MoveAssignable&lt;/code&gt;のみであるため、swapはできない。そのため、C++14からは、ムーブのみで要素の移動が行われるようになった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>melpon</name>
        <email>shigemasa7watanabe+github@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= (C++11) -- error_conditionのコンストラクタ : オーバーロードの書き方を、ほかに合わせた</title>
      <link href="http://cpprefjp.github.io/reference/system_error/error_condition/op_assign.html"/>
      <id>b2c75f58d65f7d83fba2ae5a1962ee0dc47751d5:reference/system_error/error_condition/op_assign.md</id>
      <updated>2015-02-26 23:25:40 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;operator= (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;system_error[meta header]&lt;/li&gt;
&lt;li&gt;std[meta namespace]&lt;/li&gt;
&lt;li&gt;error_condition[meta class]&lt;/li&gt;
&lt;li&gt;function[meta id-type]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ErrorConditionEnum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
error_condition&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(ErrorConditionEnum e) noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;エラー値を代入する&lt;/p&gt;
&lt;h2&gt;要件&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/is_error_condition_enum.html&#34;&gt;&lt;code&gt;is_error_condition_enum&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;ErrorConditionEnum&amp;gt;::value == true&lt;/code&gt;であること。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;false&lt;/code&gt;だった場合、この関数はオーバーロード解決から除外される。&lt;/p&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this =&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/make_error_condition.html&#34;&gt;&lt;code&gt;make_error_condition&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(e)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;system_error&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_condition ec;

  ec &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (ec) {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;error
22
generic
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>explicit operator bool (C++11) -- error_conditionのコンストラクタ : オーバーロードの書き方を、ほかに合わせた</title>
      <link href="http://cpprefjp.github.io/reference/system_error/error_condition/op_bool.html"/>
      <id>b2c75f58d65f7d83fba2ae5a1962ee0dc47751d5:reference/system_error/error_condition/op_bool.md</id>
      <updated>2015-02-26 23:25:40 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;explicit operator bool (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;system_error[meta header]&lt;/li&gt;
&lt;li&gt;std[meta namespace]&lt;/li&gt;
&lt;li&gt;error_condition[meta class]&lt;/li&gt;
&lt;li&gt;function[meta id-type]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;explicit&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; noexcept;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;error_condition&lt;/code&gt;オブジェクトがエラー状態であるかを判定する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error_condition&lt;/code&gt;クラスのデフォルトエラー値である&lt;code&gt;0&lt;/code&gt;が正常と見なされる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;true&lt;/code&gt;の場合はエラーであることを意味し、&lt;code&gt;false&lt;/code&gt;の場合は正常を意味する。&lt;/p&gt;
&lt;h2&gt;戻り値&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_condition/value.html&#34;&gt;&lt;code&gt;value()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;!= 0&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;system_error&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_condition&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; ec)
{
  &lt;span style=&#34;color:#ff0000&#34;&gt;if (ec)&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error! : &#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.message() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_condition err1;
  print(err1);

  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_condition err2(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument),
                            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generic_category());
  print(err2);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;success
error! : Invalid argument
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- error_conditionのコンストラクタ : オーバーロードの書き方を、ほかに合わせた</title>
      <link href="http://cpprefjp.github.io/reference/system_error/error_condition/op_constructor.html"/>
      <id>b2c75f58d65f7d83fba2ae5a1962ee0dc47751d5:reference/system_error/error_condition/op_constructor.md</id>
      <updated>2015-02-26 23:25:40 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;system_error[meta header]&lt;/li&gt;
&lt;li&gt;std[meta namespace]&lt;/li&gt;
&lt;li&gt;error_condition[meta class]&lt;/li&gt;
&lt;li&gt;function[meta id-type]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;error_condition() noexcept;                                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

error_condition(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_category.html&#34;&gt;error_category&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; cat) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ErrorConditionEnum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
error_condition(ErrorConditionEnum e) noexcept;               &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;error_conditionオブジェクトの構築&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ&lt;/li&gt;
&lt;li&gt;(2) : エラー値とエラーカテゴリを受け取って構築する。&lt;/li&gt;
&lt;li&gt;(3) : &lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/is_error_condition_enum.html&#34;&gt;&lt;code&gt;is_error_condition_enum&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;ErrorCodeEnum&amp;gt;::value == true&lt;/code&gt;となる型のエラー値を受け取って構築する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 値&lt;code&gt;0&lt;/code&gt;(正常値)で構築する。エラーカテゴリは&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/generic_category.html&#34;&gt;&lt;code&gt;generic_category()&lt;/code&gt;&lt;/a&gt;と見なされる。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;*this =&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/make_error_condition.html&#34;&gt;&lt;code&gt;make_error_condition&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(e);&lt;/code&gt; となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(3) : &lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/is_error_condition_enum.html&#34;&gt;&lt;code&gt;is_error_condition_enum&lt;/code&gt;&lt;/a&gt;が&lt;code&gt;false&lt;/code&gt;となる場合、この関数はオーバーロード解決から除外される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;system_error&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルトコンストラクタ&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;default ctor&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_condition ec;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (ec) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー値とエラーカテゴリを受け取って構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value &amp;amp; category ctor&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_condition ec(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument),
                            std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generic_category());

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (ec) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// is_error_condition_enumが特殊化された型のエラー値を受け取って構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ErrorConditionEnum ctor&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_condition ec(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (ec) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;default ctor
success
0
generic

value &amp;amp; category ctor
error
22
generic

ErrorConditionEnum ctor
error
22
generic
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.7.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; 10.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ (C++11) -- error_codeのコンストラクタ： オーバーロードの書き方を、ほかに合わせた</title>
      <link href="http://cpprefjp.github.io/reference/system_error/error_code/op_constructor.html"/>
      <id>9fc331b7629bc57c0b3f7e34c590977f67dea3e4:reference/system_error/error_code/op_constructor.md</id>
      <updated>2015-02-26 23:22:21 +0900</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;コンストラクタ (C++11)&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;ul&gt;
&lt;li&gt;system_error[meta header]&lt;/li&gt;
&lt;li&gt;std[meta namespace]&lt;/li&gt;
&lt;li&gt;error_code[meta class]&lt;/li&gt;
&lt;li&gt;function[meta id-type]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;error_code() noexcept;                                   &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (1)&lt;/span&gt;

error_code(&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; val, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/error_category.html&#34;&gt;error_category&lt;/a&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt; cat) noexcept; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (2)&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ErrorCodeEnum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;
error_code(ErrorCodeEnum e) noexcept;                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// (3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h2&gt;error_codeオブジェクトの構築&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : デフォルトコンストラクタ。&lt;/li&gt;
&lt;li&gt;(2) : エラー値とエラーカテゴリを受け取って構築する。&lt;/li&gt;
&lt;li&gt;(3) : &lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/is_error_code_enum.html&#34;&gt;&lt;code&gt;is_error_code_enum&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;ErrorCodeEnum&amp;gt;::value == true&lt;/code&gt;となる型のエラー値を受け取って構築する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;効果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(1) : 値&lt;code&gt;0&lt;/code&gt;(正常値)で構築する。エラーカテゴリは&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/system_category.html&#34;&gt;&lt;code&gt;system_category()&lt;/code&gt;&lt;/a&gt;と見なされる。&lt;/li&gt;
&lt;li&gt;(3) : &lt;code&gt;*this =&lt;/code&gt;&lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/make_error_code.html&#34;&gt;&lt;code&gt;make_error_code&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(e);&lt;/code&gt; となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例外&lt;/h2&gt;
&lt;p&gt;投げない&lt;/p&gt;
&lt;h2&gt;備考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(3) : &lt;a href=&#34;http://cpprefjp.github.io/reference/system_error/is_error_code_enum.html&#34;&gt;&lt;code&gt;is_error_code_enum&lt;/code&gt;&lt;/a&gt;が&lt;code&gt;false&lt;/code&gt;となる場合、この関数はオーバーロード解決から除外される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例&lt;/h2&gt;
&lt;p&gt;&lt;div class=&#34;codehilite&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;#include &amp;lt;system_error&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;namespace&lt;/span&gt; std {
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// template &amp;lt;class ErrorCodeEnum&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// error_code(ErrorCodeEnum e) noexcept&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// にerrcを渡せるようにするための特殊化&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;struct&lt;/span&gt; is_error_code_enum&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;true_type {};
}

&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; main()
{
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// デフォルトコンストラクタ&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;default ctor&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code ec;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (ec) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// エラー値とエラーカテゴリを受け取って構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;value &amp;amp; category ctor&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code ec(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument),
                       std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;generic_category());

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (ec) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// is_error_code_enumが特殊化された型のエラー値を受け取って構築&lt;/span&gt;
  std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;ErrorCodeEnum ctor&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  {
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;error_code ec(std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;errc&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;invalid_argument);

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (ec) {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;error&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; {
      std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&#34;success&#34;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    }

    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.value() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ec.category().name() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;endl;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;h3&gt;出力&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;default ctor
success
0
system

value &amp;amp; category ctor
error
22
generic

ErrorCodeEnum ctor
error
22
generic
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;バージョン&lt;/h2&gt;
&lt;h3&gt;言語&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;処理系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#clang&#34;&gt;Clang&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC&lt;/a&gt;: &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#gcc&#34;&gt;GCC, C++0x mode&lt;/a&gt;: 4.6.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#icc&#34;&gt;ICC&lt;/a&gt;: ??&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpprefjp.github.io/implementation.html#visual_cpp&#34;&gt;Visual C++&lt;/a&gt; 10.0(enum class未対応のため、ErrorCodeEnumのコンストラクタは動作しない)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参照&lt;/h2&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>
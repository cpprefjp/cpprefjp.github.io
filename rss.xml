<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-10-06T09:32:20.408375</updated>
  <id>f7cb12e8-fd7b-46c1-85f4-af7b1ea55c4e</id>

  
    <entry>
      <title>basic_string -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string.md b/reference/string/basic_string.md
index b4f4b66ab..f6b3e6b66 100644
--- a/reference/string/basic_string.md
+++ b/reference/string/basic_string.md
@@ -231,6 +231,7 @@ namespace std {
 
 
 ## 例
+### 基本的な使い方 (C++03)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;cstdio&amp;gt;
@@ -258,12 +259,34 @@ int main()
 * s.substr[link basic_string/substr.md]
 * s.c_str()[link basic_string/c_str.md]
 
-### 出力
+#### 出力
 ```
 hello
 hello world
 ```
 
+### 定数式内でbasic_stringを使用する (C++20)
+```cpp
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;string&amp;gt;
+
+constexpr bool f()
+{
+  std::string s = &amp;#34;Hello&amp;#34;;
+  s += &amp;#34; World&amp;#34;;
+
+  auto* p = s.data();
+  assert(p);
+
+  return true;
+}
+
+int main()
+{
+  static_assert(f());
+}
+```
+
 ## 参照
 - [N2668 Concurrency Modifications to Basic String](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2668.htm)
     - C++11で、`basic_string`の仕様が、並行実行のパフォーマンスを考慮したものに変更された経緯の提案文書
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>append -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/append.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/append.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/append.md b/reference/string/basic_string/append.md
index 749f03b51..593e99a65 100644
--- a/reference/string/basic_string/append.md
+++ b/reference/string/basic_string/append.md
@@ -5,34 +5,61 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; append(const basic_string&amp;amp; str);                  // (1)
-
-basic_string&amp;amp; append(const basic_string&amp;amp; str,
-                     size_type pos,
-                     size_type n);                              // (2) C++03
-
-basic_string&amp;amp; append(const basic_string&amp;amp; str,
-                     size_type pos,
-                     size_type n = npos);                       // (2) C++14
-
-basic_string&amp;amp; append(const charT* s, size_type n);              // (3)
-
-basic_string&amp;amp; append(const charT* s);                           // (4)
-
-basic_string&amp;amp; append(size_type n, charT c);                     // (5)
+basic_string&amp;amp; append(const basic_string&amp;amp; str);           // (1) C++03
+constexpr basic_string&amp;amp; append(const basic_string&amp;amp; str); // (1) C++20
+
+basic_string&amp;amp;
+  append(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n);             // (2) C++03
+basic_string&amp;amp;
+  append(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n = npos);      // (2) C++14
+constexpr basic_string&amp;amp;
+  append(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n = npos);      // (2) C++20
+
+basic_string&amp;amp; append(const charT* s, size_type n);           // (3) C++03
+constexpr basic_string&amp;amp; append(const charT* s, size_type n); // (3) C++20
+
+basic_string&amp;amp; append(const charT* s);           // (4) C++03
+constexpr basic_string&amp;amp; append(const charT* s); // (4) C++20
+
+basic_string&amp;amp; append(size_type n, charT c);           // (5) C++03
+constexpr basic_string&amp;amp; append(size_type n, charT c); // (5) C++20
 
 template &amp;lt;class InputIterator&amp;gt;
-basic_string&amp;amp; append(InputIterator first, InputIterator last);  // (6)
+basic_string&amp;amp;
+  append(InputIterator first,
+         InputIterator last);  // (6) C++03
+template &amp;lt;class InputIterator&amp;gt;
+constexpr basic_string&amp;amp;
+  append(InputIterator first,
+         InputIterator last);  // (6) C++20
 
-basic_string&amp;amp; append(initializer_list&amp;lt;charT&amp;gt; il);               // (7) C++11
+basic_string&amp;amp; append(initializer_list&amp;lt;charT&amp;gt; il);           // (7) C++11
+constexpr basic_string&amp;amp; append(initializer_list&amp;lt;charT&amp;gt; il); // (7) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; append(const T&amp;amp; t);                               // (8) C++17
+basic_string&amp;amp;
+  append(const T&amp;amp; t);        // (8) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp;
+  append(const T&amp;amp; t);        // (8) C++20
+
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp;
+  append(const T&amp;amp; t,
+        size_type pos,
+        size_type n = npos); / (9) C++17
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; append(const T&amp;amp; t,
-                     size_type pos,
-                     size_type n = npos);                       // (9) C++17
+constexpr basic_string&amp;amp;
+  append(const T&amp;amp; t,
+        size_type pos,
+        size_type n = npos); / (9) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -192,3 +219,4 @@ Hello, world
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(8)(9)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/assign.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/assign.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/assign.md b/reference/string/basic_string/assign.md
index 6db2861d7..0e5cb3015 100644
--- a/reference/string/basic_string/assign.md
+++ b/reference/string/basic_string/assign.md
@@ -5,37 +5,62 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; assign(const basic_string&amp;amp; str);                  // (1)
+basic_string&amp;amp; assign(const basic_string&amp;amp; str);                  // (1) C++03
+constexpr basic_string&amp;amp; assign(const basic_string&amp;amp; str);        // (1) C++20
 
 basic_string&amp;amp; assign(basic_string&amp;amp;&amp;amp; str) noexcept;              // (2) C++11
-
-basic_string&amp;amp; assign(const basic_string&amp;amp; str,
-                     size_type pos,
-                     size_type n);                              // (3) C++03
-
-basic_string&amp;amp; assign(const basic_string&amp;amp; str,
-                     size_type pos,
-                     size_type n = npos);                       // (3) C++14
-
-basic_string&amp;amp; assign(const charT* s, size_type n);              // (4)
-
-basic_string&amp;amp; assign(const charT* s);                           // (5)
-
-basic_string&amp;amp; assign(size_type n, charT c);                     // (6)
+constexpr basic_string&amp;amp; assign(basic_string&amp;amp;&amp;amp; str) noexcept;    // (2) C++20
+
+basic_string&amp;amp;
+  assign(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n);             // (3) C++03
+basic_string&amp;amp;
+  assign(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n = npos);      // (3) C++14
+constexpr basic_string&amp;amp;
+  assign(const basic_string&amp;amp; str,
+         size_type pos,
+         size_type n = npos);      // (3) C++20
+
+basic_string&amp;amp; assign(const charT* s, size_type n);              // (4) C++03
+constexpr basic_string&amp;amp; assign(const charT* s, size_type n);    // (4) C++20
+
+basic_string&amp;amp; assign(const charT* s);                           // (5) C++03
+constexpr basic_string&amp;amp; assign(const charT* s);                 // (5) C++20
+
+basic_string&amp;amp; assign(size_type n, charT c);                     // (6) C++03
+constexpr basic_string&amp;amp; assign(size_type n, charT c);           // (6) C++20
 
 template &amp;lt;class InputIterator&amp;gt;
-basic_string&amp;amp; assign(InputIterator first,
-                     InputIterator last);                       // (7)
+basic_string&amp;amp;
+  assign(InputIterator first,
+         InputIterator last);  // (7) C++03
+template &amp;lt;class InputIterator&amp;gt;
+constexpr basic_string&amp;amp;
+  assign(InputIterator first,
+         InputIterator last);  // (7) C++20
 
-basic_string&amp;amp; assign(initializer_list&amp;lt;charT&amp;gt;);                  // (8) C++11
+basic_string&amp;amp; assign(initializer_list&amp;lt;charT&amp;gt;);           // (8) C++11
+constexpr basic_string&amp;amp; assign(initializer_list&amp;lt;charT&amp;gt;); // (8) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; assign(const T&amp;amp; t);                               // (9) C++17
+basic_string&amp;amp; assign(const T&amp;amp; t);           // (9) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp; assign(const T&amp;amp; t); // (9) C++20
+
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp;
+  assign(const T&amp;amp; t,
+         size_type pos,
+         size_type n = npos);   // (10) C++17
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; assign(const T&amp;amp; t,
-                     size_type pos,
-                     size_type n = npos);                       // (10) C++17
+constexpr basic_string&amp;amp;
+  assign(const T&amp;amp; t,
+         size_type pos,
+         size_type n = npos);   // (10) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -186,3 +211,4 @@ s10 : Hello
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(9)(10)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/at.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/at.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/at.md b/reference/string/basic_string/at.md
index b6a9f618b..0bac62647 100644
--- a/reference/string/basic_string/at.md
+++ b/reference/string/basic_string/at.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-const_reference at(size_type pos) const;
-reference at(size_type pos);
+const_reference at(size_type pos) const;           // (1) C++03
+constexpr const_reference at(size_type pos) const; // (1) C++20
+
+reference at(size_type pos);                       // (2) C++03
+constexpr reference at(size_type pos);             // (2) C++20
 ```
 
 ## 概要
@@ -54,4 +57,4 @@ access error
 ## 参照
 - [LWG Issue 2207. `basic_string::at` should not have a Requires clause](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2207)
     - C++11まで、この関数を呼び出す要件として「`pos &amp;lt; size()`」があったが、例外節があるため要件節は不要。C++14で要件節が削除された。
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>back -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/back.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/back.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/back.md b/reference/string/basic_string/back.md
index 9b598734e..0c565acf6 100644
--- a/reference/string/basic_string/back.md
+++ b/reference/string/basic_string/back.md
@@ -6,8 +6,11 @@
 * cpp11[meta cpp]
 
 ```cpp
-const charT&amp;amp; back() const;
-charT&amp;amp; back();
+const charT&amp;amp; back() const;           // (1) C++11
+constexpr const charT&amp;amp; back() const; // (1) C++20
+
+charT&amp;amp; back();                       // (2) C++11
+constexpr charT&amp;amp; back();             // (2) C++20
 ```
 
 ## 概要
@@ -44,4 +47,4 @@ o
 
 ## 参照
 - [LWG Issue 534. Missing `basic_string` members](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#534)
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/begin.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/begin.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/begin.md b/reference/string/basic_string/begin.md
index f9ee9f8f7..1cfb94876 100644
--- a/reference/string/basic_string/begin.md
+++ b/reference/string/basic_string/begin.md
@@ -7,9 +7,11 @@
 ```cpp
 iterator begin();                      // (1) C++03
 iterator begin() noexcept;             // (1) C++11
+constexpr iterator begin() noexcept;   // (1) C++20
 
-const_iterator begin() const;          // (2) C++03
-const_iterator begin() const noexcept; // (2) C++11
+const_iterator begin() const;                    // (2) C++03
+const_iterator begin() const noexcept;           // (2) C++11
+constexpr const_iterator begin() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -49,3 +51,4 @@ h
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>c_str -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/c_str.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/c_str.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/c_str.md b/reference/string/basic_string/c_str.md
index af19d486c..18bcb2b19 100644
--- a/reference/string/basic_string/c_str.md
+++ b/reference/string/basic_string/c_str.md
@@ -5,9 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-const charT* c_str() const;          // C++03 まで
-
-const charT* c_str() const noexcept; // C++11 から
+const charT* c_str() const;                    // (1) C++03
+const charT* c_str() const noexcept;           // (1) C++11
+constexpr const charT* c_str() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -81,3 +81,4 @@ Hello
 
 ## 参照
 - [LWG Issue 3131. `addressof` all the things](https://wg21.cmeerw.net/lwg/issue3131)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>capacity -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/capacity.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/capacity.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/capacity.md b/reference/string/basic_string/capacity.md
index a1d5c66aa..02722e650 100644
--- a/reference/string/basic_string/capacity.md
+++ b/reference/string/basic_string/capacity.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_type capacity() const;          // C++03
-size_type capacity() const noexcept; // C++11
+size_type capacity() const;                    // (1) C++03
+size_type capacity() const noexcept;           // (1) C++11
+constexpr size_type capacity() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -50,3 +51,4 @@ int main()
 
 ## 参照
 - [LWG Issue 3004. §[string.capacity] and §[vector.capacity] should specify time complexity for `capacity()`](https://wg21.cmeerw.net/lwg/issue3004)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/cbegin.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/cbegin.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/cbegin.md b/reference/string/basic_string/cbegin.md
index d9457de62..3847abd90 100644
--- a/reference/string/basic_string/cbegin.md
+++ b/reference/string/basic_string/cbegin.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_iterator cbegin() const noexcept;
+const_iterator cbegin() const noexcept;           // (1) C++11
+constexpr const_iterator cbegin() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -46,3 +47,4 @@ h
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/cend.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/cend.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/cend.md b/reference/string/basic_string/cend.md
index 57d029a23..0649edf6a 100644
--- a/reference/string/basic_string/cend.md
+++ b/reference/string/basic_string/cend.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_iterator cend() const noexcept;
+const_iterator cend() const noexcept;           // (1) C++11
+constexpr const_iterator cend() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -59,3 +60,4 @@ o
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/clear.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/clear.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/clear.md b/reference/string/basic_string/clear.md
index 2649908ed..0aa0eebcc 100644
--- a/reference/string/basic_string/clear.md
+++ b/reference/string/basic_string/clear.md
@@ -5,7 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-void clear() noexcept;
+void clear();                    // (1) C++03
+void clear() noexcept;           // (1) C++11
+constexpe void clear() noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -47,3 +49,4 @@ int main()
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>compare -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/compare.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/compare.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/compare.md b/reference/string/basic_string/compare.md
index 9e38cd5a4..0b0edf7b6 100644
--- a/reference/string/basic_string/compare.md
+++ b/reference/string/basic_string/compare.md
@@ -5,36 +5,94 @@
 * function[meta id-type]
 
 ```cpp
-int compare(const basic_string&amp;amp; str) const noexcept;                  // (1)
-int compare(size_type pos1, size_type n1,
-            const basic_string&amp;amp; str) const;                           // (2)
-
-int compare(size_type pos1, size_type n1,
-            const basic_string&amp;amp; str,
-            size_type pos2, size_type n2) const;                      // (3) C++11まで
-int compare(size_type pos1, size_type n1,
-            const basic_string&amp;amp; str,
-            size_type pos2, size_type n2 = npos) const;               // (3) C++14から
-
-int compare(const charT* s) const;                                    // (4)
-int compare(size_type pos1, size_type n1,
-            const charT* s) const;                                    // (5)
-int compare(size_type pos1, size_type n1,
-            const charT* s, size_type n2) const;                      // (6)
+int compare(const basic_string&amp;amp; str) const noexcept; // (1) C++03
+constexpr int
+  compare(const basic_string&amp;amp; str) const noexcept;   // (1) C++20
+
+int
+  compare(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str) const; // (2) C++03
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str) const; // (2) C++20
+
+int
+  compare(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2) const;        // (3) C++03
+int
+  compare(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2 = npos) const; // (3) C++14
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2 = npos) const; // (3) C++20
+
+int compare(const charT* s) const;           // (4) C++03
+constexpr int compare(const charT* s) const; // (4) C++03
+
+int
+  compare(size_type pos1,
+          size_type n1,
+          const charT* s) const; // (5) C++03
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const charT* s) const; // (5) C++20
+
+int
+  compare(size_type pos1,
+          size_type n1,
+          const charT* s,
+          size_type n2) const; // (6) C++03
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const charT* s,
+          size_type n2) const; // (6) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-int compare(const T&amp;amp; t) const noexcept(/*see below*/);                // (7) C++17
+int
+  compare(const T&amp;amp; t) const noexcept(下記参照); // (7) C++17
 template&amp;lt;class T&amp;gt;
-int compare(size_type pos1,
-            size_type n1,
-            const T&amp;amp; t) const;                                        // (8) C++17
+constexpr int
+  compare(const T&amp;amp; t) const noexcept(下記参照); // (7) C++20
+
+template&amp;lt;class T&amp;gt;
+int
+  compare(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t) const; // (8) C++17
+template&amp;lt;class T&amp;gt;
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t) const; // (8) C++20
+
+template&amp;lt;class T&amp;gt;
+int
+  compare(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t,
+          size_type pos2,
+          size_type n2 = npos) const; // (9) C++17
 template&amp;lt;class T&amp;gt;
-int compare(size_type pos1,
-            size_type n1,
-            const T&amp;amp; t,
-            size_type pos2,
-            size_type n2 = npos) const;                               // (9) C++17
+constexpr int
+  compare(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t,
+          size_type pos2,
+          size_type n2 = npos) const; // (9) C++20
 ```
 
 ## 概要
@@ -110,3 +168,4 @@ int main()
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(7)(8)(9)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>copy -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/copy.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/copy.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/copy.md b/reference/string/basic_string/copy.md
index 7865bec3d..8290b724b 100644
--- a/reference/string/basic_string/copy.md
+++ b/reference/string/basic_string/copy.md
@@ -5,7 +5,10 @@
 * function[meta id-type]
 
 ```cpp
-size_type copy(charT* s, size_type n, size_type pos = 0) const;
+size_type
+  copy(charT* s, size_type n, size_type pos = 0) const; // (1) C++03
+constexpr size_type
+  copy(charT* s, size_type n, size_type pos = 0) const; // (1) C++20
 ```
 
 ## 概要
@@ -75,4 +78,4 @@ llo
 ```
 
 ## 参照
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/crbegin.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/crbegin.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/crbegin.md b/reference/string/basic_string/crbegin.md
index e9d7a2022..4337da5d9 100644
--- a/reference/string/basic_string/crbegin.md
+++ b/reference/string/basic_string/crbegin.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_reverse_iterator crbegin() const noexcept;
+const_reverse_iterator crbegin() const noexcept;           // (1) C++11
+constexpr const_reverse_iterator crbegin() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -46,3 +47,4 @@ o
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/crend.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/crend.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/crend.md b/reference/string/basic_string/crend.md
index bd415c8ed..868e97a5a 100644
--- a/reference/string/basic_string/crend.md
+++ b/reference/string/basic_string/crend.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_reverse_iterator crend() const noexcept;
+const_reverse_iterator crend() const noexcept;           // (1) C++11
+constexpr const_reverse_iterator crend() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -50,3 +51,4 @@ h
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/data.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/data.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/data.md b/reference/string/basic_string/data.md
index fa3858190..bca8e3b51 100644
--- a/reference/string/basic_string/data.md
+++ b/reference/string/basic_string/data.md
@@ -5,10 +5,12 @@
 * function[meta id-type]
 
 ```cpp
-const charT* data() const;          // (1) C++03
-const charT* data() const noexcept; // (1) C++11
+const charT* data() const;                    // (1) C++03
+const charT* data() const noexcept;           // (1) C++11
+constexpr const charT* data() const noexcept; // (1) C++20
 
-charT* data() noexcept;             // (2) C++17
+charT* data() noexcept;                       // (2) C++17
+constexpr charT* data() noexcept;             // (2) C++20
 ```
 
 ## 概要
@@ -82,3 +84,4 @@ Hello, world!
 ## 参照
 - [P0272R1 Give `std::string` a non-const `.data()` member function.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0272r1.html)
 - [LWG Issue 3131. `addressof` all the things](https://wg21.cmeerw.net/lwg/issue3131)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/empty.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/empty.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/empty.md b/reference/string/basic_string/empty.md
index 1ab046c19..5432d7592 100644
--- a/reference/string/basic_string/empty.md
+++ b/reference/string/basic_string/empty.md
@@ -5,8 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-bool empty() const noexcept;               // C++03
-[[nodiscard]] bool empty() const noexcept; // C++20
+bool empty() const noexcept;                         // C++03
+[[nodiscard]] constexpr bool empty() const noexcept; // C++20
 ```
 
 ## 概要
@@ -47,3 +47,4 @@ int main()
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/end.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/end.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/end.md b/reference/string/basic_string/end.md
index 1f461debe..8438e0c7b 100644
--- a/reference/string/basic_string/end.md
+++ b/reference/string/basic_string/end.md
@@ -7,9 +7,11 @@
 ```cpp
 iterator end();                      // (1) C++03
 iterator end() noexcept;             // (1) C++11
+constexpr iterator end() noexcept;   // (1) C++20
 
-const_iterator end() const;          // (2) C++03
-const_iterator end() const noexcept; // (2) C++11
+const_iterator end() const;                    // (2) C++03
+const_iterator end() const noexcept;           // (2) C++11
+constexpr const_iterator end() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -61,3 +63,4 @@ o
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>ends_with -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/ends_with.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/ends_with.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/ends_with.md b/reference/string/basic_string/ends_with.md
index 056f2dc67..f2119430e 100644
--- a/reference/string/basic_string/ends_with.md
+++ b/reference/string/basic_string/ends_with.md
@@ -6,9 +6,12 @@
 * cpp20[meta cpp]
 
 ```cpp
-bool ends_with(std::basic_string_view&amp;lt;charT, traits&amp;gt; x) const noexcept; // (1)
-bool ends_with(charT x) const noexcept;                                 // (2)
-bool ends_with(const charT* x) const;                                   // (3)
+constexpr bool
+  ends_with(std::basic_string_view&amp;lt;charT, traits&amp;gt; x) const noexcept; // (1) C++20
+constexpr bool
+  ends_with(charT x) const noexcept;                                 // (2) C++20
+constexpr bool
+  ends_with(const charT* x) const;                                   // (3) C++20
 ```
 
 ## 概要
@@ -77,3 +80,4 @@ int main()
 
 ## 参照
 - [P0457R2 String Prefix and Suffix Checking](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0457r2.html)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/erase.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/erase.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/erase.md b/reference/string/basic_string/erase.md
index 7e87fc94a..ae00ecada 100644
--- a/reference/string/basic_string/erase.md
+++ b/reference/string/basic_string/erase.md
@@ -5,13 +5,24 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; erase(size_type pos = 0, size_type n = npos); // (1)
-
-iterator erase(iterator p);       // (2) C++03まで
-iterator erase(const_iterator p); // (2) C++11から
-
-iterator erase(iterator first, iterator last);             // (3) C++03まで
-iterator erase(const_iterator first, const_iterator last); // (3) C++11から
+basic_string&amp;amp;
+  erase(size_type pos = 0, size_type n = npos); // (1) C++03
+constexpr basic_string&amp;amp;
+  erase(size_type pos = 0, size_type n = npos); // (1) C++20
+
+iterator erase(iterator p);                 // (2) C++03
+iterator erase(const_iterator p);           // (2) C++11
+constexpr iterator erase(const_iterator p); // (2) C++20
+
+iterator
+  erase(iterator first,
+        iterator last);       // (3) C++03
+iterator
+  erase(const_iterator first,
+        const_iterator last); // (3) C++11
+constexpr iterator
+  erase(const_iterator first,
+        const_iterator last); // (3) C++20
 ```
 
 ## 概要
@@ -99,4 +110,4 @@ int main()
 - [LWG Issue 180. Container member iterator arguments constness has unintended consequences](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#180)
 - [LWG Issue 2003. String exception inconsistency in erase.](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2003)
     - C++14から(2)と(3)に、「例外を投げない」という保証が追加された経緯のレポート
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/erase_free.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/erase_free.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/erase_free.md b/reference/string/basic_string/erase_free.md
index 23ad3cf09..efd307220 100644
--- a/reference/string/basic_string/erase_free.md
+++ b/reference/string/basic_string/erase_free.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator, class U&amp;gt;
-  typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type
+  constexpr typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type
     erase(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/erase_if_free.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/erase_if_free.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/erase_if_free.md b/reference/string/basic_string/erase_if_free.md
index 5d3133670..2c9ab35ff 100644
--- a/reference/string/basic_string/erase_if_free.md
+++ b/reference/string/basic_string/erase_if_free.md
@@ -7,7 +7,7 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator, class Predicate&amp;gt;
-  typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type
+  constexpr typename basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;::size_type
     erase_if(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; c, Predicate pred);
 }
 ```
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/find.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find.md b/reference/string/basic_string/find.md
index 6dcffc9b2..8f6ffd1c1 100644
--- a/reference/string/basic_string/find.md
+++ b/reference/string/basic_string/find.md
@@ -5,17 +5,48 @@
 * function[meta id-type]
 
 ```cpp
-size_type find(const basic_string&amp;amp; str, size_type pos = 0) const;          // (1) C++03
-size_type find(const basic_string&amp;amp; str, size_type pos = 0) const noexcept; // (1) C++11
-
-size_type find(const charT* s, size_type pos, size_type n) const;          // (2)
-size_type find(const charT* s, size_type pos = 0) const;                   // (3)
-
-size_type find(charT c, size_type pos = 0) const;                          // (4)
+size_type
+  find(const basic_string&amp;amp; str,
+       size_type pos = 0) const;          // (1) C++03
+size_type
+  find(const basic_string&amp;amp; str,
+       size_type pos = 0) const noexcept; // (1) C++11
+constexpr size_type
+  find(const basic_string&amp;amp; str,
+       size_type pos = 0) const noexcept; // (1) C++20
+
+size_type
+  find(const charT* s,
+       size_type pos,
+       size_type n) const; // (2) C++03
+constexpr size_type
+  find(const charT* s,
+       size_type pos,
+       size_type n) const; // (2) C++20
+
+size_type
+  find(const charT* s,
+       size_type pos = 0) const; // (3) C++03
+constexpr size_type
+  find(const charT* s,
+       size_type pos = 0) const; // (3) C++20
+
+size_type
+  find(charT c,
+       size_type pos = 0) const; // (4) C++03
+constexpr size_type
+  find(charT c,
+       size_type pos = 0) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type find(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);   // (5) C++17
+size_type
+  find(const T&amp;amp; t,
+       size_type pos = 0) const noexcept(下記参照);   // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  find(const T&amp;amp; t,
+       size_type pos = 0) const noexcept(下記参照);   // (5) C++20
 ```
 
 ## 概要
@@ -129,3 +160,4 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find(charT c, size_type pos =
 - [P0758R1 Implicit conversion traits and utility functions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0758r1.html)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_not_of -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_first_not_of.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/find_first_not_of.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_first_not_of.md b/reference/string/basic_string/find_first_not_of.md
index 0776a19fe..f3a1df692 100644
--- a/reference/string/basic_string/find_first_not_of.md
+++ b/reference/string/basic_string/find_first_not_of.md
@@ -5,17 +5,48 @@
 * function[meta id-type]
 
 ```cpp
-size_type find_first_not_of(const basic_string&amp;amp; str, size_type pos = 0) const;          // (1) C++03
-size_type find_first_not_of(const basic_string&amp;amp; str, size_type pos = 0) const noexcept; // (1) C++11
-
-size_type find_first_not_of(const charT* s, size_type pos, size_type n) const;          // (2)
-size_type find_first_not_of(const charT* s, size_type pos = 0) const;                   // (3)
-
-size_type find_first_not_of(charT c, size_type pos = 0) const;                          // (4)
+size_type
+  find_first_not_of(const basic_string&amp;amp; str,
+                    size_type pos = 0) const;          // (1) C++03
+size_type
+  find_first_not_of(const basic_string&amp;amp; str,
+                    size_type pos = 0) const noexcept; // (1) C++11
+constexpr size_type
+  find_first_not_of(const basic_string&amp;amp; str,
+                    size_type pos = 0) const noexcept; // (1) C++20
+
+size_type
+  find_first_not_of(const charT* s,
+                    size_type pos,
+                    size_type n) const; // (2) C++03
+constexpr size_type
+  find_first_not_of(const charT* s,
+                    size_type pos,
+                    size_type n) const; // (2) C++20
+
+size_type
+  find_first_not_of(const charT* s,
+                    size_type pos = 0) const; // (3) C++03
+constexpr size_type
+  find_first_not_of(const charT* s,
+                    size_type pos = 0) const; // (3) C++20
+
+size_type
+  find_first_not_of(charT c,
+                    size_type pos = 0) const; // (4) C++03
+constexpr size_type
+  find_first_not_of(charT c,
+                    size_type pos = 0) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type find_first_not_of(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);  // (5) C++17
+size_type
+  find_first_not_of(const T&amp;amp; t,
+                    size_type pos = 0) const noexcept(下記参照); // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  find_first_not_of(const T&amp;amp; t,
+                    size_type pos = 0) const noexcept(下記参照); // (5) C++20
 ```
 
 ## 概要
@@ -120,3 +151,4 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find_first_not_of(charT c, siz
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_first_of -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_first_of.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/find_first_of.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_first_of.md b/reference/string/basic_string/find_first_of.md
index 4fb35f1c4..2e1bed619 100644
--- a/reference/string/basic_string/find_first_of.md
+++ b/reference/string/basic_string/find_first_of.md
@@ -5,17 +5,46 @@
 * function[meta id-type]
 
 ```cpp
-size_type find_first_of(const basic_string&amp;amp; str, size_type pos = 0) const;          // (1) C++03
-size_type find_first_of(const basic_string&amp;amp; str, size_type pos = 0) const noexcept; // (1) C++11
-
-size_type find_first_of(const charT* s, size_type pos, size_type n) const;          // (2)
-size_type find_first_of(const charT* s, size_type pos = 0) const;                   // (3)
-
-size_type find_first_of(charT c, size_type pos = 0) const;                          // (4)
+size_type
+  find_first_of(const basic_string&amp;amp; str,
+                size_type pos = 0) const;          // (1) C++03
+size_type
+  find_first_of(const basic_string&amp;amp; str,
+                size_type pos = 0) const noexcept; // (1) C++11
+constexpr size_type
+  find_first_of(const basic_string&amp;amp; str,
+                size_type pos = 0) const noexcept; // (1) C++20
+
+size_type
+  find_first_of(const charT* s,
+               size_type pos, size_type n) const; // (2) C++03
+constexpr size_type
+  find_first_of(const charT* s,
+               size_type pos, size_type n) const; // (2) C++20
+
+size_type
+  find_first_of(const charT* s,
+                size_type pos = 0) const; // (3) C++03
+constexpr size_type
+  find_first_of(const charT* s,
+                size_type pos = 0) const; // (3) C++20
+
+size_type
+  find_first_of(charT c,
+                size_type pos = 0) const; // (4) C++03
+constexpr size_type
+  find_first_of(charT c,
+                size_type pos = 0) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type find_first_of(const T&amp;amp; t, size_type pos = 0) const noexcept(see below);   // (5) C++17
+size_type
+  find_first_of(const T&amp;amp; t,
+                size_type pos = 0) const noexcept(下記参照); // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  find_first_of(const T&amp;amp; t,
+                size_type pos = 0) const noexcept(下記参照); // (5) C++20
 ```
 
 ## 概要
@@ -129,3 +158,4 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find_first_of(charT c, size_ty
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_not_of -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_not_of.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/find_last_not_of.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_not_of.md b/reference/string/basic_string/find_last_not_of.md
index 58bf19fbc..4496453a2 100644
--- a/reference/string/basic_string/find_last_not_of.md
+++ b/reference/string/basic_string/find_last_not_of.md
@@ -5,17 +5,48 @@
 * function[meta id-type]
 
 ```cpp
-size_type find_last_not_of(const basic_string&amp;amp; str, size_type pos = npos) const;          // (1) C++03
-size_type find_last_not_of(const basic_string&amp;amp; str, size_type pos = npos) const noexcept; // (1) C++11
-
-size_type find_last_not_of(const charT* s, size_type pos, size_type n) const;             // (2)
-size_type find_last_not_of(const charT* s, size_type pos = npos) const;                   // (3)
-
-size_type find_last_not_of(charT c, size_type pos = npos) const;                          // (4)
+size_type
+  find_last_not_of(const basic_string&amp;amp; str,
+                  size_type pos = npos) const;           // (1) C++03
+size_type
+  find_last_not_of(const basic_string&amp;amp; str,
+                   size_type pos = npos) const noexcept; // (1) C++11
+constexpr size_type
+  find_last_not_of(const basic_string&amp;amp; str,
+                   size_type pos = npos) const noexcept; // (1) C++20
+
+size_type
+  find_last_not_of(const charT* s,
+                   size_type pos,
+                   size_type n) const; // (2) C++03
+constexpr size_type
+  find_last_not_of(const charT* s,
+                   size_type pos,
+                   size_type n) const; // (2) C++20
+
+size_type
+  find_last_not_of(const charT* s,
+                   size_type pos = npos) const; // (3) C++03
+constexpr size_type
+  find_last_not_of(const charT* s,
+                   size_type pos = npos) const; // (3) C++20
+
+size_type
+  find_last_not_of(charT c,
+                   size_type pos = npos) const; // (4) C++03
+constexpr size_type
+  find_last_not_of(charT c,
+                   size_type pos = npos) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type find_last_not_of(const T&amp;amp; t, size_type pos = npos) const noexcept(see below);   // (5) C++17
+size_type
+  find_last_not_of(const T&amp;amp; t,
+                   size_type pos = npos) const noexcept(下記参照); // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  find_last_not_of(const T&amp;amp; t,
+                   size_type pos = npos) const noexcept(下記参照); // (5) C++20
 ```
 
 ## 概要
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>find_last_of -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/find_last_of.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/find_last_of.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/find_last_of.md b/reference/string/basic_string/find_last_of.md
index 7c520f9f1..3300f5867 100644
--- a/reference/string/basic_string/find_last_of.md
+++ b/reference/string/basic_string/find_last_of.md
@@ -5,17 +5,46 @@
 * function[meta id-type]
 
 ```cpp
-size_type find_last_of(const basic_string&amp;amp; str, size_type pos = npos) const;          // (1) C++03
-size_type find_last_of(const basic_string&amp;amp; str, size_type pos = npos) const noexcept; // (1) C++11
-
-size_type find_last_of(const charT* s, size_type pos, size_type n) const;             // (2)
-size_type find_last_of(const charT* s, size_type pos = npos) const;                   // (3)
-
-size_type find_last_of(charT c, size_type pos = npos) const;                          // (4)
+size_type
+  find_last_of(const basic_string&amp;amp; str,
+               size_type pos = npos) const;          // (1) C++03
+size_type
+  find_last_of(const basic_string&amp;amp; str,
+               size_type pos = npos) const noexcept; // (1) C++11
+constexpr size_type
+  find_last_of(const basic_string&amp;amp; str,
+               size_type pos = npos) const noexcept; // (1) C++20
+
+size_type
+  find_last_of(const charT* s,
+               size_type pos, size_type n) const; // (2) C++03
+constexpr size_type
+  find_last_of(const charT* s,
+               size_type pos, size_type n) const; // (2) C++20
+
+size_type
+  find_last_of(const charT* s,
+               size_type pos = npos) const; // (3) C++03
+constexpr size_type
+  find_last_of(const charT* s,
+               size_type pos = npos) const; // (3) C++20
+
+size_type
+  find_last_of(charT c,
+               size_type pos = npos) const; // (4) C++03
+constexpr size_type
+  find_last_of(charT c,
+               size_type pos = npos) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type find_last_of(const T&amp;amp; t, size_type pos = npos) const noexcept(see below);   // (5) C++17
+size_type
+  find_last_of(const T&amp;amp; t,
+               size_type pos = npos) const noexcept(下記参照); // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  find_last_of(const T&amp;amp; t,
+               size_type pos = npos) const noexcept(下記参照); // (5) C++20
 ```
 
 ## 概要
@@ -121,3 +150,4 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::find_last_of(charT c, size_typ
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>front -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/front.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/front.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/front.md b/reference/string/basic_string/front.md
index 865916098..6428241f5 100644
--- a/reference/string/basic_string/front.md
+++ b/reference/string/basic_string/front.md
@@ -6,8 +6,11 @@
 * cpp11[meta cpp]
 
 ```cpp
-const charT&amp;amp; front() const;
-charT&amp;amp; front();
+const charT&amp;amp; front() const;           // (1) C++11
+constexpr const charT&amp;amp; front() const; // (1) C++20
+
+charT&amp;amp; front();                       // (2) C++11
+constexpr charT&amp;amp; front();             // (2) C++20
 ```
 
 ## 概要
@@ -44,3 +47,4 @@ h
 
 ## 参照
 - [LWG Issue 534. Missing `basic_string` members](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#534)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_allocator -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/get_allocator.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/get_allocator.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/get_allocator.md b/reference/string/basic_string/get_allocator.md
index 9641b9a16..1c9085a02 100644
--- a/reference/string/basic_string/get_allocator.md
+++ b/reference/string/basic_string/get_allocator.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-allocator_type get_allocator() const;          // C++03
-allocator_type get_allocator() const noexcept; // C++11
+allocator_type get_allocator() const;                    // (1) C++03
+allocator_type get_allocator() const noexcept;           // (1) C++11
+constexpr allocator_type get_allocator() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -61,3 +62,5 @@ int main()
 	- 2015からは、`noexcept`が修飾されている。
 
 
+## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/insert.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/insert.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/insert.md b/reference/string/basic_string/insert.md
index a6cd2da63..7d8c6927d 100644
--- a/reference/string/basic_string/insert.md
+++ b/reference/string/basic_string/insert.md
@@ -5,41 +5,84 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; insert(size_type pos1, const basic_string&amp;amp; str);    // (1)
-
-basic_string&amp;amp; insert(size_type pos1, const basic_string&amp;amp; str,
-                     size_type pos2, size_type n);                // (2) C++03
-basic_string&amp;amp; insert(size_type pos1, const basic_string&amp;amp; str,
-                     size_type pos2, size_type n = npos);         // (2) C++14
-
-basic_string&amp;amp; insert(size_type pos, const charT* s, size_type n); // (3)
-basic_string&amp;amp; insert(size_type pos, const charT* s);              // (4)
-basic_string&amp;amp; insert(size_type pos, size_type n, charT c);        // (5)
-
-iterator insert(iterator p, charT c);                             // (6) C++03
-iterator insert(const_iterator p, charT c);                       // (6) C++11
-
-void insert(iterator p, size_type n, charT c);                    // (7) C++03
-iterator insert(const_iterator p, size_type n, charT c);          // (7) C++11
+basic_string&amp;amp;
+  insert(size_type pos1, const basic_string&amp;amp; str);    // (1) C++03
+constexpr basic_string&amp;amp;
+  insert(size_type pos1, const basic_string&amp;amp; str);    // (1) C++20
+
+basic_string&amp;amp;
+  insert(size_type pos1, const basic_string&amp;amp; str,
+         size_type pos2, size_type n);                // (2) C++03
+basic_string&amp;amp;
+  insert(size_type pos1, const basic_string&amp;amp; str,
+         size_type pos2, size_type n = npos);         // (2) C++14
+constexpr basic_string&amp;amp;
+  insert(size_type pos1, const basic_string&amp;amp; str,
+         size_type pos2, size_type n = npos);         // (2) C++20
+
+basic_string&amp;amp;
+  insert(size_type pos, const charT* s, size_type n); // (3) C++03
+constexpr basic_string&amp;amp;
+  insert(size_type pos, const charT* s, size_type n); // (3) C++20
+
+basic_string&amp;amp;
+  insert(size_type pos, const charT* s);              // (4) C++03
+constexpr basic_string&amp;amp;
+  insert(size_type pos, const charT* s);              // (4) C++20
+
+basic_string&amp;amp;
+  insert(size_type pos, size_type n, charT c);        // (5) C++03
+constexpr basic_string&amp;amp;
+  insert(size_type pos, size_type n, charT c);        // (5) C++20
+
+iterator insert(iterator p, charT c);                 // (6) C++03
+iterator insert(const_iterator p, charT c);           // (6) C++11
+constexpr iterator insert(const_iterator p, charT c); // (6) C++20
+
+void insert(iterator p, size_type n, charT c);                     // (7) C++03
+iterator insert(const_iterator p, size_type n, charT c);           // (7) C++11
+constexpr iterator insert(const_iterator p, size_type n, charT c); // (7) C++20
 
 template&amp;lt;class InputIterator&amp;gt;
-void insert(iterator p,
-            InputIterator first, InputIterator last);             // (8) C++03
+void
+  insert(iterator p,
+         InputIterator first, InputIterator last); // (8) C++03
 template&amp;lt;class InputIterator&amp;gt;
-iterator insert(const_iterator p,
-                InputIterator first, InputIterator last);         // (8) C++11
+iterator
+  insert(const_iterator p,
+         InputIterator first, InputIterator last); // (8) C++11
+template&amp;lt;class InputIterator&amp;gt;
+constexpr iterator
+  insert(const_iterator p,
+         InputIterator first, InputIterator last); // (8) C++20
 
-iterator insert(const_iterator p, initializer_list&amp;lt;charT&amp;gt;);       // (9) C++11
+iterator
+  insert(const_iterator p, initializer_list&amp;lt;charT&amp;gt;); // (9) C++11
+constexpr iterator
+  insert(const_iterator p, initializer_list&amp;lt;charT&amp;gt;); // (9) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; insert(size_type pos1,
-                     const T&amp;amp; t);                                 // (10) C++17
+basic_string&amp;amp;
+  insert(size_type pos1,
+         const T&amp;amp; t);    // (10) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp;
+  insert(size_type pos1,
+         const T&amp;amp; t);    // (10) C++20
+
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp;
+  insert(size_type pos1,
+         const T&amp;amp; t,
+         size_type pos2,
+         size_type n = npos); // (11) C++17
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; insert(size_type pos1,
-                     const T&amp;amp; t,
-                     size_type pos2,
-                     size_type n = npos);                         // (11) C++17
+constexpr basic_string&amp;amp;
+  insert(size_type pos1,
+         const T&amp;amp; t,
+         size_type pos2,
+         size_type n = npos); // (11) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -250,3 +293,4 @@ int main()
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(10)(11)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>length -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/length.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/length.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/length.md b/reference/string/basic_string/length.md
index 8984f5279..830178384 100644
--- a/reference/string/basic_string/length.md
+++ b/reference/string/basic_string/length.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_type length() const;          // C++03
-size_type length() const noexcept; // C++11
+size_type length() const;                    // (1) C++03
+size_type length() const noexcept;           // (1) C++11
+constexpr size_type length() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -48,3 +49,4 @@ int main()
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_size -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/max_size.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/max_size.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/max_size.md b/reference/string/basic_string/max_size.md
index 94a4ac0ec..ea5764edd 100644
--- a/reference/string/basic_string/max_size.md
+++ b/reference/string/basic_string/max_size.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_type max_size() const;          // C++03
-size_type max_size() const noexcept; // C++11
+size_type max_size() const;                    // (1) C++03
+size_type max_size() const noexcept;           // (1) C++11
+constexpr size_type max_size() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -46,3 +47,4 @@ int main()
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_assign.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_assign.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_assign.md b/reference/string/basic_string/op_assign.md
index d720c2ca1..bae7dba46 100644
--- a/reference/string/basic_string/op_assign.md
+++ b/reference/string/basic_string/op_assign.md
@@ -5,18 +5,31 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; operator=(const basic_string&amp;amp; str);                  // (1)
+basic_string&amp;amp; operator=(const basic_string&amp;amp; str);                  // (1) C++03
+constexpr basic_string&amp;amp; operator=(const basic_string&amp;amp; str);        // (1) C++20
+
 basic_string&amp;amp; operator=(basic_string&amp;amp;&amp;amp; str) noexcept;              // (2) C++11
 basic_string&amp;amp; operator=(basic_string&amp;amp;&amp;amp; str) noexcept
   (allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value
     || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);       // (2) C++17
-basic_string&amp;amp; operator=(const charT* s);                           // (3)
-basic_string&amp;amp; operator=(charT c);                                  // (4)
+constexpr basic_string&amp;amp; operator=(basic_string&amp;amp;&amp;amp; str) noexcept
+  (allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value
+    || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);       // (2) C++20
+
+basic_string&amp;amp; operator=(const charT* s);                           // (3) C++03
+constexpr basic_string&amp;amp; operator=(const charT* s);                 // (3) C++20
+
+basic_string&amp;amp; operator=(charT c);                                  // (4) C++03
+constexpr basic_string&amp;amp; operator=(charT c);                        // (4) C++20
+
 basic_string&amp;amp; operator=(initializer_list&amp;lt;charT&amp;gt; il);               // (5) C++11
+constexpr basic_string&amp;amp; operator=(initializer_list&amp;lt;charT&amp;gt; il);     // (5) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
 basic_string&amp;amp; operator=(const T&amp;amp; t);                               // (6) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp; operator=(const T&amp;amp; t);                     // (6) C++20
 
 basic_string&amp;amp; operator=(nullptr_t) = delete;                       // (7) C++23
 ```
@@ -118,3 +131,4 @@ Hello
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(6)の引数型を`const T&amp;amp;`に変更
 - [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
     - C++23での、`nullptr_t`をとる代入演算子のdelete宣言追加
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_at.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_at.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_at.md b/reference/string/basic_string/op_at.md
index f8372ada2..b62dfa34b 100644
--- a/reference/string/basic_string/op_at.md
+++ b/reference/string/basic_string/op_at.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-const_reference operator[](size_type pos) const;
-reference operator[](size_type pos);
+const_reference operator[](size_type pos) const;           // (1) C++03
+constexpr const_reference operator[](size_type pos) const; // (1) C++20
+
+reference operator[](size_type pos);                       // (2) C++03
+constexpr reference operator[](size_type pos);             // (2) C++20
 ```
 
 ## 概要
@@ -59,3 +62,4 @@ e
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator basic_string_view -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_basic_string_view.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_basic_string_view.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_basic_string_view.md b/reference/string/basic_string/op_basic_string_view.md
index d88d1f5c7..4f91cd9bb 100644
--- a/reference/string/basic_string/op_basic_string_view.md
+++ b/reference/string/basic_string/op_basic_string_view.md
@@ -3,9 +3,11 @@
 * std[meta namespace]
 * basic_string[meta class]
 * function[meta id-type]
+* cpp17[meta cpp]
 
 ```cpp
-operator basic_string_view&amp;lt;charT, traits&amp;gt;() const noexcept;
+operator basic_string_view&amp;lt;charT, traits&amp;gt;() const noexcept;           // (1) C++17
+constexpr operator basic_string_view&amp;lt;charT, traits&amp;gt;() const noexcept; // (1) C++20
 ```
 * basic_string_view[link /reference/string_view/basic_string_view.md]
 
@@ -51,3 +53,4 @@ Hello World
 
 ## 参照
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_constructor.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_constructor.md b/reference/string/basic_string/op_constructor.md
index 5924f6f2a..cae297a95 100644
--- a/reference/string/basic_string/op_constructor.md
+++ b/reference/string/basic_string/op_constructor.md
@@ -8,61 +8,98 @@
 basic_string();                                                 // (1) C++14
 basic_string() noexcept(noexcept(Allocator()))                  // (1) C++17
   : basic_string(Allocator()) {}
+constexpr basic_string() noexcept(noexcept(Allocator()))        // (1) C++20
+  : basic_string(Allocator()) {}
 
 explicit basic_string(const Allocator&amp;amp; a);                      // (2) C++14
 explicit basic_string(const Allocator&amp;amp; a) noexcept;             // (2) C++17
+constexpr explicit basic_string(const Allocator&amp;amp; a) noexcept;   // (2) C++20
 
 explicit basic_string(const Allocator&amp;amp; a = Allocator());        // (1) + (2) C++03
 
-basic_string(const basic_string&amp;amp; str);                          // (3)
+basic_string(const basic_string&amp;amp; str);                          // (3) C++03
+constexpr basic_string(const basic_string&amp;amp; str);                // (3) C++20
+
 basic_string(basic_string&amp;amp;&amp;amp; str) noexcept;                      // (4) C++11
+constexpr basic_string(basic_string&amp;amp;&amp;amp; str) noexcept;            // (4) C++20
 
 basic_string(const basic_string&amp;amp; str,
              size_type pos,
              size_type n = npos,
-             const Allocator&amp;amp; a = Allocator());                 // (5) C++14まで
-
+             const Allocator&amp;amp; a = Allocator());                 // (5) C++03
 basic_string(const basic_string&amp;amp; str,
              size_type pos,
              size_type n,
              const Allocator&amp;amp; a = Allocator());                 // (5) C++17
+constexpr basic_string(const basic_string&amp;amp; str,
+                       size_type pos,
+                       size_type n,
+                       const Allocator&amp;amp; a = Allocator());       // (5) C++20
 
 basic_string(const basic_string&amp;amp; str,
              size_type pos,
              const Allocator&amp;amp; a = Allocator());                 // (6) C++17
+constexpr basic_string(const basic_string&amp;amp; str,
+                       size_type pos,
+                       const Allocator&amp;amp; a = Allocator());       // (6) C++20
 
 basic_string(const charT* s,
              size_type n,
-             const Allocator&amp;amp; a = Allocator());                 // (7)
+             const Allocator&amp;amp; a = Allocator());                 // (7) C++03
+constexpr basic_string(const charT* s,
+                       size_type n,
+                       const Allocator&amp;amp; a = Allocator());       // (7) C++20
 
 basic_string(const charT* s,
-             const Allocator&amp;amp; a = Allocator());                 // (8)
+             const Allocator&amp;amp; a = Allocator());                 // (8) C++03
+constexpr basic_string(const charT* s,
+                       const Allocator&amp;amp; a = Allocator());       // (8) C++20
 
 basic_string(size_type n,
              charT c,
-             const Allocator&amp;amp; a = Allocator());                 // (9)
+             const Allocator&amp;amp; a = Allocator());                 // (9) C++03
+constexpr basic_string(size_type n,
+                       charT c,
+                       const Allocator&amp;amp; a = Allocator());       // (9) C++20
 
 template &amp;lt;class InputIterator&amp;gt;
 basic_string(InputIterator begin, InputIterator end,
-             const Allocator&amp;amp; a = Allocator());                 // (10)
+             const Allocator&amp;amp; a = Allocator());                 // (10) C++03
+template &amp;lt;class InputIterator&amp;gt;
+constexpr basic_string(InputIterator begin, InputIterator end,
+                       const Allocator&amp;amp; a = Allocator());       // (10) C++20
 
 basic_string(initializer_list&amp;lt;charT&amp;gt; init,
              const Allocator&amp;amp; = Allocator());                   // (11) C++11
+constexpr basic_string(initializer_list&amp;lt;charT&amp;gt; init,
+                       const Allocator&amp;amp; = Allocator());         // (11) C++20
+
+basic_string(const basic_string&amp;amp; str, const Allocator&amp;amp;);           // (12) C++11
+constexpr basic_string(const basic_string&amp;amp; str, const Allocator&amp;amp;); // (12) C++20
 
-basic_string(const basic_string&amp;amp; str, const Allocator&amp;amp;);        // (12) C++11
 basic_string(basic_string&amp;amp;&amp;amp; str, const Allocator&amp;amp;);             // (13) C++11
+constexpr basic_string(basic_string&amp;amp;&amp;amp; str, const Allocator&amp;amp;);   // (13) C++20
 
 // string_viewから構築するコンストラクタ
 template&amp;lt;class T&amp;gt;
 explicit basic_string(const T&amp;amp; t,
-                      const Allocator&amp;amp; a = Allocator());        // (14) C++17
+                      const Allocator&amp;amp; a = Allocator());           // (14) C++17
+template&amp;lt;class T&amp;gt;
+constexpr explicit basic_string(const T&amp;amp; t,
+                                const Allocator&amp;amp; a = Allocator()); // (14) C++20
+
+template&amp;lt;class T&amp;gt;
+basic_string(const T&amp;amp; t,
+             size_type pos,
+             size_type n,
+             const Allocator&amp;amp; a = Allocator());                  // (15) C++17
 template&amp;lt;class T&amp;gt;
-         basic_string(const T&amp;amp; t,
-                      size_type pos,
-                      size_type n,
-                      const Allocator&amp;amp; a = Allocator());        // (15) C++17
+constexpr basic_string(const T&amp;amp; t,
+                       size_type pos,
+                       size_type n,
+                       const Allocator&amp;amp; a = Allocator());        // (15) C++20
 
-basic_string(nullptr_t) = delete;                               // (16) C++23
+basic_string(nullptr_t) = delete; // (16) C++23
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -202,3 +239,4 @@ s14 : Hello
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(14)の引数型を`const T&amp;amp;`に変更
 - [P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr.](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2166r1.html)
     - C++23での、`nullptr_t`をとるコンストラクタのdelete宣言追加
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_destructor.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_destructor.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_destructor.md b/reference/string/basic_string/op_destructor.md
index 08cb6084c..12f4a1ea0 100644
--- a/reference/string/basic_string/op_destructor.md
+++ b/reference/string/basic_string/op_destructor.md
@@ -5,7 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-~basic_string()
+~basic_string();           // (1) C++03
+constexpr ~basic_string(); // (1) C++20
 ```
 
 ## 概要
@@ -19,3 +20,6 @@
 ## 計算量
 線形時間
 
+
+## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_equal.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_equal.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_equal.md b/reference/string/basic_string/op_equal.md
index 32d4e7b65..6ec1f6a40 100644
--- a/reference/string/basic_string/op_equal.md
+++ b/reference/string/basic_string/op_equal.md
@@ -6,20 +6,35 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator==(const CharT* a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2)
+  bool
+    operator==(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator==(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const CharT* b);                                  // (3)
+  bool
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator==(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (3) C++20
 }
 ```
 
@@ -66,3 +81,4 @@ equal
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_greater.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_greater.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_greater.md b/reference/string/basic_string/op_greater.md
index a5e30a39e..9f0081048 100644
--- a/reference/string/basic_string/op_greater.md
+++ b/reference/string/basic_string/op_greater.md
@@ -6,20 +6,35 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;(const CharT* a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2)
+  bool
+    operator&amp;gt;(const CharT* a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;gt;(const CharT* a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const CharT* rhs) noexcept;                                // (3)
+  bool
+    operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const CharT* rhs) noexcept;                       // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;gt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const CharT* rhs) noexcept;                       // (3) C++20
 }
 ```
 
@@ -55,3 +70,4 @@ true
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_greater_equal.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_greater_equal.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_greater_equal.md b/reference/string/basic_string/op_greater_equal.md
index 82e86fd25..e3e1b3c20 100644
--- a/reference/string/basic_string/op_greater_equal.md
+++ b/reference/string/basic_string/op_greater_equal.md
@@ -6,20 +6,35 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const CharT* a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2)
+  bool
+    operator&amp;gt;=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;gt;=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const CharT* rhs) noexcept;                                // (3)
+  bool
+    operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* rhs) noexcept;                       // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;gt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* rhs) noexcept;                       // (3) C++20
 }
 ```
 
@@ -55,3 +70,4 @@ true
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_less.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_less.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_less.md b/reference/string/basic_string/op_less.md
index 2e9336ec7..ce83e281b 100644
--- a/reference/string/basic_string/op_less.md
+++ b/reference/string/basic_string/op_less.md
@@ -6,20 +6,35 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;(const CharT* a,
-                 const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2)
+  bool
+    operator&amp;lt;(const CharT* a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;lt;(const CharT* a,
+              const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                 const CharT* rhs) noexcept;                                // (3)
+  bool
+    operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const CharT* rhs) noexcept;                                // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;lt;(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+              const CharT* rhs) noexcept;                                // (3) C++20
 }
 ```
 
@@ -54,3 +69,4 @@ true
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_less_equal.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_less_equal.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_less_equal.md b/reference/string/basic_string/op_less_equal.md
index a4a885e95..4f080dff4 100644
--- a/reference/string/basic_string/op_less_equal.md
+++ b/reference/string/basic_string/op_less_equal.md
@@ -6,20 +6,35 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const CharT* a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (2)
+  bool
+    operator&amp;lt;=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;lt;=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const CharT* rhs) noexcept;                                // (3)
+  bool
+    operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* rhs) noexcept;                       // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator&amp;lt;=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* rhs) noexcept;                       // (3) C++20
 }
 ```
 
@@ -55,3 +70,4 @@ true
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_not_equal.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_not_equal.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_not_equal.md b/reference/string/basic_string/op_not_equal.md
index cd36f963e..a5b55f9ca 100644
--- a/reference/string/basic_string/op_not_equal.md
+++ b/reference/string/basic_string/op_not_equal.md
@@ -6,20 +6,36 @@
 ```cpp
 namespace std {
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (1) C++03
-
+  bool
+    operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b);          // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  bool
+    operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++14
+  constexpr bool
+    operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b) noexcept; // (1) C++20
+
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator!=(const CharT* a,
-                  const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2)
+  bool
+    operator!=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator!=(const CharT* a,
+               const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; b); // (2) C++20
 
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
-  bool operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
-                  const CharT* b);                                  // (3)
+  bool
+    operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (3) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr bool
+    operator!=(const basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; a,
+               const CharT* b);                                  // (3) C++20
 }
 ```
 
@@ -63,3 +79,4 @@ not equal
 
 ## 参照
 - [LWG2064 - More `noexcept` issues in `basic_string`](https://wg21.cmeerw.net/lwg/issue2064)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+ -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_plus.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus.md b/reference/string/basic_string/op_plus.md
index da716ec55..7e45e540f 100644
--- a/reference/string/basic_string/op_plus.md
+++ b/reference/string/basic_string/op_plus.md
@@ -8,62 +8,111 @@ namespace std {
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (1)
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (1) C++03
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (1) C++20
+
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (2) C++11 から
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (2) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (2) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (3) C++11 から
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (3) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (3) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (4) C++11 から
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (4) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (4) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const charT* lhs,
-              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (5)
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (5) C++03
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const charT* lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (5) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const charT* lhs,
-              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (6) C++11 から
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (6) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const charT* lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (6) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(charT lhs,
-              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (7)
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (7) C++03
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(charT lhs,
+              const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; rhs); // (7) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(charT lhs,
-              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (8) C++11 から
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (8) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(charT lhs,
+              basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; rhs);      // (8) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-              const charT* rhs);                                  // (9)
+              const charT* rhs);                                  // (9) C++03
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              const charT* rhs);                                  // (9) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-              const charT* rhs);                                  // (10) C++11 から
+              const charT* rhs);                                  // (10) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              const charT* rhs);                                  // (10) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
-              charT rhs);                                         // (11)
+              charT rhs);                                         // (11) C++03
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(const basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp; lhs,
+              charT rhs);                                         // (11) C++20
 
   template &amp;lt;class charT, class traits, class Allocator&amp;gt;
   basic_string&amp;lt;charT, traits, Allocator&amp;gt;
     operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
-              charT rhs);                                         // (12) C++11 から
+              charT rhs);                                         // (12) C++11
+  template &amp;lt;class charT, class traits, class Allocator&amp;gt;
+  constexpr basic_string&amp;lt;charT, traits, Allocator&amp;gt;
+    operator+(basic_string&amp;lt;charT, traits, Allocator&amp;gt;&amp;amp;&amp;amp; lhs,
+              charT rhs);                                         // (12) C++20
 }
 ```
 
@@ -229,3 +278,4 @@ Hello, world!
 
 ## 参照
 - [P1165R1 Make stateful allocator propagation more consistent for operator+(basic_string)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1165r1.html)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator+= -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_plus_assign.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_plus_assign.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_plus_assign.md b/reference/string/basic_string/op_plus_assign.md
index 35b1b4da9..898c79782 100644
--- a/reference/string/basic_string/op_plus_assign.md
+++ b/reference/string/basic_string/op_plus_assign.md
@@ -5,17 +5,23 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; operator+=(const basic_string&amp;amp; str);    // (1)
+basic_string&amp;amp; operator+=(const basic_string&amp;amp; str);           // (1) C++03
+constexpr basic_string&amp;amp; operator+=(const basic_string&amp;amp; str); // (1) C++20
 
-basic_string&amp;amp; operator+=(const charT* s);             // (2)
+basic_string&amp;amp; operator+=(const charT* s);           // (2) C++03
+constexpr basic_string&amp;amp; operator+=(const charT* s); // (2) C++20
 
-basic_string&amp;amp; operator+=(charT c);                    // (3)
+basic_string&amp;amp; operator+=(charT c);           // (3) C++03
+constexpr basic_string&amp;amp; operator+=(charT c); // (3) C++03
 
-basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++11 から
+basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il);           // (4) C++11
+constexpr basic_string&amp;amp; operator+=(initializer_list&amp;lt;charT&amp;gt; il); // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; operator+=(const T&amp;amp; t);                 // (5) C++17 から
+basic_string&amp;amp; operator+=(const T&amp;amp; t);           // (5) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp; operator+=(const T&amp;amp; t); // (5) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -136,3 +142,4 @@ Hello, world! :) :)
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sリテラル -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/op_s.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/op_s.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/op_s.md b/reference/string/basic_string/op_s.md
index 8bbced568..add5b32b3 100644
--- a/reference/string/basic_string/op_s.md
+++ b/reference/string/basic_string/op_s.md
@@ -8,11 +8,19 @@
 namespace std {
 inline namespace literals {
 inline namespace string_literals {
-  string    operator&amp;#34;&amp;#34;s(const char* str, size_t len);     // (1)
-  u8string  operator&amp;#34;&amp;#34;s(const char8_t* str, size_t len);  // (2) C++20
-  u16string operator&amp;#34;&amp;#34;s(const char16_t* str, size_t len); // (3)
-  u32string operator&amp;#34;&amp;#34;s(const char32_t* str, size_t len); // (4)
-  wstring   operator&amp;#34;&amp;#34;s(const wchar_t* str, size_t len);  // (5)
+  string operator&amp;#34;&amp;#34;s(const char* str, size_t len);                  // (1) C++14
+  constexpr string operator&amp;#34;&amp;#34;s(const char* str, size_t len);        // (1) C++20
+
+  constexpr u8string operator&amp;#34;&amp;#34;s(const char8_t* str, size_t len);   // (2) C++20
+
+  u16string operator&amp;#34;&amp;#34;s(const char16_t* str, size_t len);           // (3) C++14
+  constexpr u16string operator&amp;#34;&amp;#34;s(const char16_t* str, size_t len); // (3) C++20
+
+  u32string operator&amp;#34;&amp;#34;s(const char32_t* str, size_t len);           // (4) C++14
+  constexpr u32string operator&amp;#34;&amp;#34;s(const char32_t* str, size_t len); // (4) C++20
+
+  wstring operator&amp;#34;&amp;#34;s(const wchar_t* str, size_t len);              // (5) C++14
+  constexpr wstring operator&amp;#34;&amp;#34;s(const wchar_t* str, size_t len);    // (5) C++20
 }}}
 ```
 
@@ -75,4 +83,4 @@ int main()
 
 ## 参照
 - [N3642 User-defined Literals for Standard Library Types (part 1 - version 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3642.pdf)
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pop_back -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/pop_back.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/pop_back.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/pop_back.md b/reference/string/basic_string/pop_back.md
index ccd9b54e4..fdfc98c9a 100644
--- a/reference/string/basic_string/pop_back.md
+++ b/reference/string/basic_string/pop_back.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-void pop_back();
+void pop_back();           // (1) C++11
+constexpr void pop_back(); // (1) C++20
 ```
 
 ## 概要
@@ -60,4 +61,4 @@ hello
 
 ## 参照
 - [LWG Issue 534. Missing `basic_string` members](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#534)
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>push_back -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/push_back.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/push_back.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/push_back.md b/reference/string/basic_string/push_back.md
index 04fc21a2b..bd129857e 100644
--- a/reference/string/basic_string/push_back.md
+++ b/reference/string/basic_string/push_back.md
@@ -5,7 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-void push_back(charT c);
+void push_back(charT c);           // (1) C++03
+constexpr void push_back(charT c); // (1) C++20
 ```
 
 ## 概要
@@ -39,4 +40,4 @@ hello
 ```
 
 ## 参照
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/rbegin.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/rbegin.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/rbegin.md b/reference/string/basic_string/rbegin.md
index a4787fdd3..fa3731363 100644
--- a/reference/string/basic_string/rbegin.md
+++ b/reference/string/basic_string/rbegin.md
@@ -7,9 +7,11 @@
 ```cpp
 reverse_iterator rbegin();                      // (1) C++03
 reverse_iterator rbegin() noexcept;             // (1) C++11
+constexpr reverse_iterator rbegin() noexcept;   // (1) C++20
 
-const_reverse_iterator rbegin() const;          // (2) C++03
-const_reverse_iterator rbegin() const noexcept; // (2) C++11
+const_reverse_iterator rbegin() const;                    // (2) C++03
+const_reverse_iterator rbegin() const noexcept;           // (2) C++11
+constexpr const_reverse_iterator rbegin() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -49,3 +51,4 @@ o
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/rend.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/rend.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/rend.md b/reference/string/basic_string/rend.md
index 905e39207..bf109d5a1 100644
--- a/reference/string/basic_string/rend.md
+++ b/reference/string/basic_string/rend.md
@@ -7,9 +7,11 @@
 ```cpp
 reverse_iterator rend();                      // (1) C++03
 reverse_iterator rend() noexcept;             // (1) C++11
+constexpr reverse_iterator rend() noexcept;   // (1) C++20
 
-const_reverse_iterator rend() const;          // (2) C++03
-const_reverse_iterator rend() const noexcept; // (2) C++11
+const_reverse_iterator rend() const;                    // (2) C++03
+const_reverse_iterator rend() const noexcept;           // (2) C++11
+constexpr const_reverse_iterator rend() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -51,3 +53,4 @@ h
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>replace -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/replace.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/replace.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/replace.md b/reference/string/basic_string/replace.md
index 5d5d89d8b..a69c48c47 100644
--- a/reference/string/basic_string/replace.md
+++ b/reference/string/basic_string/replace.md
@@ -5,67 +5,186 @@
 * function[meta id-type]
 
 ```cpp
-basic_string&amp;amp; replace(size_type pos1, size_type n1,
-                      const basic_string&amp;amp; str);                     // (1)
-
-basic_string&amp;amp; replace(size_type pos1, size_type n1,
-                      const basic_string&amp;amp; str,
-                      size_type pos2, size_type n2);                // (2) C++11
-basic_string&amp;amp; replace(size_type pos1, size_type n1,
-                      const basic_string&amp;amp; str,
-                      size_type pos2, size_type n2 = npos);         // (2) C++14
-
-basic_string&amp;amp; replace(size_type pos, size_type n1, const charT* s,
-                      size_type n2);                                // (3)
-basic_string&amp;amp; replace(size_type pos, size_type n1, const charT* s); // (4)
-basic_string&amp;amp; replace(size_type pos, size_type n1, size_type n2,
-                      charT c);                                     // (5)
-
-basic_string&amp;amp; replace(iterator i1, iterator i2,
-                      const basic_string&amp;amp; str);                     // (6) C++03
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      const basic_string&amp;amp; str);                     // (6) C++11
-
-basic_string&amp;amp; replace(iterator i1, iterator i2,
-                      const charT* s, size_type n);                 // (7) C++03
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      const charT* s, size_type n);                 // (7) C++11
-
-basic_string&amp;amp; replace(iterator i1, iterator i2,
-                      const charT* s);                              // (8) C++03
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      const charT* s);                              // (8) C++11
-
-basic_string&amp;amp; replace(iterator i1, iterator i2,
-                      size_type n, charT c);                        // (9) C++03
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      size_type n, charT c);                        // (9) C++11
+basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str); // (1) C++03
+constexpr basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str); // (1) C++20
+
+basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2);           // (2) C++11
+basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2 = npos);    // (2) C++14
+constexpr basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const basic_string&amp;amp; str,
+          size_type pos2,
+          size_type n2 = npos);    // (2) C++20
+
+basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          const charT* s,
+          size_type n2);  // (3) C++03
+constexpr basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          const charT* s,
+          size_type n2);  // (3) C++20
+
+basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          const charT* s); // (4) C++03
+constexpr basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          const charT* s); // (4) C++20
+
+basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          size_type n2,
+          charT c);      // (5) C++03
+constexpr basic_string&amp;amp;
+  replace(size_type pos,
+          size_type n1,
+          size_type n2,
+          charT c);      // (5) C++20
+
+basic_string&amp;amp;
+  replace(iterator i1,
+          iterator i2,
+          const basic_string&amp;amp; str); // (6) C++03
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const basic_string&amp;amp; str); // (6) C++11
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const basic_string&amp;amp; str); // (6) C++20
+
+basic_string&amp;amp;
+  replace(iterator i1,
+          iterator i2,
+          const charT* s,
+          size_type n);      // (7) C++03
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const charT* s,
+          size_type n);      // (7) C++11
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const charT* s,
+          size_type n);      // (7) C++20
+
+basic_string&amp;amp;
+  replace(iterator i1,
+          iterator i2,
+          const charT* s);   // (8) C++03
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const charT* s);   // (8) C++11
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const charT* s);   // (8) C++20
+
+basic_string&amp;amp;
+  replace(iterator i1,
+          iterator i2,
+          size_type n,
+          charT c);              // (9) C++03
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          size_type n, charT c); // (9) C++11
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          size_type n, charT c); // (9) C++20
 
 template &amp;lt;class InputIterator&amp;gt;
-basic_string&amp;amp; replace(iterator i1, iterator i2,
-                      InputIterator j1, InputIterator j2);          // (10) C++03
+basic_string&amp;amp;
+  replace(iterator i1,
+          iterator i2,
+          InputIterator j1,
+          InputIterator j2);     // (10) C++03
 template &amp;lt;class InputIterator&amp;gt;
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      InputIterator j1, InputIterator j2);          // (10) C++11
-
-basic_string&amp;amp; replace(const_iterator i1, const_iterator i2,
-                      initializer_list&amp;lt;charT&amp;gt; il);                  // (11) C++11
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          InputIterator j1,
+          InputIterator j2);     // (10) C++11
+template &amp;lt;class InputIterator&amp;gt;
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          InputIterator j1,
+          InputIterator j2);     // (10) C++20
+
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          initializer_list&amp;lt;charT&amp;gt; il); // (11) C++11
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          initializer_list&amp;lt;charT&amp;gt; il); // (11) C++20
 
 // string_viewを引数に取るオーバーロード
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; replace(size_type pos1,
-                      size_type n1,
-                      const T&amp;amp; t);                                  // (12) C++17
+basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t);    // (12) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t);    // (12) C++17
+
+template&amp;lt;class T&amp;gt;
+basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t,
+          size_type pos2,
+          size_type n2 = npos); // (13) C++17
+template&amp;lt;class T&amp;gt;
+constexpr basic_string&amp;amp;
+  replace(size_type pos1,
+          size_type n1,
+          const T&amp;amp; t,
+          size_type pos2,
+          size_type n2 = npos); // (13) C++20
+
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; replace(size_type pos1, 
-                      size_type n1,
-                      const T&amp;amp; t,
-                      size_type pos2,
-                      size_type n2 = npos);                         // (13) C++17
+basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const T&amp;amp; t);       // (14) C++17
 template&amp;lt;class T&amp;gt;
-basic_string&amp;amp; replace(const_iterator i1,
-                      const_iterator i2,
-                      const T&amp;amp; t);                                  // (14) C++17
+constexpr basic_string&amp;amp;
+  replace(const_iterator i1,
+          const_iterator i2,
+          const T&amp;amp; t);       // (14) C++20
 ```
 
 ## 概要
@@ -322,3 +441,4 @@ int main()
 - [LWG Issue 2758. `std::string{}.assign(&amp;#34;ABCDE&amp;#34;, 0, 1)` is ambiguous](https://wg21.cmeerw.net/lwg/issue2758)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(12)(13)(14)の引数型を`const T&amp;amp;`に変更
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reserve -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/reserve.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/reserve.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/reserve.md b/reference/string/basic_string/reserve.md
index d64c3f407..3c2533c2f 100644
--- a/reference/string/basic_string/reserve.md
+++ b/reference/string/basic_string/reserve.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-void reserve(size_type res_arg = 0); // (1) C++03 (C++20で非推奨化)
-void reserve(size_type res_arg);     // (1) C++20
+void reserve(size_type res_arg = 0);       // (1) C++03 (C++20で非推奨化)
+
+constexpr void reserve(size_type res_arg); // (2) C++20
 ```
 
 ## 概要
@@ -68,3 +69,4 @@ int main()
 
 ## 参照
 - [P0966R1 `string::reserve` Should Not Shrink](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0966r1.html)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resize -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/resize.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/resize.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/resize.md b/reference/string/basic_string/resize.md
index d6dd1fedb..811d6aedb 100644
--- a/reference/string/basic_string/resize.md
+++ b/reference/string/basic_string/resize.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-void resize(size_type n, charT c);
-void resize(size_type n);
+void resize(size_type n, charT c);           // (1) C++03
+constexpr void resize(size_type n, charT c); // (1) C++20
+
+void resize(size_type n);                    // (2) C++03
+constexpr void resize(size_type n);          // (2) C++20
 ```
 
 ## 概要
@@ -58,3 +61,4 @@ helloxxxxx
 
 - [LWG Issue 2318 `basic_string`&amp;#39;s wording has confusing relics from the copy-on-write era](https://wg21.cmeerw.net/lwg/issue2318)
 - [P1148R0 Cleaning up Clause 20](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1148r0.pdf)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rfind -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/rfind.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/rfind.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/rfind.md b/reference/string/basic_string/rfind.md
index 20632d4c6..1b35fd6f5 100644
--- a/reference/string/basic_string/rfind.md
+++ b/reference/string/basic_string/rfind.md
@@ -5,17 +5,46 @@
 * function[meta id-type]
 
 ```cpp
-size_type rfind(const basic_string&amp;amp; str, size_type pos = npos) const;          // (1) C++03
-size_type rfind(const basic_string&amp;amp; str, size_type pos = npos) const noexcept; // (1) C++11
-
-size_type rfind(const charT* s, size_type pos, size_type n) const;             // (2)
-size_type rfind(const charT* s, size_type pos = npos) const;                   // (3)
-
-size_type rfind(charT c, size_type pos = npos) const;                          // (4)
+size_type
+  rfind(const basic_string&amp;amp; str,
+        size_type pos = npos) const;          // (1) C++03
+size_type
+  rfind(const basic_string&amp;amp; str,
+        size_type pos = npos) const noexcept; // (1) C++11
+constexpr size_type
+  rfind(const basic_string&amp;amp; str,
+        size_type pos = npos) const noexcept; // (1) C++20
+
+size_type
+  rfind(const charT* s,
+        size_type pos, size_type n) const; // (2) C++03
+constexpr size_type
+  rfind(const charT* s,
+        size_type pos, size_type n) const; // (2) C++20
+
+size_type
+  rfind(const charT* s,
+        size_type pos = npos) const; // (3) C++03
+constexpr size_type
+  rfind(const charT* s,
+        size_type pos = npos) const; // (3) C++20
+
+size_type
+  rfind(charT c,
+        size_type pos = npos) const; // (4) C++03
+constexpr size_type
+  rfind(charT c,
+        size_type pos = npos) const; // (4) C++20
 
 // string_viewを引数に取るオーバーロード
 template &amp;lt;class T&amp;gt;
-size_type rfind(const T&amp;amp; t, size_type pos = npos) const noexcept(see below);   // (5) C++17
+size_type
+  rfind(const T&amp;amp; t,
+        size_type pos = npos) const noexcept(下記参照); // (5) C++17
+template &amp;lt;class T&amp;gt;
+constexpr size_type
+  rfind(const T&amp;amp; t,
+        size_type pos = npos) const noexcept(下記参照); // (5) C++20
 ```
 
 ## 概要
@@ -129,4 +158,4 @@ size_type basic_string&amp;lt;charT, traits, Allocator&amp;gt;::rfind(charT c, size_type pos =
 - [P0254R2 Integrating `std::string_view` and `std::string`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0254r2.pdf)
 - [LWG Issue 2946. LWG 2758&amp;#39;s resolution missed further corrections](https://wg21.cmeerw.net/lwg/issue2946)
     - 意図しない暗黙変換防止のために`string_view`を受けるオーバーロード(5)の引数型を`const T&amp;amp;`に変更
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shrink_to_fit -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/shrink_to_fit.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/shrink_to_fit.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/shrink_to_fit.md b/reference/string/basic_string/shrink_to_fit.md
index 78ebd2d71..eee5ba701 100644
--- a/reference/string/basic_string/shrink_to_fit.md
+++ b/reference/string/basic_string/shrink_to_fit.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-void shrink_to_fit();
+void shrink_to_fit();           // (1) C++11
+constexpr void shrink_to_fit(); // (1) C++20
 ```
 
 ## 概要
@@ -88,3 +89,4 @@ void basic_string::shrink_to_fit() {
 - 『[Effective STL - STLを効果的に使いこなす50の鉄則](https://www.amazon.co.jp/dp/4894714108)』 第17項 余分な容量を取り除くには「swap技法」を使おう
 - [LWG Issue 755. `std::vector` and `std:string` lack explicit shrink-to-fit operations]
 - [LWG Issue 2223. `shrink_to_fit` effect on iterator validity](https://wg21.cmeerw.net/lwg/issue2223)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/size.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/size.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/size.md b/reference/string/basic_string/size.md
index a8683c951..c6588a655 100644
--- a/reference/string/basic_string/size.md
+++ b/reference/string/basic_string/size.md
@@ -5,7 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_type size() const noexcept;
+size_type size() const;                    // (1) C++03
+size_type size() const noexcept;           // (1) C++11
+constexpr size_type size() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -51,3 +53,4 @@ int main()
 ```
 
 ## 参照
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>starts_with -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/starts_with.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/starts_with.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/starts_with.md b/reference/string/basic_string/starts_with.md
index 87580cf3e..6e2f1c96f 100644
--- a/reference/string/basic_string/starts_with.md
+++ b/reference/string/basic_string/starts_with.md
@@ -6,9 +6,12 @@
 * cpp20[meta cpp]
 
 ```cpp
-bool starts_with(std::basic_string_view&amp;lt;charT, traits&amp;gt; x) const noexcept; // (1)
-bool starts_with(charT x) const noexcept;                                 // (2)
-bool starts_with(const charT* x) const;                                   // (3)
+constexpr bool
+  starts_with(std::basic_string_view&amp;lt;charT, traits&amp;gt; x) const noexcept; // (1) C++20
+constexpr bool
+  starts_with(charT x) const noexcept;                                 // (2) C++20
+constexpr
+  bool starts_with(const charT* x) const;                              // (3) C++20
 ```
 
 ## 概要
@@ -77,3 +80,4 @@ int main()
 
 ## 参照
 - [P0457R2 String Prefix and Suffix Checking](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0457r2.html)
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>substr -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/substr.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/substr.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/substr.md b/reference/string/basic_string/substr.md
index 304678e87..0e0d9c152 100644
--- a/reference/string/basic_string/substr.md
+++ b/reference/string/basic_string/substr.md
@@ -5,7 +5,12 @@
 * function[meta id-type]
 
 ```cpp
-basic_string substr(size_type pos = 0, size_type n = npos) const;
+basic_string
+  substr(size_type pos = 0,
+         size_type n = npos) const; // (1) C++03
+constexpr basic_string
+  substr(size_type pos = 0,
+         size_type n = npos) const; // (1) C++20
 ```
 
 ## 概要
@@ -60,4 +65,4 @@ llo
 ```
 
 ## 参照
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/swap.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/swap.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/swap.md b/reference/string/basic_string/swap.md
index 24e013114..23aa4d251 100644
--- a/reference/string/basic_string/swap.md
+++ b/reference/string/basic_string/swap.md
@@ -5,10 +5,13 @@
 * function[meta id-type]
 
 ```cpp
-void swap(basic_string&amp;amp; str);
+void swap(basic_string&amp;amp; str);                                // (1) C++03
 void swap(basic_string&amp;amp; str) noexcept
-  (allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_swap::value 
-   || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);        // C++17
+  (allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_swap::value
+   || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);  // (1) C++17
+constexpr void swap(basic_string&amp;amp; str) noexcept
+  (allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_swap::value
+   || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);  // (1) C++20
 ```
 
 ## 概要
@@ -54,3 +57,4 @@ hello
 ## 参照
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
     - `noexcept` 追加の経緯となる提案文書
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- basic_stringをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/string/basic_string/swap_free.html"/>
      <id>1cd3e33ef086b5ab2d51c8b521028c34b3548e56:reference/string/basic_string/swap_free.md</id>
      <updated>2022-10-06T18:26:35+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/string/basic_string/swap_free.md b/reference/string/basic_string/swap_free.md
index 0e338c67a..772dd369b 100644
--- a/reference/string/basic_string/swap_free.md
+++ b/reference/string/basic_string/swap_free.md
@@ -5,14 +5,18 @@
 
 ```cpp
 namespace std {
-    template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
   void swap(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; x,
-            basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y);
-
+            basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y); // (1) C++03
+  template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  void swap(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; x,
+            basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y)
+    noexcept(noexcept(lhs.swap(rhs)));                 // (1) C++17
   template &amp;lt;class CharT, class Traits, class Allocator&amp;gt;
+  constexpr
   void swap(basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; x,
             basic_string&amp;lt;CharT, Traits, Allocator&amp;gt;&amp;amp; y)
-    noexcept(noexcept(lhs.swap(rhs)));                 // C++17
+    noexcept(noexcept(lhs.swap(rhs)));                 // (1) C++20
 }
 ```
 
@@ -55,4 +59,4 @@ hello
 ## 参照
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
     - `noexcept` 追加の経緯となる提案文書
-
+- [P0980R1 Making `std::string` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>vector -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector.md b/reference/vector/vector.md
index 6eacaa5fa..1ac66ecec 100644
--- a/reference/vector/vector.md
+++ b/reference/vector/vector.md
@@ -173,18 +173,18 @@ namespace std {
 
 この特殊化はメモリ領域を最小化するために提供されていて、各要素は1bitの領域のみを必要とする。
 
-`vector&amp;lt;bool&amp;gt;::reference`は`bool`への参照ではなく、領域内の1bitを指す型であり、以下のようなインタフェースである。
+`vector&amp;lt;bool&amp;gt;::reference`は`bool`への参照ではなく、領域内の1bitを指す型であり、以下のようなインタフェースである (`constexpr`はC++20から付加される)。
 
 ```cpp
 class vector&amp;lt;bool&amp;gt;::reference {
   friend class vector;
-  reference();                              // コンストラクタは非公開
+  constexpr reference();                              // コンストラクタは非公開
 public:
-  ~reference();
-  operator bool() const;                    // boolへの暗黙変換
-  reference&amp;amp; operator=(const bool x);       // boolからの代入
-  reference&amp;amp; operator=(const reference&amp;amp; x); // vector&amp;lt;bool&amp;gt;のビットからの代入
-  void flip();                              // ビットの反転
+  constexpr ~reference();
+  constexpr operator bool() const;                    // boolへの暗黙変換
+  constexpr reference&amp;amp; operator=(const bool x);       // boolからの代入
+  constexpr reference&amp;amp; operator=(const reference&amp;amp; x); // vector&amp;lt;bool&amp;gt;のビットからの代入
+  constexpr void flip();                              // ビットの反転
 }
 ```
 
@@ -384,6 +384,40 @@ v[3] : 0
 `vector&amp;lt;bool&amp;gt;`の要素は参照するとプロキシオブジェクトのコピーが返ってくるため、RandomAccessIteratorの要件を満たさない。
 
 
+### 定数式内でvectorを使用する (C++20)
+```cpp
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+constexpr bool f()
+{
+  std::vector&amp;lt;int&amp;gt; v = {1, 2, 3};
+  v.push_back(4);
+
+  auto* p = v.data();
+  assert(p);
+
+  int sum = 0;
+  for (auto x : v) {
+    sum += x;
+  }
+  return sum != 0;
+}
+
+int main()
+{
+  static_assert(f());
+}
+```
+* v.push_back[link vector/push_back.md]
+* v.data[link vector/data.md]
+
+
+#### 出力
+```
+```
+
+
 ## 参照
 - `vector`のメモリ効率について
     - [２倍だけじゃない - Derive Your Dreams](http://www.kmonos.net/wlog/111.html#_2334100705)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>assign -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/assign.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/assign.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/assign.md b/reference/vector/vector/assign.md
index c65ddb6f2..d06e8e5e3 100644
--- a/reference/vector/vector/assign.md
+++ b/reference/vector/vector/assign.md
@@ -6,11 +6,15 @@
 
 ```cpp
 template &amp;lt;class InputIterator&amp;gt;
-void assign(InputIterator first, InputIterator last); // (1)
+void assign(InputIterator first, InputIterator last);           // (1) C++03
+template &amp;lt;class InputIterator&amp;gt;
+constexpr void assign(InputIterator first, InputIterator last); // (1) C++20
 
-void assign(size_type n, const T&amp;amp; u);                 // (2)
+void assign(size_type n, const T&amp;amp; u);           // (2) C++03
+constexpr void assign(size_type n, const T&amp;amp; u); // (2) C++20
 
-void assign(initializer_list&amp;lt;T&amp;gt;);                     // (3) C++11
+void assign(initializer_list&amp;lt;T&amp;gt;);           // (3) C++11
+constexpr void assign(initializer_list&amp;lt;T&amp;gt;); // (3) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -95,3 +99,4 @@ a.assign(il) example:
 
 ## 参照
 - [N2679 Initializer Lists for Standard Containers(Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2679.pdf)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>at -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/at.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/at.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/at.md b/reference/vector/vector/at.md
index 72f48e9de..64fe656e3 100644
--- a/reference/vector/vector/at.md
+++ b/reference/vector/vector/at.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-reference at(size_type n);
-const_reference at(size_type n) const;
+reference at(size_type n);                       // (1) C++03
+constexpr reference at(size_type n);             // (1) C++20
+
+const_reference at(size_type n) const;           // (2) C++03
+constexpr const_reference at(size_type n) const; // (2) C++20
 ```
 
 ## 概要
@@ -62,3 +65,6 @@ out of range
 
 ```
 
+
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>back -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/back.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/back.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/back.md b/reference/vector/vector/back.md
index 2be09cbff..54c5b4f6d 100644
--- a/reference/vector/vector/back.md
+++ b/reference/vector/vector/back.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-reference back();             // (1)
-const_reference back() const; // (2)
+reference back();                       // (1) C++03
+constexpr reference back();             // (1) C++03
+
+const_reference back() const;           // (2) C++03
+constexpr const_reference back() const; // (2) C++03
 ```
 
 ## 概要
@@ -53,3 +56,5 @@ int main()
 4
 ```
 
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>begin -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/begin.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/begin.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/begin.md b/reference/vector/vector/begin.md
index 5490d44cc..ab146af3b 100644
--- a/reference/vector/vector/begin.md
+++ b/reference/vector/vector/begin.md
@@ -7,9 +7,11 @@
 ```cpp
 iterator begin();                      // (1) C++03
 iterator begin() noexcept;             // (1) C++11
+constexpr iterator begin() noexcept;   // (1) C++20
 
-const_iterator begin() const;          // (2) C++03
-const_iterator begin() const noexcept; // (2) C++11
+const_iterator begin() const;                    // (2) C++03
+const_iterator begin() const noexcept;           // (2) C++11
+constexpr const_iterator begin() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -56,3 +58,4 @@ int main()
 ```
 
 ## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>capacity -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/capacity.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/capacity.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/capacity.md b/reference/vector/vector/capacity.md
index 419f8a28d..8c60095d0 100644
--- a/reference/vector/vector/capacity.md
+++ b/reference/vector/vector/capacity.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_type capacity() const;          // (1) C++03
-size_type capacity() const noexcept; // (1) C++11
+size_type capacity() const;                    // (1) C++03
+size_type capacity() const noexcept;           // (1) C++11
+constexpr size_type capacity() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -60,3 +61,4 @@ int main()
 
 ## 参照
 - [LWG Issue 3004. §[string.capacity] and §[vector.capacity] should specify time complexity for `capacity()`](https://wg21.cmeerw.net/lwg/issue3004)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cbegin -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/cbegin.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/cbegin.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/cbegin.md b/reference/vector/vector/cbegin.md
index eedeaaa98..269fb3bd4 100644
--- a/reference/vector/vector/cbegin.md
+++ b/reference/vector/vector/cbegin.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_iterator cbegin() const noexcept;
+const_iterator cbegin() const noexcept;           // (1) C++11
+constexpr const_iterator cbegin() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -66,4 +67,5 @@ int main()
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 
 
-
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>cend -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/cend.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/cend.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/cend.md b/reference/vector/vector/cend.md
index 18daa0be4..03e859252 100644
--- a/reference/vector/vector/cend.md
+++ b/reference/vector/vector/cend.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_iterator cend() const noexcept;
+const_iterator cend() const noexcept;           // (1) C++11
+constexpr const_iterator cend() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -69,3 +70,5 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 
+## 参照
+- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>clear -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/clear.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/clear.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/clear.md b/reference/vector/vector/clear.md
index f8d0894e3..82b8f6b35 100644
--- a/reference/vector/vector/clear.md
+++ b/reference/vector/vector/clear.md
@@ -5,7 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-void clear();
+void clear();           // (1) C++03
+constexpr void clear(); // (1) C++20
 ```
 
 ## 効果
@@ -60,4 +61,4 @@ int main()
 ## 参照
 - [LWG Issue 2231. DR 704 removes complexity guarantee for `clear()`](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2231)
     - C++03までこの関数の効果は`erase(begin(), end())`だったため、それによって線形時間の計算量が保証されていたが、C++11で効果の表記が変わったために、保証がなくなってしまっていた。C++14であらためて保証を追加。
-
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crbegin -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/crbegin.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/crbegin.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/crbegin.md b/reference/vector/vector/crbegin.md
index 6bca0d565..43b0284d6 100644
--- a/reference/vector/vector/crbegin.md
+++ b/reference/vector/vector/crbegin.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_reverse_iterator crbegin() const noexcept;
+const_reverse_iterator crbegin() const noexcept;           // (1) C++11
+constexpr const_reverse_iterator crbegin() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -65,3 +66,5 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>crend -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/crend.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/crend.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/crend.md b/reference/vector/vector/crend.md
index 6c6d3f62d..a245fcc97 100644
--- a/reference/vector/vector/crend.md
+++ b/reference/vector/vector/crend.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-const_reverse_iterator crend() const noexcept;
+const_reverse_iterator crend() const noexcept;            // (1) C++11
+consterxpr const_reverse_iterator crend() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -65,3 +66,6 @@ int main()
 - [ICC](/implementation.md#icc): ??
 - [Visual C++](/implementation.md#visual_cpp): 2010, 2012, 2013
 
+
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>data -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/data.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/data.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/data.md b/reference/vector/vector/data.md
index dbec8102b..b682b360c 100644
--- a/reference/vector/vector/data.md
+++ b/reference/vector/vector/data.md
@@ -7,9 +7,11 @@
 ```cpp
 T* data();                      // (1) C++03
 T* data() noexcept;             // (1) C++11
+constexpr T* data() noexcept;   // (1) C++20
 
-const T* data() const;          // (2) C++03
-const T* data() const noexcept; // (2) C++11
+const T* data() const;                    // (2) C++03
+const T* data() const noexcept;           // (2) C++11
+constexpr const T* data() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -73,3 +75,4 @@ gcc 4.8.2 の時点で libstdc++ の実装にはバグがあり、`vector` が
 - [LWG Issue 464. Suggestion for new member functions in standard containers](https://wg21.cmeerw.net/lwg/issue464)
 - [LWG Issue 2596. `vector::data()` should use addressof](https://wg21.cmeerw.net/lwg/issue2596)
 - [[gcc] Revision 207241](https://gcc.gnu.org/viewcvs/gcc?view=revision&amp;amp;revision=207241)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/emplace.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/emplace.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/emplace.md b/reference/vector/vector/emplace.md
index cb5c8e33a..2d8f7adb1 100644
--- a/reference/vector/vector/emplace.md
+++ b/reference/vector/vector/emplace.md
@@ -7,10 +7,20 @@
 
 ```cpp
 template &amp;lt;class... Args&amp;gt;
-iterator emplace(const_iterator position, Args&amp;amp;&amp;amp;... args);
+iterator
+  emplace(const_iterator position, Args&amp;amp;&amp;amp;... args); // (1) C++11
+template &amp;lt;class... Args&amp;gt;
+constexpr iterator
+  emplace(const_iterator position, Args&amp;amp;&amp;amp;... args); // (1) C++20
 
 template &amp;lt;class... Args&amp;gt;
-iterator vector&amp;lt;bool&amp;gt;::emplace(const_iterator position, Args&amp;amp;&amp;amp;... args); // C++14
+iterator
+  vector&amp;lt;bool&amp;gt;::emplace(const_iterator position,
+                        Args&amp;amp;&amp;amp;... args);         // (2) C++14
+template &amp;lt;class... Args&amp;gt;
+constexpr iterator
+  vector&amp;lt;bool&amp;gt;::emplace(const_iterator position,
+                        Args&amp;amp;&amp;amp;... args);         // (2) C++20
 ```
 
 ## 概要
@@ -82,4 +92,4 @@ int main()
 - [LWG Issue 2187. `vector&amp;lt;bool&amp;gt;` is missing emplace and `emplace_back` member functions](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2187)
 - [LWG Issue 2252. Strong guarantee on `vector::push_back()` still broken with C++11?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2252)
     - 経緯の説明は、[`vector::push_back()`](/reference/vector/vector/push_back.md)ページを参照。
-
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emplace_back -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/emplace_back.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/emplace_back.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/emplace_back.md b/reference/vector/vector/emplace_back.md
index ff96e1571..101600bea 100644
--- a/reference/vector/vector/emplace_back.md
+++ b/reference/vector/vector/emplace_back.md
@@ -10,11 +10,15 @@ template &amp;lt;class... Args&amp;gt;
 void emplace_back(Args&amp;amp;&amp;amp;... args);                      // (1) C++11
 template &amp;lt;class... Args&amp;gt;
 reference emplace_back(Args&amp;amp;&amp;amp;... args);                 // (1) C++17
+template &amp;lt;class... Args&amp;gt;
+constexpr reference emplace_back(Args&amp;amp;&amp;amp;... args);       // (1) C++20
 
 template &amp;lt;class... Args&amp;gt;
-void vector&amp;lt;bool&amp;gt;::emplace_back(Args&amp;amp;&amp;amp;... args);        // (2) C++11
+void vector&amp;lt;bool&amp;gt;::emplace_back(Args&amp;amp;&amp;amp;... args);                // (2) C++11
+template &amp;lt;class... Args&amp;gt;
+reference vector&amp;lt;bool&amp;gt;::emplace_back(Args&amp;amp;&amp;amp;... args);           // (2) C++17
 template &amp;lt;class... Args&amp;gt;
-reference vector&amp;lt;bool&amp;gt;::emplace_back(Args&amp;amp;&amp;amp;... args);   // (2) C++17
+constexpr reference vector&amp;lt;bool&amp;gt;::emplace_back(Args&amp;amp;&amp;amp;... args); // (2) C++20
 ```
 
 ## 概要
@@ -88,3 +92,4 @@ int main()
 - [P0084R0 Emplace Return Type](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0084r0.pdf)
 - [P0084R1 Emplace Return Type (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0084r1.pdf)
 - [P0084R2 Emplace Return Type (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0084r2.pdf)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>empty -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/empty.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/empty.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/empty.md b/reference/vector/vector/empty.md
index 034c88e2d..2c205374b 100644
--- a/reference/vector/vector/empty.md
+++ b/reference/vector/vector/empty.md
@@ -5,9 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-bool empty() const;                        // (1) C++03
-bool empty() const noexcept;               // (1) C++11
-[[nodiscard]] bool empty() const noexcept; // (1) C++20
+bool empty() const;                                  // (1) C++03
+bool empty() const noexcept;                         // (1) C++11
+[[nodiscard]] constexpr bool empty() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -66,3 +66,4 @@ false
 
 ## 参照
 - [P0600R1 `[[nodiscard]]` in the Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>end -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/end.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/end.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/end.md b/reference/vector/vector/end.md
index faaf6ec5b..4a37f7e47 100644
--- a/reference/vector/vector/end.md
+++ b/reference/vector/vector/end.md
@@ -5,11 +5,13 @@
 * function[meta id-type]
 
 ```cpp
-iterator end();                      // (1) C++03
-iterator end() noexcept;             // (1) C++11
+iterator end();                                // (1) C++03
+iterator end() noexcept;                       // (1) C++11
+constexpr iterator end() noexcept;             // (1) C++20
 
-const_iterator end() const;          // (2) C++03
-const_iterator end() const noexcept; // (2) C++11
+const_iterator end() const;                    // (2) C++03
+const_iterator end() const noexcept;           // (2) C++11
+constexpr const_iterator end() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -73,3 +75,5 @@ int main()
 ```
 
 
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/erase.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/erase.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/erase.md b/reference/vector/vector/erase.md
index ac2b81ffb..5c8d8a31a 100644
--- a/reference/vector/vector/erase.md
+++ b/reference/vector/vector/erase.md
@@ -5,11 +5,15 @@
 * function[meta id-type]
 
 ```cpp
-iterator erase(iterator position);       // (1) C++03
-iterator erase(const_iterator position); // (1) C++11
-
-iterator erase(iterator first, iterator last);             // (2) C++03
-iterator erase(const_iterator first, const_iterator last); // (2) C++11
+iterator erase(iterator position);                 // (1) C++03
+iterator erase(const_iterator position);           // (1) C++11
+constexpr iterator erase(const_iterator position); // (1) C++20
+
+iterator erase(iterator first, iterator last);  // (2) C++03
+iterator erase(const_iterator first,
+               const_iterator last);            // (2) C++11
+constexpr iterator erase(const_iterator first,
+                         const_iterator last);  // (2) C++20
 ```
 
 ## 概要
@@ -135,4 +139,4 @@ int main()
 
 ## 参照
 - [N2350 Container insert/erase and iterator constness (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2350.pdf)
-
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase (非メンバ関数) -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/erase_free.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/erase_free.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/erase_free.md b/reference/vector/vector/erase_free.md
index 057ff87eb..8050eb899 100644
--- a/reference/vector/vector/erase_free.md
+++ b/reference/vector/vector/erase_free.md
@@ -7,7 +7,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator, class U&amp;gt;
-  typename vector&amp;lt;T, Allocator&amp;gt;::size_type erase(vector&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);
+  constexpr typename vector&amp;lt;T, Allocator&amp;gt;::size_type
+    erase(vector&amp;lt;T, Allocator&amp;gt;&amp;amp; c, const U&amp;amp; value);
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>erase_if -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/erase_if_free.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/erase_if_free.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/erase_if_free.md b/reference/vector/vector/erase_if_free.md
index 2918cc0db..7b8346cbb 100644
--- a/reference/vector/vector/erase_if_free.md
+++ b/reference/vector/vector/erase_if_free.md
@@ -7,7 +7,8 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator, class Predicate&amp;gt;
-  typename vector&amp;lt;T, Allocator&amp;gt;::size_type erase_if(vector&amp;lt;T, Allocator&amp;gt;&amp;amp; c, Predicate pred);
+  constexpr typename vector&amp;lt;T, Allocator&amp;gt;::size_type
+    erase_if(vector&amp;lt;T, Allocator&amp;gt;&amp;amp; c, Predicate pred);
 }
 ```
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>front -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/front.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/front.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/front.md b/reference/vector/vector/front.md
index 000f31bf6..ae38a5c2f 100644
--- a/reference/vector/vector/front.md
+++ b/reference/vector/vector/front.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-reference front();             // (1)
-const_reference front() const; // (2)
+reference front();                       // (1) C++03
+constexpr reference front();             // (1) C++20
+
+const_reference front() const;           // (2) C++03
+constexpr const_reference front() const; // (2) C++20
 ```
 
 ## 概要
@@ -45,3 +48,6 @@ int main()
 3
 ```
 
+
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>get_allocator -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/get_allocator.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/get_allocator.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/get_allocator.md b/reference/vector/vector/get_allocator.md
index 3a768e20e..eebedde5b 100644
--- a/reference/vector/vector/get_allocator.md
+++ b/reference/vector/vector/get_allocator.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-allocator_type get_allocator() const;          // (1) C++03
-allocator_type get_allocator() const noexcept; // (2) C++11
+allocator_type get_allocator() const;                    // (1) C++03
+allocator_type get_allocator() const noexcept;           // (1) C++11
+constexpr allocator_type get_allocator() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -54,4 +55,5 @@ int main()
 	- 2012, 2013は、`noexcept`が実装されていないため、`throw()`が修飾されている。
 	- 2015からは、`noexcept`が修飾されている。
 
-
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>insert -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/insert.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/insert.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/insert.md b/reference/vector/vector/insert.md
index bd7a5290a..9bc21b7f0 100644
--- a/reference/vector/vector/insert.md
+++ b/reference/vector/vector/insert.md
@@ -5,24 +5,37 @@
 * function[meta id-type]
 
 ```cpp
-iterator insert(iterator position, const T&amp;amp; x);                   // (1) C++03
-iterator insert(const_iterator position, const T&amp;amp; x);             // (1) C++11
+iterator insert(iterator position, const T&amp;amp; x);                 // (1) C++03
+iterator insert(const_iterator position, const T&amp;amp; x);           // (1) C++11
+consrexpr iterator insert(const_iterator position, const T&amp;amp; x); // (1) C++20
 
-iterator insert(const_iterator position, T&amp;amp;&amp;amp; x);                  // (2) C++11
+iterator insert(const_iterator position, T&amp;amp;&amp;amp; x);           // (2) C++11
+constexpr iterator insert(const_iterator position, T&amp;amp;&amp;amp; x); // (2) C++20
 
 void insert(iterator position,
-            size_type n, const T&amp;amp; x);                             // (3) C++03
+            size_type n, const T&amp;amp; x);               // (3) C++03
 iterator insert(const_iterator position,
-                size_type n, const T&amp;amp; x);                         // (3) C++11
+                size_type n, const T&amp;amp; x);           // (3) C++11
+constexpr iterator insert(const_iterator position,
+                          size_type n, const T&amp;amp; x); // (3) C++20
 
 template &amp;lt;class InputIterator&amp;gt;
 void insert(iterator position,
-            InputIterator first, InputIterator last);             // (4) C++03
+            InputIterator first,
+            InputIterator last);                   // (4) C++03
 template &amp;lt;class InputIterator&amp;gt;
 iterator insert(const_iterator position,
-                InputIterator first, InputIterator last);         // (4) C++11
+                InputIterator first,
+                InputIterator last);               // (4) C++11
+template &amp;lt;class InputIterator&amp;gt;
+constexpr iterator insert(const_iterator position,
+                          InputIterator first,
+                          InputIterator last);     // (4) C++20
 
-iterator insert(const_iterator position, initializer_list&amp;lt;T&amp;gt; il); // (5) C++11
+iterator insert(const_iterator position,
+                initializer_list&amp;lt;T&amp;gt; il);           // (5) C++11
+constexpr iterator insert(const_iterator position,
+                          initializer_list&amp;lt;T&amp;gt; il); // (5) C++20
 ```
 
 ## 概要
@@ -171,4 +184,4 @@ int main() {
     - (5)の経緯となる提案文書
 - [LWG Issue 2252. Strong guarantee on `vector::push_back()` still broken with C++11?](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2252)
     - 経緯の説明は、[`vector::push_back()`](/reference/vector/vector/push_back.md)ページを参照。
-
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>max_size -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/max_size.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/max_size.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/max_size.md b/reference/vector/vector/max_size.md
index f246de75b..f471a763a 100644
--- a/reference/vector/vector/max_size.md
+++ b/reference/vector/vector/max_size.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_type max_size() const;          // (1) C++03
-size_type max_size() const noexcept; // (1) C++11
+size_type max_size() const;                    // (1) C++03
+size_type max_size() const noexcept;           // (1) C++11
+constexpr size_type max_size() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -46,3 +47,5 @@ int main()
 ```
 
 
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_assign.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/op_assign.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_assign.md b/reference/vector/vector/op_assign.md
index 7d9f12c2c..4ac758454 100644
--- a/reference/vector/vector/op_assign.md
+++ b/reference/vector/vector/op_assign.md
@@ -5,14 +5,19 @@
 * function[meta id-type]
 
 ```cpp
-vector&amp;amp; operator=(const vector&amp;amp; x);     // (1) C++03
+vector&amp;amp; operator=(const vector&amp;amp; x);           // (1) C++03
+constexpr vector&amp;amp; operator=(const vector&amp;amp; x); // (1) C++20
 
 vector&amp;amp; operator=(vector&amp;amp;&amp;amp; x);          // (2) C++11
 vector&amp;amp; operator=(vector&amp;amp;&amp;amp; x) noexcept(
   allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value
     || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value); // (2) C++17
+constexpr vector&amp;amp; operator=(vector&amp;amp;&amp;amp; x) noexcept(
+  allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment::value
+    || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value); // (2) C++20
 
-vector&amp;amp; operator=(initializer_list&amp;lt;T&amp;gt;); // (3) C++11
+vector&amp;amp; operator=(initializer_list&amp;lt;T&amp;gt;);           // (3) C++11
+constexpr vector&amp;amp; operator=(initializer_list&amp;lt;T&amp;gt;); // (3) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 * allocator_traits[link /reference/memory/allocator_traits.md]
@@ -109,3 +114,4 @@ int main()
     - (3)の経緯となる提案文書
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
     - `noexcept` 追加の経緯となる提案文書
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator[] -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_at.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/op_at.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_at.md b/reference/vector/vector/op_at.md
index cb85ab9b3..53950b09b 100644
--- a/reference/vector/vector/op_at.md
+++ b/reference/vector/vector/op_at.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-reference operator[](size_type n);             // (1)
-const_reference operator[](size_type n) const; // (2)
+reference operator[](size_type n);                       // (1) C++03
+constexpr reference operator[](size_type n);             // (1) C++20
+
+const_reference operator[](size_type n) const;           // (2) C++03
+constexpr const_reference operator[](size_type n) const; // (2) C++20
 ```
 
 ## 概要
@@ -47,3 +50,5 @@ int main()
 4
 ```
 
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_constructor.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/op_constructor.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_constructor.md b/reference/vector/vector/op_constructor.md
index 4d5f4e941..963fb6a69 100644
--- a/reference/vector/vector/op_constructor.md
+++ b/reference/vector/vector/op_constructor.md
@@ -5,21 +5,29 @@
 * function[meta id-type]
 
 ```cpp
-vector();                                            // (1) C++14
-vector() noexcept(noexcept(Allocator()))             // (1) C++17
+vector();                                          // (1) C++14
+vector() noexcept(noexcept(Allocator()))           // (1) C++17
   : vector(Allocator()) {}
+constexpr vector() noexcept(noexcept(Allocator())) // (1) C++20
+  : vector(Allocator()) {}
+
 
-explicit vector(const Allocator&amp;amp; a);                 // (2) C++14
-explicit vector(const Allocator&amp;amp;) noexcept;          // (2) C++17
+explicit vector(const Allocator&amp;amp; a);                  // (2) C++14
+explicit vector(const Allocator&amp;amp;) noexcept;           // (2) C++17
+constexpr explicit vector(const Allocator&amp;amp;) noexcept; // (2) C++20
 
-explicit vector(const Allocator&amp;amp; a = Allocator());   // (1) + (2) C++03
+explicit vector(const Allocator&amp;amp; a = Allocator());    // (1) + (2) C++03
 
-explicit vector(size_type n);                        // (3) C++11
+explicit vector(size_type n);                                // (3) C++11
 explicit vector(size_type n,
-                const Allocator&amp;amp; a = Allocator());   // (3) C++14
+                const Allocator&amp;amp; a = Allocator());           // (3) C++14
+constexpr explicit vector(size_type n,
+                          const Allocator&amp;amp; a = Allocator()); // (3) C++20
 
 vector(size_type n, const T&amp;amp; value,
        const Allocator&amp;amp; a = Allocator());            // (4) C++11
+constexpr vector(size_type n, const T&amp;amp; value,
+                 const Allocator&amp;amp; a = Allocator());  // (4) C++20
 
 explicit vector(size_type n, const T&amp;amp; value = T(),
                 const Allocator&amp;amp; a = Allocator());   // (3) + (4) C++03
@@ -27,18 +35,27 @@ explicit vector(size_type n, const T&amp;amp; value = T(),
 template &amp;lt;class InputIter&amp;gt;
 vector(InputIter first, InputIter last,
       const Allocator&amp;amp; a = Allocator());             // (5) C++03
+template &amp;lt;class InputIter&amp;gt;
+constexpr vector(InputIter first, InputIter last,
+                 const Allocator&amp;amp; a = Allocator());  // (5) C++20
 
 vector(const vector&amp;amp; x);                             // (6) C++03
+constexpr vector(const vector&amp;amp; x);                   // (6) C++20
 
 vector(vector&amp;amp;&amp;amp; x);                                  // (7) C++11
 vector(vector&amp;amp;&amp;amp; x) noexcept;                         // (7) C++17
+constexpr vector(vector&amp;amp;&amp;amp; x) noexcept;               // (7) C++20
 
-vector(const vector&amp;amp; x, const Allocator&amp;amp; a);         // (8) C++11
+vector(const vector&amp;amp; x, const Allocator&amp;amp; a);           // (8) C++11
+constexpr vector(const vector&amp;amp; x, const Allocator&amp;amp; a); // (8) C++20
 
 vector(vector&amp;amp;&amp;amp; x, const Allocator&amp;amp; a);              // (9) C++11
+constexpr vector(vector&amp;amp;&amp;amp; x, const Allocator&amp;amp; a);    // (9) C++20
 
 vector(initializer_list&amp;lt;T&amp;gt; il,
        const Allocator&amp;amp; a = Allocator());            // (10) C++11
+constexpr vector(initializer_list&amp;lt;T&amp;gt; il,
+                 const Allocator&amp;amp; a = Allocator());  // (10) C++20
 ```
 * initializer_list[link /reference/initializer_list/initializer_list.md]
 
@@ -169,3 +186,4 @@ sixth : {1 2 3 }
 	なお、Discussion の例はアロケータの型が誤っているので注意
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
     - `noexcept` 追加の経緯となる提案文書
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>デストラクタ -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_destructor.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/op_destructor.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_destructor.md b/reference/vector/vector/op_destructor.md
index 70eddcf9e..54cf8cf20 100644
--- a/reference/vector/vector/op_destructor.md
+++ b/reference/vector/vector/op_destructor.md
@@ -5,7 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-~vector()
+~vector();           // (1) C++03
+constexpr ~vector(); // (1) C++20
 ```
 
 ## 概要
@@ -24,3 +25,6 @@
 - デストラクタを呼び出す必要のない型に対しては、デストラクタを呼ばない。
 - そのような型は、[`is_trivially_destructible&amp;lt;T&amp;gt;`](/reference/type_traits/is_trivially_destructible.md)`::value == true`となる、ユーザー定義されたデストラクタを持たない型
 
+
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_equal.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/op_equal.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_equal.md b/reference/vector/vector/op_equal.md
index a05215bf2..7508de345 100644
--- a/reference/vector/vector/op_equal.md
+++ b/reference/vector/vector/op_equal.md
@@ -98,4 +98,4 @@ int main()
 ## 参照
 - [LWG Issue 2257. Simplify container requirements with the new algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257)
     - C++14から、2つ目の範囲のendイテレータをとる`equal()`アルゴリズムを使用するようになった。
-- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_greater.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/op_greater.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_greater.md b/reference/vector/vector/op_greater.md
index 4b547b33b..6d1deda71 100644
--- a/reference/vector/vector/op_greater.md
+++ b/reference/vector/vector/op_greater.md
@@ -49,4 +49,4 @@ true
 ```
 
 ## 参照
-- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_greater_equal.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/op_greater_equal.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_greater_equal.md b/reference/vector/vector/op_greater_equal.md
index 1b330b4cc..b8ca4776c 100644
--- a/reference/vector/vector/op_greater_equal.md
+++ b/reference/vector/vector/op_greater_equal.md
@@ -49,4 +49,4 @@ true
 ```
 
 ## 参照
-- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_less.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/op_less.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_less.md b/reference/vector/vector/op_less.md
index fd305ed4a..d769ba217 100644
--- a/reference/vector/vector/op_less.md
+++ b/reference/vector/vector/op_less.md
@@ -58,4 +58,4 @@ true
 ```
 
 ## 参照
-- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_less_equal.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/op_less_equal.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_less_equal.md b/reference/vector/vector/op_less_equal.md
index 5fb810ab3..31c7cfeda 100644
--- a/reference/vector/vector/op_less_equal.md
+++ b/reference/vector/vector/op_less_equal.md
@@ -49,4 +49,4 @@ true
 ```
 
 ## 参照
-- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_not_equal.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/op_not_equal.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_not_equal.md b/reference/vector/vector/op_not_equal.md
index 9f0fe6050..6ee68013d 100644
--- a/reference/vector/vector/op_not_equal.md
+++ b/reference/vector/vector/op_not_equal.md
@@ -87,4 +87,4 @@ int main()
 ```
 
 ## 参照
-- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>pop_back -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/pop_back.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/pop_back.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/pop_back.md b/reference/vector/vector/pop_back.md
index 1b70964cd..83961e429 100644
--- a/reference/vector/vector/pop_back.md
+++ b/reference/vector/vector/pop_back.md
@@ -5,7 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-void pop_back();
+void pop_back();           // (1) C++03
+constexpr void pop_back(); // (1) C++20
 ```
 
 ## 概要
@@ -49,5 +50,4 @@ int main()
 ```
 
 ## 参照
-
-
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>push_back -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/push_back.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/push_back.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/push_back.md b/reference/vector/vector/push_back.md
index b4ea44dc8..b53c5b564 100644
--- a/reference/vector/vector/push_back.md
+++ b/reference/vector/vector/push_back.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-void push_back(const T&amp;amp; x); // (1)
-void push_back(T&amp;amp;&amp;amp; x);      // (2) C++11
+void push_back(const T&amp;amp; x);           // (1) C++03
+constexpr void push_back(const T&amp;amp; x); // (1) C++20
+
+void push_back(T&amp;amp;&amp;amp; x);                // (2) C++11
+constexpr void push_back(T&amp;amp;&amp;amp; x);      // (2) C++20
 ```
 
 ## 概要
@@ -92,4 +95,5 @@ world
         - `deque`の[`push_back()`](/reference/deque/deque/push_back.md)と[`push_front()`](/reference/deque/deque/push_front.md) (C++03から)
         - `deque`の[`emplace_back()`](/reference/deque/deque/emplace_back.md)と[`emplace_front()`](/reference/deque/deque/emplace_front.md) (C++14から)
         - `deque`の両端へ単一要素を挿入する[`insert()`](/reference/deque/deque/insert.md)と[`emplace()`](/reference/deque/deque/emplace.md) (C++14)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rbegin -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/rbegin.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/rbegin.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/rbegin.md b/reference/vector/vector/rbegin.md
index 39a3c1c48..64b972678 100644
--- a/reference/vector/vector/rbegin.md
+++ b/reference/vector/vector/rbegin.md
@@ -7,9 +7,11 @@
 ```cpp
 reverse_iterator rbegin();                      // (1) C++03
 reverse_iterator rbegin() noexcept;             // (1) C++11
+constexpr reverse_iterator rbegin() noexcept;   // (1) C++20
 
-const_reverse_iterator rbegin() const;          // (2) C++03
-const_reverse_iterator rbegin() const noexcept; // (2) C++11
+const_reverse_iterator rbegin() const;                    // (2) C++03
+const_reverse_iterator rbegin() const noexcept;           // (2) C++11
+constexpr const_reverse_iterator rbegin() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -56,5 +58,4 @@ int main()
 ```
 
 ## 参照
-
-
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>rend -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/rend.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/rend.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/rend.md b/reference/vector/vector/rend.md
index 6ac02c503..c0242cf1c 100644
--- a/reference/vector/vector/rend.md
+++ b/reference/vector/vector/rend.md
@@ -7,9 +7,11 @@
 ```cpp
 reverse_iterator rend();                      // (1) C++03
 reverse_iterator rend() noexcept;             // (1) C++11
+constexpr reverse_iterator rend() noexcept;   // (1) C++20
 
-const_reverse_iterator rend() const;          // (2) C++03
-const_reverse_iterator rend() const noexcept; // (2) C++11
+const_reverse_iterator rend() const;                    // (2) C++03
+const_reverse_iterator rend() const noexcept;           // (2) C++11
+constexpr const_reverse_iterator rend() const noexcept; // (2) C++20
 ```
 
 ## 概要
@@ -68,3 +70,5 @@ int main()
 1
 ```
 
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>reserve -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/reserve.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/reserve.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/reserve.md b/reference/vector/vector/reserve.md
index 2e41adc61..d55722f2f 100644
--- a/reference/vector/vector/reserve.md
+++ b/reference/vector/vector/reserve.md
@@ -5,7 +5,8 @@
 * function[meta id-type]
 
 ```cpp
-void reserve(size_type n);
+void reserve(size_type n);           // (1) C++03
+constexpr void reserve(size_type n); // (1) C++20
 ```
 
 ## 概要
@@ -71,4 +72,4 @@ int main()
 
 ## 参照
 - [LWG Issue 2033. Preconditions of `reserve`, `shrink_to_fit`, and `resize` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2033)
-
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>resize -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/resize.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/resize.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/resize.md b/reference/vector/vector/resize.md
index 08bf0d5b8..b9f19ccc9 100644
--- a/reference/vector/vector/resize.md
+++ b/reference/vector/vector/resize.md
@@ -5,9 +5,13 @@
 * function[meta id-type]
 
 ```cpp
-void resize(size_type sz);             // (1) C++11
-void resize(size_type sz, const T&amp;amp; c); // (2) C++11
-void resize(size_type sz, T c = T());  // (1) + (2) C++03
+void resize(size_type sz);                       // (1) C++11
+constexpr void resize(size_type sz);             // (1) C++20
+
+void resize(size_type sz, const T&amp;amp; c);           // (2) C++11
+constexpr void resize(size_type sz, const T&amp;amp; c); // (2) C++11
+
+void resize(size_type sz, T c = T()); // (1) + (2) C++03
 ```
 
 ## 要件
@@ -109,3 +113,4 @@ int main()
 - [LWG Issue 2033. Preconditions of `reserve`, `shrink_to_fit`, and `resize` functions](https://wg21.cmeerw.net/lwg/issue2033)
 - [LWG Issue 2323. `vector::resize(n, t)`&amp;#39;s specification should be simplified](https://wg21.cmeerw.net/lwg/issue2323)
 - [LWG Issue 2160. Unintended destruction ordering-specification of `resize`](https://wg21.cmeerw.net/lwg/issue2160)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>shrink_to_fit -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/shrink_to_fit.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/shrink_to_fit.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/shrink_to_fit.md b/reference/vector/vector/shrink_to_fit.md
index fe7755b8e..0a74a8d4c 100644
--- a/reference/vector/vector/shrink_to_fit.md
+++ b/reference/vector/vector/shrink_to_fit.md
@@ -6,7 +6,8 @@
 * cpp11[meta cpp]
 
 ```cpp
-void shrink_to_fit();
+void shrink_to_fit();           // (1) C++11
+constexpr void shrink_to_fit(); // (1) C++20
 ```
 
 ## 概要
@@ -81,3 +82,4 @@ int main()
 - [LWG Issue 755. `std::vector` and `std:string` lack explicit shrink-to-fit operations](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#755)
 - [LWG Issue 2033. Preconditions of `reserve`, `shrink_to_fit`, and `resize` functions](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2033)
 - [LWG Issue 2223. `shrink_to_fit` effect on iterator validity](https://wg21.cmeerw.net/lwg/issue2223)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>size -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/size.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/size.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/size.md b/reference/vector/vector/size.md
index 7deb7d962..1d06e8f42 100644
--- a/reference/vector/vector/size.md
+++ b/reference/vector/vector/size.md
@@ -5,8 +5,9 @@
 * function[meta id-type]
 
 ```cpp
-size_type size() const;          // (1) C++03
-size_type size() const noexcept; // (1) C++11
+size_type size() const;                    // (1) C++03
+size_type size() const noexcept;           // (1) C++11
+constexpr size_type size() const noexcept; // (1) C++20
 ```
 
 ## 概要
@@ -49,3 +50,6 @@ int main()
 5
 ```
 
+
+## 参照
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/swap.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/swap.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/swap.md b/reference/vector/vector/swap.md
index 7817983a8..fc58cd6e5 100644
--- a/reference/vector/vector/swap.md
+++ b/reference/vector/vector/swap.md
@@ -5,8 +5,11 @@
 * function[meta id-type]
 
 ```cpp
-void swap(vector&amp;amp; x); // (1) C++03
-void swap(vector&amp;amp; x)  // (1) C++17
+void swap(vector&amp;amp; x);           // (1) C++03
+void swap(vector&amp;amp; x)            // (1) C++17
+  noexcept(allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_swap::value 
+    || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);
+constexpr void swap(vector&amp;amp; x)  // (1) C++20
   noexcept(allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_swap::value 
     || allocator_traits&amp;lt;Allocator&amp;gt;::is_always_equal::value);
 ```
@@ -73,3 +76,4 @@ v2 : {1 2 3 }
 ## 参照
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
     - `noexcept` 追加の経緯となる提案文書
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- vectorの残りをconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/swap_free.html"/>
      <id>3c54d152a3853883b0f2b932002ca1f328ae0bf8:reference/vector/vector/swap_free.md</id>
      <updated>2022-10-06T16:13:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/swap_free.md b/reference/vector/vector/swap_free.md
index 81a2eefeb..07f5fd60c 100644
--- a/reference/vector/vector/swap_free.md
+++ b/reference/vector/vector/swap_free.md
@@ -69,4 +69,4 @@ v2 : {1 2 3 }
 ## 参照
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
     - `noexcept` 追加の経緯となる提案文書
-- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
+- [P1004R2 Making `std::vector` constexpr](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++23 -- C++23 : 契約ライブラリを削除</title>
      <link href="https://cpprefjp.github.io/lang/cpp23.html"/>
      <id>16025911ce75d6649e6ca43c850d0cec099dfb62:lang/cpp23.md</id>
      <updated>2022-10-06T15:13:33+09:00</updated>
      
        <content type="html">&lt;h1 itemprop=&#34;name&#34;&gt;&lt;span class=&#34;token&#34;&gt;C++23&lt;/span&gt;&lt;/h1&gt;
&lt;div itemprop=&#34;articleBody&#34;&gt;&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;C++23とは、2023年中に改訂される予定の、C++バージョンの通称である。&lt;/p&gt;
&lt;p&gt;このバージョンは、策定中のためC++2bと呼ばれることがある。「(C++20である2020年の次の) 202b年にリリースされる」という伏せ字として「b」が使われているが、3年周期に次のバージョンが策定されることが決まっているため、伏せ字になっている年数がずれることはない。&lt;/p&gt;
&lt;h2&gt;言語機能&lt;/h2&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/literal_suffix_for_signed_size_t.html&#34;&gt;(符号付き)&lt;code&gt;size_t&lt;/code&gt;リテラルのためのサフィックス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;42z&lt;/code&gt;/&lt;code&gt;42Z&lt;/code&gt;とすることで&lt;code&gt;size_t&lt;/code&gt;に対応する符号付き整数型のリテラルとする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/generalized_wording_for_partial_specializations.md.nolink&#34;&gt;部分特殊化の汎用化仕様&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;変数テンプレートの部分特殊化を許可するために部分特殊化の仕様を汎用化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/numeric_and_universal_character_escapes_in_character_and_string_literals.md.nolink&#34;&gt;文字・文字列リテラル中の数値・ユニバーサルキャラクタのエスケープに関する問題解決&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/declarations_and_where_to_find_them.md.nolink&#34;&gt;スコープと名前ルックアップの仕様整理&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;複雑で不完全になっているスコープと名前ルックアップの仕様を整理し、一部の問題を解決する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/down_with_lambda_parens.md.nolink&#34;&gt;ラムダ式で&lt;code&gt;()&lt;/code&gt;を省略できる条件を緩和&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;キャプチャや修飾をともなってもパラメータリストが空であれば&lt;code&gt;()&lt;/code&gt;を省略できる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/if_consteval.md.nolink&#34;&gt;if consteval&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイル時の文脈かどうかで分岐させる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/narrowing_contextual_conversions_to_bool.md.nolink&#34;&gt;定数式の文脈での&lt;code&gt;bool&lt;/code&gt;への縮小変換を許可&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if constexpr(flags &amp;amp; Flags::Exec)&lt;/code&gt;や&lt;code&gt;static_assert(N);&lt;/code&gt;を許可&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/trimming_whitespaces_before_line_splicing.md.nolink&#34;&gt;行末スペースを無視するよう規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;行末が&lt;code&gt;\&lt;/code&gt;でおわっていた場合にMSVCは行の継続をしない実装になっていたため動作を共通化するため仕様を規定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/make_declaration_order_layout_mandated.md.nolink&#34;&gt;アクセス制御の異なるメンバ変数のレイアウトを宣言順に規定&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;アクセス制御の異なるメンバ変数のレイアウトが実装によって異なっていたため仕様を規定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/mixed_string_literal_concatenation.md.nolink&#34;&gt;異なる文字エンコーディングをもつ文字列リテラルの連結を不適格とする&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;auto a = u8&#34;&#34; L&#34;&#34;;&lt;/code&gt;のような異なる文字エンコーディング同士での文字列リテラルを連結を禁止する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;小さな変更&lt;/h3&gt;
&lt;table border=&#34;1&#34; bordercolor=&#34;#888&#34; style=&#34;border-collapse:collapse&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語機能&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://cpprefjp.github.io/lang/cpp23/update_normative_reference_to_posix.html&#34;&gt;参照するPOSIX規格を更新&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;新しいPOSIX規格の機能を標準C++が参照していたため、参照するPOSIX規格のバージョンを更新&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;ライブラリ更新の概要&lt;/h2&gt;
&lt;h3&gt;新ライブラリ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;スタックトレースを取得するためのライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stacktrace.html&#34;&gt;&amp;lt;stacktrace&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;CとC++の間でのアトミック操作の相互運用のため、C互換ライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stdatomic.h.html&#34;&gt;&amp;lt;stdatomic.h&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;外部から提供されるメモリバッファでストリーム処理を行うライブラリとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/spanstream.md.nolink&#34;&gt;&amp;lt;spanstream&amp;gt;&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;コンテナ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/stack/stack.html&#34;&gt;std::stack&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/queue/queue.html&#34;&gt;std::queue&lt;/a&gt;&lt;/code&gt;に、イテレータのペアをとるコンストラクタを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto v = std::vector(v, alloc);&lt;/code&gt;のようなアロケータ引数をともなう場合のクラステンプレートのテンプレート引数推論が動作しなかったため、各コンテナクラスのコンストラクタにおけるアロケータパラメータの型を&lt;code&gt;const Allocator&amp;amp;&lt;/code&gt;から&lt;code&gt;const &lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/type_identity.html&#34;&gt;std::type_identity_t&lt;/a&gt;&amp;lt;Allocator&amp;gt;&amp;amp;&lt;/code&gt;に修正&lt;/li&gt;
&lt;li&gt;N要素のメモリアロケート時にアロケータが実際にどれくらいのメモリを確保したかを得られるインタフェースとして、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator.html&#34;&gt;std::allocator&lt;/a&gt;&lt;/code&gt;クラスに、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/allocator/allocate_at_least.md.nolink&#34;&gt;allocate_at_least()&lt;/a&gt;&lt;/code&gt;メンバ関数を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/pair.html&#34;&gt;std::pair&lt;/a&gt;&lt;/code&gt;の転送コンストラクタにデフォルトテンプレート引数を追加することで、&lt;code&gt;{}&lt;/code&gt;のような型推論ができない引数を渡した場合でも完全転送が行われるよう修正&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;アルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm.html&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/a&gt;&lt;/code&gt;に、範囲の先頭が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/starts_with.md.nolink&#34;&gt;std::starts_with()&lt;/a&gt;&lt;/code&gt;、範囲の末尾が指定した範囲と合致するかを判定する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/ends_with.md.nolink&#34;&gt;std::ends_with()&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文字列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;クラスと&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;クラスに、文字列内に指定した文字・文字列が含まれているかを判定するメンバ関数&lt;code&gt;contains()&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;のコンストラクタに、範囲をとるオーバーロードを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::string s = nullptr;&lt;/code&gt;のような文字列オブジェクトに&lt;code&gt;nullptr&lt;/code&gt;を代入するようなコードはバグの元であるため、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string.html&#34;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string_view/basic_string_view.html&#34;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;に、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/nullptr_t.html&#34;&gt;nullptr_t&lt;/a&gt;&lt;/code&gt;をとるコンストラクタをdelete定義として追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;関数オブジェクト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/invoke.html&#34;&gt;std::invoke()&lt;/a&gt;&lt;/code&gt;の戻り値型を指定するバージョンである&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/functional/onvoke_r.md.nolink&#34;&gt;std::invoke_r()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;スマートポインタ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_hash.md.nolink&#34;&gt;std::owner_hash&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/owner_equal.md.nolink&#34;&gt;std::owner_equal&lt;/a&gt;&lt;/code&gt;が追加され、非順序連想コンテナのキーとして&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/weak_ptr.html&#34;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;を使用できるようになった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory.html&#34;&gt;&amp;lt;memory&amp;gt;&lt;/a&gt;&lt;/code&gt;に、出力ポインタと入出力ポインタの抽象である&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/out_ptr.md.nolink&#34;&gt;std::out_ptr&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/inout_ptr.md.nolink&#34;&gt;std::inout_ptr&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ユーティリティ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/visit.html&#34;&gt;std::visit()&lt;/a&gt;&lt;/code&gt;に指定できるバリアントオブジェクトを、直接的な「&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;型の特殊化であること」という制約を緩和し、&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/variant/variant.html&#34;&gt;std::variant&lt;/a&gt;&lt;/code&gt;から派生した型も許可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility.html&#34;&gt;&amp;lt;utility&amp;gt;&lt;/a&gt;&lt;/code&gt;に、列挙値を基底型に変換する&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/utility/to_underlying.html&#34;&gt;std::to_underlying()&lt;/a&gt;&lt;/code&gt;関数を追加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo/type_info.html&#34;&gt;std::type_info&lt;/a&gt;&lt;/code&gt;クラスの&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/typeinfo/type_info/op_equal.html&#34;&gt;operator==&lt;/a&gt;&lt;/code&gt;を&lt;code&gt;constexpr&lt;/code&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、スコープ付き列挙型かを判定する型特性&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/is_scoped_enum.html&#34;&gt;std::is_scoped_enum&lt;/a&gt;&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、第1テンプレート引数についている型修飾を第2テンプレート引数の型に付加する型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_const.md.nolink&#34;&gt;std::copy_const&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_volatile.md.nolink&#34;&gt;std::copy_volatile&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_cv.md.nolink&#34;&gt;std::copy_cv&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_reference.md.nolink&#34;&gt;std::copy_reference&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_extent.md.nolink&#34;&gt;std::copy_extent&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_all_extents.md.nolink&#34;&gt;std::copy_all_extents&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_pointer.md.nolink&#34;&gt;std::copy_pointer&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_all_pointers.md.nolink&#34;&gt;std::copy_all_pointers&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/copy_cvref.md.nolink&#34;&gt;std::copy_cvref&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits.html&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/a&gt;&lt;/code&gt;に、第1テンプレート引数についている型修飾を外す型特性として、以下を追加：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/remove_all_pointers.md.nolink&#34;&gt;std::remove_all_pointers&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の非推奨化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::algined_storage&lt;/a&gt;&lt;/code&gt;と&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;を非推奨化。これらの機能は未定義動作を引き起こし、間違った保証が行われ、よくないAPI設計が行われていたため、非推奨となる。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_storage.html&#34;&gt;std::algined_storage&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(T) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[sizeof(T)];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/type_traits/aligned_union.html&#34;&gt;std::aligned_union&lt;/a&gt;&lt;/code&gt;の代わりに&lt;code&gt;alignas(Ts...) &lt;a href=&#34;https://cpprefjp.github.io/reference/cstddef/byte.html&#34;&gt;std::byte&lt;/a&gt;[&lt;a href=&#34;https://cpprefjp.github.io/reference/algorithm/max.html&#34;&gt;std::max&lt;/a&gt;({sizeof(Ts)...})];&lt;/code&gt;を使用することを推奨する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;機能の削除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ガベージコレクションの実装にうまく役立てられなかった、ガベージコレクション実装のサポートをする以下の機能を削除する：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_reachable.html&#34;&gt;std::declare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_reachable.html&#34;&gt;std::undeclare_reachable()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/declare_no_pointers.html&#34;&gt;std::declare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/undeclare_no_pointers.html&#34;&gt;std::undeclare_no_pointers()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/get_pointer_safety.html&#34;&gt;std::get_pointer_safety()&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/memory/pointer_safety.html&#34;&gt;std::pointer_safety&lt;/a&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__STDCPP_STRICT_POINTER_SAFETY__&lt;/code&gt;マクロ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</content>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- vectorの非メンバ関数をconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_equal.html"/>
      <id>942b7b3d48e218199f98f246121eda9d1936231d:reference/vector/vector/op_equal.md</id>
      <updated>2022-10-06T14:59:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_equal.md b/reference/vector/vector/op_equal.md
index 758f84b44..a05215bf2 100644
--- a/reference/vector/vector/op_equal.md
+++ b/reference/vector/vector/op_equal.md
@@ -6,7 +6,12 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator==(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator==(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);           // (1) C++03
+
+  template &amp;lt;class T, class Allocator&amp;gt;
+  constexpr bool operator==(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                            const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++20
 }
 ```
 
@@ -32,11 +37,12 @@ namespace std {
 
 
 ## 例
+### 基本的な使い方 (C++11)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;vector&amp;gt;
 
-int main ()
+int main()
 {
   std::vector&amp;lt;int&amp;gt; v1 = {1, 2, 3};
   std::vector&amp;lt;int&amp;gt; v2 = {1, 2, 3};
@@ -52,14 +58,44 @@ int main ()
 }
 ```
 
-### 出力
+#### 出力
 ```
 true
 false
 ```
 
+### 基本的な使い方 (C++20 constexpr)
+```cpp example
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;vector&amp;gt;
+
+constexpr bool f()
+{
+  std::vector&amp;lt;int&amp;gt; v1 = {1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2 = {1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v3 = {1, 2, 3, 4};
+
+  // 要素数と要素の値が等しい
+  assert(v1 == v2);
+
+  // 要素の値は(左辺の要素数分まで)等しいが要素数が異なる
+  assert(!(v1 == v3));
+
+  return true;
+}
+
+int main()
+{
+  static_assert(f());
+}
+```
+
+#### 出力
+```
+```
+
+
 ## 参照
 - [LWG Issue 2257. Simplify container requirements with the new algorithms](http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2257)
     - C++14から、2つ目の範囲のendイテレータをとる`equal()`アルゴリズムを使用するようになった。
-
-
+- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt; -- vectorの非メンバ関数をconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_greater.html"/>
      <id>942b7b3d48e218199f98f246121eda9d1936231d:reference/vector/vector/op_greater.md</id>
      <updated>2022-10-06T14:59:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_greater.md b/reference/vector/vector/op_greater.md
index 40a967a8c..4b547b33b 100644
--- a/reference/vector/vector/op_greater.md
+++ b/reference/vector/vector/op_greater.md
@@ -6,7 +6,12 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;gt;(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;gt;(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                 const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);           // (1) C++03
+
+  template &amp;lt;class T, class Allocator&amp;gt;
+  constexpr bool operator&amp;gt;(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                           const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++20
 }
 ```
 
@@ -44,5 +49,4 @@ true
 ```
 
 ## 参照
-
-
+- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&gt;= -- vectorの非メンバ関数をconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_greater_equal.html"/>
      <id>942b7b3d48e218199f98f246121eda9d1936231d:reference/vector/vector/op_greater_equal.md</id>
      <updated>2022-10-06T14:59:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_greater_equal.md b/reference/vector/vector/op_greater_equal.md
index 7fc34781e..1b330b4cc 100644
--- a/reference/vector/vector/op_greater_equal.md
+++ b/reference/vector/vector/op_greater_equal.md
@@ -6,7 +6,12 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;gt;=(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;gt;=(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);           // (1) C++03
+
+  template &amp;lt;class T, class Allocator&amp;gt;
+  constexpr bool operator&amp;gt;=(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                            const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++20
 }
 ```
 
@@ -44,5 +49,4 @@ true
 ```
 
 ## 参照
-
-
+- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt; -- vectorの非メンバ関数をconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_less.html"/>
      <id>942b7b3d48e218199f98f246121eda9d1936231d:reference/vector/vector/op_less.md</id>
      <updated>2022-10-06T14:59:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_less.md b/reference/vector/vector/op_less.md
index 617fe23d1..fd305ed4a 100644
--- a/reference/vector/vector/op_less.md
+++ b/reference/vector/vector/op_less.md
@@ -6,7 +6,12 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;lt;(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;lt;(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                 const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);           // (1) C++03
+
+  template &amp;lt;class T, class Allocator&amp;gt;
+  constexpr bool operator&amp;lt;(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                           const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++20
 }
 ```
 
@@ -53,5 +58,4 @@ true
 ```
 
 ## 参照
-
-
+- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator&lt;= -- vectorの非メンバ関数をconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_less_equal.html"/>
      <id>942b7b3d48e218199f98f246121eda9d1936231d:reference/vector/vector/op_less_equal.md</id>
      <updated>2022-10-06T14:59:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_less_equal.md b/reference/vector/vector/op_less_equal.md
index acbcdd138..5fb810ab3 100644
--- a/reference/vector/vector/op_less_equal.md
+++ b/reference/vector/vector/op_less_equal.md
@@ -6,7 +6,12 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator&amp;lt;=(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x, const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator&amp;lt;=(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);           // (1) C++03
+
+  template &amp;lt;class T, class Allocator&amp;gt;
+  constexpr bool operator&amp;lt;=(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                            const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++20
 }
 ```
 
@@ -44,5 +49,4 @@ true
 ```
 
 ## 参照
-
-
+- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- vectorの非メンバ関数をconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/op_not_equal.html"/>
      <id>942b7b3d48e218199f98f246121eda9d1936231d:reference/vector/vector/op_not_equal.md</id>
      <updated>2022-10-06T14:59:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/op_not_equal.md b/reference/vector/vector/op_not_equal.md
index 58b0f356c..9f0fe6050 100644
--- a/reference/vector/vector/op_not_equal.md
+++ b/reference/vector/vector/op_not_equal.md
@@ -6,7 +6,12 @@
 ```cpp
 namespace std {
   template &amp;lt;class T, class Allocator&amp;gt;
-  bool operator!=(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);
+  bool operator!=(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                  const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y);           // (1) C++03
+
+  template &amp;lt;class T, class Allocator&amp;gt;
+  constexpr bool operator!=(const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; x,
+                            const vector&amp;lt;T, Allocator&amp;gt;&amp;amp; y); // (1) C++20
 }
 ```
 
@@ -27,6 +32,7 @@ namespace std {
 
 
 ## 例
+### 基本的な使い方 (C++11)
 ```cpp example
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;vector&amp;gt;
@@ -47,12 +53,38 @@ int main ()
 }
 ```
 
-### 出力
+#### 出力
 ```
 false
 true
 ```
 
-## 参照
 
+### 基本的な使い方 (C++20 constexpr)
+```cpp
+#include &amp;lt;cassert&amp;gt;
+#include &amp;lt;vector&amp;gt;
 
+constexpr bool f()
+{
+  std::vector&amp;lt;int&amp;gt; v1 = {1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v2 = {1, 2, 3};
+  std::vector&amp;lt;int&amp;gt; v3 = {1, 2, 3, 4};
+
+  // 要素の値は(左辺の要素数分まで)等しいが要素数が異なる
+  assert(v1 != v3);
+
+  // 要素数と要素の値が等しい
+  assert(!(v1 != v2));
+
+  return true;
+}
+
+int main()
+{
+  static_assert(f());
+}
+```
+
+## 参照
+- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>swap (非メンバ関数) -- vectorの非メンバ関数をconstexpr対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/vector/vector/swap_free.html"/>
      <id>942b7b3d48e218199f98f246121eda9d1936231d:reference/vector/vector/swap_free.md</id>
      <updated>2022-10-06T14:59:38+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/vector/vector/swap_free.md b/reference/vector/vector/swap_free.md
index 880cdad0d..81a2eefeb 100644
--- a/reference/vector/vector/swap_free.md
+++ b/reference/vector/vector/swap_free.md
@@ -11,6 +11,10 @@ namespace std {
   template &amp;lt;class T, class Allocator&amp;gt;
   void swap(vector&amp;lt;T,Allocator&amp;gt;&amp;amp; x, vector&amp;lt;T,Allocator&amp;gt;&amp;amp; y)
     noexcept(noexcept(x.swap(y)));                             // (1) C++17
+
+  template &amp;lt;class T, class Allocator&amp;gt;
+  constexpr void swap(vector&amp;lt;T,Allocator&amp;gt;&amp;amp; x, vector&amp;lt;T,Allocator&amp;gt;&amp;amp; y)
+    noexcept(noexcept(x.swap(y)));                             // (1) C++20
 }
 ```
 
@@ -65,3 +69,4 @@ v2 : {1 2 3 }
 ## 参照
 - [N4258 Cleaning-up noexcept in the Library, Rev 3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf)
     - `noexcept` 追加の経緯となる提案文書
+- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>allocator -- allocatorをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator.html"/>
      <id>ce7e3b09998973193b922486bc8b85b2726d8455:reference/memory/allocator.md</id>
      <updated>2022-10-06T14:37:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator.md b/reference/memory/allocator.md
index 082f4c4dd..6f40c0fce 100644
--- a/reference/memory/allocator.md
+++ b/reference/memory/allocator.md
@@ -41,7 +41,7 @@ C++11から：
 |---------------------------------------------|----------------------------------------------|-------|
 | [`(constructor)`](allocator/op_constructor.md) | コンストラクタ                          | |
 | [`(destructor)`](allocator/op_destructor.md) | デストラクタ                              | |
-| `operator=(const allocator&amp;amp;) = default`   | 代入演算子                                   | |
+| [`operator=`](allocator/op_assign.md)`    | 代入演算子                                   | |
 | [`allocate`](allocator/allocate.md)       | メモリを確保する                             | |
 | [`deallocate`](allocator/deallocate.md)   | メモリを解放する                             | |
 | [`address`](allocator/address.md)         | 変数のアドレスを取得する                     | C++17から非推奨&amp;lt;br/&amp;gt; C++20で削除 |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator= -- allocatorをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator/op_assign.html"/>
      <id>ce7e3b09998973193b922486bc8b85b2726d8455:reference/memory/allocator/op_assign.md</id>
      <updated>2022-10-06T14:37:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator/op_assign.md b/reference/memory/allocator/op_assign.md
new file mode 100644
index 000000000..4b753af31
--- /dev/null
+++ b/reference/memory/allocator/op_assign.md
@@ -0,0 +1,22 @@
+# operator=
+* memory[meta header]
+* std[meta namespace]
+* allocator[meta class]
+* function[meta id-type]
+
+```cpp
+allocator&amp;amp; operator=(const allocator&amp;amp;);                     // (1) C++03 (暗黙定義)
+allocator&amp;amp; operator=(const allocator&amp;amp;) = default;           // (1) C++11
+constexpr allocator&amp;amp; operator=(const allocator&amp;amp;) = default; // (1) C++20
+```
+
+## 概要
+代入する。
+
+
+## 戻り値
+代入後の`*this`を返す。
+
+
+## 参照
+- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator== -- allocatorをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator/op_equal.html"/>
      <id>ce7e3b09998973193b922486bc8b85b2726d8455:reference/memory/allocator/op_equal.md</id>
      <updated>2022-10-06T14:37:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator/op_equal.md b/reference/memory/allocator/op_equal.md
index 3cfb146f0..fc1e49887 100644
--- a/reference/memory/allocator/op_equal.md
+++ b/reference/memory/allocator/op_equal.md
@@ -5,13 +5,17 @@
 
 ```cpp
 namespace std {
-  // C++03
   template &amp;lt;class T1, class T2&amp;gt;
-  bool operator==(const allocator&amp;lt;T1&amp;gt;&amp;amp;, const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();
+  bool operator==(const allocator&amp;lt;T1&amp;gt;&amp;amp;,
+                  const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();           // (1) C++03
 
-  // C++11
   template &amp;lt;class T, class U&amp;gt;
-  bool operator==(const allocator&amp;lt;T&amp;gt;&amp;amp;, const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;
+  bool operator==(const allocator&amp;lt;T&amp;gt;&amp;amp;,
+                  const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;           // (1) C++11
+
+  template &amp;lt;class T, class U&amp;gt;
+  constexpr bool operator==(const allocator&amp;lt;T&amp;gt;&amp;amp;,
+                            const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept; // (1) C++20
 }
 ```
 
@@ -48,3 +52,5 @@ equal
 ```
 
 
+## 参照
+- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>operator!= -- allocatorをconstexprに対応 #688</title>
      <link href="https://cpprefjp.github.io/reference/memory/allocator/op_not_equal.html"/>
      <id>ce7e3b09998973193b922486bc8b85b2726d8455:reference/memory/allocator/op_not_equal.md</id>
      <updated>2022-10-06T14:37:30+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/memory/allocator/op_not_equal.md b/reference/memory/allocator/op_not_equal.md
index d819aa05f..dbf1ec6ec 100644
--- a/reference/memory/allocator/op_not_equal.md
+++ b/reference/memory/allocator/op_not_equal.md
@@ -5,13 +5,17 @@
 
 ```cpp
 namespace std {
-  // C++03
   template &amp;lt;class T1, class T2&amp;gt;
-  bool operator!=(const allocator&amp;lt;T1&amp;gt;&amp;amp;, const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();
+  bool operator!=(const allocator&amp;lt;T1&amp;gt;&amp;amp;,
+                  const allocator&amp;lt;T2&amp;gt;&amp;amp;) throw();           // (1) C++03
 
-  // C++11
   template &amp;lt;class T, class U&amp;gt;
-  bool operator!=(const allocator&amp;lt;T&amp;gt;&amp;amp;, const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;
+  bool operator!=(const allocator&amp;lt;T&amp;gt;&amp;amp;,
+                  const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept;           // (1) C++11
+
+  template &amp;lt;class T, class U&amp;gt;
+  constexpr bool operator!=(const allocator&amp;lt;T&amp;gt;&amp;amp;,
+                            const allocator&amp;lt;U&amp;gt;&amp;amp;) noexcept; // (1) C++20
 }
 ```
 
@@ -48,3 +52,5 @@ equal
 ```
 
 
+## 参照
+- [P0784R7 More constexpr containers](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html)
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Akira Takahashi</name>
        <email>faithandbrave@gmail.com</email>
      </author>
    </entry>
  
</feed>